
Eth_UDP_Client_v1.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fca8  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000023bc  0800fea8  0800fea8  0001fea8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012264  08012264  000301e4  2**0
                  CONTENTS
  4 .ARM          00000008  08012264  08012264  00022264  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801226c  0801226c  000301e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801226c  0801226c  0002226c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012270  08012270  00022270  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  08012274  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000ccd4  200001e4  08012458  000301e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000ceb8  08012458  0003ceb8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000301e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003ac80  00000000  00000000  00030212  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00006f28  00000000  00000000  0006ae92  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002050  00000000  00000000  00071dc0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001e10  00000000  00000000  00073e10  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0003788a  00000000  00000000  00075c20  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00028ec4  00000000  00000000  000ad4aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0011eee7  00000000  00000000  000d636e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001f5255  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008c1c  00000000  00000000  001f52d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .stab         0000009c  00000000  00000000  001fdeec  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      0000014d  00000000  00000000  001fdf88  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001e4 	.word	0x200001e4
 800021c:	00000000 	.word	0x00000000
 8000220:	0800fe90 	.word	0x0800fe90

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001e8 	.word	0x200001e8
 800023c:	0800fe90 	.word	0x0800fe90

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b972 	b.w	80005ec <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	4688      	mov	r8, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14b      	bne.n	80003c6 <__udivmoddi4+0xa6>
 800032e:	428a      	cmp	r2, r1
 8000330:	4615      	mov	r5, r2
 8000332:	d967      	bls.n	8000404 <__udivmoddi4+0xe4>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0720 	rsb	r7, r2, #32
 800033e:	fa01 f302 	lsl.w	r3, r1, r2
 8000342:	fa20 f707 	lsr.w	r7, r0, r7
 8000346:	4095      	lsls	r5, r2
 8000348:	ea47 0803 	orr.w	r8, r7, r3
 800034c:	4094      	lsls	r4, r2
 800034e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fbb8 f7fe 	udiv	r7, r8, lr
 8000358:	fa1f fc85 	uxth.w	ip, r5
 800035c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000360:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000364:	fb07 f10c 	mul.w	r1, r7, ip
 8000368:	4299      	cmp	r1, r3
 800036a:	d909      	bls.n	8000380 <__udivmoddi4+0x60>
 800036c:	18eb      	adds	r3, r5, r3
 800036e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000372:	f080 811b 	bcs.w	80005ac <__udivmoddi4+0x28c>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 8118 	bls.w	80005ac <__udivmoddi4+0x28c>
 800037c:	3f02      	subs	r7, #2
 800037e:	442b      	add	r3, r5
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0fe 	udiv	r0, r3, lr
 8000388:	fb0e 3310 	mls	r3, lr, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 fc0c 	mul.w	ip, r0, ip
 8000394:	45a4      	cmp	ip, r4
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x8c>
 8000398:	192c      	adds	r4, r5, r4
 800039a:	f100 33ff 	add.w	r3, r0, #4294967295
 800039e:	f080 8107 	bcs.w	80005b0 <__udivmoddi4+0x290>
 80003a2:	45a4      	cmp	ip, r4
 80003a4:	f240 8104 	bls.w	80005b0 <__udivmoddi4+0x290>
 80003a8:	3802      	subs	r0, #2
 80003aa:	442c      	add	r4, r5
 80003ac:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003b0:	eba4 040c 	sub.w	r4, r4, ip
 80003b4:	2700      	movs	r7, #0
 80003b6:	b11e      	cbz	r6, 80003c0 <__udivmoddi4+0xa0>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c6 4300 	strd	r4, r3, [r6]
 80003c0:	4639      	mov	r1, r7
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0xbe>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80eb 	beq.w	80005a6 <__udivmoddi4+0x286>
 80003d0:	2700      	movs	r7, #0
 80003d2:	e9c6 0100 	strd	r0, r1, [r6]
 80003d6:	4638      	mov	r0, r7
 80003d8:	4639      	mov	r1, r7
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f783 	clz	r7, r3
 80003e2:	2f00      	cmp	r7, #0
 80003e4:	d147      	bne.n	8000476 <__udivmoddi4+0x156>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0xd0>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80fa 	bhi.w	80005e4 <__udivmoddi4+0x2c4>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0303 	sbc.w	r3, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	4698      	mov	r8, r3
 80003fa:	2e00      	cmp	r6, #0
 80003fc:	d0e0      	beq.n	80003c0 <__udivmoddi4+0xa0>
 80003fe:	e9c6 4800 	strd	r4, r8, [r6]
 8000402:	e7dd      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000404:	b902      	cbnz	r2, 8000408 <__udivmoddi4+0xe8>
 8000406:	deff      	udf	#255	; 0xff
 8000408:	fab2 f282 	clz	r2, r2
 800040c:	2a00      	cmp	r2, #0
 800040e:	f040 808f 	bne.w	8000530 <__udivmoddi4+0x210>
 8000412:	1b49      	subs	r1, r1, r5
 8000414:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000418:	fa1f f885 	uxth.w	r8, r5
 800041c:	2701      	movs	r7, #1
 800041e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000422:	0c23      	lsrs	r3, r4, #16
 8000424:	fb0e 111c 	mls	r1, lr, ip, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb08 f10c 	mul.w	r1, r8, ip
 8000430:	4299      	cmp	r1, r3
 8000432:	d907      	bls.n	8000444 <__udivmoddi4+0x124>
 8000434:	18eb      	adds	r3, r5, r3
 8000436:	f10c 30ff 	add.w	r0, ip, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4299      	cmp	r1, r3
 800043e:	f200 80cd 	bhi.w	80005dc <__udivmoddi4+0x2bc>
 8000442:	4684      	mov	ip, r0
 8000444:	1a59      	subs	r1, r3, r1
 8000446:	b2a3      	uxth	r3, r4
 8000448:	fbb1 f0fe 	udiv	r0, r1, lr
 800044c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000450:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000454:	fb08 f800 	mul.w	r8, r8, r0
 8000458:	45a0      	cmp	r8, r4
 800045a:	d907      	bls.n	800046c <__udivmoddi4+0x14c>
 800045c:	192c      	adds	r4, r5, r4
 800045e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000462:	d202      	bcs.n	800046a <__udivmoddi4+0x14a>
 8000464:	45a0      	cmp	r8, r4
 8000466:	f200 80b6 	bhi.w	80005d6 <__udivmoddi4+0x2b6>
 800046a:	4618      	mov	r0, r3
 800046c:	eba4 0408 	sub.w	r4, r4, r8
 8000470:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000474:	e79f      	b.n	80003b6 <__udivmoddi4+0x96>
 8000476:	f1c7 0c20 	rsb	ip, r7, #32
 800047a:	40bb      	lsls	r3, r7
 800047c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000480:	ea4e 0e03 	orr.w	lr, lr, r3
 8000484:	fa01 f407 	lsl.w	r4, r1, r7
 8000488:	fa20 f50c 	lsr.w	r5, r0, ip
 800048c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000490:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000494:	4325      	orrs	r5, r4
 8000496:	fbb3 f9f8 	udiv	r9, r3, r8
 800049a:	0c2c      	lsrs	r4, r5, #16
 800049c:	fb08 3319 	mls	r3, r8, r9, r3
 80004a0:	fa1f fa8e 	uxth.w	sl, lr
 80004a4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80004a8:	fb09 f40a 	mul.w	r4, r9, sl
 80004ac:	429c      	cmp	r4, r3
 80004ae:	fa02 f207 	lsl.w	r2, r2, r7
 80004b2:	fa00 f107 	lsl.w	r1, r0, r7
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1e 0303 	adds.w	r3, lr, r3
 80004bc:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c0:	f080 8087 	bcs.w	80005d2 <__udivmoddi4+0x2b2>
 80004c4:	429c      	cmp	r4, r3
 80004c6:	f240 8084 	bls.w	80005d2 <__udivmoddi4+0x2b2>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4473      	add	r3, lr
 80004d0:	1b1b      	subs	r3, r3, r4
 80004d2:	b2ad      	uxth	r5, r5
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3310 	mls	r3, r8, r0, r3
 80004dc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004e0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004e4:	45a2      	cmp	sl, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80004f0:	d26b      	bcs.n	80005ca <__udivmoddi4+0x2aa>
 80004f2:	45a2      	cmp	sl, r4
 80004f4:	d969      	bls.n	80005ca <__udivmoddi4+0x2aa>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4474      	add	r4, lr
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000502:	eba4 040a 	sub.w	r4, r4, sl
 8000506:	454c      	cmp	r4, r9
 8000508:	46c2      	mov	sl, r8
 800050a:	464b      	mov	r3, r9
 800050c:	d354      	bcc.n	80005b8 <__udivmoddi4+0x298>
 800050e:	d051      	beq.n	80005b4 <__udivmoddi4+0x294>
 8000510:	2e00      	cmp	r6, #0
 8000512:	d069      	beq.n	80005e8 <__udivmoddi4+0x2c8>
 8000514:	ebb1 050a 	subs.w	r5, r1, sl
 8000518:	eb64 0403 	sbc.w	r4, r4, r3
 800051c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000520:	40fd      	lsrs	r5, r7
 8000522:	40fc      	lsrs	r4, r7
 8000524:	ea4c 0505 	orr.w	r5, ip, r5
 8000528:	e9c6 5400 	strd	r5, r4, [r6]
 800052c:	2700      	movs	r7, #0
 800052e:	e747      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000530:	f1c2 0320 	rsb	r3, r2, #32
 8000534:	fa20 f703 	lsr.w	r7, r0, r3
 8000538:	4095      	lsls	r5, r2
 800053a:	fa01 f002 	lsl.w	r0, r1, r2
 800053e:	fa21 f303 	lsr.w	r3, r1, r3
 8000542:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000546:	4338      	orrs	r0, r7
 8000548:	0c01      	lsrs	r1, r0, #16
 800054a:	fbb3 f7fe 	udiv	r7, r3, lr
 800054e:	fa1f f885 	uxth.w	r8, r5
 8000552:	fb0e 3317 	mls	r3, lr, r7, r3
 8000556:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800055a:	fb07 f308 	mul.w	r3, r7, r8
 800055e:	428b      	cmp	r3, r1
 8000560:	fa04 f402 	lsl.w	r4, r4, r2
 8000564:	d907      	bls.n	8000576 <__udivmoddi4+0x256>
 8000566:	1869      	adds	r1, r5, r1
 8000568:	f107 3cff 	add.w	ip, r7, #4294967295
 800056c:	d22f      	bcs.n	80005ce <__udivmoddi4+0x2ae>
 800056e:	428b      	cmp	r3, r1
 8000570:	d92d      	bls.n	80005ce <__udivmoddi4+0x2ae>
 8000572:	3f02      	subs	r7, #2
 8000574:	4429      	add	r1, r5
 8000576:	1acb      	subs	r3, r1, r3
 8000578:	b281      	uxth	r1, r0
 800057a:	fbb3 f0fe 	udiv	r0, r3, lr
 800057e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000582:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000586:	fb00 f308 	mul.w	r3, r0, r8
 800058a:	428b      	cmp	r3, r1
 800058c:	d907      	bls.n	800059e <__udivmoddi4+0x27e>
 800058e:	1869      	adds	r1, r5, r1
 8000590:	f100 3cff 	add.w	ip, r0, #4294967295
 8000594:	d217      	bcs.n	80005c6 <__udivmoddi4+0x2a6>
 8000596:	428b      	cmp	r3, r1
 8000598:	d915      	bls.n	80005c6 <__udivmoddi4+0x2a6>
 800059a:	3802      	subs	r0, #2
 800059c:	4429      	add	r1, r5
 800059e:	1ac9      	subs	r1, r1, r3
 80005a0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80005a4:	e73b      	b.n	800041e <__udivmoddi4+0xfe>
 80005a6:	4637      	mov	r7, r6
 80005a8:	4630      	mov	r0, r6
 80005aa:	e709      	b.n	80003c0 <__udivmoddi4+0xa0>
 80005ac:	4607      	mov	r7, r0
 80005ae:	e6e7      	b.n	8000380 <__udivmoddi4+0x60>
 80005b0:	4618      	mov	r0, r3
 80005b2:	e6fb      	b.n	80003ac <__udivmoddi4+0x8c>
 80005b4:	4541      	cmp	r1, r8
 80005b6:	d2ab      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005b8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005bc:	eb69 020e 	sbc.w	r2, r9, lr
 80005c0:	3801      	subs	r0, #1
 80005c2:	4613      	mov	r3, r2
 80005c4:	e7a4      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c6:	4660      	mov	r0, ip
 80005c8:	e7e9      	b.n	800059e <__udivmoddi4+0x27e>
 80005ca:	4618      	mov	r0, r3
 80005cc:	e795      	b.n	80004fa <__udivmoddi4+0x1da>
 80005ce:	4667      	mov	r7, ip
 80005d0:	e7d1      	b.n	8000576 <__udivmoddi4+0x256>
 80005d2:	4681      	mov	r9, r0
 80005d4:	e77c      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d6:	3802      	subs	r0, #2
 80005d8:	442c      	add	r4, r5
 80005da:	e747      	b.n	800046c <__udivmoddi4+0x14c>
 80005dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005e0:	442b      	add	r3, r5
 80005e2:	e72f      	b.n	8000444 <__udivmoddi4+0x124>
 80005e4:	4638      	mov	r0, r7
 80005e6:	e708      	b.n	80003fa <__udivmoddi4+0xda>
 80005e8:	4637      	mov	r7, r6
 80005ea:	e6e9      	b.n	80003c0 <__udivmoddi4+0xa0>

080005ec <__aeabi_idiv0>:
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop

080005f0 <vApplicationIdleHook>:
/* Hook prototypes */
void vApplicationIdleHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 80005f0:	b480      	push	{r7}
 80005f2:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 80005f4:	bf00      	nop
 80005f6:	46bd      	mov	sp, r7
 80005f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fc:	4770      	bx	lr
	...

08000600 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000600:	b480      	push	{r7}
 8000602:	b085      	sub	sp, #20
 8000604:	af00      	add	r7, sp, #0
 8000606:	60f8      	str	r0, [r7, #12]
 8000608:	60b9      	str	r1, [r7, #8]
 800060a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800060c:	68fb      	ldr	r3, [r7, #12]
 800060e:	4a07      	ldr	r2, [pc, #28]	; (800062c <vApplicationGetIdleTaskMemory+0x2c>)
 8000610:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000612:	68bb      	ldr	r3, [r7, #8]
 8000614:	4a06      	ldr	r2, [pc, #24]	; (8000630 <vApplicationGetIdleTaskMemory+0x30>)
 8000616:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	2280      	movs	r2, #128	; 0x80
 800061c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800061e:	bf00      	nop
 8000620:	3714      	adds	r7, #20
 8000622:	46bd      	mov	sp, r7
 8000624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000628:	4770      	bx	lr
 800062a:	bf00      	nop
 800062c:	20000200 	.word	0x20000200
 8000630:	20000264 	.word	0x20000264

08000634 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 8000634:	b480      	push	{r7}
 8000636:	b085      	sub	sp, #20
 8000638:	af00      	add	r7, sp, #0
 800063a:	60f8      	str	r0, [r7, #12]
 800063c:	60b9      	str	r1, [r7, #8]
 800063e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8000640:	68fb      	ldr	r3, [r7, #12]
 8000642:	4a07      	ldr	r2, [pc, #28]	; (8000660 <vApplicationGetTimerTaskMemory+0x2c>)
 8000644:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 8000646:	68bb      	ldr	r3, [r7, #8]
 8000648:	4a06      	ldr	r2, [pc, #24]	; (8000664 <vApplicationGetTimerTaskMemory+0x30>)
 800064a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000652:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000654:	bf00      	nop
 8000656:	3714      	adds	r7, #20
 8000658:	46bd      	mov	sp, r7
 800065a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065e:	4770      	bx	lr
 8000660:	20000464 	.word	0x20000464
 8000664:	200004c8 	.word	0x200004c8

08000668 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000668:	b5b0      	push	{r4, r5, r7, lr}
 800066a:	b08e      	sub	sp, #56	; 0x38
 800066c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800066e:	f000 fb00 	bl	8000c72 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000672:	f000 f833 	bl	80006dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000676:	f000 f8f1 	bl	800085c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800067a:	f000 f8bf 	bl	80007fc <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  // Initialize LWIP
  MX_LWIP_Init();
 800067e:	f004 f867 	bl	8004750 <MX_LWIP_Init>

  char stri[] = "\n---------- Programm started!!! ----------\n\n\r";
 8000682:	4b12      	ldr	r3, [pc, #72]	; (80006cc <main+0x64>)
 8000684:	463c      	mov	r4, r7
 8000686:	461d      	mov	r5, r3
 8000688:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800068a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800068c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800068e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000690:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000694:	c407      	stmia	r4!, {r0, r1, r2}
 8000696:	8023      	strh	r3, [r4, #0]
  HAL_UART_Transmit(&huart3, (uint8_t*)stri, strlen(stri), HAL_MAX_DELAY);
 8000698:	463b      	mov	r3, r7
 800069a:	4618      	mov	r0, r3
 800069c:	f7ff fdd0 	bl	8000240 <strlen>
 80006a0:	4603      	mov	r3, r0
 80006a2:	b29a      	uxth	r2, r3
 80006a4:	4639      	mov	r1, r7
 80006a6:	f04f 33ff 	mov.w	r3, #4294967295
 80006aa:	4809      	ldr	r0, [pc, #36]	; (80006d0 <main+0x68>)
 80006ac:	f003 fbf4 	bl	8003e98 <HAL_UART_Transmit>
//  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
//  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  xTaskCreate(task_UDPClient, "task_UDPClient", configMINIMAL_STACK_SIZE*4, NULL, 4, NULL);	// Thread/Task for UDP Client
 80006b0:	2300      	movs	r3, #0
 80006b2:	9301      	str	r3, [sp, #4]
 80006b4:	2304      	movs	r3, #4
 80006b6:	9300      	str	r3, [sp, #0]
 80006b8:	2300      	movs	r3, #0
 80006ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006be:	4905      	ldr	r1, [pc, #20]	; (80006d4 <main+0x6c>)
 80006c0:	4805      	ldr	r0, [pc, #20]	; (80006d8 <main+0x70>)
 80006c2:	f006 fa2b 	bl	8006b1c <xTaskCreate>

  /***** Starting Scheduler *****/
  vTaskStartScheduler();
 80006c6:	f006 fb97 	bl	8006df8 <vTaskStartScheduler>
//  osKernelStart();

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006ca:	e7fe      	b.n	80006ca <main+0x62>
 80006cc:	0800feb8 	.word	0x0800feb8
 80006d0:	200048b4 	.word	0x200048b4
 80006d4:	0800fea8 	.word	0x0800fea8
 80006d8:	08000939 	.word	0x08000939

080006dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b0b8      	sub	sp, #224	; 0xe0
 80006e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006e2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80006e6:	2234      	movs	r2, #52	; 0x34
 80006e8:	2100      	movs	r1, #0
 80006ea:	4618      	mov	r0, r3
 80006ec:	f00e fc5a 	bl	800efa4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006f0:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80006f4:	2200      	movs	r2, #0
 80006f6:	601a      	str	r2, [r3, #0]
 80006f8:	605a      	str	r2, [r3, #4]
 80006fa:	609a      	str	r2, [r3, #8]
 80006fc:	60da      	str	r2, [r3, #12]
 80006fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000700:	f107 0308 	add.w	r3, r7, #8
 8000704:	2290      	movs	r2, #144	; 0x90
 8000706:	2100      	movs	r1, #0
 8000708:	4618      	mov	r0, r3
 800070a:	f00e fc4b 	bl	800efa4 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800070e:	4b39      	ldr	r3, [pc, #228]	; (80007f4 <SystemClock_Config+0x118>)
 8000710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000712:	4a38      	ldr	r2, [pc, #224]	; (80007f4 <SystemClock_Config+0x118>)
 8000714:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000718:	6413      	str	r3, [r2, #64]	; 0x40
 800071a:	4b36      	ldr	r3, [pc, #216]	; (80007f4 <SystemClock_Config+0x118>)
 800071c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800071e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000722:	607b      	str	r3, [r7, #4]
 8000724:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000726:	4b34      	ldr	r3, [pc, #208]	; (80007f8 <SystemClock_Config+0x11c>)
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	4a33      	ldr	r2, [pc, #204]	; (80007f8 <SystemClock_Config+0x11c>)
 800072c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000730:	6013      	str	r3, [r2, #0]
 8000732:	4b31      	ldr	r3, [pc, #196]	; (80007f8 <SystemClock_Config+0x11c>)
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800073a:	603b      	str	r3, [r7, #0]
 800073c:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800073e:	2301      	movs	r3, #1
 8000740:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000744:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000748:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800074c:	2302      	movs	r3, #2
 800074e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000752:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000756:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 4;
 800075a:	2304      	movs	r3, #4
 800075c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000760:	23d8      	movs	r3, #216	; 0xd8
 8000762:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000766:	2302      	movs	r3, #2
 8000768:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800076c:	2302      	movs	r3, #2
 800076e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000772:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000776:	4618      	mov	r0, r3
 8000778:	f001 ff60 	bl	800263c <HAL_RCC_OscConfig>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000782:	f000 f93b 	bl	80009fc <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000786:	f001 ff09 	bl	800259c <HAL_PWREx_EnableOverDrive>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8000790:	f000 f934 	bl	80009fc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000794:	230f      	movs	r3, #15
 8000796:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800079a:	2302      	movs	r3, #2
 800079c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007a0:	2300      	movs	r3, #0
 80007a2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007a6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007aa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007b2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80007b6:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80007ba:	2107      	movs	r1, #7
 80007bc:	4618      	mov	r0, r3
 80007be:	f002 f9eb 	bl	8002b98 <HAL_RCC_ClockConfig>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <SystemClock_Config+0xf0>
  {
    Error_Handler();
 80007c8:	f000 f918 	bl	80009fc <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80007cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80007d0:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80007d2:	2300      	movs	r3, #0
 80007d4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80007d6:	f107 0308 	add.w	r3, r7, #8
 80007da:	4618      	mov	r0, r3
 80007dc:	f002 fc06 	bl	8002fec <HAL_RCCEx_PeriphCLKConfig>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <SystemClock_Config+0x10e>
  {
    Error_Handler();
 80007e6:	f000 f909 	bl	80009fc <Error_Handler>
  }
}
 80007ea:	bf00      	nop
 80007ec:	37e0      	adds	r7, #224	; 0xe0
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	40023800 	.word	0x40023800
 80007f8:	40007000 	.word	0x40007000

080007fc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000800:	4b14      	ldr	r3, [pc, #80]	; (8000854 <MX_USART3_UART_Init+0x58>)
 8000802:	4a15      	ldr	r2, [pc, #84]	; (8000858 <MX_USART3_UART_Init+0x5c>)
 8000804:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000806:	4b13      	ldr	r3, [pc, #76]	; (8000854 <MX_USART3_UART_Init+0x58>)
 8000808:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800080c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800080e:	4b11      	ldr	r3, [pc, #68]	; (8000854 <MX_USART3_UART_Init+0x58>)
 8000810:	2200      	movs	r2, #0
 8000812:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000814:	4b0f      	ldr	r3, [pc, #60]	; (8000854 <MX_USART3_UART_Init+0x58>)
 8000816:	2200      	movs	r2, #0
 8000818:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800081a:	4b0e      	ldr	r3, [pc, #56]	; (8000854 <MX_USART3_UART_Init+0x58>)
 800081c:	2200      	movs	r2, #0
 800081e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000820:	4b0c      	ldr	r3, [pc, #48]	; (8000854 <MX_USART3_UART_Init+0x58>)
 8000822:	220c      	movs	r2, #12
 8000824:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000826:	4b0b      	ldr	r3, [pc, #44]	; (8000854 <MX_USART3_UART_Init+0x58>)
 8000828:	2200      	movs	r2, #0
 800082a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800082c:	4b09      	ldr	r3, [pc, #36]	; (8000854 <MX_USART3_UART_Init+0x58>)
 800082e:	2200      	movs	r2, #0
 8000830:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000832:	4b08      	ldr	r3, [pc, #32]	; (8000854 <MX_USART3_UART_Init+0x58>)
 8000834:	2200      	movs	r2, #0
 8000836:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000838:	4b06      	ldr	r3, [pc, #24]	; (8000854 <MX_USART3_UART_Init+0x58>)
 800083a:	2200      	movs	r2, #0
 800083c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800083e:	4805      	ldr	r0, [pc, #20]	; (8000854 <MX_USART3_UART_Init+0x58>)
 8000840:	f003 fadc 	bl	8003dfc <HAL_UART_Init>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d001      	beq.n	800084e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800084a:	f000 f8d7 	bl	80009fc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800084e:	bf00      	nop
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	200048b4 	.word	0x200048b4
 8000858:	40004800 	.word	0x40004800

0800085c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b08c      	sub	sp, #48	; 0x30
 8000860:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000862:	f107 031c 	add.w	r3, r7, #28
 8000866:	2200      	movs	r2, #0
 8000868:	601a      	str	r2, [r3, #0]
 800086a:	605a      	str	r2, [r3, #4]
 800086c:	609a      	str	r2, [r3, #8]
 800086e:	60da      	str	r2, [r3, #12]
 8000870:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000872:	4b2f      	ldr	r3, [pc, #188]	; (8000930 <MX_GPIO_Init+0xd4>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000876:	4a2e      	ldr	r2, [pc, #184]	; (8000930 <MX_GPIO_Init+0xd4>)
 8000878:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800087c:	6313      	str	r3, [r2, #48]	; 0x30
 800087e:	4b2c      	ldr	r3, [pc, #176]	; (8000930 <MX_GPIO_Init+0xd4>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000882:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000886:	61bb      	str	r3, [r7, #24]
 8000888:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800088a:	4b29      	ldr	r3, [pc, #164]	; (8000930 <MX_GPIO_Init+0xd4>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088e:	4a28      	ldr	r2, [pc, #160]	; (8000930 <MX_GPIO_Init+0xd4>)
 8000890:	f043 0304 	orr.w	r3, r3, #4
 8000894:	6313      	str	r3, [r2, #48]	; 0x30
 8000896:	4b26      	ldr	r3, [pc, #152]	; (8000930 <MX_GPIO_Init+0xd4>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089a:	f003 0304 	and.w	r3, r3, #4
 800089e:	617b      	str	r3, [r7, #20]
 80008a0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008a2:	4b23      	ldr	r3, [pc, #140]	; (8000930 <MX_GPIO_Init+0xd4>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a6:	4a22      	ldr	r2, [pc, #136]	; (8000930 <MX_GPIO_Init+0xd4>)
 80008a8:	f043 0301 	orr.w	r3, r3, #1
 80008ac:	6313      	str	r3, [r2, #48]	; 0x30
 80008ae:	4b20      	ldr	r3, [pc, #128]	; (8000930 <MX_GPIO_Init+0xd4>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b2:	f003 0301 	and.w	r3, r3, #1
 80008b6:	613b      	str	r3, [r7, #16]
 80008b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ba:	4b1d      	ldr	r3, [pc, #116]	; (8000930 <MX_GPIO_Init+0xd4>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008be:	4a1c      	ldr	r2, [pc, #112]	; (8000930 <MX_GPIO_Init+0xd4>)
 80008c0:	f043 0302 	orr.w	r3, r3, #2
 80008c4:	6313      	str	r3, [r2, #48]	; 0x30
 80008c6:	4b1a      	ldr	r3, [pc, #104]	; (8000930 <MX_GPIO_Init+0xd4>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ca:	f003 0302 	and.w	r3, r3, #2
 80008ce:	60fb      	str	r3, [r7, #12]
 80008d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008d2:	4b17      	ldr	r3, [pc, #92]	; (8000930 <MX_GPIO_Init+0xd4>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d6:	4a16      	ldr	r2, [pc, #88]	; (8000930 <MX_GPIO_Init+0xd4>)
 80008d8:	f043 0308 	orr.w	r3, r3, #8
 80008dc:	6313      	str	r3, [r2, #48]	; 0x30
 80008de:	4b14      	ldr	r3, [pc, #80]	; (8000930 <MX_GPIO_Init+0xd4>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e2:	f003 0308 	and.w	r3, r3, #8
 80008e6:	60bb      	str	r3, [r7, #8]
 80008e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008ea:	4b11      	ldr	r3, [pc, #68]	; (8000930 <MX_GPIO_Init+0xd4>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ee:	4a10      	ldr	r2, [pc, #64]	; (8000930 <MX_GPIO_Init+0xd4>)
 80008f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008f4:	6313      	str	r3, [r2, #48]	; 0x30
 80008f6:	4b0e      	ldr	r3, [pc, #56]	; (8000930 <MX_GPIO_Init+0xd4>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008fe:	607b      	str	r3, [r7, #4]
 8000900:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000902:	2200      	movs	r2, #0
 8000904:	2101      	movs	r1, #1
 8000906:	480b      	ldr	r0, [pc, #44]	; (8000934 <MX_GPIO_Init+0xd8>)
 8000908:	f001 fe14 	bl	8002534 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800090c:	2301      	movs	r3, #1
 800090e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000910:	2301      	movs	r3, #1
 8000912:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000914:	2300      	movs	r3, #0
 8000916:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000918:	2300      	movs	r3, #0
 800091a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800091c:	f107 031c 	add.w	r3, r7, #28
 8000920:	4619      	mov	r1, r3
 8000922:	4804      	ldr	r0, [pc, #16]	; (8000934 <MX_GPIO_Init+0xd8>)
 8000924:	f001 fc5c 	bl	80021e0 <HAL_GPIO_Init>

}
 8000928:	bf00      	nop
 800092a:	3730      	adds	r7, #48	; 0x30
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}
 8000930:	40023800 	.word	0x40023800
 8000934:	40020400 	.word	0x40020400

08000938 <task_UDPClient>:
 * 		- Makes connection with Client
 * 		- Wait for msg from the Client
 * 		- Sends Hello msg to Client on receiving any msg from the Client
 */
void task_UDPClient(void *pvParameters)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b0a8      	sub	sp, #160	; 0xa0
 800093c:	af02      	add	r7, sp, #8
 800093e:	6078      	str	r0, [r7, #4]
	struct sockaddr_in 	servaddr_toConn, cliaddr;		// Struct for the UDP-Server and for this Client
	int					numBytes;				// Number of Bytes sent/received
	char 				buff[MAXBUFFLEN];		// Buffer to save Rx/Tx Data

	/* --- 1. Create UDP Socket ------------------------------------------------*/
	sockfd = socket(AF_INET, SOCK_DGRAM, 0);
 8000940:	2200      	movs	r2, #0
 8000942:	2102      	movs	r1, #2
 8000944:	2002      	movs	r0, #2
 8000946:	f008 fe01 	bl	800954c <lwip_socket>
 800094a:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
	if(sockfd == -1)
 800094e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000952:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000956:	d102      	bne.n	800095e <task_UDPClient+0x26>
	{
		exit(0);
 8000958:	2000      	movs	r0, #0
 800095a:	f00e fab1 	bl	800eec0 <exit>
	}

	// Assignments to servaddr
	servaddr_toConn.sin_family = AF_INET;					// Address-Family -> Internet
 800095e:	2302      	movs	r3, #2
 8000960:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
	servaddr_toConn.sin_addr.s_addr = inet_addr(SERVADDR); 	// Auto-Fill with MCU-Board IP-Address
 8000964:	4819      	ldr	r0, [pc, #100]	; (80009cc <task_UDPClient+0x94>)
 8000966:	f00d f8a8 	bl	800daba <ipaddr_addr>
 800096a:	4603      	mov	r3, r0
 800096c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	servaddr_toConn.sin_port = htons(SERV_PORT);			// The Server port
 8000970:	f640 106e 	movw	r0, #2414	; 0x96e
 8000974:	f009 f93a 	bl	8009bec <lwip_htons>
 8000978:	4603      	mov	r3, r0
 800097a:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82

	/****** Endless-Loop *****/
	while(1)
	{
		// Filling Buffer-Memory with 0 -> Clearing Buffer-Memory
		memset(buff, 0, sizeof(buff));
 800097e:	f107 030c 	add.w	r3, r7, #12
 8000982:	2264      	movs	r2, #100	; 0x64
 8000984:	2100      	movs	r1, #0
 8000986:	4618      	mov	r0, r3
 8000988:	f00e fb0c 	bl	800efa4 <memset>
//		{
//			exit(1);
//		}

		/* --- Sending to Client -----------------------------------------------*/
		int n = sendto(sockfd, "Hello from Client!\n", 20, 0, (struct sockaddr *)&servaddr_toConn, sizeof(struct sockaddr));
 800098c:	2310      	movs	r3, #16
 800098e:	9301      	str	r3, [sp, #4]
 8000990:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8000994:	9300      	str	r3, [sp, #0]
 8000996:	2300      	movs	r3, #0
 8000998:	2214      	movs	r2, #20
 800099a:	490d      	ldr	r1, [pc, #52]	; (80009d0 <task_UDPClient+0x98>)
 800099c:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 80009a0:	f008 fd1c 	bl	80093dc <lwip_sendto>
 80009a4:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
		if(n == -1)
 80009a8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80009ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009b0:	d103      	bne.n	80009ba <task_UDPClient+0x82>
		{
			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 80009b2:	2101      	movs	r1, #1
 80009b4:	4807      	ldr	r0, [pc, #28]	; (80009d4 <task_UDPClient+0x9c>)
 80009b6:	f001 fdd6 	bl	8002566 <HAL_GPIO_TogglePin>
		}

		// Toggle Green LED after sending out msg to the Client
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 80009ba:	2101      	movs	r1, #1
 80009bc:	4805      	ldr	r0, [pc, #20]	; (80009d4 <task_UDPClient+0x9c>)
 80009be:	f001 fdd2 	bl	8002566 <HAL_GPIO_TogglePin>

		HAL_Delay(1000);
 80009c2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009c6:	f000 f981 	bl	8000ccc <HAL_Delay>
	{
 80009ca:	e7d8      	b.n	800097e <task_UDPClient+0x46>
 80009cc:	0800fee8 	.word	0x0800fee8
 80009d0:	0800fef8 	.word	0x0800fef8
 80009d4:	40020400 	.word	0x40020400

080009d8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b082      	sub	sp, #8
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM10) {
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	4a04      	ldr	r2, [pc, #16]	; (80009f8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80009e6:	4293      	cmp	r3, r2
 80009e8:	d101      	bne.n	80009ee <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80009ea:	f000 f94f 	bl	8000c8c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80009ee:	bf00      	nop
 80009f0:	3708      	adds	r7, #8
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	40014400 	.word	0x40014400

080009fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000a00:	bf00      	nop
 8000a02:	46bd      	mov	sp, r7
 8000a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a08:	4770      	bx	lr
	...

08000a0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	b083      	sub	sp, #12
 8000a10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000a12:	4b0f      	ldr	r3, [pc, #60]	; (8000a50 <HAL_MspInit+0x44>)
 8000a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a16:	4a0e      	ldr	r2, [pc, #56]	; (8000a50 <HAL_MspInit+0x44>)
 8000a18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a1c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a1e:	4b0c      	ldr	r3, [pc, #48]	; (8000a50 <HAL_MspInit+0x44>)
 8000a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a26:	607b      	str	r3, [r7, #4]
 8000a28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a2a:	4b09      	ldr	r3, [pc, #36]	; (8000a50 <HAL_MspInit+0x44>)
 8000a2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a2e:	4a08      	ldr	r2, [pc, #32]	; (8000a50 <HAL_MspInit+0x44>)
 8000a30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a34:	6453      	str	r3, [r2, #68]	; 0x44
 8000a36:	4b06      	ldr	r3, [pc, #24]	; (8000a50 <HAL_MspInit+0x44>)
 8000a38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a3e:	603b      	str	r3, [r7, #0]
 8000a40:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a42:	bf00      	nop
 8000a44:	370c      	adds	r7, #12
 8000a46:	46bd      	mov	sp, r7
 8000a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop
 8000a50:	40023800 	.word	0x40023800

08000a54 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b08a      	sub	sp, #40	; 0x28
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a5c:	f107 0314 	add.w	r3, r7, #20
 8000a60:	2200      	movs	r2, #0
 8000a62:	601a      	str	r2, [r3, #0]
 8000a64:	605a      	str	r2, [r3, #4]
 8000a66:	609a      	str	r2, [r3, #8]
 8000a68:	60da      	str	r2, [r3, #12]
 8000a6a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	4a17      	ldr	r2, [pc, #92]	; (8000ad0 <HAL_UART_MspInit+0x7c>)
 8000a72:	4293      	cmp	r3, r2
 8000a74:	d128      	bne.n	8000ac8 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000a76:	4b17      	ldr	r3, [pc, #92]	; (8000ad4 <HAL_UART_MspInit+0x80>)
 8000a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a7a:	4a16      	ldr	r2, [pc, #88]	; (8000ad4 <HAL_UART_MspInit+0x80>)
 8000a7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a80:	6413      	str	r3, [r2, #64]	; 0x40
 8000a82:	4b14      	ldr	r3, [pc, #80]	; (8000ad4 <HAL_UART_MspInit+0x80>)
 8000a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a86:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000a8a:	613b      	str	r3, [r7, #16]
 8000a8c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a8e:	4b11      	ldr	r3, [pc, #68]	; (8000ad4 <HAL_UART_MspInit+0x80>)
 8000a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a92:	4a10      	ldr	r2, [pc, #64]	; (8000ad4 <HAL_UART_MspInit+0x80>)
 8000a94:	f043 0308 	orr.w	r3, r3, #8
 8000a98:	6313      	str	r3, [r2, #48]	; 0x30
 8000a9a:	4b0e      	ldr	r3, [pc, #56]	; (8000ad4 <HAL_UART_MspInit+0x80>)
 8000a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9e:	f003 0308 	and.w	r3, r3, #8
 8000aa2:	60fb      	str	r3, [r7, #12]
 8000aa4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000aa6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000aaa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aac:	2302      	movs	r3, #2
 8000aae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ab4:	2303      	movs	r3, #3
 8000ab6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000ab8:	2307      	movs	r3, #7
 8000aba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000abc:	f107 0314 	add.w	r3, r7, #20
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4805      	ldr	r0, [pc, #20]	; (8000ad8 <HAL_UART_MspInit+0x84>)
 8000ac4:	f001 fb8c 	bl	80021e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000ac8:	bf00      	nop
 8000aca:	3728      	adds	r7, #40	; 0x28
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	40004800 	.word	0x40004800
 8000ad4:	40023800 	.word	0x40023800
 8000ad8:	40020c00 	.word	0x40020c00

08000adc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b08c      	sub	sp, #48	; 0x30
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM10 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8000aec:	2200      	movs	r2, #0
 8000aee:	6879      	ldr	r1, [r7, #4]
 8000af0:	2019      	movs	r0, #25
 8000af2:	f000 f9c5 	bl	8000e80 <HAL_NVIC_SetPriority>

  /* Enable the TIM10 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000af6:	2019      	movs	r0, #25
 8000af8:	f000 f9de 	bl	8000eb8 <HAL_NVIC_EnableIRQ>
  /* Enable TIM10 clock */
  __HAL_RCC_TIM10_CLK_ENABLE();
 8000afc:	4b1f      	ldr	r3, [pc, #124]	; (8000b7c <HAL_InitTick+0xa0>)
 8000afe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b00:	4a1e      	ldr	r2, [pc, #120]	; (8000b7c <HAL_InitTick+0xa0>)
 8000b02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b06:	6453      	str	r3, [r2, #68]	; 0x44
 8000b08:	4b1c      	ldr	r3, [pc, #112]	; (8000b7c <HAL_InitTick+0xa0>)
 8000b0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b10:	60fb      	str	r3, [r7, #12]
 8000b12:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b14:	f107 0210 	add.w	r2, r7, #16
 8000b18:	f107 0314 	add.w	r3, r7, #20
 8000b1c:	4611      	mov	r1, r2
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f002 fa32 	bl	8002f88 <HAL_RCC_GetClockConfig>

  /* Compute TIM10 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000b24:	f002 fa1c 	bl	8002f60 <HAL_RCC_GetPCLK2Freq>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	005b      	lsls	r3, r3, #1
 8000b2c:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM10 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000b2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b30:	4a13      	ldr	r2, [pc, #76]	; (8000b80 <HAL_InitTick+0xa4>)
 8000b32:	fba2 2303 	umull	r2, r3, r2, r3
 8000b36:	0c9b      	lsrs	r3, r3, #18
 8000b38:	3b01      	subs	r3, #1
 8000b3a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM10 */
  htim10.Instance = TIM10;
 8000b3c:	4b11      	ldr	r3, [pc, #68]	; (8000b84 <HAL_InitTick+0xa8>)
 8000b3e:	4a12      	ldr	r2, [pc, #72]	; (8000b88 <HAL_InitTick+0xac>)
 8000b40:	601a      	str	r2, [r3, #0]
  + Period = [(TIM10CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim10.Init.Period = (1000000 / 1000) - 1;
 8000b42:	4b10      	ldr	r3, [pc, #64]	; (8000b84 <HAL_InitTick+0xa8>)
 8000b44:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b48:	60da      	str	r2, [r3, #12]
  htim10.Init.Prescaler = uwPrescalerValue;
 8000b4a:	4a0e      	ldr	r2, [pc, #56]	; (8000b84 <HAL_InitTick+0xa8>)
 8000b4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b4e:	6053      	str	r3, [r2, #4]
  htim10.Init.ClockDivision = 0;
 8000b50:	4b0c      	ldr	r3, [pc, #48]	; (8000b84 <HAL_InitTick+0xa8>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	611a      	str	r2, [r3, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b56:	4b0b      	ldr	r3, [pc, #44]	; (8000b84 <HAL_InitTick+0xa8>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim10) == HAL_OK)
 8000b5c:	4809      	ldr	r0, [pc, #36]	; (8000b84 <HAL_InitTick+0xa8>)
 8000b5e:	f002 fe6d 	bl	800383c <HAL_TIM_Base_Init>
 8000b62:	4603      	mov	r3, r0
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d104      	bne.n	8000b72 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim10);
 8000b68:	4806      	ldr	r0, [pc, #24]	; (8000b84 <HAL_InitTick+0xa8>)
 8000b6a:	f002 fec9 	bl	8003900 <HAL_TIM_Base_Start_IT>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	e000      	b.n	8000b74 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8000b72:	2301      	movs	r3, #1
}
 8000b74:	4618      	mov	r0, r3
 8000b76:	3730      	adds	r7, #48	; 0x30
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	40023800 	.word	0x40023800
 8000b80:	431bde83 	.word	0x431bde83
 8000b84:	20004938 	.word	0x20004938
 8000b88:	40014400 	.word	0x40014400

08000b8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000b90:	bf00      	nop
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr

08000b9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b9a:	b480      	push	{r7}
 8000b9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b9e:	e7fe      	b.n	8000b9e <HardFault_Handler+0x4>

08000ba0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ba4:	e7fe      	b.n	8000ba4 <MemManage_Handler+0x4>

08000ba6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ba6:	b480      	push	{r7}
 8000ba8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000baa:	e7fe      	b.n	8000baa <BusFault_Handler+0x4>

08000bac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bb0:	e7fe      	b.n	8000bb0 <UsageFault_Handler+0x4>

08000bb2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bb2:	b480      	push	{r7}
 8000bb4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bb6:	bf00      	nop
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbe:	4770      	bx	lr

08000bc0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8000bc4:	4802      	ldr	r0, [pc, #8]	; (8000bd0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000bc6:	f002 ff13 	bl	80039f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000bca:	bf00      	nop
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	20004938 	.word	0x20004938

08000bd4 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000bd8:	4802      	ldr	r0, [pc, #8]	; (8000be4 <ETH_IRQHandler+0x10>)
 8000bda:	f000 fd5f 	bl	800169c <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8000bde:	bf00      	nop
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	200062ac 	.word	0x200062ac

08000be8 <ETH_WKUP_IRQHandler>:

/**
  * @brief This function handles Ethernet wake-up interrupt through EXTI line 19.
  */
void ETH_WKUP_IRQHandler(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_WKUP_IRQn 0 */

  /* USER CODE END ETH_WKUP_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000bec:	4802      	ldr	r0, [pc, #8]	; (8000bf8 <ETH_WKUP_IRQHandler+0x10>)
 8000bee:	f000 fd55 	bl	800169c <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_WKUP_IRQn 1 */

  /* USER CODE END ETH_WKUP_IRQn 1 */
}
 8000bf2:	bf00      	nop
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	200062ac 	.word	0x200062ac

08000bfc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c00:	4b06      	ldr	r3, [pc, #24]	; (8000c1c <SystemInit+0x20>)
 8000c02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c06:	4a05      	ldr	r2, [pc, #20]	; (8000c1c <SystemInit+0x20>)
 8000c08:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c0c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c10:	bf00      	nop
 8000c12:	46bd      	mov	sp, r7
 8000c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop
 8000c1c:	e000ed00 	.word	0xe000ed00

08000c20 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000c20:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c58 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c24:	480d      	ldr	r0, [pc, #52]	; (8000c5c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c26:	490e      	ldr	r1, [pc, #56]	; (8000c60 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c28:	4a0e      	ldr	r2, [pc, #56]	; (8000c64 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c2c:	e002      	b.n	8000c34 <LoopCopyDataInit>

08000c2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c32:	3304      	adds	r3, #4

08000c34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c38:	d3f9      	bcc.n	8000c2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c3a:	4a0b      	ldr	r2, [pc, #44]	; (8000c68 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c3c:	4c0b      	ldr	r4, [pc, #44]	; (8000c6c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c40:	e001      	b.n	8000c46 <LoopFillZerobss>

08000c42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c44:	3204      	adds	r2, #4

08000c46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c48:	d3fb      	bcc.n	8000c42 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c4a:	f7ff ffd7 	bl	8000bfc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c4e:	f00e f94b 	bl	800eee8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c52:	f7ff fd09 	bl	8000668 <main>
  bx  lr    
 8000c56:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000c58:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000c5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c60:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8000c64:	08012274 	.word	0x08012274
  ldr r2, =_sbss
 8000c68:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8000c6c:	2000ceb8 	.word	0x2000ceb8

08000c70 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c70:	e7fe      	b.n	8000c70 <ADC_IRQHandler>

08000c72 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c72:	b580      	push	{r7, lr}
 8000c74:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c76:	2003      	movs	r0, #3
 8000c78:	f000 f8f7 	bl	8000e6a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c7c:	2000      	movs	r0, #0
 8000c7e:	f7ff ff2d 	bl	8000adc <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000c82:	f7ff fec3 	bl	8000a0c <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000c86:	2300      	movs	r3, #0
}
 8000c88:	4618      	mov	r0, r3
 8000c8a:	bd80      	pop	{r7, pc}

08000c8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c90:	4b06      	ldr	r3, [pc, #24]	; (8000cac <HAL_IncTick+0x20>)
 8000c92:	781b      	ldrb	r3, [r3, #0]
 8000c94:	461a      	mov	r2, r3
 8000c96:	4b06      	ldr	r3, [pc, #24]	; (8000cb0 <HAL_IncTick+0x24>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	4413      	add	r3, r2
 8000c9c:	4a04      	ldr	r2, [pc, #16]	; (8000cb0 <HAL_IncTick+0x24>)
 8000c9e:	6013      	str	r3, [r2, #0]
}
 8000ca0:	bf00      	nop
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr
 8000caa:	bf00      	nop
 8000cac:	20000008 	.word	0x20000008
 8000cb0:	20004984 	.word	0x20004984

08000cb4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  return uwTick;
 8000cb8:	4b03      	ldr	r3, [pc, #12]	; (8000cc8 <HAL_GetTick+0x14>)
 8000cba:	681b      	ldr	r3, [r3, #0]
}
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop
 8000cc8:	20004984 	.word	0x20004984

08000ccc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b084      	sub	sp, #16
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cd4:	f7ff ffee 	bl	8000cb4 <HAL_GetTick>
 8000cd8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cde:	68fb      	ldr	r3, [r7, #12]
 8000ce0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ce4:	d005      	beq.n	8000cf2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ce6:	4b09      	ldr	r3, [pc, #36]	; (8000d0c <HAL_Delay+0x40>)
 8000ce8:	781b      	ldrb	r3, [r3, #0]
 8000cea:	461a      	mov	r2, r3
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	4413      	add	r3, r2
 8000cf0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000cf2:	bf00      	nop
 8000cf4:	f7ff ffde 	bl	8000cb4 <HAL_GetTick>
 8000cf8:	4602      	mov	r2, r0
 8000cfa:	68bb      	ldr	r3, [r7, #8]
 8000cfc:	1ad3      	subs	r3, r2, r3
 8000cfe:	68fa      	ldr	r2, [r7, #12]
 8000d00:	429a      	cmp	r2, r3
 8000d02:	d8f7      	bhi.n	8000cf4 <HAL_Delay+0x28>
  {
  }
}
 8000d04:	bf00      	nop
 8000d06:	3710      	adds	r7, #16
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	20000008 	.word	0x20000008

08000d10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d10:	b480      	push	{r7}
 8000d12:	b085      	sub	sp, #20
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	f003 0307 	and.w	r3, r3, #7
 8000d1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d20:	4b0b      	ldr	r3, [pc, #44]	; (8000d50 <__NVIC_SetPriorityGrouping+0x40>)
 8000d22:	68db      	ldr	r3, [r3, #12]
 8000d24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d26:	68ba      	ldr	r2, [r7, #8]
 8000d28:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d2c:	4013      	ands	r3, r2
 8000d2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d34:	68bb      	ldr	r3, [r7, #8]
 8000d36:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000d38:	4b06      	ldr	r3, [pc, #24]	; (8000d54 <__NVIC_SetPriorityGrouping+0x44>)
 8000d3a:	4313      	orrs	r3, r2
 8000d3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d3e:	4a04      	ldr	r2, [pc, #16]	; (8000d50 <__NVIC_SetPriorityGrouping+0x40>)
 8000d40:	68bb      	ldr	r3, [r7, #8]
 8000d42:	60d3      	str	r3, [r2, #12]
}
 8000d44:	bf00      	nop
 8000d46:	3714      	adds	r7, #20
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4e:	4770      	bx	lr
 8000d50:	e000ed00 	.word	0xe000ed00
 8000d54:	05fa0000 	.word	0x05fa0000

08000d58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d5c:	4b04      	ldr	r3, [pc, #16]	; (8000d70 <__NVIC_GetPriorityGrouping+0x18>)
 8000d5e:	68db      	ldr	r3, [r3, #12]
 8000d60:	0a1b      	lsrs	r3, r3, #8
 8000d62:	f003 0307 	and.w	r3, r3, #7
}
 8000d66:	4618      	mov	r0, r3
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6e:	4770      	bx	lr
 8000d70:	e000ed00 	.word	0xe000ed00

08000d74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d74:	b480      	push	{r7}
 8000d76:	b083      	sub	sp, #12
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	db0b      	blt.n	8000d9e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d86:	79fb      	ldrb	r3, [r7, #7]
 8000d88:	f003 021f 	and.w	r2, r3, #31
 8000d8c:	4907      	ldr	r1, [pc, #28]	; (8000dac <__NVIC_EnableIRQ+0x38>)
 8000d8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d92:	095b      	lsrs	r3, r3, #5
 8000d94:	2001      	movs	r0, #1
 8000d96:	fa00 f202 	lsl.w	r2, r0, r2
 8000d9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d9e:	bf00      	nop
 8000da0:	370c      	adds	r7, #12
 8000da2:	46bd      	mov	sp, r7
 8000da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da8:	4770      	bx	lr
 8000daa:	bf00      	nop
 8000dac:	e000e100 	.word	0xe000e100

08000db0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000db0:	b480      	push	{r7}
 8000db2:	b083      	sub	sp, #12
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	4603      	mov	r3, r0
 8000db8:	6039      	str	r1, [r7, #0]
 8000dba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	db0a      	blt.n	8000dda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	b2da      	uxtb	r2, r3
 8000dc8:	490c      	ldr	r1, [pc, #48]	; (8000dfc <__NVIC_SetPriority+0x4c>)
 8000dca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dce:	0112      	lsls	r2, r2, #4
 8000dd0:	b2d2      	uxtb	r2, r2
 8000dd2:	440b      	add	r3, r1
 8000dd4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000dd8:	e00a      	b.n	8000df0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	b2da      	uxtb	r2, r3
 8000dde:	4908      	ldr	r1, [pc, #32]	; (8000e00 <__NVIC_SetPriority+0x50>)
 8000de0:	79fb      	ldrb	r3, [r7, #7]
 8000de2:	f003 030f 	and.w	r3, r3, #15
 8000de6:	3b04      	subs	r3, #4
 8000de8:	0112      	lsls	r2, r2, #4
 8000dea:	b2d2      	uxtb	r2, r2
 8000dec:	440b      	add	r3, r1
 8000dee:	761a      	strb	r2, [r3, #24]
}
 8000df0:	bf00      	nop
 8000df2:	370c      	adds	r7, #12
 8000df4:	46bd      	mov	sp, r7
 8000df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfa:	4770      	bx	lr
 8000dfc:	e000e100 	.word	0xe000e100
 8000e00:	e000ed00 	.word	0xe000ed00

08000e04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b089      	sub	sp, #36	; 0x24
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	60f8      	str	r0, [r7, #12]
 8000e0c:	60b9      	str	r1, [r7, #8]
 8000e0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	f003 0307 	and.w	r3, r3, #7
 8000e16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e18:	69fb      	ldr	r3, [r7, #28]
 8000e1a:	f1c3 0307 	rsb	r3, r3, #7
 8000e1e:	2b04      	cmp	r3, #4
 8000e20:	bf28      	it	cs
 8000e22:	2304      	movcs	r3, #4
 8000e24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e26:	69fb      	ldr	r3, [r7, #28]
 8000e28:	3304      	adds	r3, #4
 8000e2a:	2b06      	cmp	r3, #6
 8000e2c:	d902      	bls.n	8000e34 <NVIC_EncodePriority+0x30>
 8000e2e:	69fb      	ldr	r3, [r7, #28]
 8000e30:	3b03      	subs	r3, #3
 8000e32:	e000      	b.n	8000e36 <NVIC_EncodePriority+0x32>
 8000e34:	2300      	movs	r3, #0
 8000e36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e38:	f04f 32ff 	mov.w	r2, #4294967295
 8000e3c:	69bb      	ldr	r3, [r7, #24]
 8000e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e42:	43da      	mvns	r2, r3
 8000e44:	68bb      	ldr	r3, [r7, #8]
 8000e46:	401a      	ands	r2, r3
 8000e48:	697b      	ldr	r3, [r7, #20]
 8000e4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e4c:	f04f 31ff 	mov.w	r1, #4294967295
 8000e50:	697b      	ldr	r3, [r7, #20]
 8000e52:	fa01 f303 	lsl.w	r3, r1, r3
 8000e56:	43d9      	mvns	r1, r3
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e5c:	4313      	orrs	r3, r2
         );
}
 8000e5e:	4618      	mov	r0, r3
 8000e60:	3724      	adds	r7, #36	; 0x24
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr

08000e6a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e6a:	b580      	push	{r7, lr}
 8000e6c:	b082      	sub	sp, #8
 8000e6e:	af00      	add	r7, sp, #0
 8000e70:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e72:	6878      	ldr	r0, [r7, #4]
 8000e74:	f7ff ff4c 	bl	8000d10 <__NVIC_SetPriorityGrouping>
}
 8000e78:	bf00      	nop
 8000e7a:	3708      	adds	r7, #8
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}

08000e80 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b086      	sub	sp, #24
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	4603      	mov	r3, r0
 8000e88:	60b9      	str	r1, [r7, #8]
 8000e8a:	607a      	str	r2, [r7, #4]
 8000e8c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e92:	f7ff ff61 	bl	8000d58 <__NVIC_GetPriorityGrouping>
 8000e96:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e98:	687a      	ldr	r2, [r7, #4]
 8000e9a:	68b9      	ldr	r1, [r7, #8]
 8000e9c:	6978      	ldr	r0, [r7, #20]
 8000e9e:	f7ff ffb1 	bl	8000e04 <NVIC_EncodePriority>
 8000ea2:	4602      	mov	r2, r0
 8000ea4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ea8:	4611      	mov	r1, r2
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f7ff ff80 	bl	8000db0 <__NVIC_SetPriority>
}
 8000eb0:	bf00      	nop
 8000eb2:	3718      	adds	r7, #24
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}

08000eb8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ec2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f7ff ff54 	bl	8000d74 <__NVIC_EnableIRQ>
}
 8000ecc:	bf00      	nop
 8000ece:	3708      	adds	r7, #8
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}

08000ed4 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b088      	sub	sp, #32
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 8000edc:	2300      	movs	r3, #0
 8000ede:	61fb      	str	r3, [r7, #28]
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 8000ee4:	4ba9      	ldr	r3, [pc, #676]	; (800118c <HAL_ETH_Init+0x2b8>)
 8000ee6:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8000eec:	2300      	movs	r3, #0
 8000eee:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d101      	bne.n	8000efa <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	e183      	b.n	8001202 <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000f00:	b2db      	uxtb	r3, r3
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d106      	bne.n	8000f14 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	2200      	movs	r2, #0
 8000f0a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8000f0e:	6878      	ldr	r0, [r7, #4]
 8000f10:	f003 fd7c 	bl	8004a0c <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f14:	4b9e      	ldr	r3, [pc, #632]	; (8001190 <HAL_ETH_Init+0x2bc>)
 8000f16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f18:	4a9d      	ldr	r2, [pc, #628]	; (8001190 <HAL_ETH_Init+0x2bc>)
 8000f1a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f1e:	6453      	str	r3, [r2, #68]	; 0x44
 8000f20:	4b9b      	ldr	r3, [pc, #620]	; (8001190 <HAL_ETH_Init+0x2bc>)
 8000f22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f28:	60bb      	str	r3, [r7, #8]
 8000f2a:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8000f2c:	4b99      	ldr	r3, [pc, #612]	; (8001194 <HAL_ETH_Init+0x2c0>)
 8000f2e:	685b      	ldr	r3, [r3, #4]
 8000f30:	4a98      	ldr	r2, [pc, #608]	; (8001194 <HAL_ETH_Init+0x2c0>)
 8000f32:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8000f36:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8000f38:	4b96      	ldr	r3, [pc, #600]	; (8001194 <HAL_ETH_Init+0x2c0>)
 8000f3a:	685a      	ldr	r2, [r3, #4]
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	6a1b      	ldr	r3, [r3, #32]
 8000f40:	4994      	ldr	r1, [pc, #592]	; (8001194 <HAL_ETH_Init+0x2c0>)
 8000f42:	4313      	orrs	r3, r2
 8000f44:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000f4e:	681a      	ldr	r2, [r3, #0]
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	f042 0201 	orr.w	r2, r2, #1
 8000f58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000f5c:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8000f5e:	f7ff fea9 	bl	8000cb4 <HAL_GetTick>
 8000f62:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8000f64:	e011      	b.n	8000f8a <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8000f66:	f7ff fea5 	bl	8000cb4 <HAL_GetTick>
 8000f6a:	4602      	mov	r2, r0
 8000f6c:	697b      	ldr	r3, [r7, #20]
 8000f6e:	1ad3      	subs	r3, r2, r3
 8000f70:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000f74:	d909      	bls.n	8000f8a <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	2203      	movs	r2, #3
 8000f7a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	2200      	movs	r2, #0
 8000f82:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 8000f86:	2303      	movs	r3, #3
 8000f88:	e13b      	b.n	8001202 <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	f003 0301 	and.w	r3, r3, #1
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d1e4      	bne.n	8000f66 <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	691b      	ldr	r3, [r3, #16]
 8000fa2:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 8000fa4:	69fb      	ldr	r3, [r7, #28]
 8000fa6:	f023 031c 	bic.w	r3, r3, #28
 8000faa:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8000fac:	f001 ffb8 	bl	8002f20 <HAL_RCC_GetHCLKFreq>
 8000fb0:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 8000fb2:	69bb      	ldr	r3, [r7, #24]
 8000fb4:	4a78      	ldr	r2, [pc, #480]	; (8001198 <HAL_ETH_Init+0x2c4>)
 8000fb6:	4293      	cmp	r3, r2
 8000fb8:	d908      	bls.n	8000fcc <HAL_ETH_Init+0xf8>
 8000fba:	69bb      	ldr	r3, [r7, #24]
 8000fbc:	4a77      	ldr	r2, [pc, #476]	; (800119c <HAL_ETH_Init+0x2c8>)
 8000fbe:	4293      	cmp	r3, r2
 8000fc0:	d804      	bhi.n	8000fcc <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8000fc2:	69fb      	ldr	r3, [r7, #28]
 8000fc4:	f043 0308 	orr.w	r3, r3, #8
 8000fc8:	61fb      	str	r3, [r7, #28]
 8000fca:	e027      	b.n	800101c <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 8000fcc:	69bb      	ldr	r3, [r7, #24]
 8000fce:	4a73      	ldr	r2, [pc, #460]	; (800119c <HAL_ETH_Init+0x2c8>)
 8000fd0:	4293      	cmp	r3, r2
 8000fd2:	d908      	bls.n	8000fe6 <HAL_ETH_Init+0x112>
 8000fd4:	69bb      	ldr	r3, [r7, #24]
 8000fd6:	4a72      	ldr	r2, [pc, #456]	; (80011a0 <HAL_ETH_Init+0x2cc>)
 8000fd8:	4293      	cmp	r3, r2
 8000fda:	d804      	bhi.n	8000fe6 <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8000fdc:	69fb      	ldr	r3, [r7, #28]
 8000fde:	f043 030c 	orr.w	r3, r3, #12
 8000fe2:	61fb      	str	r3, [r7, #28]
 8000fe4:	e01a      	b.n	800101c <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 8000fe6:	69bb      	ldr	r3, [r7, #24]
 8000fe8:	4a6d      	ldr	r2, [pc, #436]	; (80011a0 <HAL_ETH_Init+0x2cc>)
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d903      	bls.n	8000ff6 <HAL_ETH_Init+0x122>
 8000fee:	69bb      	ldr	r3, [r7, #24]
 8000ff0:	4a6c      	ldr	r2, [pc, #432]	; (80011a4 <HAL_ETH_Init+0x2d0>)
 8000ff2:	4293      	cmp	r3, r2
 8000ff4:	d911      	bls.n	800101a <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 8000ff6:	69bb      	ldr	r3, [r7, #24]
 8000ff8:	4a6a      	ldr	r2, [pc, #424]	; (80011a4 <HAL_ETH_Init+0x2d0>)
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d908      	bls.n	8001010 <HAL_ETH_Init+0x13c>
 8000ffe:	69bb      	ldr	r3, [r7, #24]
 8001000:	4a69      	ldr	r2, [pc, #420]	; (80011a8 <HAL_ETH_Init+0x2d4>)
 8001002:	4293      	cmp	r3, r2
 8001004:	d804      	bhi.n	8001010 <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8001006:	69fb      	ldr	r3, [r7, #28]
 8001008:	f043 0304 	orr.w	r3, r3, #4
 800100c:	61fb      	str	r3, [r7, #28]
 800100e:	e005      	b.n	800101c <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8001010:	69fb      	ldr	r3, [r7, #28]
 8001012:	f043 0310 	orr.w	r3, r3, #16
 8001016:	61fb      	str	r3, [r7, #28]
 8001018:	e000      	b.n	800101c <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 800101a:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	69fa      	ldr	r2, [r7, #28]
 8001022:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8001024:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001028:	2100      	movs	r1, #0
 800102a:	6878      	ldr	r0, [r7, #4]
 800102c:	f000 fc19 	bl	8001862 <HAL_ETH_WritePHYRegister>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d00b      	beq.n	800104e <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8001036:	2301      	movs	r3, #1
 8001038:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 800103a:	6939      	ldr	r1, [r7, #16]
 800103c:	6878      	ldr	r0, [r7, #4]
 800103e:	f000 fdcf 	bl	8001be0 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	2201      	movs	r2, #1
 8001046:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 800104a:	2301      	movs	r3, #1
 800104c:	e0d9      	b.n	8001202 <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 800104e:	20ff      	movs	r0, #255	; 0xff
 8001050:	f7ff fe3c 	bl	8000ccc <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	2b00      	cmp	r3, #0
 800105a:	f000 80a7 	beq.w	80011ac <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800105e:	f7ff fe29 	bl	8000cb4 <HAL_GetTick>
 8001062:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001064:	f107 030c 	add.w	r3, r7, #12
 8001068:	461a      	mov	r2, r3
 800106a:	2101      	movs	r1, #1
 800106c:	6878      	ldr	r0, [r7, #4]
 800106e:	f000 fb90 	bl	8001792 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8001072:	f7ff fe1f 	bl	8000cb4 <HAL_GetTick>
 8001076:	4602      	mov	r2, r0
 8001078:	697b      	ldr	r3, [r7, #20]
 800107a:	1ad3      	subs	r3, r2, r3
 800107c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001080:	4293      	cmp	r3, r2
 8001082:	d90f      	bls.n	80010a4 <HAL_ETH_Init+0x1d0>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001084:	2301      	movs	r3, #1
 8001086:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001088:	6939      	ldr	r1, [r7, #16]
 800108a:	6878      	ldr	r0, [r7, #4]
 800108c:	f000 fda8 	bl	8001be0 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	2201      	movs	r2, #1
 8001094:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	2200      	movs	r2, #0
 800109c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80010a0:	2303      	movs	r3, #3
 80010a2:	e0ae      	b.n	8001202 <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	f003 0304 	and.w	r3, r3, #4
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d0da      	beq.n	8001064 <HAL_ETH_Init+0x190>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 80010ae:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80010b2:	2100      	movs	r1, #0
 80010b4:	6878      	ldr	r0, [r7, #4]
 80010b6:	f000 fbd4 	bl	8001862 <HAL_ETH_WritePHYRegister>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d00b      	beq.n	80010d8 <HAL_ETH_Init+0x204>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80010c0:	2301      	movs	r3, #1
 80010c2:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80010c4:	6939      	ldr	r1, [r7, #16]
 80010c6:	6878      	ldr	r0, [r7, #4]
 80010c8:	f000 fd8a 	bl	8001be0 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	2201      	movs	r2, #1
 80010d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80010d4:	2301      	movs	r3, #1
 80010d6:	e094      	b.n	8001202 <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 80010d8:	f7ff fdec 	bl	8000cb4 <HAL_GetTick>
 80010dc:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80010de:	f107 030c 	add.w	r3, r7, #12
 80010e2:	461a      	mov	r2, r3
 80010e4:	2101      	movs	r1, #1
 80010e6:	6878      	ldr	r0, [r7, #4]
 80010e8:	f000 fb53 	bl	8001792 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 80010ec:	f7ff fde2 	bl	8000cb4 <HAL_GetTick>
 80010f0:	4602      	mov	r2, r0
 80010f2:	697b      	ldr	r3, [r7, #20]
 80010f4:	1ad3      	subs	r3, r2, r3
 80010f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d90f      	bls.n	800111e <HAL_ETH_Init+0x24a>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80010fe:	2301      	movs	r3, #1
 8001100:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001102:	6939      	ldr	r1, [r7, #16]
 8001104:	6878      	ldr	r0, [r7, #4]
 8001106:	f000 fd6b 	bl	8001be0 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	2201      	movs	r2, #1
 800110e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	2200      	movs	r2, #0
 8001116:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 800111a:	2303      	movs	r3, #3
 800111c:	e071      	b.n	8001202 <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	f003 0320 	and.w	r3, r3, #32
 8001124:	2b00      	cmp	r3, #0
 8001126:	d0da      	beq.n	80010de <HAL_ETH_Init+0x20a>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8001128:	f107 030c 	add.w	r3, r7, #12
 800112c:	461a      	mov	r2, r3
 800112e:	211f      	movs	r1, #31
 8001130:	6878      	ldr	r0, [r7, #4]
 8001132:	f000 fb2e 	bl	8001792 <HAL_ETH_ReadPHYRegister>
 8001136:	4603      	mov	r3, r0
 8001138:	2b00      	cmp	r3, #0
 800113a:	d00b      	beq.n	8001154 <HAL_ETH_Init+0x280>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 800113c:	2301      	movs	r3, #1
 800113e:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001140:	6939      	ldr	r1, [r7, #16]
 8001142:	6878      	ldr	r0, [r7, #4]
 8001144:	f000 fd4c 	bl	8001be0 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	2201      	movs	r2, #1
 800114c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001150:	2301      	movs	r3, #1
 8001152:	e056      	b.n	8001202 <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	f003 0310 	and.w	r3, r3, #16
 800115a:	2b00      	cmp	r3, #0
 800115c:	d004      	beq.n	8001168 <HAL_ETH_Init+0x294>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001164:	60da      	str	r2, [r3, #12]
 8001166:	e002      	b.n	800116e <HAL_ETH_Init+0x29a>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	2200      	movs	r2, #0
 800116c:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	f003 0304 	and.w	r3, r3, #4
 8001174:	2b00      	cmp	r3, #0
 8001176:	d003      	beq.n	8001180 <HAL_ETH_Init+0x2ac>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	2200      	movs	r2, #0
 800117c:	609a      	str	r2, [r3, #8]
 800117e:	e037      	b.n	80011f0 <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001186:	609a      	str	r2, [r3, #8]
 8001188:	e032      	b.n	80011f0 <HAL_ETH_Init+0x31c>
 800118a:	bf00      	nop
 800118c:	03938700 	.word	0x03938700
 8001190:	40023800 	.word	0x40023800
 8001194:	40013800 	.word	0x40013800
 8001198:	01312cff 	.word	0x01312cff
 800119c:	02160ebf 	.word	0x02160ebf
 80011a0:	039386ff 	.word	0x039386ff
 80011a4:	05f5e0ff 	.word	0x05f5e0ff
 80011a8:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	68db      	ldr	r3, [r3, #12]
 80011b0:	08db      	lsrs	r3, r3, #3
 80011b2:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	689b      	ldr	r3, [r3, #8]
 80011b8:	085b      	lsrs	r3, r3, #1
 80011ba:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 80011bc:	4313      	orrs	r3, r2
 80011be:	b29b      	uxth	r3, r3
 80011c0:	461a      	mov	r2, r3
 80011c2:	2100      	movs	r1, #0
 80011c4:	6878      	ldr	r0, [r7, #4]
 80011c6:	f000 fb4c 	bl	8001862 <HAL_ETH_WritePHYRegister>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d00b      	beq.n	80011e8 <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80011d0:	2301      	movs	r3, #1
 80011d2:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80011d4:	6939      	ldr	r1, [r7, #16]
 80011d6:	6878      	ldr	r0, [r7, #4]
 80011d8:	f000 fd02 	bl	8001be0 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	2201      	movs	r2, #1
 80011e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 80011e4:	2301      	movs	r3, #1
 80011e6:	e00c      	b.n	8001202 <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 80011e8:	f640 70ff 	movw	r0, #4095	; 0xfff
 80011ec:	f7ff fd6e 	bl	8000ccc <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 80011f0:	6939      	ldr	r1, [r7, #16]
 80011f2:	6878      	ldr	r0, [r7, #4]
 80011f4:	f000 fcf4 	bl	8001be0 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	2201      	movs	r2, #1
 80011fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001200:	2300      	movs	r3, #0
}
 8001202:	4618      	mov	r0, r3
 8001204:	3720      	adds	r7, #32
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop

0800120c <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 800120c:	b480      	push	{r7}
 800120e:	b087      	sub	sp, #28
 8001210:	af00      	add	r7, sp, #0
 8001212:	60f8      	str	r0, [r7, #12]
 8001214:	60b9      	str	r1, [r7, #8]
 8001216:	607a      	str	r2, [r7, #4]
 8001218:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 800121a:	2300      	movs	r3, #0
 800121c:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001224:	2b01      	cmp	r3, #1
 8001226:	d101      	bne.n	800122c <HAL_ETH_DMATxDescListInit+0x20>
 8001228:	2302      	movs	r3, #2
 800122a:	e052      	b.n	80012d2 <HAL_ETH_DMATxDescListInit+0xc6>
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	2201      	movs	r2, #1
 8001230:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	2202      	movs	r2, #2
 8001238:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	68ba      	ldr	r2, [r7, #8]
 8001240:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0; i < TxBuffCount; i++)
 8001242:	2300      	movs	r3, #0
 8001244:	617b      	str	r3, [r7, #20]
 8001246:	e030      	b.n	80012aa <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the member (i) of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8001248:	697b      	ldr	r3, [r7, #20]
 800124a:	015b      	lsls	r3, r3, #5
 800124c:	68ba      	ldr	r2, [r7, #8]
 800124e:	4413      	add	r3, r2
 8001250:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8001252:	693b      	ldr	r3, [r7, #16]
 8001254:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001258:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 800125a:	697b      	ldr	r3, [r7, #20]
 800125c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001260:	fb02 f303 	mul.w	r3, r2, r3
 8001264:	687a      	ldr	r2, [r7, #4]
 8001266:	4413      	add	r3, r2
 8001268:	461a      	mov	r2, r3
 800126a:	693b      	ldr	r3, [r7, #16]
 800126c:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	69db      	ldr	r3, [r3, #28]
 8001272:	2b00      	cmp	r3, #0
 8001274:	d105      	bne.n	8001282 <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 8001276:	693b      	ldr	r3, [r7, #16]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800127e:	693b      	ldr	r3, [r7, #16]
 8001280:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1))
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	3b01      	subs	r3, #1
 8001286:	697a      	ldr	r2, [r7, #20]
 8001288:	429a      	cmp	r2, r3
 800128a:	d208      	bcs.n	800129e <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1);
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	3301      	adds	r3, #1
 8001290:	015b      	lsls	r3, r3, #5
 8001292:	68ba      	ldr	r2, [r7, #8]
 8001294:	4413      	add	r3, r2
 8001296:	461a      	mov	r2, r3
 8001298:	693b      	ldr	r3, [r7, #16]
 800129a:	60da      	str	r2, [r3, #12]
 800129c:	e002      	b.n	80012a4 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 800129e:	68ba      	ldr	r2, [r7, #8]
 80012a0:	693b      	ldr	r3, [r7, #16]
 80012a2:	60da      	str	r2, [r3, #12]
  for(i=0; i < TxBuffCount; i++)
 80012a4:	697b      	ldr	r3, [r7, #20]
 80012a6:	3301      	adds	r3, #1
 80012a8:	617b      	str	r3, [r7, #20]
 80012aa:	697a      	ldr	r2, [r7, #20]
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	429a      	cmp	r2, r3
 80012b0:	d3ca      	bcc.n	8001248 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	6819      	ldr	r1, [r3, #0]
 80012b6:	68ba      	ldr	r2, [r7, #8]
 80012b8:	f241 0310 	movw	r3, #4112	; 0x1010
 80012bc:	440b      	add	r3, r1
 80012be:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	2201      	movs	r2, #1
 80012c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	2200      	movs	r2, #0
 80012cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80012d0:	2300      	movs	r3, #0
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	371c      	adds	r7, #28
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr

080012de <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 80012de:	b480      	push	{r7}
 80012e0:	b087      	sub	sp, #28
 80012e2:	af00      	add	r7, sp, #0
 80012e4:	60f8      	str	r0, [r7, #12]
 80012e6:	60b9      	str	r1, [r7, #8]
 80012e8:	607a      	str	r2, [r7, #4]
 80012ea:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 80012ec:	2300      	movs	r3, #0
 80012ee:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80012f6:	2b01      	cmp	r3, #1
 80012f8:	d101      	bne.n	80012fe <HAL_ETH_DMARxDescListInit+0x20>
 80012fa:	2302      	movs	r3, #2
 80012fc:	e056      	b.n	80013ac <HAL_ETH_DMARxDescListInit+0xce>
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	2201      	movs	r2, #1
 8001302:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	2202      	movs	r2, #2
 800130a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	68ba      	ldr	r2, [r7, #8]
 8001312:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0; i < RxBuffCount; i++)
 8001314:	2300      	movs	r3, #0
 8001316:	617b      	str	r3, [r7, #20]
 8001318:	e034      	b.n	8001384 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the member (i) of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 800131a:	697b      	ldr	r3, [r7, #20]
 800131c:	015b      	lsls	r3, r3, #5
 800131e:	68ba      	ldr	r2, [r7, #8]
 8001320:	4413      	add	r3, r2
 8001322:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8001324:	693b      	ldr	r3, [r7, #16]
 8001326:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800132a:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 800132c:	693b      	ldr	r3, [r7, #16]
 800132e:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8001332:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800133a:	fb02 f303 	mul.w	r3, r2, r3
 800133e:	687a      	ldr	r2, [r7, #4]
 8001340:	4413      	add	r3, r2
 8001342:	461a      	mov	r2, r3
 8001344:	693b      	ldr	r3, [r7, #16]
 8001346:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	699b      	ldr	r3, [r3, #24]
 800134c:	2b01      	cmp	r3, #1
 800134e:	d105      	bne.n	800135c <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8001350:	693b      	ldr	r3, [r7, #16]
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001358:	693b      	ldr	r3, [r7, #16]
 800135a:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1))
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	3b01      	subs	r3, #1
 8001360:	697a      	ldr	r2, [r7, #20]
 8001362:	429a      	cmp	r2, r3
 8001364:	d208      	bcs.n	8001378 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1); 
 8001366:	697b      	ldr	r3, [r7, #20]
 8001368:	3301      	adds	r3, #1
 800136a:	015b      	lsls	r3, r3, #5
 800136c:	68ba      	ldr	r2, [r7, #8]
 800136e:	4413      	add	r3, r2
 8001370:	461a      	mov	r2, r3
 8001372:	693b      	ldr	r3, [r7, #16]
 8001374:	60da      	str	r2, [r3, #12]
 8001376:	e002      	b.n	800137e <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 8001378:	68ba      	ldr	r2, [r7, #8]
 800137a:	693b      	ldr	r3, [r7, #16]
 800137c:	60da      	str	r2, [r3, #12]
  for(i=0; i < RxBuffCount; i++)
 800137e:	697b      	ldr	r3, [r7, #20]
 8001380:	3301      	adds	r3, #1
 8001382:	617b      	str	r3, [r7, #20]
 8001384:	697a      	ldr	r2, [r7, #20]
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	429a      	cmp	r2, r3
 800138a:	d3c6      	bcc.n	800131a <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	6819      	ldr	r1, [r3, #0]
 8001390:	68ba      	ldr	r2, [r7, #8]
 8001392:	f241 030c 	movw	r3, #4108	; 0x100c
 8001396:	440b      	add	r3, r1
 8001398:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	2201      	movs	r2, #1
 800139e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	2200      	movs	r2, #0
 80013a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80013aa:	2300      	movs	r3, #0
}
 80013ac:	4618      	mov	r0, r3
 80013ae:	371c      	adds	r7, #28
 80013b0:	46bd      	mov	sp, r7
 80013b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b6:	4770      	bx	lr

080013b8 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b087      	sub	sp, #28
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
 80013c0:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0, size = 0, i = 0;
 80013c2:	2300      	movs	r3, #0
 80013c4:	617b      	str	r3, [r7, #20]
 80013c6:	2300      	movs	r3, #0
 80013c8:	60fb      	str	r3, [r7, #12]
 80013ca:	2300      	movs	r3, #0
 80013cc:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80013d4:	2b01      	cmp	r3, #1
 80013d6:	d101      	bne.n	80013dc <HAL_ETH_TransmitFrame+0x24>
 80013d8:	2302      	movs	r3, #2
 80013da:	e0cd      	b.n	8001578 <HAL_ETH_TransmitFrame+0x1c0>
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	2201      	movs	r2, #1
 80013e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	2202      	movs	r2, #2
 80013e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0) 
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d109      	bne.n	8001406 <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	2201      	movs	r2, #1
 80013f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	2200      	movs	r2, #0
 80013fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 8001402:	2301      	movs	r3, #1
 8001404:	e0b8      	b.n	8001578 <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	2b00      	cmp	r3, #0
 800140e:	da09      	bge.n	8001424 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2212      	movs	r2, #18
 8001414:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	2200      	movs	r2, #0
 800141c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 8001420:	2301      	movs	r3, #1
 8001422:	e0a9      	b.n	8001578 <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800142a:	4293      	cmp	r3, r2
 800142c:	d915      	bls.n	800145a <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	4a54      	ldr	r2, [pc, #336]	; (8001584 <HAL_ETH_TransmitFrame+0x1cc>)
 8001432:	fba2 2303 	umull	r2, r3, r2, r3
 8001436:	0a9b      	lsrs	r3, r3, #10
 8001438:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 800143a:	683a      	ldr	r2, [r7, #0]
 800143c:	4b51      	ldr	r3, [pc, #324]	; (8001584 <HAL_ETH_TransmitFrame+0x1cc>)
 800143e:	fba3 1302 	umull	r1, r3, r3, r2
 8001442:	0a9b      	lsrs	r3, r3, #10
 8001444:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8001448:	fb01 f303 	mul.w	r3, r1, r3
 800144c:	1ad3      	subs	r3, r2, r3
 800144e:	2b00      	cmp	r3, #0
 8001450:	d005      	beq.n	800145e <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 8001452:	697b      	ldr	r3, [r7, #20]
 8001454:	3301      	adds	r3, #1
 8001456:	617b      	str	r3, [r7, #20]
 8001458:	e001      	b.n	800145e <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1;
 800145a:	2301      	movs	r3, #1
 800145c:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1)
 800145e:	697b      	ldr	r3, [r7, #20]
 8001460:	2b01      	cmp	r3, #1
 8001462:	d11c      	bne.n	800149e <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001468:	681a      	ldr	r2, [r3, #0]
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800146e:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 8001472:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001478:	683a      	ldr	r2, [r7, #0]
 800147a:	f3c2 020c 	ubfx	r2, r2, #0, #13
 800147e:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001484:	681a      	ldr	r2, [r3, #0]
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800148a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800148e:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001494:	68db      	ldr	r3, [r3, #12]
 8001496:	461a      	mov	r2, r3
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	62da      	str	r2, [r3, #44]	; 0x2c
 800149c:	e04b      	b.n	8001536 <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0; i< bufcount; i++)
 800149e:	2300      	movs	r3, #0
 80014a0:	613b      	str	r3, [r7, #16]
 80014a2:	e044      	b.n	800152e <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014a8:	681a      	ldr	r2, [r3, #0]
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014ae:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80014b2:	601a      	str	r2, [r3, #0]
      
      if (i == 0) 
 80014b4:	693b      	ldr	r3, [r7, #16]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d107      	bne.n	80014ca <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014be:	681a      	ldr	r2, [r3, #0]
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014c4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80014c8:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014ce:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80014d2:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1))
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	3b01      	subs	r3, #1
 80014d8:	693a      	ldr	r2, [r7, #16]
 80014da:	429a      	cmp	r2, r3
 80014dc:	d116      	bne.n	800150c <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014e2:	681a      	ldr	r2, [r3, #0]
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014e8:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80014ec:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
 80014ee:	697b      	ldr	r3, [r7, #20]
 80014f0:	4a25      	ldr	r2, [pc, #148]	; (8001588 <HAL_ETH_TransmitFrame+0x1d0>)
 80014f2:	fb02 f203 	mul.w	r2, r2, r3
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	4413      	add	r3, r2
 80014fa:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80014fe:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001504:	68fa      	ldr	r2, [r7, #12]
 8001506:	f3c2 020c 	ubfx	r2, r2, #0, #13
 800150a:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001510:	681a      	ldr	r2, [r3, #0]
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001516:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800151a:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001520:	68db      	ldr	r3, [r3, #12]
 8001522:	461a      	mov	r2, r3
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0; i< bufcount; i++)
 8001528:	693b      	ldr	r3, [r7, #16]
 800152a:	3301      	adds	r3, #1
 800152c:	613b      	str	r3, [r7, #16]
 800152e:	693a      	ldr	r2, [r7, #16]
 8001530:	697b      	ldr	r3, [r7, #20]
 8001532:	429a      	cmp	r2, r3
 8001534:	d3b6      	bcc.n	80014a4 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681a      	ldr	r2, [r3, #0]
 800153a:	f241 0314 	movw	r3, #4116	; 0x1014
 800153e:	4413      	add	r3, r2
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f003 0304 	and.w	r3, r3, #4
 8001546:	2b00      	cmp	r3, #0
 8001548:	d00d      	beq.n	8001566 <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681a      	ldr	r2, [r3, #0]
 800154e:	f241 0314 	movw	r3, #4116	; 0x1014
 8001552:	4413      	add	r3, r2
 8001554:	2204      	movs	r2, #4
 8001556:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681a      	ldr	r2, [r3, #0]
 800155c:	f241 0304 	movw	r3, #4100	; 0x1004
 8001560:	4413      	add	r3, r2
 8001562:	2200      	movs	r2, #0
 8001564:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	2201      	movs	r2, #1
 800156a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	2200      	movs	r2, #0
 8001572:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001576:	2300      	movs	r3, #0
}
 8001578:	4618      	mov	r0, r3
 800157a:	371c      	adds	r7, #28
 800157c:	46bd      	mov	sp, r7
 800157e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001582:	4770      	bx	lr
 8001584:	ac02b00b 	.word	0xac02b00b
 8001588:	fffffa0c 	.word	0xfffffa0c

0800158c <HAL_ETH_GetReceivedFrame_IT>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame_IT(ETH_HandleTypeDef *heth)
{
 800158c:	b480      	push	{r7}
 800158e:	b085      	sub	sp, #20
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  uint32_t descriptorscancounter = 0;
 8001594:	2300      	movs	r3, #0
 8001596:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800159e:	2b01      	cmp	r3, #1
 80015a0:	d101      	bne.n	80015a6 <HAL_ETH_GetReceivedFrame_IT+0x1a>
 80015a2:	2302      	movs	r3, #2
 80015a4:	e074      	b.n	8001690 <HAL_ETH_GetReceivedFrame_IT+0x104>
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	2201      	movs	r2, #1
 80015aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set ETH HAL State to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	2202      	movs	r2, #2
 80015b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Scan descriptors owned by CPU */
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 80015b6:	e05a      	b.n	800166e <HAL_ETH_GetReceivedFrame_IT+0xe2>
  {
    /* Just for security */
    descriptorscancounter++;
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	3301      	adds	r3, #1
 80015bc:	60fb      	str	r3, [r7, #12]
    
    /* Check if first segment in frame */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)) */  
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80015c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80015cc:	d10d      	bne.n	80015ea <HAL_ETH_GetReceivedFrame_IT+0x5e>
    { 
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	631a      	str	r2, [r3, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1;   
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	2201      	movs	r2, #1
 80015da:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015e0:	68db      	ldr	r3, [r3, #12]
 80015e2:	461a      	mov	r2, r3
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	629a      	str	r2, [r3, #40]	; 0x28
 80015e8:	e041      	b.n	800166e <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Check if intermediate segment */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)&& ((heth->RxDesc->Status & ETH_DMARXDESC_FS) == (uint32_t)RESET)) */
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d10b      	bne.n	8001610 <HAL_ETH_GetReceivedFrame_IT+0x84>
    {
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015fc:	1c5a      	adds	r2, r3, #1
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001606:	68db      	ldr	r3, [r3, #12]
 8001608:	461a      	mov	r2, r3
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	629a      	str	r2, [r3, #40]	; 0x28
 800160e:	e02e      	b.n	800166e <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Should be last segment */
    else
    { 
      /* Last segment */
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800161c:	1c5a      	adds	r2, r3, #1
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos.SegCount) == 1)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001626:	2b01      	cmp	r3, #1
 8001628:	d103      	bne.n	8001632 <HAL_ETH_GetReceivedFrame_IT+0xa6>
      {
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	0c1b      	lsrs	r3, r3, #16
 800163a:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800163e:	1f1a      	subs	r2, r3, #4
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */ 
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001648:	689a      	ldr	r2, [r3, #8]
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Point to next descriptor */      
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001652:	68db      	ldr	r3, [r3, #12]
 8001654:	461a      	mov	r2, r3
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	2201      	movs	r2, #1
 800165e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	2200      	movs	r2, #0
 8001666:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
      /* Return function status */
      return HAL_OK;
 800166a:	2300      	movs	r3, #0
 800166c:	e010      	b.n	8001690 <HAL_ETH_GetReceivedFrame_IT+0x104>
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	2b00      	cmp	r3, #0
 8001676:	db02      	blt.n	800167e <HAL_ETH_GetReceivedFrame_IT+0xf2>
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	2b03      	cmp	r3, #3
 800167c:	d99c      	bls.n	80015b8 <HAL_ETH_GetReceivedFrame_IT+0x2c>
    }
  }

  /* Set HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2201      	movs	r2, #1
 8001682:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	2200      	movs	r2, #0
 800168a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 800168e:	2301      	movs	r3, #1
}
 8001690:	4618      	mov	r0, r3
 8001692:	3714      	adds	r7, #20
 8001694:	46bd      	mov	sp, r7
 8001696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169a:	4770      	bx	lr

0800169c <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b082      	sub	sp, #8
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681a      	ldr	r2, [r3, #0]
 80016a8:	f241 0314 	movw	r3, #4116	; 0x1014
 80016ac:	4413      	add	r3, r2
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016b4:	2b40      	cmp	r3, #64	; 0x40
 80016b6:	d112      	bne.n	80016de <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 80016b8:	6878      	ldr	r0, [r7, #4]
 80016ba:	f003 fa6f 	bl	8004b9c <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    
     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681a      	ldr	r2, [r3, #0]
 80016c2:	f241 0314 	movw	r3, #4116	; 0x1014
 80016c6:	4413      	add	r3, r2
 80016c8:	2240      	movs	r2, #64	; 0x40
 80016ca:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	2201      	movs	r2, #1
 80016d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	2200      	movs	r2, #0
 80016d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80016dc:	e01b      	b.n	8001716 <HAL_ETH_IRQHandler+0x7a>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681a      	ldr	r2, [r3, #0]
 80016e2:	f241 0314 	movw	r3, #4116	; 0x1014
 80016e6:	4413      	add	r3, r2
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f003 0301 	and.w	r3, r3, #1
 80016ee:	2b01      	cmp	r3, #1
 80016f0:	d111      	bne.n	8001716 <HAL_ETH_IRQHandler+0x7a>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 80016f2:	6878      	ldr	r0, [r7, #4]
 80016f4:	f000 f839 	bl	800176a <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681a      	ldr	r2, [r3, #0]
 80016fc:	f241 0314 	movw	r3, #4116	; 0x1014
 8001700:	4413      	add	r3, r2
 8001702:	2201      	movs	r2, #1
 8001704:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	2201      	movs	r2, #1
 800170a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2200      	movs	r2, #0
 8001712:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681a      	ldr	r2, [r3, #0]
 800171a:	f241 0314 	movw	r3, #4116	; 0x1014
 800171e:	4413      	add	r3, r2
 8001720:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001724:	601a      	str	r2, [r3, #0]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681a      	ldr	r2, [r3, #0]
 800172a:	f241 0314 	movw	r3, #4116	; 0x1014
 800172e:	4413      	add	r3, r2
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001736:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800173a:	d112      	bne.n	8001762 <HAL_ETH_IRQHandler+0xc6>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 800173c:	6878      	ldr	r0, [r7, #4]
 800173e:	f000 f81e 	bl	800177e <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681a      	ldr	r2, [r3, #0]
 8001746:	f241 0314 	movw	r3, #4116	; 0x1014
 800174a:	4413      	add	r3, r2
 800174c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001750:	601a      	str	r2, [r3, #0]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2201      	movs	r2, #1
 8001756:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	2200      	movs	r2, #0
 800175e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 8001762:	bf00      	nop
 8001764:	3708      	adds	r7, #8
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}

0800176a <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 800176a:	b480      	push	{r7}
 800176c:	b083      	sub	sp, #12
 800176e:	af00      	add	r7, sp, #0
 8001770:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8001772:	bf00      	nop
 8001774:	370c      	adds	r7, #12
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr

0800177e <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 800177e:	b480      	push	{r7}
 8001780:	b083      	sub	sp, #12
 8001782:	af00      	add	r7, sp, #0
 8001784:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */ 
}
 8001786:	bf00      	nop
 8001788:	370c      	adds	r7, #12
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr

08001792 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8001792:	b580      	push	{r7, lr}
 8001794:	b086      	sub	sp, #24
 8001796:	af00      	add	r7, sp, #0
 8001798:	60f8      	str	r0, [r7, #12]
 800179a:	460b      	mov	r3, r1
 800179c:	607a      	str	r2, [r7, #4]
 800179e:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 80017a0:	2300      	movs	r3, #0
 80017a2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 80017a4:	2300      	movs	r3, #0
 80017a6:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80017ae:	b2db      	uxtb	r3, r3
 80017b0:	2b82      	cmp	r3, #130	; 0x82
 80017b2:	d101      	bne.n	80017b8 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 80017b4:	2302      	movs	r3, #2
 80017b6:	e050      	b.n	800185a <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	2282      	movs	r2, #130	; 0x82
 80017bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	691b      	ldr	r3, [r3, #16]
 80017c6:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 80017c8:	697b      	ldr	r3, [r7, #20]
 80017ca:	f003 031c 	and.w	r3, r3, #28
 80017ce:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	8a1b      	ldrh	r3, [r3, #16]
 80017d4:	02db      	lsls	r3, r3, #11
 80017d6:	b29b      	uxth	r3, r3
 80017d8:	697a      	ldr	r2, [r7, #20]
 80017da:	4313      	orrs	r3, r2
 80017dc:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 80017de:	897b      	ldrh	r3, [r7, #10]
 80017e0:	019b      	lsls	r3, r3, #6
 80017e2:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80017e6:	697a      	ldr	r2, [r7, #20]
 80017e8:	4313      	orrs	r3, r2
 80017ea:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	f023 0302 	bic.w	r3, r3, #2
 80017f2:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 80017f4:	697b      	ldr	r3, [r7, #20]
 80017f6:	f043 0301 	orr.w	r3, r3, #1
 80017fa:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	697a      	ldr	r2, [r7, #20]
 8001802:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001804:	f7ff fa56 	bl	8000cb4 <HAL_GetTick>
 8001808:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800180a:	e015      	b.n	8001838 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 800180c:	f7ff fa52 	bl	8000cb4 <HAL_GetTick>
 8001810:	4602      	mov	r2, r0
 8001812:	693b      	ldr	r3, [r7, #16]
 8001814:	1ad3      	subs	r3, r2, r3
 8001816:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800181a:	d309      	bcc.n	8001830 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	2201      	movs	r2, #1
 8001820:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	2200      	movs	r2, #0
 8001828:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 800182c:	2303      	movs	r3, #3
 800182e:	e014      	b.n	800185a <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	691b      	ldr	r3, [r3, #16]
 8001836:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001838:	697b      	ldr	r3, [r7, #20]
 800183a:	f003 0301 	and.w	r3, r3, #1
 800183e:	2b00      	cmp	r3, #0
 8001840:	d1e4      	bne.n	800180c <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	695b      	ldr	r3, [r3, #20]
 8001848:	b29b      	uxth	r3, r3
 800184a:	461a      	mov	r2, r3
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	2201      	movs	r2, #1
 8001854:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001858:	2300      	movs	r3, #0
}
 800185a:	4618      	mov	r0, r3
 800185c:	3718      	adds	r7, #24
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}

08001862 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8001862:	b580      	push	{r7, lr}
 8001864:	b086      	sub	sp, #24
 8001866:	af00      	add	r7, sp, #0
 8001868:	60f8      	str	r0, [r7, #12]
 800186a:	460b      	mov	r3, r1
 800186c:	607a      	str	r2, [r7, #4]
 800186e:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 8001870:	2300      	movs	r3, #0
 8001872:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8001874:	2300      	movs	r3, #0
 8001876:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800187e:	b2db      	uxtb	r3, r3
 8001880:	2b42      	cmp	r3, #66	; 0x42
 8001882:	d101      	bne.n	8001888 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8001884:	2302      	movs	r3, #2
 8001886:	e04e      	b.n	8001926 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	2242      	movs	r2, #66	; 0x42
 800188c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	691b      	ldr	r3, [r3, #16]
 8001896:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	f003 031c 	and.w	r3, r3, #28
 800189e:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	8a1b      	ldrh	r3, [r3, #16]
 80018a4:	02db      	lsls	r3, r3, #11
 80018a6:	b29b      	uxth	r3, r3
 80018a8:	697a      	ldr	r2, [r7, #20]
 80018aa:	4313      	orrs	r3, r2
 80018ac:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 80018ae:	897b      	ldrh	r3, [r7, #10]
 80018b0:	019b      	lsls	r3, r3, #6
 80018b2:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80018b6:	697a      	ldr	r2, [r7, #20]
 80018b8:	4313      	orrs	r3, r2
 80018ba:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 80018bc:	697b      	ldr	r3, [r7, #20]
 80018be:	f043 0302 	orr.w	r3, r3, #2
 80018c2:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	f043 0301 	orr.w	r3, r3, #1
 80018ca:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	b29a      	uxth	r2, r3
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	697a      	ldr	r2, [r7, #20]
 80018dc:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80018de:	f7ff f9e9 	bl	8000cb4 <HAL_GetTick>
 80018e2:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80018e4:	e015      	b.n	8001912 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 80018e6:	f7ff f9e5 	bl	8000cb4 <HAL_GetTick>
 80018ea:	4602      	mov	r2, r0
 80018ec:	693b      	ldr	r3, [r7, #16]
 80018ee:	1ad3      	subs	r3, r2, r3
 80018f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018f4:	d309      	bcc.n	800190a <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	2201      	movs	r2, #1
 80018fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	2200      	movs	r2, #0
 8001902:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001906:	2303      	movs	r3, #3
 8001908:	e00d      	b.n	8001926 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	691b      	ldr	r3, [r3, #16]
 8001910:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001912:	697b      	ldr	r3, [r7, #20]
 8001914:	f003 0301 	and.w	r3, r3, #1
 8001918:	2b00      	cmp	r3, #0
 800191a:	d1e4      	bne.n	80018e6 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	2201      	movs	r2, #1
 8001920:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8001924:	2300      	movs	r3, #0
}
 8001926:	4618      	mov	r0, r3
 8001928:	3718      	adds	r7, #24
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}

0800192e <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 800192e:	b580      	push	{r7, lr}
 8001930:	b082      	sub	sp, #8
 8001932:	af00      	add	r7, sp, #0
 8001934:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800193c:	2b01      	cmp	r3, #1
 800193e:	d101      	bne.n	8001944 <HAL_ETH_Start+0x16>
 8001940:	2302      	movs	r3, #2
 8001942:	e01f      	b.n	8001984 <HAL_ETH_Start+0x56>
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2201      	movs	r2, #1
 8001948:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2202      	movs	r2, #2
 8001950:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8001954:	6878      	ldr	r0, [r7, #4]
 8001956:	f000 fb45 	bl	8001fe4 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 800195a:	6878      	ldr	r0, [r7, #4]
 800195c:	f000 fb7c 	bl	8002058 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8001960:	6878      	ldr	r0, [r7, #4]
 8001962:	f000 fc13 	bl	800218c <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8001966:	6878      	ldr	r0, [r7, #4]
 8001968:	f000 fbb0 	bl	80020cc <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 800196c:	6878      	ldr	r0, [r7, #4]
 800196e:	f000 fbdd 	bl	800212c <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	2201      	movs	r2, #1
 8001976:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2200      	movs	r2, #0
 800197e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001982:	2300      	movs	r3, #0
}
 8001984:	4618      	mov	r0, r3
 8001986:	3708      	adds	r7, #8
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}

0800198c <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 800198c:	b580      	push	{r7, lr}
 800198e:	b082      	sub	sp, #8
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800199a:	2b01      	cmp	r3, #1
 800199c:	d101      	bne.n	80019a2 <HAL_ETH_Stop+0x16>
 800199e:	2302      	movs	r3, #2
 80019a0:	e01f      	b.n	80019e2 <HAL_ETH_Stop+0x56>
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	2201      	movs	r2, #1
 80019a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	2202      	movs	r2, #2
 80019ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 80019b2:	6878      	ldr	r0, [r7, #4]
 80019b4:	f000 fba2 	bl	80020fc <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 80019b8:	6878      	ldr	r0, [r7, #4]
 80019ba:	f000 fbcf 	bl	800215c <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 80019be:	6878      	ldr	r0, [r7, #4]
 80019c0:	f000 fb67 	bl	8002092 <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 80019c4:	6878      	ldr	r0, [r7, #4]
 80019c6:	f000 fbe1 	bl	800218c <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 80019ca:	6878      	ldr	r0, [r7, #4]
 80019cc:	f000 fb27 	bl	800201e <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2201      	movs	r2, #1
 80019d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2200      	movs	r2, #0
 80019dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80019e0:	2300      	movs	r3, #0
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	3708      	adds	r7, #8
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}
	...

080019ec <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b084      	sub	sp, #16
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
 80019f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80019f6:	2300      	movs	r3, #0
 80019f8:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001a00:	2b01      	cmp	r3, #1
 8001a02:	d101      	bne.n	8001a08 <HAL_ETH_ConfigMAC+0x1c>
 8001a04:	2302      	movs	r3, #2
 8001a06:	e0e4      	b.n	8001bd2 <HAL_ETH_ConfigMAC+0x1e6>
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2201      	movs	r2, #1
 8001a0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2202      	movs	r2, #2
 8001a14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	f000 80b1 	beq.w	8001b82 <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg = (heth->Instance)->MACCR;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg &= ETH_MACCR_CLEAR_MASK;
 8001a28:	68fa      	ldr	r2, [r7, #12]
 8001a2a:	4b6c      	ldr	r3, [pc, #432]	; (8001bdc <HAL_ETH_ConfigMAC+0x1f0>)
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	60fb      	str	r3, [r7, #12]
    
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	685b      	ldr	r3, [r3, #4]
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8001a38:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 8001a3e:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 8001a44:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 8001a4a:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 8001a50:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 8001a56:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 8001a5c:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 8001a62:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 8001a68:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 8001a6e:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 8001a74:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 8001a7a:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8001a7c:	68fa      	ldr	r2, [r7, #12]
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	68fa      	ldr	r2, [r7, #12]
 8001a88:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACCR;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001a92:	2001      	movs	r0, #1
 8001a94:	f7ff f91a 	bl	8000ccc <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg; 
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	68fa      	ldr	r2, [r7, #12]
 8001a9e:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001aa8:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 8001aae:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 8001ab4:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 8001aba:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 8001ac0:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 8001ac6:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 8001ad2:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001ad4:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->MACFFR;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001ade:	2001      	movs	r0, #1
 8001ae0:	f7ff f8f4 	bl	8000ccc <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	68fa      	ldr	r2, [r7, #12]
 8001aea:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	683a      	ldr	r2, [r7, #0]
 8001af2:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001af4:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	683a      	ldr	r2, [r7, #0]
 8001afc:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001afe:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg = (heth->Instance)->MACFCR;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	699b      	ldr	r3, [r3, #24]
 8001b06:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8001b08:	68fa      	ldr	r2, [r7, #12]
 8001b0a:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001b0e:	4013      	ands	r3, r2
 8001b10:	60fb      	str	r3, [r7, #12]
     
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b16:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8001b1c:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 8001b22:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 8001b28:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 8001b2e:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 8001b34:	4313      	orrs	r3, r2
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8001b36:	68fa      	ldr	r2, [r7, #12]
 8001b38:	4313      	orrs	r3, r2
 8001b3a:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	68fa      	ldr	r2, [r7, #12]
 8001b42:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->MACFCR;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	699b      	ldr	r3, [r3, #24]
 8001b4a:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001b4c:	2001      	movs	r0, #1
 8001b4e:	f7ff f8bd 	bl	8000ccc <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	68fa      	ldr	r2, [r7, #12]
 8001b58:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	430a      	orrs	r2, r1
 8001b68:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg = (heth->Instance)->MACVLANTR;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	69db      	ldr	r3, [r3, #28]
 8001b70:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 8001b72:	2001      	movs	r0, #1
 8001b74:	f7ff f8aa 	bl	8000ccc <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	68fa      	ldr	r2, [r7, #12]
 8001b7e:	61da      	str	r2, [r3, #28]
 8001b80:	e01e      	b.n	8001bc0 <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg = (heth->Instance)->MACCR;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg &= ~((uint32_t)0x00004800);
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8001b90:	60fb      	str	r3, [r7, #12]
    
    tmpreg |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	689a      	ldr	r2, [r3, #8]
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	68db      	ldr	r3, [r3, #12]
 8001b9a:	4313      	orrs	r3, r2
 8001b9c:	68fa      	ldr	r2, [r7, #12]
 8001b9e:	4313      	orrs	r3, r2
 8001ba0:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	68fa      	ldr	r2, [r7, #12]
 8001ba8:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACCR;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001bb2:	2001      	movs	r0, #1
 8001bb4:	f7ff f88a 	bl	8000ccc <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	68fa      	ldr	r2, [r7, #12]
 8001bbe:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2201      	movs	r2, #1
 8001bc4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2200      	movs	r2, #0
 8001bcc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 8001bd0:	2300      	movs	r3, #0
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	3710      	adds	r7, #16
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	ff20810f 	.word	0xff20810f

08001be0 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b0b0      	sub	sp, #192	; 0xc0
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
 8001be8:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 8001bea:	2300      	movs	r3, #0
 8001bec:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d007      	beq.n	8001c06 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001bfc:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001c04:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8001c06:	2300      	movs	r3, #0
 8001c08:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8001c12:	2300      	movs	r3, #0
 8001c14:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8001c16:	2300      	movs	r3, #0
 8001c18:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	69db      	ldr	r3, [r3, #28]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d103      	bne.n	8001c2e <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8001c26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c2a:	663b      	str	r3, [r7, #96]	; 0x60
 8001c2c:	e001      	b.n	8001c32 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8001c32:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c36:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8001c40:	2300      	movs	r3, #0
 8001c42:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8001c44:	2300      	movs	r3, #0
 8001c46:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8001c4c:	2340      	movs	r3, #64	; 0x40
 8001c4e:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8001c50:	2300      	movs	r3, #0
 8001c52:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8001c56:	2300      	movs	r3, #0
 8001c58:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8001c62:	2300      	movs	r3, #0
 8001c64:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 8001c74:	2300      	movs	r3, #0
 8001c76:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8001c80:	2380      	movs	r3, #128	; 0x80
 8001c82:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001c86:	2300      	movs	r3, #0
 8001c88:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8001c92:	2300      	movs	r3, #0
 8001c94:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 8001cb4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001cb8:	4bab      	ldr	r3, [pc, #684]	; (8001f68 <ETH_MACDMAConfig+0x388>)
 8001cba:	4013      	ands	r3, r2
 8001cbc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8001cc0:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8001cc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8001cc4:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8001cc6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8001cc8:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8001cca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8001ccc:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8001cd2:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8001cd4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8001cd6:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8001cd8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8001cda:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8001ce0:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8001ce2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8001ce4:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8001ce6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8001ce8:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8001cea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8001cec:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8001cee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8001cf0:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8001cf2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8001cf4:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8001cf6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001d08:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001d14:	2001      	movs	r0, #1
 8001d16:	f7fe ffd9 	bl	8000ccc <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001d22:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001d24:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8001d26:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001d28:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8001d2a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8001d2c:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8001d2e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8001d32:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8001d34:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8001d38:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8001d3a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8001d3e:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8001d40:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8001d44:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8001d48:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8001d50:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001d52:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8001d5e:	2001      	movs	r0, #1
 8001d60:	f7fe ffb4 	bl	8000ccc <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001d6c:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001d76:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001d80:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	699b      	ldr	r3, [r3, #24]
 8001d88:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8001d8c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001d90:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001d94:	4013      	ands	r3, r2
 8001d96:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8001d9a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001d9e:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8001da0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8001da4:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8001da6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8001daa:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8001dac:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8001db0:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8001db2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8001db6:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8001db8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8001dbc:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8001dbe:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001dd0:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	699b      	ldr	r3, [r3, #24]
 8001dd8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8001ddc:	2001      	movs	r0, #1
 8001dde:	f7fe ff75 	bl	8000ccc <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001dea:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8001dec:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8001df0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	430a      	orrs	r2, r1
 8001dfa:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	69db      	ldr	r3, [r3, #28]
 8001e02:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e06:	2001      	movs	r0, #1
 8001e08:	f7fe ff60 	bl	8000ccc <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001e14:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8001e16:	2300      	movs	r3, #0
 8001e18:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8001e1a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e1e:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8001e20:	2300      	movs	r3, #0
 8001e22:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8001e24:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001e28:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8001e32:	2300      	movs	r3, #0
 8001e34:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001e36:	2300      	movs	r3, #0
 8001e38:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8001e3a:	2304      	movs	r3, #4
 8001e3c:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8001e3e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e42:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8001e44:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e48:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001e4a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001e4e:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001e50:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e54:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8001e56:	2380      	movs	r3, #128	; 0x80
 8001e58:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681a      	ldr	r2, [r3, #0]
 8001e66:	f241 0318 	movw	r3, #4120	; 0x1018
 8001e6a:	4413      	add	r3, r2
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 8001e72:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001e76:	4b3d      	ldr	r3, [pc, #244]	; (8001f6c <ETH_MACDMAConfig+0x38c>)
 8001e78:	4013      	ands	r3, r2
 8001e7a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001e7e:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8001e80:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001e82:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8001e84:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8001e86:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8001e88:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8001e8a:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8001e8c:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8001e8e:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8001e90:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8001e92:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8001e94:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8001e96:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8001e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8001e9a:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8001e9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8001e9e:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001ea0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681a      	ldr	r2, [r3, #0]
 8001eae:	f241 0318 	movw	r3, #4120	; 0x1018
 8001eb2:	4413      	add	r3, r2
 8001eb4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001eb8:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681a      	ldr	r2, [r3, #0]
 8001ebe:	f241 0318 	movw	r3, #4120	; 0x1018
 8001ec2:	4413      	add	r3, r2
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001eca:	2001      	movs	r0, #1
 8001ecc:	f7fe fefe 	bl	8000ccc <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681a      	ldr	r2, [r3, #0]
 8001ed4:	f241 0318 	movw	r3, #4120	; 0x1018
 8001ed8:	4413      	add	r3, r2
 8001eda:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001ede:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001ee0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8001ee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001ee4:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8001ee6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8001ee8:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8001eea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8001eec:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8001eee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8001ef0:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 8001ef2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ef4:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8001ef6:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8001ef8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 8001efa:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001f04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f08:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f18:	2001      	movs	r0, #1
 8001f1a:	f7fe fed7 	bl	8000ccc <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f26:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001f2a:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	699b      	ldr	r3, [r3, #24]
 8001f30:	2b01      	cmp	r3, #1
 8001f32:	d10d      	bne.n	8001f50 <ETH_MACDMAConfig+0x370>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681a      	ldr	r2, [r3, #0]
 8001f38:	f241 031c 	movw	r3, #4124	; 0x101c
 8001f3c:	4413      	add	r3, r2
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	687a      	ldr	r2, [r7, #4]
 8001f42:	6811      	ldr	r1, [r2, #0]
 8001f44:	4a0a      	ldr	r2, [pc, #40]	; (8001f70 <ETH_MACDMAConfig+0x390>)
 8001f46:	431a      	orrs	r2, r3
 8001f48:	f241 031c 	movw	r3, #4124	; 0x101c
 8001f4c:	440b      	add	r3, r1
 8001f4e:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	695b      	ldr	r3, [r3, #20]
 8001f54:	461a      	mov	r2, r3
 8001f56:	2100      	movs	r1, #0
 8001f58:	6878      	ldr	r0, [r7, #4]
 8001f5a:	f000 f80b 	bl	8001f74 <ETH_MACAddressConfig>
}
 8001f5e:	bf00      	nop
 8001f60:	37c0      	adds	r7, #192	; 0xc0
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}
 8001f66:	bf00      	nop
 8001f68:	ff20810f 	.word	0xff20810f
 8001f6c:	f8de3f23 	.word	0xf8de3f23
 8001f70:	00010040 	.word	0x00010040

08001f74 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b087      	sub	sp, #28
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	60f8      	str	r0, [r7, #12]
 8001f7c:	60b9      	str	r1, [r7, #8]
 8001f7e:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	3305      	adds	r3, #5
 8001f84:	781b      	ldrb	r3, [r3, #0]
 8001f86:	021b      	lsls	r3, r3, #8
 8001f88:	687a      	ldr	r2, [r7, #4]
 8001f8a:	3204      	adds	r2, #4
 8001f8c:	7812      	ldrb	r2, [r2, #0]
 8001f8e:	4313      	orrs	r3, r2
 8001f90:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 8001f92:	68ba      	ldr	r2, [r7, #8]
 8001f94:	4b11      	ldr	r3, [pc, #68]	; (8001fdc <ETH_MACAddressConfig+0x68>)
 8001f96:	4413      	add	r3, r2
 8001f98:	461a      	mov	r2, r3
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	3303      	adds	r3, #3
 8001fa2:	781b      	ldrb	r3, [r3, #0]
 8001fa4:	061a      	lsls	r2, r3, #24
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	3302      	adds	r3, #2
 8001faa:	781b      	ldrb	r3, [r3, #0]
 8001fac:	041b      	lsls	r3, r3, #16
 8001fae:	431a      	orrs	r2, r3
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	3301      	adds	r3, #1
 8001fb4:	781b      	ldrb	r3, [r3, #0]
 8001fb6:	021b      	lsls	r3, r3, #8
 8001fb8:	4313      	orrs	r3, r2
 8001fba:	687a      	ldr	r2, [r7, #4]
 8001fbc:	7812      	ldrb	r2, [r2, #0]
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 8001fc2:	68ba      	ldr	r2, [r7, #8]
 8001fc4:	4b06      	ldr	r3, [pc, #24]	; (8001fe0 <ETH_MACAddressConfig+0x6c>)
 8001fc6:	4413      	add	r3, r2
 8001fc8:	461a      	mov	r2, r3
 8001fca:	697b      	ldr	r3, [r7, #20]
 8001fcc:	6013      	str	r3, [r2, #0]
}
 8001fce:	bf00      	nop
 8001fd0:	371c      	adds	r7, #28
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd8:	4770      	bx	lr
 8001fda:	bf00      	nop
 8001fdc:	40028040 	.word	0x40028040
 8001fe0:	40028044 	.word	0x40028044

08001fe4 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b084      	sub	sp, #16
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8001fec:	2300      	movs	r3, #0
 8001fee:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	681a      	ldr	r2, [r3, #0]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f042 0208 	orr.w	r2, r2, #8
 8001ffe:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002008:	2001      	movs	r0, #1
 800200a:	f7fe fe5f 	bl	8000ccc <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	68fa      	ldr	r2, [r7, #12]
 8002014:	601a      	str	r2, [r3, #0]
}
 8002016:	bf00      	nop
 8002018:	3710      	adds	r7, #16
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}

0800201e <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 800201e:	b580      	push	{r7, lr}
 8002020:	b084      	sub	sp, #16
 8002022:	af00      	add	r7, sp, #0
 8002024:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002026:	2300      	movs	r3, #0
 8002028:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	681a      	ldr	r2, [r3, #0]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f022 0208 	bic.w	r2, r2, #8
 8002038:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002042:	2001      	movs	r0, #1
 8002044:	f7fe fe42 	bl	8000ccc <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	68fa      	ldr	r2, [r7, #12]
 800204e:	601a      	str	r2, [r3, #0]
}
 8002050:	bf00      	nop
 8002052:	3710      	adds	r7, #16
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}

08002058 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 8002058:	b580      	push	{r7, lr}
 800205a:	b084      	sub	sp, #16
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002060:	2300      	movs	r3, #0
 8002062:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	681a      	ldr	r2, [r3, #0]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f042 0204 	orr.w	r2, r2, #4
 8002072:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800207c:	2001      	movs	r0, #1
 800207e:	f7fe fe25 	bl	8000ccc <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	68fa      	ldr	r2, [r7, #12]
 8002088:	601a      	str	r2, [r3, #0]
}
 800208a:	bf00      	nop
 800208c:	3710      	adds	r7, #16
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}

08002092 <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8002092:	b580      	push	{r7, lr}
 8002094:	b084      	sub	sp, #16
 8002096:	af00      	add	r7, sp, #0
 8002098:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 800209a:	2300      	movs	r3, #0
 800209c:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	681a      	ldr	r2, [r3, #0]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f022 0204 	bic.w	r2, r2, #4
 80020ac:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80020b6:	2001      	movs	r0, #1
 80020b8:	f7fe fe08 	bl	8000ccc <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	68fa      	ldr	r2, [r7, #12]
 80020c2:	601a      	str	r2, [r3, #0]
}
 80020c4:	bf00      	nop
 80020c6:	3710      	adds	r7, #16
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}

080020cc <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b083      	sub	sp, #12
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681a      	ldr	r2, [r3, #0]
 80020d8:	f241 0318 	movw	r3, #4120	; 0x1018
 80020dc:	4413      	add	r3, r2
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	687a      	ldr	r2, [r7, #4]
 80020e2:	6811      	ldr	r1, [r2, #0]
 80020e4:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80020e8:	f241 0318 	movw	r3, #4120	; 0x1018
 80020ec:	440b      	add	r3, r1
 80020ee:	601a      	str	r2, [r3, #0]
}
 80020f0:	bf00      	nop
 80020f2:	370c      	adds	r7, #12
 80020f4:	46bd      	mov	sp, r7
 80020f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fa:	4770      	bx	lr

080020fc <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 80020fc:	b480      	push	{r7}
 80020fe:	b083      	sub	sp, #12
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681a      	ldr	r2, [r3, #0]
 8002108:	f241 0318 	movw	r3, #4120	; 0x1018
 800210c:	4413      	add	r3, r2
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	687a      	ldr	r2, [r7, #4]
 8002112:	6811      	ldr	r1, [r2, #0]
 8002114:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002118:	f241 0318 	movw	r3, #4120	; 0x1018
 800211c:	440b      	add	r3, r1
 800211e:	601a      	str	r2, [r3, #0]
}
 8002120:	bf00      	nop
 8002122:	370c      	adds	r7, #12
 8002124:	46bd      	mov	sp, r7
 8002126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212a:	4770      	bx	lr

0800212c <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 800212c:	b480      	push	{r7}
 800212e:	b083      	sub	sp, #12
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681a      	ldr	r2, [r3, #0]
 8002138:	f241 0318 	movw	r3, #4120	; 0x1018
 800213c:	4413      	add	r3, r2
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	687a      	ldr	r2, [r7, #4]
 8002142:	6811      	ldr	r1, [r2, #0]
 8002144:	f043 0202 	orr.w	r2, r3, #2
 8002148:	f241 0318 	movw	r3, #4120	; 0x1018
 800214c:	440b      	add	r3, r1
 800214e:	601a      	str	r2, [r3, #0]
}
 8002150:	bf00      	nop
 8002152:	370c      	adds	r7, #12
 8002154:	46bd      	mov	sp, r7
 8002156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215a:	4770      	bx	lr

0800215c <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 800215c:	b480      	push	{r7}
 800215e:	b083      	sub	sp, #12
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681a      	ldr	r2, [r3, #0]
 8002168:	f241 0318 	movw	r3, #4120	; 0x1018
 800216c:	4413      	add	r3, r2
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	687a      	ldr	r2, [r7, #4]
 8002172:	6811      	ldr	r1, [r2, #0]
 8002174:	f023 0202 	bic.w	r2, r3, #2
 8002178:	f241 0318 	movw	r3, #4120	; 0x1018
 800217c:	440b      	add	r3, r1
 800217e:	601a      	str	r2, [r3, #0]
}
 8002180:	bf00      	nop
 8002182:	370c      	adds	r7, #12
 8002184:	46bd      	mov	sp, r7
 8002186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218a:	4770      	bx	lr

0800218c <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b084      	sub	sp, #16
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002194:	2300      	movs	r3, #0
 8002196:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681a      	ldr	r2, [r3, #0]
 800219c:	f241 0318 	movw	r3, #4120	; 0x1018
 80021a0:	4413      	add	r3, r2
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	687a      	ldr	r2, [r7, #4]
 80021a6:	6811      	ldr	r1, [r2, #0]
 80021a8:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80021ac:	f241 0318 	movw	r3, #4120	; 0x1018
 80021b0:	440b      	add	r3, r1
 80021b2:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681a      	ldr	r2, [r3, #0]
 80021b8:	f241 0318 	movw	r3, #4120	; 0x1018
 80021bc:	4413      	add	r3, r2
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80021c2:	2001      	movs	r0, #1
 80021c4:	f7fe fd82 	bl	8000ccc <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6819      	ldr	r1, [r3, #0]
 80021cc:	68fa      	ldr	r2, [r7, #12]
 80021ce:	f241 0318 	movw	r3, #4120	; 0x1018
 80021d2:	440b      	add	r3, r1
 80021d4:	601a      	str	r2, [r3, #0]
}
 80021d6:	bf00      	nop
 80021d8:	3710      	adds	r7, #16
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}
	...

080021e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b089      	sub	sp, #36	; 0x24
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
 80021e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80021ea:	2300      	movs	r3, #0
 80021ec:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80021ee:	2300      	movs	r3, #0
 80021f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80021f2:	2300      	movs	r3, #0
 80021f4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80021f6:	2300      	movs	r3, #0
 80021f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80021fa:	2300      	movs	r3, #0
 80021fc:	61fb      	str	r3, [r7, #28]
 80021fe:	e175      	b.n	80024ec <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002200:	2201      	movs	r2, #1
 8002202:	69fb      	ldr	r3, [r7, #28]
 8002204:	fa02 f303 	lsl.w	r3, r2, r3
 8002208:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	697a      	ldr	r2, [r7, #20]
 8002210:	4013      	ands	r3, r2
 8002212:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002214:	693a      	ldr	r2, [r7, #16]
 8002216:	697b      	ldr	r3, [r7, #20]
 8002218:	429a      	cmp	r2, r3
 800221a:	f040 8164 	bne.w	80024e6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	2b01      	cmp	r3, #1
 8002224:	d00b      	beq.n	800223e <HAL_GPIO_Init+0x5e>
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	2b02      	cmp	r3, #2
 800222c:	d007      	beq.n	800223e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002232:	2b11      	cmp	r3, #17
 8002234:	d003      	beq.n	800223e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	2b12      	cmp	r3, #18
 800223c:	d130      	bne.n	80022a0 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	689b      	ldr	r3, [r3, #8]
 8002242:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002244:	69fb      	ldr	r3, [r7, #28]
 8002246:	005b      	lsls	r3, r3, #1
 8002248:	2203      	movs	r2, #3
 800224a:	fa02 f303 	lsl.w	r3, r2, r3
 800224e:	43db      	mvns	r3, r3
 8002250:	69ba      	ldr	r2, [r7, #24]
 8002252:	4013      	ands	r3, r2
 8002254:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	68da      	ldr	r2, [r3, #12]
 800225a:	69fb      	ldr	r3, [r7, #28]
 800225c:	005b      	lsls	r3, r3, #1
 800225e:	fa02 f303 	lsl.w	r3, r2, r3
 8002262:	69ba      	ldr	r2, [r7, #24]
 8002264:	4313      	orrs	r3, r2
 8002266:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	69ba      	ldr	r2, [r7, #24]
 800226c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002274:	2201      	movs	r2, #1
 8002276:	69fb      	ldr	r3, [r7, #28]
 8002278:	fa02 f303 	lsl.w	r3, r2, r3
 800227c:	43db      	mvns	r3, r3
 800227e:	69ba      	ldr	r2, [r7, #24]
 8002280:	4013      	ands	r3, r2
 8002282:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	091b      	lsrs	r3, r3, #4
 800228a:	f003 0201 	and.w	r2, r3, #1
 800228e:	69fb      	ldr	r3, [r7, #28]
 8002290:	fa02 f303 	lsl.w	r3, r2, r3
 8002294:	69ba      	ldr	r2, [r7, #24]
 8002296:	4313      	orrs	r3, r2
 8002298:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	69ba      	ldr	r2, [r7, #24]
 800229e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	68db      	ldr	r3, [r3, #12]
 80022a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80022a6:	69fb      	ldr	r3, [r7, #28]
 80022a8:	005b      	lsls	r3, r3, #1
 80022aa:	2203      	movs	r2, #3
 80022ac:	fa02 f303 	lsl.w	r3, r2, r3
 80022b0:	43db      	mvns	r3, r3
 80022b2:	69ba      	ldr	r2, [r7, #24]
 80022b4:	4013      	ands	r3, r2
 80022b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	689a      	ldr	r2, [r3, #8]
 80022bc:	69fb      	ldr	r3, [r7, #28]
 80022be:	005b      	lsls	r3, r3, #1
 80022c0:	fa02 f303 	lsl.w	r3, r2, r3
 80022c4:	69ba      	ldr	r2, [r7, #24]
 80022c6:	4313      	orrs	r3, r2
 80022c8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	69ba      	ldr	r2, [r7, #24]
 80022ce:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	2b02      	cmp	r3, #2
 80022d6:	d003      	beq.n	80022e0 <HAL_GPIO_Init+0x100>
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	2b12      	cmp	r3, #18
 80022de:	d123      	bne.n	8002328 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80022e0:	69fb      	ldr	r3, [r7, #28]
 80022e2:	08da      	lsrs	r2, r3, #3
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	3208      	adds	r2, #8
 80022e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80022ee:	69fb      	ldr	r3, [r7, #28]
 80022f0:	f003 0307 	and.w	r3, r3, #7
 80022f4:	009b      	lsls	r3, r3, #2
 80022f6:	220f      	movs	r2, #15
 80022f8:	fa02 f303 	lsl.w	r3, r2, r3
 80022fc:	43db      	mvns	r3, r3
 80022fe:	69ba      	ldr	r2, [r7, #24]
 8002300:	4013      	ands	r3, r2
 8002302:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	691a      	ldr	r2, [r3, #16]
 8002308:	69fb      	ldr	r3, [r7, #28]
 800230a:	f003 0307 	and.w	r3, r3, #7
 800230e:	009b      	lsls	r3, r3, #2
 8002310:	fa02 f303 	lsl.w	r3, r2, r3
 8002314:	69ba      	ldr	r2, [r7, #24]
 8002316:	4313      	orrs	r3, r2
 8002318:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800231a:	69fb      	ldr	r3, [r7, #28]
 800231c:	08da      	lsrs	r2, r3, #3
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	3208      	adds	r2, #8
 8002322:	69b9      	ldr	r1, [r7, #24]
 8002324:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800232e:	69fb      	ldr	r3, [r7, #28]
 8002330:	005b      	lsls	r3, r3, #1
 8002332:	2203      	movs	r2, #3
 8002334:	fa02 f303 	lsl.w	r3, r2, r3
 8002338:	43db      	mvns	r3, r3
 800233a:	69ba      	ldr	r2, [r7, #24]
 800233c:	4013      	ands	r3, r2
 800233e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	f003 0203 	and.w	r2, r3, #3
 8002348:	69fb      	ldr	r3, [r7, #28]
 800234a:	005b      	lsls	r3, r3, #1
 800234c:	fa02 f303 	lsl.w	r3, r2, r3
 8002350:	69ba      	ldr	r2, [r7, #24]
 8002352:	4313      	orrs	r3, r2
 8002354:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	69ba      	ldr	r2, [r7, #24]
 800235a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002364:	2b00      	cmp	r3, #0
 8002366:	f000 80be 	beq.w	80024e6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800236a:	4b65      	ldr	r3, [pc, #404]	; (8002500 <HAL_GPIO_Init+0x320>)
 800236c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800236e:	4a64      	ldr	r2, [pc, #400]	; (8002500 <HAL_GPIO_Init+0x320>)
 8002370:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002374:	6453      	str	r3, [r2, #68]	; 0x44
 8002376:	4b62      	ldr	r3, [pc, #392]	; (8002500 <HAL_GPIO_Init+0x320>)
 8002378:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800237a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800237e:	60fb      	str	r3, [r7, #12]
 8002380:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002382:	4a60      	ldr	r2, [pc, #384]	; (8002504 <HAL_GPIO_Init+0x324>)
 8002384:	69fb      	ldr	r3, [r7, #28]
 8002386:	089b      	lsrs	r3, r3, #2
 8002388:	3302      	adds	r3, #2
 800238a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800238e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002390:	69fb      	ldr	r3, [r7, #28]
 8002392:	f003 0303 	and.w	r3, r3, #3
 8002396:	009b      	lsls	r3, r3, #2
 8002398:	220f      	movs	r2, #15
 800239a:	fa02 f303 	lsl.w	r3, r2, r3
 800239e:	43db      	mvns	r3, r3
 80023a0:	69ba      	ldr	r2, [r7, #24]
 80023a2:	4013      	ands	r3, r2
 80023a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	4a57      	ldr	r2, [pc, #348]	; (8002508 <HAL_GPIO_Init+0x328>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d037      	beq.n	800241e <HAL_GPIO_Init+0x23e>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	4a56      	ldr	r2, [pc, #344]	; (800250c <HAL_GPIO_Init+0x32c>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d031      	beq.n	800241a <HAL_GPIO_Init+0x23a>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	4a55      	ldr	r2, [pc, #340]	; (8002510 <HAL_GPIO_Init+0x330>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d02b      	beq.n	8002416 <HAL_GPIO_Init+0x236>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	4a54      	ldr	r2, [pc, #336]	; (8002514 <HAL_GPIO_Init+0x334>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d025      	beq.n	8002412 <HAL_GPIO_Init+0x232>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	4a53      	ldr	r2, [pc, #332]	; (8002518 <HAL_GPIO_Init+0x338>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d01f      	beq.n	800240e <HAL_GPIO_Init+0x22e>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	4a52      	ldr	r2, [pc, #328]	; (800251c <HAL_GPIO_Init+0x33c>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d019      	beq.n	800240a <HAL_GPIO_Init+0x22a>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	4a51      	ldr	r2, [pc, #324]	; (8002520 <HAL_GPIO_Init+0x340>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d013      	beq.n	8002406 <HAL_GPIO_Init+0x226>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	4a50      	ldr	r2, [pc, #320]	; (8002524 <HAL_GPIO_Init+0x344>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d00d      	beq.n	8002402 <HAL_GPIO_Init+0x222>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	4a4f      	ldr	r2, [pc, #316]	; (8002528 <HAL_GPIO_Init+0x348>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d007      	beq.n	80023fe <HAL_GPIO_Init+0x21e>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	4a4e      	ldr	r2, [pc, #312]	; (800252c <HAL_GPIO_Init+0x34c>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d101      	bne.n	80023fa <HAL_GPIO_Init+0x21a>
 80023f6:	2309      	movs	r3, #9
 80023f8:	e012      	b.n	8002420 <HAL_GPIO_Init+0x240>
 80023fa:	230a      	movs	r3, #10
 80023fc:	e010      	b.n	8002420 <HAL_GPIO_Init+0x240>
 80023fe:	2308      	movs	r3, #8
 8002400:	e00e      	b.n	8002420 <HAL_GPIO_Init+0x240>
 8002402:	2307      	movs	r3, #7
 8002404:	e00c      	b.n	8002420 <HAL_GPIO_Init+0x240>
 8002406:	2306      	movs	r3, #6
 8002408:	e00a      	b.n	8002420 <HAL_GPIO_Init+0x240>
 800240a:	2305      	movs	r3, #5
 800240c:	e008      	b.n	8002420 <HAL_GPIO_Init+0x240>
 800240e:	2304      	movs	r3, #4
 8002410:	e006      	b.n	8002420 <HAL_GPIO_Init+0x240>
 8002412:	2303      	movs	r3, #3
 8002414:	e004      	b.n	8002420 <HAL_GPIO_Init+0x240>
 8002416:	2302      	movs	r3, #2
 8002418:	e002      	b.n	8002420 <HAL_GPIO_Init+0x240>
 800241a:	2301      	movs	r3, #1
 800241c:	e000      	b.n	8002420 <HAL_GPIO_Init+0x240>
 800241e:	2300      	movs	r3, #0
 8002420:	69fa      	ldr	r2, [r7, #28]
 8002422:	f002 0203 	and.w	r2, r2, #3
 8002426:	0092      	lsls	r2, r2, #2
 8002428:	4093      	lsls	r3, r2
 800242a:	69ba      	ldr	r2, [r7, #24]
 800242c:	4313      	orrs	r3, r2
 800242e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002430:	4934      	ldr	r1, [pc, #208]	; (8002504 <HAL_GPIO_Init+0x324>)
 8002432:	69fb      	ldr	r3, [r7, #28]
 8002434:	089b      	lsrs	r3, r3, #2
 8002436:	3302      	adds	r3, #2
 8002438:	69ba      	ldr	r2, [r7, #24]
 800243a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800243e:	4b3c      	ldr	r3, [pc, #240]	; (8002530 <HAL_GPIO_Init+0x350>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002444:	693b      	ldr	r3, [r7, #16]
 8002446:	43db      	mvns	r3, r3
 8002448:	69ba      	ldr	r2, [r7, #24]
 800244a:	4013      	ands	r3, r2
 800244c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002456:	2b00      	cmp	r3, #0
 8002458:	d003      	beq.n	8002462 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800245a:	69ba      	ldr	r2, [r7, #24]
 800245c:	693b      	ldr	r3, [r7, #16]
 800245e:	4313      	orrs	r3, r2
 8002460:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002462:	4a33      	ldr	r2, [pc, #204]	; (8002530 <HAL_GPIO_Init+0x350>)
 8002464:	69bb      	ldr	r3, [r7, #24]
 8002466:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002468:	4b31      	ldr	r3, [pc, #196]	; (8002530 <HAL_GPIO_Init+0x350>)
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800246e:	693b      	ldr	r3, [r7, #16]
 8002470:	43db      	mvns	r3, r3
 8002472:	69ba      	ldr	r2, [r7, #24]
 8002474:	4013      	ands	r3, r2
 8002476:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002480:	2b00      	cmp	r3, #0
 8002482:	d003      	beq.n	800248c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002484:	69ba      	ldr	r2, [r7, #24]
 8002486:	693b      	ldr	r3, [r7, #16]
 8002488:	4313      	orrs	r3, r2
 800248a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800248c:	4a28      	ldr	r2, [pc, #160]	; (8002530 <HAL_GPIO_Init+0x350>)
 800248e:	69bb      	ldr	r3, [r7, #24]
 8002490:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002492:	4b27      	ldr	r3, [pc, #156]	; (8002530 <HAL_GPIO_Init+0x350>)
 8002494:	689b      	ldr	r3, [r3, #8]
 8002496:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	43db      	mvns	r3, r3
 800249c:	69ba      	ldr	r2, [r7, #24]
 800249e:	4013      	ands	r3, r2
 80024a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d003      	beq.n	80024b6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80024ae:	69ba      	ldr	r2, [r7, #24]
 80024b0:	693b      	ldr	r3, [r7, #16]
 80024b2:	4313      	orrs	r3, r2
 80024b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80024b6:	4a1e      	ldr	r2, [pc, #120]	; (8002530 <HAL_GPIO_Init+0x350>)
 80024b8:	69bb      	ldr	r3, [r7, #24]
 80024ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80024bc:	4b1c      	ldr	r3, [pc, #112]	; (8002530 <HAL_GPIO_Init+0x350>)
 80024be:	68db      	ldr	r3, [r3, #12]
 80024c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024c2:	693b      	ldr	r3, [r7, #16]
 80024c4:	43db      	mvns	r3, r3
 80024c6:	69ba      	ldr	r2, [r7, #24]
 80024c8:	4013      	ands	r3, r2
 80024ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d003      	beq.n	80024e0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80024d8:	69ba      	ldr	r2, [r7, #24]
 80024da:	693b      	ldr	r3, [r7, #16]
 80024dc:	4313      	orrs	r3, r2
 80024de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80024e0:	4a13      	ldr	r2, [pc, #76]	; (8002530 <HAL_GPIO_Init+0x350>)
 80024e2:	69bb      	ldr	r3, [r7, #24]
 80024e4:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80024e6:	69fb      	ldr	r3, [r7, #28]
 80024e8:	3301      	adds	r3, #1
 80024ea:	61fb      	str	r3, [r7, #28]
 80024ec:	69fb      	ldr	r3, [r7, #28]
 80024ee:	2b0f      	cmp	r3, #15
 80024f0:	f67f ae86 	bls.w	8002200 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80024f4:	bf00      	nop
 80024f6:	3724      	adds	r7, #36	; 0x24
 80024f8:	46bd      	mov	sp, r7
 80024fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fe:	4770      	bx	lr
 8002500:	40023800 	.word	0x40023800
 8002504:	40013800 	.word	0x40013800
 8002508:	40020000 	.word	0x40020000
 800250c:	40020400 	.word	0x40020400
 8002510:	40020800 	.word	0x40020800
 8002514:	40020c00 	.word	0x40020c00
 8002518:	40021000 	.word	0x40021000
 800251c:	40021400 	.word	0x40021400
 8002520:	40021800 	.word	0x40021800
 8002524:	40021c00 	.word	0x40021c00
 8002528:	40022000 	.word	0x40022000
 800252c:	40022400 	.word	0x40022400
 8002530:	40013c00 	.word	0x40013c00

08002534 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002534:	b480      	push	{r7}
 8002536:	b083      	sub	sp, #12
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
 800253c:	460b      	mov	r3, r1
 800253e:	807b      	strh	r3, [r7, #2]
 8002540:	4613      	mov	r3, r2
 8002542:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002544:	787b      	ldrb	r3, [r7, #1]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d003      	beq.n	8002552 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800254a:	887a      	ldrh	r2, [r7, #2]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002550:	e003      	b.n	800255a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002552:	887b      	ldrh	r3, [r7, #2]
 8002554:	041a      	lsls	r2, r3, #16
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	619a      	str	r2, [r3, #24]
}
 800255a:	bf00      	nop
 800255c:	370c      	adds	r7, #12
 800255e:	46bd      	mov	sp, r7
 8002560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002564:	4770      	bx	lr

08002566 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002566:	b480      	push	{r7}
 8002568:	b085      	sub	sp, #20
 800256a:	af00      	add	r7, sp, #0
 800256c:	6078      	str	r0, [r7, #4]
 800256e:	460b      	mov	r3, r1
 8002570:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	695b      	ldr	r3, [r3, #20]
 8002576:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002578:	887a      	ldrh	r2, [r7, #2]
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	4013      	ands	r3, r2
 800257e:	041a      	lsls	r2, r3, #16
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	43d9      	mvns	r1, r3
 8002584:	887b      	ldrh	r3, [r7, #2]
 8002586:	400b      	ands	r3, r1
 8002588:	431a      	orrs	r2, r3
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	619a      	str	r2, [r3, #24]
}
 800258e:	bf00      	nop
 8002590:	3714      	adds	r7, #20
 8002592:	46bd      	mov	sp, r7
 8002594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002598:	4770      	bx	lr
	...

0800259c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b082      	sub	sp, #8
 80025a0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80025a2:	2300      	movs	r3, #0
 80025a4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80025a6:	4b23      	ldr	r3, [pc, #140]	; (8002634 <HAL_PWREx_EnableOverDrive+0x98>)
 80025a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025aa:	4a22      	ldr	r2, [pc, #136]	; (8002634 <HAL_PWREx_EnableOverDrive+0x98>)
 80025ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025b0:	6413      	str	r3, [r2, #64]	; 0x40
 80025b2:	4b20      	ldr	r3, [pc, #128]	; (8002634 <HAL_PWREx_EnableOverDrive+0x98>)
 80025b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025ba:	603b      	str	r3, [r7, #0]
 80025bc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80025be:	4b1e      	ldr	r3, [pc, #120]	; (8002638 <HAL_PWREx_EnableOverDrive+0x9c>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4a1d      	ldr	r2, [pc, #116]	; (8002638 <HAL_PWREx_EnableOverDrive+0x9c>)
 80025c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025c8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80025ca:	f7fe fb73 	bl	8000cb4 <HAL_GetTick>
 80025ce:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80025d0:	e009      	b.n	80025e6 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80025d2:	f7fe fb6f 	bl	8000cb4 <HAL_GetTick>
 80025d6:	4602      	mov	r2, r0
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	1ad3      	subs	r3, r2, r3
 80025dc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80025e0:	d901      	bls.n	80025e6 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80025e2:	2303      	movs	r3, #3
 80025e4:	e022      	b.n	800262c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80025e6:	4b14      	ldr	r3, [pc, #80]	; (8002638 <HAL_PWREx_EnableOverDrive+0x9c>)
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025f2:	d1ee      	bne.n	80025d2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80025f4:	4b10      	ldr	r3, [pc, #64]	; (8002638 <HAL_PWREx_EnableOverDrive+0x9c>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a0f      	ldr	r2, [pc, #60]	; (8002638 <HAL_PWREx_EnableOverDrive+0x9c>)
 80025fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025fe:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002600:	f7fe fb58 	bl	8000cb4 <HAL_GetTick>
 8002604:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002606:	e009      	b.n	800261c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002608:	f7fe fb54 	bl	8000cb4 <HAL_GetTick>
 800260c:	4602      	mov	r2, r0
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	1ad3      	subs	r3, r2, r3
 8002612:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002616:	d901      	bls.n	800261c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002618:	2303      	movs	r3, #3
 800261a:	e007      	b.n	800262c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800261c:	4b06      	ldr	r3, [pc, #24]	; (8002638 <HAL_PWREx_EnableOverDrive+0x9c>)
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002624:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002628:	d1ee      	bne.n	8002608 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800262a:	2300      	movs	r3, #0
}
 800262c:	4618      	mov	r0, r3
 800262e:	3708      	adds	r7, #8
 8002630:	46bd      	mov	sp, r7
 8002632:	bd80      	pop	{r7, pc}
 8002634:	40023800 	.word	0x40023800
 8002638:	40007000 	.word	0x40007000

0800263c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b086      	sub	sp, #24
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002644:	2300      	movs	r3, #0
 8002646:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d101      	bne.n	8002652 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800264e:	2301      	movs	r3, #1
 8002650:	e29b      	b.n	8002b8a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f003 0301 	and.w	r3, r3, #1
 800265a:	2b00      	cmp	r3, #0
 800265c:	f000 8087 	beq.w	800276e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002660:	4b96      	ldr	r3, [pc, #600]	; (80028bc <HAL_RCC_OscConfig+0x280>)
 8002662:	689b      	ldr	r3, [r3, #8]
 8002664:	f003 030c 	and.w	r3, r3, #12
 8002668:	2b04      	cmp	r3, #4
 800266a:	d00c      	beq.n	8002686 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800266c:	4b93      	ldr	r3, [pc, #588]	; (80028bc <HAL_RCC_OscConfig+0x280>)
 800266e:	689b      	ldr	r3, [r3, #8]
 8002670:	f003 030c 	and.w	r3, r3, #12
 8002674:	2b08      	cmp	r3, #8
 8002676:	d112      	bne.n	800269e <HAL_RCC_OscConfig+0x62>
 8002678:	4b90      	ldr	r3, [pc, #576]	; (80028bc <HAL_RCC_OscConfig+0x280>)
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002680:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002684:	d10b      	bne.n	800269e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002686:	4b8d      	ldr	r3, [pc, #564]	; (80028bc <HAL_RCC_OscConfig+0x280>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800268e:	2b00      	cmp	r3, #0
 8002690:	d06c      	beq.n	800276c <HAL_RCC_OscConfig+0x130>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d168      	bne.n	800276c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	e275      	b.n	8002b8a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026a6:	d106      	bne.n	80026b6 <HAL_RCC_OscConfig+0x7a>
 80026a8:	4b84      	ldr	r3, [pc, #528]	; (80028bc <HAL_RCC_OscConfig+0x280>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a83      	ldr	r2, [pc, #524]	; (80028bc <HAL_RCC_OscConfig+0x280>)
 80026ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026b2:	6013      	str	r3, [r2, #0]
 80026b4:	e02e      	b.n	8002714 <HAL_RCC_OscConfig+0xd8>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d10c      	bne.n	80026d8 <HAL_RCC_OscConfig+0x9c>
 80026be:	4b7f      	ldr	r3, [pc, #508]	; (80028bc <HAL_RCC_OscConfig+0x280>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4a7e      	ldr	r2, [pc, #504]	; (80028bc <HAL_RCC_OscConfig+0x280>)
 80026c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026c8:	6013      	str	r3, [r2, #0]
 80026ca:	4b7c      	ldr	r3, [pc, #496]	; (80028bc <HAL_RCC_OscConfig+0x280>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a7b      	ldr	r2, [pc, #492]	; (80028bc <HAL_RCC_OscConfig+0x280>)
 80026d0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026d4:	6013      	str	r3, [r2, #0]
 80026d6:	e01d      	b.n	8002714 <HAL_RCC_OscConfig+0xd8>
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80026e0:	d10c      	bne.n	80026fc <HAL_RCC_OscConfig+0xc0>
 80026e2:	4b76      	ldr	r3, [pc, #472]	; (80028bc <HAL_RCC_OscConfig+0x280>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4a75      	ldr	r2, [pc, #468]	; (80028bc <HAL_RCC_OscConfig+0x280>)
 80026e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026ec:	6013      	str	r3, [r2, #0]
 80026ee:	4b73      	ldr	r3, [pc, #460]	; (80028bc <HAL_RCC_OscConfig+0x280>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4a72      	ldr	r2, [pc, #456]	; (80028bc <HAL_RCC_OscConfig+0x280>)
 80026f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026f8:	6013      	str	r3, [r2, #0]
 80026fa:	e00b      	b.n	8002714 <HAL_RCC_OscConfig+0xd8>
 80026fc:	4b6f      	ldr	r3, [pc, #444]	; (80028bc <HAL_RCC_OscConfig+0x280>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a6e      	ldr	r2, [pc, #440]	; (80028bc <HAL_RCC_OscConfig+0x280>)
 8002702:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002706:	6013      	str	r3, [r2, #0]
 8002708:	4b6c      	ldr	r3, [pc, #432]	; (80028bc <HAL_RCC_OscConfig+0x280>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a6b      	ldr	r2, [pc, #428]	; (80028bc <HAL_RCC_OscConfig+0x280>)
 800270e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002712:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d013      	beq.n	8002744 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800271c:	f7fe faca 	bl	8000cb4 <HAL_GetTick>
 8002720:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002722:	e008      	b.n	8002736 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002724:	f7fe fac6 	bl	8000cb4 <HAL_GetTick>
 8002728:	4602      	mov	r2, r0
 800272a:	693b      	ldr	r3, [r7, #16]
 800272c:	1ad3      	subs	r3, r2, r3
 800272e:	2b64      	cmp	r3, #100	; 0x64
 8002730:	d901      	bls.n	8002736 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002732:	2303      	movs	r3, #3
 8002734:	e229      	b.n	8002b8a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002736:	4b61      	ldr	r3, [pc, #388]	; (80028bc <HAL_RCC_OscConfig+0x280>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800273e:	2b00      	cmp	r3, #0
 8002740:	d0f0      	beq.n	8002724 <HAL_RCC_OscConfig+0xe8>
 8002742:	e014      	b.n	800276e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002744:	f7fe fab6 	bl	8000cb4 <HAL_GetTick>
 8002748:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800274a:	e008      	b.n	800275e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800274c:	f7fe fab2 	bl	8000cb4 <HAL_GetTick>
 8002750:	4602      	mov	r2, r0
 8002752:	693b      	ldr	r3, [r7, #16]
 8002754:	1ad3      	subs	r3, r2, r3
 8002756:	2b64      	cmp	r3, #100	; 0x64
 8002758:	d901      	bls.n	800275e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800275a:	2303      	movs	r3, #3
 800275c:	e215      	b.n	8002b8a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800275e:	4b57      	ldr	r3, [pc, #348]	; (80028bc <HAL_RCC_OscConfig+0x280>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002766:	2b00      	cmp	r3, #0
 8002768:	d1f0      	bne.n	800274c <HAL_RCC_OscConfig+0x110>
 800276a:	e000      	b.n	800276e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800276c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f003 0302 	and.w	r3, r3, #2
 8002776:	2b00      	cmp	r3, #0
 8002778:	d069      	beq.n	800284e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800277a:	4b50      	ldr	r3, [pc, #320]	; (80028bc <HAL_RCC_OscConfig+0x280>)
 800277c:	689b      	ldr	r3, [r3, #8]
 800277e:	f003 030c 	and.w	r3, r3, #12
 8002782:	2b00      	cmp	r3, #0
 8002784:	d00b      	beq.n	800279e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002786:	4b4d      	ldr	r3, [pc, #308]	; (80028bc <HAL_RCC_OscConfig+0x280>)
 8002788:	689b      	ldr	r3, [r3, #8]
 800278a:	f003 030c 	and.w	r3, r3, #12
 800278e:	2b08      	cmp	r3, #8
 8002790:	d11c      	bne.n	80027cc <HAL_RCC_OscConfig+0x190>
 8002792:	4b4a      	ldr	r3, [pc, #296]	; (80028bc <HAL_RCC_OscConfig+0x280>)
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800279a:	2b00      	cmp	r3, #0
 800279c:	d116      	bne.n	80027cc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800279e:	4b47      	ldr	r3, [pc, #284]	; (80028bc <HAL_RCC_OscConfig+0x280>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f003 0302 	and.w	r3, r3, #2
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d005      	beq.n	80027b6 <HAL_RCC_OscConfig+0x17a>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	68db      	ldr	r3, [r3, #12]
 80027ae:	2b01      	cmp	r3, #1
 80027b0:	d001      	beq.n	80027b6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
 80027b4:	e1e9      	b.n	8002b8a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027b6:	4b41      	ldr	r3, [pc, #260]	; (80028bc <HAL_RCC_OscConfig+0x280>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	691b      	ldr	r3, [r3, #16]
 80027c2:	00db      	lsls	r3, r3, #3
 80027c4:	493d      	ldr	r1, [pc, #244]	; (80028bc <HAL_RCC_OscConfig+0x280>)
 80027c6:	4313      	orrs	r3, r2
 80027c8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027ca:	e040      	b.n	800284e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	68db      	ldr	r3, [r3, #12]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d023      	beq.n	800281c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027d4:	4b39      	ldr	r3, [pc, #228]	; (80028bc <HAL_RCC_OscConfig+0x280>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a38      	ldr	r2, [pc, #224]	; (80028bc <HAL_RCC_OscConfig+0x280>)
 80027da:	f043 0301 	orr.w	r3, r3, #1
 80027de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027e0:	f7fe fa68 	bl	8000cb4 <HAL_GetTick>
 80027e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027e6:	e008      	b.n	80027fa <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027e8:	f7fe fa64 	bl	8000cb4 <HAL_GetTick>
 80027ec:	4602      	mov	r2, r0
 80027ee:	693b      	ldr	r3, [r7, #16]
 80027f0:	1ad3      	subs	r3, r2, r3
 80027f2:	2b02      	cmp	r3, #2
 80027f4:	d901      	bls.n	80027fa <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80027f6:	2303      	movs	r3, #3
 80027f8:	e1c7      	b.n	8002b8a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027fa:	4b30      	ldr	r3, [pc, #192]	; (80028bc <HAL_RCC_OscConfig+0x280>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f003 0302 	and.w	r3, r3, #2
 8002802:	2b00      	cmp	r3, #0
 8002804:	d0f0      	beq.n	80027e8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002806:	4b2d      	ldr	r3, [pc, #180]	; (80028bc <HAL_RCC_OscConfig+0x280>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	691b      	ldr	r3, [r3, #16]
 8002812:	00db      	lsls	r3, r3, #3
 8002814:	4929      	ldr	r1, [pc, #164]	; (80028bc <HAL_RCC_OscConfig+0x280>)
 8002816:	4313      	orrs	r3, r2
 8002818:	600b      	str	r3, [r1, #0]
 800281a:	e018      	b.n	800284e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800281c:	4b27      	ldr	r3, [pc, #156]	; (80028bc <HAL_RCC_OscConfig+0x280>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a26      	ldr	r2, [pc, #152]	; (80028bc <HAL_RCC_OscConfig+0x280>)
 8002822:	f023 0301 	bic.w	r3, r3, #1
 8002826:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002828:	f7fe fa44 	bl	8000cb4 <HAL_GetTick>
 800282c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800282e:	e008      	b.n	8002842 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002830:	f7fe fa40 	bl	8000cb4 <HAL_GetTick>
 8002834:	4602      	mov	r2, r0
 8002836:	693b      	ldr	r3, [r7, #16]
 8002838:	1ad3      	subs	r3, r2, r3
 800283a:	2b02      	cmp	r3, #2
 800283c:	d901      	bls.n	8002842 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800283e:	2303      	movs	r3, #3
 8002840:	e1a3      	b.n	8002b8a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002842:	4b1e      	ldr	r3, [pc, #120]	; (80028bc <HAL_RCC_OscConfig+0x280>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f003 0302 	and.w	r3, r3, #2
 800284a:	2b00      	cmp	r3, #0
 800284c:	d1f0      	bne.n	8002830 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f003 0308 	and.w	r3, r3, #8
 8002856:	2b00      	cmp	r3, #0
 8002858:	d038      	beq.n	80028cc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	695b      	ldr	r3, [r3, #20]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d019      	beq.n	8002896 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002862:	4b16      	ldr	r3, [pc, #88]	; (80028bc <HAL_RCC_OscConfig+0x280>)
 8002864:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002866:	4a15      	ldr	r2, [pc, #84]	; (80028bc <HAL_RCC_OscConfig+0x280>)
 8002868:	f043 0301 	orr.w	r3, r3, #1
 800286c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800286e:	f7fe fa21 	bl	8000cb4 <HAL_GetTick>
 8002872:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002874:	e008      	b.n	8002888 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002876:	f7fe fa1d 	bl	8000cb4 <HAL_GetTick>
 800287a:	4602      	mov	r2, r0
 800287c:	693b      	ldr	r3, [r7, #16]
 800287e:	1ad3      	subs	r3, r2, r3
 8002880:	2b02      	cmp	r3, #2
 8002882:	d901      	bls.n	8002888 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002884:	2303      	movs	r3, #3
 8002886:	e180      	b.n	8002b8a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002888:	4b0c      	ldr	r3, [pc, #48]	; (80028bc <HAL_RCC_OscConfig+0x280>)
 800288a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800288c:	f003 0302 	and.w	r3, r3, #2
 8002890:	2b00      	cmp	r3, #0
 8002892:	d0f0      	beq.n	8002876 <HAL_RCC_OscConfig+0x23a>
 8002894:	e01a      	b.n	80028cc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002896:	4b09      	ldr	r3, [pc, #36]	; (80028bc <HAL_RCC_OscConfig+0x280>)
 8002898:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800289a:	4a08      	ldr	r2, [pc, #32]	; (80028bc <HAL_RCC_OscConfig+0x280>)
 800289c:	f023 0301 	bic.w	r3, r3, #1
 80028a0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028a2:	f7fe fa07 	bl	8000cb4 <HAL_GetTick>
 80028a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028a8:	e00a      	b.n	80028c0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028aa:	f7fe fa03 	bl	8000cb4 <HAL_GetTick>
 80028ae:	4602      	mov	r2, r0
 80028b0:	693b      	ldr	r3, [r7, #16]
 80028b2:	1ad3      	subs	r3, r2, r3
 80028b4:	2b02      	cmp	r3, #2
 80028b6:	d903      	bls.n	80028c0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80028b8:	2303      	movs	r3, #3
 80028ba:	e166      	b.n	8002b8a <HAL_RCC_OscConfig+0x54e>
 80028bc:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028c0:	4b92      	ldr	r3, [pc, #584]	; (8002b0c <HAL_RCC_OscConfig+0x4d0>)
 80028c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028c4:	f003 0302 	and.w	r3, r3, #2
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d1ee      	bne.n	80028aa <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f003 0304 	and.w	r3, r3, #4
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	f000 80a4 	beq.w	8002a22 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028da:	4b8c      	ldr	r3, [pc, #560]	; (8002b0c <HAL_RCC_OscConfig+0x4d0>)
 80028dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d10d      	bne.n	8002902 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80028e6:	4b89      	ldr	r3, [pc, #548]	; (8002b0c <HAL_RCC_OscConfig+0x4d0>)
 80028e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ea:	4a88      	ldr	r2, [pc, #544]	; (8002b0c <HAL_RCC_OscConfig+0x4d0>)
 80028ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028f0:	6413      	str	r3, [r2, #64]	; 0x40
 80028f2:	4b86      	ldr	r3, [pc, #536]	; (8002b0c <HAL_RCC_OscConfig+0x4d0>)
 80028f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028fa:	60bb      	str	r3, [r7, #8]
 80028fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028fe:	2301      	movs	r3, #1
 8002900:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002902:	4b83      	ldr	r3, [pc, #524]	; (8002b10 <HAL_RCC_OscConfig+0x4d4>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800290a:	2b00      	cmp	r3, #0
 800290c:	d118      	bne.n	8002940 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800290e:	4b80      	ldr	r3, [pc, #512]	; (8002b10 <HAL_RCC_OscConfig+0x4d4>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4a7f      	ldr	r2, [pc, #508]	; (8002b10 <HAL_RCC_OscConfig+0x4d4>)
 8002914:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002918:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800291a:	f7fe f9cb 	bl	8000cb4 <HAL_GetTick>
 800291e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002920:	e008      	b.n	8002934 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002922:	f7fe f9c7 	bl	8000cb4 <HAL_GetTick>
 8002926:	4602      	mov	r2, r0
 8002928:	693b      	ldr	r3, [r7, #16]
 800292a:	1ad3      	subs	r3, r2, r3
 800292c:	2b64      	cmp	r3, #100	; 0x64
 800292e:	d901      	bls.n	8002934 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002930:	2303      	movs	r3, #3
 8002932:	e12a      	b.n	8002b8a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002934:	4b76      	ldr	r3, [pc, #472]	; (8002b10 <HAL_RCC_OscConfig+0x4d4>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800293c:	2b00      	cmp	r3, #0
 800293e:	d0f0      	beq.n	8002922 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	689b      	ldr	r3, [r3, #8]
 8002944:	2b01      	cmp	r3, #1
 8002946:	d106      	bne.n	8002956 <HAL_RCC_OscConfig+0x31a>
 8002948:	4b70      	ldr	r3, [pc, #448]	; (8002b0c <HAL_RCC_OscConfig+0x4d0>)
 800294a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800294c:	4a6f      	ldr	r2, [pc, #444]	; (8002b0c <HAL_RCC_OscConfig+0x4d0>)
 800294e:	f043 0301 	orr.w	r3, r3, #1
 8002952:	6713      	str	r3, [r2, #112]	; 0x70
 8002954:	e02d      	b.n	80029b2 <HAL_RCC_OscConfig+0x376>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	689b      	ldr	r3, [r3, #8]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d10c      	bne.n	8002978 <HAL_RCC_OscConfig+0x33c>
 800295e:	4b6b      	ldr	r3, [pc, #428]	; (8002b0c <HAL_RCC_OscConfig+0x4d0>)
 8002960:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002962:	4a6a      	ldr	r2, [pc, #424]	; (8002b0c <HAL_RCC_OscConfig+0x4d0>)
 8002964:	f023 0301 	bic.w	r3, r3, #1
 8002968:	6713      	str	r3, [r2, #112]	; 0x70
 800296a:	4b68      	ldr	r3, [pc, #416]	; (8002b0c <HAL_RCC_OscConfig+0x4d0>)
 800296c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800296e:	4a67      	ldr	r2, [pc, #412]	; (8002b0c <HAL_RCC_OscConfig+0x4d0>)
 8002970:	f023 0304 	bic.w	r3, r3, #4
 8002974:	6713      	str	r3, [r2, #112]	; 0x70
 8002976:	e01c      	b.n	80029b2 <HAL_RCC_OscConfig+0x376>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	2b05      	cmp	r3, #5
 800297e:	d10c      	bne.n	800299a <HAL_RCC_OscConfig+0x35e>
 8002980:	4b62      	ldr	r3, [pc, #392]	; (8002b0c <HAL_RCC_OscConfig+0x4d0>)
 8002982:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002984:	4a61      	ldr	r2, [pc, #388]	; (8002b0c <HAL_RCC_OscConfig+0x4d0>)
 8002986:	f043 0304 	orr.w	r3, r3, #4
 800298a:	6713      	str	r3, [r2, #112]	; 0x70
 800298c:	4b5f      	ldr	r3, [pc, #380]	; (8002b0c <HAL_RCC_OscConfig+0x4d0>)
 800298e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002990:	4a5e      	ldr	r2, [pc, #376]	; (8002b0c <HAL_RCC_OscConfig+0x4d0>)
 8002992:	f043 0301 	orr.w	r3, r3, #1
 8002996:	6713      	str	r3, [r2, #112]	; 0x70
 8002998:	e00b      	b.n	80029b2 <HAL_RCC_OscConfig+0x376>
 800299a:	4b5c      	ldr	r3, [pc, #368]	; (8002b0c <HAL_RCC_OscConfig+0x4d0>)
 800299c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800299e:	4a5b      	ldr	r2, [pc, #364]	; (8002b0c <HAL_RCC_OscConfig+0x4d0>)
 80029a0:	f023 0301 	bic.w	r3, r3, #1
 80029a4:	6713      	str	r3, [r2, #112]	; 0x70
 80029a6:	4b59      	ldr	r3, [pc, #356]	; (8002b0c <HAL_RCC_OscConfig+0x4d0>)
 80029a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029aa:	4a58      	ldr	r2, [pc, #352]	; (8002b0c <HAL_RCC_OscConfig+0x4d0>)
 80029ac:	f023 0304 	bic.w	r3, r3, #4
 80029b0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	689b      	ldr	r3, [r3, #8]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d015      	beq.n	80029e6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029ba:	f7fe f97b 	bl	8000cb4 <HAL_GetTick>
 80029be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029c0:	e00a      	b.n	80029d8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029c2:	f7fe f977 	bl	8000cb4 <HAL_GetTick>
 80029c6:	4602      	mov	r2, r0
 80029c8:	693b      	ldr	r3, [r7, #16]
 80029ca:	1ad3      	subs	r3, r2, r3
 80029cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d901      	bls.n	80029d8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80029d4:	2303      	movs	r3, #3
 80029d6:	e0d8      	b.n	8002b8a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029d8:	4b4c      	ldr	r3, [pc, #304]	; (8002b0c <HAL_RCC_OscConfig+0x4d0>)
 80029da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029dc:	f003 0302 	and.w	r3, r3, #2
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d0ee      	beq.n	80029c2 <HAL_RCC_OscConfig+0x386>
 80029e4:	e014      	b.n	8002a10 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029e6:	f7fe f965 	bl	8000cb4 <HAL_GetTick>
 80029ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029ec:	e00a      	b.n	8002a04 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029ee:	f7fe f961 	bl	8000cb4 <HAL_GetTick>
 80029f2:	4602      	mov	r2, r0
 80029f4:	693b      	ldr	r3, [r7, #16]
 80029f6:	1ad3      	subs	r3, r2, r3
 80029f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d901      	bls.n	8002a04 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002a00:	2303      	movs	r3, #3
 8002a02:	e0c2      	b.n	8002b8a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a04:	4b41      	ldr	r3, [pc, #260]	; (8002b0c <HAL_RCC_OscConfig+0x4d0>)
 8002a06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a08:	f003 0302 	and.w	r3, r3, #2
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d1ee      	bne.n	80029ee <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002a10:	7dfb      	ldrb	r3, [r7, #23]
 8002a12:	2b01      	cmp	r3, #1
 8002a14:	d105      	bne.n	8002a22 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a16:	4b3d      	ldr	r3, [pc, #244]	; (8002b0c <HAL_RCC_OscConfig+0x4d0>)
 8002a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a1a:	4a3c      	ldr	r2, [pc, #240]	; (8002b0c <HAL_RCC_OscConfig+0x4d0>)
 8002a1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a20:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	699b      	ldr	r3, [r3, #24]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	f000 80ae 	beq.w	8002b88 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a2c:	4b37      	ldr	r3, [pc, #220]	; (8002b0c <HAL_RCC_OscConfig+0x4d0>)
 8002a2e:	689b      	ldr	r3, [r3, #8]
 8002a30:	f003 030c 	and.w	r3, r3, #12
 8002a34:	2b08      	cmp	r3, #8
 8002a36:	d06d      	beq.n	8002b14 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	699b      	ldr	r3, [r3, #24]
 8002a3c:	2b02      	cmp	r3, #2
 8002a3e:	d14b      	bne.n	8002ad8 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a40:	4b32      	ldr	r3, [pc, #200]	; (8002b0c <HAL_RCC_OscConfig+0x4d0>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a31      	ldr	r2, [pc, #196]	; (8002b0c <HAL_RCC_OscConfig+0x4d0>)
 8002a46:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002a4a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a4c:	f7fe f932 	bl	8000cb4 <HAL_GetTick>
 8002a50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a52:	e008      	b.n	8002a66 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a54:	f7fe f92e 	bl	8000cb4 <HAL_GetTick>
 8002a58:	4602      	mov	r2, r0
 8002a5a:	693b      	ldr	r3, [r7, #16]
 8002a5c:	1ad3      	subs	r3, r2, r3
 8002a5e:	2b02      	cmp	r3, #2
 8002a60:	d901      	bls.n	8002a66 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002a62:	2303      	movs	r3, #3
 8002a64:	e091      	b.n	8002b8a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a66:	4b29      	ldr	r3, [pc, #164]	; (8002b0c <HAL_RCC_OscConfig+0x4d0>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d1f0      	bne.n	8002a54 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	69da      	ldr	r2, [r3, #28]
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6a1b      	ldr	r3, [r3, #32]
 8002a7a:	431a      	orrs	r2, r3
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a80:	019b      	lsls	r3, r3, #6
 8002a82:	431a      	orrs	r2, r3
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a88:	085b      	lsrs	r3, r3, #1
 8002a8a:	3b01      	subs	r3, #1
 8002a8c:	041b      	lsls	r3, r3, #16
 8002a8e:	431a      	orrs	r2, r3
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a94:	061b      	lsls	r3, r3, #24
 8002a96:	431a      	orrs	r2, r3
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a9c:	071b      	lsls	r3, r3, #28
 8002a9e:	491b      	ldr	r1, [pc, #108]	; (8002b0c <HAL_RCC_OscConfig+0x4d0>)
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002aa4:	4b19      	ldr	r3, [pc, #100]	; (8002b0c <HAL_RCC_OscConfig+0x4d0>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a18      	ldr	r2, [pc, #96]	; (8002b0c <HAL_RCC_OscConfig+0x4d0>)
 8002aaa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002aae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ab0:	f7fe f900 	bl	8000cb4 <HAL_GetTick>
 8002ab4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ab6:	e008      	b.n	8002aca <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ab8:	f7fe f8fc 	bl	8000cb4 <HAL_GetTick>
 8002abc:	4602      	mov	r2, r0
 8002abe:	693b      	ldr	r3, [r7, #16]
 8002ac0:	1ad3      	subs	r3, r2, r3
 8002ac2:	2b02      	cmp	r3, #2
 8002ac4:	d901      	bls.n	8002aca <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002ac6:	2303      	movs	r3, #3
 8002ac8:	e05f      	b.n	8002b8a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002aca:	4b10      	ldr	r3, [pc, #64]	; (8002b0c <HAL_RCC_OscConfig+0x4d0>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d0f0      	beq.n	8002ab8 <HAL_RCC_OscConfig+0x47c>
 8002ad6:	e057      	b.n	8002b88 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ad8:	4b0c      	ldr	r3, [pc, #48]	; (8002b0c <HAL_RCC_OscConfig+0x4d0>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a0b      	ldr	r2, [pc, #44]	; (8002b0c <HAL_RCC_OscConfig+0x4d0>)
 8002ade:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ae2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ae4:	f7fe f8e6 	bl	8000cb4 <HAL_GetTick>
 8002ae8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002aea:	e008      	b.n	8002afe <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002aec:	f7fe f8e2 	bl	8000cb4 <HAL_GetTick>
 8002af0:	4602      	mov	r2, r0
 8002af2:	693b      	ldr	r3, [r7, #16]
 8002af4:	1ad3      	subs	r3, r2, r3
 8002af6:	2b02      	cmp	r3, #2
 8002af8:	d901      	bls.n	8002afe <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002afa:	2303      	movs	r3, #3
 8002afc:	e045      	b.n	8002b8a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002afe:	4b03      	ldr	r3, [pc, #12]	; (8002b0c <HAL_RCC_OscConfig+0x4d0>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d1f0      	bne.n	8002aec <HAL_RCC_OscConfig+0x4b0>
 8002b0a:	e03d      	b.n	8002b88 <HAL_RCC_OscConfig+0x54c>
 8002b0c:	40023800 	.word	0x40023800
 8002b10:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002b14:	4b1f      	ldr	r3, [pc, #124]	; (8002b94 <HAL_RCC_OscConfig+0x558>)
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	699b      	ldr	r3, [r3, #24]
 8002b1e:	2b01      	cmp	r3, #1
 8002b20:	d030      	beq.n	8002b84 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b2c:	429a      	cmp	r2, r3
 8002b2e:	d129      	bne.n	8002b84 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b3a:	429a      	cmp	r2, r3
 8002b3c:	d122      	bne.n	8002b84 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002b3e:	68fa      	ldr	r2, [r7, #12]
 8002b40:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002b44:	4013      	ands	r3, r2
 8002b46:	687a      	ldr	r2, [r7, #4]
 8002b48:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002b4a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d119      	bne.n	8002b84 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b5a:	085b      	lsrs	r3, r3, #1
 8002b5c:	3b01      	subs	r3, #1
 8002b5e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002b60:	429a      	cmp	r2, r3
 8002b62:	d10f      	bne.n	8002b84 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b6e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002b70:	429a      	cmp	r2, r3
 8002b72:	d107      	bne.n	8002b84 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b7e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b80:	429a      	cmp	r2, r3
 8002b82:	d001      	beq.n	8002b88 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002b84:	2301      	movs	r3, #1
 8002b86:	e000      	b.n	8002b8a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002b88:	2300      	movs	r3, #0
}
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	3718      	adds	r7, #24
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}
 8002b92:	bf00      	nop
 8002b94:	40023800 	.word	0x40023800

08002b98 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b084      	sub	sp, #16
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
 8002ba0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d101      	bne.n	8002bb0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002bac:	2301      	movs	r3, #1
 8002bae:	e0d0      	b.n	8002d52 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002bb0:	4b6a      	ldr	r3, [pc, #424]	; (8002d5c <HAL_RCC_ClockConfig+0x1c4>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f003 030f 	and.w	r3, r3, #15
 8002bb8:	683a      	ldr	r2, [r7, #0]
 8002bba:	429a      	cmp	r2, r3
 8002bbc:	d910      	bls.n	8002be0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bbe:	4b67      	ldr	r3, [pc, #412]	; (8002d5c <HAL_RCC_ClockConfig+0x1c4>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f023 020f 	bic.w	r2, r3, #15
 8002bc6:	4965      	ldr	r1, [pc, #404]	; (8002d5c <HAL_RCC_ClockConfig+0x1c4>)
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bce:	4b63      	ldr	r3, [pc, #396]	; (8002d5c <HAL_RCC_ClockConfig+0x1c4>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f003 030f 	and.w	r3, r3, #15
 8002bd6:	683a      	ldr	r2, [r7, #0]
 8002bd8:	429a      	cmp	r2, r3
 8002bda:	d001      	beq.n	8002be0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	e0b8      	b.n	8002d52 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f003 0302 	and.w	r3, r3, #2
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d020      	beq.n	8002c2e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f003 0304 	and.w	r3, r3, #4
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d005      	beq.n	8002c04 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002bf8:	4b59      	ldr	r3, [pc, #356]	; (8002d60 <HAL_RCC_ClockConfig+0x1c8>)
 8002bfa:	689b      	ldr	r3, [r3, #8]
 8002bfc:	4a58      	ldr	r2, [pc, #352]	; (8002d60 <HAL_RCC_ClockConfig+0x1c8>)
 8002bfe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002c02:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f003 0308 	and.w	r3, r3, #8
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d005      	beq.n	8002c1c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c10:	4b53      	ldr	r3, [pc, #332]	; (8002d60 <HAL_RCC_ClockConfig+0x1c8>)
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	4a52      	ldr	r2, [pc, #328]	; (8002d60 <HAL_RCC_ClockConfig+0x1c8>)
 8002c16:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002c1a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c1c:	4b50      	ldr	r3, [pc, #320]	; (8002d60 <HAL_RCC_ClockConfig+0x1c8>)
 8002c1e:	689b      	ldr	r3, [r3, #8]
 8002c20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	689b      	ldr	r3, [r3, #8]
 8002c28:	494d      	ldr	r1, [pc, #308]	; (8002d60 <HAL_RCC_ClockConfig+0x1c8>)
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f003 0301 	and.w	r3, r3, #1
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d040      	beq.n	8002cbc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	2b01      	cmp	r3, #1
 8002c40:	d107      	bne.n	8002c52 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c42:	4b47      	ldr	r3, [pc, #284]	; (8002d60 <HAL_RCC_ClockConfig+0x1c8>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d115      	bne.n	8002c7a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	e07f      	b.n	8002d52 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	2b02      	cmp	r3, #2
 8002c58:	d107      	bne.n	8002c6a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c5a:	4b41      	ldr	r3, [pc, #260]	; (8002d60 <HAL_RCC_ClockConfig+0x1c8>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d109      	bne.n	8002c7a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002c66:	2301      	movs	r3, #1
 8002c68:	e073      	b.n	8002d52 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c6a:	4b3d      	ldr	r3, [pc, #244]	; (8002d60 <HAL_RCC_ClockConfig+0x1c8>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f003 0302 	and.w	r3, r3, #2
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d101      	bne.n	8002c7a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002c76:	2301      	movs	r3, #1
 8002c78:	e06b      	b.n	8002d52 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c7a:	4b39      	ldr	r3, [pc, #228]	; (8002d60 <HAL_RCC_ClockConfig+0x1c8>)
 8002c7c:	689b      	ldr	r3, [r3, #8]
 8002c7e:	f023 0203 	bic.w	r2, r3, #3
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	4936      	ldr	r1, [pc, #216]	; (8002d60 <HAL_RCC_ClockConfig+0x1c8>)
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c8c:	f7fe f812 	bl	8000cb4 <HAL_GetTick>
 8002c90:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c92:	e00a      	b.n	8002caa <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c94:	f7fe f80e 	bl	8000cb4 <HAL_GetTick>
 8002c98:	4602      	mov	r2, r0
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	1ad3      	subs	r3, r2, r3
 8002c9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d901      	bls.n	8002caa <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002ca6:	2303      	movs	r3, #3
 8002ca8:	e053      	b.n	8002d52 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002caa:	4b2d      	ldr	r3, [pc, #180]	; (8002d60 <HAL_RCC_ClockConfig+0x1c8>)
 8002cac:	689b      	ldr	r3, [r3, #8]
 8002cae:	f003 020c 	and.w	r2, r3, #12
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	009b      	lsls	r3, r3, #2
 8002cb8:	429a      	cmp	r2, r3
 8002cba:	d1eb      	bne.n	8002c94 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002cbc:	4b27      	ldr	r3, [pc, #156]	; (8002d5c <HAL_RCC_ClockConfig+0x1c4>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f003 030f 	and.w	r3, r3, #15
 8002cc4:	683a      	ldr	r2, [r7, #0]
 8002cc6:	429a      	cmp	r2, r3
 8002cc8:	d210      	bcs.n	8002cec <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cca:	4b24      	ldr	r3, [pc, #144]	; (8002d5c <HAL_RCC_ClockConfig+0x1c4>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f023 020f 	bic.w	r2, r3, #15
 8002cd2:	4922      	ldr	r1, [pc, #136]	; (8002d5c <HAL_RCC_ClockConfig+0x1c4>)
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cda:	4b20      	ldr	r3, [pc, #128]	; (8002d5c <HAL_RCC_ClockConfig+0x1c4>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f003 030f 	and.w	r3, r3, #15
 8002ce2:	683a      	ldr	r2, [r7, #0]
 8002ce4:	429a      	cmp	r2, r3
 8002ce6:	d001      	beq.n	8002cec <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002ce8:	2301      	movs	r3, #1
 8002cea:	e032      	b.n	8002d52 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f003 0304 	and.w	r3, r3, #4
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d008      	beq.n	8002d0a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002cf8:	4b19      	ldr	r3, [pc, #100]	; (8002d60 <HAL_RCC_ClockConfig+0x1c8>)
 8002cfa:	689b      	ldr	r3, [r3, #8]
 8002cfc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	68db      	ldr	r3, [r3, #12]
 8002d04:	4916      	ldr	r1, [pc, #88]	; (8002d60 <HAL_RCC_ClockConfig+0x1c8>)
 8002d06:	4313      	orrs	r3, r2
 8002d08:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f003 0308 	and.w	r3, r3, #8
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d009      	beq.n	8002d2a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002d16:	4b12      	ldr	r3, [pc, #72]	; (8002d60 <HAL_RCC_ClockConfig+0x1c8>)
 8002d18:	689b      	ldr	r3, [r3, #8]
 8002d1a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	691b      	ldr	r3, [r3, #16]
 8002d22:	00db      	lsls	r3, r3, #3
 8002d24:	490e      	ldr	r1, [pc, #56]	; (8002d60 <HAL_RCC_ClockConfig+0x1c8>)
 8002d26:	4313      	orrs	r3, r2
 8002d28:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002d2a:	f000 f821 	bl	8002d70 <HAL_RCC_GetSysClockFreq>
 8002d2e:	4601      	mov	r1, r0
 8002d30:	4b0b      	ldr	r3, [pc, #44]	; (8002d60 <HAL_RCC_ClockConfig+0x1c8>)
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	091b      	lsrs	r3, r3, #4
 8002d36:	f003 030f 	and.w	r3, r3, #15
 8002d3a:	4a0a      	ldr	r2, [pc, #40]	; (8002d64 <HAL_RCC_ClockConfig+0x1cc>)
 8002d3c:	5cd3      	ldrb	r3, [r2, r3]
 8002d3e:	fa21 f303 	lsr.w	r3, r1, r3
 8002d42:	4a09      	ldr	r2, [pc, #36]	; (8002d68 <HAL_RCC_ClockConfig+0x1d0>)
 8002d44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002d46:	4b09      	ldr	r3, [pc, #36]	; (8002d6c <HAL_RCC_ClockConfig+0x1d4>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f7fd fec6 	bl	8000adc <HAL_InitTick>

  return HAL_OK;
 8002d50:	2300      	movs	r3, #0
}
 8002d52:	4618      	mov	r0, r3
 8002d54:	3710      	adds	r7, #16
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}
 8002d5a:	bf00      	nop
 8002d5c:	40023c00 	.word	0x40023c00
 8002d60:	40023800 	.word	0x40023800
 8002d64:	08011f98 	.word	0x08011f98
 8002d68:	20000000 	.word	0x20000000
 8002d6c:	20000004 	.word	0x20000004

08002d70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d72:	b085      	sub	sp, #20
 8002d74:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002d76:	2300      	movs	r3, #0
 8002d78:	607b      	str	r3, [r7, #4]
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	60fb      	str	r3, [r7, #12]
 8002d7e:	2300      	movs	r3, #0
 8002d80:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8002d82:	2300      	movs	r3, #0
 8002d84:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d86:	4b63      	ldr	r3, [pc, #396]	; (8002f14 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002d88:	689b      	ldr	r3, [r3, #8]
 8002d8a:	f003 030c 	and.w	r3, r3, #12
 8002d8e:	2b04      	cmp	r3, #4
 8002d90:	d007      	beq.n	8002da2 <HAL_RCC_GetSysClockFreq+0x32>
 8002d92:	2b08      	cmp	r3, #8
 8002d94:	d008      	beq.n	8002da8 <HAL_RCC_GetSysClockFreq+0x38>
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	f040 80b4 	bne.w	8002f04 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002d9c:	4b5e      	ldr	r3, [pc, #376]	; (8002f18 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002d9e:	60bb      	str	r3, [r7, #8]
      break;
 8002da0:	e0b3      	b.n	8002f0a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002da2:	4b5e      	ldr	r3, [pc, #376]	; (8002f1c <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002da4:	60bb      	str	r3, [r7, #8]
      break;
 8002da6:	e0b0      	b.n	8002f0a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002da8:	4b5a      	ldr	r3, [pc, #360]	; (8002f14 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002db0:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002db2:	4b58      	ldr	r3, [pc, #352]	; (8002f14 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d04a      	beq.n	8002e54 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002dbe:	4b55      	ldr	r3, [pc, #340]	; (8002f14 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	099b      	lsrs	r3, r3, #6
 8002dc4:	f04f 0400 	mov.w	r4, #0
 8002dc8:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002dcc:	f04f 0200 	mov.w	r2, #0
 8002dd0:	ea03 0501 	and.w	r5, r3, r1
 8002dd4:	ea04 0602 	and.w	r6, r4, r2
 8002dd8:	4629      	mov	r1, r5
 8002dda:	4632      	mov	r2, r6
 8002ddc:	f04f 0300 	mov.w	r3, #0
 8002de0:	f04f 0400 	mov.w	r4, #0
 8002de4:	0154      	lsls	r4, r2, #5
 8002de6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002dea:	014b      	lsls	r3, r1, #5
 8002dec:	4619      	mov	r1, r3
 8002dee:	4622      	mov	r2, r4
 8002df0:	1b49      	subs	r1, r1, r5
 8002df2:	eb62 0206 	sbc.w	r2, r2, r6
 8002df6:	f04f 0300 	mov.w	r3, #0
 8002dfa:	f04f 0400 	mov.w	r4, #0
 8002dfe:	0194      	lsls	r4, r2, #6
 8002e00:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002e04:	018b      	lsls	r3, r1, #6
 8002e06:	1a5b      	subs	r3, r3, r1
 8002e08:	eb64 0402 	sbc.w	r4, r4, r2
 8002e0c:	f04f 0100 	mov.w	r1, #0
 8002e10:	f04f 0200 	mov.w	r2, #0
 8002e14:	00e2      	lsls	r2, r4, #3
 8002e16:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002e1a:	00d9      	lsls	r1, r3, #3
 8002e1c:	460b      	mov	r3, r1
 8002e1e:	4614      	mov	r4, r2
 8002e20:	195b      	adds	r3, r3, r5
 8002e22:	eb44 0406 	adc.w	r4, r4, r6
 8002e26:	f04f 0100 	mov.w	r1, #0
 8002e2a:	f04f 0200 	mov.w	r2, #0
 8002e2e:	0262      	lsls	r2, r4, #9
 8002e30:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002e34:	0259      	lsls	r1, r3, #9
 8002e36:	460b      	mov	r3, r1
 8002e38:	4614      	mov	r4, r2
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	4621      	mov	r1, r4
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	f04f 0400 	mov.w	r4, #0
 8002e44:	461a      	mov	r2, r3
 8002e46:	4623      	mov	r3, r4
 8002e48:	f7fd fa52 	bl	80002f0 <__aeabi_uldivmod>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	460c      	mov	r4, r1
 8002e50:	60fb      	str	r3, [r7, #12]
 8002e52:	e049      	b.n	8002ee8 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e54:	4b2f      	ldr	r3, [pc, #188]	; (8002f14 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	099b      	lsrs	r3, r3, #6
 8002e5a:	f04f 0400 	mov.w	r4, #0
 8002e5e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002e62:	f04f 0200 	mov.w	r2, #0
 8002e66:	ea03 0501 	and.w	r5, r3, r1
 8002e6a:	ea04 0602 	and.w	r6, r4, r2
 8002e6e:	4629      	mov	r1, r5
 8002e70:	4632      	mov	r2, r6
 8002e72:	f04f 0300 	mov.w	r3, #0
 8002e76:	f04f 0400 	mov.w	r4, #0
 8002e7a:	0154      	lsls	r4, r2, #5
 8002e7c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002e80:	014b      	lsls	r3, r1, #5
 8002e82:	4619      	mov	r1, r3
 8002e84:	4622      	mov	r2, r4
 8002e86:	1b49      	subs	r1, r1, r5
 8002e88:	eb62 0206 	sbc.w	r2, r2, r6
 8002e8c:	f04f 0300 	mov.w	r3, #0
 8002e90:	f04f 0400 	mov.w	r4, #0
 8002e94:	0194      	lsls	r4, r2, #6
 8002e96:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002e9a:	018b      	lsls	r3, r1, #6
 8002e9c:	1a5b      	subs	r3, r3, r1
 8002e9e:	eb64 0402 	sbc.w	r4, r4, r2
 8002ea2:	f04f 0100 	mov.w	r1, #0
 8002ea6:	f04f 0200 	mov.w	r2, #0
 8002eaa:	00e2      	lsls	r2, r4, #3
 8002eac:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002eb0:	00d9      	lsls	r1, r3, #3
 8002eb2:	460b      	mov	r3, r1
 8002eb4:	4614      	mov	r4, r2
 8002eb6:	195b      	adds	r3, r3, r5
 8002eb8:	eb44 0406 	adc.w	r4, r4, r6
 8002ebc:	f04f 0100 	mov.w	r1, #0
 8002ec0:	f04f 0200 	mov.w	r2, #0
 8002ec4:	02a2      	lsls	r2, r4, #10
 8002ec6:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002eca:	0299      	lsls	r1, r3, #10
 8002ecc:	460b      	mov	r3, r1
 8002ece:	4614      	mov	r4, r2
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	4621      	mov	r1, r4
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	f04f 0400 	mov.w	r4, #0
 8002eda:	461a      	mov	r2, r3
 8002edc:	4623      	mov	r3, r4
 8002ede:	f7fd fa07 	bl	80002f0 <__aeabi_uldivmod>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	460c      	mov	r4, r1
 8002ee6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002ee8:	4b0a      	ldr	r3, [pc, #40]	; (8002f14 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	0c1b      	lsrs	r3, r3, #16
 8002eee:	f003 0303 	and.w	r3, r3, #3
 8002ef2:	3301      	adds	r3, #1
 8002ef4:	005b      	lsls	r3, r3, #1
 8002ef6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8002ef8:	68fa      	ldr	r2, [r7, #12]
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f00:	60bb      	str	r3, [r7, #8]
      break;
 8002f02:	e002      	b.n	8002f0a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002f04:	4b04      	ldr	r3, [pc, #16]	; (8002f18 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002f06:	60bb      	str	r3, [r7, #8]
      break;
 8002f08:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f0a:	68bb      	ldr	r3, [r7, #8]
}
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	3714      	adds	r7, #20
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f14:	40023800 	.word	0x40023800
 8002f18:	00f42400 	.word	0x00f42400
 8002f1c:	007a1200 	.word	0x007a1200

08002f20 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f20:	b480      	push	{r7}
 8002f22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f24:	4b03      	ldr	r3, [pc, #12]	; (8002f34 <HAL_RCC_GetHCLKFreq+0x14>)
 8002f26:	681b      	ldr	r3, [r3, #0]
}
 8002f28:	4618      	mov	r0, r3
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f30:	4770      	bx	lr
 8002f32:	bf00      	nop
 8002f34:	20000000 	.word	0x20000000

08002f38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002f3c:	f7ff fff0 	bl	8002f20 <HAL_RCC_GetHCLKFreq>
 8002f40:	4601      	mov	r1, r0
 8002f42:	4b05      	ldr	r3, [pc, #20]	; (8002f58 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002f44:	689b      	ldr	r3, [r3, #8]
 8002f46:	0a9b      	lsrs	r3, r3, #10
 8002f48:	f003 0307 	and.w	r3, r3, #7
 8002f4c:	4a03      	ldr	r2, [pc, #12]	; (8002f5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f4e:	5cd3      	ldrb	r3, [r2, r3]
 8002f50:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002f54:	4618      	mov	r0, r3
 8002f56:	bd80      	pop	{r7, pc}
 8002f58:	40023800 	.word	0x40023800
 8002f5c:	08011fa8 	.word	0x08011fa8

08002f60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002f64:	f7ff ffdc 	bl	8002f20 <HAL_RCC_GetHCLKFreq>
 8002f68:	4601      	mov	r1, r0
 8002f6a:	4b05      	ldr	r3, [pc, #20]	; (8002f80 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002f6c:	689b      	ldr	r3, [r3, #8]
 8002f6e:	0b5b      	lsrs	r3, r3, #13
 8002f70:	f003 0307 	and.w	r3, r3, #7
 8002f74:	4a03      	ldr	r2, [pc, #12]	; (8002f84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f76:	5cd3      	ldrb	r3, [r2, r3]
 8002f78:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	bd80      	pop	{r7, pc}
 8002f80:	40023800 	.word	0x40023800
 8002f84:	08011fa8 	.word	0x08011fa8

08002f88 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	b083      	sub	sp, #12
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
 8002f90:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	220f      	movs	r2, #15
 8002f96:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002f98:	4b12      	ldr	r3, [pc, #72]	; (8002fe4 <HAL_RCC_GetClockConfig+0x5c>)
 8002f9a:	689b      	ldr	r3, [r3, #8]
 8002f9c:	f003 0203 	and.w	r2, r3, #3
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002fa4:	4b0f      	ldr	r3, [pc, #60]	; (8002fe4 <HAL_RCC_GetClockConfig+0x5c>)
 8002fa6:	689b      	ldr	r3, [r3, #8]
 8002fa8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002fb0:	4b0c      	ldr	r3, [pc, #48]	; (8002fe4 <HAL_RCC_GetClockConfig+0x5c>)
 8002fb2:	689b      	ldr	r3, [r3, #8]
 8002fb4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002fbc:	4b09      	ldr	r3, [pc, #36]	; (8002fe4 <HAL_RCC_GetClockConfig+0x5c>)
 8002fbe:	689b      	ldr	r3, [r3, #8]
 8002fc0:	08db      	lsrs	r3, r3, #3
 8002fc2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002fca:	4b07      	ldr	r3, [pc, #28]	; (8002fe8 <HAL_RCC_GetClockConfig+0x60>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f003 020f 	and.w	r2, r3, #15
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	601a      	str	r2, [r3, #0]
}
 8002fd6:	bf00      	nop
 8002fd8:	370c      	adds	r7, #12
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe0:	4770      	bx	lr
 8002fe2:	bf00      	nop
 8002fe4:	40023800 	.word	0x40023800
 8002fe8:	40023c00 	.word	0x40023c00

08002fec <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b088      	sub	sp, #32
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003000:	2300      	movs	r3, #0
 8003002:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003004:	2300      	movs	r3, #0
 8003006:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f003 0301 	and.w	r3, r3, #1
 8003010:	2b00      	cmp	r3, #0
 8003012:	d012      	beq.n	800303a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003014:	4b69      	ldr	r3, [pc, #420]	; (80031bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003016:	689b      	ldr	r3, [r3, #8]
 8003018:	4a68      	ldr	r2, [pc, #416]	; (80031bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800301a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800301e:	6093      	str	r3, [r2, #8]
 8003020:	4b66      	ldr	r3, [pc, #408]	; (80031bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003022:	689a      	ldr	r2, [r3, #8]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003028:	4964      	ldr	r1, [pc, #400]	; (80031bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800302a:	4313      	orrs	r3, r2
 800302c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003032:	2b00      	cmp	r3, #0
 8003034:	d101      	bne.n	800303a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003036:	2301      	movs	r3, #1
 8003038:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003042:	2b00      	cmp	r3, #0
 8003044:	d017      	beq.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003046:	4b5d      	ldr	r3, [pc, #372]	; (80031bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003048:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800304c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003054:	4959      	ldr	r1, [pc, #356]	; (80031bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003056:	4313      	orrs	r3, r2
 8003058:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003060:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003064:	d101      	bne.n	800306a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003066:	2301      	movs	r3, #1
 8003068:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800306e:	2b00      	cmp	r3, #0
 8003070:	d101      	bne.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003072:	2301      	movs	r3, #1
 8003074:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800307e:	2b00      	cmp	r3, #0
 8003080:	d017      	beq.n	80030b2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003082:	4b4e      	ldr	r3, [pc, #312]	; (80031bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003084:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003088:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003090:	494a      	ldr	r1, [pc, #296]	; (80031bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003092:	4313      	orrs	r3, r2
 8003094:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800309c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80030a0:	d101      	bne.n	80030a6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80030a2:	2301      	movs	r3, #1
 80030a4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d101      	bne.n	80030b2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80030ae:	2301      	movs	r3, #1
 80030b0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d001      	beq.n	80030c2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80030be:	2301      	movs	r3, #1
 80030c0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f003 0320 	and.w	r3, r3, #32
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	f000 808b 	beq.w	80031e6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80030d0:	4b3a      	ldr	r3, [pc, #232]	; (80031bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030d4:	4a39      	ldr	r2, [pc, #228]	; (80031bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030da:	6413      	str	r3, [r2, #64]	; 0x40
 80030dc:	4b37      	ldr	r3, [pc, #220]	; (80031bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030e4:	60bb      	str	r3, [r7, #8]
 80030e6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80030e8:	4b35      	ldr	r3, [pc, #212]	; (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a34      	ldr	r2, [pc, #208]	; (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80030ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030f2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030f4:	f7fd fdde 	bl	8000cb4 <HAL_GetTick>
 80030f8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80030fa:	e008      	b.n	800310e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030fc:	f7fd fdda 	bl	8000cb4 <HAL_GetTick>
 8003100:	4602      	mov	r2, r0
 8003102:	697b      	ldr	r3, [r7, #20]
 8003104:	1ad3      	subs	r3, r2, r3
 8003106:	2b64      	cmp	r3, #100	; 0x64
 8003108:	d901      	bls.n	800310e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800310a:	2303      	movs	r3, #3
 800310c:	e38f      	b.n	800382e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800310e:	4b2c      	ldr	r3, [pc, #176]	; (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003116:	2b00      	cmp	r3, #0
 8003118:	d0f0      	beq.n	80030fc <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800311a:	4b28      	ldr	r3, [pc, #160]	; (80031bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800311c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800311e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003122:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003124:	693b      	ldr	r3, [r7, #16]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d035      	beq.n	8003196 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800312e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003132:	693a      	ldr	r2, [r7, #16]
 8003134:	429a      	cmp	r2, r3
 8003136:	d02e      	beq.n	8003196 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003138:	4b20      	ldr	r3, [pc, #128]	; (80031bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800313a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800313c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003140:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003142:	4b1e      	ldr	r3, [pc, #120]	; (80031bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003144:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003146:	4a1d      	ldr	r2, [pc, #116]	; (80031bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003148:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800314c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800314e:	4b1b      	ldr	r3, [pc, #108]	; (80031bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003150:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003152:	4a1a      	ldr	r2, [pc, #104]	; (80031bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003154:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003158:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800315a:	4a18      	ldr	r2, [pc, #96]	; (80031bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800315c:	693b      	ldr	r3, [r7, #16]
 800315e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003160:	4b16      	ldr	r3, [pc, #88]	; (80031bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003162:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003164:	f003 0301 	and.w	r3, r3, #1
 8003168:	2b01      	cmp	r3, #1
 800316a:	d114      	bne.n	8003196 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800316c:	f7fd fda2 	bl	8000cb4 <HAL_GetTick>
 8003170:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003172:	e00a      	b.n	800318a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003174:	f7fd fd9e 	bl	8000cb4 <HAL_GetTick>
 8003178:	4602      	mov	r2, r0
 800317a:	697b      	ldr	r3, [r7, #20]
 800317c:	1ad3      	subs	r3, r2, r3
 800317e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003182:	4293      	cmp	r3, r2
 8003184:	d901      	bls.n	800318a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003186:	2303      	movs	r3, #3
 8003188:	e351      	b.n	800382e <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800318a:	4b0c      	ldr	r3, [pc, #48]	; (80031bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800318c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800318e:	f003 0302 	and.w	r3, r3, #2
 8003192:	2b00      	cmp	r3, #0
 8003194:	d0ee      	beq.n	8003174 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800319a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800319e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80031a2:	d111      	bne.n	80031c8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80031a4:	4b05      	ldr	r3, [pc, #20]	; (80031bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031a6:	689b      	ldr	r3, [r3, #8]
 80031a8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80031b0:	4b04      	ldr	r3, [pc, #16]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80031b2:	400b      	ands	r3, r1
 80031b4:	4901      	ldr	r1, [pc, #4]	; (80031bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031b6:	4313      	orrs	r3, r2
 80031b8:	608b      	str	r3, [r1, #8]
 80031ba:	e00b      	b.n	80031d4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80031bc:	40023800 	.word	0x40023800
 80031c0:	40007000 	.word	0x40007000
 80031c4:	0ffffcff 	.word	0x0ffffcff
 80031c8:	4bb3      	ldr	r3, [pc, #716]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80031ca:	689b      	ldr	r3, [r3, #8]
 80031cc:	4ab2      	ldr	r2, [pc, #712]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80031ce:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80031d2:	6093      	str	r3, [r2, #8]
 80031d4:	4bb0      	ldr	r3, [pc, #704]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80031d6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031e0:	49ad      	ldr	r1, [pc, #692]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80031e2:	4313      	orrs	r3, r2
 80031e4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f003 0310 	and.w	r3, r3, #16
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d010      	beq.n	8003214 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80031f2:	4ba9      	ldr	r3, [pc, #676]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80031f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80031f8:	4aa7      	ldr	r2, [pc, #668]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80031fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80031fe:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003202:	4ba5      	ldr	r3, [pc, #660]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003204:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800320c:	49a2      	ldr	r1, [pc, #648]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800320e:	4313      	orrs	r3, r2
 8003210:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800321c:	2b00      	cmp	r3, #0
 800321e:	d00a      	beq.n	8003236 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003220:	4b9d      	ldr	r3, [pc, #628]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003222:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003226:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800322e:	499a      	ldr	r1, [pc, #616]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003230:	4313      	orrs	r3, r2
 8003232:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800323e:	2b00      	cmp	r3, #0
 8003240:	d00a      	beq.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003242:	4b95      	ldr	r3, [pc, #596]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003244:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003248:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003250:	4991      	ldr	r1, [pc, #580]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003252:	4313      	orrs	r3, r2
 8003254:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003260:	2b00      	cmp	r3, #0
 8003262:	d00a      	beq.n	800327a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003264:	4b8c      	ldr	r3, [pc, #560]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003266:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800326a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003272:	4989      	ldr	r1, [pc, #548]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003274:	4313      	orrs	r3, r2
 8003276:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003282:	2b00      	cmp	r3, #0
 8003284:	d00a      	beq.n	800329c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003286:	4b84      	ldr	r3, [pc, #528]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003288:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800328c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003294:	4980      	ldr	r1, [pc, #512]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003296:	4313      	orrs	r3, r2
 8003298:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d00a      	beq.n	80032be <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80032a8:	4b7b      	ldr	r3, [pc, #492]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80032aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032ae:	f023 0203 	bic.w	r2, r3, #3
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032b6:	4978      	ldr	r1, [pc, #480]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80032b8:	4313      	orrs	r3, r2
 80032ba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d00a      	beq.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80032ca:	4b73      	ldr	r3, [pc, #460]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80032cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032d0:	f023 020c 	bic.w	r2, r3, #12
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032d8:	496f      	ldr	r1, [pc, #444]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80032da:	4313      	orrs	r3, r2
 80032dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d00a      	beq.n	8003302 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80032ec:	4b6a      	ldr	r3, [pc, #424]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80032ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032f2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032fa:	4967      	ldr	r1, [pc, #412]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80032fc:	4313      	orrs	r3, r2
 80032fe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800330a:	2b00      	cmp	r3, #0
 800330c:	d00a      	beq.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800330e:	4b62      	ldr	r3, [pc, #392]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003310:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003314:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800331c:	495e      	ldr	r1, [pc, #376]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800331e:	4313      	orrs	r3, r2
 8003320:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800332c:	2b00      	cmp	r3, #0
 800332e:	d00a      	beq.n	8003346 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003330:	4b59      	ldr	r3, [pc, #356]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003332:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003336:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800333e:	4956      	ldr	r1, [pc, #344]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003340:	4313      	orrs	r3, r2
 8003342:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800334e:	2b00      	cmp	r3, #0
 8003350:	d00a      	beq.n	8003368 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003352:	4b51      	ldr	r3, [pc, #324]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003354:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003358:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003360:	494d      	ldr	r1, [pc, #308]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003362:	4313      	orrs	r3, r2
 8003364:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003370:	2b00      	cmp	r3, #0
 8003372:	d00a      	beq.n	800338a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003374:	4b48      	ldr	r3, [pc, #288]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003376:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800337a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003382:	4945      	ldr	r1, [pc, #276]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003384:	4313      	orrs	r3, r2
 8003386:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003392:	2b00      	cmp	r3, #0
 8003394:	d00a      	beq.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003396:	4b40      	ldr	r3, [pc, #256]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003398:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800339c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033a4:	493c      	ldr	r1, [pc, #240]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80033a6:	4313      	orrs	r3, r2
 80033a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d00a      	beq.n	80033ce <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80033b8:	4b37      	ldr	r3, [pc, #220]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80033ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033be:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80033c6:	4934      	ldr	r1, [pc, #208]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80033c8:	4313      	orrs	r3, r2
 80033ca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d011      	beq.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80033da:	4b2f      	ldr	r3, [pc, #188]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80033dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033e0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80033e8:	492b      	ldr	r1, [pc, #172]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80033ea:	4313      	orrs	r3, r2
 80033ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80033f4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80033f8:	d101      	bne.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80033fa:	2301      	movs	r3, #1
 80033fc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f003 0308 	and.w	r3, r3, #8
 8003406:	2b00      	cmp	r3, #0
 8003408:	d001      	beq.n	800340e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800340a:	2301      	movs	r3, #1
 800340c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003416:	2b00      	cmp	r3, #0
 8003418:	d00a      	beq.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800341a:	4b1f      	ldr	r3, [pc, #124]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800341c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003420:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003428:	491b      	ldr	r1, [pc, #108]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800342a:	4313      	orrs	r3, r2
 800342c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003438:	2b00      	cmp	r3, #0
 800343a:	d00b      	beq.n	8003454 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800343c:	4b16      	ldr	r3, [pc, #88]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800343e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003442:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800344c:	4912      	ldr	r1, [pc, #72]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800344e:	4313      	orrs	r3, r2
 8003450:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800345c:	2b00      	cmp	r3, #0
 800345e:	d00b      	beq.n	8003478 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003460:	4b0d      	ldr	r3, [pc, #52]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003462:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003466:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003470:	4909      	ldr	r1, [pc, #36]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003472:	4313      	orrs	r3, r2
 8003474:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003480:	2b00      	cmp	r3, #0
 8003482:	d00f      	beq.n	80034a4 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003484:	4b04      	ldr	r3, [pc, #16]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003486:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800348a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003494:	e002      	b.n	800349c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8003496:	bf00      	nop
 8003498:	40023800 	.word	0x40023800
 800349c:	4986      	ldr	r1, [pc, #536]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800349e:	4313      	orrs	r3, r2
 80034a0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d00b      	beq.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80034b0:	4b81      	ldr	r3, [pc, #516]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80034b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80034b6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80034c0:	497d      	ldr	r1, [pc, #500]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80034c2:	4313      	orrs	r3, r2
 80034c4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80034c8:	69fb      	ldr	r3, [r7, #28]
 80034ca:	2b01      	cmp	r3, #1
 80034cc:	d006      	beq.n	80034dc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	f000 80d6 	beq.w	8003688 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80034dc:	4b76      	ldr	r3, [pc, #472]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a75      	ldr	r2, [pc, #468]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80034e2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80034e6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034e8:	f7fd fbe4 	bl	8000cb4 <HAL_GetTick>
 80034ec:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80034ee:	e008      	b.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80034f0:	f7fd fbe0 	bl	8000cb4 <HAL_GetTick>
 80034f4:	4602      	mov	r2, r0
 80034f6:	697b      	ldr	r3, [r7, #20]
 80034f8:	1ad3      	subs	r3, r2, r3
 80034fa:	2b64      	cmp	r3, #100	; 0x64
 80034fc:	d901      	bls.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80034fe:	2303      	movs	r3, #3
 8003500:	e195      	b.n	800382e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003502:	4b6d      	ldr	r3, [pc, #436]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800350a:	2b00      	cmp	r3, #0
 800350c:	d1f0      	bne.n	80034f0 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f003 0301 	and.w	r3, r3, #1
 8003516:	2b00      	cmp	r3, #0
 8003518:	d021      	beq.n	800355e <HAL_RCCEx_PeriphCLKConfig+0x572>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800351e:	2b00      	cmp	r3, #0
 8003520:	d11d      	bne.n	800355e <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003522:	4b65      	ldr	r3, [pc, #404]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003524:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003528:	0c1b      	lsrs	r3, r3, #16
 800352a:	f003 0303 	and.w	r3, r3, #3
 800352e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003530:	4b61      	ldr	r3, [pc, #388]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003532:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003536:	0e1b      	lsrs	r3, r3, #24
 8003538:	f003 030f 	and.w	r3, r3, #15
 800353c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	019a      	lsls	r2, r3, #6
 8003544:	693b      	ldr	r3, [r7, #16]
 8003546:	041b      	lsls	r3, r3, #16
 8003548:	431a      	orrs	r2, r3
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	061b      	lsls	r3, r3, #24
 800354e:	431a      	orrs	r2, r3
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	689b      	ldr	r3, [r3, #8]
 8003554:	071b      	lsls	r3, r3, #28
 8003556:	4958      	ldr	r1, [pc, #352]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003558:	4313      	orrs	r3, r2
 800355a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003566:	2b00      	cmp	r3, #0
 8003568:	d004      	beq.n	8003574 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800356e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003572:	d00a      	beq.n	800358a <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800357c:	2b00      	cmp	r3, #0
 800357e:	d02e      	beq.n	80035de <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003584:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003588:	d129      	bne.n	80035de <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800358a:	4b4b      	ldr	r3, [pc, #300]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800358c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003590:	0c1b      	lsrs	r3, r3, #16
 8003592:	f003 0303 	and.w	r3, r3, #3
 8003596:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003598:	4b47      	ldr	r3, [pc, #284]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800359a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800359e:	0f1b      	lsrs	r3, r3, #28
 80035a0:	f003 0307 	and.w	r3, r3, #7
 80035a4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	019a      	lsls	r2, r3, #6
 80035ac:	693b      	ldr	r3, [r7, #16]
 80035ae:	041b      	lsls	r3, r3, #16
 80035b0:	431a      	orrs	r2, r3
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	68db      	ldr	r3, [r3, #12]
 80035b6:	061b      	lsls	r3, r3, #24
 80035b8:	431a      	orrs	r2, r3
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	071b      	lsls	r3, r3, #28
 80035be:	493e      	ldr	r1, [pc, #248]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80035c0:	4313      	orrs	r3, r2
 80035c2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80035c6:	4b3c      	ldr	r3, [pc, #240]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80035c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80035cc:	f023 021f 	bic.w	r2, r3, #31
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d4:	3b01      	subs	r3, #1
 80035d6:	4938      	ldr	r1, [pc, #224]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80035d8:	4313      	orrs	r3, r2
 80035da:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d01d      	beq.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80035ea:	4b33      	ldr	r3, [pc, #204]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80035ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80035f0:	0e1b      	lsrs	r3, r3, #24
 80035f2:	f003 030f 	and.w	r3, r3, #15
 80035f6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80035f8:	4b2f      	ldr	r3, [pc, #188]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80035fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80035fe:	0f1b      	lsrs	r3, r3, #28
 8003600:	f003 0307 	and.w	r3, r3, #7
 8003604:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	019a      	lsls	r2, r3, #6
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	691b      	ldr	r3, [r3, #16]
 8003610:	041b      	lsls	r3, r3, #16
 8003612:	431a      	orrs	r2, r3
 8003614:	693b      	ldr	r3, [r7, #16]
 8003616:	061b      	lsls	r3, r3, #24
 8003618:	431a      	orrs	r2, r3
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	071b      	lsls	r3, r3, #28
 800361e:	4926      	ldr	r1, [pc, #152]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003620:	4313      	orrs	r3, r2
 8003622:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800362e:	2b00      	cmp	r3, #0
 8003630:	d011      	beq.n	8003656 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	019a      	lsls	r2, r3, #6
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	691b      	ldr	r3, [r3, #16]
 800363c:	041b      	lsls	r3, r3, #16
 800363e:	431a      	orrs	r2, r3
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	68db      	ldr	r3, [r3, #12]
 8003644:	061b      	lsls	r3, r3, #24
 8003646:	431a      	orrs	r2, r3
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	689b      	ldr	r3, [r3, #8]
 800364c:	071b      	lsls	r3, r3, #28
 800364e:	491a      	ldr	r1, [pc, #104]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003650:	4313      	orrs	r3, r2
 8003652:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003656:	4b18      	ldr	r3, [pc, #96]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4a17      	ldr	r2, [pc, #92]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800365c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003660:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003662:	f7fd fb27 	bl	8000cb4 <HAL_GetTick>
 8003666:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003668:	e008      	b.n	800367c <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800366a:	f7fd fb23 	bl	8000cb4 <HAL_GetTick>
 800366e:	4602      	mov	r2, r0
 8003670:	697b      	ldr	r3, [r7, #20]
 8003672:	1ad3      	subs	r3, r2, r3
 8003674:	2b64      	cmp	r3, #100	; 0x64
 8003676:	d901      	bls.n	800367c <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003678:	2303      	movs	r3, #3
 800367a:	e0d8      	b.n	800382e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800367c:	4b0e      	ldr	r3, [pc, #56]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003684:	2b00      	cmp	r3, #0
 8003686:	d0f0      	beq.n	800366a <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003688:	69bb      	ldr	r3, [r7, #24]
 800368a:	2b01      	cmp	r3, #1
 800368c:	f040 80ce 	bne.w	800382c <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003690:	4b09      	ldr	r3, [pc, #36]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a08      	ldr	r2, [pc, #32]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003696:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800369a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800369c:	f7fd fb0a 	bl	8000cb4 <HAL_GetTick>
 80036a0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80036a2:	e00b      	b.n	80036bc <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80036a4:	f7fd fb06 	bl	8000cb4 <HAL_GetTick>
 80036a8:	4602      	mov	r2, r0
 80036aa:	697b      	ldr	r3, [r7, #20]
 80036ac:	1ad3      	subs	r3, r2, r3
 80036ae:	2b64      	cmp	r3, #100	; 0x64
 80036b0:	d904      	bls.n	80036bc <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80036b2:	2303      	movs	r3, #3
 80036b4:	e0bb      	b.n	800382e <HAL_RCCEx_PeriphCLKConfig+0x842>
 80036b6:	bf00      	nop
 80036b8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80036bc:	4b5e      	ldr	r3, [pc, #376]	; (8003838 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80036c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80036c8:	d0ec      	beq.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d003      	beq.n	80036de <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d009      	beq.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d02e      	beq.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d12a      	bne.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80036f2:	4b51      	ldr	r3, [pc, #324]	; (8003838 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80036f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036f8:	0c1b      	lsrs	r3, r3, #16
 80036fa:	f003 0303 	and.w	r3, r3, #3
 80036fe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003700:	4b4d      	ldr	r3, [pc, #308]	; (8003838 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003702:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003706:	0f1b      	lsrs	r3, r3, #28
 8003708:	f003 0307 	and.w	r3, r3, #7
 800370c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	695b      	ldr	r3, [r3, #20]
 8003712:	019a      	lsls	r2, r3, #6
 8003714:	693b      	ldr	r3, [r7, #16]
 8003716:	041b      	lsls	r3, r3, #16
 8003718:	431a      	orrs	r2, r3
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	699b      	ldr	r3, [r3, #24]
 800371e:	061b      	lsls	r3, r3, #24
 8003720:	431a      	orrs	r2, r3
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	071b      	lsls	r3, r3, #28
 8003726:	4944      	ldr	r1, [pc, #272]	; (8003838 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003728:	4313      	orrs	r3, r2
 800372a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800372e:	4b42      	ldr	r3, [pc, #264]	; (8003838 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003730:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003734:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800373c:	3b01      	subs	r3, #1
 800373e:	021b      	lsls	r3, r3, #8
 8003740:	493d      	ldr	r1, [pc, #244]	; (8003838 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003742:	4313      	orrs	r3, r2
 8003744:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003750:	2b00      	cmp	r3, #0
 8003752:	d022      	beq.n	800379a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003758:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800375c:	d11d      	bne.n	800379a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800375e:	4b36      	ldr	r3, [pc, #216]	; (8003838 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003760:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003764:	0e1b      	lsrs	r3, r3, #24
 8003766:	f003 030f 	and.w	r3, r3, #15
 800376a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800376c:	4b32      	ldr	r3, [pc, #200]	; (8003838 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800376e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003772:	0f1b      	lsrs	r3, r3, #28
 8003774:	f003 0307 	and.w	r3, r3, #7
 8003778:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	695b      	ldr	r3, [r3, #20]
 800377e:	019a      	lsls	r2, r3, #6
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6a1b      	ldr	r3, [r3, #32]
 8003784:	041b      	lsls	r3, r3, #16
 8003786:	431a      	orrs	r2, r3
 8003788:	693b      	ldr	r3, [r7, #16]
 800378a:	061b      	lsls	r3, r3, #24
 800378c:	431a      	orrs	r2, r3
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	071b      	lsls	r3, r3, #28
 8003792:	4929      	ldr	r1, [pc, #164]	; (8003838 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003794:	4313      	orrs	r3, r2
 8003796:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f003 0308 	and.w	r3, r3, #8
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d028      	beq.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80037a6:	4b24      	ldr	r3, [pc, #144]	; (8003838 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80037a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037ac:	0e1b      	lsrs	r3, r3, #24
 80037ae:	f003 030f 	and.w	r3, r3, #15
 80037b2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80037b4:	4b20      	ldr	r3, [pc, #128]	; (8003838 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80037b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037ba:	0c1b      	lsrs	r3, r3, #16
 80037bc:	f003 0303 	and.w	r3, r3, #3
 80037c0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	695b      	ldr	r3, [r3, #20]
 80037c6:	019a      	lsls	r2, r3, #6
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	041b      	lsls	r3, r3, #16
 80037cc:	431a      	orrs	r2, r3
 80037ce:	693b      	ldr	r3, [r7, #16]
 80037d0:	061b      	lsls	r3, r3, #24
 80037d2:	431a      	orrs	r2, r3
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	69db      	ldr	r3, [r3, #28]
 80037d8:	071b      	lsls	r3, r3, #28
 80037da:	4917      	ldr	r1, [pc, #92]	; (8003838 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80037dc:	4313      	orrs	r3, r2
 80037de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80037e2:	4b15      	ldr	r3, [pc, #84]	; (8003838 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80037e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80037e8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037f0:	4911      	ldr	r1, [pc, #68]	; (8003838 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80037f2:	4313      	orrs	r3, r2
 80037f4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80037f8:	4b0f      	ldr	r3, [pc, #60]	; (8003838 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a0e      	ldr	r2, [pc, #56]	; (8003838 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80037fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003802:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003804:	f7fd fa56 	bl	8000cb4 <HAL_GetTick>
 8003808:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800380a:	e008      	b.n	800381e <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800380c:	f7fd fa52 	bl	8000cb4 <HAL_GetTick>
 8003810:	4602      	mov	r2, r0
 8003812:	697b      	ldr	r3, [r7, #20]
 8003814:	1ad3      	subs	r3, r2, r3
 8003816:	2b64      	cmp	r3, #100	; 0x64
 8003818:	d901      	bls.n	800381e <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800381a:	2303      	movs	r3, #3
 800381c:	e007      	b.n	800382e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800381e:	4b06      	ldr	r3, [pc, #24]	; (8003838 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003826:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800382a:	d1ef      	bne.n	800380c <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 800382c:	2300      	movs	r3, #0
}
 800382e:	4618      	mov	r0, r3
 8003830:	3720      	adds	r7, #32
 8003832:	46bd      	mov	sp, r7
 8003834:	bd80      	pop	{r7, pc}
 8003836:	bf00      	nop
 8003838:	40023800 	.word	0x40023800

0800383c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b082      	sub	sp, #8
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d101      	bne.n	800384e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800384a:	2301      	movs	r3, #1
 800384c:	e049      	b.n	80038e2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003854:	b2db      	uxtb	r3, r3
 8003856:	2b00      	cmp	r3, #0
 8003858:	d106      	bne.n	8003868 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2200      	movs	r2, #0
 800385e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003862:	6878      	ldr	r0, [r7, #4]
 8003864:	f000 f841 	bl	80038ea <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2202      	movs	r2, #2
 800386c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681a      	ldr	r2, [r3, #0]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	3304      	adds	r3, #4
 8003878:	4619      	mov	r1, r3
 800387a:	4610      	mov	r0, r2
 800387c:	f000 fa00 	bl	8003c80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2201      	movs	r2, #1
 8003884:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2201      	movs	r2, #1
 800388c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2201      	movs	r2, #1
 8003894:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2201      	movs	r2, #1
 800389c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2201      	movs	r2, #1
 80038a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2201      	movs	r2, #1
 80038ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2201      	movs	r2, #1
 80038b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2201      	movs	r2, #1
 80038bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2201      	movs	r2, #1
 80038c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2201      	movs	r2, #1
 80038cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2201      	movs	r2, #1
 80038d4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2201      	movs	r2, #1
 80038dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80038e0:	2300      	movs	r3, #0
}
 80038e2:	4618      	mov	r0, r3
 80038e4:	3708      	adds	r7, #8
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bd80      	pop	{r7, pc}

080038ea <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80038ea:	b480      	push	{r7}
 80038ec:	b083      	sub	sp, #12
 80038ee:	af00      	add	r7, sp, #0
 80038f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80038f2:	bf00      	nop
 80038f4:	370c      	adds	r7, #12
 80038f6:	46bd      	mov	sp, r7
 80038f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fc:	4770      	bx	lr
	...

08003900 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003900:	b480      	push	{r7}
 8003902:	b085      	sub	sp, #20
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800390e:	b2db      	uxtb	r3, r3
 8003910:	2b01      	cmp	r3, #1
 8003912:	d001      	beq.n	8003918 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003914:	2301      	movs	r3, #1
 8003916:	e054      	b.n	80039c2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2202      	movs	r2, #2
 800391c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	68da      	ldr	r2, [r3, #12]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f042 0201 	orr.w	r2, r2, #1
 800392e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4a26      	ldr	r2, [pc, #152]	; (80039d0 <HAL_TIM_Base_Start_IT+0xd0>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d022      	beq.n	8003980 <HAL_TIM_Base_Start_IT+0x80>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003942:	d01d      	beq.n	8003980 <HAL_TIM_Base_Start_IT+0x80>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4a22      	ldr	r2, [pc, #136]	; (80039d4 <HAL_TIM_Base_Start_IT+0xd4>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d018      	beq.n	8003980 <HAL_TIM_Base_Start_IT+0x80>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4a21      	ldr	r2, [pc, #132]	; (80039d8 <HAL_TIM_Base_Start_IT+0xd8>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d013      	beq.n	8003980 <HAL_TIM_Base_Start_IT+0x80>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a1f      	ldr	r2, [pc, #124]	; (80039dc <HAL_TIM_Base_Start_IT+0xdc>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d00e      	beq.n	8003980 <HAL_TIM_Base_Start_IT+0x80>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4a1e      	ldr	r2, [pc, #120]	; (80039e0 <HAL_TIM_Base_Start_IT+0xe0>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d009      	beq.n	8003980 <HAL_TIM_Base_Start_IT+0x80>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4a1c      	ldr	r2, [pc, #112]	; (80039e4 <HAL_TIM_Base_Start_IT+0xe4>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d004      	beq.n	8003980 <HAL_TIM_Base_Start_IT+0x80>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4a1b      	ldr	r2, [pc, #108]	; (80039e8 <HAL_TIM_Base_Start_IT+0xe8>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d115      	bne.n	80039ac <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	689a      	ldr	r2, [r3, #8]
 8003986:	4b19      	ldr	r3, [pc, #100]	; (80039ec <HAL_TIM_Base_Start_IT+0xec>)
 8003988:	4013      	ands	r3, r2
 800398a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	2b06      	cmp	r3, #6
 8003990:	d015      	beq.n	80039be <HAL_TIM_Base_Start_IT+0xbe>
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003998:	d011      	beq.n	80039be <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	681a      	ldr	r2, [r3, #0]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f042 0201 	orr.w	r2, r2, #1
 80039a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039aa:	e008      	b.n	80039be <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	681a      	ldr	r2, [r3, #0]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f042 0201 	orr.w	r2, r2, #1
 80039ba:	601a      	str	r2, [r3, #0]
 80039bc:	e000      	b.n	80039c0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039be:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80039c0:	2300      	movs	r3, #0
}
 80039c2:	4618      	mov	r0, r3
 80039c4:	3714      	adds	r7, #20
 80039c6:	46bd      	mov	sp, r7
 80039c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039cc:	4770      	bx	lr
 80039ce:	bf00      	nop
 80039d0:	40010000 	.word	0x40010000
 80039d4:	40000400 	.word	0x40000400
 80039d8:	40000800 	.word	0x40000800
 80039dc:	40000c00 	.word	0x40000c00
 80039e0:	40010400 	.word	0x40010400
 80039e4:	40014000 	.word	0x40014000
 80039e8:	40001800 	.word	0x40001800
 80039ec:	00010007 	.word	0x00010007

080039f0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b082      	sub	sp, #8
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	691b      	ldr	r3, [r3, #16]
 80039fe:	f003 0302 	and.w	r3, r3, #2
 8003a02:	2b02      	cmp	r3, #2
 8003a04:	d122      	bne.n	8003a4c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	68db      	ldr	r3, [r3, #12]
 8003a0c:	f003 0302 	and.w	r3, r3, #2
 8003a10:	2b02      	cmp	r3, #2
 8003a12:	d11b      	bne.n	8003a4c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f06f 0202 	mvn.w	r2, #2
 8003a1c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2201      	movs	r2, #1
 8003a22:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	699b      	ldr	r3, [r3, #24]
 8003a2a:	f003 0303 	and.w	r3, r3, #3
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d003      	beq.n	8003a3a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003a32:	6878      	ldr	r0, [r7, #4]
 8003a34:	f000 f905 	bl	8003c42 <HAL_TIM_IC_CaptureCallback>
 8003a38:	e005      	b.n	8003a46 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a3a:	6878      	ldr	r0, [r7, #4]
 8003a3c:	f000 f8f7 	bl	8003c2e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a40:	6878      	ldr	r0, [r7, #4]
 8003a42:	f000 f908 	bl	8003c56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2200      	movs	r2, #0
 8003a4a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	691b      	ldr	r3, [r3, #16]
 8003a52:	f003 0304 	and.w	r3, r3, #4
 8003a56:	2b04      	cmp	r3, #4
 8003a58:	d122      	bne.n	8003aa0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	68db      	ldr	r3, [r3, #12]
 8003a60:	f003 0304 	and.w	r3, r3, #4
 8003a64:	2b04      	cmp	r3, #4
 8003a66:	d11b      	bne.n	8003aa0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f06f 0204 	mvn.w	r2, #4
 8003a70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2202      	movs	r2, #2
 8003a76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	699b      	ldr	r3, [r3, #24]
 8003a7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d003      	beq.n	8003a8e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a86:	6878      	ldr	r0, [r7, #4]
 8003a88:	f000 f8db 	bl	8003c42 <HAL_TIM_IC_CaptureCallback>
 8003a8c:	e005      	b.n	8003a9a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a8e:	6878      	ldr	r0, [r7, #4]
 8003a90:	f000 f8cd 	bl	8003c2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a94:	6878      	ldr	r0, [r7, #4]
 8003a96:	f000 f8de 	bl	8003c56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	691b      	ldr	r3, [r3, #16]
 8003aa6:	f003 0308 	and.w	r3, r3, #8
 8003aaa:	2b08      	cmp	r3, #8
 8003aac:	d122      	bne.n	8003af4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	68db      	ldr	r3, [r3, #12]
 8003ab4:	f003 0308 	and.w	r3, r3, #8
 8003ab8:	2b08      	cmp	r3, #8
 8003aba:	d11b      	bne.n	8003af4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f06f 0208 	mvn.w	r2, #8
 8003ac4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2204      	movs	r2, #4
 8003aca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	69db      	ldr	r3, [r3, #28]
 8003ad2:	f003 0303 	and.w	r3, r3, #3
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d003      	beq.n	8003ae2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ada:	6878      	ldr	r0, [r7, #4]
 8003adc:	f000 f8b1 	bl	8003c42 <HAL_TIM_IC_CaptureCallback>
 8003ae0:	e005      	b.n	8003aee <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ae2:	6878      	ldr	r0, [r7, #4]
 8003ae4:	f000 f8a3 	bl	8003c2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ae8:	6878      	ldr	r0, [r7, #4]
 8003aea:	f000 f8b4 	bl	8003c56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2200      	movs	r2, #0
 8003af2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	691b      	ldr	r3, [r3, #16]
 8003afa:	f003 0310 	and.w	r3, r3, #16
 8003afe:	2b10      	cmp	r3, #16
 8003b00:	d122      	bne.n	8003b48 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	68db      	ldr	r3, [r3, #12]
 8003b08:	f003 0310 	and.w	r3, r3, #16
 8003b0c:	2b10      	cmp	r3, #16
 8003b0e:	d11b      	bne.n	8003b48 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f06f 0210 	mvn.w	r2, #16
 8003b18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2208      	movs	r2, #8
 8003b1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	69db      	ldr	r3, [r3, #28]
 8003b26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d003      	beq.n	8003b36 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b2e:	6878      	ldr	r0, [r7, #4]
 8003b30:	f000 f887 	bl	8003c42 <HAL_TIM_IC_CaptureCallback>
 8003b34:	e005      	b.n	8003b42 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b36:	6878      	ldr	r0, [r7, #4]
 8003b38:	f000 f879 	bl	8003c2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b3c:	6878      	ldr	r0, [r7, #4]
 8003b3e:	f000 f88a 	bl	8003c56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2200      	movs	r2, #0
 8003b46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	691b      	ldr	r3, [r3, #16]
 8003b4e:	f003 0301 	and.w	r3, r3, #1
 8003b52:	2b01      	cmp	r3, #1
 8003b54:	d10e      	bne.n	8003b74 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	68db      	ldr	r3, [r3, #12]
 8003b5c:	f003 0301 	and.w	r3, r3, #1
 8003b60:	2b01      	cmp	r3, #1
 8003b62:	d107      	bne.n	8003b74 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f06f 0201 	mvn.w	r2, #1
 8003b6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003b6e:	6878      	ldr	r0, [r7, #4]
 8003b70:	f7fc ff32 	bl	80009d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	691b      	ldr	r3, [r3, #16]
 8003b7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b7e:	2b80      	cmp	r3, #128	; 0x80
 8003b80:	d10e      	bne.n	8003ba0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	68db      	ldr	r3, [r3, #12]
 8003b88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b8c:	2b80      	cmp	r3, #128	; 0x80
 8003b8e:	d107      	bne.n	8003ba0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003b98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003b9a:	6878      	ldr	r0, [r7, #4]
 8003b9c:	f000 f91a 	bl	8003dd4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	691b      	ldr	r3, [r3, #16]
 8003ba6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003baa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003bae:	d10e      	bne.n	8003bce <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	68db      	ldr	r3, [r3, #12]
 8003bb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bba:	2b80      	cmp	r3, #128	; 0x80
 8003bbc:	d107      	bne.n	8003bce <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003bc6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003bc8:	6878      	ldr	r0, [r7, #4]
 8003bca:	f000 f90d 	bl	8003de8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	691b      	ldr	r3, [r3, #16]
 8003bd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bd8:	2b40      	cmp	r3, #64	; 0x40
 8003bda:	d10e      	bne.n	8003bfa <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	68db      	ldr	r3, [r3, #12]
 8003be2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003be6:	2b40      	cmp	r3, #64	; 0x40
 8003be8:	d107      	bne.n	8003bfa <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003bf2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003bf4:	6878      	ldr	r0, [r7, #4]
 8003bf6:	f000 f838 	bl	8003c6a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	691b      	ldr	r3, [r3, #16]
 8003c00:	f003 0320 	and.w	r3, r3, #32
 8003c04:	2b20      	cmp	r3, #32
 8003c06:	d10e      	bne.n	8003c26 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	68db      	ldr	r3, [r3, #12]
 8003c0e:	f003 0320 	and.w	r3, r3, #32
 8003c12:	2b20      	cmp	r3, #32
 8003c14:	d107      	bne.n	8003c26 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f06f 0220 	mvn.w	r2, #32
 8003c1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003c20:	6878      	ldr	r0, [r7, #4]
 8003c22:	f000 f8cd 	bl	8003dc0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003c26:	bf00      	nop
 8003c28:	3708      	adds	r7, #8
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bd80      	pop	{r7, pc}

08003c2e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003c2e:	b480      	push	{r7}
 8003c30:	b083      	sub	sp, #12
 8003c32:	af00      	add	r7, sp, #0
 8003c34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003c36:	bf00      	nop
 8003c38:	370c      	adds	r7, #12
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c40:	4770      	bx	lr

08003c42 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003c42:	b480      	push	{r7}
 8003c44:	b083      	sub	sp, #12
 8003c46:	af00      	add	r7, sp, #0
 8003c48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003c4a:	bf00      	nop
 8003c4c:	370c      	adds	r7, #12
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c54:	4770      	bx	lr

08003c56 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003c56:	b480      	push	{r7}
 8003c58:	b083      	sub	sp, #12
 8003c5a:	af00      	add	r7, sp, #0
 8003c5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003c5e:	bf00      	nop
 8003c60:	370c      	adds	r7, #12
 8003c62:	46bd      	mov	sp, r7
 8003c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c68:	4770      	bx	lr

08003c6a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003c6a:	b480      	push	{r7}
 8003c6c:	b083      	sub	sp, #12
 8003c6e:	af00      	add	r7, sp, #0
 8003c70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003c72:	bf00      	nop
 8003c74:	370c      	adds	r7, #12
 8003c76:	46bd      	mov	sp, r7
 8003c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7c:	4770      	bx	lr
	...

08003c80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003c80:	b480      	push	{r7}
 8003c82:	b085      	sub	sp, #20
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
 8003c88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	4a40      	ldr	r2, [pc, #256]	; (8003d94 <TIM_Base_SetConfig+0x114>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d013      	beq.n	8003cc0 <TIM_Base_SetConfig+0x40>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c9e:	d00f      	beq.n	8003cc0 <TIM_Base_SetConfig+0x40>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	4a3d      	ldr	r2, [pc, #244]	; (8003d98 <TIM_Base_SetConfig+0x118>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d00b      	beq.n	8003cc0 <TIM_Base_SetConfig+0x40>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	4a3c      	ldr	r2, [pc, #240]	; (8003d9c <TIM_Base_SetConfig+0x11c>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d007      	beq.n	8003cc0 <TIM_Base_SetConfig+0x40>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	4a3b      	ldr	r2, [pc, #236]	; (8003da0 <TIM_Base_SetConfig+0x120>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d003      	beq.n	8003cc0 <TIM_Base_SetConfig+0x40>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	4a3a      	ldr	r2, [pc, #232]	; (8003da4 <TIM_Base_SetConfig+0x124>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d108      	bne.n	8003cd2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cc6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	68fa      	ldr	r2, [r7, #12]
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	4a2f      	ldr	r2, [pc, #188]	; (8003d94 <TIM_Base_SetConfig+0x114>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d02b      	beq.n	8003d32 <TIM_Base_SetConfig+0xb2>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ce0:	d027      	beq.n	8003d32 <TIM_Base_SetConfig+0xb2>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	4a2c      	ldr	r2, [pc, #176]	; (8003d98 <TIM_Base_SetConfig+0x118>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d023      	beq.n	8003d32 <TIM_Base_SetConfig+0xb2>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	4a2b      	ldr	r2, [pc, #172]	; (8003d9c <TIM_Base_SetConfig+0x11c>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d01f      	beq.n	8003d32 <TIM_Base_SetConfig+0xb2>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	4a2a      	ldr	r2, [pc, #168]	; (8003da0 <TIM_Base_SetConfig+0x120>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d01b      	beq.n	8003d32 <TIM_Base_SetConfig+0xb2>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	4a29      	ldr	r2, [pc, #164]	; (8003da4 <TIM_Base_SetConfig+0x124>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d017      	beq.n	8003d32 <TIM_Base_SetConfig+0xb2>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	4a28      	ldr	r2, [pc, #160]	; (8003da8 <TIM_Base_SetConfig+0x128>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d013      	beq.n	8003d32 <TIM_Base_SetConfig+0xb2>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	4a27      	ldr	r2, [pc, #156]	; (8003dac <TIM_Base_SetConfig+0x12c>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d00f      	beq.n	8003d32 <TIM_Base_SetConfig+0xb2>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	4a26      	ldr	r2, [pc, #152]	; (8003db0 <TIM_Base_SetConfig+0x130>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d00b      	beq.n	8003d32 <TIM_Base_SetConfig+0xb2>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	4a25      	ldr	r2, [pc, #148]	; (8003db4 <TIM_Base_SetConfig+0x134>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d007      	beq.n	8003d32 <TIM_Base_SetConfig+0xb2>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	4a24      	ldr	r2, [pc, #144]	; (8003db8 <TIM_Base_SetConfig+0x138>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d003      	beq.n	8003d32 <TIM_Base_SetConfig+0xb2>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	4a23      	ldr	r2, [pc, #140]	; (8003dbc <TIM_Base_SetConfig+0x13c>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d108      	bne.n	8003d44 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d38:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	68db      	ldr	r3, [r3, #12]
 8003d3e:	68fa      	ldr	r2, [r7, #12]
 8003d40:	4313      	orrs	r3, r2
 8003d42:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	695b      	ldr	r3, [r3, #20]
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	68fa      	ldr	r2, [r7, #12]
 8003d56:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	689a      	ldr	r2, [r3, #8]
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	681a      	ldr	r2, [r3, #0]
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	4a0a      	ldr	r2, [pc, #40]	; (8003d94 <TIM_Base_SetConfig+0x114>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d003      	beq.n	8003d78 <TIM_Base_SetConfig+0xf8>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	4a0c      	ldr	r2, [pc, #48]	; (8003da4 <TIM_Base_SetConfig+0x124>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d103      	bne.n	8003d80 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	691a      	ldr	r2, [r3, #16]
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2201      	movs	r2, #1
 8003d84:	615a      	str	r2, [r3, #20]
}
 8003d86:	bf00      	nop
 8003d88:	3714      	adds	r7, #20
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d90:	4770      	bx	lr
 8003d92:	bf00      	nop
 8003d94:	40010000 	.word	0x40010000
 8003d98:	40000400 	.word	0x40000400
 8003d9c:	40000800 	.word	0x40000800
 8003da0:	40000c00 	.word	0x40000c00
 8003da4:	40010400 	.word	0x40010400
 8003da8:	40014000 	.word	0x40014000
 8003dac:	40014400 	.word	0x40014400
 8003db0:	40014800 	.word	0x40014800
 8003db4:	40001800 	.word	0x40001800
 8003db8:	40001c00 	.word	0x40001c00
 8003dbc:	40002000 	.word	0x40002000

08003dc0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	b083      	sub	sp, #12
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003dc8:	bf00      	nop
 8003dca:	370c      	adds	r7, #12
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd2:	4770      	bx	lr

08003dd4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	b083      	sub	sp, #12
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003ddc:	bf00      	nop
 8003dde:	370c      	adds	r7, #12
 8003de0:	46bd      	mov	sp, r7
 8003de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de6:	4770      	bx	lr

08003de8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003de8:	b480      	push	{r7}
 8003dea:	b083      	sub	sp, #12
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003df0:	bf00      	nop
 8003df2:	370c      	adds	r7, #12
 8003df4:	46bd      	mov	sp, r7
 8003df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfa:	4770      	bx	lr

08003dfc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b082      	sub	sp, #8
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d101      	bne.n	8003e0e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	e040      	b.n	8003e90 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d106      	bne.n	8003e24 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e1e:	6878      	ldr	r0, [r7, #4]
 8003e20:	f7fc fe18 	bl	8000a54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2224      	movs	r2, #36	; 0x24
 8003e28:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	681a      	ldr	r2, [r3, #0]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f022 0201 	bic.w	r2, r2, #1
 8003e38:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003e3a:	6878      	ldr	r0, [r7, #4]
 8003e3c:	f000 f8c0 	bl	8003fc0 <UART_SetConfig>
 8003e40:	4603      	mov	r3, r0
 8003e42:	2b01      	cmp	r3, #1
 8003e44:	d101      	bne.n	8003e4a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003e46:	2301      	movs	r3, #1
 8003e48:	e022      	b.n	8003e90 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d002      	beq.n	8003e58 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003e52:	6878      	ldr	r0, [r7, #4]
 8003e54:	f000 fb14 	bl	8004480 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	685a      	ldr	r2, [r3, #4]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003e66:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	689a      	ldr	r2, [r3, #8]
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003e76:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	681a      	ldr	r2, [r3, #0]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f042 0201 	orr.w	r2, r2, #1
 8003e86:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003e88:	6878      	ldr	r0, [r7, #4]
 8003e8a:	f000 fb9b 	bl	80045c4 <UART_CheckIdleState>
 8003e8e:	4603      	mov	r3, r0
}
 8003e90:	4618      	mov	r0, r3
 8003e92:	3708      	adds	r7, #8
 8003e94:	46bd      	mov	sp, r7
 8003e96:	bd80      	pop	{r7, pc}

08003e98 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b08a      	sub	sp, #40	; 0x28
 8003e9c:	af02      	add	r7, sp, #8
 8003e9e:	60f8      	str	r0, [r7, #12]
 8003ea0:	60b9      	str	r1, [r7, #8]
 8003ea2:	603b      	str	r3, [r7, #0]
 8003ea4:	4613      	mov	r3, r2
 8003ea6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003eac:	2b20      	cmp	r3, #32
 8003eae:	f040 8081 	bne.w	8003fb4 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003eb2:	68bb      	ldr	r3, [r7, #8]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d002      	beq.n	8003ebe <HAL_UART_Transmit+0x26>
 8003eb8:	88fb      	ldrh	r3, [r7, #6]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d101      	bne.n	8003ec2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	e079      	b.n	8003fb6 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003ec8:	2b01      	cmp	r3, #1
 8003eca:	d101      	bne.n	8003ed0 <HAL_UART_Transmit+0x38>
 8003ecc:	2302      	movs	r3, #2
 8003ece:	e072      	b.n	8003fb6 <HAL_UART_Transmit+0x11e>
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	2201      	movs	r2, #1
 8003ed4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	2200      	movs	r2, #0
 8003edc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	2221      	movs	r2, #33	; 0x21
 8003ee4:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003ee6:	f7fc fee5 	bl	8000cb4 <HAL_GetTick>
 8003eea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	88fa      	ldrh	r2, [r7, #6]
 8003ef0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	88fa      	ldrh	r2, [r7, #6]
 8003ef8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	689b      	ldr	r3, [r3, #8]
 8003f00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f04:	d108      	bne.n	8003f18 <HAL_UART_Transmit+0x80>
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	691b      	ldr	r3, [r3, #16]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d104      	bne.n	8003f18 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8003f0e:	2300      	movs	r3, #0
 8003f10:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003f12:	68bb      	ldr	r3, [r7, #8]
 8003f14:	61bb      	str	r3, [r7, #24]
 8003f16:	e003      	b.n	8003f20 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003f18:	68bb      	ldr	r3, [r7, #8]
 8003f1a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	2200      	movs	r2, #0
 8003f24:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003f28:	e02c      	b.n	8003f84 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	9300      	str	r3, [sp, #0]
 8003f2e:	697b      	ldr	r3, [r7, #20]
 8003f30:	2200      	movs	r2, #0
 8003f32:	2180      	movs	r1, #128	; 0x80
 8003f34:	68f8      	ldr	r0, [r7, #12]
 8003f36:	f000 fb8e 	bl	8004656 <UART_WaitOnFlagUntilTimeout>
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d001      	beq.n	8003f44 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003f40:	2303      	movs	r3, #3
 8003f42:	e038      	b.n	8003fb6 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8003f44:	69fb      	ldr	r3, [r7, #28]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d10b      	bne.n	8003f62 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003f4a:	69bb      	ldr	r3, [r7, #24]
 8003f4c:	881b      	ldrh	r3, [r3, #0]
 8003f4e:	461a      	mov	r2, r3
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003f58:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003f5a:	69bb      	ldr	r3, [r7, #24]
 8003f5c:	3302      	adds	r3, #2
 8003f5e:	61bb      	str	r3, [r7, #24]
 8003f60:	e007      	b.n	8003f72 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003f62:	69fb      	ldr	r3, [r7, #28]
 8003f64:	781a      	ldrb	r2, [r3, #0]
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003f6c:	69fb      	ldr	r3, [r7, #28]
 8003f6e:	3301      	adds	r3, #1
 8003f70:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003f78:	b29b      	uxth	r3, r3
 8003f7a:	3b01      	subs	r3, #1
 8003f7c:	b29a      	uxth	r2, r3
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003f8a:	b29b      	uxth	r3, r3
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d1cc      	bne.n	8003f2a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	9300      	str	r3, [sp, #0]
 8003f94:	697b      	ldr	r3, [r7, #20]
 8003f96:	2200      	movs	r2, #0
 8003f98:	2140      	movs	r1, #64	; 0x40
 8003f9a:	68f8      	ldr	r0, [r7, #12]
 8003f9c:	f000 fb5b 	bl	8004656 <UART_WaitOnFlagUntilTimeout>
 8003fa0:	4603      	mov	r3, r0
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d001      	beq.n	8003faa <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8003fa6:	2303      	movs	r3, #3
 8003fa8:	e005      	b.n	8003fb6 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	2220      	movs	r2, #32
 8003fae:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	e000      	b.n	8003fb6 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8003fb4:	2302      	movs	r3, #2
  }
}
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	3720      	adds	r7, #32
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bd80      	pop	{r7, pc}
	...

08003fc0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b088      	sub	sp, #32
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003fc8:	2300      	movs	r3, #0
 8003fca:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	689a      	ldr	r2, [r3, #8]
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	691b      	ldr	r3, [r3, #16]
 8003fd4:	431a      	orrs	r2, r3
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	695b      	ldr	r3, [r3, #20]
 8003fda:	431a      	orrs	r2, r3
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	69db      	ldr	r3, [r3, #28]
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	681a      	ldr	r2, [r3, #0]
 8003fea:	4bb1      	ldr	r3, [pc, #708]	; (80042b0 <UART_SetConfig+0x2f0>)
 8003fec:	4013      	ands	r3, r2
 8003fee:	687a      	ldr	r2, [r7, #4]
 8003ff0:	6812      	ldr	r2, [r2, #0]
 8003ff2:	6979      	ldr	r1, [r7, #20]
 8003ff4:	430b      	orrs	r3, r1
 8003ff6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	68da      	ldr	r2, [r3, #12]
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	430a      	orrs	r2, r1
 800400c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	699b      	ldr	r3, [r3, #24]
 8004012:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6a1b      	ldr	r3, [r3, #32]
 8004018:	697a      	ldr	r2, [r7, #20]
 800401a:	4313      	orrs	r3, r2
 800401c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	689b      	ldr	r3, [r3, #8]
 8004024:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	697a      	ldr	r2, [r7, #20]
 800402e:	430a      	orrs	r2, r1
 8004030:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4a9f      	ldr	r2, [pc, #636]	; (80042b4 <UART_SetConfig+0x2f4>)
 8004038:	4293      	cmp	r3, r2
 800403a:	d121      	bne.n	8004080 <UART_SetConfig+0xc0>
 800403c:	4b9e      	ldr	r3, [pc, #632]	; (80042b8 <UART_SetConfig+0x2f8>)
 800403e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004042:	f003 0303 	and.w	r3, r3, #3
 8004046:	2b03      	cmp	r3, #3
 8004048:	d816      	bhi.n	8004078 <UART_SetConfig+0xb8>
 800404a:	a201      	add	r2, pc, #4	; (adr r2, 8004050 <UART_SetConfig+0x90>)
 800404c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004050:	08004061 	.word	0x08004061
 8004054:	0800406d 	.word	0x0800406d
 8004058:	08004067 	.word	0x08004067
 800405c:	08004073 	.word	0x08004073
 8004060:	2301      	movs	r3, #1
 8004062:	77fb      	strb	r3, [r7, #31]
 8004064:	e151      	b.n	800430a <UART_SetConfig+0x34a>
 8004066:	2302      	movs	r3, #2
 8004068:	77fb      	strb	r3, [r7, #31]
 800406a:	e14e      	b.n	800430a <UART_SetConfig+0x34a>
 800406c:	2304      	movs	r3, #4
 800406e:	77fb      	strb	r3, [r7, #31]
 8004070:	e14b      	b.n	800430a <UART_SetConfig+0x34a>
 8004072:	2308      	movs	r3, #8
 8004074:	77fb      	strb	r3, [r7, #31]
 8004076:	e148      	b.n	800430a <UART_SetConfig+0x34a>
 8004078:	2310      	movs	r3, #16
 800407a:	77fb      	strb	r3, [r7, #31]
 800407c:	bf00      	nop
 800407e:	e144      	b.n	800430a <UART_SetConfig+0x34a>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4a8d      	ldr	r2, [pc, #564]	; (80042bc <UART_SetConfig+0x2fc>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d134      	bne.n	80040f4 <UART_SetConfig+0x134>
 800408a:	4b8b      	ldr	r3, [pc, #556]	; (80042b8 <UART_SetConfig+0x2f8>)
 800408c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004090:	f003 030c 	and.w	r3, r3, #12
 8004094:	2b0c      	cmp	r3, #12
 8004096:	d829      	bhi.n	80040ec <UART_SetConfig+0x12c>
 8004098:	a201      	add	r2, pc, #4	; (adr r2, 80040a0 <UART_SetConfig+0xe0>)
 800409a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800409e:	bf00      	nop
 80040a0:	080040d5 	.word	0x080040d5
 80040a4:	080040ed 	.word	0x080040ed
 80040a8:	080040ed 	.word	0x080040ed
 80040ac:	080040ed 	.word	0x080040ed
 80040b0:	080040e1 	.word	0x080040e1
 80040b4:	080040ed 	.word	0x080040ed
 80040b8:	080040ed 	.word	0x080040ed
 80040bc:	080040ed 	.word	0x080040ed
 80040c0:	080040db 	.word	0x080040db
 80040c4:	080040ed 	.word	0x080040ed
 80040c8:	080040ed 	.word	0x080040ed
 80040cc:	080040ed 	.word	0x080040ed
 80040d0:	080040e7 	.word	0x080040e7
 80040d4:	2300      	movs	r3, #0
 80040d6:	77fb      	strb	r3, [r7, #31]
 80040d8:	e117      	b.n	800430a <UART_SetConfig+0x34a>
 80040da:	2302      	movs	r3, #2
 80040dc:	77fb      	strb	r3, [r7, #31]
 80040de:	e114      	b.n	800430a <UART_SetConfig+0x34a>
 80040e0:	2304      	movs	r3, #4
 80040e2:	77fb      	strb	r3, [r7, #31]
 80040e4:	e111      	b.n	800430a <UART_SetConfig+0x34a>
 80040e6:	2308      	movs	r3, #8
 80040e8:	77fb      	strb	r3, [r7, #31]
 80040ea:	e10e      	b.n	800430a <UART_SetConfig+0x34a>
 80040ec:	2310      	movs	r3, #16
 80040ee:	77fb      	strb	r3, [r7, #31]
 80040f0:	bf00      	nop
 80040f2:	e10a      	b.n	800430a <UART_SetConfig+0x34a>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4a71      	ldr	r2, [pc, #452]	; (80042c0 <UART_SetConfig+0x300>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d120      	bne.n	8004140 <UART_SetConfig+0x180>
 80040fe:	4b6e      	ldr	r3, [pc, #440]	; (80042b8 <UART_SetConfig+0x2f8>)
 8004100:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004104:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004108:	2b10      	cmp	r3, #16
 800410a:	d00f      	beq.n	800412c <UART_SetConfig+0x16c>
 800410c:	2b10      	cmp	r3, #16
 800410e:	d802      	bhi.n	8004116 <UART_SetConfig+0x156>
 8004110:	2b00      	cmp	r3, #0
 8004112:	d005      	beq.n	8004120 <UART_SetConfig+0x160>
 8004114:	e010      	b.n	8004138 <UART_SetConfig+0x178>
 8004116:	2b20      	cmp	r3, #32
 8004118:	d005      	beq.n	8004126 <UART_SetConfig+0x166>
 800411a:	2b30      	cmp	r3, #48	; 0x30
 800411c:	d009      	beq.n	8004132 <UART_SetConfig+0x172>
 800411e:	e00b      	b.n	8004138 <UART_SetConfig+0x178>
 8004120:	2300      	movs	r3, #0
 8004122:	77fb      	strb	r3, [r7, #31]
 8004124:	e0f1      	b.n	800430a <UART_SetConfig+0x34a>
 8004126:	2302      	movs	r3, #2
 8004128:	77fb      	strb	r3, [r7, #31]
 800412a:	e0ee      	b.n	800430a <UART_SetConfig+0x34a>
 800412c:	2304      	movs	r3, #4
 800412e:	77fb      	strb	r3, [r7, #31]
 8004130:	e0eb      	b.n	800430a <UART_SetConfig+0x34a>
 8004132:	2308      	movs	r3, #8
 8004134:	77fb      	strb	r3, [r7, #31]
 8004136:	e0e8      	b.n	800430a <UART_SetConfig+0x34a>
 8004138:	2310      	movs	r3, #16
 800413a:	77fb      	strb	r3, [r7, #31]
 800413c:	bf00      	nop
 800413e:	e0e4      	b.n	800430a <UART_SetConfig+0x34a>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4a5f      	ldr	r2, [pc, #380]	; (80042c4 <UART_SetConfig+0x304>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d120      	bne.n	800418c <UART_SetConfig+0x1cc>
 800414a:	4b5b      	ldr	r3, [pc, #364]	; (80042b8 <UART_SetConfig+0x2f8>)
 800414c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004150:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004154:	2b40      	cmp	r3, #64	; 0x40
 8004156:	d00f      	beq.n	8004178 <UART_SetConfig+0x1b8>
 8004158:	2b40      	cmp	r3, #64	; 0x40
 800415a:	d802      	bhi.n	8004162 <UART_SetConfig+0x1a2>
 800415c:	2b00      	cmp	r3, #0
 800415e:	d005      	beq.n	800416c <UART_SetConfig+0x1ac>
 8004160:	e010      	b.n	8004184 <UART_SetConfig+0x1c4>
 8004162:	2b80      	cmp	r3, #128	; 0x80
 8004164:	d005      	beq.n	8004172 <UART_SetConfig+0x1b2>
 8004166:	2bc0      	cmp	r3, #192	; 0xc0
 8004168:	d009      	beq.n	800417e <UART_SetConfig+0x1be>
 800416a:	e00b      	b.n	8004184 <UART_SetConfig+0x1c4>
 800416c:	2300      	movs	r3, #0
 800416e:	77fb      	strb	r3, [r7, #31]
 8004170:	e0cb      	b.n	800430a <UART_SetConfig+0x34a>
 8004172:	2302      	movs	r3, #2
 8004174:	77fb      	strb	r3, [r7, #31]
 8004176:	e0c8      	b.n	800430a <UART_SetConfig+0x34a>
 8004178:	2304      	movs	r3, #4
 800417a:	77fb      	strb	r3, [r7, #31]
 800417c:	e0c5      	b.n	800430a <UART_SetConfig+0x34a>
 800417e:	2308      	movs	r3, #8
 8004180:	77fb      	strb	r3, [r7, #31]
 8004182:	e0c2      	b.n	800430a <UART_SetConfig+0x34a>
 8004184:	2310      	movs	r3, #16
 8004186:	77fb      	strb	r3, [r7, #31]
 8004188:	bf00      	nop
 800418a:	e0be      	b.n	800430a <UART_SetConfig+0x34a>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a4d      	ldr	r2, [pc, #308]	; (80042c8 <UART_SetConfig+0x308>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d124      	bne.n	80041e0 <UART_SetConfig+0x220>
 8004196:	4b48      	ldr	r3, [pc, #288]	; (80042b8 <UART_SetConfig+0x2f8>)
 8004198:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800419c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041a4:	d012      	beq.n	80041cc <UART_SetConfig+0x20c>
 80041a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041aa:	d802      	bhi.n	80041b2 <UART_SetConfig+0x1f2>
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d007      	beq.n	80041c0 <UART_SetConfig+0x200>
 80041b0:	e012      	b.n	80041d8 <UART_SetConfig+0x218>
 80041b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041b6:	d006      	beq.n	80041c6 <UART_SetConfig+0x206>
 80041b8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80041bc:	d009      	beq.n	80041d2 <UART_SetConfig+0x212>
 80041be:	e00b      	b.n	80041d8 <UART_SetConfig+0x218>
 80041c0:	2300      	movs	r3, #0
 80041c2:	77fb      	strb	r3, [r7, #31]
 80041c4:	e0a1      	b.n	800430a <UART_SetConfig+0x34a>
 80041c6:	2302      	movs	r3, #2
 80041c8:	77fb      	strb	r3, [r7, #31]
 80041ca:	e09e      	b.n	800430a <UART_SetConfig+0x34a>
 80041cc:	2304      	movs	r3, #4
 80041ce:	77fb      	strb	r3, [r7, #31]
 80041d0:	e09b      	b.n	800430a <UART_SetConfig+0x34a>
 80041d2:	2308      	movs	r3, #8
 80041d4:	77fb      	strb	r3, [r7, #31]
 80041d6:	e098      	b.n	800430a <UART_SetConfig+0x34a>
 80041d8:	2310      	movs	r3, #16
 80041da:	77fb      	strb	r3, [r7, #31]
 80041dc:	bf00      	nop
 80041de:	e094      	b.n	800430a <UART_SetConfig+0x34a>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a39      	ldr	r2, [pc, #228]	; (80042cc <UART_SetConfig+0x30c>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d124      	bne.n	8004234 <UART_SetConfig+0x274>
 80041ea:	4b33      	ldr	r3, [pc, #204]	; (80042b8 <UART_SetConfig+0x2f8>)
 80041ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041f0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80041f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041f8:	d012      	beq.n	8004220 <UART_SetConfig+0x260>
 80041fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041fe:	d802      	bhi.n	8004206 <UART_SetConfig+0x246>
 8004200:	2b00      	cmp	r3, #0
 8004202:	d007      	beq.n	8004214 <UART_SetConfig+0x254>
 8004204:	e012      	b.n	800422c <UART_SetConfig+0x26c>
 8004206:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800420a:	d006      	beq.n	800421a <UART_SetConfig+0x25a>
 800420c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004210:	d009      	beq.n	8004226 <UART_SetConfig+0x266>
 8004212:	e00b      	b.n	800422c <UART_SetConfig+0x26c>
 8004214:	2301      	movs	r3, #1
 8004216:	77fb      	strb	r3, [r7, #31]
 8004218:	e077      	b.n	800430a <UART_SetConfig+0x34a>
 800421a:	2302      	movs	r3, #2
 800421c:	77fb      	strb	r3, [r7, #31]
 800421e:	e074      	b.n	800430a <UART_SetConfig+0x34a>
 8004220:	2304      	movs	r3, #4
 8004222:	77fb      	strb	r3, [r7, #31]
 8004224:	e071      	b.n	800430a <UART_SetConfig+0x34a>
 8004226:	2308      	movs	r3, #8
 8004228:	77fb      	strb	r3, [r7, #31]
 800422a:	e06e      	b.n	800430a <UART_SetConfig+0x34a>
 800422c:	2310      	movs	r3, #16
 800422e:	77fb      	strb	r3, [r7, #31]
 8004230:	bf00      	nop
 8004232:	e06a      	b.n	800430a <UART_SetConfig+0x34a>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4a25      	ldr	r2, [pc, #148]	; (80042d0 <UART_SetConfig+0x310>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d124      	bne.n	8004288 <UART_SetConfig+0x2c8>
 800423e:	4b1e      	ldr	r3, [pc, #120]	; (80042b8 <UART_SetConfig+0x2f8>)
 8004240:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004244:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004248:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800424c:	d012      	beq.n	8004274 <UART_SetConfig+0x2b4>
 800424e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004252:	d802      	bhi.n	800425a <UART_SetConfig+0x29a>
 8004254:	2b00      	cmp	r3, #0
 8004256:	d007      	beq.n	8004268 <UART_SetConfig+0x2a8>
 8004258:	e012      	b.n	8004280 <UART_SetConfig+0x2c0>
 800425a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800425e:	d006      	beq.n	800426e <UART_SetConfig+0x2ae>
 8004260:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004264:	d009      	beq.n	800427a <UART_SetConfig+0x2ba>
 8004266:	e00b      	b.n	8004280 <UART_SetConfig+0x2c0>
 8004268:	2300      	movs	r3, #0
 800426a:	77fb      	strb	r3, [r7, #31]
 800426c:	e04d      	b.n	800430a <UART_SetConfig+0x34a>
 800426e:	2302      	movs	r3, #2
 8004270:	77fb      	strb	r3, [r7, #31]
 8004272:	e04a      	b.n	800430a <UART_SetConfig+0x34a>
 8004274:	2304      	movs	r3, #4
 8004276:	77fb      	strb	r3, [r7, #31]
 8004278:	e047      	b.n	800430a <UART_SetConfig+0x34a>
 800427a:	2308      	movs	r3, #8
 800427c:	77fb      	strb	r3, [r7, #31]
 800427e:	e044      	b.n	800430a <UART_SetConfig+0x34a>
 8004280:	2310      	movs	r3, #16
 8004282:	77fb      	strb	r3, [r7, #31]
 8004284:	bf00      	nop
 8004286:	e040      	b.n	800430a <UART_SetConfig+0x34a>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4a11      	ldr	r2, [pc, #68]	; (80042d4 <UART_SetConfig+0x314>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d139      	bne.n	8004306 <UART_SetConfig+0x346>
 8004292:	4b09      	ldr	r3, [pc, #36]	; (80042b8 <UART_SetConfig+0x2f8>)
 8004294:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004298:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800429c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80042a0:	d027      	beq.n	80042f2 <UART_SetConfig+0x332>
 80042a2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80042a6:	d817      	bhi.n	80042d8 <UART_SetConfig+0x318>
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d01c      	beq.n	80042e6 <UART_SetConfig+0x326>
 80042ac:	e027      	b.n	80042fe <UART_SetConfig+0x33e>
 80042ae:	bf00      	nop
 80042b0:	efff69f3 	.word	0xefff69f3
 80042b4:	40011000 	.word	0x40011000
 80042b8:	40023800 	.word	0x40023800
 80042bc:	40004400 	.word	0x40004400
 80042c0:	40004800 	.word	0x40004800
 80042c4:	40004c00 	.word	0x40004c00
 80042c8:	40005000 	.word	0x40005000
 80042cc:	40011400 	.word	0x40011400
 80042d0:	40007800 	.word	0x40007800
 80042d4:	40007c00 	.word	0x40007c00
 80042d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042dc:	d006      	beq.n	80042ec <UART_SetConfig+0x32c>
 80042de:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80042e2:	d009      	beq.n	80042f8 <UART_SetConfig+0x338>
 80042e4:	e00b      	b.n	80042fe <UART_SetConfig+0x33e>
 80042e6:	2300      	movs	r3, #0
 80042e8:	77fb      	strb	r3, [r7, #31]
 80042ea:	e00e      	b.n	800430a <UART_SetConfig+0x34a>
 80042ec:	2302      	movs	r3, #2
 80042ee:	77fb      	strb	r3, [r7, #31]
 80042f0:	e00b      	b.n	800430a <UART_SetConfig+0x34a>
 80042f2:	2304      	movs	r3, #4
 80042f4:	77fb      	strb	r3, [r7, #31]
 80042f6:	e008      	b.n	800430a <UART_SetConfig+0x34a>
 80042f8:	2308      	movs	r3, #8
 80042fa:	77fb      	strb	r3, [r7, #31]
 80042fc:	e005      	b.n	800430a <UART_SetConfig+0x34a>
 80042fe:	2310      	movs	r3, #16
 8004300:	77fb      	strb	r3, [r7, #31]
 8004302:	bf00      	nop
 8004304:	e001      	b.n	800430a <UART_SetConfig+0x34a>
 8004306:	2310      	movs	r3, #16
 8004308:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	69db      	ldr	r3, [r3, #28]
 800430e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004312:	d15b      	bne.n	80043cc <UART_SetConfig+0x40c>
  {
    switch (clocksource)
 8004314:	7ffb      	ldrb	r3, [r7, #31]
 8004316:	2b08      	cmp	r3, #8
 8004318:	d827      	bhi.n	800436a <UART_SetConfig+0x3aa>
 800431a:	a201      	add	r2, pc, #4	; (adr r2, 8004320 <UART_SetConfig+0x360>)
 800431c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004320:	08004345 	.word	0x08004345
 8004324:	0800434d 	.word	0x0800434d
 8004328:	08004355 	.word	0x08004355
 800432c:	0800436b 	.word	0x0800436b
 8004330:	0800435b 	.word	0x0800435b
 8004334:	0800436b 	.word	0x0800436b
 8004338:	0800436b 	.word	0x0800436b
 800433c:	0800436b 	.word	0x0800436b
 8004340:	08004363 	.word	0x08004363
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004344:	f7fe fdf8 	bl	8002f38 <HAL_RCC_GetPCLK1Freq>
 8004348:	61b8      	str	r0, [r7, #24]
        break;
 800434a:	e013      	b.n	8004374 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800434c:	f7fe fe08 	bl	8002f60 <HAL_RCC_GetPCLK2Freq>
 8004350:	61b8      	str	r0, [r7, #24]
        break;
 8004352:	e00f      	b.n	8004374 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004354:	4b49      	ldr	r3, [pc, #292]	; (800447c <UART_SetConfig+0x4bc>)
 8004356:	61bb      	str	r3, [r7, #24]
        break;
 8004358:	e00c      	b.n	8004374 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800435a:	f7fe fd09 	bl	8002d70 <HAL_RCC_GetSysClockFreq>
 800435e:	61b8      	str	r0, [r7, #24]
        break;
 8004360:	e008      	b.n	8004374 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004362:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004366:	61bb      	str	r3, [r7, #24]
        break;
 8004368:	e004      	b.n	8004374 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800436a:	2300      	movs	r3, #0
 800436c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800436e:	2301      	movs	r3, #1
 8004370:	77bb      	strb	r3, [r7, #30]
        break;
 8004372:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004374:	69bb      	ldr	r3, [r7, #24]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d074      	beq.n	8004464 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800437a:	69bb      	ldr	r3, [r7, #24]
 800437c:	005a      	lsls	r2, r3, #1
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	085b      	lsrs	r3, r3, #1
 8004384:	441a      	add	r2, r3
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	685b      	ldr	r3, [r3, #4]
 800438a:	fbb2 f3f3 	udiv	r3, r2, r3
 800438e:	b29b      	uxth	r3, r3
 8004390:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004392:	693b      	ldr	r3, [r7, #16]
 8004394:	2b0f      	cmp	r3, #15
 8004396:	d916      	bls.n	80043c6 <UART_SetConfig+0x406>
 8004398:	693b      	ldr	r3, [r7, #16]
 800439a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800439e:	d212      	bcs.n	80043c6 <UART_SetConfig+0x406>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80043a0:	693b      	ldr	r3, [r7, #16]
 80043a2:	b29b      	uxth	r3, r3
 80043a4:	f023 030f 	bic.w	r3, r3, #15
 80043a8:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80043aa:	693b      	ldr	r3, [r7, #16]
 80043ac:	085b      	lsrs	r3, r3, #1
 80043ae:	b29b      	uxth	r3, r3
 80043b0:	f003 0307 	and.w	r3, r3, #7
 80043b4:	b29a      	uxth	r2, r3
 80043b6:	89fb      	ldrh	r3, [r7, #14]
 80043b8:	4313      	orrs	r3, r2
 80043ba:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	89fa      	ldrh	r2, [r7, #14]
 80043c2:	60da      	str	r2, [r3, #12]
 80043c4:	e04e      	b.n	8004464 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80043c6:	2301      	movs	r3, #1
 80043c8:	77bb      	strb	r3, [r7, #30]
 80043ca:	e04b      	b.n	8004464 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80043cc:	7ffb      	ldrb	r3, [r7, #31]
 80043ce:	2b08      	cmp	r3, #8
 80043d0:	d827      	bhi.n	8004422 <UART_SetConfig+0x462>
 80043d2:	a201      	add	r2, pc, #4	; (adr r2, 80043d8 <UART_SetConfig+0x418>)
 80043d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043d8:	080043fd 	.word	0x080043fd
 80043dc:	08004405 	.word	0x08004405
 80043e0:	0800440d 	.word	0x0800440d
 80043e4:	08004423 	.word	0x08004423
 80043e8:	08004413 	.word	0x08004413
 80043ec:	08004423 	.word	0x08004423
 80043f0:	08004423 	.word	0x08004423
 80043f4:	08004423 	.word	0x08004423
 80043f8:	0800441b 	.word	0x0800441b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80043fc:	f7fe fd9c 	bl	8002f38 <HAL_RCC_GetPCLK1Freq>
 8004400:	61b8      	str	r0, [r7, #24]
        break;
 8004402:	e013      	b.n	800442c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004404:	f7fe fdac 	bl	8002f60 <HAL_RCC_GetPCLK2Freq>
 8004408:	61b8      	str	r0, [r7, #24]
        break;
 800440a:	e00f      	b.n	800442c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800440c:	4b1b      	ldr	r3, [pc, #108]	; (800447c <UART_SetConfig+0x4bc>)
 800440e:	61bb      	str	r3, [r7, #24]
        break;
 8004410:	e00c      	b.n	800442c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004412:	f7fe fcad 	bl	8002d70 <HAL_RCC_GetSysClockFreq>
 8004416:	61b8      	str	r0, [r7, #24]
        break;
 8004418:	e008      	b.n	800442c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800441a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800441e:	61bb      	str	r3, [r7, #24]
        break;
 8004420:	e004      	b.n	800442c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8004422:	2300      	movs	r3, #0
 8004424:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004426:	2301      	movs	r3, #1
 8004428:	77bb      	strb	r3, [r7, #30]
        break;
 800442a:	bf00      	nop
    }

    if (pclk != 0U)
 800442c:	69bb      	ldr	r3, [r7, #24]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d018      	beq.n	8004464 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	085a      	lsrs	r2, r3, #1
 8004438:	69bb      	ldr	r3, [r7, #24]
 800443a:	441a      	add	r2, r3
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	fbb2 f3f3 	udiv	r3, r2, r3
 8004444:	b29b      	uxth	r3, r3
 8004446:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004448:	693b      	ldr	r3, [r7, #16]
 800444a:	2b0f      	cmp	r3, #15
 800444c:	d908      	bls.n	8004460 <UART_SetConfig+0x4a0>
 800444e:	693b      	ldr	r3, [r7, #16]
 8004450:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004454:	d204      	bcs.n	8004460 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = usartdiv;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	693a      	ldr	r2, [r7, #16]
 800445c:	60da      	str	r2, [r3, #12]
 800445e:	e001      	b.n	8004464 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004460:	2301      	movs	r3, #1
 8004462:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2200      	movs	r2, #0
 8004468:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2200      	movs	r2, #0
 800446e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004470:	7fbb      	ldrb	r3, [r7, #30]
}
 8004472:	4618      	mov	r0, r3
 8004474:	3720      	adds	r7, #32
 8004476:	46bd      	mov	sp, r7
 8004478:	bd80      	pop	{r7, pc}
 800447a:	bf00      	nop
 800447c:	00f42400 	.word	0x00f42400

08004480 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004480:	b480      	push	{r7}
 8004482:	b083      	sub	sp, #12
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800448c:	f003 0301 	and.w	r3, r3, #1
 8004490:	2b00      	cmp	r3, #0
 8004492:	d00a      	beq.n	80044aa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	685b      	ldr	r3, [r3, #4]
 800449a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	430a      	orrs	r2, r1
 80044a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ae:	f003 0302 	and.w	r3, r3, #2
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d00a      	beq.n	80044cc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	685b      	ldr	r3, [r3, #4]
 80044bc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	430a      	orrs	r2, r1
 80044ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044d0:	f003 0304 	and.w	r3, r3, #4
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d00a      	beq.n	80044ee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	430a      	orrs	r2, r1
 80044ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044f2:	f003 0308 	and.w	r3, r3, #8
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d00a      	beq.n	8004510 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	430a      	orrs	r2, r1
 800450e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004514:	f003 0310 	and.w	r3, r3, #16
 8004518:	2b00      	cmp	r3, #0
 800451a:	d00a      	beq.n	8004532 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	689b      	ldr	r3, [r3, #8]
 8004522:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	430a      	orrs	r2, r1
 8004530:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004536:	f003 0320 	and.w	r3, r3, #32
 800453a:	2b00      	cmp	r3, #0
 800453c:	d00a      	beq.n	8004554 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	689b      	ldr	r3, [r3, #8]
 8004544:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	430a      	orrs	r2, r1
 8004552:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004558:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800455c:	2b00      	cmp	r3, #0
 800455e:	d01a      	beq.n	8004596 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	430a      	orrs	r2, r1
 8004574:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800457a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800457e:	d10a      	bne.n	8004596 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	685b      	ldr	r3, [r3, #4]
 8004586:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	430a      	orrs	r2, r1
 8004594:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800459a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d00a      	beq.n	80045b8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	685b      	ldr	r3, [r3, #4]
 80045a8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	430a      	orrs	r2, r1
 80045b6:	605a      	str	r2, [r3, #4]
  }
}
 80045b8:	bf00      	nop
 80045ba:	370c      	adds	r7, #12
 80045bc:	46bd      	mov	sp, r7
 80045be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c2:	4770      	bx	lr

080045c4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b086      	sub	sp, #24
 80045c8:	af02      	add	r7, sp, #8
 80045ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2200      	movs	r2, #0
 80045d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80045d4:	f7fc fb6e 	bl	8000cb4 <HAL_GetTick>
 80045d8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f003 0308 	and.w	r3, r3, #8
 80045e4:	2b08      	cmp	r3, #8
 80045e6:	d10e      	bne.n	8004606 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80045e8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80045ec:	9300      	str	r3, [sp, #0]
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	2200      	movs	r2, #0
 80045f2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80045f6:	6878      	ldr	r0, [r7, #4]
 80045f8:	f000 f82d 	bl	8004656 <UART_WaitOnFlagUntilTimeout>
 80045fc:	4603      	mov	r3, r0
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d001      	beq.n	8004606 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004602:	2303      	movs	r3, #3
 8004604:	e023      	b.n	800464e <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f003 0304 	and.w	r3, r3, #4
 8004610:	2b04      	cmp	r3, #4
 8004612:	d10e      	bne.n	8004632 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004614:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004618:	9300      	str	r3, [sp, #0]
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	2200      	movs	r2, #0
 800461e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004622:	6878      	ldr	r0, [r7, #4]
 8004624:	f000 f817 	bl	8004656 <UART_WaitOnFlagUntilTimeout>
 8004628:	4603      	mov	r3, r0
 800462a:	2b00      	cmp	r3, #0
 800462c:	d001      	beq.n	8004632 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800462e:	2303      	movs	r3, #3
 8004630:	e00d      	b.n	800464e <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2220      	movs	r2, #32
 8004636:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2220      	movs	r2, #32
 800463c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2200      	movs	r2, #0
 8004642:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2200      	movs	r2, #0
 8004648:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800464c:	2300      	movs	r3, #0
}
 800464e:	4618      	mov	r0, r3
 8004650:	3710      	adds	r7, #16
 8004652:	46bd      	mov	sp, r7
 8004654:	bd80      	pop	{r7, pc}

08004656 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004656:	b580      	push	{r7, lr}
 8004658:	b084      	sub	sp, #16
 800465a:	af00      	add	r7, sp, #0
 800465c:	60f8      	str	r0, [r7, #12]
 800465e:	60b9      	str	r1, [r7, #8]
 8004660:	603b      	str	r3, [r7, #0]
 8004662:	4613      	mov	r3, r2
 8004664:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004666:	e05e      	b.n	8004726 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004668:	69bb      	ldr	r3, [r7, #24]
 800466a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800466e:	d05a      	beq.n	8004726 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004670:	f7fc fb20 	bl	8000cb4 <HAL_GetTick>
 8004674:	4602      	mov	r2, r0
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	1ad3      	subs	r3, r2, r3
 800467a:	69ba      	ldr	r2, [r7, #24]
 800467c:	429a      	cmp	r2, r3
 800467e:	d302      	bcc.n	8004686 <UART_WaitOnFlagUntilTimeout+0x30>
 8004680:	69bb      	ldr	r3, [r7, #24]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d11b      	bne.n	80046be <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	681a      	ldr	r2, [r3, #0]
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004694:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	689a      	ldr	r2, [r3, #8]
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f022 0201 	bic.w	r2, r2, #1
 80046a4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	2220      	movs	r2, #32
 80046aa:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	2220      	movs	r2, #32
 80046b0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	2200      	movs	r2, #0
 80046b6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80046ba:	2303      	movs	r3, #3
 80046bc:	e043      	b.n	8004746 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f003 0304 	and.w	r3, r3, #4
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d02c      	beq.n	8004726 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	69db      	ldr	r3, [r3, #28]
 80046d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80046d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80046da:	d124      	bne.n	8004726 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80046e4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	681a      	ldr	r2, [r3, #0]
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80046f4:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	689a      	ldr	r2, [r3, #8]
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f022 0201 	bic.w	r2, r2, #1
 8004704:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	2220      	movs	r2, #32
 800470a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	2220      	movs	r2, #32
 8004710:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	2220      	movs	r2, #32
 8004716:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	2200      	movs	r2, #0
 800471e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004722:	2303      	movs	r3, #3
 8004724:	e00f      	b.n	8004746 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	69da      	ldr	r2, [r3, #28]
 800472c:	68bb      	ldr	r3, [r7, #8]
 800472e:	4013      	ands	r3, r2
 8004730:	68ba      	ldr	r2, [r7, #8]
 8004732:	429a      	cmp	r2, r3
 8004734:	bf0c      	ite	eq
 8004736:	2301      	moveq	r3, #1
 8004738:	2300      	movne	r3, #0
 800473a:	b2db      	uxtb	r3, r3
 800473c:	461a      	mov	r2, r3
 800473e:	79fb      	ldrb	r3, [r7, #7]
 8004740:	429a      	cmp	r2, r3
 8004742:	d091      	beq.n	8004668 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004744:	2300      	movs	r3, #0
}
 8004746:	4618      	mov	r0, r3
 8004748:	3710      	adds	r7, #16
 800474a:	46bd      	mov	sp, r7
 800474c:	bd80      	pop	{r7, pc}
	...

08004750 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8004750:	b5b0      	push	{r4, r5, r7, lr}
 8004752:	b08e      	sub	sp, #56	; 0x38
 8004754:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 169; //169; 192.168.0.186
 8004756:	4ba0      	ldr	r3, [pc, #640]	; (80049d8 <MX_LWIP_Init+0x288>)
 8004758:	22a9      	movs	r2, #169	; 0xa9
 800475a:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 254; //254;
 800475c:	4b9e      	ldr	r3, [pc, #632]	; (80049d8 <MX_LWIP_Init+0x288>)
 800475e:	22fe      	movs	r2, #254	; 0xfe
 8004760:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 181; //81;
 8004762:	4b9d      	ldr	r3, [pc, #628]	; (80049d8 <MX_LWIP_Init+0x288>)
 8004764:	22b5      	movs	r2, #181	; 0xb5
 8004766:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 206;
 8004768:	4b9b      	ldr	r3, [pc, #620]	; (80049d8 <MX_LWIP_Init+0x288>)
 800476a:	22ce      	movs	r2, #206	; 0xce
 800476c:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800476e:	4b9b      	ldr	r3, [pc, #620]	; (80049dc <MX_LWIP_Init+0x28c>)
 8004770:	22ff      	movs	r2, #255	; 0xff
 8004772:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8004774:	4b99      	ldr	r3, [pc, #612]	; (80049dc <MX_LWIP_Init+0x28c>)
 8004776:	22ff      	movs	r2, #255	; 0xff
 8004778:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 800477a:	4b98      	ldr	r3, [pc, #608]	; (80049dc <MX_LWIP_Init+0x28c>)
 800477c:	22ff      	movs	r2, #255	; 0xff
 800477e:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8004780:	4b96      	ldr	r3, [pc, #600]	; (80049dc <MX_LWIP_Init+0x28c>)
 8004782:	2200      	movs	r2, #0
 8004784:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 169; // 169;
 8004786:	4b96      	ldr	r3, [pc, #600]	; (80049e0 <MX_LWIP_Init+0x290>)
 8004788:	22a9      	movs	r2, #169	; 0xa9
 800478a:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 254; // 254;
 800478c:	4b94      	ldr	r3, [pc, #592]	; (80049e0 <MX_LWIP_Init+0x290>)
 800478e:	22fe      	movs	r2, #254	; 0xfe
 8004790:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 181; //81;
 8004792:	4b93      	ldr	r3, [pc, #588]	; (80049e0 <MX_LWIP_Init+0x290>)
 8004794:	22b5      	movs	r2, #181	; 0xb5
 8004796:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8004798:	4b91      	ldr	r3, [pc, #580]	; (80049e0 <MX_LWIP_Init+0x290>)
 800479a:	2201      	movs	r2, #1
 800479c:	70da      	strb	r2, [r3, #3]

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 800479e:	2100      	movs	r1, #0
 80047a0:	2000      	movs	r0, #0
 80047a2:	f005 f9d9 	bl	8009b58 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 80047a6:	4b8c      	ldr	r3, [pc, #560]	; (80049d8 <MX_LWIP_Init+0x288>)
 80047a8:	781b      	ldrb	r3, [r3, #0]
 80047aa:	061a      	lsls	r2, r3, #24
 80047ac:	4b8a      	ldr	r3, [pc, #552]	; (80049d8 <MX_LWIP_Init+0x288>)
 80047ae:	785b      	ldrb	r3, [r3, #1]
 80047b0:	041b      	lsls	r3, r3, #16
 80047b2:	431a      	orrs	r2, r3
 80047b4:	4b88      	ldr	r3, [pc, #544]	; (80049d8 <MX_LWIP_Init+0x288>)
 80047b6:	789b      	ldrb	r3, [r3, #2]
 80047b8:	021b      	lsls	r3, r3, #8
 80047ba:	4313      	orrs	r3, r2
 80047bc:	4a86      	ldr	r2, [pc, #536]	; (80049d8 <MX_LWIP_Init+0x288>)
 80047be:	78d2      	ldrb	r2, [r2, #3]
 80047c0:	4313      	orrs	r3, r2
 80047c2:	061a      	lsls	r2, r3, #24
 80047c4:	4b84      	ldr	r3, [pc, #528]	; (80049d8 <MX_LWIP_Init+0x288>)
 80047c6:	781b      	ldrb	r3, [r3, #0]
 80047c8:	0619      	lsls	r1, r3, #24
 80047ca:	4b83      	ldr	r3, [pc, #524]	; (80049d8 <MX_LWIP_Init+0x288>)
 80047cc:	785b      	ldrb	r3, [r3, #1]
 80047ce:	041b      	lsls	r3, r3, #16
 80047d0:	4319      	orrs	r1, r3
 80047d2:	4b81      	ldr	r3, [pc, #516]	; (80049d8 <MX_LWIP_Init+0x288>)
 80047d4:	789b      	ldrb	r3, [r3, #2]
 80047d6:	021b      	lsls	r3, r3, #8
 80047d8:	430b      	orrs	r3, r1
 80047da:	497f      	ldr	r1, [pc, #508]	; (80049d8 <MX_LWIP_Init+0x288>)
 80047dc:	78c9      	ldrb	r1, [r1, #3]
 80047de:	430b      	orrs	r3, r1
 80047e0:	021b      	lsls	r3, r3, #8
 80047e2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80047e6:	431a      	orrs	r2, r3
 80047e8:	4b7b      	ldr	r3, [pc, #492]	; (80049d8 <MX_LWIP_Init+0x288>)
 80047ea:	781b      	ldrb	r3, [r3, #0]
 80047ec:	0619      	lsls	r1, r3, #24
 80047ee:	4b7a      	ldr	r3, [pc, #488]	; (80049d8 <MX_LWIP_Init+0x288>)
 80047f0:	785b      	ldrb	r3, [r3, #1]
 80047f2:	041b      	lsls	r3, r3, #16
 80047f4:	4319      	orrs	r1, r3
 80047f6:	4b78      	ldr	r3, [pc, #480]	; (80049d8 <MX_LWIP_Init+0x288>)
 80047f8:	789b      	ldrb	r3, [r3, #2]
 80047fa:	021b      	lsls	r3, r3, #8
 80047fc:	430b      	orrs	r3, r1
 80047fe:	4976      	ldr	r1, [pc, #472]	; (80049d8 <MX_LWIP_Init+0x288>)
 8004800:	78c9      	ldrb	r1, [r1, #3]
 8004802:	430b      	orrs	r3, r1
 8004804:	0a1b      	lsrs	r3, r3, #8
 8004806:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800480a:	431a      	orrs	r2, r3
 800480c:	4b72      	ldr	r3, [pc, #456]	; (80049d8 <MX_LWIP_Init+0x288>)
 800480e:	781b      	ldrb	r3, [r3, #0]
 8004810:	0619      	lsls	r1, r3, #24
 8004812:	4b71      	ldr	r3, [pc, #452]	; (80049d8 <MX_LWIP_Init+0x288>)
 8004814:	785b      	ldrb	r3, [r3, #1]
 8004816:	041b      	lsls	r3, r3, #16
 8004818:	4319      	orrs	r1, r3
 800481a:	4b6f      	ldr	r3, [pc, #444]	; (80049d8 <MX_LWIP_Init+0x288>)
 800481c:	789b      	ldrb	r3, [r3, #2]
 800481e:	021b      	lsls	r3, r3, #8
 8004820:	430b      	orrs	r3, r1
 8004822:	496d      	ldr	r1, [pc, #436]	; (80049d8 <MX_LWIP_Init+0x288>)
 8004824:	78c9      	ldrb	r1, [r1, #3]
 8004826:	430b      	orrs	r3, r1
 8004828:	0e1b      	lsrs	r3, r3, #24
 800482a:	4313      	orrs	r3, r2
 800482c:	4a6d      	ldr	r2, [pc, #436]	; (80049e4 <MX_LWIP_Init+0x294>)
 800482e:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8004830:	4b6a      	ldr	r3, [pc, #424]	; (80049dc <MX_LWIP_Init+0x28c>)
 8004832:	781b      	ldrb	r3, [r3, #0]
 8004834:	061a      	lsls	r2, r3, #24
 8004836:	4b69      	ldr	r3, [pc, #420]	; (80049dc <MX_LWIP_Init+0x28c>)
 8004838:	785b      	ldrb	r3, [r3, #1]
 800483a:	041b      	lsls	r3, r3, #16
 800483c:	431a      	orrs	r2, r3
 800483e:	4b67      	ldr	r3, [pc, #412]	; (80049dc <MX_LWIP_Init+0x28c>)
 8004840:	789b      	ldrb	r3, [r3, #2]
 8004842:	021b      	lsls	r3, r3, #8
 8004844:	4313      	orrs	r3, r2
 8004846:	4a65      	ldr	r2, [pc, #404]	; (80049dc <MX_LWIP_Init+0x28c>)
 8004848:	78d2      	ldrb	r2, [r2, #3]
 800484a:	4313      	orrs	r3, r2
 800484c:	061a      	lsls	r2, r3, #24
 800484e:	4b63      	ldr	r3, [pc, #396]	; (80049dc <MX_LWIP_Init+0x28c>)
 8004850:	781b      	ldrb	r3, [r3, #0]
 8004852:	0619      	lsls	r1, r3, #24
 8004854:	4b61      	ldr	r3, [pc, #388]	; (80049dc <MX_LWIP_Init+0x28c>)
 8004856:	785b      	ldrb	r3, [r3, #1]
 8004858:	041b      	lsls	r3, r3, #16
 800485a:	4319      	orrs	r1, r3
 800485c:	4b5f      	ldr	r3, [pc, #380]	; (80049dc <MX_LWIP_Init+0x28c>)
 800485e:	789b      	ldrb	r3, [r3, #2]
 8004860:	021b      	lsls	r3, r3, #8
 8004862:	430b      	orrs	r3, r1
 8004864:	495d      	ldr	r1, [pc, #372]	; (80049dc <MX_LWIP_Init+0x28c>)
 8004866:	78c9      	ldrb	r1, [r1, #3]
 8004868:	430b      	orrs	r3, r1
 800486a:	021b      	lsls	r3, r3, #8
 800486c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004870:	431a      	orrs	r2, r3
 8004872:	4b5a      	ldr	r3, [pc, #360]	; (80049dc <MX_LWIP_Init+0x28c>)
 8004874:	781b      	ldrb	r3, [r3, #0]
 8004876:	0619      	lsls	r1, r3, #24
 8004878:	4b58      	ldr	r3, [pc, #352]	; (80049dc <MX_LWIP_Init+0x28c>)
 800487a:	785b      	ldrb	r3, [r3, #1]
 800487c:	041b      	lsls	r3, r3, #16
 800487e:	4319      	orrs	r1, r3
 8004880:	4b56      	ldr	r3, [pc, #344]	; (80049dc <MX_LWIP_Init+0x28c>)
 8004882:	789b      	ldrb	r3, [r3, #2]
 8004884:	021b      	lsls	r3, r3, #8
 8004886:	430b      	orrs	r3, r1
 8004888:	4954      	ldr	r1, [pc, #336]	; (80049dc <MX_LWIP_Init+0x28c>)
 800488a:	78c9      	ldrb	r1, [r1, #3]
 800488c:	430b      	orrs	r3, r1
 800488e:	0a1b      	lsrs	r3, r3, #8
 8004890:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004894:	431a      	orrs	r2, r3
 8004896:	4b51      	ldr	r3, [pc, #324]	; (80049dc <MX_LWIP_Init+0x28c>)
 8004898:	781b      	ldrb	r3, [r3, #0]
 800489a:	0619      	lsls	r1, r3, #24
 800489c:	4b4f      	ldr	r3, [pc, #316]	; (80049dc <MX_LWIP_Init+0x28c>)
 800489e:	785b      	ldrb	r3, [r3, #1]
 80048a0:	041b      	lsls	r3, r3, #16
 80048a2:	4319      	orrs	r1, r3
 80048a4:	4b4d      	ldr	r3, [pc, #308]	; (80049dc <MX_LWIP_Init+0x28c>)
 80048a6:	789b      	ldrb	r3, [r3, #2]
 80048a8:	021b      	lsls	r3, r3, #8
 80048aa:	430b      	orrs	r3, r1
 80048ac:	494b      	ldr	r1, [pc, #300]	; (80049dc <MX_LWIP_Init+0x28c>)
 80048ae:	78c9      	ldrb	r1, [r1, #3]
 80048b0:	430b      	orrs	r3, r1
 80048b2:	0e1b      	lsrs	r3, r3, #24
 80048b4:	4313      	orrs	r3, r2
 80048b6:	4a4c      	ldr	r2, [pc, #304]	; (80049e8 <MX_LWIP_Init+0x298>)
 80048b8:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 80048ba:	4b49      	ldr	r3, [pc, #292]	; (80049e0 <MX_LWIP_Init+0x290>)
 80048bc:	781b      	ldrb	r3, [r3, #0]
 80048be:	061a      	lsls	r2, r3, #24
 80048c0:	4b47      	ldr	r3, [pc, #284]	; (80049e0 <MX_LWIP_Init+0x290>)
 80048c2:	785b      	ldrb	r3, [r3, #1]
 80048c4:	041b      	lsls	r3, r3, #16
 80048c6:	431a      	orrs	r2, r3
 80048c8:	4b45      	ldr	r3, [pc, #276]	; (80049e0 <MX_LWIP_Init+0x290>)
 80048ca:	789b      	ldrb	r3, [r3, #2]
 80048cc:	021b      	lsls	r3, r3, #8
 80048ce:	4313      	orrs	r3, r2
 80048d0:	4a43      	ldr	r2, [pc, #268]	; (80049e0 <MX_LWIP_Init+0x290>)
 80048d2:	78d2      	ldrb	r2, [r2, #3]
 80048d4:	4313      	orrs	r3, r2
 80048d6:	061a      	lsls	r2, r3, #24
 80048d8:	4b41      	ldr	r3, [pc, #260]	; (80049e0 <MX_LWIP_Init+0x290>)
 80048da:	781b      	ldrb	r3, [r3, #0]
 80048dc:	0619      	lsls	r1, r3, #24
 80048de:	4b40      	ldr	r3, [pc, #256]	; (80049e0 <MX_LWIP_Init+0x290>)
 80048e0:	785b      	ldrb	r3, [r3, #1]
 80048e2:	041b      	lsls	r3, r3, #16
 80048e4:	4319      	orrs	r1, r3
 80048e6:	4b3e      	ldr	r3, [pc, #248]	; (80049e0 <MX_LWIP_Init+0x290>)
 80048e8:	789b      	ldrb	r3, [r3, #2]
 80048ea:	021b      	lsls	r3, r3, #8
 80048ec:	430b      	orrs	r3, r1
 80048ee:	493c      	ldr	r1, [pc, #240]	; (80049e0 <MX_LWIP_Init+0x290>)
 80048f0:	78c9      	ldrb	r1, [r1, #3]
 80048f2:	430b      	orrs	r3, r1
 80048f4:	021b      	lsls	r3, r3, #8
 80048f6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80048fa:	431a      	orrs	r2, r3
 80048fc:	4b38      	ldr	r3, [pc, #224]	; (80049e0 <MX_LWIP_Init+0x290>)
 80048fe:	781b      	ldrb	r3, [r3, #0]
 8004900:	0619      	lsls	r1, r3, #24
 8004902:	4b37      	ldr	r3, [pc, #220]	; (80049e0 <MX_LWIP_Init+0x290>)
 8004904:	785b      	ldrb	r3, [r3, #1]
 8004906:	041b      	lsls	r3, r3, #16
 8004908:	4319      	orrs	r1, r3
 800490a:	4b35      	ldr	r3, [pc, #212]	; (80049e0 <MX_LWIP_Init+0x290>)
 800490c:	789b      	ldrb	r3, [r3, #2]
 800490e:	021b      	lsls	r3, r3, #8
 8004910:	430b      	orrs	r3, r1
 8004912:	4933      	ldr	r1, [pc, #204]	; (80049e0 <MX_LWIP_Init+0x290>)
 8004914:	78c9      	ldrb	r1, [r1, #3]
 8004916:	430b      	orrs	r3, r1
 8004918:	0a1b      	lsrs	r3, r3, #8
 800491a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800491e:	431a      	orrs	r2, r3
 8004920:	4b2f      	ldr	r3, [pc, #188]	; (80049e0 <MX_LWIP_Init+0x290>)
 8004922:	781b      	ldrb	r3, [r3, #0]
 8004924:	0619      	lsls	r1, r3, #24
 8004926:	4b2e      	ldr	r3, [pc, #184]	; (80049e0 <MX_LWIP_Init+0x290>)
 8004928:	785b      	ldrb	r3, [r3, #1]
 800492a:	041b      	lsls	r3, r3, #16
 800492c:	4319      	orrs	r1, r3
 800492e:	4b2c      	ldr	r3, [pc, #176]	; (80049e0 <MX_LWIP_Init+0x290>)
 8004930:	789b      	ldrb	r3, [r3, #2]
 8004932:	021b      	lsls	r3, r3, #8
 8004934:	430b      	orrs	r3, r1
 8004936:	492a      	ldr	r1, [pc, #168]	; (80049e0 <MX_LWIP_Init+0x290>)
 8004938:	78c9      	ldrb	r1, [r1, #3]
 800493a:	430b      	orrs	r3, r1
 800493c:	0e1b      	lsrs	r3, r3, #24
 800493e:	4313      	orrs	r3, r2
 8004940:	4a2a      	ldr	r2, [pc, #168]	; (80049ec <MX_LWIP_Init+0x29c>)
 8004942:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8004944:	4b2a      	ldr	r3, [pc, #168]	; (80049f0 <MX_LWIP_Init+0x2a0>)
 8004946:	9302      	str	r3, [sp, #8]
 8004948:	4b2a      	ldr	r3, [pc, #168]	; (80049f4 <MX_LWIP_Init+0x2a4>)
 800494a:	9301      	str	r3, [sp, #4]
 800494c:	2300      	movs	r3, #0
 800494e:	9300      	str	r3, [sp, #0]
 8004950:	4b26      	ldr	r3, [pc, #152]	; (80049ec <MX_LWIP_Init+0x29c>)
 8004952:	4a25      	ldr	r2, [pc, #148]	; (80049e8 <MX_LWIP_Init+0x298>)
 8004954:	4923      	ldr	r1, [pc, #140]	; (80049e4 <MX_LWIP_Init+0x294>)
 8004956:	4828      	ldr	r0, [pc, #160]	; (80049f8 <MX_LWIP_Init+0x2a8>)
 8004958:	f005 fe80 	bl	800a65c <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800495c:	4826      	ldr	r0, [pc, #152]	; (80049f8 <MX_LWIP_Init+0x2a8>)
 800495e:	f006 f82b 	bl	800a9b8 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8004962:	4b25      	ldr	r3, [pc, #148]	; (80049f8 <MX_LWIP_Init+0x2a8>)
 8004964:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004968:	089b      	lsrs	r3, r3, #2
 800496a:	f003 0301 	and.w	r3, r3, #1
 800496e:	b2db      	uxtb	r3, r3
 8004970:	2b00      	cmp	r3, #0
 8004972:	d003      	beq.n	800497c <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8004974:	4820      	ldr	r0, [pc, #128]	; (80049f8 <MX_LWIP_Init+0x2a8>)
 8004976:	f006 f82f 	bl	800a9d8 <netif_set_up>
 800497a:	e002      	b.n	8004982 <MX_LWIP_Init+0x232>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 800497c:	481e      	ldr	r0, [pc, #120]	; (80049f8 <MX_LWIP_Init+0x2a8>)
 800497e:	f006 f897 	bl	800aab0 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 8004982:	491e      	ldr	r1, [pc, #120]	; (80049fc <MX_LWIP_Init+0x2ac>)
 8004984:	481c      	ldr	r0, [pc, #112]	; (80049f8 <MX_LWIP_Init+0x2a8>)
 8004986:	f006 f929 	bl	800abdc <netif_set_link_callback>

  /* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(Netif_SEM);
 800498a:	2300      	movs	r3, #0
 800498c:	623b      	str	r3, [r7, #32]
 800498e:	2300      	movs	r3, #0
 8004990:	627b      	str	r3, [r7, #36]	; 0x24
  Netif_LinkSemaphore = osSemaphoreCreate(osSemaphore(Netif_SEM) , 1 );
 8004992:	f107 0320 	add.w	r3, r7, #32
 8004996:	2101      	movs	r1, #1
 8004998:	4618      	mov	r0, r3
 800499a:	f000 fd8f 	bl	80054bc <osSemaphoreCreate>
 800499e:	4602      	mov	r2, r0
 80049a0:	4b17      	ldr	r3, [pc, #92]	; (8004a00 <MX_LWIP_Init+0x2b0>)
 80049a2:	601a      	str	r2, [r3, #0]

  link_arg.netif = &gnetif;
 80049a4:	4b17      	ldr	r3, [pc, #92]	; (8004a04 <MX_LWIP_Init+0x2b4>)
 80049a6:	4a14      	ldr	r2, [pc, #80]	; (80049f8 <MX_LWIP_Init+0x2a8>)
 80049a8:	601a      	str	r2, [r3, #0]
  link_arg.semaphore = Netif_LinkSemaphore;
 80049aa:	4b15      	ldr	r3, [pc, #84]	; (8004a00 <MX_LWIP_Init+0x2b0>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	4a15      	ldr	r2, [pc, #84]	; (8004a04 <MX_LWIP_Init+0x2b4>)
 80049b0:	6053      	str	r3, [r2, #4]
  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(LinkThr, ethernetif_set_link, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE * 2);
 80049b2:	4b15      	ldr	r3, [pc, #84]	; (8004a08 <MX_LWIP_Init+0x2b8>)
 80049b4:	1d3c      	adds	r4, r7, #4
 80049b6:	461d      	mov	r5, r3
 80049b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80049ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80049bc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80049c0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(LinkThr), &link_arg);
 80049c4:	1d3b      	adds	r3, r7, #4
 80049c6:	490f      	ldr	r1, [pc, #60]	; (8004a04 <MX_LWIP_Init+0x2b4>)
 80049c8:	4618      	mov	r0, r3
 80049ca:	f000 fc7b 	bl	80052c4 <osThreadCreate>
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 80049ce:	bf00      	nop
 80049d0:	3728      	adds	r7, #40	; 0x28
 80049d2:	46bd      	mov	sp, r7
 80049d4:	bdb0      	pop	{r4, r5, r7, pc}
 80049d6:	bf00      	nop
 80049d8:	200049d0 	.word	0x200049d0
 80049dc:	200049cc 	.word	0x200049cc
 80049e0:	20004990 	.word	0x20004990
 80049e4:	200049c8 	.word	0x200049c8
 80049e8:	200049d4 	.word	0x200049d4
 80049ec:	200049d8 	.word	0x200049d8
 80049f0:	08009ae9 	.word	0x08009ae9
 80049f4:	08005061 	.word	0x08005061
 80049f8:	20004994 	.word	0x20004994
 80049fc:	08005145 	.word	0x08005145
 8004a00:	200008c8 	.word	0x200008c8
 8004a04:	20004988 	.word	0x20004988
 8004a08:	0800ff14 	.word	0x0800ff14

08004a0c <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b08e      	sub	sp, #56	; 0x38
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004a18:	2200      	movs	r2, #0
 8004a1a:	601a      	str	r2, [r3, #0]
 8004a1c:	605a      	str	r2, [r3, #4]
 8004a1e:	609a      	str	r2, [r3, #8]
 8004a20:	60da      	str	r2, [r3, #12]
 8004a22:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	4a56      	ldr	r2, [pc, #344]	; (8004b84 <HAL_ETH_MspInit+0x178>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	f040 80a6 	bne.w	8004b7c <HAL_ETH_MspInit+0x170>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8004a30:	4b55      	ldr	r3, [pc, #340]	; (8004b88 <HAL_ETH_MspInit+0x17c>)
 8004a32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a34:	4a54      	ldr	r2, [pc, #336]	; (8004b88 <HAL_ETH_MspInit+0x17c>)
 8004a36:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004a3a:	6313      	str	r3, [r2, #48]	; 0x30
 8004a3c:	4b52      	ldr	r3, [pc, #328]	; (8004b88 <HAL_ETH_MspInit+0x17c>)
 8004a3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a44:	623b      	str	r3, [r7, #32]
 8004a46:	6a3b      	ldr	r3, [r7, #32]
 8004a48:	4b4f      	ldr	r3, [pc, #316]	; (8004b88 <HAL_ETH_MspInit+0x17c>)
 8004a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a4c:	4a4e      	ldr	r2, [pc, #312]	; (8004b88 <HAL_ETH_MspInit+0x17c>)
 8004a4e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004a52:	6313      	str	r3, [r2, #48]	; 0x30
 8004a54:	4b4c      	ldr	r3, [pc, #304]	; (8004b88 <HAL_ETH_MspInit+0x17c>)
 8004a56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a58:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004a5c:	61fb      	str	r3, [r7, #28]
 8004a5e:	69fb      	ldr	r3, [r7, #28]
 8004a60:	4b49      	ldr	r3, [pc, #292]	; (8004b88 <HAL_ETH_MspInit+0x17c>)
 8004a62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a64:	4a48      	ldr	r2, [pc, #288]	; (8004b88 <HAL_ETH_MspInit+0x17c>)
 8004a66:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004a6a:	6313      	str	r3, [r2, #48]	; 0x30
 8004a6c:	4b46      	ldr	r3, [pc, #280]	; (8004b88 <HAL_ETH_MspInit+0x17c>)
 8004a6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a70:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a74:	61bb      	str	r3, [r7, #24]
 8004a76:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004a78:	4b43      	ldr	r3, [pc, #268]	; (8004b88 <HAL_ETH_MspInit+0x17c>)
 8004a7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a7c:	4a42      	ldr	r2, [pc, #264]	; (8004b88 <HAL_ETH_MspInit+0x17c>)
 8004a7e:	f043 0304 	orr.w	r3, r3, #4
 8004a82:	6313      	str	r3, [r2, #48]	; 0x30
 8004a84:	4b40      	ldr	r3, [pc, #256]	; (8004b88 <HAL_ETH_MspInit+0x17c>)
 8004a86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a88:	f003 0304 	and.w	r3, r3, #4
 8004a8c:	617b      	str	r3, [r7, #20]
 8004a8e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a90:	4b3d      	ldr	r3, [pc, #244]	; (8004b88 <HAL_ETH_MspInit+0x17c>)
 8004a92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a94:	4a3c      	ldr	r2, [pc, #240]	; (8004b88 <HAL_ETH_MspInit+0x17c>)
 8004a96:	f043 0301 	orr.w	r3, r3, #1
 8004a9a:	6313      	str	r3, [r2, #48]	; 0x30
 8004a9c:	4b3a      	ldr	r3, [pc, #232]	; (8004b88 <HAL_ETH_MspInit+0x17c>)
 8004a9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aa0:	f003 0301 	and.w	r3, r3, #1
 8004aa4:	613b      	str	r3, [r7, #16]
 8004aa6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004aa8:	4b37      	ldr	r3, [pc, #220]	; (8004b88 <HAL_ETH_MspInit+0x17c>)
 8004aaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aac:	4a36      	ldr	r2, [pc, #216]	; (8004b88 <HAL_ETH_MspInit+0x17c>)
 8004aae:	f043 0302 	orr.w	r3, r3, #2
 8004ab2:	6313      	str	r3, [r2, #48]	; 0x30
 8004ab4:	4b34      	ldr	r3, [pc, #208]	; (8004b88 <HAL_ETH_MspInit+0x17c>)
 8004ab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ab8:	f003 0302 	and.w	r3, r3, #2
 8004abc:	60fb      	str	r3, [r7, #12]
 8004abe:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8004ac0:	4b31      	ldr	r3, [pc, #196]	; (8004b88 <HAL_ETH_MspInit+0x17c>)
 8004ac2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ac4:	4a30      	ldr	r2, [pc, #192]	; (8004b88 <HAL_ETH_MspInit+0x17c>)
 8004ac6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004aca:	6313      	str	r3, [r2, #48]	; 0x30
 8004acc:	4b2e      	ldr	r3, [pc, #184]	; (8004b88 <HAL_ETH_MspInit+0x17c>)
 8004ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ad0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ad4:	60bb      	str	r3, [r7, #8]
 8004ad6:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8004ad8:	2332      	movs	r3, #50	; 0x32
 8004ada:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004adc:	2302      	movs	r3, #2
 8004ade:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004ae4:	2303      	movs	r3, #3
 8004ae6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004ae8:	230b      	movs	r3, #11
 8004aea:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004aec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004af0:	4619      	mov	r1, r3
 8004af2:	4826      	ldr	r0, [pc, #152]	; (8004b8c <HAL_ETH_MspInit+0x180>)
 8004af4:	f7fd fb74 	bl	80021e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8004af8:	2386      	movs	r3, #134	; 0x86
 8004afa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004afc:	2302      	movs	r3, #2
 8004afe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b00:	2300      	movs	r3, #0
 8004b02:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004b04:	2303      	movs	r3, #3
 8004b06:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004b08:	230b      	movs	r3, #11
 8004b0a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004b10:	4619      	mov	r1, r3
 8004b12:	481f      	ldr	r0, [pc, #124]	; (8004b90 <HAL_ETH_MspInit+0x184>)
 8004b14:	f7fd fb64 	bl	80021e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8004b18:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004b1c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b1e:	2302      	movs	r3, #2
 8004b20:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b22:	2300      	movs	r3, #0
 8004b24:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004b26:	2303      	movs	r3, #3
 8004b28:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004b2a:	230b      	movs	r3, #11
 8004b2c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004b2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004b32:	4619      	mov	r1, r3
 8004b34:	4817      	ldr	r0, [pc, #92]	; (8004b94 <HAL_ETH_MspInit+0x188>)
 8004b36:	f7fd fb53 	bl	80021e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8004b3a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8004b3e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b40:	2302      	movs	r3, #2
 8004b42:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b44:	2300      	movs	r3, #0
 8004b46:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004b48:	2303      	movs	r3, #3
 8004b4a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004b4c:	230b      	movs	r3, #11
 8004b4e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004b50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004b54:	4619      	mov	r1, r3
 8004b56:	4810      	ldr	r0, [pc, #64]	; (8004b98 <HAL_ETH_MspInit+0x18c>)
 8004b58:	f7fd fb42 	bl	80021e0 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	2105      	movs	r1, #5
 8004b60:	203d      	movs	r0, #61	; 0x3d
 8004b62:	f7fc f98d 	bl	8000e80 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8004b66:	203d      	movs	r0, #61	; 0x3d
 8004b68:	f7fc f9a6 	bl	8000eb8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(ETH_WKUP_IRQn, 5, 0);
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	2105      	movs	r1, #5
 8004b70:	203e      	movs	r0, #62	; 0x3e
 8004b72:	f7fc f985 	bl	8000e80 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_WKUP_IRQn);
 8004b76:	203e      	movs	r0, #62	; 0x3e
 8004b78:	f7fc f99e 	bl	8000eb8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8004b7c:	bf00      	nop
 8004b7e:	3738      	adds	r7, #56	; 0x38
 8004b80:	46bd      	mov	sp, r7
 8004b82:	bd80      	pop	{r7, pc}
 8004b84:	40028000 	.word	0x40028000
 8004b88:	40023800 	.word	0x40023800
 8004b8c:	40020800 	.word	0x40020800
 8004b90:	40020000 	.word	0x40020000
 8004b94:	40020400 	.word	0x40020400
 8004b98:	40021800 	.word	0x40021800

08004b9c <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b082      	sub	sp, #8
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(s_xSemaphore);
 8004ba4:	4b04      	ldr	r3, [pc, #16]	; (8004bb8 <HAL_ETH_RxCpltCallback+0x1c>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	4618      	mov	r0, r3
 8004baa:	f000 fd09 	bl	80055c0 <osSemaphoreRelease>
}
 8004bae:	bf00      	nop
 8004bb0:	3708      	adds	r7, #8
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	bd80      	pop	{r7, pc}
 8004bb6:	bf00      	nop
 8004bb8:	200008cc 	.word	0x200008cc

08004bbc <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8004bbc:	b5b0      	push	{r4, r5, r7, lr}
 8004bbe:	b090      	sub	sp, #64	; 0x40
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8004bc8:	4b5c      	ldr	r3, [pc, #368]	; (8004d3c <low_level_init+0x180>)
 8004bca:	4a5d      	ldr	r2, [pc, #372]	; (8004d40 <low_level_init+0x184>)
 8004bcc:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8004bce:	4b5b      	ldr	r3, [pc, #364]	; (8004d3c <low_level_init+0x180>)
 8004bd0:	2201      	movs	r2, #1
 8004bd2:	605a      	str	r2, [r3, #4]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8004bd4:	4b59      	ldr	r3, [pc, #356]	; (8004d3c <low_level_init+0x180>)
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 8004bda:	2300      	movs	r3, #0
 8004bdc:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  MACAddr[1] = 0x80;
 8004be0:	2380      	movs	r3, #128	; 0x80
 8004be2:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  MACAddr[2] = 0xE1;
 8004be6:	23e1      	movs	r3, #225	; 0xe1
 8004be8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  MACAddr[3] = 0x00;
 8004bec:	2300      	movs	r3, #0
 8004bee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  MACAddr[4] = 0x00;
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  MACAddr[5] = 0x01;
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  heth.Init.MACAddr = &MACAddr[0];
 8004bfe:	4a4f      	ldr	r2, [pc, #316]	; (8004d3c <low_level_init+0x180>)
 8004c00:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004c04:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 8004c06:	4b4d      	ldr	r3, [pc, #308]	; (8004d3c <low_level_init+0x180>)
 8004c08:	2201      	movs	r2, #1
 8004c0a:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8004c0c:	4b4b      	ldr	r3, [pc, #300]	; (8004d3c <low_level_init+0x180>)
 8004c0e:	2200      	movs	r2, #0
 8004c10:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8004c12:	4b4a      	ldr	r3, [pc, #296]	; (8004d3c <low_level_init+0x180>)
 8004c14:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8004c18:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8004c1a:	4848      	ldr	r0, [pc, #288]	; (8004d3c <low_level_init+0x180>)
 8004c1c:	f7fc f95a 	bl	8000ed4 <HAL_ETH_Init>
 8004c20:	4603      	mov	r3, r0
 8004c22:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if (hal_eth_init_status == HAL_OK)
 8004c26:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d108      	bne.n	8004c40 <low_level_init+0x84>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004c34:	f043 0304 	orr.w	r3, r3, #4
 8004c38:	b2da      	uxtb	r2, r3
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8004c40:	2304      	movs	r3, #4
 8004c42:	4a40      	ldr	r2, [pc, #256]	; (8004d44 <low_level_init+0x188>)
 8004c44:	4940      	ldr	r1, [pc, #256]	; (8004d48 <low_level_init+0x18c>)
 8004c46:	483d      	ldr	r0, [pc, #244]	; (8004d3c <low_level_init+0x180>)
 8004c48:	f7fc fae0 	bl	800120c <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8004c4c:	2304      	movs	r3, #4
 8004c4e:	4a3f      	ldr	r2, [pc, #252]	; (8004d4c <low_level_init+0x190>)
 8004c50:	493f      	ldr	r1, [pc, #252]	; (8004d50 <low_level_init+0x194>)
 8004c52:	483a      	ldr	r0, [pc, #232]	; (8004d3c <low_level_init+0x180>)
 8004c54:	f7fc fb43 	bl	80012de <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2206      	movs	r2, #6
 8004c5c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8004c60:	4b36      	ldr	r3, [pc, #216]	; (8004d3c <low_level_init+0x180>)
 8004c62:	695b      	ldr	r3, [r3, #20]
 8004c64:	781a      	ldrb	r2, [r3, #0]
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8004c6c:	4b33      	ldr	r3, [pc, #204]	; (8004d3c <low_level_init+0x180>)
 8004c6e:	695b      	ldr	r3, [r3, #20]
 8004c70:	785a      	ldrb	r2, [r3, #1]
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8004c78:	4b30      	ldr	r3, [pc, #192]	; (8004d3c <low_level_init+0x180>)
 8004c7a:	695b      	ldr	r3, [r3, #20]
 8004c7c:	789a      	ldrb	r2, [r3, #2]
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8004c84:	4b2d      	ldr	r3, [pc, #180]	; (8004d3c <low_level_init+0x180>)
 8004c86:	695b      	ldr	r3, [r3, #20]
 8004c88:	78da      	ldrb	r2, [r3, #3]
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8004c90:	4b2a      	ldr	r3, [pc, #168]	; (8004d3c <low_level_init+0x180>)
 8004c92:	695b      	ldr	r3, [r3, #20]
 8004c94:	791a      	ldrb	r2, [r3, #4]
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8004c9c:	4b27      	ldr	r3, [pc, #156]	; (8004d3c <low_level_init+0x180>)
 8004c9e:	695b      	ldr	r3, [r3, #20]
 8004ca0:	795a      	ldrb	r2, [r3, #5]
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = 1500;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8004cae:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004cb6:	f043 030a 	orr.w	r3, r3, #10
 8004cba:	b2da      	uxtb	r2, r3
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

/* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(SEM);
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	62bb      	str	r3, [r7, #40]	; 0x28
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM), 1);
 8004cca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004cce:	2101      	movs	r1, #1
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	f000 fbf3 	bl	80054bc <osSemaphoreCreate>
 8004cd6:	4602      	mov	r2, r0
 8004cd8:	4b1e      	ldr	r3, [pc, #120]	; (8004d54 <low_level_init+0x198>)
 8004cda:	601a      	str	r2, [r3, #0]

/* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8004cdc:	4b1e      	ldr	r3, [pc, #120]	; (8004d58 <low_level_init+0x19c>)
 8004cde:	f107 040c 	add.w	r4, r7, #12
 8004ce2:	461d      	mov	r5, r3
 8004ce4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004ce6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004ce8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004cec:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 8004cf0:	f107 030c 	add.w	r3, r7, #12
 8004cf4:	6879      	ldr	r1, [r7, #4]
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	f000 fae4 	bl	80052c4 <osThreadCreate>
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 8004cfc:	480f      	ldr	r0, [pc, #60]	; (8004d3c <low_level_init+0x180>)
 8004cfe:	f7fc fe16 	bl	800192e <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 8004d02:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004d06:	461a      	mov	r2, r3
 8004d08:	211d      	movs	r1, #29
 8004d0a:	480c      	ldr	r0, [pc, #48]	; (8004d3c <low_level_init+0x180>)
 8004d0c:	f7fc fd41 	bl	8001792 <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 8004d10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d12:	f043 030b 	orr.w	r3, r3, #11
 8004d16:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 8004d18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d1a:	461a      	mov	r2, r3
 8004d1c:	211d      	movs	r1, #29
 8004d1e:	4807      	ldr	r0, [pc, #28]	; (8004d3c <low_level_init+0x180>)
 8004d20:	f7fc fd9f 	bl	8001862 <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 8004d24:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004d28:	461a      	mov	r2, r3
 8004d2a:	211d      	movs	r1, #29
 8004d2c:	4803      	ldr	r0, [pc, #12]	; (8004d3c <low_level_init+0x180>)
 8004d2e:	f7fc fd30 	bl	8001792 <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8004d32:	bf00      	nop
 8004d34:	3740      	adds	r7, #64	; 0x40
 8004d36:	46bd      	mov	sp, r7
 8004d38:	bdb0      	pop	{r4, r5, r7, pc}
 8004d3a:	bf00      	nop
 8004d3c:	200062ac 	.word	0x200062ac
 8004d40:	40028000 	.word	0x40028000
 8004d44:	200062f4 	.word	0x200062f4
 8004d48:	200049dc 	.word	0x200049dc
 8004d4c:	20004a5c 	.word	0x20004a5c
 8004d50:	2000622c 	.word	0x2000622c
 8004d54:	200008cc 	.word	0x200008cc
 8004d58:	0800ff38 	.word	0x0800ff38

08004d5c <low_level_output>:
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b08a      	sub	sp, #40	; 0x28
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
 8004d64:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8004d66:	4b4b      	ldr	r3, [pc, #300]	; (8004e94 <low_level_output+0x138>)
 8004d68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d6a:	689b      	ldr	r3, [r3, #8]
 8004d6c:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 8004d6e:	2300      	movs	r3, #0
 8004d70:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 8004d72:	2300      	movs	r3, #0
 8004d74:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 8004d76:	2300      	movs	r3, #0
 8004d78:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 8004d7e:	4b45      	ldr	r3, [pc, #276]	; (8004e94 <low_level_output+0x138>)
 8004d80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d82:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 8004d84:	2300      	movs	r3, #0
 8004d86:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	623b      	str	r3, [r7, #32]
 8004d8c:	e05a      	b.n	8004e44 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8004d8e:	69bb      	ldr	r3, [r7, #24]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	da03      	bge.n	8004d9e <low_level_output+0x42>
      {
        errval = ERR_USE;
 8004d96:	23f8      	movs	r3, #248	; 0xf8
 8004d98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 8004d9c:	e05c      	b.n	8004e58 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 8004d9e:	6a3b      	ldr	r3, [r7, #32]
 8004da0:	895b      	ldrh	r3, [r3, #10]
 8004da2:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 8004da4:	2300      	movs	r3, #0
 8004da6:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8004da8:	e02f      	b.n	8004e0a <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 8004daa:	69fa      	ldr	r2, [r7, #28]
 8004dac:	693b      	ldr	r3, [r7, #16]
 8004dae:	18d0      	adds	r0, r2, r3
 8004db0:	6a3b      	ldr	r3, [r7, #32]
 8004db2:	685a      	ldr	r2, [r3, #4]
 8004db4:	68bb      	ldr	r3, [r7, #8]
 8004db6:	18d1      	adds	r1, r2, r3
 8004db8:	693a      	ldr	r2, [r7, #16]
 8004dba:	f240 53f4 	movw	r3, #1524	; 0x5f4
 8004dbe:	1a9b      	subs	r3, r3, r2
 8004dc0:	461a      	mov	r2, r3
 8004dc2:	f00a f8e4 	bl	800ef8e <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 8004dc6:	69bb      	ldr	r3, [r7, #24]
 8004dc8:	68db      	ldr	r3, [r3, #12]
 8004dca:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8004dcc:	69bb      	ldr	r3, [r7, #24]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	da03      	bge.n	8004ddc <low_level_output+0x80>
        {
          errval = ERR_USE;
 8004dd4:	23f8      	movs	r3, #248	; 0xf8
 8004dd6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 8004dda:	e03d      	b.n	8004e58 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8004ddc:	69bb      	ldr	r3, [r7, #24]
 8004dde:	689b      	ldr	r3, [r3, #8]
 8004de0:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 8004de2:	693a      	ldr	r2, [r7, #16]
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	4413      	add	r3, r2
 8004de8:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8004dec:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 8004dee:	68ba      	ldr	r2, [r7, #8]
 8004df0:	693b      	ldr	r3, [r7, #16]
 8004df2:	1ad3      	subs	r3, r2, r3
 8004df4:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8004df8:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 8004dfa:	697a      	ldr	r2, [r7, #20]
 8004dfc:	693b      	ldr	r3, [r7, #16]
 8004dfe:	1ad3      	subs	r3, r2, r3
 8004e00:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8004e04:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 8004e06:	2300      	movs	r3, #0
 8004e08:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8004e0a:	68fa      	ldr	r2, [r7, #12]
 8004e0c:	693b      	ldr	r3, [r7, #16]
 8004e0e:	4413      	add	r3, r2
 8004e10:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d8c8      	bhi.n	8004daa <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8004e18:	69fa      	ldr	r2, [r7, #28]
 8004e1a:	693b      	ldr	r3, [r7, #16]
 8004e1c:	18d0      	adds	r0, r2, r3
 8004e1e:	6a3b      	ldr	r3, [r7, #32]
 8004e20:	685a      	ldr	r2, [r3, #4]
 8004e22:	68bb      	ldr	r3, [r7, #8]
 8004e24:	4413      	add	r3, r2
 8004e26:	68fa      	ldr	r2, [r7, #12]
 8004e28:	4619      	mov	r1, r3
 8004e2a:	f00a f8b0 	bl	800ef8e <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8004e2e:	693a      	ldr	r2, [r7, #16]
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	4413      	add	r3, r2
 8004e34:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 8004e36:	697a      	ldr	r2, [r7, #20]
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	4413      	add	r3, r2
 8004e3c:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 8004e3e:	6a3b      	ldr	r3, [r7, #32]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	623b      	str	r3, [r7, #32]
 8004e44:	6a3b      	ldr	r3, [r7, #32]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d1a1      	bne.n	8004d8e <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 8004e4a:	6979      	ldr	r1, [r7, #20]
 8004e4c:	4811      	ldr	r0, [pc, #68]	; (8004e94 <low_level_output+0x138>)
 8004e4e:	f7fc fab3 	bl	80013b8 <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 8004e52:	2300      	movs	r3, #0
 8004e54:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8004e58:	4b0e      	ldr	r3, [pc, #56]	; (8004e94 <low_level_output+0x138>)
 8004e5a:	681a      	ldr	r2, [r3, #0]
 8004e5c:	f241 0314 	movw	r3, #4116	; 0x1014
 8004e60:	4413      	add	r3, r2
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f003 0320 	and.w	r3, r3, #32
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d00d      	beq.n	8004e88 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8004e6c:	4b09      	ldr	r3, [pc, #36]	; (8004e94 <low_level_output+0x138>)
 8004e6e:	681a      	ldr	r2, [r3, #0]
 8004e70:	f241 0314 	movw	r3, #4116	; 0x1014
 8004e74:	4413      	add	r3, r2
 8004e76:	2220      	movs	r2, #32
 8004e78:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 8004e7a:	4b06      	ldr	r3, [pc, #24]	; (8004e94 <low_level_output+0x138>)
 8004e7c:	681a      	ldr	r2, [r3, #0]
 8004e7e:	f241 0304 	movw	r3, #4100	; 0x1004
 8004e82:	4413      	add	r3, r2
 8004e84:	2200      	movs	r2, #0
 8004e86:	601a      	str	r2, [r3, #0]
  }
  return errval;
 8004e88:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	3728      	adds	r7, #40	; 0x28
 8004e90:	46bd      	mov	sp, r7
 8004e92:	bd80      	pop	{r7, pc}
 8004e94:	200062ac 	.word	0x200062ac

08004e98 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b08c      	sub	sp, #48	; 0x30
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 8004eac:	2300      	movs	r3, #0
 8004eae:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 8004eb8:	2300      	movs	r3, #0
 8004eba:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 8004ebc:	484f      	ldr	r0, [pc, #316]	; (8004ffc <low_level_input+0x164>)
 8004ebe:	f7fc fb65 	bl	800158c <HAL_ETH_GetReceivedFrame_IT>
 8004ec2:	4603      	mov	r3, r0
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d001      	beq.n	8004ecc <low_level_input+0x34>

    return NULL;
 8004ec8:	2300      	movs	r3, #0
 8004eca:	e092      	b.n	8004ff2 <low_level_input+0x15a>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 8004ecc:	4b4b      	ldr	r3, [pc, #300]	; (8004ffc <low_level_input+0x164>)
 8004ece:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ed0:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 8004ed2:	4b4a      	ldr	r3, [pc, #296]	; (8004ffc <low_level_input+0x164>)
 8004ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ed6:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 8004ed8:	89fb      	ldrh	r3, [r7, #14]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d007      	beq.n	8004eee <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8004ede:	89fb      	ldrh	r3, [r7, #14]
 8004ee0:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8004ee4:	4619      	mov	r1, r3
 8004ee6:	2000      	movs	r0, #0
 8004ee8:	f005 fee8 	bl	800acbc <pbuf_alloc>
 8004eec:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 8004eee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d04b      	beq.n	8004f8c <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8004ef4:	4b41      	ldr	r3, [pc, #260]	; (8004ffc <low_level_input+0x164>)
 8004ef6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ef8:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 8004efa:	2300      	movs	r3, #0
 8004efc:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8004efe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f00:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f02:	e040      	b.n	8004f86 <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 8004f04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f06:	895b      	ldrh	r3, [r3, #10]
 8004f08:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8004f0e:	e021      	b.n	8004f54 <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8004f10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f12:	685a      	ldr	r2, [r3, #4]
 8004f14:	69bb      	ldr	r3, [r7, #24]
 8004f16:	18d0      	adds	r0, r2, r3
 8004f18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f1a:	69fb      	ldr	r3, [r7, #28]
 8004f1c:	18d1      	adds	r1, r2, r3
 8004f1e:	69fa      	ldr	r2, [r7, #28]
 8004f20:	f240 53f4 	movw	r3, #1524	; 0x5f4
 8004f24:	1a9b      	subs	r3, r3, r2
 8004f26:	461a      	mov	r2, r3
 8004f28:	f00a f831 	bl	800ef8e <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8004f2c:	6a3b      	ldr	r3, [r7, #32]
 8004f2e:	68db      	ldr	r3, [r3, #12]
 8004f30:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 8004f32:	6a3b      	ldr	r3, [r7, #32]
 8004f34:	689b      	ldr	r3, [r3, #8]
 8004f36:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8004f38:	69fa      	ldr	r2, [r7, #28]
 8004f3a:	697b      	ldr	r3, [r7, #20]
 8004f3c:	4413      	add	r3, r2
 8004f3e:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8004f42:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8004f44:	69ba      	ldr	r2, [r7, #24]
 8004f46:	69fb      	ldr	r3, [r7, #28]
 8004f48:	1ad3      	subs	r3, r2, r3
 8004f4a:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8004f4e:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 8004f50:	2300      	movs	r3, #0
 8004f52:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8004f54:	697a      	ldr	r2, [r7, #20]
 8004f56:	69fb      	ldr	r3, [r7, #28]
 8004f58:	4413      	add	r3, r2
 8004f5a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d8d6      	bhi.n	8004f10 <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 8004f62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f64:	685a      	ldr	r2, [r3, #4]
 8004f66:	69bb      	ldr	r3, [r7, #24]
 8004f68:	18d0      	adds	r0, r2, r3
 8004f6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f6c:	69fb      	ldr	r3, [r7, #28]
 8004f6e:	4413      	add	r3, r2
 8004f70:	697a      	ldr	r2, [r7, #20]
 8004f72:	4619      	mov	r1, r3
 8004f74:	f00a f80b 	bl	800ef8e <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8004f78:	69fa      	ldr	r2, [r7, #28]
 8004f7a:	697b      	ldr	r3, [r7, #20]
 8004f7c:	4413      	add	r3, r2
 8004f7e:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8004f80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d1bb      	bne.n	8004f04 <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8004f8c:	4b1b      	ldr	r3, [pc, #108]	; (8004ffc <low_level_input+0x164>)
 8004f8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f90:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8004f92:	2300      	movs	r3, #0
 8004f94:	613b      	str	r3, [r7, #16]
 8004f96:	e00b      	b.n	8004fb0 <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8004f98:	6a3b      	ldr	r3, [r7, #32]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004fa0:	6a3b      	ldr	r3, [r7, #32]
 8004fa2:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8004fa4:	6a3b      	ldr	r3, [r7, #32]
 8004fa6:	68db      	ldr	r3, [r3, #12]
 8004fa8:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8004faa:	693b      	ldr	r3, [r7, #16]
 8004fac:	3301      	adds	r3, #1
 8004fae:	613b      	str	r3, [r7, #16]
 8004fb0:	4b12      	ldr	r3, [pc, #72]	; (8004ffc <low_level_input+0x164>)
 8004fb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fb4:	693a      	ldr	r2, [r7, #16]
 8004fb6:	429a      	cmp	r2, r3
 8004fb8:	d3ee      	bcc.n	8004f98 <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 8004fba:	4b10      	ldr	r3, [pc, #64]	; (8004ffc <low_level_input+0x164>)
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 8004fc0:	4b0e      	ldr	r3, [pc, #56]	; (8004ffc <low_level_input+0x164>)
 8004fc2:	681a      	ldr	r2, [r3, #0]
 8004fc4:	f241 0314 	movw	r3, #4116	; 0x1014
 8004fc8:	4413      	add	r3, r2
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d00d      	beq.n	8004ff0 <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 8004fd4:	4b09      	ldr	r3, [pc, #36]	; (8004ffc <low_level_input+0x164>)
 8004fd6:	681a      	ldr	r2, [r3, #0]
 8004fd8:	f241 0314 	movw	r3, #4116	; 0x1014
 8004fdc:	4413      	add	r3, r2
 8004fde:	2280      	movs	r2, #128	; 0x80
 8004fe0:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 8004fe2:	4b06      	ldr	r3, [pc, #24]	; (8004ffc <low_level_input+0x164>)
 8004fe4:	681a      	ldr	r2, [r3, #0]
 8004fe6:	f241 0308 	movw	r3, #4104	; 0x1008
 8004fea:	4413      	add	r3, r2
 8004fec:	2200      	movs	r2, #0
 8004fee:	601a      	str	r2, [r3, #0]
  }
  return p;
 8004ff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	3730      	adds	r7, #48	; 0x30
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	bd80      	pop	{r7, pc}
 8004ffa:	bf00      	nop
 8004ffc:	200062ac 	.word	0x200062ac

08005000 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void const * argument)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b084      	sub	sp, #16
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	60fb      	str	r3, [r7, #12]

  for( ;; )
  {
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800500c:	4b12      	ldr	r3, [pc, #72]	; (8005058 <ethernetif_input+0x58>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f04f 31ff 	mov.w	r1, #4294967295
 8005014:	4618      	mov	r0, r3
 8005016:	f000 fa85 	bl	8005524 <osSemaphoreWait>
 800501a:	4603      	mov	r3, r0
 800501c:	2b00      	cmp	r3, #0
 800501e:	d1f5      	bne.n	800500c <ethernetif_input+0xc>
    {
      do
      {
        LOCK_TCPIP_CORE();
 8005020:	480e      	ldr	r0, [pc, #56]	; (800505c <ethernetif_input+0x5c>)
 8005022:	f009 feed 	bl	800ee00 <sys_mutex_lock>
        p = low_level_input( netif );
 8005026:	68f8      	ldr	r0, [r7, #12]
 8005028:	f7ff ff36 	bl	8004e98 <low_level_input>
 800502c:	60b8      	str	r0, [r7, #8]
        if   (p != NULL)
 800502e:	68bb      	ldr	r3, [r7, #8]
 8005030:	2b00      	cmp	r3, #0
 8005032:	d00a      	beq.n	800504a <ethernetif_input+0x4a>
        {
          if (netif->input( p, netif) != ERR_OK )
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	691b      	ldr	r3, [r3, #16]
 8005038:	68f9      	ldr	r1, [r7, #12]
 800503a:	68b8      	ldr	r0, [r7, #8]
 800503c:	4798      	blx	r3
 800503e:	4603      	mov	r3, r0
 8005040:	2b00      	cmp	r3, #0
 8005042:	d002      	beq.n	800504a <ethernetif_input+0x4a>
          {
            pbuf_free(p);
 8005044:	68b8      	ldr	r0, [r7, #8]
 8005046:	f006 f917 	bl	800b278 <pbuf_free>
          }
        }
        UNLOCK_TCPIP_CORE();
 800504a:	4804      	ldr	r0, [pc, #16]	; (800505c <ethernetif_input+0x5c>)
 800504c:	f009 fee7 	bl	800ee1e <sys_mutex_unlock>
      } while(p!=NULL);
 8005050:	68bb      	ldr	r3, [r7, #8]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d1e4      	bne.n	8005020 <ethernetif_input+0x20>
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8005056:	e7d9      	b.n	800500c <ethernetif_input+0xc>
 8005058:	200008cc 	.word	0x200008cc
 800505c:	20007b04 	.word	0x20007b04

08005060 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b082      	sub	sp, #8
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d106      	bne.n	800507c <ethernetif_init+0x1c>
 800506e:	4b0e      	ldr	r3, [pc, #56]	; (80050a8 <ethernetif_init+0x48>)
 8005070:	f240 2237 	movw	r2, #567	; 0x237
 8005074:	490d      	ldr	r1, [pc, #52]	; (80050ac <ethernetif_init+0x4c>)
 8005076:	480e      	ldr	r0, [pc, #56]	; (80050b0 <ethernetif_init+0x50>)
 8005078:	f009 ff9c 	bl	800efb4 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2273      	movs	r2, #115	; 0x73
 8005080:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2274      	movs	r2, #116	; 0x74
 8005088:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	4a09      	ldr	r2, [pc, #36]	; (80050b4 <ethernetif_init+0x54>)
 8005090:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	4a08      	ldr	r2, [pc, #32]	; (80050b8 <ethernetif_init+0x58>)
 8005096:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8005098:	6878      	ldr	r0, [r7, #4]
 800509a:	f7ff fd8f 	bl	8004bbc <low_level_init>

  return ERR_OK;
 800509e:	2300      	movs	r3, #0
}
 80050a0:	4618      	mov	r0, r3
 80050a2:	3708      	adds	r7, #8
 80050a4:	46bd      	mov	sp, r7
 80050a6:	bd80      	pop	{r7, pc}
 80050a8:	0800ff54 	.word	0x0800ff54
 80050ac:	0800ff70 	.word	0x0800ff70
 80050b0:	0800ff80 	.word	0x0800ff80
 80050b4:	0800cc05 	.word	0x0800cc05
 80050b8:	08004d5d 	.word	0x08004d5d

080050bc <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80050c0:	f7fb fdf8 	bl	8000cb4 <HAL_GetTick>
 80050c4:	4603      	mov	r3, r0
}
 80050c6:	4618      	mov	r0, r3
 80050c8:	bd80      	pop	{r7, pc}
	...

080050cc <ethernetif_set_link>:
  * @param  netif: the network interface
  * @retval None
  */
void ethernetif_set_link(void const *argument)

{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b084      	sub	sp, #16
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 80050d4:	2300      	movs	r3, #0
 80050d6:	60bb      	str	r3, [r7, #8]
  struct link_str *link_arg = (struct link_str *)argument;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	60fb      	str	r3, [r7, #12]

  for(;;)
  {
    /* Read PHY_BSR*/
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 80050dc:	f107 0308 	add.w	r3, r7, #8
 80050e0:	461a      	mov	r2, r3
 80050e2:	2101      	movs	r1, #1
 80050e4:	4816      	ldr	r0, [pc, #88]	; (8005140 <ethernetif_set_link+0x74>)
 80050e6:	f7fc fb54 	bl	8001792 <HAL_ETH_ReadPHYRegister>

    regvalue &= PHY_LINKED_STATUS;
 80050ea:	68bb      	ldr	r3, [r7, #8]
 80050ec:	f003 0304 	and.w	r3, r3, #4
 80050f0:	60bb      	str	r3, [r7, #8]

    /* Check whether the netif link down and the PHY link is up */
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80050fa:	f003 0304 	and.w	r3, r3, #4
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d108      	bne.n	8005114 <ethernetif_set_link+0x48>
 8005102:	68bb      	ldr	r3, [r7, #8]
 8005104:	2b00      	cmp	r3, #0
 8005106:	d005      	beq.n	8005114 <ethernetif_set_link+0x48>
    {
      /* network cable is connected */
      netif_set_link_up(link_arg->netif);
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	4618      	mov	r0, r3
 800510e:	f005 fd01 	bl	800ab14 <netif_set_link_up>
 8005112:	e011      	b.n	8005138 <ethernetif_set_link+0x6c>
    }
    else if(netif_is_link_up(link_arg->netif) && (!regvalue))
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800511c:	089b      	lsrs	r3, r3, #2
 800511e:	f003 0301 	and.w	r3, r3, #1
 8005122:	b2db      	uxtb	r3, r3
 8005124:	2b00      	cmp	r3, #0
 8005126:	d007      	beq.n	8005138 <ethernetif_set_link+0x6c>
 8005128:	68bb      	ldr	r3, [r7, #8]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d104      	bne.n	8005138 <ethernetif_set_link+0x6c>
    {
      /* network cable is dis-connected */
      netif_set_link_down(link_arg->netif);
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	4618      	mov	r0, r3
 8005134:	f005 fd22 	bl	800ab7c <netif_set_link_down>
    }

    /* Suspend thread for 200 ms */
    osDelay(200);
 8005138:	20c8      	movs	r0, #200	; 0xc8
 800513a:	f000 f90f 	bl	800535c <osDelay>
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 800513e:	e7cd      	b.n	80050dc <ethernetif_set_link+0x10>
 8005140:	200062ac 	.word	0x200062ac

08005144 <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 8005144:	b580      	push	{r7, lr}
 8005146:	b084      	sub	sp, #16
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 800514c:	2300      	movs	r3, #0
 800514e:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 8005150:	2300      	movs	r3, #0
 8005152:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800515a:	089b      	lsrs	r3, r3, #2
 800515c:	f003 0301 	and.w	r3, r3, #1
 8005160:	b2db      	uxtb	r3, r3
 8005162:	2b00      	cmp	r3, #0
 8005164:	d05d      	beq.n	8005222 <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8005166:	4b34      	ldr	r3, [pc, #208]	; (8005238 <ethernetif_update_config+0xf4>)
 8005168:	685b      	ldr	r3, [r3, #4]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d03f      	beq.n	80051ee <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 800516e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005172:	2100      	movs	r1, #0
 8005174:	4830      	ldr	r0, [pc, #192]	; (8005238 <ethernetif_update_config+0xf4>)
 8005176:	f7fc fb74 	bl	8001862 <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 800517a:	f7fb fd9b 	bl	8000cb4 <HAL_GetTick>
 800517e:	4603      	mov	r3, r0
 8005180:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8005182:	f107 0308 	add.w	r3, r7, #8
 8005186:	461a      	mov	r2, r3
 8005188:	2101      	movs	r1, #1
 800518a:	482b      	ldr	r0, [pc, #172]	; (8005238 <ethernetif_update_config+0xf4>)
 800518c:	f7fc fb01 	bl	8001792 <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 8005190:	f7fb fd90 	bl	8000cb4 <HAL_GetTick>
 8005194:	4602      	mov	r2, r0
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	1ad3      	subs	r3, r2, r3
 800519a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800519e:	d828      	bhi.n	80051f2 <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 80051a0:	68bb      	ldr	r3, [r7, #8]
 80051a2:	f003 0320 	and.w	r3, r3, #32
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d0eb      	beq.n	8005182 <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 80051aa:	f107 0308 	add.w	r3, r7, #8
 80051ae:	461a      	mov	r2, r3
 80051b0:	211f      	movs	r1, #31
 80051b2:	4821      	ldr	r0, [pc, #132]	; (8005238 <ethernetif_update_config+0xf4>)
 80051b4:	f7fc faed 	bl	8001792 <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 80051b8:	68bb      	ldr	r3, [r7, #8]
 80051ba:	f003 0310 	and.w	r3, r3, #16
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d004      	beq.n	80051cc <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 80051c2:	4b1d      	ldr	r3, [pc, #116]	; (8005238 <ethernetif_update_config+0xf4>)
 80051c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80051c8:	60da      	str	r2, [r3, #12]
 80051ca:	e002      	b.n	80051d2 <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 80051cc:	4b1a      	ldr	r3, [pc, #104]	; (8005238 <ethernetif_update_config+0xf4>)
 80051ce:	2200      	movs	r2, #0
 80051d0:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 80051d2:	68bb      	ldr	r3, [r7, #8]
 80051d4:	f003 0304 	and.w	r3, r3, #4
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d003      	beq.n	80051e4 <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 80051dc:	4b16      	ldr	r3, [pc, #88]	; (8005238 <ethernetif_update_config+0xf4>)
 80051de:	2200      	movs	r2, #0
 80051e0:	609a      	str	r2, [r3, #8]
 80051e2:	e016      	b.n	8005212 <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 80051e4:	4b14      	ldr	r3, [pc, #80]	; (8005238 <ethernetif_update_config+0xf4>)
 80051e6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80051ea:	609a      	str	r2, [r3, #8]
 80051ec:	e011      	b.n	8005212 <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 80051ee:	bf00      	nop
 80051f0:	e000      	b.n	80051f4 <ethernetif_update_config+0xb0>
          goto error;
 80051f2:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 80051f4:	4b10      	ldr	r3, [pc, #64]	; (8005238 <ethernetif_update_config+0xf4>)
 80051f6:	68db      	ldr	r3, [r3, #12]
 80051f8:	08db      	lsrs	r3, r3, #3
 80051fa:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 80051fc:	4b0e      	ldr	r3, [pc, #56]	; (8005238 <ethernetif_update_config+0xf4>)
 80051fe:	689b      	ldr	r3, [r3, #8]
 8005200:	085b      	lsrs	r3, r3, #1
 8005202:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8005204:	4313      	orrs	r3, r2
 8005206:	b29b      	uxth	r3, r3
 8005208:	461a      	mov	r2, r3
 800520a:	2100      	movs	r1, #0
 800520c:	480a      	ldr	r0, [pc, #40]	; (8005238 <ethernetif_update_config+0xf4>)
 800520e:	f7fc fb28 	bl	8001862 <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 8005212:	2100      	movs	r1, #0
 8005214:	4808      	ldr	r0, [pc, #32]	; (8005238 <ethernetif_update_config+0xf4>)
 8005216:	f7fc fbe9 	bl	80019ec <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 800521a:	4807      	ldr	r0, [pc, #28]	; (8005238 <ethernetif_update_config+0xf4>)
 800521c:	f7fc fb87 	bl	800192e <HAL_ETH_Start>
 8005220:	e002      	b.n	8005228 <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 8005222:	4805      	ldr	r0, [pc, #20]	; (8005238 <ethernetif_update_config+0xf4>)
 8005224:	f7fc fbb2 	bl	800198c <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 8005228:	6878      	ldr	r0, [r7, #4]
 800522a:	f000 f807 	bl	800523c <ethernetif_notify_conn_changed>
}
 800522e:	bf00      	nop
 8005230:	3710      	adds	r7, #16
 8005232:	46bd      	mov	sp, r7
 8005234:	bd80      	pop	{r7, pc}
 8005236:	bf00      	nop
 8005238:	200062ac 	.word	0x200062ac

0800523c <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 800523c:	b480      	push	{r7}
 800523e:	b083      	sub	sp, #12
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 8005244:	bf00      	nop
 8005246:	370c      	adds	r7, #12
 8005248:	46bd      	mov	sp, r7
 800524a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524e:	4770      	bx	lr

08005250 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005250:	b480      	push	{r7}
 8005252:	b085      	sub	sp, #20
 8005254:	af00      	add	r7, sp, #0
 8005256:	4603      	mov	r3, r0
 8005258:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800525a:	2300      	movs	r3, #0
 800525c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800525e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005262:	2b84      	cmp	r3, #132	; 0x84
 8005264:	d005      	beq.n	8005272 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8005266:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	4413      	add	r3, r2
 800526e:	3303      	adds	r3, #3
 8005270:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8005272:	68fb      	ldr	r3, [r7, #12]
}
 8005274:	4618      	mov	r0, r3
 8005276:	3714      	adds	r7, #20
 8005278:	46bd      	mov	sp, r7
 800527a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527e:	4770      	bx	lr

08005280 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8005280:	b480      	push	{r7}
 8005282:	b083      	sub	sp, #12
 8005284:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005286:	f3ef 8305 	mrs	r3, IPSR
 800528a:	607b      	str	r3, [r7, #4]
  return(result);
 800528c:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800528e:	2b00      	cmp	r3, #0
 8005290:	bf14      	ite	ne
 8005292:	2301      	movne	r3, #1
 8005294:	2300      	moveq	r3, #0
 8005296:	b2db      	uxtb	r3, r3
}
 8005298:	4618      	mov	r0, r3
 800529a:	370c      	adds	r7, #12
 800529c:	46bd      	mov	sp, r7
 800529e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a2:	4770      	bx	lr

080052a4 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 80052a8:	f7ff ffea 	bl	8005280 <inHandlerMode>
 80052ac:	4603      	mov	r3, r0
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d003      	beq.n	80052ba <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 80052b2:	f001 fec5 	bl	8007040 <xTaskGetTickCountFromISR>
 80052b6:	4603      	mov	r3, r0
 80052b8:	e002      	b.n	80052c0 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 80052ba:	f001 feb1 	bl	8007020 <xTaskGetTickCount>
 80052be:	4603      	mov	r3, r0
  }
}
 80052c0:	4618      	mov	r0, r3
 80052c2:	bd80      	pop	{r7, pc}

080052c4 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80052c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80052c6:	b089      	sub	sp, #36	; 0x24
 80052c8:	af04      	add	r7, sp, #16
 80052ca:	6078      	str	r0, [r7, #4]
 80052cc:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	695b      	ldr	r3, [r3, #20]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d020      	beq.n	8005318 <osThreadCreate+0x54>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	699b      	ldr	r3, [r3, #24]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d01c      	beq.n	8005318 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	685c      	ldr	r4, [r3, #4]
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681d      	ldr	r5, [r3, #0]
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	691e      	ldr	r6, [r3, #16]
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80052f0:	4618      	mov	r0, r3
 80052f2:	f7ff ffad 	bl	8005250 <makeFreeRtosPriority>
 80052f6:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	695b      	ldr	r3, [r3, #20]
 80052fc:	687a      	ldr	r2, [r7, #4]
 80052fe:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005300:	9202      	str	r2, [sp, #8]
 8005302:	9301      	str	r3, [sp, #4]
 8005304:	9100      	str	r1, [sp, #0]
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	4632      	mov	r2, r6
 800530a:	4629      	mov	r1, r5
 800530c:	4620      	mov	r0, r4
 800530e:	f001 fba5 	bl	8006a5c <xTaskCreateStatic>
 8005312:	4603      	mov	r3, r0
 8005314:	60fb      	str	r3, [r7, #12]
 8005316:	e01c      	b.n	8005352 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	685c      	ldr	r4, [r3, #4]
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005324:	b29e      	uxth	r6, r3
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800532c:	4618      	mov	r0, r3
 800532e:	f7ff ff8f 	bl	8005250 <makeFreeRtosPriority>
 8005332:	4602      	mov	r2, r0
 8005334:	f107 030c 	add.w	r3, r7, #12
 8005338:	9301      	str	r3, [sp, #4]
 800533a:	9200      	str	r2, [sp, #0]
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	4632      	mov	r2, r6
 8005340:	4629      	mov	r1, r5
 8005342:	4620      	mov	r0, r4
 8005344:	f001 fbea 	bl	8006b1c <xTaskCreate>
 8005348:	4603      	mov	r3, r0
 800534a:	2b01      	cmp	r3, #1
 800534c:	d001      	beq.n	8005352 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800534e:	2300      	movs	r3, #0
 8005350:	e000      	b.n	8005354 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005352:	68fb      	ldr	r3, [r7, #12]
}
 8005354:	4618      	mov	r0, r3
 8005356:	3714      	adds	r7, #20
 8005358:	46bd      	mov	sp, r7
 800535a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800535c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800535c:	b580      	push	{r7, lr}
 800535e:	b084      	sub	sp, #16
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d001      	beq.n	8005372 <osDelay+0x16>
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	e000      	b.n	8005374 <osDelay+0x18>
 8005372:	2301      	movs	r3, #1
 8005374:	4618      	mov	r0, r3
 8005376:	f001 fd09 	bl	8006d8c <vTaskDelay>
  
  return osOK;
 800537a:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800537c:	4618      	mov	r0, r3
 800537e:	3710      	adds	r7, #16
 8005380:	46bd      	mov	sp, r7
 8005382:	bd80      	pop	{r7, pc}

08005384 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8005384:	b580      	push	{r7, lr}
 8005386:	b082      	sub	sp, #8
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	685b      	ldr	r3, [r3, #4]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d007      	beq.n	80053a4 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	685b      	ldr	r3, [r3, #4]
 8005398:	4619      	mov	r1, r3
 800539a:	2001      	movs	r0, #1
 800539c:	f000 fc8d 	bl	8005cba <xQueueCreateMutexStatic>
 80053a0:	4603      	mov	r3, r0
 80053a2:	e003      	b.n	80053ac <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 80053a4:	2001      	movs	r0, #1
 80053a6:	f000 fc70 	bl	8005c8a <xQueueCreateMutex>
 80053aa:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 80053ac:	4618      	mov	r0, r3
 80053ae:	3708      	adds	r7, #8
 80053b0:	46bd      	mov	sp, r7
 80053b2:	bd80      	pop	{r7, pc}

080053b4 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b084      	sub	sp, #16
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
 80053bc:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80053be:	2300      	movs	r3, #0
 80053c0:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d101      	bne.n	80053cc <osMutexWait+0x18>
    return osErrorParameter;
 80053c8:	2380      	movs	r3, #128	; 0x80
 80053ca:	e03a      	b.n	8005442 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 80053cc:	2300      	movs	r3, #0
 80053ce:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053d6:	d103      	bne.n	80053e0 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 80053d8:	f04f 33ff 	mov.w	r3, #4294967295
 80053dc:	60fb      	str	r3, [r7, #12]
 80053de:	e009      	b.n	80053f4 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d006      	beq.n	80053f4 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d101      	bne.n	80053f4 <osMutexWait+0x40>
      ticks = 1;
 80053f0:	2301      	movs	r3, #1
 80053f2:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80053f4:	f7ff ff44 	bl	8005280 <inHandlerMode>
 80053f8:	4603      	mov	r3, r0
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d017      	beq.n	800542e <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80053fe:	f107 0308 	add.w	r3, r7, #8
 8005402:	461a      	mov	r2, r3
 8005404:	2100      	movs	r1, #0
 8005406:	6878      	ldr	r0, [r7, #4]
 8005408:	f001 f894 	bl	8006534 <xQueueReceiveFromISR>
 800540c:	4603      	mov	r3, r0
 800540e:	2b01      	cmp	r3, #1
 8005410:	d001      	beq.n	8005416 <osMutexWait+0x62>
      return osErrorOS;
 8005412:	23ff      	movs	r3, #255	; 0xff
 8005414:	e015      	b.n	8005442 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8005416:	68bb      	ldr	r3, [r7, #8]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d011      	beq.n	8005440 <osMutexWait+0x8c>
 800541c:	4b0b      	ldr	r3, [pc, #44]	; (800544c <osMutexWait+0x98>)
 800541e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005422:	601a      	str	r2, [r3, #0]
 8005424:	f3bf 8f4f 	dsb	sy
 8005428:	f3bf 8f6f 	isb	sy
 800542c:	e008      	b.n	8005440 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800542e:	68f9      	ldr	r1, [r7, #12]
 8005430:	6878      	ldr	r0, [r7, #4]
 8005432:	f000 ff6f 	bl	8006314 <xQueueSemaphoreTake>
 8005436:	4603      	mov	r3, r0
 8005438:	2b01      	cmp	r3, #1
 800543a:	d001      	beq.n	8005440 <osMutexWait+0x8c>
    return osErrorOS;
 800543c:	23ff      	movs	r3, #255	; 0xff
 800543e:	e000      	b.n	8005442 <osMutexWait+0x8e>
  }
  
  return osOK;
 8005440:	2300      	movs	r3, #0
}
 8005442:	4618      	mov	r0, r3
 8005444:	3710      	adds	r7, #16
 8005446:	46bd      	mov	sp, r7
 8005448:	bd80      	pop	{r7, pc}
 800544a:	bf00      	nop
 800544c:	e000ed04 	.word	0xe000ed04

08005450 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b084      	sub	sp, #16
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8005458:	2300      	movs	r3, #0
 800545a:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800545c:	2300      	movs	r3, #0
 800545e:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8005460:	f7ff ff0e 	bl	8005280 <inHandlerMode>
 8005464:	4603      	mov	r3, r0
 8005466:	2b00      	cmp	r3, #0
 8005468:	d016      	beq.n	8005498 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800546a:	f107 0308 	add.w	r3, r7, #8
 800546e:	4619      	mov	r1, r3
 8005470:	6878      	ldr	r0, [r7, #4]
 8005472:	f000 fddb 	bl	800602c <xQueueGiveFromISR>
 8005476:	4603      	mov	r3, r0
 8005478:	2b01      	cmp	r3, #1
 800547a:	d001      	beq.n	8005480 <osMutexRelease+0x30>
      return osErrorOS;
 800547c:	23ff      	movs	r3, #255	; 0xff
 800547e:	e017      	b.n	80054b0 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005480:	68bb      	ldr	r3, [r7, #8]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d013      	beq.n	80054ae <osMutexRelease+0x5e>
 8005486:	4b0c      	ldr	r3, [pc, #48]	; (80054b8 <osMutexRelease+0x68>)
 8005488:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800548c:	601a      	str	r2, [r3, #0]
 800548e:	f3bf 8f4f 	dsb	sy
 8005492:	f3bf 8f6f 	isb	sy
 8005496:	e00a      	b.n	80054ae <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8005498:	2300      	movs	r3, #0
 800549a:	2200      	movs	r2, #0
 800549c:	2100      	movs	r1, #0
 800549e:	6878      	ldr	r0, [r7, #4]
 80054a0:	f000 fc26 	bl	8005cf0 <xQueueGenericSend>
 80054a4:	4603      	mov	r3, r0
 80054a6:	2b01      	cmp	r3, #1
 80054a8:	d001      	beq.n	80054ae <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 80054aa:	23ff      	movs	r3, #255	; 0xff
 80054ac:	60fb      	str	r3, [r7, #12]
  }
  return result;
 80054ae:	68fb      	ldr	r3, [r7, #12]
}
 80054b0:	4618      	mov	r0, r3
 80054b2:	3710      	adds	r7, #16
 80054b4:	46bd      	mov	sp, r7
 80054b6:	bd80      	pop	{r7, pc}
 80054b8:	e000ed04 	.word	0xe000ed04

080054bc <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 80054bc:	b580      	push	{r7, lr}
 80054be:	b086      	sub	sp, #24
 80054c0:	af02      	add	r7, sp, #8
 80054c2:	6078      	str	r0, [r7, #4]
 80054c4:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	685b      	ldr	r3, [r3, #4]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d010      	beq.n	80054f0 <osSemaphoreCreate+0x34>
    if (count == 1) {
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	2b01      	cmp	r3, #1
 80054d2:	d10b      	bne.n	80054ec <osSemaphoreCreate+0x30>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	685a      	ldr	r2, [r3, #4]
 80054d8:	2303      	movs	r3, #3
 80054da:	9300      	str	r3, [sp, #0]
 80054dc:	4613      	mov	r3, r2
 80054de:	2200      	movs	r2, #0
 80054e0:	2100      	movs	r1, #0
 80054e2:	2001      	movs	r0, #1
 80054e4:	f000 fada 	bl	8005a9c <xQueueGenericCreateStatic>
 80054e8:	4603      	mov	r3, r0
 80054ea:	e016      	b.n	800551a <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 80054ec:	2300      	movs	r3, #0
 80054ee:	e014      	b.n	800551a <osSemaphoreCreate+0x5e>
#endif
    }
  }
  else {
    if (count == 1) {
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	2b01      	cmp	r3, #1
 80054f4:	d110      	bne.n	8005518 <osSemaphoreCreate+0x5c>
      vSemaphoreCreateBinary(sema);
 80054f6:	2203      	movs	r2, #3
 80054f8:	2100      	movs	r1, #0
 80054fa:	2001      	movs	r0, #1
 80054fc:	f000 fb4b 	bl	8005b96 <xQueueGenericCreate>
 8005500:	60f8      	str	r0, [r7, #12]
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d005      	beq.n	8005514 <osSemaphoreCreate+0x58>
 8005508:	2300      	movs	r3, #0
 800550a:	2200      	movs	r2, #0
 800550c:	2100      	movs	r1, #0
 800550e:	68f8      	ldr	r0, [r7, #12]
 8005510:	f000 fbee 	bl	8005cf0 <xQueueGenericSend>
      return sema;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	e000      	b.n	800551a <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8005518:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800551a:	4618      	mov	r0, r3
 800551c:	3710      	adds	r7, #16
 800551e:	46bd      	mov	sp, r7
 8005520:	bd80      	pop	{r7, pc}
	...

08005524 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8005524:	b580      	push	{r7, lr}
 8005526:	b084      	sub	sp, #16
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
 800552c:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800552e:	2300      	movs	r3, #0
 8005530:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d101      	bne.n	800553c <osSemaphoreWait+0x18>
    return osErrorParameter;
 8005538:	2380      	movs	r3, #128	; 0x80
 800553a:	e03a      	b.n	80055b2 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800553c:	2300      	movs	r3, #0
 800553e:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005546:	d103      	bne.n	8005550 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8005548:	f04f 33ff 	mov.w	r3, #4294967295
 800554c:	60fb      	str	r3, [r7, #12]
 800554e:	e009      	b.n	8005564 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d006      	beq.n	8005564 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d101      	bne.n	8005564 <osSemaphoreWait+0x40>
      ticks = 1;
 8005560:	2301      	movs	r3, #1
 8005562:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8005564:	f7ff fe8c 	bl	8005280 <inHandlerMode>
 8005568:	4603      	mov	r3, r0
 800556a:	2b00      	cmp	r3, #0
 800556c:	d017      	beq.n	800559e <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800556e:	f107 0308 	add.w	r3, r7, #8
 8005572:	461a      	mov	r2, r3
 8005574:	2100      	movs	r1, #0
 8005576:	6878      	ldr	r0, [r7, #4]
 8005578:	f000 ffdc 	bl	8006534 <xQueueReceiveFromISR>
 800557c:	4603      	mov	r3, r0
 800557e:	2b01      	cmp	r3, #1
 8005580:	d001      	beq.n	8005586 <osSemaphoreWait+0x62>
      return osErrorOS;
 8005582:	23ff      	movs	r3, #255	; 0xff
 8005584:	e015      	b.n	80055b2 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8005586:	68bb      	ldr	r3, [r7, #8]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d011      	beq.n	80055b0 <osSemaphoreWait+0x8c>
 800558c:	4b0b      	ldr	r3, [pc, #44]	; (80055bc <osSemaphoreWait+0x98>)
 800558e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005592:	601a      	str	r2, [r3, #0]
 8005594:	f3bf 8f4f 	dsb	sy
 8005598:	f3bf 8f6f 	isb	sy
 800559c:	e008      	b.n	80055b0 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800559e:	68f9      	ldr	r1, [r7, #12]
 80055a0:	6878      	ldr	r0, [r7, #4]
 80055a2:	f000 feb7 	bl	8006314 <xQueueSemaphoreTake>
 80055a6:	4603      	mov	r3, r0
 80055a8:	2b01      	cmp	r3, #1
 80055aa:	d001      	beq.n	80055b0 <osSemaphoreWait+0x8c>
    return osErrorOS;
 80055ac:	23ff      	movs	r3, #255	; 0xff
 80055ae:	e000      	b.n	80055b2 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 80055b0:	2300      	movs	r3, #0
}
 80055b2:	4618      	mov	r0, r3
 80055b4:	3710      	adds	r7, #16
 80055b6:	46bd      	mov	sp, r7
 80055b8:	bd80      	pop	{r7, pc}
 80055ba:	bf00      	nop
 80055bc:	e000ed04 	.word	0xe000ed04

080055c0 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b084      	sub	sp, #16
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80055c8:	2300      	movs	r3, #0
 80055ca:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 80055cc:	2300      	movs	r3, #0
 80055ce:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 80055d0:	f7ff fe56 	bl	8005280 <inHandlerMode>
 80055d4:	4603      	mov	r3, r0
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d016      	beq.n	8005608 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80055da:	f107 0308 	add.w	r3, r7, #8
 80055de:	4619      	mov	r1, r3
 80055e0:	6878      	ldr	r0, [r7, #4]
 80055e2:	f000 fd23 	bl	800602c <xQueueGiveFromISR>
 80055e6:	4603      	mov	r3, r0
 80055e8:	2b01      	cmp	r3, #1
 80055ea:	d001      	beq.n	80055f0 <osSemaphoreRelease+0x30>
      return osErrorOS;
 80055ec:	23ff      	movs	r3, #255	; 0xff
 80055ee:	e017      	b.n	8005620 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80055f0:	68bb      	ldr	r3, [r7, #8]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d013      	beq.n	800561e <osSemaphoreRelease+0x5e>
 80055f6:	4b0c      	ldr	r3, [pc, #48]	; (8005628 <osSemaphoreRelease+0x68>)
 80055f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80055fc:	601a      	str	r2, [r3, #0]
 80055fe:	f3bf 8f4f 	dsb	sy
 8005602:	f3bf 8f6f 	isb	sy
 8005606:	e00a      	b.n	800561e <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8005608:	2300      	movs	r3, #0
 800560a:	2200      	movs	r2, #0
 800560c:	2100      	movs	r1, #0
 800560e:	6878      	ldr	r0, [r7, #4]
 8005610:	f000 fb6e 	bl	8005cf0 <xQueueGenericSend>
 8005614:	4603      	mov	r3, r0
 8005616:	2b01      	cmp	r3, #1
 8005618:	d001      	beq.n	800561e <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800561a:	23ff      	movs	r3, #255	; 0xff
 800561c:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800561e:	68fb      	ldr	r3, [r7, #12]
}
 8005620:	4618      	mov	r0, r3
 8005622:	3710      	adds	r7, #16
 8005624:	46bd      	mov	sp, r7
 8005626:	bd80      	pop	{r7, pc}
 8005628:	e000ed04 	.word	0xe000ed04

0800562c <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 800562c:	b580      	push	{r7, lr}
 800562e:	b082      	sub	sp, #8
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8005634:	f7ff fe24 	bl	8005280 <inHandlerMode>
 8005638:	4603      	mov	r3, r0
 800563a:	2b00      	cmp	r3, #0
 800563c:	d001      	beq.n	8005642 <osSemaphoreDelete+0x16>
    return osErrorISR;
 800563e:	2382      	movs	r3, #130	; 0x82
 8005640:	e003      	b.n	800564a <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 8005642:	6878      	ldr	r0, [r7, #4]
 8005644:	f001 f837 	bl	80066b6 <vQueueDelete>

  return osOK; 
 8005648:	2300      	movs	r3, #0
}
 800564a:	4618      	mov	r0, r3
 800564c:	3708      	adds	r7, #8
 800564e:	46bd      	mov	sp, r7
 8005650:	bd80      	pop	{r7, pc}

08005652 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8005652:	b590      	push	{r4, r7, lr}
 8005654:	b085      	sub	sp, #20
 8005656:	af02      	add	r7, sp, #8
 8005658:	6078      	str	r0, [r7, #4]
 800565a:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	689b      	ldr	r3, [r3, #8]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d012      	beq.n	800568a <osMessageCreate+0x38>
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	68db      	ldr	r3, [r3, #12]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d00e      	beq.n	800568a <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	6818      	ldr	r0, [r3, #0]
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6859      	ldr	r1, [r3, #4]
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	689a      	ldr	r2, [r3, #8]
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	68dc      	ldr	r4, [r3, #12]
 800567c:	2300      	movs	r3, #0
 800567e:	9300      	str	r3, [sp, #0]
 8005680:	4623      	mov	r3, r4
 8005682:	f000 fa0b 	bl	8005a9c <xQueueGenericCreateStatic>
 8005686:	4603      	mov	r3, r0
 8005688:	e008      	b.n	800569c <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6818      	ldr	r0, [r3, #0]
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	685b      	ldr	r3, [r3, #4]
 8005692:	2200      	movs	r2, #0
 8005694:	4619      	mov	r1, r3
 8005696:	f000 fa7e 	bl	8005b96 <xQueueGenericCreate>
 800569a:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800569c:	4618      	mov	r0, r3
 800569e:	370c      	adds	r7, #12
 80056a0:	46bd      	mov	sp, r7
 80056a2:	bd90      	pop	{r4, r7, pc}

080056a4 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b086      	sub	sp, #24
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	60f8      	str	r0, [r7, #12]
 80056ac:	60b9      	str	r1, [r7, #8]
 80056ae:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 80056b0:	2300      	movs	r3, #0
 80056b2:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 80056b8:	697b      	ldr	r3, [r7, #20]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d101      	bne.n	80056c2 <osMessagePut+0x1e>
    ticks = 1;
 80056be:	2301      	movs	r3, #1
 80056c0:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 80056c2:	f7ff fddd 	bl	8005280 <inHandlerMode>
 80056c6:	4603      	mov	r3, r0
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d018      	beq.n	80056fe <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 80056cc:	f107 0210 	add.w	r2, r7, #16
 80056d0:	f107 0108 	add.w	r1, r7, #8
 80056d4:	2300      	movs	r3, #0
 80056d6:	68f8      	ldr	r0, [r7, #12]
 80056d8:	f000 fc0c 	bl	8005ef4 <xQueueGenericSendFromISR>
 80056dc:	4603      	mov	r3, r0
 80056de:	2b01      	cmp	r3, #1
 80056e0:	d001      	beq.n	80056e6 <osMessagePut+0x42>
      return osErrorOS;
 80056e2:	23ff      	movs	r3, #255	; 0xff
 80056e4:	e018      	b.n	8005718 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80056e6:	693b      	ldr	r3, [r7, #16]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d014      	beq.n	8005716 <osMessagePut+0x72>
 80056ec:	4b0c      	ldr	r3, [pc, #48]	; (8005720 <osMessagePut+0x7c>)
 80056ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056f2:	601a      	str	r2, [r3, #0]
 80056f4:	f3bf 8f4f 	dsb	sy
 80056f8:	f3bf 8f6f 	isb	sy
 80056fc:	e00b      	b.n	8005716 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 80056fe:	f107 0108 	add.w	r1, r7, #8
 8005702:	2300      	movs	r3, #0
 8005704:	697a      	ldr	r2, [r7, #20]
 8005706:	68f8      	ldr	r0, [r7, #12]
 8005708:	f000 faf2 	bl	8005cf0 <xQueueGenericSend>
 800570c:	4603      	mov	r3, r0
 800570e:	2b01      	cmp	r3, #1
 8005710:	d001      	beq.n	8005716 <osMessagePut+0x72>
      return osErrorOS;
 8005712:	23ff      	movs	r3, #255	; 0xff
 8005714:	e000      	b.n	8005718 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8005716:	2300      	movs	r3, #0
}
 8005718:	4618      	mov	r0, r3
 800571a:	3718      	adds	r7, #24
 800571c:	46bd      	mov	sp, r7
 800571e:	bd80      	pop	{r7, pc}
 8005720:	e000ed04 	.word	0xe000ed04

08005724 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8005724:	b590      	push	{r4, r7, lr}
 8005726:	b08b      	sub	sp, #44	; 0x2c
 8005728:	af00      	add	r7, sp, #0
 800572a:	60f8      	str	r0, [r7, #12]
 800572c:	60b9      	str	r1, [r7, #8]
 800572e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8005730:	68bb      	ldr	r3, [r7, #8]
 8005732:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8005734:	2300      	movs	r3, #0
 8005736:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8005738:	68bb      	ldr	r3, [r7, #8]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d10a      	bne.n	8005754 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800573e:	2380      	movs	r3, #128	; 0x80
 8005740:	617b      	str	r3, [r7, #20]
    return event;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	461c      	mov	r4, r3
 8005746:	f107 0314 	add.w	r3, r7, #20
 800574a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800574e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005752:	e054      	b.n	80057fe <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8005754:	2300      	movs	r3, #0
 8005756:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8005758:	2300      	movs	r3, #0
 800575a:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005762:	d103      	bne.n	800576c <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8005764:	f04f 33ff 	mov.w	r3, #4294967295
 8005768:	627b      	str	r3, [r7, #36]	; 0x24
 800576a:	e009      	b.n	8005780 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d006      	beq.n	8005780 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8005776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005778:	2b00      	cmp	r3, #0
 800577a:	d101      	bne.n	8005780 <osMessageGet+0x5c>
      ticks = 1;
 800577c:	2301      	movs	r3, #1
 800577e:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8005780:	f7ff fd7e 	bl	8005280 <inHandlerMode>
 8005784:	4603      	mov	r3, r0
 8005786:	2b00      	cmp	r3, #0
 8005788:	d01c      	beq.n	80057c4 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800578a:	f107 0220 	add.w	r2, r7, #32
 800578e:	f107 0314 	add.w	r3, r7, #20
 8005792:	3304      	adds	r3, #4
 8005794:	4619      	mov	r1, r3
 8005796:	68b8      	ldr	r0, [r7, #8]
 8005798:	f000 fecc 	bl	8006534 <xQueueReceiveFromISR>
 800579c:	4603      	mov	r3, r0
 800579e:	2b01      	cmp	r3, #1
 80057a0:	d102      	bne.n	80057a8 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 80057a2:	2310      	movs	r3, #16
 80057a4:	617b      	str	r3, [r7, #20]
 80057a6:	e001      	b.n	80057ac <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 80057a8:	2300      	movs	r3, #0
 80057aa:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 80057ac:	6a3b      	ldr	r3, [r7, #32]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d01d      	beq.n	80057ee <osMessageGet+0xca>
 80057b2:	4b15      	ldr	r3, [pc, #84]	; (8005808 <osMessageGet+0xe4>)
 80057b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80057b8:	601a      	str	r2, [r3, #0]
 80057ba:	f3bf 8f4f 	dsb	sy
 80057be:	f3bf 8f6f 	isb	sy
 80057c2:	e014      	b.n	80057ee <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 80057c4:	f107 0314 	add.w	r3, r7, #20
 80057c8:	3304      	adds	r3, #4
 80057ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057cc:	4619      	mov	r1, r3
 80057ce:	68b8      	ldr	r0, [r7, #8]
 80057d0:	f000 fcbe 	bl	8006150 <xQueueReceive>
 80057d4:	4603      	mov	r3, r0
 80057d6:	2b01      	cmp	r3, #1
 80057d8:	d102      	bne.n	80057e0 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 80057da:	2310      	movs	r3, #16
 80057dc:	617b      	str	r3, [r7, #20]
 80057de:	e006      	b.n	80057ee <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 80057e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d101      	bne.n	80057ea <osMessageGet+0xc6>
 80057e6:	2300      	movs	r3, #0
 80057e8:	e000      	b.n	80057ec <osMessageGet+0xc8>
 80057ea:	2340      	movs	r3, #64	; 0x40
 80057ec:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	461c      	mov	r4, r3
 80057f2:	f107 0314 	add.w	r3, r7, #20
 80057f6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80057fa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80057fe:	68f8      	ldr	r0, [r7, #12]
 8005800:	372c      	adds	r7, #44	; 0x2c
 8005802:	46bd      	mov	sp, r7
 8005804:	bd90      	pop	{r4, r7, pc}
 8005806:	bf00      	nop
 8005808:	e000ed04 	.word	0xe000ed04

0800580c <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 800580c:	b580      	push	{r7, lr}
 800580e:	b082      	sub	sp, #8
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8005814:	f7ff fd34 	bl	8005280 <inHandlerMode>
 8005818:	4603      	mov	r3, r0
 800581a:	2b00      	cmp	r3, #0
 800581c:	d004      	beq.n	8005828 <osMessageWaiting+0x1c>
    return uxQueueMessagesWaitingFromISR(queue_id);
 800581e:	6878      	ldr	r0, [r7, #4]
 8005820:	f000 ff2a 	bl	8006678 <uxQueueMessagesWaitingFromISR>
 8005824:	4603      	mov	r3, r0
 8005826:	e003      	b.n	8005830 <osMessageWaiting+0x24>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 8005828:	6878      	ldr	r0, [r7, #4]
 800582a:	f000 ff06 	bl	800663a <uxQueueMessagesWaiting>
 800582e:	4603      	mov	r3, r0
  }
}
 8005830:	4618      	mov	r0, r3
 8005832:	3708      	adds	r7, #8
 8005834:	46bd      	mov	sp, r7
 8005836:	bd80      	pop	{r7, pc}

08005838 <osMessageDelete>:
* @brief Delete a Message Queue
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osMessageDelete (osMessageQId queue_id)
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b082      	sub	sp, #8
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8005840:	f7ff fd1e 	bl	8005280 <inHandlerMode>
 8005844:	4603      	mov	r3, r0
 8005846:	2b00      	cmp	r3, #0
 8005848:	d001      	beq.n	800584e <osMessageDelete+0x16>
    return osErrorISR;
 800584a:	2382      	movs	r3, #130	; 0x82
 800584c:	e003      	b.n	8005856 <osMessageDelete+0x1e>
  }

  vQueueDelete(queue_id);
 800584e:	6878      	ldr	r0, [r7, #4]
 8005850:	f000 ff31 	bl	80066b6 <vQueueDelete>

  return osOK; 
 8005854:	2300      	movs	r3, #0
}
 8005856:	4618      	mov	r0, r3
 8005858:	3708      	adds	r7, #8
 800585a:	46bd      	mov	sp, r7
 800585c:	bd80      	pop	{r7, pc}

0800585e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800585e:	b480      	push	{r7}
 8005860:	b083      	sub	sp, #12
 8005862:	af00      	add	r7, sp, #0
 8005864:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	f103 0208 	add.w	r2, r3, #8
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	f04f 32ff 	mov.w	r2, #4294967295
 8005876:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	f103 0208 	add.w	r2, r3, #8
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	f103 0208 	add.w	r2, r3, #8
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2200      	movs	r2, #0
 8005890:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005892:	bf00      	nop
 8005894:	370c      	adds	r7, #12
 8005896:	46bd      	mov	sp, r7
 8005898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589c:	4770      	bx	lr

0800589e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800589e:	b480      	push	{r7}
 80058a0:	b083      	sub	sp, #12
 80058a2:	af00      	add	r7, sp, #0
 80058a4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2200      	movs	r2, #0
 80058aa:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80058ac:	bf00      	nop
 80058ae:	370c      	adds	r7, #12
 80058b0:	46bd      	mov	sp, r7
 80058b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b6:	4770      	bx	lr

080058b8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80058b8:	b480      	push	{r7}
 80058ba:	b085      	sub	sp, #20
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
 80058c0:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	685b      	ldr	r3, [r3, #4]
 80058c6:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	68fa      	ldr	r2, [r7, #12]
 80058cc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	689a      	ldr	r2, [r3, #8]
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	689b      	ldr	r3, [r3, #8]
 80058da:	683a      	ldr	r2, [r7, #0]
 80058dc:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	683a      	ldr	r2, [r7, #0]
 80058e2:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	687a      	ldr	r2, [r7, #4]
 80058e8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	1c5a      	adds	r2, r3, #1
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	601a      	str	r2, [r3, #0]
}
 80058f4:	bf00      	nop
 80058f6:	3714      	adds	r7, #20
 80058f8:	46bd      	mov	sp, r7
 80058fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fe:	4770      	bx	lr

08005900 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005900:	b480      	push	{r7}
 8005902:	b085      	sub	sp, #20
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
 8005908:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005910:	68bb      	ldr	r3, [r7, #8]
 8005912:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005916:	d103      	bne.n	8005920 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	691b      	ldr	r3, [r3, #16]
 800591c:	60fb      	str	r3, [r7, #12]
 800591e:	e00c      	b.n	800593a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	3308      	adds	r3, #8
 8005924:	60fb      	str	r3, [r7, #12]
 8005926:	e002      	b.n	800592e <vListInsert+0x2e>
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	685b      	ldr	r3, [r3, #4]
 800592c:	60fb      	str	r3, [r7, #12]
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	685b      	ldr	r3, [r3, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	68ba      	ldr	r2, [r7, #8]
 8005936:	429a      	cmp	r2, r3
 8005938:	d2f6      	bcs.n	8005928 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	685a      	ldr	r2, [r3, #4]
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	685b      	ldr	r3, [r3, #4]
 8005946:	683a      	ldr	r2, [r7, #0]
 8005948:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	68fa      	ldr	r2, [r7, #12]
 800594e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	683a      	ldr	r2, [r7, #0]
 8005954:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	687a      	ldr	r2, [r7, #4]
 800595a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	1c5a      	adds	r2, r3, #1
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	601a      	str	r2, [r3, #0]
}
 8005966:	bf00      	nop
 8005968:	3714      	adds	r7, #20
 800596a:	46bd      	mov	sp, r7
 800596c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005970:	4770      	bx	lr

08005972 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005972:	b480      	push	{r7}
 8005974:	b085      	sub	sp, #20
 8005976:	af00      	add	r7, sp, #0
 8005978:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	691b      	ldr	r3, [r3, #16]
 800597e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	685b      	ldr	r3, [r3, #4]
 8005984:	687a      	ldr	r2, [r7, #4]
 8005986:	6892      	ldr	r2, [r2, #8]
 8005988:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	689b      	ldr	r3, [r3, #8]
 800598e:	687a      	ldr	r2, [r7, #4]
 8005990:	6852      	ldr	r2, [r2, #4]
 8005992:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	685b      	ldr	r3, [r3, #4]
 8005998:	687a      	ldr	r2, [r7, #4]
 800599a:	429a      	cmp	r2, r3
 800599c:	d103      	bne.n	80059a6 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	689a      	ldr	r2, [r3, #8]
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2200      	movs	r2, #0
 80059aa:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	1e5a      	subs	r2, r3, #1
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	681b      	ldr	r3, [r3, #0]
}
 80059ba:	4618      	mov	r0, r3
 80059bc:	3714      	adds	r7, #20
 80059be:	46bd      	mov	sp, r7
 80059c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c4:	4770      	bx	lr
	...

080059c8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b084      	sub	sp, #16
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
 80059d0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d10b      	bne.n	80059f4 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80059dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059e0:	b672      	cpsid	i
 80059e2:	f383 8811 	msr	BASEPRI, r3
 80059e6:	f3bf 8f6f 	isb	sy
 80059ea:	f3bf 8f4f 	dsb	sy
 80059ee:	b662      	cpsie	i
 80059f0:	60bb      	str	r3, [r7, #8]
 80059f2:	e7fe      	b.n	80059f2 <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
 80059f4:	f002 fce0 	bl	80083b8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	681a      	ldr	r2, [r3, #0]
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a00:	68f9      	ldr	r1, [r7, #12]
 8005a02:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005a04:	fb01 f303 	mul.w	r3, r1, r3
 8005a08:	441a      	add	r2, r3
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	2200      	movs	r2, #0
 8005a12:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	681a      	ldr	r2, [r3, #0]
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	681a      	ldr	r2, [r3, #0]
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a24:	3b01      	subs	r3, #1
 8005a26:	68f9      	ldr	r1, [r7, #12]
 8005a28:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005a2a:	fb01 f303 	mul.w	r3, r1, r3
 8005a2e:	441a      	add	r2, r3
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	22ff      	movs	r2, #255	; 0xff
 8005a38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	22ff      	movs	r2, #255	; 0xff
 8005a40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d114      	bne.n	8005a74 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	691b      	ldr	r3, [r3, #16]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d01a      	beq.n	8005a88 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	3310      	adds	r3, #16
 8005a56:	4618      	mov	r0, r3
 8005a58:	f001 fc6c 	bl	8007334 <xTaskRemoveFromEventList>
 8005a5c:	4603      	mov	r3, r0
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d012      	beq.n	8005a88 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005a62:	4b0d      	ldr	r3, [pc, #52]	; (8005a98 <xQueueGenericReset+0xd0>)
 8005a64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a68:	601a      	str	r2, [r3, #0]
 8005a6a:	f3bf 8f4f 	dsb	sy
 8005a6e:	f3bf 8f6f 	isb	sy
 8005a72:	e009      	b.n	8005a88 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	3310      	adds	r3, #16
 8005a78:	4618      	mov	r0, r3
 8005a7a:	f7ff fef0 	bl	800585e <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	3324      	adds	r3, #36	; 0x24
 8005a82:	4618      	mov	r0, r3
 8005a84:	f7ff feeb 	bl	800585e <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005a88:	f002 fcc8 	bl	800841c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005a8c:	2301      	movs	r3, #1
}
 8005a8e:	4618      	mov	r0, r3
 8005a90:	3710      	adds	r7, #16
 8005a92:	46bd      	mov	sp, r7
 8005a94:	bd80      	pop	{r7, pc}
 8005a96:	bf00      	nop
 8005a98:	e000ed04 	.word	0xe000ed04

08005a9c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b08e      	sub	sp, #56	; 0x38
 8005aa0:	af02      	add	r7, sp, #8
 8005aa2:	60f8      	str	r0, [r7, #12]
 8005aa4:	60b9      	str	r1, [r7, #8]
 8005aa6:	607a      	str	r2, [r7, #4]
 8005aa8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d10b      	bne.n	8005ac8 <xQueueGenericCreateStatic+0x2c>
 8005ab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ab4:	b672      	cpsid	i
 8005ab6:	f383 8811 	msr	BASEPRI, r3
 8005aba:	f3bf 8f6f 	isb	sy
 8005abe:	f3bf 8f4f 	dsb	sy
 8005ac2:	b662      	cpsie	i
 8005ac4:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ac6:	e7fe      	b.n	8005ac6 <xQueueGenericCreateStatic+0x2a>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d10b      	bne.n	8005ae6 <xQueueGenericCreateStatic+0x4a>
 8005ace:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ad2:	b672      	cpsid	i
 8005ad4:	f383 8811 	msr	BASEPRI, r3
 8005ad8:	f3bf 8f6f 	isb	sy
 8005adc:	f3bf 8f4f 	dsb	sy
 8005ae0:	b662      	cpsie	i
 8005ae2:	627b      	str	r3, [r7, #36]	; 0x24
 8005ae4:	e7fe      	b.n	8005ae4 <xQueueGenericCreateStatic+0x48>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d002      	beq.n	8005af2 <xQueueGenericCreateStatic+0x56>
 8005aec:	68bb      	ldr	r3, [r7, #8]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d001      	beq.n	8005af6 <xQueueGenericCreateStatic+0x5a>
 8005af2:	2301      	movs	r3, #1
 8005af4:	e000      	b.n	8005af8 <xQueueGenericCreateStatic+0x5c>
 8005af6:	2300      	movs	r3, #0
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d10b      	bne.n	8005b14 <xQueueGenericCreateStatic+0x78>
 8005afc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b00:	b672      	cpsid	i
 8005b02:	f383 8811 	msr	BASEPRI, r3
 8005b06:	f3bf 8f6f 	isb	sy
 8005b0a:	f3bf 8f4f 	dsb	sy
 8005b0e:	b662      	cpsie	i
 8005b10:	623b      	str	r3, [r7, #32]
 8005b12:	e7fe      	b.n	8005b12 <xQueueGenericCreateStatic+0x76>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d102      	bne.n	8005b20 <xQueueGenericCreateStatic+0x84>
 8005b1a:	68bb      	ldr	r3, [r7, #8]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d101      	bne.n	8005b24 <xQueueGenericCreateStatic+0x88>
 8005b20:	2301      	movs	r3, #1
 8005b22:	e000      	b.n	8005b26 <xQueueGenericCreateStatic+0x8a>
 8005b24:	2300      	movs	r3, #0
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d10b      	bne.n	8005b42 <xQueueGenericCreateStatic+0xa6>
 8005b2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b2e:	b672      	cpsid	i
 8005b30:	f383 8811 	msr	BASEPRI, r3
 8005b34:	f3bf 8f6f 	isb	sy
 8005b38:	f3bf 8f4f 	dsb	sy
 8005b3c:	b662      	cpsie	i
 8005b3e:	61fb      	str	r3, [r7, #28]
 8005b40:	e7fe      	b.n	8005b40 <xQueueGenericCreateStatic+0xa4>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005b42:	2348      	movs	r3, #72	; 0x48
 8005b44:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005b46:	697b      	ldr	r3, [r7, #20]
 8005b48:	2b48      	cmp	r3, #72	; 0x48
 8005b4a:	d00b      	beq.n	8005b64 <xQueueGenericCreateStatic+0xc8>
 8005b4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b50:	b672      	cpsid	i
 8005b52:	f383 8811 	msr	BASEPRI, r3
 8005b56:	f3bf 8f6f 	isb	sy
 8005b5a:	f3bf 8f4f 	dsb	sy
 8005b5e:	b662      	cpsie	i
 8005b60:	61bb      	str	r3, [r7, #24]
 8005b62:	e7fe      	b.n	8005b62 <xQueueGenericCreateStatic+0xc6>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005b64:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005b6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d00d      	beq.n	8005b8c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005b70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b72:	2201      	movs	r2, #1
 8005b74:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005b78:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005b7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b7e:	9300      	str	r3, [sp, #0]
 8005b80:	4613      	mov	r3, r2
 8005b82:	687a      	ldr	r2, [r7, #4]
 8005b84:	68b9      	ldr	r1, [r7, #8]
 8005b86:	68f8      	ldr	r0, [r7, #12]
 8005b88:	f000 f846 	bl	8005c18 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005b8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005b8e:	4618      	mov	r0, r3
 8005b90:	3730      	adds	r7, #48	; 0x30
 8005b92:	46bd      	mov	sp, r7
 8005b94:	bd80      	pop	{r7, pc}

08005b96 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005b96:	b580      	push	{r7, lr}
 8005b98:	b08a      	sub	sp, #40	; 0x28
 8005b9a:	af02      	add	r7, sp, #8
 8005b9c:	60f8      	str	r0, [r7, #12]
 8005b9e:	60b9      	str	r1, [r7, #8]
 8005ba0:	4613      	mov	r3, r2
 8005ba2:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d10b      	bne.n	8005bc2 <xQueueGenericCreate+0x2c>
 8005baa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bae:	b672      	cpsid	i
 8005bb0:	f383 8811 	msr	BASEPRI, r3
 8005bb4:	f3bf 8f6f 	isb	sy
 8005bb8:	f3bf 8f4f 	dsb	sy
 8005bbc:	b662      	cpsie	i
 8005bbe:	613b      	str	r3, [r7, #16]
 8005bc0:	e7fe      	b.n	8005bc0 <xQueueGenericCreate+0x2a>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8005bc2:	68bb      	ldr	r3, [r7, #8]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d102      	bne.n	8005bce <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8005bc8:	2300      	movs	r3, #0
 8005bca:	61fb      	str	r3, [r7, #28]
 8005bcc:	e004      	b.n	8005bd8 <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	68ba      	ldr	r2, [r7, #8]
 8005bd2:	fb02 f303 	mul.w	r3, r2, r3
 8005bd6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005bd8:	69fb      	ldr	r3, [r7, #28]
 8005bda:	3348      	adds	r3, #72	; 0x48
 8005bdc:	4618      	mov	r0, r3
 8005bde:	f002 fd0d 	bl	80085fc <pvPortMalloc>
 8005be2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005be4:	69bb      	ldr	r3, [r7, #24]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d011      	beq.n	8005c0e <xQueueGenericCreate+0x78>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005bea:	69bb      	ldr	r3, [r7, #24]
 8005bec:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005bee:	697b      	ldr	r3, [r7, #20]
 8005bf0:	3348      	adds	r3, #72	; 0x48
 8005bf2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005bf4:	69bb      	ldr	r3, [r7, #24]
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005bfc:	79fa      	ldrb	r2, [r7, #7]
 8005bfe:	69bb      	ldr	r3, [r7, #24]
 8005c00:	9300      	str	r3, [sp, #0]
 8005c02:	4613      	mov	r3, r2
 8005c04:	697a      	ldr	r2, [r7, #20]
 8005c06:	68b9      	ldr	r1, [r7, #8]
 8005c08:	68f8      	ldr	r0, [r7, #12]
 8005c0a:	f000 f805 	bl	8005c18 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005c0e:	69bb      	ldr	r3, [r7, #24]
	}
 8005c10:	4618      	mov	r0, r3
 8005c12:	3720      	adds	r7, #32
 8005c14:	46bd      	mov	sp, r7
 8005c16:	bd80      	pop	{r7, pc}

08005c18 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b084      	sub	sp, #16
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	60f8      	str	r0, [r7, #12]
 8005c20:	60b9      	str	r1, [r7, #8]
 8005c22:	607a      	str	r2, [r7, #4]
 8005c24:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005c26:	68bb      	ldr	r3, [r7, #8]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d103      	bne.n	8005c34 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005c2c:	69bb      	ldr	r3, [r7, #24]
 8005c2e:	69ba      	ldr	r2, [r7, #24]
 8005c30:	601a      	str	r2, [r3, #0]
 8005c32:	e002      	b.n	8005c3a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005c34:	69bb      	ldr	r3, [r7, #24]
 8005c36:	687a      	ldr	r2, [r7, #4]
 8005c38:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005c3a:	69bb      	ldr	r3, [r7, #24]
 8005c3c:	68fa      	ldr	r2, [r7, #12]
 8005c3e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005c40:	69bb      	ldr	r3, [r7, #24]
 8005c42:	68ba      	ldr	r2, [r7, #8]
 8005c44:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005c46:	2101      	movs	r1, #1
 8005c48:	69b8      	ldr	r0, [r7, #24]
 8005c4a:	f7ff febd 	bl	80059c8 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005c4e:	bf00      	nop
 8005c50:	3710      	adds	r7, #16
 8005c52:	46bd      	mov	sp, r7
 8005c54:	bd80      	pop	{r7, pc}

08005c56 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8005c56:	b580      	push	{r7, lr}
 8005c58:	b082      	sub	sp, #8
 8005c5a:	af00      	add	r7, sp, #0
 8005c5c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d00e      	beq.n	8005c82 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2200      	movs	r2, #0
 8005c68:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2200      	movs	r2, #0
 8005c74:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8005c76:	2300      	movs	r3, #0
 8005c78:	2200      	movs	r2, #0
 8005c7a:	2100      	movs	r1, #0
 8005c7c:	6878      	ldr	r0, [r7, #4]
 8005c7e:	f000 f837 	bl	8005cf0 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8005c82:	bf00      	nop
 8005c84:	3708      	adds	r7, #8
 8005c86:	46bd      	mov	sp, r7
 8005c88:	bd80      	pop	{r7, pc}

08005c8a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8005c8a:	b580      	push	{r7, lr}
 8005c8c:	b086      	sub	sp, #24
 8005c8e:	af00      	add	r7, sp, #0
 8005c90:	4603      	mov	r3, r0
 8005c92:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005c94:	2301      	movs	r3, #1
 8005c96:	617b      	str	r3, [r7, #20]
 8005c98:	2300      	movs	r3, #0
 8005c9a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8005c9c:	79fb      	ldrb	r3, [r7, #7]
 8005c9e:	461a      	mov	r2, r3
 8005ca0:	6939      	ldr	r1, [r7, #16]
 8005ca2:	6978      	ldr	r0, [r7, #20]
 8005ca4:	f7ff ff77 	bl	8005b96 <xQueueGenericCreate>
 8005ca8:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005caa:	68f8      	ldr	r0, [r7, #12]
 8005cac:	f7ff ffd3 	bl	8005c56 <prvInitialiseMutex>

		return xNewQueue;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
	}
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	3718      	adds	r7, #24
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	bd80      	pop	{r7, pc}

08005cba <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8005cba:	b580      	push	{r7, lr}
 8005cbc:	b088      	sub	sp, #32
 8005cbe:	af02      	add	r7, sp, #8
 8005cc0:	4603      	mov	r3, r0
 8005cc2:	6039      	str	r1, [r7, #0]
 8005cc4:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005cc6:	2301      	movs	r3, #1
 8005cc8:	617b      	str	r3, [r7, #20]
 8005cca:	2300      	movs	r3, #0
 8005ccc:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8005cce:	79fb      	ldrb	r3, [r7, #7]
 8005cd0:	9300      	str	r3, [sp, #0]
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	6939      	ldr	r1, [r7, #16]
 8005cd8:	6978      	ldr	r0, [r7, #20]
 8005cda:	f7ff fedf 	bl	8005a9c <xQueueGenericCreateStatic>
 8005cde:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005ce0:	68f8      	ldr	r0, [r7, #12]
 8005ce2:	f7ff ffb8 	bl	8005c56 <prvInitialiseMutex>

		return xNewQueue;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
	}
 8005ce8:	4618      	mov	r0, r3
 8005cea:	3718      	adds	r7, #24
 8005cec:	46bd      	mov	sp, r7
 8005cee:	bd80      	pop	{r7, pc}

08005cf0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	b08e      	sub	sp, #56	; 0x38
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	60f8      	str	r0, [r7, #12]
 8005cf8:	60b9      	str	r1, [r7, #8]
 8005cfa:	607a      	str	r2, [r7, #4]
 8005cfc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005cfe:	2300      	movs	r3, #0
 8005d00:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005d06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d10b      	bne.n	8005d24 <xQueueGenericSend+0x34>
 8005d0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d10:	b672      	cpsid	i
 8005d12:	f383 8811 	msr	BASEPRI, r3
 8005d16:	f3bf 8f6f 	isb	sy
 8005d1a:	f3bf 8f4f 	dsb	sy
 8005d1e:	b662      	cpsie	i
 8005d20:	62bb      	str	r3, [r7, #40]	; 0x28
 8005d22:	e7fe      	b.n	8005d22 <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005d24:	68bb      	ldr	r3, [r7, #8]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d103      	bne.n	8005d32 <xQueueGenericSend+0x42>
 8005d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d101      	bne.n	8005d36 <xQueueGenericSend+0x46>
 8005d32:	2301      	movs	r3, #1
 8005d34:	e000      	b.n	8005d38 <xQueueGenericSend+0x48>
 8005d36:	2300      	movs	r3, #0
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d10b      	bne.n	8005d54 <xQueueGenericSend+0x64>
 8005d3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d40:	b672      	cpsid	i
 8005d42:	f383 8811 	msr	BASEPRI, r3
 8005d46:	f3bf 8f6f 	isb	sy
 8005d4a:	f3bf 8f4f 	dsb	sy
 8005d4e:	b662      	cpsie	i
 8005d50:	627b      	str	r3, [r7, #36]	; 0x24
 8005d52:	e7fe      	b.n	8005d52 <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	2b02      	cmp	r3, #2
 8005d58:	d103      	bne.n	8005d62 <xQueueGenericSend+0x72>
 8005d5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d5e:	2b01      	cmp	r3, #1
 8005d60:	d101      	bne.n	8005d66 <xQueueGenericSend+0x76>
 8005d62:	2301      	movs	r3, #1
 8005d64:	e000      	b.n	8005d68 <xQueueGenericSend+0x78>
 8005d66:	2300      	movs	r3, #0
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d10b      	bne.n	8005d84 <xQueueGenericSend+0x94>
 8005d6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d70:	b672      	cpsid	i
 8005d72:	f383 8811 	msr	BASEPRI, r3
 8005d76:	f3bf 8f6f 	isb	sy
 8005d7a:	f3bf 8f4f 	dsb	sy
 8005d7e:	b662      	cpsie	i
 8005d80:	623b      	str	r3, [r7, #32]
 8005d82:	e7fe      	b.n	8005d82 <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005d84:	f001 fc96 	bl	80076b4 <xTaskGetSchedulerState>
 8005d88:	4603      	mov	r3, r0
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d102      	bne.n	8005d94 <xQueueGenericSend+0xa4>
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d101      	bne.n	8005d98 <xQueueGenericSend+0xa8>
 8005d94:	2301      	movs	r3, #1
 8005d96:	e000      	b.n	8005d9a <xQueueGenericSend+0xaa>
 8005d98:	2300      	movs	r3, #0
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d10b      	bne.n	8005db6 <xQueueGenericSend+0xc6>
 8005d9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005da2:	b672      	cpsid	i
 8005da4:	f383 8811 	msr	BASEPRI, r3
 8005da8:	f3bf 8f6f 	isb	sy
 8005dac:	f3bf 8f4f 	dsb	sy
 8005db0:	b662      	cpsie	i
 8005db2:	61fb      	str	r3, [r7, #28]
 8005db4:	e7fe      	b.n	8005db4 <xQueueGenericSend+0xc4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005db6:	f002 faff 	bl	80083b8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005dba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dbc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005dbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dc2:	429a      	cmp	r2, r3
 8005dc4:	d302      	bcc.n	8005dcc <xQueueGenericSend+0xdc>
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	2b02      	cmp	r3, #2
 8005dca:	d129      	bne.n	8005e20 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005dcc:	683a      	ldr	r2, [r7, #0]
 8005dce:	68b9      	ldr	r1, [r7, #8]
 8005dd0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005dd2:	f000 fcac 	bl	800672e <prvCopyDataToQueue>
 8005dd6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005dd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d010      	beq.n	8005e02 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005de0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005de2:	3324      	adds	r3, #36	; 0x24
 8005de4:	4618      	mov	r0, r3
 8005de6:	f001 faa5 	bl	8007334 <xTaskRemoveFromEventList>
 8005dea:	4603      	mov	r3, r0
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d013      	beq.n	8005e18 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005df0:	4b3f      	ldr	r3, [pc, #252]	; (8005ef0 <xQueueGenericSend+0x200>)
 8005df2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005df6:	601a      	str	r2, [r3, #0]
 8005df8:	f3bf 8f4f 	dsb	sy
 8005dfc:	f3bf 8f6f 	isb	sy
 8005e00:	e00a      	b.n	8005e18 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005e02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d007      	beq.n	8005e18 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005e08:	4b39      	ldr	r3, [pc, #228]	; (8005ef0 <xQueueGenericSend+0x200>)
 8005e0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e0e:	601a      	str	r2, [r3, #0]
 8005e10:	f3bf 8f4f 	dsb	sy
 8005e14:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005e18:	f002 fb00 	bl	800841c <vPortExitCritical>
				return pdPASS;
 8005e1c:	2301      	movs	r3, #1
 8005e1e:	e063      	b.n	8005ee8 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d103      	bne.n	8005e2e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005e26:	f002 faf9 	bl	800841c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	e05c      	b.n	8005ee8 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005e2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d106      	bne.n	8005e42 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005e34:	f107 0314 	add.w	r3, r7, #20
 8005e38:	4618      	mov	r0, r3
 8005e3a:	f001 fadf 	bl	80073fc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005e3e:	2301      	movs	r3, #1
 8005e40:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005e42:	f002 faeb 	bl	800841c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005e46:	f001 f83f 	bl	8006ec8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005e4a:	f002 fab5 	bl	80083b8 <vPortEnterCritical>
 8005e4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e50:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005e54:	b25b      	sxtb	r3, r3
 8005e56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e5a:	d103      	bne.n	8005e64 <xQueueGenericSend+0x174>
 8005e5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e5e:	2200      	movs	r2, #0
 8005e60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005e64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e66:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005e6a:	b25b      	sxtb	r3, r3
 8005e6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e70:	d103      	bne.n	8005e7a <xQueueGenericSend+0x18a>
 8005e72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e74:	2200      	movs	r2, #0
 8005e76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005e7a:	f002 facf 	bl	800841c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005e7e:	1d3a      	adds	r2, r7, #4
 8005e80:	f107 0314 	add.w	r3, r7, #20
 8005e84:	4611      	mov	r1, r2
 8005e86:	4618      	mov	r0, r3
 8005e88:	f001 face 	bl	8007428 <xTaskCheckForTimeOut>
 8005e8c:	4603      	mov	r3, r0
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d124      	bne.n	8005edc <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005e92:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005e94:	f000 fd43 	bl	800691e <prvIsQueueFull>
 8005e98:	4603      	mov	r3, r0
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d018      	beq.n	8005ed0 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005e9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ea0:	3310      	adds	r3, #16
 8005ea2:	687a      	ldr	r2, [r7, #4]
 8005ea4:	4611      	mov	r1, r2
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	f001 f9f2 	bl	8007290 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005eac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005eae:	f000 fcce 	bl	800684e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005eb2:	f001 f817 	bl	8006ee4 <xTaskResumeAll>
 8005eb6:	4603      	mov	r3, r0
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	f47f af7c 	bne.w	8005db6 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8005ebe:	4b0c      	ldr	r3, [pc, #48]	; (8005ef0 <xQueueGenericSend+0x200>)
 8005ec0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ec4:	601a      	str	r2, [r3, #0]
 8005ec6:	f3bf 8f4f 	dsb	sy
 8005eca:	f3bf 8f6f 	isb	sy
 8005ece:	e772      	b.n	8005db6 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005ed0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005ed2:	f000 fcbc 	bl	800684e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005ed6:	f001 f805 	bl	8006ee4 <xTaskResumeAll>
 8005eda:	e76c      	b.n	8005db6 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005edc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005ede:	f000 fcb6 	bl	800684e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005ee2:	f000 ffff 	bl	8006ee4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005ee6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005ee8:	4618      	mov	r0, r3
 8005eea:	3738      	adds	r7, #56	; 0x38
 8005eec:	46bd      	mov	sp, r7
 8005eee:	bd80      	pop	{r7, pc}
 8005ef0:	e000ed04 	.word	0xe000ed04

08005ef4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b08e      	sub	sp, #56	; 0x38
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	60f8      	str	r0, [r7, #12]
 8005efc:	60b9      	str	r1, [r7, #8]
 8005efe:	607a      	str	r2, [r7, #4]
 8005f00:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005f06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d10b      	bne.n	8005f24 <xQueueGenericSendFromISR+0x30>
 8005f0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f10:	b672      	cpsid	i
 8005f12:	f383 8811 	msr	BASEPRI, r3
 8005f16:	f3bf 8f6f 	isb	sy
 8005f1a:	f3bf 8f4f 	dsb	sy
 8005f1e:	b662      	cpsie	i
 8005f20:	627b      	str	r3, [r7, #36]	; 0x24
 8005f22:	e7fe      	b.n	8005f22 <xQueueGenericSendFromISR+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005f24:	68bb      	ldr	r3, [r7, #8]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d103      	bne.n	8005f32 <xQueueGenericSendFromISR+0x3e>
 8005f2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d101      	bne.n	8005f36 <xQueueGenericSendFromISR+0x42>
 8005f32:	2301      	movs	r3, #1
 8005f34:	e000      	b.n	8005f38 <xQueueGenericSendFromISR+0x44>
 8005f36:	2300      	movs	r3, #0
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d10b      	bne.n	8005f54 <xQueueGenericSendFromISR+0x60>
 8005f3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f40:	b672      	cpsid	i
 8005f42:	f383 8811 	msr	BASEPRI, r3
 8005f46:	f3bf 8f6f 	isb	sy
 8005f4a:	f3bf 8f4f 	dsb	sy
 8005f4e:	b662      	cpsie	i
 8005f50:	623b      	str	r3, [r7, #32]
 8005f52:	e7fe      	b.n	8005f52 <xQueueGenericSendFromISR+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	2b02      	cmp	r3, #2
 8005f58:	d103      	bne.n	8005f62 <xQueueGenericSendFromISR+0x6e>
 8005f5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f5e:	2b01      	cmp	r3, #1
 8005f60:	d101      	bne.n	8005f66 <xQueueGenericSendFromISR+0x72>
 8005f62:	2301      	movs	r3, #1
 8005f64:	e000      	b.n	8005f68 <xQueueGenericSendFromISR+0x74>
 8005f66:	2300      	movs	r3, #0
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d10b      	bne.n	8005f84 <xQueueGenericSendFromISR+0x90>
 8005f6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f70:	b672      	cpsid	i
 8005f72:	f383 8811 	msr	BASEPRI, r3
 8005f76:	f3bf 8f6f 	isb	sy
 8005f7a:	f3bf 8f4f 	dsb	sy
 8005f7e:	b662      	cpsie	i
 8005f80:	61fb      	str	r3, [r7, #28]
 8005f82:	e7fe      	b.n	8005f82 <xQueueGenericSendFromISR+0x8e>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005f84:	f002 faf8 	bl	8008578 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005f88:	f3ef 8211 	mrs	r2, BASEPRI
 8005f8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f90:	b672      	cpsid	i
 8005f92:	f383 8811 	msr	BASEPRI, r3
 8005f96:	f3bf 8f6f 	isb	sy
 8005f9a:	f3bf 8f4f 	dsb	sy
 8005f9e:	b662      	cpsie	i
 8005fa0:	61ba      	str	r2, [r7, #24]
 8005fa2:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005fa4:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005fa6:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005fa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005faa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005fac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fb0:	429a      	cmp	r2, r3
 8005fb2:	d302      	bcc.n	8005fba <xQueueGenericSendFromISR+0xc6>
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	2b02      	cmp	r3, #2
 8005fb8:	d12c      	bne.n	8006014 <xQueueGenericSendFromISR+0x120>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005fba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fbc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005fc0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005fc4:	683a      	ldr	r2, [r7, #0]
 8005fc6:	68b9      	ldr	r1, [r7, #8]
 8005fc8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005fca:	f000 fbb0 	bl	800672e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005fce:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8005fd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fd6:	d112      	bne.n	8005ffe <xQueueGenericSendFromISR+0x10a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005fd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d016      	beq.n	800600e <xQueueGenericSendFromISR+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005fe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fe2:	3324      	adds	r3, #36	; 0x24
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	f001 f9a5 	bl	8007334 <xTaskRemoveFromEventList>
 8005fea:	4603      	mov	r3, r0
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d00e      	beq.n	800600e <xQueueGenericSendFromISR+0x11a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d00b      	beq.n	800600e <xQueueGenericSendFromISR+0x11a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	2201      	movs	r2, #1
 8005ffa:	601a      	str	r2, [r3, #0]
 8005ffc:	e007      	b.n	800600e <xQueueGenericSendFromISR+0x11a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005ffe:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006002:	3301      	adds	r3, #1
 8006004:	b2db      	uxtb	r3, r3
 8006006:	b25a      	sxtb	r2, r3
 8006008:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800600a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800600e:	2301      	movs	r3, #1
 8006010:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8006012:	e001      	b.n	8006018 <xQueueGenericSendFromISR+0x124>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006014:	2300      	movs	r3, #0
 8006016:	637b      	str	r3, [r7, #52]	; 0x34
 8006018:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800601a:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800601c:	693b      	ldr	r3, [r7, #16]
 800601e:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006022:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006024:	4618      	mov	r0, r3
 8006026:	3738      	adds	r7, #56	; 0x38
 8006028:	46bd      	mov	sp, r7
 800602a:	bd80      	pop	{r7, pc}

0800602c <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800602c:	b580      	push	{r7, lr}
 800602e:	b08e      	sub	sp, #56	; 0x38
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
 8006034:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800603a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800603c:	2b00      	cmp	r3, #0
 800603e:	d10b      	bne.n	8006058 <xQueueGiveFromISR+0x2c>
	__asm volatile
 8006040:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006044:	b672      	cpsid	i
 8006046:	f383 8811 	msr	BASEPRI, r3
 800604a:	f3bf 8f6f 	isb	sy
 800604e:	f3bf 8f4f 	dsb	sy
 8006052:	b662      	cpsie	i
 8006054:	623b      	str	r3, [r7, #32]
 8006056:	e7fe      	b.n	8006056 <xQueueGiveFromISR+0x2a>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800605a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800605c:	2b00      	cmp	r3, #0
 800605e:	d00b      	beq.n	8006078 <xQueueGiveFromISR+0x4c>
 8006060:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006064:	b672      	cpsid	i
 8006066:	f383 8811 	msr	BASEPRI, r3
 800606a:	f3bf 8f6f 	isb	sy
 800606e:	f3bf 8f4f 	dsb	sy
 8006072:	b662      	cpsie	i
 8006074:	61fb      	str	r3, [r7, #28]
 8006076:	e7fe      	b.n	8006076 <xQueueGiveFromISR+0x4a>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8006078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	2b00      	cmp	r3, #0
 800607e:	d103      	bne.n	8006088 <xQueueGiveFromISR+0x5c>
 8006080:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006082:	689b      	ldr	r3, [r3, #8]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d101      	bne.n	800608c <xQueueGiveFromISR+0x60>
 8006088:	2301      	movs	r3, #1
 800608a:	e000      	b.n	800608e <xQueueGiveFromISR+0x62>
 800608c:	2300      	movs	r3, #0
 800608e:	2b00      	cmp	r3, #0
 8006090:	d10b      	bne.n	80060aa <xQueueGiveFromISR+0x7e>
 8006092:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006096:	b672      	cpsid	i
 8006098:	f383 8811 	msr	BASEPRI, r3
 800609c:	f3bf 8f6f 	isb	sy
 80060a0:	f3bf 8f4f 	dsb	sy
 80060a4:	b662      	cpsie	i
 80060a6:	61bb      	str	r3, [r7, #24]
 80060a8:	e7fe      	b.n	80060a8 <xQueueGiveFromISR+0x7c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80060aa:	f002 fa65 	bl	8008578 <vPortValidateInterruptPriority>
	__asm volatile
 80060ae:	f3ef 8211 	mrs	r2, BASEPRI
 80060b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060b6:	b672      	cpsid	i
 80060b8:	f383 8811 	msr	BASEPRI, r3
 80060bc:	f3bf 8f6f 	isb	sy
 80060c0:	f3bf 8f4f 	dsb	sy
 80060c4:	b662      	cpsie	i
 80060c6:	617a      	str	r2, [r7, #20]
 80060c8:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80060ca:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80060cc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80060ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060d2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80060d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80060da:	429a      	cmp	r2, r3
 80060dc:	d22b      	bcs.n	8006136 <xQueueGiveFromISR+0x10a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80060de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060e0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80060e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80060e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060ea:	1c5a      	adds	r2, r3, #1
 80060ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060ee:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80060f0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80060f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060f8:	d112      	bne.n	8006120 <xQueueGiveFromISR+0xf4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80060fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d016      	beq.n	8006130 <xQueueGiveFromISR+0x104>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006104:	3324      	adds	r3, #36	; 0x24
 8006106:	4618      	mov	r0, r3
 8006108:	f001 f914 	bl	8007334 <xTaskRemoveFromEventList>
 800610c:	4603      	mov	r3, r0
 800610e:	2b00      	cmp	r3, #0
 8006110:	d00e      	beq.n	8006130 <xQueueGiveFromISR+0x104>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006112:	683b      	ldr	r3, [r7, #0]
 8006114:	2b00      	cmp	r3, #0
 8006116:	d00b      	beq.n	8006130 <xQueueGiveFromISR+0x104>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	2201      	movs	r2, #1
 800611c:	601a      	str	r2, [r3, #0]
 800611e:	e007      	b.n	8006130 <xQueueGiveFromISR+0x104>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006120:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006124:	3301      	adds	r3, #1
 8006126:	b2db      	uxtb	r3, r3
 8006128:	b25a      	sxtb	r2, r3
 800612a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800612c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006130:	2301      	movs	r3, #1
 8006132:	637b      	str	r3, [r7, #52]	; 0x34
 8006134:	e001      	b.n	800613a <xQueueGiveFromISR+0x10e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006136:	2300      	movs	r3, #0
 8006138:	637b      	str	r3, [r7, #52]	; 0x34
 800613a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800613c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006144:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006146:	4618      	mov	r0, r3
 8006148:	3738      	adds	r7, #56	; 0x38
 800614a:	46bd      	mov	sp, r7
 800614c:	bd80      	pop	{r7, pc}
	...

08006150 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006150:	b580      	push	{r7, lr}
 8006152:	b08c      	sub	sp, #48	; 0x30
 8006154:	af00      	add	r7, sp, #0
 8006156:	60f8      	str	r0, [r7, #12]
 8006158:	60b9      	str	r1, [r7, #8]
 800615a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800615c:	2300      	movs	r3, #0
 800615e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006164:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006166:	2b00      	cmp	r3, #0
 8006168:	d10b      	bne.n	8006182 <xQueueReceive+0x32>
	__asm volatile
 800616a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800616e:	b672      	cpsid	i
 8006170:	f383 8811 	msr	BASEPRI, r3
 8006174:	f3bf 8f6f 	isb	sy
 8006178:	f3bf 8f4f 	dsb	sy
 800617c:	b662      	cpsie	i
 800617e:	623b      	str	r3, [r7, #32]
 8006180:	e7fe      	b.n	8006180 <xQueueReceive+0x30>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006182:	68bb      	ldr	r3, [r7, #8]
 8006184:	2b00      	cmp	r3, #0
 8006186:	d103      	bne.n	8006190 <xQueueReceive+0x40>
 8006188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800618a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800618c:	2b00      	cmp	r3, #0
 800618e:	d101      	bne.n	8006194 <xQueueReceive+0x44>
 8006190:	2301      	movs	r3, #1
 8006192:	e000      	b.n	8006196 <xQueueReceive+0x46>
 8006194:	2300      	movs	r3, #0
 8006196:	2b00      	cmp	r3, #0
 8006198:	d10b      	bne.n	80061b2 <xQueueReceive+0x62>
 800619a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800619e:	b672      	cpsid	i
 80061a0:	f383 8811 	msr	BASEPRI, r3
 80061a4:	f3bf 8f6f 	isb	sy
 80061a8:	f3bf 8f4f 	dsb	sy
 80061ac:	b662      	cpsie	i
 80061ae:	61fb      	str	r3, [r7, #28]
 80061b0:	e7fe      	b.n	80061b0 <xQueueReceive+0x60>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80061b2:	f001 fa7f 	bl	80076b4 <xTaskGetSchedulerState>
 80061b6:	4603      	mov	r3, r0
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d102      	bne.n	80061c2 <xQueueReceive+0x72>
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d101      	bne.n	80061c6 <xQueueReceive+0x76>
 80061c2:	2301      	movs	r3, #1
 80061c4:	e000      	b.n	80061c8 <xQueueReceive+0x78>
 80061c6:	2300      	movs	r3, #0
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d10b      	bne.n	80061e4 <xQueueReceive+0x94>
 80061cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061d0:	b672      	cpsid	i
 80061d2:	f383 8811 	msr	BASEPRI, r3
 80061d6:	f3bf 8f6f 	isb	sy
 80061da:	f3bf 8f4f 	dsb	sy
 80061de:	b662      	cpsie	i
 80061e0:	61bb      	str	r3, [r7, #24]
 80061e2:	e7fe      	b.n	80061e2 <xQueueReceive+0x92>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80061e4:	f002 f8e8 	bl	80083b8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80061e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061ec:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80061ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d01f      	beq.n	8006234 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80061f4:	68b9      	ldr	r1, [r7, #8]
 80061f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80061f8:	f000 fb03 	bl	8006802 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80061fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061fe:	1e5a      	subs	r2, r3, #1
 8006200:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006202:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006206:	691b      	ldr	r3, [r3, #16]
 8006208:	2b00      	cmp	r3, #0
 800620a:	d00f      	beq.n	800622c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800620c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800620e:	3310      	adds	r3, #16
 8006210:	4618      	mov	r0, r3
 8006212:	f001 f88f 	bl	8007334 <xTaskRemoveFromEventList>
 8006216:	4603      	mov	r3, r0
 8006218:	2b00      	cmp	r3, #0
 800621a:	d007      	beq.n	800622c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800621c:	4b3c      	ldr	r3, [pc, #240]	; (8006310 <xQueueReceive+0x1c0>)
 800621e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006222:	601a      	str	r2, [r3, #0]
 8006224:	f3bf 8f4f 	dsb	sy
 8006228:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800622c:	f002 f8f6 	bl	800841c <vPortExitCritical>
				return pdPASS;
 8006230:	2301      	movs	r3, #1
 8006232:	e069      	b.n	8006308 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d103      	bne.n	8006242 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800623a:	f002 f8ef 	bl	800841c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800623e:	2300      	movs	r3, #0
 8006240:	e062      	b.n	8006308 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006242:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006244:	2b00      	cmp	r3, #0
 8006246:	d106      	bne.n	8006256 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006248:	f107 0310 	add.w	r3, r7, #16
 800624c:	4618      	mov	r0, r3
 800624e:	f001 f8d5 	bl	80073fc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006252:	2301      	movs	r3, #1
 8006254:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006256:	f002 f8e1 	bl	800841c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800625a:	f000 fe35 	bl	8006ec8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800625e:	f002 f8ab 	bl	80083b8 <vPortEnterCritical>
 8006262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006264:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006268:	b25b      	sxtb	r3, r3
 800626a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800626e:	d103      	bne.n	8006278 <xQueueReceive+0x128>
 8006270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006272:	2200      	movs	r2, #0
 8006274:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800627a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800627e:	b25b      	sxtb	r3, r3
 8006280:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006284:	d103      	bne.n	800628e <xQueueReceive+0x13e>
 8006286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006288:	2200      	movs	r2, #0
 800628a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800628e:	f002 f8c5 	bl	800841c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006292:	1d3a      	adds	r2, r7, #4
 8006294:	f107 0310 	add.w	r3, r7, #16
 8006298:	4611      	mov	r1, r2
 800629a:	4618      	mov	r0, r3
 800629c:	f001 f8c4 	bl	8007428 <xTaskCheckForTimeOut>
 80062a0:	4603      	mov	r3, r0
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d123      	bne.n	80062ee <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80062a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80062a8:	f000 fb23 	bl	80068f2 <prvIsQueueEmpty>
 80062ac:	4603      	mov	r3, r0
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d017      	beq.n	80062e2 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80062b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062b4:	3324      	adds	r3, #36	; 0x24
 80062b6:	687a      	ldr	r2, [r7, #4]
 80062b8:	4611      	mov	r1, r2
 80062ba:	4618      	mov	r0, r3
 80062bc:	f000 ffe8 	bl	8007290 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80062c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80062c2:	f000 fac4 	bl	800684e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80062c6:	f000 fe0d 	bl	8006ee4 <xTaskResumeAll>
 80062ca:	4603      	mov	r3, r0
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d189      	bne.n	80061e4 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80062d0:	4b0f      	ldr	r3, [pc, #60]	; (8006310 <xQueueReceive+0x1c0>)
 80062d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80062d6:	601a      	str	r2, [r3, #0]
 80062d8:	f3bf 8f4f 	dsb	sy
 80062dc:	f3bf 8f6f 	isb	sy
 80062e0:	e780      	b.n	80061e4 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80062e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80062e4:	f000 fab3 	bl	800684e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80062e8:	f000 fdfc 	bl	8006ee4 <xTaskResumeAll>
 80062ec:	e77a      	b.n	80061e4 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80062ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80062f0:	f000 faad 	bl	800684e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80062f4:	f000 fdf6 	bl	8006ee4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80062f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80062fa:	f000 fafa 	bl	80068f2 <prvIsQueueEmpty>
 80062fe:	4603      	mov	r3, r0
 8006300:	2b00      	cmp	r3, #0
 8006302:	f43f af6f 	beq.w	80061e4 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006306:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006308:	4618      	mov	r0, r3
 800630a:	3730      	adds	r7, #48	; 0x30
 800630c:	46bd      	mov	sp, r7
 800630e:	bd80      	pop	{r7, pc}
 8006310:	e000ed04 	.word	0xe000ed04

08006314 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006314:	b580      	push	{r7, lr}
 8006316:	b08e      	sub	sp, #56	; 0x38
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
 800631c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800631e:	2300      	movs	r3, #0
 8006320:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8006326:	2300      	movs	r3, #0
 8006328:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800632a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800632c:	2b00      	cmp	r3, #0
 800632e:	d10b      	bne.n	8006348 <xQueueSemaphoreTake+0x34>
 8006330:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006334:	b672      	cpsid	i
 8006336:	f383 8811 	msr	BASEPRI, r3
 800633a:	f3bf 8f6f 	isb	sy
 800633e:	f3bf 8f4f 	dsb	sy
 8006342:	b662      	cpsie	i
 8006344:	623b      	str	r3, [r7, #32]
 8006346:	e7fe      	b.n	8006346 <xQueueSemaphoreTake+0x32>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800634a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800634c:	2b00      	cmp	r3, #0
 800634e:	d00b      	beq.n	8006368 <xQueueSemaphoreTake+0x54>
 8006350:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006354:	b672      	cpsid	i
 8006356:	f383 8811 	msr	BASEPRI, r3
 800635a:	f3bf 8f6f 	isb	sy
 800635e:	f3bf 8f4f 	dsb	sy
 8006362:	b662      	cpsie	i
 8006364:	61fb      	str	r3, [r7, #28]
 8006366:	e7fe      	b.n	8006366 <xQueueSemaphoreTake+0x52>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006368:	f001 f9a4 	bl	80076b4 <xTaskGetSchedulerState>
 800636c:	4603      	mov	r3, r0
 800636e:	2b00      	cmp	r3, #0
 8006370:	d102      	bne.n	8006378 <xQueueSemaphoreTake+0x64>
 8006372:	683b      	ldr	r3, [r7, #0]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d101      	bne.n	800637c <xQueueSemaphoreTake+0x68>
 8006378:	2301      	movs	r3, #1
 800637a:	e000      	b.n	800637e <xQueueSemaphoreTake+0x6a>
 800637c:	2300      	movs	r3, #0
 800637e:	2b00      	cmp	r3, #0
 8006380:	d10b      	bne.n	800639a <xQueueSemaphoreTake+0x86>
 8006382:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006386:	b672      	cpsid	i
 8006388:	f383 8811 	msr	BASEPRI, r3
 800638c:	f3bf 8f6f 	isb	sy
 8006390:	f3bf 8f4f 	dsb	sy
 8006394:	b662      	cpsie	i
 8006396:	61bb      	str	r3, [r7, #24]
 8006398:	e7fe      	b.n	8006398 <xQueueSemaphoreTake+0x84>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800639a:	f002 f80d 	bl	80083b8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800639e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063a2:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80063a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d024      	beq.n	80063f4 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80063aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063ac:	1e5a      	subs	r2, r3, #1
 80063ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063b0:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80063b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d104      	bne.n	80063c4 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80063ba:	f001 fb3d 	bl	8007a38 <pvTaskIncrementMutexHeldCount>
 80063be:	4602      	mov	r2, r0
 80063c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063c2:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80063c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063c6:	691b      	ldr	r3, [r3, #16]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d00f      	beq.n	80063ec <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80063cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063ce:	3310      	adds	r3, #16
 80063d0:	4618      	mov	r0, r3
 80063d2:	f000 ffaf 	bl	8007334 <xTaskRemoveFromEventList>
 80063d6:	4603      	mov	r3, r0
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d007      	beq.n	80063ec <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80063dc:	4b54      	ldr	r3, [pc, #336]	; (8006530 <xQueueSemaphoreTake+0x21c>)
 80063de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80063e2:	601a      	str	r2, [r3, #0]
 80063e4:	f3bf 8f4f 	dsb	sy
 80063e8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80063ec:	f002 f816 	bl	800841c <vPortExitCritical>
				return pdPASS;
 80063f0:	2301      	movs	r3, #1
 80063f2:	e098      	b.n	8006526 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d112      	bne.n	8006420 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80063fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d00b      	beq.n	8006418 <xQueueSemaphoreTake+0x104>
 8006400:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006404:	b672      	cpsid	i
 8006406:	f383 8811 	msr	BASEPRI, r3
 800640a:	f3bf 8f6f 	isb	sy
 800640e:	f3bf 8f4f 	dsb	sy
 8006412:	b662      	cpsie	i
 8006414:	617b      	str	r3, [r7, #20]
 8006416:	e7fe      	b.n	8006416 <xQueueSemaphoreTake+0x102>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006418:	f002 f800 	bl	800841c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800641c:	2300      	movs	r3, #0
 800641e:	e082      	b.n	8006526 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006420:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006422:	2b00      	cmp	r3, #0
 8006424:	d106      	bne.n	8006434 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006426:	f107 030c 	add.w	r3, r7, #12
 800642a:	4618      	mov	r0, r3
 800642c:	f000 ffe6 	bl	80073fc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006430:	2301      	movs	r3, #1
 8006432:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006434:	f001 fff2 	bl	800841c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006438:	f000 fd46 	bl	8006ec8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800643c:	f001 ffbc 	bl	80083b8 <vPortEnterCritical>
 8006440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006442:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006446:	b25b      	sxtb	r3, r3
 8006448:	f1b3 3fff 	cmp.w	r3, #4294967295
 800644c:	d103      	bne.n	8006456 <xQueueSemaphoreTake+0x142>
 800644e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006450:	2200      	movs	r2, #0
 8006452:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006458:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800645c:	b25b      	sxtb	r3, r3
 800645e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006462:	d103      	bne.n	800646c <xQueueSemaphoreTake+0x158>
 8006464:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006466:	2200      	movs	r2, #0
 8006468:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800646c:	f001 ffd6 	bl	800841c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006470:	463a      	mov	r2, r7
 8006472:	f107 030c 	add.w	r3, r7, #12
 8006476:	4611      	mov	r1, r2
 8006478:	4618      	mov	r0, r3
 800647a:	f000 ffd5 	bl	8007428 <xTaskCheckForTimeOut>
 800647e:	4603      	mov	r3, r0
 8006480:	2b00      	cmp	r3, #0
 8006482:	d132      	bne.n	80064ea <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006484:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006486:	f000 fa34 	bl	80068f2 <prvIsQueueEmpty>
 800648a:	4603      	mov	r3, r0
 800648c:	2b00      	cmp	r3, #0
 800648e:	d026      	beq.n	80064de <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006490:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d109      	bne.n	80064ac <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8006498:	f001 ff8e 	bl	80083b8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800649c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800649e:	689b      	ldr	r3, [r3, #8]
 80064a0:	4618      	mov	r0, r3
 80064a2:	f001 f925 	bl	80076f0 <xTaskPriorityInherit>
 80064a6:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80064a8:	f001 ffb8 	bl	800841c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80064ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064ae:	3324      	adds	r3, #36	; 0x24
 80064b0:	683a      	ldr	r2, [r7, #0]
 80064b2:	4611      	mov	r1, r2
 80064b4:	4618      	mov	r0, r3
 80064b6:	f000 feeb 	bl	8007290 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80064ba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80064bc:	f000 f9c7 	bl	800684e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80064c0:	f000 fd10 	bl	8006ee4 <xTaskResumeAll>
 80064c4:	4603      	mov	r3, r0
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	f47f af67 	bne.w	800639a <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 80064cc:	4b18      	ldr	r3, [pc, #96]	; (8006530 <xQueueSemaphoreTake+0x21c>)
 80064ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80064d2:	601a      	str	r2, [r3, #0]
 80064d4:	f3bf 8f4f 	dsb	sy
 80064d8:	f3bf 8f6f 	isb	sy
 80064dc:	e75d      	b.n	800639a <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80064de:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80064e0:	f000 f9b5 	bl	800684e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80064e4:	f000 fcfe 	bl	8006ee4 <xTaskResumeAll>
 80064e8:	e757      	b.n	800639a <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80064ea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80064ec:	f000 f9af 	bl	800684e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80064f0:	f000 fcf8 	bl	8006ee4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80064f4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80064f6:	f000 f9fc 	bl	80068f2 <prvIsQueueEmpty>
 80064fa:	4603      	mov	r3, r0
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	f43f af4c 	beq.w	800639a <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8006502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006504:	2b00      	cmp	r3, #0
 8006506:	d00d      	beq.n	8006524 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8006508:	f001 ff56 	bl	80083b8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800650c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800650e:	f000 f8f6 	bl	80066fe <prvGetDisinheritPriorityAfterTimeout>
 8006512:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8006514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006516:	689b      	ldr	r3, [r3, #8]
 8006518:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800651a:	4618      	mov	r0, r3
 800651c:	f001 f9f0 	bl	8007900 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006520:	f001 ff7c 	bl	800841c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006524:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006526:	4618      	mov	r0, r3
 8006528:	3738      	adds	r7, #56	; 0x38
 800652a:	46bd      	mov	sp, r7
 800652c:	bd80      	pop	{r7, pc}
 800652e:	bf00      	nop
 8006530:	e000ed04 	.word	0xe000ed04

08006534 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006534:	b580      	push	{r7, lr}
 8006536:	b08e      	sub	sp, #56	; 0x38
 8006538:	af00      	add	r7, sp, #0
 800653a:	60f8      	str	r0, [r7, #12]
 800653c:	60b9      	str	r1, [r7, #8]
 800653e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006546:	2b00      	cmp	r3, #0
 8006548:	d10b      	bne.n	8006562 <xQueueReceiveFromISR+0x2e>
 800654a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800654e:	b672      	cpsid	i
 8006550:	f383 8811 	msr	BASEPRI, r3
 8006554:	f3bf 8f6f 	isb	sy
 8006558:	f3bf 8f4f 	dsb	sy
 800655c:	b662      	cpsie	i
 800655e:	623b      	str	r3, [r7, #32]
 8006560:	e7fe      	b.n	8006560 <xQueueReceiveFromISR+0x2c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006562:	68bb      	ldr	r3, [r7, #8]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d103      	bne.n	8006570 <xQueueReceiveFromISR+0x3c>
 8006568:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800656a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800656c:	2b00      	cmp	r3, #0
 800656e:	d101      	bne.n	8006574 <xQueueReceiveFromISR+0x40>
 8006570:	2301      	movs	r3, #1
 8006572:	e000      	b.n	8006576 <xQueueReceiveFromISR+0x42>
 8006574:	2300      	movs	r3, #0
 8006576:	2b00      	cmp	r3, #0
 8006578:	d10b      	bne.n	8006592 <xQueueReceiveFromISR+0x5e>
 800657a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800657e:	b672      	cpsid	i
 8006580:	f383 8811 	msr	BASEPRI, r3
 8006584:	f3bf 8f6f 	isb	sy
 8006588:	f3bf 8f4f 	dsb	sy
 800658c:	b662      	cpsie	i
 800658e:	61fb      	str	r3, [r7, #28]
 8006590:	e7fe      	b.n	8006590 <xQueueReceiveFromISR+0x5c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006592:	f001 fff1 	bl	8008578 <vPortValidateInterruptPriority>
	__asm volatile
 8006596:	f3ef 8211 	mrs	r2, BASEPRI
 800659a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800659e:	b672      	cpsid	i
 80065a0:	f383 8811 	msr	BASEPRI, r3
 80065a4:	f3bf 8f6f 	isb	sy
 80065a8:	f3bf 8f4f 	dsb	sy
 80065ac:	b662      	cpsie	i
 80065ae:	61ba      	str	r2, [r7, #24]
 80065b0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80065b2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80065b4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80065b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065ba:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80065bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d02f      	beq.n	8006622 <xQueueReceiveFromISR+0xee>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80065c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065c4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80065c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80065cc:	68b9      	ldr	r1, [r7, #8]
 80065ce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80065d0:	f000 f917 	bl	8006802 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80065d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065d6:	1e5a      	subs	r2, r3, #1
 80065d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065da:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80065dc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80065e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065e4:	d112      	bne.n	800660c <xQueueReceiveFromISR+0xd8>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80065e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065e8:	691b      	ldr	r3, [r3, #16]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d016      	beq.n	800661c <xQueueReceiveFromISR+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80065ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065f0:	3310      	adds	r3, #16
 80065f2:	4618      	mov	r0, r3
 80065f4:	f000 fe9e 	bl	8007334 <xTaskRemoveFromEventList>
 80065f8:	4603      	mov	r3, r0
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d00e      	beq.n	800661c <xQueueReceiveFromISR+0xe8>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	2b00      	cmp	r3, #0
 8006602:	d00b      	beq.n	800661c <xQueueReceiveFromISR+0xe8>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2201      	movs	r2, #1
 8006608:	601a      	str	r2, [r3, #0]
 800660a:	e007      	b.n	800661c <xQueueReceiveFromISR+0xe8>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800660c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006610:	3301      	adds	r3, #1
 8006612:	b2db      	uxtb	r3, r3
 8006614:	b25a      	sxtb	r2, r3
 8006616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006618:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800661c:	2301      	movs	r3, #1
 800661e:	637b      	str	r3, [r7, #52]	; 0x34
 8006620:	e001      	b.n	8006626 <xQueueReceiveFromISR+0xf2>
		}
		else
		{
			xReturn = pdFAIL;
 8006622:	2300      	movs	r3, #0
 8006624:	637b      	str	r3, [r7, #52]	; 0x34
 8006626:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006628:	613b      	str	r3, [r7, #16]
	__asm volatile
 800662a:	693b      	ldr	r3, [r7, #16]
 800662c:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006630:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006632:	4618      	mov	r0, r3
 8006634:	3738      	adds	r7, #56	; 0x38
 8006636:	46bd      	mov	sp, r7
 8006638:	bd80      	pop	{r7, pc}

0800663a <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800663a:	b580      	push	{r7, lr}
 800663c:	b084      	sub	sp, #16
 800663e:	af00      	add	r7, sp, #0
 8006640:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d10b      	bne.n	8006660 <uxQueueMessagesWaiting+0x26>
	__asm volatile
 8006648:	f04f 0350 	mov.w	r3, #80	; 0x50
 800664c:	b672      	cpsid	i
 800664e:	f383 8811 	msr	BASEPRI, r3
 8006652:	f3bf 8f6f 	isb	sy
 8006656:	f3bf 8f4f 	dsb	sy
 800665a:	b662      	cpsie	i
 800665c:	60bb      	str	r3, [r7, #8]
 800665e:	e7fe      	b.n	800665e <uxQueueMessagesWaiting+0x24>

	taskENTER_CRITICAL();
 8006660:	f001 feaa 	bl	80083b8 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006668:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800666a:	f001 fed7 	bl	800841c <vPortExitCritical>

	return uxReturn;
 800666e:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8006670:	4618      	mov	r0, r3
 8006672:	3710      	adds	r7, #16
 8006674:	46bd      	mov	sp, r7
 8006676:	bd80      	pop	{r7, pc}

08006678 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8006678:	b480      	push	{r7}
 800667a:	b087      	sub	sp, #28
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8006684:	697b      	ldr	r3, [r7, #20]
 8006686:	2b00      	cmp	r3, #0
 8006688:	d10b      	bne.n	80066a2 <uxQueueMessagesWaitingFromISR+0x2a>
 800668a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800668e:	b672      	cpsid	i
 8006690:	f383 8811 	msr	BASEPRI, r3
 8006694:	f3bf 8f6f 	isb	sy
 8006698:	f3bf 8f4f 	dsb	sy
 800669c:	b662      	cpsie	i
 800669e:	60fb      	str	r3, [r7, #12]
 80066a0:	e7fe      	b.n	80066a0 <uxQueueMessagesWaitingFromISR+0x28>
	uxReturn = pxQueue->uxMessagesWaiting;
 80066a2:	697b      	ldr	r3, [r7, #20]
 80066a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066a6:	613b      	str	r3, [r7, #16]

	return uxReturn;
 80066a8:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80066aa:	4618      	mov	r0, r3
 80066ac:	371c      	adds	r7, #28
 80066ae:	46bd      	mov	sp, r7
 80066b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b4:	4770      	bx	lr

080066b6 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80066b6:	b580      	push	{r7, lr}
 80066b8:	b084      	sub	sp, #16
 80066ba:	af00      	add	r7, sp, #0
 80066bc:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d10b      	bne.n	80066e0 <vQueueDelete+0x2a>
 80066c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066cc:	b672      	cpsid	i
 80066ce:	f383 8811 	msr	BASEPRI, r3
 80066d2:	f3bf 8f6f 	isb	sy
 80066d6:	f3bf 8f4f 	dsb	sy
 80066da:	b662      	cpsie	i
 80066dc:	60bb      	str	r3, [r7, #8]
 80066de:	e7fe      	b.n	80066de <vQueueDelete+0x28>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80066e0:	68f8      	ldr	r0, [r7, #12]
 80066e2:	f000 f95d 	bl	80069a0 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d102      	bne.n	80066f6 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 80066f0:	68f8      	ldr	r0, [r7, #12]
 80066f2:	f002 f84b 	bl	800878c <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80066f6:	bf00      	nop
 80066f8:	3710      	adds	r7, #16
 80066fa:	46bd      	mov	sp, r7
 80066fc:	bd80      	pop	{r7, pc}

080066fe <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80066fe:	b480      	push	{r7}
 8006700:	b085      	sub	sp, #20
 8006702:	af00      	add	r7, sp, #0
 8006704:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800670a:	2b00      	cmp	r3, #0
 800670c:	d006      	beq.n	800671c <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f1c3 0307 	rsb	r3, r3, #7
 8006718:	60fb      	str	r3, [r7, #12]
 800671a:	e001      	b.n	8006720 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800671c:	2300      	movs	r3, #0
 800671e:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8006720:	68fb      	ldr	r3, [r7, #12]
	}
 8006722:	4618      	mov	r0, r3
 8006724:	3714      	adds	r7, #20
 8006726:	46bd      	mov	sp, r7
 8006728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672c:	4770      	bx	lr

0800672e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800672e:	b580      	push	{r7, lr}
 8006730:	b086      	sub	sp, #24
 8006732:	af00      	add	r7, sp, #0
 8006734:	60f8      	str	r0, [r7, #12]
 8006736:	60b9      	str	r1, [r7, #8]
 8006738:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800673a:	2300      	movs	r3, #0
 800673c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006742:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006748:	2b00      	cmp	r3, #0
 800674a:	d10d      	bne.n	8006768 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d14d      	bne.n	80067f0 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	689b      	ldr	r3, [r3, #8]
 8006758:	4618      	mov	r0, r3
 800675a:	f001 f849 	bl	80077f0 <xTaskPriorityDisinherit>
 800675e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	2200      	movs	r2, #0
 8006764:	609a      	str	r2, [r3, #8]
 8006766:	e043      	b.n	80067f0 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d119      	bne.n	80067a2 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	6858      	ldr	r0, [r3, #4]
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006776:	461a      	mov	r2, r3
 8006778:	68b9      	ldr	r1, [r7, #8]
 800677a:	f008 fc08 	bl	800ef8e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	685a      	ldr	r2, [r3, #4]
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006786:	441a      	add	r2, r3
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	685a      	ldr	r2, [r3, #4]
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	689b      	ldr	r3, [r3, #8]
 8006794:	429a      	cmp	r2, r3
 8006796:	d32b      	bcc.n	80067f0 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	681a      	ldr	r2, [r3, #0]
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	605a      	str	r2, [r3, #4]
 80067a0:	e026      	b.n	80067f0 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	68d8      	ldr	r0, [r3, #12]
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067aa:	461a      	mov	r2, r3
 80067ac:	68b9      	ldr	r1, [r7, #8]
 80067ae:	f008 fbee 	bl	800ef8e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	68da      	ldr	r2, [r3, #12]
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067ba:	425b      	negs	r3, r3
 80067bc:	441a      	add	r2, r3
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	68da      	ldr	r2, [r3, #12]
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	429a      	cmp	r2, r3
 80067cc:	d207      	bcs.n	80067de <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	689a      	ldr	r2, [r3, #8]
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067d6:	425b      	negs	r3, r3
 80067d8:	441a      	add	r2, r3
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	2b02      	cmp	r3, #2
 80067e2:	d105      	bne.n	80067f0 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80067e4:	693b      	ldr	r3, [r7, #16]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d002      	beq.n	80067f0 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80067ea:	693b      	ldr	r3, [r7, #16]
 80067ec:	3b01      	subs	r3, #1
 80067ee:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80067f0:	693b      	ldr	r3, [r7, #16]
 80067f2:	1c5a      	adds	r2, r3, #1
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80067f8:	697b      	ldr	r3, [r7, #20]
}
 80067fa:	4618      	mov	r0, r3
 80067fc:	3718      	adds	r7, #24
 80067fe:	46bd      	mov	sp, r7
 8006800:	bd80      	pop	{r7, pc}

08006802 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006802:	b580      	push	{r7, lr}
 8006804:	b082      	sub	sp, #8
 8006806:	af00      	add	r7, sp, #0
 8006808:	6078      	str	r0, [r7, #4]
 800680a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006810:	2b00      	cmp	r3, #0
 8006812:	d018      	beq.n	8006846 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	68da      	ldr	r2, [r3, #12]
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800681c:	441a      	add	r2, r3
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	68da      	ldr	r2, [r3, #12]
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	689b      	ldr	r3, [r3, #8]
 800682a:	429a      	cmp	r2, r3
 800682c:	d303      	bcc.n	8006836 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681a      	ldr	r2, [r3, #0]
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	68d9      	ldr	r1, [r3, #12]
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800683e:	461a      	mov	r2, r3
 8006840:	6838      	ldr	r0, [r7, #0]
 8006842:	f008 fba4 	bl	800ef8e <memcpy>
	}
}
 8006846:	bf00      	nop
 8006848:	3708      	adds	r7, #8
 800684a:	46bd      	mov	sp, r7
 800684c:	bd80      	pop	{r7, pc}

0800684e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800684e:	b580      	push	{r7, lr}
 8006850:	b084      	sub	sp, #16
 8006852:	af00      	add	r7, sp, #0
 8006854:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006856:	f001 fdaf 	bl	80083b8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006860:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006862:	e011      	b.n	8006888 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006868:	2b00      	cmp	r3, #0
 800686a:	d012      	beq.n	8006892 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	3324      	adds	r3, #36	; 0x24
 8006870:	4618      	mov	r0, r3
 8006872:	f000 fd5f 	bl	8007334 <xTaskRemoveFromEventList>
 8006876:	4603      	mov	r3, r0
 8006878:	2b00      	cmp	r3, #0
 800687a:	d001      	beq.n	8006880 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800687c:	f000 fe38 	bl	80074f0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006880:	7bfb      	ldrb	r3, [r7, #15]
 8006882:	3b01      	subs	r3, #1
 8006884:	b2db      	uxtb	r3, r3
 8006886:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006888:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800688c:	2b00      	cmp	r3, #0
 800688e:	dce9      	bgt.n	8006864 <prvUnlockQueue+0x16>
 8006890:	e000      	b.n	8006894 <prvUnlockQueue+0x46>
					break;
 8006892:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	22ff      	movs	r2, #255	; 0xff
 8006898:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800689c:	f001 fdbe 	bl	800841c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80068a0:	f001 fd8a 	bl	80083b8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80068aa:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80068ac:	e011      	b.n	80068d2 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	691b      	ldr	r3, [r3, #16]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d012      	beq.n	80068dc <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	3310      	adds	r3, #16
 80068ba:	4618      	mov	r0, r3
 80068bc:	f000 fd3a 	bl	8007334 <xTaskRemoveFromEventList>
 80068c0:	4603      	mov	r3, r0
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d001      	beq.n	80068ca <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80068c6:	f000 fe13 	bl	80074f0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80068ca:	7bbb      	ldrb	r3, [r7, #14]
 80068cc:	3b01      	subs	r3, #1
 80068ce:	b2db      	uxtb	r3, r3
 80068d0:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80068d2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	dce9      	bgt.n	80068ae <prvUnlockQueue+0x60>
 80068da:	e000      	b.n	80068de <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80068dc:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	22ff      	movs	r2, #255	; 0xff
 80068e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80068e6:	f001 fd99 	bl	800841c <vPortExitCritical>
}
 80068ea:	bf00      	nop
 80068ec:	3710      	adds	r7, #16
 80068ee:	46bd      	mov	sp, r7
 80068f0:	bd80      	pop	{r7, pc}

080068f2 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80068f2:	b580      	push	{r7, lr}
 80068f4:	b084      	sub	sp, #16
 80068f6:	af00      	add	r7, sp, #0
 80068f8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80068fa:	f001 fd5d 	bl	80083b8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006902:	2b00      	cmp	r3, #0
 8006904:	d102      	bne.n	800690c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006906:	2301      	movs	r3, #1
 8006908:	60fb      	str	r3, [r7, #12]
 800690a:	e001      	b.n	8006910 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800690c:	2300      	movs	r3, #0
 800690e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006910:	f001 fd84 	bl	800841c <vPortExitCritical>

	return xReturn;
 8006914:	68fb      	ldr	r3, [r7, #12]
}
 8006916:	4618      	mov	r0, r3
 8006918:	3710      	adds	r7, #16
 800691a:	46bd      	mov	sp, r7
 800691c:	bd80      	pop	{r7, pc}

0800691e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800691e:	b580      	push	{r7, lr}
 8006920:	b084      	sub	sp, #16
 8006922:	af00      	add	r7, sp, #0
 8006924:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006926:	f001 fd47 	bl	80083b8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006932:	429a      	cmp	r2, r3
 8006934:	d102      	bne.n	800693c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006936:	2301      	movs	r3, #1
 8006938:	60fb      	str	r3, [r7, #12]
 800693a:	e001      	b.n	8006940 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800693c:	2300      	movs	r3, #0
 800693e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006940:	f001 fd6c 	bl	800841c <vPortExitCritical>

	return xReturn;
 8006944:	68fb      	ldr	r3, [r7, #12]
}
 8006946:	4618      	mov	r0, r3
 8006948:	3710      	adds	r7, #16
 800694a:	46bd      	mov	sp, r7
 800694c:	bd80      	pop	{r7, pc}
	...

08006950 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006950:	b480      	push	{r7}
 8006952:	b085      	sub	sp, #20
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
 8006958:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800695a:	2300      	movs	r3, #0
 800695c:	60fb      	str	r3, [r7, #12]
 800695e:	e014      	b.n	800698a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006960:	4a0e      	ldr	r2, [pc, #56]	; (800699c <vQueueAddToRegistry+0x4c>)
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006968:	2b00      	cmp	r3, #0
 800696a:	d10b      	bne.n	8006984 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800696c:	490b      	ldr	r1, [pc, #44]	; (800699c <vQueueAddToRegistry+0x4c>)
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	683a      	ldr	r2, [r7, #0]
 8006972:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006976:	4a09      	ldr	r2, [pc, #36]	; (800699c <vQueueAddToRegistry+0x4c>)
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	00db      	lsls	r3, r3, #3
 800697c:	4413      	add	r3, r2
 800697e:	687a      	ldr	r2, [r7, #4]
 8006980:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006982:	e005      	b.n	8006990 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	3301      	adds	r3, #1
 8006988:	60fb      	str	r3, [r7, #12]
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	2b07      	cmp	r3, #7
 800698e:	d9e7      	bls.n	8006960 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006990:	bf00      	nop
 8006992:	3714      	adds	r7, #20
 8006994:	46bd      	mov	sp, r7
 8006996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699a:	4770      	bx	lr
 800699c:	20007ac4 	.word	0x20007ac4

080069a0 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80069a0:	b480      	push	{r7}
 80069a2:	b085      	sub	sp, #20
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80069a8:	2300      	movs	r3, #0
 80069aa:	60fb      	str	r3, [r7, #12]
 80069ac:	e016      	b.n	80069dc <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80069ae:	4a10      	ldr	r2, [pc, #64]	; (80069f0 <vQueueUnregisterQueue+0x50>)
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	00db      	lsls	r3, r3, #3
 80069b4:	4413      	add	r3, r2
 80069b6:	685b      	ldr	r3, [r3, #4]
 80069b8:	687a      	ldr	r2, [r7, #4]
 80069ba:	429a      	cmp	r2, r3
 80069bc:	d10b      	bne.n	80069d6 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80069be:	4a0c      	ldr	r2, [pc, #48]	; (80069f0 <vQueueUnregisterQueue+0x50>)
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	2100      	movs	r1, #0
 80069c4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80069c8:	4a09      	ldr	r2, [pc, #36]	; (80069f0 <vQueueUnregisterQueue+0x50>)
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	00db      	lsls	r3, r3, #3
 80069ce:	4413      	add	r3, r2
 80069d0:	2200      	movs	r2, #0
 80069d2:	605a      	str	r2, [r3, #4]
				break;
 80069d4:	e005      	b.n	80069e2 <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	3301      	adds	r3, #1
 80069da:	60fb      	str	r3, [r7, #12]
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	2b07      	cmp	r3, #7
 80069e0:	d9e5      	bls.n	80069ae <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80069e2:	bf00      	nop
 80069e4:	3714      	adds	r7, #20
 80069e6:	46bd      	mov	sp, r7
 80069e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ec:	4770      	bx	lr
 80069ee:	bf00      	nop
 80069f0:	20007ac4 	.word	0x20007ac4

080069f4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80069f4:	b580      	push	{r7, lr}
 80069f6:	b086      	sub	sp, #24
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	60f8      	str	r0, [r7, #12]
 80069fc:	60b9      	str	r1, [r7, #8]
 80069fe:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006a04:	f001 fcd8 	bl	80083b8 <vPortEnterCritical>
 8006a08:	697b      	ldr	r3, [r7, #20]
 8006a0a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006a0e:	b25b      	sxtb	r3, r3
 8006a10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a14:	d103      	bne.n	8006a1e <vQueueWaitForMessageRestricted+0x2a>
 8006a16:	697b      	ldr	r3, [r7, #20]
 8006a18:	2200      	movs	r2, #0
 8006a1a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006a1e:	697b      	ldr	r3, [r7, #20]
 8006a20:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006a24:	b25b      	sxtb	r3, r3
 8006a26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a2a:	d103      	bne.n	8006a34 <vQueueWaitForMessageRestricted+0x40>
 8006a2c:	697b      	ldr	r3, [r7, #20]
 8006a2e:	2200      	movs	r2, #0
 8006a30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006a34:	f001 fcf2 	bl	800841c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006a38:	697b      	ldr	r3, [r7, #20]
 8006a3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d106      	bne.n	8006a4e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006a40:	697b      	ldr	r3, [r7, #20]
 8006a42:	3324      	adds	r3, #36	; 0x24
 8006a44:	687a      	ldr	r2, [r7, #4]
 8006a46:	68b9      	ldr	r1, [r7, #8]
 8006a48:	4618      	mov	r0, r3
 8006a4a:	f000 fc47 	bl	80072dc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006a4e:	6978      	ldr	r0, [r7, #20]
 8006a50:	f7ff fefd 	bl	800684e <prvUnlockQueue>
	}
 8006a54:	bf00      	nop
 8006a56:	3718      	adds	r7, #24
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	bd80      	pop	{r7, pc}

08006a5c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006a5c:	b580      	push	{r7, lr}
 8006a5e:	b08e      	sub	sp, #56	; 0x38
 8006a60:	af04      	add	r7, sp, #16
 8006a62:	60f8      	str	r0, [r7, #12]
 8006a64:	60b9      	str	r1, [r7, #8]
 8006a66:	607a      	str	r2, [r7, #4]
 8006a68:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006a6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d10b      	bne.n	8006a88 <xTaskCreateStatic+0x2c>
 8006a70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a74:	b672      	cpsid	i
 8006a76:	f383 8811 	msr	BASEPRI, r3
 8006a7a:	f3bf 8f6f 	isb	sy
 8006a7e:	f3bf 8f4f 	dsb	sy
 8006a82:	b662      	cpsie	i
 8006a84:	623b      	str	r3, [r7, #32]
 8006a86:	e7fe      	b.n	8006a86 <xTaskCreateStatic+0x2a>
		configASSERT( pxTaskBuffer != NULL );
 8006a88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d10b      	bne.n	8006aa6 <xTaskCreateStatic+0x4a>
 8006a8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a92:	b672      	cpsid	i
 8006a94:	f383 8811 	msr	BASEPRI, r3
 8006a98:	f3bf 8f6f 	isb	sy
 8006a9c:	f3bf 8f4f 	dsb	sy
 8006aa0:	b662      	cpsie	i
 8006aa2:	61fb      	str	r3, [r7, #28]
 8006aa4:	e7fe      	b.n	8006aa4 <xTaskCreateStatic+0x48>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006aa6:	2364      	movs	r3, #100	; 0x64
 8006aa8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006aaa:	693b      	ldr	r3, [r7, #16]
 8006aac:	2b64      	cmp	r3, #100	; 0x64
 8006aae:	d00b      	beq.n	8006ac8 <xTaskCreateStatic+0x6c>
 8006ab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ab4:	b672      	cpsid	i
 8006ab6:	f383 8811 	msr	BASEPRI, r3
 8006aba:	f3bf 8f6f 	isb	sy
 8006abe:	f3bf 8f4f 	dsb	sy
 8006ac2:	b662      	cpsie	i
 8006ac4:	61bb      	str	r3, [r7, #24]
 8006ac6:	e7fe      	b.n	8006ac6 <xTaskCreateStatic+0x6a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006ac8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006aca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d01e      	beq.n	8006b0e <xTaskCreateStatic+0xb2>
 8006ad0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d01b      	beq.n	8006b0e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006ad6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ad8:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006adc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006ade:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ae2:	2202      	movs	r2, #2
 8006ae4:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006ae8:	2300      	movs	r3, #0
 8006aea:	9303      	str	r3, [sp, #12]
 8006aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aee:	9302      	str	r3, [sp, #8]
 8006af0:	f107 0314 	add.w	r3, r7, #20
 8006af4:	9301      	str	r3, [sp, #4]
 8006af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006af8:	9300      	str	r3, [sp, #0]
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	687a      	ldr	r2, [r7, #4]
 8006afe:	68b9      	ldr	r1, [r7, #8]
 8006b00:	68f8      	ldr	r0, [r7, #12]
 8006b02:	f000 f850 	bl	8006ba6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006b06:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006b08:	f000 f8d6 	bl	8006cb8 <prvAddNewTaskToReadyList>
 8006b0c:	e001      	b.n	8006b12 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8006b0e:	2300      	movs	r3, #0
 8006b10:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006b12:	697b      	ldr	r3, [r7, #20]
	}
 8006b14:	4618      	mov	r0, r3
 8006b16:	3728      	adds	r7, #40	; 0x28
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	bd80      	pop	{r7, pc}

08006b1c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006b1c:	b580      	push	{r7, lr}
 8006b1e:	b08c      	sub	sp, #48	; 0x30
 8006b20:	af04      	add	r7, sp, #16
 8006b22:	60f8      	str	r0, [r7, #12]
 8006b24:	60b9      	str	r1, [r7, #8]
 8006b26:	603b      	str	r3, [r7, #0]
 8006b28:	4613      	mov	r3, r2
 8006b2a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006b2c:	88fb      	ldrh	r3, [r7, #6]
 8006b2e:	009b      	lsls	r3, r3, #2
 8006b30:	4618      	mov	r0, r3
 8006b32:	f001 fd63 	bl	80085fc <pvPortMalloc>
 8006b36:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006b38:	697b      	ldr	r3, [r7, #20]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d00e      	beq.n	8006b5c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006b3e:	2064      	movs	r0, #100	; 0x64
 8006b40:	f001 fd5c 	bl	80085fc <pvPortMalloc>
 8006b44:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006b46:	69fb      	ldr	r3, [r7, #28]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d003      	beq.n	8006b54 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006b4c:	69fb      	ldr	r3, [r7, #28]
 8006b4e:	697a      	ldr	r2, [r7, #20]
 8006b50:	631a      	str	r2, [r3, #48]	; 0x30
 8006b52:	e005      	b.n	8006b60 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006b54:	6978      	ldr	r0, [r7, #20]
 8006b56:	f001 fe19 	bl	800878c <vPortFree>
 8006b5a:	e001      	b.n	8006b60 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006b5c:	2300      	movs	r3, #0
 8006b5e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006b60:	69fb      	ldr	r3, [r7, #28]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d017      	beq.n	8006b96 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006b66:	69fb      	ldr	r3, [r7, #28]
 8006b68:	2200      	movs	r2, #0
 8006b6a:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006b6e:	88fa      	ldrh	r2, [r7, #6]
 8006b70:	2300      	movs	r3, #0
 8006b72:	9303      	str	r3, [sp, #12]
 8006b74:	69fb      	ldr	r3, [r7, #28]
 8006b76:	9302      	str	r3, [sp, #8]
 8006b78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b7a:	9301      	str	r3, [sp, #4]
 8006b7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b7e:	9300      	str	r3, [sp, #0]
 8006b80:	683b      	ldr	r3, [r7, #0]
 8006b82:	68b9      	ldr	r1, [r7, #8]
 8006b84:	68f8      	ldr	r0, [r7, #12]
 8006b86:	f000 f80e 	bl	8006ba6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006b8a:	69f8      	ldr	r0, [r7, #28]
 8006b8c:	f000 f894 	bl	8006cb8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006b90:	2301      	movs	r3, #1
 8006b92:	61bb      	str	r3, [r7, #24]
 8006b94:	e002      	b.n	8006b9c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006b96:	f04f 33ff 	mov.w	r3, #4294967295
 8006b9a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006b9c:	69bb      	ldr	r3, [r7, #24]
	}
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	3720      	adds	r7, #32
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	bd80      	pop	{r7, pc}

08006ba6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006ba6:	b580      	push	{r7, lr}
 8006ba8:	b088      	sub	sp, #32
 8006baa:	af00      	add	r7, sp, #0
 8006bac:	60f8      	str	r0, [r7, #12]
 8006bae:	60b9      	str	r1, [r7, #8]
 8006bb0:	607a      	str	r2, [r7, #4]
 8006bb2:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006bb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bb6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006bb8:	6879      	ldr	r1, [r7, #4]
 8006bba:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8006bbe:	440b      	add	r3, r1
 8006bc0:	009b      	lsls	r3, r3, #2
 8006bc2:	4413      	add	r3, r2
 8006bc4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006bc6:	69bb      	ldr	r3, [r7, #24]
 8006bc8:	f023 0307 	bic.w	r3, r3, #7
 8006bcc:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006bce:	69bb      	ldr	r3, [r7, #24]
 8006bd0:	f003 0307 	and.w	r3, r3, #7
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d00b      	beq.n	8006bf0 <prvInitialiseNewTask+0x4a>
 8006bd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bdc:	b672      	cpsid	i
 8006bde:	f383 8811 	msr	BASEPRI, r3
 8006be2:	f3bf 8f6f 	isb	sy
 8006be6:	f3bf 8f4f 	dsb	sy
 8006bea:	b662      	cpsie	i
 8006bec:	617b      	str	r3, [r7, #20]
 8006bee:	e7fe      	b.n	8006bee <prvInitialiseNewTask+0x48>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006bf0:	68bb      	ldr	r3, [r7, #8]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d01f      	beq.n	8006c36 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006bf6:	2300      	movs	r3, #0
 8006bf8:	61fb      	str	r3, [r7, #28]
 8006bfa:	e012      	b.n	8006c22 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006bfc:	68ba      	ldr	r2, [r7, #8]
 8006bfe:	69fb      	ldr	r3, [r7, #28]
 8006c00:	4413      	add	r3, r2
 8006c02:	7819      	ldrb	r1, [r3, #0]
 8006c04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c06:	69fb      	ldr	r3, [r7, #28]
 8006c08:	4413      	add	r3, r2
 8006c0a:	3334      	adds	r3, #52	; 0x34
 8006c0c:	460a      	mov	r2, r1
 8006c0e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006c10:	68ba      	ldr	r2, [r7, #8]
 8006c12:	69fb      	ldr	r3, [r7, #28]
 8006c14:	4413      	add	r3, r2
 8006c16:	781b      	ldrb	r3, [r3, #0]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d006      	beq.n	8006c2a <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006c1c:	69fb      	ldr	r3, [r7, #28]
 8006c1e:	3301      	adds	r3, #1
 8006c20:	61fb      	str	r3, [r7, #28]
 8006c22:	69fb      	ldr	r3, [r7, #28]
 8006c24:	2b1e      	cmp	r3, #30
 8006c26:	d9e9      	bls.n	8006bfc <prvInitialiseNewTask+0x56>
 8006c28:	e000      	b.n	8006c2c <prvInitialiseNewTask+0x86>
			{
				break;
 8006c2a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006c2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c2e:	2200      	movs	r2, #0
 8006c30:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
 8006c34:	e003      	b.n	8006c3e <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006c36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c38:	2200      	movs	r2, #0
 8006c3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006c3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c40:	2b06      	cmp	r3, #6
 8006c42:	d901      	bls.n	8006c48 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006c44:	2306      	movs	r3, #6
 8006c46:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006c48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c4a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006c4c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006c4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c50:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006c52:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->uxMutexesHeld = 0;
 8006c54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c56:	2200      	movs	r2, #0
 8006c58:	659a      	str	r2, [r3, #88]	; 0x58
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006c5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c5c:	3304      	adds	r3, #4
 8006c5e:	4618      	mov	r0, r3
 8006c60:	f7fe fe1d 	bl	800589e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006c64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c66:	3318      	adds	r3, #24
 8006c68:	4618      	mov	r0, r3
 8006c6a:	f7fe fe18 	bl	800589e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006c6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c72:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c76:	f1c3 0207 	rsb	r2, r3, #7
 8006c7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c7c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c82:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006c84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c86:	2200      	movs	r2, #0
 8006c88:	65da      	str	r2, [r3, #92]	; 0x5c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006c8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006c92:	683a      	ldr	r2, [r7, #0]
 8006c94:	68f9      	ldr	r1, [r7, #12]
 8006c96:	69b8      	ldr	r0, [r7, #24]
 8006c98:	f001 fa82 	bl	80081a0 <pxPortInitialiseStack>
 8006c9c:	4602      	mov	r2, r0
 8006c9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ca0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006ca2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d002      	beq.n	8006cae <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006ca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006caa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006cac:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006cae:	bf00      	nop
 8006cb0:	3720      	adds	r7, #32
 8006cb2:	46bd      	mov	sp, r7
 8006cb4:	bd80      	pop	{r7, pc}
	...

08006cb8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	b082      	sub	sp, #8
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006cc0:	f001 fb7a 	bl	80083b8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006cc4:	4b2a      	ldr	r3, [pc, #168]	; (8006d70 <prvAddNewTaskToReadyList+0xb8>)
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	3301      	adds	r3, #1
 8006cca:	4a29      	ldr	r2, [pc, #164]	; (8006d70 <prvAddNewTaskToReadyList+0xb8>)
 8006ccc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006cce:	4b29      	ldr	r3, [pc, #164]	; (8006d74 <prvAddNewTaskToReadyList+0xbc>)
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d109      	bne.n	8006cea <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006cd6:	4a27      	ldr	r2, [pc, #156]	; (8006d74 <prvAddNewTaskToReadyList+0xbc>)
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006cdc:	4b24      	ldr	r3, [pc, #144]	; (8006d70 <prvAddNewTaskToReadyList+0xb8>)
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	2b01      	cmp	r3, #1
 8006ce2:	d110      	bne.n	8006d06 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006ce4:	f000 fc2a 	bl	800753c <prvInitialiseTaskLists>
 8006ce8:	e00d      	b.n	8006d06 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006cea:	4b23      	ldr	r3, [pc, #140]	; (8006d78 <prvAddNewTaskToReadyList+0xc0>)
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d109      	bne.n	8006d06 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006cf2:	4b20      	ldr	r3, [pc, #128]	; (8006d74 <prvAddNewTaskToReadyList+0xbc>)
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cfc:	429a      	cmp	r2, r3
 8006cfe:	d802      	bhi.n	8006d06 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006d00:	4a1c      	ldr	r2, [pc, #112]	; (8006d74 <prvAddNewTaskToReadyList+0xbc>)
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006d06:	4b1d      	ldr	r3, [pc, #116]	; (8006d7c <prvAddNewTaskToReadyList+0xc4>)
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	3301      	adds	r3, #1
 8006d0c:	4a1b      	ldr	r2, [pc, #108]	; (8006d7c <prvAddNewTaskToReadyList+0xc4>)
 8006d0e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d14:	2201      	movs	r2, #1
 8006d16:	409a      	lsls	r2, r3
 8006d18:	4b19      	ldr	r3, [pc, #100]	; (8006d80 <prvAddNewTaskToReadyList+0xc8>)
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	4313      	orrs	r3, r2
 8006d1e:	4a18      	ldr	r2, [pc, #96]	; (8006d80 <prvAddNewTaskToReadyList+0xc8>)
 8006d20:	6013      	str	r3, [r2, #0]
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d26:	4613      	mov	r3, r2
 8006d28:	009b      	lsls	r3, r3, #2
 8006d2a:	4413      	add	r3, r2
 8006d2c:	009b      	lsls	r3, r3, #2
 8006d2e:	4a15      	ldr	r2, [pc, #84]	; (8006d84 <prvAddNewTaskToReadyList+0xcc>)
 8006d30:	441a      	add	r2, r3
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	3304      	adds	r3, #4
 8006d36:	4619      	mov	r1, r3
 8006d38:	4610      	mov	r0, r2
 8006d3a:	f7fe fdbd 	bl	80058b8 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006d3e:	f001 fb6d 	bl	800841c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006d42:	4b0d      	ldr	r3, [pc, #52]	; (8006d78 <prvAddNewTaskToReadyList+0xc0>)
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d00e      	beq.n	8006d68 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006d4a:	4b0a      	ldr	r3, [pc, #40]	; (8006d74 <prvAddNewTaskToReadyList+0xbc>)
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d54:	429a      	cmp	r2, r3
 8006d56:	d207      	bcs.n	8006d68 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006d58:	4b0b      	ldr	r3, [pc, #44]	; (8006d88 <prvAddNewTaskToReadyList+0xd0>)
 8006d5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d5e:	601a      	str	r2, [r3, #0]
 8006d60:	f3bf 8f4f 	dsb	sy
 8006d64:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006d68:	bf00      	nop
 8006d6a:	3708      	adds	r7, #8
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	bd80      	pop	{r7, pc}
 8006d70:	200009d0 	.word	0x200009d0
 8006d74:	200008d0 	.word	0x200008d0
 8006d78:	200009dc 	.word	0x200009dc
 8006d7c:	200009ec 	.word	0x200009ec
 8006d80:	200009d8 	.word	0x200009d8
 8006d84:	200008d4 	.word	0x200008d4
 8006d88:	e000ed04 	.word	0xe000ed04

08006d8c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	b084      	sub	sp, #16
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006d94:	2300      	movs	r3, #0
 8006d96:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d018      	beq.n	8006dd0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006d9e:	4b14      	ldr	r3, [pc, #80]	; (8006df0 <vTaskDelay+0x64>)
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d00b      	beq.n	8006dbe <vTaskDelay+0x32>
 8006da6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006daa:	b672      	cpsid	i
 8006dac:	f383 8811 	msr	BASEPRI, r3
 8006db0:	f3bf 8f6f 	isb	sy
 8006db4:	f3bf 8f4f 	dsb	sy
 8006db8:	b662      	cpsie	i
 8006dba:	60bb      	str	r3, [r7, #8]
 8006dbc:	e7fe      	b.n	8006dbc <vTaskDelay+0x30>
			vTaskSuspendAll();
 8006dbe:	f000 f883 	bl	8006ec8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006dc2:	2100      	movs	r1, #0
 8006dc4:	6878      	ldr	r0, [r7, #4]
 8006dc6:	f000 fe4b 	bl	8007a60 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006dca:	f000 f88b 	bl	8006ee4 <xTaskResumeAll>
 8006dce:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d107      	bne.n	8006de6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8006dd6:	4b07      	ldr	r3, [pc, #28]	; (8006df4 <vTaskDelay+0x68>)
 8006dd8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ddc:	601a      	str	r2, [r3, #0]
 8006dde:	f3bf 8f4f 	dsb	sy
 8006de2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006de6:	bf00      	nop
 8006de8:	3710      	adds	r7, #16
 8006dea:	46bd      	mov	sp, r7
 8006dec:	bd80      	pop	{r7, pc}
 8006dee:	bf00      	nop
 8006df0:	200009f8 	.word	0x200009f8
 8006df4:	e000ed04 	.word	0xe000ed04

08006df8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006df8:	b580      	push	{r7, lr}
 8006dfa:	b08a      	sub	sp, #40	; 0x28
 8006dfc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006dfe:	2300      	movs	r3, #0
 8006e00:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006e02:	2300      	movs	r3, #0
 8006e04:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006e06:	463a      	mov	r2, r7
 8006e08:	1d39      	adds	r1, r7, #4
 8006e0a:	f107 0308 	add.w	r3, r7, #8
 8006e0e:	4618      	mov	r0, r3
 8006e10:	f7f9 fbf6 	bl	8000600 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006e14:	6839      	ldr	r1, [r7, #0]
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	68ba      	ldr	r2, [r7, #8]
 8006e1a:	9202      	str	r2, [sp, #8]
 8006e1c:	9301      	str	r3, [sp, #4]
 8006e1e:	2300      	movs	r3, #0
 8006e20:	9300      	str	r3, [sp, #0]
 8006e22:	2300      	movs	r3, #0
 8006e24:	460a      	mov	r2, r1
 8006e26:	4922      	ldr	r1, [pc, #136]	; (8006eb0 <vTaskStartScheduler+0xb8>)
 8006e28:	4822      	ldr	r0, [pc, #136]	; (8006eb4 <vTaskStartScheduler+0xbc>)
 8006e2a:	f7ff fe17 	bl	8006a5c <xTaskCreateStatic>
 8006e2e:	4602      	mov	r2, r0
 8006e30:	4b21      	ldr	r3, [pc, #132]	; (8006eb8 <vTaskStartScheduler+0xc0>)
 8006e32:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006e34:	4b20      	ldr	r3, [pc, #128]	; (8006eb8 <vTaskStartScheduler+0xc0>)
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d002      	beq.n	8006e42 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006e3c:	2301      	movs	r3, #1
 8006e3e:	617b      	str	r3, [r7, #20]
 8006e40:	e001      	b.n	8006e46 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006e42:	2300      	movs	r3, #0
 8006e44:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006e46:	697b      	ldr	r3, [r7, #20]
 8006e48:	2b01      	cmp	r3, #1
 8006e4a:	d102      	bne.n	8006e52 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006e4c:	f000 fe6e 	bl	8007b2c <xTimerCreateTimerTask>
 8006e50:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006e52:	697b      	ldr	r3, [r7, #20]
 8006e54:	2b01      	cmp	r3, #1
 8006e56:	d117      	bne.n	8006e88 <vTaskStartScheduler+0x90>
 8006e58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e5c:	b672      	cpsid	i
 8006e5e:	f383 8811 	msr	BASEPRI, r3
 8006e62:	f3bf 8f6f 	isb	sy
 8006e66:	f3bf 8f4f 	dsb	sy
 8006e6a:	b662      	cpsie	i
 8006e6c:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006e6e:	4b13      	ldr	r3, [pc, #76]	; (8006ebc <vTaskStartScheduler+0xc4>)
 8006e70:	f04f 32ff 	mov.w	r2, #4294967295
 8006e74:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006e76:	4b12      	ldr	r3, [pc, #72]	; (8006ec0 <vTaskStartScheduler+0xc8>)
 8006e78:	2201      	movs	r2, #1
 8006e7a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006e7c:	4b11      	ldr	r3, [pc, #68]	; (8006ec4 <vTaskStartScheduler+0xcc>)
 8006e7e:	2200      	movs	r2, #0
 8006e80:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006e82:	f001 fa1d 	bl	80082c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006e86:	e00f      	b.n	8006ea8 <vTaskStartScheduler+0xb0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006e88:	697b      	ldr	r3, [r7, #20]
 8006e8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e8e:	d10b      	bne.n	8006ea8 <vTaskStartScheduler+0xb0>
 8006e90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e94:	b672      	cpsid	i
 8006e96:	f383 8811 	msr	BASEPRI, r3
 8006e9a:	f3bf 8f6f 	isb	sy
 8006e9e:	f3bf 8f4f 	dsb	sy
 8006ea2:	b662      	cpsie	i
 8006ea4:	60fb      	str	r3, [r7, #12]
 8006ea6:	e7fe      	b.n	8006ea6 <vTaskStartScheduler+0xae>
}
 8006ea8:	bf00      	nop
 8006eaa:	3718      	adds	r7, #24
 8006eac:	46bd      	mov	sp, r7
 8006eae:	bd80      	pop	{r7, pc}
 8006eb0:	0800ffa8 	.word	0x0800ffa8
 8006eb4:	08007509 	.word	0x08007509
 8006eb8:	200009f4 	.word	0x200009f4
 8006ebc:	200009f0 	.word	0x200009f0
 8006ec0:	200009dc 	.word	0x200009dc
 8006ec4:	200009d4 	.word	0x200009d4

08006ec8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006ec8:	b480      	push	{r7}
 8006eca:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006ecc:	4b04      	ldr	r3, [pc, #16]	; (8006ee0 <vTaskSuspendAll+0x18>)
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	3301      	adds	r3, #1
 8006ed2:	4a03      	ldr	r2, [pc, #12]	; (8006ee0 <vTaskSuspendAll+0x18>)
 8006ed4:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8006ed6:	bf00      	nop
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ede:	4770      	bx	lr
 8006ee0:	200009f8 	.word	0x200009f8

08006ee4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	b084      	sub	sp, #16
 8006ee8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006eea:	2300      	movs	r3, #0
 8006eec:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006eee:	2300      	movs	r3, #0
 8006ef0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006ef2:	4b42      	ldr	r3, [pc, #264]	; (8006ffc <xTaskResumeAll+0x118>)
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d10b      	bne.n	8006f12 <xTaskResumeAll+0x2e>
 8006efa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006efe:	b672      	cpsid	i
 8006f00:	f383 8811 	msr	BASEPRI, r3
 8006f04:	f3bf 8f6f 	isb	sy
 8006f08:	f3bf 8f4f 	dsb	sy
 8006f0c:	b662      	cpsie	i
 8006f0e:	603b      	str	r3, [r7, #0]
 8006f10:	e7fe      	b.n	8006f10 <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006f12:	f001 fa51 	bl	80083b8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006f16:	4b39      	ldr	r3, [pc, #228]	; (8006ffc <xTaskResumeAll+0x118>)
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	3b01      	subs	r3, #1
 8006f1c:	4a37      	ldr	r2, [pc, #220]	; (8006ffc <xTaskResumeAll+0x118>)
 8006f1e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006f20:	4b36      	ldr	r3, [pc, #216]	; (8006ffc <xTaskResumeAll+0x118>)
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d161      	bne.n	8006fec <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006f28:	4b35      	ldr	r3, [pc, #212]	; (8007000 <xTaskResumeAll+0x11c>)
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d05d      	beq.n	8006fec <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006f30:	e02e      	b.n	8006f90 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f32:	4b34      	ldr	r3, [pc, #208]	; (8007004 <xTaskResumeAll+0x120>)
 8006f34:	68db      	ldr	r3, [r3, #12]
 8006f36:	68db      	ldr	r3, [r3, #12]
 8006f38:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	3318      	adds	r3, #24
 8006f3e:	4618      	mov	r0, r3
 8006f40:	f7fe fd17 	bl	8005972 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	3304      	adds	r3, #4
 8006f48:	4618      	mov	r0, r3
 8006f4a:	f7fe fd12 	bl	8005972 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f52:	2201      	movs	r2, #1
 8006f54:	409a      	lsls	r2, r3
 8006f56:	4b2c      	ldr	r3, [pc, #176]	; (8007008 <xTaskResumeAll+0x124>)
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	4313      	orrs	r3, r2
 8006f5c:	4a2a      	ldr	r2, [pc, #168]	; (8007008 <xTaskResumeAll+0x124>)
 8006f5e:	6013      	str	r3, [r2, #0]
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f64:	4613      	mov	r3, r2
 8006f66:	009b      	lsls	r3, r3, #2
 8006f68:	4413      	add	r3, r2
 8006f6a:	009b      	lsls	r3, r3, #2
 8006f6c:	4a27      	ldr	r2, [pc, #156]	; (800700c <xTaskResumeAll+0x128>)
 8006f6e:	441a      	add	r2, r3
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	3304      	adds	r3, #4
 8006f74:	4619      	mov	r1, r3
 8006f76:	4610      	mov	r0, r2
 8006f78:	f7fe fc9e 	bl	80058b8 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f80:	4b23      	ldr	r3, [pc, #140]	; (8007010 <xTaskResumeAll+0x12c>)
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f86:	429a      	cmp	r2, r3
 8006f88:	d302      	bcc.n	8006f90 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8006f8a:	4b22      	ldr	r3, [pc, #136]	; (8007014 <xTaskResumeAll+0x130>)
 8006f8c:	2201      	movs	r2, #1
 8006f8e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006f90:	4b1c      	ldr	r3, [pc, #112]	; (8007004 <xTaskResumeAll+0x120>)
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d1cc      	bne.n	8006f32 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d001      	beq.n	8006fa2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006f9e:	f000 fb69 	bl	8007674 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006fa2:	4b1d      	ldr	r3, [pc, #116]	; (8007018 <xTaskResumeAll+0x134>)
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d010      	beq.n	8006fd0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006fae:	f000 f859 	bl	8007064 <xTaskIncrementTick>
 8006fb2:	4603      	mov	r3, r0
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d002      	beq.n	8006fbe <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006fb8:	4b16      	ldr	r3, [pc, #88]	; (8007014 <xTaskResumeAll+0x130>)
 8006fba:	2201      	movs	r2, #1
 8006fbc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	3b01      	subs	r3, #1
 8006fc2:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d1f1      	bne.n	8006fae <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8006fca:	4b13      	ldr	r3, [pc, #76]	; (8007018 <xTaskResumeAll+0x134>)
 8006fcc:	2200      	movs	r2, #0
 8006fce:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006fd0:	4b10      	ldr	r3, [pc, #64]	; (8007014 <xTaskResumeAll+0x130>)
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d009      	beq.n	8006fec <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006fd8:	2301      	movs	r3, #1
 8006fda:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006fdc:	4b0f      	ldr	r3, [pc, #60]	; (800701c <xTaskResumeAll+0x138>)
 8006fde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006fe2:	601a      	str	r2, [r3, #0]
 8006fe4:	f3bf 8f4f 	dsb	sy
 8006fe8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006fec:	f001 fa16 	bl	800841c <vPortExitCritical>

	return xAlreadyYielded;
 8006ff0:	68bb      	ldr	r3, [r7, #8]
}
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	3710      	adds	r7, #16
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	bd80      	pop	{r7, pc}
 8006ffa:	bf00      	nop
 8006ffc:	200009f8 	.word	0x200009f8
 8007000:	200009d0 	.word	0x200009d0
 8007004:	20000990 	.word	0x20000990
 8007008:	200009d8 	.word	0x200009d8
 800700c:	200008d4 	.word	0x200008d4
 8007010:	200008d0 	.word	0x200008d0
 8007014:	200009e4 	.word	0x200009e4
 8007018:	200009e0 	.word	0x200009e0
 800701c:	e000ed04 	.word	0xe000ed04

08007020 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007020:	b480      	push	{r7}
 8007022:	b083      	sub	sp, #12
 8007024:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007026:	4b05      	ldr	r3, [pc, #20]	; (800703c <xTaskGetTickCount+0x1c>)
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800702c:	687b      	ldr	r3, [r7, #4]
}
 800702e:	4618      	mov	r0, r3
 8007030:	370c      	adds	r7, #12
 8007032:	46bd      	mov	sp, r7
 8007034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007038:	4770      	bx	lr
 800703a:	bf00      	nop
 800703c:	200009d4 	.word	0x200009d4

08007040 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8007040:	b580      	push	{r7, lr}
 8007042:	b082      	sub	sp, #8
 8007044:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007046:	f001 fa97 	bl	8008578 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800704a:	2300      	movs	r3, #0
 800704c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800704e:	4b04      	ldr	r3, [pc, #16]	; (8007060 <xTaskGetTickCountFromISR+0x20>)
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007054:	683b      	ldr	r3, [r7, #0]
}
 8007056:	4618      	mov	r0, r3
 8007058:	3708      	adds	r7, #8
 800705a:	46bd      	mov	sp, r7
 800705c:	bd80      	pop	{r7, pc}
 800705e:	bf00      	nop
 8007060:	200009d4 	.word	0x200009d4

08007064 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007064:	b580      	push	{r7, lr}
 8007066:	b086      	sub	sp, #24
 8007068:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800706a:	2300      	movs	r3, #0
 800706c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800706e:	4b4f      	ldr	r3, [pc, #316]	; (80071ac <xTaskIncrementTick+0x148>)
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	2b00      	cmp	r3, #0
 8007074:	f040 8089 	bne.w	800718a <xTaskIncrementTick+0x126>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007078:	4b4d      	ldr	r3, [pc, #308]	; (80071b0 <xTaskIncrementTick+0x14c>)
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	3301      	adds	r3, #1
 800707e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007080:	4a4b      	ldr	r2, [pc, #300]	; (80071b0 <xTaskIncrementTick+0x14c>)
 8007082:	693b      	ldr	r3, [r7, #16]
 8007084:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007086:	693b      	ldr	r3, [r7, #16]
 8007088:	2b00      	cmp	r3, #0
 800708a:	d121      	bne.n	80070d0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800708c:	4b49      	ldr	r3, [pc, #292]	; (80071b4 <xTaskIncrementTick+0x150>)
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	2b00      	cmp	r3, #0
 8007094:	d00b      	beq.n	80070ae <xTaskIncrementTick+0x4a>
 8007096:	f04f 0350 	mov.w	r3, #80	; 0x50
 800709a:	b672      	cpsid	i
 800709c:	f383 8811 	msr	BASEPRI, r3
 80070a0:	f3bf 8f6f 	isb	sy
 80070a4:	f3bf 8f4f 	dsb	sy
 80070a8:	b662      	cpsie	i
 80070aa:	603b      	str	r3, [r7, #0]
 80070ac:	e7fe      	b.n	80070ac <xTaskIncrementTick+0x48>
 80070ae:	4b41      	ldr	r3, [pc, #260]	; (80071b4 <xTaskIncrementTick+0x150>)
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	60fb      	str	r3, [r7, #12]
 80070b4:	4b40      	ldr	r3, [pc, #256]	; (80071b8 <xTaskIncrementTick+0x154>)
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	4a3e      	ldr	r2, [pc, #248]	; (80071b4 <xTaskIncrementTick+0x150>)
 80070ba:	6013      	str	r3, [r2, #0]
 80070bc:	4a3e      	ldr	r2, [pc, #248]	; (80071b8 <xTaskIncrementTick+0x154>)
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	6013      	str	r3, [r2, #0]
 80070c2:	4b3e      	ldr	r3, [pc, #248]	; (80071bc <xTaskIncrementTick+0x158>)
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	3301      	adds	r3, #1
 80070c8:	4a3c      	ldr	r2, [pc, #240]	; (80071bc <xTaskIncrementTick+0x158>)
 80070ca:	6013      	str	r3, [r2, #0]
 80070cc:	f000 fad2 	bl	8007674 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80070d0:	4b3b      	ldr	r3, [pc, #236]	; (80071c0 <xTaskIncrementTick+0x15c>)
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	693a      	ldr	r2, [r7, #16]
 80070d6:	429a      	cmp	r2, r3
 80070d8:	d348      	bcc.n	800716c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80070da:	4b36      	ldr	r3, [pc, #216]	; (80071b4 <xTaskIncrementTick+0x150>)
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d104      	bne.n	80070ee <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80070e4:	4b36      	ldr	r3, [pc, #216]	; (80071c0 <xTaskIncrementTick+0x15c>)
 80070e6:	f04f 32ff 	mov.w	r2, #4294967295
 80070ea:	601a      	str	r2, [r3, #0]
					break;
 80070ec:	e03e      	b.n	800716c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80070ee:	4b31      	ldr	r3, [pc, #196]	; (80071b4 <xTaskIncrementTick+0x150>)
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	68db      	ldr	r3, [r3, #12]
 80070f4:	68db      	ldr	r3, [r3, #12]
 80070f6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80070f8:	68bb      	ldr	r3, [r7, #8]
 80070fa:	685b      	ldr	r3, [r3, #4]
 80070fc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80070fe:	693a      	ldr	r2, [r7, #16]
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	429a      	cmp	r2, r3
 8007104:	d203      	bcs.n	800710e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007106:	4a2e      	ldr	r2, [pc, #184]	; (80071c0 <xTaskIncrementTick+0x15c>)
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800710c:	e02e      	b.n	800716c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800710e:	68bb      	ldr	r3, [r7, #8]
 8007110:	3304      	adds	r3, #4
 8007112:	4618      	mov	r0, r3
 8007114:	f7fe fc2d 	bl	8005972 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007118:	68bb      	ldr	r3, [r7, #8]
 800711a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800711c:	2b00      	cmp	r3, #0
 800711e:	d004      	beq.n	800712a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007120:	68bb      	ldr	r3, [r7, #8]
 8007122:	3318      	adds	r3, #24
 8007124:	4618      	mov	r0, r3
 8007126:	f7fe fc24 	bl	8005972 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800712a:	68bb      	ldr	r3, [r7, #8]
 800712c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800712e:	2201      	movs	r2, #1
 8007130:	409a      	lsls	r2, r3
 8007132:	4b24      	ldr	r3, [pc, #144]	; (80071c4 <xTaskIncrementTick+0x160>)
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	4313      	orrs	r3, r2
 8007138:	4a22      	ldr	r2, [pc, #136]	; (80071c4 <xTaskIncrementTick+0x160>)
 800713a:	6013      	str	r3, [r2, #0]
 800713c:	68bb      	ldr	r3, [r7, #8]
 800713e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007140:	4613      	mov	r3, r2
 8007142:	009b      	lsls	r3, r3, #2
 8007144:	4413      	add	r3, r2
 8007146:	009b      	lsls	r3, r3, #2
 8007148:	4a1f      	ldr	r2, [pc, #124]	; (80071c8 <xTaskIncrementTick+0x164>)
 800714a:	441a      	add	r2, r3
 800714c:	68bb      	ldr	r3, [r7, #8]
 800714e:	3304      	adds	r3, #4
 8007150:	4619      	mov	r1, r3
 8007152:	4610      	mov	r0, r2
 8007154:	f7fe fbb0 	bl	80058b8 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007158:	68bb      	ldr	r3, [r7, #8]
 800715a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800715c:	4b1b      	ldr	r3, [pc, #108]	; (80071cc <xTaskIncrementTick+0x168>)
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007162:	429a      	cmp	r2, r3
 8007164:	d3b9      	bcc.n	80070da <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8007166:	2301      	movs	r3, #1
 8007168:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800716a:	e7b6      	b.n	80070da <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800716c:	4b17      	ldr	r3, [pc, #92]	; (80071cc <xTaskIncrementTick+0x168>)
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007172:	4915      	ldr	r1, [pc, #84]	; (80071c8 <xTaskIncrementTick+0x164>)
 8007174:	4613      	mov	r3, r2
 8007176:	009b      	lsls	r3, r3, #2
 8007178:	4413      	add	r3, r2
 800717a:	009b      	lsls	r3, r3, #2
 800717c:	440b      	add	r3, r1
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	2b01      	cmp	r3, #1
 8007182:	d907      	bls.n	8007194 <xTaskIncrementTick+0x130>
			{
				xSwitchRequired = pdTRUE;
 8007184:	2301      	movs	r3, #1
 8007186:	617b      	str	r3, [r7, #20]
 8007188:	e004      	b.n	8007194 <xTaskIncrementTick+0x130>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800718a:	4b11      	ldr	r3, [pc, #68]	; (80071d0 <xTaskIncrementTick+0x16c>)
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	3301      	adds	r3, #1
 8007190:	4a0f      	ldr	r2, [pc, #60]	; (80071d0 <xTaskIncrementTick+0x16c>)
 8007192:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8007194:	4b0f      	ldr	r3, [pc, #60]	; (80071d4 <xTaskIncrementTick+0x170>)
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	2b00      	cmp	r3, #0
 800719a:	d001      	beq.n	80071a0 <xTaskIncrementTick+0x13c>
		{
			xSwitchRequired = pdTRUE;
 800719c:	2301      	movs	r3, #1
 800719e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80071a0:	697b      	ldr	r3, [r7, #20]
}
 80071a2:	4618      	mov	r0, r3
 80071a4:	3718      	adds	r7, #24
 80071a6:	46bd      	mov	sp, r7
 80071a8:	bd80      	pop	{r7, pc}
 80071aa:	bf00      	nop
 80071ac:	200009f8 	.word	0x200009f8
 80071b0:	200009d4 	.word	0x200009d4
 80071b4:	20000988 	.word	0x20000988
 80071b8:	2000098c 	.word	0x2000098c
 80071bc:	200009e8 	.word	0x200009e8
 80071c0:	200009f0 	.word	0x200009f0
 80071c4:	200009d8 	.word	0x200009d8
 80071c8:	200008d4 	.word	0x200008d4
 80071cc:	200008d0 	.word	0x200008d0
 80071d0:	200009e0 	.word	0x200009e0
 80071d4:	200009e4 	.word	0x200009e4

080071d8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80071d8:	b480      	push	{r7}
 80071da:	b087      	sub	sp, #28
 80071dc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80071de:	4b27      	ldr	r3, [pc, #156]	; (800727c <vTaskSwitchContext+0xa4>)
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d003      	beq.n	80071ee <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80071e6:	4b26      	ldr	r3, [pc, #152]	; (8007280 <vTaskSwitchContext+0xa8>)
 80071e8:	2201      	movs	r2, #1
 80071ea:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80071ec:	e040      	b.n	8007270 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 80071ee:	4b24      	ldr	r3, [pc, #144]	; (8007280 <vTaskSwitchContext+0xa8>)
 80071f0:	2200      	movs	r2, #0
 80071f2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80071f4:	4b23      	ldr	r3, [pc, #140]	; (8007284 <vTaskSwitchContext+0xac>)
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	fab3 f383 	clz	r3, r3
 8007200:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8007202:	7afb      	ldrb	r3, [r7, #11]
 8007204:	f1c3 031f 	rsb	r3, r3, #31
 8007208:	617b      	str	r3, [r7, #20]
 800720a:	491f      	ldr	r1, [pc, #124]	; (8007288 <vTaskSwitchContext+0xb0>)
 800720c:	697a      	ldr	r2, [r7, #20]
 800720e:	4613      	mov	r3, r2
 8007210:	009b      	lsls	r3, r3, #2
 8007212:	4413      	add	r3, r2
 8007214:	009b      	lsls	r3, r3, #2
 8007216:	440b      	add	r3, r1
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	2b00      	cmp	r3, #0
 800721c:	d10b      	bne.n	8007236 <vTaskSwitchContext+0x5e>
	__asm volatile
 800721e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007222:	b672      	cpsid	i
 8007224:	f383 8811 	msr	BASEPRI, r3
 8007228:	f3bf 8f6f 	isb	sy
 800722c:	f3bf 8f4f 	dsb	sy
 8007230:	b662      	cpsie	i
 8007232:	607b      	str	r3, [r7, #4]
 8007234:	e7fe      	b.n	8007234 <vTaskSwitchContext+0x5c>
 8007236:	697a      	ldr	r2, [r7, #20]
 8007238:	4613      	mov	r3, r2
 800723a:	009b      	lsls	r3, r3, #2
 800723c:	4413      	add	r3, r2
 800723e:	009b      	lsls	r3, r3, #2
 8007240:	4a11      	ldr	r2, [pc, #68]	; (8007288 <vTaskSwitchContext+0xb0>)
 8007242:	4413      	add	r3, r2
 8007244:	613b      	str	r3, [r7, #16]
 8007246:	693b      	ldr	r3, [r7, #16]
 8007248:	685b      	ldr	r3, [r3, #4]
 800724a:	685a      	ldr	r2, [r3, #4]
 800724c:	693b      	ldr	r3, [r7, #16]
 800724e:	605a      	str	r2, [r3, #4]
 8007250:	693b      	ldr	r3, [r7, #16]
 8007252:	685a      	ldr	r2, [r3, #4]
 8007254:	693b      	ldr	r3, [r7, #16]
 8007256:	3308      	adds	r3, #8
 8007258:	429a      	cmp	r2, r3
 800725a:	d104      	bne.n	8007266 <vTaskSwitchContext+0x8e>
 800725c:	693b      	ldr	r3, [r7, #16]
 800725e:	685b      	ldr	r3, [r3, #4]
 8007260:	685a      	ldr	r2, [r3, #4]
 8007262:	693b      	ldr	r3, [r7, #16]
 8007264:	605a      	str	r2, [r3, #4]
 8007266:	693b      	ldr	r3, [r7, #16]
 8007268:	685b      	ldr	r3, [r3, #4]
 800726a:	68db      	ldr	r3, [r3, #12]
 800726c:	4a07      	ldr	r2, [pc, #28]	; (800728c <vTaskSwitchContext+0xb4>)
 800726e:	6013      	str	r3, [r2, #0]
}
 8007270:	bf00      	nop
 8007272:	371c      	adds	r7, #28
 8007274:	46bd      	mov	sp, r7
 8007276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727a:	4770      	bx	lr
 800727c:	200009f8 	.word	0x200009f8
 8007280:	200009e4 	.word	0x200009e4
 8007284:	200009d8 	.word	0x200009d8
 8007288:	200008d4 	.word	0x200008d4
 800728c:	200008d0 	.word	0x200008d0

08007290 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007290:	b580      	push	{r7, lr}
 8007292:	b084      	sub	sp, #16
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
 8007298:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	2b00      	cmp	r3, #0
 800729e:	d10b      	bne.n	80072b8 <vTaskPlaceOnEventList+0x28>
 80072a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072a4:	b672      	cpsid	i
 80072a6:	f383 8811 	msr	BASEPRI, r3
 80072aa:	f3bf 8f6f 	isb	sy
 80072ae:	f3bf 8f4f 	dsb	sy
 80072b2:	b662      	cpsie	i
 80072b4:	60fb      	str	r3, [r7, #12]
 80072b6:	e7fe      	b.n	80072b6 <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80072b8:	4b07      	ldr	r3, [pc, #28]	; (80072d8 <vTaskPlaceOnEventList+0x48>)
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	3318      	adds	r3, #24
 80072be:	4619      	mov	r1, r3
 80072c0:	6878      	ldr	r0, [r7, #4]
 80072c2:	f7fe fb1d 	bl	8005900 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80072c6:	2101      	movs	r1, #1
 80072c8:	6838      	ldr	r0, [r7, #0]
 80072ca:	f000 fbc9 	bl	8007a60 <prvAddCurrentTaskToDelayedList>
}
 80072ce:	bf00      	nop
 80072d0:	3710      	adds	r7, #16
 80072d2:	46bd      	mov	sp, r7
 80072d4:	bd80      	pop	{r7, pc}
 80072d6:	bf00      	nop
 80072d8:	200008d0 	.word	0x200008d0

080072dc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80072dc:	b580      	push	{r7, lr}
 80072de:	b086      	sub	sp, #24
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	60f8      	str	r0, [r7, #12]
 80072e4:	60b9      	str	r1, [r7, #8]
 80072e6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d10b      	bne.n	8007306 <vTaskPlaceOnEventListRestricted+0x2a>
 80072ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072f2:	b672      	cpsid	i
 80072f4:	f383 8811 	msr	BASEPRI, r3
 80072f8:	f3bf 8f6f 	isb	sy
 80072fc:	f3bf 8f4f 	dsb	sy
 8007300:	b662      	cpsie	i
 8007302:	617b      	str	r3, [r7, #20]
 8007304:	e7fe      	b.n	8007304 <vTaskPlaceOnEventListRestricted+0x28>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007306:	4b0a      	ldr	r3, [pc, #40]	; (8007330 <vTaskPlaceOnEventListRestricted+0x54>)
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	3318      	adds	r3, #24
 800730c:	4619      	mov	r1, r3
 800730e:	68f8      	ldr	r0, [r7, #12]
 8007310:	f7fe fad2 	bl	80058b8 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	2b00      	cmp	r3, #0
 8007318:	d002      	beq.n	8007320 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800731a:	f04f 33ff 	mov.w	r3, #4294967295
 800731e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007320:	6879      	ldr	r1, [r7, #4]
 8007322:	68b8      	ldr	r0, [r7, #8]
 8007324:	f000 fb9c 	bl	8007a60 <prvAddCurrentTaskToDelayedList>
	}
 8007328:	bf00      	nop
 800732a:	3718      	adds	r7, #24
 800732c:	46bd      	mov	sp, r7
 800732e:	bd80      	pop	{r7, pc}
 8007330:	200008d0 	.word	0x200008d0

08007334 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007334:	b580      	push	{r7, lr}
 8007336:	b086      	sub	sp, #24
 8007338:	af00      	add	r7, sp, #0
 800733a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	68db      	ldr	r3, [r3, #12]
 8007340:	68db      	ldr	r3, [r3, #12]
 8007342:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007344:	693b      	ldr	r3, [r7, #16]
 8007346:	2b00      	cmp	r3, #0
 8007348:	d10b      	bne.n	8007362 <xTaskRemoveFromEventList+0x2e>
 800734a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800734e:	b672      	cpsid	i
 8007350:	f383 8811 	msr	BASEPRI, r3
 8007354:	f3bf 8f6f 	isb	sy
 8007358:	f3bf 8f4f 	dsb	sy
 800735c:	b662      	cpsie	i
 800735e:	60fb      	str	r3, [r7, #12]
 8007360:	e7fe      	b.n	8007360 <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007362:	693b      	ldr	r3, [r7, #16]
 8007364:	3318      	adds	r3, #24
 8007366:	4618      	mov	r0, r3
 8007368:	f7fe fb03 	bl	8005972 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800736c:	4b1d      	ldr	r3, [pc, #116]	; (80073e4 <xTaskRemoveFromEventList+0xb0>)
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	2b00      	cmp	r3, #0
 8007372:	d11c      	bne.n	80073ae <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007374:	693b      	ldr	r3, [r7, #16]
 8007376:	3304      	adds	r3, #4
 8007378:	4618      	mov	r0, r3
 800737a:	f7fe fafa 	bl	8005972 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800737e:	693b      	ldr	r3, [r7, #16]
 8007380:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007382:	2201      	movs	r2, #1
 8007384:	409a      	lsls	r2, r3
 8007386:	4b18      	ldr	r3, [pc, #96]	; (80073e8 <xTaskRemoveFromEventList+0xb4>)
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	4313      	orrs	r3, r2
 800738c:	4a16      	ldr	r2, [pc, #88]	; (80073e8 <xTaskRemoveFromEventList+0xb4>)
 800738e:	6013      	str	r3, [r2, #0]
 8007390:	693b      	ldr	r3, [r7, #16]
 8007392:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007394:	4613      	mov	r3, r2
 8007396:	009b      	lsls	r3, r3, #2
 8007398:	4413      	add	r3, r2
 800739a:	009b      	lsls	r3, r3, #2
 800739c:	4a13      	ldr	r2, [pc, #76]	; (80073ec <xTaskRemoveFromEventList+0xb8>)
 800739e:	441a      	add	r2, r3
 80073a0:	693b      	ldr	r3, [r7, #16]
 80073a2:	3304      	adds	r3, #4
 80073a4:	4619      	mov	r1, r3
 80073a6:	4610      	mov	r0, r2
 80073a8:	f7fe fa86 	bl	80058b8 <vListInsertEnd>
 80073ac:	e005      	b.n	80073ba <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80073ae:	693b      	ldr	r3, [r7, #16]
 80073b0:	3318      	adds	r3, #24
 80073b2:	4619      	mov	r1, r3
 80073b4:	480e      	ldr	r0, [pc, #56]	; (80073f0 <xTaskRemoveFromEventList+0xbc>)
 80073b6:	f7fe fa7f 	bl	80058b8 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80073ba:	693b      	ldr	r3, [r7, #16]
 80073bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073be:	4b0d      	ldr	r3, [pc, #52]	; (80073f4 <xTaskRemoveFromEventList+0xc0>)
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073c4:	429a      	cmp	r2, r3
 80073c6:	d905      	bls.n	80073d4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80073c8:	2301      	movs	r3, #1
 80073ca:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80073cc:	4b0a      	ldr	r3, [pc, #40]	; (80073f8 <xTaskRemoveFromEventList+0xc4>)
 80073ce:	2201      	movs	r2, #1
 80073d0:	601a      	str	r2, [r3, #0]
 80073d2:	e001      	b.n	80073d8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80073d4:	2300      	movs	r3, #0
 80073d6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80073d8:	697b      	ldr	r3, [r7, #20]
}
 80073da:	4618      	mov	r0, r3
 80073dc:	3718      	adds	r7, #24
 80073de:	46bd      	mov	sp, r7
 80073e0:	bd80      	pop	{r7, pc}
 80073e2:	bf00      	nop
 80073e4:	200009f8 	.word	0x200009f8
 80073e8:	200009d8 	.word	0x200009d8
 80073ec:	200008d4 	.word	0x200008d4
 80073f0:	20000990 	.word	0x20000990
 80073f4:	200008d0 	.word	0x200008d0
 80073f8:	200009e4 	.word	0x200009e4

080073fc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80073fc:	b480      	push	{r7}
 80073fe:	b083      	sub	sp, #12
 8007400:	af00      	add	r7, sp, #0
 8007402:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007404:	4b06      	ldr	r3, [pc, #24]	; (8007420 <vTaskInternalSetTimeOutState+0x24>)
 8007406:	681a      	ldr	r2, [r3, #0]
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800740c:	4b05      	ldr	r3, [pc, #20]	; (8007424 <vTaskInternalSetTimeOutState+0x28>)
 800740e:	681a      	ldr	r2, [r3, #0]
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	605a      	str	r2, [r3, #4]
}
 8007414:	bf00      	nop
 8007416:	370c      	adds	r7, #12
 8007418:	46bd      	mov	sp, r7
 800741a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741e:	4770      	bx	lr
 8007420:	200009e8 	.word	0x200009e8
 8007424:	200009d4 	.word	0x200009d4

08007428 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007428:	b580      	push	{r7, lr}
 800742a:	b088      	sub	sp, #32
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
 8007430:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	2b00      	cmp	r3, #0
 8007436:	d10b      	bne.n	8007450 <xTaskCheckForTimeOut+0x28>
 8007438:	f04f 0350 	mov.w	r3, #80	; 0x50
 800743c:	b672      	cpsid	i
 800743e:	f383 8811 	msr	BASEPRI, r3
 8007442:	f3bf 8f6f 	isb	sy
 8007446:	f3bf 8f4f 	dsb	sy
 800744a:	b662      	cpsie	i
 800744c:	613b      	str	r3, [r7, #16]
 800744e:	e7fe      	b.n	800744e <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 8007450:	683b      	ldr	r3, [r7, #0]
 8007452:	2b00      	cmp	r3, #0
 8007454:	d10b      	bne.n	800746e <xTaskCheckForTimeOut+0x46>
 8007456:	f04f 0350 	mov.w	r3, #80	; 0x50
 800745a:	b672      	cpsid	i
 800745c:	f383 8811 	msr	BASEPRI, r3
 8007460:	f3bf 8f6f 	isb	sy
 8007464:	f3bf 8f4f 	dsb	sy
 8007468:	b662      	cpsie	i
 800746a:	60fb      	str	r3, [r7, #12]
 800746c:	e7fe      	b.n	800746c <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 800746e:	f000 ffa3 	bl	80083b8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007472:	4b1d      	ldr	r3, [pc, #116]	; (80074e8 <xTaskCheckForTimeOut+0xc0>)
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	685b      	ldr	r3, [r3, #4]
 800747c:	69ba      	ldr	r2, [r7, #24]
 800747e:	1ad3      	subs	r3, r2, r3
 8007480:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007482:	683b      	ldr	r3, [r7, #0]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	f1b3 3fff 	cmp.w	r3, #4294967295
 800748a:	d102      	bne.n	8007492 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800748c:	2300      	movs	r3, #0
 800748e:	61fb      	str	r3, [r7, #28]
 8007490:	e023      	b.n	80074da <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681a      	ldr	r2, [r3, #0]
 8007496:	4b15      	ldr	r3, [pc, #84]	; (80074ec <xTaskCheckForTimeOut+0xc4>)
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	429a      	cmp	r2, r3
 800749c:	d007      	beq.n	80074ae <xTaskCheckForTimeOut+0x86>
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	685b      	ldr	r3, [r3, #4]
 80074a2:	69ba      	ldr	r2, [r7, #24]
 80074a4:	429a      	cmp	r2, r3
 80074a6:	d302      	bcc.n	80074ae <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80074a8:	2301      	movs	r3, #1
 80074aa:	61fb      	str	r3, [r7, #28]
 80074ac:	e015      	b.n	80074da <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80074ae:	683b      	ldr	r3, [r7, #0]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	697a      	ldr	r2, [r7, #20]
 80074b4:	429a      	cmp	r2, r3
 80074b6:	d20b      	bcs.n	80074d0 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80074b8:	683b      	ldr	r3, [r7, #0]
 80074ba:	681a      	ldr	r2, [r3, #0]
 80074bc:	697b      	ldr	r3, [r7, #20]
 80074be:	1ad2      	subs	r2, r2, r3
 80074c0:	683b      	ldr	r3, [r7, #0]
 80074c2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80074c4:	6878      	ldr	r0, [r7, #4]
 80074c6:	f7ff ff99 	bl	80073fc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80074ca:	2300      	movs	r3, #0
 80074cc:	61fb      	str	r3, [r7, #28]
 80074ce:	e004      	b.n	80074da <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80074d0:	683b      	ldr	r3, [r7, #0]
 80074d2:	2200      	movs	r2, #0
 80074d4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80074d6:	2301      	movs	r3, #1
 80074d8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80074da:	f000 ff9f 	bl	800841c <vPortExitCritical>

	return xReturn;
 80074de:	69fb      	ldr	r3, [r7, #28]
}
 80074e0:	4618      	mov	r0, r3
 80074e2:	3720      	adds	r7, #32
 80074e4:	46bd      	mov	sp, r7
 80074e6:	bd80      	pop	{r7, pc}
 80074e8:	200009d4 	.word	0x200009d4
 80074ec:	200009e8 	.word	0x200009e8

080074f0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80074f0:	b480      	push	{r7}
 80074f2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80074f4:	4b03      	ldr	r3, [pc, #12]	; (8007504 <vTaskMissedYield+0x14>)
 80074f6:	2201      	movs	r2, #1
 80074f8:	601a      	str	r2, [r3, #0]
}
 80074fa:	bf00      	nop
 80074fc:	46bd      	mov	sp, r7
 80074fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007502:	4770      	bx	lr
 8007504:	200009e4 	.word	0x200009e4

08007508 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007508:	b580      	push	{r7, lr}
 800750a:	b082      	sub	sp, #8
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007510:	f000 f854 	bl	80075bc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007514:	4b07      	ldr	r3, [pc, #28]	; (8007534 <prvIdleTask+0x2c>)
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	2b01      	cmp	r3, #1
 800751a:	d907      	bls.n	800752c <prvIdleTask+0x24>
			{
				taskYIELD();
 800751c:	4b06      	ldr	r3, [pc, #24]	; (8007538 <prvIdleTask+0x30>)
 800751e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007522:	601a      	str	r2, [r3, #0]
 8007524:	f3bf 8f4f 	dsb	sy
 8007528:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800752c:	f7f9 f860 	bl	80005f0 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8007530:	e7ee      	b.n	8007510 <prvIdleTask+0x8>
 8007532:	bf00      	nop
 8007534:	200008d4 	.word	0x200008d4
 8007538:	e000ed04 	.word	0xe000ed04

0800753c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800753c:	b580      	push	{r7, lr}
 800753e:	b082      	sub	sp, #8
 8007540:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007542:	2300      	movs	r3, #0
 8007544:	607b      	str	r3, [r7, #4]
 8007546:	e00c      	b.n	8007562 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007548:	687a      	ldr	r2, [r7, #4]
 800754a:	4613      	mov	r3, r2
 800754c:	009b      	lsls	r3, r3, #2
 800754e:	4413      	add	r3, r2
 8007550:	009b      	lsls	r3, r3, #2
 8007552:	4a12      	ldr	r2, [pc, #72]	; (800759c <prvInitialiseTaskLists+0x60>)
 8007554:	4413      	add	r3, r2
 8007556:	4618      	mov	r0, r3
 8007558:	f7fe f981 	bl	800585e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	3301      	adds	r3, #1
 8007560:	607b      	str	r3, [r7, #4]
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	2b06      	cmp	r3, #6
 8007566:	d9ef      	bls.n	8007548 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007568:	480d      	ldr	r0, [pc, #52]	; (80075a0 <prvInitialiseTaskLists+0x64>)
 800756a:	f7fe f978 	bl	800585e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800756e:	480d      	ldr	r0, [pc, #52]	; (80075a4 <prvInitialiseTaskLists+0x68>)
 8007570:	f7fe f975 	bl	800585e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007574:	480c      	ldr	r0, [pc, #48]	; (80075a8 <prvInitialiseTaskLists+0x6c>)
 8007576:	f7fe f972 	bl	800585e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800757a:	480c      	ldr	r0, [pc, #48]	; (80075ac <prvInitialiseTaskLists+0x70>)
 800757c:	f7fe f96f 	bl	800585e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007580:	480b      	ldr	r0, [pc, #44]	; (80075b0 <prvInitialiseTaskLists+0x74>)
 8007582:	f7fe f96c 	bl	800585e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007586:	4b0b      	ldr	r3, [pc, #44]	; (80075b4 <prvInitialiseTaskLists+0x78>)
 8007588:	4a05      	ldr	r2, [pc, #20]	; (80075a0 <prvInitialiseTaskLists+0x64>)
 800758a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800758c:	4b0a      	ldr	r3, [pc, #40]	; (80075b8 <prvInitialiseTaskLists+0x7c>)
 800758e:	4a05      	ldr	r2, [pc, #20]	; (80075a4 <prvInitialiseTaskLists+0x68>)
 8007590:	601a      	str	r2, [r3, #0]
}
 8007592:	bf00      	nop
 8007594:	3708      	adds	r7, #8
 8007596:	46bd      	mov	sp, r7
 8007598:	bd80      	pop	{r7, pc}
 800759a:	bf00      	nop
 800759c:	200008d4 	.word	0x200008d4
 80075a0:	20000960 	.word	0x20000960
 80075a4:	20000974 	.word	0x20000974
 80075a8:	20000990 	.word	0x20000990
 80075ac:	200009a4 	.word	0x200009a4
 80075b0:	200009bc 	.word	0x200009bc
 80075b4:	20000988 	.word	0x20000988
 80075b8:	2000098c 	.word	0x2000098c

080075bc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80075bc:	b580      	push	{r7, lr}
 80075be:	b082      	sub	sp, #8
 80075c0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80075c2:	e019      	b.n	80075f8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80075c4:	f000 fef8 	bl	80083b8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80075c8:	4b0f      	ldr	r3, [pc, #60]	; (8007608 <prvCheckTasksWaitingTermination+0x4c>)
 80075ca:	68db      	ldr	r3, [r3, #12]
 80075cc:	68db      	ldr	r3, [r3, #12]
 80075ce:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	3304      	adds	r3, #4
 80075d4:	4618      	mov	r0, r3
 80075d6:	f7fe f9cc 	bl	8005972 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80075da:	4b0c      	ldr	r3, [pc, #48]	; (800760c <prvCheckTasksWaitingTermination+0x50>)
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	3b01      	subs	r3, #1
 80075e0:	4a0a      	ldr	r2, [pc, #40]	; (800760c <prvCheckTasksWaitingTermination+0x50>)
 80075e2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80075e4:	4b0a      	ldr	r3, [pc, #40]	; (8007610 <prvCheckTasksWaitingTermination+0x54>)
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	3b01      	subs	r3, #1
 80075ea:	4a09      	ldr	r2, [pc, #36]	; (8007610 <prvCheckTasksWaitingTermination+0x54>)
 80075ec:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80075ee:	f000 ff15 	bl	800841c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80075f2:	6878      	ldr	r0, [r7, #4]
 80075f4:	f000 f80e 	bl	8007614 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80075f8:	4b05      	ldr	r3, [pc, #20]	; (8007610 <prvCheckTasksWaitingTermination+0x54>)
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d1e1      	bne.n	80075c4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007600:	bf00      	nop
 8007602:	3708      	adds	r7, #8
 8007604:	46bd      	mov	sp, r7
 8007606:	bd80      	pop	{r7, pc}
 8007608:	200009a4 	.word	0x200009a4
 800760c:	200009d0 	.word	0x200009d0
 8007610:	200009b8 	.word	0x200009b8

08007614 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007614:	b580      	push	{r7, lr}
 8007616:	b084      	sub	sp, #16
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8007622:	2b00      	cmp	r3, #0
 8007624:	d108      	bne.n	8007638 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800762a:	4618      	mov	r0, r3
 800762c:	f001 f8ae 	bl	800878c <vPortFree>
				vPortFree( pxTCB );
 8007630:	6878      	ldr	r0, [r7, #4]
 8007632:	f001 f8ab 	bl	800878c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007636:	e019      	b.n	800766c <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800763e:	2b01      	cmp	r3, #1
 8007640:	d103      	bne.n	800764a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007642:	6878      	ldr	r0, [r7, #4]
 8007644:	f001 f8a2 	bl	800878c <vPortFree>
	}
 8007648:	e010      	b.n	800766c <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8007650:	2b02      	cmp	r3, #2
 8007652:	d00b      	beq.n	800766c <prvDeleteTCB+0x58>
 8007654:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007658:	b672      	cpsid	i
 800765a:	f383 8811 	msr	BASEPRI, r3
 800765e:	f3bf 8f6f 	isb	sy
 8007662:	f3bf 8f4f 	dsb	sy
 8007666:	b662      	cpsie	i
 8007668:	60fb      	str	r3, [r7, #12]
 800766a:	e7fe      	b.n	800766a <prvDeleteTCB+0x56>
	}
 800766c:	bf00      	nop
 800766e:	3710      	adds	r7, #16
 8007670:	46bd      	mov	sp, r7
 8007672:	bd80      	pop	{r7, pc}

08007674 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007674:	b480      	push	{r7}
 8007676:	b083      	sub	sp, #12
 8007678:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800767a:	4b0c      	ldr	r3, [pc, #48]	; (80076ac <prvResetNextTaskUnblockTime+0x38>)
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	2b00      	cmp	r3, #0
 8007682:	d104      	bne.n	800768e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007684:	4b0a      	ldr	r3, [pc, #40]	; (80076b0 <prvResetNextTaskUnblockTime+0x3c>)
 8007686:	f04f 32ff 	mov.w	r2, #4294967295
 800768a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800768c:	e008      	b.n	80076a0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800768e:	4b07      	ldr	r3, [pc, #28]	; (80076ac <prvResetNextTaskUnblockTime+0x38>)
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	68db      	ldr	r3, [r3, #12]
 8007694:	68db      	ldr	r3, [r3, #12]
 8007696:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	685b      	ldr	r3, [r3, #4]
 800769c:	4a04      	ldr	r2, [pc, #16]	; (80076b0 <prvResetNextTaskUnblockTime+0x3c>)
 800769e:	6013      	str	r3, [r2, #0]
}
 80076a0:	bf00      	nop
 80076a2:	370c      	adds	r7, #12
 80076a4:	46bd      	mov	sp, r7
 80076a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076aa:	4770      	bx	lr
 80076ac:	20000988 	.word	0x20000988
 80076b0:	200009f0 	.word	0x200009f0

080076b4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80076b4:	b480      	push	{r7}
 80076b6:	b083      	sub	sp, #12
 80076b8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80076ba:	4b0b      	ldr	r3, [pc, #44]	; (80076e8 <xTaskGetSchedulerState+0x34>)
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d102      	bne.n	80076c8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80076c2:	2301      	movs	r3, #1
 80076c4:	607b      	str	r3, [r7, #4]
 80076c6:	e008      	b.n	80076da <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80076c8:	4b08      	ldr	r3, [pc, #32]	; (80076ec <xTaskGetSchedulerState+0x38>)
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d102      	bne.n	80076d6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80076d0:	2302      	movs	r3, #2
 80076d2:	607b      	str	r3, [r7, #4]
 80076d4:	e001      	b.n	80076da <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80076d6:	2300      	movs	r3, #0
 80076d8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80076da:	687b      	ldr	r3, [r7, #4]
	}
 80076dc:	4618      	mov	r0, r3
 80076de:	370c      	adds	r7, #12
 80076e0:	46bd      	mov	sp, r7
 80076e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e6:	4770      	bx	lr
 80076e8:	200009dc 	.word	0x200009dc
 80076ec:	200009f8 	.word	0x200009f8

080076f0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80076f0:	b580      	push	{r7, lr}
 80076f2:	b084      	sub	sp, #16
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80076fc:	2300      	movs	r3, #0
 80076fe:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	2b00      	cmp	r3, #0
 8007704:	d069      	beq.n	80077da <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8007706:	68bb      	ldr	r3, [r7, #8]
 8007708:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800770a:	4b36      	ldr	r3, [pc, #216]	; (80077e4 <xTaskPriorityInherit+0xf4>)
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007710:	429a      	cmp	r2, r3
 8007712:	d259      	bcs.n	80077c8 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007714:	68bb      	ldr	r3, [r7, #8]
 8007716:	699b      	ldr	r3, [r3, #24]
 8007718:	2b00      	cmp	r3, #0
 800771a:	db06      	blt.n	800772a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800771c:	4b31      	ldr	r3, [pc, #196]	; (80077e4 <xTaskPriorityInherit+0xf4>)
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007722:	f1c3 0207 	rsb	r2, r3, #7
 8007726:	68bb      	ldr	r3, [r7, #8]
 8007728:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800772a:	68bb      	ldr	r3, [r7, #8]
 800772c:	6959      	ldr	r1, [r3, #20]
 800772e:	68bb      	ldr	r3, [r7, #8]
 8007730:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007732:	4613      	mov	r3, r2
 8007734:	009b      	lsls	r3, r3, #2
 8007736:	4413      	add	r3, r2
 8007738:	009b      	lsls	r3, r3, #2
 800773a:	4a2b      	ldr	r2, [pc, #172]	; (80077e8 <xTaskPriorityInherit+0xf8>)
 800773c:	4413      	add	r3, r2
 800773e:	4299      	cmp	r1, r3
 8007740:	d13a      	bne.n	80077b8 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007742:	68bb      	ldr	r3, [r7, #8]
 8007744:	3304      	adds	r3, #4
 8007746:	4618      	mov	r0, r3
 8007748:	f7fe f913 	bl	8005972 <uxListRemove>
 800774c:	4603      	mov	r3, r0
 800774e:	2b00      	cmp	r3, #0
 8007750:	d115      	bne.n	800777e <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8007752:	68bb      	ldr	r3, [r7, #8]
 8007754:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007756:	4924      	ldr	r1, [pc, #144]	; (80077e8 <xTaskPriorityInherit+0xf8>)
 8007758:	4613      	mov	r3, r2
 800775a:	009b      	lsls	r3, r3, #2
 800775c:	4413      	add	r3, r2
 800775e:	009b      	lsls	r3, r3, #2
 8007760:	440b      	add	r3, r1
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	2b00      	cmp	r3, #0
 8007766:	d10a      	bne.n	800777e <xTaskPriorityInherit+0x8e>
 8007768:	68bb      	ldr	r3, [r7, #8]
 800776a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800776c:	2201      	movs	r2, #1
 800776e:	fa02 f303 	lsl.w	r3, r2, r3
 8007772:	43da      	mvns	r2, r3
 8007774:	4b1d      	ldr	r3, [pc, #116]	; (80077ec <xTaskPriorityInherit+0xfc>)
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	4013      	ands	r3, r2
 800777a:	4a1c      	ldr	r2, [pc, #112]	; (80077ec <xTaskPriorityInherit+0xfc>)
 800777c:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800777e:	4b19      	ldr	r3, [pc, #100]	; (80077e4 <xTaskPriorityInherit+0xf4>)
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007784:	68bb      	ldr	r3, [r7, #8]
 8007786:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007788:	68bb      	ldr	r3, [r7, #8]
 800778a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800778c:	2201      	movs	r2, #1
 800778e:	409a      	lsls	r2, r3
 8007790:	4b16      	ldr	r3, [pc, #88]	; (80077ec <xTaskPriorityInherit+0xfc>)
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	4313      	orrs	r3, r2
 8007796:	4a15      	ldr	r2, [pc, #84]	; (80077ec <xTaskPriorityInherit+0xfc>)
 8007798:	6013      	str	r3, [r2, #0]
 800779a:	68bb      	ldr	r3, [r7, #8]
 800779c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800779e:	4613      	mov	r3, r2
 80077a0:	009b      	lsls	r3, r3, #2
 80077a2:	4413      	add	r3, r2
 80077a4:	009b      	lsls	r3, r3, #2
 80077a6:	4a10      	ldr	r2, [pc, #64]	; (80077e8 <xTaskPriorityInherit+0xf8>)
 80077a8:	441a      	add	r2, r3
 80077aa:	68bb      	ldr	r3, [r7, #8]
 80077ac:	3304      	adds	r3, #4
 80077ae:	4619      	mov	r1, r3
 80077b0:	4610      	mov	r0, r2
 80077b2:	f7fe f881 	bl	80058b8 <vListInsertEnd>
 80077b6:	e004      	b.n	80077c2 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80077b8:	4b0a      	ldr	r3, [pc, #40]	; (80077e4 <xTaskPriorityInherit+0xf4>)
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077be:	68bb      	ldr	r3, [r7, #8]
 80077c0:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80077c2:	2301      	movs	r3, #1
 80077c4:	60fb      	str	r3, [r7, #12]
 80077c6:	e008      	b.n	80077da <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80077c8:	68bb      	ldr	r3, [r7, #8]
 80077ca:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80077cc:	4b05      	ldr	r3, [pc, #20]	; (80077e4 <xTaskPriorityInherit+0xf4>)
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077d2:	429a      	cmp	r2, r3
 80077d4:	d201      	bcs.n	80077da <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80077d6:	2301      	movs	r3, #1
 80077d8:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80077da:	68fb      	ldr	r3, [r7, #12]
	}
 80077dc:	4618      	mov	r0, r3
 80077de:	3710      	adds	r7, #16
 80077e0:	46bd      	mov	sp, r7
 80077e2:	bd80      	pop	{r7, pc}
 80077e4:	200008d0 	.word	0x200008d0
 80077e8:	200008d4 	.word	0x200008d4
 80077ec:	200009d8 	.word	0x200009d8

080077f0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80077f0:	b580      	push	{r7, lr}
 80077f2:	b086      	sub	sp, #24
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80077fc:	2300      	movs	r3, #0
 80077fe:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	2b00      	cmp	r3, #0
 8007804:	d070      	beq.n	80078e8 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007806:	4b3b      	ldr	r3, [pc, #236]	; (80078f4 <xTaskPriorityDisinherit+0x104>)
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	693a      	ldr	r2, [r7, #16]
 800780c:	429a      	cmp	r2, r3
 800780e:	d00b      	beq.n	8007828 <xTaskPriorityDisinherit+0x38>
 8007810:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007814:	b672      	cpsid	i
 8007816:	f383 8811 	msr	BASEPRI, r3
 800781a:	f3bf 8f6f 	isb	sy
 800781e:	f3bf 8f4f 	dsb	sy
 8007822:	b662      	cpsie	i
 8007824:	60fb      	str	r3, [r7, #12]
 8007826:	e7fe      	b.n	8007826 <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 8007828:	693b      	ldr	r3, [r7, #16]
 800782a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800782c:	2b00      	cmp	r3, #0
 800782e:	d10b      	bne.n	8007848 <xTaskPriorityDisinherit+0x58>
 8007830:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007834:	b672      	cpsid	i
 8007836:	f383 8811 	msr	BASEPRI, r3
 800783a:	f3bf 8f6f 	isb	sy
 800783e:	f3bf 8f4f 	dsb	sy
 8007842:	b662      	cpsie	i
 8007844:	60bb      	str	r3, [r7, #8]
 8007846:	e7fe      	b.n	8007846 <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 8007848:	693b      	ldr	r3, [r7, #16]
 800784a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800784c:	1e5a      	subs	r2, r3, #1
 800784e:	693b      	ldr	r3, [r7, #16]
 8007850:	659a      	str	r2, [r3, #88]	; 0x58

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007852:	693b      	ldr	r3, [r7, #16]
 8007854:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007856:	693b      	ldr	r3, [r7, #16]
 8007858:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800785a:	429a      	cmp	r2, r3
 800785c:	d044      	beq.n	80078e8 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800785e:	693b      	ldr	r3, [r7, #16]
 8007860:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007862:	2b00      	cmp	r3, #0
 8007864:	d140      	bne.n	80078e8 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007866:	693b      	ldr	r3, [r7, #16]
 8007868:	3304      	adds	r3, #4
 800786a:	4618      	mov	r0, r3
 800786c:	f7fe f881 	bl	8005972 <uxListRemove>
 8007870:	4603      	mov	r3, r0
 8007872:	2b00      	cmp	r3, #0
 8007874:	d115      	bne.n	80078a2 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8007876:	693b      	ldr	r3, [r7, #16]
 8007878:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800787a:	491f      	ldr	r1, [pc, #124]	; (80078f8 <xTaskPriorityDisinherit+0x108>)
 800787c:	4613      	mov	r3, r2
 800787e:	009b      	lsls	r3, r3, #2
 8007880:	4413      	add	r3, r2
 8007882:	009b      	lsls	r3, r3, #2
 8007884:	440b      	add	r3, r1
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	2b00      	cmp	r3, #0
 800788a:	d10a      	bne.n	80078a2 <xTaskPriorityDisinherit+0xb2>
 800788c:	693b      	ldr	r3, [r7, #16]
 800788e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007890:	2201      	movs	r2, #1
 8007892:	fa02 f303 	lsl.w	r3, r2, r3
 8007896:	43da      	mvns	r2, r3
 8007898:	4b18      	ldr	r3, [pc, #96]	; (80078fc <xTaskPriorityDisinherit+0x10c>)
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	4013      	ands	r3, r2
 800789e:	4a17      	ldr	r2, [pc, #92]	; (80078fc <xTaskPriorityDisinherit+0x10c>)
 80078a0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80078a2:	693b      	ldr	r3, [r7, #16]
 80078a4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80078a6:	693b      	ldr	r3, [r7, #16]
 80078a8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80078aa:	693b      	ldr	r3, [r7, #16]
 80078ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078ae:	f1c3 0207 	rsb	r2, r3, #7
 80078b2:	693b      	ldr	r3, [r7, #16]
 80078b4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80078b6:	693b      	ldr	r3, [r7, #16]
 80078b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078ba:	2201      	movs	r2, #1
 80078bc:	409a      	lsls	r2, r3
 80078be:	4b0f      	ldr	r3, [pc, #60]	; (80078fc <xTaskPriorityDisinherit+0x10c>)
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	4313      	orrs	r3, r2
 80078c4:	4a0d      	ldr	r2, [pc, #52]	; (80078fc <xTaskPriorityDisinherit+0x10c>)
 80078c6:	6013      	str	r3, [r2, #0]
 80078c8:	693b      	ldr	r3, [r7, #16]
 80078ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078cc:	4613      	mov	r3, r2
 80078ce:	009b      	lsls	r3, r3, #2
 80078d0:	4413      	add	r3, r2
 80078d2:	009b      	lsls	r3, r3, #2
 80078d4:	4a08      	ldr	r2, [pc, #32]	; (80078f8 <xTaskPriorityDisinherit+0x108>)
 80078d6:	441a      	add	r2, r3
 80078d8:	693b      	ldr	r3, [r7, #16]
 80078da:	3304      	adds	r3, #4
 80078dc:	4619      	mov	r1, r3
 80078de:	4610      	mov	r0, r2
 80078e0:	f7fd ffea 	bl	80058b8 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80078e4:	2301      	movs	r3, #1
 80078e6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80078e8:	697b      	ldr	r3, [r7, #20]
	}
 80078ea:	4618      	mov	r0, r3
 80078ec:	3718      	adds	r7, #24
 80078ee:	46bd      	mov	sp, r7
 80078f0:	bd80      	pop	{r7, pc}
 80078f2:	bf00      	nop
 80078f4:	200008d0 	.word	0x200008d0
 80078f8:	200008d4 	.word	0x200008d4
 80078fc:	200009d8 	.word	0x200009d8

08007900 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8007900:	b580      	push	{r7, lr}
 8007902:	b088      	sub	sp, #32
 8007904:	af00      	add	r7, sp, #0
 8007906:	6078      	str	r0, [r7, #4]
 8007908:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800790e:	2301      	movs	r3, #1
 8007910:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	2b00      	cmp	r3, #0
 8007916:	f000 8085 	beq.w	8007a24 <vTaskPriorityDisinheritAfterTimeout+0x124>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800791a:	69bb      	ldr	r3, [r7, #24]
 800791c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800791e:	2b00      	cmp	r3, #0
 8007920:	d10b      	bne.n	800793a <vTaskPriorityDisinheritAfterTimeout+0x3a>
 8007922:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007926:	b672      	cpsid	i
 8007928:	f383 8811 	msr	BASEPRI, r3
 800792c:	f3bf 8f6f 	isb	sy
 8007930:	f3bf 8f4f 	dsb	sy
 8007934:	b662      	cpsie	i
 8007936:	60fb      	str	r3, [r7, #12]
 8007938:	e7fe      	b.n	8007938 <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800793a:	69bb      	ldr	r3, [r7, #24]
 800793c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800793e:	683a      	ldr	r2, [r7, #0]
 8007940:	429a      	cmp	r2, r3
 8007942:	d902      	bls.n	800794a <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8007944:	683b      	ldr	r3, [r7, #0]
 8007946:	61fb      	str	r3, [r7, #28]
 8007948:	e002      	b.n	8007950 <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800794a:	69bb      	ldr	r3, [r7, #24]
 800794c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800794e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8007950:	69bb      	ldr	r3, [r7, #24]
 8007952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007954:	69fa      	ldr	r2, [r7, #28]
 8007956:	429a      	cmp	r2, r3
 8007958:	d064      	beq.n	8007a24 <vTaskPriorityDisinheritAfterTimeout+0x124>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800795a:	69bb      	ldr	r3, [r7, #24]
 800795c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800795e:	697a      	ldr	r2, [r7, #20]
 8007960:	429a      	cmp	r2, r3
 8007962:	d15f      	bne.n	8007a24 <vTaskPriorityDisinheritAfterTimeout+0x124>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8007964:	4b31      	ldr	r3, [pc, #196]	; (8007a2c <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	69ba      	ldr	r2, [r7, #24]
 800796a:	429a      	cmp	r2, r3
 800796c:	d10b      	bne.n	8007986 <vTaskPriorityDisinheritAfterTimeout+0x86>
 800796e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007972:	b672      	cpsid	i
 8007974:	f383 8811 	msr	BASEPRI, r3
 8007978:	f3bf 8f6f 	isb	sy
 800797c:	f3bf 8f4f 	dsb	sy
 8007980:	b662      	cpsie	i
 8007982:	60bb      	str	r3, [r7, #8]
 8007984:	e7fe      	b.n	8007984 <vTaskPriorityDisinheritAfterTimeout+0x84>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007986:	69bb      	ldr	r3, [r7, #24]
 8007988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800798a:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800798c:	69bb      	ldr	r3, [r7, #24]
 800798e:	69fa      	ldr	r2, [r7, #28]
 8007990:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007992:	69bb      	ldr	r3, [r7, #24]
 8007994:	699b      	ldr	r3, [r3, #24]
 8007996:	2b00      	cmp	r3, #0
 8007998:	db04      	blt.n	80079a4 <vTaskPriorityDisinheritAfterTimeout+0xa4>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800799a:	69fb      	ldr	r3, [r7, #28]
 800799c:	f1c3 0207 	rsb	r2, r3, #7
 80079a0:	69bb      	ldr	r3, [r7, #24]
 80079a2:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80079a4:	69bb      	ldr	r3, [r7, #24]
 80079a6:	6959      	ldr	r1, [r3, #20]
 80079a8:	693a      	ldr	r2, [r7, #16]
 80079aa:	4613      	mov	r3, r2
 80079ac:	009b      	lsls	r3, r3, #2
 80079ae:	4413      	add	r3, r2
 80079b0:	009b      	lsls	r3, r3, #2
 80079b2:	4a1f      	ldr	r2, [pc, #124]	; (8007a30 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 80079b4:	4413      	add	r3, r2
 80079b6:	4299      	cmp	r1, r3
 80079b8:	d134      	bne.n	8007a24 <vTaskPriorityDisinheritAfterTimeout+0x124>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80079ba:	69bb      	ldr	r3, [r7, #24]
 80079bc:	3304      	adds	r3, #4
 80079be:	4618      	mov	r0, r3
 80079c0:	f7fd ffd7 	bl	8005972 <uxListRemove>
 80079c4:	4603      	mov	r3, r0
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d115      	bne.n	80079f6 <vTaskPriorityDisinheritAfterTimeout+0xf6>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80079ca:	69bb      	ldr	r3, [r7, #24]
 80079cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079ce:	4918      	ldr	r1, [pc, #96]	; (8007a30 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 80079d0:	4613      	mov	r3, r2
 80079d2:	009b      	lsls	r3, r3, #2
 80079d4:	4413      	add	r3, r2
 80079d6:	009b      	lsls	r3, r3, #2
 80079d8:	440b      	add	r3, r1
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d10a      	bne.n	80079f6 <vTaskPriorityDisinheritAfterTimeout+0xf6>
 80079e0:	69bb      	ldr	r3, [r7, #24]
 80079e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079e4:	2201      	movs	r2, #1
 80079e6:	fa02 f303 	lsl.w	r3, r2, r3
 80079ea:	43da      	mvns	r2, r3
 80079ec:	4b11      	ldr	r3, [pc, #68]	; (8007a34 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	4013      	ands	r3, r2
 80079f2:	4a10      	ldr	r2, [pc, #64]	; (8007a34 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 80079f4:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80079f6:	69bb      	ldr	r3, [r7, #24]
 80079f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079fa:	2201      	movs	r2, #1
 80079fc:	409a      	lsls	r2, r3
 80079fe:	4b0d      	ldr	r3, [pc, #52]	; (8007a34 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	4313      	orrs	r3, r2
 8007a04:	4a0b      	ldr	r2, [pc, #44]	; (8007a34 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8007a06:	6013      	str	r3, [r2, #0]
 8007a08:	69bb      	ldr	r3, [r7, #24]
 8007a0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a0c:	4613      	mov	r3, r2
 8007a0e:	009b      	lsls	r3, r3, #2
 8007a10:	4413      	add	r3, r2
 8007a12:	009b      	lsls	r3, r3, #2
 8007a14:	4a06      	ldr	r2, [pc, #24]	; (8007a30 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8007a16:	441a      	add	r2, r3
 8007a18:	69bb      	ldr	r3, [r7, #24]
 8007a1a:	3304      	adds	r3, #4
 8007a1c:	4619      	mov	r1, r3
 8007a1e:	4610      	mov	r0, r2
 8007a20:	f7fd ff4a 	bl	80058b8 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007a24:	bf00      	nop
 8007a26:	3720      	adds	r7, #32
 8007a28:	46bd      	mov	sp, r7
 8007a2a:	bd80      	pop	{r7, pc}
 8007a2c:	200008d0 	.word	0x200008d0
 8007a30:	200008d4 	.word	0x200008d4
 8007a34:	200009d8 	.word	0x200009d8

08007a38 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8007a38:	b480      	push	{r7}
 8007a3a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007a3c:	4b07      	ldr	r3, [pc, #28]	; (8007a5c <pvTaskIncrementMutexHeldCount+0x24>)
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d004      	beq.n	8007a4e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007a44:	4b05      	ldr	r3, [pc, #20]	; (8007a5c <pvTaskIncrementMutexHeldCount+0x24>)
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007a4a:	3201      	adds	r2, #1
 8007a4c:	659a      	str	r2, [r3, #88]	; 0x58
		}

		return pxCurrentTCB;
 8007a4e:	4b03      	ldr	r3, [pc, #12]	; (8007a5c <pvTaskIncrementMutexHeldCount+0x24>)
 8007a50:	681b      	ldr	r3, [r3, #0]
	}
 8007a52:	4618      	mov	r0, r3
 8007a54:	46bd      	mov	sp, r7
 8007a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a5a:	4770      	bx	lr
 8007a5c:	200008d0 	.word	0x200008d0

08007a60 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007a60:	b580      	push	{r7, lr}
 8007a62:	b084      	sub	sp, #16
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	6078      	str	r0, [r7, #4]
 8007a68:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007a6a:	4b29      	ldr	r3, [pc, #164]	; (8007b10 <prvAddCurrentTaskToDelayedList+0xb0>)
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007a70:	4b28      	ldr	r3, [pc, #160]	; (8007b14 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	3304      	adds	r3, #4
 8007a76:	4618      	mov	r0, r3
 8007a78:	f7fd ff7b 	bl	8005972 <uxListRemove>
 8007a7c:	4603      	mov	r3, r0
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d10b      	bne.n	8007a9a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8007a82:	4b24      	ldr	r3, [pc, #144]	; (8007b14 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a88:	2201      	movs	r2, #1
 8007a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8007a8e:	43da      	mvns	r2, r3
 8007a90:	4b21      	ldr	r3, [pc, #132]	; (8007b18 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	4013      	ands	r3, r2
 8007a96:	4a20      	ldr	r2, [pc, #128]	; (8007b18 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007a98:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007aa0:	d10a      	bne.n	8007ab8 <prvAddCurrentTaskToDelayedList+0x58>
 8007aa2:	683b      	ldr	r3, [r7, #0]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d007      	beq.n	8007ab8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007aa8:	4b1a      	ldr	r3, [pc, #104]	; (8007b14 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	3304      	adds	r3, #4
 8007aae:	4619      	mov	r1, r3
 8007ab0:	481a      	ldr	r0, [pc, #104]	; (8007b1c <prvAddCurrentTaskToDelayedList+0xbc>)
 8007ab2:	f7fd ff01 	bl	80058b8 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007ab6:	e026      	b.n	8007b06 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007ab8:	68fa      	ldr	r2, [r7, #12]
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	4413      	add	r3, r2
 8007abe:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007ac0:	4b14      	ldr	r3, [pc, #80]	; (8007b14 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	68ba      	ldr	r2, [r7, #8]
 8007ac6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007ac8:	68ba      	ldr	r2, [r7, #8]
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	429a      	cmp	r2, r3
 8007ace:	d209      	bcs.n	8007ae4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007ad0:	4b13      	ldr	r3, [pc, #76]	; (8007b20 <prvAddCurrentTaskToDelayedList+0xc0>)
 8007ad2:	681a      	ldr	r2, [r3, #0]
 8007ad4:	4b0f      	ldr	r3, [pc, #60]	; (8007b14 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	3304      	adds	r3, #4
 8007ada:	4619      	mov	r1, r3
 8007adc:	4610      	mov	r0, r2
 8007ade:	f7fd ff0f 	bl	8005900 <vListInsert>
}
 8007ae2:	e010      	b.n	8007b06 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007ae4:	4b0f      	ldr	r3, [pc, #60]	; (8007b24 <prvAddCurrentTaskToDelayedList+0xc4>)
 8007ae6:	681a      	ldr	r2, [r3, #0]
 8007ae8:	4b0a      	ldr	r3, [pc, #40]	; (8007b14 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	3304      	adds	r3, #4
 8007aee:	4619      	mov	r1, r3
 8007af0:	4610      	mov	r0, r2
 8007af2:	f7fd ff05 	bl	8005900 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007af6:	4b0c      	ldr	r3, [pc, #48]	; (8007b28 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	68ba      	ldr	r2, [r7, #8]
 8007afc:	429a      	cmp	r2, r3
 8007afe:	d202      	bcs.n	8007b06 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007b00:	4a09      	ldr	r2, [pc, #36]	; (8007b28 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007b02:	68bb      	ldr	r3, [r7, #8]
 8007b04:	6013      	str	r3, [r2, #0]
}
 8007b06:	bf00      	nop
 8007b08:	3710      	adds	r7, #16
 8007b0a:	46bd      	mov	sp, r7
 8007b0c:	bd80      	pop	{r7, pc}
 8007b0e:	bf00      	nop
 8007b10:	200009d4 	.word	0x200009d4
 8007b14:	200008d0 	.word	0x200008d0
 8007b18:	200009d8 	.word	0x200009d8
 8007b1c:	200009bc 	.word	0x200009bc
 8007b20:	2000098c 	.word	0x2000098c
 8007b24:	20000988 	.word	0x20000988
 8007b28:	200009f0 	.word	0x200009f0

08007b2c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007b2c:	b580      	push	{r7, lr}
 8007b2e:	b08a      	sub	sp, #40	; 0x28
 8007b30:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007b32:	2300      	movs	r3, #0
 8007b34:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007b36:	f000 faf3 	bl	8008120 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007b3a:	4b1d      	ldr	r3, [pc, #116]	; (8007bb0 <xTimerCreateTimerTask+0x84>)
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d021      	beq.n	8007b86 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007b42:	2300      	movs	r3, #0
 8007b44:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007b46:	2300      	movs	r3, #0
 8007b48:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007b4a:	1d3a      	adds	r2, r7, #4
 8007b4c:	f107 0108 	add.w	r1, r7, #8
 8007b50:	f107 030c 	add.w	r3, r7, #12
 8007b54:	4618      	mov	r0, r3
 8007b56:	f7f8 fd6d 	bl	8000634 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007b5a:	6879      	ldr	r1, [r7, #4]
 8007b5c:	68bb      	ldr	r3, [r7, #8]
 8007b5e:	68fa      	ldr	r2, [r7, #12]
 8007b60:	9202      	str	r2, [sp, #8]
 8007b62:	9301      	str	r3, [sp, #4]
 8007b64:	2302      	movs	r3, #2
 8007b66:	9300      	str	r3, [sp, #0]
 8007b68:	2300      	movs	r3, #0
 8007b6a:	460a      	mov	r2, r1
 8007b6c:	4911      	ldr	r1, [pc, #68]	; (8007bb4 <xTimerCreateTimerTask+0x88>)
 8007b6e:	4812      	ldr	r0, [pc, #72]	; (8007bb8 <xTimerCreateTimerTask+0x8c>)
 8007b70:	f7fe ff74 	bl	8006a5c <xTaskCreateStatic>
 8007b74:	4602      	mov	r2, r0
 8007b76:	4b11      	ldr	r3, [pc, #68]	; (8007bbc <xTimerCreateTimerTask+0x90>)
 8007b78:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007b7a:	4b10      	ldr	r3, [pc, #64]	; (8007bbc <xTimerCreateTimerTask+0x90>)
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d001      	beq.n	8007b86 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007b82:	2301      	movs	r3, #1
 8007b84:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007b86:	697b      	ldr	r3, [r7, #20]
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d10b      	bne.n	8007ba4 <xTimerCreateTimerTask+0x78>
 8007b8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b90:	b672      	cpsid	i
 8007b92:	f383 8811 	msr	BASEPRI, r3
 8007b96:	f3bf 8f6f 	isb	sy
 8007b9a:	f3bf 8f4f 	dsb	sy
 8007b9e:	b662      	cpsie	i
 8007ba0:	613b      	str	r3, [r7, #16]
 8007ba2:	e7fe      	b.n	8007ba2 <xTimerCreateTimerTask+0x76>
	return xReturn;
 8007ba4:	697b      	ldr	r3, [r7, #20]
}
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	3718      	adds	r7, #24
 8007baa:	46bd      	mov	sp, r7
 8007bac:	bd80      	pop	{r7, pc}
 8007bae:	bf00      	nop
 8007bb0:	20000a2c 	.word	0x20000a2c
 8007bb4:	0800ffb0 	.word	0x0800ffb0
 8007bb8:	08007cf9 	.word	0x08007cf9
 8007bbc:	20000a30 	.word	0x20000a30

08007bc0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007bc0:	b580      	push	{r7, lr}
 8007bc2:	b08a      	sub	sp, #40	; 0x28
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	60f8      	str	r0, [r7, #12]
 8007bc8:	60b9      	str	r1, [r7, #8]
 8007bca:	607a      	str	r2, [r7, #4]
 8007bcc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007bce:	2300      	movs	r3, #0
 8007bd0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d10b      	bne.n	8007bf0 <xTimerGenericCommand+0x30>
 8007bd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bdc:	b672      	cpsid	i
 8007bde:	f383 8811 	msr	BASEPRI, r3
 8007be2:	f3bf 8f6f 	isb	sy
 8007be6:	f3bf 8f4f 	dsb	sy
 8007bea:	b662      	cpsie	i
 8007bec:	623b      	str	r3, [r7, #32]
 8007bee:	e7fe      	b.n	8007bee <xTimerGenericCommand+0x2e>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007bf0:	4b19      	ldr	r3, [pc, #100]	; (8007c58 <xTimerGenericCommand+0x98>)
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d02a      	beq.n	8007c4e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007bf8:	68bb      	ldr	r3, [r7, #8]
 8007bfa:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007c04:	68bb      	ldr	r3, [r7, #8]
 8007c06:	2b05      	cmp	r3, #5
 8007c08:	dc18      	bgt.n	8007c3c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007c0a:	f7ff fd53 	bl	80076b4 <xTaskGetSchedulerState>
 8007c0e:	4603      	mov	r3, r0
 8007c10:	2b02      	cmp	r3, #2
 8007c12:	d109      	bne.n	8007c28 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007c14:	4b10      	ldr	r3, [pc, #64]	; (8007c58 <xTimerGenericCommand+0x98>)
 8007c16:	6818      	ldr	r0, [r3, #0]
 8007c18:	f107 0114 	add.w	r1, r7, #20
 8007c1c:	2300      	movs	r3, #0
 8007c1e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007c20:	f7fe f866 	bl	8005cf0 <xQueueGenericSend>
 8007c24:	6278      	str	r0, [r7, #36]	; 0x24
 8007c26:	e012      	b.n	8007c4e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007c28:	4b0b      	ldr	r3, [pc, #44]	; (8007c58 <xTimerGenericCommand+0x98>)
 8007c2a:	6818      	ldr	r0, [r3, #0]
 8007c2c:	f107 0114 	add.w	r1, r7, #20
 8007c30:	2300      	movs	r3, #0
 8007c32:	2200      	movs	r2, #0
 8007c34:	f7fe f85c 	bl	8005cf0 <xQueueGenericSend>
 8007c38:	6278      	str	r0, [r7, #36]	; 0x24
 8007c3a:	e008      	b.n	8007c4e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007c3c:	4b06      	ldr	r3, [pc, #24]	; (8007c58 <xTimerGenericCommand+0x98>)
 8007c3e:	6818      	ldr	r0, [r3, #0]
 8007c40:	f107 0114 	add.w	r1, r7, #20
 8007c44:	2300      	movs	r3, #0
 8007c46:	683a      	ldr	r2, [r7, #0]
 8007c48:	f7fe f954 	bl	8005ef4 <xQueueGenericSendFromISR>
 8007c4c:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007c50:	4618      	mov	r0, r3
 8007c52:	3728      	adds	r7, #40	; 0x28
 8007c54:	46bd      	mov	sp, r7
 8007c56:	bd80      	pop	{r7, pc}
 8007c58:	20000a2c 	.word	0x20000a2c

08007c5c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007c5c:	b580      	push	{r7, lr}
 8007c5e:	b088      	sub	sp, #32
 8007c60:	af02      	add	r7, sp, #8
 8007c62:	6078      	str	r0, [r7, #4]
 8007c64:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c66:	4b23      	ldr	r3, [pc, #140]	; (8007cf4 <prvProcessExpiredTimer+0x98>)
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	68db      	ldr	r3, [r3, #12]
 8007c6c:	68db      	ldr	r3, [r3, #12]
 8007c6e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007c70:	697b      	ldr	r3, [r7, #20]
 8007c72:	3304      	adds	r3, #4
 8007c74:	4618      	mov	r0, r3
 8007c76:	f7fd fe7c 	bl	8005972 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007c7a:	697b      	ldr	r3, [r7, #20]
 8007c7c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007c80:	f003 0304 	and.w	r3, r3, #4
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d023      	beq.n	8007cd0 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007c88:	697b      	ldr	r3, [r7, #20]
 8007c8a:	699a      	ldr	r2, [r3, #24]
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	18d1      	adds	r1, r2, r3
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	683a      	ldr	r2, [r7, #0]
 8007c94:	6978      	ldr	r0, [r7, #20]
 8007c96:	f000 f8d3 	bl	8007e40 <prvInsertTimerInActiveList>
 8007c9a:	4603      	mov	r3, r0
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d020      	beq.n	8007ce2 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007ca0:	2300      	movs	r3, #0
 8007ca2:	9300      	str	r3, [sp, #0]
 8007ca4:	2300      	movs	r3, #0
 8007ca6:	687a      	ldr	r2, [r7, #4]
 8007ca8:	2100      	movs	r1, #0
 8007caa:	6978      	ldr	r0, [r7, #20]
 8007cac:	f7ff ff88 	bl	8007bc0 <xTimerGenericCommand>
 8007cb0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007cb2:	693b      	ldr	r3, [r7, #16]
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d114      	bne.n	8007ce2 <prvProcessExpiredTimer+0x86>
 8007cb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cbc:	b672      	cpsid	i
 8007cbe:	f383 8811 	msr	BASEPRI, r3
 8007cc2:	f3bf 8f6f 	isb	sy
 8007cc6:	f3bf 8f4f 	dsb	sy
 8007cca:	b662      	cpsie	i
 8007ccc:	60fb      	str	r3, [r7, #12]
 8007cce:	e7fe      	b.n	8007cce <prvProcessExpiredTimer+0x72>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007cd0:	697b      	ldr	r3, [r7, #20]
 8007cd2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007cd6:	f023 0301 	bic.w	r3, r3, #1
 8007cda:	b2da      	uxtb	r2, r3
 8007cdc:	697b      	ldr	r3, [r7, #20]
 8007cde:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007ce2:	697b      	ldr	r3, [r7, #20]
 8007ce4:	6a1b      	ldr	r3, [r3, #32]
 8007ce6:	6978      	ldr	r0, [r7, #20]
 8007ce8:	4798      	blx	r3
}
 8007cea:	bf00      	nop
 8007cec:	3718      	adds	r7, #24
 8007cee:	46bd      	mov	sp, r7
 8007cf0:	bd80      	pop	{r7, pc}
 8007cf2:	bf00      	nop
 8007cf4:	20000a24 	.word	0x20000a24

08007cf8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007cf8:	b580      	push	{r7, lr}
 8007cfa:	b084      	sub	sp, #16
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007d00:	f107 0308 	add.w	r3, r7, #8
 8007d04:	4618      	mov	r0, r3
 8007d06:	f000 f857 	bl	8007db8 <prvGetNextExpireTime>
 8007d0a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007d0c:	68bb      	ldr	r3, [r7, #8]
 8007d0e:	4619      	mov	r1, r3
 8007d10:	68f8      	ldr	r0, [r7, #12]
 8007d12:	f000 f803 	bl	8007d1c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007d16:	f000 f8d5 	bl	8007ec4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007d1a:	e7f1      	b.n	8007d00 <prvTimerTask+0x8>

08007d1c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007d1c:	b580      	push	{r7, lr}
 8007d1e:	b084      	sub	sp, #16
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
 8007d24:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007d26:	f7ff f8cf 	bl	8006ec8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007d2a:	f107 0308 	add.w	r3, r7, #8
 8007d2e:	4618      	mov	r0, r3
 8007d30:	f000 f866 	bl	8007e00 <prvSampleTimeNow>
 8007d34:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007d36:	68bb      	ldr	r3, [r7, #8]
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d130      	bne.n	8007d9e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007d3c:	683b      	ldr	r3, [r7, #0]
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d10a      	bne.n	8007d58 <prvProcessTimerOrBlockTask+0x3c>
 8007d42:	687a      	ldr	r2, [r7, #4]
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	429a      	cmp	r2, r3
 8007d48:	d806      	bhi.n	8007d58 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007d4a:	f7ff f8cb 	bl	8006ee4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007d4e:	68f9      	ldr	r1, [r7, #12]
 8007d50:	6878      	ldr	r0, [r7, #4]
 8007d52:	f7ff ff83 	bl	8007c5c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007d56:	e024      	b.n	8007da2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007d58:	683b      	ldr	r3, [r7, #0]
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d008      	beq.n	8007d70 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007d5e:	4b13      	ldr	r3, [pc, #76]	; (8007dac <prvProcessTimerOrBlockTask+0x90>)
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d101      	bne.n	8007d6c <prvProcessTimerOrBlockTask+0x50>
 8007d68:	2301      	movs	r3, #1
 8007d6a:	e000      	b.n	8007d6e <prvProcessTimerOrBlockTask+0x52>
 8007d6c:	2300      	movs	r3, #0
 8007d6e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007d70:	4b0f      	ldr	r3, [pc, #60]	; (8007db0 <prvProcessTimerOrBlockTask+0x94>)
 8007d72:	6818      	ldr	r0, [r3, #0]
 8007d74:	687a      	ldr	r2, [r7, #4]
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	1ad3      	subs	r3, r2, r3
 8007d7a:	683a      	ldr	r2, [r7, #0]
 8007d7c:	4619      	mov	r1, r3
 8007d7e:	f7fe fe39 	bl	80069f4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007d82:	f7ff f8af 	bl	8006ee4 <xTaskResumeAll>
 8007d86:	4603      	mov	r3, r0
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d10a      	bne.n	8007da2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007d8c:	4b09      	ldr	r3, [pc, #36]	; (8007db4 <prvProcessTimerOrBlockTask+0x98>)
 8007d8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d92:	601a      	str	r2, [r3, #0]
 8007d94:	f3bf 8f4f 	dsb	sy
 8007d98:	f3bf 8f6f 	isb	sy
}
 8007d9c:	e001      	b.n	8007da2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007d9e:	f7ff f8a1 	bl	8006ee4 <xTaskResumeAll>
}
 8007da2:	bf00      	nop
 8007da4:	3710      	adds	r7, #16
 8007da6:	46bd      	mov	sp, r7
 8007da8:	bd80      	pop	{r7, pc}
 8007daa:	bf00      	nop
 8007dac:	20000a28 	.word	0x20000a28
 8007db0:	20000a2c 	.word	0x20000a2c
 8007db4:	e000ed04 	.word	0xe000ed04

08007db8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007db8:	b480      	push	{r7}
 8007dba:	b085      	sub	sp, #20
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007dc0:	4b0e      	ldr	r3, [pc, #56]	; (8007dfc <prvGetNextExpireTime+0x44>)
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d101      	bne.n	8007dce <prvGetNextExpireTime+0x16>
 8007dca:	2201      	movs	r2, #1
 8007dcc:	e000      	b.n	8007dd0 <prvGetNextExpireTime+0x18>
 8007dce:	2200      	movs	r2, #0
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d105      	bne.n	8007de8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007ddc:	4b07      	ldr	r3, [pc, #28]	; (8007dfc <prvGetNextExpireTime+0x44>)
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	68db      	ldr	r3, [r3, #12]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	60fb      	str	r3, [r7, #12]
 8007de6:	e001      	b.n	8007dec <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007de8:	2300      	movs	r3, #0
 8007dea:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007dec:	68fb      	ldr	r3, [r7, #12]
}
 8007dee:	4618      	mov	r0, r3
 8007df0:	3714      	adds	r7, #20
 8007df2:	46bd      	mov	sp, r7
 8007df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df8:	4770      	bx	lr
 8007dfa:	bf00      	nop
 8007dfc:	20000a24 	.word	0x20000a24

08007e00 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007e00:	b580      	push	{r7, lr}
 8007e02:	b084      	sub	sp, #16
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007e08:	f7ff f90a 	bl	8007020 <xTaskGetTickCount>
 8007e0c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007e0e:	4b0b      	ldr	r3, [pc, #44]	; (8007e3c <prvSampleTimeNow+0x3c>)
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	68fa      	ldr	r2, [r7, #12]
 8007e14:	429a      	cmp	r2, r3
 8007e16:	d205      	bcs.n	8007e24 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007e18:	f000 f91c 	bl	8008054 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	2201      	movs	r2, #1
 8007e20:	601a      	str	r2, [r3, #0]
 8007e22:	e002      	b.n	8007e2a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	2200      	movs	r2, #0
 8007e28:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007e2a:	4a04      	ldr	r2, [pc, #16]	; (8007e3c <prvSampleTimeNow+0x3c>)
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007e30:	68fb      	ldr	r3, [r7, #12]
}
 8007e32:	4618      	mov	r0, r3
 8007e34:	3710      	adds	r7, #16
 8007e36:	46bd      	mov	sp, r7
 8007e38:	bd80      	pop	{r7, pc}
 8007e3a:	bf00      	nop
 8007e3c:	20000a34 	.word	0x20000a34

08007e40 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007e40:	b580      	push	{r7, lr}
 8007e42:	b086      	sub	sp, #24
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	60f8      	str	r0, [r7, #12]
 8007e48:	60b9      	str	r1, [r7, #8]
 8007e4a:	607a      	str	r2, [r7, #4]
 8007e4c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007e4e:	2300      	movs	r3, #0
 8007e50:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	68ba      	ldr	r2, [r7, #8]
 8007e56:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	68fa      	ldr	r2, [r7, #12]
 8007e5c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007e5e:	68ba      	ldr	r2, [r7, #8]
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	429a      	cmp	r2, r3
 8007e64:	d812      	bhi.n	8007e8c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007e66:	687a      	ldr	r2, [r7, #4]
 8007e68:	683b      	ldr	r3, [r7, #0]
 8007e6a:	1ad2      	subs	r2, r2, r3
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	699b      	ldr	r3, [r3, #24]
 8007e70:	429a      	cmp	r2, r3
 8007e72:	d302      	bcc.n	8007e7a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007e74:	2301      	movs	r3, #1
 8007e76:	617b      	str	r3, [r7, #20]
 8007e78:	e01b      	b.n	8007eb2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007e7a:	4b10      	ldr	r3, [pc, #64]	; (8007ebc <prvInsertTimerInActiveList+0x7c>)
 8007e7c:	681a      	ldr	r2, [r3, #0]
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	3304      	adds	r3, #4
 8007e82:	4619      	mov	r1, r3
 8007e84:	4610      	mov	r0, r2
 8007e86:	f7fd fd3b 	bl	8005900 <vListInsert>
 8007e8a:	e012      	b.n	8007eb2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007e8c:	687a      	ldr	r2, [r7, #4]
 8007e8e:	683b      	ldr	r3, [r7, #0]
 8007e90:	429a      	cmp	r2, r3
 8007e92:	d206      	bcs.n	8007ea2 <prvInsertTimerInActiveList+0x62>
 8007e94:	68ba      	ldr	r2, [r7, #8]
 8007e96:	683b      	ldr	r3, [r7, #0]
 8007e98:	429a      	cmp	r2, r3
 8007e9a:	d302      	bcc.n	8007ea2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007e9c:	2301      	movs	r3, #1
 8007e9e:	617b      	str	r3, [r7, #20]
 8007ea0:	e007      	b.n	8007eb2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007ea2:	4b07      	ldr	r3, [pc, #28]	; (8007ec0 <prvInsertTimerInActiveList+0x80>)
 8007ea4:	681a      	ldr	r2, [r3, #0]
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	3304      	adds	r3, #4
 8007eaa:	4619      	mov	r1, r3
 8007eac:	4610      	mov	r0, r2
 8007eae:	f7fd fd27 	bl	8005900 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007eb2:	697b      	ldr	r3, [r7, #20]
}
 8007eb4:	4618      	mov	r0, r3
 8007eb6:	3718      	adds	r7, #24
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	bd80      	pop	{r7, pc}
 8007ebc:	20000a28 	.word	0x20000a28
 8007ec0:	20000a24 	.word	0x20000a24

08007ec4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007ec4:	b580      	push	{r7, lr}
 8007ec6:	b08c      	sub	sp, #48	; 0x30
 8007ec8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007eca:	e0b0      	b.n	800802e <prvProcessReceivedCommands+0x16a>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007ecc:	68bb      	ldr	r3, [r7, #8]
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	f2c0 80ac 	blt.w	800802c <prvProcessReceivedCommands+0x168>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007ed4:	693b      	ldr	r3, [r7, #16]
 8007ed6:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eda:	695b      	ldr	r3, [r3, #20]
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d004      	beq.n	8007eea <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ee2:	3304      	adds	r3, #4
 8007ee4:	4618      	mov	r0, r3
 8007ee6:	f7fd fd44 	bl	8005972 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007eea:	1d3b      	adds	r3, r7, #4
 8007eec:	4618      	mov	r0, r3
 8007eee:	f7ff ff87 	bl	8007e00 <prvSampleTimeNow>
 8007ef2:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8007ef4:	68bb      	ldr	r3, [r7, #8]
 8007ef6:	2b09      	cmp	r3, #9
 8007ef8:	f200 8099 	bhi.w	800802e <prvProcessReceivedCommands+0x16a>
 8007efc:	a201      	add	r2, pc, #4	; (adr r2, 8007f04 <prvProcessReceivedCommands+0x40>)
 8007efe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f02:	bf00      	nop
 8007f04:	08007f2d 	.word	0x08007f2d
 8007f08:	08007f2d 	.word	0x08007f2d
 8007f0c:	08007f2d 	.word	0x08007f2d
 8007f10:	08007fa3 	.word	0x08007fa3
 8007f14:	08007fb7 	.word	0x08007fb7
 8007f18:	08008003 	.word	0x08008003
 8007f1c:	08007f2d 	.word	0x08007f2d
 8007f20:	08007f2d 	.word	0x08007f2d
 8007f24:	08007fa3 	.word	0x08007fa3
 8007f28:	08007fb7 	.word	0x08007fb7
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f2e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007f32:	f043 0301 	orr.w	r3, r3, #1
 8007f36:	b2da      	uxtb	r2, r3
 8007f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f3a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007f3e:	68fa      	ldr	r2, [r7, #12]
 8007f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f42:	699b      	ldr	r3, [r3, #24]
 8007f44:	18d1      	adds	r1, r2, r3
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	6a3a      	ldr	r2, [r7, #32]
 8007f4a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007f4c:	f7ff ff78 	bl	8007e40 <prvInsertTimerInActiveList>
 8007f50:	4603      	mov	r3, r0
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d06b      	beq.n	800802e <prvProcessReceivedCommands+0x16a>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f58:	6a1b      	ldr	r3, [r3, #32]
 8007f5a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007f5c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f60:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007f64:	f003 0304 	and.w	r3, r3, #4
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d060      	beq.n	800802e <prvProcessReceivedCommands+0x16a>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007f6c:	68fa      	ldr	r2, [r7, #12]
 8007f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f70:	699b      	ldr	r3, [r3, #24]
 8007f72:	441a      	add	r2, r3
 8007f74:	2300      	movs	r3, #0
 8007f76:	9300      	str	r3, [sp, #0]
 8007f78:	2300      	movs	r3, #0
 8007f7a:	2100      	movs	r1, #0
 8007f7c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007f7e:	f7ff fe1f 	bl	8007bc0 <xTimerGenericCommand>
 8007f82:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8007f84:	69fb      	ldr	r3, [r7, #28]
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d151      	bne.n	800802e <prvProcessReceivedCommands+0x16a>
 8007f8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f8e:	b672      	cpsid	i
 8007f90:	f383 8811 	msr	BASEPRI, r3
 8007f94:	f3bf 8f6f 	isb	sy
 8007f98:	f3bf 8f4f 	dsb	sy
 8007f9c:	b662      	cpsie	i
 8007f9e:	61bb      	str	r3, [r7, #24]
 8007fa0:	e7fe      	b.n	8007fa0 <prvProcessReceivedCommands+0xdc>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fa4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007fa8:	f023 0301 	bic.w	r3, r3, #1
 8007fac:	b2da      	uxtb	r2, r3
 8007fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fb0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					break;
 8007fb4:	e03b      	b.n	800802e <prvProcessReceivedCommands+0x16a>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fb8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007fbc:	f043 0301 	orr.w	r3, r3, #1
 8007fc0:	b2da      	uxtb	r2, r3
 8007fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fc4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007fc8:	68fa      	ldr	r2, [r7, #12]
 8007fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fcc:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fd0:	699b      	ldr	r3, [r3, #24]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d10b      	bne.n	8007fee <prvProcessReceivedCommands+0x12a>
 8007fd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fda:	b672      	cpsid	i
 8007fdc:	f383 8811 	msr	BASEPRI, r3
 8007fe0:	f3bf 8f6f 	isb	sy
 8007fe4:	f3bf 8f4f 	dsb	sy
 8007fe8:	b662      	cpsie	i
 8007fea:	617b      	str	r3, [r7, #20]
 8007fec:	e7fe      	b.n	8007fec <prvProcessReceivedCommands+0x128>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ff0:	699a      	ldr	r2, [r3, #24]
 8007ff2:	6a3b      	ldr	r3, [r7, #32]
 8007ff4:	18d1      	adds	r1, r2, r3
 8007ff6:	6a3b      	ldr	r3, [r7, #32]
 8007ff8:	6a3a      	ldr	r2, [r7, #32]
 8007ffa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007ffc:	f7ff ff20 	bl	8007e40 <prvInsertTimerInActiveList>
					break;
 8008000:	e015      	b.n	800802e <prvProcessReceivedCommands+0x16a>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008004:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008008:	f003 0302 	and.w	r3, r3, #2
 800800c:	2b00      	cmp	r3, #0
 800800e:	d103      	bne.n	8008018 <prvProcessReceivedCommands+0x154>
						{
							vPortFree( pxTimer );
 8008010:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008012:	f000 fbbb 	bl	800878c <vPortFree>
 8008016:	e00a      	b.n	800802e <prvProcessReceivedCommands+0x16a>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800801a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800801e:	f023 0301 	bic.w	r3, r3, #1
 8008022:	b2da      	uxtb	r2, r3
 8008024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008026:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800802a:	e000      	b.n	800802e <prvProcessReceivedCommands+0x16a>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800802c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800802e:	4b08      	ldr	r3, [pc, #32]	; (8008050 <prvProcessReceivedCommands+0x18c>)
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	f107 0108 	add.w	r1, r7, #8
 8008036:	2200      	movs	r2, #0
 8008038:	4618      	mov	r0, r3
 800803a:	f7fe f889 	bl	8006150 <xQueueReceive>
 800803e:	4603      	mov	r3, r0
 8008040:	2b00      	cmp	r3, #0
 8008042:	f47f af43 	bne.w	8007ecc <prvProcessReceivedCommands+0x8>
	}
}
 8008046:	bf00      	nop
 8008048:	3728      	adds	r7, #40	; 0x28
 800804a:	46bd      	mov	sp, r7
 800804c:	bd80      	pop	{r7, pc}
 800804e:	bf00      	nop
 8008050:	20000a2c 	.word	0x20000a2c

08008054 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008054:	b580      	push	{r7, lr}
 8008056:	b088      	sub	sp, #32
 8008058:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800805a:	e049      	b.n	80080f0 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800805c:	4b2e      	ldr	r3, [pc, #184]	; (8008118 <prvSwitchTimerLists+0xc4>)
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	68db      	ldr	r3, [r3, #12]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008066:	4b2c      	ldr	r3, [pc, #176]	; (8008118 <prvSwitchTimerLists+0xc4>)
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	68db      	ldr	r3, [r3, #12]
 800806c:	68db      	ldr	r3, [r3, #12]
 800806e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	3304      	adds	r3, #4
 8008074:	4618      	mov	r0, r3
 8008076:	f7fd fc7c 	bl	8005972 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	6a1b      	ldr	r3, [r3, #32]
 800807e:	68f8      	ldr	r0, [r7, #12]
 8008080:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008088:	f003 0304 	and.w	r3, r3, #4
 800808c:	2b00      	cmp	r3, #0
 800808e:	d02f      	beq.n	80080f0 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	699b      	ldr	r3, [r3, #24]
 8008094:	693a      	ldr	r2, [r7, #16]
 8008096:	4413      	add	r3, r2
 8008098:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800809a:	68ba      	ldr	r2, [r7, #8]
 800809c:	693b      	ldr	r3, [r7, #16]
 800809e:	429a      	cmp	r2, r3
 80080a0:	d90e      	bls.n	80080c0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	68ba      	ldr	r2, [r7, #8]
 80080a6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	68fa      	ldr	r2, [r7, #12]
 80080ac:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80080ae:	4b1a      	ldr	r3, [pc, #104]	; (8008118 <prvSwitchTimerLists+0xc4>)
 80080b0:	681a      	ldr	r2, [r3, #0]
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	3304      	adds	r3, #4
 80080b6:	4619      	mov	r1, r3
 80080b8:	4610      	mov	r0, r2
 80080ba:	f7fd fc21 	bl	8005900 <vListInsert>
 80080be:	e017      	b.n	80080f0 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80080c0:	2300      	movs	r3, #0
 80080c2:	9300      	str	r3, [sp, #0]
 80080c4:	2300      	movs	r3, #0
 80080c6:	693a      	ldr	r2, [r7, #16]
 80080c8:	2100      	movs	r1, #0
 80080ca:	68f8      	ldr	r0, [r7, #12]
 80080cc:	f7ff fd78 	bl	8007bc0 <xTimerGenericCommand>
 80080d0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d10b      	bne.n	80080f0 <prvSwitchTimerLists+0x9c>
 80080d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080dc:	b672      	cpsid	i
 80080de:	f383 8811 	msr	BASEPRI, r3
 80080e2:	f3bf 8f6f 	isb	sy
 80080e6:	f3bf 8f4f 	dsb	sy
 80080ea:	b662      	cpsie	i
 80080ec:	603b      	str	r3, [r7, #0]
 80080ee:	e7fe      	b.n	80080ee <prvSwitchTimerLists+0x9a>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80080f0:	4b09      	ldr	r3, [pc, #36]	; (8008118 <prvSwitchTimerLists+0xc4>)
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d1b0      	bne.n	800805c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80080fa:	4b07      	ldr	r3, [pc, #28]	; (8008118 <prvSwitchTimerLists+0xc4>)
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008100:	4b06      	ldr	r3, [pc, #24]	; (800811c <prvSwitchTimerLists+0xc8>)
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	4a04      	ldr	r2, [pc, #16]	; (8008118 <prvSwitchTimerLists+0xc4>)
 8008106:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008108:	4a04      	ldr	r2, [pc, #16]	; (800811c <prvSwitchTimerLists+0xc8>)
 800810a:	697b      	ldr	r3, [r7, #20]
 800810c:	6013      	str	r3, [r2, #0]
}
 800810e:	bf00      	nop
 8008110:	3718      	adds	r7, #24
 8008112:	46bd      	mov	sp, r7
 8008114:	bd80      	pop	{r7, pc}
 8008116:	bf00      	nop
 8008118:	20000a24 	.word	0x20000a24
 800811c:	20000a28 	.word	0x20000a28

08008120 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008120:	b580      	push	{r7, lr}
 8008122:	b082      	sub	sp, #8
 8008124:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008126:	f000 f947 	bl	80083b8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800812a:	4b15      	ldr	r3, [pc, #84]	; (8008180 <prvCheckForValidListAndQueue+0x60>)
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	2b00      	cmp	r3, #0
 8008130:	d120      	bne.n	8008174 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008132:	4814      	ldr	r0, [pc, #80]	; (8008184 <prvCheckForValidListAndQueue+0x64>)
 8008134:	f7fd fb93 	bl	800585e <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008138:	4813      	ldr	r0, [pc, #76]	; (8008188 <prvCheckForValidListAndQueue+0x68>)
 800813a:	f7fd fb90 	bl	800585e <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800813e:	4b13      	ldr	r3, [pc, #76]	; (800818c <prvCheckForValidListAndQueue+0x6c>)
 8008140:	4a10      	ldr	r2, [pc, #64]	; (8008184 <prvCheckForValidListAndQueue+0x64>)
 8008142:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008144:	4b12      	ldr	r3, [pc, #72]	; (8008190 <prvCheckForValidListAndQueue+0x70>)
 8008146:	4a10      	ldr	r2, [pc, #64]	; (8008188 <prvCheckForValidListAndQueue+0x68>)
 8008148:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800814a:	2300      	movs	r3, #0
 800814c:	9300      	str	r3, [sp, #0]
 800814e:	4b11      	ldr	r3, [pc, #68]	; (8008194 <prvCheckForValidListAndQueue+0x74>)
 8008150:	4a11      	ldr	r2, [pc, #68]	; (8008198 <prvCheckForValidListAndQueue+0x78>)
 8008152:	210c      	movs	r1, #12
 8008154:	200a      	movs	r0, #10
 8008156:	f7fd fca1 	bl	8005a9c <xQueueGenericCreateStatic>
 800815a:	4602      	mov	r2, r0
 800815c:	4b08      	ldr	r3, [pc, #32]	; (8008180 <prvCheckForValidListAndQueue+0x60>)
 800815e:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008160:	4b07      	ldr	r3, [pc, #28]	; (8008180 <prvCheckForValidListAndQueue+0x60>)
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	2b00      	cmp	r3, #0
 8008166:	d005      	beq.n	8008174 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008168:	4b05      	ldr	r3, [pc, #20]	; (8008180 <prvCheckForValidListAndQueue+0x60>)
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	490b      	ldr	r1, [pc, #44]	; (800819c <prvCheckForValidListAndQueue+0x7c>)
 800816e:	4618      	mov	r0, r3
 8008170:	f7fe fbee 	bl	8006950 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008174:	f000 f952 	bl	800841c <vPortExitCritical>
}
 8008178:	bf00      	nop
 800817a:	46bd      	mov	sp, r7
 800817c:	bd80      	pop	{r7, pc}
 800817e:	bf00      	nop
 8008180:	20000a2c 	.word	0x20000a2c
 8008184:	200009fc 	.word	0x200009fc
 8008188:	20000a10 	.word	0x20000a10
 800818c:	20000a24 	.word	0x20000a24
 8008190:	20000a28 	.word	0x20000a28
 8008194:	20000ab0 	.word	0x20000ab0
 8008198:	20000a38 	.word	0x20000a38
 800819c:	0800ffb8 	.word	0x0800ffb8

080081a0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80081a0:	b480      	push	{r7}
 80081a2:	b085      	sub	sp, #20
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	60f8      	str	r0, [r7, #12]
 80081a8:	60b9      	str	r1, [r7, #8]
 80081aa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	3b04      	subs	r3, #4
 80081b0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80081b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	3b04      	subs	r3, #4
 80081be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80081c0:	68bb      	ldr	r3, [r7, #8]
 80081c2:	f023 0201 	bic.w	r2, r3, #1
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	3b04      	subs	r3, #4
 80081ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80081d0:	4a0c      	ldr	r2, [pc, #48]	; (8008204 <pxPortInitialiseStack+0x64>)
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	3b14      	subs	r3, #20
 80081da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80081dc:	687a      	ldr	r2, [r7, #4]
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	3b04      	subs	r3, #4
 80081e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	f06f 0202 	mvn.w	r2, #2
 80081ee:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	3b20      	subs	r3, #32
 80081f4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80081f6:	68fb      	ldr	r3, [r7, #12]
}
 80081f8:	4618      	mov	r0, r3
 80081fa:	3714      	adds	r7, #20
 80081fc:	46bd      	mov	sp, r7
 80081fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008202:	4770      	bx	lr
 8008204:	08008209 	.word	0x08008209

08008208 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008208:	b480      	push	{r7}
 800820a:	b085      	sub	sp, #20
 800820c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800820e:	2300      	movs	r3, #0
 8008210:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008212:	4b13      	ldr	r3, [pc, #76]	; (8008260 <prvTaskExitError+0x58>)
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	f1b3 3fff 	cmp.w	r3, #4294967295
 800821a:	d00b      	beq.n	8008234 <prvTaskExitError+0x2c>
 800821c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008220:	b672      	cpsid	i
 8008222:	f383 8811 	msr	BASEPRI, r3
 8008226:	f3bf 8f6f 	isb	sy
 800822a:	f3bf 8f4f 	dsb	sy
 800822e:	b662      	cpsie	i
 8008230:	60fb      	str	r3, [r7, #12]
 8008232:	e7fe      	b.n	8008232 <prvTaskExitError+0x2a>
 8008234:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008238:	b672      	cpsid	i
 800823a:	f383 8811 	msr	BASEPRI, r3
 800823e:	f3bf 8f6f 	isb	sy
 8008242:	f3bf 8f4f 	dsb	sy
 8008246:	b662      	cpsie	i
 8008248:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800824a:	bf00      	nop
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	2b00      	cmp	r3, #0
 8008250:	d0fc      	beq.n	800824c <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008252:	bf00      	nop
 8008254:	3714      	adds	r7, #20
 8008256:	46bd      	mov	sp, r7
 8008258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825c:	4770      	bx	lr
 800825e:	bf00      	nop
 8008260:	2000000c 	.word	0x2000000c
	...

08008270 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008270:	4b07      	ldr	r3, [pc, #28]	; (8008290 <pxCurrentTCBConst2>)
 8008272:	6819      	ldr	r1, [r3, #0]
 8008274:	6808      	ldr	r0, [r1, #0]
 8008276:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800827a:	f380 8809 	msr	PSP, r0
 800827e:	f3bf 8f6f 	isb	sy
 8008282:	f04f 0000 	mov.w	r0, #0
 8008286:	f380 8811 	msr	BASEPRI, r0
 800828a:	4770      	bx	lr
 800828c:	f3af 8000 	nop.w

08008290 <pxCurrentTCBConst2>:
 8008290:	200008d0 	.word	0x200008d0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008294:	bf00      	nop
 8008296:	bf00      	nop

08008298 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008298:	4808      	ldr	r0, [pc, #32]	; (80082bc <prvPortStartFirstTask+0x24>)
 800829a:	6800      	ldr	r0, [r0, #0]
 800829c:	6800      	ldr	r0, [r0, #0]
 800829e:	f380 8808 	msr	MSP, r0
 80082a2:	f04f 0000 	mov.w	r0, #0
 80082a6:	f380 8814 	msr	CONTROL, r0
 80082aa:	b662      	cpsie	i
 80082ac:	b661      	cpsie	f
 80082ae:	f3bf 8f4f 	dsb	sy
 80082b2:	f3bf 8f6f 	isb	sy
 80082b6:	df00      	svc	0
 80082b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80082ba:	bf00      	nop
 80082bc:	e000ed08 	.word	0xe000ed08

080082c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80082c0:	b580      	push	{r7, lr}
 80082c2:	b084      	sub	sp, #16
 80082c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80082c6:	4b36      	ldr	r3, [pc, #216]	; (80083a0 <xPortStartScheduler+0xe0>)
 80082c8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	781b      	ldrb	r3, [r3, #0]
 80082ce:	b2db      	uxtb	r3, r3
 80082d0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	22ff      	movs	r2, #255	; 0xff
 80082d6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	781b      	ldrb	r3, [r3, #0]
 80082dc:	b2db      	uxtb	r3, r3
 80082de:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80082e0:	78fb      	ldrb	r3, [r7, #3]
 80082e2:	b2db      	uxtb	r3, r3
 80082e4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80082e8:	b2da      	uxtb	r2, r3
 80082ea:	4b2e      	ldr	r3, [pc, #184]	; (80083a4 <xPortStartScheduler+0xe4>)
 80082ec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80082ee:	4b2e      	ldr	r3, [pc, #184]	; (80083a8 <xPortStartScheduler+0xe8>)
 80082f0:	2207      	movs	r2, #7
 80082f2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80082f4:	e009      	b.n	800830a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80082f6:	4b2c      	ldr	r3, [pc, #176]	; (80083a8 <xPortStartScheduler+0xe8>)
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	3b01      	subs	r3, #1
 80082fc:	4a2a      	ldr	r2, [pc, #168]	; (80083a8 <xPortStartScheduler+0xe8>)
 80082fe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008300:	78fb      	ldrb	r3, [r7, #3]
 8008302:	b2db      	uxtb	r3, r3
 8008304:	005b      	lsls	r3, r3, #1
 8008306:	b2db      	uxtb	r3, r3
 8008308:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800830a:	78fb      	ldrb	r3, [r7, #3]
 800830c:	b2db      	uxtb	r3, r3
 800830e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008312:	2b80      	cmp	r3, #128	; 0x80
 8008314:	d0ef      	beq.n	80082f6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008316:	4b24      	ldr	r3, [pc, #144]	; (80083a8 <xPortStartScheduler+0xe8>)
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	f1c3 0307 	rsb	r3, r3, #7
 800831e:	2b04      	cmp	r3, #4
 8008320:	d00b      	beq.n	800833a <xPortStartScheduler+0x7a>
 8008322:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008326:	b672      	cpsid	i
 8008328:	f383 8811 	msr	BASEPRI, r3
 800832c:	f3bf 8f6f 	isb	sy
 8008330:	f3bf 8f4f 	dsb	sy
 8008334:	b662      	cpsie	i
 8008336:	60bb      	str	r3, [r7, #8]
 8008338:	e7fe      	b.n	8008338 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800833a:	4b1b      	ldr	r3, [pc, #108]	; (80083a8 <xPortStartScheduler+0xe8>)
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	021b      	lsls	r3, r3, #8
 8008340:	4a19      	ldr	r2, [pc, #100]	; (80083a8 <xPortStartScheduler+0xe8>)
 8008342:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008344:	4b18      	ldr	r3, [pc, #96]	; (80083a8 <xPortStartScheduler+0xe8>)
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800834c:	4a16      	ldr	r2, [pc, #88]	; (80083a8 <xPortStartScheduler+0xe8>)
 800834e:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	b2da      	uxtb	r2, r3
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008358:	4b14      	ldr	r3, [pc, #80]	; (80083ac <xPortStartScheduler+0xec>)
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	4a13      	ldr	r2, [pc, #76]	; (80083ac <xPortStartScheduler+0xec>)
 800835e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008362:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008364:	4b11      	ldr	r3, [pc, #68]	; (80083ac <xPortStartScheduler+0xec>)
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	4a10      	ldr	r2, [pc, #64]	; (80083ac <xPortStartScheduler+0xec>)
 800836a:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800836e:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008370:	f000 f8d4 	bl	800851c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008374:	4b0e      	ldr	r3, [pc, #56]	; (80083b0 <xPortStartScheduler+0xf0>)
 8008376:	2200      	movs	r2, #0
 8008378:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800837a:	f000 f8f3 	bl	8008564 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800837e:	4b0d      	ldr	r3, [pc, #52]	; (80083b4 <xPortStartScheduler+0xf4>)
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	4a0c      	ldr	r2, [pc, #48]	; (80083b4 <xPortStartScheduler+0xf4>)
 8008384:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008388:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800838a:	f7ff ff85 	bl	8008298 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800838e:	f7fe ff23 	bl	80071d8 <vTaskSwitchContext>
	prvTaskExitError();
 8008392:	f7ff ff39 	bl	8008208 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008396:	2300      	movs	r3, #0
}
 8008398:	4618      	mov	r0, r3
 800839a:	3710      	adds	r7, #16
 800839c:	46bd      	mov	sp, r7
 800839e:	bd80      	pop	{r7, pc}
 80083a0:	e000e400 	.word	0xe000e400
 80083a4:	20000af8 	.word	0x20000af8
 80083a8:	20000afc 	.word	0x20000afc
 80083ac:	e000ed20 	.word	0xe000ed20
 80083b0:	2000000c 	.word	0x2000000c
 80083b4:	e000ef34 	.word	0xe000ef34

080083b8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80083b8:	b480      	push	{r7}
 80083ba:	b083      	sub	sp, #12
 80083bc:	af00      	add	r7, sp, #0
 80083be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083c2:	b672      	cpsid	i
 80083c4:	f383 8811 	msr	BASEPRI, r3
 80083c8:	f3bf 8f6f 	isb	sy
 80083cc:	f3bf 8f4f 	dsb	sy
 80083d0:	b662      	cpsie	i
 80083d2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80083d4:	4b0f      	ldr	r3, [pc, #60]	; (8008414 <vPortEnterCritical+0x5c>)
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	3301      	adds	r3, #1
 80083da:	4a0e      	ldr	r2, [pc, #56]	; (8008414 <vPortEnterCritical+0x5c>)
 80083dc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80083de:	4b0d      	ldr	r3, [pc, #52]	; (8008414 <vPortEnterCritical+0x5c>)
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	2b01      	cmp	r3, #1
 80083e4:	d110      	bne.n	8008408 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80083e6:	4b0c      	ldr	r3, [pc, #48]	; (8008418 <vPortEnterCritical+0x60>)
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	b2db      	uxtb	r3, r3
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d00b      	beq.n	8008408 <vPortEnterCritical+0x50>
 80083f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083f4:	b672      	cpsid	i
 80083f6:	f383 8811 	msr	BASEPRI, r3
 80083fa:	f3bf 8f6f 	isb	sy
 80083fe:	f3bf 8f4f 	dsb	sy
 8008402:	b662      	cpsie	i
 8008404:	603b      	str	r3, [r7, #0]
 8008406:	e7fe      	b.n	8008406 <vPortEnterCritical+0x4e>
	}
}
 8008408:	bf00      	nop
 800840a:	370c      	adds	r7, #12
 800840c:	46bd      	mov	sp, r7
 800840e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008412:	4770      	bx	lr
 8008414:	2000000c 	.word	0x2000000c
 8008418:	e000ed04 	.word	0xe000ed04

0800841c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800841c:	b480      	push	{r7}
 800841e:	b083      	sub	sp, #12
 8008420:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008422:	4b12      	ldr	r3, [pc, #72]	; (800846c <vPortExitCritical+0x50>)
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	2b00      	cmp	r3, #0
 8008428:	d10b      	bne.n	8008442 <vPortExitCritical+0x26>
 800842a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800842e:	b672      	cpsid	i
 8008430:	f383 8811 	msr	BASEPRI, r3
 8008434:	f3bf 8f6f 	isb	sy
 8008438:	f3bf 8f4f 	dsb	sy
 800843c:	b662      	cpsie	i
 800843e:	607b      	str	r3, [r7, #4]
 8008440:	e7fe      	b.n	8008440 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 8008442:	4b0a      	ldr	r3, [pc, #40]	; (800846c <vPortExitCritical+0x50>)
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	3b01      	subs	r3, #1
 8008448:	4a08      	ldr	r2, [pc, #32]	; (800846c <vPortExitCritical+0x50>)
 800844a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800844c:	4b07      	ldr	r3, [pc, #28]	; (800846c <vPortExitCritical+0x50>)
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	2b00      	cmp	r3, #0
 8008452:	d104      	bne.n	800845e <vPortExitCritical+0x42>
 8008454:	2300      	movs	r3, #0
 8008456:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008458:	683b      	ldr	r3, [r7, #0]
 800845a:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800845e:	bf00      	nop
 8008460:	370c      	adds	r7, #12
 8008462:	46bd      	mov	sp, r7
 8008464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008468:	4770      	bx	lr
 800846a:	bf00      	nop
 800846c:	2000000c 	.word	0x2000000c

08008470 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008470:	f3ef 8009 	mrs	r0, PSP
 8008474:	f3bf 8f6f 	isb	sy
 8008478:	4b15      	ldr	r3, [pc, #84]	; (80084d0 <pxCurrentTCBConst>)
 800847a:	681a      	ldr	r2, [r3, #0]
 800847c:	f01e 0f10 	tst.w	lr, #16
 8008480:	bf08      	it	eq
 8008482:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008486:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800848a:	6010      	str	r0, [r2, #0]
 800848c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008490:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008494:	b672      	cpsid	i
 8008496:	f380 8811 	msr	BASEPRI, r0
 800849a:	f3bf 8f4f 	dsb	sy
 800849e:	f3bf 8f6f 	isb	sy
 80084a2:	b662      	cpsie	i
 80084a4:	f7fe fe98 	bl	80071d8 <vTaskSwitchContext>
 80084a8:	f04f 0000 	mov.w	r0, #0
 80084ac:	f380 8811 	msr	BASEPRI, r0
 80084b0:	bc09      	pop	{r0, r3}
 80084b2:	6819      	ldr	r1, [r3, #0]
 80084b4:	6808      	ldr	r0, [r1, #0]
 80084b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084ba:	f01e 0f10 	tst.w	lr, #16
 80084be:	bf08      	it	eq
 80084c0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80084c4:	f380 8809 	msr	PSP, r0
 80084c8:	f3bf 8f6f 	isb	sy
 80084cc:	4770      	bx	lr
 80084ce:	bf00      	nop

080084d0 <pxCurrentTCBConst>:
 80084d0:	200008d0 	.word	0x200008d0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80084d4:	bf00      	nop
 80084d6:	bf00      	nop

080084d8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80084d8:	b580      	push	{r7, lr}
 80084da:	b082      	sub	sp, #8
 80084dc:	af00      	add	r7, sp, #0
	__asm volatile
 80084de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084e2:	b672      	cpsid	i
 80084e4:	f383 8811 	msr	BASEPRI, r3
 80084e8:	f3bf 8f6f 	isb	sy
 80084ec:	f3bf 8f4f 	dsb	sy
 80084f0:	b662      	cpsie	i
 80084f2:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80084f4:	f7fe fdb6 	bl	8007064 <xTaskIncrementTick>
 80084f8:	4603      	mov	r3, r0
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d003      	beq.n	8008506 <SysTick_Handler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80084fe:	4b06      	ldr	r3, [pc, #24]	; (8008518 <SysTick_Handler+0x40>)
 8008500:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008504:	601a      	str	r2, [r3, #0]
 8008506:	2300      	movs	r3, #0
 8008508:	603b      	str	r3, [r7, #0]
	__asm volatile
 800850a:	683b      	ldr	r3, [r7, #0]
 800850c:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8008510:	bf00      	nop
 8008512:	3708      	adds	r7, #8
 8008514:	46bd      	mov	sp, r7
 8008516:	bd80      	pop	{r7, pc}
 8008518:	e000ed04 	.word	0xe000ed04

0800851c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800851c:	b480      	push	{r7}
 800851e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008520:	4b0b      	ldr	r3, [pc, #44]	; (8008550 <vPortSetupTimerInterrupt+0x34>)
 8008522:	2200      	movs	r2, #0
 8008524:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008526:	4b0b      	ldr	r3, [pc, #44]	; (8008554 <vPortSetupTimerInterrupt+0x38>)
 8008528:	2200      	movs	r2, #0
 800852a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800852c:	4b0a      	ldr	r3, [pc, #40]	; (8008558 <vPortSetupTimerInterrupt+0x3c>)
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	4a0a      	ldr	r2, [pc, #40]	; (800855c <vPortSetupTimerInterrupt+0x40>)
 8008532:	fba2 2303 	umull	r2, r3, r2, r3
 8008536:	099b      	lsrs	r3, r3, #6
 8008538:	4a09      	ldr	r2, [pc, #36]	; (8008560 <vPortSetupTimerInterrupt+0x44>)
 800853a:	3b01      	subs	r3, #1
 800853c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800853e:	4b04      	ldr	r3, [pc, #16]	; (8008550 <vPortSetupTimerInterrupt+0x34>)
 8008540:	2207      	movs	r2, #7
 8008542:	601a      	str	r2, [r3, #0]
}
 8008544:	bf00      	nop
 8008546:	46bd      	mov	sp, r7
 8008548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800854c:	4770      	bx	lr
 800854e:	bf00      	nop
 8008550:	e000e010 	.word	0xe000e010
 8008554:	e000e018 	.word	0xe000e018
 8008558:	20000000 	.word	0x20000000
 800855c:	10624dd3 	.word	0x10624dd3
 8008560:	e000e014 	.word	0xe000e014

08008564 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008564:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008574 <vPortEnableVFP+0x10>
 8008568:	6801      	ldr	r1, [r0, #0]
 800856a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800856e:	6001      	str	r1, [r0, #0]
 8008570:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008572:	bf00      	nop
 8008574:	e000ed88 	.word	0xe000ed88

08008578 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008578:	b480      	push	{r7}
 800857a:	b085      	sub	sp, #20
 800857c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800857e:	f3ef 8305 	mrs	r3, IPSR
 8008582:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	2b0f      	cmp	r3, #15
 8008588:	d915      	bls.n	80085b6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800858a:	4a18      	ldr	r2, [pc, #96]	; (80085ec <vPortValidateInterruptPriority+0x74>)
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	4413      	add	r3, r2
 8008590:	781b      	ldrb	r3, [r3, #0]
 8008592:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008594:	4b16      	ldr	r3, [pc, #88]	; (80085f0 <vPortValidateInterruptPriority+0x78>)
 8008596:	781b      	ldrb	r3, [r3, #0]
 8008598:	7afa      	ldrb	r2, [r7, #11]
 800859a:	429a      	cmp	r2, r3
 800859c:	d20b      	bcs.n	80085b6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800859e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085a2:	b672      	cpsid	i
 80085a4:	f383 8811 	msr	BASEPRI, r3
 80085a8:	f3bf 8f6f 	isb	sy
 80085ac:	f3bf 8f4f 	dsb	sy
 80085b0:	b662      	cpsie	i
 80085b2:	607b      	str	r3, [r7, #4]
 80085b4:	e7fe      	b.n	80085b4 <vPortValidateInterruptPriority+0x3c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80085b6:	4b0f      	ldr	r3, [pc, #60]	; (80085f4 <vPortValidateInterruptPriority+0x7c>)
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80085be:	4b0e      	ldr	r3, [pc, #56]	; (80085f8 <vPortValidateInterruptPriority+0x80>)
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	429a      	cmp	r2, r3
 80085c4:	d90b      	bls.n	80085de <vPortValidateInterruptPriority+0x66>
 80085c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085ca:	b672      	cpsid	i
 80085cc:	f383 8811 	msr	BASEPRI, r3
 80085d0:	f3bf 8f6f 	isb	sy
 80085d4:	f3bf 8f4f 	dsb	sy
 80085d8:	b662      	cpsie	i
 80085da:	603b      	str	r3, [r7, #0]
 80085dc:	e7fe      	b.n	80085dc <vPortValidateInterruptPriority+0x64>
	}
 80085de:	bf00      	nop
 80085e0:	3714      	adds	r7, #20
 80085e2:	46bd      	mov	sp, r7
 80085e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e8:	4770      	bx	lr
 80085ea:	bf00      	nop
 80085ec:	e000e3f0 	.word	0xe000e3f0
 80085f0:	20000af8 	.word	0x20000af8
 80085f4:	e000ed0c 	.word	0xe000ed0c
 80085f8:	20000afc 	.word	0x20000afc

080085fc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80085fc:	b580      	push	{r7, lr}
 80085fe:	b08a      	sub	sp, #40	; 0x28
 8008600:	af00      	add	r7, sp, #0
 8008602:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008604:	2300      	movs	r3, #0
 8008606:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008608:	f7fe fc5e 	bl	8006ec8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800860c:	4b5a      	ldr	r3, [pc, #360]	; (8008778 <pvPortMalloc+0x17c>)
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	2b00      	cmp	r3, #0
 8008612:	d101      	bne.n	8008618 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008614:	f000 f916 	bl	8008844 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008618:	4b58      	ldr	r3, [pc, #352]	; (800877c <pvPortMalloc+0x180>)
 800861a:	681a      	ldr	r2, [r3, #0]
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	4013      	ands	r3, r2
 8008620:	2b00      	cmp	r3, #0
 8008622:	f040 8090 	bne.w	8008746 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	2b00      	cmp	r3, #0
 800862a:	d01e      	beq.n	800866a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800862c:	2208      	movs	r2, #8
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	4413      	add	r3, r2
 8008632:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	f003 0307 	and.w	r3, r3, #7
 800863a:	2b00      	cmp	r3, #0
 800863c:	d015      	beq.n	800866a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	f023 0307 	bic.w	r3, r3, #7
 8008644:	3308      	adds	r3, #8
 8008646:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	f003 0307 	and.w	r3, r3, #7
 800864e:	2b00      	cmp	r3, #0
 8008650:	d00b      	beq.n	800866a <pvPortMalloc+0x6e>
 8008652:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008656:	b672      	cpsid	i
 8008658:	f383 8811 	msr	BASEPRI, r3
 800865c:	f3bf 8f6f 	isb	sy
 8008660:	f3bf 8f4f 	dsb	sy
 8008664:	b662      	cpsie	i
 8008666:	617b      	str	r3, [r7, #20]
 8008668:	e7fe      	b.n	8008668 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	2b00      	cmp	r3, #0
 800866e:	d06a      	beq.n	8008746 <pvPortMalloc+0x14a>
 8008670:	4b43      	ldr	r3, [pc, #268]	; (8008780 <pvPortMalloc+0x184>)
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	687a      	ldr	r2, [r7, #4]
 8008676:	429a      	cmp	r2, r3
 8008678:	d865      	bhi.n	8008746 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800867a:	4b42      	ldr	r3, [pc, #264]	; (8008784 <pvPortMalloc+0x188>)
 800867c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800867e:	4b41      	ldr	r3, [pc, #260]	; (8008784 <pvPortMalloc+0x188>)
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008684:	e004      	b.n	8008690 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8008686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008688:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800868a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008692:	685b      	ldr	r3, [r3, #4]
 8008694:	687a      	ldr	r2, [r7, #4]
 8008696:	429a      	cmp	r2, r3
 8008698:	d903      	bls.n	80086a2 <pvPortMalloc+0xa6>
 800869a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d1f1      	bne.n	8008686 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80086a2:	4b35      	ldr	r3, [pc, #212]	; (8008778 <pvPortMalloc+0x17c>)
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80086a8:	429a      	cmp	r2, r3
 80086aa:	d04c      	beq.n	8008746 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80086ac:	6a3b      	ldr	r3, [r7, #32]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	2208      	movs	r2, #8
 80086b2:	4413      	add	r3, r2
 80086b4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80086b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086b8:	681a      	ldr	r2, [r3, #0]
 80086ba:	6a3b      	ldr	r3, [r7, #32]
 80086bc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80086be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086c0:	685a      	ldr	r2, [r3, #4]
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	1ad2      	subs	r2, r2, r3
 80086c6:	2308      	movs	r3, #8
 80086c8:	005b      	lsls	r3, r3, #1
 80086ca:	429a      	cmp	r2, r3
 80086cc:	d920      	bls.n	8008710 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80086ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	4413      	add	r3, r2
 80086d4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80086d6:	69bb      	ldr	r3, [r7, #24]
 80086d8:	f003 0307 	and.w	r3, r3, #7
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d00b      	beq.n	80086f8 <pvPortMalloc+0xfc>
 80086e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086e4:	b672      	cpsid	i
 80086e6:	f383 8811 	msr	BASEPRI, r3
 80086ea:	f3bf 8f6f 	isb	sy
 80086ee:	f3bf 8f4f 	dsb	sy
 80086f2:	b662      	cpsie	i
 80086f4:	613b      	str	r3, [r7, #16]
 80086f6:	e7fe      	b.n	80086f6 <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80086f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086fa:	685a      	ldr	r2, [r3, #4]
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	1ad2      	subs	r2, r2, r3
 8008700:	69bb      	ldr	r3, [r7, #24]
 8008702:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008706:	687a      	ldr	r2, [r7, #4]
 8008708:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800870a:	69b8      	ldr	r0, [r7, #24]
 800870c:	f000 f8fc 	bl	8008908 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008710:	4b1b      	ldr	r3, [pc, #108]	; (8008780 <pvPortMalloc+0x184>)
 8008712:	681a      	ldr	r2, [r3, #0]
 8008714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008716:	685b      	ldr	r3, [r3, #4]
 8008718:	1ad3      	subs	r3, r2, r3
 800871a:	4a19      	ldr	r2, [pc, #100]	; (8008780 <pvPortMalloc+0x184>)
 800871c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800871e:	4b18      	ldr	r3, [pc, #96]	; (8008780 <pvPortMalloc+0x184>)
 8008720:	681a      	ldr	r2, [r3, #0]
 8008722:	4b19      	ldr	r3, [pc, #100]	; (8008788 <pvPortMalloc+0x18c>)
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	429a      	cmp	r2, r3
 8008728:	d203      	bcs.n	8008732 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800872a:	4b15      	ldr	r3, [pc, #84]	; (8008780 <pvPortMalloc+0x184>)
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	4a16      	ldr	r2, [pc, #88]	; (8008788 <pvPortMalloc+0x18c>)
 8008730:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008734:	685a      	ldr	r2, [r3, #4]
 8008736:	4b11      	ldr	r3, [pc, #68]	; (800877c <pvPortMalloc+0x180>)
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	431a      	orrs	r2, r3
 800873c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800873e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008742:	2200      	movs	r2, #0
 8008744:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008746:	f7fe fbcd 	bl	8006ee4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800874a:	69fb      	ldr	r3, [r7, #28]
 800874c:	f003 0307 	and.w	r3, r3, #7
 8008750:	2b00      	cmp	r3, #0
 8008752:	d00b      	beq.n	800876c <pvPortMalloc+0x170>
 8008754:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008758:	b672      	cpsid	i
 800875a:	f383 8811 	msr	BASEPRI, r3
 800875e:	f3bf 8f6f 	isb	sy
 8008762:	f3bf 8f4f 	dsb	sy
 8008766:	b662      	cpsie	i
 8008768:	60fb      	str	r3, [r7, #12]
 800876a:	e7fe      	b.n	800876a <pvPortMalloc+0x16e>
	return pvReturn;
 800876c:	69fb      	ldr	r3, [r7, #28]
}
 800876e:	4618      	mov	r0, r3
 8008770:	3728      	adds	r7, #40	; 0x28
 8008772:	46bd      	mov	sp, r7
 8008774:	bd80      	pop	{r7, pc}
 8008776:	bf00      	nop
 8008778:	20004708 	.word	0x20004708
 800877c:	20004714 	.word	0x20004714
 8008780:	2000470c 	.word	0x2000470c
 8008784:	20004700 	.word	0x20004700
 8008788:	20004710 	.word	0x20004710

0800878c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800878c:	b580      	push	{r7, lr}
 800878e:	b086      	sub	sp, #24
 8008790:	af00      	add	r7, sp, #0
 8008792:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	2b00      	cmp	r3, #0
 800879c:	d04a      	beq.n	8008834 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800879e:	2308      	movs	r3, #8
 80087a0:	425b      	negs	r3, r3
 80087a2:	697a      	ldr	r2, [r7, #20]
 80087a4:	4413      	add	r3, r2
 80087a6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80087a8:	697b      	ldr	r3, [r7, #20]
 80087aa:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80087ac:	693b      	ldr	r3, [r7, #16]
 80087ae:	685a      	ldr	r2, [r3, #4]
 80087b0:	4b22      	ldr	r3, [pc, #136]	; (800883c <vPortFree+0xb0>)
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	4013      	ands	r3, r2
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d10b      	bne.n	80087d2 <vPortFree+0x46>
 80087ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087be:	b672      	cpsid	i
 80087c0:	f383 8811 	msr	BASEPRI, r3
 80087c4:	f3bf 8f6f 	isb	sy
 80087c8:	f3bf 8f4f 	dsb	sy
 80087cc:	b662      	cpsie	i
 80087ce:	60fb      	str	r3, [r7, #12]
 80087d0:	e7fe      	b.n	80087d0 <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80087d2:	693b      	ldr	r3, [r7, #16]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d00b      	beq.n	80087f2 <vPortFree+0x66>
 80087da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087de:	b672      	cpsid	i
 80087e0:	f383 8811 	msr	BASEPRI, r3
 80087e4:	f3bf 8f6f 	isb	sy
 80087e8:	f3bf 8f4f 	dsb	sy
 80087ec:	b662      	cpsie	i
 80087ee:	60bb      	str	r3, [r7, #8]
 80087f0:	e7fe      	b.n	80087f0 <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80087f2:	693b      	ldr	r3, [r7, #16]
 80087f4:	685a      	ldr	r2, [r3, #4]
 80087f6:	4b11      	ldr	r3, [pc, #68]	; (800883c <vPortFree+0xb0>)
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	4013      	ands	r3, r2
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d019      	beq.n	8008834 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008800:	693b      	ldr	r3, [r7, #16]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	2b00      	cmp	r3, #0
 8008806:	d115      	bne.n	8008834 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008808:	693b      	ldr	r3, [r7, #16]
 800880a:	685a      	ldr	r2, [r3, #4]
 800880c:	4b0b      	ldr	r3, [pc, #44]	; (800883c <vPortFree+0xb0>)
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	43db      	mvns	r3, r3
 8008812:	401a      	ands	r2, r3
 8008814:	693b      	ldr	r3, [r7, #16]
 8008816:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008818:	f7fe fb56 	bl	8006ec8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800881c:	693b      	ldr	r3, [r7, #16]
 800881e:	685a      	ldr	r2, [r3, #4]
 8008820:	4b07      	ldr	r3, [pc, #28]	; (8008840 <vPortFree+0xb4>)
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	4413      	add	r3, r2
 8008826:	4a06      	ldr	r2, [pc, #24]	; (8008840 <vPortFree+0xb4>)
 8008828:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800882a:	6938      	ldr	r0, [r7, #16]
 800882c:	f000 f86c 	bl	8008908 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008830:	f7fe fb58 	bl	8006ee4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008834:	bf00      	nop
 8008836:	3718      	adds	r7, #24
 8008838:	46bd      	mov	sp, r7
 800883a:	bd80      	pop	{r7, pc}
 800883c:	20004714 	.word	0x20004714
 8008840:	2000470c 	.word	0x2000470c

08008844 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008844:	b480      	push	{r7}
 8008846:	b085      	sub	sp, #20
 8008848:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800884a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800884e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008850:	4b27      	ldr	r3, [pc, #156]	; (80088f0 <prvHeapInit+0xac>)
 8008852:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	f003 0307 	and.w	r3, r3, #7
 800885a:	2b00      	cmp	r3, #0
 800885c:	d00c      	beq.n	8008878 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	3307      	adds	r3, #7
 8008862:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	f023 0307 	bic.w	r3, r3, #7
 800886a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800886c:	68ba      	ldr	r2, [r7, #8]
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	1ad3      	subs	r3, r2, r3
 8008872:	4a1f      	ldr	r2, [pc, #124]	; (80088f0 <prvHeapInit+0xac>)
 8008874:	4413      	add	r3, r2
 8008876:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800887c:	4a1d      	ldr	r2, [pc, #116]	; (80088f4 <prvHeapInit+0xb0>)
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008882:	4b1c      	ldr	r3, [pc, #112]	; (80088f4 <prvHeapInit+0xb0>)
 8008884:	2200      	movs	r2, #0
 8008886:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	68ba      	ldr	r2, [r7, #8]
 800888c:	4413      	add	r3, r2
 800888e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008890:	2208      	movs	r2, #8
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	1a9b      	subs	r3, r3, r2
 8008896:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	f023 0307 	bic.w	r3, r3, #7
 800889e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	4a15      	ldr	r2, [pc, #84]	; (80088f8 <prvHeapInit+0xb4>)
 80088a4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80088a6:	4b14      	ldr	r3, [pc, #80]	; (80088f8 <prvHeapInit+0xb4>)
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	2200      	movs	r2, #0
 80088ac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80088ae:	4b12      	ldr	r3, [pc, #72]	; (80088f8 <prvHeapInit+0xb4>)
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	2200      	movs	r2, #0
 80088b4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80088ba:	683b      	ldr	r3, [r7, #0]
 80088bc:	68fa      	ldr	r2, [r7, #12]
 80088be:	1ad2      	subs	r2, r2, r3
 80088c0:	683b      	ldr	r3, [r7, #0]
 80088c2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80088c4:	4b0c      	ldr	r3, [pc, #48]	; (80088f8 <prvHeapInit+0xb4>)
 80088c6:	681a      	ldr	r2, [r3, #0]
 80088c8:	683b      	ldr	r3, [r7, #0]
 80088ca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80088cc:	683b      	ldr	r3, [r7, #0]
 80088ce:	685b      	ldr	r3, [r3, #4]
 80088d0:	4a0a      	ldr	r2, [pc, #40]	; (80088fc <prvHeapInit+0xb8>)
 80088d2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80088d4:	683b      	ldr	r3, [r7, #0]
 80088d6:	685b      	ldr	r3, [r3, #4]
 80088d8:	4a09      	ldr	r2, [pc, #36]	; (8008900 <prvHeapInit+0xbc>)
 80088da:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80088dc:	4b09      	ldr	r3, [pc, #36]	; (8008904 <prvHeapInit+0xc0>)
 80088de:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80088e2:	601a      	str	r2, [r3, #0]
}
 80088e4:	bf00      	nop
 80088e6:	3714      	adds	r7, #20
 80088e8:	46bd      	mov	sp, r7
 80088ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ee:	4770      	bx	lr
 80088f0:	20000b00 	.word	0x20000b00
 80088f4:	20004700 	.word	0x20004700
 80088f8:	20004708 	.word	0x20004708
 80088fc:	20004710 	.word	0x20004710
 8008900:	2000470c 	.word	0x2000470c
 8008904:	20004714 	.word	0x20004714

08008908 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008908:	b480      	push	{r7}
 800890a:	b085      	sub	sp, #20
 800890c:	af00      	add	r7, sp, #0
 800890e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008910:	4b28      	ldr	r3, [pc, #160]	; (80089b4 <prvInsertBlockIntoFreeList+0xac>)
 8008912:	60fb      	str	r3, [r7, #12]
 8008914:	e002      	b.n	800891c <prvInsertBlockIntoFreeList+0x14>
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	60fb      	str	r3, [r7, #12]
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	687a      	ldr	r2, [r7, #4]
 8008922:	429a      	cmp	r2, r3
 8008924:	d8f7      	bhi.n	8008916 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	685b      	ldr	r3, [r3, #4]
 800892e:	68ba      	ldr	r2, [r7, #8]
 8008930:	4413      	add	r3, r2
 8008932:	687a      	ldr	r2, [r7, #4]
 8008934:	429a      	cmp	r2, r3
 8008936:	d108      	bne.n	800894a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	685a      	ldr	r2, [r3, #4]
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	685b      	ldr	r3, [r3, #4]
 8008940:	441a      	add	r2, r3
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	685b      	ldr	r3, [r3, #4]
 8008952:	68ba      	ldr	r2, [r7, #8]
 8008954:	441a      	add	r2, r3
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	429a      	cmp	r2, r3
 800895c:	d118      	bne.n	8008990 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	681a      	ldr	r2, [r3, #0]
 8008962:	4b15      	ldr	r3, [pc, #84]	; (80089b8 <prvInsertBlockIntoFreeList+0xb0>)
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	429a      	cmp	r2, r3
 8008968:	d00d      	beq.n	8008986 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	685a      	ldr	r2, [r3, #4]
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	685b      	ldr	r3, [r3, #4]
 8008974:	441a      	add	r2, r3
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	681a      	ldr	r2, [r3, #0]
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	601a      	str	r2, [r3, #0]
 8008984:	e008      	b.n	8008998 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008986:	4b0c      	ldr	r3, [pc, #48]	; (80089b8 <prvInsertBlockIntoFreeList+0xb0>)
 8008988:	681a      	ldr	r2, [r3, #0]
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	601a      	str	r2, [r3, #0]
 800898e:	e003      	b.n	8008998 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	681a      	ldr	r2, [r3, #0]
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008998:	68fa      	ldr	r2, [r7, #12]
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	429a      	cmp	r2, r3
 800899e:	d002      	beq.n	80089a6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	687a      	ldr	r2, [r7, #4]
 80089a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80089a6:	bf00      	nop
 80089a8:	3714      	adds	r7, #20
 80089aa:	46bd      	mov	sp, r7
 80089ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b0:	4770      	bx	lr
 80089b2:	bf00      	nop
 80089b4:	20004700 	.word	0x20004700
 80089b8:	20004708 	.word	0x20004708

080089bc <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 80089bc:	b580      	push	{r7, lr}
 80089be:	b084      	sub	sp, #16
 80089c0:	af00      	add	r7, sp, #0
 80089c2:	6078      	str	r0, [r7, #4]
 80089c4:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 80089c6:	683b      	ldr	r3, [r7, #0]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	330c      	adds	r3, #12
 80089cc:	461a      	mov	r2, r3
 80089ce:	6839      	ldr	r1, [r7, #0]
 80089d0:	6878      	ldr	r0, [r7, #4]
 80089d2:	f001 f8ab 	bl	8009b2c <tcpip_send_msg_wait_sem>
 80089d6:	4603      	mov	r3, r0
 80089d8:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 80089da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d103      	bne.n	80089ea <netconn_apimsg+0x2e>
    return apimsg->err;
 80089e2:	683b      	ldr	r3, [r7, #0]
 80089e4:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80089e8:	e001      	b.n	80089ee <netconn_apimsg+0x32>
  }
  return err;
 80089ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80089ee:	4618      	mov	r0, r3
 80089f0:	3710      	adds	r7, #16
 80089f2:	46bd      	mov	sp, r7
 80089f4:	bd80      	pop	{r7, pc}
	...

080089f8 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 80089f8:	b580      	push	{r7, lr}
 80089fa:	b08c      	sub	sp, #48	; 0x30
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	4603      	mov	r3, r0
 8008a00:	603a      	str	r2, [r7, #0]
 8008a02:	71fb      	strb	r3, [r7, #7]
 8008a04:	460b      	mov	r3, r1
 8008a06:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 8008a08:	79fb      	ldrb	r3, [r7, #7]
 8008a0a:	6839      	ldr	r1, [r7, #0]
 8008a0c:	4618      	mov	r0, r3
 8008a0e:	f000 f9cb 	bl	8008da8 <netconn_alloc>
 8008a12:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (conn != NULL) {
 8008a14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d046      	beq.n	8008aa8 <netconn_new_with_proto_and_callback+0xb0>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 8008a1a:	79bb      	ldrb	r3, [r7, #6]
 8008a1c:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 8008a1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a20:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 8008a22:	f107 0308 	add.w	r3, r7, #8
 8008a26:	4619      	mov	r1, r3
 8008a28:	4822      	ldr	r0, [pc, #136]	; (8008ab4 <netconn_new_with_proto_and_callback+0xbc>)
 8008a2a:	f7ff ffc7 	bl	80089bc <netconn_apimsg>
 8008a2e:	4603      	mov	r3, r0
 8008a30:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (err != ERR_OK) {
 8008a34:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d035      	beq.n	8008aa8 <netconn_new_with_proto_and_callback+0xb0>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 8008a3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a3e:	685b      	ldr	r3, [r3, #4]
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d005      	beq.n	8008a50 <netconn_new_with_proto_and_callback+0x58>
 8008a44:	4b1c      	ldr	r3, [pc, #112]	; (8008ab8 <netconn_new_with_proto_and_callback+0xc0>)
 8008a46:	22a3      	movs	r2, #163	; 0xa3
 8008a48:	491c      	ldr	r1, [pc, #112]	; (8008abc <netconn_new_with_proto_and_callback+0xc4>)
 8008a4a:	481d      	ldr	r0, [pc, #116]	; (8008ac0 <netconn_new_with_proto_and_callback+0xc8>)
 8008a4c:	f006 fab2 	bl	800efb4 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 8008a50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a52:	3310      	adds	r3, #16
 8008a54:	4618      	mov	r0, r3
 8008a56:	f006 f92a 	bl	800ecae <sys_mbox_valid>
 8008a5a:	4603      	mov	r3, r0
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d105      	bne.n	8008a6c <netconn_new_with_proto_and_callback+0x74>
 8008a60:	4b15      	ldr	r3, [pc, #84]	; (8008ab8 <netconn_new_with_proto_and_callback+0xc0>)
 8008a62:	22a4      	movs	r2, #164	; 0xa4
 8008a64:	4917      	ldr	r1, [pc, #92]	; (8008ac4 <netconn_new_with_proto_and_callback+0xcc>)
 8008a66:	4816      	ldr	r0, [pc, #88]	; (8008ac0 <netconn_new_with_proto_and_callback+0xc8>)
 8008a68:	f006 faa4 	bl	800efb4 <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 8008a6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a6e:	330c      	adds	r3, #12
 8008a70:	4618      	mov	r0, r3
 8008a72:	f006 f97c 	bl	800ed6e <sys_sem_valid>
 8008a76:	4603      	mov	r3, r0
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d105      	bne.n	8008a88 <netconn_new_with_proto_and_callback+0x90>
 8008a7c:	4b0e      	ldr	r3, [pc, #56]	; (8008ab8 <netconn_new_with_proto_and_callback+0xc0>)
 8008a7e:	22a9      	movs	r2, #169	; 0xa9
 8008a80:	4911      	ldr	r1, [pc, #68]	; (8008ac8 <netconn_new_with_proto_and_callback+0xd0>)
 8008a82:	480f      	ldr	r0, [pc, #60]	; (8008ac0 <netconn_new_with_proto_and_callback+0xc8>)
 8008a84:	f006 fa96 	bl	800efb4 <iprintf>
      sys_sem_free(&conn->op_completed);
 8008a88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a8a:	330c      	adds	r3, #12
 8008a8c:	4618      	mov	r0, r3
 8008a8e:	f006 f961 	bl	800ed54 <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 8008a92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a94:	3310      	adds	r3, #16
 8008a96:	4618      	mov	r0, r3
 8008a98:	f006 f882 	bl	800eba0 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 8008a9c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008a9e:	2004      	movs	r0, #4
 8008aa0:	f001 fdaa 	bl	800a5f8 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 8008aa4:	2300      	movs	r3, #0
 8008aa6:	e000      	b.n	8008aaa <netconn_new_with_proto_and_callback+0xb2>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 8008aa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8008aaa:	4618      	mov	r0, r3
 8008aac:	3730      	adds	r7, #48	; 0x30
 8008aae:	46bd      	mov	sp, r7
 8008ab0:	bd80      	pop	{r7, pc}
 8008ab2:	bf00      	nop
 8008ab4:	08008d7d 	.word	0x08008d7d
 8008ab8:	0800ffc0 	.word	0x0800ffc0
 8008abc:	0800fff4 	.word	0x0800fff4
 8008ac0:	08010018 	.word	0x08010018
 8008ac4:	08010040 	.word	0x08010040
 8008ac8:	08010058 	.word	0x08010058

08008acc <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 8008acc:	b580      	push	{r7, lr}
 8008ace:	b08c      	sub	sp, #48	; 0x30
 8008ad0:	af00      	add	r7, sp, #0
 8008ad2:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d101      	bne.n	8008ade <netconn_prepare_delete+0x12>
    return ERR_OK;
 8008ada:	2300      	movs	r3, #0
 8008adc:	e012      	b.n	8008b04 <netconn_prepare_delete+0x38>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 8008ae2:	f107 030c 	add.w	r3, r7, #12
 8008ae6:	4619      	mov	r1, r3
 8008ae8:	4808      	ldr	r0, [pc, #32]	; (8008b0c <netconn_prepare_delete+0x40>)
 8008aea:	f7ff ff67 	bl	80089bc <netconn_apimsg>
 8008aee:	4603      	mov	r3, r0
 8008af0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 8008af4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d002      	beq.n	8008b02 <netconn_prepare_delete+0x36>
    return err;
 8008afc:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008b00:	e000      	b.n	8008b04 <netconn_prepare_delete+0x38>
  }
  return ERR_OK;
 8008b02:	2300      	movs	r3, #0
}
 8008b04:	4618      	mov	r0, r3
 8008b06:	3730      	adds	r7, #48	; 0x30
 8008b08:	46bd      	mov	sp, r7
 8008b0a:	bd80      	pop	{r7, pc}
 8008b0c:	08008f35 	.word	0x08008f35

08008b10 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 8008b10:	b580      	push	{r7, lr}
 8008b12:	b084      	sub	sp, #16
 8008b14:	af00      	add	r7, sp, #0
 8008b16:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d101      	bne.n	8008b22 <netconn_delete+0x12>
    return ERR_OK;
 8008b1e:	2300      	movs	r3, #0
 8008b20:	e00d      	b.n	8008b3e <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 8008b22:	6878      	ldr	r0, [r7, #4]
 8008b24:	f7ff ffd2 	bl	8008acc <netconn_prepare_delete>
 8008b28:	4603      	mov	r3, r0
 8008b2a:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 8008b2c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d102      	bne.n	8008b3a <netconn_delete+0x2a>
    netconn_free(conn);
 8008b34:	6878      	ldr	r0, [r7, #4]
 8008b36:	f000 f999 	bl	8008e6c <netconn_free>
  }
  return err;
 8008b3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008b3e:	4618      	mov	r0, r3
 8008b40:	3710      	adds	r7, #16
 8008b42:	46bd      	mov	sp, r7
 8008b44:	bd80      	pop	{r7, pc}
	...

08008b48 <netconn_send>:
 * @param buf a netbuf containing the data to send
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_send(struct netconn *conn, struct netbuf *buf)
{
 8008b48:	b580      	push	{r7, lr}
 8008b4a:	b08c      	sub	sp, #48	; 0x30
 8008b4c:	af00      	add	r7, sp, #0
 8008b4e:	6078      	str	r0, [r7, #4]
 8008b50:	6039      	str	r1, [r7, #0]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_send: invalid conn",  (conn != NULL), return ERR_ARG;);
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d109      	bne.n	8008b6c <netconn_send+0x24>
 8008b58:	4b0e      	ldr	r3, [pc, #56]	; (8008b94 <netconn_send+0x4c>)
 8008b5a:	f240 32b2 	movw	r2, #946	; 0x3b2
 8008b5e:	490e      	ldr	r1, [pc, #56]	; (8008b98 <netconn_send+0x50>)
 8008b60:	480e      	ldr	r0, [pc, #56]	; (8008b9c <netconn_send+0x54>)
 8008b62:	f006 fa27 	bl	800efb4 <iprintf>
 8008b66:	f06f 030f 	mvn.w	r3, #15
 8008b6a:	e00e      	b.n	8008b8a <netconn_send+0x42>

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_send: sending %"U16_F" bytes\n", buf->p->tot_len));

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	60fb      	str	r3, [r7, #12]
  API_MSG_VAR_REF(msg).msg.b = buf;
 8008b70:	683b      	ldr	r3, [r7, #0]
 8008b72:	617b      	str	r3, [r7, #20]
  err = netconn_apimsg(lwip_netconn_do_send, &API_MSG_VAR_REF(msg));
 8008b74:	f107 030c 	add.w	r3, r7, #12
 8008b78:	4619      	mov	r1, r3
 8008b7a:	4809      	ldr	r0, [pc, #36]	; (8008ba0 <netconn_send+0x58>)
 8008b7c:	f7ff ff1e 	bl	80089bc <netconn_apimsg>
 8008b80:	4603      	mov	r3, r0
 8008b82:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8008b86:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	3730      	adds	r7, #48	; 0x30
 8008b8e:	46bd      	mov	sp, r7
 8008b90:	bd80      	pop	{r7, pc}
 8008b92:	bf00      	nop
 8008b94:	0800ffc0 	.word	0x0800ffc0
 8008b98:	080101c8 	.word	0x080101c8
 8008b9c:	08010018 	.word	0x08010018
 8008ba0:	0800905d 	.word	0x0800905d

08008ba4 <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 8008ba4:	b580      	push	{r7, lr}
 8008ba6:	b084      	sub	sp, #16
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d101      	bne.n	8008bb6 <netconn_err+0x12>
    return ERR_OK;
 8008bb2:	2300      	movs	r3, #0
 8008bb4:	e00d      	b.n	8008bd2 <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 8008bb6:	f006 f965 	bl	800ee84 <sys_arch_protect>
 8008bba:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	7a1b      	ldrb	r3, [r3, #8]
 8008bc0:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	2200      	movs	r2, #0
 8008bc6:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 8008bc8:	68f8      	ldr	r0, [r7, #12]
 8008bca:	f006 f969 	bl	800eea0 <sys_arch_unprotect>
  return err;
 8008bce:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8008bd2:	4618      	mov	r0, r3
 8008bd4:	3710      	adds	r7, #16
 8008bd6:	46bd      	mov	sp, r7
 8008bd8:	bd80      	pop	{r7, pc}
	...

08008bdc <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 8008bdc:	b580      	push	{r7, lr}
 8008bde:	b088      	sub	sp, #32
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	60f8      	str	r0, [r7, #12]
 8008be4:	60b9      	str	r1, [r7, #8]
 8008be6:	607a      	str	r2, [r7, #4]
 8008be8:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 8008bea:	68bb      	ldr	r3, [r7, #8]
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d105      	bne.n	8008bfc <recv_udp+0x20>
 8008bf0:	4b34      	ldr	r3, [pc, #208]	; (8008cc4 <recv_udp+0xe8>)
 8008bf2:	22e5      	movs	r2, #229	; 0xe5
 8008bf4:	4934      	ldr	r1, [pc, #208]	; (8008cc8 <recv_udp+0xec>)
 8008bf6:	4835      	ldr	r0, [pc, #212]	; (8008ccc <recv_udp+0xf0>)
 8008bf8:	f006 f9dc 	bl	800efb4 <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d105      	bne.n	8008c0e <recv_udp+0x32>
 8008c02:	4b30      	ldr	r3, [pc, #192]	; (8008cc4 <recv_udp+0xe8>)
 8008c04:	22e6      	movs	r2, #230	; 0xe6
 8008c06:	4932      	ldr	r1, [pc, #200]	; (8008cd0 <recv_udp+0xf4>)
 8008c08:	4830      	ldr	r0, [pc, #192]	; (8008ccc <recv_udp+0xf0>)
 8008c0a:	f006 f9d3 	bl	800efb4 <iprintf>
  conn = (struct netconn *)arg;
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 8008c12:	69fb      	ldr	r3, [r7, #28]
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d103      	bne.n	8008c20 <recv_udp+0x44>
    pbuf_free(p);
 8008c18:	6878      	ldr	r0, [r7, #4]
 8008c1a:	f002 fb2d 	bl	800b278 <pbuf_free>
    return;
 8008c1e:	e04d      	b.n	8008cbc <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 8008c20:	69fb      	ldr	r3, [r7, #28]
 8008c22:	685b      	ldr	r3, [r3, #4]
 8008c24:	68ba      	ldr	r2, [r7, #8]
 8008c26:	429a      	cmp	r2, r3
 8008c28:	d005      	beq.n	8008c36 <recv_udp+0x5a>
 8008c2a:	4b26      	ldr	r3, [pc, #152]	; (8008cc4 <recv_udp+0xe8>)
 8008c2c:	22ee      	movs	r2, #238	; 0xee
 8008c2e:	4929      	ldr	r1, [pc, #164]	; (8008cd4 <recv_udp+0xf8>)
 8008c30:	4826      	ldr	r0, [pc, #152]	; (8008ccc <recv_udp+0xf0>)
 8008c32:	f006 f9bf 	bl	800efb4 <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8008c36:	69fb      	ldr	r3, [r7, #28]
 8008c38:	3310      	adds	r3, #16
 8008c3a:	4618      	mov	r0, r3
 8008c3c:	f006 f837 	bl	800ecae <sys_mbox_valid>
 8008c40:	4603      	mov	r3, r0
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d103      	bne.n	8008c4e <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 8008c46:	6878      	ldr	r0, [r7, #4]
 8008c48:	f002 fb16 	bl	800b278 <pbuf_free>
    return;
 8008c4c:	e036      	b.n	8008cbc <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8008c4e:	2003      	movs	r0, #3
 8008c50:	f001 fc80 	bl	800a554 <memp_malloc>
 8008c54:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 8008c56:	69bb      	ldr	r3, [r7, #24]
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d103      	bne.n	8008c64 <recv_udp+0x88>
    pbuf_free(p);
 8008c5c:	6878      	ldr	r0, [r7, #4]
 8008c5e:	f002 fb0b 	bl	800b278 <pbuf_free>
    return;
 8008c62:	e02b      	b.n	8008cbc <recv_udp+0xe0>
  } else {
    buf->p = p;
 8008c64:	69bb      	ldr	r3, [r7, #24]
 8008c66:	687a      	ldr	r2, [r7, #4]
 8008c68:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 8008c6a:	69bb      	ldr	r3, [r7, #24]
 8008c6c:	687a      	ldr	r2, [r7, #4]
 8008c6e:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 8008c70:	683b      	ldr	r3, [r7, #0]
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d002      	beq.n	8008c7c <recv_udp+0xa0>
 8008c76:	683b      	ldr	r3, [r7, #0]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	e000      	b.n	8008c7e <recv_udp+0xa2>
 8008c7c:	2300      	movs	r3, #0
 8008c7e:	69ba      	ldr	r2, [r7, #24]
 8008c80:	6093      	str	r3, [r2, #8]
    buf->port = port;
 8008c82:	69bb      	ldr	r3, [r7, #24]
 8008c84:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8008c86:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	891b      	ldrh	r3, [r3, #8]
 8008c8c:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 8008c8e:	69fb      	ldr	r3, [r7, #28]
 8008c90:	3310      	adds	r3, #16
 8008c92:	69b9      	ldr	r1, [r7, #24]
 8008c94:	4618      	mov	r0, r3
 8008c96:	f005 ff95 	bl	800ebc4 <sys_mbox_trypost>
 8008c9a:	4603      	mov	r3, r0
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d003      	beq.n	8008ca8 <recv_udp+0xcc>
    netbuf_delete(buf);
 8008ca0:	69b8      	ldr	r0, [r7, #24]
 8008ca2:	f000 fa47 	bl	8009134 <netbuf_delete>
    return;
 8008ca6:	e009      	b.n	8008cbc <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8008ca8:	69fb      	ldr	r3, [r7, #28]
 8008caa:	69db      	ldr	r3, [r3, #28]
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d005      	beq.n	8008cbc <recv_udp+0xe0>
 8008cb0:	69fb      	ldr	r3, [r7, #28]
 8008cb2:	69db      	ldr	r3, [r3, #28]
 8008cb4:	8afa      	ldrh	r2, [r7, #22]
 8008cb6:	2100      	movs	r1, #0
 8008cb8:	69f8      	ldr	r0, [r7, #28]
 8008cba:	4798      	blx	r3
  }
}
 8008cbc:	3720      	adds	r7, #32
 8008cbe:	46bd      	mov	sp, r7
 8008cc0:	bd80      	pop	{r7, pc}
 8008cc2:	bf00      	nop
 8008cc4:	08010264 	.word	0x08010264
 8008cc8:	08010298 	.word	0x08010298
 8008ccc:	080102bc 	.word	0x080102bc
 8008cd0:	080102e4 	.word	0x080102e4
 8008cd4:	08010304 	.word	0x08010304

08008cd8 <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 8008cd8:	b590      	push	{r4, r7, lr}
 8008cda:	b085      	sub	sp, #20
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 8008ce0:	2300      	movs	r3, #0
 8008ce2:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	685b      	ldr	r3, [r3, #4]
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d006      	beq.n	8008cfc <pcb_new+0x24>
 8008cee:	4b1f      	ldr	r3, [pc, #124]	; (8008d6c <pcb_new+0x94>)
 8008cf0:	f240 2265 	movw	r2, #613	; 0x265
 8008cf4:	491e      	ldr	r1, [pc, #120]	; (8008d70 <pcb_new+0x98>)
 8008cf6:	481f      	ldr	r0, [pc, #124]	; (8008d74 <pcb_new+0x9c>)
 8008cf8:	f006 f95c 	bl	800efb4 <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	781b      	ldrb	r3, [r3, #0]
 8008d02:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008d06:	2b20      	cmp	r3, #32
 8008d08:	d120      	bne.n	8008d4c <pcb_new+0x74>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	681c      	ldr	r4, [r3, #0]
 8008d0e:	7bfb      	ldrb	r3, [r7, #15]
 8008d10:	4618      	mov	r0, r3
 8008d12:	f003 faee 	bl	800c2f2 <udp_new_ip_type>
 8008d16:	4603      	mov	r3, r0
 8008d18:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	685b      	ldr	r3, [r3, #4]
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d017      	beq.n	8008d54 <pcb_new+0x7c>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	781b      	ldrb	r3, [r3, #0]
 8008d2a:	2b22      	cmp	r3, #34	; 0x22
 8008d2c:	d104      	bne.n	8008d38 <pcb_new+0x60>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	685b      	ldr	r3, [r3, #4]
 8008d34:	2201      	movs	r2, #1
 8008d36:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	6858      	ldr	r0, [r3, #4]
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	461a      	mov	r2, r3
 8008d44:	490c      	ldr	r1, [pc, #48]	; (8008d78 <pcb_new+0xa0>)
 8008d46:	f003 fa5b 	bl	800c200 <udp_recv>
      }
      break;
 8008d4a:	e003      	b.n	8008d54 <pcb_new+0x7c>
      }
      break;
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	22fa      	movs	r2, #250	; 0xfa
 8008d50:	711a      	strb	r2, [r3, #4]
      return;
 8008d52:	e008      	b.n	8008d66 <pcb_new+0x8e>
      break;
 8008d54:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	685b      	ldr	r3, [r3, #4]
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d102      	bne.n	8008d66 <pcb_new+0x8e>
    msg->err = ERR_MEM;
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	22ff      	movs	r2, #255	; 0xff
 8008d64:	711a      	strb	r2, [r3, #4]
  }
}
 8008d66:	3714      	adds	r7, #20
 8008d68:	46bd      	mov	sp, r7
 8008d6a:	bd90      	pop	{r4, r7, pc}
 8008d6c:	08010264 	.word	0x08010264
 8008d70:	08010324 	.word	0x08010324
 8008d74:	080102bc 	.word	0x080102bc
 8008d78:	08008bdd 	.word	0x08008bdd

08008d7c <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 8008d7c:	b580      	push	{r7, lr}
 8008d7e:	b084      	sub	sp, #16
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	2200      	movs	r2, #0
 8008d8c:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	685b      	ldr	r3, [r3, #4]
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d102      	bne.n	8008d9e <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 8008d98:	68f8      	ldr	r0, [r7, #12]
 8008d9a:	f7ff ff9d 	bl	8008cd8 <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 8008d9e:	bf00      	nop
 8008da0:	3710      	adds	r7, #16
 8008da2:	46bd      	mov	sp, r7
 8008da4:	bd80      	pop	{r7, pc}
	...

08008da8 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 8008da8:	b580      	push	{r7, lr}
 8008daa:	b086      	sub	sp, #24
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	4603      	mov	r3, r0
 8008db0:	6039      	str	r1, [r7, #0]
 8008db2:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 8008db4:	2300      	movs	r3, #0
 8008db6:	75fb      	strb	r3, [r7, #23]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 8008db8:	2004      	movs	r0, #4
 8008dba:	f001 fbcb 	bl	800a554 <memp_malloc>
 8008dbe:	6138      	str	r0, [r7, #16]
  if (conn == NULL) {
 8008dc0:	693b      	ldr	r3, [r7, #16]
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d101      	bne.n	8008dca <netconn_alloc+0x22>
    return NULL;
 8008dc6:	2300      	movs	r3, #0
 8008dc8:	e045      	b.n	8008e56 <netconn_alloc+0xae>
  }

  conn->pending_err = ERR_OK;
 8008dca:	693b      	ldr	r3, [r7, #16]
 8008dcc:	2200      	movs	r2, #0
 8008dce:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 8008dd0:	693b      	ldr	r3, [r7, #16]
 8008dd2:	79fa      	ldrb	r2, [r7, #7]
 8008dd4:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 8008dd6:	693b      	ldr	r3, [r7, #16]
 8008dd8:	2200      	movs	r2, #0
 8008dda:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 8008ddc:	79fb      	ldrb	r3, [r7, #7]
 8008dde:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008de2:	2b20      	cmp	r3, #32
 8008de4:	d10c      	bne.n	8008e00 <netconn_alloc+0x58>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 8008de6:	2306      	movs	r3, #6
 8008de8:	60fb      	str	r3, [r7, #12]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 8008dea:	bf00      	nop
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
      goto free_and_return;
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 8008dec:	693b      	ldr	r3, [r7, #16]
 8008dee:	3310      	adds	r3, #16
 8008df0:	68f9      	ldr	r1, [r7, #12]
 8008df2:	4618      	mov	r0, r3
 8008df4:	f005 feb2 	bl	800eb5c <sys_mbox_new>
 8008df8:	4603      	mov	r3, r0
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d008      	beq.n	8008e10 <netconn_alloc+0x68>
    goto free_and_return;
 8008dfe:	e025      	b.n	8008e4c <netconn_alloc+0xa4>
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 8008e00:	4b17      	ldr	r3, [pc, #92]	; (8008e60 <netconn_alloc+0xb8>)
 8008e02:	f240 22e5 	movw	r2, #741	; 0x2e5
 8008e06:	4917      	ldr	r1, [pc, #92]	; (8008e64 <netconn_alloc+0xbc>)
 8008e08:	4817      	ldr	r0, [pc, #92]	; (8008e68 <netconn_alloc+0xc0>)
 8008e0a:	f006 f8d3 	bl	800efb4 <iprintf>
      goto free_and_return;
 8008e0e:	e01d      	b.n	8008e4c <netconn_alloc+0xa4>
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 8008e10:	693b      	ldr	r3, [r7, #16]
 8008e12:	330c      	adds	r3, #12
 8008e14:	2100      	movs	r1, #0
 8008e16:	4618      	mov	r0, r3
 8008e18:	f005 ff67 	bl	800ecea <sys_sem_new>
 8008e1c:	4603      	mov	r3, r0
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d005      	beq.n	8008e2e <netconn_alloc+0x86>
    sys_mbox_free(&conn->recvmbox);
 8008e22:	693b      	ldr	r3, [r7, #16]
 8008e24:	3310      	adds	r3, #16
 8008e26:	4618      	mov	r0, r3
 8008e28:	f005 feba 	bl	800eba0 <sys_mbox_free>
    goto free_and_return;
 8008e2c:	e00e      	b.n	8008e4c <netconn_alloc+0xa4>
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
#endif
  conn->state        = NETCONN_NONE;
 8008e2e:	693b      	ldr	r3, [r7, #16]
 8008e30:	2200      	movs	r2, #0
 8008e32:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 8008e34:	693b      	ldr	r3, [r7, #16]
 8008e36:	f04f 32ff 	mov.w	r2, #4294967295
 8008e3a:	615a      	str	r2, [r3, #20]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 8008e3c:	693b      	ldr	r3, [r7, #16]
 8008e3e:	683a      	ldr	r2, [r7, #0]
 8008e40:	61da      	str	r2, [r3, #28]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 8008e42:	693b      	ldr	r3, [r7, #16]
 8008e44:	7dfa      	ldrb	r2, [r7, #23]
 8008e46:	761a      	strb	r2, [r3, #24]
  return conn;
 8008e48:	693b      	ldr	r3, [r7, #16]
 8008e4a:	e004      	b.n	8008e56 <netconn_alloc+0xae>
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 8008e4c:	6939      	ldr	r1, [r7, #16]
 8008e4e:	2004      	movs	r0, #4
 8008e50:	f001 fbd2 	bl	800a5f8 <memp_free>
  return NULL;
 8008e54:	2300      	movs	r3, #0
}
 8008e56:	4618      	mov	r0, r3
 8008e58:	3718      	adds	r7, #24
 8008e5a:	46bd      	mov	sp, r7
 8008e5c:	bd80      	pop	{r7, pc}
 8008e5e:	bf00      	nop
 8008e60:	08010264 	.word	0x08010264
 8008e64:	08010344 	.word	0x08010344
 8008e68:	080102bc 	.word	0x080102bc

08008e6c <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 8008e6c:	b580      	push	{r7, lr}
 8008e6e:	b082      	sub	sp, #8
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	685b      	ldr	r3, [r3, #4]
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d006      	beq.n	8008e8a <netconn_free+0x1e>
 8008e7c:	4b13      	ldr	r3, [pc, #76]	; (8008ecc <netconn_free+0x60>)
 8008e7e:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8008e82:	4913      	ldr	r1, [pc, #76]	; (8008ed0 <netconn_free+0x64>)
 8008e84:	4813      	ldr	r0, [pc, #76]	; (8008ed4 <netconn_free+0x68>)
 8008e86:	f006 f895 	bl	800efb4 <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	3310      	adds	r3, #16
 8008e8e:	4618      	mov	r0, r3
 8008e90:	f005 ff0d 	bl	800ecae <sys_mbox_valid>
 8008e94:	4603      	mov	r3, r0
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d006      	beq.n	8008ea8 <netconn_free+0x3c>
 8008e9a:	4b0c      	ldr	r3, [pc, #48]	; (8008ecc <netconn_free+0x60>)
 8008e9c:	f44f 7249 	mov.w	r2, #804	; 0x324
 8008ea0:	490d      	ldr	r1, [pc, #52]	; (8008ed8 <netconn_free+0x6c>)
 8008ea2:	480c      	ldr	r0, [pc, #48]	; (8008ed4 <netconn_free+0x68>)
 8008ea4:	f006 f886 	bl	800efb4 <iprintf>
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	330c      	adds	r3, #12
 8008eac:	4618      	mov	r0, r3
 8008eae:	f005 ff51 	bl	800ed54 <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	330c      	adds	r3, #12
 8008eb6:	4618      	mov	r0, r3
 8008eb8:	f005 ff6a 	bl	800ed90 <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 8008ebc:	6879      	ldr	r1, [r7, #4]
 8008ebe:	2004      	movs	r0, #4
 8008ec0:	f001 fb9a 	bl	800a5f8 <memp_free>
}
 8008ec4:	bf00      	nop
 8008ec6:	3708      	adds	r7, #8
 8008ec8:	46bd      	mov	sp, r7
 8008eca:	bd80      	pop	{r7, pc}
 8008ecc:	08010264 	.word	0x08010264
 8008ed0:	0801036c 	.word	0x0801036c
 8008ed4:	080102bc 	.word	0x080102bc
 8008ed8:	0801039c 	.word	0x0801039c

08008edc <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 8008edc:	b580      	push	{r7, lr}
 8008ede:	b084      	sub	sp, #16
 8008ee0:	af00      	add	r7, sp, #0
 8008ee2:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	3310      	adds	r3, #16
 8008ee8:	4618      	mov	r0, r3
 8008eea:	f005 fee0 	bl	800ecae <sys_mbox_valid>
 8008eee:	4603      	mov	r3, r0
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d01a      	beq.n	8008f2a <netconn_drain+0x4e>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8008ef4:	e003      	b.n	8008efe <netconn_drain+0x22>
            pbuf_free((struct pbuf *)mem);
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	4618      	mov	r0, r3
 8008efa:	f000 f91b 	bl	8009134 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	3310      	adds	r3, #16
 8008f02:	f107 020c 	add.w	r2, r7, #12
 8008f06:	4611      	mov	r1, r2
 8008f08:	4618      	mov	r0, r3
 8008f0a:	f005 feb4 	bl	800ec76 <sys_arch_mbox_tryfetch>
 8008f0e:	4603      	mov	r3, r0
 8008f10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f14:	d1ef      	bne.n	8008ef6 <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	3310      	adds	r3, #16
 8008f1a:	4618      	mov	r0, r3
 8008f1c:	f005 fe40 	bl	800eba0 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	3310      	adds	r3, #16
 8008f24:	4618      	mov	r0, r3
 8008f26:	f005 fed3 	bl	800ecd0 <sys_mbox_set_invalid>
    }
    sys_mbox_free(&conn->acceptmbox);
    sys_mbox_set_invalid(&conn->acceptmbox);
  }
#endif /* LWIP_TCP */
}
 8008f2a:	bf00      	nop
 8008f2c:	3710      	adds	r7, #16
 8008f2e:	46bd      	mov	sp, r7
 8008f30:	bd80      	pop	{r7, pc}
	...

08008f34 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 8008f34:	b580      	push	{r7, lr}
 8008f36:	b084      	sub	sp, #16
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	785b      	ldrb	r3, [r3, #1]
 8008f46:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 8008f48:	7afb      	ldrb	r3, [r7, #11]
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d00d      	beq.n	8008f6a <lwip_netconn_do_delconn+0x36>
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	781b      	ldrb	r3, [r3, #0]
 8008f54:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008f58:	2b10      	cmp	r3, #16
 8008f5a:	d006      	beq.n	8008f6a <lwip_netconn_do_delconn+0x36>
 8008f5c:	4b3b      	ldr	r3, [pc, #236]	; (800904c <lwip_netconn_do_delconn+0x118>)
 8008f5e:	f240 425f 	movw	r2, #1119	; 0x45f
 8008f62:	493b      	ldr	r1, [pc, #236]	; (8009050 <lwip_netconn_do_delconn+0x11c>)
 8008f64:	483b      	ldr	r0, [pc, #236]	; (8009054 <lwip_netconn_do_delconn+0x120>)
 8008f66:	f006 f825 	bl	800efb4 <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 8008f6a:	7afb      	ldrb	r3, [r7, #11]
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d005      	beq.n	8008f7c <lwip_netconn_do_delconn+0x48>
 8008f70:	7afb      	ldrb	r3, [r7, #11]
 8008f72:	2b02      	cmp	r3, #2
 8008f74:	d002      	beq.n	8008f7c <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 8008f76:	7afb      	ldrb	r3, [r7, #11]
 8008f78:	2b03      	cmp	r3, #3
 8008f7a:	d109      	bne.n	8008f90 <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 8008f7c:	7afb      	ldrb	r3, [r7, #11]
 8008f7e:	2b03      	cmp	r3, #3
 8008f80:	d10a      	bne.n	8008f98 <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	7e1b      	ldrb	r3, [r3, #24]
 8008f88:	f003 0304 	and.w	r3, r3, #4
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d103      	bne.n	8008f98 <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	22fb      	movs	r2, #251	; 0xfb
 8008f94:	711a      	strb	r2, [r3, #4]
 8008f96:	e04f      	b.n	8009038 <lwip_netconn_do_delconn+0x104>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 8008f98:	7afb      	ldrb	r3, [r7, #11]
 8008f9a:	2b03      	cmp	r3, #3
 8008f9c:	d10d      	bne.n	8008fba <lwip_netconn_do_delconn+0x86>
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	7e1b      	ldrb	r3, [r3, #24]
 8008fa4:	f003 0304 	and.w	r3, r3, #4
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d106      	bne.n	8008fba <lwip_netconn_do_delconn+0x86>
 8008fac:	4b27      	ldr	r3, [pc, #156]	; (800904c <lwip_netconn_do_delconn+0x118>)
 8008fae:	f240 427b 	movw	r2, #1147	; 0x47b
 8008fb2:	4929      	ldr	r1, [pc, #164]	; (8009058 <lwip_netconn_do_delconn+0x124>)
 8008fb4:	4827      	ldr	r0, [pc, #156]	; (8009054 <lwip_netconn_do_delconn+0x120>)
 8008fb6:	f005 fffd 	bl	800efb4 <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	2200      	movs	r2, #0
 8008fbe:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	4618      	mov	r0, r3
 8008fc6:	f7ff ff89 	bl	8008edc <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	685b      	ldr	r3, [r3, #4]
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d017      	beq.n	8009004 <lwip_netconn_do_delconn+0xd0>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	781b      	ldrb	r3, [r3, #0]
 8008fda:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008fde:	2b20      	cmp	r3, #32
 8008fe0:	d000      	beq.n	8008fe4 <lwip_netconn_do_delconn+0xb0>
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
#endif /* LWIP_TCP */
        default:
          break;
 8008fe2:	e00b      	b.n	8008ffc <lwip_netconn_do_delconn+0xc8>
          msg->conn->pcb.udp->recv_arg = NULL;
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	685b      	ldr	r3, [r3, #4]
 8008fea:	2200      	movs	r2, #0
 8008fec:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	685b      	ldr	r3, [r3, #4]
 8008ff4:	4618      	mov	r0, r3
 8008ff6:	f003 f923 	bl	800c240 <udp_remove>
          break;
 8008ffa:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	2200      	movs	r2, #0
 8009002:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	69db      	ldr	r3, [r3, #28]
 800900a:	2b00      	cmp	r3, #0
 800900c:	d007      	beq.n	800901e <lwip_netconn_do_delconn+0xea>
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	69db      	ldr	r3, [r3, #28]
 8009014:	68fa      	ldr	r2, [r7, #12]
 8009016:	6810      	ldr	r0, [r2, #0]
 8009018:	2200      	movs	r2, #0
 800901a:	2100      	movs	r1, #0
 800901c:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	69db      	ldr	r3, [r3, #28]
 8009024:	2b00      	cmp	r3, #0
 8009026:	d007      	beq.n	8009038 <lwip_netconn_do_delconn+0x104>
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	69db      	ldr	r3, [r3, #28]
 800902e:	68fa      	ldr	r2, [r7, #12]
 8009030:	6810      	ldr	r0, [r2, #0]
 8009032:	2200      	movs	r2, #0
 8009034:	2102      	movs	r1, #2
 8009036:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	330c      	adds	r3, #12
 800903e:	4618      	mov	r0, r3
 8009040:	f005 fe95 	bl	800ed6e <sys_sem_valid>
    TCPIP_APIMSG_ACK(msg);
  }
}
 8009044:	bf00      	nop
 8009046:	3710      	adds	r7, #16
 8009048:	46bd      	mov	sp, r7
 800904a:	bd80      	pop	{r7, pc}
 800904c:	08010264 	.word	0x08010264
 8009050:	080103d8 	.word	0x080103d8
 8009054:	080102bc 	.word	0x080102bc
 8009058:	080103ec 	.word	0x080103ec

0800905c <lwip_netconn_do_send>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_send(void *m)
{
 800905c:	b580      	push	{r7, lr}
 800905e:	b084      	sub	sp, #16
 8009060:	af00      	add	r7, sp, #0
 8009062:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 8009068:	68bb      	ldr	r3, [r7, #8]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	4618      	mov	r0, r3
 800906e:	f7ff fd99 	bl	8008ba4 <netconn_err>
 8009072:	4603      	mov	r3, r0
 8009074:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 8009076:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800907a:	2b00      	cmp	r3, #0
 800907c:	d135      	bne.n	80090ea <lwip_netconn_do_send+0x8e>
    if (msg->conn->pcb.tcp != NULL) {
 800907e:	68bb      	ldr	r3, [r7, #8]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	685b      	ldr	r3, [r3, #4]
 8009084:	2b00      	cmp	r3, #0
 8009086:	d02e      	beq.n	80090e6 <lwip_netconn_do_send+0x8a>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8009088:	68bb      	ldr	r3, [r7, #8]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	781b      	ldrb	r3, [r3, #0]
 800908e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009092:	2b20      	cmp	r3, #32
 8009094:	d123      	bne.n	80090de <lwip_netconn_do_send+0x82>
            err = udp_sendto_chksum(msg->conn->pcb.udp, msg->msg.b->p,
                                    &msg->msg.b->addr, msg->msg.b->port,
                                    msg->msg.b->flags & NETBUF_FLAG_CHKSUM, msg->msg.b->toport_chksum);
          }
#else /* LWIP_CHECKSUM_ON_COPY */
          if (ip_addr_isany_val(msg->msg.b->addr) || IP_IS_ANY_TYPE_VAL(msg->msg.b->addr)) {
 8009096:	68bb      	ldr	r3, [r7, #8]
 8009098:	689b      	ldr	r3, [r3, #8]
 800909a:	689b      	ldr	r3, [r3, #8]
 800909c:	2b00      	cmp	r3, #0
 800909e:	d10c      	bne.n	80090ba <lwip_netconn_do_send+0x5e>
            err = udp_send(msg->conn->pcb.udp, msg->msg.b->p);
 80090a0:	68bb      	ldr	r3, [r7, #8]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	685a      	ldr	r2, [r3, #4]
 80090a6:	68bb      	ldr	r3, [r7, #8]
 80090a8:	689b      	ldr	r3, [r3, #8]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	4619      	mov	r1, r3
 80090ae:	4610      	mov	r0, r2
 80090b0:	f002 fe34 	bl	800bd1c <udp_send>
 80090b4:	4603      	mov	r3, r0
 80090b6:	73fb      	strb	r3, [r7, #15]
          } else {
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
          }
#endif /* LWIP_CHECKSUM_ON_COPY */
          break;
 80090b8:	e017      	b.n	80090ea <lwip_netconn_do_send+0x8e>
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
 80090ba:	68bb      	ldr	r3, [r7, #8]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	6858      	ldr	r0, [r3, #4]
 80090c0:	68bb      	ldr	r3, [r7, #8]
 80090c2:	689b      	ldr	r3, [r3, #8]
 80090c4:	6819      	ldr	r1, [r3, #0]
 80090c6:	68bb      	ldr	r3, [r7, #8]
 80090c8:	689b      	ldr	r3, [r3, #8]
 80090ca:	f103 0208 	add.w	r2, r3, #8
 80090ce:	68bb      	ldr	r3, [r7, #8]
 80090d0:	689b      	ldr	r3, [r3, #8]
 80090d2:	899b      	ldrh	r3, [r3, #12]
 80090d4:	f002 fe56 	bl	800bd84 <udp_sendto>
 80090d8:	4603      	mov	r3, r0
 80090da:	73fb      	strb	r3, [r7, #15]
          break;
 80090dc:	e005      	b.n	80090ea <lwip_netconn_do_send+0x8e>
#endif /* LWIP_UDP */
        default:
          err = ERR_CONN;
 80090de:	23f5      	movs	r3, #245	; 0xf5
 80090e0:	73fb      	strb	r3, [r7, #15]
          break;
 80090e2:	bf00      	nop
 80090e4:	e001      	b.n	80090ea <lwip_netconn_do_send+0x8e>
      }
    } else {
      err = ERR_CONN;
 80090e6:	23f5      	movs	r3, #245	; 0xf5
 80090e8:	73fb      	strb	r3, [r7, #15]
    }
  }
  msg->err = err;
 80090ea:	68bb      	ldr	r3, [r7, #8]
 80090ec:	7bfa      	ldrb	r2, [r7, #15]
 80090ee:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 80090f0:	bf00      	nop
 80090f2:	3710      	adds	r7, #16
 80090f4:	46bd      	mov	sp, r7
 80090f6:	bd80      	pop	{r7, pc}

080090f8 <err_to_errno>:
  EIO            /* ERR_ARG        -16     Illegal argument.        */
};

int
err_to_errno(err_t err)
{
 80090f8:	b480      	push	{r7}
 80090fa:	b083      	sub	sp, #12
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	4603      	mov	r3, r0
 8009100:	71fb      	strb	r3, [r7, #7]
  if ((err > 0) || (-err >= (err_t)LWIP_ARRAYSIZE(err_to_errno_table))) {
 8009102:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009106:	2b00      	cmp	r3, #0
 8009108:	dc04      	bgt.n	8009114 <err_to_errno+0x1c>
 800910a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800910e:	425b      	negs	r3, r3
 8009110:	2b10      	cmp	r3, #16
 8009112:	dd01      	ble.n	8009118 <err_to_errno+0x20>
    return EIO;
 8009114:	2305      	movs	r3, #5
 8009116:	e005      	b.n	8009124 <err_to_errno+0x2c>
  }
  return err_to_errno_table[-err];
 8009118:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800911c:	425b      	negs	r3, r3
 800911e:	4a04      	ldr	r2, [pc, #16]	; (8009130 <err_to_errno+0x38>)
 8009120:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8009124:	4618      	mov	r0, r3
 8009126:	370c      	adds	r7, #12
 8009128:	46bd      	mov	sp, r7
 800912a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800912e:	4770      	bx	lr
 8009130:	08011fb0 	.word	0x08011fb0

08009134 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 8009134:	b580      	push	{r7, lr}
 8009136:	b082      	sub	sp, #8
 8009138:	af00      	add	r7, sp, #0
 800913a:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	2b00      	cmp	r3, #0
 8009140:	d013      	beq.n	800916a <netbuf_delete+0x36>
    if (buf->p != NULL) {
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	2b00      	cmp	r3, #0
 8009148:	d00b      	beq.n	8009162 <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	4618      	mov	r0, r3
 8009150:	f002 f892 	bl	800b278 <pbuf_free>
      buf->p = buf->ptr = NULL;
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	2200      	movs	r2, #0
 8009158:	605a      	str	r2, [r3, #4]
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	685a      	ldr	r2, [r3, #4]
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 8009162:	6879      	ldr	r1, [r7, #4]
 8009164:	2003      	movs	r0, #3
 8009166:	f001 fa47 	bl	800a5f8 <memp_free>
  }
}
 800916a:	bf00      	nop
 800916c:	3708      	adds	r7, #8
 800916e:	46bd      	mov	sp, r7
 8009170:	bd80      	pop	{r7, pc}
	...

08009174 <netbuf_free>:
 *
 * @param buf pointer to the netbuf which contains the packet buffer to free
 */
void
netbuf_free(struct netbuf *buf)
{
 8009174:	b580      	push	{r7, lr}
 8009176:	b082      	sub	sp, #8
 8009178:	af00      	add	r7, sp, #0
 800917a:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("netbuf_free: invalid buf", (buf != NULL), return;);
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	2b00      	cmp	r3, #0
 8009180:	d106      	bne.n	8009190 <netbuf_free+0x1c>
 8009182:	4b0d      	ldr	r3, [pc, #52]	; (80091b8 <netbuf_free+0x44>)
 8009184:	2281      	movs	r2, #129	; 0x81
 8009186:	490d      	ldr	r1, [pc, #52]	; (80091bc <netbuf_free+0x48>)
 8009188:	480d      	ldr	r0, [pc, #52]	; (80091c0 <netbuf_free+0x4c>)
 800918a:	f005 ff13 	bl	800efb4 <iprintf>
 800918e:	e00f      	b.n	80091b0 <netbuf_free+0x3c>
  if (buf->p != NULL) {
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	2b00      	cmp	r3, #0
 8009196:	d004      	beq.n	80091a2 <netbuf_free+0x2e>
    pbuf_free(buf->p);
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	4618      	mov	r0, r3
 800919e:	f002 f86b 	bl	800b278 <pbuf_free>
  }
  buf->p = buf->ptr = NULL;
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	2200      	movs	r2, #0
 80091a6:	605a      	str	r2, [r3, #4]
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	685a      	ldr	r2, [r3, #4]
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	601a      	str	r2, [r3, #0]
#if LWIP_CHECKSUM_ON_COPY
  buf->flags = 0;
  buf->toport_chksum = 0;
#endif /* LWIP_CHECKSUM_ON_COPY */
}
 80091b0:	3708      	adds	r7, #8
 80091b2:	46bd      	mov	sp, r7
 80091b4:	bd80      	pop	{r7, pc}
 80091b6:	bf00      	nop
 80091b8:	0801043c 	.word	0x0801043c
 80091bc:	080104d8 	.word	0x080104d8
 80091c0:	0801048c 	.word	0x0801048c

080091c4 <netbuf_ref>:
 * @return ERR_OK if data is referenced
 *         ERR_MEM if data couldn't be referenced due to lack of memory
 */
err_t
netbuf_ref(struct netbuf *buf, const void *dataptr, u16_t size)
{
 80091c4:	b580      	push	{r7, lr}
 80091c6:	b084      	sub	sp, #16
 80091c8:	af00      	add	r7, sp, #0
 80091ca:	60f8      	str	r0, [r7, #12]
 80091cc:	60b9      	str	r1, [r7, #8]
 80091ce:	4613      	mov	r3, r2
 80091d0:	80fb      	strh	r3, [r7, #6]
  LWIP_ERROR("netbuf_ref: invalid buf", (buf != NULL), return ERR_ARG;);
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d108      	bne.n	80091ea <netbuf_ref+0x26>
 80091d8:	4b1c      	ldr	r3, [pc, #112]	; (800924c <netbuf_ref+0x88>)
 80091da:	2299      	movs	r2, #153	; 0x99
 80091dc:	491c      	ldr	r1, [pc, #112]	; (8009250 <netbuf_ref+0x8c>)
 80091de:	481d      	ldr	r0, [pc, #116]	; (8009254 <netbuf_ref+0x90>)
 80091e0:	f005 fee8 	bl	800efb4 <iprintf>
 80091e4:	f06f 030f 	mvn.w	r3, #15
 80091e8:	e02b      	b.n	8009242 <netbuf_ref+0x7e>
  if (buf->p != NULL) {
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d004      	beq.n	80091fc <netbuf_ref+0x38>
    pbuf_free(buf->p);
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	4618      	mov	r0, r3
 80091f8:	f002 f83e 	bl	800b278 <pbuf_free>
  }
  buf->p = pbuf_alloc(PBUF_TRANSPORT, 0, PBUF_REF);
 80091fc:	2241      	movs	r2, #65	; 0x41
 80091fe:	2100      	movs	r1, #0
 8009200:	2036      	movs	r0, #54	; 0x36
 8009202:	f001 fd5b 	bl	800acbc <pbuf_alloc>
 8009206:	4602      	mov	r2, r0
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	601a      	str	r2, [r3, #0]
  if (buf->p == NULL) {
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	2b00      	cmp	r3, #0
 8009212:	d105      	bne.n	8009220 <netbuf_ref+0x5c>
    buf->ptr = NULL;
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	2200      	movs	r2, #0
 8009218:	605a      	str	r2, [r3, #4]
    return ERR_MEM;
 800921a:	f04f 33ff 	mov.w	r3, #4294967295
 800921e:	e010      	b.n	8009242 <netbuf_ref+0x7e>
  }
  ((struct pbuf_rom *)buf->p)->payload = dataptr;
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	68ba      	ldr	r2, [r7, #8]
 8009226:	605a      	str	r2, [r3, #4]
  buf->p->len = buf->p->tot_len = size;
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	88fa      	ldrh	r2, [r7, #6]
 800922e:	811a      	strh	r2, [r3, #8]
 8009230:	68fa      	ldr	r2, [r7, #12]
 8009232:	6812      	ldr	r2, [r2, #0]
 8009234:	891b      	ldrh	r3, [r3, #8]
 8009236:	8153      	strh	r3, [r2, #10]
  buf->ptr = buf->p;
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	681a      	ldr	r2, [r3, #0]
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	605a      	str	r2, [r3, #4]
  return ERR_OK;
 8009240:	2300      	movs	r3, #0
}
 8009242:	4618      	mov	r0, r3
 8009244:	3710      	adds	r7, #16
 8009246:	46bd      	mov	sp, r7
 8009248:	bd80      	pop	{r7, pc}
 800924a:	bf00      	nop
 800924c:	0801043c 	.word	0x0801043c
 8009250:	080104f4 	.word	0x080104f4
 8009254:	0801048c 	.word	0x0801048c

08009258 <tryget_socket_unconn_nouse>:
#endif /* LWIP_NETCONN_FULLDUPLEX */

/* Translate a socket 'int' into a pointer (only fails if the index is invalid) */
static struct lwip_sock *
tryget_socket_unconn_nouse(int fd)
{
 8009258:	b480      	push	{r7}
 800925a:	b085      	sub	sp, #20
 800925c:	af00      	add	r7, sp, #0
 800925e:	6078      	str	r0, [r7, #4]
  int s = fd - LWIP_SOCKET_OFFSET;
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	60fb      	str	r3, [r7, #12]
  if ((s < 0) || (s >= NUM_SOCKETS)) {
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	2b00      	cmp	r3, #0
 8009268:	db02      	blt.n	8009270 <tryget_socket_unconn_nouse+0x18>
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	2b03      	cmp	r3, #3
 800926e:	dd01      	ble.n	8009274 <tryget_socket_unconn_nouse+0x1c>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("tryget_socket_unconn(%d): invalid\n", fd));
    return NULL;
 8009270:	2300      	movs	r3, #0
 8009272:	e003      	b.n	800927c <tryget_socket_unconn_nouse+0x24>
  }
  return &sockets[s];
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	011b      	lsls	r3, r3, #4
 8009278:	4a03      	ldr	r2, [pc, #12]	; (8009288 <tryget_socket_unconn_nouse+0x30>)
 800927a:	4413      	add	r3, r2
}
 800927c:	4618      	mov	r0, r3
 800927e:	3714      	adds	r7, #20
 8009280:	46bd      	mov	sp, r7
 8009282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009286:	4770      	bx	lr
 8009288:	20004718 	.word	0x20004718

0800928c <tryget_socket_unconn>:
}

/* Translate a socket 'int' into a pointer (only fails if the index is invalid) */
static struct lwip_sock *
tryget_socket_unconn(int fd)
{
 800928c:	b580      	push	{r7, lr}
 800928e:	b084      	sub	sp, #16
 8009290:	af00      	add	r7, sp, #0
 8009292:	6078      	str	r0, [r7, #4]
  struct lwip_sock *ret = tryget_socket_unconn_nouse(fd);
 8009294:	6878      	ldr	r0, [r7, #4]
 8009296:	f7ff ffdf 	bl	8009258 <tryget_socket_unconn_nouse>
 800929a:	60f8      	str	r0, [r7, #12]
  if (ret != NULL) {
    if (!sock_inc_used(ret)) {
      return NULL;
    }
  }
  return ret;
 800929c:	68fb      	ldr	r3, [r7, #12]
}
 800929e:	4618      	mov	r0, r3
 80092a0:	3710      	adds	r7, #16
 80092a2:	46bd      	mov	sp, r7
 80092a4:	bd80      	pop	{r7, pc}

080092a6 <tryget_socket>:
 * @param fd externally used socket index
 * @return struct lwip_sock for the socket or NULL if not found
 */
static struct lwip_sock *
tryget_socket(int fd)
{
 80092a6:	b580      	push	{r7, lr}
 80092a8:	b084      	sub	sp, #16
 80092aa:	af00      	add	r7, sp, #0
 80092ac:	6078      	str	r0, [r7, #4]
  struct lwip_sock *sock = tryget_socket_unconn(fd);
 80092ae:	6878      	ldr	r0, [r7, #4]
 80092b0:	f7ff ffec 	bl	800928c <tryget_socket_unconn>
 80092b4:	60f8      	str	r0, [r7, #12]
  if (sock != NULL) {
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d005      	beq.n	80092c8 <tryget_socket+0x22>
    if (sock->conn) {
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d001      	beq.n	80092c8 <tryget_socket+0x22>
      return sock;
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	e000      	b.n	80092ca <tryget_socket+0x24>
    }
    done_socket(sock);
  }
  return NULL;
 80092c8:	2300      	movs	r3, #0
}
 80092ca:	4618      	mov	r0, r3
 80092cc:	3710      	adds	r7, #16
 80092ce:	46bd      	mov	sp, r7
 80092d0:	bd80      	pop	{r7, pc}
	...

080092d4 <get_socket>:
 * @param fd externally used socket index
 * @return struct lwip_sock for the socket or NULL if not found
 */
static struct lwip_sock *
get_socket(int fd)
{
 80092d4:	b580      	push	{r7, lr}
 80092d6:	b084      	sub	sp, #16
 80092d8:	af00      	add	r7, sp, #0
 80092da:	6078      	str	r0, [r7, #4]
  struct lwip_sock *sock = tryget_socket(fd);
 80092dc:	6878      	ldr	r0, [r7, #4]
 80092de:	f7ff ffe2 	bl	80092a6 <tryget_socket>
 80092e2:	60f8      	str	r0, [r7, #12]
  if (!sock) {
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d104      	bne.n	80092f4 <get_socket+0x20>
    if ((fd < LWIP_SOCKET_OFFSET) || (fd >= (LWIP_SOCKET_OFFSET + NUM_SOCKETS))) {
      LWIP_DEBUGF(SOCKETS_DEBUG, ("get_socket(%d): invalid\n", fd));
    }
    set_errno(EBADF);
 80092ea:	4b05      	ldr	r3, [pc, #20]	; (8009300 <get_socket+0x2c>)
 80092ec:	2209      	movs	r2, #9
 80092ee:	601a      	str	r2, [r3, #0]
    return NULL;
 80092f0:	2300      	movs	r3, #0
 80092f2:	e000      	b.n	80092f6 <get_socket+0x22>
  }
  return sock;
 80092f4:	68fb      	ldr	r3, [r7, #12]
}
 80092f6:	4618      	mov	r0, r3
 80092f8:	3710      	adds	r7, #16
 80092fa:	46bd      	mov	sp, r7
 80092fc:	bd80      	pop	{r7, pc}
 80092fe:	bf00      	nop
 8009300:	2000ceb0 	.word	0x2000ceb0

08009304 <alloc_socket>:
 *                 0 if socket has been created by socket()
 * @return the index of the new socket; -1 on error
 */
static int
alloc_socket(struct netconn *newconn, int accepted)
{
 8009304:	b580      	push	{r7, lr}
 8009306:	b084      	sub	sp, #16
 8009308:	af00      	add	r7, sp, #0
 800930a:	6078      	str	r0, [r7, #4]
 800930c:	6039      	str	r1, [r7, #0]
  int i;
  SYS_ARCH_DECL_PROTECT(lev);
  LWIP_UNUSED_ARG(accepted);

  /* allocate a new socket identifier */
  for (i = 0; i < NUM_SOCKETS; ++i) {
 800930e:	2300      	movs	r3, #0
 8009310:	60fb      	str	r3, [r7, #12]
 8009312:	e052      	b.n	80093ba <alloc_socket+0xb6>
    /* Protect socket array */
    SYS_ARCH_PROTECT(lev);
 8009314:	f005 fdb6 	bl	800ee84 <sys_arch_protect>
 8009318:	60b8      	str	r0, [r7, #8]
    if (!sockets[i].conn) {
 800931a:	4a2c      	ldr	r2, [pc, #176]	; (80093cc <alloc_socket+0xc8>)
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	011b      	lsls	r3, r3, #4
 8009320:	4413      	add	r3, r2
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	2b00      	cmp	r3, #0
 8009326:	d142      	bne.n	80093ae <alloc_socket+0xaa>
        continue;
      }
      sockets[i].fd_used    = 1;
      sockets[i].fd_free_pending = 0;
#endif
      sockets[i].conn       = newconn;
 8009328:	4a28      	ldr	r2, [pc, #160]	; (80093cc <alloc_socket+0xc8>)
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	011b      	lsls	r3, r3, #4
 800932e:	4413      	add	r3, r2
 8009330:	687a      	ldr	r2, [r7, #4]
 8009332:	601a      	str	r2, [r3, #0]
      /* The socket is not yet known to anyone, so no need to protect
         after having marked it as used. */
      SYS_ARCH_UNPROTECT(lev);
 8009334:	68b8      	ldr	r0, [r7, #8]
 8009336:	f005 fdb3 	bl	800eea0 <sys_arch_unprotect>
      sockets[i].lastdata.pbuf = NULL;
 800933a:	4a24      	ldr	r2, [pc, #144]	; (80093cc <alloc_socket+0xc8>)
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	011b      	lsls	r3, r3, #4
 8009340:	4413      	add	r3, r2
 8009342:	3304      	adds	r3, #4
 8009344:	2200      	movs	r2, #0
 8009346:	601a      	str	r2, [r3, #0]
#if LWIP_SOCKET_SELECT || LWIP_SOCKET_POLL
      LWIP_ASSERT("sockets[i].select_waiting == 0", sockets[i].select_waiting == 0);
 8009348:	4a20      	ldr	r2, [pc, #128]	; (80093cc <alloc_socket+0xc8>)
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	011b      	lsls	r3, r3, #4
 800934e:	4413      	add	r3, r2
 8009350:	330e      	adds	r3, #14
 8009352:	781b      	ldrb	r3, [r3, #0]
 8009354:	2b00      	cmp	r3, #0
 8009356:	d006      	beq.n	8009366 <alloc_socket+0x62>
 8009358:	4b1d      	ldr	r3, [pc, #116]	; (80093d0 <alloc_socket+0xcc>)
 800935a:	f240 220e 	movw	r2, #526	; 0x20e
 800935e:	491d      	ldr	r1, [pc, #116]	; (80093d4 <alloc_socket+0xd0>)
 8009360:	481d      	ldr	r0, [pc, #116]	; (80093d8 <alloc_socket+0xd4>)
 8009362:	f005 fe27 	bl	800efb4 <iprintf>
      sockets[i].rcvevent   = 0;
 8009366:	4a19      	ldr	r2, [pc, #100]	; (80093cc <alloc_socket+0xc8>)
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	011b      	lsls	r3, r3, #4
 800936c:	4413      	add	r3, r2
 800936e:	3308      	adds	r3, #8
 8009370:	2200      	movs	r2, #0
 8009372:	801a      	strh	r2, [r3, #0]
      /* TCP sendbuf is empty, but the socket is not yet writable until connected
       * (unless it has been created by accept()). */
      sockets[i].sendevent  = (NETCONNTYPE_GROUP(newconn->type) == NETCONN_TCP ? (accepted != 0) : 1);
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	781b      	ldrb	r3, [r3, #0]
 8009378:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800937c:	2b10      	cmp	r3, #16
 800937e:	d102      	bne.n	8009386 <alloc_socket+0x82>
 8009380:	683b      	ldr	r3, [r7, #0]
 8009382:	2b00      	cmp	r3, #0
 8009384:	d001      	beq.n	800938a <alloc_socket+0x86>
 8009386:	2301      	movs	r3, #1
 8009388:	e000      	b.n	800938c <alloc_socket+0x88>
 800938a:	2300      	movs	r3, #0
 800938c:	b299      	uxth	r1, r3
 800938e:	4a0f      	ldr	r2, [pc, #60]	; (80093cc <alloc_socket+0xc8>)
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	011b      	lsls	r3, r3, #4
 8009394:	4413      	add	r3, r2
 8009396:	330a      	adds	r3, #10
 8009398:	460a      	mov	r2, r1
 800939a:	801a      	strh	r2, [r3, #0]
      sockets[i].errevent   = 0;
 800939c:	4a0b      	ldr	r2, [pc, #44]	; (80093cc <alloc_socket+0xc8>)
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	011b      	lsls	r3, r3, #4
 80093a2:	4413      	add	r3, r2
 80093a4:	330c      	adds	r3, #12
 80093a6:	2200      	movs	r2, #0
 80093a8:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_SOCKET_SELECT || LWIP_SOCKET_POLL */
      return i + LWIP_SOCKET_OFFSET;
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	e00a      	b.n	80093c4 <alloc_socket+0xc0>
    }
    SYS_ARCH_UNPROTECT(lev);
 80093ae:	68b8      	ldr	r0, [r7, #8]
 80093b0:	f005 fd76 	bl	800eea0 <sys_arch_unprotect>
  for (i = 0; i < NUM_SOCKETS; ++i) {
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	3301      	adds	r3, #1
 80093b8:	60fb      	str	r3, [r7, #12]
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	2b03      	cmp	r3, #3
 80093be:	dda9      	ble.n	8009314 <alloc_socket+0x10>
  }
  return -1;
 80093c0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80093c4:	4618      	mov	r0, r3
 80093c6:	3710      	adds	r7, #16
 80093c8:	46bd      	mov	sp, r7
 80093ca:	bd80      	pop	{r7, pc}
 80093cc:	20004718 	.word	0x20004718
 80093d0:	080105d4 	.word	0x080105d4
 80093d4:	08010608 	.word	0x08010608
 80093d8:	08010628 	.word	0x08010628

080093dc <lwip_sendto>:
}

ssize_t
lwip_sendto(int s, const void *data, size_t size, int flags,
            const struct sockaddr *to, socklen_t tolen)
{
 80093dc:	b580      	push	{r7, lr}
 80093de:	b090      	sub	sp, #64	; 0x40
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	60f8      	str	r0, [r7, #12]
 80093e4:	60b9      	str	r1, [r7, #8]
 80093e6:	607a      	str	r2, [r7, #4]
 80093e8:	603b      	str	r3, [r7, #0]
  err_t err;
  u16_t short_size;
  u16_t remote_port;
  struct netbuf buf;

  sock = get_socket(s);
 80093ea:	68f8      	ldr	r0, [r7, #12]
 80093ec:	f7ff ff72 	bl	80092d4 <get_socket>
 80093f0:	63b8      	str	r0, [r7, #56]	; 0x38
  if (!sock) {
 80093f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d102      	bne.n	80093fe <lwip_sendto+0x22>
    return -1;
 80093f8:	f04f 33ff 	mov.w	r3, #4294967295
 80093fc:	e099      	b.n	8009532 <lwip_sendto+0x156>
  }

  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
 80093fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	781b      	ldrb	r3, [r3, #0]
 8009404:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009408:	2b10      	cmp	r3, #16
 800940a:	d10d      	bne.n	8009428 <lwip_sendto+0x4c>
#if LWIP_TCP
    done_socket(sock);
    return lwip_send(s, data, size, flags);
#else /* LWIP_TCP */
    LWIP_UNUSED_ARG(flags);
    sock_set_errno(sock, err_to_errno(ERR_ARG));
 800940c:	f06f 000f 	mvn.w	r0, #15
 8009410:	f7ff fe72 	bl	80090f8 <err_to_errno>
 8009414:	6278      	str	r0, [r7, #36]	; 0x24
 8009416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009418:	2b00      	cmp	r3, #0
 800941a:	d002      	beq.n	8009422 <lwip_sendto+0x46>
 800941c:	4a47      	ldr	r2, [pc, #284]	; (800953c <lwip_sendto+0x160>)
 800941e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009420:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 8009422:	f04f 33ff 	mov.w	r3, #4294967295
 8009426:	e084      	b.n	8009532 <lwip_sendto+0x156>
#endif /* LWIP_TCP */
  }

  if (size > LWIP_MIN(0xFFFF, SSIZE_MAX)) {
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800942e:	d30a      	bcc.n	8009446 <lwip_sendto+0x6a>
    /* cannot fit into one datagram (at least for us) */
    sock_set_errno(sock, EMSGSIZE);
 8009430:	235a      	movs	r3, #90	; 0x5a
 8009432:	62bb      	str	r3, [r7, #40]	; 0x28
 8009434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009436:	2b00      	cmp	r3, #0
 8009438:	d002      	beq.n	8009440 <lwip_sendto+0x64>
 800943a:	4a40      	ldr	r2, [pc, #256]	; (800953c <lwip_sendto+0x160>)
 800943c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800943e:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 8009440:	f04f 33ff 	mov.w	r3, #4294967295
 8009444:	e075      	b.n	8009532 <lwip_sendto+0x156>
  }
  short_size = (u16_t)size;
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	86fb      	strh	r3, [r7, #54]	; 0x36
  LWIP_ERROR("lwip_sendto: invalid address", (((to == NULL) && (tolen == 0)) ||
 800944a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800944c:	2b00      	cmp	r3, #0
 800944e:	d102      	bne.n	8009456 <lwip_sendto+0x7a>
 8009450:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009452:	2b00      	cmp	r3, #0
 8009454:	d023      	beq.n	800949e <lwip_sendto+0xc2>
 8009456:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009458:	2b10      	cmp	r3, #16
 800945a:	d10b      	bne.n	8009474 <lwip_sendto+0x98>
 800945c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800945e:	2b00      	cmp	r3, #0
 8009460:	d008      	beq.n	8009474 <lwip_sendto+0x98>
 8009462:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009464:	785b      	ldrb	r3, [r3, #1]
 8009466:	2b02      	cmp	r3, #2
 8009468:	d104      	bne.n	8009474 <lwip_sendto+0x98>
 800946a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800946c:	f003 0303 	and.w	r3, r3, #3
 8009470:	2b00      	cmp	r3, #0
 8009472:	d014      	beq.n	800949e <lwip_sendto+0xc2>
 8009474:	4b32      	ldr	r3, [pc, #200]	; (8009540 <lwip_sendto+0x164>)
 8009476:	f240 6255 	movw	r2, #1621	; 0x655
 800947a:	4932      	ldr	r1, [pc, #200]	; (8009544 <lwip_sendto+0x168>)
 800947c:	4832      	ldr	r0, [pc, #200]	; (8009548 <lwip_sendto+0x16c>)
 800947e:	f005 fd99 	bl	800efb4 <iprintf>
 8009482:	f06f 000f 	mvn.w	r0, #15
 8009486:	f7ff fe37 	bl	80090f8 <err_to_errno>
 800948a:	6338      	str	r0, [r7, #48]	; 0x30
 800948c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800948e:	2b00      	cmp	r3, #0
 8009490:	d002      	beq.n	8009498 <lwip_sendto+0xbc>
 8009492:	4a2a      	ldr	r2, [pc, #168]	; (800953c <lwip_sendto+0x160>)
 8009494:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009496:	6013      	str	r3, [r2, #0]
 8009498:	f04f 33ff 	mov.w	r3, #4294967295
 800949c:	e049      	b.n	8009532 <lwip_sendto+0x156>
              ((to != NULL) && (IS_SOCK_ADDR_TYPE_VALID(to) && IS_SOCK_ADDR_ALIGNED(to))))),
             sock_set_errno(sock, err_to_errno(ERR_ARG)); done_socket(sock); return -1;);
  LWIP_UNUSED_ARG(tolen);

  /* initialize a buffer */
  buf.p = buf.ptr = NULL;
 800949e:	2300      	movs	r3, #0
 80094a0:	61bb      	str	r3, [r7, #24]
 80094a2:	69bb      	ldr	r3, [r7, #24]
 80094a4:	617b      	str	r3, [r7, #20]
#if LWIP_CHECKSUM_ON_COPY
  buf.flags = 0;
#endif /* LWIP_CHECKSUM_ON_COPY */
  if (to) {
 80094a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d00a      	beq.n	80094c2 <lwip_sendto+0xe6>
    SOCKADDR_TO_IPADDR_PORT(to, &buf.addr, remote_port);
 80094ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80094ae:	685b      	ldr	r3, [r3, #4]
 80094b0:	61fb      	str	r3, [r7, #28]
 80094b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80094b4:	885b      	ldrh	r3, [r3, #2]
 80094b6:	4618      	mov	r0, r3
 80094b8:	f000 fb98 	bl	8009bec <lwip_htons>
 80094bc:	4603      	mov	r3, r0
 80094be:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80094c0:	e003      	b.n	80094ca <lwip_sendto+0xee>
  } else {
    remote_port = 0;
 80094c2:	2300      	movs	r3, #0
 80094c4:	87bb      	strh	r3, [r7, #60]	; 0x3c
    ip_addr_set_any(NETCONNTYPE_ISIPV6(netconn_type(sock->conn)), &buf.addr);
 80094c6:	2300      	movs	r3, #0
 80094c8:	61fb      	str	r3, [r7, #28]
  }
  netbuf_fromport(&buf) = remote_port;
 80094ca:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80094cc:	843b      	strh	r3, [r7, #32]
      MEMCPY(buf.p->payload, data, short_size);
    }
    err = ERR_OK;
  }
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  err = netbuf_ref(&buf, data, short_size);
 80094ce:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80094d0:	f107 0314 	add.w	r3, r7, #20
 80094d4:	68b9      	ldr	r1, [r7, #8]
 80094d6:	4618      	mov	r0, r3
 80094d8:	f7ff fe74 	bl	80091c4 <netbuf_ref>
 80094dc:	4603      	mov	r3, r0
 80094de:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (err == ERR_OK) {
 80094e2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d10a      	bne.n	8009500 <lwip_sendto+0x124>
      IP_SET_TYPE_VAL(buf.addr, IPADDR_TYPE_V4);
    }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

    /* send the data */
    err = netconn_send(sock->conn, &buf);
 80094ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	f107 0214 	add.w	r2, r7, #20
 80094f2:	4611      	mov	r1, r2
 80094f4:	4618      	mov	r0, r3
 80094f6:	f7ff fb27 	bl	8008b48 <netconn_send>
 80094fa:	4603      	mov	r3, r0
 80094fc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  /* deallocated the buffer */
  netbuf_free(&buf);
 8009500:	f107 0314 	add.w	r3, r7, #20
 8009504:	4618      	mov	r0, r3
 8009506:	f7ff fe35 	bl	8009174 <netbuf_free>

  sock_set_errno(sock, err_to_errno(err));
 800950a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800950e:	4618      	mov	r0, r3
 8009510:	f7ff fdf2 	bl	80090f8 <err_to_errno>
 8009514:	62f8      	str	r0, [r7, #44]	; 0x2c
 8009516:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009518:	2b00      	cmp	r3, #0
 800951a:	d002      	beq.n	8009522 <lwip_sendto+0x146>
 800951c:	4a07      	ldr	r2, [pc, #28]	; (800953c <lwip_sendto+0x160>)
 800951e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009520:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return (err == ERR_OK ? short_size : -1);
 8009522:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009526:	2b00      	cmp	r3, #0
 8009528:	d101      	bne.n	800952e <lwip_sendto+0x152>
 800952a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800952c:	e001      	b.n	8009532 <lwip_sendto+0x156>
 800952e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8009532:	4618      	mov	r0, r3
 8009534:	3740      	adds	r7, #64	; 0x40
 8009536:	46bd      	mov	sp, r7
 8009538:	bd80      	pop	{r7, pc}
 800953a:	bf00      	nop
 800953c:	2000ceb0 	.word	0x2000ceb0
 8009540:	080105d4 	.word	0x080105d4
 8009544:	0801082c 	.word	0x0801082c
 8009548:	08010628 	.word	0x08010628

0800954c <lwip_socket>:

int
lwip_socket(int domain, int type, int protocol)
{
 800954c:	b580      	push	{r7, lr}
 800954e:	b086      	sub	sp, #24
 8009550:	af00      	add	r7, sp, #0
 8009552:	60f8      	str	r0, [r7, #12]
 8009554:	60b9      	str	r1, [r7, #8]
 8009556:	607a      	str	r2, [r7, #4]
  int i;

  LWIP_UNUSED_ARG(domain); /* @todo: check this */

  /* create a netconn */
  switch (type) {
 8009558:	68bb      	ldr	r3, [r7, #8]
 800955a:	2b02      	cmp	r3, #2
 800955c:	d00d      	beq.n	800957a <lwip_socket+0x2e>
 800955e:	2b03      	cmp	r3, #3
 8009560:	d002      	beq.n	8009568 <lwip_socket+0x1c>
 8009562:	2b01      	cmp	r3, #1
 8009564:	d016      	beq.n	8009594 <lwip_socket+0x48>
 8009566:	e01c      	b.n	80095a2 <lwip_socket+0x56>
    case SOCK_RAW:
      conn = netconn_new_with_proto_and_callback(DOMAIN_TO_NETCONN_TYPE(domain, NETCONN_RAW),
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	b2db      	uxtb	r3, r3
 800956c:	4a21      	ldr	r2, [pc, #132]	; (80095f4 <lwip_socket+0xa8>)
 800956e:	4619      	mov	r1, r3
 8009570:	2040      	movs	r0, #64	; 0x40
 8009572:	f7ff fa41 	bl	80089f8 <netconn_new_with_proto_and_callback>
 8009576:	6178      	str	r0, [r7, #20]
             (u8_t)protocol, DEFAULT_SOCKET_EVENTCB);
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%s, SOCK_RAW, %d) = ",
                                  domain == PF_INET ? "PF_INET" : "UNKNOWN", protocol));
      break;
 8009578:	e019      	b.n	80095ae <lwip_socket+0x62>
    case SOCK_DGRAM:
      conn = netconn_new_with_callback(DOMAIN_TO_NETCONN_TYPE(domain,
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	2b88      	cmp	r3, #136	; 0x88
 800957e:	d101      	bne.n	8009584 <lwip_socket+0x38>
 8009580:	2321      	movs	r3, #33	; 0x21
 8009582:	e000      	b.n	8009586 <lwip_socket+0x3a>
 8009584:	2320      	movs	r3, #32
 8009586:	4a1b      	ldr	r2, [pc, #108]	; (80095f4 <lwip_socket+0xa8>)
 8009588:	2100      	movs	r1, #0
 800958a:	4618      	mov	r0, r3
 800958c:	f7ff fa34 	bl	80089f8 <netconn_new_with_proto_and_callback>
 8009590:	6178      	str	r0, [r7, #20]
      if (conn) {
        /* netconn layer enables pktinfo by default, sockets default to off */
        conn->flags &= ~NETCONN_FLAG_PKTINFO;
      }
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 8009592:	e00c      	b.n	80095ae <lwip_socket+0x62>
    case SOCK_STREAM:
      conn = netconn_new_with_callback(DOMAIN_TO_NETCONN_TYPE(domain, NETCONN_TCP), DEFAULT_SOCKET_EVENTCB);
 8009594:	4a17      	ldr	r2, [pc, #92]	; (80095f4 <lwip_socket+0xa8>)
 8009596:	2100      	movs	r1, #0
 8009598:	2010      	movs	r0, #16
 800959a:	f7ff fa2d 	bl	80089f8 <netconn_new_with_proto_and_callback>
 800959e:	6178      	str	r0, [r7, #20]
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%s, SOCK_STREAM, %d) = ",
                                  domain == PF_INET ? "PF_INET" : "UNKNOWN", protocol));
      break;
 80095a0:	e005      	b.n	80095ae <lwip_socket+0x62>
    default:
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%d, %d/UNKNOWN, %d) = -1\n",
                                  domain, type, protocol));
      set_errno(EINVAL);
 80095a2:	4b15      	ldr	r3, [pc, #84]	; (80095f8 <lwip_socket+0xac>)
 80095a4:	2216      	movs	r2, #22
 80095a6:	601a      	str	r2, [r3, #0]
      return -1;
 80095a8:	f04f 33ff 	mov.w	r3, #4294967295
 80095ac:	e01e      	b.n	80095ec <lwip_socket+0xa0>
  }

  if (!conn) {
 80095ae:	697b      	ldr	r3, [r7, #20]
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d105      	bne.n	80095c0 <lwip_socket+0x74>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("-1 / ENOBUFS (could not create netconn)\n"));
    set_errno(ENOBUFS);
 80095b4:	4b10      	ldr	r3, [pc, #64]	; (80095f8 <lwip_socket+0xac>)
 80095b6:	2269      	movs	r2, #105	; 0x69
 80095b8:	601a      	str	r2, [r3, #0]
    return -1;
 80095ba:	f04f 33ff 	mov.w	r3, #4294967295
 80095be:	e015      	b.n	80095ec <lwip_socket+0xa0>
  }

  i = alloc_socket(conn, 0);
 80095c0:	2100      	movs	r1, #0
 80095c2:	6978      	ldr	r0, [r7, #20]
 80095c4:	f7ff fe9e 	bl	8009304 <alloc_socket>
 80095c8:	6138      	str	r0, [r7, #16]

  if (i == -1) {
 80095ca:	693b      	ldr	r3, [r7, #16]
 80095cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095d0:	d108      	bne.n	80095e4 <lwip_socket+0x98>
    netconn_delete(conn);
 80095d2:	6978      	ldr	r0, [r7, #20]
 80095d4:	f7ff fa9c 	bl	8008b10 <netconn_delete>
    set_errno(ENFILE);
 80095d8:	4b07      	ldr	r3, [pc, #28]	; (80095f8 <lwip_socket+0xac>)
 80095da:	2217      	movs	r2, #23
 80095dc:	601a      	str	r2, [r3, #0]
    return -1;
 80095de:	f04f 33ff 	mov.w	r3, #4294967295
 80095e2:	e003      	b.n	80095ec <lwip_socket+0xa0>
  }
  conn->socket = i;
 80095e4:	697b      	ldr	r3, [r7, #20]
 80095e6:	693a      	ldr	r2, [r7, #16]
 80095e8:	615a      	str	r2, [r3, #20]
  done_socket(&sockets[i - LWIP_SOCKET_OFFSET]);
  LWIP_DEBUGF(SOCKETS_DEBUG, ("%d\n", i));
  set_errno(0);
  return i;
 80095ea:	693b      	ldr	r3, [r7, #16]
}
 80095ec:	4618      	mov	r0, r3
 80095ee:	3718      	adds	r7, #24
 80095f0:	46bd      	mov	sp, r7
 80095f2:	bd80      	pop	{r7, pc}
 80095f4:	08009685 	.word	0x08009685
 80095f8:	2000ceb0 	.word	0x2000ceb0

080095fc <lwip_poll_should_wake>:
 * Check whether event_callback should wake up a thread waiting in
 * lwip_poll.
 */
static int
lwip_poll_should_wake(const struct lwip_select_cb *scb, int fd, int has_recvevent, int has_sendevent, int has_errevent)
{
 80095fc:	b480      	push	{r7}
 80095fe:	b087      	sub	sp, #28
 8009600:	af00      	add	r7, sp, #0
 8009602:	60f8      	str	r0, [r7, #12]
 8009604:	60b9      	str	r1, [r7, #8]
 8009606:	607a      	str	r2, [r7, #4]
 8009608:	603b      	str	r3, [r7, #0]
  nfds_t fdi;
  for (fdi = 0; fdi < scb->poll_nfds; fdi++) {
 800960a:	2300      	movs	r3, #0
 800960c:	617b      	str	r3, [r7, #20]
 800960e:	e02c      	b.n	800966a <lwip_poll_should_wake+0x6e>
    const struct pollfd *pollfd = &scb->poll_fds[fdi];
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	695a      	ldr	r2, [r3, #20]
 8009614:	697b      	ldr	r3, [r7, #20]
 8009616:	00db      	lsls	r3, r3, #3
 8009618:	4413      	add	r3, r2
 800961a:	613b      	str	r3, [r7, #16]
    if (pollfd->fd == fd) {
 800961c:	693b      	ldr	r3, [r7, #16]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	68ba      	ldr	r2, [r7, #8]
 8009622:	429a      	cmp	r2, r3
 8009624:	d11e      	bne.n	8009664 <lwip_poll_should_wake+0x68>
      /* Do not update pollfd->revents right here;
         that would be a data race because lwip_pollscan
         accesses revents without protecting. */
      if (has_recvevent && (pollfd->events & POLLIN) != 0) {
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	2b00      	cmp	r3, #0
 800962a:	d009      	beq.n	8009640 <lwip_poll_should_wake+0x44>
 800962c:	693b      	ldr	r3, [r7, #16]
 800962e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8009632:	b29b      	uxth	r3, r3
 8009634:	f003 0301 	and.w	r3, r3, #1
 8009638:	2b00      	cmp	r3, #0
 800963a:	d001      	beq.n	8009640 <lwip_poll_should_wake+0x44>
        return 1;
 800963c:	2301      	movs	r3, #1
 800963e:	e01a      	b.n	8009676 <lwip_poll_should_wake+0x7a>
      }
      if (has_sendevent && (pollfd->events & POLLOUT) != 0) {
 8009640:	683b      	ldr	r3, [r7, #0]
 8009642:	2b00      	cmp	r3, #0
 8009644:	d009      	beq.n	800965a <lwip_poll_should_wake+0x5e>
 8009646:	693b      	ldr	r3, [r7, #16]
 8009648:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800964c:	b29b      	uxth	r3, r3
 800964e:	f003 0302 	and.w	r3, r3, #2
 8009652:	2b00      	cmp	r3, #0
 8009654:	d001      	beq.n	800965a <lwip_poll_should_wake+0x5e>
        return 1;
 8009656:	2301      	movs	r3, #1
 8009658:	e00d      	b.n	8009676 <lwip_poll_should_wake+0x7a>
      }
      if (has_errevent) {
 800965a:	6a3b      	ldr	r3, [r7, #32]
 800965c:	2b00      	cmp	r3, #0
 800965e:	d001      	beq.n	8009664 <lwip_poll_should_wake+0x68>
        /* POLLERR is output only. */
        return 1;
 8009660:	2301      	movs	r3, #1
 8009662:	e008      	b.n	8009676 <lwip_poll_should_wake+0x7a>
  for (fdi = 0; fdi < scb->poll_nfds; fdi++) {
 8009664:	697b      	ldr	r3, [r7, #20]
 8009666:	3301      	adds	r3, #1
 8009668:	617b      	str	r3, [r7, #20]
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	699b      	ldr	r3, [r3, #24]
 800966e:	697a      	ldr	r2, [r7, #20]
 8009670:	429a      	cmp	r2, r3
 8009672:	d3cd      	bcc.n	8009610 <lwip_poll_should_wake+0x14>
      }
    }
  }
  return 0;
 8009674:	2300      	movs	r3, #0
}
 8009676:	4618      	mov	r0, r3
 8009678:	371c      	adds	r7, #28
 800967a:	46bd      	mov	sp, r7
 800967c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009680:	4770      	bx	lr
	...

08009684 <event_callback>:
 *   NETCONN_EVT_ERROR
 * This requirement will be asserted in select_check_waiters()
 */
static void
event_callback(struct netconn *conn, enum netconn_evt evt, u16_t len)
{
 8009684:	b580      	push	{r7, lr}
 8009686:	b08a      	sub	sp, #40	; 0x28
 8009688:	af00      	add	r7, sp, #0
 800968a:	6078      	str	r0, [r7, #4]
 800968c:	460b      	mov	r3, r1
 800968e:	70fb      	strb	r3, [r7, #3]
 8009690:	4613      	mov	r3, r2
 8009692:	803b      	strh	r3, [r7, #0]
  SYS_ARCH_DECL_PROTECT(lev);

  LWIP_UNUSED_ARG(len);

  /* Get socket */
  if (conn) {
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	2b00      	cmp	r3, #0
 8009698:	f000 80a4 	beq.w	80097e4 <event_callback+0x160>
    s = conn->socket;
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	695b      	ldr	r3, [r3, #20]
 80096a0:	627b      	str	r3, [r7, #36]	; 0x24
    if (s < 0) {
 80096a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	da18      	bge.n	80096da <event_callback+0x56>
      /* Data comes in right away after an accept, even though
       * the server task might not have created a new socket yet.
       * Just count down (or up) if that's the case and we
       * will use the data later. Note that only receive events
       * can happen before the new socket is set up. */
      SYS_ARCH_PROTECT(lev);
 80096a8:	f005 fbec 	bl	800ee84 <sys_arch_protect>
 80096ac:	61f8      	str	r0, [r7, #28]
      if (conn->socket < 0) {
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	695b      	ldr	r3, [r3, #20]
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	da0b      	bge.n	80096ce <event_callback+0x4a>
        if (evt == NETCONN_EVT_RCVPLUS) {
 80096b6:	78fb      	ldrb	r3, [r7, #3]
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d104      	bne.n	80096c6 <event_callback+0x42>
          /* conn->socket is -1 on initialization
             lwip_accept adjusts sock->recvevent if conn->socket < -1 */
          conn->socket--;
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	695b      	ldr	r3, [r3, #20]
 80096c0:	1e5a      	subs	r2, r3, #1
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	615a      	str	r2, [r3, #20]
        }
        SYS_ARCH_UNPROTECT(lev);
 80096c6:	69f8      	ldr	r0, [r7, #28]
 80096c8:	f005 fbea 	bl	800eea0 <sys_arch_unprotect>
        return;
 80096cc:	e08d      	b.n	80097ea <event_callback+0x166>
      }
      s = conn->socket;
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	695b      	ldr	r3, [r3, #20]
 80096d2:	627b      	str	r3, [r7, #36]	; 0x24
      SYS_ARCH_UNPROTECT(lev);
 80096d4:	69f8      	ldr	r0, [r7, #28]
 80096d6:	f005 fbe3 	bl	800eea0 <sys_arch_unprotect>
    }

    sock = get_socket(s);
 80096da:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80096dc:	f7ff fdfa 	bl	80092d4 <get_socket>
 80096e0:	61b8      	str	r0, [r7, #24]
    if (!sock) {
 80096e2:	69bb      	ldr	r3, [r7, #24]
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d07f      	beq.n	80097e8 <event_callback+0x164>
    }
  } else {
    return;
  }

  check_waiters = 1;
 80096e8:	2301      	movs	r3, #1
 80096ea:	623b      	str	r3, [r7, #32]
  SYS_ARCH_PROTECT(lev);
 80096ec:	f005 fbca 	bl	800ee84 <sys_arch_protect>
 80096f0:	61f8      	str	r0, [r7, #28]
  /* Set event as required */
  switch (evt) {
 80096f2:	78fb      	ldrb	r3, [r7, #3]
 80096f4:	2b04      	cmp	r3, #4
 80096f6:	d83e      	bhi.n	8009776 <event_callback+0xf2>
 80096f8:	a201      	add	r2, pc, #4	; (adr r2, 8009700 <event_callback+0x7c>)
 80096fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096fe:	bf00      	nop
 8009700:	08009715 	.word	0x08009715
 8009704:	08009737 	.word	0x08009737
 8009708:	0800974f 	.word	0x0800974f
 800970c:	08009763 	.word	0x08009763
 8009710:	0800976f 	.word	0x0800976f
    case NETCONN_EVT_RCVPLUS:
      sock->rcvevent++;
 8009714:	69bb      	ldr	r3, [r7, #24]
 8009716:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800971a:	b29b      	uxth	r3, r3
 800971c:	3301      	adds	r3, #1
 800971e:	b29b      	uxth	r3, r3
 8009720:	b21a      	sxth	r2, r3
 8009722:	69bb      	ldr	r3, [r7, #24]
 8009724:	811a      	strh	r2, [r3, #8]
      if (sock->rcvevent > 1) {
 8009726:	69bb      	ldr	r3, [r7, #24]
 8009728:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800972c:	2b01      	cmp	r3, #1
 800972e:	dd2a      	ble.n	8009786 <event_callback+0x102>
        check_waiters = 0;
 8009730:	2300      	movs	r3, #0
 8009732:	623b      	str	r3, [r7, #32]
      }
      break;
 8009734:	e027      	b.n	8009786 <event_callback+0x102>
    case NETCONN_EVT_RCVMINUS:
      sock->rcvevent--;
 8009736:	69bb      	ldr	r3, [r7, #24]
 8009738:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800973c:	b29b      	uxth	r3, r3
 800973e:	3b01      	subs	r3, #1
 8009740:	b29b      	uxth	r3, r3
 8009742:	b21a      	sxth	r2, r3
 8009744:	69bb      	ldr	r3, [r7, #24]
 8009746:	811a      	strh	r2, [r3, #8]
      check_waiters = 0;
 8009748:	2300      	movs	r3, #0
 800974a:	623b      	str	r3, [r7, #32]
      break;
 800974c:	e01c      	b.n	8009788 <event_callback+0x104>
    case NETCONN_EVT_SENDPLUS:
      if (sock->sendevent) {
 800974e:	69bb      	ldr	r3, [r7, #24]
 8009750:	895b      	ldrh	r3, [r3, #10]
 8009752:	2b00      	cmp	r3, #0
 8009754:	d001      	beq.n	800975a <event_callback+0xd6>
        check_waiters = 0;
 8009756:	2300      	movs	r3, #0
 8009758:	623b      	str	r3, [r7, #32]
      }
      sock->sendevent = 1;
 800975a:	69bb      	ldr	r3, [r7, #24]
 800975c:	2201      	movs	r2, #1
 800975e:	815a      	strh	r2, [r3, #10]
      break;
 8009760:	e012      	b.n	8009788 <event_callback+0x104>
    case NETCONN_EVT_SENDMINUS:
      sock->sendevent = 0;
 8009762:	69bb      	ldr	r3, [r7, #24]
 8009764:	2200      	movs	r2, #0
 8009766:	815a      	strh	r2, [r3, #10]
      check_waiters = 0;
 8009768:	2300      	movs	r3, #0
 800976a:	623b      	str	r3, [r7, #32]
      break;
 800976c:	e00c      	b.n	8009788 <event_callback+0x104>
    case NETCONN_EVT_ERROR:
      sock->errevent = 1;
 800976e:	69bb      	ldr	r3, [r7, #24]
 8009770:	2201      	movs	r2, #1
 8009772:	819a      	strh	r2, [r3, #12]
      break;
 8009774:	e008      	b.n	8009788 <event_callback+0x104>
    default:
      LWIP_ASSERT("unknown event", 0);
 8009776:	4b1e      	ldr	r3, [pc, #120]	; (80097f0 <event_callback+0x16c>)
 8009778:	f44f 621f 	mov.w	r2, #2544	; 0x9f0
 800977c:	491d      	ldr	r1, [pc, #116]	; (80097f4 <event_callback+0x170>)
 800977e:	481e      	ldr	r0, [pc, #120]	; (80097f8 <event_callback+0x174>)
 8009780:	f005 fc18 	bl	800efb4 <iprintf>
      break;
 8009784:	e000      	b.n	8009788 <event_callback+0x104>
      break;
 8009786:	bf00      	nop
  }

  if (sock->select_waiting && check_waiters) {
 8009788:	69bb      	ldr	r3, [r7, #24]
 800978a:	7b9b      	ldrb	r3, [r3, #14]
 800978c:	2b00      	cmp	r3, #0
 800978e:	d025      	beq.n	80097dc <event_callback+0x158>
 8009790:	6a3b      	ldr	r3, [r7, #32]
 8009792:	2b00      	cmp	r3, #0
 8009794:	d022      	beq.n	80097dc <event_callback+0x158>
    /* Save which events are active */
    int has_recvevent, has_sendevent, has_errevent;
    has_recvevent = sock->rcvevent > 0;
 8009796:	69bb      	ldr	r3, [r7, #24]
 8009798:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800979c:	2b00      	cmp	r3, #0
 800979e:	bfcc      	ite	gt
 80097a0:	2301      	movgt	r3, #1
 80097a2:	2300      	movle	r3, #0
 80097a4:	b2db      	uxtb	r3, r3
 80097a6:	617b      	str	r3, [r7, #20]
    has_sendevent = sock->sendevent != 0;
 80097a8:	69bb      	ldr	r3, [r7, #24]
 80097aa:	895b      	ldrh	r3, [r3, #10]
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	bf14      	ite	ne
 80097b0:	2301      	movne	r3, #1
 80097b2:	2300      	moveq	r3, #0
 80097b4:	b2db      	uxtb	r3, r3
 80097b6:	613b      	str	r3, [r7, #16]
    has_errevent = sock->errevent != 0;
 80097b8:	69bb      	ldr	r3, [r7, #24]
 80097ba:	899b      	ldrh	r3, [r3, #12]
 80097bc:	2b00      	cmp	r3, #0
 80097be:	bf14      	ite	ne
 80097c0:	2301      	movne	r3, #1
 80097c2:	2300      	moveq	r3, #0
 80097c4:	b2db      	uxtb	r3, r3
 80097c6:	60fb      	str	r3, [r7, #12]
    SYS_ARCH_UNPROTECT(lev);
 80097c8:	69f8      	ldr	r0, [r7, #28]
 80097ca:	f005 fb69 	bl	800eea0 <sys_arch_unprotect>
    /* Check any select calls waiting on this socket */
    select_check_waiters(s, has_recvevent, has_sendevent, has_errevent);
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	693a      	ldr	r2, [r7, #16]
 80097d2:	6979      	ldr	r1, [r7, #20]
 80097d4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80097d6:	f000 f811 	bl	80097fc <select_check_waiters>
  if (sock->select_waiting && check_waiters) {
 80097da:	e006      	b.n	80097ea <event_callback+0x166>
  } else {
    SYS_ARCH_UNPROTECT(lev);
 80097dc:	69f8      	ldr	r0, [r7, #28]
 80097de:	f005 fb5f 	bl	800eea0 <sys_arch_unprotect>
 80097e2:	e002      	b.n	80097ea <event_callback+0x166>
    return;
 80097e4:	bf00      	nop
 80097e6:	e000      	b.n	80097ea <event_callback+0x166>
      return;
 80097e8:	bf00      	nop
  }
  done_socket(sock);
}
 80097ea:	3728      	adds	r7, #40	; 0x28
 80097ec:	46bd      	mov	sp, r7
 80097ee:	bd80      	pop	{r7, pc}
 80097f0:	080105d4 	.word	0x080105d4
 80097f4:	080108c8 	.word	0x080108c8
 80097f8:	08010628 	.word	0x08010628

080097fc <select_check_waiters>:
 * of the loop, thus creating a possibility where a thread could modify the
 * select_cb_list during our UNPROTECT/PROTECT. We use a generational counter to
 * detect this change and restart the list walk. The list is expected to be small
 */
static void select_check_waiters(int s, int has_recvevent, int has_sendevent, int has_errevent)
{
 80097fc:	b580      	push	{r7, lr}
 80097fe:	b088      	sub	sp, #32
 8009800:	af02      	add	r7, sp, #8
 8009802:	60f8      	str	r0, [r7, #12]
 8009804:	60b9      	str	r1, [r7, #8]
 8009806:	607a      	str	r2, [r7, #4]
 8009808:	603b      	str	r3, [r7, #0]
  SYS_ARCH_PROTECT(lev);
again:
  /* remember the state of select_cb_list to detect changes */
  last_select_cb_ctr = select_cb_ctr;
#endif /* !LWIP_TCPIP_CORE_LOCKING */
  for (scb = select_cb_list; scb != NULL; scb = scb->next) {
 800980a:	4b3d      	ldr	r3, [pc, #244]	; (8009900 <select_check_waiters+0x104>)
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	617b      	str	r3, [r7, #20]
 8009810:	e06f      	b.n	80098f2 <select_check_waiters+0xf6>
    if (scb->sem_signalled == 0) {
 8009812:	697b      	ldr	r3, [r7, #20]
 8009814:	69db      	ldr	r3, [r3, #28]
 8009816:	2b00      	cmp	r3, #0
 8009818:	d168      	bne.n	80098ec <select_check_waiters+0xf0>
      /* semaphore not signalled yet */
      int do_signal = 0;
 800981a:	2300      	movs	r3, #0
 800981c:	613b      	str	r3, [r7, #16]
#if LWIP_SOCKET_POLL
      if (scb->poll_fds != NULL) {
 800981e:	697b      	ldr	r3, [r7, #20]
 8009820:	695b      	ldr	r3, [r3, #20]
 8009822:	2b00      	cmp	r3, #0
 8009824:	d009      	beq.n	800983a <select_check_waiters+0x3e>
        do_signal = lwip_poll_should_wake(scb, s, has_recvevent, has_sendevent, has_errevent);
 8009826:	683b      	ldr	r3, [r7, #0]
 8009828:	9300      	str	r3, [sp, #0]
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	68ba      	ldr	r2, [r7, #8]
 800982e:	68f9      	ldr	r1, [r7, #12]
 8009830:	6978      	ldr	r0, [r7, #20]
 8009832:	f7ff fee3 	bl	80095fc <lwip_poll_should_wake>
 8009836:	6138      	str	r0, [r7, #16]
 8009838:	e04d      	b.n	80098d6 <select_check_waiters+0xda>
      else
#endif /* LWIP_SOCKET_SELECT && LWIP_SOCKET_POLL */
#if LWIP_SOCKET_SELECT
      {
        /* Test this select call for our socket */
        if (has_recvevent) {
 800983a:	68bb      	ldr	r3, [r7, #8]
 800983c:	2b00      	cmp	r3, #0
 800983e:	d014      	beq.n	800986a <select_check_waiters+0x6e>
          if (scb->readset && FD_ISSET(s, scb->readset)) {
 8009840:	697b      	ldr	r3, [r7, #20]
 8009842:	689b      	ldr	r3, [r3, #8]
 8009844:	2b00      	cmp	r3, #0
 8009846:	d010      	beq.n	800986a <select_check_waiters+0x6e>
 8009848:	697b      	ldr	r3, [r7, #20]
 800984a:	689b      	ldr	r3, [r3, #8]
 800984c:	68fa      	ldr	r2, [r7, #12]
 800984e:	0952      	lsrs	r2, r2, #5
 8009850:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009854:	68fa      	ldr	r2, [r7, #12]
 8009856:	f002 021f 	and.w	r2, r2, #31
 800985a:	2101      	movs	r1, #1
 800985c:	fa01 f202 	lsl.w	r2, r1, r2
 8009860:	4013      	ands	r3, r2
 8009862:	2b00      	cmp	r3, #0
 8009864:	d001      	beq.n	800986a <select_check_waiters+0x6e>
            do_signal = 1;
 8009866:	2301      	movs	r3, #1
 8009868:	613b      	str	r3, [r7, #16]
          }
        }
        if (has_sendevent) {
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	2b00      	cmp	r3, #0
 800986e:	d017      	beq.n	80098a0 <select_check_waiters+0xa4>
          if (!do_signal && scb->writeset && FD_ISSET(s, scb->writeset)) {
 8009870:	693b      	ldr	r3, [r7, #16]
 8009872:	2b00      	cmp	r3, #0
 8009874:	d114      	bne.n	80098a0 <select_check_waiters+0xa4>
 8009876:	697b      	ldr	r3, [r7, #20]
 8009878:	68db      	ldr	r3, [r3, #12]
 800987a:	2b00      	cmp	r3, #0
 800987c:	d010      	beq.n	80098a0 <select_check_waiters+0xa4>
 800987e:	697b      	ldr	r3, [r7, #20]
 8009880:	68db      	ldr	r3, [r3, #12]
 8009882:	68fa      	ldr	r2, [r7, #12]
 8009884:	0952      	lsrs	r2, r2, #5
 8009886:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800988a:	68fa      	ldr	r2, [r7, #12]
 800988c:	f002 021f 	and.w	r2, r2, #31
 8009890:	2101      	movs	r1, #1
 8009892:	fa01 f202 	lsl.w	r2, r1, r2
 8009896:	4013      	ands	r3, r2
 8009898:	2b00      	cmp	r3, #0
 800989a:	d001      	beq.n	80098a0 <select_check_waiters+0xa4>
            do_signal = 1;
 800989c:	2301      	movs	r3, #1
 800989e:	613b      	str	r3, [r7, #16]
          }
        }
        if (has_errevent) {
 80098a0:	683b      	ldr	r3, [r7, #0]
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d017      	beq.n	80098d6 <select_check_waiters+0xda>
          if (!do_signal && scb->exceptset && FD_ISSET(s, scb->exceptset)) {
 80098a6:	693b      	ldr	r3, [r7, #16]
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d114      	bne.n	80098d6 <select_check_waiters+0xda>
 80098ac:	697b      	ldr	r3, [r7, #20]
 80098ae:	691b      	ldr	r3, [r3, #16]
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d010      	beq.n	80098d6 <select_check_waiters+0xda>
 80098b4:	697b      	ldr	r3, [r7, #20]
 80098b6:	691b      	ldr	r3, [r3, #16]
 80098b8:	68fa      	ldr	r2, [r7, #12]
 80098ba:	0952      	lsrs	r2, r2, #5
 80098bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80098c0:	68fa      	ldr	r2, [r7, #12]
 80098c2:	f002 021f 	and.w	r2, r2, #31
 80098c6:	2101      	movs	r1, #1
 80098c8:	fa01 f202 	lsl.w	r2, r1, r2
 80098cc:	4013      	ands	r3, r2
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d001      	beq.n	80098d6 <select_check_waiters+0xda>
            do_signal = 1;
 80098d2:	2301      	movs	r3, #1
 80098d4:	613b      	str	r3, [r7, #16]
          }
        }
      }
#endif /* LWIP_SOCKET_SELECT */
      if (do_signal) {
 80098d6:	693b      	ldr	r3, [r7, #16]
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d007      	beq.n	80098ec <select_check_waiters+0xf0>
        scb->sem_signalled = 1;
 80098dc:	697b      	ldr	r3, [r7, #20]
 80098de:	2201      	movs	r2, #1
 80098e0:	61da      	str	r2, [r3, #28]
        /* For !LWIP_TCPIP_CORE_LOCKING, we don't call SYS_ARCH_UNPROTECT() before signaling
           the semaphore, as this might lead to the select thread taking itself off the list,
           invalidating the semaphore. */
        sys_sem_signal(SELECT_SEM_PTR(scb->sem));
 80098e2:	697b      	ldr	r3, [r7, #20]
 80098e4:	3320      	adds	r3, #32
 80098e6:	4618      	mov	r0, r3
 80098e8:	f005 fa27 	bl	800ed3a <sys_sem_signal>
  for (scb = select_cb_list; scb != NULL; scb = scb->next) {
 80098ec:	697b      	ldr	r3, [r7, #20]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	617b      	str	r3, [r7, #20]
 80098f2:	697b      	ldr	r3, [r7, #20]
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d18c      	bne.n	8009812 <select_check_waiters+0x16>
    /* remember the state of select_cb_list to detect changes */
    last_select_cb_ctr = select_cb_ctr;
  }
  SYS_ARCH_UNPROTECT(lev);
#endif
}
 80098f8:	bf00      	nop
 80098fa:	3718      	adds	r7, #24
 80098fc:	46bd      	mov	sp, r7
 80098fe:	bd80      	pop	{r7, pc}
 8009900:	20004758 	.word	0x20004758

08009904 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 8009904:	b580      	push	{r7, lr}
 8009906:	b084      	sub	sp, #16
 8009908:	af00      	add	r7, sp, #0
 800990a:	6078      	str	r0, [r7, #4]
 800990c:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800990e:	f002 f80b 	bl	800b928 <sys_timeouts_sleeptime>
 8009912:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	f1b3 3fff 	cmp.w	r3, #4294967295
 800991a:	d10b      	bne.n	8009934 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800991c:	4813      	ldr	r0, [pc, #76]	; (800996c <tcpip_timeouts_mbox_fetch+0x68>)
 800991e:	f005 fa7e 	bl	800ee1e <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 8009922:	2200      	movs	r2, #0
 8009924:	6839      	ldr	r1, [r7, #0]
 8009926:	6878      	ldr	r0, [r7, #4]
 8009928:	f005 f966 	bl	800ebf8 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800992c:	480f      	ldr	r0, [pc, #60]	; (800996c <tcpip_timeouts_mbox_fetch+0x68>)
 800992e:	f005 fa67 	bl	800ee00 <sys_mutex_lock>
    return;
 8009932:	e018      	b.n	8009966 <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	2b00      	cmp	r3, #0
 8009938:	d102      	bne.n	8009940 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800993a:	f001 ffbb 	bl	800b8b4 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800993e:	e7e6      	b.n	800990e <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 8009940:	480a      	ldr	r0, [pc, #40]	; (800996c <tcpip_timeouts_mbox_fetch+0x68>)
 8009942:	f005 fa6c 	bl	800ee1e <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 8009946:	68fa      	ldr	r2, [r7, #12]
 8009948:	6839      	ldr	r1, [r7, #0]
 800994a:	6878      	ldr	r0, [r7, #4]
 800994c:	f005 f954 	bl	800ebf8 <sys_arch_mbox_fetch>
 8009950:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 8009952:	4806      	ldr	r0, [pc, #24]	; (800996c <tcpip_timeouts_mbox_fetch+0x68>)
 8009954:	f005 fa54 	bl	800ee00 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 8009958:	68bb      	ldr	r3, [r7, #8]
 800995a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800995e:	d102      	bne.n	8009966 <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 8009960:	f001 ffa8 	bl	800b8b4 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8009964:	e7d3      	b.n	800990e <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 8009966:	3710      	adds	r7, #16
 8009968:	46bd      	mov	sp, r7
 800996a:	bd80      	pop	{r7, pc}
 800996c:	20007b04 	.word	0x20007b04

08009970 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 8009970:	b580      	push	{r7, lr}
 8009972:	b084      	sub	sp, #16
 8009974:	af00      	add	r7, sp, #0
 8009976:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 8009978:	4810      	ldr	r0, [pc, #64]	; (80099bc <tcpip_thread+0x4c>)
 800997a:	f005 fa41 	bl	800ee00 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800997e:	4b10      	ldr	r3, [pc, #64]	; (80099c0 <tcpip_thread+0x50>)
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	2b00      	cmp	r3, #0
 8009984:	d005      	beq.n	8009992 <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 8009986:	4b0e      	ldr	r3, [pc, #56]	; (80099c0 <tcpip_thread+0x50>)
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	4a0e      	ldr	r2, [pc, #56]	; (80099c4 <tcpip_thread+0x54>)
 800998c:	6812      	ldr	r2, [r2, #0]
 800998e:	4610      	mov	r0, r2
 8009990:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8009992:	f107 030c 	add.w	r3, r7, #12
 8009996:	4619      	mov	r1, r3
 8009998:	480b      	ldr	r0, [pc, #44]	; (80099c8 <tcpip_thread+0x58>)
 800999a:	f7ff ffb3 	bl	8009904 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d106      	bne.n	80099b2 <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 80099a4:	4b09      	ldr	r3, [pc, #36]	; (80099cc <tcpip_thread+0x5c>)
 80099a6:	2291      	movs	r2, #145	; 0x91
 80099a8:	4909      	ldr	r1, [pc, #36]	; (80099d0 <tcpip_thread+0x60>)
 80099aa:	480a      	ldr	r0, [pc, #40]	; (80099d4 <tcpip_thread+0x64>)
 80099ac:	f005 fb02 	bl	800efb4 <iprintf>
      continue;
 80099b0:	e003      	b.n	80099ba <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	4618      	mov	r0, r3
 80099b6:	f000 f80f 	bl	80099d8 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 80099ba:	e7ea      	b.n	8009992 <tcpip_thread+0x22>
 80099bc:	20007b04 	.word	0x20007b04
 80099c0:	2000475c 	.word	0x2000475c
 80099c4:	20004760 	.word	0x20004760
 80099c8:	20004764 	.word	0x20004764
 80099cc:	0801091c 	.word	0x0801091c
 80099d0:	0801094c 	.word	0x0801094c
 80099d4:	0801096c 	.word	0x0801096c

080099d8 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 80099d8:	b580      	push	{r7, lr}
 80099da:	b082      	sub	sp, #8
 80099dc:	af00      	add	r7, sp, #0
 80099de:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	781b      	ldrb	r3, [r3, #0]
 80099e4:	2b01      	cmp	r3, #1
 80099e6:	d018      	beq.n	8009a1a <tcpip_thread_handle_msg+0x42>
 80099e8:	2b02      	cmp	r3, #2
 80099ea:	d021      	beq.n	8009a30 <tcpip_thread_handle_msg+0x58>
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d126      	bne.n	8009a3e <tcpip_thread_handle_msg+0x66>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	68db      	ldr	r3, [r3, #12]
 80099f4:	687a      	ldr	r2, [r7, #4]
 80099f6:	6850      	ldr	r0, [r2, #4]
 80099f8:	687a      	ldr	r2, [r7, #4]
 80099fa:	6892      	ldr	r2, [r2, #8]
 80099fc:	4611      	mov	r1, r2
 80099fe:	4798      	blx	r3
 8009a00:	4603      	mov	r3, r0
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d004      	beq.n	8009a10 <tcpip_thread_handle_msg+0x38>
        pbuf_free(msg->msg.inp.p);
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	685b      	ldr	r3, [r3, #4]
 8009a0a:	4618      	mov	r0, r3
 8009a0c:	f001 fc34 	bl	800b278 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8009a10:	6879      	ldr	r1, [r7, #4]
 8009a12:	2006      	movs	r0, #6
 8009a14:	f000 fdf0 	bl	800a5f8 <memp_free>
      break;
 8009a18:	e018      	b.n	8009a4c <tcpip_thread_handle_msg+0x74>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	685b      	ldr	r3, [r3, #4]
 8009a1e:	687a      	ldr	r2, [r7, #4]
 8009a20:	6892      	ldr	r2, [r2, #8]
 8009a22:	4610      	mov	r0, r2
 8009a24:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8009a26:	6879      	ldr	r1, [r7, #4]
 8009a28:	2005      	movs	r0, #5
 8009a2a:	f000 fde5 	bl	800a5f8 <memp_free>
      break;
 8009a2e:	e00d      	b.n	8009a4c <tcpip_thread_handle_msg+0x74>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	685b      	ldr	r3, [r3, #4]
 8009a34:	687a      	ldr	r2, [r7, #4]
 8009a36:	6892      	ldr	r2, [r2, #8]
 8009a38:	4610      	mov	r0, r2
 8009a3a:	4798      	blx	r3
      break;
 8009a3c:	e006      	b.n	8009a4c <tcpip_thread_handle_msg+0x74>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8009a3e:	4b05      	ldr	r3, [pc, #20]	; (8009a54 <tcpip_thread_handle_msg+0x7c>)
 8009a40:	22cf      	movs	r2, #207	; 0xcf
 8009a42:	4905      	ldr	r1, [pc, #20]	; (8009a58 <tcpip_thread_handle_msg+0x80>)
 8009a44:	4805      	ldr	r0, [pc, #20]	; (8009a5c <tcpip_thread_handle_msg+0x84>)
 8009a46:	f005 fab5 	bl	800efb4 <iprintf>
      break;
 8009a4a:	bf00      	nop
  }
}
 8009a4c:	bf00      	nop
 8009a4e:	3708      	adds	r7, #8
 8009a50:	46bd      	mov	sp, r7
 8009a52:	bd80      	pop	{r7, pc}
 8009a54:	0801091c 	.word	0x0801091c
 8009a58:	0801094c 	.word	0x0801094c
 8009a5c:	0801096c 	.word	0x0801096c

08009a60 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8009a60:	b580      	push	{r7, lr}
 8009a62:	b086      	sub	sp, #24
 8009a64:	af00      	add	r7, sp, #0
 8009a66:	60f8      	str	r0, [r7, #12]
 8009a68:	60b9      	str	r1, [r7, #8]
 8009a6a:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8009a6c:	481a      	ldr	r0, [pc, #104]	; (8009ad8 <tcpip_inpkt+0x78>)
 8009a6e:	f005 f91e 	bl	800ecae <sys_mbox_valid>
 8009a72:	4603      	mov	r3, r0
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d105      	bne.n	8009a84 <tcpip_inpkt+0x24>
 8009a78:	4b18      	ldr	r3, [pc, #96]	; (8009adc <tcpip_inpkt+0x7c>)
 8009a7a:	22fc      	movs	r2, #252	; 0xfc
 8009a7c:	4918      	ldr	r1, [pc, #96]	; (8009ae0 <tcpip_inpkt+0x80>)
 8009a7e:	4819      	ldr	r0, [pc, #100]	; (8009ae4 <tcpip_inpkt+0x84>)
 8009a80:	f005 fa98 	bl	800efb4 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8009a84:	2006      	movs	r0, #6
 8009a86:	f000 fd65 	bl	800a554 <memp_malloc>
 8009a8a:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 8009a8c:	697b      	ldr	r3, [r7, #20]
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d102      	bne.n	8009a98 <tcpip_inpkt+0x38>
    return ERR_MEM;
 8009a92:	f04f 33ff 	mov.w	r3, #4294967295
 8009a96:	e01a      	b.n	8009ace <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 8009a98:	697b      	ldr	r3, [r7, #20]
 8009a9a:	2200      	movs	r2, #0
 8009a9c:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 8009a9e:	697b      	ldr	r3, [r7, #20]
 8009aa0:	68fa      	ldr	r2, [r7, #12]
 8009aa2:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 8009aa4:	697b      	ldr	r3, [r7, #20]
 8009aa6:	68ba      	ldr	r2, [r7, #8]
 8009aa8:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 8009aaa:	697b      	ldr	r3, [r7, #20]
 8009aac:	687a      	ldr	r2, [r7, #4]
 8009aae:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8009ab0:	6979      	ldr	r1, [r7, #20]
 8009ab2:	4809      	ldr	r0, [pc, #36]	; (8009ad8 <tcpip_inpkt+0x78>)
 8009ab4:	f005 f886 	bl	800ebc4 <sys_mbox_trypost>
 8009ab8:	4603      	mov	r3, r0
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d006      	beq.n	8009acc <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8009abe:	6979      	ldr	r1, [r7, #20]
 8009ac0:	2006      	movs	r0, #6
 8009ac2:	f000 fd99 	bl	800a5f8 <memp_free>
    return ERR_MEM;
 8009ac6:	f04f 33ff 	mov.w	r3, #4294967295
 8009aca:	e000      	b.n	8009ace <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 8009acc:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 8009ace:	4618      	mov	r0, r3
 8009ad0:	3718      	adds	r7, #24
 8009ad2:	46bd      	mov	sp, r7
 8009ad4:	bd80      	pop	{r7, pc}
 8009ad6:	bf00      	nop
 8009ad8:	20004764 	.word	0x20004764
 8009adc:	0801091c 	.word	0x0801091c
 8009ae0:	08010994 	.word	0x08010994
 8009ae4:	0801096c 	.word	0x0801096c

08009ae8 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 8009ae8:	b580      	push	{r7, lr}
 8009aea:	b082      	sub	sp, #8
 8009aec:	af00      	add	r7, sp, #0
 8009aee:	6078      	str	r0, [r7, #4]
 8009af0:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 8009af2:	683b      	ldr	r3, [r7, #0]
 8009af4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009af8:	f003 0318 	and.w	r3, r3, #24
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d006      	beq.n	8009b0e <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 8009b00:	4a08      	ldr	r2, [pc, #32]	; (8009b24 <tcpip_input+0x3c>)
 8009b02:	6839      	ldr	r1, [r7, #0]
 8009b04:	6878      	ldr	r0, [r7, #4]
 8009b06:	f7ff ffab 	bl	8009a60 <tcpip_inpkt>
 8009b0a:	4603      	mov	r3, r0
 8009b0c:	e005      	b.n	8009b1a <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 8009b0e:	4a06      	ldr	r2, [pc, #24]	; (8009b28 <tcpip_input+0x40>)
 8009b10:	6839      	ldr	r1, [r7, #0]
 8009b12:	6878      	ldr	r0, [r7, #4]
 8009b14:	f7ff ffa4 	bl	8009a60 <tcpip_inpkt>
 8009b18:	4603      	mov	r3, r0
}
 8009b1a:	4618      	mov	r0, r3
 8009b1c:	3708      	adds	r7, #8
 8009b1e:	46bd      	mov	sp, r7
 8009b20:	bd80      	pop	{r7, pc}
 8009b22:	bf00      	nop
 8009b24:	0800e9b1 	.word	0x0800e9b1
 8009b28:	0800d655 	.word	0x0800d655

08009b2c <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 8009b2c:	b580      	push	{r7, lr}
 8009b2e:	b084      	sub	sp, #16
 8009b30:	af00      	add	r7, sp, #0
 8009b32:	60f8      	str	r0, [r7, #12]
 8009b34:	60b9      	str	r1, [r7, #8]
 8009b36:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 8009b38:	4806      	ldr	r0, [pc, #24]	; (8009b54 <tcpip_send_msg_wait_sem+0x28>)
 8009b3a:	f005 f961 	bl	800ee00 <sys_mutex_lock>
  fn(apimsg);
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	68b8      	ldr	r0, [r7, #8]
 8009b42:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 8009b44:	4803      	ldr	r0, [pc, #12]	; (8009b54 <tcpip_send_msg_wait_sem+0x28>)
 8009b46:	f005 f96a 	bl	800ee1e <sys_mutex_unlock>
  return ERR_OK;
 8009b4a:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 8009b4c:	4618      	mov	r0, r3
 8009b4e:	3710      	adds	r7, #16
 8009b50:	46bd      	mov	sp, r7
 8009b52:	bd80      	pop	{r7, pc}
 8009b54:	20007b04 	.word	0x20007b04

08009b58 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 8009b58:	b580      	push	{r7, lr}
 8009b5a:	b084      	sub	sp, #16
 8009b5c:	af02      	add	r7, sp, #8
 8009b5e:	6078      	str	r0, [r7, #4]
 8009b60:	6039      	str	r1, [r7, #0]
  lwip_init();
 8009b62:	f000 f871 	bl	8009c48 <lwip_init>

  tcpip_init_done = initfunc;
 8009b66:	4a17      	ldr	r2, [pc, #92]	; (8009bc4 <tcpip_init+0x6c>)
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 8009b6c:	4a16      	ldr	r2, [pc, #88]	; (8009bc8 <tcpip_init+0x70>)
 8009b6e:	683b      	ldr	r3, [r7, #0]
 8009b70:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8009b72:	2106      	movs	r1, #6
 8009b74:	4815      	ldr	r0, [pc, #84]	; (8009bcc <tcpip_init+0x74>)
 8009b76:	f004 fff1 	bl	800eb5c <sys_mbox_new>
 8009b7a:	4603      	mov	r3, r0
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d006      	beq.n	8009b8e <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8009b80:	4b13      	ldr	r3, [pc, #76]	; (8009bd0 <tcpip_init+0x78>)
 8009b82:	f240 2261 	movw	r2, #609	; 0x261
 8009b86:	4913      	ldr	r1, [pc, #76]	; (8009bd4 <tcpip_init+0x7c>)
 8009b88:	4813      	ldr	r0, [pc, #76]	; (8009bd8 <tcpip_init+0x80>)
 8009b8a:	f005 fa13 	bl	800efb4 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8009b8e:	4813      	ldr	r0, [pc, #76]	; (8009bdc <tcpip_init+0x84>)
 8009b90:	f005 f91a 	bl	800edc8 <sys_mutex_new>
 8009b94:	4603      	mov	r3, r0
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d006      	beq.n	8009ba8 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 8009b9a:	4b0d      	ldr	r3, [pc, #52]	; (8009bd0 <tcpip_init+0x78>)
 8009b9c:	f240 2265 	movw	r2, #613	; 0x265
 8009ba0:	490f      	ldr	r1, [pc, #60]	; (8009be0 <tcpip_init+0x88>)
 8009ba2:	480d      	ldr	r0, [pc, #52]	; (8009bd8 <tcpip_init+0x80>)
 8009ba4:	f005 fa06 	bl	800efb4 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 8009ba8:	2300      	movs	r3, #0
 8009baa:	9300      	str	r3, [sp, #0]
 8009bac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009bb0:	2200      	movs	r2, #0
 8009bb2:	490c      	ldr	r1, [pc, #48]	; (8009be4 <tcpip_init+0x8c>)
 8009bb4:	480c      	ldr	r0, [pc, #48]	; (8009be8 <tcpip_init+0x90>)
 8009bb6:	f005 f93f 	bl	800ee38 <sys_thread_new>
}
 8009bba:	bf00      	nop
 8009bbc:	3708      	adds	r7, #8
 8009bbe:	46bd      	mov	sp, r7
 8009bc0:	bd80      	pop	{r7, pc}
 8009bc2:	bf00      	nop
 8009bc4:	2000475c 	.word	0x2000475c
 8009bc8:	20004760 	.word	0x20004760
 8009bcc:	20004764 	.word	0x20004764
 8009bd0:	0801091c 	.word	0x0801091c
 8009bd4:	080109a4 	.word	0x080109a4
 8009bd8:	0801096c 	.word	0x0801096c
 8009bdc:	20007b04 	.word	0x20007b04
 8009be0:	080109c8 	.word	0x080109c8
 8009be4:	08009971 	.word	0x08009971
 8009be8:	080109ec 	.word	0x080109ec

08009bec <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8009bec:	b480      	push	{r7}
 8009bee:	b083      	sub	sp, #12
 8009bf0:	af00      	add	r7, sp, #0
 8009bf2:	4603      	mov	r3, r0
 8009bf4:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8009bf6:	88fb      	ldrh	r3, [r7, #6]
 8009bf8:	021b      	lsls	r3, r3, #8
 8009bfa:	b21a      	sxth	r2, r3
 8009bfc:	88fb      	ldrh	r3, [r7, #6]
 8009bfe:	0a1b      	lsrs	r3, r3, #8
 8009c00:	b29b      	uxth	r3, r3
 8009c02:	b21b      	sxth	r3, r3
 8009c04:	4313      	orrs	r3, r2
 8009c06:	b21b      	sxth	r3, r3
 8009c08:	b29b      	uxth	r3, r3
}
 8009c0a:	4618      	mov	r0, r3
 8009c0c:	370c      	adds	r7, #12
 8009c0e:	46bd      	mov	sp, r7
 8009c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c14:	4770      	bx	lr

08009c16 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8009c16:	b480      	push	{r7}
 8009c18:	b083      	sub	sp, #12
 8009c1a:	af00      	add	r7, sp, #0
 8009c1c:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	061a      	lsls	r2, r3, #24
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	021b      	lsls	r3, r3, #8
 8009c26:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009c2a:	431a      	orrs	r2, r3
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	0a1b      	lsrs	r3, r3, #8
 8009c30:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8009c34:	431a      	orrs	r2, r3
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	0e1b      	lsrs	r3, r3, #24
 8009c3a:	4313      	orrs	r3, r2
}
 8009c3c:	4618      	mov	r0, r3
 8009c3e:	370c      	adds	r7, #12
 8009c40:	46bd      	mov	sp, r7
 8009c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c46:	4770      	bx	lr

08009c48 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8009c48:	b580      	push	{r7, lr}
 8009c4a:	b082      	sub	sp, #8
 8009c4c:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8009c4e:	2300      	movs	r3, #0
 8009c50:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 8009c52:	f005 f8ab 	bl	800edac <sys_init>
#endif /* !NO_SYS */
  mem_init();
 8009c56:	f000 f8d3 	bl	8009e00 <mem_init>
  memp_init();
 8009c5a:	f000 fc2f 	bl	800a4bc <memp_init>
  pbuf_init();
  netif_init();
 8009c5e:	f000 fcf5 	bl	800a64c <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8009c62:	f001 fe99 	bl	800b998 <udp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8009c66:	f001 fddf 	bl	800b828 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8009c6a:	bf00      	nop
 8009c6c:	3708      	adds	r7, #8
 8009c6e:	46bd      	mov	sp, r7
 8009c70:	bd80      	pop	{r7, pc}
	...

08009c74 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8009c74:	b480      	push	{r7}
 8009c76:	b083      	sub	sp, #12
 8009c78:	af00      	add	r7, sp, #0
 8009c7a:	4603      	mov	r3, r0
 8009c7c:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8009c7e:	4b05      	ldr	r3, [pc, #20]	; (8009c94 <ptr_to_mem+0x20>)
 8009c80:	681a      	ldr	r2, [r3, #0]
 8009c82:	88fb      	ldrh	r3, [r7, #6]
 8009c84:	4413      	add	r3, r2
}
 8009c86:	4618      	mov	r0, r3
 8009c88:	370c      	adds	r7, #12
 8009c8a:	46bd      	mov	sp, r7
 8009c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c90:	4770      	bx	lr
 8009c92:	bf00      	nop
 8009c94:	20004768 	.word	0x20004768

08009c98 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8009c98:	b480      	push	{r7}
 8009c9a:	b083      	sub	sp, #12
 8009c9c:	af00      	add	r7, sp, #0
 8009c9e:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	4a05      	ldr	r2, [pc, #20]	; (8009cb8 <mem_to_ptr+0x20>)
 8009ca4:	6812      	ldr	r2, [r2, #0]
 8009ca6:	1a9b      	subs	r3, r3, r2
 8009ca8:	b29b      	uxth	r3, r3
}
 8009caa:	4618      	mov	r0, r3
 8009cac:	370c      	adds	r7, #12
 8009cae:	46bd      	mov	sp, r7
 8009cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cb4:	4770      	bx	lr
 8009cb6:	bf00      	nop
 8009cb8:	20004768 	.word	0x20004768

08009cbc <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8009cbc:	b590      	push	{r4, r7, lr}
 8009cbe:	b085      	sub	sp, #20
 8009cc0:	af00      	add	r7, sp, #0
 8009cc2:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8009cc4:	4b45      	ldr	r3, [pc, #276]	; (8009ddc <plug_holes+0x120>)
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	687a      	ldr	r2, [r7, #4]
 8009cca:	429a      	cmp	r2, r3
 8009ccc:	d206      	bcs.n	8009cdc <plug_holes+0x20>
 8009cce:	4b44      	ldr	r3, [pc, #272]	; (8009de0 <plug_holes+0x124>)
 8009cd0:	f240 12df 	movw	r2, #479	; 0x1df
 8009cd4:	4943      	ldr	r1, [pc, #268]	; (8009de4 <plug_holes+0x128>)
 8009cd6:	4844      	ldr	r0, [pc, #272]	; (8009de8 <plug_holes+0x12c>)
 8009cd8:	f005 f96c 	bl	800efb4 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8009cdc:	4b43      	ldr	r3, [pc, #268]	; (8009dec <plug_holes+0x130>)
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	687a      	ldr	r2, [r7, #4]
 8009ce2:	429a      	cmp	r2, r3
 8009ce4:	d306      	bcc.n	8009cf4 <plug_holes+0x38>
 8009ce6:	4b3e      	ldr	r3, [pc, #248]	; (8009de0 <plug_holes+0x124>)
 8009ce8:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8009cec:	4940      	ldr	r1, [pc, #256]	; (8009df0 <plug_holes+0x134>)
 8009cee:	483e      	ldr	r0, [pc, #248]	; (8009de8 <plug_holes+0x12c>)
 8009cf0:	f005 f960 	bl	800efb4 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	791b      	ldrb	r3, [r3, #4]
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d006      	beq.n	8009d0a <plug_holes+0x4e>
 8009cfc:	4b38      	ldr	r3, [pc, #224]	; (8009de0 <plug_holes+0x124>)
 8009cfe:	f240 12e1 	movw	r2, #481	; 0x1e1
 8009d02:	493c      	ldr	r1, [pc, #240]	; (8009df4 <plug_holes+0x138>)
 8009d04:	4838      	ldr	r0, [pc, #224]	; (8009de8 <plug_holes+0x12c>)
 8009d06:	f005 f955 	bl	800efb4 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	881b      	ldrh	r3, [r3, #0]
 8009d0e:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8009d12:	d906      	bls.n	8009d22 <plug_holes+0x66>
 8009d14:	4b32      	ldr	r3, [pc, #200]	; (8009de0 <plug_holes+0x124>)
 8009d16:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8009d1a:	4937      	ldr	r1, [pc, #220]	; (8009df8 <plug_holes+0x13c>)
 8009d1c:	4832      	ldr	r0, [pc, #200]	; (8009de8 <plug_holes+0x12c>)
 8009d1e:	f005 f949 	bl	800efb4 <iprintf>

  nmem = ptr_to_mem(mem->next);
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	881b      	ldrh	r3, [r3, #0]
 8009d26:	4618      	mov	r0, r3
 8009d28:	f7ff ffa4 	bl	8009c74 <ptr_to_mem>
 8009d2c:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8009d2e:	687a      	ldr	r2, [r7, #4]
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	429a      	cmp	r2, r3
 8009d34:	d024      	beq.n	8009d80 <plug_holes+0xc4>
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	791b      	ldrb	r3, [r3, #4]
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d120      	bne.n	8009d80 <plug_holes+0xc4>
 8009d3e:	4b2b      	ldr	r3, [pc, #172]	; (8009dec <plug_holes+0x130>)
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	68fa      	ldr	r2, [r7, #12]
 8009d44:	429a      	cmp	r2, r3
 8009d46:	d01b      	beq.n	8009d80 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8009d48:	4b2c      	ldr	r3, [pc, #176]	; (8009dfc <plug_holes+0x140>)
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	68fa      	ldr	r2, [r7, #12]
 8009d4e:	429a      	cmp	r2, r3
 8009d50:	d102      	bne.n	8009d58 <plug_holes+0x9c>
      lfree = mem;
 8009d52:	4a2a      	ldr	r2, [pc, #168]	; (8009dfc <plug_holes+0x140>)
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	881a      	ldrh	r2, [r3, #0]
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	881b      	ldrh	r3, [r3, #0]
 8009d64:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8009d68:	d00a      	beq.n	8009d80 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	881b      	ldrh	r3, [r3, #0]
 8009d6e:	4618      	mov	r0, r3
 8009d70:	f7ff ff80 	bl	8009c74 <ptr_to_mem>
 8009d74:	4604      	mov	r4, r0
 8009d76:	6878      	ldr	r0, [r7, #4]
 8009d78:	f7ff ff8e 	bl	8009c98 <mem_to_ptr>
 8009d7c:	4603      	mov	r3, r0
 8009d7e:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	885b      	ldrh	r3, [r3, #2]
 8009d84:	4618      	mov	r0, r3
 8009d86:	f7ff ff75 	bl	8009c74 <ptr_to_mem>
 8009d8a:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8009d8c:	68ba      	ldr	r2, [r7, #8]
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	429a      	cmp	r2, r3
 8009d92:	d01f      	beq.n	8009dd4 <plug_holes+0x118>
 8009d94:	68bb      	ldr	r3, [r7, #8]
 8009d96:	791b      	ldrb	r3, [r3, #4]
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d11b      	bne.n	8009dd4 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8009d9c:	4b17      	ldr	r3, [pc, #92]	; (8009dfc <plug_holes+0x140>)
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	687a      	ldr	r2, [r7, #4]
 8009da2:	429a      	cmp	r2, r3
 8009da4:	d102      	bne.n	8009dac <plug_holes+0xf0>
      lfree = pmem;
 8009da6:	4a15      	ldr	r2, [pc, #84]	; (8009dfc <plug_holes+0x140>)
 8009da8:	68bb      	ldr	r3, [r7, #8]
 8009daa:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	881a      	ldrh	r2, [r3, #0]
 8009db0:	68bb      	ldr	r3, [r7, #8]
 8009db2:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	881b      	ldrh	r3, [r3, #0]
 8009db8:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8009dbc:	d00a      	beq.n	8009dd4 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	881b      	ldrh	r3, [r3, #0]
 8009dc2:	4618      	mov	r0, r3
 8009dc4:	f7ff ff56 	bl	8009c74 <ptr_to_mem>
 8009dc8:	4604      	mov	r4, r0
 8009dca:	68b8      	ldr	r0, [r7, #8]
 8009dcc:	f7ff ff64 	bl	8009c98 <mem_to_ptr>
 8009dd0:	4603      	mov	r3, r0
 8009dd2:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8009dd4:	bf00      	nop
 8009dd6:	3714      	adds	r7, #20
 8009dd8:	46bd      	mov	sp, r7
 8009dda:	bd90      	pop	{r4, r7, pc}
 8009ddc:	20004768 	.word	0x20004768
 8009de0:	080109fc 	.word	0x080109fc
 8009de4:	08010a2c 	.word	0x08010a2c
 8009de8:	08010a44 	.word	0x08010a44
 8009dec:	2000476c 	.word	0x2000476c
 8009df0:	08010a6c 	.word	0x08010a6c
 8009df4:	08010a88 	.word	0x08010a88
 8009df8:	08010aa4 	.word	0x08010aa4
 8009dfc:	20004774 	.word	0x20004774

08009e00 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8009e00:	b580      	push	{r7, lr}
 8009e02:	b082      	sub	sp, #8
 8009e04:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8009e06:	4b1f      	ldr	r3, [pc, #124]	; (8009e84 <mem_init+0x84>)
 8009e08:	3303      	adds	r3, #3
 8009e0a:	f023 0303 	bic.w	r3, r3, #3
 8009e0e:	461a      	mov	r2, r3
 8009e10:	4b1d      	ldr	r3, [pc, #116]	; (8009e88 <mem_init+0x88>)
 8009e12:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8009e14:	4b1c      	ldr	r3, [pc, #112]	; (8009e88 <mem_init+0x88>)
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8009e20:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	2200      	movs	r2, #0
 8009e26:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	2200      	movs	r2, #0
 8009e2c:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8009e2e:	f44f 5020 	mov.w	r0, #10240	; 0x2800
 8009e32:	f7ff ff1f 	bl	8009c74 <ptr_to_mem>
 8009e36:	4602      	mov	r2, r0
 8009e38:	4b14      	ldr	r3, [pc, #80]	; (8009e8c <mem_init+0x8c>)
 8009e3a:	601a      	str	r2, [r3, #0]
  ram_end->used = 1;
 8009e3c:	4b13      	ldr	r3, [pc, #76]	; (8009e8c <mem_init+0x8c>)
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	2201      	movs	r2, #1
 8009e42:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8009e44:	4b11      	ldr	r3, [pc, #68]	; (8009e8c <mem_init+0x8c>)
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8009e4c:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8009e4e:	4b0f      	ldr	r3, [pc, #60]	; (8009e8c <mem_init+0x8c>)
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8009e56:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8009e58:	4b0b      	ldr	r3, [pc, #44]	; (8009e88 <mem_init+0x88>)
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	4a0c      	ldr	r2, [pc, #48]	; (8009e90 <mem_init+0x90>)
 8009e5e:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8009e60:	480c      	ldr	r0, [pc, #48]	; (8009e94 <mem_init+0x94>)
 8009e62:	f004 ffb1 	bl	800edc8 <sys_mutex_new>
 8009e66:	4603      	mov	r3, r0
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d006      	beq.n	8009e7a <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 8009e6c:	4b0a      	ldr	r3, [pc, #40]	; (8009e98 <mem_init+0x98>)
 8009e6e:	f240 221f 	movw	r2, #543	; 0x21f
 8009e72:	490a      	ldr	r1, [pc, #40]	; (8009e9c <mem_init+0x9c>)
 8009e74:	480a      	ldr	r0, [pc, #40]	; (8009ea0 <mem_init+0xa0>)
 8009e76:	f005 f89d 	bl	800efb4 <iprintf>
  }
}
 8009e7a:	bf00      	nop
 8009e7c:	3708      	adds	r7, #8
 8009e7e:	46bd      	mov	sp, r7
 8009e80:	bd80      	pop	{r7, pc}
 8009e82:	bf00      	nop
 8009e84:	20007b20 	.word	0x20007b20
 8009e88:	20004768 	.word	0x20004768
 8009e8c:	2000476c 	.word	0x2000476c
 8009e90:	20004774 	.word	0x20004774
 8009e94:	20004770 	.word	0x20004770
 8009e98:	080109fc 	.word	0x080109fc
 8009e9c:	08010ad0 	.word	0x08010ad0
 8009ea0:	08010a44 	.word	0x08010a44

08009ea4 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8009ea4:	b580      	push	{r7, lr}
 8009ea6:	b086      	sub	sp, #24
 8009ea8:	af00      	add	r7, sp, #0
 8009eaa:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8009eac:	6878      	ldr	r0, [r7, #4]
 8009eae:	f7ff fef3 	bl	8009c98 <mem_to_ptr>
 8009eb2:	4603      	mov	r3, r0
 8009eb4:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	881b      	ldrh	r3, [r3, #0]
 8009eba:	4618      	mov	r0, r3
 8009ebc:	f7ff feda 	bl	8009c74 <ptr_to_mem>
 8009ec0:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	885b      	ldrh	r3, [r3, #2]
 8009ec6:	4618      	mov	r0, r3
 8009ec8:	f7ff fed4 	bl	8009c74 <ptr_to_mem>
 8009ecc:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	881b      	ldrh	r3, [r3, #0]
 8009ed2:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8009ed6:	d818      	bhi.n	8009f0a <mem_link_valid+0x66>
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	885b      	ldrh	r3, [r3, #2]
 8009edc:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8009ee0:	d813      	bhi.n	8009f0a <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8009ee6:	8afa      	ldrh	r2, [r7, #22]
 8009ee8:	429a      	cmp	r2, r3
 8009eea:	d004      	beq.n	8009ef6 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	881b      	ldrh	r3, [r3, #0]
 8009ef0:	8afa      	ldrh	r2, [r7, #22]
 8009ef2:	429a      	cmp	r2, r3
 8009ef4:	d109      	bne.n	8009f0a <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8009ef6:	4b08      	ldr	r3, [pc, #32]	; (8009f18 <mem_link_valid+0x74>)
 8009ef8:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8009efa:	693a      	ldr	r2, [r7, #16]
 8009efc:	429a      	cmp	r2, r3
 8009efe:	d006      	beq.n	8009f0e <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8009f00:	693b      	ldr	r3, [r7, #16]
 8009f02:	885b      	ldrh	r3, [r3, #2]
 8009f04:	8afa      	ldrh	r2, [r7, #22]
 8009f06:	429a      	cmp	r2, r3
 8009f08:	d001      	beq.n	8009f0e <mem_link_valid+0x6a>
    return 0;
 8009f0a:	2300      	movs	r3, #0
 8009f0c:	e000      	b.n	8009f10 <mem_link_valid+0x6c>
  }
  return 1;
 8009f0e:	2301      	movs	r3, #1
}
 8009f10:	4618      	mov	r0, r3
 8009f12:	3718      	adds	r7, #24
 8009f14:	46bd      	mov	sp, r7
 8009f16:	bd80      	pop	{r7, pc}
 8009f18:	2000476c 	.word	0x2000476c

08009f1c <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8009f1c:	b580      	push	{r7, lr}
 8009f1e:	b088      	sub	sp, #32
 8009f20:	af00      	add	r7, sp, #0
 8009f22:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d070      	beq.n	800a00c <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	f003 0303 	and.w	r3, r3, #3
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d00d      	beq.n	8009f50 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8009f34:	4b37      	ldr	r3, [pc, #220]	; (800a014 <mem_free+0xf8>)
 8009f36:	f240 2273 	movw	r2, #627	; 0x273
 8009f3a:	4937      	ldr	r1, [pc, #220]	; (800a018 <mem_free+0xfc>)
 8009f3c:	4837      	ldr	r0, [pc, #220]	; (800a01c <mem_free+0x100>)
 8009f3e:	f005 f839 	bl	800efb4 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8009f42:	f004 ff9f 	bl	800ee84 <sys_arch_protect>
 8009f46:	60f8      	str	r0, [r7, #12]
 8009f48:	68f8      	ldr	r0, [r7, #12]
 8009f4a:	f004 ffa9 	bl	800eea0 <sys_arch_unprotect>
    return;
 8009f4e:	e05e      	b.n	800a00e <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	3b08      	subs	r3, #8
 8009f54:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8009f56:	4b32      	ldr	r3, [pc, #200]	; (800a020 <mem_free+0x104>)
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	69fa      	ldr	r2, [r7, #28]
 8009f5c:	429a      	cmp	r2, r3
 8009f5e:	d306      	bcc.n	8009f6e <mem_free+0x52>
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	f103 020c 	add.w	r2, r3, #12
 8009f66:	4b2f      	ldr	r3, [pc, #188]	; (800a024 <mem_free+0x108>)
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	429a      	cmp	r2, r3
 8009f6c:	d90d      	bls.n	8009f8a <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8009f6e:	4b29      	ldr	r3, [pc, #164]	; (800a014 <mem_free+0xf8>)
 8009f70:	f240 227f 	movw	r2, #639	; 0x27f
 8009f74:	492c      	ldr	r1, [pc, #176]	; (800a028 <mem_free+0x10c>)
 8009f76:	4829      	ldr	r0, [pc, #164]	; (800a01c <mem_free+0x100>)
 8009f78:	f005 f81c 	bl	800efb4 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8009f7c:	f004 ff82 	bl	800ee84 <sys_arch_protect>
 8009f80:	6138      	str	r0, [r7, #16]
 8009f82:	6938      	ldr	r0, [r7, #16]
 8009f84:	f004 ff8c 	bl	800eea0 <sys_arch_unprotect>
    return;
 8009f88:	e041      	b.n	800a00e <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8009f8a:	4828      	ldr	r0, [pc, #160]	; (800a02c <mem_free+0x110>)
 8009f8c:	f004 ff38 	bl	800ee00 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 8009f90:	69fb      	ldr	r3, [r7, #28]
 8009f92:	791b      	ldrb	r3, [r3, #4]
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d110      	bne.n	8009fba <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8009f98:	4b1e      	ldr	r3, [pc, #120]	; (800a014 <mem_free+0xf8>)
 8009f9a:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8009f9e:	4924      	ldr	r1, [pc, #144]	; (800a030 <mem_free+0x114>)
 8009fa0:	481e      	ldr	r0, [pc, #120]	; (800a01c <mem_free+0x100>)
 8009fa2:	f005 f807 	bl	800efb4 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8009fa6:	4821      	ldr	r0, [pc, #132]	; (800a02c <mem_free+0x110>)
 8009fa8:	f004 ff39 	bl	800ee1e <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8009fac:	f004 ff6a 	bl	800ee84 <sys_arch_protect>
 8009fb0:	6178      	str	r0, [r7, #20]
 8009fb2:	6978      	ldr	r0, [r7, #20]
 8009fb4:	f004 ff74 	bl	800eea0 <sys_arch_unprotect>
    return;
 8009fb8:	e029      	b.n	800a00e <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 8009fba:	69f8      	ldr	r0, [r7, #28]
 8009fbc:	f7ff ff72 	bl	8009ea4 <mem_link_valid>
 8009fc0:	4603      	mov	r3, r0
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d110      	bne.n	8009fe8 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8009fc6:	4b13      	ldr	r3, [pc, #76]	; (800a014 <mem_free+0xf8>)
 8009fc8:	f240 2295 	movw	r2, #661	; 0x295
 8009fcc:	4919      	ldr	r1, [pc, #100]	; (800a034 <mem_free+0x118>)
 8009fce:	4813      	ldr	r0, [pc, #76]	; (800a01c <mem_free+0x100>)
 8009fd0:	f004 fff0 	bl	800efb4 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8009fd4:	4815      	ldr	r0, [pc, #84]	; (800a02c <mem_free+0x110>)
 8009fd6:	f004 ff22 	bl	800ee1e <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8009fda:	f004 ff53 	bl	800ee84 <sys_arch_protect>
 8009fde:	61b8      	str	r0, [r7, #24]
 8009fe0:	69b8      	ldr	r0, [r7, #24]
 8009fe2:	f004 ff5d 	bl	800eea0 <sys_arch_unprotect>
    return;
 8009fe6:	e012      	b.n	800a00e <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 8009fe8:	69fb      	ldr	r3, [r7, #28]
 8009fea:	2200      	movs	r2, #0
 8009fec:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8009fee:	4b12      	ldr	r3, [pc, #72]	; (800a038 <mem_free+0x11c>)
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	69fa      	ldr	r2, [r7, #28]
 8009ff4:	429a      	cmp	r2, r3
 8009ff6:	d202      	bcs.n	8009ffe <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8009ff8:	4a0f      	ldr	r2, [pc, #60]	; (800a038 <mem_free+0x11c>)
 8009ffa:	69fb      	ldr	r3, [r7, #28]
 8009ffc:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8009ffe:	69f8      	ldr	r0, [r7, #28]
 800a000:	f7ff fe5c 	bl	8009cbc <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800a004:	4809      	ldr	r0, [pc, #36]	; (800a02c <mem_free+0x110>)
 800a006:	f004 ff0a 	bl	800ee1e <sys_mutex_unlock>
 800a00a:	e000      	b.n	800a00e <mem_free+0xf2>
    return;
 800a00c:	bf00      	nop
}
 800a00e:	3720      	adds	r7, #32
 800a010:	46bd      	mov	sp, r7
 800a012:	bd80      	pop	{r7, pc}
 800a014:	080109fc 	.word	0x080109fc
 800a018:	08010aec 	.word	0x08010aec
 800a01c:	08010a44 	.word	0x08010a44
 800a020:	20004768 	.word	0x20004768
 800a024:	2000476c 	.word	0x2000476c
 800a028:	08010b10 	.word	0x08010b10
 800a02c:	20004770 	.word	0x20004770
 800a030:	08010b2c 	.word	0x08010b2c
 800a034:	08010b54 	.word	0x08010b54
 800a038:	20004774 	.word	0x20004774

0800a03c <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800a03c:	b580      	push	{r7, lr}
 800a03e:	b088      	sub	sp, #32
 800a040:	af00      	add	r7, sp, #0
 800a042:	6078      	str	r0, [r7, #4]
 800a044:	460b      	mov	r3, r1
 800a046:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800a048:	887b      	ldrh	r3, [r7, #2]
 800a04a:	3303      	adds	r3, #3
 800a04c:	b29b      	uxth	r3, r3
 800a04e:	f023 0303 	bic.w	r3, r3, #3
 800a052:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800a054:	8bfb      	ldrh	r3, [r7, #30]
 800a056:	2b0b      	cmp	r3, #11
 800a058:	d801      	bhi.n	800a05e <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800a05a:	230c      	movs	r3, #12
 800a05c:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800a05e:	8bfb      	ldrh	r3, [r7, #30]
 800a060:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800a064:	d803      	bhi.n	800a06e <mem_trim+0x32>
 800a066:	8bfa      	ldrh	r2, [r7, #30]
 800a068:	887b      	ldrh	r3, [r7, #2]
 800a06a:	429a      	cmp	r2, r3
 800a06c:	d201      	bcs.n	800a072 <mem_trim+0x36>
    return NULL;
 800a06e:	2300      	movs	r3, #0
 800a070:	e0d8      	b.n	800a224 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800a072:	4b6e      	ldr	r3, [pc, #440]	; (800a22c <mem_trim+0x1f0>)
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	687a      	ldr	r2, [r7, #4]
 800a078:	429a      	cmp	r2, r3
 800a07a:	d304      	bcc.n	800a086 <mem_trim+0x4a>
 800a07c:	4b6c      	ldr	r3, [pc, #432]	; (800a230 <mem_trim+0x1f4>)
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	687a      	ldr	r2, [r7, #4]
 800a082:	429a      	cmp	r2, r3
 800a084:	d306      	bcc.n	800a094 <mem_trim+0x58>
 800a086:	4b6b      	ldr	r3, [pc, #428]	; (800a234 <mem_trim+0x1f8>)
 800a088:	f240 22d2 	movw	r2, #722	; 0x2d2
 800a08c:	496a      	ldr	r1, [pc, #424]	; (800a238 <mem_trim+0x1fc>)
 800a08e:	486b      	ldr	r0, [pc, #428]	; (800a23c <mem_trim+0x200>)
 800a090:	f004 ff90 	bl	800efb4 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800a094:	4b65      	ldr	r3, [pc, #404]	; (800a22c <mem_trim+0x1f0>)
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	687a      	ldr	r2, [r7, #4]
 800a09a:	429a      	cmp	r2, r3
 800a09c:	d304      	bcc.n	800a0a8 <mem_trim+0x6c>
 800a09e:	4b64      	ldr	r3, [pc, #400]	; (800a230 <mem_trim+0x1f4>)
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	687a      	ldr	r2, [r7, #4]
 800a0a4:	429a      	cmp	r2, r3
 800a0a6:	d307      	bcc.n	800a0b8 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800a0a8:	f004 feec 	bl	800ee84 <sys_arch_protect>
 800a0ac:	60b8      	str	r0, [r7, #8]
 800a0ae:	68b8      	ldr	r0, [r7, #8]
 800a0b0:	f004 fef6 	bl	800eea0 <sys_arch_unprotect>
    return rmem;
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	e0b5      	b.n	800a224 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	3b08      	subs	r3, #8
 800a0bc:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800a0be:	69b8      	ldr	r0, [r7, #24]
 800a0c0:	f7ff fdea 	bl	8009c98 <mem_to_ptr>
 800a0c4:	4603      	mov	r3, r0
 800a0c6:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800a0c8:	69bb      	ldr	r3, [r7, #24]
 800a0ca:	881a      	ldrh	r2, [r3, #0]
 800a0cc:	8afb      	ldrh	r3, [r7, #22]
 800a0ce:	1ad3      	subs	r3, r2, r3
 800a0d0:	b29b      	uxth	r3, r3
 800a0d2:	3b08      	subs	r3, #8
 800a0d4:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800a0d6:	8bfa      	ldrh	r2, [r7, #30]
 800a0d8:	8abb      	ldrh	r3, [r7, #20]
 800a0da:	429a      	cmp	r2, r3
 800a0dc:	d906      	bls.n	800a0ec <mem_trim+0xb0>
 800a0de:	4b55      	ldr	r3, [pc, #340]	; (800a234 <mem_trim+0x1f8>)
 800a0e0:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800a0e4:	4956      	ldr	r1, [pc, #344]	; (800a240 <mem_trim+0x204>)
 800a0e6:	4855      	ldr	r0, [pc, #340]	; (800a23c <mem_trim+0x200>)
 800a0e8:	f004 ff64 	bl	800efb4 <iprintf>
  if (newsize > size) {
 800a0ec:	8bfa      	ldrh	r2, [r7, #30]
 800a0ee:	8abb      	ldrh	r3, [r7, #20]
 800a0f0:	429a      	cmp	r2, r3
 800a0f2:	d901      	bls.n	800a0f8 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800a0f4:	2300      	movs	r3, #0
 800a0f6:	e095      	b.n	800a224 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800a0f8:	8bfa      	ldrh	r2, [r7, #30]
 800a0fa:	8abb      	ldrh	r3, [r7, #20]
 800a0fc:	429a      	cmp	r2, r3
 800a0fe:	d101      	bne.n	800a104 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	e08f      	b.n	800a224 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800a104:	484f      	ldr	r0, [pc, #316]	; (800a244 <mem_trim+0x208>)
 800a106:	f004 fe7b 	bl	800ee00 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800a10a:	69bb      	ldr	r3, [r7, #24]
 800a10c:	881b      	ldrh	r3, [r3, #0]
 800a10e:	4618      	mov	r0, r3
 800a110:	f7ff fdb0 	bl	8009c74 <ptr_to_mem>
 800a114:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800a116:	693b      	ldr	r3, [r7, #16]
 800a118:	791b      	ldrb	r3, [r3, #4]
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d13f      	bne.n	800a19e <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800a11e:	69bb      	ldr	r3, [r7, #24]
 800a120:	881b      	ldrh	r3, [r3, #0]
 800a122:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800a126:	d106      	bne.n	800a136 <mem_trim+0xfa>
 800a128:	4b42      	ldr	r3, [pc, #264]	; (800a234 <mem_trim+0x1f8>)
 800a12a:	f240 22f5 	movw	r2, #757	; 0x2f5
 800a12e:	4946      	ldr	r1, [pc, #280]	; (800a248 <mem_trim+0x20c>)
 800a130:	4842      	ldr	r0, [pc, #264]	; (800a23c <mem_trim+0x200>)
 800a132:	f004 ff3f 	bl	800efb4 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800a136:	693b      	ldr	r3, [r7, #16]
 800a138:	881b      	ldrh	r3, [r3, #0]
 800a13a:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800a13c:	8afa      	ldrh	r2, [r7, #22]
 800a13e:	8bfb      	ldrh	r3, [r7, #30]
 800a140:	4413      	add	r3, r2
 800a142:	b29b      	uxth	r3, r3
 800a144:	3308      	adds	r3, #8
 800a146:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800a148:	4b40      	ldr	r3, [pc, #256]	; (800a24c <mem_trim+0x210>)
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	693a      	ldr	r2, [r7, #16]
 800a14e:	429a      	cmp	r2, r3
 800a150:	d106      	bne.n	800a160 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800a152:	89fb      	ldrh	r3, [r7, #14]
 800a154:	4618      	mov	r0, r3
 800a156:	f7ff fd8d 	bl	8009c74 <ptr_to_mem>
 800a15a:	4602      	mov	r2, r0
 800a15c:	4b3b      	ldr	r3, [pc, #236]	; (800a24c <mem_trim+0x210>)
 800a15e:	601a      	str	r2, [r3, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800a160:	89fb      	ldrh	r3, [r7, #14]
 800a162:	4618      	mov	r0, r3
 800a164:	f7ff fd86 	bl	8009c74 <ptr_to_mem>
 800a168:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800a16a:	693b      	ldr	r3, [r7, #16]
 800a16c:	2200      	movs	r2, #0
 800a16e:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800a170:	693b      	ldr	r3, [r7, #16]
 800a172:	89ba      	ldrh	r2, [r7, #12]
 800a174:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800a176:	693b      	ldr	r3, [r7, #16]
 800a178:	8afa      	ldrh	r2, [r7, #22]
 800a17a:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800a17c:	69bb      	ldr	r3, [r7, #24]
 800a17e:	89fa      	ldrh	r2, [r7, #14]
 800a180:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800a182:	693b      	ldr	r3, [r7, #16]
 800a184:	881b      	ldrh	r3, [r3, #0]
 800a186:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800a18a:	d047      	beq.n	800a21c <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800a18c:	693b      	ldr	r3, [r7, #16]
 800a18e:	881b      	ldrh	r3, [r3, #0]
 800a190:	4618      	mov	r0, r3
 800a192:	f7ff fd6f 	bl	8009c74 <ptr_to_mem>
 800a196:	4602      	mov	r2, r0
 800a198:	89fb      	ldrh	r3, [r7, #14]
 800a19a:	8053      	strh	r3, [r2, #2]
 800a19c:	e03e      	b.n	800a21c <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800a19e:	8bfb      	ldrh	r3, [r7, #30]
 800a1a0:	f103 0214 	add.w	r2, r3, #20
 800a1a4:	8abb      	ldrh	r3, [r7, #20]
 800a1a6:	429a      	cmp	r2, r3
 800a1a8:	d838      	bhi.n	800a21c <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800a1aa:	8afa      	ldrh	r2, [r7, #22]
 800a1ac:	8bfb      	ldrh	r3, [r7, #30]
 800a1ae:	4413      	add	r3, r2
 800a1b0:	b29b      	uxth	r3, r3
 800a1b2:	3308      	adds	r3, #8
 800a1b4:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800a1b6:	69bb      	ldr	r3, [r7, #24]
 800a1b8:	881b      	ldrh	r3, [r3, #0]
 800a1ba:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800a1be:	d106      	bne.n	800a1ce <mem_trim+0x192>
 800a1c0:	4b1c      	ldr	r3, [pc, #112]	; (800a234 <mem_trim+0x1f8>)
 800a1c2:	f240 3216 	movw	r2, #790	; 0x316
 800a1c6:	4920      	ldr	r1, [pc, #128]	; (800a248 <mem_trim+0x20c>)
 800a1c8:	481c      	ldr	r0, [pc, #112]	; (800a23c <mem_trim+0x200>)
 800a1ca:	f004 fef3 	bl	800efb4 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800a1ce:	89fb      	ldrh	r3, [r7, #14]
 800a1d0:	4618      	mov	r0, r3
 800a1d2:	f7ff fd4f 	bl	8009c74 <ptr_to_mem>
 800a1d6:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800a1d8:	4b1c      	ldr	r3, [pc, #112]	; (800a24c <mem_trim+0x210>)
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	693a      	ldr	r2, [r7, #16]
 800a1de:	429a      	cmp	r2, r3
 800a1e0:	d202      	bcs.n	800a1e8 <mem_trim+0x1ac>
      lfree = mem2;
 800a1e2:	4a1a      	ldr	r2, [pc, #104]	; (800a24c <mem_trim+0x210>)
 800a1e4:	693b      	ldr	r3, [r7, #16]
 800a1e6:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800a1e8:	693b      	ldr	r3, [r7, #16]
 800a1ea:	2200      	movs	r2, #0
 800a1ec:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800a1ee:	69bb      	ldr	r3, [r7, #24]
 800a1f0:	881a      	ldrh	r2, [r3, #0]
 800a1f2:	693b      	ldr	r3, [r7, #16]
 800a1f4:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800a1f6:	693b      	ldr	r3, [r7, #16]
 800a1f8:	8afa      	ldrh	r2, [r7, #22]
 800a1fa:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800a1fc:	69bb      	ldr	r3, [r7, #24]
 800a1fe:	89fa      	ldrh	r2, [r7, #14]
 800a200:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800a202:	693b      	ldr	r3, [r7, #16]
 800a204:	881b      	ldrh	r3, [r3, #0]
 800a206:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800a20a:	d007      	beq.n	800a21c <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800a20c:	693b      	ldr	r3, [r7, #16]
 800a20e:	881b      	ldrh	r3, [r3, #0]
 800a210:	4618      	mov	r0, r3
 800a212:	f7ff fd2f 	bl	8009c74 <ptr_to_mem>
 800a216:	4602      	mov	r2, r0
 800a218:	89fb      	ldrh	r3, [r7, #14]
 800a21a:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800a21c:	4809      	ldr	r0, [pc, #36]	; (800a244 <mem_trim+0x208>)
 800a21e:	f004 fdfe 	bl	800ee1e <sys_mutex_unlock>
  return rmem;
 800a222:	687b      	ldr	r3, [r7, #4]
}
 800a224:	4618      	mov	r0, r3
 800a226:	3720      	adds	r7, #32
 800a228:	46bd      	mov	sp, r7
 800a22a:	bd80      	pop	{r7, pc}
 800a22c:	20004768 	.word	0x20004768
 800a230:	2000476c 	.word	0x2000476c
 800a234:	080109fc 	.word	0x080109fc
 800a238:	08010b88 	.word	0x08010b88
 800a23c:	08010a44 	.word	0x08010a44
 800a240:	08010ba0 	.word	0x08010ba0
 800a244:	20004770 	.word	0x20004770
 800a248:	08010bc0 	.word	0x08010bc0
 800a24c:	20004774 	.word	0x20004774

0800a250 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800a250:	b580      	push	{r7, lr}
 800a252:	b088      	sub	sp, #32
 800a254:	af00      	add	r7, sp, #0
 800a256:	4603      	mov	r3, r0
 800a258:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800a25a:	88fb      	ldrh	r3, [r7, #6]
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d101      	bne.n	800a264 <mem_malloc+0x14>
    return NULL;
 800a260:	2300      	movs	r3, #0
 800a262:	e0e2      	b.n	800a42a <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800a264:	88fb      	ldrh	r3, [r7, #6]
 800a266:	3303      	adds	r3, #3
 800a268:	b29b      	uxth	r3, r3
 800a26a:	f023 0303 	bic.w	r3, r3, #3
 800a26e:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800a270:	8bbb      	ldrh	r3, [r7, #28]
 800a272:	2b0b      	cmp	r3, #11
 800a274:	d801      	bhi.n	800a27a <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800a276:	230c      	movs	r3, #12
 800a278:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800a27a:	8bbb      	ldrh	r3, [r7, #28]
 800a27c:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800a280:	d803      	bhi.n	800a28a <mem_malloc+0x3a>
 800a282:	8bba      	ldrh	r2, [r7, #28]
 800a284:	88fb      	ldrh	r3, [r7, #6]
 800a286:	429a      	cmp	r2, r3
 800a288:	d201      	bcs.n	800a28e <mem_malloc+0x3e>
    return NULL;
 800a28a:	2300      	movs	r3, #0
 800a28c:	e0cd      	b.n	800a42a <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800a28e:	4869      	ldr	r0, [pc, #420]	; (800a434 <mem_malloc+0x1e4>)
 800a290:	f004 fdb6 	bl	800ee00 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800a294:	4b68      	ldr	r3, [pc, #416]	; (800a438 <mem_malloc+0x1e8>)
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	4618      	mov	r0, r3
 800a29a:	f7ff fcfd 	bl	8009c98 <mem_to_ptr>
 800a29e:	4603      	mov	r3, r0
 800a2a0:	83fb      	strh	r3, [r7, #30]
 800a2a2:	e0b7      	b.n	800a414 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800a2a4:	8bfb      	ldrh	r3, [r7, #30]
 800a2a6:	4618      	mov	r0, r3
 800a2a8:	f7ff fce4 	bl	8009c74 <ptr_to_mem>
 800a2ac:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800a2ae:	697b      	ldr	r3, [r7, #20]
 800a2b0:	791b      	ldrb	r3, [r3, #4]
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	f040 80a7 	bne.w	800a406 <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800a2b8:	697b      	ldr	r3, [r7, #20]
 800a2ba:	881b      	ldrh	r3, [r3, #0]
 800a2bc:	461a      	mov	r2, r3
 800a2be:	8bfb      	ldrh	r3, [r7, #30]
 800a2c0:	1ad3      	subs	r3, r2, r3
 800a2c2:	f1a3 0208 	sub.w	r2, r3, #8
 800a2c6:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800a2c8:	429a      	cmp	r2, r3
 800a2ca:	f0c0 809c 	bcc.w	800a406 <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800a2ce:	697b      	ldr	r3, [r7, #20]
 800a2d0:	881b      	ldrh	r3, [r3, #0]
 800a2d2:	461a      	mov	r2, r3
 800a2d4:	8bfb      	ldrh	r3, [r7, #30]
 800a2d6:	1ad3      	subs	r3, r2, r3
 800a2d8:	f1a3 0208 	sub.w	r2, r3, #8
 800a2dc:	8bbb      	ldrh	r3, [r7, #28]
 800a2de:	3314      	adds	r3, #20
 800a2e0:	429a      	cmp	r2, r3
 800a2e2:	d333      	bcc.n	800a34c <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800a2e4:	8bfa      	ldrh	r2, [r7, #30]
 800a2e6:	8bbb      	ldrh	r3, [r7, #28]
 800a2e8:	4413      	add	r3, r2
 800a2ea:	b29b      	uxth	r3, r3
 800a2ec:	3308      	adds	r3, #8
 800a2ee:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800a2f0:	8a7b      	ldrh	r3, [r7, #18]
 800a2f2:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800a2f6:	d106      	bne.n	800a306 <mem_malloc+0xb6>
 800a2f8:	4b50      	ldr	r3, [pc, #320]	; (800a43c <mem_malloc+0x1ec>)
 800a2fa:	f240 3287 	movw	r2, #903	; 0x387
 800a2fe:	4950      	ldr	r1, [pc, #320]	; (800a440 <mem_malloc+0x1f0>)
 800a300:	4850      	ldr	r0, [pc, #320]	; (800a444 <mem_malloc+0x1f4>)
 800a302:	f004 fe57 	bl	800efb4 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800a306:	8a7b      	ldrh	r3, [r7, #18]
 800a308:	4618      	mov	r0, r3
 800a30a:	f7ff fcb3 	bl	8009c74 <ptr_to_mem>
 800a30e:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	2200      	movs	r2, #0
 800a314:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800a316:	697b      	ldr	r3, [r7, #20]
 800a318:	881a      	ldrh	r2, [r3, #0]
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	8bfa      	ldrh	r2, [r7, #30]
 800a322:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800a324:	697b      	ldr	r3, [r7, #20]
 800a326:	8a7a      	ldrh	r2, [r7, #18]
 800a328:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800a32a:	697b      	ldr	r3, [r7, #20]
 800a32c:	2201      	movs	r2, #1
 800a32e:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	881b      	ldrh	r3, [r3, #0]
 800a334:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800a338:	d00b      	beq.n	800a352 <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	881b      	ldrh	r3, [r3, #0]
 800a33e:	4618      	mov	r0, r3
 800a340:	f7ff fc98 	bl	8009c74 <ptr_to_mem>
 800a344:	4602      	mov	r2, r0
 800a346:	8a7b      	ldrh	r3, [r7, #18]
 800a348:	8053      	strh	r3, [r2, #2]
 800a34a:	e002      	b.n	800a352 <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800a34c:	697b      	ldr	r3, [r7, #20]
 800a34e:	2201      	movs	r2, #1
 800a350:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800a352:	4b39      	ldr	r3, [pc, #228]	; (800a438 <mem_malloc+0x1e8>)
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	697a      	ldr	r2, [r7, #20]
 800a358:	429a      	cmp	r2, r3
 800a35a:	d127      	bne.n	800a3ac <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800a35c:	4b36      	ldr	r3, [pc, #216]	; (800a438 <mem_malloc+0x1e8>)
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800a362:	e005      	b.n	800a370 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800a364:	69bb      	ldr	r3, [r7, #24]
 800a366:	881b      	ldrh	r3, [r3, #0]
 800a368:	4618      	mov	r0, r3
 800a36a:	f7ff fc83 	bl	8009c74 <ptr_to_mem>
 800a36e:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800a370:	69bb      	ldr	r3, [r7, #24]
 800a372:	791b      	ldrb	r3, [r3, #4]
 800a374:	2b00      	cmp	r3, #0
 800a376:	d004      	beq.n	800a382 <mem_malloc+0x132>
 800a378:	4b33      	ldr	r3, [pc, #204]	; (800a448 <mem_malloc+0x1f8>)
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	69ba      	ldr	r2, [r7, #24]
 800a37e:	429a      	cmp	r2, r3
 800a380:	d1f0      	bne.n	800a364 <mem_malloc+0x114>
          }
          lfree = cur;
 800a382:	4a2d      	ldr	r2, [pc, #180]	; (800a438 <mem_malloc+0x1e8>)
 800a384:	69bb      	ldr	r3, [r7, #24]
 800a386:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800a388:	4b2b      	ldr	r3, [pc, #172]	; (800a438 <mem_malloc+0x1e8>)
 800a38a:	681a      	ldr	r2, [r3, #0]
 800a38c:	4b2e      	ldr	r3, [pc, #184]	; (800a448 <mem_malloc+0x1f8>)
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	429a      	cmp	r2, r3
 800a392:	d00b      	beq.n	800a3ac <mem_malloc+0x15c>
 800a394:	4b28      	ldr	r3, [pc, #160]	; (800a438 <mem_malloc+0x1e8>)
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	791b      	ldrb	r3, [r3, #4]
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d006      	beq.n	800a3ac <mem_malloc+0x15c>
 800a39e:	4b27      	ldr	r3, [pc, #156]	; (800a43c <mem_malloc+0x1ec>)
 800a3a0:	f240 32b5 	movw	r2, #949	; 0x3b5
 800a3a4:	4929      	ldr	r1, [pc, #164]	; (800a44c <mem_malloc+0x1fc>)
 800a3a6:	4827      	ldr	r0, [pc, #156]	; (800a444 <mem_malloc+0x1f4>)
 800a3a8:	f004 fe04 	bl	800efb4 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800a3ac:	4821      	ldr	r0, [pc, #132]	; (800a434 <mem_malloc+0x1e4>)
 800a3ae:	f004 fd36 	bl	800ee1e <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800a3b2:	8bba      	ldrh	r2, [r7, #28]
 800a3b4:	697b      	ldr	r3, [r7, #20]
 800a3b6:	4413      	add	r3, r2
 800a3b8:	3308      	adds	r3, #8
 800a3ba:	4a23      	ldr	r2, [pc, #140]	; (800a448 <mem_malloc+0x1f8>)
 800a3bc:	6812      	ldr	r2, [r2, #0]
 800a3be:	4293      	cmp	r3, r2
 800a3c0:	d906      	bls.n	800a3d0 <mem_malloc+0x180>
 800a3c2:	4b1e      	ldr	r3, [pc, #120]	; (800a43c <mem_malloc+0x1ec>)
 800a3c4:	f240 32ba 	movw	r2, #954	; 0x3ba
 800a3c8:	4921      	ldr	r1, [pc, #132]	; (800a450 <mem_malloc+0x200>)
 800a3ca:	481e      	ldr	r0, [pc, #120]	; (800a444 <mem_malloc+0x1f4>)
 800a3cc:	f004 fdf2 	bl	800efb4 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800a3d0:	697b      	ldr	r3, [r7, #20]
 800a3d2:	f003 0303 	and.w	r3, r3, #3
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d006      	beq.n	800a3e8 <mem_malloc+0x198>
 800a3da:	4b18      	ldr	r3, [pc, #96]	; (800a43c <mem_malloc+0x1ec>)
 800a3dc:	f44f 726f 	mov.w	r2, #956	; 0x3bc
 800a3e0:	491c      	ldr	r1, [pc, #112]	; (800a454 <mem_malloc+0x204>)
 800a3e2:	4818      	ldr	r0, [pc, #96]	; (800a444 <mem_malloc+0x1f4>)
 800a3e4:	f004 fde6 	bl	800efb4 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800a3e8:	697b      	ldr	r3, [r7, #20]
 800a3ea:	f003 0303 	and.w	r3, r3, #3
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d006      	beq.n	800a400 <mem_malloc+0x1b0>
 800a3f2:	4b12      	ldr	r3, [pc, #72]	; (800a43c <mem_malloc+0x1ec>)
 800a3f4:	f240 32be 	movw	r2, #958	; 0x3be
 800a3f8:	4917      	ldr	r1, [pc, #92]	; (800a458 <mem_malloc+0x208>)
 800a3fa:	4812      	ldr	r0, [pc, #72]	; (800a444 <mem_malloc+0x1f4>)
 800a3fc:	f004 fdda 	bl	800efb4 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800a400:	697b      	ldr	r3, [r7, #20]
 800a402:	3308      	adds	r3, #8
 800a404:	e011      	b.n	800a42a <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800a406:	8bfb      	ldrh	r3, [r7, #30]
 800a408:	4618      	mov	r0, r3
 800a40a:	f7ff fc33 	bl	8009c74 <ptr_to_mem>
 800a40e:	4603      	mov	r3, r0
 800a410:	881b      	ldrh	r3, [r3, #0]
 800a412:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800a414:	8bfa      	ldrh	r2, [r7, #30]
 800a416:	8bbb      	ldrh	r3, [r7, #28]
 800a418:	f5c3 5320 	rsb	r3, r3, #10240	; 0x2800
 800a41c:	429a      	cmp	r2, r3
 800a41e:	f4ff af41 	bcc.w	800a2a4 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800a422:	4804      	ldr	r0, [pc, #16]	; (800a434 <mem_malloc+0x1e4>)
 800a424:	f004 fcfb 	bl	800ee1e <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800a428:	2300      	movs	r3, #0
}
 800a42a:	4618      	mov	r0, r3
 800a42c:	3720      	adds	r7, #32
 800a42e:	46bd      	mov	sp, r7
 800a430:	bd80      	pop	{r7, pc}
 800a432:	bf00      	nop
 800a434:	20004770 	.word	0x20004770
 800a438:	20004774 	.word	0x20004774
 800a43c:	080109fc 	.word	0x080109fc
 800a440:	08010bc0 	.word	0x08010bc0
 800a444:	08010a44 	.word	0x08010a44
 800a448:	2000476c 	.word	0x2000476c
 800a44c:	08010bd4 	.word	0x08010bd4
 800a450:	08010bf0 	.word	0x08010bf0
 800a454:	08010c20 	.word	0x08010c20
 800a458:	08010c50 	.word	0x08010c50

0800a45c <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800a45c:	b480      	push	{r7}
 800a45e:	b085      	sub	sp, #20
 800a460:	af00      	add	r7, sp, #0
 800a462:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	689b      	ldr	r3, [r3, #8]
 800a468:	2200      	movs	r2, #0
 800a46a:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	685b      	ldr	r3, [r3, #4]
 800a470:	3303      	adds	r3, #3
 800a472:	f023 0303 	bic.w	r3, r3, #3
 800a476:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800a478:	2300      	movs	r3, #0
 800a47a:	60fb      	str	r3, [r7, #12]
 800a47c:	e011      	b.n	800a4a2 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	689b      	ldr	r3, [r3, #8]
 800a482:	681a      	ldr	r2, [r3, #0]
 800a484:	68bb      	ldr	r3, [r7, #8]
 800a486:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	689b      	ldr	r3, [r3, #8]
 800a48c:	68ba      	ldr	r2, [r7, #8]
 800a48e:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	881b      	ldrh	r3, [r3, #0]
 800a494:	461a      	mov	r2, r3
 800a496:	68bb      	ldr	r3, [r7, #8]
 800a498:	4413      	add	r3, r2
 800a49a:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	3301      	adds	r3, #1
 800a4a0:	60fb      	str	r3, [r7, #12]
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	885b      	ldrh	r3, [r3, #2]
 800a4a6:	461a      	mov	r2, r3
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	4293      	cmp	r3, r2
 800a4ac:	dbe7      	blt.n	800a47e <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800a4ae:	bf00      	nop
 800a4b0:	3714      	adds	r7, #20
 800a4b2:	46bd      	mov	sp, r7
 800a4b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b8:	4770      	bx	lr
	...

0800a4bc <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800a4bc:	b580      	push	{r7, lr}
 800a4be:	b082      	sub	sp, #8
 800a4c0:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800a4c2:	2300      	movs	r3, #0
 800a4c4:	80fb      	strh	r3, [r7, #6]
 800a4c6:	e009      	b.n	800a4dc <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800a4c8:	88fb      	ldrh	r3, [r7, #6]
 800a4ca:	4a08      	ldr	r2, [pc, #32]	; (800a4ec <memp_init+0x30>)
 800a4cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a4d0:	4618      	mov	r0, r3
 800a4d2:	f7ff ffc3 	bl	800a45c <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800a4d6:	88fb      	ldrh	r3, [r7, #6]
 800a4d8:	3301      	adds	r3, #1
 800a4da:	80fb      	strh	r3, [r7, #6]
 800a4dc:	88fb      	ldrh	r3, [r7, #6]
 800a4de:	2b09      	cmp	r3, #9
 800a4e0:	d9f2      	bls.n	800a4c8 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800a4e2:	bf00      	nop
 800a4e4:	3708      	adds	r7, #8
 800a4e6:	46bd      	mov	sp, r7
 800a4e8:	bd80      	pop	{r7, pc}
 800a4ea:	bf00      	nop
 800a4ec:	0801206c 	.word	0x0801206c

0800a4f0 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800a4f0:	b580      	push	{r7, lr}
 800a4f2:	b084      	sub	sp, #16
 800a4f4:	af00      	add	r7, sp, #0
 800a4f6:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800a4f8:	f004 fcc4 	bl	800ee84 <sys_arch_protect>
 800a4fc:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	689b      	ldr	r3, [r3, #8]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800a506:	68bb      	ldr	r3, [r7, #8]
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d015      	beq.n	800a538 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	689b      	ldr	r3, [r3, #8]
 800a510:	68ba      	ldr	r2, [r7, #8]
 800a512:	6812      	ldr	r2, [r2, #0]
 800a514:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800a516:	68bb      	ldr	r3, [r7, #8]
 800a518:	f003 0303 	and.w	r3, r3, #3
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d006      	beq.n	800a52e <do_memp_malloc_pool+0x3e>
 800a520:	4b09      	ldr	r3, [pc, #36]	; (800a548 <do_memp_malloc_pool+0x58>)
 800a522:	f240 1219 	movw	r2, #281	; 0x119
 800a526:	4909      	ldr	r1, [pc, #36]	; (800a54c <do_memp_malloc_pool+0x5c>)
 800a528:	4809      	ldr	r0, [pc, #36]	; (800a550 <do_memp_malloc_pool+0x60>)
 800a52a:	f004 fd43 	bl	800efb4 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800a52e:	68f8      	ldr	r0, [r7, #12]
 800a530:	f004 fcb6 	bl	800eea0 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800a534:	68bb      	ldr	r3, [r7, #8]
 800a536:	e003      	b.n	800a540 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800a538:	68f8      	ldr	r0, [r7, #12]
 800a53a:	f004 fcb1 	bl	800eea0 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800a53e:	2300      	movs	r3, #0
}
 800a540:	4618      	mov	r0, r3
 800a542:	3710      	adds	r7, #16
 800a544:	46bd      	mov	sp, r7
 800a546:	bd80      	pop	{r7, pc}
 800a548:	08010c74 	.word	0x08010c74
 800a54c:	08010ca4 	.word	0x08010ca4
 800a550:	08010cc8 	.word	0x08010cc8

0800a554 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800a554:	b580      	push	{r7, lr}
 800a556:	b084      	sub	sp, #16
 800a558:	af00      	add	r7, sp, #0
 800a55a:	4603      	mov	r3, r0
 800a55c:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800a55e:	79fb      	ldrb	r3, [r7, #7]
 800a560:	2b09      	cmp	r3, #9
 800a562:	d908      	bls.n	800a576 <memp_malloc+0x22>
 800a564:	4b0a      	ldr	r3, [pc, #40]	; (800a590 <memp_malloc+0x3c>)
 800a566:	f240 1257 	movw	r2, #343	; 0x157
 800a56a:	490a      	ldr	r1, [pc, #40]	; (800a594 <memp_malloc+0x40>)
 800a56c:	480a      	ldr	r0, [pc, #40]	; (800a598 <memp_malloc+0x44>)
 800a56e:	f004 fd21 	bl	800efb4 <iprintf>
 800a572:	2300      	movs	r3, #0
 800a574:	e008      	b.n	800a588 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800a576:	79fb      	ldrb	r3, [r7, #7]
 800a578:	4a08      	ldr	r2, [pc, #32]	; (800a59c <memp_malloc+0x48>)
 800a57a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a57e:	4618      	mov	r0, r3
 800a580:	f7ff ffb6 	bl	800a4f0 <do_memp_malloc_pool>
 800a584:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800a586:	68fb      	ldr	r3, [r7, #12]
}
 800a588:	4618      	mov	r0, r3
 800a58a:	3710      	adds	r7, #16
 800a58c:	46bd      	mov	sp, r7
 800a58e:	bd80      	pop	{r7, pc}
 800a590:	08010c74 	.word	0x08010c74
 800a594:	08010d04 	.word	0x08010d04
 800a598:	08010cc8 	.word	0x08010cc8
 800a59c:	0801206c 	.word	0x0801206c

0800a5a0 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800a5a0:	b580      	push	{r7, lr}
 800a5a2:	b084      	sub	sp, #16
 800a5a4:	af00      	add	r7, sp, #0
 800a5a6:	6078      	str	r0, [r7, #4]
 800a5a8:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800a5aa:	683b      	ldr	r3, [r7, #0]
 800a5ac:	f003 0303 	and.w	r3, r3, #3
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d006      	beq.n	800a5c2 <do_memp_free_pool+0x22>
 800a5b4:	4b0d      	ldr	r3, [pc, #52]	; (800a5ec <do_memp_free_pool+0x4c>)
 800a5b6:	f240 126d 	movw	r2, #365	; 0x16d
 800a5ba:	490d      	ldr	r1, [pc, #52]	; (800a5f0 <do_memp_free_pool+0x50>)
 800a5bc:	480d      	ldr	r0, [pc, #52]	; (800a5f4 <do_memp_free_pool+0x54>)
 800a5be:	f004 fcf9 	bl	800efb4 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800a5c2:	683b      	ldr	r3, [r7, #0]
 800a5c4:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800a5c6:	f004 fc5d 	bl	800ee84 <sys_arch_protect>
 800a5ca:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	689b      	ldr	r3, [r3, #8]
 800a5d0:	681a      	ldr	r2, [r3, #0]
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	689b      	ldr	r3, [r3, #8]
 800a5da:	68fa      	ldr	r2, [r7, #12]
 800a5dc:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800a5de:	68b8      	ldr	r0, [r7, #8]
 800a5e0:	f004 fc5e 	bl	800eea0 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800a5e4:	bf00      	nop
 800a5e6:	3710      	adds	r7, #16
 800a5e8:	46bd      	mov	sp, r7
 800a5ea:	bd80      	pop	{r7, pc}
 800a5ec:	08010c74 	.word	0x08010c74
 800a5f0:	08010d24 	.word	0x08010d24
 800a5f4:	08010cc8 	.word	0x08010cc8

0800a5f8 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800a5f8:	b580      	push	{r7, lr}
 800a5fa:	b082      	sub	sp, #8
 800a5fc:	af00      	add	r7, sp, #0
 800a5fe:	4603      	mov	r3, r0
 800a600:	6039      	str	r1, [r7, #0]
 800a602:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800a604:	79fb      	ldrb	r3, [r7, #7]
 800a606:	2b09      	cmp	r3, #9
 800a608:	d907      	bls.n	800a61a <memp_free+0x22>
 800a60a:	4b0c      	ldr	r3, [pc, #48]	; (800a63c <memp_free+0x44>)
 800a60c:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800a610:	490b      	ldr	r1, [pc, #44]	; (800a640 <memp_free+0x48>)
 800a612:	480c      	ldr	r0, [pc, #48]	; (800a644 <memp_free+0x4c>)
 800a614:	f004 fcce 	bl	800efb4 <iprintf>
 800a618:	e00c      	b.n	800a634 <memp_free+0x3c>

  if (mem == NULL) {
 800a61a:	683b      	ldr	r3, [r7, #0]
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d008      	beq.n	800a632 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800a620:	79fb      	ldrb	r3, [r7, #7]
 800a622:	4a09      	ldr	r2, [pc, #36]	; (800a648 <memp_free+0x50>)
 800a624:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a628:	6839      	ldr	r1, [r7, #0]
 800a62a:	4618      	mov	r0, r3
 800a62c:	f7ff ffb8 	bl	800a5a0 <do_memp_free_pool>
 800a630:	e000      	b.n	800a634 <memp_free+0x3c>
    return;
 800a632:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800a634:	3708      	adds	r7, #8
 800a636:	46bd      	mov	sp, r7
 800a638:	bd80      	pop	{r7, pc}
 800a63a:	bf00      	nop
 800a63c:	08010c74 	.word	0x08010c74
 800a640:	08010d44 	.word	0x08010d44
 800a644:	08010cc8 	.word	0x08010cc8
 800a648:	0801206c 	.word	0x0801206c

0800a64c <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800a64c:	b480      	push	{r7}
 800a64e:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800a650:	bf00      	nop
 800a652:	46bd      	mov	sp, r7
 800a654:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a658:	4770      	bx	lr
	...

0800a65c <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800a65c:	b580      	push	{r7, lr}
 800a65e:	b086      	sub	sp, #24
 800a660:	af00      	add	r7, sp, #0
 800a662:	60f8      	str	r0, [r7, #12]
 800a664:	60b9      	str	r1, [r7, #8]
 800a666:	607a      	str	r2, [r7, #4]
 800a668:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d108      	bne.n	800a682 <netif_add+0x26>
 800a670:	4b57      	ldr	r3, [pc, #348]	; (800a7d0 <netif_add+0x174>)
 800a672:	f240 1227 	movw	r2, #295	; 0x127
 800a676:	4957      	ldr	r1, [pc, #348]	; (800a7d4 <netif_add+0x178>)
 800a678:	4857      	ldr	r0, [pc, #348]	; (800a7d8 <netif_add+0x17c>)
 800a67a:	f004 fc9b 	bl	800efb4 <iprintf>
 800a67e:	2300      	movs	r3, #0
 800a680:	e0a2      	b.n	800a7c8 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800a682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a684:	2b00      	cmp	r3, #0
 800a686:	d108      	bne.n	800a69a <netif_add+0x3e>
 800a688:	4b51      	ldr	r3, [pc, #324]	; (800a7d0 <netif_add+0x174>)
 800a68a:	f44f 7294 	mov.w	r2, #296	; 0x128
 800a68e:	4953      	ldr	r1, [pc, #332]	; (800a7dc <netif_add+0x180>)
 800a690:	4851      	ldr	r0, [pc, #324]	; (800a7d8 <netif_add+0x17c>)
 800a692:	f004 fc8f 	bl	800efb4 <iprintf>
 800a696:	2300      	movs	r3, #0
 800a698:	e096      	b.n	800a7c8 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800a69a:	68bb      	ldr	r3, [r7, #8]
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d101      	bne.n	800a6a4 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800a6a0:	4b4f      	ldr	r3, [pc, #316]	; (800a7e0 <netif_add+0x184>)
 800a6a2:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d101      	bne.n	800a6ae <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800a6aa:	4b4d      	ldr	r3, [pc, #308]	; (800a7e0 <netif_add+0x184>)
 800a6ac:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800a6ae:	683b      	ldr	r3, [r7, #0]
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d101      	bne.n	800a6b8 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800a6b4:	4b4a      	ldr	r3, [pc, #296]	; (800a7e0 <netif_add+0x184>)
 800a6b6:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	2200      	movs	r2, #0
 800a6bc:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	2200      	movs	r2, #0
 800a6c2:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	2200      	movs	r2, #0
 800a6c8:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	4a45      	ldr	r2, [pc, #276]	; (800a7e4 <netif_add+0x188>)
 800a6ce:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	2200      	movs	r2, #0
 800a6d4:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	2200      	movs	r2, #0
 800a6da:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	2200      	movs	r2, #0
 800a6e2:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	6a3a      	ldr	r2, [r7, #32]
 800a6e8:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800a6ea:	4b3f      	ldr	r3, [pc, #252]	; (800a7e8 <netif_add+0x18c>)
 800a6ec:	781a      	ldrb	r2, [r3, #0]
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a6f8:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800a6fa:	683b      	ldr	r3, [r7, #0]
 800a6fc:	687a      	ldr	r2, [r7, #4]
 800a6fe:	68b9      	ldr	r1, [r7, #8]
 800a700:	68f8      	ldr	r0, [r7, #12]
 800a702:	f000 f90f 	bl	800a924 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800a706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a708:	68f8      	ldr	r0, [r7, #12]
 800a70a:	4798      	blx	r3
 800a70c:	4603      	mov	r3, r0
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d001      	beq.n	800a716 <netif_add+0xba>
    return NULL;
 800a712:	2300      	movs	r3, #0
 800a714:	e058      	b.n	800a7c8 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a71c:	2bff      	cmp	r3, #255	; 0xff
 800a71e:	d103      	bne.n	800a728 <netif_add+0xcc>
        netif->num = 0;
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	2200      	movs	r2, #0
 800a724:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 800a728:	2300      	movs	r3, #0
 800a72a:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800a72c:	4b2f      	ldr	r3, [pc, #188]	; (800a7ec <netif_add+0x190>)
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	617b      	str	r3, [r7, #20]
 800a732:	e02b      	b.n	800a78c <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800a734:	697a      	ldr	r2, [r7, #20]
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	429a      	cmp	r2, r3
 800a73a:	d106      	bne.n	800a74a <netif_add+0xee>
 800a73c:	4b24      	ldr	r3, [pc, #144]	; (800a7d0 <netif_add+0x174>)
 800a73e:	f240 128b 	movw	r2, #395	; 0x18b
 800a742:	492b      	ldr	r1, [pc, #172]	; (800a7f0 <netif_add+0x194>)
 800a744:	4824      	ldr	r0, [pc, #144]	; (800a7d8 <netif_add+0x17c>)
 800a746:	f004 fc35 	bl	800efb4 <iprintf>
        num_netifs++;
 800a74a:	693b      	ldr	r3, [r7, #16]
 800a74c:	3301      	adds	r3, #1
 800a74e:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800a750:	693b      	ldr	r3, [r7, #16]
 800a752:	2bff      	cmp	r3, #255	; 0xff
 800a754:	dd06      	ble.n	800a764 <netif_add+0x108>
 800a756:	4b1e      	ldr	r3, [pc, #120]	; (800a7d0 <netif_add+0x174>)
 800a758:	f240 128d 	movw	r2, #397	; 0x18d
 800a75c:	4925      	ldr	r1, [pc, #148]	; (800a7f4 <netif_add+0x198>)
 800a75e:	481e      	ldr	r0, [pc, #120]	; (800a7d8 <netif_add+0x17c>)
 800a760:	f004 fc28 	bl	800efb4 <iprintf>
        if (netif2->num == netif->num) {
 800a764:	697b      	ldr	r3, [r7, #20]
 800a766:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a770:	429a      	cmp	r2, r3
 800a772:	d108      	bne.n	800a786 <netif_add+0x12a>
          netif->num++;
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a77a:	3301      	adds	r3, #1
 800a77c:	b2da      	uxtb	r2, r3
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 800a784:	e005      	b.n	800a792 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800a786:	697b      	ldr	r3, [r7, #20]
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	617b      	str	r3, [r7, #20]
 800a78c:	697b      	ldr	r3, [r7, #20]
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d1d0      	bne.n	800a734 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800a792:	697b      	ldr	r3, [r7, #20]
 800a794:	2b00      	cmp	r3, #0
 800a796:	d1be      	bne.n	800a716 <netif_add+0xba>
  }
  if (netif->num == 254) {
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a79e:	2bfe      	cmp	r3, #254	; 0xfe
 800a7a0:	d103      	bne.n	800a7aa <netif_add+0x14e>
    netif_num = 0;
 800a7a2:	4b11      	ldr	r3, [pc, #68]	; (800a7e8 <netif_add+0x18c>)
 800a7a4:	2200      	movs	r2, #0
 800a7a6:	701a      	strb	r2, [r3, #0]
 800a7a8:	e006      	b.n	800a7b8 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a7b0:	3301      	adds	r3, #1
 800a7b2:	b2da      	uxtb	r2, r3
 800a7b4:	4b0c      	ldr	r3, [pc, #48]	; (800a7e8 <netif_add+0x18c>)
 800a7b6:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800a7b8:	4b0c      	ldr	r3, [pc, #48]	; (800a7ec <netif_add+0x190>)
 800a7ba:	681a      	ldr	r2, [r3, #0]
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800a7c0:	4a0a      	ldr	r2, [pc, #40]	; (800a7ec <netif_add+0x190>)
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800a7c6:	68fb      	ldr	r3, [r7, #12]
}
 800a7c8:	4618      	mov	r0, r3
 800a7ca:	3718      	adds	r7, #24
 800a7cc:	46bd      	mov	sp, r7
 800a7ce:	bd80      	pop	{r7, pc}
 800a7d0:	08010d60 	.word	0x08010d60
 800a7d4:	08010df4 	.word	0x08010df4
 800a7d8:	08010db0 	.word	0x08010db0
 800a7dc:	08010e10 	.word	0x08010e10
 800a7e0:	080120a4 	.word	0x080120a4
 800a7e4:	0800abff 	.word	0x0800abff
 800a7e8:	200047a0 	.word	0x200047a0
 800a7ec:	2000cea4 	.word	0x2000cea4
 800a7f0:	08010e34 	.word	0x08010e34
 800a7f4:	08010e48 	.word	0x08010e48

0800a7f8 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800a7f8:	b580      	push	{r7, lr}
 800a7fa:	b082      	sub	sp, #8
 800a7fc:	af00      	add	r7, sp, #0
 800a7fe:	6078      	str	r0, [r7, #4]
 800a800:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800a802:	6839      	ldr	r1, [r7, #0]
 800a804:	6878      	ldr	r0, [r7, #4]
 800a806:	f001 fd81 	bl	800c30c <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800a80a:	bf00      	nop
 800a80c:	3708      	adds	r7, #8
 800a80e:	46bd      	mov	sp, r7
 800a810:	bd80      	pop	{r7, pc}
	...

0800a814 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800a814:	b580      	push	{r7, lr}
 800a816:	b086      	sub	sp, #24
 800a818:	af00      	add	r7, sp, #0
 800a81a:	60f8      	str	r0, [r7, #12]
 800a81c:	60b9      	str	r1, [r7, #8]
 800a81e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800a820:	68bb      	ldr	r3, [r7, #8]
 800a822:	2b00      	cmp	r3, #0
 800a824:	d106      	bne.n	800a834 <netif_do_set_ipaddr+0x20>
 800a826:	4b1d      	ldr	r3, [pc, #116]	; (800a89c <netif_do_set_ipaddr+0x88>)
 800a828:	f240 12cb 	movw	r2, #459	; 0x1cb
 800a82c:	491c      	ldr	r1, [pc, #112]	; (800a8a0 <netif_do_set_ipaddr+0x8c>)
 800a82e:	481d      	ldr	r0, [pc, #116]	; (800a8a4 <netif_do_set_ipaddr+0x90>)
 800a830:	f004 fbc0 	bl	800efb4 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	2b00      	cmp	r3, #0
 800a838:	d106      	bne.n	800a848 <netif_do_set_ipaddr+0x34>
 800a83a:	4b18      	ldr	r3, [pc, #96]	; (800a89c <netif_do_set_ipaddr+0x88>)
 800a83c:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800a840:	4917      	ldr	r1, [pc, #92]	; (800a8a0 <netif_do_set_ipaddr+0x8c>)
 800a842:	4818      	ldr	r0, [pc, #96]	; (800a8a4 <netif_do_set_ipaddr+0x90>)
 800a844:	f004 fbb6 	bl	800efb4 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800a848:	68bb      	ldr	r3, [r7, #8]
 800a84a:	681a      	ldr	r2, [r3, #0]
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	3304      	adds	r3, #4
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	429a      	cmp	r2, r3
 800a854:	d01c      	beq.n	800a890 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800a856:	68bb      	ldr	r3, [r7, #8]
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	3304      	adds	r3, #4
 800a860:	681a      	ldr	r2, [r3, #0]
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800a866:	f107 0314 	add.w	r3, r7, #20
 800a86a:	4619      	mov	r1, r3
 800a86c:	6878      	ldr	r0, [r7, #4]
 800a86e:	f7ff ffc3 	bl	800a7f8 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800a872:	68bb      	ldr	r3, [r7, #8]
 800a874:	2b00      	cmp	r3, #0
 800a876:	d002      	beq.n	800a87e <netif_do_set_ipaddr+0x6a>
 800a878:	68bb      	ldr	r3, [r7, #8]
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	e000      	b.n	800a880 <netif_do_set_ipaddr+0x6c>
 800a87e:	2300      	movs	r3, #0
 800a880:	68fa      	ldr	r2, [r7, #12]
 800a882:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800a884:	2101      	movs	r1, #1
 800a886:	68f8      	ldr	r0, [r7, #12]
 800a888:	f000 f8d2 	bl	800aa30 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800a88c:	2301      	movs	r3, #1
 800a88e:	e000      	b.n	800a892 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800a890:	2300      	movs	r3, #0
}
 800a892:	4618      	mov	r0, r3
 800a894:	3718      	adds	r7, #24
 800a896:	46bd      	mov	sp, r7
 800a898:	bd80      	pop	{r7, pc}
 800a89a:	bf00      	nop
 800a89c:	08010d60 	.word	0x08010d60
 800a8a0:	08010e78 	.word	0x08010e78
 800a8a4:	08010db0 	.word	0x08010db0

0800a8a8 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800a8a8:	b480      	push	{r7}
 800a8aa:	b085      	sub	sp, #20
 800a8ac:	af00      	add	r7, sp, #0
 800a8ae:	60f8      	str	r0, [r7, #12]
 800a8b0:	60b9      	str	r1, [r7, #8]
 800a8b2:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800a8b4:	68bb      	ldr	r3, [r7, #8]
 800a8b6:	681a      	ldr	r2, [r3, #0]
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	3308      	adds	r3, #8
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	429a      	cmp	r2, r3
 800a8c0:	d00a      	beq.n	800a8d8 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800a8c2:	68bb      	ldr	r3, [r7, #8]
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d002      	beq.n	800a8ce <netif_do_set_netmask+0x26>
 800a8c8:	68bb      	ldr	r3, [r7, #8]
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	e000      	b.n	800a8d0 <netif_do_set_netmask+0x28>
 800a8ce:	2300      	movs	r3, #0
 800a8d0:	68fa      	ldr	r2, [r7, #12]
 800a8d2:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800a8d4:	2301      	movs	r3, #1
 800a8d6:	e000      	b.n	800a8da <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800a8d8:	2300      	movs	r3, #0
}
 800a8da:	4618      	mov	r0, r3
 800a8dc:	3714      	adds	r7, #20
 800a8de:	46bd      	mov	sp, r7
 800a8e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e4:	4770      	bx	lr

0800a8e6 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800a8e6:	b480      	push	{r7}
 800a8e8:	b085      	sub	sp, #20
 800a8ea:	af00      	add	r7, sp, #0
 800a8ec:	60f8      	str	r0, [r7, #12]
 800a8ee:	60b9      	str	r1, [r7, #8]
 800a8f0:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800a8f2:	68bb      	ldr	r3, [r7, #8]
 800a8f4:	681a      	ldr	r2, [r3, #0]
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	330c      	adds	r3, #12
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	429a      	cmp	r2, r3
 800a8fe:	d00a      	beq.n	800a916 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800a900:	68bb      	ldr	r3, [r7, #8]
 800a902:	2b00      	cmp	r3, #0
 800a904:	d002      	beq.n	800a90c <netif_do_set_gw+0x26>
 800a906:	68bb      	ldr	r3, [r7, #8]
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	e000      	b.n	800a90e <netif_do_set_gw+0x28>
 800a90c:	2300      	movs	r3, #0
 800a90e:	68fa      	ldr	r2, [r7, #12]
 800a910:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800a912:	2301      	movs	r3, #1
 800a914:	e000      	b.n	800a918 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800a916:	2300      	movs	r3, #0
}
 800a918:	4618      	mov	r0, r3
 800a91a:	3714      	adds	r7, #20
 800a91c:	46bd      	mov	sp, r7
 800a91e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a922:	4770      	bx	lr

0800a924 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800a924:	b580      	push	{r7, lr}
 800a926:	b088      	sub	sp, #32
 800a928:	af00      	add	r7, sp, #0
 800a92a:	60f8      	str	r0, [r7, #12]
 800a92c:	60b9      	str	r1, [r7, #8]
 800a92e:	607a      	str	r2, [r7, #4]
 800a930:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800a932:	2300      	movs	r3, #0
 800a934:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800a936:	2300      	movs	r3, #0
 800a938:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800a93a:	68bb      	ldr	r3, [r7, #8]
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d101      	bne.n	800a944 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800a940:	4b1c      	ldr	r3, [pc, #112]	; (800a9b4 <netif_set_addr+0x90>)
 800a942:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	2b00      	cmp	r3, #0
 800a948:	d101      	bne.n	800a94e <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800a94a:	4b1a      	ldr	r3, [pc, #104]	; (800a9b4 <netif_set_addr+0x90>)
 800a94c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800a94e:	683b      	ldr	r3, [r7, #0]
 800a950:	2b00      	cmp	r3, #0
 800a952:	d101      	bne.n	800a958 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800a954:	4b17      	ldr	r3, [pc, #92]	; (800a9b4 <netif_set_addr+0x90>)
 800a956:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800a958:	68bb      	ldr	r3, [r7, #8]
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d003      	beq.n	800a966 <netif_set_addr+0x42>
 800a95e:	68bb      	ldr	r3, [r7, #8]
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	2b00      	cmp	r3, #0
 800a964:	d101      	bne.n	800a96a <netif_set_addr+0x46>
 800a966:	2301      	movs	r3, #1
 800a968:	e000      	b.n	800a96c <netif_set_addr+0x48>
 800a96a:	2300      	movs	r3, #0
 800a96c:	617b      	str	r3, [r7, #20]
  if (remove) {
 800a96e:	697b      	ldr	r3, [r7, #20]
 800a970:	2b00      	cmp	r3, #0
 800a972:	d006      	beq.n	800a982 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800a974:	f107 0310 	add.w	r3, r7, #16
 800a978:	461a      	mov	r2, r3
 800a97a:	68b9      	ldr	r1, [r7, #8]
 800a97c:	68f8      	ldr	r0, [r7, #12]
 800a97e:	f7ff ff49 	bl	800a814 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800a982:	69fa      	ldr	r2, [r7, #28]
 800a984:	6879      	ldr	r1, [r7, #4]
 800a986:	68f8      	ldr	r0, [r7, #12]
 800a988:	f7ff ff8e 	bl	800a8a8 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800a98c:	69ba      	ldr	r2, [r7, #24]
 800a98e:	6839      	ldr	r1, [r7, #0]
 800a990:	68f8      	ldr	r0, [r7, #12]
 800a992:	f7ff ffa8 	bl	800a8e6 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800a996:	697b      	ldr	r3, [r7, #20]
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d106      	bne.n	800a9aa <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800a99c:	f107 0310 	add.w	r3, r7, #16
 800a9a0:	461a      	mov	r2, r3
 800a9a2:	68b9      	ldr	r1, [r7, #8]
 800a9a4:	68f8      	ldr	r0, [r7, #12]
 800a9a6:	f7ff ff35 	bl	800a814 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800a9aa:	bf00      	nop
 800a9ac:	3720      	adds	r7, #32
 800a9ae:	46bd      	mov	sp, r7
 800a9b0:	bd80      	pop	{r7, pc}
 800a9b2:	bf00      	nop
 800a9b4:	080120a4 	.word	0x080120a4

0800a9b8 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800a9b8:	b480      	push	{r7}
 800a9ba:	b083      	sub	sp, #12
 800a9bc:	af00      	add	r7, sp, #0
 800a9be:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800a9c0:	4a04      	ldr	r2, [pc, #16]	; (800a9d4 <netif_set_default+0x1c>)
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800a9c6:	bf00      	nop
 800a9c8:	370c      	adds	r7, #12
 800a9ca:	46bd      	mov	sp, r7
 800a9cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9d0:	4770      	bx	lr
 800a9d2:	bf00      	nop
 800a9d4:	2000cea8 	.word	0x2000cea8

0800a9d8 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800a9d8:	b580      	push	{r7, lr}
 800a9da:	b082      	sub	sp, #8
 800a9dc:	af00      	add	r7, sp, #0
 800a9de:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d107      	bne.n	800a9f6 <netif_set_up+0x1e>
 800a9e6:	4b0f      	ldr	r3, [pc, #60]	; (800aa24 <netif_set_up+0x4c>)
 800a9e8:	f44f 7254 	mov.w	r2, #848	; 0x350
 800a9ec:	490e      	ldr	r1, [pc, #56]	; (800aa28 <netif_set_up+0x50>)
 800a9ee:	480f      	ldr	r0, [pc, #60]	; (800aa2c <netif_set_up+0x54>)
 800a9f0:	f004 fae0 	bl	800efb4 <iprintf>
 800a9f4:	e013      	b.n	800aa1e <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a9fc:	f003 0301 	and.w	r3, r3, #1
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d10c      	bne.n	800aa1e <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800aa0a:	f043 0301 	orr.w	r3, r3, #1
 800aa0e:	b2da      	uxtb	r2, r3
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800aa16:	2103      	movs	r1, #3
 800aa18:	6878      	ldr	r0, [r7, #4]
 800aa1a:	f000 f809 	bl	800aa30 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800aa1e:	3708      	adds	r7, #8
 800aa20:	46bd      	mov	sp, r7
 800aa22:	bd80      	pop	{r7, pc}
 800aa24:	08010d60 	.word	0x08010d60
 800aa28:	08010ee8 	.word	0x08010ee8
 800aa2c:	08010db0 	.word	0x08010db0

0800aa30 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800aa30:	b580      	push	{r7, lr}
 800aa32:	b082      	sub	sp, #8
 800aa34:	af00      	add	r7, sp, #0
 800aa36:	6078      	str	r0, [r7, #4]
 800aa38:	460b      	mov	r3, r1
 800aa3a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d106      	bne.n	800aa50 <netif_issue_reports+0x20>
 800aa42:	4b18      	ldr	r3, [pc, #96]	; (800aaa4 <netif_issue_reports+0x74>)
 800aa44:	f240 326d 	movw	r2, #877	; 0x36d
 800aa48:	4917      	ldr	r1, [pc, #92]	; (800aaa8 <netif_issue_reports+0x78>)
 800aa4a:	4818      	ldr	r0, [pc, #96]	; (800aaac <netif_issue_reports+0x7c>)
 800aa4c:	f004 fab2 	bl	800efb4 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800aa56:	f003 0304 	and.w	r3, r3, #4
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d01e      	beq.n	800aa9c <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800aa64:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d017      	beq.n	800aa9c <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800aa6c:	78fb      	ldrb	r3, [r7, #3]
 800aa6e:	f003 0301 	and.w	r3, r3, #1
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d013      	beq.n	800aa9e <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	3304      	adds	r3, #4
 800aa7a:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d00e      	beq.n	800aa9e <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800aa86:	f003 0308 	and.w	r3, r3, #8
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d007      	beq.n	800aa9e <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	3304      	adds	r3, #4
 800aa92:	4619      	mov	r1, r3
 800aa94:	6878      	ldr	r0, [r7, #4]
 800aa96:	f002 fba3 	bl	800d1e0 <etharp_request>
 800aa9a:	e000      	b.n	800aa9e <netif_issue_reports+0x6e>
    return;
 800aa9c:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800aa9e:	3708      	adds	r7, #8
 800aaa0:	46bd      	mov	sp, r7
 800aaa2:	bd80      	pop	{r7, pc}
 800aaa4:	08010d60 	.word	0x08010d60
 800aaa8:	08010f04 	.word	0x08010f04
 800aaac:	08010db0 	.word	0x08010db0

0800aab0 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800aab0:	b580      	push	{r7, lr}
 800aab2:	b082      	sub	sp, #8
 800aab4:	af00      	add	r7, sp, #0
 800aab6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d107      	bne.n	800aace <netif_set_down+0x1e>
 800aabe:	4b12      	ldr	r3, [pc, #72]	; (800ab08 <netif_set_down+0x58>)
 800aac0:	f240 329b 	movw	r2, #923	; 0x39b
 800aac4:	4911      	ldr	r1, [pc, #68]	; (800ab0c <netif_set_down+0x5c>)
 800aac6:	4812      	ldr	r0, [pc, #72]	; (800ab10 <netif_set_down+0x60>)
 800aac8:	f004 fa74 	bl	800efb4 <iprintf>
 800aacc:	e019      	b.n	800ab02 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800aad4:	f003 0301 	and.w	r3, r3, #1
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d012      	beq.n	800ab02 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800aae2:	f023 0301 	bic.w	r3, r3, #1
 800aae6:	b2da      	uxtb	r2, r3
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800aaf4:	f003 0308 	and.w	r3, r3, #8
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d002      	beq.n	800ab02 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800aafc:	6878      	ldr	r0, [r7, #4]
 800aafe:	f001 ff2d 	bl	800c95c <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800ab02:	3708      	adds	r7, #8
 800ab04:	46bd      	mov	sp, r7
 800ab06:	bd80      	pop	{r7, pc}
 800ab08:	08010d60 	.word	0x08010d60
 800ab0c:	08010f28 	.word	0x08010f28
 800ab10:	08010db0 	.word	0x08010db0

0800ab14 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800ab14:	b580      	push	{r7, lr}
 800ab16:	b082      	sub	sp, #8
 800ab18:	af00      	add	r7, sp, #0
 800ab1a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d107      	bne.n	800ab32 <netif_set_link_up+0x1e>
 800ab22:	4b13      	ldr	r3, [pc, #76]	; (800ab70 <netif_set_link_up+0x5c>)
 800ab24:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800ab28:	4912      	ldr	r1, [pc, #72]	; (800ab74 <netif_set_link_up+0x60>)
 800ab2a:	4813      	ldr	r0, [pc, #76]	; (800ab78 <netif_set_link_up+0x64>)
 800ab2c:	f004 fa42 	bl	800efb4 <iprintf>
 800ab30:	e01b      	b.n	800ab6a <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ab38:	f003 0304 	and.w	r3, r3, #4
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d114      	bne.n	800ab6a <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ab46:	f043 0304 	orr.w	r3, r3, #4
 800ab4a:	b2da      	uxtb	r2, r3
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800ab52:	2103      	movs	r1, #3
 800ab54:	6878      	ldr	r0, [r7, #4]
 800ab56:	f7ff ff6b 	bl	800aa30 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	69db      	ldr	r3, [r3, #28]
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d003      	beq.n	800ab6a <netif_set_link_up+0x56>
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	69db      	ldr	r3, [r3, #28]
 800ab66:	6878      	ldr	r0, [r7, #4]
 800ab68:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800ab6a:	3708      	adds	r7, #8
 800ab6c:	46bd      	mov	sp, r7
 800ab6e:	bd80      	pop	{r7, pc}
 800ab70:	08010d60 	.word	0x08010d60
 800ab74:	08010f48 	.word	0x08010f48
 800ab78:	08010db0 	.word	0x08010db0

0800ab7c <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800ab7c:	b580      	push	{r7, lr}
 800ab7e:	b082      	sub	sp, #8
 800ab80:	af00      	add	r7, sp, #0
 800ab82:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d107      	bne.n	800ab9a <netif_set_link_down+0x1e>
 800ab8a:	4b11      	ldr	r3, [pc, #68]	; (800abd0 <netif_set_link_down+0x54>)
 800ab8c:	f240 4206 	movw	r2, #1030	; 0x406
 800ab90:	4910      	ldr	r1, [pc, #64]	; (800abd4 <netif_set_link_down+0x58>)
 800ab92:	4811      	ldr	r0, [pc, #68]	; (800abd8 <netif_set_link_down+0x5c>)
 800ab94:	f004 fa0e 	bl	800efb4 <iprintf>
 800ab98:	e017      	b.n	800abca <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800aba0:	f003 0304 	and.w	r3, r3, #4
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d010      	beq.n	800abca <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800abae:	f023 0304 	bic.w	r3, r3, #4
 800abb2:	b2da      	uxtb	r2, r3
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	69db      	ldr	r3, [r3, #28]
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d003      	beq.n	800abca <netif_set_link_down+0x4e>
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	69db      	ldr	r3, [r3, #28]
 800abc6:	6878      	ldr	r0, [r7, #4]
 800abc8:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800abca:	3708      	adds	r7, #8
 800abcc:	46bd      	mov	sp, r7
 800abce:	bd80      	pop	{r7, pc}
 800abd0:	08010d60 	.word	0x08010d60
 800abd4:	08010f6c 	.word	0x08010f6c
 800abd8:	08010db0 	.word	0x08010db0

0800abdc <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800abdc:	b480      	push	{r7}
 800abde:	b083      	sub	sp, #12
 800abe0:	af00      	add	r7, sp, #0
 800abe2:	6078      	str	r0, [r7, #4]
 800abe4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d002      	beq.n	800abf2 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	683a      	ldr	r2, [r7, #0]
 800abf0:	61da      	str	r2, [r3, #28]
  }
}
 800abf2:	bf00      	nop
 800abf4:	370c      	adds	r7, #12
 800abf6:	46bd      	mov	sp, r7
 800abf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abfc:	4770      	bx	lr

0800abfe <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800abfe:	b480      	push	{r7}
 800ac00:	b085      	sub	sp, #20
 800ac02:	af00      	add	r7, sp, #0
 800ac04:	60f8      	str	r0, [r7, #12]
 800ac06:	60b9      	str	r1, [r7, #8]
 800ac08:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800ac0a:	f06f 030b 	mvn.w	r3, #11
}
 800ac0e:	4618      	mov	r0, r3
 800ac10:	3714      	adds	r7, #20
 800ac12:	46bd      	mov	sp, r7
 800ac14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac18:	4770      	bx	lr
	...

0800ac1c <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800ac1c:	b480      	push	{r7}
 800ac1e:	b085      	sub	sp, #20
 800ac20:	af00      	add	r7, sp, #0
 800ac22:	4603      	mov	r3, r0
 800ac24:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800ac26:	79fb      	ldrb	r3, [r7, #7]
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d013      	beq.n	800ac54 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800ac2c:	4b0d      	ldr	r3, [pc, #52]	; (800ac64 <netif_get_by_index+0x48>)
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	60fb      	str	r3, [r7, #12]
 800ac32:	e00c      	b.n	800ac4e <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ac3a:	3301      	adds	r3, #1
 800ac3c:	b2db      	uxtb	r3, r3
 800ac3e:	79fa      	ldrb	r2, [r7, #7]
 800ac40:	429a      	cmp	r2, r3
 800ac42:	d101      	bne.n	800ac48 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	e006      	b.n	800ac56 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	60fb      	str	r3, [r7, #12]
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d1ef      	bne.n	800ac34 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800ac54:	2300      	movs	r3, #0
}
 800ac56:	4618      	mov	r0, r3
 800ac58:	3714      	adds	r7, #20
 800ac5a:	46bd      	mov	sp, r7
 800ac5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac60:	4770      	bx	lr
 800ac62:	bf00      	nop
 800ac64:	2000cea4 	.word	0x2000cea4

0800ac68 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800ac68:	b480      	push	{r7}
 800ac6a:	b085      	sub	sp, #20
 800ac6c:	af00      	add	r7, sp, #0
 800ac6e:	60f8      	str	r0, [r7, #12]
 800ac70:	60b9      	str	r1, [r7, #8]
 800ac72:	4611      	mov	r1, r2
 800ac74:	461a      	mov	r2, r3
 800ac76:	460b      	mov	r3, r1
 800ac78:	80fb      	strh	r3, [r7, #6]
 800ac7a:	4613      	mov	r3, r2
 800ac7c:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	2200      	movs	r2, #0
 800ac82:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	68ba      	ldr	r2, [r7, #8]
 800ac88:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	88fa      	ldrh	r2, [r7, #6]
 800ac8e:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	88ba      	ldrh	r2, [r7, #4]
 800ac94:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800ac96:	8b3b      	ldrh	r3, [r7, #24]
 800ac98:	b2da      	uxtb	r2, r3
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	7f3a      	ldrb	r2, [r7, #28]
 800aca2:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	2201      	movs	r2, #1
 800aca8:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	2200      	movs	r2, #0
 800acae:	73da      	strb	r2, [r3, #15]
}
 800acb0:	bf00      	nop
 800acb2:	3714      	adds	r7, #20
 800acb4:	46bd      	mov	sp, r7
 800acb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acba:	4770      	bx	lr

0800acbc <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800acbc:	b580      	push	{r7, lr}
 800acbe:	b08c      	sub	sp, #48	; 0x30
 800acc0:	af02      	add	r7, sp, #8
 800acc2:	4603      	mov	r3, r0
 800acc4:	71fb      	strb	r3, [r7, #7]
 800acc6:	460b      	mov	r3, r1
 800acc8:	80bb      	strh	r3, [r7, #4]
 800acca:	4613      	mov	r3, r2
 800accc:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800acce:	79fb      	ldrb	r3, [r7, #7]
 800acd0:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800acd2:	887b      	ldrh	r3, [r7, #2]
 800acd4:	2b41      	cmp	r3, #65	; 0x41
 800acd6:	d00b      	beq.n	800acf0 <pbuf_alloc+0x34>
 800acd8:	2b41      	cmp	r3, #65	; 0x41
 800acda:	dc02      	bgt.n	800ace2 <pbuf_alloc+0x26>
 800acdc:	2b01      	cmp	r3, #1
 800acde:	d007      	beq.n	800acf0 <pbuf_alloc+0x34>
 800ace0:	e0c0      	b.n	800ae64 <pbuf_alloc+0x1a8>
 800ace2:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800ace6:	d00b      	beq.n	800ad00 <pbuf_alloc+0x44>
 800ace8:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800acec:	d06e      	beq.n	800adcc <pbuf_alloc+0x110>
 800acee:	e0b9      	b.n	800ae64 <pbuf_alloc+0x1a8>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800acf0:	887a      	ldrh	r2, [r7, #2]
 800acf2:	88bb      	ldrh	r3, [r7, #4]
 800acf4:	4619      	mov	r1, r3
 800acf6:	2000      	movs	r0, #0
 800acf8:	f000 f8d0 	bl	800ae9c <pbuf_alloc_reference>
 800acfc:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800acfe:	e0bb      	b.n	800ae78 <pbuf_alloc+0x1bc>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800ad00:	2300      	movs	r3, #0
 800ad02:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800ad04:	2300      	movs	r3, #0
 800ad06:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800ad08:	88bb      	ldrh	r3, [r7, #4]
 800ad0a:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800ad0c:	2009      	movs	r0, #9
 800ad0e:	f7ff fc21 	bl	800a554 <memp_malloc>
 800ad12:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800ad14:	693b      	ldr	r3, [r7, #16]
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d107      	bne.n	800ad2a <pbuf_alloc+0x6e>
          PBUF_POOL_IS_EMPTY();
          /* free chain so far allocated */
          if (p) {
 800ad1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d002      	beq.n	800ad26 <pbuf_alloc+0x6a>
            pbuf_free(p);
 800ad20:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ad22:	f000 faa9 	bl	800b278 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800ad26:	2300      	movs	r3, #0
 800ad28:	e0a7      	b.n	800ae7a <pbuf_alloc+0x1be>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800ad2a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ad2c:	3303      	adds	r3, #3
 800ad2e:	b29b      	uxth	r3, r3
 800ad30:	f023 0303 	bic.w	r3, r3, #3
 800ad34:	b29b      	uxth	r3, r3
 800ad36:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800ad3a:	b29b      	uxth	r3, r3
 800ad3c:	8b7a      	ldrh	r2, [r7, #26]
 800ad3e:	4293      	cmp	r3, r2
 800ad40:	bf28      	it	cs
 800ad42:	4613      	movcs	r3, r2
 800ad44:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800ad46:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ad48:	3310      	adds	r3, #16
 800ad4a:	693a      	ldr	r2, [r7, #16]
 800ad4c:	4413      	add	r3, r2
 800ad4e:	3303      	adds	r3, #3
 800ad50:	f023 0303 	bic.w	r3, r3, #3
 800ad54:	4618      	mov	r0, r3
 800ad56:	89f9      	ldrh	r1, [r7, #14]
 800ad58:	8b7a      	ldrh	r2, [r7, #26]
 800ad5a:	2300      	movs	r3, #0
 800ad5c:	9301      	str	r3, [sp, #4]
 800ad5e:	887b      	ldrh	r3, [r7, #2]
 800ad60:	9300      	str	r3, [sp, #0]
 800ad62:	460b      	mov	r3, r1
 800ad64:	4601      	mov	r1, r0
 800ad66:	6938      	ldr	r0, [r7, #16]
 800ad68:	f7ff ff7e 	bl	800ac68 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800ad6c:	693b      	ldr	r3, [r7, #16]
 800ad6e:	685b      	ldr	r3, [r3, #4]
 800ad70:	f003 0303 	and.w	r3, r3, #3
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d006      	beq.n	800ad86 <pbuf_alloc+0xca>
 800ad78:	4b42      	ldr	r3, [pc, #264]	; (800ae84 <pbuf_alloc+0x1c8>)
 800ad7a:	f240 1201 	movw	r2, #257	; 0x101
 800ad7e:	4942      	ldr	r1, [pc, #264]	; (800ae88 <pbuf_alloc+0x1cc>)
 800ad80:	4842      	ldr	r0, [pc, #264]	; (800ae8c <pbuf_alloc+0x1d0>)
 800ad82:	f004 f917 	bl	800efb4 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800ad86:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ad88:	3303      	adds	r3, #3
 800ad8a:	f023 0303 	bic.w	r3, r3, #3
 800ad8e:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800ad92:	d106      	bne.n	800ada2 <pbuf_alloc+0xe6>
 800ad94:	4b3b      	ldr	r3, [pc, #236]	; (800ae84 <pbuf_alloc+0x1c8>)
 800ad96:	f240 1203 	movw	r2, #259	; 0x103
 800ad9a:	493d      	ldr	r1, [pc, #244]	; (800ae90 <pbuf_alloc+0x1d4>)
 800ad9c:	483b      	ldr	r0, [pc, #236]	; (800ae8c <pbuf_alloc+0x1d0>)
 800ad9e:	f004 f909 	bl	800efb4 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800ada2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d102      	bne.n	800adae <pbuf_alloc+0xf2>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800ada8:	693b      	ldr	r3, [r7, #16]
 800adaa:	627b      	str	r3, [r7, #36]	; 0x24
 800adac:	e002      	b.n	800adb4 <pbuf_alloc+0xf8>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800adae:	69fb      	ldr	r3, [r7, #28]
 800adb0:	693a      	ldr	r2, [r7, #16]
 800adb2:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800adb4:	693b      	ldr	r3, [r7, #16]
 800adb6:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800adb8:	8b7a      	ldrh	r2, [r7, #26]
 800adba:	89fb      	ldrh	r3, [r7, #14]
 800adbc:	1ad3      	subs	r3, r2, r3
 800adbe:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800adc0:	2300      	movs	r3, #0
 800adc2:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800adc4:	8b7b      	ldrh	r3, [r7, #26]
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d1a0      	bne.n	800ad0c <pbuf_alloc+0x50>
      break;
 800adca:	e055      	b.n	800ae78 <pbuf_alloc+0x1bc>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800adcc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800adce:	3303      	adds	r3, #3
 800add0:	b29b      	uxth	r3, r3
 800add2:	f023 0303 	bic.w	r3, r3, #3
 800add6:	b29a      	uxth	r2, r3
 800add8:	88bb      	ldrh	r3, [r7, #4]
 800adda:	3303      	adds	r3, #3
 800addc:	b29b      	uxth	r3, r3
 800adde:	f023 0303 	bic.w	r3, r3, #3
 800ade2:	b29b      	uxth	r3, r3
 800ade4:	4413      	add	r3, r2
 800ade6:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800ade8:	8b3b      	ldrh	r3, [r7, #24]
 800adea:	3310      	adds	r3, #16
 800adec:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800adee:	8b3a      	ldrh	r2, [r7, #24]
 800adf0:	88bb      	ldrh	r3, [r7, #4]
 800adf2:	3303      	adds	r3, #3
 800adf4:	f023 0303 	bic.w	r3, r3, #3
 800adf8:	429a      	cmp	r2, r3
 800adfa:	d306      	bcc.n	800ae0a <pbuf_alloc+0x14e>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800adfc:	8afa      	ldrh	r2, [r7, #22]
 800adfe:	88bb      	ldrh	r3, [r7, #4]
 800ae00:	3303      	adds	r3, #3
 800ae02:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800ae06:	429a      	cmp	r2, r3
 800ae08:	d201      	bcs.n	800ae0e <pbuf_alloc+0x152>
        return NULL;
 800ae0a:	2300      	movs	r3, #0
 800ae0c:	e035      	b.n	800ae7a <pbuf_alloc+0x1be>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800ae0e:	8afb      	ldrh	r3, [r7, #22]
 800ae10:	4618      	mov	r0, r3
 800ae12:	f7ff fa1d 	bl	800a250 <mem_malloc>
 800ae16:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800ae18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d101      	bne.n	800ae22 <pbuf_alloc+0x166>
        return NULL;
 800ae1e:	2300      	movs	r3, #0
 800ae20:	e02b      	b.n	800ae7a <pbuf_alloc+0x1be>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800ae22:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ae24:	3310      	adds	r3, #16
 800ae26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ae28:	4413      	add	r3, r2
 800ae2a:	3303      	adds	r3, #3
 800ae2c:	f023 0303 	bic.w	r3, r3, #3
 800ae30:	4618      	mov	r0, r3
 800ae32:	88b9      	ldrh	r1, [r7, #4]
 800ae34:	88ba      	ldrh	r2, [r7, #4]
 800ae36:	2300      	movs	r3, #0
 800ae38:	9301      	str	r3, [sp, #4]
 800ae3a:	887b      	ldrh	r3, [r7, #2]
 800ae3c:	9300      	str	r3, [sp, #0]
 800ae3e:	460b      	mov	r3, r1
 800ae40:	4601      	mov	r1, r0
 800ae42:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ae44:	f7ff ff10 	bl	800ac68 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800ae48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae4a:	685b      	ldr	r3, [r3, #4]
 800ae4c:	f003 0303 	and.w	r3, r3, #3
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d010      	beq.n	800ae76 <pbuf_alloc+0x1ba>
 800ae54:	4b0b      	ldr	r3, [pc, #44]	; (800ae84 <pbuf_alloc+0x1c8>)
 800ae56:	f240 1223 	movw	r2, #291	; 0x123
 800ae5a:	490e      	ldr	r1, [pc, #56]	; (800ae94 <pbuf_alloc+0x1d8>)
 800ae5c:	480b      	ldr	r0, [pc, #44]	; (800ae8c <pbuf_alloc+0x1d0>)
 800ae5e:	f004 f8a9 	bl	800efb4 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800ae62:	e008      	b.n	800ae76 <pbuf_alloc+0x1ba>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800ae64:	4b07      	ldr	r3, [pc, #28]	; (800ae84 <pbuf_alloc+0x1c8>)
 800ae66:	f240 1227 	movw	r2, #295	; 0x127
 800ae6a:	490b      	ldr	r1, [pc, #44]	; (800ae98 <pbuf_alloc+0x1dc>)
 800ae6c:	4807      	ldr	r0, [pc, #28]	; (800ae8c <pbuf_alloc+0x1d0>)
 800ae6e:	f004 f8a1 	bl	800efb4 <iprintf>
      return NULL;
 800ae72:	2300      	movs	r3, #0
 800ae74:	e001      	b.n	800ae7a <pbuf_alloc+0x1be>
      break;
 800ae76:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800ae78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ae7a:	4618      	mov	r0, r3
 800ae7c:	3728      	adds	r7, #40	; 0x28
 800ae7e:	46bd      	mov	sp, r7
 800ae80:	bd80      	pop	{r7, pc}
 800ae82:	bf00      	nop
 800ae84:	08010f90 	.word	0x08010f90
 800ae88:	08010fc0 	.word	0x08010fc0
 800ae8c:	08010ff0 	.word	0x08010ff0
 800ae90:	08011018 	.word	0x08011018
 800ae94:	0801104c 	.word	0x0801104c
 800ae98:	08011078 	.word	0x08011078

0800ae9c <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800ae9c:	b580      	push	{r7, lr}
 800ae9e:	b086      	sub	sp, #24
 800aea0:	af02      	add	r7, sp, #8
 800aea2:	6078      	str	r0, [r7, #4]
 800aea4:	460b      	mov	r3, r1
 800aea6:	807b      	strh	r3, [r7, #2]
 800aea8:	4613      	mov	r3, r2
 800aeaa:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800aeac:	883b      	ldrh	r3, [r7, #0]
 800aeae:	2b41      	cmp	r3, #65	; 0x41
 800aeb0:	d009      	beq.n	800aec6 <pbuf_alloc_reference+0x2a>
 800aeb2:	883b      	ldrh	r3, [r7, #0]
 800aeb4:	2b01      	cmp	r3, #1
 800aeb6:	d006      	beq.n	800aec6 <pbuf_alloc_reference+0x2a>
 800aeb8:	4b0f      	ldr	r3, [pc, #60]	; (800aef8 <pbuf_alloc_reference+0x5c>)
 800aeba:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800aebe:	490f      	ldr	r1, [pc, #60]	; (800aefc <pbuf_alloc_reference+0x60>)
 800aec0:	480f      	ldr	r0, [pc, #60]	; (800af00 <pbuf_alloc_reference+0x64>)
 800aec2:	f004 f877 	bl	800efb4 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800aec6:	2008      	movs	r0, #8
 800aec8:	f7ff fb44 	bl	800a554 <memp_malloc>
 800aecc:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d101      	bne.n	800aed8 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800aed4:	2300      	movs	r3, #0
 800aed6:	e00b      	b.n	800aef0 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800aed8:	8879      	ldrh	r1, [r7, #2]
 800aeda:	887a      	ldrh	r2, [r7, #2]
 800aedc:	2300      	movs	r3, #0
 800aede:	9301      	str	r3, [sp, #4]
 800aee0:	883b      	ldrh	r3, [r7, #0]
 800aee2:	9300      	str	r3, [sp, #0]
 800aee4:	460b      	mov	r3, r1
 800aee6:	6879      	ldr	r1, [r7, #4]
 800aee8:	68f8      	ldr	r0, [r7, #12]
 800aeea:	f7ff febd 	bl	800ac68 <pbuf_init_alloced_pbuf>
  return p;
 800aeee:	68fb      	ldr	r3, [r7, #12]
}
 800aef0:	4618      	mov	r0, r3
 800aef2:	3710      	adds	r7, #16
 800aef4:	46bd      	mov	sp, r7
 800aef6:	bd80      	pop	{r7, pc}
 800aef8:	08010f90 	.word	0x08010f90
 800aefc:	08011094 	.word	0x08011094
 800af00:	08010ff0 	.word	0x08010ff0

0800af04 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800af04:	b580      	push	{r7, lr}
 800af06:	b088      	sub	sp, #32
 800af08:	af02      	add	r7, sp, #8
 800af0a:	607b      	str	r3, [r7, #4]
 800af0c:	4603      	mov	r3, r0
 800af0e:	73fb      	strb	r3, [r7, #15]
 800af10:	460b      	mov	r3, r1
 800af12:	81bb      	strh	r3, [r7, #12]
 800af14:	4613      	mov	r3, r2
 800af16:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800af18:	7bfb      	ldrb	r3, [r7, #15]
 800af1a:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800af1c:	8a7b      	ldrh	r3, [r7, #18]
 800af1e:	3303      	adds	r3, #3
 800af20:	f023 0203 	bic.w	r2, r3, #3
 800af24:	89bb      	ldrh	r3, [r7, #12]
 800af26:	441a      	add	r2, r3
 800af28:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800af2a:	429a      	cmp	r2, r3
 800af2c:	d901      	bls.n	800af32 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800af2e:	2300      	movs	r3, #0
 800af30:	e018      	b.n	800af64 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800af32:	6a3b      	ldr	r3, [r7, #32]
 800af34:	2b00      	cmp	r3, #0
 800af36:	d007      	beq.n	800af48 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800af38:	8a7b      	ldrh	r3, [r7, #18]
 800af3a:	3303      	adds	r3, #3
 800af3c:	f023 0303 	bic.w	r3, r3, #3
 800af40:	6a3a      	ldr	r2, [r7, #32]
 800af42:	4413      	add	r3, r2
 800af44:	617b      	str	r3, [r7, #20]
 800af46:	e001      	b.n	800af4c <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800af48:	2300      	movs	r3, #0
 800af4a:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800af4c:	6878      	ldr	r0, [r7, #4]
 800af4e:	89b9      	ldrh	r1, [r7, #12]
 800af50:	89ba      	ldrh	r2, [r7, #12]
 800af52:	2302      	movs	r3, #2
 800af54:	9301      	str	r3, [sp, #4]
 800af56:	897b      	ldrh	r3, [r7, #10]
 800af58:	9300      	str	r3, [sp, #0]
 800af5a:	460b      	mov	r3, r1
 800af5c:	6979      	ldr	r1, [r7, #20]
 800af5e:	f7ff fe83 	bl	800ac68 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800af62:	687b      	ldr	r3, [r7, #4]
}
 800af64:	4618      	mov	r0, r3
 800af66:	3718      	adds	r7, #24
 800af68:	46bd      	mov	sp, r7
 800af6a:	bd80      	pop	{r7, pc}

0800af6c <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800af6c:	b580      	push	{r7, lr}
 800af6e:	b084      	sub	sp, #16
 800af70:	af00      	add	r7, sp, #0
 800af72:	6078      	str	r0, [r7, #4]
 800af74:	460b      	mov	r3, r1
 800af76:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d106      	bne.n	800af8c <pbuf_realloc+0x20>
 800af7e:	4b3a      	ldr	r3, [pc, #232]	; (800b068 <pbuf_realloc+0xfc>)
 800af80:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800af84:	4939      	ldr	r1, [pc, #228]	; (800b06c <pbuf_realloc+0x100>)
 800af86:	483a      	ldr	r0, [pc, #232]	; (800b070 <pbuf_realloc+0x104>)
 800af88:	f004 f814 	bl	800efb4 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	891b      	ldrh	r3, [r3, #8]
 800af90:	887a      	ldrh	r2, [r7, #2]
 800af92:	429a      	cmp	r2, r3
 800af94:	d264      	bcs.n	800b060 <pbuf_realloc+0xf4>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	891a      	ldrh	r2, [r3, #8]
 800af9a:	887b      	ldrh	r3, [r7, #2]
 800af9c:	1ad3      	subs	r3, r2, r3
 800af9e:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800afa0:	887b      	ldrh	r3, [r7, #2]
 800afa2:	817b      	strh	r3, [r7, #10]
  q = p;
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800afa8:	e018      	b.n	800afdc <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	895b      	ldrh	r3, [r3, #10]
 800afae:	897a      	ldrh	r2, [r7, #10]
 800afb0:	1ad3      	subs	r3, r2, r3
 800afb2:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	891a      	ldrh	r2, [r3, #8]
 800afb8:	893b      	ldrh	r3, [r7, #8]
 800afba:	1ad3      	subs	r3, r2, r3
 800afbc:	b29a      	uxth	r2, r3
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d106      	bne.n	800afdc <pbuf_realloc+0x70>
 800afce:	4b26      	ldr	r3, [pc, #152]	; (800b068 <pbuf_realloc+0xfc>)
 800afd0:	f240 12af 	movw	r2, #431	; 0x1af
 800afd4:	4927      	ldr	r1, [pc, #156]	; (800b074 <pbuf_realloc+0x108>)
 800afd6:	4826      	ldr	r0, [pc, #152]	; (800b070 <pbuf_realloc+0x104>)
 800afd8:	f003 ffec 	bl	800efb4 <iprintf>
  while (rem_len > q->len) {
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	895b      	ldrh	r3, [r3, #10]
 800afe0:	897a      	ldrh	r2, [r7, #10]
 800afe2:	429a      	cmp	r2, r3
 800afe4:	d8e1      	bhi.n	800afaa <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	7b1b      	ldrb	r3, [r3, #12]
 800afea:	f003 030f 	and.w	r3, r3, #15
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d122      	bne.n	800b038 <pbuf_realloc+0xcc>
 800aff2:	68fb      	ldr	r3, [r7, #12]
 800aff4:	895b      	ldrh	r3, [r3, #10]
 800aff6:	897a      	ldrh	r2, [r7, #10]
 800aff8:	429a      	cmp	r2, r3
 800affa:	d01d      	beq.n	800b038 <pbuf_realloc+0xcc>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	7b5b      	ldrb	r3, [r3, #13]
 800b000:	f003 0302 	and.w	r3, r3, #2
 800b004:	2b00      	cmp	r3, #0
 800b006:	d117      	bne.n	800b038 <pbuf_realloc+0xcc>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	685b      	ldr	r3, [r3, #4]
 800b00c:	461a      	mov	r2, r3
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	1ad3      	subs	r3, r2, r3
 800b012:	b29a      	uxth	r2, r3
 800b014:	897b      	ldrh	r3, [r7, #10]
 800b016:	4413      	add	r3, r2
 800b018:	b29b      	uxth	r3, r3
 800b01a:	4619      	mov	r1, r3
 800b01c:	68f8      	ldr	r0, [r7, #12]
 800b01e:	f7ff f80d 	bl	800a03c <mem_trim>
 800b022:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	2b00      	cmp	r3, #0
 800b028:	d106      	bne.n	800b038 <pbuf_realloc+0xcc>
 800b02a:	4b0f      	ldr	r3, [pc, #60]	; (800b068 <pbuf_realloc+0xfc>)
 800b02c:	f240 12bd 	movw	r2, #445	; 0x1bd
 800b030:	4911      	ldr	r1, [pc, #68]	; (800b078 <pbuf_realloc+0x10c>)
 800b032:	480f      	ldr	r0, [pc, #60]	; (800b070 <pbuf_realloc+0x104>)
 800b034:	f003 ffbe 	bl	800efb4 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	897a      	ldrh	r2, [r7, #10]
 800b03c:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	895a      	ldrh	r2, [r3, #10]
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d004      	beq.n	800b058 <pbuf_realloc+0xec>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	4618      	mov	r0, r3
 800b054:	f000 f910 	bl	800b278 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	2200      	movs	r2, #0
 800b05c:	601a      	str	r2, [r3, #0]
 800b05e:	e000      	b.n	800b062 <pbuf_realloc+0xf6>
    return;
 800b060:	bf00      	nop

}
 800b062:	3710      	adds	r7, #16
 800b064:	46bd      	mov	sp, r7
 800b066:	bd80      	pop	{r7, pc}
 800b068:	08010f90 	.word	0x08010f90
 800b06c:	080110a8 	.word	0x080110a8
 800b070:	08010ff0 	.word	0x08010ff0
 800b074:	080110c0 	.word	0x080110c0
 800b078:	080110d8 	.word	0x080110d8

0800b07c <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800b07c:	b580      	push	{r7, lr}
 800b07e:	b086      	sub	sp, #24
 800b080:	af00      	add	r7, sp, #0
 800b082:	60f8      	str	r0, [r7, #12]
 800b084:	60b9      	str	r1, [r7, #8]
 800b086:	4613      	mov	r3, r2
 800b088:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d106      	bne.n	800b09e <pbuf_add_header_impl+0x22>
 800b090:	4b2b      	ldr	r3, [pc, #172]	; (800b140 <pbuf_add_header_impl+0xc4>)
 800b092:	f240 12df 	movw	r2, #479	; 0x1df
 800b096:	492b      	ldr	r1, [pc, #172]	; (800b144 <pbuf_add_header_impl+0xc8>)
 800b098:	482b      	ldr	r0, [pc, #172]	; (800b148 <pbuf_add_header_impl+0xcc>)
 800b09a:	f003 ff8b 	bl	800efb4 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d003      	beq.n	800b0ac <pbuf_add_header_impl+0x30>
 800b0a4:	68bb      	ldr	r3, [r7, #8]
 800b0a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b0aa:	d301      	bcc.n	800b0b0 <pbuf_add_header_impl+0x34>
    return 1;
 800b0ac:	2301      	movs	r3, #1
 800b0ae:	e043      	b.n	800b138 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800b0b0:	68bb      	ldr	r3, [r7, #8]
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d101      	bne.n	800b0ba <pbuf_add_header_impl+0x3e>
    return 0;
 800b0b6:	2300      	movs	r3, #0
 800b0b8:	e03e      	b.n	800b138 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800b0ba:	68bb      	ldr	r3, [r7, #8]
 800b0bc:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800b0be:	68fb      	ldr	r3, [r7, #12]
 800b0c0:	891a      	ldrh	r2, [r3, #8]
 800b0c2:	8a7b      	ldrh	r3, [r7, #18]
 800b0c4:	4413      	add	r3, r2
 800b0c6:	b29b      	uxth	r3, r3
 800b0c8:	8a7a      	ldrh	r2, [r7, #18]
 800b0ca:	429a      	cmp	r2, r3
 800b0cc:	d901      	bls.n	800b0d2 <pbuf_add_header_impl+0x56>
    return 1;
 800b0ce:	2301      	movs	r3, #1
 800b0d0:	e032      	b.n	800b138 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800b0d2:	68fb      	ldr	r3, [r7, #12]
 800b0d4:	7b1b      	ldrb	r3, [r3, #12]
 800b0d6:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800b0d8:	8a3b      	ldrh	r3, [r7, #16]
 800b0da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d00c      	beq.n	800b0fc <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	685a      	ldr	r2, [r3, #4]
 800b0e6:	68bb      	ldr	r3, [r7, #8]
 800b0e8:	425b      	negs	r3, r3
 800b0ea:	4413      	add	r3, r2
 800b0ec:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800b0ee:	68fb      	ldr	r3, [r7, #12]
 800b0f0:	3310      	adds	r3, #16
 800b0f2:	697a      	ldr	r2, [r7, #20]
 800b0f4:	429a      	cmp	r2, r3
 800b0f6:	d20d      	bcs.n	800b114 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800b0f8:	2301      	movs	r3, #1
 800b0fa:	e01d      	b.n	800b138 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800b0fc:	79fb      	ldrb	r3, [r7, #7]
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d006      	beq.n	800b110 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800b102:	68fb      	ldr	r3, [r7, #12]
 800b104:	685a      	ldr	r2, [r3, #4]
 800b106:	68bb      	ldr	r3, [r7, #8]
 800b108:	425b      	negs	r3, r3
 800b10a:	4413      	add	r3, r2
 800b10c:	617b      	str	r3, [r7, #20]
 800b10e:	e001      	b.n	800b114 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800b110:	2301      	movs	r3, #1
 800b112:	e011      	b.n	800b138 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	697a      	ldr	r2, [r7, #20]
 800b118:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800b11a:	68fb      	ldr	r3, [r7, #12]
 800b11c:	895a      	ldrh	r2, [r3, #10]
 800b11e:	8a7b      	ldrh	r3, [r7, #18]
 800b120:	4413      	add	r3, r2
 800b122:	b29a      	uxth	r2, r3
 800b124:	68fb      	ldr	r3, [r7, #12]
 800b126:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	891a      	ldrh	r2, [r3, #8]
 800b12c:	8a7b      	ldrh	r3, [r7, #18]
 800b12e:	4413      	add	r3, r2
 800b130:	b29a      	uxth	r2, r3
 800b132:	68fb      	ldr	r3, [r7, #12]
 800b134:	811a      	strh	r2, [r3, #8]


  return 0;
 800b136:	2300      	movs	r3, #0
}
 800b138:	4618      	mov	r0, r3
 800b13a:	3718      	adds	r7, #24
 800b13c:	46bd      	mov	sp, r7
 800b13e:	bd80      	pop	{r7, pc}
 800b140:	08010f90 	.word	0x08010f90
 800b144:	080110f4 	.word	0x080110f4
 800b148:	08010ff0 	.word	0x08010ff0

0800b14c <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800b14c:	b580      	push	{r7, lr}
 800b14e:	b082      	sub	sp, #8
 800b150:	af00      	add	r7, sp, #0
 800b152:	6078      	str	r0, [r7, #4]
 800b154:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800b156:	2200      	movs	r2, #0
 800b158:	6839      	ldr	r1, [r7, #0]
 800b15a:	6878      	ldr	r0, [r7, #4]
 800b15c:	f7ff ff8e 	bl	800b07c <pbuf_add_header_impl>
 800b160:	4603      	mov	r3, r0
}
 800b162:	4618      	mov	r0, r3
 800b164:	3708      	adds	r7, #8
 800b166:	46bd      	mov	sp, r7
 800b168:	bd80      	pop	{r7, pc}
	...

0800b16c <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800b16c:	b580      	push	{r7, lr}
 800b16e:	b084      	sub	sp, #16
 800b170:	af00      	add	r7, sp, #0
 800b172:	6078      	str	r0, [r7, #4]
 800b174:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d106      	bne.n	800b18a <pbuf_remove_header+0x1e>
 800b17c:	4b20      	ldr	r3, [pc, #128]	; (800b200 <pbuf_remove_header+0x94>)
 800b17e:	f240 224b 	movw	r2, #587	; 0x24b
 800b182:	4920      	ldr	r1, [pc, #128]	; (800b204 <pbuf_remove_header+0x98>)
 800b184:	4820      	ldr	r0, [pc, #128]	; (800b208 <pbuf_remove_header+0x9c>)
 800b186:	f003 ff15 	bl	800efb4 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d003      	beq.n	800b198 <pbuf_remove_header+0x2c>
 800b190:	683b      	ldr	r3, [r7, #0]
 800b192:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b196:	d301      	bcc.n	800b19c <pbuf_remove_header+0x30>
    return 1;
 800b198:	2301      	movs	r3, #1
 800b19a:	e02c      	b.n	800b1f6 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800b19c:	683b      	ldr	r3, [r7, #0]
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d101      	bne.n	800b1a6 <pbuf_remove_header+0x3a>
    return 0;
 800b1a2:	2300      	movs	r3, #0
 800b1a4:	e027      	b.n	800b1f6 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800b1a6:	683b      	ldr	r3, [r7, #0]
 800b1a8:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	895b      	ldrh	r3, [r3, #10]
 800b1ae:	89fa      	ldrh	r2, [r7, #14]
 800b1b0:	429a      	cmp	r2, r3
 800b1b2:	d908      	bls.n	800b1c6 <pbuf_remove_header+0x5a>
 800b1b4:	4b12      	ldr	r3, [pc, #72]	; (800b200 <pbuf_remove_header+0x94>)
 800b1b6:	f240 2255 	movw	r2, #597	; 0x255
 800b1ba:	4914      	ldr	r1, [pc, #80]	; (800b20c <pbuf_remove_header+0xa0>)
 800b1bc:	4812      	ldr	r0, [pc, #72]	; (800b208 <pbuf_remove_header+0x9c>)
 800b1be:	f003 fef9 	bl	800efb4 <iprintf>
 800b1c2:	2301      	movs	r3, #1
 800b1c4:	e017      	b.n	800b1f6 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	685b      	ldr	r3, [r3, #4]
 800b1ca:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	685a      	ldr	r2, [r3, #4]
 800b1d0:	683b      	ldr	r3, [r7, #0]
 800b1d2:	441a      	add	r2, r3
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	895a      	ldrh	r2, [r3, #10]
 800b1dc:	89fb      	ldrh	r3, [r7, #14]
 800b1de:	1ad3      	subs	r3, r2, r3
 800b1e0:	b29a      	uxth	r2, r3
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	891a      	ldrh	r2, [r3, #8]
 800b1ea:	89fb      	ldrh	r3, [r7, #14]
 800b1ec:	1ad3      	subs	r3, r2, r3
 800b1ee:	b29a      	uxth	r2, r3
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800b1f4:	2300      	movs	r3, #0
}
 800b1f6:	4618      	mov	r0, r3
 800b1f8:	3710      	adds	r7, #16
 800b1fa:	46bd      	mov	sp, r7
 800b1fc:	bd80      	pop	{r7, pc}
 800b1fe:	bf00      	nop
 800b200:	08010f90 	.word	0x08010f90
 800b204:	080110f4 	.word	0x080110f4
 800b208:	08010ff0 	.word	0x08010ff0
 800b20c:	08011100 	.word	0x08011100

0800b210 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800b210:	b580      	push	{r7, lr}
 800b212:	b082      	sub	sp, #8
 800b214:	af00      	add	r7, sp, #0
 800b216:	6078      	str	r0, [r7, #4]
 800b218:	460b      	mov	r3, r1
 800b21a:	807b      	strh	r3, [r7, #2]
 800b21c:	4613      	mov	r3, r2
 800b21e:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800b220:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b224:	2b00      	cmp	r3, #0
 800b226:	da08      	bge.n	800b23a <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800b228:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b22c:	425b      	negs	r3, r3
 800b22e:	4619      	mov	r1, r3
 800b230:	6878      	ldr	r0, [r7, #4]
 800b232:	f7ff ff9b 	bl	800b16c <pbuf_remove_header>
 800b236:	4603      	mov	r3, r0
 800b238:	e007      	b.n	800b24a <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800b23a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b23e:	787a      	ldrb	r2, [r7, #1]
 800b240:	4619      	mov	r1, r3
 800b242:	6878      	ldr	r0, [r7, #4]
 800b244:	f7ff ff1a 	bl	800b07c <pbuf_add_header_impl>
 800b248:	4603      	mov	r3, r0
  }
}
 800b24a:	4618      	mov	r0, r3
 800b24c:	3708      	adds	r7, #8
 800b24e:	46bd      	mov	sp, r7
 800b250:	bd80      	pop	{r7, pc}

0800b252 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800b252:	b580      	push	{r7, lr}
 800b254:	b082      	sub	sp, #8
 800b256:	af00      	add	r7, sp, #0
 800b258:	6078      	str	r0, [r7, #4]
 800b25a:	460b      	mov	r3, r1
 800b25c:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800b25e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b262:	2201      	movs	r2, #1
 800b264:	4619      	mov	r1, r3
 800b266:	6878      	ldr	r0, [r7, #4]
 800b268:	f7ff ffd2 	bl	800b210 <pbuf_header_impl>
 800b26c:	4603      	mov	r3, r0
}
 800b26e:	4618      	mov	r0, r3
 800b270:	3708      	adds	r7, #8
 800b272:	46bd      	mov	sp, r7
 800b274:	bd80      	pop	{r7, pc}
	...

0800b278 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800b278:	b580      	push	{r7, lr}
 800b27a:	b088      	sub	sp, #32
 800b27c:	af00      	add	r7, sp, #0
 800b27e:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	2b00      	cmp	r3, #0
 800b284:	d10b      	bne.n	800b29e <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d106      	bne.n	800b29a <pbuf_free+0x22>
 800b28c:	4b3b      	ldr	r3, [pc, #236]	; (800b37c <pbuf_free+0x104>)
 800b28e:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800b292:	493b      	ldr	r1, [pc, #236]	; (800b380 <pbuf_free+0x108>)
 800b294:	483b      	ldr	r0, [pc, #236]	; (800b384 <pbuf_free+0x10c>)
 800b296:	f003 fe8d 	bl	800efb4 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800b29a:	2300      	movs	r3, #0
 800b29c:	e069      	b.n	800b372 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800b29e:	2300      	movs	r3, #0
 800b2a0:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800b2a2:	e062      	b.n	800b36a <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800b2a4:	f003 fdee 	bl	800ee84 <sys_arch_protect>
 800b2a8:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	7b9b      	ldrb	r3, [r3, #14]
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d106      	bne.n	800b2c0 <pbuf_free+0x48>
 800b2b2:	4b32      	ldr	r3, [pc, #200]	; (800b37c <pbuf_free+0x104>)
 800b2b4:	f240 22f1 	movw	r2, #753	; 0x2f1
 800b2b8:	4933      	ldr	r1, [pc, #204]	; (800b388 <pbuf_free+0x110>)
 800b2ba:	4832      	ldr	r0, [pc, #200]	; (800b384 <pbuf_free+0x10c>)
 800b2bc:	f003 fe7a 	bl	800efb4 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	7b9b      	ldrb	r3, [r3, #14]
 800b2c4:	3b01      	subs	r3, #1
 800b2c6:	b2da      	uxtb	r2, r3
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	739a      	strb	r2, [r3, #14]
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	7b9b      	ldrb	r3, [r3, #14]
 800b2d0:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800b2d2:	69b8      	ldr	r0, [r7, #24]
 800b2d4:	f003 fde4 	bl	800eea0 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800b2d8:	7dfb      	ldrb	r3, [r7, #23]
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d143      	bne.n	800b366 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	7b1b      	ldrb	r3, [r3, #12]
 800b2e8:	f003 030f 	and.w	r3, r3, #15
 800b2ec:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	7b5b      	ldrb	r3, [r3, #13]
 800b2f2:	f003 0302 	and.w	r3, r3, #2
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d011      	beq.n	800b31e <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800b2fe:	68bb      	ldr	r3, [r7, #8]
 800b300:	691b      	ldr	r3, [r3, #16]
 800b302:	2b00      	cmp	r3, #0
 800b304:	d106      	bne.n	800b314 <pbuf_free+0x9c>
 800b306:	4b1d      	ldr	r3, [pc, #116]	; (800b37c <pbuf_free+0x104>)
 800b308:	f240 22ff 	movw	r2, #767	; 0x2ff
 800b30c:	491f      	ldr	r1, [pc, #124]	; (800b38c <pbuf_free+0x114>)
 800b30e:	481d      	ldr	r0, [pc, #116]	; (800b384 <pbuf_free+0x10c>)
 800b310:	f003 fe50 	bl	800efb4 <iprintf>
        pc->custom_free_function(p);
 800b314:	68bb      	ldr	r3, [r7, #8]
 800b316:	691b      	ldr	r3, [r3, #16]
 800b318:	6878      	ldr	r0, [r7, #4]
 800b31a:	4798      	blx	r3
 800b31c:	e01d      	b.n	800b35a <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800b31e:	7bfb      	ldrb	r3, [r7, #15]
 800b320:	2b02      	cmp	r3, #2
 800b322:	d104      	bne.n	800b32e <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800b324:	6879      	ldr	r1, [r7, #4]
 800b326:	2009      	movs	r0, #9
 800b328:	f7ff f966 	bl	800a5f8 <memp_free>
 800b32c:	e015      	b.n	800b35a <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800b32e:	7bfb      	ldrb	r3, [r7, #15]
 800b330:	2b01      	cmp	r3, #1
 800b332:	d104      	bne.n	800b33e <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800b334:	6879      	ldr	r1, [r7, #4]
 800b336:	2008      	movs	r0, #8
 800b338:	f7ff f95e 	bl	800a5f8 <memp_free>
 800b33c:	e00d      	b.n	800b35a <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800b33e:	7bfb      	ldrb	r3, [r7, #15]
 800b340:	2b00      	cmp	r3, #0
 800b342:	d103      	bne.n	800b34c <pbuf_free+0xd4>
          mem_free(p);
 800b344:	6878      	ldr	r0, [r7, #4]
 800b346:	f7fe fde9 	bl	8009f1c <mem_free>
 800b34a:	e006      	b.n	800b35a <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800b34c:	4b0b      	ldr	r3, [pc, #44]	; (800b37c <pbuf_free+0x104>)
 800b34e:	f240 320f 	movw	r2, #783	; 0x30f
 800b352:	490f      	ldr	r1, [pc, #60]	; (800b390 <pbuf_free+0x118>)
 800b354:	480b      	ldr	r0, [pc, #44]	; (800b384 <pbuf_free+0x10c>)
 800b356:	f003 fe2d 	bl	800efb4 <iprintf>
        }
      }
      count++;
 800b35a:	7ffb      	ldrb	r3, [r7, #31]
 800b35c:	3301      	adds	r3, #1
 800b35e:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800b360:	693b      	ldr	r3, [r7, #16]
 800b362:	607b      	str	r3, [r7, #4]
 800b364:	e001      	b.n	800b36a <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800b366:	2300      	movs	r3, #0
 800b368:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d199      	bne.n	800b2a4 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800b370:	7ffb      	ldrb	r3, [r7, #31]
}
 800b372:	4618      	mov	r0, r3
 800b374:	3720      	adds	r7, #32
 800b376:	46bd      	mov	sp, r7
 800b378:	bd80      	pop	{r7, pc}
 800b37a:	bf00      	nop
 800b37c:	08010f90 	.word	0x08010f90
 800b380:	080110f4 	.word	0x080110f4
 800b384:	08010ff0 	.word	0x08010ff0
 800b388:	08011120 	.word	0x08011120
 800b38c:	08011138 	.word	0x08011138
 800b390:	0801115c 	.word	0x0801115c

0800b394 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800b394:	b480      	push	{r7}
 800b396:	b085      	sub	sp, #20
 800b398:	af00      	add	r7, sp, #0
 800b39a:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800b39c:	2300      	movs	r3, #0
 800b39e:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800b3a0:	e005      	b.n	800b3ae <pbuf_clen+0x1a>
    ++len;
 800b3a2:	89fb      	ldrh	r3, [r7, #14]
 800b3a4:	3301      	adds	r3, #1
 800b3a6:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	d1f6      	bne.n	800b3a2 <pbuf_clen+0xe>
  }
  return len;
 800b3b4:	89fb      	ldrh	r3, [r7, #14]
}
 800b3b6:	4618      	mov	r0, r3
 800b3b8:	3714      	adds	r7, #20
 800b3ba:	46bd      	mov	sp, r7
 800b3bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3c0:	4770      	bx	lr
	...

0800b3c4 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800b3c4:	b580      	push	{r7, lr}
 800b3c6:	b084      	sub	sp, #16
 800b3c8:	af00      	add	r7, sp, #0
 800b3ca:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d016      	beq.n	800b400 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800b3d2:	f003 fd57 	bl	800ee84 <sys_arch_protect>
 800b3d6:	60f8      	str	r0, [r7, #12]
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	7b9b      	ldrb	r3, [r3, #14]
 800b3dc:	3301      	adds	r3, #1
 800b3de:	b2da      	uxtb	r2, r3
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	739a      	strb	r2, [r3, #14]
 800b3e4:	68f8      	ldr	r0, [r7, #12]
 800b3e6:	f003 fd5b 	bl	800eea0 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	7b9b      	ldrb	r3, [r3, #14]
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d106      	bne.n	800b400 <pbuf_ref+0x3c>
 800b3f2:	4b05      	ldr	r3, [pc, #20]	; (800b408 <pbuf_ref+0x44>)
 800b3f4:	f240 3242 	movw	r2, #834	; 0x342
 800b3f8:	4904      	ldr	r1, [pc, #16]	; (800b40c <pbuf_ref+0x48>)
 800b3fa:	4805      	ldr	r0, [pc, #20]	; (800b410 <pbuf_ref+0x4c>)
 800b3fc:	f003 fdda 	bl	800efb4 <iprintf>
  }
}
 800b400:	bf00      	nop
 800b402:	3710      	adds	r7, #16
 800b404:	46bd      	mov	sp, r7
 800b406:	bd80      	pop	{r7, pc}
 800b408:	08010f90 	.word	0x08010f90
 800b40c:	08011170 	.word	0x08011170
 800b410:	08010ff0 	.word	0x08010ff0

0800b414 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800b414:	b580      	push	{r7, lr}
 800b416:	b084      	sub	sp, #16
 800b418:	af00      	add	r7, sp, #0
 800b41a:	6078      	str	r0, [r7, #4]
 800b41c:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	2b00      	cmp	r3, #0
 800b422:	d002      	beq.n	800b42a <pbuf_cat+0x16>
 800b424:	683b      	ldr	r3, [r7, #0]
 800b426:	2b00      	cmp	r3, #0
 800b428:	d107      	bne.n	800b43a <pbuf_cat+0x26>
 800b42a:	4b20      	ldr	r3, [pc, #128]	; (800b4ac <pbuf_cat+0x98>)
 800b42c:	f240 325a 	movw	r2, #858	; 0x35a
 800b430:	491f      	ldr	r1, [pc, #124]	; (800b4b0 <pbuf_cat+0x9c>)
 800b432:	4820      	ldr	r0, [pc, #128]	; (800b4b4 <pbuf_cat+0xa0>)
 800b434:	f003 fdbe 	bl	800efb4 <iprintf>
 800b438:	e034      	b.n	800b4a4 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	60fb      	str	r3, [r7, #12]
 800b43e:	e00a      	b.n	800b456 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	891a      	ldrh	r2, [r3, #8]
 800b444:	683b      	ldr	r3, [r7, #0]
 800b446:	891b      	ldrh	r3, [r3, #8]
 800b448:	4413      	add	r3, r2
 800b44a:	b29a      	uxth	r2, r3
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	60fb      	str	r3, [r7, #12]
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d1f0      	bne.n	800b440 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	891a      	ldrh	r2, [r3, #8]
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	895b      	ldrh	r3, [r3, #10]
 800b466:	429a      	cmp	r2, r3
 800b468:	d006      	beq.n	800b478 <pbuf_cat+0x64>
 800b46a:	4b10      	ldr	r3, [pc, #64]	; (800b4ac <pbuf_cat+0x98>)
 800b46c:	f240 3262 	movw	r2, #866	; 0x362
 800b470:	4911      	ldr	r1, [pc, #68]	; (800b4b8 <pbuf_cat+0xa4>)
 800b472:	4810      	ldr	r0, [pc, #64]	; (800b4b4 <pbuf_cat+0xa0>)
 800b474:	f003 fd9e 	bl	800efb4 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d006      	beq.n	800b48e <pbuf_cat+0x7a>
 800b480:	4b0a      	ldr	r3, [pc, #40]	; (800b4ac <pbuf_cat+0x98>)
 800b482:	f240 3263 	movw	r2, #867	; 0x363
 800b486:	490d      	ldr	r1, [pc, #52]	; (800b4bc <pbuf_cat+0xa8>)
 800b488:	480a      	ldr	r0, [pc, #40]	; (800b4b4 <pbuf_cat+0xa0>)
 800b48a:	f003 fd93 	bl	800efb4 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	891a      	ldrh	r2, [r3, #8]
 800b492:	683b      	ldr	r3, [r7, #0]
 800b494:	891b      	ldrh	r3, [r3, #8]
 800b496:	4413      	add	r3, r2
 800b498:	b29a      	uxth	r2, r3
 800b49a:	68fb      	ldr	r3, [r7, #12]
 800b49c:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800b49e:	68fb      	ldr	r3, [r7, #12]
 800b4a0:	683a      	ldr	r2, [r7, #0]
 800b4a2:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800b4a4:	3710      	adds	r7, #16
 800b4a6:	46bd      	mov	sp, r7
 800b4a8:	bd80      	pop	{r7, pc}
 800b4aa:	bf00      	nop
 800b4ac:	08010f90 	.word	0x08010f90
 800b4b0:	08011184 	.word	0x08011184
 800b4b4:	08010ff0 	.word	0x08010ff0
 800b4b8:	080111bc 	.word	0x080111bc
 800b4bc:	080111ec 	.word	0x080111ec

0800b4c0 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800b4c0:	b580      	push	{r7, lr}
 800b4c2:	b082      	sub	sp, #8
 800b4c4:	af00      	add	r7, sp, #0
 800b4c6:	6078      	str	r0, [r7, #4]
 800b4c8:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800b4ca:	6839      	ldr	r1, [r7, #0]
 800b4cc:	6878      	ldr	r0, [r7, #4]
 800b4ce:	f7ff ffa1 	bl	800b414 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800b4d2:	6838      	ldr	r0, [r7, #0]
 800b4d4:	f7ff ff76 	bl	800b3c4 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800b4d8:	bf00      	nop
 800b4da:	3708      	adds	r7, #8
 800b4dc:	46bd      	mov	sp, r7
 800b4de:	bd80      	pop	{r7, pc}

0800b4e0 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800b4e0:	b580      	push	{r7, lr}
 800b4e2:	b086      	sub	sp, #24
 800b4e4:	af00      	add	r7, sp, #0
 800b4e6:	6078      	str	r0, [r7, #4]
 800b4e8:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800b4ea:	2300      	movs	r3, #0
 800b4ec:	617b      	str	r3, [r7, #20]
 800b4ee:	2300      	movs	r3, #0
 800b4f0:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d008      	beq.n	800b50a <pbuf_copy+0x2a>
 800b4f8:	683b      	ldr	r3, [r7, #0]
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d005      	beq.n	800b50a <pbuf_copy+0x2a>
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	891a      	ldrh	r2, [r3, #8]
 800b502:	683b      	ldr	r3, [r7, #0]
 800b504:	891b      	ldrh	r3, [r3, #8]
 800b506:	429a      	cmp	r2, r3
 800b508:	d209      	bcs.n	800b51e <pbuf_copy+0x3e>
 800b50a:	4b57      	ldr	r3, [pc, #348]	; (800b668 <pbuf_copy+0x188>)
 800b50c:	f240 32ca 	movw	r2, #970	; 0x3ca
 800b510:	4956      	ldr	r1, [pc, #344]	; (800b66c <pbuf_copy+0x18c>)
 800b512:	4857      	ldr	r0, [pc, #348]	; (800b670 <pbuf_copy+0x190>)
 800b514:	f003 fd4e 	bl	800efb4 <iprintf>
 800b518:	f06f 030f 	mvn.w	r3, #15
 800b51c:	e09f      	b.n	800b65e <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	895b      	ldrh	r3, [r3, #10]
 800b522:	461a      	mov	r2, r3
 800b524:	697b      	ldr	r3, [r7, #20]
 800b526:	1ad2      	subs	r2, r2, r3
 800b528:	683b      	ldr	r3, [r7, #0]
 800b52a:	895b      	ldrh	r3, [r3, #10]
 800b52c:	4619      	mov	r1, r3
 800b52e:	693b      	ldr	r3, [r7, #16]
 800b530:	1acb      	subs	r3, r1, r3
 800b532:	429a      	cmp	r2, r3
 800b534:	d306      	bcc.n	800b544 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800b536:	683b      	ldr	r3, [r7, #0]
 800b538:	895b      	ldrh	r3, [r3, #10]
 800b53a:	461a      	mov	r2, r3
 800b53c:	693b      	ldr	r3, [r7, #16]
 800b53e:	1ad3      	subs	r3, r2, r3
 800b540:	60fb      	str	r3, [r7, #12]
 800b542:	e005      	b.n	800b550 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	895b      	ldrh	r3, [r3, #10]
 800b548:	461a      	mov	r2, r3
 800b54a:	697b      	ldr	r3, [r7, #20]
 800b54c:	1ad3      	subs	r3, r2, r3
 800b54e:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	685a      	ldr	r2, [r3, #4]
 800b554:	697b      	ldr	r3, [r7, #20]
 800b556:	18d0      	adds	r0, r2, r3
 800b558:	683b      	ldr	r3, [r7, #0]
 800b55a:	685a      	ldr	r2, [r3, #4]
 800b55c:	693b      	ldr	r3, [r7, #16]
 800b55e:	4413      	add	r3, r2
 800b560:	68fa      	ldr	r2, [r7, #12]
 800b562:	4619      	mov	r1, r3
 800b564:	f003 fd13 	bl	800ef8e <memcpy>
    offset_to += len;
 800b568:	697a      	ldr	r2, [r7, #20]
 800b56a:	68fb      	ldr	r3, [r7, #12]
 800b56c:	4413      	add	r3, r2
 800b56e:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800b570:	693a      	ldr	r2, [r7, #16]
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	4413      	add	r3, r2
 800b576:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	895b      	ldrh	r3, [r3, #10]
 800b57c:	461a      	mov	r2, r3
 800b57e:	697b      	ldr	r3, [r7, #20]
 800b580:	4293      	cmp	r3, r2
 800b582:	d906      	bls.n	800b592 <pbuf_copy+0xb2>
 800b584:	4b38      	ldr	r3, [pc, #224]	; (800b668 <pbuf_copy+0x188>)
 800b586:	f240 32d9 	movw	r2, #985	; 0x3d9
 800b58a:	493a      	ldr	r1, [pc, #232]	; (800b674 <pbuf_copy+0x194>)
 800b58c:	4838      	ldr	r0, [pc, #224]	; (800b670 <pbuf_copy+0x190>)
 800b58e:	f003 fd11 	bl	800efb4 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800b592:	683b      	ldr	r3, [r7, #0]
 800b594:	895b      	ldrh	r3, [r3, #10]
 800b596:	461a      	mov	r2, r3
 800b598:	693b      	ldr	r3, [r7, #16]
 800b59a:	4293      	cmp	r3, r2
 800b59c:	d906      	bls.n	800b5ac <pbuf_copy+0xcc>
 800b59e:	4b32      	ldr	r3, [pc, #200]	; (800b668 <pbuf_copy+0x188>)
 800b5a0:	f240 32da 	movw	r2, #986	; 0x3da
 800b5a4:	4934      	ldr	r1, [pc, #208]	; (800b678 <pbuf_copy+0x198>)
 800b5a6:	4832      	ldr	r0, [pc, #200]	; (800b670 <pbuf_copy+0x190>)
 800b5a8:	f003 fd04 	bl	800efb4 <iprintf>
    if (offset_from >= p_from->len) {
 800b5ac:	683b      	ldr	r3, [r7, #0]
 800b5ae:	895b      	ldrh	r3, [r3, #10]
 800b5b0:	461a      	mov	r2, r3
 800b5b2:	693b      	ldr	r3, [r7, #16]
 800b5b4:	4293      	cmp	r3, r2
 800b5b6:	d304      	bcc.n	800b5c2 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800b5b8:	2300      	movs	r3, #0
 800b5ba:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800b5bc:	683b      	ldr	r3, [r7, #0]
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	895b      	ldrh	r3, [r3, #10]
 800b5c6:	461a      	mov	r2, r3
 800b5c8:	697b      	ldr	r3, [r7, #20]
 800b5ca:	4293      	cmp	r3, r2
 800b5cc:	d114      	bne.n	800b5f8 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800b5ce:	2300      	movs	r3, #0
 800b5d0:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	d10c      	bne.n	800b5f8 <pbuf_copy+0x118>
 800b5de:	683b      	ldr	r3, [r7, #0]
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d009      	beq.n	800b5f8 <pbuf_copy+0x118>
 800b5e4:	4b20      	ldr	r3, [pc, #128]	; (800b668 <pbuf_copy+0x188>)
 800b5e6:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800b5ea:	4924      	ldr	r1, [pc, #144]	; (800b67c <pbuf_copy+0x19c>)
 800b5ec:	4820      	ldr	r0, [pc, #128]	; (800b670 <pbuf_copy+0x190>)
 800b5ee:	f003 fce1 	bl	800efb4 <iprintf>
 800b5f2:	f06f 030f 	mvn.w	r3, #15
 800b5f6:	e032      	b.n	800b65e <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800b5f8:	683b      	ldr	r3, [r7, #0]
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d013      	beq.n	800b626 <pbuf_copy+0x146>
 800b5fe:	683b      	ldr	r3, [r7, #0]
 800b600:	895a      	ldrh	r2, [r3, #10]
 800b602:	683b      	ldr	r3, [r7, #0]
 800b604:	891b      	ldrh	r3, [r3, #8]
 800b606:	429a      	cmp	r2, r3
 800b608:	d10d      	bne.n	800b626 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800b60a:	683b      	ldr	r3, [r7, #0]
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	2b00      	cmp	r3, #0
 800b610:	d009      	beq.n	800b626 <pbuf_copy+0x146>
 800b612:	4b15      	ldr	r3, [pc, #84]	; (800b668 <pbuf_copy+0x188>)
 800b614:	f240 32ea 	movw	r2, #1002	; 0x3ea
 800b618:	4919      	ldr	r1, [pc, #100]	; (800b680 <pbuf_copy+0x1a0>)
 800b61a:	4815      	ldr	r0, [pc, #84]	; (800b670 <pbuf_copy+0x190>)
 800b61c:	f003 fcca 	bl	800efb4 <iprintf>
 800b620:	f06f 0305 	mvn.w	r3, #5
 800b624:	e01b      	b.n	800b65e <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d013      	beq.n	800b654 <pbuf_copy+0x174>
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	895a      	ldrh	r2, [r3, #10]
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	891b      	ldrh	r3, [r3, #8]
 800b634:	429a      	cmp	r2, r3
 800b636:	d10d      	bne.n	800b654 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d009      	beq.n	800b654 <pbuf_copy+0x174>
 800b640:	4b09      	ldr	r3, [pc, #36]	; (800b668 <pbuf_copy+0x188>)
 800b642:	f240 32ef 	movw	r2, #1007	; 0x3ef
 800b646:	490e      	ldr	r1, [pc, #56]	; (800b680 <pbuf_copy+0x1a0>)
 800b648:	4809      	ldr	r0, [pc, #36]	; (800b670 <pbuf_copy+0x190>)
 800b64a:	f003 fcb3 	bl	800efb4 <iprintf>
 800b64e:	f06f 0305 	mvn.w	r3, #5
 800b652:	e004      	b.n	800b65e <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800b654:	683b      	ldr	r3, [r7, #0]
 800b656:	2b00      	cmp	r3, #0
 800b658:	f47f af61 	bne.w	800b51e <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800b65c:	2300      	movs	r3, #0
}
 800b65e:	4618      	mov	r0, r3
 800b660:	3718      	adds	r7, #24
 800b662:	46bd      	mov	sp, r7
 800b664:	bd80      	pop	{r7, pc}
 800b666:	bf00      	nop
 800b668:	08010f90 	.word	0x08010f90
 800b66c:	08011238 	.word	0x08011238
 800b670:	08010ff0 	.word	0x08010ff0
 800b674:	08011268 	.word	0x08011268
 800b678:	08011280 	.word	0x08011280
 800b67c:	0801129c 	.word	0x0801129c
 800b680:	080112ac 	.word	0x080112ac

0800b684 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800b684:	b580      	push	{r7, lr}
 800b686:	b084      	sub	sp, #16
 800b688:	af00      	add	r7, sp, #0
 800b68a:	4603      	mov	r3, r0
 800b68c:	603a      	str	r2, [r7, #0]
 800b68e:	71fb      	strb	r3, [r7, #7]
 800b690:	460b      	mov	r3, r1
 800b692:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800b694:	683b      	ldr	r3, [r7, #0]
 800b696:	8919      	ldrh	r1, [r3, #8]
 800b698:	88ba      	ldrh	r2, [r7, #4]
 800b69a:	79fb      	ldrb	r3, [r7, #7]
 800b69c:	4618      	mov	r0, r3
 800b69e:	f7ff fb0d 	bl	800acbc <pbuf_alloc>
 800b6a2:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d101      	bne.n	800b6ae <pbuf_clone+0x2a>
    return NULL;
 800b6aa:	2300      	movs	r3, #0
 800b6ac:	e011      	b.n	800b6d2 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800b6ae:	6839      	ldr	r1, [r7, #0]
 800b6b0:	68f8      	ldr	r0, [r7, #12]
 800b6b2:	f7ff ff15 	bl	800b4e0 <pbuf_copy>
 800b6b6:	4603      	mov	r3, r0
 800b6b8:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800b6ba:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d006      	beq.n	800b6d0 <pbuf_clone+0x4c>
 800b6c2:	4b06      	ldr	r3, [pc, #24]	; (800b6dc <pbuf_clone+0x58>)
 800b6c4:	f240 5224 	movw	r2, #1316	; 0x524
 800b6c8:	4905      	ldr	r1, [pc, #20]	; (800b6e0 <pbuf_clone+0x5c>)
 800b6ca:	4806      	ldr	r0, [pc, #24]	; (800b6e4 <pbuf_clone+0x60>)
 800b6cc:	f003 fc72 	bl	800efb4 <iprintf>
  return q;
 800b6d0:	68fb      	ldr	r3, [r7, #12]
}
 800b6d2:	4618      	mov	r0, r3
 800b6d4:	3710      	adds	r7, #16
 800b6d6:	46bd      	mov	sp, r7
 800b6d8:	bd80      	pop	{r7, pc}
 800b6da:	bf00      	nop
 800b6dc:	08010f90 	.word	0x08010f90
 800b6e0:	08011404 	.word	0x08011404
 800b6e4:	08010ff0 	.word	0x08010ff0

0800b6e8 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800b6e8:	b580      	push	{r7, lr}
 800b6ea:	b086      	sub	sp, #24
 800b6ec:	af00      	add	r7, sp, #0
 800b6ee:	60f8      	str	r0, [r7, #12]
 800b6f0:	60b9      	str	r1, [r7, #8]
 800b6f2:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800b6f4:	2007      	movs	r0, #7
 800b6f6:	f7fe ff2d 	bl	800a554 <memp_malloc>
 800b6fa:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800b6fc:	693b      	ldr	r3, [r7, #16]
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d109      	bne.n	800b716 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800b702:	693b      	ldr	r3, [r7, #16]
 800b704:	2b00      	cmp	r3, #0
 800b706:	d151      	bne.n	800b7ac <sys_timeout_abs+0xc4>
 800b708:	4b2a      	ldr	r3, [pc, #168]	; (800b7b4 <sys_timeout_abs+0xcc>)
 800b70a:	22be      	movs	r2, #190	; 0xbe
 800b70c:	492a      	ldr	r1, [pc, #168]	; (800b7b8 <sys_timeout_abs+0xd0>)
 800b70e:	482b      	ldr	r0, [pc, #172]	; (800b7bc <sys_timeout_abs+0xd4>)
 800b710:	f003 fc50 	bl	800efb4 <iprintf>
    return;
 800b714:	e04a      	b.n	800b7ac <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800b716:	693b      	ldr	r3, [r7, #16]
 800b718:	2200      	movs	r2, #0
 800b71a:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800b71c:	693b      	ldr	r3, [r7, #16]
 800b71e:	68ba      	ldr	r2, [r7, #8]
 800b720:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800b722:	693b      	ldr	r3, [r7, #16]
 800b724:	687a      	ldr	r2, [r7, #4]
 800b726:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800b728:	693b      	ldr	r3, [r7, #16]
 800b72a:	68fa      	ldr	r2, [r7, #12]
 800b72c:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800b72e:	4b24      	ldr	r3, [pc, #144]	; (800b7c0 <sys_timeout_abs+0xd8>)
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	2b00      	cmp	r3, #0
 800b734:	d103      	bne.n	800b73e <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800b736:	4a22      	ldr	r2, [pc, #136]	; (800b7c0 <sys_timeout_abs+0xd8>)
 800b738:	693b      	ldr	r3, [r7, #16]
 800b73a:	6013      	str	r3, [r2, #0]
    return;
 800b73c:	e037      	b.n	800b7ae <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800b73e:	693b      	ldr	r3, [r7, #16]
 800b740:	685a      	ldr	r2, [r3, #4]
 800b742:	4b1f      	ldr	r3, [pc, #124]	; (800b7c0 <sys_timeout_abs+0xd8>)
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	685b      	ldr	r3, [r3, #4]
 800b748:	1ad3      	subs	r3, r2, r3
 800b74a:	0fdb      	lsrs	r3, r3, #31
 800b74c:	f003 0301 	and.w	r3, r3, #1
 800b750:	b2db      	uxtb	r3, r3
 800b752:	2b00      	cmp	r3, #0
 800b754:	d007      	beq.n	800b766 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800b756:	4b1a      	ldr	r3, [pc, #104]	; (800b7c0 <sys_timeout_abs+0xd8>)
 800b758:	681a      	ldr	r2, [r3, #0]
 800b75a:	693b      	ldr	r3, [r7, #16]
 800b75c:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800b75e:	4a18      	ldr	r2, [pc, #96]	; (800b7c0 <sys_timeout_abs+0xd8>)
 800b760:	693b      	ldr	r3, [r7, #16]
 800b762:	6013      	str	r3, [r2, #0]
 800b764:	e023      	b.n	800b7ae <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800b766:	4b16      	ldr	r3, [pc, #88]	; (800b7c0 <sys_timeout_abs+0xd8>)
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	617b      	str	r3, [r7, #20]
 800b76c:	e01a      	b.n	800b7a4 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800b76e:	697b      	ldr	r3, [r7, #20]
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	2b00      	cmp	r3, #0
 800b774:	d00b      	beq.n	800b78e <sys_timeout_abs+0xa6>
 800b776:	693b      	ldr	r3, [r7, #16]
 800b778:	685a      	ldr	r2, [r3, #4]
 800b77a:	697b      	ldr	r3, [r7, #20]
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	685b      	ldr	r3, [r3, #4]
 800b780:	1ad3      	subs	r3, r2, r3
 800b782:	0fdb      	lsrs	r3, r3, #31
 800b784:	f003 0301 	and.w	r3, r3, #1
 800b788:	b2db      	uxtb	r3, r3
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d007      	beq.n	800b79e <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800b78e:	697b      	ldr	r3, [r7, #20]
 800b790:	681a      	ldr	r2, [r3, #0]
 800b792:	693b      	ldr	r3, [r7, #16]
 800b794:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800b796:	697b      	ldr	r3, [r7, #20]
 800b798:	693a      	ldr	r2, [r7, #16]
 800b79a:	601a      	str	r2, [r3, #0]
        break;
 800b79c:	e007      	b.n	800b7ae <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800b79e:	697b      	ldr	r3, [r7, #20]
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	617b      	str	r3, [r7, #20]
 800b7a4:	697b      	ldr	r3, [r7, #20]
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d1e1      	bne.n	800b76e <sys_timeout_abs+0x86>
 800b7aa:	e000      	b.n	800b7ae <sys_timeout_abs+0xc6>
    return;
 800b7ac:	bf00      	nop
      }
    }
  }
}
 800b7ae:	3718      	adds	r7, #24
 800b7b0:	46bd      	mov	sp, r7
 800b7b2:	bd80      	pop	{r7, pc}
 800b7b4:	08011418 	.word	0x08011418
 800b7b8:	0801144c 	.word	0x0801144c
 800b7bc:	0801148c 	.word	0x0801148c
 800b7c0:	200047a4 	.word	0x200047a4

0800b7c4 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800b7c4:	b580      	push	{r7, lr}
 800b7c6:	b086      	sub	sp, #24
 800b7c8:	af00      	add	r7, sp, #0
 800b7ca:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800b7d0:	697b      	ldr	r3, [r7, #20]
 800b7d2:	685b      	ldr	r3, [r3, #4]
 800b7d4:	4798      	blx	r3

  now = sys_now();
 800b7d6:	f7f9 fc71 	bl	80050bc <sys_now>
 800b7da:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800b7dc:	697b      	ldr	r3, [r7, #20]
 800b7de:	681a      	ldr	r2, [r3, #0]
 800b7e0:	4b0f      	ldr	r3, [pc, #60]	; (800b820 <lwip_cyclic_timer+0x5c>)
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	4413      	add	r3, r2
 800b7e6:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800b7e8:	68fa      	ldr	r2, [r7, #12]
 800b7ea:	693b      	ldr	r3, [r7, #16]
 800b7ec:	1ad3      	subs	r3, r2, r3
 800b7ee:	0fdb      	lsrs	r3, r3, #31
 800b7f0:	f003 0301 	and.w	r3, r3, #1
 800b7f4:	b2db      	uxtb	r3, r3
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d009      	beq.n	800b80e <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800b7fa:	697b      	ldr	r3, [r7, #20]
 800b7fc:	681a      	ldr	r2, [r3, #0]
 800b7fe:	693b      	ldr	r3, [r7, #16]
 800b800:	4413      	add	r3, r2
 800b802:	687a      	ldr	r2, [r7, #4]
 800b804:	4907      	ldr	r1, [pc, #28]	; (800b824 <lwip_cyclic_timer+0x60>)
 800b806:	4618      	mov	r0, r3
 800b808:	f7ff ff6e 	bl	800b6e8 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800b80c:	e004      	b.n	800b818 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800b80e:	687a      	ldr	r2, [r7, #4]
 800b810:	4904      	ldr	r1, [pc, #16]	; (800b824 <lwip_cyclic_timer+0x60>)
 800b812:	68f8      	ldr	r0, [r7, #12]
 800b814:	f7ff ff68 	bl	800b6e8 <sys_timeout_abs>
}
 800b818:	bf00      	nop
 800b81a:	3718      	adds	r7, #24
 800b81c:	46bd      	mov	sp, r7
 800b81e:	bd80      	pop	{r7, pc}
 800b820:	200047a8 	.word	0x200047a8
 800b824:	0800b7c5 	.word	0x0800b7c5

0800b828 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800b828:	b580      	push	{r7, lr}
 800b82a:	b082      	sub	sp, #8
 800b82c:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800b82e:	2300      	movs	r3, #0
 800b830:	607b      	str	r3, [r7, #4]
 800b832:	e00e      	b.n	800b852 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800b834:	4a0a      	ldr	r2, [pc, #40]	; (800b860 <sys_timeouts_init+0x38>)
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	00db      	lsls	r3, r3, #3
 800b840:	4a07      	ldr	r2, [pc, #28]	; (800b860 <sys_timeouts_init+0x38>)
 800b842:	4413      	add	r3, r2
 800b844:	461a      	mov	r2, r3
 800b846:	4907      	ldr	r1, [pc, #28]	; (800b864 <sys_timeouts_init+0x3c>)
 800b848:	f000 f80e 	bl	800b868 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	3301      	adds	r3, #1
 800b850:	607b      	str	r3, [r7, #4]
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	2b01      	cmp	r3, #1
 800b856:	d9ed      	bls.n	800b834 <sys_timeouts_init+0xc>
  }
}
 800b858:	bf00      	nop
 800b85a:	3708      	adds	r7, #8
 800b85c:	46bd      	mov	sp, r7
 800b85e:	bd80      	pop	{r7, pc}
 800b860:	08012094 	.word	0x08012094
 800b864:	0800b7c5 	.word	0x0800b7c5

0800b868 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800b868:	b580      	push	{r7, lr}
 800b86a:	b086      	sub	sp, #24
 800b86c:	af00      	add	r7, sp, #0
 800b86e:	60f8      	str	r0, [r7, #12]
 800b870:	60b9      	str	r1, [r7, #8]
 800b872:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b87a:	d306      	bcc.n	800b88a <sys_timeout+0x22>
 800b87c:	4b0a      	ldr	r3, [pc, #40]	; (800b8a8 <sys_timeout+0x40>)
 800b87e:	f240 1229 	movw	r2, #297	; 0x129
 800b882:	490a      	ldr	r1, [pc, #40]	; (800b8ac <sys_timeout+0x44>)
 800b884:	480a      	ldr	r0, [pc, #40]	; (800b8b0 <sys_timeout+0x48>)
 800b886:	f003 fb95 	bl	800efb4 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800b88a:	f7f9 fc17 	bl	80050bc <sys_now>
 800b88e:	4602      	mov	r2, r0
 800b890:	68fb      	ldr	r3, [r7, #12]
 800b892:	4413      	add	r3, r2
 800b894:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800b896:	687a      	ldr	r2, [r7, #4]
 800b898:	68b9      	ldr	r1, [r7, #8]
 800b89a:	6978      	ldr	r0, [r7, #20]
 800b89c:	f7ff ff24 	bl	800b6e8 <sys_timeout_abs>
#endif
}
 800b8a0:	bf00      	nop
 800b8a2:	3718      	adds	r7, #24
 800b8a4:	46bd      	mov	sp, r7
 800b8a6:	bd80      	pop	{r7, pc}
 800b8a8:	08011418 	.word	0x08011418
 800b8ac:	080114b4 	.word	0x080114b4
 800b8b0:	0801148c 	.word	0x0801148c

0800b8b4 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800b8b4:	b580      	push	{r7, lr}
 800b8b6:	b084      	sub	sp, #16
 800b8b8:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800b8ba:	f7f9 fbff 	bl	80050bc <sys_now>
 800b8be:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 800b8c0:	4b17      	ldr	r3, [pc, #92]	; (800b920 <sys_check_timeouts+0x6c>)
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800b8c6:	68bb      	ldr	r3, [r7, #8]
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d022      	beq.n	800b912 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800b8cc:	68bb      	ldr	r3, [r7, #8]
 800b8ce:	685b      	ldr	r3, [r3, #4]
 800b8d0:	68fa      	ldr	r2, [r7, #12]
 800b8d2:	1ad3      	subs	r3, r2, r3
 800b8d4:	0fdb      	lsrs	r3, r3, #31
 800b8d6:	f003 0301 	and.w	r3, r3, #1
 800b8da:	b2db      	uxtb	r3, r3
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	d11a      	bne.n	800b916 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800b8e0:	68bb      	ldr	r3, [r7, #8]
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	4a0e      	ldr	r2, [pc, #56]	; (800b920 <sys_check_timeouts+0x6c>)
 800b8e6:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800b8e8:	68bb      	ldr	r3, [r7, #8]
 800b8ea:	689b      	ldr	r3, [r3, #8]
 800b8ec:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800b8ee:	68bb      	ldr	r3, [r7, #8]
 800b8f0:	68db      	ldr	r3, [r3, #12]
 800b8f2:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800b8f4:	68bb      	ldr	r3, [r7, #8]
 800b8f6:	685b      	ldr	r3, [r3, #4]
 800b8f8:	4a0a      	ldr	r2, [pc, #40]	; (800b924 <sys_check_timeouts+0x70>)
 800b8fa:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800b8fc:	68b9      	ldr	r1, [r7, #8]
 800b8fe:	2007      	movs	r0, #7
 800b900:	f7fe fe7a 	bl	800a5f8 <memp_free>
    if (handler != NULL) {
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	2b00      	cmp	r3, #0
 800b908:	d0da      	beq.n	800b8c0 <sys_check_timeouts+0xc>
      handler(arg);
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	6838      	ldr	r0, [r7, #0]
 800b90e:	4798      	blx	r3
  do {
 800b910:	e7d6      	b.n	800b8c0 <sys_check_timeouts+0xc>
      return;
 800b912:	bf00      	nop
 800b914:	e000      	b.n	800b918 <sys_check_timeouts+0x64>
      return;
 800b916:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800b918:	3710      	adds	r7, #16
 800b91a:	46bd      	mov	sp, r7
 800b91c:	bd80      	pop	{r7, pc}
 800b91e:	bf00      	nop
 800b920:	200047a4 	.word	0x200047a4
 800b924:	200047a8 	.word	0x200047a8

0800b928 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 800b928:	b580      	push	{r7, lr}
 800b92a:	b082      	sub	sp, #8
 800b92c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 800b92e:	4b16      	ldr	r3, [pc, #88]	; (800b988 <sys_timeouts_sleeptime+0x60>)
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	2b00      	cmp	r3, #0
 800b934:	d102      	bne.n	800b93c <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 800b936:	f04f 33ff 	mov.w	r3, #4294967295
 800b93a:	e020      	b.n	800b97e <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 800b93c:	f7f9 fbbe 	bl	80050bc <sys_now>
 800b940:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 800b942:	4b11      	ldr	r3, [pc, #68]	; (800b988 <sys_timeouts_sleeptime+0x60>)
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	685a      	ldr	r2, [r3, #4]
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	1ad3      	subs	r3, r2, r3
 800b94c:	0fdb      	lsrs	r3, r3, #31
 800b94e:	f003 0301 	and.w	r3, r3, #1
 800b952:	b2db      	uxtb	r3, r3
 800b954:	2b00      	cmp	r3, #0
 800b956:	d001      	beq.n	800b95c <sys_timeouts_sleeptime+0x34>
    return 0;
 800b958:	2300      	movs	r3, #0
 800b95a:	e010      	b.n	800b97e <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 800b95c:	4b0a      	ldr	r3, [pc, #40]	; (800b988 <sys_timeouts_sleeptime+0x60>)
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	685a      	ldr	r2, [r3, #4]
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	1ad3      	subs	r3, r2, r3
 800b966:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 800b968:	683b      	ldr	r3, [r7, #0]
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	da06      	bge.n	800b97c <sys_timeouts_sleeptime+0x54>
 800b96e:	4b07      	ldr	r3, [pc, #28]	; (800b98c <sys_timeouts_sleeptime+0x64>)
 800b970:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 800b974:	4906      	ldr	r1, [pc, #24]	; (800b990 <sys_timeouts_sleeptime+0x68>)
 800b976:	4807      	ldr	r0, [pc, #28]	; (800b994 <sys_timeouts_sleeptime+0x6c>)
 800b978:	f003 fb1c 	bl	800efb4 <iprintf>
    return ret;
 800b97c:	683b      	ldr	r3, [r7, #0]
  }
}
 800b97e:	4618      	mov	r0, r3
 800b980:	3708      	adds	r7, #8
 800b982:	46bd      	mov	sp, r7
 800b984:	bd80      	pop	{r7, pc}
 800b986:	bf00      	nop
 800b988:	200047a4 	.word	0x200047a4
 800b98c:	08011418 	.word	0x08011418
 800b990:	080114ec 	.word	0x080114ec
 800b994:	0801148c 	.word	0x0801148c

0800b998 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800b998:	b580      	push	{r7, lr}
 800b99a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800b99c:	f003 fb22 	bl	800efe4 <rand>
 800b9a0:	4603      	mov	r3, r0
 800b9a2:	b29b      	uxth	r3, r3
 800b9a4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800b9a8:	b29b      	uxth	r3, r3
 800b9aa:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800b9ae:	b29a      	uxth	r2, r3
 800b9b0:	4b01      	ldr	r3, [pc, #4]	; (800b9b8 <udp_init+0x20>)
 800b9b2:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800b9b4:	bf00      	nop
 800b9b6:	bd80      	pop	{r7, pc}
 800b9b8:	20000010 	.word	0x20000010

0800b9bc <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 800b9bc:	b480      	push	{r7}
 800b9be:	b083      	sub	sp, #12
 800b9c0:	af00      	add	r7, sp, #0
  u16_t n = 0;
 800b9c2:	2300      	movs	r3, #0
 800b9c4:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800b9c6:	4b17      	ldr	r3, [pc, #92]	; (800ba24 <udp_new_port+0x68>)
 800b9c8:	881b      	ldrh	r3, [r3, #0]
 800b9ca:	1c5a      	adds	r2, r3, #1
 800b9cc:	b291      	uxth	r1, r2
 800b9ce:	4a15      	ldr	r2, [pc, #84]	; (800ba24 <udp_new_port+0x68>)
 800b9d0:	8011      	strh	r1, [r2, #0]
 800b9d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b9d6:	4293      	cmp	r3, r2
 800b9d8:	d103      	bne.n	800b9e2 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800b9da:	4b12      	ldr	r3, [pc, #72]	; (800ba24 <udp_new_port+0x68>)
 800b9dc:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800b9e0:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800b9e2:	4b11      	ldr	r3, [pc, #68]	; (800ba28 <udp_new_port+0x6c>)
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	603b      	str	r3, [r7, #0]
 800b9e8:	e011      	b.n	800ba0e <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 800b9ea:	683b      	ldr	r3, [r7, #0]
 800b9ec:	8a5a      	ldrh	r2, [r3, #18]
 800b9ee:	4b0d      	ldr	r3, [pc, #52]	; (800ba24 <udp_new_port+0x68>)
 800b9f0:	881b      	ldrh	r3, [r3, #0]
 800b9f2:	429a      	cmp	r2, r3
 800b9f4:	d108      	bne.n	800ba08 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 800b9f6:	88fb      	ldrh	r3, [r7, #6]
 800b9f8:	3301      	adds	r3, #1
 800b9fa:	80fb      	strh	r3, [r7, #6]
 800b9fc:	88fb      	ldrh	r3, [r7, #6]
 800b9fe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ba02:	d3e0      	bcc.n	800b9c6 <udp_new_port+0xa>
        return 0;
 800ba04:	2300      	movs	r3, #0
 800ba06:	e007      	b.n	800ba18 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800ba08:	683b      	ldr	r3, [r7, #0]
 800ba0a:	68db      	ldr	r3, [r3, #12]
 800ba0c:	603b      	str	r3, [r7, #0]
 800ba0e:	683b      	ldr	r3, [r7, #0]
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	d1ea      	bne.n	800b9ea <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 800ba14:	4b03      	ldr	r3, [pc, #12]	; (800ba24 <udp_new_port+0x68>)
 800ba16:	881b      	ldrh	r3, [r3, #0]
}
 800ba18:	4618      	mov	r0, r3
 800ba1a:	370c      	adds	r7, #12
 800ba1c:	46bd      	mov	sp, r7
 800ba1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba22:	4770      	bx	lr
 800ba24:	20000010 	.word	0x20000010
 800ba28:	2000ceac 	.word	0x2000ceac

0800ba2c <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800ba2c:	b580      	push	{r7, lr}
 800ba2e:	b084      	sub	sp, #16
 800ba30:	af00      	add	r7, sp, #0
 800ba32:	60f8      	str	r0, [r7, #12]
 800ba34:	60b9      	str	r1, [r7, #8]
 800ba36:	4613      	mov	r3, r2
 800ba38:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d105      	bne.n	800ba4c <udp_input_local_match+0x20>
 800ba40:	4b27      	ldr	r3, [pc, #156]	; (800bae0 <udp_input_local_match+0xb4>)
 800ba42:	2287      	movs	r2, #135	; 0x87
 800ba44:	4927      	ldr	r1, [pc, #156]	; (800bae4 <udp_input_local_match+0xb8>)
 800ba46:	4828      	ldr	r0, [pc, #160]	; (800bae8 <udp_input_local_match+0xbc>)
 800ba48:	f003 fab4 	bl	800efb4 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800ba4c:	68bb      	ldr	r3, [r7, #8]
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	d105      	bne.n	800ba5e <udp_input_local_match+0x32>
 800ba52:	4b23      	ldr	r3, [pc, #140]	; (800bae0 <udp_input_local_match+0xb4>)
 800ba54:	2288      	movs	r2, #136	; 0x88
 800ba56:	4925      	ldr	r1, [pc, #148]	; (800baec <udp_input_local_match+0xc0>)
 800ba58:	4823      	ldr	r0, [pc, #140]	; (800bae8 <udp_input_local_match+0xbc>)
 800ba5a:	f003 faab 	bl	800efb4 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800ba5e:	68fb      	ldr	r3, [r7, #12]
 800ba60:	7a1b      	ldrb	r3, [r3, #8]
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d00b      	beq.n	800ba7e <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800ba66:	68fb      	ldr	r3, [r7, #12]
 800ba68:	7a1a      	ldrb	r2, [r3, #8]
 800ba6a:	4b21      	ldr	r3, [pc, #132]	; (800baf0 <udp_input_local_match+0xc4>)
 800ba6c:	685b      	ldr	r3, [r3, #4]
 800ba6e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ba72:	3301      	adds	r3, #1
 800ba74:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800ba76:	429a      	cmp	r2, r3
 800ba78:	d001      	beq.n	800ba7e <udp_input_local_match+0x52>
    return 0;
 800ba7a:	2300      	movs	r3, #0
 800ba7c:	e02b      	b.n	800bad6 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800ba7e:	79fb      	ldrb	r3, [r7, #7]
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d018      	beq.n	800bab6 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d013      	beq.n	800bab2 <udp_input_local_match+0x86>
 800ba8a:	68fb      	ldr	r3, [r7, #12]
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d00f      	beq.n	800bab2 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800ba92:	4b17      	ldr	r3, [pc, #92]	; (800baf0 <udp_input_local_match+0xc4>)
 800ba94:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800ba96:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba9a:	d00a      	beq.n	800bab2 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800ba9c:	68fb      	ldr	r3, [r7, #12]
 800ba9e:	681a      	ldr	r2, [r3, #0]
 800baa0:	4b13      	ldr	r3, [pc, #76]	; (800baf0 <udp_input_local_match+0xc4>)
 800baa2:	695b      	ldr	r3, [r3, #20]
 800baa4:	405a      	eors	r2, r3
 800baa6:	68bb      	ldr	r3, [r7, #8]
 800baa8:	3308      	adds	r3, #8
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d110      	bne.n	800bad4 <udp_input_local_match+0xa8>
          return 1;
 800bab2:	2301      	movs	r3, #1
 800bab4:	e00f      	b.n	800bad6 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d009      	beq.n	800bad0 <udp_input_local_match+0xa4>
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	d005      	beq.n	800bad0 <udp_input_local_match+0xa4>
 800bac4:	68fb      	ldr	r3, [r7, #12]
 800bac6:	681a      	ldr	r2, [r3, #0]
 800bac8:	4b09      	ldr	r3, [pc, #36]	; (800baf0 <udp_input_local_match+0xc4>)
 800baca:	695b      	ldr	r3, [r3, #20]
 800bacc:	429a      	cmp	r2, r3
 800bace:	d101      	bne.n	800bad4 <udp_input_local_match+0xa8>
        return 1;
 800bad0:	2301      	movs	r3, #1
 800bad2:	e000      	b.n	800bad6 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800bad4:	2300      	movs	r3, #0
}
 800bad6:	4618      	mov	r0, r3
 800bad8:	3710      	adds	r7, #16
 800bada:	46bd      	mov	sp, r7
 800badc:	bd80      	pop	{r7, pc}
 800bade:	bf00      	nop
 800bae0:	08011500 	.word	0x08011500
 800bae4:	08011530 	.word	0x08011530
 800bae8:	08011554 	.word	0x08011554
 800baec:	0801157c 	.word	0x0801157c
 800baf0:	20007b08 	.word	0x20007b08

0800baf4 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800baf4:	b590      	push	{r4, r7, lr}
 800baf6:	b08d      	sub	sp, #52	; 0x34
 800baf8:	af02      	add	r7, sp, #8
 800bafa:	6078      	str	r0, [r7, #4]
 800bafc:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800bafe:	2300      	movs	r3, #0
 800bb00:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	d105      	bne.n	800bb14 <udp_input+0x20>
 800bb08:	4b7c      	ldr	r3, [pc, #496]	; (800bcfc <udp_input+0x208>)
 800bb0a:	22cf      	movs	r2, #207	; 0xcf
 800bb0c:	497c      	ldr	r1, [pc, #496]	; (800bd00 <udp_input+0x20c>)
 800bb0e:	487d      	ldr	r0, [pc, #500]	; (800bd04 <udp_input+0x210>)
 800bb10:	f003 fa50 	bl	800efb4 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800bb14:	683b      	ldr	r3, [r7, #0]
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	d105      	bne.n	800bb26 <udp_input+0x32>
 800bb1a:	4b78      	ldr	r3, [pc, #480]	; (800bcfc <udp_input+0x208>)
 800bb1c:	22d0      	movs	r2, #208	; 0xd0
 800bb1e:	497a      	ldr	r1, [pc, #488]	; (800bd08 <udp_input+0x214>)
 800bb20:	4878      	ldr	r0, [pc, #480]	; (800bd04 <udp_input+0x210>)
 800bb22:	f003 fa47 	bl	800efb4 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	895b      	ldrh	r3, [r3, #10]
 800bb2a:	2b07      	cmp	r3, #7
 800bb2c:	d803      	bhi.n	800bb36 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800bb2e:	6878      	ldr	r0, [r7, #4]
 800bb30:	f7ff fba2 	bl	800b278 <pbuf_free>
    goto end;
 800bb34:	e0de      	b.n	800bcf4 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	685b      	ldr	r3, [r3, #4]
 800bb3a:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800bb3c:	4b73      	ldr	r3, [pc, #460]	; (800bd0c <udp_input+0x218>)
 800bb3e:	695a      	ldr	r2, [r3, #20]
 800bb40:	4b72      	ldr	r3, [pc, #456]	; (800bd0c <udp_input+0x218>)
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	4619      	mov	r1, r3
 800bb46:	4610      	mov	r0, r2
 800bb48:	f001 ff76 	bl	800da38 <ip4_addr_isbroadcast_u32>
 800bb4c:	4603      	mov	r3, r0
 800bb4e:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800bb50:	697b      	ldr	r3, [r7, #20]
 800bb52:	881b      	ldrh	r3, [r3, #0]
 800bb54:	b29b      	uxth	r3, r3
 800bb56:	4618      	mov	r0, r3
 800bb58:	f7fe f848 	bl	8009bec <lwip_htons>
 800bb5c:	4603      	mov	r3, r0
 800bb5e:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800bb60:	697b      	ldr	r3, [r7, #20]
 800bb62:	885b      	ldrh	r3, [r3, #2]
 800bb64:	b29b      	uxth	r3, r3
 800bb66:	4618      	mov	r0, r3
 800bb68:	f7fe f840 	bl	8009bec <lwip_htons>
 800bb6c:	4603      	mov	r3, r0
 800bb6e:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800bb70:	2300      	movs	r3, #0
 800bb72:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 800bb74:	2300      	movs	r3, #0
 800bb76:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800bb78:	2300      	movs	r3, #0
 800bb7a:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800bb7c:	4b64      	ldr	r3, [pc, #400]	; (800bd10 <udp_input+0x21c>)
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	627b      	str	r3, [r7, #36]	; 0x24
 800bb82:	e054      	b.n	800bc2e <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800bb84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb86:	8a5b      	ldrh	r3, [r3, #18]
 800bb88:	89fa      	ldrh	r2, [r7, #14]
 800bb8a:	429a      	cmp	r2, r3
 800bb8c:	d14a      	bne.n	800bc24 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800bb8e:	7cfb      	ldrb	r3, [r7, #19]
 800bb90:	461a      	mov	r2, r3
 800bb92:	6839      	ldr	r1, [r7, #0]
 800bb94:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bb96:	f7ff ff49 	bl	800ba2c <udp_input_local_match>
 800bb9a:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d041      	beq.n	800bc24 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800bba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bba2:	7c1b      	ldrb	r3, [r3, #16]
 800bba4:	f003 0304 	and.w	r3, r3, #4
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	d11d      	bne.n	800bbe8 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800bbac:	69fb      	ldr	r3, [r7, #28]
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	d102      	bne.n	800bbb8 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800bbb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbb4:	61fb      	str	r3, [r7, #28]
 800bbb6:	e017      	b.n	800bbe8 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800bbb8:	7cfb      	ldrb	r3, [r7, #19]
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	d014      	beq.n	800bbe8 <udp_input+0xf4>
 800bbbe:	4b53      	ldr	r3, [pc, #332]	; (800bd0c <udp_input+0x218>)
 800bbc0:	695b      	ldr	r3, [r3, #20]
 800bbc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bbc6:	d10f      	bne.n	800bbe8 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800bbc8:	69fb      	ldr	r3, [r7, #28]
 800bbca:	681a      	ldr	r2, [r3, #0]
 800bbcc:	683b      	ldr	r3, [r7, #0]
 800bbce:	3304      	adds	r3, #4
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	429a      	cmp	r2, r3
 800bbd4:	d008      	beq.n	800bbe8 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800bbd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbd8:	681a      	ldr	r2, [r3, #0]
 800bbda:	683b      	ldr	r3, [r7, #0]
 800bbdc:	3304      	adds	r3, #4
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	429a      	cmp	r2, r3
 800bbe2:	d101      	bne.n	800bbe8 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800bbe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbe6:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800bbe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbea:	8a9b      	ldrh	r3, [r3, #20]
 800bbec:	8a3a      	ldrh	r2, [r7, #16]
 800bbee:	429a      	cmp	r2, r3
 800bbf0:	d118      	bne.n	800bc24 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800bbf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbf4:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	d005      	beq.n	800bc06 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800bbfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbfc:	685a      	ldr	r2, [r3, #4]
 800bbfe:	4b43      	ldr	r3, [pc, #268]	; (800bd0c <udp_input+0x218>)
 800bc00:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800bc02:	429a      	cmp	r2, r3
 800bc04:	d10e      	bne.n	800bc24 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800bc06:	6a3b      	ldr	r3, [r7, #32]
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	d014      	beq.n	800bc36 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800bc0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc0e:	68da      	ldr	r2, [r3, #12]
 800bc10:	6a3b      	ldr	r3, [r7, #32]
 800bc12:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800bc14:	4b3e      	ldr	r3, [pc, #248]	; (800bd10 <udp_input+0x21c>)
 800bc16:	681a      	ldr	r2, [r3, #0]
 800bc18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc1a:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800bc1c:	4a3c      	ldr	r2, [pc, #240]	; (800bd10 <udp_input+0x21c>)
 800bc1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc20:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800bc22:	e008      	b.n	800bc36 <udp_input+0x142>
      }
    }

    prev = pcb;
 800bc24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc26:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800bc28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc2a:	68db      	ldr	r3, [r3, #12]
 800bc2c:	627b      	str	r3, [r7, #36]	; 0x24
 800bc2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	d1a7      	bne.n	800bb84 <udp_input+0x90>
 800bc34:	e000      	b.n	800bc38 <udp_input+0x144>
        break;
 800bc36:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800bc38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	d101      	bne.n	800bc42 <udp_input+0x14e>
    pcb = uncon_pcb;
 800bc3e:	69fb      	ldr	r3, [r7, #28]
 800bc40:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800bc42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	d002      	beq.n	800bc4e <udp_input+0x15a>
    for_us = 1;
 800bc48:	2301      	movs	r3, #1
 800bc4a:	76fb      	strb	r3, [r7, #27]
 800bc4c:	e00a      	b.n	800bc64 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800bc4e:	683b      	ldr	r3, [r7, #0]
 800bc50:	3304      	adds	r3, #4
 800bc52:	681a      	ldr	r2, [r3, #0]
 800bc54:	4b2d      	ldr	r3, [pc, #180]	; (800bd0c <udp_input+0x218>)
 800bc56:	695b      	ldr	r3, [r3, #20]
 800bc58:	429a      	cmp	r2, r3
 800bc5a:	bf0c      	ite	eq
 800bc5c:	2301      	moveq	r3, #1
 800bc5e:	2300      	movne	r3, #0
 800bc60:	b2db      	uxtb	r3, r3
 800bc62:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800bc64:	7efb      	ldrb	r3, [r7, #27]
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d041      	beq.n	800bcee <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800bc6a:	2108      	movs	r1, #8
 800bc6c:	6878      	ldr	r0, [r7, #4]
 800bc6e:	f7ff fa7d 	bl	800b16c <pbuf_remove_header>
 800bc72:	4603      	mov	r3, r0
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d00a      	beq.n	800bc8e <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800bc78:	4b20      	ldr	r3, [pc, #128]	; (800bcfc <udp_input+0x208>)
 800bc7a:	f44f 72b8 	mov.w	r2, #368	; 0x170
 800bc7e:	4925      	ldr	r1, [pc, #148]	; (800bd14 <udp_input+0x220>)
 800bc80:	4820      	ldr	r0, [pc, #128]	; (800bd04 <udp_input+0x210>)
 800bc82:	f003 f997 	bl	800efb4 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800bc86:	6878      	ldr	r0, [r7, #4]
 800bc88:	f7ff faf6 	bl	800b278 <pbuf_free>
      goto end;
 800bc8c:	e032      	b.n	800bcf4 <udp_input+0x200>
    }

    if (pcb != NULL) {
 800bc8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	d012      	beq.n	800bcba <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800bc94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc96:	699b      	ldr	r3, [r3, #24]
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d00a      	beq.n	800bcb2 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800bc9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc9e:	699c      	ldr	r4, [r3, #24]
 800bca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bca2:	69d8      	ldr	r0, [r3, #28]
 800bca4:	8a3b      	ldrh	r3, [r7, #16]
 800bca6:	9300      	str	r3, [sp, #0]
 800bca8:	4b1b      	ldr	r3, [pc, #108]	; (800bd18 <udp_input+0x224>)
 800bcaa:	687a      	ldr	r2, [r7, #4]
 800bcac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bcae:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800bcb0:	e021      	b.n	800bcf6 <udp_input+0x202>
        pbuf_free(p);
 800bcb2:	6878      	ldr	r0, [r7, #4]
 800bcb4:	f7ff fae0 	bl	800b278 <pbuf_free>
        goto end;
 800bcb8:	e01c      	b.n	800bcf4 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800bcba:	7cfb      	ldrb	r3, [r7, #19]
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d112      	bne.n	800bce6 <udp_input+0x1f2>
 800bcc0:	4b12      	ldr	r3, [pc, #72]	; (800bd0c <udp_input+0x218>)
 800bcc2:	695b      	ldr	r3, [r3, #20]
 800bcc4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bcc8:	2be0      	cmp	r3, #224	; 0xe0
 800bcca:	d00c      	beq.n	800bce6 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800bccc:	4b0f      	ldr	r3, [pc, #60]	; (800bd0c <udp_input+0x218>)
 800bcce:	899b      	ldrh	r3, [r3, #12]
 800bcd0:	3308      	adds	r3, #8
 800bcd2:	b29b      	uxth	r3, r3
 800bcd4:	b21b      	sxth	r3, r3
 800bcd6:	4619      	mov	r1, r3
 800bcd8:	6878      	ldr	r0, [r7, #4]
 800bcda:	f7ff faba 	bl	800b252 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800bcde:	2103      	movs	r1, #3
 800bce0:	6878      	ldr	r0, [r7, #4]
 800bce2:	f001 fb93 	bl	800d40c <icmp_dest_unreach>
      pbuf_free(p);
 800bce6:	6878      	ldr	r0, [r7, #4]
 800bce8:	f7ff fac6 	bl	800b278 <pbuf_free>
  return;
 800bcec:	e003      	b.n	800bcf6 <udp_input+0x202>
    pbuf_free(p);
 800bcee:	6878      	ldr	r0, [r7, #4]
 800bcf0:	f7ff fac2 	bl	800b278 <pbuf_free>
  return;
 800bcf4:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800bcf6:	372c      	adds	r7, #44	; 0x2c
 800bcf8:	46bd      	mov	sp, r7
 800bcfa:	bd90      	pop	{r4, r7, pc}
 800bcfc:	08011500 	.word	0x08011500
 800bd00:	080115a4 	.word	0x080115a4
 800bd04:	08011554 	.word	0x08011554
 800bd08:	080115bc 	.word	0x080115bc
 800bd0c:	20007b08 	.word	0x20007b08
 800bd10:	2000ceac 	.word	0x2000ceac
 800bd14:	080115d8 	.word	0x080115d8
 800bd18:	20007b18 	.word	0x20007b18

0800bd1c <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 800bd1c:	b580      	push	{r7, lr}
 800bd1e:	b082      	sub	sp, #8
 800bd20:	af00      	add	r7, sp, #0
 800bd22:	6078      	str	r0, [r7, #4]
 800bd24:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d109      	bne.n	800bd40 <udp_send+0x24>
 800bd2c:	4b11      	ldr	r3, [pc, #68]	; (800bd74 <udp_send+0x58>)
 800bd2e:	f240 12d5 	movw	r2, #469	; 0x1d5
 800bd32:	4911      	ldr	r1, [pc, #68]	; (800bd78 <udp_send+0x5c>)
 800bd34:	4811      	ldr	r0, [pc, #68]	; (800bd7c <udp_send+0x60>)
 800bd36:	f003 f93d 	bl	800efb4 <iprintf>
 800bd3a:	f06f 030f 	mvn.w	r3, #15
 800bd3e:	e015      	b.n	800bd6c <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 800bd40:	683b      	ldr	r3, [r7, #0]
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	d109      	bne.n	800bd5a <udp_send+0x3e>
 800bd46:	4b0b      	ldr	r3, [pc, #44]	; (800bd74 <udp_send+0x58>)
 800bd48:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 800bd4c:	490c      	ldr	r1, [pc, #48]	; (800bd80 <udp_send+0x64>)
 800bd4e:	480b      	ldr	r0, [pc, #44]	; (800bd7c <udp_send+0x60>)
 800bd50:	f003 f930 	bl	800efb4 <iprintf>
 800bd54:	f06f 030f 	mvn.w	r3, #15
 800bd58:	e008      	b.n	800bd6c <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	1d1a      	adds	r2, r3, #4
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	8a9b      	ldrh	r3, [r3, #20]
 800bd62:	6839      	ldr	r1, [r7, #0]
 800bd64:	6878      	ldr	r0, [r7, #4]
 800bd66:	f000 f80d 	bl	800bd84 <udp_sendto>
 800bd6a:	4603      	mov	r3, r0
}
 800bd6c:	4618      	mov	r0, r3
 800bd6e:	3708      	adds	r7, #8
 800bd70:	46bd      	mov	sp, r7
 800bd72:	bd80      	pop	{r7, pc}
 800bd74:	08011500 	.word	0x08011500
 800bd78:	080115f4 	.word	0x080115f4
 800bd7c:	08011554 	.word	0x08011554
 800bd80:	0801160c 	.word	0x0801160c

0800bd84 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 800bd84:	b580      	push	{r7, lr}
 800bd86:	b088      	sub	sp, #32
 800bd88:	af02      	add	r7, sp, #8
 800bd8a:	60f8      	str	r0, [r7, #12]
 800bd8c:	60b9      	str	r1, [r7, #8]
 800bd8e:	607a      	str	r2, [r7, #4]
 800bd90:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 800bd92:	68fb      	ldr	r3, [r7, #12]
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d109      	bne.n	800bdac <udp_sendto+0x28>
 800bd98:	4b23      	ldr	r3, [pc, #140]	; (800be28 <udp_sendto+0xa4>)
 800bd9a:	f44f 7206 	mov.w	r2, #536	; 0x218
 800bd9e:	4923      	ldr	r1, [pc, #140]	; (800be2c <udp_sendto+0xa8>)
 800bda0:	4823      	ldr	r0, [pc, #140]	; (800be30 <udp_sendto+0xac>)
 800bda2:	f003 f907 	bl	800efb4 <iprintf>
 800bda6:	f06f 030f 	mvn.w	r3, #15
 800bdaa:	e038      	b.n	800be1e <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 800bdac:	68bb      	ldr	r3, [r7, #8]
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d109      	bne.n	800bdc6 <udp_sendto+0x42>
 800bdb2:	4b1d      	ldr	r3, [pc, #116]	; (800be28 <udp_sendto+0xa4>)
 800bdb4:	f240 2219 	movw	r2, #537	; 0x219
 800bdb8:	491e      	ldr	r1, [pc, #120]	; (800be34 <udp_sendto+0xb0>)
 800bdba:	481d      	ldr	r0, [pc, #116]	; (800be30 <udp_sendto+0xac>)
 800bdbc:	f003 f8fa 	bl	800efb4 <iprintf>
 800bdc0:	f06f 030f 	mvn.w	r3, #15
 800bdc4:	e02b      	b.n	800be1e <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	d109      	bne.n	800bde0 <udp_sendto+0x5c>
 800bdcc:	4b16      	ldr	r3, [pc, #88]	; (800be28 <udp_sendto+0xa4>)
 800bdce:	f240 221a 	movw	r2, #538	; 0x21a
 800bdd2:	4919      	ldr	r1, [pc, #100]	; (800be38 <udp_sendto+0xb4>)
 800bdd4:	4816      	ldr	r0, [pc, #88]	; (800be30 <udp_sendto+0xac>)
 800bdd6:	f003 f8ed 	bl	800efb4 <iprintf>
 800bdda:	f06f 030f 	mvn.w	r3, #15
 800bdde:	e01e      	b.n	800be1e <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 800bde0:	68fb      	ldr	r3, [r7, #12]
 800bde2:	7a1b      	ldrb	r3, [r3, #8]
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	d006      	beq.n	800bdf6 <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 800bde8:	68fb      	ldr	r3, [r7, #12]
 800bdea:	7a1b      	ldrb	r3, [r3, #8]
 800bdec:	4618      	mov	r0, r3
 800bdee:	f7fe ff15 	bl	800ac1c <netif_get_by_index>
 800bdf2:	6178      	str	r0, [r7, #20]
 800bdf4:	e003      	b.n	800bdfe <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 800bdf6:	6878      	ldr	r0, [r7, #4]
 800bdf8:	f001 fb92 	bl	800d520 <ip4_route>
 800bdfc:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 800bdfe:	697b      	ldr	r3, [r7, #20]
 800be00:	2b00      	cmp	r3, #0
 800be02:	d102      	bne.n	800be0a <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 800be04:	f06f 0303 	mvn.w	r3, #3
 800be08:	e009      	b.n	800be1e <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 800be0a:	887a      	ldrh	r2, [r7, #2]
 800be0c:	697b      	ldr	r3, [r7, #20]
 800be0e:	9300      	str	r3, [sp, #0]
 800be10:	4613      	mov	r3, r2
 800be12:	687a      	ldr	r2, [r7, #4]
 800be14:	68b9      	ldr	r1, [r7, #8]
 800be16:	68f8      	ldr	r0, [r7, #12]
 800be18:	f000 f810 	bl	800be3c <udp_sendto_if>
 800be1c:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800be1e:	4618      	mov	r0, r3
 800be20:	3718      	adds	r7, #24
 800be22:	46bd      	mov	sp, r7
 800be24:	bd80      	pop	{r7, pc}
 800be26:	bf00      	nop
 800be28:	08011500 	.word	0x08011500
 800be2c:	08011624 	.word	0x08011624
 800be30:	08011554 	.word	0x08011554
 800be34:	0801163c 	.word	0x0801163c
 800be38:	08011658 	.word	0x08011658

0800be3c <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 800be3c:	b580      	push	{r7, lr}
 800be3e:	b088      	sub	sp, #32
 800be40:	af02      	add	r7, sp, #8
 800be42:	60f8      	str	r0, [r7, #12]
 800be44:	60b9      	str	r1, [r7, #8]
 800be46:	607a      	str	r2, [r7, #4]
 800be48:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 800be4a:	68fb      	ldr	r3, [r7, #12]
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d109      	bne.n	800be64 <udp_sendto_if+0x28>
 800be50:	4b2e      	ldr	r3, [pc, #184]	; (800bf0c <udp_sendto_if+0xd0>)
 800be52:	f44f 7220 	mov.w	r2, #640	; 0x280
 800be56:	492e      	ldr	r1, [pc, #184]	; (800bf10 <udp_sendto_if+0xd4>)
 800be58:	482e      	ldr	r0, [pc, #184]	; (800bf14 <udp_sendto_if+0xd8>)
 800be5a:	f003 f8ab 	bl	800efb4 <iprintf>
 800be5e:	f06f 030f 	mvn.w	r3, #15
 800be62:	e04f      	b.n	800bf04 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 800be64:	68bb      	ldr	r3, [r7, #8]
 800be66:	2b00      	cmp	r3, #0
 800be68:	d109      	bne.n	800be7e <udp_sendto_if+0x42>
 800be6a:	4b28      	ldr	r3, [pc, #160]	; (800bf0c <udp_sendto_if+0xd0>)
 800be6c:	f240 2281 	movw	r2, #641	; 0x281
 800be70:	4929      	ldr	r1, [pc, #164]	; (800bf18 <udp_sendto_if+0xdc>)
 800be72:	4828      	ldr	r0, [pc, #160]	; (800bf14 <udp_sendto_if+0xd8>)
 800be74:	f003 f89e 	bl	800efb4 <iprintf>
 800be78:	f06f 030f 	mvn.w	r3, #15
 800be7c:	e042      	b.n	800bf04 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	2b00      	cmp	r3, #0
 800be82:	d109      	bne.n	800be98 <udp_sendto_if+0x5c>
 800be84:	4b21      	ldr	r3, [pc, #132]	; (800bf0c <udp_sendto_if+0xd0>)
 800be86:	f240 2282 	movw	r2, #642	; 0x282
 800be8a:	4924      	ldr	r1, [pc, #144]	; (800bf1c <udp_sendto_if+0xe0>)
 800be8c:	4821      	ldr	r0, [pc, #132]	; (800bf14 <udp_sendto_if+0xd8>)
 800be8e:	f003 f891 	bl	800efb4 <iprintf>
 800be92:	f06f 030f 	mvn.w	r3, #15
 800be96:	e035      	b.n	800bf04 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 800be98:	6a3b      	ldr	r3, [r7, #32]
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	d109      	bne.n	800beb2 <udp_sendto_if+0x76>
 800be9e:	4b1b      	ldr	r3, [pc, #108]	; (800bf0c <udp_sendto_if+0xd0>)
 800bea0:	f240 2283 	movw	r2, #643	; 0x283
 800bea4:	491e      	ldr	r1, [pc, #120]	; (800bf20 <udp_sendto_if+0xe4>)
 800bea6:	481b      	ldr	r0, [pc, #108]	; (800bf14 <udp_sendto_if+0xd8>)
 800bea8:	f003 f884 	bl	800efb4 <iprintf>
 800beac:	f06f 030f 	mvn.w	r3, #15
 800beb0:	e028      	b.n	800bf04 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800beb2:	68fb      	ldr	r3, [r7, #12]
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d009      	beq.n	800becc <udp_sendto_if+0x90>
 800beb8:	68fb      	ldr	r3, [r7, #12]
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	d005      	beq.n	800becc <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 800bec0:	68fb      	ldr	r3, [r7, #12]
 800bec2:	681b      	ldr	r3, [r3, #0]
 800bec4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800bec8:	2be0      	cmp	r3, #224	; 0xe0
 800beca:	d103      	bne.n	800bed4 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 800becc:	6a3b      	ldr	r3, [r7, #32]
 800bece:	3304      	adds	r3, #4
 800bed0:	617b      	str	r3, [r7, #20]
 800bed2:	e00b      	b.n	800beec <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 800bed4:	68fb      	ldr	r3, [r7, #12]
 800bed6:	681a      	ldr	r2, [r3, #0]
 800bed8:	6a3b      	ldr	r3, [r7, #32]
 800beda:	3304      	adds	r3, #4
 800bedc:	681b      	ldr	r3, [r3, #0]
 800bede:	429a      	cmp	r2, r3
 800bee0:	d002      	beq.n	800bee8 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 800bee2:	f06f 0303 	mvn.w	r3, #3
 800bee6:	e00d      	b.n	800bf04 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 800bee8:	68fb      	ldr	r3, [r7, #12]
 800beea:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 800beec:	887a      	ldrh	r2, [r7, #2]
 800beee:	697b      	ldr	r3, [r7, #20]
 800bef0:	9301      	str	r3, [sp, #4]
 800bef2:	6a3b      	ldr	r3, [r7, #32]
 800bef4:	9300      	str	r3, [sp, #0]
 800bef6:	4613      	mov	r3, r2
 800bef8:	687a      	ldr	r2, [r7, #4]
 800befa:	68b9      	ldr	r1, [r7, #8]
 800befc:	68f8      	ldr	r0, [r7, #12]
 800befe:	f000 f811 	bl	800bf24 <udp_sendto_if_src>
 800bf02:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800bf04:	4618      	mov	r0, r3
 800bf06:	3718      	adds	r7, #24
 800bf08:	46bd      	mov	sp, r7
 800bf0a:	bd80      	pop	{r7, pc}
 800bf0c:	08011500 	.word	0x08011500
 800bf10:	08011674 	.word	0x08011674
 800bf14:	08011554 	.word	0x08011554
 800bf18:	08011690 	.word	0x08011690
 800bf1c:	080116ac 	.word	0x080116ac
 800bf20:	080116cc 	.word	0x080116cc

0800bf24 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 800bf24:	b580      	push	{r7, lr}
 800bf26:	b08c      	sub	sp, #48	; 0x30
 800bf28:	af04      	add	r7, sp, #16
 800bf2a:	60f8      	str	r0, [r7, #12]
 800bf2c:	60b9      	str	r1, [r7, #8]
 800bf2e:	607a      	str	r2, [r7, #4]
 800bf30:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 800bf32:	68fb      	ldr	r3, [r7, #12]
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	d109      	bne.n	800bf4c <udp_sendto_if_src+0x28>
 800bf38:	4b65      	ldr	r3, [pc, #404]	; (800c0d0 <udp_sendto_if_src+0x1ac>)
 800bf3a:	f240 22d1 	movw	r2, #721	; 0x2d1
 800bf3e:	4965      	ldr	r1, [pc, #404]	; (800c0d4 <udp_sendto_if_src+0x1b0>)
 800bf40:	4865      	ldr	r0, [pc, #404]	; (800c0d8 <udp_sendto_if_src+0x1b4>)
 800bf42:	f003 f837 	bl	800efb4 <iprintf>
 800bf46:	f06f 030f 	mvn.w	r3, #15
 800bf4a:	e0bc      	b.n	800c0c6 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 800bf4c:	68bb      	ldr	r3, [r7, #8]
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d109      	bne.n	800bf66 <udp_sendto_if_src+0x42>
 800bf52:	4b5f      	ldr	r3, [pc, #380]	; (800c0d0 <udp_sendto_if_src+0x1ac>)
 800bf54:	f240 22d2 	movw	r2, #722	; 0x2d2
 800bf58:	4960      	ldr	r1, [pc, #384]	; (800c0dc <udp_sendto_if_src+0x1b8>)
 800bf5a:	485f      	ldr	r0, [pc, #380]	; (800c0d8 <udp_sendto_if_src+0x1b4>)
 800bf5c:	f003 f82a 	bl	800efb4 <iprintf>
 800bf60:	f06f 030f 	mvn.w	r3, #15
 800bf64:	e0af      	b.n	800c0c6 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	d109      	bne.n	800bf80 <udp_sendto_if_src+0x5c>
 800bf6c:	4b58      	ldr	r3, [pc, #352]	; (800c0d0 <udp_sendto_if_src+0x1ac>)
 800bf6e:	f240 22d3 	movw	r2, #723	; 0x2d3
 800bf72:	495b      	ldr	r1, [pc, #364]	; (800c0e0 <udp_sendto_if_src+0x1bc>)
 800bf74:	4858      	ldr	r0, [pc, #352]	; (800c0d8 <udp_sendto_if_src+0x1b4>)
 800bf76:	f003 f81d 	bl	800efb4 <iprintf>
 800bf7a:	f06f 030f 	mvn.w	r3, #15
 800bf7e:	e0a2      	b.n	800c0c6 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 800bf80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	d109      	bne.n	800bf9a <udp_sendto_if_src+0x76>
 800bf86:	4b52      	ldr	r3, [pc, #328]	; (800c0d0 <udp_sendto_if_src+0x1ac>)
 800bf88:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 800bf8c:	4955      	ldr	r1, [pc, #340]	; (800c0e4 <udp_sendto_if_src+0x1c0>)
 800bf8e:	4852      	ldr	r0, [pc, #328]	; (800c0d8 <udp_sendto_if_src+0x1b4>)
 800bf90:	f003 f810 	bl	800efb4 <iprintf>
 800bf94:	f06f 030f 	mvn.w	r3, #15
 800bf98:	e095      	b.n	800c0c6 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 800bf9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	d109      	bne.n	800bfb4 <udp_sendto_if_src+0x90>
 800bfa0:	4b4b      	ldr	r3, [pc, #300]	; (800c0d0 <udp_sendto_if_src+0x1ac>)
 800bfa2:	f240 22d5 	movw	r2, #725	; 0x2d5
 800bfa6:	4950      	ldr	r1, [pc, #320]	; (800c0e8 <udp_sendto_if_src+0x1c4>)
 800bfa8:	484b      	ldr	r0, [pc, #300]	; (800c0d8 <udp_sendto_if_src+0x1b4>)
 800bfaa:	f003 f803 	bl	800efb4 <iprintf>
 800bfae:	f06f 030f 	mvn.w	r3, #15
 800bfb2:	e088      	b.n	800c0c6 <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 800bfb4:	68fb      	ldr	r3, [r7, #12]
 800bfb6:	8a5b      	ldrh	r3, [r3, #18]
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d10f      	bne.n	800bfdc <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800bfbc:	68f9      	ldr	r1, [r7, #12]
 800bfbe:	68fb      	ldr	r3, [r7, #12]
 800bfc0:	8a5b      	ldrh	r3, [r3, #18]
 800bfc2:	461a      	mov	r2, r3
 800bfc4:	68f8      	ldr	r0, [r7, #12]
 800bfc6:	f000 f893 	bl	800c0f0 <udp_bind>
 800bfca:	4603      	mov	r3, r0
 800bfcc:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 800bfce:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	d002      	beq.n	800bfdc <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 800bfd6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800bfda:	e074      	b.n	800c0c6 <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 800bfdc:	68bb      	ldr	r3, [r7, #8]
 800bfde:	891b      	ldrh	r3, [r3, #8]
 800bfe0:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 800bfe4:	4293      	cmp	r3, r2
 800bfe6:	d902      	bls.n	800bfee <udp_sendto_if_src+0xca>
    return ERR_MEM;
 800bfe8:	f04f 33ff 	mov.w	r3, #4294967295
 800bfec:	e06b      	b.n	800c0c6 <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 800bfee:	2108      	movs	r1, #8
 800bff0:	68b8      	ldr	r0, [r7, #8]
 800bff2:	f7ff f8ab 	bl	800b14c <pbuf_add_header>
 800bff6:	4603      	mov	r3, r0
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	d015      	beq.n	800c028 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 800bffc:	f44f 7220 	mov.w	r2, #640	; 0x280
 800c000:	2108      	movs	r1, #8
 800c002:	2022      	movs	r0, #34	; 0x22
 800c004:	f7fe fe5a 	bl	800acbc <pbuf_alloc>
 800c008:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 800c00a:	69fb      	ldr	r3, [r7, #28]
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	d102      	bne.n	800c016 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 800c010:	f04f 33ff 	mov.w	r3, #4294967295
 800c014:	e057      	b.n	800c0c6 <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 800c016:	68bb      	ldr	r3, [r7, #8]
 800c018:	891b      	ldrh	r3, [r3, #8]
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d006      	beq.n	800c02c <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 800c01e:	68b9      	ldr	r1, [r7, #8]
 800c020:	69f8      	ldr	r0, [r7, #28]
 800c022:	f7ff fa4d 	bl	800b4c0 <pbuf_chain>
 800c026:	e001      	b.n	800c02c <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 800c028:	68bb      	ldr	r3, [r7, #8]
 800c02a:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 800c02c:	69fb      	ldr	r3, [r7, #28]
 800c02e:	895b      	ldrh	r3, [r3, #10]
 800c030:	2b07      	cmp	r3, #7
 800c032:	d806      	bhi.n	800c042 <udp_sendto_if_src+0x11e>
 800c034:	4b26      	ldr	r3, [pc, #152]	; (800c0d0 <udp_sendto_if_src+0x1ac>)
 800c036:	f240 320e 	movw	r2, #782	; 0x30e
 800c03a:	492c      	ldr	r1, [pc, #176]	; (800c0ec <udp_sendto_if_src+0x1c8>)
 800c03c:	4826      	ldr	r0, [pc, #152]	; (800c0d8 <udp_sendto_if_src+0x1b4>)
 800c03e:	f002 ffb9 	bl	800efb4 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 800c042:	69fb      	ldr	r3, [r7, #28]
 800c044:	685b      	ldr	r3, [r3, #4]
 800c046:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 800c048:	68fb      	ldr	r3, [r7, #12]
 800c04a:	8a5b      	ldrh	r3, [r3, #18]
 800c04c:	4618      	mov	r0, r3
 800c04e:	f7fd fdcd 	bl	8009bec <lwip_htons>
 800c052:	4603      	mov	r3, r0
 800c054:	461a      	mov	r2, r3
 800c056:	697b      	ldr	r3, [r7, #20]
 800c058:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 800c05a:	887b      	ldrh	r3, [r7, #2]
 800c05c:	4618      	mov	r0, r3
 800c05e:	f7fd fdc5 	bl	8009bec <lwip_htons>
 800c062:	4603      	mov	r3, r0
 800c064:	461a      	mov	r2, r3
 800c066:	697b      	ldr	r3, [r7, #20]
 800c068:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 800c06a:	697b      	ldr	r3, [r7, #20]
 800c06c:	2200      	movs	r2, #0
 800c06e:	719a      	strb	r2, [r3, #6]
 800c070:	2200      	movs	r2, #0
 800c072:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 800c074:	69fb      	ldr	r3, [r7, #28]
 800c076:	891b      	ldrh	r3, [r3, #8]
 800c078:	4618      	mov	r0, r3
 800c07a:	f7fd fdb7 	bl	8009bec <lwip_htons>
 800c07e:	4603      	mov	r3, r0
 800c080:	461a      	mov	r2, r3
 800c082:	697b      	ldr	r3, [r7, #20]
 800c084:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 800c086:	2311      	movs	r3, #17
 800c088:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 800c08a:	68fb      	ldr	r3, [r7, #12]
 800c08c:	7adb      	ldrb	r3, [r3, #11]
 800c08e:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800c090:	68fb      	ldr	r3, [r7, #12]
 800c092:	7a9b      	ldrb	r3, [r3, #10]
 800c094:	7cb9      	ldrb	r1, [r7, #18]
 800c096:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c098:	9202      	str	r2, [sp, #8]
 800c09a:	7cfa      	ldrb	r2, [r7, #19]
 800c09c:	9201      	str	r2, [sp, #4]
 800c09e:	9300      	str	r3, [sp, #0]
 800c0a0:	460b      	mov	r3, r1
 800c0a2:	687a      	ldr	r2, [r7, #4]
 800c0a4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c0a6:	69f8      	ldr	r0, [r7, #28]
 800c0a8:	f001 fc18 	bl	800d8dc <ip4_output_if_src>
 800c0ac:	4603      	mov	r3, r0
 800c0ae:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 800c0b0:	69fa      	ldr	r2, [r7, #28]
 800c0b2:	68bb      	ldr	r3, [r7, #8]
 800c0b4:	429a      	cmp	r2, r3
 800c0b6:	d004      	beq.n	800c0c2 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 800c0b8:	69f8      	ldr	r0, [r7, #28]
 800c0ba:	f7ff f8dd 	bl	800b278 <pbuf_free>
    q = NULL;
 800c0be:	2300      	movs	r3, #0
 800c0c0:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 800c0c2:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 800c0c6:	4618      	mov	r0, r3
 800c0c8:	3720      	adds	r7, #32
 800c0ca:	46bd      	mov	sp, r7
 800c0cc:	bd80      	pop	{r7, pc}
 800c0ce:	bf00      	nop
 800c0d0:	08011500 	.word	0x08011500
 800c0d4:	080116ec 	.word	0x080116ec
 800c0d8:	08011554 	.word	0x08011554
 800c0dc:	0801170c 	.word	0x0801170c
 800c0e0:	0801172c 	.word	0x0801172c
 800c0e4:	08011750 	.word	0x08011750
 800c0e8:	08011774 	.word	0x08011774
 800c0ec:	08011798 	.word	0x08011798

0800c0f0 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800c0f0:	b580      	push	{r7, lr}
 800c0f2:	b086      	sub	sp, #24
 800c0f4:	af00      	add	r7, sp, #0
 800c0f6:	60f8      	str	r0, [r7, #12]
 800c0f8:	60b9      	str	r1, [r7, #8]
 800c0fa:	4613      	mov	r3, r2
 800c0fc:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800c0fe:	68bb      	ldr	r3, [r7, #8]
 800c100:	2b00      	cmp	r3, #0
 800c102:	d101      	bne.n	800c108 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 800c104:	4b39      	ldr	r3, [pc, #228]	; (800c1ec <udp_bind+0xfc>)
 800c106:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800c108:	68fb      	ldr	r3, [r7, #12]
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	d109      	bne.n	800c122 <udp_bind+0x32>
 800c10e:	4b38      	ldr	r3, [pc, #224]	; (800c1f0 <udp_bind+0x100>)
 800c110:	f240 32b7 	movw	r2, #951	; 0x3b7
 800c114:	4937      	ldr	r1, [pc, #220]	; (800c1f4 <udp_bind+0x104>)
 800c116:	4838      	ldr	r0, [pc, #224]	; (800c1f8 <udp_bind+0x108>)
 800c118:	f002 ff4c 	bl	800efb4 <iprintf>
 800c11c:	f06f 030f 	mvn.w	r3, #15
 800c120:	e060      	b.n	800c1e4 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 800c122:	2300      	movs	r3, #0
 800c124:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800c126:	4b35      	ldr	r3, [pc, #212]	; (800c1fc <udp_bind+0x10c>)
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	617b      	str	r3, [r7, #20]
 800c12c:	e009      	b.n	800c142 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 800c12e:	68fa      	ldr	r2, [r7, #12]
 800c130:	697b      	ldr	r3, [r7, #20]
 800c132:	429a      	cmp	r2, r3
 800c134:	d102      	bne.n	800c13c <udp_bind+0x4c>
      rebind = 1;
 800c136:	2301      	movs	r3, #1
 800c138:	74fb      	strb	r3, [r7, #19]
      break;
 800c13a:	e005      	b.n	800c148 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800c13c:	697b      	ldr	r3, [r7, #20]
 800c13e:	68db      	ldr	r3, [r3, #12]
 800c140:	617b      	str	r3, [r7, #20]
 800c142:	697b      	ldr	r3, [r7, #20]
 800c144:	2b00      	cmp	r3, #0
 800c146:	d1f2      	bne.n	800c12e <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 800c148:	88fb      	ldrh	r3, [r7, #6]
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	d109      	bne.n	800c162 <udp_bind+0x72>
    port = udp_new_port();
 800c14e:	f7ff fc35 	bl	800b9bc <udp_new_port>
 800c152:	4603      	mov	r3, r0
 800c154:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800c156:	88fb      	ldrh	r3, [r7, #6]
 800c158:	2b00      	cmp	r3, #0
 800c15a:	d12c      	bne.n	800c1b6 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 800c15c:	f06f 0307 	mvn.w	r3, #7
 800c160:	e040      	b.n	800c1e4 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800c162:	4b26      	ldr	r3, [pc, #152]	; (800c1fc <udp_bind+0x10c>)
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	617b      	str	r3, [r7, #20]
 800c168:	e022      	b.n	800c1b0 <udp_bind+0xc0>
      if (pcb != ipcb) {
 800c16a:	68fa      	ldr	r2, [r7, #12]
 800c16c:	697b      	ldr	r3, [r7, #20]
 800c16e:	429a      	cmp	r2, r3
 800c170:	d01b      	beq.n	800c1aa <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 800c172:	697b      	ldr	r3, [r7, #20]
 800c174:	8a5b      	ldrh	r3, [r3, #18]
 800c176:	88fa      	ldrh	r2, [r7, #6]
 800c178:	429a      	cmp	r2, r3
 800c17a:	d116      	bne.n	800c1aa <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800c17c:	697b      	ldr	r3, [r7, #20]
 800c17e:	681a      	ldr	r2, [r3, #0]
 800c180:	68bb      	ldr	r3, [r7, #8]
 800c182:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 800c184:	429a      	cmp	r2, r3
 800c186:	d00d      	beq.n	800c1a4 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800c188:	68bb      	ldr	r3, [r7, #8]
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	d00a      	beq.n	800c1a4 <udp_bind+0xb4>
 800c18e:	68bb      	ldr	r3, [r7, #8]
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	2b00      	cmp	r3, #0
 800c194:	d006      	beq.n	800c1a4 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800c196:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800c198:	2b00      	cmp	r3, #0
 800c19a:	d003      	beq.n	800c1a4 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800c19c:	697b      	ldr	r3, [r7, #20]
 800c19e:	681b      	ldr	r3, [r3, #0]
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	d102      	bne.n	800c1aa <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 800c1a4:	f06f 0307 	mvn.w	r3, #7
 800c1a8:	e01c      	b.n	800c1e4 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800c1aa:	697b      	ldr	r3, [r7, #20]
 800c1ac:	68db      	ldr	r3, [r3, #12]
 800c1ae:	617b      	str	r3, [r7, #20]
 800c1b0:	697b      	ldr	r3, [r7, #20]
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	d1d9      	bne.n	800c16a <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800c1b6:	68bb      	ldr	r3, [r7, #8]
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	d002      	beq.n	800c1c2 <udp_bind+0xd2>
 800c1bc:	68bb      	ldr	r3, [r7, #8]
 800c1be:	681b      	ldr	r3, [r3, #0]
 800c1c0:	e000      	b.n	800c1c4 <udp_bind+0xd4>
 800c1c2:	2300      	movs	r3, #0
 800c1c4:	68fa      	ldr	r2, [r7, #12]
 800c1c6:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 800c1c8:	68fb      	ldr	r3, [r7, #12]
 800c1ca:	88fa      	ldrh	r2, [r7, #6]
 800c1cc:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 800c1ce:	7cfb      	ldrb	r3, [r7, #19]
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	d106      	bne.n	800c1e2 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 800c1d4:	4b09      	ldr	r3, [pc, #36]	; (800c1fc <udp_bind+0x10c>)
 800c1d6:	681a      	ldr	r2, [r3, #0]
 800c1d8:	68fb      	ldr	r3, [r7, #12]
 800c1da:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 800c1dc:	4a07      	ldr	r2, [pc, #28]	; (800c1fc <udp_bind+0x10c>)
 800c1de:	68fb      	ldr	r3, [r7, #12]
 800c1e0:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 800c1e2:	2300      	movs	r3, #0
}
 800c1e4:	4618      	mov	r0, r3
 800c1e6:	3718      	adds	r7, #24
 800c1e8:	46bd      	mov	sp, r7
 800c1ea:	bd80      	pop	{r7, pc}
 800c1ec:	080120a4 	.word	0x080120a4
 800c1f0:	08011500 	.word	0x08011500
 800c1f4:	080117c8 	.word	0x080117c8
 800c1f8:	08011554 	.word	0x08011554
 800c1fc:	2000ceac 	.word	0x2000ceac

0800c200 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 800c200:	b580      	push	{r7, lr}
 800c202:	b084      	sub	sp, #16
 800c204:	af00      	add	r7, sp, #0
 800c206:	60f8      	str	r0, [r7, #12]
 800c208:	60b9      	str	r1, [r7, #8]
 800c20a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 800c20c:	68fb      	ldr	r3, [r7, #12]
 800c20e:	2b00      	cmp	r3, #0
 800c210:	d107      	bne.n	800c222 <udp_recv+0x22>
 800c212:	4b08      	ldr	r3, [pc, #32]	; (800c234 <udp_recv+0x34>)
 800c214:	f240 428a 	movw	r2, #1162	; 0x48a
 800c218:	4907      	ldr	r1, [pc, #28]	; (800c238 <udp_recv+0x38>)
 800c21a:	4808      	ldr	r0, [pc, #32]	; (800c23c <udp_recv+0x3c>)
 800c21c:	f002 feca 	bl	800efb4 <iprintf>
 800c220:	e005      	b.n	800c22e <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 800c222:	68fb      	ldr	r3, [r7, #12]
 800c224:	68ba      	ldr	r2, [r7, #8]
 800c226:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 800c228:	68fb      	ldr	r3, [r7, #12]
 800c22a:	687a      	ldr	r2, [r7, #4]
 800c22c:	61da      	str	r2, [r3, #28]
}
 800c22e:	3710      	adds	r7, #16
 800c230:	46bd      	mov	sp, r7
 800c232:	bd80      	pop	{r7, pc}
 800c234:	08011500 	.word	0x08011500
 800c238:	08011834 	.word	0x08011834
 800c23c:	08011554 	.word	0x08011554

0800c240 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 800c240:	b580      	push	{r7, lr}
 800c242:	b084      	sub	sp, #16
 800c244:	af00      	add	r7, sp, #0
 800c246:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	d107      	bne.n	800c25e <udp_remove+0x1e>
 800c24e:	4b19      	ldr	r3, [pc, #100]	; (800c2b4 <udp_remove+0x74>)
 800c250:	f240 42a1 	movw	r2, #1185	; 0x4a1
 800c254:	4918      	ldr	r1, [pc, #96]	; (800c2b8 <udp_remove+0x78>)
 800c256:	4819      	ldr	r0, [pc, #100]	; (800c2bc <udp_remove+0x7c>)
 800c258:	f002 feac 	bl	800efb4 <iprintf>
 800c25c:	e026      	b.n	800c2ac <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 800c25e:	4b18      	ldr	r3, [pc, #96]	; (800c2c0 <udp_remove+0x80>)
 800c260:	681b      	ldr	r3, [r3, #0]
 800c262:	687a      	ldr	r2, [r7, #4]
 800c264:	429a      	cmp	r2, r3
 800c266:	d105      	bne.n	800c274 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 800c268:	4b15      	ldr	r3, [pc, #84]	; (800c2c0 <udp_remove+0x80>)
 800c26a:	681b      	ldr	r3, [r3, #0]
 800c26c:	68db      	ldr	r3, [r3, #12]
 800c26e:	4a14      	ldr	r2, [pc, #80]	; (800c2c0 <udp_remove+0x80>)
 800c270:	6013      	str	r3, [r2, #0]
 800c272:	e017      	b.n	800c2a4 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800c274:	4b12      	ldr	r3, [pc, #72]	; (800c2c0 <udp_remove+0x80>)
 800c276:	681b      	ldr	r3, [r3, #0]
 800c278:	60fb      	str	r3, [r7, #12]
 800c27a:	e010      	b.n	800c29e <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 800c27c:	68fb      	ldr	r3, [r7, #12]
 800c27e:	68db      	ldr	r3, [r3, #12]
 800c280:	2b00      	cmp	r3, #0
 800c282:	d009      	beq.n	800c298 <udp_remove+0x58>
 800c284:	68fb      	ldr	r3, [r7, #12]
 800c286:	68db      	ldr	r3, [r3, #12]
 800c288:	687a      	ldr	r2, [r7, #4]
 800c28a:	429a      	cmp	r2, r3
 800c28c:	d104      	bne.n	800c298 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	68da      	ldr	r2, [r3, #12]
 800c292:	68fb      	ldr	r3, [r7, #12]
 800c294:	60da      	str	r2, [r3, #12]
        break;
 800c296:	e005      	b.n	800c2a4 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800c298:	68fb      	ldr	r3, [r7, #12]
 800c29a:	68db      	ldr	r3, [r3, #12]
 800c29c:	60fb      	str	r3, [r7, #12]
 800c29e:	68fb      	ldr	r3, [r7, #12]
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	d1eb      	bne.n	800c27c <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 800c2a4:	6879      	ldr	r1, [r7, #4]
 800c2a6:	2000      	movs	r0, #0
 800c2a8:	f7fe f9a6 	bl	800a5f8 <memp_free>
}
 800c2ac:	3710      	adds	r7, #16
 800c2ae:	46bd      	mov	sp, r7
 800c2b0:	bd80      	pop	{r7, pc}
 800c2b2:	bf00      	nop
 800c2b4:	08011500 	.word	0x08011500
 800c2b8:	0801184c 	.word	0x0801184c
 800c2bc:	08011554 	.word	0x08011554
 800c2c0:	2000ceac 	.word	0x2000ceac

0800c2c4 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 800c2c4:	b580      	push	{r7, lr}
 800c2c6:	b082      	sub	sp, #8
 800c2c8:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 800c2ca:	2000      	movs	r0, #0
 800c2cc:	f7fe f942 	bl	800a554 <memp_malloc>
 800c2d0:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	d007      	beq.n	800c2e8 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 800c2d8:	2220      	movs	r2, #32
 800c2da:	2100      	movs	r1, #0
 800c2dc:	6878      	ldr	r0, [r7, #4]
 800c2de:	f002 fe61 	bl	800efa4 <memset>
    pcb->ttl = UDP_TTL;
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	22ff      	movs	r2, #255	; 0xff
 800c2e6:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 800c2e8:	687b      	ldr	r3, [r7, #4]
}
 800c2ea:	4618      	mov	r0, r3
 800c2ec:	3708      	adds	r7, #8
 800c2ee:	46bd      	mov	sp, r7
 800c2f0:	bd80      	pop	{r7, pc}

0800c2f2 <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 800c2f2:	b580      	push	{r7, lr}
 800c2f4:	b084      	sub	sp, #16
 800c2f6:	af00      	add	r7, sp, #0
 800c2f8:	4603      	mov	r3, r0
 800c2fa:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 800c2fc:	f7ff ffe2 	bl	800c2c4 <udp_new>
 800c300:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 800c302:	68fb      	ldr	r3, [r7, #12]
}
 800c304:	4618      	mov	r0, r3
 800c306:	3710      	adds	r7, #16
 800c308:	46bd      	mov	sp, r7
 800c30a:	bd80      	pop	{r7, pc}

0800c30c <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800c30c:	b480      	push	{r7}
 800c30e:	b085      	sub	sp, #20
 800c310:	af00      	add	r7, sp, #0
 800c312:	6078      	str	r0, [r7, #4]
 800c314:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	2b00      	cmp	r3, #0
 800c31a:	d01e      	beq.n	800c35a <udp_netif_ip_addr_changed+0x4e>
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	2b00      	cmp	r3, #0
 800c322:	d01a      	beq.n	800c35a <udp_netif_ip_addr_changed+0x4e>
 800c324:	683b      	ldr	r3, [r7, #0]
 800c326:	2b00      	cmp	r3, #0
 800c328:	d017      	beq.n	800c35a <udp_netif_ip_addr_changed+0x4e>
 800c32a:	683b      	ldr	r3, [r7, #0]
 800c32c:	681b      	ldr	r3, [r3, #0]
 800c32e:	2b00      	cmp	r3, #0
 800c330:	d013      	beq.n	800c35a <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800c332:	4b0d      	ldr	r3, [pc, #52]	; (800c368 <udp_netif_ip_addr_changed+0x5c>)
 800c334:	681b      	ldr	r3, [r3, #0]
 800c336:	60fb      	str	r3, [r7, #12]
 800c338:	e00c      	b.n	800c354 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800c33a:	68fb      	ldr	r3, [r7, #12]
 800c33c:	681a      	ldr	r2, [r3, #0]
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	429a      	cmp	r2, r3
 800c344:	d103      	bne.n	800c34e <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800c346:	683b      	ldr	r3, [r7, #0]
 800c348:	681a      	ldr	r2, [r3, #0]
 800c34a:	68fb      	ldr	r3, [r7, #12]
 800c34c:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800c34e:	68fb      	ldr	r3, [r7, #12]
 800c350:	68db      	ldr	r3, [r3, #12]
 800c352:	60fb      	str	r3, [r7, #12]
 800c354:	68fb      	ldr	r3, [r7, #12]
 800c356:	2b00      	cmp	r3, #0
 800c358:	d1ef      	bne.n	800c33a <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800c35a:	bf00      	nop
 800c35c:	3714      	adds	r7, #20
 800c35e:	46bd      	mov	sp, r7
 800c360:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c364:	4770      	bx	lr
 800c366:	bf00      	nop
 800c368:	2000ceac 	.word	0x2000ceac

0800c36c <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800c36c:	b580      	push	{r7, lr}
 800c36e:	b082      	sub	sp, #8
 800c370:	af00      	add	r7, sp, #0
 800c372:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800c374:	4915      	ldr	r1, [pc, #84]	; (800c3cc <etharp_free_entry+0x60>)
 800c376:	687a      	ldr	r2, [r7, #4]
 800c378:	4613      	mov	r3, r2
 800c37a:	005b      	lsls	r3, r3, #1
 800c37c:	4413      	add	r3, r2
 800c37e:	00db      	lsls	r3, r3, #3
 800c380:	440b      	add	r3, r1
 800c382:	681b      	ldr	r3, [r3, #0]
 800c384:	2b00      	cmp	r3, #0
 800c386:	d013      	beq.n	800c3b0 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800c388:	4910      	ldr	r1, [pc, #64]	; (800c3cc <etharp_free_entry+0x60>)
 800c38a:	687a      	ldr	r2, [r7, #4]
 800c38c:	4613      	mov	r3, r2
 800c38e:	005b      	lsls	r3, r3, #1
 800c390:	4413      	add	r3, r2
 800c392:	00db      	lsls	r3, r3, #3
 800c394:	440b      	add	r3, r1
 800c396:	681b      	ldr	r3, [r3, #0]
 800c398:	4618      	mov	r0, r3
 800c39a:	f7fe ff6d 	bl	800b278 <pbuf_free>
    arp_table[i].q = NULL;
 800c39e:	490b      	ldr	r1, [pc, #44]	; (800c3cc <etharp_free_entry+0x60>)
 800c3a0:	687a      	ldr	r2, [r7, #4]
 800c3a2:	4613      	mov	r3, r2
 800c3a4:	005b      	lsls	r3, r3, #1
 800c3a6:	4413      	add	r3, r2
 800c3a8:	00db      	lsls	r3, r3, #3
 800c3aa:	440b      	add	r3, r1
 800c3ac:	2200      	movs	r2, #0
 800c3ae:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800c3b0:	4906      	ldr	r1, [pc, #24]	; (800c3cc <etharp_free_entry+0x60>)
 800c3b2:	687a      	ldr	r2, [r7, #4]
 800c3b4:	4613      	mov	r3, r2
 800c3b6:	005b      	lsls	r3, r3, #1
 800c3b8:	4413      	add	r3, r2
 800c3ba:	00db      	lsls	r3, r3, #3
 800c3bc:	440b      	add	r3, r1
 800c3be:	3314      	adds	r3, #20
 800c3c0:	2200      	movs	r2, #0
 800c3c2:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800c3c4:	bf00      	nop
 800c3c6:	3708      	adds	r7, #8
 800c3c8:	46bd      	mov	sp, r7
 800c3ca:	bd80      	pop	{r7, pc}
 800c3cc:	200047ac 	.word	0x200047ac

0800c3d0 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800c3d0:	b580      	push	{r7, lr}
 800c3d2:	b082      	sub	sp, #8
 800c3d4:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c3d6:	2300      	movs	r3, #0
 800c3d8:	607b      	str	r3, [r7, #4]
 800c3da:	e096      	b.n	800c50a <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800c3dc:	494f      	ldr	r1, [pc, #316]	; (800c51c <etharp_tmr+0x14c>)
 800c3de:	687a      	ldr	r2, [r7, #4]
 800c3e0:	4613      	mov	r3, r2
 800c3e2:	005b      	lsls	r3, r3, #1
 800c3e4:	4413      	add	r3, r2
 800c3e6:	00db      	lsls	r3, r3, #3
 800c3e8:	440b      	add	r3, r1
 800c3ea:	3314      	adds	r3, #20
 800c3ec:	781b      	ldrb	r3, [r3, #0]
 800c3ee:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800c3f0:	78fb      	ldrb	r3, [r7, #3]
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	f000 8086 	beq.w	800c504 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800c3f8:	4948      	ldr	r1, [pc, #288]	; (800c51c <etharp_tmr+0x14c>)
 800c3fa:	687a      	ldr	r2, [r7, #4]
 800c3fc:	4613      	mov	r3, r2
 800c3fe:	005b      	lsls	r3, r3, #1
 800c400:	4413      	add	r3, r2
 800c402:	00db      	lsls	r3, r3, #3
 800c404:	440b      	add	r3, r1
 800c406:	3312      	adds	r3, #18
 800c408:	881b      	ldrh	r3, [r3, #0]
 800c40a:	3301      	adds	r3, #1
 800c40c:	b298      	uxth	r0, r3
 800c40e:	4943      	ldr	r1, [pc, #268]	; (800c51c <etharp_tmr+0x14c>)
 800c410:	687a      	ldr	r2, [r7, #4]
 800c412:	4613      	mov	r3, r2
 800c414:	005b      	lsls	r3, r3, #1
 800c416:	4413      	add	r3, r2
 800c418:	00db      	lsls	r3, r3, #3
 800c41a:	440b      	add	r3, r1
 800c41c:	3312      	adds	r3, #18
 800c41e:	4602      	mov	r2, r0
 800c420:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800c422:	493e      	ldr	r1, [pc, #248]	; (800c51c <etharp_tmr+0x14c>)
 800c424:	687a      	ldr	r2, [r7, #4]
 800c426:	4613      	mov	r3, r2
 800c428:	005b      	lsls	r3, r3, #1
 800c42a:	4413      	add	r3, r2
 800c42c:	00db      	lsls	r3, r3, #3
 800c42e:	440b      	add	r3, r1
 800c430:	3312      	adds	r3, #18
 800c432:	881b      	ldrh	r3, [r3, #0]
 800c434:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800c438:	d215      	bcs.n	800c466 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800c43a:	4938      	ldr	r1, [pc, #224]	; (800c51c <etharp_tmr+0x14c>)
 800c43c:	687a      	ldr	r2, [r7, #4]
 800c43e:	4613      	mov	r3, r2
 800c440:	005b      	lsls	r3, r3, #1
 800c442:	4413      	add	r3, r2
 800c444:	00db      	lsls	r3, r3, #3
 800c446:	440b      	add	r3, r1
 800c448:	3314      	adds	r3, #20
 800c44a:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800c44c:	2b01      	cmp	r3, #1
 800c44e:	d10e      	bne.n	800c46e <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800c450:	4932      	ldr	r1, [pc, #200]	; (800c51c <etharp_tmr+0x14c>)
 800c452:	687a      	ldr	r2, [r7, #4]
 800c454:	4613      	mov	r3, r2
 800c456:	005b      	lsls	r3, r3, #1
 800c458:	4413      	add	r3, r2
 800c45a:	00db      	lsls	r3, r3, #3
 800c45c:	440b      	add	r3, r1
 800c45e:	3312      	adds	r3, #18
 800c460:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800c462:	2b04      	cmp	r3, #4
 800c464:	d903      	bls.n	800c46e <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800c466:	6878      	ldr	r0, [r7, #4]
 800c468:	f7ff ff80 	bl	800c36c <etharp_free_entry>
 800c46c:	e04a      	b.n	800c504 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800c46e:	492b      	ldr	r1, [pc, #172]	; (800c51c <etharp_tmr+0x14c>)
 800c470:	687a      	ldr	r2, [r7, #4]
 800c472:	4613      	mov	r3, r2
 800c474:	005b      	lsls	r3, r3, #1
 800c476:	4413      	add	r3, r2
 800c478:	00db      	lsls	r3, r3, #3
 800c47a:	440b      	add	r3, r1
 800c47c:	3314      	adds	r3, #20
 800c47e:	781b      	ldrb	r3, [r3, #0]
 800c480:	2b03      	cmp	r3, #3
 800c482:	d10a      	bne.n	800c49a <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800c484:	4925      	ldr	r1, [pc, #148]	; (800c51c <etharp_tmr+0x14c>)
 800c486:	687a      	ldr	r2, [r7, #4]
 800c488:	4613      	mov	r3, r2
 800c48a:	005b      	lsls	r3, r3, #1
 800c48c:	4413      	add	r3, r2
 800c48e:	00db      	lsls	r3, r3, #3
 800c490:	440b      	add	r3, r1
 800c492:	3314      	adds	r3, #20
 800c494:	2204      	movs	r2, #4
 800c496:	701a      	strb	r2, [r3, #0]
 800c498:	e034      	b.n	800c504 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800c49a:	4920      	ldr	r1, [pc, #128]	; (800c51c <etharp_tmr+0x14c>)
 800c49c:	687a      	ldr	r2, [r7, #4]
 800c49e:	4613      	mov	r3, r2
 800c4a0:	005b      	lsls	r3, r3, #1
 800c4a2:	4413      	add	r3, r2
 800c4a4:	00db      	lsls	r3, r3, #3
 800c4a6:	440b      	add	r3, r1
 800c4a8:	3314      	adds	r3, #20
 800c4aa:	781b      	ldrb	r3, [r3, #0]
 800c4ac:	2b04      	cmp	r3, #4
 800c4ae:	d10a      	bne.n	800c4c6 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800c4b0:	491a      	ldr	r1, [pc, #104]	; (800c51c <etharp_tmr+0x14c>)
 800c4b2:	687a      	ldr	r2, [r7, #4]
 800c4b4:	4613      	mov	r3, r2
 800c4b6:	005b      	lsls	r3, r3, #1
 800c4b8:	4413      	add	r3, r2
 800c4ba:	00db      	lsls	r3, r3, #3
 800c4bc:	440b      	add	r3, r1
 800c4be:	3314      	adds	r3, #20
 800c4c0:	2202      	movs	r2, #2
 800c4c2:	701a      	strb	r2, [r3, #0]
 800c4c4:	e01e      	b.n	800c504 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800c4c6:	4915      	ldr	r1, [pc, #84]	; (800c51c <etharp_tmr+0x14c>)
 800c4c8:	687a      	ldr	r2, [r7, #4]
 800c4ca:	4613      	mov	r3, r2
 800c4cc:	005b      	lsls	r3, r3, #1
 800c4ce:	4413      	add	r3, r2
 800c4d0:	00db      	lsls	r3, r3, #3
 800c4d2:	440b      	add	r3, r1
 800c4d4:	3314      	adds	r3, #20
 800c4d6:	781b      	ldrb	r3, [r3, #0]
 800c4d8:	2b01      	cmp	r3, #1
 800c4da:	d113      	bne.n	800c504 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800c4dc:	490f      	ldr	r1, [pc, #60]	; (800c51c <etharp_tmr+0x14c>)
 800c4de:	687a      	ldr	r2, [r7, #4]
 800c4e0:	4613      	mov	r3, r2
 800c4e2:	005b      	lsls	r3, r3, #1
 800c4e4:	4413      	add	r3, r2
 800c4e6:	00db      	lsls	r3, r3, #3
 800c4e8:	440b      	add	r3, r1
 800c4ea:	3308      	adds	r3, #8
 800c4ec:	6818      	ldr	r0, [r3, #0]
 800c4ee:	687a      	ldr	r2, [r7, #4]
 800c4f0:	4613      	mov	r3, r2
 800c4f2:	005b      	lsls	r3, r3, #1
 800c4f4:	4413      	add	r3, r2
 800c4f6:	00db      	lsls	r3, r3, #3
 800c4f8:	4a08      	ldr	r2, [pc, #32]	; (800c51c <etharp_tmr+0x14c>)
 800c4fa:	4413      	add	r3, r2
 800c4fc:	3304      	adds	r3, #4
 800c4fe:	4619      	mov	r1, r3
 800c500:	f000 fe6e 	bl	800d1e0 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	3301      	adds	r3, #1
 800c508:	607b      	str	r3, [r7, #4]
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	2b09      	cmp	r3, #9
 800c50e:	f77f af65 	ble.w	800c3dc <etharp_tmr+0xc>
      }
    }
  }
}
 800c512:	bf00      	nop
 800c514:	3708      	adds	r7, #8
 800c516:	46bd      	mov	sp, r7
 800c518:	bd80      	pop	{r7, pc}
 800c51a:	bf00      	nop
 800c51c:	200047ac 	.word	0x200047ac

0800c520 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800c520:	b580      	push	{r7, lr}
 800c522:	b08a      	sub	sp, #40	; 0x28
 800c524:	af00      	add	r7, sp, #0
 800c526:	60f8      	str	r0, [r7, #12]
 800c528:	460b      	mov	r3, r1
 800c52a:	607a      	str	r2, [r7, #4]
 800c52c:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800c52e:	230a      	movs	r3, #10
 800c530:	84fb      	strh	r3, [r7, #38]	; 0x26
 800c532:	230a      	movs	r3, #10
 800c534:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800c536:	230a      	movs	r3, #10
 800c538:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 800c53a:	2300      	movs	r3, #0
 800c53c:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800c53e:	230a      	movs	r3, #10
 800c540:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800c542:	2300      	movs	r3, #0
 800c544:	83bb      	strh	r3, [r7, #28]
 800c546:	2300      	movs	r3, #0
 800c548:	837b      	strh	r3, [r7, #26]
 800c54a:	2300      	movs	r3, #0
 800c54c:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c54e:	2300      	movs	r3, #0
 800c550:	843b      	strh	r3, [r7, #32]
 800c552:	e0ae      	b.n	800c6b2 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800c554:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c558:	49a6      	ldr	r1, [pc, #664]	; (800c7f4 <etharp_find_entry+0x2d4>)
 800c55a:	4613      	mov	r3, r2
 800c55c:	005b      	lsls	r3, r3, #1
 800c55e:	4413      	add	r3, r2
 800c560:	00db      	lsls	r3, r3, #3
 800c562:	440b      	add	r3, r1
 800c564:	3314      	adds	r3, #20
 800c566:	781b      	ldrb	r3, [r3, #0]
 800c568:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800c56a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800c56e:	2b0a      	cmp	r3, #10
 800c570:	d105      	bne.n	800c57e <etharp_find_entry+0x5e>
 800c572:	7dfb      	ldrb	r3, [r7, #23]
 800c574:	2b00      	cmp	r3, #0
 800c576:	d102      	bne.n	800c57e <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800c578:	8c3b      	ldrh	r3, [r7, #32]
 800c57a:	847b      	strh	r3, [r7, #34]	; 0x22
 800c57c:	e095      	b.n	800c6aa <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800c57e:	7dfb      	ldrb	r3, [r7, #23]
 800c580:	2b00      	cmp	r3, #0
 800c582:	f000 8092 	beq.w	800c6aa <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800c586:	7dfb      	ldrb	r3, [r7, #23]
 800c588:	2b01      	cmp	r3, #1
 800c58a:	d009      	beq.n	800c5a0 <etharp_find_entry+0x80>
 800c58c:	7dfb      	ldrb	r3, [r7, #23]
 800c58e:	2b01      	cmp	r3, #1
 800c590:	d806      	bhi.n	800c5a0 <etharp_find_entry+0x80>
 800c592:	4b99      	ldr	r3, [pc, #612]	; (800c7f8 <etharp_find_entry+0x2d8>)
 800c594:	f44f 7292 	mov.w	r2, #292	; 0x124
 800c598:	4998      	ldr	r1, [pc, #608]	; (800c7fc <etharp_find_entry+0x2dc>)
 800c59a:	4899      	ldr	r0, [pc, #612]	; (800c800 <etharp_find_entry+0x2e0>)
 800c59c:	f002 fd0a 	bl	800efb4 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800c5a0:	68fb      	ldr	r3, [r7, #12]
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	d020      	beq.n	800c5e8 <etharp_find_entry+0xc8>
 800c5a6:	68fb      	ldr	r3, [r7, #12]
 800c5a8:	6819      	ldr	r1, [r3, #0]
 800c5aa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c5ae:	4891      	ldr	r0, [pc, #580]	; (800c7f4 <etharp_find_entry+0x2d4>)
 800c5b0:	4613      	mov	r3, r2
 800c5b2:	005b      	lsls	r3, r3, #1
 800c5b4:	4413      	add	r3, r2
 800c5b6:	00db      	lsls	r3, r3, #3
 800c5b8:	4403      	add	r3, r0
 800c5ba:	3304      	adds	r3, #4
 800c5bc:	681b      	ldr	r3, [r3, #0]
 800c5be:	4299      	cmp	r1, r3
 800c5c0:	d112      	bne.n	800c5e8 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	2b00      	cmp	r3, #0
 800c5c6:	d00c      	beq.n	800c5e2 <etharp_find_entry+0xc2>
 800c5c8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c5cc:	4989      	ldr	r1, [pc, #548]	; (800c7f4 <etharp_find_entry+0x2d4>)
 800c5ce:	4613      	mov	r3, r2
 800c5d0:	005b      	lsls	r3, r3, #1
 800c5d2:	4413      	add	r3, r2
 800c5d4:	00db      	lsls	r3, r3, #3
 800c5d6:	440b      	add	r3, r1
 800c5d8:	3308      	adds	r3, #8
 800c5da:	681b      	ldr	r3, [r3, #0]
 800c5dc:	687a      	ldr	r2, [r7, #4]
 800c5de:	429a      	cmp	r2, r3
 800c5e0:	d102      	bne.n	800c5e8 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800c5e2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800c5e6:	e100      	b.n	800c7ea <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800c5e8:	7dfb      	ldrb	r3, [r7, #23]
 800c5ea:	2b01      	cmp	r3, #1
 800c5ec:	d140      	bne.n	800c670 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800c5ee:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c5f2:	4980      	ldr	r1, [pc, #512]	; (800c7f4 <etharp_find_entry+0x2d4>)
 800c5f4:	4613      	mov	r3, r2
 800c5f6:	005b      	lsls	r3, r3, #1
 800c5f8:	4413      	add	r3, r2
 800c5fa:	00db      	lsls	r3, r3, #3
 800c5fc:	440b      	add	r3, r1
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	2b00      	cmp	r3, #0
 800c602:	d01a      	beq.n	800c63a <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800c604:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c608:	497a      	ldr	r1, [pc, #488]	; (800c7f4 <etharp_find_entry+0x2d4>)
 800c60a:	4613      	mov	r3, r2
 800c60c:	005b      	lsls	r3, r3, #1
 800c60e:	4413      	add	r3, r2
 800c610:	00db      	lsls	r3, r3, #3
 800c612:	440b      	add	r3, r1
 800c614:	3312      	adds	r3, #18
 800c616:	881b      	ldrh	r3, [r3, #0]
 800c618:	8bba      	ldrh	r2, [r7, #28]
 800c61a:	429a      	cmp	r2, r3
 800c61c:	d845      	bhi.n	800c6aa <etharp_find_entry+0x18a>
            old_queue = i;
 800c61e:	8c3b      	ldrh	r3, [r7, #32]
 800c620:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800c622:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c626:	4973      	ldr	r1, [pc, #460]	; (800c7f4 <etharp_find_entry+0x2d4>)
 800c628:	4613      	mov	r3, r2
 800c62a:	005b      	lsls	r3, r3, #1
 800c62c:	4413      	add	r3, r2
 800c62e:	00db      	lsls	r3, r3, #3
 800c630:	440b      	add	r3, r1
 800c632:	3312      	adds	r3, #18
 800c634:	881b      	ldrh	r3, [r3, #0]
 800c636:	83bb      	strh	r3, [r7, #28]
 800c638:	e037      	b.n	800c6aa <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800c63a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c63e:	496d      	ldr	r1, [pc, #436]	; (800c7f4 <etharp_find_entry+0x2d4>)
 800c640:	4613      	mov	r3, r2
 800c642:	005b      	lsls	r3, r3, #1
 800c644:	4413      	add	r3, r2
 800c646:	00db      	lsls	r3, r3, #3
 800c648:	440b      	add	r3, r1
 800c64a:	3312      	adds	r3, #18
 800c64c:	881b      	ldrh	r3, [r3, #0]
 800c64e:	8b7a      	ldrh	r2, [r7, #26]
 800c650:	429a      	cmp	r2, r3
 800c652:	d82a      	bhi.n	800c6aa <etharp_find_entry+0x18a>
            old_pending = i;
 800c654:	8c3b      	ldrh	r3, [r7, #32]
 800c656:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 800c658:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c65c:	4965      	ldr	r1, [pc, #404]	; (800c7f4 <etharp_find_entry+0x2d4>)
 800c65e:	4613      	mov	r3, r2
 800c660:	005b      	lsls	r3, r3, #1
 800c662:	4413      	add	r3, r2
 800c664:	00db      	lsls	r3, r3, #3
 800c666:	440b      	add	r3, r1
 800c668:	3312      	adds	r3, #18
 800c66a:	881b      	ldrh	r3, [r3, #0]
 800c66c:	837b      	strh	r3, [r7, #26]
 800c66e:	e01c      	b.n	800c6aa <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800c670:	7dfb      	ldrb	r3, [r7, #23]
 800c672:	2b01      	cmp	r3, #1
 800c674:	d919      	bls.n	800c6aa <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800c676:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c67a:	495e      	ldr	r1, [pc, #376]	; (800c7f4 <etharp_find_entry+0x2d4>)
 800c67c:	4613      	mov	r3, r2
 800c67e:	005b      	lsls	r3, r3, #1
 800c680:	4413      	add	r3, r2
 800c682:	00db      	lsls	r3, r3, #3
 800c684:	440b      	add	r3, r1
 800c686:	3312      	adds	r3, #18
 800c688:	881b      	ldrh	r3, [r3, #0]
 800c68a:	8b3a      	ldrh	r2, [r7, #24]
 800c68c:	429a      	cmp	r2, r3
 800c68e:	d80c      	bhi.n	800c6aa <etharp_find_entry+0x18a>
            old_stable = i;
 800c690:	8c3b      	ldrh	r3, [r7, #32]
 800c692:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 800c694:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c698:	4956      	ldr	r1, [pc, #344]	; (800c7f4 <etharp_find_entry+0x2d4>)
 800c69a:	4613      	mov	r3, r2
 800c69c:	005b      	lsls	r3, r3, #1
 800c69e:	4413      	add	r3, r2
 800c6a0:	00db      	lsls	r3, r3, #3
 800c6a2:	440b      	add	r3, r1
 800c6a4:	3312      	adds	r3, #18
 800c6a6:	881b      	ldrh	r3, [r3, #0]
 800c6a8:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c6aa:	8c3b      	ldrh	r3, [r7, #32]
 800c6ac:	3301      	adds	r3, #1
 800c6ae:	b29b      	uxth	r3, r3
 800c6b0:	843b      	strh	r3, [r7, #32]
 800c6b2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800c6b6:	2b09      	cmp	r3, #9
 800c6b8:	f77f af4c 	ble.w	800c554 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800c6bc:	7afb      	ldrb	r3, [r7, #11]
 800c6be:	f003 0302 	and.w	r3, r3, #2
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	d108      	bne.n	800c6d8 <etharp_find_entry+0x1b8>
 800c6c6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800c6ca:	2b0a      	cmp	r3, #10
 800c6cc:	d107      	bne.n	800c6de <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800c6ce:	7afb      	ldrb	r3, [r7, #11]
 800c6d0:	f003 0301 	and.w	r3, r3, #1
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	d102      	bne.n	800c6de <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800c6d8:	f04f 33ff 	mov.w	r3, #4294967295
 800c6dc:	e085      	b.n	800c7ea <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800c6de:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800c6e2:	2b09      	cmp	r3, #9
 800c6e4:	dc02      	bgt.n	800c6ec <etharp_find_entry+0x1cc>
    i = empty;
 800c6e6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c6e8:	843b      	strh	r3, [r7, #32]
 800c6ea:	e039      	b.n	800c760 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800c6ec:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800c6f0:	2b09      	cmp	r3, #9
 800c6f2:	dc14      	bgt.n	800c71e <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800c6f4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c6f6:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800c6f8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c6fc:	493d      	ldr	r1, [pc, #244]	; (800c7f4 <etharp_find_entry+0x2d4>)
 800c6fe:	4613      	mov	r3, r2
 800c700:	005b      	lsls	r3, r3, #1
 800c702:	4413      	add	r3, r2
 800c704:	00db      	lsls	r3, r3, #3
 800c706:	440b      	add	r3, r1
 800c708:	681b      	ldr	r3, [r3, #0]
 800c70a:	2b00      	cmp	r3, #0
 800c70c:	d018      	beq.n	800c740 <etharp_find_entry+0x220>
 800c70e:	4b3a      	ldr	r3, [pc, #232]	; (800c7f8 <etharp_find_entry+0x2d8>)
 800c710:	f240 126d 	movw	r2, #365	; 0x16d
 800c714:	493b      	ldr	r1, [pc, #236]	; (800c804 <etharp_find_entry+0x2e4>)
 800c716:	483a      	ldr	r0, [pc, #232]	; (800c800 <etharp_find_entry+0x2e0>)
 800c718:	f002 fc4c 	bl	800efb4 <iprintf>
 800c71c:	e010      	b.n	800c740 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800c71e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800c722:	2b09      	cmp	r3, #9
 800c724:	dc02      	bgt.n	800c72c <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800c726:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c728:	843b      	strh	r3, [r7, #32]
 800c72a:	e009      	b.n	800c740 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800c72c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800c730:	2b09      	cmp	r3, #9
 800c732:	dc02      	bgt.n	800c73a <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800c734:	8bfb      	ldrh	r3, [r7, #30]
 800c736:	843b      	strh	r3, [r7, #32]
 800c738:	e002      	b.n	800c740 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800c73a:	f04f 33ff 	mov.w	r3, #4294967295
 800c73e:	e054      	b.n	800c7ea <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800c740:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800c744:	2b09      	cmp	r3, #9
 800c746:	dd06      	ble.n	800c756 <etharp_find_entry+0x236>
 800c748:	4b2b      	ldr	r3, [pc, #172]	; (800c7f8 <etharp_find_entry+0x2d8>)
 800c74a:	f240 127f 	movw	r2, #383	; 0x17f
 800c74e:	492e      	ldr	r1, [pc, #184]	; (800c808 <etharp_find_entry+0x2e8>)
 800c750:	482b      	ldr	r0, [pc, #172]	; (800c800 <etharp_find_entry+0x2e0>)
 800c752:	f002 fc2f 	bl	800efb4 <iprintf>
    etharp_free_entry(i);
 800c756:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800c75a:	4618      	mov	r0, r3
 800c75c:	f7ff fe06 	bl	800c36c <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800c760:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800c764:	2b09      	cmp	r3, #9
 800c766:	dd06      	ble.n	800c776 <etharp_find_entry+0x256>
 800c768:	4b23      	ldr	r3, [pc, #140]	; (800c7f8 <etharp_find_entry+0x2d8>)
 800c76a:	f240 1283 	movw	r2, #387	; 0x183
 800c76e:	4926      	ldr	r1, [pc, #152]	; (800c808 <etharp_find_entry+0x2e8>)
 800c770:	4823      	ldr	r0, [pc, #140]	; (800c800 <etharp_find_entry+0x2e0>)
 800c772:	f002 fc1f 	bl	800efb4 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800c776:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c77a:	491e      	ldr	r1, [pc, #120]	; (800c7f4 <etharp_find_entry+0x2d4>)
 800c77c:	4613      	mov	r3, r2
 800c77e:	005b      	lsls	r3, r3, #1
 800c780:	4413      	add	r3, r2
 800c782:	00db      	lsls	r3, r3, #3
 800c784:	440b      	add	r3, r1
 800c786:	3314      	adds	r3, #20
 800c788:	781b      	ldrb	r3, [r3, #0]
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	d006      	beq.n	800c79c <etharp_find_entry+0x27c>
 800c78e:	4b1a      	ldr	r3, [pc, #104]	; (800c7f8 <etharp_find_entry+0x2d8>)
 800c790:	f240 1285 	movw	r2, #389	; 0x185
 800c794:	491d      	ldr	r1, [pc, #116]	; (800c80c <etharp_find_entry+0x2ec>)
 800c796:	481a      	ldr	r0, [pc, #104]	; (800c800 <etharp_find_entry+0x2e0>)
 800c798:	f002 fc0c 	bl	800efb4 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800c79c:	68fb      	ldr	r3, [r7, #12]
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	d00b      	beq.n	800c7ba <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800c7a2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c7a6:	68fb      	ldr	r3, [r7, #12]
 800c7a8:	6819      	ldr	r1, [r3, #0]
 800c7aa:	4812      	ldr	r0, [pc, #72]	; (800c7f4 <etharp_find_entry+0x2d4>)
 800c7ac:	4613      	mov	r3, r2
 800c7ae:	005b      	lsls	r3, r3, #1
 800c7b0:	4413      	add	r3, r2
 800c7b2:	00db      	lsls	r3, r3, #3
 800c7b4:	4403      	add	r3, r0
 800c7b6:	3304      	adds	r3, #4
 800c7b8:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800c7ba:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c7be:	490d      	ldr	r1, [pc, #52]	; (800c7f4 <etharp_find_entry+0x2d4>)
 800c7c0:	4613      	mov	r3, r2
 800c7c2:	005b      	lsls	r3, r3, #1
 800c7c4:	4413      	add	r3, r2
 800c7c6:	00db      	lsls	r3, r3, #3
 800c7c8:	440b      	add	r3, r1
 800c7ca:	3312      	adds	r3, #18
 800c7cc:	2200      	movs	r2, #0
 800c7ce:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800c7d0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c7d4:	4907      	ldr	r1, [pc, #28]	; (800c7f4 <etharp_find_entry+0x2d4>)
 800c7d6:	4613      	mov	r3, r2
 800c7d8:	005b      	lsls	r3, r3, #1
 800c7da:	4413      	add	r3, r2
 800c7dc:	00db      	lsls	r3, r3, #3
 800c7de:	440b      	add	r3, r1
 800c7e0:	3308      	adds	r3, #8
 800c7e2:	687a      	ldr	r2, [r7, #4]
 800c7e4:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800c7e6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 800c7ea:	4618      	mov	r0, r3
 800c7ec:	3728      	adds	r7, #40	; 0x28
 800c7ee:	46bd      	mov	sp, r7
 800c7f0:	bd80      	pop	{r7, pc}
 800c7f2:	bf00      	nop
 800c7f4:	200047ac 	.word	0x200047ac
 800c7f8:	08011864 	.word	0x08011864
 800c7fc:	0801189c 	.word	0x0801189c
 800c800:	080118dc 	.word	0x080118dc
 800c804:	08011904 	.word	0x08011904
 800c808:	0801191c 	.word	0x0801191c
 800c80c:	08011930 	.word	0x08011930

0800c810 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800c810:	b580      	push	{r7, lr}
 800c812:	b088      	sub	sp, #32
 800c814:	af02      	add	r7, sp, #8
 800c816:	60f8      	str	r0, [r7, #12]
 800c818:	60b9      	str	r1, [r7, #8]
 800c81a:	607a      	str	r2, [r7, #4]
 800c81c:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800c81e:	68fb      	ldr	r3, [r7, #12]
 800c820:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800c824:	2b06      	cmp	r3, #6
 800c826:	d006      	beq.n	800c836 <etharp_update_arp_entry+0x26>
 800c828:	4b48      	ldr	r3, [pc, #288]	; (800c94c <etharp_update_arp_entry+0x13c>)
 800c82a:	f240 12a9 	movw	r2, #425	; 0x1a9
 800c82e:	4948      	ldr	r1, [pc, #288]	; (800c950 <etharp_update_arp_entry+0x140>)
 800c830:	4848      	ldr	r0, [pc, #288]	; (800c954 <etharp_update_arp_entry+0x144>)
 800c832:	f002 fbbf 	bl	800efb4 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800c836:	68bb      	ldr	r3, [r7, #8]
 800c838:	2b00      	cmp	r3, #0
 800c83a:	d012      	beq.n	800c862 <etharp_update_arp_entry+0x52>
 800c83c:	68bb      	ldr	r3, [r7, #8]
 800c83e:	681b      	ldr	r3, [r3, #0]
 800c840:	2b00      	cmp	r3, #0
 800c842:	d00e      	beq.n	800c862 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800c844:	68bb      	ldr	r3, [r7, #8]
 800c846:	681b      	ldr	r3, [r3, #0]
 800c848:	68f9      	ldr	r1, [r7, #12]
 800c84a:	4618      	mov	r0, r3
 800c84c:	f001 f8f4 	bl	800da38 <ip4_addr_isbroadcast_u32>
 800c850:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800c852:	2b00      	cmp	r3, #0
 800c854:	d105      	bne.n	800c862 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800c856:	68bb      	ldr	r3, [r7, #8]
 800c858:	681b      	ldr	r3, [r3, #0]
 800c85a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800c85e:	2be0      	cmp	r3, #224	; 0xe0
 800c860:	d102      	bne.n	800c868 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800c862:	f06f 030f 	mvn.w	r3, #15
 800c866:	e06c      	b.n	800c942 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800c868:	78fb      	ldrb	r3, [r7, #3]
 800c86a:	68fa      	ldr	r2, [r7, #12]
 800c86c:	4619      	mov	r1, r3
 800c86e:	68b8      	ldr	r0, [r7, #8]
 800c870:	f7ff fe56 	bl	800c520 <etharp_find_entry>
 800c874:	4603      	mov	r3, r0
 800c876:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800c878:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	da02      	bge.n	800c886 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800c880:	8afb      	ldrh	r3, [r7, #22]
 800c882:	b25b      	sxtb	r3, r3
 800c884:	e05d      	b.n	800c942 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800c886:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c88a:	4933      	ldr	r1, [pc, #204]	; (800c958 <etharp_update_arp_entry+0x148>)
 800c88c:	4613      	mov	r3, r2
 800c88e:	005b      	lsls	r3, r3, #1
 800c890:	4413      	add	r3, r2
 800c892:	00db      	lsls	r3, r3, #3
 800c894:	440b      	add	r3, r1
 800c896:	3314      	adds	r3, #20
 800c898:	2202      	movs	r2, #2
 800c89a:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800c89c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c8a0:	492d      	ldr	r1, [pc, #180]	; (800c958 <etharp_update_arp_entry+0x148>)
 800c8a2:	4613      	mov	r3, r2
 800c8a4:	005b      	lsls	r3, r3, #1
 800c8a6:	4413      	add	r3, r2
 800c8a8:	00db      	lsls	r3, r3, #3
 800c8aa:	440b      	add	r3, r1
 800c8ac:	3308      	adds	r3, #8
 800c8ae:	68fa      	ldr	r2, [r7, #12]
 800c8b0:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800c8b2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c8b6:	4613      	mov	r3, r2
 800c8b8:	005b      	lsls	r3, r3, #1
 800c8ba:	4413      	add	r3, r2
 800c8bc:	00db      	lsls	r3, r3, #3
 800c8be:	3308      	adds	r3, #8
 800c8c0:	4a25      	ldr	r2, [pc, #148]	; (800c958 <etharp_update_arp_entry+0x148>)
 800c8c2:	4413      	add	r3, r2
 800c8c4:	3304      	adds	r3, #4
 800c8c6:	2206      	movs	r2, #6
 800c8c8:	6879      	ldr	r1, [r7, #4]
 800c8ca:	4618      	mov	r0, r3
 800c8cc:	f002 fb5f 	bl	800ef8e <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800c8d0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c8d4:	4920      	ldr	r1, [pc, #128]	; (800c958 <etharp_update_arp_entry+0x148>)
 800c8d6:	4613      	mov	r3, r2
 800c8d8:	005b      	lsls	r3, r3, #1
 800c8da:	4413      	add	r3, r2
 800c8dc:	00db      	lsls	r3, r3, #3
 800c8de:	440b      	add	r3, r1
 800c8e0:	3312      	adds	r3, #18
 800c8e2:	2200      	movs	r2, #0
 800c8e4:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800c8e6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c8ea:	491b      	ldr	r1, [pc, #108]	; (800c958 <etharp_update_arp_entry+0x148>)
 800c8ec:	4613      	mov	r3, r2
 800c8ee:	005b      	lsls	r3, r3, #1
 800c8f0:	4413      	add	r3, r2
 800c8f2:	00db      	lsls	r3, r3, #3
 800c8f4:	440b      	add	r3, r1
 800c8f6:	681b      	ldr	r3, [r3, #0]
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	d021      	beq.n	800c940 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800c8fc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c900:	4915      	ldr	r1, [pc, #84]	; (800c958 <etharp_update_arp_entry+0x148>)
 800c902:	4613      	mov	r3, r2
 800c904:	005b      	lsls	r3, r3, #1
 800c906:	4413      	add	r3, r2
 800c908:	00db      	lsls	r3, r3, #3
 800c90a:	440b      	add	r3, r1
 800c90c:	681b      	ldr	r3, [r3, #0]
 800c90e:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800c910:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c914:	4910      	ldr	r1, [pc, #64]	; (800c958 <etharp_update_arp_entry+0x148>)
 800c916:	4613      	mov	r3, r2
 800c918:	005b      	lsls	r3, r3, #1
 800c91a:	4413      	add	r3, r2
 800c91c:	00db      	lsls	r3, r3, #3
 800c91e:	440b      	add	r3, r1
 800c920:	2200      	movs	r2, #0
 800c922:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800c924:	68fb      	ldr	r3, [r7, #12]
 800c926:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800c92a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c92e:	9300      	str	r3, [sp, #0]
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	6939      	ldr	r1, [r7, #16]
 800c934:	68f8      	ldr	r0, [r7, #12]
 800c936:	f002 f8c9 	bl	800eacc <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800c93a:	6938      	ldr	r0, [r7, #16]
 800c93c:	f7fe fc9c 	bl	800b278 <pbuf_free>
  }
  return ERR_OK;
 800c940:	2300      	movs	r3, #0
}
 800c942:	4618      	mov	r0, r3
 800c944:	3718      	adds	r7, #24
 800c946:	46bd      	mov	sp, r7
 800c948:	bd80      	pop	{r7, pc}
 800c94a:	bf00      	nop
 800c94c:	08011864 	.word	0x08011864
 800c950:	0801195c 	.word	0x0801195c
 800c954:	080118dc 	.word	0x080118dc
 800c958:	200047ac 	.word	0x200047ac

0800c95c <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800c95c:	b580      	push	{r7, lr}
 800c95e:	b084      	sub	sp, #16
 800c960:	af00      	add	r7, sp, #0
 800c962:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c964:	2300      	movs	r3, #0
 800c966:	60fb      	str	r3, [r7, #12]
 800c968:	e01e      	b.n	800c9a8 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800c96a:	4913      	ldr	r1, [pc, #76]	; (800c9b8 <etharp_cleanup_netif+0x5c>)
 800c96c:	68fa      	ldr	r2, [r7, #12]
 800c96e:	4613      	mov	r3, r2
 800c970:	005b      	lsls	r3, r3, #1
 800c972:	4413      	add	r3, r2
 800c974:	00db      	lsls	r3, r3, #3
 800c976:	440b      	add	r3, r1
 800c978:	3314      	adds	r3, #20
 800c97a:	781b      	ldrb	r3, [r3, #0]
 800c97c:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800c97e:	7afb      	ldrb	r3, [r7, #11]
 800c980:	2b00      	cmp	r3, #0
 800c982:	d00e      	beq.n	800c9a2 <etharp_cleanup_netif+0x46>
 800c984:	490c      	ldr	r1, [pc, #48]	; (800c9b8 <etharp_cleanup_netif+0x5c>)
 800c986:	68fa      	ldr	r2, [r7, #12]
 800c988:	4613      	mov	r3, r2
 800c98a:	005b      	lsls	r3, r3, #1
 800c98c:	4413      	add	r3, r2
 800c98e:	00db      	lsls	r3, r3, #3
 800c990:	440b      	add	r3, r1
 800c992:	3308      	adds	r3, #8
 800c994:	681b      	ldr	r3, [r3, #0]
 800c996:	687a      	ldr	r2, [r7, #4]
 800c998:	429a      	cmp	r2, r3
 800c99a:	d102      	bne.n	800c9a2 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 800c99c:	68f8      	ldr	r0, [r7, #12]
 800c99e:	f7ff fce5 	bl	800c36c <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c9a2:	68fb      	ldr	r3, [r7, #12]
 800c9a4:	3301      	adds	r3, #1
 800c9a6:	60fb      	str	r3, [r7, #12]
 800c9a8:	68fb      	ldr	r3, [r7, #12]
 800c9aa:	2b09      	cmp	r3, #9
 800c9ac:	dddd      	ble.n	800c96a <etharp_cleanup_netif+0xe>
    }
  }
}
 800c9ae:	bf00      	nop
 800c9b0:	3710      	adds	r7, #16
 800c9b2:	46bd      	mov	sp, r7
 800c9b4:	bd80      	pop	{r7, pc}
 800c9b6:	bf00      	nop
 800c9b8:	200047ac 	.word	0x200047ac

0800c9bc <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800c9bc:	b5b0      	push	{r4, r5, r7, lr}
 800c9be:	b08a      	sub	sp, #40	; 0x28
 800c9c0:	af04      	add	r7, sp, #16
 800c9c2:	6078      	str	r0, [r7, #4]
 800c9c4:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800c9c6:	683b      	ldr	r3, [r7, #0]
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	d107      	bne.n	800c9dc <etharp_input+0x20>
 800c9cc:	4b3d      	ldr	r3, [pc, #244]	; (800cac4 <etharp_input+0x108>)
 800c9ce:	f240 228a 	movw	r2, #650	; 0x28a
 800c9d2:	493d      	ldr	r1, [pc, #244]	; (800cac8 <etharp_input+0x10c>)
 800c9d4:	483d      	ldr	r0, [pc, #244]	; (800cacc <etharp_input+0x110>)
 800c9d6:	f002 faed 	bl	800efb4 <iprintf>
 800c9da:	e06f      	b.n	800cabc <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	685b      	ldr	r3, [r3, #4]
 800c9e0:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800c9e2:	693b      	ldr	r3, [r7, #16]
 800c9e4:	881b      	ldrh	r3, [r3, #0]
 800c9e6:	b29b      	uxth	r3, r3
 800c9e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c9ec:	d10c      	bne.n	800ca08 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800c9ee:	693b      	ldr	r3, [r7, #16]
 800c9f0:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800c9f2:	2b06      	cmp	r3, #6
 800c9f4:	d108      	bne.n	800ca08 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800c9f6:	693b      	ldr	r3, [r7, #16]
 800c9f8:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800c9fa:	2b04      	cmp	r3, #4
 800c9fc:	d104      	bne.n	800ca08 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800c9fe:	693b      	ldr	r3, [r7, #16]
 800ca00:	885b      	ldrh	r3, [r3, #2]
 800ca02:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800ca04:	2b08      	cmp	r3, #8
 800ca06:	d003      	beq.n	800ca10 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800ca08:	6878      	ldr	r0, [r7, #4]
 800ca0a:	f7fe fc35 	bl	800b278 <pbuf_free>
    return;
 800ca0e:	e055      	b.n	800cabc <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800ca10:	693b      	ldr	r3, [r7, #16]
 800ca12:	330e      	adds	r3, #14
 800ca14:	681b      	ldr	r3, [r3, #0]
 800ca16:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800ca18:	693b      	ldr	r3, [r7, #16]
 800ca1a:	3318      	adds	r3, #24
 800ca1c:	681b      	ldr	r3, [r3, #0]
 800ca1e:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800ca20:	683b      	ldr	r3, [r7, #0]
 800ca22:	3304      	adds	r3, #4
 800ca24:	681b      	ldr	r3, [r3, #0]
 800ca26:	2b00      	cmp	r3, #0
 800ca28:	d102      	bne.n	800ca30 <etharp_input+0x74>
    for_us = 0;
 800ca2a:	2300      	movs	r3, #0
 800ca2c:	75fb      	strb	r3, [r7, #23]
 800ca2e:	e009      	b.n	800ca44 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800ca30:	68ba      	ldr	r2, [r7, #8]
 800ca32:	683b      	ldr	r3, [r7, #0]
 800ca34:	3304      	adds	r3, #4
 800ca36:	681b      	ldr	r3, [r3, #0]
 800ca38:	429a      	cmp	r2, r3
 800ca3a:	bf0c      	ite	eq
 800ca3c:	2301      	moveq	r3, #1
 800ca3e:	2300      	movne	r3, #0
 800ca40:	b2db      	uxtb	r3, r3
 800ca42:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800ca44:	693b      	ldr	r3, [r7, #16]
 800ca46:	f103 0208 	add.w	r2, r3, #8
 800ca4a:	7dfb      	ldrb	r3, [r7, #23]
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	d001      	beq.n	800ca54 <etharp_input+0x98>
 800ca50:	2301      	movs	r3, #1
 800ca52:	e000      	b.n	800ca56 <etharp_input+0x9a>
 800ca54:	2302      	movs	r3, #2
 800ca56:	f107 010c 	add.w	r1, r7, #12
 800ca5a:	6838      	ldr	r0, [r7, #0]
 800ca5c:	f7ff fed8 	bl	800c810 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800ca60:	693b      	ldr	r3, [r7, #16]
 800ca62:	88db      	ldrh	r3, [r3, #6]
 800ca64:	b29b      	uxth	r3, r3
 800ca66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ca6a:	d003      	beq.n	800ca74 <etharp_input+0xb8>
 800ca6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ca70:	d01e      	beq.n	800cab0 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800ca72:	e020      	b.n	800cab6 <etharp_input+0xfa>
      if (for_us) {
 800ca74:	7dfb      	ldrb	r3, [r7, #23]
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	d01c      	beq.n	800cab4 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800ca7a:	683b      	ldr	r3, [r7, #0]
 800ca7c:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800ca80:	693b      	ldr	r3, [r7, #16]
 800ca82:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800ca86:	683b      	ldr	r3, [r7, #0]
 800ca88:	f103 0526 	add.w	r5, r3, #38	; 0x26
 800ca8c:	683b      	ldr	r3, [r7, #0]
 800ca8e:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 800ca90:	693a      	ldr	r2, [r7, #16]
 800ca92:	3208      	adds	r2, #8
        etharp_raw(netif,
 800ca94:	2102      	movs	r1, #2
 800ca96:	9103      	str	r1, [sp, #12]
 800ca98:	f107 010c 	add.w	r1, r7, #12
 800ca9c:	9102      	str	r1, [sp, #8]
 800ca9e:	9201      	str	r2, [sp, #4]
 800caa0:	9300      	str	r3, [sp, #0]
 800caa2:	462b      	mov	r3, r5
 800caa4:	4622      	mov	r2, r4
 800caa6:	4601      	mov	r1, r0
 800caa8:	6838      	ldr	r0, [r7, #0]
 800caaa:	f000 faeb 	bl	800d084 <etharp_raw>
      break;
 800caae:	e001      	b.n	800cab4 <etharp_input+0xf8>
      break;
 800cab0:	bf00      	nop
 800cab2:	e000      	b.n	800cab6 <etharp_input+0xfa>
      break;
 800cab4:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800cab6:	6878      	ldr	r0, [r7, #4]
 800cab8:	f7fe fbde 	bl	800b278 <pbuf_free>
}
 800cabc:	3718      	adds	r7, #24
 800cabe:	46bd      	mov	sp, r7
 800cac0:	bdb0      	pop	{r4, r5, r7, pc}
 800cac2:	bf00      	nop
 800cac4:	08011864 	.word	0x08011864
 800cac8:	080119b4 	.word	0x080119b4
 800cacc:	080118dc 	.word	0x080118dc

0800cad0 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 800cad0:	b580      	push	{r7, lr}
 800cad2:	b086      	sub	sp, #24
 800cad4:	af02      	add	r7, sp, #8
 800cad6:	60f8      	str	r0, [r7, #12]
 800cad8:	60b9      	str	r1, [r7, #8]
 800cada:	4613      	mov	r3, r2
 800cadc:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800cade:	79fa      	ldrb	r2, [r7, #7]
 800cae0:	4944      	ldr	r1, [pc, #272]	; (800cbf4 <etharp_output_to_arp_index+0x124>)
 800cae2:	4613      	mov	r3, r2
 800cae4:	005b      	lsls	r3, r3, #1
 800cae6:	4413      	add	r3, r2
 800cae8:	00db      	lsls	r3, r3, #3
 800caea:	440b      	add	r3, r1
 800caec:	3314      	adds	r3, #20
 800caee:	781b      	ldrb	r3, [r3, #0]
 800caf0:	2b01      	cmp	r3, #1
 800caf2:	d806      	bhi.n	800cb02 <etharp_output_to_arp_index+0x32>
 800caf4:	4b40      	ldr	r3, [pc, #256]	; (800cbf8 <etharp_output_to_arp_index+0x128>)
 800caf6:	f240 22ef 	movw	r2, #751	; 0x2ef
 800cafa:	4940      	ldr	r1, [pc, #256]	; (800cbfc <etharp_output_to_arp_index+0x12c>)
 800cafc:	4840      	ldr	r0, [pc, #256]	; (800cc00 <etharp_output_to_arp_index+0x130>)
 800cafe:	f002 fa59 	bl	800efb4 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800cb02:	79fa      	ldrb	r2, [r7, #7]
 800cb04:	493b      	ldr	r1, [pc, #236]	; (800cbf4 <etharp_output_to_arp_index+0x124>)
 800cb06:	4613      	mov	r3, r2
 800cb08:	005b      	lsls	r3, r3, #1
 800cb0a:	4413      	add	r3, r2
 800cb0c:	00db      	lsls	r3, r3, #3
 800cb0e:	440b      	add	r3, r1
 800cb10:	3314      	adds	r3, #20
 800cb12:	781b      	ldrb	r3, [r3, #0]
 800cb14:	2b02      	cmp	r3, #2
 800cb16:	d153      	bne.n	800cbc0 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800cb18:	79fa      	ldrb	r2, [r7, #7]
 800cb1a:	4936      	ldr	r1, [pc, #216]	; (800cbf4 <etharp_output_to_arp_index+0x124>)
 800cb1c:	4613      	mov	r3, r2
 800cb1e:	005b      	lsls	r3, r3, #1
 800cb20:	4413      	add	r3, r2
 800cb22:	00db      	lsls	r3, r3, #3
 800cb24:	440b      	add	r3, r1
 800cb26:	3312      	adds	r3, #18
 800cb28:	881b      	ldrh	r3, [r3, #0]
 800cb2a:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800cb2e:	d919      	bls.n	800cb64 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800cb30:	79fa      	ldrb	r2, [r7, #7]
 800cb32:	4613      	mov	r3, r2
 800cb34:	005b      	lsls	r3, r3, #1
 800cb36:	4413      	add	r3, r2
 800cb38:	00db      	lsls	r3, r3, #3
 800cb3a:	4a2e      	ldr	r2, [pc, #184]	; (800cbf4 <etharp_output_to_arp_index+0x124>)
 800cb3c:	4413      	add	r3, r2
 800cb3e:	3304      	adds	r3, #4
 800cb40:	4619      	mov	r1, r3
 800cb42:	68f8      	ldr	r0, [r7, #12]
 800cb44:	f000 fb4c 	bl	800d1e0 <etharp_request>
 800cb48:	4603      	mov	r3, r0
 800cb4a:	2b00      	cmp	r3, #0
 800cb4c:	d138      	bne.n	800cbc0 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800cb4e:	79fa      	ldrb	r2, [r7, #7]
 800cb50:	4928      	ldr	r1, [pc, #160]	; (800cbf4 <etharp_output_to_arp_index+0x124>)
 800cb52:	4613      	mov	r3, r2
 800cb54:	005b      	lsls	r3, r3, #1
 800cb56:	4413      	add	r3, r2
 800cb58:	00db      	lsls	r3, r3, #3
 800cb5a:	440b      	add	r3, r1
 800cb5c:	3314      	adds	r3, #20
 800cb5e:	2203      	movs	r2, #3
 800cb60:	701a      	strb	r2, [r3, #0]
 800cb62:	e02d      	b.n	800cbc0 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800cb64:	79fa      	ldrb	r2, [r7, #7]
 800cb66:	4923      	ldr	r1, [pc, #140]	; (800cbf4 <etharp_output_to_arp_index+0x124>)
 800cb68:	4613      	mov	r3, r2
 800cb6a:	005b      	lsls	r3, r3, #1
 800cb6c:	4413      	add	r3, r2
 800cb6e:	00db      	lsls	r3, r3, #3
 800cb70:	440b      	add	r3, r1
 800cb72:	3312      	adds	r3, #18
 800cb74:	881b      	ldrh	r3, [r3, #0]
 800cb76:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800cb7a:	d321      	bcc.n	800cbc0 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800cb7c:	79fa      	ldrb	r2, [r7, #7]
 800cb7e:	4613      	mov	r3, r2
 800cb80:	005b      	lsls	r3, r3, #1
 800cb82:	4413      	add	r3, r2
 800cb84:	00db      	lsls	r3, r3, #3
 800cb86:	4a1b      	ldr	r2, [pc, #108]	; (800cbf4 <etharp_output_to_arp_index+0x124>)
 800cb88:	4413      	add	r3, r2
 800cb8a:	1d19      	adds	r1, r3, #4
 800cb8c:	79fa      	ldrb	r2, [r7, #7]
 800cb8e:	4613      	mov	r3, r2
 800cb90:	005b      	lsls	r3, r3, #1
 800cb92:	4413      	add	r3, r2
 800cb94:	00db      	lsls	r3, r3, #3
 800cb96:	3308      	adds	r3, #8
 800cb98:	4a16      	ldr	r2, [pc, #88]	; (800cbf4 <etharp_output_to_arp_index+0x124>)
 800cb9a:	4413      	add	r3, r2
 800cb9c:	3304      	adds	r3, #4
 800cb9e:	461a      	mov	r2, r3
 800cba0:	68f8      	ldr	r0, [r7, #12]
 800cba2:	f000 fafb 	bl	800d19c <etharp_request_dst>
 800cba6:	4603      	mov	r3, r0
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	d109      	bne.n	800cbc0 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800cbac:	79fa      	ldrb	r2, [r7, #7]
 800cbae:	4911      	ldr	r1, [pc, #68]	; (800cbf4 <etharp_output_to_arp_index+0x124>)
 800cbb0:	4613      	mov	r3, r2
 800cbb2:	005b      	lsls	r3, r3, #1
 800cbb4:	4413      	add	r3, r2
 800cbb6:	00db      	lsls	r3, r3, #3
 800cbb8:	440b      	add	r3, r1
 800cbba:	3314      	adds	r3, #20
 800cbbc:	2203      	movs	r2, #3
 800cbbe:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800cbc0:	68fb      	ldr	r3, [r7, #12]
 800cbc2:	f103 0126 	add.w	r1, r3, #38	; 0x26
 800cbc6:	79fa      	ldrb	r2, [r7, #7]
 800cbc8:	4613      	mov	r3, r2
 800cbca:	005b      	lsls	r3, r3, #1
 800cbcc:	4413      	add	r3, r2
 800cbce:	00db      	lsls	r3, r3, #3
 800cbd0:	3308      	adds	r3, #8
 800cbd2:	4a08      	ldr	r2, [pc, #32]	; (800cbf4 <etharp_output_to_arp_index+0x124>)
 800cbd4:	4413      	add	r3, r2
 800cbd6:	1d1a      	adds	r2, r3, #4
 800cbd8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800cbdc:	9300      	str	r3, [sp, #0]
 800cbde:	4613      	mov	r3, r2
 800cbe0:	460a      	mov	r2, r1
 800cbe2:	68b9      	ldr	r1, [r7, #8]
 800cbe4:	68f8      	ldr	r0, [r7, #12]
 800cbe6:	f001 ff71 	bl	800eacc <ethernet_output>
 800cbea:	4603      	mov	r3, r0
}
 800cbec:	4618      	mov	r0, r3
 800cbee:	3710      	adds	r7, #16
 800cbf0:	46bd      	mov	sp, r7
 800cbf2:	bd80      	pop	{r7, pc}
 800cbf4:	200047ac 	.word	0x200047ac
 800cbf8:	08011864 	.word	0x08011864
 800cbfc:	080119d4 	.word	0x080119d4
 800cc00:	080118dc 	.word	0x080118dc

0800cc04 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800cc04:	b580      	push	{r7, lr}
 800cc06:	b08a      	sub	sp, #40	; 0x28
 800cc08:	af02      	add	r7, sp, #8
 800cc0a:	60f8      	str	r0, [r7, #12]
 800cc0c:	60b9      	str	r1, [r7, #8]
 800cc0e:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800cc14:	68fb      	ldr	r3, [r7, #12]
 800cc16:	2b00      	cmp	r3, #0
 800cc18:	d106      	bne.n	800cc28 <etharp_output+0x24>
 800cc1a:	4b73      	ldr	r3, [pc, #460]	; (800cde8 <etharp_output+0x1e4>)
 800cc1c:	f240 321e 	movw	r2, #798	; 0x31e
 800cc20:	4972      	ldr	r1, [pc, #456]	; (800cdec <etharp_output+0x1e8>)
 800cc22:	4873      	ldr	r0, [pc, #460]	; (800cdf0 <etharp_output+0x1ec>)
 800cc24:	f002 f9c6 	bl	800efb4 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800cc28:	68bb      	ldr	r3, [r7, #8]
 800cc2a:	2b00      	cmp	r3, #0
 800cc2c:	d106      	bne.n	800cc3c <etharp_output+0x38>
 800cc2e:	4b6e      	ldr	r3, [pc, #440]	; (800cde8 <etharp_output+0x1e4>)
 800cc30:	f240 321f 	movw	r2, #799	; 0x31f
 800cc34:	496f      	ldr	r1, [pc, #444]	; (800cdf4 <etharp_output+0x1f0>)
 800cc36:	486e      	ldr	r0, [pc, #440]	; (800cdf0 <etharp_output+0x1ec>)
 800cc38:	f002 f9bc 	bl	800efb4 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	2b00      	cmp	r3, #0
 800cc40:	d106      	bne.n	800cc50 <etharp_output+0x4c>
 800cc42:	4b69      	ldr	r3, [pc, #420]	; (800cde8 <etharp_output+0x1e4>)
 800cc44:	f44f 7248 	mov.w	r2, #800	; 0x320
 800cc48:	496b      	ldr	r1, [pc, #428]	; (800cdf8 <etharp_output+0x1f4>)
 800cc4a:	4869      	ldr	r0, [pc, #420]	; (800cdf0 <etharp_output+0x1ec>)
 800cc4c:	f002 f9b2 	bl	800efb4 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	681b      	ldr	r3, [r3, #0]
 800cc54:	68f9      	ldr	r1, [r7, #12]
 800cc56:	4618      	mov	r0, r3
 800cc58:	f000 feee 	bl	800da38 <ip4_addr_isbroadcast_u32>
 800cc5c:	4603      	mov	r3, r0
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	d002      	beq.n	800cc68 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800cc62:	4b66      	ldr	r3, [pc, #408]	; (800cdfc <etharp_output+0x1f8>)
 800cc64:	61fb      	str	r3, [r7, #28]
 800cc66:	e0af      	b.n	800cdc8 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	681b      	ldr	r3, [r3, #0]
 800cc6c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cc70:	2be0      	cmp	r3, #224	; 0xe0
 800cc72:	d118      	bne.n	800cca6 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800cc74:	2301      	movs	r3, #1
 800cc76:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800cc78:	2300      	movs	r3, #0
 800cc7a:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800cc7c:	235e      	movs	r3, #94	; 0x5e
 800cc7e:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	3301      	adds	r3, #1
 800cc84:	781b      	ldrb	r3, [r3, #0]
 800cc86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cc8a:	b2db      	uxtb	r3, r3
 800cc8c:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	3302      	adds	r3, #2
 800cc92:	781b      	ldrb	r3, [r3, #0]
 800cc94:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	3303      	adds	r3, #3
 800cc9a:	781b      	ldrb	r3, [r3, #0]
 800cc9c:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800cc9e:	f107 0310 	add.w	r3, r7, #16
 800cca2:	61fb      	str	r3, [r7, #28]
 800cca4:	e090      	b.n	800cdc8 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	681a      	ldr	r2, [r3, #0]
 800ccaa:	68fb      	ldr	r3, [r7, #12]
 800ccac:	3304      	adds	r3, #4
 800ccae:	681b      	ldr	r3, [r3, #0]
 800ccb0:	405a      	eors	r2, r3
 800ccb2:	68fb      	ldr	r3, [r7, #12]
 800ccb4:	3308      	adds	r3, #8
 800ccb6:	681b      	ldr	r3, [r3, #0]
 800ccb8:	4013      	ands	r3, r2
 800ccba:	2b00      	cmp	r3, #0
 800ccbc:	d012      	beq.n	800cce4 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	681b      	ldr	r3, [r3, #0]
 800ccc2:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800ccc4:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800ccc8:	4293      	cmp	r3, r2
 800ccca:	d00b      	beq.n	800cce4 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800cccc:	68fb      	ldr	r3, [r7, #12]
 800ccce:	330c      	adds	r3, #12
 800ccd0:	681b      	ldr	r3, [r3, #0]
 800ccd2:	2b00      	cmp	r3, #0
 800ccd4:	d003      	beq.n	800ccde <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800ccd6:	68fb      	ldr	r3, [r7, #12]
 800ccd8:	330c      	adds	r3, #12
 800ccda:	61bb      	str	r3, [r7, #24]
 800ccdc:	e002      	b.n	800cce4 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800ccde:	f06f 0303 	mvn.w	r3, #3
 800cce2:	e07d      	b.n	800cde0 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800cce4:	4b46      	ldr	r3, [pc, #280]	; (800ce00 <etharp_output+0x1fc>)
 800cce6:	781b      	ldrb	r3, [r3, #0]
 800cce8:	4619      	mov	r1, r3
 800ccea:	4a46      	ldr	r2, [pc, #280]	; (800ce04 <etharp_output+0x200>)
 800ccec:	460b      	mov	r3, r1
 800ccee:	005b      	lsls	r3, r3, #1
 800ccf0:	440b      	add	r3, r1
 800ccf2:	00db      	lsls	r3, r3, #3
 800ccf4:	4413      	add	r3, r2
 800ccf6:	3314      	adds	r3, #20
 800ccf8:	781b      	ldrb	r3, [r3, #0]
 800ccfa:	2b01      	cmp	r3, #1
 800ccfc:	d925      	bls.n	800cd4a <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 800ccfe:	4b40      	ldr	r3, [pc, #256]	; (800ce00 <etharp_output+0x1fc>)
 800cd00:	781b      	ldrb	r3, [r3, #0]
 800cd02:	4619      	mov	r1, r3
 800cd04:	4a3f      	ldr	r2, [pc, #252]	; (800ce04 <etharp_output+0x200>)
 800cd06:	460b      	mov	r3, r1
 800cd08:	005b      	lsls	r3, r3, #1
 800cd0a:	440b      	add	r3, r1
 800cd0c:	00db      	lsls	r3, r3, #3
 800cd0e:	4413      	add	r3, r2
 800cd10:	3308      	adds	r3, #8
 800cd12:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800cd14:	68fa      	ldr	r2, [r7, #12]
 800cd16:	429a      	cmp	r2, r3
 800cd18:	d117      	bne.n	800cd4a <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800cd1a:	69bb      	ldr	r3, [r7, #24]
 800cd1c:	681a      	ldr	r2, [r3, #0]
 800cd1e:	4b38      	ldr	r3, [pc, #224]	; (800ce00 <etharp_output+0x1fc>)
 800cd20:	781b      	ldrb	r3, [r3, #0]
 800cd22:	4618      	mov	r0, r3
 800cd24:	4937      	ldr	r1, [pc, #220]	; (800ce04 <etharp_output+0x200>)
 800cd26:	4603      	mov	r3, r0
 800cd28:	005b      	lsls	r3, r3, #1
 800cd2a:	4403      	add	r3, r0
 800cd2c:	00db      	lsls	r3, r3, #3
 800cd2e:	440b      	add	r3, r1
 800cd30:	3304      	adds	r3, #4
 800cd32:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800cd34:	429a      	cmp	r2, r3
 800cd36:	d108      	bne.n	800cd4a <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800cd38:	4b31      	ldr	r3, [pc, #196]	; (800ce00 <etharp_output+0x1fc>)
 800cd3a:	781b      	ldrb	r3, [r3, #0]
 800cd3c:	461a      	mov	r2, r3
 800cd3e:	68b9      	ldr	r1, [r7, #8]
 800cd40:	68f8      	ldr	r0, [r7, #12]
 800cd42:	f7ff fec5 	bl	800cad0 <etharp_output_to_arp_index>
 800cd46:	4603      	mov	r3, r0
 800cd48:	e04a      	b.n	800cde0 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800cd4a:	2300      	movs	r3, #0
 800cd4c:	75fb      	strb	r3, [r7, #23]
 800cd4e:	e031      	b.n	800cdb4 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800cd50:	7dfa      	ldrb	r2, [r7, #23]
 800cd52:	492c      	ldr	r1, [pc, #176]	; (800ce04 <etharp_output+0x200>)
 800cd54:	4613      	mov	r3, r2
 800cd56:	005b      	lsls	r3, r3, #1
 800cd58:	4413      	add	r3, r2
 800cd5a:	00db      	lsls	r3, r3, #3
 800cd5c:	440b      	add	r3, r1
 800cd5e:	3314      	adds	r3, #20
 800cd60:	781b      	ldrb	r3, [r3, #0]
 800cd62:	2b01      	cmp	r3, #1
 800cd64:	d923      	bls.n	800cdae <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800cd66:	7dfa      	ldrb	r2, [r7, #23]
 800cd68:	4926      	ldr	r1, [pc, #152]	; (800ce04 <etharp_output+0x200>)
 800cd6a:	4613      	mov	r3, r2
 800cd6c:	005b      	lsls	r3, r3, #1
 800cd6e:	4413      	add	r3, r2
 800cd70:	00db      	lsls	r3, r3, #3
 800cd72:	440b      	add	r3, r1
 800cd74:	3308      	adds	r3, #8
 800cd76:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800cd78:	68fa      	ldr	r2, [r7, #12]
 800cd7a:	429a      	cmp	r2, r3
 800cd7c:	d117      	bne.n	800cdae <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800cd7e:	69bb      	ldr	r3, [r7, #24]
 800cd80:	6819      	ldr	r1, [r3, #0]
 800cd82:	7dfa      	ldrb	r2, [r7, #23]
 800cd84:	481f      	ldr	r0, [pc, #124]	; (800ce04 <etharp_output+0x200>)
 800cd86:	4613      	mov	r3, r2
 800cd88:	005b      	lsls	r3, r3, #1
 800cd8a:	4413      	add	r3, r2
 800cd8c:	00db      	lsls	r3, r3, #3
 800cd8e:	4403      	add	r3, r0
 800cd90:	3304      	adds	r3, #4
 800cd92:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 800cd94:	4299      	cmp	r1, r3
 800cd96:	d10a      	bne.n	800cdae <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 800cd98:	4a19      	ldr	r2, [pc, #100]	; (800ce00 <etharp_output+0x1fc>)
 800cd9a:	7dfb      	ldrb	r3, [r7, #23]
 800cd9c:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800cd9e:	7dfb      	ldrb	r3, [r7, #23]
 800cda0:	461a      	mov	r2, r3
 800cda2:	68b9      	ldr	r1, [r7, #8]
 800cda4:	68f8      	ldr	r0, [r7, #12]
 800cda6:	f7ff fe93 	bl	800cad0 <etharp_output_to_arp_index>
 800cdaa:	4603      	mov	r3, r0
 800cdac:	e018      	b.n	800cde0 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800cdae:	7dfb      	ldrb	r3, [r7, #23]
 800cdb0:	3301      	adds	r3, #1
 800cdb2:	75fb      	strb	r3, [r7, #23]
 800cdb4:	7dfb      	ldrb	r3, [r7, #23]
 800cdb6:	2b09      	cmp	r3, #9
 800cdb8:	d9ca      	bls.n	800cd50 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800cdba:	68ba      	ldr	r2, [r7, #8]
 800cdbc:	69b9      	ldr	r1, [r7, #24]
 800cdbe:	68f8      	ldr	r0, [r7, #12]
 800cdc0:	f000 f822 	bl	800ce08 <etharp_query>
 800cdc4:	4603      	mov	r3, r0
 800cdc6:	e00b      	b.n	800cde0 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800cdc8:	68fb      	ldr	r3, [r7, #12]
 800cdca:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800cdce:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800cdd2:	9300      	str	r3, [sp, #0]
 800cdd4:	69fb      	ldr	r3, [r7, #28]
 800cdd6:	68b9      	ldr	r1, [r7, #8]
 800cdd8:	68f8      	ldr	r0, [r7, #12]
 800cdda:	f001 fe77 	bl	800eacc <ethernet_output>
 800cdde:	4603      	mov	r3, r0
}
 800cde0:	4618      	mov	r0, r3
 800cde2:	3720      	adds	r7, #32
 800cde4:	46bd      	mov	sp, r7
 800cde6:	bd80      	pop	{r7, pc}
 800cde8:	08011864 	.word	0x08011864
 800cdec:	080119b4 	.word	0x080119b4
 800cdf0:	080118dc 	.word	0x080118dc
 800cdf4:	08011a04 	.word	0x08011a04
 800cdf8:	080119a4 	.word	0x080119a4
 800cdfc:	080120a8 	.word	0x080120a8
 800ce00:	2000489c 	.word	0x2000489c
 800ce04:	200047ac 	.word	0x200047ac

0800ce08 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800ce08:	b580      	push	{r7, lr}
 800ce0a:	b08c      	sub	sp, #48	; 0x30
 800ce0c:	af02      	add	r7, sp, #8
 800ce0e:	60f8      	str	r0, [r7, #12]
 800ce10:	60b9      	str	r1, [r7, #8]
 800ce12:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800ce14:	68fb      	ldr	r3, [r7, #12]
 800ce16:	3326      	adds	r3, #38	; 0x26
 800ce18:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800ce1a:	23ff      	movs	r3, #255	; 0xff
 800ce1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 800ce20:	2300      	movs	r3, #0
 800ce22:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800ce24:	68bb      	ldr	r3, [r7, #8]
 800ce26:	681b      	ldr	r3, [r3, #0]
 800ce28:	68f9      	ldr	r1, [r7, #12]
 800ce2a:	4618      	mov	r0, r3
 800ce2c:	f000 fe04 	bl	800da38 <ip4_addr_isbroadcast_u32>
 800ce30:	4603      	mov	r3, r0
 800ce32:	2b00      	cmp	r3, #0
 800ce34:	d10c      	bne.n	800ce50 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800ce36:	68bb      	ldr	r3, [r7, #8]
 800ce38:	681b      	ldr	r3, [r3, #0]
 800ce3a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800ce3e:	2be0      	cmp	r3, #224	; 0xe0
 800ce40:	d006      	beq.n	800ce50 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800ce42:	68bb      	ldr	r3, [r7, #8]
 800ce44:	2b00      	cmp	r3, #0
 800ce46:	d003      	beq.n	800ce50 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800ce48:	68bb      	ldr	r3, [r7, #8]
 800ce4a:	681b      	ldr	r3, [r3, #0]
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	d102      	bne.n	800ce56 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800ce50:	f06f 030f 	mvn.w	r3, #15
 800ce54:	e102      	b.n	800d05c <etharp_query+0x254>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800ce56:	68fa      	ldr	r2, [r7, #12]
 800ce58:	2101      	movs	r1, #1
 800ce5a:	68b8      	ldr	r0, [r7, #8]
 800ce5c:	f7ff fb60 	bl	800c520 <etharp_find_entry>
 800ce60:	4603      	mov	r3, r0
 800ce62:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800ce64:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	da02      	bge.n	800ce72 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 800ce6c:	8a7b      	ldrh	r3, [r7, #18]
 800ce6e:	b25b      	sxtb	r3, r3
 800ce70:	e0f4      	b.n	800d05c <etharp_query+0x254>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800ce72:	8a7b      	ldrh	r3, [r7, #18]
 800ce74:	2b7e      	cmp	r3, #126	; 0x7e
 800ce76:	d906      	bls.n	800ce86 <etharp_query+0x7e>
 800ce78:	4b7a      	ldr	r3, [pc, #488]	; (800d064 <etharp_query+0x25c>)
 800ce7a:	f240 32c1 	movw	r2, #961	; 0x3c1
 800ce7e:	497a      	ldr	r1, [pc, #488]	; (800d068 <etharp_query+0x260>)
 800ce80:	487a      	ldr	r0, [pc, #488]	; (800d06c <etharp_query+0x264>)
 800ce82:	f002 f897 	bl	800efb4 <iprintf>
  i = (netif_addr_idx_t)i_err;
 800ce86:	8a7b      	ldrh	r3, [r7, #18]
 800ce88:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800ce8a:	7c7a      	ldrb	r2, [r7, #17]
 800ce8c:	4978      	ldr	r1, [pc, #480]	; (800d070 <etharp_query+0x268>)
 800ce8e:	4613      	mov	r3, r2
 800ce90:	005b      	lsls	r3, r3, #1
 800ce92:	4413      	add	r3, r2
 800ce94:	00db      	lsls	r3, r3, #3
 800ce96:	440b      	add	r3, r1
 800ce98:	3314      	adds	r3, #20
 800ce9a:	781b      	ldrb	r3, [r3, #0]
 800ce9c:	2b00      	cmp	r3, #0
 800ce9e:	d115      	bne.n	800cecc <etharp_query+0xc4>
    is_new_entry = 1;
 800cea0:	2301      	movs	r3, #1
 800cea2:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800cea4:	7c7a      	ldrb	r2, [r7, #17]
 800cea6:	4972      	ldr	r1, [pc, #456]	; (800d070 <etharp_query+0x268>)
 800cea8:	4613      	mov	r3, r2
 800ceaa:	005b      	lsls	r3, r3, #1
 800ceac:	4413      	add	r3, r2
 800ceae:	00db      	lsls	r3, r3, #3
 800ceb0:	440b      	add	r3, r1
 800ceb2:	3314      	adds	r3, #20
 800ceb4:	2201      	movs	r2, #1
 800ceb6:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800ceb8:	7c7a      	ldrb	r2, [r7, #17]
 800ceba:	496d      	ldr	r1, [pc, #436]	; (800d070 <etharp_query+0x268>)
 800cebc:	4613      	mov	r3, r2
 800cebe:	005b      	lsls	r3, r3, #1
 800cec0:	4413      	add	r3, r2
 800cec2:	00db      	lsls	r3, r3, #3
 800cec4:	440b      	add	r3, r1
 800cec6:	3308      	adds	r3, #8
 800cec8:	68fa      	ldr	r2, [r7, #12]
 800ceca:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800cecc:	7c7a      	ldrb	r2, [r7, #17]
 800cece:	4968      	ldr	r1, [pc, #416]	; (800d070 <etharp_query+0x268>)
 800ced0:	4613      	mov	r3, r2
 800ced2:	005b      	lsls	r3, r3, #1
 800ced4:	4413      	add	r3, r2
 800ced6:	00db      	lsls	r3, r3, #3
 800ced8:	440b      	add	r3, r1
 800ceda:	3314      	adds	r3, #20
 800cedc:	781b      	ldrb	r3, [r3, #0]
 800cede:	2b01      	cmp	r3, #1
 800cee0:	d011      	beq.n	800cf06 <etharp_query+0xfe>
 800cee2:	7c7a      	ldrb	r2, [r7, #17]
 800cee4:	4962      	ldr	r1, [pc, #392]	; (800d070 <etharp_query+0x268>)
 800cee6:	4613      	mov	r3, r2
 800cee8:	005b      	lsls	r3, r3, #1
 800ceea:	4413      	add	r3, r2
 800ceec:	00db      	lsls	r3, r3, #3
 800ceee:	440b      	add	r3, r1
 800cef0:	3314      	adds	r3, #20
 800cef2:	781b      	ldrb	r3, [r3, #0]
 800cef4:	2b01      	cmp	r3, #1
 800cef6:	d806      	bhi.n	800cf06 <etharp_query+0xfe>
 800cef8:	4b5a      	ldr	r3, [pc, #360]	; (800d064 <etharp_query+0x25c>)
 800cefa:	f240 32cf 	movw	r2, #975	; 0x3cf
 800cefe:	495d      	ldr	r1, [pc, #372]	; (800d074 <etharp_query+0x26c>)
 800cf00:	485a      	ldr	r0, [pc, #360]	; (800d06c <etharp_query+0x264>)
 800cf02:	f002 f857 	bl	800efb4 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800cf06:	6a3b      	ldr	r3, [r7, #32]
 800cf08:	2b00      	cmp	r3, #0
 800cf0a:	d102      	bne.n	800cf12 <etharp_query+0x10a>
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	2b00      	cmp	r3, #0
 800cf10:	d10c      	bne.n	800cf2c <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800cf12:	68b9      	ldr	r1, [r7, #8]
 800cf14:	68f8      	ldr	r0, [r7, #12]
 800cf16:	f000 f963 	bl	800d1e0 <etharp_request>
 800cf1a:	4603      	mov	r3, r0
 800cf1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	2b00      	cmp	r3, #0
 800cf24:	d102      	bne.n	800cf2c <etharp_query+0x124>
      return result;
 800cf26:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800cf2a:	e097      	b.n	800d05c <etharp_query+0x254>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	2b00      	cmp	r3, #0
 800cf30:	d106      	bne.n	800cf40 <etharp_query+0x138>
 800cf32:	4b4c      	ldr	r3, [pc, #304]	; (800d064 <etharp_query+0x25c>)
 800cf34:	f240 32e1 	movw	r2, #993	; 0x3e1
 800cf38:	494f      	ldr	r1, [pc, #316]	; (800d078 <etharp_query+0x270>)
 800cf3a:	484c      	ldr	r0, [pc, #304]	; (800d06c <etharp_query+0x264>)
 800cf3c:	f002 f83a 	bl	800efb4 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800cf40:	7c7a      	ldrb	r2, [r7, #17]
 800cf42:	494b      	ldr	r1, [pc, #300]	; (800d070 <etharp_query+0x268>)
 800cf44:	4613      	mov	r3, r2
 800cf46:	005b      	lsls	r3, r3, #1
 800cf48:	4413      	add	r3, r2
 800cf4a:	00db      	lsls	r3, r3, #3
 800cf4c:	440b      	add	r3, r1
 800cf4e:	3314      	adds	r3, #20
 800cf50:	781b      	ldrb	r3, [r3, #0]
 800cf52:	2b01      	cmp	r3, #1
 800cf54:	d918      	bls.n	800cf88 <etharp_query+0x180>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 800cf56:	4a49      	ldr	r2, [pc, #292]	; (800d07c <etharp_query+0x274>)
 800cf58:	7c7b      	ldrb	r3, [r7, #17]
 800cf5a:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800cf5c:	7c7a      	ldrb	r2, [r7, #17]
 800cf5e:	4613      	mov	r3, r2
 800cf60:	005b      	lsls	r3, r3, #1
 800cf62:	4413      	add	r3, r2
 800cf64:	00db      	lsls	r3, r3, #3
 800cf66:	3308      	adds	r3, #8
 800cf68:	4a41      	ldr	r2, [pc, #260]	; (800d070 <etharp_query+0x268>)
 800cf6a:	4413      	add	r3, r2
 800cf6c:	1d1a      	adds	r2, r3, #4
 800cf6e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800cf72:	9300      	str	r3, [sp, #0]
 800cf74:	4613      	mov	r3, r2
 800cf76:	697a      	ldr	r2, [r7, #20]
 800cf78:	6879      	ldr	r1, [r7, #4]
 800cf7a:	68f8      	ldr	r0, [r7, #12]
 800cf7c:	f001 fda6 	bl	800eacc <ethernet_output>
 800cf80:	4603      	mov	r3, r0
 800cf82:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800cf86:	e067      	b.n	800d058 <etharp_query+0x250>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800cf88:	7c7a      	ldrb	r2, [r7, #17]
 800cf8a:	4939      	ldr	r1, [pc, #228]	; (800d070 <etharp_query+0x268>)
 800cf8c:	4613      	mov	r3, r2
 800cf8e:	005b      	lsls	r3, r3, #1
 800cf90:	4413      	add	r3, r2
 800cf92:	00db      	lsls	r3, r3, #3
 800cf94:	440b      	add	r3, r1
 800cf96:	3314      	adds	r3, #20
 800cf98:	781b      	ldrb	r3, [r3, #0]
 800cf9a:	2b01      	cmp	r3, #1
 800cf9c:	d15c      	bne.n	800d058 <etharp_query+0x250>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800cf9e:	2300      	movs	r3, #0
 800cfa0:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	61fb      	str	r3, [r7, #28]
    while (p) {
 800cfa6:	e01c      	b.n	800cfe2 <etharp_query+0x1da>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800cfa8:	69fb      	ldr	r3, [r7, #28]
 800cfaa:	895a      	ldrh	r2, [r3, #10]
 800cfac:	69fb      	ldr	r3, [r7, #28]
 800cfae:	891b      	ldrh	r3, [r3, #8]
 800cfb0:	429a      	cmp	r2, r3
 800cfb2:	d10a      	bne.n	800cfca <etharp_query+0x1c2>
 800cfb4:	69fb      	ldr	r3, [r7, #28]
 800cfb6:	681b      	ldr	r3, [r3, #0]
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	d006      	beq.n	800cfca <etharp_query+0x1c2>
 800cfbc:	4b29      	ldr	r3, [pc, #164]	; (800d064 <etharp_query+0x25c>)
 800cfbe:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800cfc2:	492f      	ldr	r1, [pc, #188]	; (800d080 <etharp_query+0x278>)
 800cfc4:	4829      	ldr	r0, [pc, #164]	; (800d06c <etharp_query+0x264>)
 800cfc6:	f001 fff5 	bl	800efb4 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 800cfca:	69fb      	ldr	r3, [r7, #28]
 800cfcc:	7b1b      	ldrb	r3, [r3, #12]
 800cfce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	d002      	beq.n	800cfdc <etharp_query+0x1d4>
        copy_needed = 1;
 800cfd6:	2301      	movs	r3, #1
 800cfd8:	61bb      	str	r3, [r7, #24]
        break;
 800cfda:	e005      	b.n	800cfe8 <etharp_query+0x1e0>
      }
      p = p->next;
 800cfdc:	69fb      	ldr	r3, [r7, #28]
 800cfde:	681b      	ldr	r3, [r3, #0]
 800cfe0:	61fb      	str	r3, [r7, #28]
    while (p) {
 800cfe2:	69fb      	ldr	r3, [r7, #28]
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	d1df      	bne.n	800cfa8 <etharp_query+0x1a0>
    }
    if (copy_needed) {
 800cfe8:	69bb      	ldr	r3, [r7, #24]
 800cfea:	2b00      	cmp	r3, #0
 800cfec:	d007      	beq.n	800cffe <etharp_query+0x1f6>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800cfee:	687a      	ldr	r2, [r7, #4]
 800cff0:	f44f 7120 	mov.w	r1, #640	; 0x280
 800cff4:	200e      	movs	r0, #14
 800cff6:	f7fe fb45 	bl	800b684 <pbuf_clone>
 800cffa:	61f8      	str	r0, [r7, #28]
 800cffc:	e004      	b.n	800d008 <etharp_query+0x200>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800d002:	69f8      	ldr	r0, [r7, #28]
 800d004:	f7fe f9de 	bl	800b3c4 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800d008:	69fb      	ldr	r3, [r7, #28]
 800d00a:	2b00      	cmp	r3, #0
 800d00c:	d021      	beq.n	800d052 <etharp_query+0x24a>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800d00e:	7c7a      	ldrb	r2, [r7, #17]
 800d010:	4917      	ldr	r1, [pc, #92]	; (800d070 <etharp_query+0x268>)
 800d012:	4613      	mov	r3, r2
 800d014:	005b      	lsls	r3, r3, #1
 800d016:	4413      	add	r3, r2
 800d018:	00db      	lsls	r3, r3, #3
 800d01a:	440b      	add	r3, r1
 800d01c:	681b      	ldr	r3, [r3, #0]
 800d01e:	2b00      	cmp	r3, #0
 800d020:	d00a      	beq.n	800d038 <etharp_query+0x230>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 800d022:	7c7a      	ldrb	r2, [r7, #17]
 800d024:	4912      	ldr	r1, [pc, #72]	; (800d070 <etharp_query+0x268>)
 800d026:	4613      	mov	r3, r2
 800d028:	005b      	lsls	r3, r3, #1
 800d02a:	4413      	add	r3, r2
 800d02c:	00db      	lsls	r3, r3, #3
 800d02e:	440b      	add	r3, r1
 800d030:	681b      	ldr	r3, [r3, #0]
 800d032:	4618      	mov	r0, r3
 800d034:	f7fe f920 	bl	800b278 <pbuf_free>
      }
      arp_table[i].q = p;
 800d038:	7c7a      	ldrb	r2, [r7, #17]
 800d03a:	490d      	ldr	r1, [pc, #52]	; (800d070 <etharp_query+0x268>)
 800d03c:	4613      	mov	r3, r2
 800d03e:	005b      	lsls	r3, r3, #1
 800d040:	4413      	add	r3, r2
 800d042:	00db      	lsls	r3, r3, #3
 800d044:	440b      	add	r3, r1
 800d046:	69fa      	ldr	r2, [r7, #28]
 800d048:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800d04a:	2300      	movs	r3, #0
 800d04c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d050:	e002      	b.n	800d058 <etharp_query+0x250>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800d052:	23ff      	movs	r3, #255	; 0xff
 800d054:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 800d058:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800d05c:	4618      	mov	r0, r3
 800d05e:	3728      	adds	r7, #40	; 0x28
 800d060:	46bd      	mov	sp, r7
 800d062:	bd80      	pop	{r7, pc}
 800d064:	08011864 	.word	0x08011864
 800d068:	08011a10 	.word	0x08011a10
 800d06c:	080118dc 	.word	0x080118dc
 800d070:	200047ac 	.word	0x200047ac
 800d074:	08011a20 	.word	0x08011a20
 800d078:	08011a04 	.word	0x08011a04
 800d07c:	2000489c 	.word	0x2000489c
 800d080:	08011a48 	.word	0x08011a48

0800d084 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800d084:	b580      	push	{r7, lr}
 800d086:	b08a      	sub	sp, #40	; 0x28
 800d088:	af02      	add	r7, sp, #8
 800d08a:	60f8      	str	r0, [r7, #12]
 800d08c:	60b9      	str	r1, [r7, #8]
 800d08e:	607a      	str	r2, [r7, #4]
 800d090:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800d092:	2300      	movs	r3, #0
 800d094:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800d096:	68fb      	ldr	r3, [r7, #12]
 800d098:	2b00      	cmp	r3, #0
 800d09a:	d106      	bne.n	800d0aa <etharp_raw+0x26>
 800d09c:	4b3a      	ldr	r3, [pc, #232]	; (800d188 <etharp_raw+0x104>)
 800d09e:	f240 4257 	movw	r2, #1111	; 0x457
 800d0a2:	493a      	ldr	r1, [pc, #232]	; (800d18c <etharp_raw+0x108>)
 800d0a4:	483a      	ldr	r0, [pc, #232]	; (800d190 <etharp_raw+0x10c>)
 800d0a6:	f001 ff85 	bl	800efb4 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800d0aa:	f44f 7220 	mov.w	r2, #640	; 0x280
 800d0ae:	211c      	movs	r1, #28
 800d0b0:	200e      	movs	r0, #14
 800d0b2:	f7fd fe03 	bl	800acbc <pbuf_alloc>
 800d0b6:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800d0b8:	69bb      	ldr	r3, [r7, #24]
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	d102      	bne.n	800d0c4 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800d0be:	f04f 33ff 	mov.w	r3, #4294967295
 800d0c2:	e05d      	b.n	800d180 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800d0c4:	69bb      	ldr	r3, [r7, #24]
 800d0c6:	895b      	ldrh	r3, [r3, #10]
 800d0c8:	2b1b      	cmp	r3, #27
 800d0ca:	d806      	bhi.n	800d0da <etharp_raw+0x56>
 800d0cc:	4b2e      	ldr	r3, [pc, #184]	; (800d188 <etharp_raw+0x104>)
 800d0ce:	f240 4263 	movw	r2, #1123	; 0x463
 800d0d2:	4930      	ldr	r1, [pc, #192]	; (800d194 <etharp_raw+0x110>)
 800d0d4:	482e      	ldr	r0, [pc, #184]	; (800d190 <etharp_raw+0x10c>)
 800d0d6:	f001 ff6d 	bl	800efb4 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800d0da:	69bb      	ldr	r3, [r7, #24]
 800d0dc:	685b      	ldr	r3, [r3, #4]
 800d0de:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800d0e0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800d0e2:	4618      	mov	r0, r3
 800d0e4:	f7fc fd82 	bl	8009bec <lwip_htons>
 800d0e8:	4603      	mov	r3, r0
 800d0ea:	461a      	mov	r2, r3
 800d0ec:	697b      	ldr	r3, [r7, #20]
 800d0ee:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800d0f0:	68fb      	ldr	r3, [r7, #12]
 800d0f2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800d0f6:	2b06      	cmp	r3, #6
 800d0f8:	d006      	beq.n	800d108 <etharp_raw+0x84>
 800d0fa:	4b23      	ldr	r3, [pc, #140]	; (800d188 <etharp_raw+0x104>)
 800d0fc:	f240 426a 	movw	r2, #1130	; 0x46a
 800d100:	4925      	ldr	r1, [pc, #148]	; (800d198 <etharp_raw+0x114>)
 800d102:	4823      	ldr	r0, [pc, #140]	; (800d190 <etharp_raw+0x10c>)
 800d104:	f001 ff56 	bl	800efb4 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800d108:	697b      	ldr	r3, [r7, #20]
 800d10a:	3308      	adds	r3, #8
 800d10c:	2206      	movs	r2, #6
 800d10e:	6839      	ldr	r1, [r7, #0]
 800d110:	4618      	mov	r0, r3
 800d112:	f001 ff3c 	bl	800ef8e <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800d116:	697b      	ldr	r3, [r7, #20]
 800d118:	3312      	adds	r3, #18
 800d11a:	2206      	movs	r2, #6
 800d11c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d11e:	4618      	mov	r0, r3
 800d120:	f001 ff35 	bl	800ef8e <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800d124:	697b      	ldr	r3, [r7, #20]
 800d126:	330e      	adds	r3, #14
 800d128:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d12a:	6812      	ldr	r2, [r2, #0]
 800d12c:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800d12e:	697b      	ldr	r3, [r7, #20]
 800d130:	3318      	adds	r3, #24
 800d132:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d134:	6812      	ldr	r2, [r2, #0]
 800d136:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800d138:	697b      	ldr	r3, [r7, #20]
 800d13a:	2200      	movs	r2, #0
 800d13c:	701a      	strb	r2, [r3, #0]
 800d13e:	2200      	movs	r2, #0
 800d140:	f042 0201 	orr.w	r2, r2, #1
 800d144:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800d146:	697b      	ldr	r3, [r7, #20]
 800d148:	2200      	movs	r2, #0
 800d14a:	f042 0208 	orr.w	r2, r2, #8
 800d14e:	709a      	strb	r2, [r3, #2]
 800d150:	2200      	movs	r2, #0
 800d152:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800d154:	697b      	ldr	r3, [r7, #20]
 800d156:	2206      	movs	r2, #6
 800d158:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800d15a:	697b      	ldr	r3, [r7, #20]
 800d15c:	2204      	movs	r2, #4
 800d15e:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800d160:	f640 0306 	movw	r3, #2054	; 0x806
 800d164:	9300      	str	r3, [sp, #0]
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	68ba      	ldr	r2, [r7, #8]
 800d16a:	69b9      	ldr	r1, [r7, #24]
 800d16c:	68f8      	ldr	r0, [r7, #12]
 800d16e:	f001 fcad 	bl	800eacc <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800d172:	69b8      	ldr	r0, [r7, #24]
 800d174:	f7fe f880 	bl	800b278 <pbuf_free>
  p = NULL;
 800d178:	2300      	movs	r3, #0
 800d17a:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800d17c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800d180:	4618      	mov	r0, r3
 800d182:	3720      	adds	r7, #32
 800d184:	46bd      	mov	sp, r7
 800d186:	bd80      	pop	{r7, pc}
 800d188:	08011864 	.word	0x08011864
 800d18c:	080119b4 	.word	0x080119b4
 800d190:	080118dc 	.word	0x080118dc
 800d194:	08011a64 	.word	0x08011a64
 800d198:	08011a98 	.word	0x08011a98

0800d19c <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 800d19c:	b580      	push	{r7, lr}
 800d19e:	b088      	sub	sp, #32
 800d1a0:	af04      	add	r7, sp, #16
 800d1a2:	60f8      	str	r0, [r7, #12]
 800d1a4:	60b9      	str	r1, [r7, #8]
 800d1a6:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800d1a8:	68fb      	ldr	r3, [r7, #12]
 800d1aa:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800d1ae:	68fb      	ldr	r3, [r7, #12]
 800d1b0:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800d1b4:	68fb      	ldr	r3, [r7, #12]
 800d1b6:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800d1b8:	2201      	movs	r2, #1
 800d1ba:	9203      	str	r2, [sp, #12]
 800d1bc:	68ba      	ldr	r2, [r7, #8]
 800d1be:	9202      	str	r2, [sp, #8]
 800d1c0:	4a06      	ldr	r2, [pc, #24]	; (800d1dc <etharp_request_dst+0x40>)
 800d1c2:	9201      	str	r2, [sp, #4]
 800d1c4:	9300      	str	r3, [sp, #0]
 800d1c6:	4603      	mov	r3, r0
 800d1c8:	687a      	ldr	r2, [r7, #4]
 800d1ca:	68f8      	ldr	r0, [r7, #12]
 800d1cc:	f7ff ff5a 	bl	800d084 <etharp_raw>
 800d1d0:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800d1d2:	4618      	mov	r0, r3
 800d1d4:	3710      	adds	r7, #16
 800d1d6:	46bd      	mov	sp, r7
 800d1d8:	bd80      	pop	{r7, pc}
 800d1da:	bf00      	nop
 800d1dc:	080120b0 	.word	0x080120b0

0800d1e0 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800d1e0:	b580      	push	{r7, lr}
 800d1e2:	b082      	sub	sp, #8
 800d1e4:	af00      	add	r7, sp, #0
 800d1e6:	6078      	str	r0, [r7, #4]
 800d1e8:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800d1ea:	4a05      	ldr	r2, [pc, #20]	; (800d200 <etharp_request+0x20>)
 800d1ec:	6839      	ldr	r1, [r7, #0]
 800d1ee:	6878      	ldr	r0, [r7, #4]
 800d1f0:	f7ff ffd4 	bl	800d19c <etharp_request_dst>
 800d1f4:	4603      	mov	r3, r0
}
 800d1f6:	4618      	mov	r0, r3
 800d1f8:	3708      	adds	r7, #8
 800d1fa:	46bd      	mov	sp, r7
 800d1fc:	bd80      	pop	{r7, pc}
 800d1fe:	bf00      	nop
 800d200:	080120a8 	.word	0x080120a8

0800d204 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800d204:	b580      	push	{r7, lr}
 800d206:	b08e      	sub	sp, #56	; 0x38
 800d208:	af04      	add	r7, sp, #16
 800d20a:	6078      	str	r0, [r7, #4]
 800d20c:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800d20e:	4b79      	ldr	r3, [pc, #484]	; (800d3f4 <icmp_input+0x1f0>)
 800d210:	689b      	ldr	r3, [r3, #8]
 800d212:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 800d214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d216:	781b      	ldrb	r3, [r3, #0]
 800d218:	f003 030f 	and.w	r3, r3, #15
 800d21c:	b2db      	uxtb	r3, r3
 800d21e:	009b      	lsls	r3, r3, #2
 800d220:	b2db      	uxtb	r3, r3
 800d222:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 800d224:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d226:	2b13      	cmp	r3, #19
 800d228:	f240 80cd 	bls.w	800d3c6 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	895b      	ldrh	r3, [r3, #10]
 800d230:	2b03      	cmp	r3, #3
 800d232:	f240 80ca 	bls.w	800d3ca <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	685b      	ldr	r3, [r3, #4]
 800d23a:	781b      	ldrb	r3, [r3, #0]
 800d23c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 800d240:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800d244:	2b00      	cmp	r3, #0
 800d246:	f000 80b7 	beq.w	800d3b8 <icmp_input+0x1b4>
 800d24a:	2b08      	cmp	r3, #8
 800d24c:	f040 80b7 	bne.w	800d3be <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 800d250:	4b69      	ldr	r3, [pc, #420]	; (800d3f8 <icmp_input+0x1f4>)
 800d252:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800d254:	4b67      	ldr	r3, [pc, #412]	; (800d3f4 <icmp_input+0x1f0>)
 800d256:	695b      	ldr	r3, [r3, #20]
 800d258:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d25c:	2be0      	cmp	r3, #224	; 0xe0
 800d25e:	f000 80bb 	beq.w	800d3d8 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800d262:	4b64      	ldr	r3, [pc, #400]	; (800d3f4 <icmp_input+0x1f0>)
 800d264:	695a      	ldr	r2, [r3, #20]
 800d266:	4b63      	ldr	r3, [pc, #396]	; (800d3f4 <icmp_input+0x1f0>)
 800d268:	681b      	ldr	r3, [r3, #0]
 800d26a:	4619      	mov	r1, r3
 800d26c:	4610      	mov	r0, r2
 800d26e:	f000 fbe3 	bl	800da38 <ip4_addr_isbroadcast_u32>
 800d272:	4603      	mov	r3, r0
 800d274:	2b00      	cmp	r3, #0
 800d276:	f040 80b1 	bne.w	800d3dc <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	891b      	ldrh	r3, [r3, #8]
 800d27e:	2b07      	cmp	r3, #7
 800d280:	f240 80a5 	bls.w	800d3ce <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800d284:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d286:	330e      	adds	r3, #14
 800d288:	4619      	mov	r1, r3
 800d28a:	6878      	ldr	r0, [r7, #4]
 800d28c:	f7fd ff5e 	bl	800b14c <pbuf_add_header>
 800d290:	4603      	mov	r3, r0
 800d292:	2b00      	cmp	r3, #0
 800d294:	d04b      	beq.n	800d32e <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	891a      	ldrh	r2, [r3, #8]
 800d29a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d29c:	4413      	add	r3, r2
 800d29e:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	891b      	ldrh	r3, [r3, #8]
 800d2a4:	8b7a      	ldrh	r2, [r7, #26]
 800d2a6:	429a      	cmp	r2, r3
 800d2a8:	f0c0 809a 	bcc.w	800d3e0 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800d2ac:	8b7b      	ldrh	r3, [r7, #26]
 800d2ae:	f44f 7220 	mov.w	r2, #640	; 0x280
 800d2b2:	4619      	mov	r1, r3
 800d2b4:	200e      	movs	r0, #14
 800d2b6:	f7fd fd01 	bl	800acbc <pbuf_alloc>
 800d2ba:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 800d2bc:	697b      	ldr	r3, [r7, #20]
 800d2be:	2b00      	cmp	r3, #0
 800d2c0:	f000 8090 	beq.w	800d3e4 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800d2c4:	697b      	ldr	r3, [r7, #20]
 800d2c6:	895b      	ldrh	r3, [r3, #10]
 800d2c8:	461a      	mov	r2, r3
 800d2ca:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d2cc:	3308      	adds	r3, #8
 800d2ce:	429a      	cmp	r2, r3
 800d2d0:	d203      	bcs.n	800d2da <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 800d2d2:	6978      	ldr	r0, [r7, #20]
 800d2d4:	f7fd ffd0 	bl	800b278 <pbuf_free>
          goto icmperr;
 800d2d8:	e085      	b.n	800d3e6 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 800d2da:	697b      	ldr	r3, [r7, #20]
 800d2dc:	685b      	ldr	r3, [r3, #4]
 800d2de:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800d2e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d2e2:	4618      	mov	r0, r3
 800d2e4:	f001 fe53 	bl	800ef8e <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 800d2e8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d2ea:	4619      	mov	r1, r3
 800d2ec:	6978      	ldr	r0, [r7, #20]
 800d2ee:	f7fd ff3d 	bl	800b16c <pbuf_remove_header>
 800d2f2:	4603      	mov	r3, r0
 800d2f4:	2b00      	cmp	r3, #0
 800d2f6:	d009      	beq.n	800d30c <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800d2f8:	4b40      	ldr	r3, [pc, #256]	; (800d3fc <icmp_input+0x1f8>)
 800d2fa:	22b6      	movs	r2, #182	; 0xb6
 800d2fc:	4940      	ldr	r1, [pc, #256]	; (800d400 <icmp_input+0x1fc>)
 800d2fe:	4841      	ldr	r0, [pc, #260]	; (800d404 <icmp_input+0x200>)
 800d300:	f001 fe58 	bl	800efb4 <iprintf>
          pbuf_free(r);
 800d304:	6978      	ldr	r0, [r7, #20]
 800d306:	f7fd ffb7 	bl	800b278 <pbuf_free>
          goto icmperr;
 800d30a:	e06c      	b.n	800d3e6 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 800d30c:	6879      	ldr	r1, [r7, #4]
 800d30e:	6978      	ldr	r0, [r7, #20]
 800d310:	f7fe f8e6 	bl	800b4e0 <pbuf_copy>
 800d314:	4603      	mov	r3, r0
 800d316:	2b00      	cmp	r3, #0
 800d318:	d003      	beq.n	800d322 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 800d31a:	6978      	ldr	r0, [r7, #20]
 800d31c:	f7fd ffac 	bl	800b278 <pbuf_free>
          goto icmperr;
 800d320:	e061      	b.n	800d3e6 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 800d322:	6878      	ldr	r0, [r7, #4]
 800d324:	f7fd ffa8 	bl	800b278 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 800d328:	697b      	ldr	r3, [r7, #20]
 800d32a:	607b      	str	r3, [r7, #4]
 800d32c:	e00f      	b.n	800d34e <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800d32e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d330:	330e      	adds	r3, #14
 800d332:	4619      	mov	r1, r3
 800d334:	6878      	ldr	r0, [r7, #4]
 800d336:	f7fd ff19 	bl	800b16c <pbuf_remove_header>
 800d33a:	4603      	mov	r3, r0
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	d006      	beq.n	800d34e <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800d340:	4b2e      	ldr	r3, [pc, #184]	; (800d3fc <icmp_input+0x1f8>)
 800d342:	22c7      	movs	r2, #199	; 0xc7
 800d344:	4930      	ldr	r1, [pc, #192]	; (800d408 <icmp_input+0x204>)
 800d346:	482f      	ldr	r0, [pc, #188]	; (800d404 <icmp_input+0x200>)
 800d348:	f001 fe34 	bl	800efb4 <iprintf>
          goto icmperr;
 800d34c:	e04b      	b.n	800d3e6 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	685b      	ldr	r3, [r3, #4]
 800d352:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 800d354:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d356:	4619      	mov	r1, r3
 800d358:	6878      	ldr	r0, [r7, #4]
 800d35a:	f7fd fef7 	bl	800b14c <pbuf_add_header>
 800d35e:	4603      	mov	r3, r0
 800d360:	2b00      	cmp	r3, #0
 800d362:	d12b      	bne.n	800d3bc <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	685b      	ldr	r3, [r3, #4]
 800d368:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 800d36a:	69fb      	ldr	r3, [r7, #28]
 800d36c:	681a      	ldr	r2, [r3, #0]
 800d36e:	68fb      	ldr	r3, [r7, #12]
 800d370:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800d372:	4b20      	ldr	r3, [pc, #128]	; (800d3f4 <icmp_input+0x1f0>)
 800d374:	691a      	ldr	r2, [r3, #16]
 800d376:	68fb      	ldr	r3, [r7, #12]
 800d378:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800d37a:	693b      	ldr	r3, [r7, #16]
 800d37c:	2200      	movs	r2, #0
 800d37e:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 800d380:	693b      	ldr	r3, [r7, #16]
 800d382:	2200      	movs	r2, #0
 800d384:	709a      	strb	r2, [r3, #2]
 800d386:	2200      	movs	r2, #0
 800d388:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800d38a:	68fb      	ldr	r3, [r7, #12]
 800d38c:	22ff      	movs	r2, #255	; 0xff
 800d38e:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800d390:	68fb      	ldr	r3, [r7, #12]
 800d392:	2200      	movs	r2, #0
 800d394:	729a      	strb	r2, [r3, #10]
 800d396:	2200      	movs	r2, #0
 800d398:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800d39a:	683b      	ldr	r3, [r7, #0]
 800d39c:	9302      	str	r3, [sp, #8]
 800d39e:	2301      	movs	r3, #1
 800d3a0:	9301      	str	r3, [sp, #4]
 800d3a2:	2300      	movs	r3, #0
 800d3a4:	9300      	str	r3, [sp, #0]
 800d3a6:	23ff      	movs	r3, #255	; 0xff
 800d3a8:	2200      	movs	r2, #0
 800d3aa:	69f9      	ldr	r1, [r7, #28]
 800d3ac:	6878      	ldr	r0, [r7, #4]
 800d3ae:	f000 fa6b 	bl	800d888 <ip4_output_if>
 800d3b2:	4603      	mov	r3, r0
 800d3b4:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 800d3b6:	e001      	b.n	800d3bc <icmp_input+0x1b8>
      break;
 800d3b8:	bf00      	nop
 800d3ba:	e000      	b.n	800d3be <icmp_input+0x1ba>
      break;
 800d3bc:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800d3be:	6878      	ldr	r0, [r7, #4]
 800d3c0:	f7fd ff5a 	bl	800b278 <pbuf_free>
  return;
 800d3c4:	e013      	b.n	800d3ee <icmp_input+0x1ea>
    goto lenerr;
 800d3c6:	bf00      	nop
 800d3c8:	e002      	b.n	800d3d0 <icmp_input+0x1cc>
    goto lenerr;
 800d3ca:	bf00      	nop
 800d3cc:	e000      	b.n	800d3d0 <icmp_input+0x1cc>
        goto lenerr;
 800d3ce:	bf00      	nop
lenerr:
  pbuf_free(p);
 800d3d0:	6878      	ldr	r0, [r7, #4]
 800d3d2:	f7fd ff51 	bl	800b278 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800d3d6:	e00a      	b.n	800d3ee <icmp_input+0x1ea>
        goto icmperr;
 800d3d8:	bf00      	nop
 800d3da:	e004      	b.n	800d3e6 <icmp_input+0x1e2>
        goto icmperr;
 800d3dc:	bf00      	nop
 800d3de:	e002      	b.n	800d3e6 <icmp_input+0x1e2>
          goto icmperr;
 800d3e0:	bf00      	nop
 800d3e2:	e000      	b.n	800d3e6 <icmp_input+0x1e2>
          goto icmperr;
 800d3e4:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800d3e6:	6878      	ldr	r0, [r7, #4]
 800d3e8:	f7fd ff46 	bl	800b278 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800d3ec:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800d3ee:	3728      	adds	r7, #40	; 0x28
 800d3f0:	46bd      	mov	sp, r7
 800d3f2:	bd80      	pop	{r7, pc}
 800d3f4:	20007b08 	.word	0x20007b08
 800d3f8:	20007b1c 	.word	0x20007b1c
 800d3fc:	08011adc 	.word	0x08011adc
 800d400:	08011b14 	.word	0x08011b14
 800d404:	08011b4c 	.word	0x08011b4c
 800d408:	08011b74 	.word	0x08011b74

0800d40c <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800d40c:	b580      	push	{r7, lr}
 800d40e:	b082      	sub	sp, #8
 800d410:	af00      	add	r7, sp, #0
 800d412:	6078      	str	r0, [r7, #4]
 800d414:	460b      	mov	r3, r1
 800d416:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800d418:	78fb      	ldrb	r3, [r7, #3]
 800d41a:	461a      	mov	r2, r3
 800d41c:	2103      	movs	r1, #3
 800d41e:	6878      	ldr	r0, [r7, #4]
 800d420:	f000 f814 	bl	800d44c <icmp_send_response>
}
 800d424:	bf00      	nop
 800d426:	3708      	adds	r7, #8
 800d428:	46bd      	mov	sp, r7
 800d42a:	bd80      	pop	{r7, pc}

0800d42c <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800d42c:	b580      	push	{r7, lr}
 800d42e:	b082      	sub	sp, #8
 800d430:	af00      	add	r7, sp, #0
 800d432:	6078      	str	r0, [r7, #4]
 800d434:	460b      	mov	r3, r1
 800d436:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800d438:	78fb      	ldrb	r3, [r7, #3]
 800d43a:	461a      	mov	r2, r3
 800d43c:	210b      	movs	r1, #11
 800d43e:	6878      	ldr	r0, [r7, #4]
 800d440:	f000 f804 	bl	800d44c <icmp_send_response>
}
 800d444:	bf00      	nop
 800d446:	3708      	adds	r7, #8
 800d448:	46bd      	mov	sp, r7
 800d44a:	bd80      	pop	{r7, pc}

0800d44c <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800d44c:	b580      	push	{r7, lr}
 800d44e:	b08c      	sub	sp, #48	; 0x30
 800d450:	af04      	add	r7, sp, #16
 800d452:	6078      	str	r0, [r7, #4]
 800d454:	460b      	mov	r3, r1
 800d456:	70fb      	strb	r3, [r7, #3]
 800d458:	4613      	mov	r3, r2
 800d45a:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800d45c:	f44f 7220 	mov.w	r2, #640	; 0x280
 800d460:	2124      	movs	r1, #36	; 0x24
 800d462:	2022      	movs	r0, #34	; 0x22
 800d464:	f7fd fc2a 	bl	800acbc <pbuf_alloc>
 800d468:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800d46a:	69fb      	ldr	r3, [r7, #28]
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	d04c      	beq.n	800d50a <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800d470:	69fb      	ldr	r3, [r7, #28]
 800d472:	895b      	ldrh	r3, [r3, #10]
 800d474:	2b23      	cmp	r3, #35	; 0x23
 800d476:	d806      	bhi.n	800d486 <icmp_send_response+0x3a>
 800d478:	4b26      	ldr	r3, [pc, #152]	; (800d514 <icmp_send_response+0xc8>)
 800d47a:	f240 1269 	movw	r2, #361	; 0x169
 800d47e:	4926      	ldr	r1, [pc, #152]	; (800d518 <icmp_send_response+0xcc>)
 800d480:	4826      	ldr	r0, [pc, #152]	; (800d51c <icmp_send_response+0xd0>)
 800d482:	f001 fd97 	bl	800efb4 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	685b      	ldr	r3, [r3, #4]
 800d48a:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800d48c:	69fb      	ldr	r3, [r7, #28]
 800d48e:	685b      	ldr	r3, [r3, #4]
 800d490:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800d492:	697b      	ldr	r3, [r7, #20]
 800d494:	78fa      	ldrb	r2, [r7, #3]
 800d496:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800d498:	697b      	ldr	r3, [r7, #20]
 800d49a:	78ba      	ldrb	r2, [r7, #2]
 800d49c:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800d49e:	697b      	ldr	r3, [r7, #20]
 800d4a0:	2200      	movs	r2, #0
 800d4a2:	711a      	strb	r2, [r3, #4]
 800d4a4:	2200      	movs	r2, #0
 800d4a6:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800d4a8:	697b      	ldr	r3, [r7, #20]
 800d4aa:	2200      	movs	r2, #0
 800d4ac:	719a      	strb	r2, [r3, #6]
 800d4ae:	2200      	movs	r2, #0
 800d4b0:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800d4b2:	69fb      	ldr	r3, [r7, #28]
 800d4b4:	685b      	ldr	r3, [r3, #4]
 800d4b6:	f103 0008 	add.w	r0, r3, #8
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	685b      	ldr	r3, [r3, #4]
 800d4be:	221c      	movs	r2, #28
 800d4c0:	4619      	mov	r1, r3
 800d4c2:	f001 fd64 	bl	800ef8e <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800d4c6:	69bb      	ldr	r3, [r7, #24]
 800d4c8:	68db      	ldr	r3, [r3, #12]
 800d4ca:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800d4cc:	f107 030c 	add.w	r3, r7, #12
 800d4d0:	4618      	mov	r0, r3
 800d4d2:	f000 f825 	bl	800d520 <ip4_route>
 800d4d6:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800d4d8:	693b      	ldr	r3, [r7, #16]
 800d4da:	2b00      	cmp	r3, #0
 800d4dc:	d011      	beq.n	800d502 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800d4de:	697b      	ldr	r3, [r7, #20]
 800d4e0:	2200      	movs	r2, #0
 800d4e2:	709a      	strb	r2, [r3, #2]
 800d4e4:	2200      	movs	r2, #0
 800d4e6:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800d4e8:	f107 020c 	add.w	r2, r7, #12
 800d4ec:	693b      	ldr	r3, [r7, #16]
 800d4ee:	9302      	str	r3, [sp, #8]
 800d4f0:	2301      	movs	r3, #1
 800d4f2:	9301      	str	r3, [sp, #4]
 800d4f4:	2300      	movs	r3, #0
 800d4f6:	9300      	str	r3, [sp, #0]
 800d4f8:	23ff      	movs	r3, #255	; 0xff
 800d4fa:	2100      	movs	r1, #0
 800d4fc:	69f8      	ldr	r0, [r7, #28]
 800d4fe:	f000 f9c3 	bl	800d888 <ip4_output_if>
  }
  pbuf_free(q);
 800d502:	69f8      	ldr	r0, [r7, #28]
 800d504:	f7fd feb8 	bl	800b278 <pbuf_free>
 800d508:	e000      	b.n	800d50c <icmp_send_response+0xc0>
    return;
 800d50a:	bf00      	nop
}
 800d50c:	3720      	adds	r7, #32
 800d50e:	46bd      	mov	sp, r7
 800d510:	bd80      	pop	{r7, pc}
 800d512:	bf00      	nop
 800d514:	08011adc 	.word	0x08011adc
 800d518:	08011ba8 	.word	0x08011ba8
 800d51c:	08011b4c 	.word	0x08011b4c

0800d520 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800d520:	b480      	push	{r7}
 800d522:	b085      	sub	sp, #20
 800d524:	af00      	add	r7, sp, #0
 800d526:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 800d528:	4b33      	ldr	r3, [pc, #204]	; (800d5f8 <ip4_route+0xd8>)
 800d52a:	681b      	ldr	r3, [r3, #0]
 800d52c:	60fb      	str	r3, [r7, #12]
 800d52e:	e036      	b.n	800d59e <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800d530:	68fb      	ldr	r3, [r7, #12]
 800d532:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d536:	f003 0301 	and.w	r3, r3, #1
 800d53a:	b2db      	uxtb	r3, r3
 800d53c:	2b00      	cmp	r3, #0
 800d53e:	d02b      	beq.n	800d598 <ip4_route+0x78>
 800d540:	68fb      	ldr	r3, [r7, #12]
 800d542:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d546:	089b      	lsrs	r3, r3, #2
 800d548:	f003 0301 	and.w	r3, r3, #1
 800d54c:	b2db      	uxtb	r3, r3
 800d54e:	2b00      	cmp	r3, #0
 800d550:	d022      	beq.n	800d598 <ip4_route+0x78>
 800d552:	68fb      	ldr	r3, [r7, #12]
 800d554:	3304      	adds	r3, #4
 800d556:	681b      	ldr	r3, [r3, #0]
 800d558:	2b00      	cmp	r3, #0
 800d55a:	d01d      	beq.n	800d598 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	681a      	ldr	r2, [r3, #0]
 800d560:	68fb      	ldr	r3, [r7, #12]
 800d562:	3304      	adds	r3, #4
 800d564:	681b      	ldr	r3, [r3, #0]
 800d566:	405a      	eors	r2, r3
 800d568:	68fb      	ldr	r3, [r7, #12]
 800d56a:	3308      	adds	r3, #8
 800d56c:	681b      	ldr	r3, [r3, #0]
 800d56e:	4013      	ands	r3, r2
 800d570:	2b00      	cmp	r3, #0
 800d572:	d101      	bne.n	800d578 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800d574:	68fb      	ldr	r3, [r7, #12]
 800d576:	e038      	b.n	800d5ea <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800d578:	68fb      	ldr	r3, [r7, #12]
 800d57a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d57e:	f003 0302 	and.w	r3, r3, #2
 800d582:	2b00      	cmp	r3, #0
 800d584:	d108      	bne.n	800d598 <ip4_route+0x78>
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	681a      	ldr	r2, [r3, #0]
 800d58a:	68fb      	ldr	r3, [r7, #12]
 800d58c:	330c      	adds	r3, #12
 800d58e:	681b      	ldr	r3, [r3, #0]
 800d590:	429a      	cmp	r2, r3
 800d592:	d101      	bne.n	800d598 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800d594:	68fb      	ldr	r3, [r7, #12]
 800d596:	e028      	b.n	800d5ea <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 800d598:	68fb      	ldr	r3, [r7, #12]
 800d59a:	681b      	ldr	r3, [r3, #0]
 800d59c:	60fb      	str	r3, [r7, #12]
 800d59e:	68fb      	ldr	r3, [r7, #12]
 800d5a0:	2b00      	cmp	r3, #0
 800d5a2:	d1c5      	bne.n	800d530 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800d5a4:	4b15      	ldr	r3, [pc, #84]	; (800d5fc <ip4_route+0xdc>)
 800d5a6:	681b      	ldr	r3, [r3, #0]
 800d5a8:	2b00      	cmp	r3, #0
 800d5aa:	d01a      	beq.n	800d5e2 <ip4_route+0xc2>
 800d5ac:	4b13      	ldr	r3, [pc, #76]	; (800d5fc <ip4_route+0xdc>)
 800d5ae:	681b      	ldr	r3, [r3, #0]
 800d5b0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d5b4:	f003 0301 	and.w	r3, r3, #1
 800d5b8:	2b00      	cmp	r3, #0
 800d5ba:	d012      	beq.n	800d5e2 <ip4_route+0xc2>
 800d5bc:	4b0f      	ldr	r3, [pc, #60]	; (800d5fc <ip4_route+0xdc>)
 800d5be:	681b      	ldr	r3, [r3, #0]
 800d5c0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d5c4:	f003 0304 	and.w	r3, r3, #4
 800d5c8:	2b00      	cmp	r3, #0
 800d5ca:	d00a      	beq.n	800d5e2 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800d5cc:	4b0b      	ldr	r3, [pc, #44]	; (800d5fc <ip4_route+0xdc>)
 800d5ce:	681b      	ldr	r3, [r3, #0]
 800d5d0:	3304      	adds	r3, #4
 800d5d2:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800d5d4:	2b00      	cmp	r3, #0
 800d5d6:	d004      	beq.n	800d5e2 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	681b      	ldr	r3, [r3, #0]
 800d5dc:	b2db      	uxtb	r3, r3
 800d5de:	2b7f      	cmp	r3, #127	; 0x7f
 800d5e0:	d101      	bne.n	800d5e6 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800d5e2:	2300      	movs	r3, #0
 800d5e4:	e001      	b.n	800d5ea <ip4_route+0xca>
  }

  return netif_default;
 800d5e6:	4b05      	ldr	r3, [pc, #20]	; (800d5fc <ip4_route+0xdc>)
 800d5e8:	681b      	ldr	r3, [r3, #0]
}
 800d5ea:	4618      	mov	r0, r3
 800d5ec:	3714      	adds	r7, #20
 800d5ee:	46bd      	mov	sp, r7
 800d5f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5f4:	4770      	bx	lr
 800d5f6:	bf00      	nop
 800d5f8:	2000cea4 	.word	0x2000cea4
 800d5fc:	2000cea8 	.word	0x2000cea8

0800d600 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 800d600:	b580      	push	{r7, lr}
 800d602:	b082      	sub	sp, #8
 800d604:	af00      	add	r7, sp, #0
 800d606:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d60e:	f003 0301 	and.w	r3, r3, #1
 800d612:	b2db      	uxtb	r3, r3
 800d614:	2b00      	cmp	r3, #0
 800d616:	d016      	beq.n	800d646 <ip4_input_accept+0x46>
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	3304      	adds	r3, #4
 800d61c:	681b      	ldr	r3, [r3, #0]
 800d61e:	2b00      	cmp	r3, #0
 800d620:	d011      	beq.n	800d646 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800d622:	4b0b      	ldr	r3, [pc, #44]	; (800d650 <ip4_input_accept+0x50>)
 800d624:	695a      	ldr	r2, [r3, #20]
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	3304      	adds	r3, #4
 800d62a:	681b      	ldr	r3, [r3, #0]
 800d62c:	429a      	cmp	r2, r3
 800d62e:	d008      	beq.n	800d642 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800d630:	4b07      	ldr	r3, [pc, #28]	; (800d650 <ip4_input_accept+0x50>)
 800d632:	695b      	ldr	r3, [r3, #20]
 800d634:	6879      	ldr	r1, [r7, #4]
 800d636:	4618      	mov	r0, r3
 800d638:	f000 f9fe 	bl	800da38 <ip4_addr_isbroadcast_u32>
 800d63c:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800d63e:	2b00      	cmp	r3, #0
 800d640:	d001      	beq.n	800d646 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 800d642:	2301      	movs	r3, #1
 800d644:	e000      	b.n	800d648 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 800d646:	2300      	movs	r3, #0
}
 800d648:	4618      	mov	r0, r3
 800d64a:	3708      	adds	r7, #8
 800d64c:	46bd      	mov	sp, r7
 800d64e:	bd80      	pop	{r7, pc}
 800d650:	20007b08 	.word	0x20007b08

0800d654 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800d654:	b580      	push	{r7, lr}
 800d656:	b086      	sub	sp, #24
 800d658:	af00      	add	r7, sp, #0
 800d65a:	6078      	str	r0, [r7, #4]
 800d65c:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	685b      	ldr	r3, [r3, #4]
 800d662:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 800d664:	697b      	ldr	r3, [r7, #20]
 800d666:	781b      	ldrb	r3, [r3, #0]
 800d668:	091b      	lsrs	r3, r3, #4
 800d66a:	b2db      	uxtb	r3, r3
 800d66c:	2b04      	cmp	r3, #4
 800d66e:	d004      	beq.n	800d67a <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800d670:	6878      	ldr	r0, [r7, #4]
 800d672:	f7fd fe01 	bl	800b278 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800d676:	2300      	movs	r3, #0
 800d678:	e0fd      	b.n	800d876 <ip4_input+0x222>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800d67a:	697b      	ldr	r3, [r7, #20]
 800d67c:	781b      	ldrb	r3, [r3, #0]
 800d67e:	f003 030f 	and.w	r3, r3, #15
 800d682:	b2db      	uxtb	r3, r3
 800d684:	009b      	lsls	r3, r3, #2
 800d686:	b2db      	uxtb	r3, r3
 800d688:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800d68a:	697b      	ldr	r3, [r7, #20]
 800d68c:	885b      	ldrh	r3, [r3, #2]
 800d68e:	b29b      	uxth	r3, r3
 800d690:	4618      	mov	r0, r3
 800d692:	f7fc faab 	bl	8009bec <lwip_htons>
 800d696:	4603      	mov	r3, r0
 800d698:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	891b      	ldrh	r3, [r3, #8]
 800d69e:	89ba      	ldrh	r2, [r7, #12]
 800d6a0:	429a      	cmp	r2, r3
 800d6a2:	d204      	bcs.n	800d6ae <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 800d6a4:	89bb      	ldrh	r3, [r7, #12]
 800d6a6:	4619      	mov	r1, r3
 800d6a8:	6878      	ldr	r0, [r7, #4]
 800d6aa:	f7fd fc5f 	bl	800af6c <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	895b      	ldrh	r3, [r3, #10]
 800d6b2:	89fa      	ldrh	r2, [r7, #14]
 800d6b4:	429a      	cmp	r2, r3
 800d6b6:	d807      	bhi.n	800d6c8 <ip4_input+0x74>
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	891b      	ldrh	r3, [r3, #8]
 800d6bc:	89ba      	ldrh	r2, [r7, #12]
 800d6be:	429a      	cmp	r2, r3
 800d6c0:	d802      	bhi.n	800d6c8 <ip4_input+0x74>
 800d6c2:	89fb      	ldrh	r3, [r7, #14]
 800d6c4:	2b13      	cmp	r3, #19
 800d6c6:	d804      	bhi.n	800d6d2 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800d6c8:	6878      	ldr	r0, [r7, #4]
 800d6ca:	f7fd fdd5 	bl	800b278 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800d6ce:	2300      	movs	r3, #0
 800d6d0:	e0d1      	b.n	800d876 <ip4_input+0x222>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800d6d2:	697b      	ldr	r3, [r7, #20]
 800d6d4:	691b      	ldr	r3, [r3, #16]
 800d6d6:	4a6a      	ldr	r2, [pc, #424]	; (800d880 <ip4_input+0x22c>)
 800d6d8:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800d6da:	697b      	ldr	r3, [r7, #20]
 800d6dc:	68db      	ldr	r3, [r3, #12]
 800d6de:	4a68      	ldr	r2, [pc, #416]	; (800d880 <ip4_input+0x22c>)
 800d6e0:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800d6e2:	4b67      	ldr	r3, [pc, #412]	; (800d880 <ip4_input+0x22c>)
 800d6e4:	695b      	ldr	r3, [r3, #20]
 800d6e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d6ea:	2be0      	cmp	r3, #224	; 0xe0
 800d6ec:	d112      	bne.n	800d714 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800d6ee:	683b      	ldr	r3, [r7, #0]
 800d6f0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d6f4:	f003 0301 	and.w	r3, r3, #1
 800d6f8:	b2db      	uxtb	r3, r3
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	d007      	beq.n	800d70e <ip4_input+0xba>
 800d6fe:	683b      	ldr	r3, [r7, #0]
 800d700:	3304      	adds	r3, #4
 800d702:	681b      	ldr	r3, [r3, #0]
 800d704:	2b00      	cmp	r3, #0
 800d706:	d002      	beq.n	800d70e <ip4_input+0xba>
      netif = inp;
 800d708:	683b      	ldr	r3, [r7, #0]
 800d70a:	613b      	str	r3, [r7, #16]
 800d70c:	e02a      	b.n	800d764 <ip4_input+0x110>
    } else {
      netif = NULL;
 800d70e:	2300      	movs	r3, #0
 800d710:	613b      	str	r3, [r7, #16]
 800d712:	e027      	b.n	800d764 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 800d714:	6838      	ldr	r0, [r7, #0]
 800d716:	f7ff ff73 	bl	800d600 <ip4_input_accept>
 800d71a:	4603      	mov	r3, r0
 800d71c:	2b00      	cmp	r3, #0
 800d71e:	d002      	beq.n	800d726 <ip4_input+0xd2>
      netif = inp;
 800d720:	683b      	ldr	r3, [r7, #0]
 800d722:	613b      	str	r3, [r7, #16]
 800d724:	e01e      	b.n	800d764 <ip4_input+0x110>
    } else {
      netif = NULL;
 800d726:	2300      	movs	r3, #0
 800d728:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800d72a:	4b55      	ldr	r3, [pc, #340]	; (800d880 <ip4_input+0x22c>)
 800d72c:	695b      	ldr	r3, [r3, #20]
 800d72e:	b2db      	uxtb	r3, r3
 800d730:	2b7f      	cmp	r3, #127	; 0x7f
 800d732:	d017      	beq.n	800d764 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 800d734:	4b53      	ldr	r3, [pc, #332]	; (800d884 <ip4_input+0x230>)
 800d736:	681b      	ldr	r3, [r3, #0]
 800d738:	613b      	str	r3, [r7, #16]
 800d73a:	e00e      	b.n	800d75a <ip4_input+0x106>
          if (netif == inp) {
 800d73c:	693a      	ldr	r2, [r7, #16]
 800d73e:	683b      	ldr	r3, [r7, #0]
 800d740:	429a      	cmp	r2, r3
 800d742:	d006      	beq.n	800d752 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 800d744:	6938      	ldr	r0, [r7, #16]
 800d746:	f7ff ff5b 	bl	800d600 <ip4_input_accept>
 800d74a:	4603      	mov	r3, r0
 800d74c:	2b00      	cmp	r3, #0
 800d74e:	d108      	bne.n	800d762 <ip4_input+0x10e>
 800d750:	e000      	b.n	800d754 <ip4_input+0x100>
            continue;
 800d752:	bf00      	nop
        NETIF_FOREACH(netif) {
 800d754:	693b      	ldr	r3, [r7, #16]
 800d756:	681b      	ldr	r3, [r3, #0]
 800d758:	613b      	str	r3, [r7, #16]
 800d75a:	693b      	ldr	r3, [r7, #16]
 800d75c:	2b00      	cmp	r3, #0
 800d75e:	d1ed      	bne.n	800d73c <ip4_input+0xe8>
 800d760:	e000      	b.n	800d764 <ip4_input+0x110>
            break;
 800d762:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800d764:	4b46      	ldr	r3, [pc, #280]	; (800d880 <ip4_input+0x22c>)
 800d766:	691b      	ldr	r3, [r3, #16]
 800d768:	6839      	ldr	r1, [r7, #0]
 800d76a:	4618      	mov	r0, r3
 800d76c:	f000 f964 	bl	800da38 <ip4_addr_isbroadcast_u32>
 800d770:	4603      	mov	r3, r0
 800d772:	2b00      	cmp	r3, #0
 800d774:	d105      	bne.n	800d782 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800d776:	4b42      	ldr	r3, [pc, #264]	; (800d880 <ip4_input+0x22c>)
 800d778:	691b      	ldr	r3, [r3, #16]
 800d77a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800d77e:	2be0      	cmp	r3, #224	; 0xe0
 800d780:	d104      	bne.n	800d78c <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800d782:	6878      	ldr	r0, [r7, #4]
 800d784:	f7fd fd78 	bl	800b278 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800d788:	2300      	movs	r3, #0
 800d78a:	e074      	b.n	800d876 <ip4_input+0x222>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800d78c:	693b      	ldr	r3, [r7, #16]
 800d78e:	2b00      	cmp	r3, #0
 800d790:	d104      	bne.n	800d79c <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800d792:	6878      	ldr	r0, [r7, #4]
 800d794:	f7fd fd70 	bl	800b278 <pbuf_free>
    return ERR_OK;
 800d798:	2300      	movs	r3, #0
 800d79a:	e06c      	b.n	800d876 <ip4_input+0x222>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800d79c:	697b      	ldr	r3, [r7, #20]
 800d79e:	88db      	ldrh	r3, [r3, #6]
 800d7a0:	b29b      	uxth	r3, r3
 800d7a2:	461a      	mov	r2, r3
 800d7a4:	f64f 733f 	movw	r3, #65343	; 0xff3f
 800d7a8:	4013      	ands	r3, r2
 800d7aa:	2b00      	cmp	r3, #0
 800d7ac:	d00b      	beq.n	800d7c6 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800d7ae:	6878      	ldr	r0, [r7, #4]
 800d7b0:	f000 fdce 	bl	800e350 <ip4_reass>
 800d7b4:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	2b00      	cmp	r3, #0
 800d7ba:	d101      	bne.n	800d7c0 <ip4_input+0x16c>
      return ERR_OK;
 800d7bc:	2300      	movs	r3, #0
 800d7be:	e05a      	b.n	800d876 <ip4_input+0x222>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	685b      	ldr	r3, [r3, #4]
 800d7c4:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800d7c6:	4a2e      	ldr	r2, [pc, #184]	; (800d880 <ip4_input+0x22c>)
 800d7c8:	693b      	ldr	r3, [r7, #16]
 800d7ca:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800d7cc:	4a2c      	ldr	r2, [pc, #176]	; (800d880 <ip4_input+0x22c>)
 800d7ce:	683b      	ldr	r3, [r7, #0]
 800d7d0:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800d7d2:	4a2b      	ldr	r2, [pc, #172]	; (800d880 <ip4_input+0x22c>)
 800d7d4:	697b      	ldr	r3, [r7, #20]
 800d7d6:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800d7d8:	697b      	ldr	r3, [r7, #20]
 800d7da:	781b      	ldrb	r3, [r3, #0]
 800d7dc:	f003 030f 	and.w	r3, r3, #15
 800d7e0:	b2db      	uxtb	r3, r3
 800d7e2:	009b      	lsls	r3, r3, #2
 800d7e4:	b2db      	uxtb	r3, r3
 800d7e6:	b29a      	uxth	r2, r3
 800d7e8:	4b25      	ldr	r3, [pc, #148]	; (800d880 <ip4_input+0x22c>)
 800d7ea:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800d7ec:	89fb      	ldrh	r3, [r7, #14]
 800d7ee:	4619      	mov	r1, r3
 800d7f0:	6878      	ldr	r0, [r7, #4]
 800d7f2:	f7fd fcbb 	bl	800b16c <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 800d7f6:	697b      	ldr	r3, [r7, #20]
 800d7f8:	7a5b      	ldrb	r3, [r3, #9]
 800d7fa:	2b01      	cmp	r3, #1
 800d7fc:	d006      	beq.n	800d80c <ip4_input+0x1b8>
 800d7fe:	2b11      	cmp	r3, #17
 800d800:	d109      	bne.n	800d816 <ip4_input+0x1c2>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 800d802:	6839      	ldr	r1, [r7, #0]
 800d804:	6878      	ldr	r0, [r7, #4]
 800d806:	f7fe f975 	bl	800baf4 <udp_input>
        break;
 800d80a:	e021      	b.n	800d850 <ip4_input+0x1fc>
        break;
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 800d80c:	6839      	ldr	r1, [r7, #0]
 800d80e:	6878      	ldr	r0, [r7, #4]
 800d810:	f7ff fcf8 	bl	800d204 <icmp_input>
        break;
 800d814:	e01c      	b.n	800d850 <ip4_input+0x1fc>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800d816:	4b1a      	ldr	r3, [pc, #104]	; (800d880 <ip4_input+0x22c>)
 800d818:	695b      	ldr	r3, [r3, #20]
 800d81a:	6939      	ldr	r1, [r7, #16]
 800d81c:	4618      	mov	r0, r3
 800d81e:	f000 f90b 	bl	800da38 <ip4_addr_isbroadcast_u32>
 800d822:	4603      	mov	r3, r0
 800d824:	2b00      	cmp	r3, #0
 800d826:	d10f      	bne.n	800d848 <ip4_input+0x1f4>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800d828:	4b15      	ldr	r3, [pc, #84]	; (800d880 <ip4_input+0x22c>)
 800d82a:	695b      	ldr	r3, [r3, #20]
 800d82c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800d830:	2be0      	cmp	r3, #224	; 0xe0
 800d832:	d009      	beq.n	800d848 <ip4_input+0x1f4>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 800d834:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800d838:	4619      	mov	r1, r3
 800d83a:	6878      	ldr	r0, [r7, #4]
 800d83c:	f7fd fd09 	bl	800b252 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800d840:	2102      	movs	r1, #2
 800d842:	6878      	ldr	r0, [r7, #4]
 800d844:	f7ff fde2 	bl	800d40c <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 800d848:	6878      	ldr	r0, [r7, #4]
 800d84a:	f7fd fd15 	bl	800b278 <pbuf_free>
        break;
 800d84e:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800d850:	4b0b      	ldr	r3, [pc, #44]	; (800d880 <ip4_input+0x22c>)
 800d852:	2200      	movs	r2, #0
 800d854:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800d856:	4b0a      	ldr	r3, [pc, #40]	; (800d880 <ip4_input+0x22c>)
 800d858:	2200      	movs	r2, #0
 800d85a:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800d85c:	4b08      	ldr	r3, [pc, #32]	; (800d880 <ip4_input+0x22c>)
 800d85e:	2200      	movs	r2, #0
 800d860:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800d862:	4b07      	ldr	r3, [pc, #28]	; (800d880 <ip4_input+0x22c>)
 800d864:	2200      	movs	r2, #0
 800d866:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800d868:	4b05      	ldr	r3, [pc, #20]	; (800d880 <ip4_input+0x22c>)
 800d86a:	2200      	movs	r2, #0
 800d86c:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800d86e:	4b04      	ldr	r3, [pc, #16]	; (800d880 <ip4_input+0x22c>)
 800d870:	2200      	movs	r2, #0
 800d872:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800d874:	2300      	movs	r3, #0
}
 800d876:	4618      	mov	r0, r3
 800d878:	3718      	adds	r7, #24
 800d87a:	46bd      	mov	sp, r7
 800d87c:	bd80      	pop	{r7, pc}
 800d87e:	bf00      	nop
 800d880:	20007b08 	.word	0x20007b08
 800d884:	2000cea4 	.word	0x2000cea4

0800d888 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 800d888:	b580      	push	{r7, lr}
 800d88a:	b08a      	sub	sp, #40	; 0x28
 800d88c:	af04      	add	r7, sp, #16
 800d88e:	60f8      	str	r0, [r7, #12]
 800d890:	60b9      	str	r1, [r7, #8]
 800d892:	607a      	str	r2, [r7, #4]
 800d894:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800d896:	68bb      	ldr	r3, [r7, #8]
 800d898:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	2b00      	cmp	r3, #0
 800d89e:	d009      	beq.n	800d8b4 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800d8a0:	68bb      	ldr	r3, [r7, #8]
 800d8a2:	2b00      	cmp	r3, #0
 800d8a4:	d003      	beq.n	800d8ae <ip4_output_if+0x26>
 800d8a6:	68bb      	ldr	r3, [r7, #8]
 800d8a8:	681b      	ldr	r3, [r3, #0]
 800d8aa:	2b00      	cmp	r3, #0
 800d8ac:	d102      	bne.n	800d8b4 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800d8ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8b0:	3304      	adds	r3, #4
 800d8b2:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800d8b4:	78fa      	ldrb	r2, [r7, #3]
 800d8b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8b8:	9302      	str	r3, [sp, #8]
 800d8ba:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d8be:	9301      	str	r3, [sp, #4]
 800d8c0:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d8c4:	9300      	str	r3, [sp, #0]
 800d8c6:	4613      	mov	r3, r2
 800d8c8:	687a      	ldr	r2, [r7, #4]
 800d8ca:	6979      	ldr	r1, [r7, #20]
 800d8cc:	68f8      	ldr	r0, [r7, #12]
 800d8ce:	f000 f805 	bl	800d8dc <ip4_output_if_src>
 800d8d2:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800d8d4:	4618      	mov	r0, r3
 800d8d6:	3718      	adds	r7, #24
 800d8d8:	46bd      	mov	sp, r7
 800d8da:	bd80      	pop	{r7, pc}

0800d8dc <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 800d8dc:	b580      	push	{r7, lr}
 800d8de:	b088      	sub	sp, #32
 800d8e0:	af00      	add	r7, sp, #0
 800d8e2:	60f8      	str	r0, [r7, #12]
 800d8e4:	60b9      	str	r1, [r7, #8]
 800d8e6:	607a      	str	r2, [r7, #4]
 800d8e8:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800d8ea:	68fb      	ldr	r3, [r7, #12]
 800d8ec:	7b9b      	ldrb	r3, [r3, #14]
 800d8ee:	2b01      	cmp	r3, #1
 800d8f0:	d006      	beq.n	800d900 <ip4_output_if_src+0x24>
 800d8f2:	4b4b      	ldr	r3, [pc, #300]	; (800da20 <ip4_output_if_src+0x144>)
 800d8f4:	f44f 7255 	mov.w	r2, #852	; 0x354
 800d8f8:	494a      	ldr	r1, [pc, #296]	; (800da24 <ip4_output_if_src+0x148>)
 800d8fa:	484b      	ldr	r0, [pc, #300]	; (800da28 <ip4_output_if_src+0x14c>)
 800d8fc:	f001 fb5a 	bl	800efb4 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	2b00      	cmp	r3, #0
 800d904:	d060      	beq.n	800d9c8 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800d906:	2314      	movs	r3, #20
 800d908:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800d90a:	2114      	movs	r1, #20
 800d90c:	68f8      	ldr	r0, [r7, #12]
 800d90e:	f7fd fc1d 	bl	800b14c <pbuf_add_header>
 800d912:	4603      	mov	r3, r0
 800d914:	2b00      	cmp	r3, #0
 800d916:	d002      	beq.n	800d91e <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800d918:	f06f 0301 	mvn.w	r3, #1
 800d91c:	e07c      	b.n	800da18 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800d91e:	68fb      	ldr	r3, [r7, #12]
 800d920:	685b      	ldr	r3, [r3, #4]
 800d922:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800d924:	68fb      	ldr	r3, [r7, #12]
 800d926:	895b      	ldrh	r3, [r3, #10]
 800d928:	2b13      	cmp	r3, #19
 800d92a:	d806      	bhi.n	800d93a <ip4_output_if_src+0x5e>
 800d92c:	4b3c      	ldr	r3, [pc, #240]	; (800da20 <ip4_output_if_src+0x144>)
 800d92e:	f240 3289 	movw	r2, #905	; 0x389
 800d932:	493e      	ldr	r1, [pc, #248]	; (800da2c <ip4_output_if_src+0x150>)
 800d934:	483c      	ldr	r0, [pc, #240]	; (800da28 <ip4_output_if_src+0x14c>)
 800d936:	f001 fb3d 	bl	800efb4 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800d93a:	69fb      	ldr	r3, [r7, #28]
 800d93c:	78fa      	ldrb	r2, [r7, #3]
 800d93e:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800d940:	69fb      	ldr	r3, [r7, #28]
 800d942:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800d946:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	681a      	ldr	r2, [r3, #0]
 800d94c:	69fb      	ldr	r3, [r7, #28]
 800d94e:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800d950:	8b7b      	ldrh	r3, [r7, #26]
 800d952:	089b      	lsrs	r3, r3, #2
 800d954:	b29b      	uxth	r3, r3
 800d956:	b2db      	uxtb	r3, r3
 800d958:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d95c:	b2da      	uxtb	r2, r3
 800d95e:	69fb      	ldr	r3, [r7, #28]
 800d960:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800d962:	69fb      	ldr	r3, [r7, #28]
 800d964:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800d968:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800d96a:	68fb      	ldr	r3, [r7, #12]
 800d96c:	891b      	ldrh	r3, [r3, #8]
 800d96e:	4618      	mov	r0, r3
 800d970:	f7fc f93c 	bl	8009bec <lwip_htons>
 800d974:	4603      	mov	r3, r0
 800d976:	461a      	mov	r2, r3
 800d978:	69fb      	ldr	r3, [r7, #28]
 800d97a:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800d97c:	69fb      	ldr	r3, [r7, #28]
 800d97e:	2200      	movs	r2, #0
 800d980:	719a      	strb	r2, [r3, #6]
 800d982:	2200      	movs	r2, #0
 800d984:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800d986:	4b2a      	ldr	r3, [pc, #168]	; (800da30 <ip4_output_if_src+0x154>)
 800d988:	881b      	ldrh	r3, [r3, #0]
 800d98a:	4618      	mov	r0, r3
 800d98c:	f7fc f92e 	bl	8009bec <lwip_htons>
 800d990:	4603      	mov	r3, r0
 800d992:	461a      	mov	r2, r3
 800d994:	69fb      	ldr	r3, [r7, #28]
 800d996:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800d998:	4b25      	ldr	r3, [pc, #148]	; (800da30 <ip4_output_if_src+0x154>)
 800d99a:	881b      	ldrh	r3, [r3, #0]
 800d99c:	3301      	adds	r3, #1
 800d99e:	b29a      	uxth	r2, r3
 800d9a0:	4b23      	ldr	r3, [pc, #140]	; (800da30 <ip4_output_if_src+0x154>)
 800d9a2:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800d9a4:	68bb      	ldr	r3, [r7, #8]
 800d9a6:	2b00      	cmp	r3, #0
 800d9a8:	d104      	bne.n	800d9b4 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800d9aa:	4b22      	ldr	r3, [pc, #136]	; (800da34 <ip4_output_if_src+0x158>)
 800d9ac:	681a      	ldr	r2, [r3, #0]
 800d9ae:	69fb      	ldr	r3, [r7, #28]
 800d9b0:	60da      	str	r2, [r3, #12]
 800d9b2:	e003      	b.n	800d9bc <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800d9b4:	68bb      	ldr	r3, [r7, #8]
 800d9b6:	681a      	ldr	r2, [r3, #0]
 800d9b8:	69fb      	ldr	r3, [r7, #28]
 800d9ba:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800d9bc:	69fb      	ldr	r3, [r7, #28]
 800d9be:	2200      	movs	r2, #0
 800d9c0:	729a      	strb	r2, [r3, #10]
 800d9c2:	2200      	movs	r2, #0
 800d9c4:	72da      	strb	r2, [r3, #11]
 800d9c6:	e00f      	b.n	800d9e8 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 800d9c8:	68fb      	ldr	r3, [r7, #12]
 800d9ca:	895b      	ldrh	r3, [r3, #10]
 800d9cc:	2b13      	cmp	r3, #19
 800d9ce:	d802      	bhi.n	800d9d6 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800d9d0:	f06f 0301 	mvn.w	r3, #1
 800d9d4:	e020      	b.n	800da18 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800d9d6:	68fb      	ldr	r3, [r7, #12]
 800d9d8:	685b      	ldr	r3, [r3, #4]
 800d9da:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800d9dc:	69fb      	ldr	r3, [r7, #28]
 800d9de:	691b      	ldr	r3, [r3, #16]
 800d9e0:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800d9e2:	f107 0314 	add.w	r3, r7, #20
 800d9e6:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800d9e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9ea:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800d9ec:	2b00      	cmp	r3, #0
 800d9ee:	d00c      	beq.n	800da0a <ip4_output_if_src+0x12e>
 800d9f0:	68fb      	ldr	r3, [r7, #12]
 800d9f2:	891a      	ldrh	r2, [r3, #8]
 800d9f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9f6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800d9f8:	429a      	cmp	r2, r3
 800d9fa:	d906      	bls.n	800da0a <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 800d9fc:	687a      	ldr	r2, [r7, #4]
 800d9fe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800da00:	68f8      	ldr	r0, [r7, #12]
 800da02:	f000 fe91 	bl	800e728 <ip4_frag>
 800da06:	4603      	mov	r3, r0
 800da08:	e006      	b.n	800da18 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800da0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da0c:	695b      	ldr	r3, [r3, #20]
 800da0e:	687a      	ldr	r2, [r7, #4]
 800da10:	68f9      	ldr	r1, [r7, #12]
 800da12:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800da14:	4798      	blx	r3
 800da16:	4603      	mov	r3, r0
}
 800da18:	4618      	mov	r0, r3
 800da1a:	3720      	adds	r7, #32
 800da1c:	46bd      	mov	sp, r7
 800da1e:	bd80      	pop	{r7, pc}
 800da20:	08011bd4 	.word	0x08011bd4
 800da24:	08011c08 	.word	0x08011c08
 800da28:	08011c14 	.word	0x08011c14
 800da2c:	08011c3c 	.word	0x08011c3c
 800da30:	2000489e 	.word	0x2000489e
 800da34:	080120a4 	.word	0x080120a4

0800da38 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800da38:	b480      	push	{r7}
 800da3a:	b085      	sub	sp, #20
 800da3c:	af00      	add	r7, sp, #0
 800da3e:	6078      	str	r0, [r7, #4]
 800da40:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da4c:	d002      	beq.n	800da54 <ip4_addr_isbroadcast_u32+0x1c>
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	2b00      	cmp	r3, #0
 800da52:	d101      	bne.n	800da58 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800da54:	2301      	movs	r3, #1
 800da56:	e02a      	b.n	800daae <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800da58:	683b      	ldr	r3, [r7, #0]
 800da5a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800da5e:	f003 0302 	and.w	r3, r3, #2
 800da62:	2b00      	cmp	r3, #0
 800da64:	d101      	bne.n	800da6a <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800da66:	2300      	movs	r3, #0
 800da68:	e021      	b.n	800daae <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800da6a:	683b      	ldr	r3, [r7, #0]
 800da6c:	3304      	adds	r3, #4
 800da6e:	681b      	ldr	r3, [r3, #0]
 800da70:	687a      	ldr	r2, [r7, #4]
 800da72:	429a      	cmp	r2, r3
 800da74:	d101      	bne.n	800da7a <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800da76:	2300      	movs	r3, #0
 800da78:	e019      	b.n	800daae <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800da7a:	68fa      	ldr	r2, [r7, #12]
 800da7c:	683b      	ldr	r3, [r7, #0]
 800da7e:	3304      	adds	r3, #4
 800da80:	681b      	ldr	r3, [r3, #0]
 800da82:	405a      	eors	r2, r3
 800da84:	683b      	ldr	r3, [r7, #0]
 800da86:	3308      	adds	r3, #8
 800da88:	681b      	ldr	r3, [r3, #0]
 800da8a:	4013      	ands	r3, r2
 800da8c:	2b00      	cmp	r3, #0
 800da8e:	d10d      	bne.n	800daac <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800da90:	683b      	ldr	r3, [r7, #0]
 800da92:	3308      	adds	r3, #8
 800da94:	681b      	ldr	r3, [r3, #0]
 800da96:	43da      	mvns	r2, r3
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800da9c:	683b      	ldr	r3, [r7, #0]
 800da9e:	3308      	adds	r3, #8
 800daa0:	681b      	ldr	r3, [r3, #0]
 800daa2:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800daa4:	429a      	cmp	r2, r3
 800daa6:	d101      	bne.n	800daac <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800daa8:	2301      	movs	r3, #1
 800daaa:	e000      	b.n	800daae <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800daac:	2300      	movs	r3, #0
  }
}
 800daae:	4618      	mov	r0, r3
 800dab0:	3714      	adds	r7, #20
 800dab2:	46bd      	mov	sp, r7
 800dab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dab8:	4770      	bx	lr

0800daba <ipaddr_addr>:
 * @param cp IP address in ascii representation (e.g. "127.0.0.1")
 * @return ip address in network order
 */
u32_t
ipaddr_addr(const char *cp)
{
 800daba:	b580      	push	{r7, lr}
 800dabc:	b084      	sub	sp, #16
 800dabe:	af00      	add	r7, sp, #0
 800dac0:	6078      	str	r0, [r7, #4]
  ip4_addr_t val;

  if (ip4addr_aton(cp, &val)) {
 800dac2:	f107 030c 	add.w	r3, r7, #12
 800dac6:	4619      	mov	r1, r3
 800dac8:	6878      	ldr	r0, [r7, #4]
 800daca:	f000 f80b 	bl	800dae4 <ip4addr_aton>
 800dace:	4603      	mov	r3, r0
 800dad0:	2b00      	cmp	r3, #0
 800dad2:	d001      	beq.n	800dad8 <ipaddr_addr+0x1e>
    return ip4_addr_get_u32(&val);
 800dad4:	68fb      	ldr	r3, [r7, #12]
 800dad6:	e001      	b.n	800dadc <ipaddr_addr+0x22>
  }
  return (IPADDR_NONE);
 800dad8:	f04f 33ff 	mov.w	r3, #4294967295
}
 800dadc:	4618      	mov	r0, r3
 800dade:	3710      	adds	r7, #16
 800dae0:	46bd      	mov	sp, r7
 800dae2:	bd80      	pop	{r7, pc}

0800dae4 <ip4addr_aton>:
 * @param addr pointer to which to save the ip address in network order
 * @return 1 if cp could be converted to addr, 0 on failure
 */
int
ip4addr_aton(const char *cp, ip4_addr_t *addr)
{
 800dae4:	b5b0      	push	{r4, r5, r7, lr}
 800dae6:	b08a      	sub	sp, #40	; 0x28
 800dae8:	af00      	add	r7, sp, #0
 800daea:	6078      	str	r0, [r7, #4]
 800daec:	6039      	str	r1, [r7, #0]
  u32_t val;
  u8_t base;
  char c;
  u32_t parts[4];
  u32_t *pp = parts;
 800daee:	f107 030c 	add.w	r3, r7, #12
 800daf2:	61fb      	str	r3, [r7, #28]

  c = *cp;
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	781b      	ldrb	r3, [r3, #0]
 800daf8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    /*
     * Collect number up to ``.''.
     * Values are specified as for C:
     * 0x=hex, 0=octal, 1-9=decimal.
     */
    if (!lwip_isdigit(c)) {
 800dafc:	f001 fa18 	bl	800ef30 <__locale_ctype_ptr>
 800db00:	4602      	mov	r2, r0
 800db02:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800db06:	3301      	adds	r3, #1
 800db08:	4413      	add	r3, r2
 800db0a:	781b      	ldrb	r3, [r3, #0]
 800db0c:	f003 0304 	and.w	r3, r3, #4
 800db10:	2b00      	cmp	r3, #0
 800db12:	d101      	bne.n	800db18 <ip4addr_aton+0x34>
      return 0;
 800db14:	2300      	movs	r3, #0
 800db16:	e10d      	b.n	800dd34 <ip4addr_aton+0x250>
    }
    val = 0;
 800db18:	2300      	movs	r3, #0
 800db1a:	627b      	str	r3, [r7, #36]	; 0x24
    base = 10;
 800db1c:	230a      	movs	r3, #10
 800db1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if (c == '0') {
 800db22:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800db26:	2b30      	cmp	r3, #48	; 0x30
 800db28:	d11c      	bne.n	800db64 <ip4addr_aton+0x80>
      c = *++cp;
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	3301      	adds	r3, #1
 800db2e:	607b      	str	r3, [r7, #4]
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	781b      	ldrb	r3, [r3, #0]
 800db34:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
      if (c == 'x' || c == 'X') {
 800db38:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800db3c:	2b78      	cmp	r3, #120	; 0x78
 800db3e:	d003      	beq.n	800db48 <ip4addr_aton+0x64>
 800db40:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800db44:	2b58      	cmp	r3, #88	; 0x58
 800db46:	d10a      	bne.n	800db5e <ip4addr_aton+0x7a>
        base = 16;
 800db48:	2310      	movs	r3, #16
 800db4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        c = *++cp;
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	3301      	adds	r3, #1
 800db52:	607b      	str	r3, [r7, #4]
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	781b      	ldrb	r3, [r3, #0]
 800db58:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800db5c:	e002      	b.n	800db64 <ip4addr_aton+0x80>
      } else {
        base = 8;
 800db5e:	2308      	movs	r3, #8
 800db60:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
      }
    }
    for (;;) {
      if (lwip_isdigit(c)) {
 800db64:	f001 f9e4 	bl	800ef30 <__locale_ctype_ptr>
 800db68:	4602      	mov	r2, r0
 800db6a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800db6e:	3301      	adds	r3, #1
 800db70:	4413      	add	r3, r2
 800db72:	781b      	ldrb	r3, [r3, #0]
 800db74:	f003 0304 	and.w	r3, r3, #4
 800db78:	2b00      	cmp	r3, #0
 800db7a:	d011      	beq.n	800dba0 <ip4addr_aton+0xbc>
        val = (val * base) + (u32_t)(c - '0');
 800db7c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800db80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800db82:	fb02 f203 	mul.w	r2, r2, r3
 800db86:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800db8a:	4413      	add	r3, r2
 800db8c:	3b30      	subs	r3, #48	; 0x30
 800db8e:	627b      	str	r3, [r7, #36]	; 0x24
        c = *++cp;
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	3301      	adds	r3, #1
 800db94:	607b      	str	r3, [r7, #4]
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	781b      	ldrb	r3, [r3, #0]
 800db9a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800db9e:	e7e1      	b.n	800db64 <ip4addr_aton+0x80>
      } else if (base == 16 && lwip_isxdigit(c)) {
 800dba0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800dba4:	2b10      	cmp	r3, #16
 800dba6:	d12b      	bne.n	800dc00 <ip4addr_aton+0x11c>
 800dba8:	f001 f9c2 	bl	800ef30 <__locale_ctype_ptr>
 800dbac:	4602      	mov	r2, r0
 800dbae:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800dbb2:	3301      	adds	r3, #1
 800dbb4:	4413      	add	r3, r2
 800dbb6:	781b      	ldrb	r3, [r3, #0]
 800dbb8:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800dbbc:	2b00      	cmp	r3, #0
 800dbbe:	d01f      	beq.n	800dc00 <ip4addr_aton+0x11c>
        val = (val << 4) | (u32_t)(c + 10 - (lwip_islower(c) ? 'a' : 'A'));
 800dbc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbc2:	011c      	lsls	r4, r3, #4
 800dbc4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800dbc8:	f103 050a 	add.w	r5, r3, #10
 800dbcc:	f001 f9b0 	bl	800ef30 <__locale_ctype_ptr>
 800dbd0:	4602      	mov	r2, r0
 800dbd2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800dbd6:	3301      	adds	r3, #1
 800dbd8:	4413      	add	r3, r2
 800dbda:	781b      	ldrb	r3, [r3, #0]
 800dbdc:	f003 0303 	and.w	r3, r3, #3
 800dbe0:	2b02      	cmp	r3, #2
 800dbe2:	d101      	bne.n	800dbe8 <ip4addr_aton+0x104>
 800dbe4:	2361      	movs	r3, #97	; 0x61
 800dbe6:	e000      	b.n	800dbea <ip4addr_aton+0x106>
 800dbe8:	2341      	movs	r3, #65	; 0x41
 800dbea:	1aeb      	subs	r3, r5, r3
 800dbec:	4323      	orrs	r3, r4
 800dbee:	627b      	str	r3, [r7, #36]	; 0x24
        c = *++cp;
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	3301      	adds	r3, #1
 800dbf4:	607b      	str	r3, [r7, #4]
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	781b      	ldrb	r3, [r3, #0]
 800dbfa:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
      if (lwip_isdigit(c)) {
 800dbfe:	e7b1      	b.n	800db64 <ip4addr_aton+0x80>
      } else {
        break;
      }
    }
    if (c == '.') {
 800dc00:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800dc04:	2b2e      	cmp	r3, #46	; 0x2e
 800dc06:	d114      	bne.n	800dc32 <ip4addr_aton+0x14e>
       * Internet format:
       *  a.b.c.d
       *  a.b.c   (with c treated as 16 bits)
       *  a.b (with b treated as 24 bits)
       */
      if (pp >= parts + 3) {
 800dc08:	f107 030c 	add.w	r3, r7, #12
 800dc0c:	330c      	adds	r3, #12
 800dc0e:	69fa      	ldr	r2, [r7, #28]
 800dc10:	429a      	cmp	r2, r3
 800dc12:	d301      	bcc.n	800dc18 <ip4addr_aton+0x134>
        return 0;
 800dc14:	2300      	movs	r3, #0
 800dc16:	e08d      	b.n	800dd34 <ip4addr_aton+0x250>
      }
      *pp++ = val;
 800dc18:	69fb      	ldr	r3, [r7, #28]
 800dc1a:	1d1a      	adds	r2, r3, #4
 800dc1c:	61fa      	str	r2, [r7, #28]
 800dc1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dc20:	601a      	str	r2, [r3, #0]
      c = *++cp;
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	3301      	adds	r3, #1
 800dc26:	607b      	str	r3, [r7, #4]
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	781b      	ldrb	r3, [r3, #0]
 800dc2c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    if (!lwip_isdigit(c)) {
 800dc30:	e764      	b.n	800dafc <ip4addr_aton+0x18>
    } else {
      break;
 800dc32:	bf00      	nop
    }
  }
  /*
   * Check for trailing characters.
   */
  if (c != '\0' && !lwip_isspace(c)) {
 800dc34:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800dc38:	2b00      	cmp	r3, #0
 800dc3a:	d00d      	beq.n	800dc58 <ip4addr_aton+0x174>
 800dc3c:	f001 f978 	bl	800ef30 <__locale_ctype_ptr>
 800dc40:	4602      	mov	r2, r0
 800dc42:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800dc46:	3301      	adds	r3, #1
 800dc48:	4413      	add	r3, r2
 800dc4a:	781b      	ldrb	r3, [r3, #0]
 800dc4c:	f003 0308 	and.w	r3, r3, #8
 800dc50:	2b00      	cmp	r3, #0
 800dc52:	d101      	bne.n	800dc58 <ip4addr_aton+0x174>
    return 0;
 800dc54:	2300      	movs	r3, #0
 800dc56:	e06d      	b.n	800dd34 <ip4addr_aton+0x250>
  }
  /*
   * Concoct the address according to
   * the number of parts specified.
   */
  switch (pp - parts + 1) {
 800dc58:	69fa      	ldr	r2, [r7, #28]
 800dc5a:	f107 030c 	add.w	r3, r7, #12
 800dc5e:	1ad3      	subs	r3, r2, r3
 800dc60:	109b      	asrs	r3, r3, #2
 800dc62:	3301      	adds	r3, #1
 800dc64:	2b04      	cmp	r3, #4
 800dc66:	d853      	bhi.n	800dd10 <ip4addr_aton+0x22c>
 800dc68:	a201      	add	r2, pc, #4	; (adr r2, 800dc70 <ip4addr_aton+0x18c>)
 800dc6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc6e:	bf00      	nop
 800dc70:	0800dc85 	.word	0x0800dc85
 800dc74:	0800dd1f 	.word	0x0800dd1f
 800dc78:	0800dc89 	.word	0x0800dc89
 800dc7c:	0800dcab 	.word	0x0800dcab
 800dc80:	0800dcd9 	.word	0x0800dcd9

    case 0:
      return 0;       /* initial nondigit */
 800dc84:	2300      	movs	r3, #0
 800dc86:	e055      	b.n	800dd34 <ip4addr_aton+0x250>

    case 1:             /* a -- 32 bits */
      break;

    case 2:             /* a.b -- 8.24 bits */
      if (val > 0xffffffUL) {
 800dc88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc8a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800dc8e:	d301      	bcc.n	800dc94 <ip4addr_aton+0x1b0>
        return 0;
 800dc90:	2300      	movs	r3, #0
 800dc92:	e04f      	b.n	800dd34 <ip4addr_aton+0x250>
      }
      if (parts[0] > 0xff) {
 800dc94:	68fb      	ldr	r3, [r7, #12]
 800dc96:	2bff      	cmp	r3, #255	; 0xff
 800dc98:	d901      	bls.n	800dc9e <ip4addr_aton+0x1ba>
        return 0;
 800dc9a:	2300      	movs	r3, #0
 800dc9c:	e04a      	b.n	800dd34 <ip4addr_aton+0x250>
      }
      val |= parts[0] << 24;
 800dc9e:	68fb      	ldr	r3, [r7, #12]
 800dca0:	061b      	lsls	r3, r3, #24
 800dca2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dca4:	4313      	orrs	r3, r2
 800dca6:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800dca8:	e03a      	b.n	800dd20 <ip4addr_aton+0x23c>

    case 3:             /* a.b.c -- 8.8.16 bits */
      if (val > 0xffff) {
 800dcaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dcb0:	d301      	bcc.n	800dcb6 <ip4addr_aton+0x1d2>
        return 0;
 800dcb2:	2300      	movs	r3, #0
 800dcb4:	e03e      	b.n	800dd34 <ip4addr_aton+0x250>
      }
      if ((parts[0] > 0xff) || (parts[1] > 0xff)) {
 800dcb6:	68fb      	ldr	r3, [r7, #12]
 800dcb8:	2bff      	cmp	r3, #255	; 0xff
 800dcba:	d802      	bhi.n	800dcc2 <ip4addr_aton+0x1de>
 800dcbc:	693b      	ldr	r3, [r7, #16]
 800dcbe:	2bff      	cmp	r3, #255	; 0xff
 800dcc0:	d901      	bls.n	800dcc6 <ip4addr_aton+0x1e2>
        return 0;
 800dcc2:	2300      	movs	r3, #0
 800dcc4:	e036      	b.n	800dd34 <ip4addr_aton+0x250>
      }
      val |= (parts[0] << 24) | (parts[1] << 16);
 800dcc6:	68fb      	ldr	r3, [r7, #12]
 800dcc8:	061a      	lsls	r2, r3, #24
 800dcca:	693b      	ldr	r3, [r7, #16]
 800dccc:	041b      	lsls	r3, r3, #16
 800dcce:	4313      	orrs	r3, r2
 800dcd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dcd2:	4313      	orrs	r3, r2
 800dcd4:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800dcd6:	e023      	b.n	800dd20 <ip4addr_aton+0x23c>

    case 4:             /* a.b.c.d -- 8.8.8.8 bits */
      if (val > 0xff) {
 800dcd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcda:	2bff      	cmp	r3, #255	; 0xff
 800dcdc:	d901      	bls.n	800dce2 <ip4addr_aton+0x1fe>
        return 0;
 800dcde:	2300      	movs	r3, #0
 800dce0:	e028      	b.n	800dd34 <ip4addr_aton+0x250>
      }
      if ((parts[0] > 0xff) || (parts[1] > 0xff) || (parts[2] > 0xff)) {
 800dce2:	68fb      	ldr	r3, [r7, #12]
 800dce4:	2bff      	cmp	r3, #255	; 0xff
 800dce6:	d805      	bhi.n	800dcf4 <ip4addr_aton+0x210>
 800dce8:	693b      	ldr	r3, [r7, #16]
 800dcea:	2bff      	cmp	r3, #255	; 0xff
 800dcec:	d802      	bhi.n	800dcf4 <ip4addr_aton+0x210>
 800dcee:	697b      	ldr	r3, [r7, #20]
 800dcf0:	2bff      	cmp	r3, #255	; 0xff
 800dcf2:	d901      	bls.n	800dcf8 <ip4addr_aton+0x214>
        return 0;
 800dcf4:	2300      	movs	r3, #0
 800dcf6:	e01d      	b.n	800dd34 <ip4addr_aton+0x250>
      }
      val |= (parts[0] << 24) | (parts[1] << 16) | (parts[2] << 8);
 800dcf8:	68fb      	ldr	r3, [r7, #12]
 800dcfa:	061a      	lsls	r2, r3, #24
 800dcfc:	693b      	ldr	r3, [r7, #16]
 800dcfe:	041b      	lsls	r3, r3, #16
 800dd00:	431a      	orrs	r2, r3
 800dd02:	697b      	ldr	r3, [r7, #20]
 800dd04:	021b      	lsls	r3, r3, #8
 800dd06:	4313      	orrs	r3, r2
 800dd08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dd0a:	4313      	orrs	r3, r2
 800dd0c:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800dd0e:	e007      	b.n	800dd20 <ip4addr_aton+0x23c>
    default:
      LWIP_ASSERT("unhandled", 0);
 800dd10:	4b0a      	ldr	r3, [pc, #40]	; (800dd3c <ip4addr_aton+0x258>)
 800dd12:	22f9      	movs	r2, #249	; 0xf9
 800dd14:	490a      	ldr	r1, [pc, #40]	; (800dd40 <ip4addr_aton+0x25c>)
 800dd16:	480b      	ldr	r0, [pc, #44]	; (800dd44 <ip4addr_aton+0x260>)
 800dd18:	f001 f94c 	bl	800efb4 <iprintf>
      break;
 800dd1c:	e000      	b.n	800dd20 <ip4addr_aton+0x23c>
      break;
 800dd1e:	bf00      	nop
  }
  if (addr) {
 800dd20:	683b      	ldr	r3, [r7, #0]
 800dd22:	2b00      	cmp	r3, #0
 800dd24:	d005      	beq.n	800dd32 <ip4addr_aton+0x24e>
    ip4_addr_set_u32(addr, lwip_htonl(val));
 800dd26:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dd28:	f7fb ff75 	bl	8009c16 <lwip_htonl>
 800dd2c:	4602      	mov	r2, r0
 800dd2e:	683b      	ldr	r3, [r7, #0]
 800dd30:	601a      	str	r2, [r3, #0]
  }
  return 1;
 800dd32:	2301      	movs	r3, #1
}
 800dd34:	4618      	mov	r0, r3
 800dd36:	3728      	adds	r7, #40	; 0x28
 800dd38:	46bd      	mov	sp, r7
 800dd3a:	bdb0      	pop	{r4, r5, r7, pc}
 800dd3c:	08011c6c 	.word	0x08011c6c
 800dd40:	08011ca8 	.word	0x08011ca8
 800dd44:	08011cb4 	.word	0x08011cb4

0800dd48 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800dd48:	b580      	push	{r7, lr}
 800dd4a:	b084      	sub	sp, #16
 800dd4c:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800dd4e:	2300      	movs	r3, #0
 800dd50:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800dd52:	4b12      	ldr	r3, [pc, #72]	; (800dd9c <ip_reass_tmr+0x54>)
 800dd54:	681b      	ldr	r3, [r3, #0]
 800dd56:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800dd58:	e018      	b.n	800dd8c <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800dd5a:	68fb      	ldr	r3, [r7, #12]
 800dd5c:	7fdb      	ldrb	r3, [r3, #31]
 800dd5e:	2b00      	cmp	r3, #0
 800dd60:	d00b      	beq.n	800dd7a <ip_reass_tmr+0x32>
      r->timer--;
 800dd62:	68fb      	ldr	r3, [r7, #12]
 800dd64:	7fdb      	ldrb	r3, [r3, #31]
 800dd66:	3b01      	subs	r3, #1
 800dd68:	b2da      	uxtb	r2, r3
 800dd6a:	68fb      	ldr	r3, [r7, #12]
 800dd6c:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 800dd6e:	68fb      	ldr	r3, [r7, #12]
 800dd70:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800dd72:	68fb      	ldr	r3, [r7, #12]
 800dd74:	681b      	ldr	r3, [r3, #0]
 800dd76:	60fb      	str	r3, [r7, #12]
 800dd78:	e008      	b.n	800dd8c <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800dd7a:	68fb      	ldr	r3, [r7, #12]
 800dd7c:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800dd7e:	68fb      	ldr	r3, [r7, #12]
 800dd80:	681b      	ldr	r3, [r3, #0]
 800dd82:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800dd84:	68b9      	ldr	r1, [r7, #8]
 800dd86:	6878      	ldr	r0, [r7, #4]
 800dd88:	f000 f80a 	bl	800dda0 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800dd8c:	68fb      	ldr	r3, [r7, #12]
 800dd8e:	2b00      	cmp	r3, #0
 800dd90:	d1e3      	bne.n	800dd5a <ip_reass_tmr+0x12>
    }
  }
}
 800dd92:	bf00      	nop
 800dd94:	3710      	adds	r7, #16
 800dd96:	46bd      	mov	sp, r7
 800dd98:	bd80      	pop	{r7, pc}
 800dd9a:	bf00      	nop
 800dd9c:	200048a0 	.word	0x200048a0

0800dda0 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800dda0:	b580      	push	{r7, lr}
 800dda2:	b088      	sub	sp, #32
 800dda4:	af00      	add	r7, sp, #0
 800dda6:	6078      	str	r0, [r7, #4]
 800dda8:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800ddaa:	2300      	movs	r3, #0
 800ddac:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800ddae:	683a      	ldr	r2, [r7, #0]
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	429a      	cmp	r2, r3
 800ddb4:	d105      	bne.n	800ddc2 <ip_reass_free_complete_datagram+0x22>
 800ddb6:	4b45      	ldr	r3, [pc, #276]	; (800decc <ip_reass_free_complete_datagram+0x12c>)
 800ddb8:	22ab      	movs	r2, #171	; 0xab
 800ddba:	4945      	ldr	r1, [pc, #276]	; (800ded0 <ip_reass_free_complete_datagram+0x130>)
 800ddbc:	4845      	ldr	r0, [pc, #276]	; (800ded4 <ip_reass_free_complete_datagram+0x134>)
 800ddbe:	f001 f8f9 	bl	800efb4 <iprintf>
  if (prev != NULL) {
 800ddc2:	683b      	ldr	r3, [r7, #0]
 800ddc4:	2b00      	cmp	r3, #0
 800ddc6:	d00a      	beq.n	800ddde <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800ddc8:	683b      	ldr	r3, [r7, #0]
 800ddca:	681b      	ldr	r3, [r3, #0]
 800ddcc:	687a      	ldr	r2, [r7, #4]
 800ddce:	429a      	cmp	r2, r3
 800ddd0:	d005      	beq.n	800ddde <ip_reass_free_complete_datagram+0x3e>
 800ddd2:	4b3e      	ldr	r3, [pc, #248]	; (800decc <ip_reass_free_complete_datagram+0x12c>)
 800ddd4:	22ad      	movs	r2, #173	; 0xad
 800ddd6:	4940      	ldr	r1, [pc, #256]	; (800ded8 <ip_reass_free_complete_datagram+0x138>)
 800ddd8:	483e      	ldr	r0, [pc, #248]	; (800ded4 <ip_reass_free_complete_datagram+0x134>)
 800ddda:	f001 f8eb 	bl	800efb4 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	685b      	ldr	r3, [r3, #4]
 800dde2:	685b      	ldr	r3, [r3, #4]
 800dde4:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800dde6:	697b      	ldr	r3, [r7, #20]
 800dde8:	889b      	ldrh	r3, [r3, #4]
 800ddea:	b29b      	uxth	r3, r3
 800ddec:	2b00      	cmp	r3, #0
 800ddee:	d12a      	bne.n	800de46 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	685b      	ldr	r3, [r3, #4]
 800ddf4:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800ddf6:	697b      	ldr	r3, [r7, #20]
 800ddf8:	681a      	ldr	r2, [r3, #0]
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800ddfe:	69bb      	ldr	r3, [r7, #24]
 800de00:	6858      	ldr	r0, [r3, #4]
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	3308      	adds	r3, #8
 800de06:	2214      	movs	r2, #20
 800de08:	4619      	mov	r1, r3
 800de0a:	f001 f8c0 	bl	800ef8e <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800de0e:	2101      	movs	r1, #1
 800de10:	69b8      	ldr	r0, [r7, #24]
 800de12:	f7ff fb0b 	bl	800d42c <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800de16:	69b8      	ldr	r0, [r7, #24]
 800de18:	f7fd fabc 	bl	800b394 <pbuf_clen>
 800de1c:	4603      	mov	r3, r0
 800de1e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800de20:	8bfa      	ldrh	r2, [r7, #30]
 800de22:	8a7b      	ldrh	r3, [r7, #18]
 800de24:	4413      	add	r3, r2
 800de26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800de2a:	db05      	blt.n	800de38 <ip_reass_free_complete_datagram+0x98>
 800de2c:	4b27      	ldr	r3, [pc, #156]	; (800decc <ip_reass_free_complete_datagram+0x12c>)
 800de2e:	22bc      	movs	r2, #188	; 0xbc
 800de30:	492a      	ldr	r1, [pc, #168]	; (800dedc <ip_reass_free_complete_datagram+0x13c>)
 800de32:	4828      	ldr	r0, [pc, #160]	; (800ded4 <ip_reass_free_complete_datagram+0x134>)
 800de34:	f001 f8be 	bl	800efb4 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800de38:	8bfa      	ldrh	r2, [r7, #30]
 800de3a:	8a7b      	ldrh	r3, [r7, #18]
 800de3c:	4413      	add	r3, r2
 800de3e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800de40:	69b8      	ldr	r0, [r7, #24]
 800de42:	f7fd fa19 	bl	800b278 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	685b      	ldr	r3, [r3, #4]
 800de4a:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800de4c:	e01f      	b.n	800de8e <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800de4e:	69bb      	ldr	r3, [r7, #24]
 800de50:	685b      	ldr	r3, [r3, #4]
 800de52:	617b      	str	r3, [r7, #20]
    pcur = p;
 800de54:	69bb      	ldr	r3, [r7, #24]
 800de56:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800de58:	697b      	ldr	r3, [r7, #20]
 800de5a:	681b      	ldr	r3, [r3, #0]
 800de5c:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800de5e:	68f8      	ldr	r0, [r7, #12]
 800de60:	f7fd fa98 	bl	800b394 <pbuf_clen>
 800de64:	4603      	mov	r3, r0
 800de66:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800de68:	8bfa      	ldrh	r2, [r7, #30]
 800de6a:	8a7b      	ldrh	r3, [r7, #18]
 800de6c:	4413      	add	r3, r2
 800de6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800de72:	db05      	blt.n	800de80 <ip_reass_free_complete_datagram+0xe0>
 800de74:	4b15      	ldr	r3, [pc, #84]	; (800decc <ip_reass_free_complete_datagram+0x12c>)
 800de76:	22cc      	movs	r2, #204	; 0xcc
 800de78:	4918      	ldr	r1, [pc, #96]	; (800dedc <ip_reass_free_complete_datagram+0x13c>)
 800de7a:	4816      	ldr	r0, [pc, #88]	; (800ded4 <ip_reass_free_complete_datagram+0x134>)
 800de7c:	f001 f89a 	bl	800efb4 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800de80:	8bfa      	ldrh	r2, [r7, #30]
 800de82:	8a7b      	ldrh	r3, [r7, #18]
 800de84:	4413      	add	r3, r2
 800de86:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800de88:	68f8      	ldr	r0, [r7, #12]
 800de8a:	f7fd f9f5 	bl	800b278 <pbuf_free>
  while (p != NULL) {
 800de8e:	69bb      	ldr	r3, [r7, #24]
 800de90:	2b00      	cmp	r3, #0
 800de92:	d1dc      	bne.n	800de4e <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800de94:	6839      	ldr	r1, [r7, #0]
 800de96:	6878      	ldr	r0, [r7, #4]
 800de98:	f000 f8c2 	bl	800e020 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800de9c:	4b10      	ldr	r3, [pc, #64]	; (800dee0 <ip_reass_free_complete_datagram+0x140>)
 800de9e:	881b      	ldrh	r3, [r3, #0]
 800dea0:	8bfa      	ldrh	r2, [r7, #30]
 800dea2:	429a      	cmp	r2, r3
 800dea4:	d905      	bls.n	800deb2 <ip_reass_free_complete_datagram+0x112>
 800dea6:	4b09      	ldr	r3, [pc, #36]	; (800decc <ip_reass_free_complete_datagram+0x12c>)
 800dea8:	22d2      	movs	r2, #210	; 0xd2
 800deaa:	490e      	ldr	r1, [pc, #56]	; (800dee4 <ip_reass_free_complete_datagram+0x144>)
 800deac:	4809      	ldr	r0, [pc, #36]	; (800ded4 <ip_reass_free_complete_datagram+0x134>)
 800deae:	f001 f881 	bl	800efb4 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800deb2:	4b0b      	ldr	r3, [pc, #44]	; (800dee0 <ip_reass_free_complete_datagram+0x140>)
 800deb4:	881a      	ldrh	r2, [r3, #0]
 800deb6:	8bfb      	ldrh	r3, [r7, #30]
 800deb8:	1ad3      	subs	r3, r2, r3
 800deba:	b29a      	uxth	r2, r3
 800debc:	4b08      	ldr	r3, [pc, #32]	; (800dee0 <ip_reass_free_complete_datagram+0x140>)
 800debe:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800dec0:	8bfb      	ldrh	r3, [r7, #30]
}
 800dec2:	4618      	mov	r0, r3
 800dec4:	3720      	adds	r7, #32
 800dec6:	46bd      	mov	sp, r7
 800dec8:	bd80      	pop	{r7, pc}
 800deca:	bf00      	nop
 800decc:	08011cdc 	.word	0x08011cdc
 800ded0:	08011d18 	.word	0x08011d18
 800ded4:	08011d24 	.word	0x08011d24
 800ded8:	08011d4c 	.word	0x08011d4c
 800dedc:	08011d60 	.word	0x08011d60
 800dee0:	200048a4 	.word	0x200048a4
 800dee4:	08011d80 	.word	0x08011d80

0800dee8 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800dee8:	b580      	push	{r7, lr}
 800deea:	b08a      	sub	sp, #40	; 0x28
 800deec:	af00      	add	r7, sp, #0
 800deee:	6078      	str	r0, [r7, #4]
 800def0:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800def2:	2300      	movs	r3, #0
 800def4:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800def6:	2300      	movs	r3, #0
 800def8:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800defa:	2300      	movs	r3, #0
 800defc:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800defe:	2300      	movs	r3, #0
 800df00:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800df02:	2300      	movs	r3, #0
 800df04:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800df06:	4b28      	ldr	r3, [pc, #160]	; (800dfa8 <ip_reass_remove_oldest_datagram+0xc0>)
 800df08:	681b      	ldr	r3, [r3, #0]
 800df0a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800df0c:	e030      	b.n	800df70 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800df0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df10:	695a      	ldr	r2, [r3, #20]
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	68db      	ldr	r3, [r3, #12]
 800df16:	429a      	cmp	r2, r3
 800df18:	d10c      	bne.n	800df34 <ip_reass_remove_oldest_datagram+0x4c>
 800df1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df1c:	699a      	ldr	r2, [r3, #24]
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	691b      	ldr	r3, [r3, #16]
 800df22:	429a      	cmp	r2, r3
 800df24:	d106      	bne.n	800df34 <ip_reass_remove_oldest_datagram+0x4c>
 800df26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df28:	899a      	ldrh	r2, [r3, #12]
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	889b      	ldrh	r3, [r3, #4]
 800df2e:	b29b      	uxth	r3, r3
 800df30:	429a      	cmp	r2, r3
 800df32:	d014      	beq.n	800df5e <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800df34:	693b      	ldr	r3, [r7, #16]
 800df36:	3301      	adds	r3, #1
 800df38:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800df3a:	6a3b      	ldr	r3, [r7, #32]
 800df3c:	2b00      	cmp	r3, #0
 800df3e:	d104      	bne.n	800df4a <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800df40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df42:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800df44:	69fb      	ldr	r3, [r7, #28]
 800df46:	61bb      	str	r3, [r7, #24]
 800df48:	e009      	b.n	800df5e <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800df4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df4c:	7fda      	ldrb	r2, [r3, #31]
 800df4e:	6a3b      	ldr	r3, [r7, #32]
 800df50:	7fdb      	ldrb	r3, [r3, #31]
 800df52:	429a      	cmp	r2, r3
 800df54:	d803      	bhi.n	800df5e <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800df56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df58:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800df5a:	69fb      	ldr	r3, [r7, #28]
 800df5c:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800df5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df60:	681b      	ldr	r3, [r3, #0]
 800df62:	2b00      	cmp	r3, #0
 800df64:	d001      	beq.n	800df6a <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800df66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df68:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800df6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df6c:	681b      	ldr	r3, [r3, #0]
 800df6e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800df70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df72:	2b00      	cmp	r3, #0
 800df74:	d1cb      	bne.n	800df0e <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800df76:	6a3b      	ldr	r3, [r7, #32]
 800df78:	2b00      	cmp	r3, #0
 800df7a:	d008      	beq.n	800df8e <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800df7c:	69b9      	ldr	r1, [r7, #24]
 800df7e:	6a38      	ldr	r0, [r7, #32]
 800df80:	f7ff ff0e 	bl	800dda0 <ip_reass_free_complete_datagram>
 800df84:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800df86:	697a      	ldr	r2, [r7, #20]
 800df88:	68fb      	ldr	r3, [r7, #12]
 800df8a:	4413      	add	r3, r2
 800df8c:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800df8e:	697a      	ldr	r2, [r7, #20]
 800df90:	683b      	ldr	r3, [r7, #0]
 800df92:	429a      	cmp	r2, r3
 800df94:	da02      	bge.n	800df9c <ip_reass_remove_oldest_datagram+0xb4>
 800df96:	693b      	ldr	r3, [r7, #16]
 800df98:	2b01      	cmp	r3, #1
 800df9a:	dcac      	bgt.n	800def6 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800df9c:	697b      	ldr	r3, [r7, #20]
}
 800df9e:	4618      	mov	r0, r3
 800dfa0:	3728      	adds	r7, #40	; 0x28
 800dfa2:	46bd      	mov	sp, r7
 800dfa4:	bd80      	pop	{r7, pc}
 800dfa6:	bf00      	nop
 800dfa8:	200048a0 	.word	0x200048a0

0800dfac <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800dfac:	b580      	push	{r7, lr}
 800dfae:	b084      	sub	sp, #16
 800dfb0:	af00      	add	r7, sp, #0
 800dfb2:	6078      	str	r0, [r7, #4]
 800dfb4:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800dfb6:	2001      	movs	r0, #1
 800dfb8:	f7fc facc 	bl	800a554 <memp_malloc>
 800dfbc:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800dfbe:	68fb      	ldr	r3, [r7, #12]
 800dfc0:	2b00      	cmp	r3, #0
 800dfc2:	d110      	bne.n	800dfe6 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800dfc4:	6839      	ldr	r1, [r7, #0]
 800dfc6:	6878      	ldr	r0, [r7, #4]
 800dfc8:	f7ff ff8e 	bl	800dee8 <ip_reass_remove_oldest_datagram>
 800dfcc:	4602      	mov	r2, r0
 800dfce:	683b      	ldr	r3, [r7, #0]
 800dfd0:	4293      	cmp	r3, r2
 800dfd2:	dc03      	bgt.n	800dfdc <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800dfd4:	2001      	movs	r0, #1
 800dfd6:	f7fc fabd 	bl	800a554 <memp_malloc>
 800dfda:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800dfdc:	68fb      	ldr	r3, [r7, #12]
 800dfde:	2b00      	cmp	r3, #0
 800dfe0:	d101      	bne.n	800dfe6 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 800dfe2:	2300      	movs	r3, #0
 800dfe4:	e016      	b.n	800e014 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800dfe6:	2220      	movs	r2, #32
 800dfe8:	2100      	movs	r1, #0
 800dfea:	68f8      	ldr	r0, [r7, #12]
 800dfec:	f000 ffda 	bl	800efa4 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800dff0:	68fb      	ldr	r3, [r7, #12]
 800dff2:	220f      	movs	r2, #15
 800dff4:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800dff6:	4b09      	ldr	r3, [pc, #36]	; (800e01c <ip_reass_enqueue_new_datagram+0x70>)
 800dff8:	681a      	ldr	r2, [r3, #0]
 800dffa:	68fb      	ldr	r3, [r7, #12]
 800dffc:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800dffe:	4a07      	ldr	r2, [pc, #28]	; (800e01c <ip_reass_enqueue_new_datagram+0x70>)
 800e000:	68fb      	ldr	r3, [r7, #12]
 800e002:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800e004:	68fb      	ldr	r3, [r7, #12]
 800e006:	3308      	adds	r3, #8
 800e008:	2214      	movs	r2, #20
 800e00a:	6879      	ldr	r1, [r7, #4]
 800e00c:	4618      	mov	r0, r3
 800e00e:	f000 ffbe 	bl	800ef8e <memcpy>
  return ipr;
 800e012:	68fb      	ldr	r3, [r7, #12]
}
 800e014:	4618      	mov	r0, r3
 800e016:	3710      	adds	r7, #16
 800e018:	46bd      	mov	sp, r7
 800e01a:	bd80      	pop	{r7, pc}
 800e01c:	200048a0 	.word	0x200048a0

0800e020 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800e020:	b580      	push	{r7, lr}
 800e022:	b082      	sub	sp, #8
 800e024:	af00      	add	r7, sp, #0
 800e026:	6078      	str	r0, [r7, #4]
 800e028:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800e02a:	4b10      	ldr	r3, [pc, #64]	; (800e06c <ip_reass_dequeue_datagram+0x4c>)
 800e02c:	681b      	ldr	r3, [r3, #0]
 800e02e:	687a      	ldr	r2, [r7, #4]
 800e030:	429a      	cmp	r2, r3
 800e032:	d104      	bne.n	800e03e <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	681b      	ldr	r3, [r3, #0]
 800e038:	4a0c      	ldr	r2, [pc, #48]	; (800e06c <ip_reass_dequeue_datagram+0x4c>)
 800e03a:	6013      	str	r3, [r2, #0]
 800e03c:	e00d      	b.n	800e05a <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800e03e:	683b      	ldr	r3, [r7, #0]
 800e040:	2b00      	cmp	r3, #0
 800e042:	d106      	bne.n	800e052 <ip_reass_dequeue_datagram+0x32>
 800e044:	4b0a      	ldr	r3, [pc, #40]	; (800e070 <ip_reass_dequeue_datagram+0x50>)
 800e046:	f240 1245 	movw	r2, #325	; 0x145
 800e04a:	490a      	ldr	r1, [pc, #40]	; (800e074 <ip_reass_dequeue_datagram+0x54>)
 800e04c:	480a      	ldr	r0, [pc, #40]	; (800e078 <ip_reass_dequeue_datagram+0x58>)
 800e04e:	f000 ffb1 	bl	800efb4 <iprintf>
    prev->next = ipr->next;
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	681a      	ldr	r2, [r3, #0]
 800e056:	683b      	ldr	r3, [r7, #0]
 800e058:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800e05a:	6879      	ldr	r1, [r7, #4]
 800e05c:	2001      	movs	r0, #1
 800e05e:	f7fc facb 	bl	800a5f8 <memp_free>
}
 800e062:	bf00      	nop
 800e064:	3708      	adds	r7, #8
 800e066:	46bd      	mov	sp, r7
 800e068:	bd80      	pop	{r7, pc}
 800e06a:	bf00      	nop
 800e06c:	200048a0 	.word	0x200048a0
 800e070:	08011cdc 	.word	0x08011cdc
 800e074:	08011da4 	.word	0x08011da4
 800e078:	08011d24 	.word	0x08011d24

0800e07c <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800e07c:	b580      	push	{r7, lr}
 800e07e:	b08c      	sub	sp, #48	; 0x30
 800e080:	af00      	add	r7, sp, #0
 800e082:	60f8      	str	r0, [r7, #12]
 800e084:	60b9      	str	r1, [r7, #8]
 800e086:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 800e088:	2300      	movs	r3, #0
 800e08a:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800e08c:	2301      	movs	r3, #1
 800e08e:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 800e090:	68bb      	ldr	r3, [r7, #8]
 800e092:	685b      	ldr	r3, [r3, #4]
 800e094:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800e096:	69fb      	ldr	r3, [r7, #28]
 800e098:	885b      	ldrh	r3, [r3, #2]
 800e09a:	b29b      	uxth	r3, r3
 800e09c:	4618      	mov	r0, r3
 800e09e:	f7fb fda5 	bl	8009bec <lwip_htons>
 800e0a2:	4603      	mov	r3, r0
 800e0a4:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 800e0a6:	69fb      	ldr	r3, [r7, #28]
 800e0a8:	781b      	ldrb	r3, [r3, #0]
 800e0aa:	f003 030f 	and.w	r3, r3, #15
 800e0ae:	b2db      	uxtb	r3, r3
 800e0b0:	009b      	lsls	r3, r3, #2
 800e0b2:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 800e0b4:	7e7b      	ldrb	r3, [r7, #25]
 800e0b6:	b29b      	uxth	r3, r3
 800e0b8:	8b7a      	ldrh	r2, [r7, #26]
 800e0ba:	429a      	cmp	r2, r3
 800e0bc:	d202      	bcs.n	800e0c4 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e0be:	f04f 33ff 	mov.w	r3, #4294967295
 800e0c2:	e135      	b.n	800e330 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 800e0c4:	7e7b      	ldrb	r3, [r7, #25]
 800e0c6:	b29b      	uxth	r3, r3
 800e0c8:	8b7a      	ldrh	r2, [r7, #26]
 800e0ca:	1ad3      	subs	r3, r2, r3
 800e0cc:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 800e0ce:	69fb      	ldr	r3, [r7, #28]
 800e0d0:	88db      	ldrh	r3, [r3, #6]
 800e0d2:	b29b      	uxth	r3, r3
 800e0d4:	4618      	mov	r0, r3
 800e0d6:	f7fb fd89 	bl	8009bec <lwip_htons>
 800e0da:	4603      	mov	r3, r0
 800e0dc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e0e0:	b29b      	uxth	r3, r3
 800e0e2:	00db      	lsls	r3, r3, #3
 800e0e4:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 800e0e6:	68bb      	ldr	r3, [r7, #8]
 800e0e8:	685b      	ldr	r3, [r3, #4]
 800e0ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 800e0ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0ee:	2200      	movs	r2, #0
 800e0f0:	701a      	strb	r2, [r3, #0]
 800e0f2:	2200      	movs	r2, #0
 800e0f4:	705a      	strb	r2, [r3, #1]
 800e0f6:	2200      	movs	r2, #0
 800e0f8:	709a      	strb	r2, [r3, #2]
 800e0fa:	2200      	movs	r2, #0
 800e0fc:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800e0fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e100:	8afa      	ldrh	r2, [r7, #22]
 800e102:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 800e104:	8afa      	ldrh	r2, [r7, #22]
 800e106:	8b7b      	ldrh	r3, [r7, #26]
 800e108:	4413      	add	r3, r2
 800e10a:	b29a      	uxth	r2, r3
 800e10c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e10e:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 800e110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e112:	88db      	ldrh	r3, [r3, #6]
 800e114:	b29b      	uxth	r3, r3
 800e116:	8afa      	ldrh	r2, [r7, #22]
 800e118:	429a      	cmp	r2, r3
 800e11a:	d902      	bls.n	800e122 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e11c:	f04f 33ff 	mov.w	r3, #4294967295
 800e120:	e106      	b.n	800e330 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800e122:	68fb      	ldr	r3, [r7, #12]
 800e124:	685b      	ldr	r3, [r3, #4]
 800e126:	627b      	str	r3, [r7, #36]	; 0x24
 800e128:	e068      	b.n	800e1fc <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 800e12a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e12c:	685b      	ldr	r3, [r3, #4]
 800e12e:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 800e130:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e132:	889b      	ldrh	r3, [r3, #4]
 800e134:	b29a      	uxth	r2, r3
 800e136:	693b      	ldr	r3, [r7, #16]
 800e138:	889b      	ldrh	r3, [r3, #4]
 800e13a:	b29b      	uxth	r3, r3
 800e13c:	429a      	cmp	r2, r3
 800e13e:	d235      	bcs.n	800e1ac <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800e140:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e142:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e144:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800e146:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e148:	2b00      	cmp	r3, #0
 800e14a:	d020      	beq.n	800e18e <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800e14c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e14e:	889b      	ldrh	r3, [r3, #4]
 800e150:	b29a      	uxth	r2, r3
 800e152:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e154:	88db      	ldrh	r3, [r3, #6]
 800e156:	b29b      	uxth	r3, r3
 800e158:	429a      	cmp	r2, r3
 800e15a:	d307      	bcc.n	800e16c <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 800e15c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e15e:	88db      	ldrh	r3, [r3, #6]
 800e160:	b29a      	uxth	r2, r3
 800e162:	693b      	ldr	r3, [r7, #16]
 800e164:	889b      	ldrh	r3, [r3, #4]
 800e166:	b29b      	uxth	r3, r3
 800e168:	429a      	cmp	r2, r3
 800e16a:	d902      	bls.n	800e172 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e16c:	f04f 33ff 	mov.w	r3, #4294967295
 800e170:	e0de      	b.n	800e330 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800e172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e174:	68ba      	ldr	r2, [r7, #8]
 800e176:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800e178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e17a:	88db      	ldrh	r3, [r3, #6]
 800e17c:	b29a      	uxth	r2, r3
 800e17e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e180:	889b      	ldrh	r3, [r3, #4]
 800e182:	b29b      	uxth	r3, r3
 800e184:	429a      	cmp	r2, r3
 800e186:	d03d      	beq.n	800e204 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800e188:	2300      	movs	r3, #0
 800e18a:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800e18c:	e03a      	b.n	800e204 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 800e18e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e190:	88db      	ldrh	r3, [r3, #6]
 800e192:	b29a      	uxth	r2, r3
 800e194:	693b      	ldr	r3, [r7, #16]
 800e196:	889b      	ldrh	r3, [r3, #4]
 800e198:	b29b      	uxth	r3, r3
 800e19a:	429a      	cmp	r2, r3
 800e19c:	d902      	bls.n	800e1a4 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e19e:	f04f 33ff 	mov.w	r3, #4294967295
 800e1a2:	e0c5      	b.n	800e330 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 800e1a4:	68fb      	ldr	r3, [r7, #12]
 800e1a6:	68ba      	ldr	r2, [r7, #8]
 800e1a8:	605a      	str	r2, [r3, #4]
      break;
 800e1aa:	e02b      	b.n	800e204 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 800e1ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1ae:	889b      	ldrh	r3, [r3, #4]
 800e1b0:	b29a      	uxth	r2, r3
 800e1b2:	693b      	ldr	r3, [r7, #16]
 800e1b4:	889b      	ldrh	r3, [r3, #4]
 800e1b6:	b29b      	uxth	r3, r3
 800e1b8:	429a      	cmp	r2, r3
 800e1ba:	d102      	bne.n	800e1c2 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e1bc:	f04f 33ff 	mov.w	r3, #4294967295
 800e1c0:	e0b6      	b.n	800e330 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800e1c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1c4:	889b      	ldrh	r3, [r3, #4]
 800e1c6:	b29a      	uxth	r2, r3
 800e1c8:	693b      	ldr	r3, [r7, #16]
 800e1ca:	88db      	ldrh	r3, [r3, #6]
 800e1cc:	b29b      	uxth	r3, r3
 800e1ce:	429a      	cmp	r2, r3
 800e1d0:	d202      	bcs.n	800e1d8 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e1d2:	f04f 33ff 	mov.w	r3, #4294967295
 800e1d6:	e0ab      	b.n	800e330 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800e1d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1da:	2b00      	cmp	r3, #0
 800e1dc:	d009      	beq.n	800e1f2 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 800e1de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1e0:	88db      	ldrh	r3, [r3, #6]
 800e1e2:	b29a      	uxth	r2, r3
 800e1e4:	693b      	ldr	r3, [r7, #16]
 800e1e6:	889b      	ldrh	r3, [r3, #4]
 800e1e8:	b29b      	uxth	r3, r3
 800e1ea:	429a      	cmp	r2, r3
 800e1ec:	d001      	beq.n	800e1f2 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800e1ee:	2300      	movs	r3, #0
 800e1f0:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800e1f2:	693b      	ldr	r3, [r7, #16]
 800e1f4:	681b      	ldr	r3, [r3, #0]
 800e1f6:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 800e1f8:	693b      	ldr	r3, [r7, #16]
 800e1fa:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 800e1fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1fe:	2b00      	cmp	r3, #0
 800e200:	d193      	bne.n	800e12a <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 800e202:	e000      	b.n	800e206 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 800e204:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800e206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e208:	2b00      	cmp	r3, #0
 800e20a:	d12d      	bne.n	800e268 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 800e20c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e20e:	2b00      	cmp	r3, #0
 800e210:	d01c      	beq.n	800e24c <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800e212:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e214:	88db      	ldrh	r3, [r3, #6]
 800e216:	b29a      	uxth	r2, r3
 800e218:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e21a:	889b      	ldrh	r3, [r3, #4]
 800e21c:	b29b      	uxth	r3, r3
 800e21e:	429a      	cmp	r2, r3
 800e220:	d906      	bls.n	800e230 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 800e222:	4b45      	ldr	r3, [pc, #276]	; (800e338 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800e224:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 800e228:	4944      	ldr	r1, [pc, #272]	; (800e33c <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800e22a:	4845      	ldr	r0, [pc, #276]	; (800e340 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800e22c:	f000 fec2 	bl	800efb4 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800e230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e232:	68ba      	ldr	r2, [r7, #8]
 800e234:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800e236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e238:	88db      	ldrh	r3, [r3, #6]
 800e23a:	b29a      	uxth	r2, r3
 800e23c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e23e:	889b      	ldrh	r3, [r3, #4]
 800e240:	b29b      	uxth	r3, r3
 800e242:	429a      	cmp	r2, r3
 800e244:	d010      	beq.n	800e268 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 800e246:	2300      	movs	r3, #0
 800e248:	623b      	str	r3, [r7, #32]
 800e24a:	e00d      	b.n	800e268 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800e24c:	68fb      	ldr	r3, [r7, #12]
 800e24e:	685b      	ldr	r3, [r3, #4]
 800e250:	2b00      	cmp	r3, #0
 800e252:	d006      	beq.n	800e262 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 800e254:	4b38      	ldr	r3, [pc, #224]	; (800e338 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800e256:	f240 12bf 	movw	r2, #447	; 0x1bf
 800e25a:	493a      	ldr	r1, [pc, #232]	; (800e344 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800e25c:	4838      	ldr	r0, [pc, #224]	; (800e340 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800e25e:	f000 fea9 	bl	800efb4 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800e262:	68fb      	ldr	r3, [r7, #12]
 800e264:	68ba      	ldr	r2, [r7, #8]
 800e266:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	2b00      	cmp	r3, #0
 800e26c:	d105      	bne.n	800e27a <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 800e26e:	68fb      	ldr	r3, [r7, #12]
 800e270:	7f9b      	ldrb	r3, [r3, #30]
 800e272:	f003 0301 	and.w	r3, r3, #1
 800e276:	2b00      	cmp	r3, #0
 800e278:	d059      	beq.n	800e32e <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 800e27a:	6a3b      	ldr	r3, [r7, #32]
 800e27c:	2b00      	cmp	r3, #0
 800e27e:	d04f      	beq.n	800e320 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 800e280:	68fb      	ldr	r3, [r7, #12]
 800e282:	685b      	ldr	r3, [r3, #4]
 800e284:	2b00      	cmp	r3, #0
 800e286:	d006      	beq.n	800e296 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 800e288:	68fb      	ldr	r3, [r7, #12]
 800e28a:	685b      	ldr	r3, [r3, #4]
 800e28c:	685b      	ldr	r3, [r3, #4]
 800e28e:	889b      	ldrh	r3, [r3, #4]
 800e290:	b29b      	uxth	r3, r3
 800e292:	2b00      	cmp	r3, #0
 800e294:	d002      	beq.n	800e29c <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 800e296:	2300      	movs	r3, #0
 800e298:	623b      	str	r3, [r7, #32]
 800e29a:	e041      	b.n	800e320 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800e29c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e29e:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 800e2a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2a2:	681b      	ldr	r3, [r3, #0]
 800e2a4:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800e2a6:	e012      	b.n	800e2ce <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 800e2a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2aa:	685b      	ldr	r3, [r3, #4]
 800e2ac:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 800e2ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2b0:	88db      	ldrh	r3, [r3, #6]
 800e2b2:	b29a      	uxth	r2, r3
 800e2b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2b6:	889b      	ldrh	r3, [r3, #4]
 800e2b8:	b29b      	uxth	r3, r3
 800e2ba:	429a      	cmp	r2, r3
 800e2bc:	d002      	beq.n	800e2c4 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 800e2be:	2300      	movs	r3, #0
 800e2c0:	623b      	str	r3, [r7, #32]
            break;
 800e2c2:	e007      	b.n	800e2d4 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 800e2c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2c6:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 800e2c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2ca:	681b      	ldr	r3, [r3, #0]
 800e2cc:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800e2ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2d0:	2b00      	cmp	r3, #0
 800e2d2:	d1e9      	bne.n	800e2a8 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 800e2d4:	6a3b      	ldr	r3, [r7, #32]
 800e2d6:	2b00      	cmp	r3, #0
 800e2d8:	d022      	beq.n	800e320 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800e2da:	68fb      	ldr	r3, [r7, #12]
 800e2dc:	685b      	ldr	r3, [r3, #4]
 800e2de:	2b00      	cmp	r3, #0
 800e2e0:	d106      	bne.n	800e2f0 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 800e2e2:	4b15      	ldr	r3, [pc, #84]	; (800e338 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800e2e4:	f240 12df 	movw	r2, #479	; 0x1df
 800e2e8:	4917      	ldr	r1, [pc, #92]	; (800e348 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800e2ea:	4815      	ldr	r0, [pc, #84]	; (800e340 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800e2ec:	f000 fe62 	bl	800efb4 <iprintf>
          LWIP_ASSERT("sanity check",
 800e2f0:	68fb      	ldr	r3, [r7, #12]
 800e2f2:	685b      	ldr	r3, [r3, #4]
 800e2f4:	685b      	ldr	r3, [r3, #4]
 800e2f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e2f8:	429a      	cmp	r2, r3
 800e2fa:	d106      	bne.n	800e30a <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 800e2fc:	4b0e      	ldr	r3, [pc, #56]	; (800e338 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800e2fe:	f240 12e1 	movw	r2, #481	; 0x1e1
 800e302:	4911      	ldr	r1, [pc, #68]	; (800e348 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800e304:	480e      	ldr	r0, [pc, #56]	; (800e340 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800e306:	f000 fe55 	bl	800efb4 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800e30a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e30c:	681b      	ldr	r3, [r3, #0]
 800e30e:	2b00      	cmp	r3, #0
 800e310:	d006      	beq.n	800e320 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 800e312:	4b09      	ldr	r3, [pc, #36]	; (800e338 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800e314:	f240 12e3 	movw	r2, #483	; 0x1e3
 800e318:	490c      	ldr	r1, [pc, #48]	; (800e34c <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800e31a:	4809      	ldr	r0, [pc, #36]	; (800e340 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800e31c:	f000 fe4a 	bl	800efb4 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800e320:	6a3b      	ldr	r3, [r7, #32]
 800e322:	2b00      	cmp	r3, #0
 800e324:	bf14      	ite	ne
 800e326:	2301      	movne	r3, #1
 800e328:	2300      	moveq	r3, #0
 800e32a:	b2db      	uxtb	r3, r3
 800e32c:	e000      	b.n	800e330 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800e32e:	2300      	movs	r3, #0
}
 800e330:	4618      	mov	r0, r3
 800e332:	3730      	adds	r7, #48	; 0x30
 800e334:	46bd      	mov	sp, r7
 800e336:	bd80      	pop	{r7, pc}
 800e338:	08011cdc 	.word	0x08011cdc
 800e33c:	08011dc0 	.word	0x08011dc0
 800e340:	08011d24 	.word	0x08011d24
 800e344:	08011de0 	.word	0x08011de0
 800e348:	08011e18 	.word	0x08011e18
 800e34c:	08011e28 	.word	0x08011e28

0800e350 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 800e350:	b580      	push	{r7, lr}
 800e352:	b08e      	sub	sp, #56	; 0x38
 800e354:	af00      	add	r7, sp, #0
 800e356:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	685b      	ldr	r3, [r3, #4]
 800e35c:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 800e35e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e360:	781b      	ldrb	r3, [r3, #0]
 800e362:	f003 030f 	and.w	r3, r3, #15
 800e366:	b2db      	uxtb	r3, r3
 800e368:	009b      	lsls	r3, r3, #2
 800e36a:	b2db      	uxtb	r3, r3
 800e36c:	2b14      	cmp	r3, #20
 800e36e:	f040 8167 	bne.w	800e640 <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 800e372:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e374:	88db      	ldrh	r3, [r3, #6]
 800e376:	b29b      	uxth	r3, r3
 800e378:	4618      	mov	r0, r3
 800e37a:	f7fb fc37 	bl	8009bec <lwip_htons>
 800e37e:	4603      	mov	r3, r0
 800e380:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e384:	b29b      	uxth	r3, r3
 800e386:	00db      	lsls	r3, r3, #3
 800e388:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800e38a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e38c:	885b      	ldrh	r3, [r3, #2]
 800e38e:	b29b      	uxth	r3, r3
 800e390:	4618      	mov	r0, r3
 800e392:	f7fb fc2b 	bl	8009bec <lwip_htons>
 800e396:	4603      	mov	r3, r0
 800e398:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 800e39a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e39c:	781b      	ldrb	r3, [r3, #0]
 800e39e:	f003 030f 	and.w	r3, r3, #15
 800e3a2:	b2db      	uxtb	r3, r3
 800e3a4:	009b      	lsls	r3, r3, #2
 800e3a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 800e3aa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e3ae:	b29b      	uxth	r3, r3
 800e3b0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e3b2:	429a      	cmp	r2, r3
 800e3b4:	f0c0 8146 	bcc.w	800e644 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 800e3b8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e3bc:	b29b      	uxth	r3, r3
 800e3be:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e3c0:	1ad3      	subs	r3, r2, r3
 800e3c2:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800e3c4:	6878      	ldr	r0, [r7, #4]
 800e3c6:	f7fc ffe5 	bl	800b394 <pbuf_clen>
 800e3ca:	4603      	mov	r3, r0
 800e3cc:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800e3ce:	4ba3      	ldr	r3, [pc, #652]	; (800e65c <ip4_reass+0x30c>)
 800e3d0:	881b      	ldrh	r3, [r3, #0]
 800e3d2:	461a      	mov	r2, r3
 800e3d4:	8c3b      	ldrh	r3, [r7, #32]
 800e3d6:	4413      	add	r3, r2
 800e3d8:	2b0a      	cmp	r3, #10
 800e3da:	dd10      	ble.n	800e3fe <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800e3dc:	8c3b      	ldrh	r3, [r7, #32]
 800e3de:	4619      	mov	r1, r3
 800e3e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e3e2:	f7ff fd81 	bl	800dee8 <ip_reass_remove_oldest_datagram>
 800e3e6:	4603      	mov	r3, r0
 800e3e8:	2b00      	cmp	r3, #0
 800e3ea:	f000 812d 	beq.w	800e648 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800e3ee:	4b9b      	ldr	r3, [pc, #620]	; (800e65c <ip4_reass+0x30c>)
 800e3f0:	881b      	ldrh	r3, [r3, #0]
 800e3f2:	461a      	mov	r2, r3
 800e3f4:	8c3b      	ldrh	r3, [r7, #32]
 800e3f6:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800e3f8:	2b0a      	cmp	r3, #10
 800e3fa:	f300 8125 	bgt.w	800e648 <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800e3fe:	4b98      	ldr	r3, [pc, #608]	; (800e660 <ip4_reass+0x310>)
 800e400:	681b      	ldr	r3, [r3, #0]
 800e402:	633b      	str	r3, [r7, #48]	; 0x30
 800e404:	e015      	b.n	800e432 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800e406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e408:	695a      	ldr	r2, [r3, #20]
 800e40a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e40c:	68db      	ldr	r3, [r3, #12]
 800e40e:	429a      	cmp	r2, r3
 800e410:	d10c      	bne.n	800e42c <ip4_reass+0xdc>
 800e412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e414:	699a      	ldr	r2, [r3, #24]
 800e416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e418:	691b      	ldr	r3, [r3, #16]
 800e41a:	429a      	cmp	r2, r3
 800e41c:	d106      	bne.n	800e42c <ip4_reass+0xdc>
 800e41e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e420:	899a      	ldrh	r2, [r3, #12]
 800e422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e424:	889b      	ldrh	r3, [r3, #4]
 800e426:	b29b      	uxth	r3, r3
 800e428:	429a      	cmp	r2, r3
 800e42a:	d006      	beq.n	800e43a <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800e42c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e42e:	681b      	ldr	r3, [r3, #0]
 800e430:	633b      	str	r3, [r7, #48]	; 0x30
 800e432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e434:	2b00      	cmp	r3, #0
 800e436:	d1e6      	bne.n	800e406 <ip4_reass+0xb6>
 800e438:	e000      	b.n	800e43c <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 800e43a:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 800e43c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e43e:	2b00      	cmp	r3, #0
 800e440:	d109      	bne.n	800e456 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800e442:	8c3b      	ldrh	r3, [r7, #32]
 800e444:	4619      	mov	r1, r3
 800e446:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e448:	f7ff fdb0 	bl	800dfac <ip_reass_enqueue_new_datagram>
 800e44c:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 800e44e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e450:	2b00      	cmp	r3, #0
 800e452:	d11c      	bne.n	800e48e <ip4_reass+0x13e>
      goto nullreturn;
 800e454:	e0f9      	b.n	800e64a <ip4_reass+0x2fa>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800e456:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e458:	88db      	ldrh	r3, [r3, #6]
 800e45a:	b29b      	uxth	r3, r3
 800e45c:	4618      	mov	r0, r3
 800e45e:	f7fb fbc5 	bl	8009bec <lwip_htons>
 800e462:	4603      	mov	r3, r0
 800e464:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e468:	2b00      	cmp	r3, #0
 800e46a:	d110      	bne.n	800e48e <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800e46c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e46e:	89db      	ldrh	r3, [r3, #14]
 800e470:	4618      	mov	r0, r3
 800e472:	f7fb fbbb 	bl	8009bec <lwip_htons>
 800e476:	4603      	mov	r3, r0
 800e478:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800e47c:	2b00      	cmp	r3, #0
 800e47e:	d006      	beq.n	800e48e <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800e480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e482:	3308      	adds	r3, #8
 800e484:	2214      	movs	r2, #20
 800e486:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e488:	4618      	mov	r0, r3
 800e48a:	f000 fd80 	bl	800ef8e <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800e48e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e490:	88db      	ldrh	r3, [r3, #6]
 800e492:	b29b      	uxth	r3, r3
 800e494:	f003 0320 	and.w	r3, r3, #32
 800e498:	2b00      	cmp	r3, #0
 800e49a:	bf0c      	ite	eq
 800e49c:	2301      	moveq	r3, #1
 800e49e:	2300      	movne	r3, #0
 800e4a0:	b2db      	uxtb	r3, r3
 800e4a2:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 800e4a4:	69fb      	ldr	r3, [r7, #28]
 800e4a6:	2b00      	cmp	r3, #0
 800e4a8:	d00e      	beq.n	800e4c8 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 800e4aa:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800e4ac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e4ae:	4413      	add	r3, r2
 800e4b0:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800e4b2:	8b7a      	ldrh	r2, [r7, #26]
 800e4b4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e4b6:	429a      	cmp	r2, r3
 800e4b8:	f0c0 80a0 	bcc.w	800e5fc <ip4_reass+0x2ac>
 800e4bc:	8b7b      	ldrh	r3, [r7, #26]
 800e4be:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 800e4c2:	4293      	cmp	r3, r2
 800e4c4:	f200 809a 	bhi.w	800e5fc <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800e4c8:	69fa      	ldr	r2, [r7, #28]
 800e4ca:	6879      	ldr	r1, [r7, #4]
 800e4cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e4ce:	f7ff fdd5 	bl	800e07c <ip_reass_chain_frag_into_datagram_and_validate>
 800e4d2:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800e4d4:	697b      	ldr	r3, [r7, #20]
 800e4d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e4da:	f000 8091 	beq.w	800e600 <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800e4de:	4b5f      	ldr	r3, [pc, #380]	; (800e65c <ip4_reass+0x30c>)
 800e4e0:	881a      	ldrh	r2, [r3, #0]
 800e4e2:	8c3b      	ldrh	r3, [r7, #32]
 800e4e4:	4413      	add	r3, r2
 800e4e6:	b29a      	uxth	r2, r3
 800e4e8:	4b5c      	ldr	r3, [pc, #368]	; (800e65c <ip4_reass+0x30c>)
 800e4ea:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 800e4ec:	69fb      	ldr	r3, [r7, #28]
 800e4ee:	2b00      	cmp	r3, #0
 800e4f0:	d00d      	beq.n	800e50e <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 800e4f2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800e4f4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e4f6:	4413      	add	r3, r2
 800e4f8:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 800e4fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4fc:	8a7a      	ldrh	r2, [r7, #18]
 800e4fe:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800e500:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e502:	7f9b      	ldrb	r3, [r3, #30]
 800e504:	f043 0301 	orr.w	r3, r3, #1
 800e508:	b2da      	uxtb	r2, r3
 800e50a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e50c:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800e50e:	697b      	ldr	r3, [r7, #20]
 800e510:	2b01      	cmp	r3, #1
 800e512:	d171      	bne.n	800e5f8 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 800e514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e516:	8b9b      	ldrh	r3, [r3, #28]
 800e518:	3314      	adds	r3, #20
 800e51a:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800e51c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e51e:	685b      	ldr	r3, [r3, #4]
 800e520:	685b      	ldr	r3, [r3, #4]
 800e522:	681b      	ldr	r3, [r3, #0]
 800e524:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 800e526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e528:	685b      	ldr	r3, [r3, #4]
 800e52a:	685b      	ldr	r3, [r3, #4]
 800e52c:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800e52e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e530:	3308      	adds	r3, #8
 800e532:	2214      	movs	r2, #20
 800e534:	4619      	mov	r1, r3
 800e536:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e538:	f000 fd29 	bl	800ef8e <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 800e53c:	8a3b      	ldrh	r3, [r7, #16]
 800e53e:	4618      	mov	r0, r3
 800e540:	f7fb fb54 	bl	8009bec <lwip_htons>
 800e544:	4603      	mov	r3, r0
 800e546:	461a      	mov	r2, r3
 800e548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e54a:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800e54c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e54e:	2200      	movs	r2, #0
 800e550:	719a      	strb	r2, [r3, #6]
 800e552:	2200      	movs	r2, #0
 800e554:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800e556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e558:	2200      	movs	r2, #0
 800e55a:	729a      	strb	r2, [r3, #10]
 800e55c:	2200      	movs	r2, #0
 800e55e:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 800e560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e562:	685b      	ldr	r3, [r3, #4]
 800e564:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 800e566:	e00d      	b.n	800e584 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 800e568:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e56a:	685b      	ldr	r3, [r3, #4]
 800e56c:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 800e56e:	2114      	movs	r1, #20
 800e570:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e572:	f7fc fdfb 	bl	800b16c <pbuf_remove_header>
      pbuf_cat(p, r);
 800e576:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800e578:	6878      	ldr	r0, [r7, #4]
 800e57a:	f7fc ff4b 	bl	800b414 <pbuf_cat>
      r = iprh->next_pbuf;
 800e57e:	68fb      	ldr	r3, [r7, #12]
 800e580:	681b      	ldr	r3, [r3, #0]
 800e582:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 800e584:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e586:	2b00      	cmp	r3, #0
 800e588:	d1ee      	bne.n	800e568 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 800e58a:	4b35      	ldr	r3, [pc, #212]	; (800e660 <ip4_reass+0x310>)
 800e58c:	681b      	ldr	r3, [r3, #0]
 800e58e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e590:	429a      	cmp	r2, r3
 800e592:	d102      	bne.n	800e59a <ip4_reass+0x24a>
      ipr_prev = NULL;
 800e594:	2300      	movs	r3, #0
 800e596:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e598:	e010      	b.n	800e5bc <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800e59a:	4b31      	ldr	r3, [pc, #196]	; (800e660 <ip4_reass+0x310>)
 800e59c:	681b      	ldr	r3, [r3, #0]
 800e59e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e5a0:	e007      	b.n	800e5b2 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 800e5a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5a4:	681b      	ldr	r3, [r3, #0]
 800e5a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e5a8:	429a      	cmp	r2, r3
 800e5aa:	d006      	beq.n	800e5ba <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800e5ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5ae:	681b      	ldr	r3, [r3, #0]
 800e5b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e5b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5b4:	2b00      	cmp	r3, #0
 800e5b6:	d1f4      	bne.n	800e5a2 <ip4_reass+0x252>
 800e5b8:	e000      	b.n	800e5bc <ip4_reass+0x26c>
          break;
 800e5ba:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800e5bc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e5be:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e5c0:	f7ff fd2e 	bl	800e020 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 800e5c4:	6878      	ldr	r0, [r7, #4]
 800e5c6:	f7fc fee5 	bl	800b394 <pbuf_clen>
 800e5ca:	4603      	mov	r3, r0
 800e5cc:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800e5ce:	4b23      	ldr	r3, [pc, #140]	; (800e65c <ip4_reass+0x30c>)
 800e5d0:	881b      	ldrh	r3, [r3, #0]
 800e5d2:	8c3a      	ldrh	r2, [r7, #32]
 800e5d4:	429a      	cmp	r2, r3
 800e5d6:	d906      	bls.n	800e5e6 <ip4_reass+0x296>
 800e5d8:	4b22      	ldr	r3, [pc, #136]	; (800e664 <ip4_reass+0x314>)
 800e5da:	f240 229b 	movw	r2, #667	; 0x29b
 800e5de:	4922      	ldr	r1, [pc, #136]	; (800e668 <ip4_reass+0x318>)
 800e5e0:	4822      	ldr	r0, [pc, #136]	; (800e66c <ip4_reass+0x31c>)
 800e5e2:	f000 fce7 	bl	800efb4 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 800e5e6:	4b1d      	ldr	r3, [pc, #116]	; (800e65c <ip4_reass+0x30c>)
 800e5e8:	881a      	ldrh	r2, [r3, #0]
 800e5ea:	8c3b      	ldrh	r3, [r7, #32]
 800e5ec:	1ad3      	subs	r3, r2, r3
 800e5ee:	b29a      	uxth	r2, r3
 800e5f0:	4b1a      	ldr	r3, [pc, #104]	; (800e65c <ip4_reass+0x30c>)
 800e5f2:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	e02c      	b.n	800e652 <ip4_reass+0x302>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 800e5f8:	2300      	movs	r3, #0
 800e5fa:	e02a      	b.n	800e652 <ip4_reass+0x302>

nullreturn_ipr:
 800e5fc:	bf00      	nop
 800e5fe:	e000      	b.n	800e602 <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 800e600:	bf00      	nop
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 800e602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e604:	2b00      	cmp	r3, #0
 800e606:	d106      	bne.n	800e616 <ip4_reass+0x2c6>
 800e608:	4b16      	ldr	r3, [pc, #88]	; (800e664 <ip4_reass+0x314>)
 800e60a:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 800e60e:	4918      	ldr	r1, [pc, #96]	; (800e670 <ip4_reass+0x320>)
 800e610:	4816      	ldr	r0, [pc, #88]	; (800e66c <ip4_reass+0x31c>)
 800e612:	f000 fccf 	bl	800efb4 <iprintf>
  if (ipr->p == NULL) {
 800e616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e618:	685b      	ldr	r3, [r3, #4]
 800e61a:	2b00      	cmp	r3, #0
 800e61c:	d114      	bne.n	800e648 <ip4_reass+0x2f8>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 800e61e:	4b10      	ldr	r3, [pc, #64]	; (800e660 <ip4_reass+0x310>)
 800e620:	681b      	ldr	r3, [r3, #0]
 800e622:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e624:	429a      	cmp	r2, r3
 800e626:	d006      	beq.n	800e636 <ip4_reass+0x2e6>
 800e628:	4b0e      	ldr	r3, [pc, #56]	; (800e664 <ip4_reass+0x314>)
 800e62a:	f240 22ab 	movw	r2, #683	; 0x2ab
 800e62e:	4911      	ldr	r1, [pc, #68]	; (800e674 <ip4_reass+0x324>)
 800e630:	480e      	ldr	r0, [pc, #56]	; (800e66c <ip4_reass+0x31c>)
 800e632:	f000 fcbf 	bl	800efb4 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 800e636:	2100      	movs	r1, #0
 800e638:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e63a:	f7ff fcf1 	bl	800e020 <ip_reass_dequeue_datagram>
 800e63e:	e004      	b.n	800e64a <ip4_reass+0x2fa>
    goto nullreturn;
 800e640:	bf00      	nop
 800e642:	e002      	b.n	800e64a <ip4_reass+0x2fa>
    goto nullreturn;
 800e644:	bf00      	nop
 800e646:	e000      	b.n	800e64a <ip4_reass+0x2fa>
  }

nullreturn:
 800e648:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 800e64a:	6878      	ldr	r0, [r7, #4]
 800e64c:	f7fc fe14 	bl	800b278 <pbuf_free>
  return NULL;
 800e650:	2300      	movs	r3, #0
}
 800e652:	4618      	mov	r0, r3
 800e654:	3738      	adds	r7, #56	; 0x38
 800e656:	46bd      	mov	sp, r7
 800e658:	bd80      	pop	{r7, pc}
 800e65a:	bf00      	nop
 800e65c:	200048a4 	.word	0x200048a4
 800e660:	200048a0 	.word	0x200048a0
 800e664:	08011cdc 	.word	0x08011cdc
 800e668:	08011e4c 	.word	0x08011e4c
 800e66c:	08011d24 	.word	0x08011d24
 800e670:	08011e68 	.word	0x08011e68
 800e674:	08011e74 	.word	0x08011e74

0800e678 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 800e678:	b580      	push	{r7, lr}
 800e67a:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 800e67c:	2002      	movs	r0, #2
 800e67e:	f7fb ff69 	bl	800a554 <memp_malloc>
 800e682:	4603      	mov	r3, r0
}
 800e684:	4618      	mov	r0, r3
 800e686:	bd80      	pop	{r7, pc}

0800e688 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 800e688:	b580      	push	{r7, lr}
 800e68a:	b082      	sub	sp, #8
 800e68c:	af00      	add	r7, sp, #0
 800e68e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	2b00      	cmp	r3, #0
 800e694:	d106      	bne.n	800e6a4 <ip_frag_free_pbuf_custom_ref+0x1c>
 800e696:	4b07      	ldr	r3, [pc, #28]	; (800e6b4 <ip_frag_free_pbuf_custom_ref+0x2c>)
 800e698:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 800e69c:	4906      	ldr	r1, [pc, #24]	; (800e6b8 <ip_frag_free_pbuf_custom_ref+0x30>)
 800e69e:	4807      	ldr	r0, [pc, #28]	; (800e6bc <ip_frag_free_pbuf_custom_ref+0x34>)
 800e6a0:	f000 fc88 	bl	800efb4 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 800e6a4:	6879      	ldr	r1, [r7, #4]
 800e6a6:	2002      	movs	r0, #2
 800e6a8:	f7fb ffa6 	bl	800a5f8 <memp_free>
}
 800e6ac:	bf00      	nop
 800e6ae:	3708      	adds	r7, #8
 800e6b0:	46bd      	mov	sp, r7
 800e6b2:	bd80      	pop	{r7, pc}
 800e6b4:	08011cdc 	.word	0x08011cdc
 800e6b8:	08011e94 	.word	0x08011e94
 800e6bc:	08011d24 	.word	0x08011d24

0800e6c0 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800e6c0:	b580      	push	{r7, lr}
 800e6c2:	b084      	sub	sp, #16
 800e6c4:	af00      	add	r7, sp, #0
 800e6c6:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800e6cc:	68fb      	ldr	r3, [r7, #12]
 800e6ce:	2b00      	cmp	r3, #0
 800e6d0:	d106      	bne.n	800e6e0 <ipfrag_free_pbuf_custom+0x20>
 800e6d2:	4b11      	ldr	r3, [pc, #68]	; (800e718 <ipfrag_free_pbuf_custom+0x58>)
 800e6d4:	f240 22ce 	movw	r2, #718	; 0x2ce
 800e6d8:	4910      	ldr	r1, [pc, #64]	; (800e71c <ipfrag_free_pbuf_custom+0x5c>)
 800e6da:	4811      	ldr	r0, [pc, #68]	; (800e720 <ipfrag_free_pbuf_custom+0x60>)
 800e6dc:	f000 fc6a 	bl	800efb4 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 800e6e0:	68fa      	ldr	r2, [r7, #12]
 800e6e2:	687b      	ldr	r3, [r7, #4]
 800e6e4:	429a      	cmp	r2, r3
 800e6e6:	d006      	beq.n	800e6f6 <ipfrag_free_pbuf_custom+0x36>
 800e6e8:	4b0b      	ldr	r3, [pc, #44]	; (800e718 <ipfrag_free_pbuf_custom+0x58>)
 800e6ea:	f240 22cf 	movw	r2, #719	; 0x2cf
 800e6ee:	490d      	ldr	r1, [pc, #52]	; (800e724 <ipfrag_free_pbuf_custom+0x64>)
 800e6f0:	480b      	ldr	r0, [pc, #44]	; (800e720 <ipfrag_free_pbuf_custom+0x60>)
 800e6f2:	f000 fc5f 	bl	800efb4 <iprintf>
  if (pcr->original != NULL) {
 800e6f6:	68fb      	ldr	r3, [r7, #12]
 800e6f8:	695b      	ldr	r3, [r3, #20]
 800e6fa:	2b00      	cmp	r3, #0
 800e6fc:	d004      	beq.n	800e708 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 800e6fe:	68fb      	ldr	r3, [r7, #12]
 800e700:	695b      	ldr	r3, [r3, #20]
 800e702:	4618      	mov	r0, r3
 800e704:	f7fc fdb8 	bl	800b278 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800e708:	68f8      	ldr	r0, [r7, #12]
 800e70a:	f7ff ffbd 	bl	800e688 <ip_frag_free_pbuf_custom_ref>
}
 800e70e:	bf00      	nop
 800e710:	3710      	adds	r7, #16
 800e712:	46bd      	mov	sp, r7
 800e714:	bd80      	pop	{r7, pc}
 800e716:	bf00      	nop
 800e718:	08011cdc 	.word	0x08011cdc
 800e71c:	08011ea0 	.word	0x08011ea0
 800e720:	08011d24 	.word	0x08011d24
 800e724:	08011eac 	.word	0x08011eac

0800e728 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800e728:	b580      	push	{r7, lr}
 800e72a:	b094      	sub	sp, #80	; 0x50
 800e72c:	af02      	add	r7, sp, #8
 800e72e:	60f8      	str	r0, [r7, #12]
 800e730:	60b9      	str	r1, [r7, #8]
 800e732:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 800e734:	2300      	movs	r3, #0
 800e736:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800e73a:	68bb      	ldr	r3, [r7, #8]
 800e73c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800e73e:	3b14      	subs	r3, #20
 800e740:	2b00      	cmp	r3, #0
 800e742:	da00      	bge.n	800e746 <ip4_frag+0x1e>
 800e744:	3307      	adds	r3, #7
 800e746:	10db      	asrs	r3, r3, #3
 800e748:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 800e74a:	2314      	movs	r3, #20
 800e74c:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 800e74e:	68fb      	ldr	r3, [r7, #12]
 800e750:	685b      	ldr	r3, [r3, #4]
 800e752:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 800e754:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e756:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 800e758:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e75a:	781b      	ldrb	r3, [r3, #0]
 800e75c:	f003 030f 	and.w	r3, r3, #15
 800e760:	b2db      	uxtb	r3, r3
 800e762:	009b      	lsls	r3, r3, #2
 800e764:	b2db      	uxtb	r3, r3
 800e766:	2b14      	cmp	r3, #20
 800e768:	d002      	beq.n	800e770 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 800e76a:	f06f 0305 	mvn.w	r3, #5
 800e76e:	e10f      	b.n	800e990 <ip4_frag+0x268>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 800e770:	68fb      	ldr	r3, [r7, #12]
 800e772:	895b      	ldrh	r3, [r3, #10]
 800e774:	2b13      	cmp	r3, #19
 800e776:	d809      	bhi.n	800e78c <ip4_frag+0x64>
 800e778:	4b87      	ldr	r3, [pc, #540]	; (800e998 <ip4_frag+0x270>)
 800e77a:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 800e77e:	4987      	ldr	r1, [pc, #540]	; (800e99c <ip4_frag+0x274>)
 800e780:	4887      	ldr	r0, [pc, #540]	; (800e9a0 <ip4_frag+0x278>)
 800e782:	f000 fc17 	bl	800efb4 <iprintf>
 800e786:	f06f 0305 	mvn.w	r3, #5
 800e78a:	e101      	b.n	800e990 <ip4_frag+0x268>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800e78c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e78e:	88db      	ldrh	r3, [r3, #6]
 800e790:	b29b      	uxth	r3, r3
 800e792:	4618      	mov	r0, r3
 800e794:	f7fb fa2a 	bl	8009bec <lwip_htons>
 800e798:	4603      	mov	r3, r0
 800e79a:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 800e79c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800e79e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e7a2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 800e7a6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800e7a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e7ac:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 800e7ae:	68fb      	ldr	r3, [r7, #12]
 800e7b0:	891b      	ldrh	r3, [r3, #8]
 800e7b2:	3b14      	subs	r3, #20
 800e7b4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 800e7b8:	e0e0      	b.n	800e97c <ip4_frag+0x254>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800e7ba:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800e7bc:	00db      	lsls	r3, r3, #3
 800e7be:	b29b      	uxth	r3, r3
 800e7c0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800e7c4:	4293      	cmp	r3, r2
 800e7c6:	bf28      	it	cs
 800e7c8:	4613      	movcs	r3, r2
 800e7ca:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800e7cc:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e7d0:	2114      	movs	r1, #20
 800e7d2:	200e      	movs	r0, #14
 800e7d4:	f7fc fa72 	bl	800acbc <pbuf_alloc>
 800e7d8:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 800e7da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7dc:	2b00      	cmp	r3, #0
 800e7de:	f000 80d4 	beq.w	800e98a <ip4_frag+0x262>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800e7e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7e4:	895b      	ldrh	r3, [r3, #10]
 800e7e6:	2b13      	cmp	r3, #19
 800e7e8:	d806      	bhi.n	800e7f8 <ip4_frag+0xd0>
 800e7ea:	4b6b      	ldr	r3, [pc, #428]	; (800e998 <ip4_frag+0x270>)
 800e7ec:	f240 3225 	movw	r2, #805	; 0x325
 800e7f0:	496c      	ldr	r1, [pc, #432]	; (800e9a4 <ip4_frag+0x27c>)
 800e7f2:	486b      	ldr	r0, [pc, #428]	; (800e9a0 <ip4_frag+0x278>)
 800e7f4:	f000 fbde 	bl	800efb4 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800e7f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7fa:	685b      	ldr	r3, [r3, #4]
 800e7fc:	2214      	movs	r2, #20
 800e7fe:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800e800:	4618      	mov	r0, r3
 800e802:	f000 fbc4 	bl	800ef8e <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800e806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e808:	685b      	ldr	r3, [r3, #4]
 800e80a:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 800e80c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e80e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 800e812:	e064      	b.n	800e8de <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 800e814:	68fb      	ldr	r3, [r7, #12]
 800e816:	895a      	ldrh	r2, [r3, #10]
 800e818:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800e81a:	1ad3      	subs	r3, r2, r3
 800e81c:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800e81e:	68fb      	ldr	r3, [r7, #12]
 800e820:	895b      	ldrh	r3, [r3, #10]
 800e822:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800e824:	429a      	cmp	r2, r3
 800e826:	d906      	bls.n	800e836 <ip4_frag+0x10e>
 800e828:	4b5b      	ldr	r3, [pc, #364]	; (800e998 <ip4_frag+0x270>)
 800e82a:	f240 322d 	movw	r2, #813	; 0x32d
 800e82e:	495e      	ldr	r1, [pc, #376]	; (800e9a8 <ip4_frag+0x280>)
 800e830:	485b      	ldr	r0, [pc, #364]	; (800e9a0 <ip4_frag+0x278>)
 800e832:	f000 fbbf 	bl	800efb4 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800e836:	8bfa      	ldrh	r2, [r7, #30]
 800e838:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800e83c:	4293      	cmp	r3, r2
 800e83e:	bf28      	it	cs
 800e840:	4613      	movcs	r3, r2
 800e842:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 800e846:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800e84a:	2b00      	cmp	r3, #0
 800e84c:	d105      	bne.n	800e85a <ip4_frag+0x132>
        poff = 0;
 800e84e:	2300      	movs	r3, #0
 800e850:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800e852:	68fb      	ldr	r3, [r7, #12]
 800e854:	681b      	ldr	r3, [r3, #0]
 800e856:	60fb      	str	r3, [r7, #12]
        continue;
 800e858:	e041      	b.n	800e8de <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 800e85a:	f7ff ff0d 	bl	800e678 <ip_frag_alloc_pbuf_custom_ref>
 800e85e:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 800e860:	69bb      	ldr	r3, [r7, #24]
 800e862:	2b00      	cmp	r3, #0
 800e864:	d103      	bne.n	800e86e <ip4_frag+0x146>
        pbuf_free(rambuf);
 800e866:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e868:	f7fc fd06 	bl	800b278 <pbuf_free>
        goto memerr;
 800e86c:	e08e      	b.n	800e98c <ip4_frag+0x264>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800e86e:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 800e870:	68fb      	ldr	r3, [r7, #12]
 800e872:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800e874:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800e876:	4413      	add	r3, r2
 800e878:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 800e87c:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800e880:	9201      	str	r2, [sp, #4]
 800e882:	9300      	str	r3, [sp, #0]
 800e884:	4603      	mov	r3, r0
 800e886:	2241      	movs	r2, #65	; 0x41
 800e888:	2000      	movs	r0, #0
 800e88a:	f7fc fb3b 	bl	800af04 <pbuf_alloced_custom>
 800e88e:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 800e890:	697b      	ldr	r3, [r7, #20]
 800e892:	2b00      	cmp	r3, #0
 800e894:	d106      	bne.n	800e8a4 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 800e896:	69b8      	ldr	r0, [r7, #24]
 800e898:	f7ff fef6 	bl	800e688 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800e89c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e89e:	f7fc fceb 	bl	800b278 <pbuf_free>
        goto memerr;
 800e8a2:	e073      	b.n	800e98c <ip4_frag+0x264>
      }
      pbuf_ref(p);
 800e8a4:	68f8      	ldr	r0, [r7, #12]
 800e8a6:	f7fc fd8d 	bl	800b3c4 <pbuf_ref>
      pcr->original = p;
 800e8aa:	69bb      	ldr	r3, [r7, #24]
 800e8ac:	68fa      	ldr	r2, [r7, #12]
 800e8ae:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800e8b0:	69bb      	ldr	r3, [r7, #24]
 800e8b2:	4a3e      	ldr	r2, [pc, #248]	; (800e9ac <ip4_frag+0x284>)
 800e8b4:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800e8b6:	6979      	ldr	r1, [r7, #20]
 800e8b8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e8ba:	f7fc fdab 	bl	800b414 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 800e8be:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 800e8c2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800e8c6:	1ad3      	subs	r3, r2, r3
 800e8c8:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 800e8cc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800e8d0:	2b00      	cmp	r3, #0
 800e8d2:	d004      	beq.n	800e8de <ip4_frag+0x1b6>
        poff = 0;
 800e8d4:	2300      	movs	r3, #0
 800e8d6:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800e8d8:	68fb      	ldr	r3, [r7, #12]
 800e8da:	681b      	ldr	r3, [r3, #0]
 800e8dc:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 800e8de:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800e8e2:	2b00      	cmp	r3, #0
 800e8e4:	d196      	bne.n	800e814 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 800e8e6:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800e8e8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800e8ec:	4413      	add	r3, r2
 800e8ee:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 800e8f0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800e8f4:	68bb      	ldr	r3, [r7, #8]
 800e8f6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800e8f8:	3b14      	subs	r3, #20
 800e8fa:	429a      	cmp	r2, r3
 800e8fc:	bfd4      	ite	le
 800e8fe:	2301      	movle	r3, #1
 800e900:	2300      	movgt	r3, #0
 800e902:	b2db      	uxtb	r3, r3
 800e904:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 800e906:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800e90a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e90e:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 800e910:	6a3b      	ldr	r3, [r7, #32]
 800e912:	2b00      	cmp	r3, #0
 800e914:	d002      	beq.n	800e91c <ip4_frag+0x1f4>
 800e916:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e918:	2b00      	cmp	r3, #0
 800e91a:	d003      	beq.n	800e924 <ip4_frag+0x1fc>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 800e91c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800e91e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800e922:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800e924:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800e926:	4618      	mov	r0, r3
 800e928:	f7fb f960 	bl	8009bec <lwip_htons>
 800e92c:	4603      	mov	r3, r0
 800e92e:	461a      	mov	r2, r3
 800e930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e932:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 800e934:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e936:	3314      	adds	r3, #20
 800e938:	b29b      	uxth	r3, r3
 800e93a:	4618      	mov	r0, r3
 800e93c:	f7fb f956 	bl	8009bec <lwip_htons>
 800e940:	4603      	mov	r3, r0
 800e942:	461a      	mov	r2, r3
 800e944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e946:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800e948:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e94a:	2200      	movs	r2, #0
 800e94c:	729a      	strb	r2, [r3, #10]
 800e94e:	2200      	movs	r2, #0
 800e950:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 800e952:	68bb      	ldr	r3, [r7, #8]
 800e954:	695b      	ldr	r3, [r3, #20]
 800e956:	687a      	ldr	r2, [r7, #4]
 800e958:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e95a:	68b8      	ldr	r0, [r7, #8]
 800e95c:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 800e95e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e960:	f7fc fc8a 	bl	800b278 <pbuf_free>
    left = (u16_t)(left - fragsize);
 800e964:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800e968:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e96a:	1ad3      	subs	r3, r2, r3
 800e96c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 800e970:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800e974:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800e976:	4413      	add	r3, r2
 800e978:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 800e97c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800e980:	2b00      	cmp	r3, #0
 800e982:	f47f af1a 	bne.w	800e7ba <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800e986:	2300      	movs	r3, #0
 800e988:	e002      	b.n	800e990 <ip4_frag+0x268>
      goto memerr;
 800e98a:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800e98c:	f04f 33ff 	mov.w	r3, #4294967295
}
 800e990:	4618      	mov	r0, r3
 800e992:	3748      	adds	r7, #72	; 0x48
 800e994:	46bd      	mov	sp, r7
 800e996:	bd80      	pop	{r7, pc}
 800e998:	08011cdc 	.word	0x08011cdc
 800e99c:	08011eb8 	.word	0x08011eb8
 800e9a0:	08011d24 	.word	0x08011d24
 800e9a4:	08011ed4 	.word	0x08011ed4
 800e9a8:	08011ef4 	.word	0x08011ef4
 800e9ac:	0800e6c1 	.word	0x0800e6c1

0800e9b0 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 800e9b0:	b580      	push	{r7, lr}
 800e9b2:	b086      	sub	sp, #24
 800e9b4:	af00      	add	r7, sp, #0
 800e9b6:	6078      	str	r0, [r7, #4]
 800e9b8:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 800e9ba:	230e      	movs	r3, #14
 800e9bc:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	895b      	ldrh	r3, [r3, #10]
 800e9c2:	2b0e      	cmp	r3, #14
 800e9c4:	d96e      	bls.n	800eaa4 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	7bdb      	ldrb	r3, [r3, #15]
 800e9ca:	2b00      	cmp	r3, #0
 800e9cc:	d106      	bne.n	800e9dc <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 800e9ce:	683b      	ldr	r3, [r7, #0]
 800e9d0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e9d4:	3301      	adds	r3, #1
 800e9d6:	b2da      	uxtb	r2, r3
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	685b      	ldr	r3, [r3, #4]
 800e9e0:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 800e9e2:	693b      	ldr	r3, [r7, #16]
 800e9e4:	7b1a      	ldrb	r2, [r3, #12]
 800e9e6:	7b5b      	ldrb	r3, [r3, #13]
 800e9e8:	021b      	lsls	r3, r3, #8
 800e9ea:	4313      	orrs	r3, r2
 800e9ec:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800e9ee:	693b      	ldr	r3, [r7, #16]
 800e9f0:	781b      	ldrb	r3, [r3, #0]
 800e9f2:	f003 0301 	and.w	r3, r3, #1
 800e9f6:	2b00      	cmp	r3, #0
 800e9f8:	d023      	beq.n	800ea42 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800e9fa:	693b      	ldr	r3, [r7, #16]
 800e9fc:	781b      	ldrb	r3, [r3, #0]
 800e9fe:	2b01      	cmp	r3, #1
 800ea00:	d10f      	bne.n	800ea22 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800ea02:	693b      	ldr	r3, [r7, #16]
 800ea04:	785b      	ldrb	r3, [r3, #1]
 800ea06:	2b00      	cmp	r3, #0
 800ea08:	d11b      	bne.n	800ea42 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 800ea0a:	693b      	ldr	r3, [r7, #16]
 800ea0c:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800ea0e:	2b5e      	cmp	r3, #94	; 0x5e
 800ea10:	d117      	bne.n	800ea42 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	7b5b      	ldrb	r3, [r3, #13]
 800ea16:	f043 0310 	orr.w	r3, r3, #16
 800ea1a:	b2da      	uxtb	r2, r3
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	735a      	strb	r2, [r3, #13]
 800ea20:	e00f      	b.n	800ea42 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800ea22:	693b      	ldr	r3, [r7, #16]
 800ea24:	2206      	movs	r2, #6
 800ea26:	4928      	ldr	r1, [pc, #160]	; (800eac8 <ethernet_input+0x118>)
 800ea28:	4618      	mov	r0, r3
 800ea2a:	f000 faa1 	bl	800ef70 <memcmp>
 800ea2e:	4603      	mov	r3, r0
 800ea30:	2b00      	cmp	r3, #0
 800ea32:	d106      	bne.n	800ea42 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800ea34:	687b      	ldr	r3, [r7, #4]
 800ea36:	7b5b      	ldrb	r3, [r3, #13]
 800ea38:	f043 0308 	orr.w	r3, r3, #8
 800ea3c:	b2da      	uxtb	r2, r3
 800ea3e:	687b      	ldr	r3, [r7, #4]
 800ea40:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 800ea42:	89fb      	ldrh	r3, [r7, #14]
 800ea44:	2b08      	cmp	r3, #8
 800ea46:	d003      	beq.n	800ea50 <ethernet_input+0xa0>
 800ea48:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 800ea4c:	d014      	beq.n	800ea78 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 800ea4e:	e032      	b.n	800eab6 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800ea50:	683b      	ldr	r3, [r7, #0]
 800ea52:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ea56:	f003 0308 	and.w	r3, r3, #8
 800ea5a:	2b00      	cmp	r3, #0
 800ea5c:	d024      	beq.n	800eaa8 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800ea5e:	8afb      	ldrh	r3, [r7, #22]
 800ea60:	4619      	mov	r1, r3
 800ea62:	6878      	ldr	r0, [r7, #4]
 800ea64:	f7fc fb82 	bl	800b16c <pbuf_remove_header>
 800ea68:	4603      	mov	r3, r0
 800ea6a:	2b00      	cmp	r3, #0
 800ea6c:	d11e      	bne.n	800eaac <ethernet_input+0xfc>
        ip4_input(p, netif);
 800ea6e:	6839      	ldr	r1, [r7, #0]
 800ea70:	6878      	ldr	r0, [r7, #4]
 800ea72:	f7fe fdef 	bl	800d654 <ip4_input>
      break;
 800ea76:	e013      	b.n	800eaa0 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800ea78:	683b      	ldr	r3, [r7, #0]
 800ea7a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ea7e:	f003 0308 	and.w	r3, r3, #8
 800ea82:	2b00      	cmp	r3, #0
 800ea84:	d014      	beq.n	800eab0 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800ea86:	8afb      	ldrh	r3, [r7, #22]
 800ea88:	4619      	mov	r1, r3
 800ea8a:	6878      	ldr	r0, [r7, #4]
 800ea8c:	f7fc fb6e 	bl	800b16c <pbuf_remove_header>
 800ea90:	4603      	mov	r3, r0
 800ea92:	2b00      	cmp	r3, #0
 800ea94:	d10e      	bne.n	800eab4 <ethernet_input+0x104>
        etharp_input(p, netif);
 800ea96:	6839      	ldr	r1, [r7, #0]
 800ea98:	6878      	ldr	r0, [r7, #4]
 800ea9a:	f7fd ff8f 	bl	800c9bc <etharp_input>
      break;
 800ea9e:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 800eaa0:	2300      	movs	r3, #0
 800eaa2:	e00c      	b.n	800eabe <ethernet_input+0x10e>
    goto free_and_return;
 800eaa4:	bf00      	nop
 800eaa6:	e006      	b.n	800eab6 <ethernet_input+0x106>
        goto free_and_return;
 800eaa8:	bf00      	nop
 800eaaa:	e004      	b.n	800eab6 <ethernet_input+0x106>
        goto free_and_return;
 800eaac:	bf00      	nop
 800eaae:	e002      	b.n	800eab6 <ethernet_input+0x106>
        goto free_and_return;
 800eab0:	bf00      	nop
 800eab2:	e000      	b.n	800eab6 <ethernet_input+0x106>
        goto free_and_return;
 800eab4:	bf00      	nop

free_and_return:
  pbuf_free(p);
 800eab6:	6878      	ldr	r0, [r7, #4]
 800eab8:	f7fc fbde 	bl	800b278 <pbuf_free>
  return ERR_OK;
 800eabc:	2300      	movs	r3, #0
}
 800eabe:	4618      	mov	r0, r3
 800eac0:	3718      	adds	r7, #24
 800eac2:	46bd      	mov	sp, r7
 800eac4:	bd80      	pop	{r7, pc}
 800eac6:	bf00      	nop
 800eac8:	080120a8 	.word	0x080120a8

0800eacc <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 800eacc:	b580      	push	{r7, lr}
 800eace:	b086      	sub	sp, #24
 800ead0:	af00      	add	r7, sp, #0
 800ead2:	60f8      	str	r0, [r7, #12]
 800ead4:	60b9      	str	r1, [r7, #8]
 800ead6:	607a      	str	r2, [r7, #4]
 800ead8:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800eada:	8c3b      	ldrh	r3, [r7, #32]
 800eadc:	4618      	mov	r0, r3
 800eade:	f7fb f885 	bl	8009bec <lwip_htons>
 800eae2:	4603      	mov	r3, r0
 800eae4:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 800eae6:	210e      	movs	r1, #14
 800eae8:	68b8      	ldr	r0, [r7, #8]
 800eaea:	f7fc fb2f 	bl	800b14c <pbuf_add_header>
 800eaee:	4603      	mov	r3, r0
 800eaf0:	2b00      	cmp	r3, #0
 800eaf2:	d125      	bne.n	800eb40 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 800eaf4:	68bb      	ldr	r3, [r7, #8]
 800eaf6:	685b      	ldr	r3, [r3, #4]
 800eaf8:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 800eafa:	693b      	ldr	r3, [r7, #16]
 800eafc:	8afa      	ldrh	r2, [r7, #22]
 800eafe:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 800eb00:	693b      	ldr	r3, [r7, #16]
 800eb02:	2206      	movs	r2, #6
 800eb04:	6839      	ldr	r1, [r7, #0]
 800eb06:	4618      	mov	r0, r3
 800eb08:	f000 fa41 	bl	800ef8e <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 800eb0c:	693b      	ldr	r3, [r7, #16]
 800eb0e:	3306      	adds	r3, #6
 800eb10:	2206      	movs	r2, #6
 800eb12:	6879      	ldr	r1, [r7, #4]
 800eb14:	4618      	mov	r0, r3
 800eb16:	f000 fa3a 	bl	800ef8e <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800eb1a:	68fb      	ldr	r3, [r7, #12]
 800eb1c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800eb20:	2b06      	cmp	r3, #6
 800eb22:	d006      	beq.n	800eb32 <ethernet_output+0x66>
 800eb24:	4b0a      	ldr	r3, [pc, #40]	; (800eb50 <ethernet_output+0x84>)
 800eb26:	f240 1233 	movw	r2, #307	; 0x133
 800eb2a:	490a      	ldr	r1, [pc, #40]	; (800eb54 <ethernet_output+0x88>)
 800eb2c:	480a      	ldr	r0, [pc, #40]	; (800eb58 <ethernet_output+0x8c>)
 800eb2e:	f000 fa41 	bl	800efb4 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800eb32:	68fb      	ldr	r3, [r7, #12]
 800eb34:	699b      	ldr	r3, [r3, #24]
 800eb36:	68b9      	ldr	r1, [r7, #8]
 800eb38:	68f8      	ldr	r0, [r7, #12]
 800eb3a:	4798      	blx	r3
 800eb3c:	4603      	mov	r3, r0
 800eb3e:	e002      	b.n	800eb46 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 800eb40:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 800eb42:	f06f 0301 	mvn.w	r3, #1
}
 800eb46:	4618      	mov	r0, r3
 800eb48:	3718      	adds	r7, #24
 800eb4a:	46bd      	mov	sp, r7
 800eb4c:	bd80      	pop	{r7, pc}
 800eb4e:	bf00      	nop
 800eb50:	08011f04 	.word	0x08011f04
 800eb54:	08011f3c 	.word	0x08011f3c
 800eb58:	08011f70 	.word	0x08011f70

0800eb5c <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 800eb5c:	b580      	push	{r7, lr}
 800eb5e:	b086      	sub	sp, #24
 800eb60:	af00      	add	r7, sp, #0
 800eb62:	6078      	str	r0, [r7, #4]
 800eb64:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 800eb66:	683b      	ldr	r3, [r7, #0]
 800eb68:	60bb      	str	r3, [r7, #8]
 800eb6a:	2304      	movs	r3, #4
 800eb6c:	60fb      	str	r3, [r7, #12]
 800eb6e:	2300      	movs	r3, #0
 800eb70:	613b      	str	r3, [r7, #16]
 800eb72:	2300      	movs	r3, #0
 800eb74:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 800eb76:	f107 0308 	add.w	r3, r7, #8
 800eb7a:	2100      	movs	r1, #0
 800eb7c:	4618      	mov	r0, r3
 800eb7e:	f7f6 fd68 	bl	8005652 <osMessageCreate>
 800eb82:	4602      	mov	r2, r0
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	681b      	ldr	r3, [r3, #0]
 800eb8c:	2b00      	cmp	r3, #0
 800eb8e:	d102      	bne.n	800eb96 <sys_mbox_new+0x3a>
    return ERR_MEM;
 800eb90:	f04f 33ff 	mov.w	r3, #4294967295
 800eb94:	e000      	b.n	800eb98 <sys_mbox_new+0x3c>

  return ERR_OK;
 800eb96:	2300      	movs	r3, #0
}
 800eb98:	4618      	mov	r0, r3
 800eb9a:	3718      	adds	r7, #24
 800eb9c:	46bd      	mov	sp, r7
 800eb9e:	bd80      	pop	{r7, pc}

0800eba0 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 800eba0:	b580      	push	{r7, lr}
 800eba2:	b082      	sub	sp, #8
 800eba4:	af00      	add	r7, sp, #0
 800eba6:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	681b      	ldr	r3, [r3, #0]
 800ebac:	4618      	mov	r0, r3
 800ebae:	f7f6 fe2d 	bl	800580c <osMessageWaiting>
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	681b      	ldr	r3, [r3, #0]
 800ebb6:	4618      	mov	r0, r3
 800ebb8:	f7f6 fe3e 	bl	8005838 <osMessageDelete>
  osMessageQueueDelete(*mbox);
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 800ebbc:	bf00      	nop
 800ebbe:	3708      	adds	r7, #8
 800ebc0:	46bd      	mov	sp, r7
 800ebc2:	bd80      	pop	{r7, pc}

0800ebc4 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 800ebc4:	b580      	push	{r7, lr}
 800ebc6:	b084      	sub	sp, #16
 800ebc8:	af00      	add	r7, sp, #0
 800ebca:	6078      	str	r0, [r7, #4]
 800ebcc:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	681b      	ldr	r3, [r3, #0]
 800ebd2:	6839      	ldr	r1, [r7, #0]
 800ebd4:	2200      	movs	r2, #0
 800ebd6:	4618      	mov	r0, r3
 800ebd8:	f7f6 fd64 	bl	80056a4 <osMessagePut>
 800ebdc:	4603      	mov	r3, r0
 800ebde:	2b00      	cmp	r3, #0
 800ebe0:	d102      	bne.n	800ebe8 <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 800ebe2:	2300      	movs	r3, #0
 800ebe4:	73fb      	strb	r3, [r7, #15]
 800ebe6:	e001      	b.n	800ebec <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 800ebe8:	23ff      	movs	r3, #255	; 0xff
 800ebea:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 800ebec:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ebf0:	4618      	mov	r0, r3
 800ebf2:	3710      	adds	r7, #16
 800ebf4:	46bd      	mov	sp, r7
 800ebf6:	bd80      	pop	{r7, pc}

0800ebf8 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 800ebf8:	b580      	push	{r7, lr}
 800ebfa:	b08c      	sub	sp, #48	; 0x30
 800ebfc:	af00      	add	r7, sp, #0
 800ebfe:	61f8      	str	r0, [r7, #28]
 800ec00:	61b9      	str	r1, [r7, #24]
 800ec02:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 800ec04:	f7f6 fb4e 	bl	80052a4 <osKernelSysTick>
 800ec08:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 800ec0a:	697b      	ldr	r3, [r7, #20]
 800ec0c:	2b00      	cmp	r3, #0
 800ec0e:	d017      	beq.n	800ec40 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 800ec10:	69fb      	ldr	r3, [r7, #28]
 800ec12:	6819      	ldr	r1, [r3, #0]
 800ec14:	f107 0320 	add.w	r3, r7, #32
 800ec18:	697a      	ldr	r2, [r7, #20]
 800ec1a:	4618      	mov	r0, r3
 800ec1c:	f7f6 fd82 	bl	8005724 <osMessageGet>

    if(event.status == osEventMessage)
 800ec20:	6a3b      	ldr	r3, [r7, #32]
 800ec22:	2b10      	cmp	r3, #16
 800ec24:	d109      	bne.n	800ec3a <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 800ec26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec28:	461a      	mov	r2, r3
 800ec2a:	69bb      	ldr	r3, [r7, #24]
 800ec2c:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 800ec2e:	f7f6 fb39 	bl	80052a4 <osKernelSysTick>
 800ec32:	4602      	mov	r2, r0
 800ec34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec36:	1ad3      	subs	r3, r2, r3
 800ec38:	e019      	b.n	800ec6e <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 800ec3a:	f04f 33ff 	mov.w	r3, #4294967295
 800ec3e:	e016      	b.n	800ec6e <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 800ec40:	69fb      	ldr	r3, [r7, #28]
 800ec42:	6819      	ldr	r1, [r3, #0]
 800ec44:	463b      	mov	r3, r7
 800ec46:	f04f 32ff 	mov.w	r2, #4294967295
 800ec4a:	4618      	mov	r0, r3
 800ec4c:	f7f6 fd6a 	bl	8005724 <osMessageGet>
 800ec50:	f107 0320 	add.w	r3, r7, #32
 800ec54:	463a      	mov	r2, r7
 800ec56:	ca07      	ldmia	r2, {r0, r1, r2}
 800ec58:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 800ec5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec5e:	461a      	mov	r2, r3
 800ec60:	69bb      	ldr	r3, [r7, #24]
 800ec62:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 800ec64:	f7f6 fb1e 	bl	80052a4 <osKernelSysTick>
 800ec68:	4602      	mov	r2, r0
 800ec6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec6c:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 800ec6e:	4618      	mov	r0, r3
 800ec70:	3730      	adds	r7, #48	; 0x30
 800ec72:	46bd      	mov	sp, r7
 800ec74:	bd80      	pop	{r7, pc}

0800ec76 <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 800ec76:	b580      	push	{r7, lr}
 800ec78:	b086      	sub	sp, #24
 800ec7a:	af00      	add	r7, sp, #0
 800ec7c:	6078      	str	r0, [r7, #4]
 800ec7e:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osEvent event;

  event = osMessageGet (*mbox, 0);
 800ec80:	687b      	ldr	r3, [r7, #4]
 800ec82:	6819      	ldr	r1, [r3, #0]
 800ec84:	f107 030c 	add.w	r3, r7, #12
 800ec88:	2200      	movs	r2, #0
 800ec8a:	4618      	mov	r0, r3
 800ec8c:	f7f6 fd4a 	bl	8005724 <osMessageGet>

  if(event.status == osEventMessage)
 800ec90:	68fb      	ldr	r3, [r7, #12]
 800ec92:	2b10      	cmp	r3, #16
 800ec94:	d105      	bne.n	800eca2 <sys_arch_mbox_tryfetch+0x2c>
  {
    *msg = (void *)event.value.v;
 800ec96:	693b      	ldr	r3, [r7, #16]
 800ec98:	461a      	mov	r2, r3
 800ec9a:	683b      	ldr	r3, [r7, #0]
 800ec9c:	601a      	str	r2, [r3, #0]
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
  {
#endif
    return ERR_OK;
 800ec9e:	2300      	movs	r3, #0
 800eca0:	e001      	b.n	800eca6 <sys_arch_mbox_tryfetch+0x30>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 800eca2:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 800eca6:	4618      	mov	r0, r3
 800eca8:	3718      	adds	r7, #24
 800ecaa:	46bd      	mov	sp, r7
 800ecac:	bd80      	pop	{r7, pc}

0800ecae <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 800ecae:	b480      	push	{r7}
 800ecb0:	b083      	sub	sp, #12
 800ecb2:	af00      	add	r7, sp, #0
 800ecb4:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	681b      	ldr	r3, [r3, #0]
 800ecba:	2b00      	cmp	r3, #0
 800ecbc:	d101      	bne.n	800ecc2 <sys_mbox_valid+0x14>
    return 0;
 800ecbe:	2300      	movs	r3, #0
 800ecc0:	e000      	b.n	800ecc4 <sys_mbox_valid+0x16>
  else
    return 1;
 800ecc2:	2301      	movs	r3, #1
}
 800ecc4:	4618      	mov	r0, r3
 800ecc6:	370c      	adds	r7, #12
 800ecc8:	46bd      	mov	sp, r7
 800ecca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecce:	4770      	bx	lr

0800ecd0 <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 800ecd0:	b480      	push	{r7}
 800ecd2:	b083      	sub	sp, #12
 800ecd4:	af00      	add	r7, sp, #0
 800ecd6:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 800ecd8:	687b      	ldr	r3, [r7, #4]
 800ecda:	2200      	movs	r2, #0
 800ecdc:	601a      	str	r2, [r3, #0]
}
 800ecde:	bf00      	nop
 800ece0:	370c      	adds	r7, #12
 800ece2:	46bd      	mov	sp, r7
 800ece4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ece8:	4770      	bx	lr

0800ecea <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 800ecea:	b580      	push	{r7, lr}
 800ecec:	b084      	sub	sp, #16
 800ecee:	af00      	add	r7, sp, #0
 800ecf0:	6078      	str	r0, [r7, #4]
 800ecf2:	460b      	mov	r3, r1
 800ecf4:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
 800ecf6:	2300      	movs	r3, #0
 800ecf8:	60bb      	str	r3, [r7, #8]
 800ecfa:	2300      	movs	r3, #0
 800ecfc:	60fb      	str	r3, [r7, #12]
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 800ecfe:	f107 0308 	add.w	r3, r7, #8
 800ed02:	2101      	movs	r1, #1
 800ed04:	4618      	mov	r0, r3
 800ed06:	f7f6 fbd9 	bl	80054bc <osSemaphoreCreate>
 800ed0a:	4602      	mov	r2, r0
 800ed0c:	687b      	ldr	r3, [r7, #4]
 800ed0e:	601a      	str	r2, [r3, #0]
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
#endif

  if(*sem == NULL)
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	681b      	ldr	r3, [r3, #0]
 800ed14:	2b00      	cmp	r3, #0
 800ed16:	d102      	bne.n	800ed1e <sys_sem_new+0x34>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 800ed18:	f04f 33ff 	mov.w	r3, #4294967295
 800ed1c:	e009      	b.n	800ed32 <sys_sem_new+0x48>
  }

  if(count == 0)	// Means it can't be taken
 800ed1e:	78fb      	ldrb	r3, [r7, #3]
 800ed20:	2b00      	cmp	r3, #0
 800ed22:	d105      	bne.n	800ed30 <sys_sem_new+0x46>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	681b      	ldr	r3, [r3, #0]
 800ed28:	2100      	movs	r1, #0
 800ed2a:	4618      	mov	r0, r3
 800ed2c:	f7f6 fbfa 	bl	8005524 <osSemaphoreWait>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 800ed30:	2300      	movs	r3, #0
}
 800ed32:	4618      	mov	r0, r3
 800ed34:	3710      	adds	r7, #16
 800ed36:	46bd      	mov	sp, r7
 800ed38:	bd80      	pop	{r7, pc}

0800ed3a <sys_sem_signal>:
}

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 800ed3a:	b580      	push	{r7, lr}
 800ed3c:	b082      	sub	sp, #8
 800ed3e:	af00      	add	r7, sp, #0
 800ed40:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 800ed42:	687b      	ldr	r3, [r7, #4]
 800ed44:	681b      	ldr	r3, [r3, #0]
 800ed46:	4618      	mov	r0, r3
 800ed48:	f7f6 fc3a 	bl	80055c0 <osSemaphoreRelease>
}
 800ed4c:	bf00      	nop
 800ed4e:	3708      	adds	r7, #8
 800ed50:	46bd      	mov	sp, r7
 800ed52:	bd80      	pop	{r7, pc}

0800ed54 <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 800ed54:	b580      	push	{r7, lr}
 800ed56:	b082      	sub	sp, #8
 800ed58:	af00      	add	r7, sp, #0
 800ed5a:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	681b      	ldr	r3, [r3, #0]
 800ed60:	4618      	mov	r0, r3
 800ed62:	f7f6 fc63 	bl	800562c <osSemaphoreDelete>
}
 800ed66:	bf00      	nop
 800ed68:	3708      	adds	r7, #8
 800ed6a:	46bd      	mov	sp, r7
 800ed6c:	bd80      	pop	{r7, pc}

0800ed6e <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 800ed6e:	b480      	push	{r7}
 800ed70:	b083      	sub	sp, #12
 800ed72:	af00      	add	r7, sp, #0
 800ed74:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	681b      	ldr	r3, [r3, #0]
 800ed7a:	2b00      	cmp	r3, #0
 800ed7c:	d101      	bne.n	800ed82 <sys_sem_valid+0x14>
    return 0;
 800ed7e:	2300      	movs	r3, #0
 800ed80:	e000      	b.n	800ed84 <sys_sem_valid+0x16>
  else
    return 1;
 800ed82:	2301      	movs	r3, #1
}
 800ed84:	4618      	mov	r0, r3
 800ed86:	370c      	adds	r7, #12
 800ed88:	46bd      	mov	sp, r7
 800ed8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed8e:	4770      	bx	lr

0800ed90 <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 800ed90:	b480      	push	{r7}
 800ed92:	b083      	sub	sp, #12
 800ed94:	af00      	add	r7, sp, #0
 800ed96:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	2200      	movs	r2, #0
 800ed9c:	601a      	str	r2, [r3, #0]
}
 800ed9e:	bf00      	nop
 800eda0:	370c      	adds	r7, #12
 800eda2:	46bd      	mov	sp, r7
 800eda4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eda8:	4770      	bx	lr
	...

0800edac <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 800edac:	b580      	push	{r7, lr}
 800edae:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 800edb0:	4803      	ldr	r0, [pc, #12]	; (800edc0 <sys_init+0x14>)
 800edb2:	f7f6 fae7 	bl	8005384 <osMutexCreate>
 800edb6:	4602      	mov	r2, r0
 800edb8:	4b02      	ldr	r3, [pc, #8]	; (800edc4 <sys_init+0x18>)
 800edba:	601a      	str	r2, [r3, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 800edbc:	bf00      	nop
 800edbe:	bd80      	pop	{r7, pc}
 800edc0:	080120b8 	.word	0x080120b8
 800edc4:	2000ceb4 	.word	0x2000ceb4

0800edc8 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 800edc8:	b580      	push	{r7, lr}
 800edca:	b084      	sub	sp, #16
 800edcc:	af00      	add	r7, sp, #0
 800edce:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 800edd0:	2300      	movs	r3, #0
 800edd2:	60bb      	str	r3, [r7, #8]
 800edd4:	2300      	movs	r3, #0
 800edd6:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 800edd8:	f107 0308 	add.w	r3, r7, #8
 800eddc:	4618      	mov	r0, r3
 800edde:	f7f6 fad1 	bl	8005384 <osMutexCreate>
 800ede2:	4602      	mov	r2, r0
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	681b      	ldr	r3, [r3, #0]
 800edec:	2b00      	cmp	r3, #0
 800edee:	d102      	bne.n	800edf6 <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 800edf0:	f04f 33ff 	mov.w	r3, #4294967295
 800edf4:	e000      	b.n	800edf8 <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 800edf6:	2300      	movs	r3, #0
}
 800edf8:	4618      	mov	r0, r3
 800edfa:	3710      	adds	r7, #16
 800edfc:	46bd      	mov	sp, r7
 800edfe:	bd80      	pop	{r7, pc}

0800ee00 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 800ee00:	b580      	push	{r7, lr}
 800ee02:	b082      	sub	sp, #8
 800ee04:	af00      	add	r7, sp, #0
 800ee06:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	681b      	ldr	r3, [r3, #0]
 800ee0c:	f04f 31ff 	mov.w	r1, #4294967295
 800ee10:	4618      	mov	r0, r3
 800ee12:	f7f6 facf 	bl	80053b4 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 800ee16:	bf00      	nop
 800ee18:	3708      	adds	r7, #8
 800ee1a:	46bd      	mov	sp, r7
 800ee1c:	bd80      	pop	{r7, pc}

0800ee1e <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 800ee1e:	b580      	push	{r7, lr}
 800ee20:	b082      	sub	sp, #8
 800ee22:	af00      	add	r7, sp, #0
 800ee24:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 800ee26:	687b      	ldr	r3, [r7, #4]
 800ee28:	681b      	ldr	r3, [r3, #0]
 800ee2a:	4618      	mov	r0, r3
 800ee2c:	f7f6 fb10 	bl	8005450 <osMutexRelease>
}
 800ee30:	bf00      	nop
 800ee32:	3708      	adds	r7, #8
 800ee34:	46bd      	mov	sp, r7
 800ee36:	bd80      	pop	{r7, pc}

0800ee38 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 800ee38:	b580      	push	{r7, lr}
 800ee3a:	b08c      	sub	sp, #48	; 0x30
 800ee3c:	af00      	add	r7, sp, #0
 800ee3e:	60f8      	str	r0, [r7, #12]
 800ee40:	60b9      	str	r1, [r7, #8]
 800ee42:	607a      	str	r2, [r7, #4]
 800ee44:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 800ee46:	f107 0314 	add.w	r3, r7, #20
 800ee4a:	2200      	movs	r2, #0
 800ee4c:	601a      	str	r2, [r3, #0]
 800ee4e:	605a      	str	r2, [r3, #4]
 800ee50:	609a      	str	r2, [r3, #8]
 800ee52:	60da      	str	r2, [r3, #12]
 800ee54:	611a      	str	r2, [r3, #16]
 800ee56:	615a      	str	r2, [r3, #20]
 800ee58:	619a      	str	r2, [r3, #24]
 800ee5a:	68fb      	ldr	r3, [r7, #12]
 800ee5c:	617b      	str	r3, [r7, #20]
 800ee5e:	68bb      	ldr	r3, [r7, #8]
 800ee60:	61bb      	str	r3, [r7, #24]
 800ee62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee64:	b21b      	sxth	r3, r3
 800ee66:	83bb      	strh	r3, [r7, #28]
 800ee68:	683b      	ldr	r3, [r7, #0]
 800ee6a:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 800ee6c:	f107 0314 	add.w	r3, r7, #20
 800ee70:	6879      	ldr	r1, [r7, #4]
 800ee72:	4618      	mov	r0, r3
 800ee74:	f7f6 fa26 	bl	80052c4 <osThreadCreate>
 800ee78:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 800ee7a:	4618      	mov	r0, r3
 800ee7c:	3730      	adds	r7, #48	; 0x30
 800ee7e:	46bd      	mov	sp, r7
 800ee80:	bd80      	pop	{r7, pc}
	...

0800ee84 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 800ee84:	b580      	push	{r7, lr}
 800ee86:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 800ee88:	4b04      	ldr	r3, [pc, #16]	; (800ee9c <sys_arch_protect+0x18>)
 800ee8a:	681b      	ldr	r3, [r3, #0]
 800ee8c:	f04f 31ff 	mov.w	r1, #4294967295
 800ee90:	4618      	mov	r0, r3
 800ee92:	f7f6 fa8f 	bl	80053b4 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 800ee96:	2301      	movs	r3, #1
}
 800ee98:	4618      	mov	r0, r3
 800ee9a:	bd80      	pop	{r7, pc}
 800ee9c:	2000ceb4 	.word	0x2000ceb4

0800eea0 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 800eea0:	b580      	push	{r7, lr}
 800eea2:	b082      	sub	sp, #8
 800eea4:	af00      	add	r7, sp, #0
 800eea6:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 800eea8:	4b04      	ldr	r3, [pc, #16]	; (800eebc <sys_arch_unprotect+0x1c>)
 800eeaa:	681b      	ldr	r3, [r3, #0]
 800eeac:	4618      	mov	r0, r3
 800eeae:	f7f6 facf 	bl	8005450 <osMutexRelease>
}
 800eeb2:	bf00      	nop
 800eeb4:	3708      	adds	r7, #8
 800eeb6:	46bd      	mov	sp, r7
 800eeb8:	bd80      	pop	{r7, pc}
 800eeba:	bf00      	nop
 800eebc:	2000ceb4 	.word	0x2000ceb4

0800eec0 <exit>:
 800eec0:	b508      	push	{r3, lr}
 800eec2:	4b07      	ldr	r3, [pc, #28]	; (800eee0 <exit+0x20>)
 800eec4:	4604      	mov	r4, r0
 800eec6:	b113      	cbz	r3, 800eece <exit+0xe>
 800eec8:	2100      	movs	r1, #0
 800eeca:	f3af 8000 	nop.w
 800eece:	4b05      	ldr	r3, [pc, #20]	; (800eee4 <exit+0x24>)
 800eed0:	6818      	ldr	r0, [r3, #0]
 800eed2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800eed4:	b103      	cbz	r3, 800eed8 <exit+0x18>
 800eed6:	4798      	blx	r3
 800eed8:	4620      	mov	r0, r4
 800eeda:	f000 ffd7 	bl	800fe8c <_exit>
 800eede:	bf00      	nop
 800eee0:	00000000 	.word	0x00000000
 800eee4:	080120c0 	.word	0x080120c0

0800eee8 <__libc_init_array>:
 800eee8:	b570      	push	{r4, r5, r6, lr}
 800eeea:	4e0d      	ldr	r6, [pc, #52]	; (800ef20 <__libc_init_array+0x38>)
 800eeec:	4c0d      	ldr	r4, [pc, #52]	; (800ef24 <__libc_init_array+0x3c>)
 800eeee:	1ba4      	subs	r4, r4, r6
 800eef0:	10a4      	asrs	r4, r4, #2
 800eef2:	2500      	movs	r5, #0
 800eef4:	42a5      	cmp	r5, r4
 800eef6:	d109      	bne.n	800ef0c <__libc_init_array+0x24>
 800eef8:	4e0b      	ldr	r6, [pc, #44]	; (800ef28 <__libc_init_array+0x40>)
 800eefa:	4c0c      	ldr	r4, [pc, #48]	; (800ef2c <__libc_init_array+0x44>)
 800eefc:	f000 ffc8 	bl	800fe90 <_init>
 800ef00:	1ba4      	subs	r4, r4, r6
 800ef02:	10a4      	asrs	r4, r4, #2
 800ef04:	2500      	movs	r5, #0
 800ef06:	42a5      	cmp	r5, r4
 800ef08:	d105      	bne.n	800ef16 <__libc_init_array+0x2e>
 800ef0a:	bd70      	pop	{r4, r5, r6, pc}
 800ef0c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ef10:	4798      	blx	r3
 800ef12:	3501      	adds	r5, #1
 800ef14:	e7ee      	b.n	800eef4 <__libc_init_array+0xc>
 800ef16:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ef1a:	4798      	blx	r3
 800ef1c:	3501      	adds	r5, #1
 800ef1e:	e7f2      	b.n	800ef06 <__libc_init_array+0x1e>
 800ef20:	0801226c 	.word	0x0801226c
 800ef24:	0801226c 	.word	0x0801226c
 800ef28:	0801226c 	.word	0x0801226c
 800ef2c:	08012270 	.word	0x08012270

0800ef30 <__locale_ctype_ptr>:
 800ef30:	4b04      	ldr	r3, [pc, #16]	; (800ef44 <__locale_ctype_ptr+0x14>)
 800ef32:	4a05      	ldr	r2, [pc, #20]	; (800ef48 <__locale_ctype_ptr+0x18>)
 800ef34:	681b      	ldr	r3, [r3, #0]
 800ef36:	6a1b      	ldr	r3, [r3, #32]
 800ef38:	2b00      	cmp	r3, #0
 800ef3a:	bf08      	it	eq
 800ef3c:	4613      	moveq	r3, r2
 800ef3e:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 800ef42:	4770      	bx	lr
 800ef44:	20000014 	.word	0x20000014
 800ef48:	20000078 	.word	0x20000078

0800ef4c <__ascii_mbtowc>:
 800ef4c:	b082      	sub	sp, #8
 800ef4e:	b901      	cbnz	r1, 800ef52 <__ascii_mbtowc+0x6>
 800ef50:	a901      	add	r1, sp, #4
 800ef52:	b142      	cbz	r2, 800ef66 <__ascii_mbtowc+0x1a>
 800ef54:	b14b      	cbz	r3, 800ef6a <__ascii_mbtowc+0x1e>
 800ef56:	7813      	ldrb	r3, [r2, #0]
 800ef58:	600b      	str	r3, [r1, #0]
 800ef5a:	7812      	ldrb	r2, [r2, #0]
 800ef5c:	1c10      	adds	r0, r2, #0
 800ef5e:	bf18      	it	ne
 800ef60:	2001      	movne	r0, #1
 800ef62:	b002      	add	sp, #8
 800ef64:	4770      	bx	lr
 800ef66:	4610      	mov	r0, r2
 800ef68:	e7fb      	b.n	800ef62 <__ascii_mbtowc+0x16>
 800ef6a:	f06f 0001 	mvn.w	r0, #1
 800ef6e:	e7f8      	b.n	800ef62 <__ascii_mbtowc+0x16>

0800ef70 <memcmp>:
 800ef70:	b530      	push	{r4, r5, lr}
 800ef72:	2400      	movs	r4, #0
 800ef74:	42a2      	cmp	r2, r4
 800ef76:	d101      	bne.n	800ef7c <memcmp+0xc>
 800ef78:	2000      	movs	r0, #0
 800ef7a:	e007      	b.n	800ef8c <memcmp+0x1c>
 800ef7c:	5d03      	ldrb	r3, [r0, r4]
 800ef7e:	3401      	adds	r4, #1
 800ef80:	190d      	adds	r5, r1, r4
 800ef82:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 800ef86:	42ab      	cmp	r3, r5
 800ef88:	d0f4      	beq.n	800ef74 <memcmp+0x4>
 800ef8a:	1b58      	subs	r0, r3, r5
 800ef8c:	bd30      	pop	{r4, r5, pc}

0800ef8e <memcpy>:
 800ef8e:	b510      	push	{r4, lr}
 800ef90:	1e43      	subs	r3, r0, #1
 800ef92:	440a      	add	r2, r1
 800ef94:	4291      	cmp	r1, r2
 800ef96:	d100      	bne.n	800ef9a <memcpy+0xc>
 800ef98:	bd10      	pop	{r4, pc}
 800ef9a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ef9e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800efa2:	e7f7      	b.n	800ef94 <memcpy+0x6>

0800efa4 <memset>:
 800efa4:	4402      	add	r2, r0
 800efa6:	4603      	mov	r3, r0
 800efa8:	4293      	cmp	r3, r2
 800efaa:	d100      	bne.n	800efae <memset+0xa>
 800efac:	4770      	bx	lr
 800efae:	f803 1b01 	strb.w	r1, [r3], #1
 800efb2:	e7f9      	b.n	800efa8 <memset+0x4>

0800efb4 <iprintf>:
 800efb4:	b40f      	push	{r0, r1, r2, r3}
 800efb6:	4b0a      	ldr	r3, [pc, #40]	; (800efe0 <iprintf+0x2c>)
 800efb8:	b513      	push	{r0, r1, r4, lr}
 800efba:	681c      	ldr	r4, [r3, #0]
 800efbc:	b124      	cbz	r4, 800efc8 <iprintf+0x14>
 800efbe:	69a3      	ldr	r3, [r4, #24]
 800efc0:	b913      	cbnz	r3, 800efc8 <iprintf+0x14>
 800efc2:	4620      	mov	r0, r4
 800efc4:	f000 f890 	bl	800f0e8 <__sinit>
 800efc8:	ab05      	add	r3, sp, #20
 800efca:	9a04      	ldr	r2, [sp, #16]
 800efcc:	68a1      	ldr	r1, [r4, #8]
 800efce:	9301      	str	r3, [sp, #4]
 800efd0:	4620      	mov	r0, r4
 800efd2:	f000 f9ed 	bl	800f3b0 <_vfiprintf_r>
 800efd6:	b002      	add	sp, #8
 800efd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800efdc:	b004      	add	sp, #16
 800efde:	4770      	bx	lr
 800efe0:	20000014 	.word	0x20000014

0800efe4 <rand>:
 800efe4:	b538      	push	{r3, r4, r5, lr}
 800efe6:	4b13      	ldr	r3, [pc, #76]	; (800f034 <rand+0x50>)
 800efe8:	681c      	ldr	r4, [r3, #0]
 800efea:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800efec:	b97b      	cbnz	r3, 800f00e <rand+0x2a>
 800efee:	2018      	movs	r0, #24
 800eff0:	f000 f904 	bl	800f1fc <malloc>
 800eff4:	4a10      	ldr	r2, [pc, #64]	; (800f038 <rand+0x54>)
 800eff6:	4b11      	ldr	r3, [pc, #68]	; (800f03c <rand+0x58>)
 800eff8:	63a0      	str	r0, [r4, #56]	; 0x38
 800effa:	e9c0 2300 	strd	r2, r3, [r0]
 800effe:	4b10      	ldr	r3, [pc, #64]	; (800f040 <rand+0x5c>)
 800f000:	6083      	str	r3, [r0, #8]
 800f002:	230b      	movs	r3, #11
 800f004:	8183      	strh	r3, [r0, #12]
 800f006:	2201      	movs	r2, #1
 800f008:	2300      	movs	r3, #0
 800f00a:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800f00e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800f010:	480c      	ldr	r0, [pc, #48]	; (800f044 <rand+0x60>)
 800f012:	690a      	ldr	r2, [r1, #16]
 800f014:	694b      	ldr	r3, [r1, #20]
 800f016:	4c0c      	ldr	r4, [pc, #48]	; (800f048 <rand+0x64>)
 800f018:	4350      	muls	r0, r2
 800f01a:	fb04 0003 	mla	r0, r4, r3, r0
 800f01e:	fba2 2304 	umull	r2, r3, r2, r4
 800f022:	4403      	add	r3, r0
 800f024:	1c54      	adds	r4, r2, #1
 800f026:	f143 0500 	adc.w	r5, r3, #0
 800f02a:	e9c1 4504 	strd	r4, r5, [r1, #16]
 800f02e:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 800f032:	bd38      	pop	{r3, r4, r5, pc}
 800f034:	20000014 	.word	0x20000014
 800f038:	abcd330e 	.word	0xabcd330e
 800f03c:	e66d1234 	.word	0xe66d1234
 800f040:	0005deec 	.word	0x0005deec
 800f044:	5851f42d 	.word	0x5851f42d
 800f048:	4c957f2d 	.word	0x4c957f2d

0800f04c <__ascii_wctomb>:
 800f04c:	b149      	cbz	r1, 800f062 <__ascii_wctomb+0x16>
 800f04e:	2aff      	cmp	r2, #255	; 0xff
 800f050:	bf85      	ittet	hi
 800f052:	238a      	movhi	r3, #138	; 0x8a
 800f054:	6003      	strhi	r3, [r0, #0]
 800f056:	700a      	strbls	r2, [r1, #0]
 800f058:	f04f 30ff 	movhi.w	r0, #4294967295
 800f05c:	bf98      	it	ls
 800f05e:	2001      	movls	r0, #1
 800f060:	4770      	bx	lr
 800f062:	4608      	mov	r0, r1
 800f064:	4770      	bx	lr
	...

0800f068 <std>:
 800f068:	2300      	movs	r3, #0
 800f06a:	b510      	push	{r4, lr}
 800f06c:	4604      	mov	r4, r0
 800f06e:	e9c0 3300 	strd	r3, r3, [r0]
 800f072:	6083      	str	r3, [r0, #8]
 800f074:	8181      	strh	r1, [r0, #12]
 800f076:	6643      	str	r3, [r0, #100]	; 0x64
 800f078:	81c2      	strh	r2, [r0, #14]
 800f07a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f07e:	6183      	str	r3, [r0, #24]
 800f080:	4619      	mov	r1, r3
 800f082:	2208      	movs	r2, #8
 800f084:	305c      	adds	r0, #92	; 0x5c
 800f086:	f7ff ff8d 	bl	800efa4 <memset>
 800f08a:	4b05      	ldr	r3, [pc, #20]	; (800f0a0 <std+0x38>)
 800f08c:	6263      	str	r3, [r4, #36]	; 0x24
 800f08e:	4b05      	ldr	r3, [pc, #20]	; (800f0a4 <std+0x3c>)
 800f090:	62a3      	str	r3, [r4, #40]	; 0x28
 800f092:	4b05      	ldr	r3, [pc, #20]	; (800f0a8 <std+0x40>)
 800f094:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f096:	4b05      	ldr	r3, [pc, #20]	; (800f0ac <std+0x44>)
 800f098:	6224      	str	r4, [r4, #32]
 800f09a:	6323      	str	r3, [r4, #48]	; 0x30
 800f09c:	bd10      	pop	{r4, pc}
 800f09e:	bf00      	nop
 800f0a0:	0800f90d 	.word	0x0800f90d
 800f0a4:	0800f92f 	.word	0x0800f92f
 800f0a8:	0800f967 	.word	0x0800f967
 800f0ac:	0800f98b 	.word	0x0800f98b

0800f0b0 <_cleanup_r>:
 800f0b0:	4901      	ldr	r1, [pc, #4]	; (800f0b8 <_cleanup_r+0x8>)
 800f0b2:	f000 b885 	b.w	800f1c0 <_fwalk_reent>
 800f0b6:	bf00      	nop
 800f0b8:	0800fc65 	.word	0x0800fc65

0800f0bc <__sfmoreglue>:
 800f0bc:	b570      	push	{r4, r5, r6, lr}
 800f0be:	1e4a      	subs	r2, r1, #1
 800f0c0:	2568      	movs	r5, #104	; 0x68
 800f0c2:	4355      	muls	r5, r2
 800f0c4:	460e      	mov	r6, r1
 800f0c6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800f0ca:	f000 f8ed 	bl	800f2a8 <_malloc_r>
 800f0ce:	4604      	mov	r4, r0
 800f0d0:	b140      	cbz	r0, 800f0e4 <__sfmoreglue+0x28>
 800f0d2:	2100      	movs	r1, #0
 800f0d4:	e9c0 1600 	strd	r1, r6, [r0]
 800f0d8:	300c      	adds	r0, #12
 800f0da:	60a0      	str	r0, [r4, #8]
 800f0dc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800f0e0:	f7ff ff60 	bl	800efa4 <memset>
 800f0e4:	4620      	mov	r0, r4
 800f0e6:	bd70      	pop	{r4, r5, r6, pc}

0800f0e8 <__sinit>:
 800f0e8:	6983      	ldr	r3, [r0, #24]
 800f0ea:	b510      	push	{r4, lr}
 800f0ec:	4604      	mov	r4, r0
 800f0ee:	bb33      	cbnz	r3, 800f13e <__sinit+0x56>
 800f0f0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800f0f4:	6503      	str	r3, [r0, #80]	; 0x50
 800f0f6:	4b12      	ldr	r3, [pc, #72]	; (800f140 <__sinit+0x58>)
 800f0f8:	4a12      	ldr	r2, [pc, #72]	; (800f144 <__sinit+0x5c>)
 800f0fa:	681b      	ldr	r3, [r3, #0]
 800f0fc:	6282      	str	r2, [r0, #40]	; 0x28
 800f0fe:	4298      	cmp	r0, r3
 800f100:	bf04      	itt	eq
 800f102:	2301      	moveq	r3, #1
 800f104:	6183      	streq	r3, [r0, #24]
 800f106:	f000 f81f 	bl	800f148 <__sfp>
 800f10a:	6060      	str	r0, [r4, #4]
 800f10c:	4620      	mov	r0, r4
 800f10e:	f000 f81b 	bl	800f148 <__sfp>
 800f112:	60a0      	str	r0, [r4, #8]
 800f114:	4620      	mov	r0, r4
 800f116:	f000 f817 	bl	800f148 <__sfp>
 800f11a:	2200      	movs	r2, #0
 800f11c:	60e0      	str	r0, [r4, #12]
 800f11e:	2104      	movs	r1, #4
 800f120:	6860      	ldr	r0, [r4, #4]
 800f122:	f7ff ffa1 	bl	800f068 <std>
 800f126:	2201      	movs	r2, #1
 800f128:	2109      	movs	r1, #9
 800f12a:	68a0      	ldr	r0, [r4, #8]
 800f12c:	f7ff ff9c 	bl	800f068 <std>
 800f130:	2202      	movs	r2, #2
 800f132:	2112      	movs	r1, #18
 800f134:	68e0      	ldr	r0, [r4, #12]
 800f136:	f7ff ff97 	bl	800f068 <std>
 800f13a:	2301      	movs	r3, #1
 800f13c:	61a3      	str	r3, [r4, #24]
 800f13e:	bd10      	pop	{r4, pc}
 800f140:	080120c0 	.word	0x080120c0
 800f144:	0800f0b1 	.word	0x0800f0b1

0800f148 <__sfp>:
 800f148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f14a:	4b1b      	ldr	r3, [pc, #108]	; (800f1b8 <__sfp+0x70>)
 800f14c:	681e      	ldr	r6, [r3, #0]
 800f14e:	69b3      	ldr	r3, [r6, #24]
 800f150:	4607      	mov	r7, r0
 800f152:	b913      	cbnz	r3, 800f15a <__sfp+0x12>
 800f154:	4630      	mov	r0, r6
 800f156:	f7ff ffc7 	bl	800f0e8 <__sinit>
 800f15a:	3648      	adds	r6, #72	; 0x48
 800f15c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800f160:	3b01      	subs	r3, #1
 800f162:	d503      	bpl.n	800f16c <__sfp+0x24>
 800f164:	6833      	ldr	r3, [r6, #0]
 800f166:	b133      	cbz	r3, 800f176 <__sfp+0x2e>
 800f168:	6836      	ldr	r6, [r6, #0]
 800f16a:	e7f7      	b.n	800f15c <__sfp+0x14>
 800f16c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800f170:	b16d      	cbz	r5, 800f18e <__sfp+0x46>
 800f172:	3468      	adds	r4, #104	; 0x68
 800f174:	e7f4      	b.n	800f160 <__sfp+0x18>
 800f176:	2104      	movs	r1, #4
 800f178:	4638      	mov	r0, r7
 800f17a:	f7ff ff9f 	bl	800f0bc <__sfmoreglue>
 800f17e:	6030      	str	r0, [r6, #0]
 800f180:	2800      	cmp	r0, #0
 800f182:	d1f1      	bne.n	800f168 <__sfp+0x20>
 800f184:	230c      	movs	r3, #12
 800f186:	603b      	str	r3, [r7, #0]
 800f188:	4604      	mov	r4, r0
 800f18a:	4620      	mov	r0, r4
 800f18c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f18e:	4b0b      	ldr	r3, [pc, #44]	; (800f1bc <__sfp+0x74>)
 800f190:	6665      	str	r5, [r4, #100]	; 0x64
 800f192:	e9c4 5500 	strd	r5, r5, [r4]
 800f196:	60a5      	str	r5, [r4, #8]
 800f198:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800f19c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800f1a0:	2208      	movs	r2, #8
 800f1a2:	4629      	mov	r1, r5
 800f1a4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800f1a8:	f7ff fefc 	bl	800efa4 <memset>
 800f1ac:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800f1b0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800f1b4:	e7e9      	b.n	800f18a <__sfp+0x42>
 800f1b6:	bf00      	nop
 800f1b8:	080120c0 	.word	0x080120c0
 800f1bc:	ffff0001 	.word	0xffff0001

0800f1c0 <_fwalk_reent>:
 800f1c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f1c4:	4680      	mov	r8, r0
 800f1c6:	4689      	mov	r9, r1
 800f1c8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800f1cc:	2600      	movs	r6, #0
 800f1ce:	b914      	cbnz	r4, 800f1d6 <_fwalk_reent+0x16>
 800f1d0:	4630      	mov	r0, r6
 800f1d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f1d6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800f1da:	3f01      	subs	r7, #1
 800f1dc:	d501      	bpl.n	800f1e2 <_fwalk_reent+0x22>
 800f1de:	6824      	ldr	r4, [r4, #0]
 800f1e0:	e7f5      	b.n	800f1ce <_fwalk_reent+0xe>
 800f1e2:	89ab      	ldrh	r3, [r5, #12]
 800f1e4:	2b01      	cmp	r3, #1
 800f1e6:	d907      	bls.n	800f1f8 <_fwalk_reent+0x38>
 800f1e8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f1ec:	3301      	adds	r3, #1
 800f1ee:	d003      	beq.n	800f1f8 <_fwalk_reent+0x38>
 800f1f0:	4629      	mov	r1, r5
 800f1f2:	4640      	mov	r0, r8
 800f1f4:	47c8      	blx	r9
 800f1f6:	4306      	orrs	r6, r0
 800f1f8:	3568      	adds	r5, #104	; 0x68
 800f1fa:	e7ee      	b.n	800f1da <_fwalk_reent+0x1a>

0800f1fc <malloc>:
 800f1fc:	4b02      	ldr	r3, [pc, #8]	; (800f208 <malloc+0xc>)
 800f1fe:	4601      	mov	r1, r0
 800f200:	6818      	ldr	r0, [r3, #0]
 800f202:	f000 b851 	b.w	800f2a8 <_malloc_r>
 800f206:	bf00      	nop
 800f208:	20000014 	.word	0x20000014

0800f20c <_free_r>:
 800f20c:	b538      	push	{r3, r4, r5, lr}
 800f20e:	4605      	mov	r5, r0
 800f210:	2900      	cmp	r1, #0
 800f212:	d045      	beq.n	800f2a0 <_free_r+0x94>
 800f214:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f218:	1f0c      	subs	r4, r1, #4
 800f21a:	2b00      	cmp	r3, #0
 800f21c:	bfb8      	it	lt
 800f21e:	18e4      	addlt	r4, r4, r3
 800f220:	f000 fdc0 	bl	800fda4 <__malloc_lock>
 800f224:	4a1f      	ldr	r2, [pc, #124]	; (800f2a4 <_free_r+0x98>)
 800f226:	6813      	ldr	r3, [r2, #0]
 800f228:	4610      	mov	r0, r2
 800f22a:	b933      	cbnz	r3, 800f23a <_free_r+0x2e>
 800f22c:	6063      	str	r3, [r4, #4]
 800f22e:	6014      	str	r4, [r2, #0]
 800f230:	4628      	mov	r0, r5
 800f232:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f236:	f000 bdb6 	b.w	800fda6 <__malloc_unlock>
 800f23a:	42a3      	cmp	r3, r4
 800f23c:	d90c      	bls.n	800f258 <_free_r+0x4c>
 800f23e:	6821      	ldr	r1, [r4, #0]
 800f240:	1862      	adds	r2, r4, r1
 800f242:	4293      	cmp	r3, r2
 800f244:	bf04      	itt	eq
 800f246:	681a      	ldreq	r2, [r3, #0]
 800f248:	685b      	ldreq	r3, [r3, #4]
 800f24a:	6063      	str	r3, [r4, #4]
 800f24c:	bf04      	itt	eq
 800f24e:	1852      	addeq	r2, r2, r1
 800f250:	6022      	streq	r2, [r4, #0]
 800f252:	6004      	str	r4, [r0, #0]
 800f254:	e7ec      	b.n	800f230 <_free_r+0x24>
 800f256:	4613      	mov	r3, r2
 800f258:	685a      	ldr	r2, [r3, #4]
 800f25a:	b10a      	cbz	r2, 800f260 <_free_r+0x54>
 800f25c:	42a2      	cmp	r2, r4
 800f25e:	d9fa      	bls.n	800f256 <_free_r+0x4a>
 800f260:	6819      	ldr	r1, [r3, #0]
 800f262:	1858      	adds	r0, r3, r1
 800f264:	42a0      	cmp	r0, r4
 800f266:	d10b      	bne.n	800f280 <_free_r+0x74>
 800f268:	6820      	ldr	r0, [r4, #0]
 800f26a:	4401      	add	r1, r0
 800f26c:	1858      	adds	r0, r3, r1
 800f26e:	4282      	cmp	r2, r0
 800f270:	6019      	str	r1, [r3, #0]
 800f272:	d1dd      	bne.n	800f230 <_free_r+0x24>
 800f274:	6810      	ldr	r0, [r2, #0]
 800f276:	6852      	ldr	r2, [r2, #4]
 800f278:	605a      	str	r2, [r3, #4]
 800f27a:	4401      	add	r1, r0
 800f27c:	6019      	str	r1, [r3, #0]
 800f27e:	e7d7      	b.n	800f230 <_free_r+0x24>
 800f280:	d902      	bls.n	800f288 <_free_r+0x7c>
 800f282:	230c      	movs	r3, #12
 800f284:	602b      	str	r3, [r5, #0]
 800f286:	e7d3      	b.n	800f230 <_free_r+0x24>
 800f288:	6820      	ldr	r0, [r4, #0]
 800f28a:	1821      	adds	r1, r4, r0
 800f28c:	428a      	cmp	r2, r1
 800f28e:	bf04      	itt	eq
 800f290:	6811      	ldreq	r1, [r2, #0]
 800f292:	6852      	ldreq	r2, [r2, #4]
 800f294:	6062      	str	r2, [r4, #4]
 800f296:	bf04      	itt	eq
 800f298:	1809      	addeq	r1, r1, r0
 800f29a:	6021      	streq	r1, [r4, #0]
 800f29c:	605c      	str	r4, [r3, #4]
 800f29e:	e7c7      	b.n	800f230 <_free_r+0x24>
 800f2a0:	bd38      	pop	{r3, r4, r5, pc}
 800f2a2:	bf00      	nop
 800f2a4:	200048a8 	.word	0x200048a8

0800f2a8 <_malloc_r>:
 800f2a8:	b570      	push	{r4, r5, r6, lr}
 800f2aa:	1ccd      	adds	r5, r1, #3
 800f2ac:	f025 0503 	bic.w	r5, r5, #3
 800f2b0:	3508      	adds	r5, #8
 800f2b2:	2d0c      	cmp	r5, #12
 800f2b4:	bf38      	it	cc
 800f2b6:	250c      	movcc	r5, #12
 800f2b8:	2d00      	cmp	r5, #0
 800f2ba:	4606      	mov	r6, r0
 800f2bc:	db01      	blt.n	800f2c2 <_malloc_r+0x1a>
 800f2be:	42a9      	cmp	r1, r5
 800f2c0:	d903      	bls.n	800f2ca <_malloc_r+0x22>
 800f2c2:	230c      	movs	r3, #12
 800f2c4:	6033      	str	r3, [r6, #0]
 800f2c6:	2000      	movs	r0, #0
 800f2c8:	bd70      	pop	{r4, r5, r6, pc}
 800f2ca:	f000 fd6b 	bl	800fda4 <__malloc_lock>
 800f2ce:	4a21      	ldr	r2, [pc, #132]	; (800f354 <_malloc_r+0xac>)
 800f2d0:	6814      	ldr	r4, [r2, #0]
 800f2d2:	4621      	mov	r1, r4
 800f2d4:	b991      	cbnz	r1, 800f2fc <_malloc_r+0x54>
 800f2d6:	4c20      	ldr	r4, [pc, #128]	; (800f358 <_malloc_r+0xb0>)
 800f2d8:	6823      	ldr	r3, [r4, #0]
 800f2da:	b91b      	cbnz	r3, 800f2e4 <_malloc_r+0x3c>
 800f2dc:	4630      	mov	r0, r6
 800f2de:	f000 fb05 	bl	800f8ec <_sbrk_r>
 800f2e2:	6020      	str	r0, [r4, #0]
 800f2e4:	4629      	mov	r1, r5
 800f2e6:	4630      	mov	r0, r6
 800f2e8:	f000 fb00 	bl	800f8ec <_sbrk_r>
 800f2ec:	1c43      	adds	r3, r0, #1
 800f2ee:	d124      	bne.n	800f33a <_malloc_r+0x92>
 800f2f0:	230c      	movs	r3, #12
 800f2f2:	6033      	str	r3, [r6, #0]
 800f2f4:	4630      	mov	r0, r6
 800f2f6:	f000 fd56 	bl	800fda6 <__malloc_unlock>
 800f2fa:	e7e4      	b.n	800f2c6 <_malloc_r+0x1e>
 800f2fc:	680b      	ldr	r3, [r1, #0]
 800f2fe:	1b5b      	subs	r3, r3, r5
 800f300:	d418      	bmi.n	800f334 <_malloc_r+0x8c>
 800f302:	2b0b      	cmp	r3, #11
 800f304:	d90f      	bls.n	800f326 <_malloc_r+0x7e>
 800f306:	600b      	str	r3, [r1, #0]
 800f308:	50cd      	str	r5, [r1, r3]
 800f30a:	18cc      	adds	r4, r1, r3
 800f30c:	4630      	mov	r0, r6
 800f30e:	f000 fd4a 	bl	800fda6 <__malloc_unlock>
 800f312:	f104 000b 	add.w	r0, r4, #11
 800f316:	1d23      	adds	r3, r4, #4
 800f318:	f020 0007 	bic.w	r0, r0, #7
 800f31c:	1ac3      	subs	r3, r0, r3
 800f31e:	d0d3      	beq.n	800f2c8 <_malloc_r+0x20>
 800f320:	425a      	negs	r2, r3
 800f322:	50e2      	str	r2, [r4, r3]
 800f324:	e7d0      	b.n	800f2c8 <_malloc_r+0x20>
 800f326:	428c      	cmp	r4, r1
 800f328:	684b      	ldr	r3, [r1, #4]
 800f32a:	bf16      	itet	ne
 800f32c:	6063      	strne	r3, [r4, #4]
 800f32e:	6013      	streq	r3, [r2, #0]
 800f330:	460c      	movne	r4, r1
 800f332:	e7eb      	b.n	800f30c <_malloc_r+0x64>
 800f334:	460c      	mov	r4, r1
 800f336:	6849      	ldr	r1, [r1, #4]
 800f338:	e7cc      	b.n	800f2d4 <_malloc_r+0x2c>
 800f33a:	1cc4      	adds	r4, r0, #3
 800f33c:	f024 0403 	bic.w	r4, r4, #3
 800f340:	42a0      	cmp	r0, r4
 800f342:	d005      	beq.n	800f350 <_malloc_r+0xa8>
 800f344:	1a21      	subs	r1, r4, r0
 800f346:	4630      	mov	r0, r6
 800f348:	f000 fad0 	bl	800f8ec <_sbrk_r>
 800f34c:	3001      	adds	r0, #1
 800f34e:	d0cf      	beq.n	800f2f0 <_malloc_r+0x48>
 800f350:	6025      	str	r5, [r4, #0]
 800f352:	e7db      	b.n	800f30c <_malloc_r+0x64>
 800f354:	200048a8 	.word	0x200048a8
 800f358:	200048ac 	.word	0x200048ac

0800f35c <__sfputc_r>:
 800f35c:	6893      	ldr	r3, [r2, #8]
 800f35e:	3b01      	subs	r3, #1
 800f360:	2b00      	cmp	r3, #0
 800f362:	b410      	push	{r4}
 800f364:	6093      	str	r3, [r2, #8]
 800f366:	da08      	bge.n	800f37a <__sfputc_r+0x1e>
 800f368:	6994      	ldr	r4, [r2, #24]
 800f36a:	42a3      	cmp	r3, r4
 800f36c:	db01      	blt.n	800f372 <__sfputc_r+0x16>
 800f36e:	290a      	cmp	r1, #10
 800f370:	d103      	bne.n	800f37a <__sfputc_r+0x1e>
 800f372:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f376:	f000 bb0d 	b.w	800f994 <__swbuf_r>
 800f37a:	6813      	ldr	r3, [r2, #0]
 800f37c:	1c58      	adds	r0, r3, #1
 800f37e:	6010      	str	r0, [r2, #0]
 800f380:	7019      	strb	r1, [r3, #0]
 800f382:	4608      	mov	r0, r1
 800f384:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f388:	4770      	bx	lr

0800f38a <__sfputs_r>:
 800f38a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f38c:	4606      	mov	r6, r0
 800f38e:	460f      	mov	r7, r1
 800f390:	4614      	mov	r4, r2
 800f392:	18d5      	adds	r5, r2, r3
 800f394:	42ac      	cmp	r4, r5
 800f396:	d101      	bne.n	800f39c <__sfputs_r+0x12>
 800f398:	2000      	movs	r0, #0
 800f39a:	e007      	b.n	800f3ac <__sfputs_r+0x22>
 800f39c:	463a      	mov	r2, r7
 800f39e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f3a2:	4630      	mov	r0, r6
 800f3a4:	f7ff ffda 	bl	800f35c <__sfputc_r>
 800f3a8:	1c43      	adds	r3, r0, #1
 800f3aa:	d1f3      	bne.n	800f394 <__sfputs_r+0xa>
 800f3ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f3b0 <_vfiprintf_r>:
 800f3b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f3b4:	460c      	mov	r4, r1
 800f3b6:	b09d      	sub	sp, #116	; 0x74
 800f3b8:	4617      	mov	r7, r2
 800f3ba:	461d      	mov	r5, r3
 800f3bc:	4606      	mov	r6, r0
 800f3be:	b118      	cbz	r0, 800f3c8 <_vfiprintf_r+0x18>
 800f3c0:	6983      	ldr	r3, [r0, #24]
 800f3c2:	b90b      	cbnz	r3, 800f3c8 <_vfiprintf_r+0x18>
 800f3c4:	f7ff fe90 	bl	800f0e8 <__sinit>
 800f3c8:	4b7c      	ldr	r3, [pc, #496]	; (800f5bc <_vfiprintf_r+0x20c>)
 800f3ca:	429c      	cmp	r4, r3
 800f3cc:	d158      	bne.n	800f480 <_vfiprintf_r+0xd0>
 800f3ce:	6874      	ldr	r4, [r6, #4]
 800f3d0:	89a3      	ldrh	r3, [r4, #12]
 800f3d2:	0718      	lsls	r0, r3, #28
 800f3d4:	d55e      	bpl.n	800f494 <_vfiprintf_r+0xe4>
 800f3d6:	6923      	ldr	r3, [r4, #16]
 800f3d8:	2b00      	cmp	r3, #0
 800f3da:	d05b      	beq.n	800f494 <_vfiprintf_r+0xe4>
 800f3dc:	2300      	movs	r3, #0
 800f3de:	9309      	str	r3, [sp, #36]	; 0x24
 800f3e0:	2320      	movs	r3, #32
 800f3e2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f3e6:	2330      	movs	r3, #48	; 0x30
 800f3e8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f3ec:	9503      	str	r5, [sp, #12]
 800f3ee:	f04f 0b01 	mov.w	fp, #1
 800f3f2:	46b8      	mov	r8, r7
 800f3f4:	4645      	mov	r5, r8
 800f3f6:	f815 3b01 	ldrb.w	r3, [r5], #1
 800f3fa:	b10b      	cbz	r3, 800f400 <_vfiprintf_r+0x50>
 800f3fc:	2b25      	cmp	r3, #37	; 0x25
 800f3fe:	d154      	bne.n	800f4aa <_vfiprintf_r+0xfa>
 800f400:	ebb8 0a07 	subs.w	sl, r8, r7
 800f404:	d00b      	beq.n	800f41e <_vfiprintf_r+0x6e>
 800f406:	4653      	mov	r3, sl
 800f408:	463a      	mov	r2, r7
 800f40a:	4621      	mov	r1, r4
 800f40c:	4630      	mov	r0, r6
 800f40e:	f7ff ffbc 	bl	800f38a <__sfputs_r>
 800f412:	3001      	adds	r0, #1
 800f414:	f000 80c2 	beq.w	800f59c <_vfiprintf_r+0x1ec>
 800f418:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f41a:	4453      	add	r3, sl
 800f41c:	9309      	str	r3, [sp, #36]	; 0x24
 800f41e:	f898 3000 	ldrb.w	r3, [r8]
 800f422:	2b00      	cmp	r3, #0
 800f424:	f000 80ba 	beq.w	800f59c <_vfiprintf_r+0x1ec>
 800f428:	2300      	movs	r3, #0
 800f42a:	f04f 32ff 	mov.w	r2, #4294967295
 800f42e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f432:	9304      	str	r3, [sp, #16]
 800f434:	9307      	str	r3, [sp, #28]
 800f436:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f43a:	931a      	str	r3, [sp, #104]	; 0x68
 800f43c:	46a8      	mov	r8, r5
 800f43e:	2205      	movs	r2, #5
 800f440:	f818 1b01 	ldrb.w	r1, [r8], #1
 800f444:	485e      	ldr	r0, [pc, #376]	; (800f5c0 <_vfiprintf_r+0x210>)
 800f446:	f7f0 ff03 	bl	8000250 <memchr>
 800f44a:	9b04      	ldr	r3, [sp, #16]
 800f44c:	bb78      	cbnz	r0, 800f4ae <_vfiprintf_r+0xfe>
 800f44e:	06d9      	lsls	r1, r3, #27
 800f450:	bf44      	itt	mi
 800f452:	2220      	movmi	r2, #32
 800f454:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800f458:	071a      	lsls	r2, r3, #28
 800f45a:	bf44      	itt	mi
 800f45c:	222b      	movmi	r2, #43	; 0x2b
 800f45e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800f462:	782a      	ldrb	r2, [r5, #0]
 800f464:	2a2a      	cmp	r2, #42	; 0x2a
 800f466:	d02a      	beq.n	800f4be <_vfiprintf_r+0x10e>
 800f468:	9a07      	ldr	r2, [sp, #28]
 800f46a:	46a8      	mov	r8, r5
 800f46c:	2000      	movs	r0, #0
 800f46e:	250a      	movs	r5, #10
 800f470:	4641      	mov	r1, r8
 800f472:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f476:	3b30      	subs	r3, #48	; 0x30
 800f478:	2b09      	cmp	r3, #9
 800f47a:	d969      	bls.n	800f550 <_vfiprintf_r+0x1a0>
 800f47c:	b360      	cbz	r0, 800f4d8 <_vfiprintf_r+0x128>
 800f47e:	e024      	b.n	800f4ca <_vfiprintf_r+0x11a>
 800f480:	4b50      	ldr	r3, [pc, #320]	; (800f5c4 <_vfiprintf_r+0x214>)
 800f482:	429c      	cmp	r4, r3
 800f484:	d101      	bne.n	800f48a <_vfiprintf_r+0xda>
 800f486:	68b4      	ldr	r4, [r6, #8]
 800f488:	e7a2      	b.n	800f3d0 <_vfiprintf_r+0x20>
 800f48a:	4b4f      	ldr	r3, [pc, #316]	; (800f5c8 <_vfiprintf_r+0x218>)
 800f48c:	429c      	cmp	r4, r3
 800f48e:	bf08      	it	eq
 800f490:	68f4      	ldreq	r4, [r6, #12]
 800f492:	e79d      	b.n	800f3d0 <_vfiprintf_r+0x20>
 800f494:	4621      	mov	r1, r4
 800f496:	4630      	mov	r0, r6
 800f498:	f000 fae0 	bl	800fa5c <__swsetup_r>
 800f49c:	2800      	cmp	r0, #0
 800f49e:	d09d      	beq.n	800f3dc <_vfiprintf_r+0x2c>
 800f4a0:	f04f 30ff 	mov.w	r0, #4294967295
 800f4a4:	b01d      	add	sp, #116	; 0x74
 800f4a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f4aa:	46a8      	mov	r8, r5
 800f4ac:	e7a2      	b.n	800f3f4 <_vfiprintf_r+0x44>
 800f4ae:	4a44      	ldr	r2, [pc, #272]	; (800f5c0 <_vfiprintf_r+0x210>)
 800f4b0:	1a80      	subs	r0, r0, r2
 800f4b2:	fa0b f000 	lsl.w	r0, fp, r0
 800f4b6:	4318      	orrs	r0, r3
 800f4b8:	9004      	str	r0, [sp, #16]
 800f4ba:	4645      	mov	r5, r8
 800f4bc:	e7be      	b.n	800f43c <_vfiprintf_r+0x8c>
 800f4be:	9a03      	ldr	r2, [sp, #12]
 800f4c0:	1d11      	adds	r1, r2, #4
 800f4c2:	6812      	ldr	r2, [r2, #0]
 800f4c4:	9103      	str	r1, [sp, #12]
 800f4c6:	2a00      	cmp	r2, #0
 800f4c8:	db01      	blt.n	800f4ce <_vfiprintf_r+0x11e>
 800f4ca:	9207      	str	r2, [sp, #28]
 800f4cc:	e004      	b.n	800f4d8 <_vfiprintf_r+0x128>
 800f4ce:	4252      	negs	r2, r2
 800f4d0:	f043 0302 	orr.w	r3, r3, #2
 800f4d4:	9207      	str	r2, [sp, #28]
 800f4d6:	9304      	str	r3, [sp, #16]
 800f4d8:	f898 3000 	ldrb.w	r3, [r8]
 800f4dc:	2b2e      	cmp	r3, #46	; 0x2e
 800f4de:	d10e      	bne.n	800f4fe <_vfiprintf_r+0x14e>
 800f4e0:	f898 3001 	ldrb.w	r3, [r8, #1]
 800f4e4:	2b2a      	cmp	r3, #42	; 0x2a
 800f4e6:	d138      	bne.n	800f55a <_vfiprintf_r+0x1aa>
 800f4e8:	9b03      	ldr	r3, [sp, #12]
 800f4ea:	1d1a      	adds	r2, r3, #4
 800f4ec:	681b      	ldr	r3, [r3, #0]
 800f4ee:	9203      	str	r2, [sp, #12]
 800f4f0:	2b00      	cmp	r3, #0
 800f4f2:	bfb8      	it	lt
 800f4f4:	f04f 33ff 	movlt.w	r3, #4294967295
 800f4f8:	f108 0802 	add.w	r8, r8, #2
 800f4fc:	9305      	str	r3, [sp, #20]
 800f4fe:	4d33      	ldr	r5, [pc, #204]	; (800f5cc <_vfiprintf_r+0x21c>)
 800f500:	f898 1000 	ldrb.w	r1, [r8]
 800f504:	2203      	movs	r2, #3
 800f506:	4628      	mov	r0, r5
 800f508:	f7f0 fea2 	bl	8000250 <memchr>
 800f50c:	b140      	cbz	r0, 800f520 <_vfiprintf_r+0x170>
 800f50e:	2340      	movs	r3, #64	; 0x40
 800f510:	1b40      	subs	r0, r0, r5
 800f512:	fa03 f000 	lsl.w	r0, r3, r0
 800f516:	9b04      	ldr	r3, [sp, #16]
 800f518:	4303      	orrs	r3, r0
 800f51a:	f108 0801 	add.w	r8, r8, #1
 800f51e:	9304      	str	r3, [sp, #16]
 800f520:	f898 1000 	ldrb.w	r1, [r8]
 800f524:	482a      	ldr	r0, [pc, #168]	; (800f5d0 <_vfiprintf_r+0x220>)
 800f526:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f52a:	2206      	movs	r2, #6
 800f52c:	f108 0701 	add.w	r7, r8, #1
 800f530:	f7f0 fe8e 	bl	8000250 <memchr>
 800f534:	2800      	cmp	r0, #0
 800f536:	d037      	beq.n	800f5a8 <_vfiprintf_r+0x1f8>
 800f538:	4b26      	ldr	r3, [pc, #152]	; (800f5d4 <_vfiprintf_r+0x224>)
 800f53a:	bb1b      	cbnz	r3, 800f584 <_vfiprintf_r+0x1d4>
 800f53c:	9b03      	ldr	r3, [sp, #12]
 800f53e:	3307      	adds	r3, #7
 800f540:	f023 0307 	bic.w	r3, r3, #7
 800f544:	3308      	adds	r3, #8
 800f546:	9303      	str	r3, [sp, #12]
 800f548:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f54a:	444b      	add	r3, r9
 800f54c:	9309      	str	r3, [sp, #36]	; 0x24
 800f54e:	e750      	b.n	800f3f2 <_vfiprintf_r+0x42>
 800f550:	fb05 3202 	mla	r2, r5, r2, r3
 800f554:	2001      	movs	r0, #1
 800f556:	4688      	mov	r8, r1
 800f558:	e78a      	b.n	800f470 <_vfiprintf_r+0xc0>
 800f55a:	2300      	movs	r3, #0
 800f55c:	f108 0801 	add.w	r8, r8, #1
 800f560:	9305      	str	r3, [sp, #20]
 800f562:	4619      	mov	r1, r3
 800f564:	250a      	movs	r5, #10
 800f566:	4640      	mov	r0, r8
 800f568:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f56c:	3a30      	subs	r2, #48	; 0x30
 800f56e:	2a09      	cmp	r2, #9
 800f570:	d903      	bls.n	800f57a <_vfiprintf_r+0x1ca>
 800f572:	2b00      	cmp	r3, #0
 800f574:	d0c3      	beq.n	800f4fe <_vfiprintf_r+0x14e>
 800f576:	9105      	str	r1, [sp, #20]
 800f578:	e7c1      	b.n	800f4fe <_vfiprintf_r+0x14e>
 800f57a:	fb05 2101 	mla	r1, r5, r1, r2
 800f57e:	2301      	movs	r3, #1
 800f580:	4680      	mov	r8, r0
 800f582:	e7f0      	b.n	800f566 <_vfiprintf_r+0x1b6>
 800f584:	ab03      	add	r3, sp, #12
 800f586:	9300      	str	r3, [sp, #0]
 800f588:	4622      	mov	r2, r4
 800f58a:	4b13      	ldr	r3, [pc, #76]	; (800f5d8 <_vfiprintf_r+0x228>)
 800f58c:	a904      	add	r1, sp, #16
 800f58e:	4630      	mov	r0, r6
 800f590:	f3af 8000 	nop.w
 800f594:	f1b0 3fff 	cmp.w	r0, #4294967295
 800f598:	4681      	mov	r9, r0
 800f59a:	d1d5      	bne.n	800f548 <_vfiprintf_r+0x198>
 800f59c:	89a3      	ldrh	r3, [r4, #12]
 800f59e:	065b      	lsls	r3, r3, #25
 800f5a0:	f53f af7e 	bmi.w	800f4a0 <_vfiprintf_r+0xf0>
 800f5a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f5a6:	e77d      	b.n	800f4a4 <_vfiprintf_r+0xf4>
 800f5a8:	ab03      	add	r3, sp, #12
 800f5aa:	9300      	str	r3, [sp, #0]
 800f5ac:	4622      	mov	r2, r4
 800f5ae:	4b0a      	ldr	r3, [pc, #40]	; (800f5d8 <_vfiprintf_r+0x228>)
 800f5b0:	a904      	add	r1, sp, #16
 800f5b2:	4630      	mov	r0, r6
 800f5b4:	f000 f888 	bl	800f6c8 <_printf_i>
 800f5b8:	e7ec      	b.n	800f594 <_vfiprintf_r+0x1e4>
 800f5ba:	bf00      	nop
 800f5bc:	080121f0 	.word	0x080121f0
 800f5c0:	08012230 	.word	0x08012230
 800f5c4:	08012210 	.word	0x08012210
 800f5c8:	080121d0 	.word	0x080121d0
 800f5cc:	08012236 	.word	0x08012236
 800f5d0:	0801223a 	.word	0x0801223a
 800f5d4:	00000000 	.word	0x00000000
 800f5d8:	0800f38b 	.word	0x0800f38b

0800f5dc <_printf_common>:
 800f5dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f5e0:	4691      	mov	r9, r2
 800f5e2:	461f      	mov	r7, r3
 800f5e4:	688a      	ldr	r2, [r1, #8]
 800f5e6:	690b      	ldr	r3, [r1, #16]
 800f5e8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f5ec:	4293      	cmp	r3, r2
 800f5ee:	bfb8      	it	lt
 800f5f0:	4613      	movlt	r3, r2
 800f5f2:	f8c9 3000 	str.w	r3, [r9]
 800f5f6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f5fa:	4606      	mov	r6, r0
 800f5fc:	460c      	mov	r4, r1
 800f5fe:	b112      	cbz	r2, 800f606 <_printf_common+0x2a>
 800f600:	3301      	adds	r3, #1
 800f602:	f8c9 3000 	str.w	r3, [r9]
 800f606:	6823      	ldr	r3, [r4, #0]
 800f608:	0699      	lsls	r1, r3, #26
 800f60a:	bf42      	ittt	mi
 800f60c:	f8d9 3000 	ldrmi.w	r3, [r9]
 800f610:	3302      	addmi	r3, #2
 800f612:	f8c9 3000 	strmi.w	r3, [r9]
 800f616:	6825      	ldr	r5, [r4, #0]
 800f618:	f015 0506 	ands.w	r5, r5, #6
 800f61c:	d107      	bne.n	800f62e <_printf_common+0x52>
 800f61e:	f104 0a19 	add.w	sl, r4, #25
 800f622:	68e3      	ldr	r3, [r4, #12]
 800f624:	f8d9 2000 	ldr.w	r2, [r9]
 800f628:	1a9b      	subs	r3, r3, r2
 800f62a:	42ab      	cmp	r3, r5
 800f62c:	dc28      	bgt.n	800f680 <_printf_common+0xa4>
 800f62e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800f632:	6822      	ldr	r2, [r4, #0]
 800f634:	3300      	adds	r3, #0
 800f636:	bf18      	it	ne
 800f638:	2301      	movne	r3, #1
 800f63a:	0692      	lsls	r2, r2, #26
 800f63c:	d42d      	bmi.n	800f69a <_printf_common+0xbe>
 800f63e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f642:	4639      	mov	r1, r7
 800f644:	4630      	mov	r0, r6
 800f646:	47c0      	blx	r8
 800f648:	3001      	adds	r0, #1
 800f64a:	d020      	beq.n	800f68e <_printf_common+0xb2>
 800f64c:	6823      	ldr	r3, [r4, #0]
 800f64e:	68e5      	ldr	r5, [r4, #12]
 800f650:	f8d9 2000 	ldr.w	r2, [r9]
 800f654:	f003 0306 	and.w	r3, r3, #6
 800f658:	2b04      	cmp	r3, #4
 800f65a:	bf08      	it	eq
 800f65c:	1aad      	subeq	r5, r5, r2
 800f65e:	68a3      	ldr	r3, [r4, #8]
 800f660:	6922      	ldr	r2, [r4, #16]
 800f662:	bf0c      	ite	eq
 800f664:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f668:	2500      	movne	r5, #0
 800f66a:	4293      	cmp	r3, r2
 800f66c:	bfc4      	itt	gt
 800f66e:	1a9b      	subgt	r3, r3, r2
 800f670:	18ed      	addgt	r5, r5, r3
 800f672:	f04f 0900 	mov.w	r9, #0
 800f676:	341a      	adds	r4, #26
 800f678:	454d      	cmp	r5, r9
 800f67a:	d11a      	bne.n	800f6b2 <_printf_common+0xd6>
 800f67c:	2000      	movs	r0, #0
 800f67e:	e008      	b.n	800f692 <_printf_common+0xb6>
 800f680:	2301      	movs	r3, #1
 800f682:	4652      	mov	r2, sl
 800f684:	4639      	mov	r1, r7
 800f686:	4630      	mov	r0, r6
 800f688:	47c0      	blx	r8
 800f68a:	3001      	adds	r0, #1
 800f68c:	d103      	bne.n	800f696 <_printf_common+0xba>
 800f68e:	f04f 30ff 	mov.w	r0, #4294967295
 800f692:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f696:	3501      	adds	r5, #1
 800f698:	e7c3      	b.n	800f622 <_printf_common+0x46>
 800f69a:	18e1      	adds	r1, r4, r3
 800f69c:	1c5a      	adds	r2, r3, #1
 800f69e:	2030      	movs	r0, #48	; 0x30
 800f6a0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f6a4:	4422      	add	r2, r4
 800f6a6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f6aa:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f6ae:	3302      	adds	r3, #2
 800f6b0:	e7c5      	b.n	800f63e <_printf_common+0x62>
 800f6b2:	2301      	movs	r3, #1
 800f6b4:	4622      	mov	r2, r4
 800f6b6:	4639      	mov	r1, r7
 800f6b8:	4630      	mov	r0, r6
 800f6ba:	47c0      	blx	r8
 800f6bc:	3001      	adds	r0, #1
 800f6be:	d0e6      	beq.n	800f68e <_printf_common+0xb2>
 800f6c0:	f109 0901 	add.w	r9, r9, #1
 800f6c4:	e7d8      	b.n	800f678 <_printf_common+0x9c>
	...

0800f6c8 <_printf_i>:
 800f6c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f6cc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800f6d0:	460c      	mov	r4, r1
 800f6d2:	7e09      	ldrb	r1, [r1, #24]
 800f6d4:	b085      	sub	sp, #20
 800f6d6:	296e      	cmp	r1, #110	; 0x6e
 800f6d8:	4617      	mov	r7, r2
 800f6da:	4606      	mov	r6, r0
 800f6dc:	4698      	mov	r8, r3
 800f6de:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f6e0:	f000 80b3 	beq.w	800f84a <_printf_i+0x182>
 800f6e4:	d822      	bhi.n	800f72c <_printf_i+0x64>
 800f6e6:	2963      	cmp	r1, #99	; 0x63
 800f6e8:	d036      	beq.n	800f758 <_printf_i+0x90>
 800f6ea:	d80a      	bhi.n	800f702 <_printf_i+0x3a>
 800f6ec:	2900      	cmp	r1, #0
 800f6ee:	f000 80b9 	beq.w	800f864 <_printf_i+0x19c>
 800f6f2:	2958      	cmp	r1, #88	; 0x58
 800f6f4:	f000 8083 	beq.w	800f7fe <_printf_i+0x136>
 800f6f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f6fc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800f700:	e032      	b.n	800f768 <_printf_i+0xa0>
 800f702:	2964      	cmp	r1, #100	; 0x64
 800f704:	d001      	beq.n	800f70a <_printf_i+0x42>
 800f706:	2969      	cmp	r1, #105	; 0x69
 800f708:	d1f6      	bne.n	800f6f8 <_printf_i+0x30>
 800f70a:	6820      	ldr	r0, [r4, #0]
 800f70c:	6813      	ldr	r3, [r2, #0]
 800f70e:	0605      	lsls	r5, r0, #24
 800f710:	f103 0104 	add.w	r1, r3, #4
 800f714:	d52a      	bpl.n	800f76c <_printf_i+0xa4>
 800f716:	681b      	ldr	r3, [r3, #0]
 800f718:	6011      	str	r1, [r2, #0]
 800f71a:	2b00      	cmp	r3, #0
 800f71c:	da03      	bge.n	800f726 <_printf_i+0x5e>
 800f71e:	222d      	movs	r2, #45	; 0x2d
 800f720:	425b      	negs	r3, r3
 800f722:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800f726:	486f      	ldr	r0, [pc, #444]	; (800f8e4 <_printf_i+0x21c>)
 800f728:	220a      	movs	r2, #10
 800f72a:	e039      	b.n	800f7a0 <_printf_i+0xd8>
 800f72c:	2973      	cmp	r1, #115	; 0x73
 800f72e:	f000 809d 	beq.w	800f86c <_printf_i+0x1a4>
 800f732:	d808      	bhi.n	800f746 <_printf_i+0x7e>
 800f734:	296f      	cmp	r1, #111	; 0x6f
 800f736:	d020      	beq.n	800f77a <_printf_i+0xb2>
 800f738:	2970      	cmp	r1, #112	; 0x70
 800f73a:	d1dd      	bne.n	800f6f8 <_printf_i+0x30>
 800f73c:	6823      	ldr	r3, [r4, #0]
 800f73e:	f043 0320 	orr.w	r3, r3, #32
 800f742:	6023      	str	r3, [r4, #0]
 800f744:	e003      	b.n	800f74e <_printf_i+0x86>
 800f746:	2975      	cmp	r1, #117	; 0x75
 800f748:	d017      	beq.n	800f77a <_printf_i+0xb2>
 800f74a:	2978      	cmp	r1, #120	; 0x78
 800f74c:	d1d4      	bne.n	800f6f8 <_printf_i+0x30>
 800f74e:	2378      	movs	r3, #120	; 0x78
 800f750:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f754:	4864      	ldr	r0, [pc, #400]	; (800f8e8 <_printf_i+0x220>)
 800f756:	e055      	b.n	800f804 <_printf_i+0x13c>
 800f758:	6813      	ldr	r3, [r2, #0]
 800f75a:	1d19      	adds	r1, r3, #4
 800f75c:	681b      	ldr	r3, [r3, #0]
 800f75e:	6011      	str	r1, [r2, #0]
 800f760:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f764:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f768:	2301      	movs	r3, #1
 800f76a:	e08c      	b.n	800f886 <_printf_i+0x1be>
 800f76c:	681b      	ldr	r3, [r3, #0]
 800f76e:	6011      	str	r1, [r2, #0]
 800f770:	f010 0f40 	tst.w	r0, #64	; 0x40
 800f774:	bf18      	it	ne
 800f776:	b21b      	sxthne	r3, r3
 800f778:	e7cf      	b.n	800f71a <_printf_i+0x52>
 800f77a:	6813      	ldr	r3, [r2, #0]
 800f77c:	6825      	ldr	r5, [r4, #0]
 800f77e:	1d18      	adds	r0, r3, #4
 800f780:	6010      	str	r0, [r2, #0]
 800f782:	0628      	lsls	r0, r5, #24
 800f784:	d501      	bpl.n	800f78a <_printf_i+0xc2>
 800f786:	681b      	ldr	r3, [r3, #0]
 800f788:	e002      	b.n	800f790 <_printf_i+0xc8>
 800f78a:	0668      	lsls	r0, r5, #25
 800f78c:	d5fb      	bpl.n	800f786 <_printf_i+0xbe>
 800f78e:	881b      	ldrh	r3, [r3, #0]
 800f790:	4854      	ldr	r0, [pc, #336]	; (800f8e4 <_printf_i+0x21c>)
 800f792:	296f      	cmp	r1, #111	; 0x6f
 800f794:	bf14      	ite	ne
 800f796:	220a      	movne	r2, #10
 800f798:	2208      	moveq	r2, #8
 800f79a:	2100      	movs	r1, #0
 800f79c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f7a0:	6865      	ldr	r5, [r4, #4]
 800f7a2:	60a5      	str	r5, [r4, #8]
 800f7a4:	2d00      	cmp	r5, #0
 800f7a6:	f2c0 8095 	blt.w	800f8d4 <_printf_i+0x20c>
 800f7aa:	6821      	ldr	r1, [r4, #0]
 800f7ac:	f021 0104 	bic.w	r1, r1, #4
 800f7b0:	6021      	str	r1, [r4, #0]
 800f7b2:	2b00      	cmp	r3, #0
 800f7b4:	d13d      	bne.n	800f832 <_printf_i+0x16a>
 800f7b6:	2d00      	cmp	r5, #0
 800f7b8:	f040 808e 	bne.w	800f8d8 <_printf_i+0x210>
 800f7bc:	4665      	mov	r5, ip
 800f7be:	2a08      	cmp	r2, #8
 800f7c0:	d10b      	bne.n	800f7da <_printf_i+0x112>
 800f7c2:	6823      	ldr	r3, [r4, #0]
 800f7c4:	07db      	lsls	r3, r3, #31
 800f7c6:	d508      	bpl.n	800f7da <_printf_i+0x112>
 800f7c8:	6923      	ldr	r3, [r4, #16]
 800f7ca:	6862      	ldr	r2, [r4, #4]
 800f7cc:	429a      	cmp	r2, r3
 800f7ce:	bfde      	ittt	le
 800f7d0:	2330      	movle	r3, #48	; 0x30
 800f7d2:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f7d6:	f105 35ff 	addle.w	r5, r5, #4294967295
 800f7da:	ebac 0305 	sub.w	r3, ip, r5
 800f7de:	6123      	str	r3, [r4, #16]
 800f7e0:	f8cd 8000 	str.w	r8, [sp]
 800f7e4:	463b      	mov	r3, r7
 800f7e6:	aa03      	add	r2, sp, #12
 800f7e8:	4621      	mov	r1, r4
 800f7ea:	4630      	mov	r0, r6
 800f7ec:	f7ff fef6 	bl	800f5dc <_printf_common>
 800f7f0:	3001      	adds	r0, #1
 800f7f2:	d14d      	bne.n	800f890 <_printf_i+0x1c8>
 800f7f4:	f04f 30ff 	mov.w	r0, #4294967295
 800f7f8:	b005      	add	sp, #20
 800f7fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f7fe:	4839      	ldr	r0, [pc, #228]	; (800f8e4 <_printf_i+0x21c>)
 800f800:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800f804:	6813      	ldr	r3, [r2, #0]
 800f806:	6821      	ldr	r1, [r4, #0]
 800f808:	1d1d      	adds	r5, r3, #4
 800f80a:	681b      	ldr	r3, [r3, #0]
 800f80c:	6015      	str	r5, [r2, #0]
 800f80e:	060a      	lsls	r2, r1, #24
 800f810:	d50b      	bpl.n	800f82a <_printf_i+0x162>
 800f812:	07ca      	lsls	r2, r1, #31
 800f814:	bf44      	itt	mi
 800f816:	f041 0120 	orrmi.w	r1, r1, #32
 800f81a:	6021      	strmi	r1, [r4, #0]
 800f81c:	b91b      	cbnz	r3, 800f826 <_printf_i+0x15e>
 800f81e:	6822      	ldr	r2, [r4, #0]
 800f820:	f022 0220 	bic.w	r2, r2, #32
 800f824:	6022      	str	r2, [r4, #0]
 800f826:	2210      	movs	r2, #16
 800f828:	e7b7      	b.n	800f79a <_printf_i+0xd2>
 800f82a:	064d      	lsls	r5, r1, #25
 800f82c:	bf48      	it	mi
 800f82e:	b29b      	uxthmi	r3, r3
 800f830:	e7ef      	b.n	800f812 <_printf_i+0x14a>
 800f832:	4665      	mov	r5, ip
 800f834:	fbb3 f1f2 	udiv	r1, r3, r2
 800f838:	fb02 3311 	mls	r3, r2, r1, r3
 800f83c:	5cc3      	ldrb	r3, [r0, r3]
 800f83e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800f842:	460b      	mov	r3, r1
 800f844:	2900      	cmp	r1, #0
 800f846:	d1f5      	bne.n	800f834 <_printf_i+0x16c>
 800f848:	e7b9      	b.n	800f7be <_printf_i+0xf6>
 800f84a:	6813      	ldr	r3, [r2, #0]
 800f84c:	6825      	ldr	r5, [r4, #0]
 800f84e:	6961      	ldr	r1, [r4, #20]
 800f850:	1d18      	adds	r0, r3, #4
 800f852:	6010      	str	r0, [r2, #0]
 800f854:	0628      	lsls	r0, r5, #24
 800f856:	681b      	ldr	r3, [r3, #0]
 800f858:	d501      	bpl.n	800f85e <_printf_i+0x196>
 800f85a:	6019      	str	r1, [r3, #0]
 800f85c:	e002      	b.n	800f864 <_printf_i+0x19c>
 800f85e:	066a      	lsls	r2, r5, #25
 800f860:	d5fb      	bpl.n	800f85a <_printf_i+0x192>
 800f862:	8019      	strh	r1, [r3, #0]
 800f864:	2300      	movs	r3, #0
 800f866:	6123      	str	r3, [r4, #16]
 800f868:	4665      	mov	r5, ip
 800f86a:	e7b9      	b.n	800f7e0 <_printf_i+0x118>
 800f86c:	6813      	ldr	r3, [r2, #0]
 800f86e:	1d19      	adds	r1, r3, #4
 800f870:	6011      	str	r1, [r2, #0]
 800f872:	681d      	ldr	r5, [r3, #0]
 800f874:	6862      	ldr	r2, [r4, #4]
 800f876:	2100      	movs	r1, #0
 800f878:	4628      	mov	r0, r5
 800f87a:	f7f0 fce9 	bl	8000250 <memchr>
 800f87e:	b108      	cbz	r0, 800f884 <_printf_i+0x1bc>
 800f880:	1b40      	subs	r0, r0, r5
 800f882:	6060      	str	r0, [r4, #4]
 800f884:	6863      	ldr	r3, [r4, #4]
 800f886:	6123      	str	r3, [r4, #16]
 800f888:	2300      	movs	r3, #0
 800f88a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f88e:	e7a7      	b.n	800f7e0 <_printf_i+0x118>
 800f890:	6923      	ldr	r3, [r4, #16]
 800f892:	462a      	mov	r2, r5
 800f894:	4639      	mov	r1, r7
 800f896:	4630      	mov	r0, r6
 800f898:	47c0      	blx	r8
 800f89a:	3001      	adds	r0, #1
 800f89c:	d0aa      	beq.n	800f7f4 <_printf_i+0x12c>
 800f89e:	6823      	ldr	r3, [r4, #0]
 800f8a0:	079b      	lsls	r3, r3, #30
 800f8a2:	d413      	bmi.n	800f8cc <_printf_i+0x204>
 800f8a4:	68e0      	ldr	r0, [r4, #12]
 800f8a6:	9b03      	ldr	r3, [sp, #12]
 800f8a8:	4298      	cmp	r0, r3
 800f8aa:	bfb8      	it	lt
 800f8ac:	4618      	movlt	r0, r3
 800f8ae:	e7a3      	b.n	800f7f8 <_printf_i+0x130>
 800f8b0:	2301      	movs	r3, #1
 800f8b2:	464a      	mov	r2, r9
 800f8b4:	4639      	mov	r1, r7
 800f8b6:	4630      	mov	r0, r6
 800f8b8:	47c0      	blx	r8
 800f8ba:	3001      	adds	r0, #1
 800f8bc:	d09a      	beq.n	800f7f4 <_printf_i+0x12c>
 800f8be:	3501      	adds	r5, #1
 800f8c0:	68e3      	ldr	r3, [r4, #12]
 800f8c2:	9a03      	ldr	r2, [sp, #12]
 800f8c4:	1a9b      	subs	r3, r3, r2
 800f8c6:	42ab      	cmp	r3, r5
 800f8c8:	dcf2      	bgt.n	800f8b0 <_printf_i+0x1e8>
 800f8ca:	e7eb      	b.n	800f8a4 <_printf_i+0x1dc>
 800f8cc:	2500      	movs	r5, #0
 800f8ce:	f104 0919 	add.w	r9, r4, #25
 800f8d2:	e7f5      	b.n	800f8c0 <_printf_i+0x1f8>
 800f8d4:	2b00      	cmp	r3, #0
 800f8d6:	d1ac      	bne.n	800f832 <_printf_i+0x16a>
 800f8d8:	7803      	ldrb	r3, [r0, #0]
 800f8da:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f8de:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f8e2:	e76c      	b.n	800f7be <_printf_i+0xf6>
 800f8e4:	08012241 	.word	0x08012241
 800f8e8:	08012252 	.word	0x08012252

0800f8ec <_sbrk_r>:
 800f8ec:	b538      	push	{r3, r4, r5, lr}
 800f8ee:	4c06      	ldr	r4, [pc, #24]	; (800f908 <_sbrk_r+0x1c>)
 800f8f0:	2300      	movs	r3, #0
 800f8f2:	4605      	mov	r5, r0
 800f8f4:	4608      	mov	r0, r1
 800f8f6:	6023      	str	r3, [r4, #0]
 800f8f8:	f000 fab2 	bl	800fe60 <_sbrk>
 800f8fc:	1c43      	adds	r3, r0, #1
 800f8fe:	d102      	bne.n	800f906 <_sbrk_r+0x1a>
 800f900:	6823      	ldr	r3, [r4, #0]
 800f902:	b103      	cbz	r3, 800f906 <_sbrk_r+0x1a>
 800f904:	602b      	str	r3, [r5, #0]
 800f906:	bd38      	pop	{r3, r4, r5, pc}
 800f908:	2000ceb0 	.word	0x2000ceb0

0800f90c <__sread>:
 800f90c:	b510      	push	{r4, lr}
 800f90e:	460c      	mov	r4, r1
 800f910:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f914:	f000 fa48 	bl	800fda8 <_read_r>
 800f918:	2800      	cmp	r0, #0
 800f91a:	bfab      	itete	ge
 800f91c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f91e:	89a3      	ldrhlt	r3, [r4, #12]
 800f920:	181b      	addge	r3, r3, r0
 800f922:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f926:	bfac      	ite	ge
 800f928:	6563      	strge	r3, [r4, #84]	; 0x54
 800f92a:	81a3      	strhlt	r3, [r4, #12]
 800f92c:	bd10      	pop	{r4, pc}

0800f92e <__swrite>:
 800f92e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f932:	461f      	mov	r7, r3
 800f934:	898b      	ldrh	r3, [r1, #12]
 800f936:	05db      	lsls	r3, r3, #23
 800f938:	4605      	mov	r5, r0
 800f93a:	460c      	mov	r4, r1
 800f93c:	4616      	mov	r6, r2
 800f93e:	d505      	bpl.n	800f94c <__swrite+0x1e>
 800f940:	2302      	movs	r3, #2
 800f942:	2200      	movs	r2, #0
 800f944:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f948:	f000 f9b6 	bl	800fcb8 <_lseek_r>
 800f94c:	89a3      	ldrh	r3, [r4, #12]
 800f94e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f952:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f956:	81a3      	strh	r3, [r4, #12]
 800f958:	4632      	mov	r2, r6
 800f95a:	463b      	mov	r3, r7
 800f95c:	4628      	mov	r0, r5
 800f95e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f962:	f000 b869 	b.w	800fa38 <_write_r>

0800f966 <__sseek>:
 800f966:	b510      	push	{r4, lr}
 800f968:	460c      	mov	r4, r1
 800f96a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f96e:	f000 f9a3 	bl	800fcb8 <_lseek_r>
 800f972:	1c43      	adds	r3, r0, #1
 800f974:	89a3      	ldrh	r3, [r4, #12]
 800f976:	bf15      	itete	ne
 800f978:	6560      	strne	r0, [r4, #84]	; 0x54
 800f97a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f97e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f982:	81a3      	strheq	r3, [r4, #12]
 800f984:	bf18      	it	ne
 800f986:	81a3      	strhne	r3, [r4, #12]
 800f988:	bd10      	pop	{r4, pc}

0800f98a <__sclose>:
 800f98a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f98e:	f000 b8d3 	b.w	800fb38 <_close_r>
	...

0800f994 <__swbuf_r>:
 800f994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f996:	460e      	mov	r6, r1
 800f998:	4614      	mov	r4, r2
 800f99a:	4605      	mov	r5, r0
 800f99c:	b118      	cbz	r0, 800f9a6 <__swbuf_r+0x12>
 800f99e:	6983      	ldr	r3, [r0, #24]
 800f9a0:	b90b      	cbnz	r3, 800f9a6 <__swbuf_r+0x12>
 800f9a2:	f7ff fba1 	bl	800f0e8 <__sinit>
 800f9a6:	4b21      	ldr	r3, [pc, #132]	; (800fa2c <__swbuf_r+0x98>)
 800f9a8:	429c      	cmp	r4, r3
 800f9aa:	d12a      	bne.n	800fa02 <__swbuf_r+0x6e>
 800f9ac:	686c      	ldr	r4, [r5, #4]
 800f9ae:	69a3      	ldr	r3, [r4, #24]
 800f9b0:	60a3      	str	r3, [r4, #8]
 800f9b2:	89a3      	ldrh	r3, [r4, #12]
 800f9b4:	071a      	lsls	r2, r3, #28
 800f9b6:	d52e      	bpl.n	800fa16 <__swbuf_r+0x82>
 800f9b8:	6923      	ldr	r3, [r4, #16]
 800f9ba:	b363      	cbz	r3, 800fa16 <__swbuf_r+0x82>
 800f9bc:	6923      	ldr	r3, [r4, #16]
 800f9be:	6820      	ldr	r0, [r4, #0]
 800f9c0:	1ac0      	subs	r0, r0, r3
 800f9c2:	6963      	ldr	r3, [r4, #20]
 800f9c4:	b2f6      	uxtb	r6, r6
 800f9c6:	4283      	cmp	r3, r0
 800f9c8:	4637      	mov	r7, r6
 800f9ca:	dc04      	bgt.n	800f9d6 <__swbuf_r+0x42>
 800f9cc:	4621      	mov	r1, r4
 800f9ce:	4628      	mov	r0, r5
 800f9d0:	f000 f948 	bl	800fc64 <_fflush_r>
 800f9d4:	bb28      	cbnz	r0, 800fa22 <__swbuf_r+0x8e>
 800f9d6:	68a3      	ldr	r3, [r4, #8]
 800f9d8:	3b01      	subs	r3, #1
 800f9da:	60a3      	str	r3, [r4, #8]
 800f9dc:	6823      	ldr	r3, [r4, #0]
 800f9de:	1c5a      	adds	r2, r3, #1
 800f9e0:	6022      	str	r2, [r4, #0]
 800f9e2:	701e      	strb	r6, [r3, #0]
 800f9e4:	6963      	ldr	r3, [r4, #20]
 800f9e6:	3001      	adds	r0, #1
 800f9e8:	4283      	cmp	r3, r0
 800f9ea:	d004      	beq.n	800f9f6 <__swbuf_r+0x62>
 800f9ec:	89a3      	ldrh	r3, [r4, #12]
 800f9ee:	07db      	lsls	r3, r3, #31
 800f9f0:	d519      	bpl.n	800fa26 <__swbuf_r+0x92>
 800f9f2:	2e0a      	cmp	r6, #10
 800f9f4:	d117      	bne.n	800fa26 <__swbuf_r+0x92>
 800f9f6:	4621      	mov	r1, r4
 800f9f8:	4628      	mov	r0, r5
 800f9fa:	f000 f933 	bl	800fc64 <_fflush_r>
 800f9fe:	b190      	cbz	r0, 800fa26 <__swbuf_r+0x92>
 800fa00:	e00f      	b.n	800fa22 <__swbuf_r+0x8e>
 800fa02:	4b0b      	ldr	r3, [pc, #44]	; (800fa30 <__swbuf_r+0x9c>)
 800fa04:	429c      	cmp	r4, r3
 800fa06:	d101      	bne.n	800fa0c <__swbuf_r+0x78>
 800fa08:	68ac      	ldr	r4, [r5, #8]
 800fa0a:	e7d0      	b.n	800f9ae <__swbuf_r+0x1a>
 800fa0c:	4b09      	ldr	r3, [pc, #36]	; (800fa34 <__swbuf_r+0xa0>)
 800fa0e:	429c      	cmp	r4, r3
 800fa10:	bf08      	it	eq
 800fa12:	68ec      	ldreq	r4, [r5, #12]
 800fa14:	e7cb      	b.n	800f9ae <__swbuf_r+0x1a>
 800fa16:	4621      	mov	r1, r4
 800fa18:	4628      	mov	r0, r5
 800fa1a:	f000 f81f 	bl	800fa5c <__swsetup_r>
 800fa1e:	2800      	cmp	r0, #0
 800fa20:	d0cc      	beq.n	800f9bc <__swbuf_r+0x28>
 800fa22:	f04f 37ff 	mov.w	r7, #4294967295
 800fa26:	4638      	mov	r0, r7
 800fa28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fa2a:	bf00      	nop
 800fa2c:	080121f0 	.word	0x080121f0
 800fa30:	08012210 	.word	0x08012210
 800fa34:	080121d0 	.word	0x080121d0

0800fa38 <_write_r>:
 800fa38:	b538      	push	{r3, r4, r5, lr}
 800fa3a:	4c07      	ldr	r4, [pc, #28]	; (800fa58 <_write_r+0x20>)
 800fa3c:	4605      	mov	r5, r0
 800fa3e:	4608      	mov	r0, r1
 800fa40:	4611      	mov	r1, r2
 800fa42:	2200      	movs	r2, #0
 800fa44:	6022      	str	r2, [r4, #0]
 800fa46:	461a      	mov	r2, r3
 800fa48:	f000 fa18 	bl	800fe7c <_write>
 800fa4c:	1c43      	adds	r3, r0, #1
 800fa4e:	d102      	bne.n	800fa56 <_write_r+0x1e>
 800fa50:	6823      	ldr	r3, [r4, #0]
 800fa52:	b103      	cbz	r3, 800fa56 <_write_r+0x1e>
 800fa54:	602b      	str	r3, [r5, #0]
 800fa56:	bd38      	pop	{r3, r4, r5, pc}
 800fa58:	2000ceb0 	.word	0x2000ceb0

0800fa5c <__swsetup_r>:
 800fa5c:	4b32      	ldr	r3, [pc, #200]	; (800fb28 <__swsetup_r+0xcc>)
 800fa5e:	b570      	push	{r4, r5, r6, lr}
 800fa60:	681d      	ldr	r5, [r3, #0]
 800fa62:	4606      	mov	r6, r0
 800fa64:	460c      	mov	r4, r1
 800fa66:	b125      	cbz	r5, 800fa72 <__swsetup_r+0x16>
 800fa68:	69ab      	ldr	r3, [r5, #24]
 800fa6a:	b913      	cbnz	r3, 800fa72 <__swsetup_r+0x16>
 800fa6c:	4628      	mov	r0, r5
 800fa6e:	f7ff fb3b 	bl	800f0e8 <__sinit>
 800fa72:	4b2e      	ldr	r3, [pc, #184]	; (800fb2c <__swsetup_r+0xd0>)
 800fa74:	429c      	cmp	r4, r3
 800fa76:	d10f      	bne.n	800fa98 <__swsetup_r+0x3c>
 800fa78:	686c      	ldr	r4, [r5, #4]
 800fa7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fa7e:	b29a      	uxth	r2, r3
 800fa80:	0715      	lsls	r5, r2, #28
 800fa82:	d42c      	bmi.n	800fade <__swsetup_r+0x82>
 800fa84:	06d0      	lsls	r0, r2, #27
 800fa86:	d411      	bmi.n	800faac <__swsetup_r+0x50>
 800fa88:	2209      	movs	r2, #9
 800fa8a:	6032      	str	r2, [r6, #0]
 800fa8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fa90:	81a3      	strh	r3, [r4, #12]
 800fa92:	f04f 30ff 	mov.w	r0, #4294967295
 800fa96:	e03e      	b.n	800fb16 <__swsetup_r+0xba>
 800fa98:	4b25      	ldr	r3, [pc, #148]	; (800fb30 <__swsetup_r+0xd4>)
 800fa9a:	429c      	cmp	r4, r3
 800fa9c:	d101      	bne.n	800faa2 <__swsetup_r+0x46>
 800fa9e:	68ac      	ldr	r4, [r5, #8]
 800faa0:	e7eb      	b.n	800fa7a <__swsetup_r+0x1e>
 800faa2:	4b24      	ldr	r3, [pc, #144]	; (800fb34 <__swsetup_r+0xd8>)
 800faa4:	429c      	cmp	r4, r3
 800faa6:	bf08      	it	eq
 800faa8:	68ec      	ldreq	r4, [r5, #12]
 800faaa:	e7e6      	b.n	800fa7a <__swsetup_r+0x1e>
 800faac:	0751      	lsls	r1, r2, #29
 800faae:	d512      	bpl.n	800fad6 <__swsetup_r+0x7a>
 800fab0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fab2:	b141      	cbz	r1, 800fac6 <__swsetup_r+0x6a>
 800fab4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fab8:	4299      	cmp	r1, r3
 800faba:	d002      	beq.n	800fac2 <__swsetup_r+0x66>
 800fabc:	4630      	mov	r0, r6
 800fabe:	f7ff fba5 	bl	800f20c <_free_r>
 800fac2:	2300      	movs	r3, #0
 800fac4:	6363      	str	r3, [r4, #52]	; 0x34
 800fac6:	89a3      	ldrh	r3, [r4, #12]
 800fac8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800facc:	81a3      	strh	r3, [r4, #12]
 800face:	2300      	movs	r3, #0
 800fad0:	6063      	str	r3, [r4, #4]
 800fad2:	6923      	ldr	r3, [r4, #16]
 800fad4:	6023      	str	r3, [r4, #0]
 800fad6:	89a3      	ldrh	r3, [r4, #12]
 800fad8:	f043 0308 	orr.w	r3, r3, #8
 800fadc:	81a3      	strh	r3, [r4, #12]
 800fade:	6923      	ldr	r3, [r4, #16]
 800fae0:	b94b      	cbnz	r3, 800faf6 <__swsetup_r+0x9a>
 800fae2:	89a3      	ldrh	r3, [r4, #12]
 800fae4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800fae8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800faec:	d003      	beq.n	800faf6 <__swsetup_r+0x9a>
 800faee:	4621      	mov	r1, r4
 800faf0:	4630      	mov	r0, r6
 800faf2:	f000 f917 	bl	800fd24 <__smakebuf_r>
 800faf6:	89a2      	ldrh	r2, [r4, #12]
 800faf8:	f012 0301 	ands.w	r3, r2, #1
 800fafc:	d00c      	beq.n	800fb18 <__swsetup_r+0xbc>
 800fafe:	2300      	movs	r3, #0
 800fb00:	60a3      	str	r3, [r4, #8]
 800fb02:	6963      	ldr	r3, [r4, #20]
 800fb04:	425b      	negs	r3, r3
 800fb06:	61a3      	str	r3, [r4, #24]
 800fb08:	6923      	ldr	r3, [r4, #16]
 800fb0a:	b953      	cbnz	r3, 800fb22 <__swsetup_r+0xc6>
 800fb0c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fb10:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800fb14:	d1ba      	bne.n	800fa8c <__swsetup_r+0x30>
 800fb16:	bd70      	pop	{r4, r5, r6, pc}
 800fb18:	0792      	lsls	r2, r2, #30
 800fb1a:	bf58      	it	pl
 800fb1c:	6963      	ldrpl	r3, [r4, #20]
 800fb1e:	60a3      	str	r3, [r4, #8]
 800fb20:	e7f2      	b.n	800fb08 <__swsetup_r+0xac>
 800fb22:	2000      	movs	r0, #0
 800fb24:	e7f7      	b.n	800fb16 <__swsetup_r+0xba>
 800fb26:	bf00      	nop
 800fb28:	20000014 	.word	0x20000014
 800fb2c:	080121f0 	.word	0x080121f0
 800fb30:	08012210 	.word	0x08012210
 800fb34:	080121d0 	.word	0x080121d0

0800fb38 <_close_r>:
 800fb38:	b538      	push	{r3, r4, r5, lr}
 800fb3a:	4c06      	ldr	r4, [pc, #24]	; (800fb54 <_close_r+0x1c>)
 800fb3c:	2300      	movs	r3, #0
 800fb3e:	4605      	mov	r5, r0
 800fb40:	4608      	mov	r0, r1
 800fb42:	6023      	str	r3, [r4, #0]
 800fb44:	f000 f964 	bl	800fe10 <_close>
 800fb48:	1c43      	adds	r3, r0, #1
 800fb4a:	d102      	bne.n	800fb52 <_close_r+0x1a>
 800fb4c:	6823      	ldr	r3, [r4, #0]
 800fb4e:	b103      	cbz	r3, 800fb52 <_close_r+0x1a>
 800fb50:	602b      	str	r3, [r5, #0]
 800fb52:	bd38      	pop	{r3, r4, r5, pc}
 800fb54:	2000ceb0 	.word	0x2000ceb0

0800fb58 <__sflush_r>:
 800fb58:	898a      	ldrh	r2, [r1, #12]
 800fb5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fb5e:	4605      	mov	r5, r0
 800fb60:	0710      	lsls	r0, r2, #28
 800fb62:	460c      	mov	r4, r1
 800fb64:	d458      	bmi.n	800fc18 <__sflush_r+0xc0>
 800fb66:	684b      	ldr	r3, [r1, #4]
 800fb68:	2b00      	cmp	r3, #0
 800fb6a:	dc05      	bgt.n	800fb78 <__sflush_r+0x20>
 800fb6c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800fb6e:	2b00      	cmp	r3, #0
 800fb70:	dc02      	bgt.n	800fb78 <__sflush_r+0x20>
 800fb72:	2000      	movs	r0, #0
 800fb74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fb78:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fb7a:	2e00      	cmp	r6, #0
 800fb7c:	d0f9      	beq.n	800fb72 <__sflush_r+0x1a>
 800fb7e:	2300      	movs	r3, #0
 800fb80:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800fb84:	682f      	ldr	r7, [r5, #0]
 800fb86:	6a21      	ldr	r1, [r4, #32]
 800fb88:	602b      	str	r3, [r5, #0]
 800fb8a:	d032      	beq.n	800fbf2 <__sflush_r+0x9a>
 800fb8c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800fb8e:	89a3      	ldrh	r3, [r4, #12]
 800fb90:	075a      	lsls	r2, r3, #29
 800fb92:	d505      	bpl.n	800fba0 <__sflush_r+0x48>
 800fb94:	6863      	ldr	r3, [r4, #4]
 800fb96:	1ac0      	subs	r0, r0, r3
 800fb98:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800fb9a:	b10b      	cbz	r3, 800fba0 <__sflush_r+0x48>
 800fb9c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800fb9e:	1ac0      	subs	r0, r0, r3
 800fba0:	2300      	movs	r3, #0
 800fba2:	4602      	mov	r2, r0
 800fba4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fba6:	6a21      	ldr	r1, [r4, #32]
 800fba8:	4628      	mov	r0, r5
 800fbaa:	47b0      	blx	r6
 800fbac:	1c43      	adds	r3, r0, #1
 800fbae:	89a3      	ldrh	r3, [r4, #12]
 800fbb0:	d106      	bne.n	800fbc0 <__sflush_r+0x68>
 800fbb2:	6829      	ldr	r1, [r5, #0]
 800fbb4:	291d      	cmp	r1, #29
 800fbb6:	d848      	bhi.n	800fc4a <__sflush_r+0xf2>
 800fbb8:	4a29      	ldr	r2, [pc, #164]	; (800fc60 <__sflush_r+0x108>)
 800fbba:	40ca      	lsrs	r2, r1
 800fbbc:	07d6      	lsls	r6, r2, #31
 800fbbe:	d544      	bpl.n	800fc4a <__sflush_r+0xf2>
 800fbc0:	2200      	movs	r2, #0
 800fbc2:	6062      	str	r2, [r4, #4]
 800fbc4:	04d9      	lsls	r1, r3, #19
 800fbc6:	6922      	ldr	r2, [r4, #16]
 800fbc8:	6022      	str	r2, [r4, #0]
 800fbca:	d504      	bpl.n	800fbd6 <__sflush_r+0x7e>
 800fbcc:	1c42      	adds	r2, r0, #1
 800fbce:	d101      	bne.n	800fbd4 <__sflush_r+0x7c>
 800fbd0:	682b      	ldr	r3, [r5, #0]
 800fbd2:	b903      	cbnz	r3, 800fbd6 <__sflush_r+0x7e>
 800fbd4:	6560      	str	r0, [r4, #84]	; 0x54
 800fbd6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fbd8:	602f      	str	r7, [r5, #0]
 800fbda:	2900      	cmp	r1, #0
 800fbdc:	d0c9      	beq.n	800fb72 <__sflush_r+0x1a>
 800fbde:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fbe2:	4299      	cmp	r1, r3
 800fbe4:	d002      	beq.n	800fbec <__sflush_r+0x94>
 800fbe6:	4628      	mov	r0, r5
 800fbe8:	f7ff fb10 	bl	800f20c <_free_r>
 800fbec:	2000      	movs	r0, #0
 800fbee:	6360      	str	r0, [r4, #52]	; 0x34
 800fbf0:	e7c0      	b.n	800fb74 <__sflush_r+0x1c>
 800fbf2:	2301      	movs	r3, #1
 800fbf4:	4628      	mov	r0, r5
 800fbf6:	47b0      	blx	r6
 800fbf8:	1c41      	adds	r1, r0, #1
 800fbfa:	d1c8      	bne.n	800fb8e <__sflush_r+0x36>
 800fbfc:	682b      	ldr	r3, [r5, #0]
 800fbfe:	2b00      	cmp	r3, #0
 800fc00:	d0c5      	beq.n	800fb8e <__sflush_r+0x36>
 800fc02:	2b1d      	cmp	r3, #29
 800fc04:	d001      	beq.n	800fc0a <__sflush_r+0xb2>
 800fc06:	2b16      	cmp	r3, #22
 800fc08:	d101      	bne.n	800fc0e <__sflush_r+0xb6>
 800fc0a:	602f      	str	r7, [r5, #0]
 800fc0c:	e7b1      	b.n	800fb72 <__sflush_r+0x1a>
 800fc0e:	89a3      	ldrh	r3, [r4, #12]
 800fc10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fc14:	81a3      	strh	r3, [r4, #12]
 800fc16:	e7ad      	b.n	800fb74 <__sflush_r+0x1c>
 800fc18:	690f      	ldr	r7, [r1, #16]
 800fc1a:	2f00      	cmp	r7, #0
 800fc1c:	d0a9      	beq.n	800fb72 <__sflush_r+0x1a>
 800fc1e:	0793      	lsls	r3, r2, #30
 800fc20:	680e      	ldr	r6, [r1, #0]
 800fc22:	bf08      	it	eq
 800fc24:	694b      	ldreq	r3, [r1, #20]
 800fc26:	600f      	str	r7, [r1, #0]
 800fc28:	bf18      	it	ne
 800fc2a:	2300      	movne	r3, #0
 800fc2c:	eba6 0807 	sub.w	r8, r6, r7
 800fc30:	608b      	str	r3, [r1, #8]
 800fc32:	f1b8 0f00 	cmp.w	r8, #0
 800fc36:	dd9c      	ble.n	800fb72 <__sflush_r+0x1a>
 800fc38:	4643      	mov	r3, r8
 800fc3a:	463a      	mov	r2, r7
 800fc3c:	6a21      	ldr	r1, [r4, #32]
 800fc3e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800fc40:	4628      	mov	r0, r5
 800fc42:	47b0      	blx	r6
 800fc44:	2800      	cmp	r0, #0
 800fc46:	dc06      	bgt.n	800fc56 <__sflush_r+0xfe>
 800fc48:	89a3      	ldrh	r3, [r4, #12]
 800fc4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fc4e:	81a3      	strh	r3, [r4, #12]
 800fc50:	f04f 30ff 	mov.w	r0, #4294967295
 800fc54:	e78e      	b.n	800fb74 <__sflush_r+0x1c>
 800fc56:	4407      	add	r7, r0
 800fc58:	eba8 0800 	sub.w	r8, r8, r0
 800fc5c:	e7e9      	b.n	800fc32 <__sflush_r+0xda>
 800fc5e:	bf00      	nop
 800fc60:	20400001 	.word	0x20400001

0800fc64 <_fflush_r>:
 800fc64:	b538      	push	{r3, r4, r5, lr}
 800fc66:	690b      	ldr	r3, [r1, #16]
 800fc68:	4605      	mov	r5, r0
 800fc6a:	460c      	mov	r4, r1
 800fc6c:	b1db      	cbz	r3, 800fca6 <_fflush_r+0x42>
 800fc6e:	b118      	cbz	r0, 800fc78 <_fflush_r+0x14>
 800fc70:	6983      	ldr	r3, [r0, #24]
 800fc72:	b90b      	cbnz	r3, 800fc78 <_fflush_r+0x14>
 800fc74:	f7ff fa38 	bl	800f0e8 <__sinit>
 800fc78:	4b0c      	ldr	r3, [pc, #48]	; (800fcac <_fflush_r+0x48>)
 800fc7a:	429c      	cmp	r4, r3
 800fc7c:	d109      	bne.n	800fc92 <_fflush_r+0x2e>
 800fc7e:	686c      	ldr	r4, [r5, #4]
 800fc80:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fc84:	b17b      	cbz	r3, 800fca6 <_fflush_r+0x42>
 800fc86:	4621      	mov	r1, r4
 800fc88:	4628      	mov	r0, r5
 800fc8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fc8e:	f7ff bf63 	b.w	800fb58 <__sflush_r>
 800fc92:	4b07      	ldr	r3, [pc, #28]	; (800fcb0 <_fflush_r+0x4c>)
 800fc94:	429c      	cmp	r4, r3
 800fc96:	d101      	bne.n	800fc9c <_fflush_r+0x38>
 800fc98:	68ac      	ldr	r4, [r5, #8]
 800fc9a:	e7f1      	b.n	800fc80 <_fflush_r+0x1c>
 800fc9c:	4b05      	ldr	r3, [pc, #20]	; (800fcb4 <_fflush_r+0x50>)
 800fc9e:	429c      	cmp	r4, r3
 800fca0:	bf08      	it	eq
 800fca2:	68ec      	ldreq	r4, [r5, #12]
 800fca4:	e7ec      	b.n	800fc80 <_fflush_r+0x1c>
 800fca6:	2000      	movs	r0, #0
 800fca8:	bd38      	pop	{r3, r4, r5, pc}
 800fcaa:	bf00      	nop
 800fcac:	080121f0 	.word	0x080121f0
 800fcb0:	08012210 	.word	0x08012210
 800fcb4:	080121d0 	.word	0x080121d0

0800fcb8 <_lseek_r>:
 800fcb8:	b538      	push	{r3, r4, r5, lr}
 800fcba:	4c07      	ldr	r4, [pc, #28]	; (800fcd8 <_lseek_r+0x20>)
 800fcbc:	4605      	mov	r5, r0
 800fcbe:	4608      	mov	r0, r1
 800fcc0:	4611      	mov	r1, r2
 800fcc2:	2200      	movs	r2, #0
 800fcc4:	6022      	str	r2, [r4, #0]
 800fcc6:	461a      	mov	r2, r3
 800fcc8:	f000 f8ba 	bl	800fe40 <_lseek>
 800fccc:	1c43      	adds	r3, r0, #1
 800fcce:	d102      	bne.n	800fcd6 <_lseek_r+0x1e>
 800fcd0:	6823      	ldr	r3, [r4, #0]
 800fcd2:	b103      	cbz	r3, 800fcd6 <_lseek_r+0x1e>
 800fcd4:	602b      	str	r3, [r5, #0]
 800fcd6:	bd38      	pop	{r3, r4, r5, pc}
 800fcd8:	2000ceb0 	.word	0x2000ceb0

0800fcdc <__swhatbuf_r>:
 800fcdc:	b570      	push	{r4, r5, r6, lr}
 800fcde:	460e      	mov	r6, r1
 800fce0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fce4:	2900      	cmp	r1, #0
 800fce6:	b096      	sub	sp, #88	; 0x58
 800fce8:	4614      	mov	r4, r2
 800fcea:	461d      	mov	r5, r3
 800fcec:	da07      	bge.n	800fcfe <__swhatbuf_r+0x22>
 800fcee:	2300      	movs	r3, #0
 800fcf0:	602b      	str	r3, [r5, #0]
 800fcf2:	89b3      	ldrh	r3, [r6, #12]
 800fcf4:	061a      	lsls	r2, r3, #24
 800fcf6:	d410      	bmi.n	800fd1a <__swhatbuf_r+0x3e>
 800fcf8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fcfc:	e00e      	b.n	800fd1c <__swhatbuf_r+0x40>
 800fcfe:	466a      	mov	r2, sp
 800fd00:	f000 f864 	bl	800fdcc <_fstat_r>
 800fd04:	2800      	cmp	r0, #0
 800fd06:	dbf2      	blt.n	800fcee <__swhatbuf_r+0x12>
 800fd08:	9a01      	ldr	r2, [sp, #4]
 800fd0a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800fd0e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800fd12:	425a      	negs	r2, r3
 800fd14:	415a      	adcs	r2, r3
 800fd16:	602a      	str	r2, [r5, #0]
 800fd18:	e7ee      	b.n	800fcf8 <__swhatbuf_r+0x1c>
 800fd1a:	2340      	movs	r3, #64	; 0x40
 800fd1c:	2000      	movs	r0, #0
 800fd1e:	6023      	str	r3, [r4, #0]
 800fd20:	b016      	add	sp, #88	; 0x58
 800fd22:	bd70      	pop	{r4, r5, r6, pc}

0800fd24 <__smakebuf_r>:
 800fd24:	898b      	ldrh	r3, [r1, #12]
 800fd26:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800fd28:	079d      	lsls	r5, r3, #30
 800fd2a:	4606      	mov	r6, r0
 800fd2c:	460c      	mov	r4, r1
 800fd2e:	d507      	bpl.n	800fd40 <__smakebuf_r+0x1c>
 800fd30:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800fd34:	6023      	str	r3, [r4, #0]
 800fd36:	6123      	str	r3, [r4, #16]
 800fd38:	2301      	movs	r3, #1
 800fd3a:	6163      	str	r3, [r4, #20]
 800fd3c:	b002      	add	sp, #8
 800fd3e:	bd70      	pop	{r4, r5, r6, pc}
 800fd40:	ab01      	add	r3, sp, #4
 800fd42:	466a      	mov	r2, sp
 800fd44:	f7ff ffca 	bl	800fcdc <__swhatbuf_r>
 800fd48:	9900      	ldr	r1, [sp, #0]
 800fd4a:	4605      	mov	r5, r0
 800fd4c:	4630      	mov	r0, r6
 800fd4e:	f7ff faab 	bl	800f2a8 <_malloc_r>
 800fd52:	b948      	cbnz	r0, 800fd68 <__smakebuf_r+0x44>
 800fd54:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fd58:	059a      	lsls	r2, r3, #22
 800fd5a:	d4ef      	bmi.n	800fd3c <__smakebuf_r+0x18>
 800fd5c:	f023 0303 	bic.w	r3, r3, #3
 800fd60:	f043 0302 	orr.w	r3, r3, #2
 800fd64:	81a3      	strh	r3, [r4, #12]
 800fd66:	e7e3      	b.n	800fd30 <__smakebuf_r+0xc>
 800fd68:	4b0d      	ldr	r3, [pc, #52]	; (800fda0 <__smakebuf_r+0x7c>)
 800fd6a:	62b3      	str	r3, [r6, #40]	; 0x28
 800fd6c:	89a3      	ldrh	r3, [r4, #12]
 800fd6e:	6020      	str	r0, [r4, #0]
 800fd70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fd74:	81a3      	strh	r3, [r4, #12]
 800fd76:	9b00      	ldr	r3, [sp, #0]
 800fd78:	6163      	str	r3, [r4, #20]
 800fd7a:	9b01      	ldr	r3, [sp, #4]
 800fd7c:	6120      	str	r0, [r4, #16]
 800fd7e:	b15b      	cbz	r3, 800fd98 <__smakebuf_r+0x74>
 800fd80:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fd84:	4630      	mov	r0, r6
 800fd86:	f000 f833 	bl	800fdf0 <_isatty_r>
 800fd8a:	b128      	cbz	r0, 800fd98 <__smakebuf_r+0x74>
 800fd8c:	89a3      	ldrh	r3, [r4, #12]
 800fd8e:	f023 0303 	bic.w	r3, r3, #3
 800fd92:	f043 0301 	orr.w	r3, r3, #1
 800fd96:	81a3      	strh	r3, [r4, #12]
 800fd98:	89a3      	ldrh	r3, [r4, #12]
 800fd9a:	431d      	orrs	r5, r3
 800fd9c:	81a5      	strh	r5, [r4, #12]
 800fd9e:	e7cd      	b.n	800fd3c <__smakebuf_r+0x18>
 800fda0:	0800f0b1 	.word	0x0800f0b1

0800fda4 <__malloc_lock>:
 800fda4:	4770      	bx	lr

0800fda6 <__malloc_unlock>:
 800fda6:	4770      	bx	lr

0800fda8 <_read_r>:
 800fda8:	b538      	push	{r3, r4, r5, lr}
 800fdaa:	4c07      	ldr	r4, [pc, #28]	; (800fdc8 <_read_r+0x20>)
 800fdac:	4605      	mov	r5, r0
 800fdae:	4608      	mov	r0, r1
 800fdb0:	4611      	mov	r1, r2
 800fdb2:	2200      	movs	r2, #0
 800fdb4:	6022      	str	r2, [r4, #0]
 800fdb6:	461a      	mov	r2, r3
 800fdb8:	f000 f84a 	bl	800fe50 <_read>
 800fdbc:	1c43      	adds	r3, r0, #1
 800fdbe:	d102      	bne.n	800fdc6 <_read_r+0x1e>
 800fdc0:	6823      	ldr	r3, [r4, #0]
 800fdc2:	b103      	cbz	r3, 800fdc6 <_read_r+0x1e>
 800fdc4:	602b      	str	r3, [r5, #0]
 800fdc6:	bd38      	pop	{r3, r4, r5, pc}
 800fdc8:	2000ceb0 	.word	0x2000ceb0

0800fdcc <_fstat_r>:
 800fdcc:	b538      	push	{r3, r4, r5, lr}
 800fdce:	4c07      	ldr	r4, [pc, #28]	; (800fdec <_fstat_r+0x20>)
 800fdd0:	2300      	movs	r3, #0
 800fdd2:	4605      	mov	r5, r0
 800fdd4:	4608      	mov	r0, r1
 800fdd6:	4611      	mov	r1, r2
 800fdd8:	6023      	str	r3, [r4, #0]
 800fdda:	f000 f821 	bl	800fe20 <_fstat>
 800fdde:	1c43      	adds	r3, r0, #1
 800fde0:	d102      	bne.n	800fde8 <_fstat_r+0x1c>
 800fde2:	6823      	ldr	r3, [r4, #0]
 800fde4:	b103      	cbz	r3, 800fde8 <_fstat_r+0x1c>
 800fde6:	602b      	str	r3, [r5, #0]
 800fde8:	bd38      	pop	{r3, r4, r5, pc}
 800fdea:	bf00      	nop
 800fdec:	2000ceb0 	.word	0x2000ceb0

0800fdf0 <_isatty_r>:
 800fdf0:	b538      	push	{r3, r4, r5, lr}
 800fdf2:	4c06      	ldr	r4, [pc, #24]	; (800fe0c <_isatty_r+0x1c>)
 800fdf4:	2300      	movs	r3, #0
 800fdf6:	4605      	mov	r5, r0
 800fdf8:	4608      	mov	r0, r1
 800fdfa:	6023      	str	r3, [r4, #0]
 800fdfc:	f000 f818 	bl	800fe30 <_isatty>
 800fe00:	1c43      	adds	r3, r0, #1
 800fe02:	d102      	bne.n	800fe0a <_isatty_r+0x1a>
 800fe04:	6823      	ldr	r3, [r4, #0]
 800fe06:	b103      	cbz	r3, 800fe0a <_isatty_r+0x1a>
 800fe08:	602b      	str	r3, [r5, #0]
 800fe0a:	bd38      	pop	{r3, r4, r5, pc}
 800fe0c:	2000ceb0 	.word	0x2000ceb0

0800fe10 <_close>:
 800fe10:	4b02      	ldr	r3, [pc, #8]	; (800fe1c <_close+0xc>)
 800fe12:	2258      	movs	r2, #88	; 0x58
 800fe14:	601a      	str	r2, [r3, #0]
 800fe16:	f04f 30ff 	mov.w	r0, #4294967295
 800fe1a:	4770      	bx	lr
 800fe1c:	2000ceb0 	.word	0x2000ceb0

0800fe20 <_fstat>:
 800fe20:	4b02      	ldr	r3, [pc, #8]	; (800fe2c <_fstat+0xc>)
 800fe22:	2258      	movs	r2, #88	; 0x58
 800fe24:	601a      	str	r2, [r3, #0]
 800fe26:	f04f 30ff 	mov.w	r0, #4294967295
 800fe2a:	4770      	bx	lr
 800fe2c:	2000ceb0 	.word	0x2000ceb0

0800fe30 <_isatty>:
 800fe30:	4b02      	ldr	r3, [pc, #8]	; (800fe3c <_isatty+0xc>)
 800fe32:	2258      	movs	r2, #88	; 0x58
 800fe34:	601a      	str	r2, [r3, #0]
 800fe36:	2000      	movs	r0, #0
 800fe38:	4770      	bx	lr
 800fe3a:	bf00      	nop
 800fe3c:	2000ceb0 	.word	0x2000ceb0

0800fe40 <_lseek>:
 800fe40:	4b02      	ldr	r3, [pc, #8]	; (800fe4c <_lseek+0xc>)
 800fe42:	2258      	movs	r2, #88	; 0x58
 800fe44:	601a      	str	r2, [r3, #0]
 800fe46:	f04f 30ff 	mov.w	r0, #4294967295
 800fe4a:	4770      	bx	lr
 800fe4c:	2000ceb0 	.word	0x2000ceb0

0800fe50 <_read>:
 800fe50:	4b02      	ldr	r3, [pc, #8]	; (800fe5c <_read+0xc>)
 800fe52:	2258      	movs	r2, #88	; 0x58
 800fe54:	601a      	str	r2, [r3, #0]
 800fe56:	f04f 30ff 	mov.w	r0, #4294967295
 800fe5a:	4770      	bx	lr
 800fe5c:	2000ceb0 	.word	0x2000ceb0

0800fe60 <_sbrk>:
 800fe60:	4b04      	ldr	r3, [pc, #16]	; (800fe74 <_sbrk+0x14>)
 800fe62:	6819      	ldr	r1, [r3, #0]
 800fe64:	4602      	mov	r2, r0
 800fe66:	b909      	cbnz	r1, 800fe6c <_sbrk+0xc>
 800fe68:	4903      	ldr	r1, [pc, #12]	; (800fe78 <_sbrk+0x18>)
 800fe6a:	6019      	str	r1, [r3, #0]
 800fe6c:	6818      	ldr	r0, [r3, #0]
 800fe6e:	4402      	add	r2, r0
 800fe70:	601a      	str	r2, [r3, #0]
 800fe72:	4770      	bx	lr
 800fe74:	200048b0 	.word	0x200048b0
 800fe78:	2000ceb8 	.word	0x2000ceb8

0800fe7c <_write>:
 800fe7c:	4b02      	ldr	r3, [pc, #8]	; (800fe88 <_write+0xc>)
 800fe7e:	2258      	movs	r2, #88	; 0x58
 800fe80:	601a      	str	r2, [r3, #0]
 800fe82:	f04f 30ff 	mov.w	r0, #4294967295
 800fe86:	4770      	bx	lr
 800fe88:	2000ceb0 	.word	0x2000ceb0

0800fe8c <_exit>:
 800fe8c:	e7fe      	b.n	800fe8c <_exit>
	...

0800fe90 <_init>:
 800fe90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fe92:	bf00      	nop
 800fe94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fe96:	bc08      	pop	{r3}
 800fe98:	469e      	mov	lr, r3
 800fe9a:	4770      	bx	lr

0800fe9c <_fini>:
 800fe9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fe9e:	bf00      	nop
 800fea0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fea2:	bc08      	pop	{r3}
 800fea4:	469e      	mov	lr, r3
 800fea6:	4770      	bx	lr
