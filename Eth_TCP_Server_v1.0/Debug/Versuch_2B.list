
Versuch_2B.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017e14  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003d64  08018014  08018014  00028014  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801bd78  0801bd78  000301ec  2**0
                  CONTENTS
  4 .ARM          00000008  0801bd78  0801bd78  0002bd78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801bd80  0801bd80  000301ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801bd80  0801bd80  0002bd80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801bd84  0801bd84  0002bd84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  0801bd88  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000d234  200001ec  0801bf74  000301ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000d420  0801bf74  0003d420  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000301ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   00045c51  00000000  00000000  0003021a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00007c9d  00000000  00000000  00075e6b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002360  00000000  00000000  0007db08  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002220  00000000  00000000  0007fe68  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00039fb8  00000000  00000000  00082088  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0002e0b0  00000000  00000000  000bc040  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    001225f1  00000000  00000000  000ea0f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0020c6e1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000993c  00000000  00000000  0020c75c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001ec 	.word	0x200001ec
 800021c:	00000000 	.word	0x00000000
 8000220:	08017ffc 	.word	0x08017ffc

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001f0 	.word	0x200001f0
 800023c:	08017ffc 	.word	0x08017ffc

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr
	...

08000260 <memchr>:
 8000260:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000264:	2a10      	cmp	r2, #16
 8000266:	db2b      	blt.n	80002c0 <memchr+0x60>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	d008      	beq.n	8000280 <memchr+0x20>
 800026e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000272:	3a01      	subs	r2, #1
 8000274:	428b      	cmp	r3, r1
 8000276:	d02d      	beq.n	80002d4 <memchr+0x74>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	b342      	cbz	r2, 80002d0 <memchr+0x70>
 800027e:	d1f6      	bne.n	800026e <memchr+0xe>
 8000280:	b4f0      	push	{r4, r5, r6, r7}
 8000282:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000286:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800028a:	f022 0407 	bic.w	r4, r2, #7
 800028e:	f07f 0700 	mvns.w	r7, #0
 8000292:	2300      	movs	r3, #0
 8000294:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000298:	3c08      	subs	r4, #8
 800029a:	ea85 0501 	eor.w	r5, r5, r1
 800029e:	ea86 0601 	eor.w	r6, r6, r1
 80002a2:	fa85 f547 	uadd8	r5, r5, r7
 80002a6:	faa3 f587 	sel	r5, r3, r7
 80002aa:	fa86 f647 	uadd8	r6, r6, r7
 80002ae:	faa5 f687 	sel	r6, r5, r7
 80002b2:	b98e      	cbnz	r6, 80002d8 <memchr+0x78>
 80002b4:	d1ee      	bne.n	8000294 <memchr+0x34>
 80002b6:	bcf0      	pop	{r4, r5, r6, r7}
 80002b8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002bc:	f002 0207 	and.w	r2, r2, #7
 80002c0:	b132      	cbz	r2, 80002d0 <memchr+0x70>
 80002c2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002c6:	3a01      	subs	r2, #1
 80002c8:	ea83 0301 	eor.w	r3, r3, r1
 80002cc:	b113      	cbz	r3, 80002d4 <memchr+0x74>
 80002ce:	d1f8      	bne.n	80002c2 <memchr+0x62>
 80002d0:	2000      	movs	r0, #0
 80002d2:	4770      	bx	lr
 80002d4:	3801      	subs	r0, #1
 80002d6:	4770      	bx	lr
 80002d8:	2d00      	cmp	r5, #0
 80002da:	bf06      	itte	eq
 80002dc:	4635      	moveq	r5, r6
 80002de:	3803      	subeq	r0, #3
 80002e0:	3807      	subne	r0, #7
 80002e2:	f015 0f01 	tst.w	r5, #1
 80002e6:	d107      	bne.n	80002f8 <memchr+0x98>
 80002e8:	3001      	adds	r0, #1
 80002ea:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ee:	bf02      	ittt	eq
 80002f0:	3001      	addeq	r0, #1
 80002f2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002f6:	3001      	addeq	r0, #1
 80002f8:	bcf0      	pop	{r4, r5, r6, r7}
 80002fa:	3801      	subs	r0, #1
 80002fc:	4770      	bx	lr
 80002fe:	bf00      	nop

08000300 <__aeabi_uldivmod>:
 8000300:	b953      	cbnz	r3, 8000318 <__aeabi_uldivmod+0x18>
 8000302:	b94a      	cbnz	r2, 8000318 <__aeabi_uldivmod+0x18>
 8000304:	2900      	cmp	r1, #0
 8000306:	bf08      	it	eq
 8000308:	2800      	cmpeq	r0, #0
 800030a:	bf1c      	itt	ne
 800030c:	f04f 31ff 	movne.w	r1, #4294967295
 8000310:	f04f 30ff 	movne.w	r0, #4294967295
 8000314:	f000 b972 	b.w	80005fc <__aeabi_idiv0>
 8000318:	f1ad 0c08 	sub.w	ip, sp, #8
 800031c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000320:	f000 f806 	bl	8000330 <__udivmoddi4>
 8000324:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000328:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800032c:	b004      	add	sp, #16
 800032e:	4770      	bx	lr

08000330 <__udivmoddi4>:
 8000330:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000334:	9e08      	ldr	r6, [sp, #32]
 8000336:	4604      	mov	r4, r0
 8000338:	4688      	mov	r8, r1
 800033a:	2b00      	cmp	r3, #0
 800033c:	d14b      	bne.n	80003d6 <__udivmoddi4+0xa6>
 800033e:	428a      	cmp	r2, r1
 8000340:	4615      	mov	r5, r2
 8000342:	d967      	bls.n	8000414 <__udivmoddi4+0xe4>
 8000344:	fab2 f282 	clz	r2, r2
 8000348:	b14a      	cbz	r2, 800035e <__udivmoddi4+0x2e>
 800034a:	f1c2 0720 	rsb	r7, r2, #32
 800034e:	fa01 f302 	lsl.w	r3, r1, r2
 8000352:	fa20 f707 	lsr.w	r7, r0, r7
 8000356:	4095      	lsls	r5, r2
 8000358:	ea47 0803 	orr.w	r8, r7, r3
 800035c:	4094      	lsls	r4, r2
 800035e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000362:	0c23      	lsrs	r3, r4, #16
 8000364:	fbb8 f7fe 	udiv	r7, r8, lr
 8000368:	fa1f fc85 	uxth.w	ip, r5
 800036c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000370:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000374:	fb07 f10c 	mul.w	r1, r7, ip
 8000378:	4299      	cmp	r1, r3
 800037a:	d909      	bls.n	8000390 <__udivmoddi4+0x60>
 800037c:	18eb      	adds	r3, r5, r3
 800037e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000382:	f080 811b 	bcs.w	80005bc <__udivmoddi4+0x28c>
 8000386:	4299      	cmp	r1, r3
 8000388:	f240 8118 	bls.w	80005bc <__udivmoddi4+0x28c>
 800038c:	3f02      	subs	r7, #2
 800038e:	442b      	add	r3, r5
 8000390:	1a5b      	subs	r3, r3, r1
 8000392:	b2a4      	uxth	r4, r4
 8000394:	fbb3 f0fe 	udiv	r0, r3, lr
 8000398:	fb0e 3310 	mls	r3, lr, r0, r3
 800039c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003a0:	fb00 fc0c 	mul.w	ip, r0, ip
 80003a4:	45a4      	cmp	ip, r4
 80003a6:	d909      	bls.n	80003bc <__udivmoddi4+0x8c>
 80003a8:	192c      	adds	r4, r5, r4
 80003aa:	f100 33ff 	add.w	r3, r0, #4294967295
 80003ae:	f080 8107 	bcs.w	80005c0 <__udivmoddi4+0x290>
 80003b2:	45a4      	cmp	ip, r4
 80003b4:	f240 8104 	bls.w	80005c0 <__udivmoddi4+0x290>
 80003b8:	3802      	subs	r0, #2
 80003ba:	442c      	add	r4, r5
 80003bc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003c0:	eba4 040c 	sub.w	r4, r4, ip
 80003c4:	2700      	movs	r7, #0
 80003c6:	b11e      	cbz	r6, 80003d0 <__udivmoddi4+0xa0>
 80003c8:	40d4      	lsrs	r4, r2
 80003ca:	2300      	movs	r3, #0
 80003cc:	e9c6 4300 	strd	r4, r3, [r6]
 80003d0:	4639      	mov	r1, r7
 80003d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d909      	bls.n	80003ee <__udivmoddi4+0xbe>
 80003da:	2e00      	cmp	r6, #0
 80003dc:	f000 80eb 	beq.w	80005b6 <__udivmoddi4+0x286>
 80003e0:	2700      	movs	r7, #0
 80003e2:	e9c6 0100 	strd	r0, r1, [r6]
 80003e6:	4638      	mov	r0, r7
 80003e8:	4639      	mov	r1, r7
 80003ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ee:	fab3 f783 	clz	r7, r3
 80003f2:	2f00      	cmp	r7, #0
 80003f4:	d147      	bne.n	8000486 <__udivmoddi4+0x156>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d302      	bcc.n	8000400 <__udivmoddi4+0xd0>
 80003fa:	4282      	cmp	r2, r0
 80003fc:	f200 80fa 	bhi.w	80005f4 <__udivmoddi4+0x2c4>
 8000400:	1a84      	subs	r4, r0, r2
 8000402:	eb61 0303 	sbc.w	r3, r1, r3
 8000406:	2001      	movs	r0, #1
 8000408:	4698      	mov	r8, r3
 800040a:	2e00      	cmp	r6, #0
 800040c:	d0e0      	beq.n	80003d0 <__udivmoddi4+0xa0>
 800040e:	e9c6 4800 	strd	r4, r8, [r6]
 8000412:	e7dd      	b.n	80003d0 <__udivmoddi4+0xa0>
 8000414:	b902      	cbnz	r2, 8000418 <__udivmoddi4+0xe8>
 8000416:	deff      	udf	#255	; 0xff
 8000418:	fab2 f282 	clz	r2, r2
 800041c:	2a00      	cmp	r2, #0
 800041e:	f040 808f 	bne.w	8000540 <__udivmoddi4+0x210>
 8000422:	1b49      	subs	r1, r1, r5
 8000424:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000428:	fa1f f885 	uxth.w	r8, r5
 800042c:	2701      	movs	r7, #1
 800042e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000432:	0c23      	lsrs	r3, r4, #16
 8000434:	fb0e 111c 	mls	r1, lr, ip, r1
 8000438:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043c:	fb08 f10c 	mul.w	r1, r8, ip
 8000440:	4299      	cmp	r1, r3
 8000442:	d907      	bls.n	8000454 <__udivmoddi4+0x124>
 8000444:	18eb      	adds	r3, r5, r3
 8000446:	f10c 30ff 	add.w	r0, ip, #4294967295
 800044a:	d202      	bcs.n	8000452 <__udivmoddi4+0x122>
 800044c:	4299      	cmp	r1, r3
 800044e:	f200 80cd 	bhi.w	80005ec <__udivmoddi4+0x2bc>
 8000452:	4684      	mov	ip, r0
 8000454:	1a59      	subs	r1, r3, r1
 8000456:	b2a3      	uxth	r3, r4
 8000458:	fbb1 f0fe 	udiv	r0, r1, lr
 800045c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000460:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000464:	fb08 f800 	mul.w	r8, r8, r0
 8000468:	45a0      	cmp	r8, r4
 800046a:	d907      	bls.n	800047c <__udivmoddi4+0x14c>
 800046c:	192c      	adds	r4, r5, r4
 800046e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000472:	d202      	bcs.n	800047a <__udivmoddi4+0x14a>
 8000474:	45a0      	cmp	r8, r4
 8000476:	f200 80b6 	bhi.w	80005e6 <__udivmoddi4+0x2b6>
 800047a:	4618      	mov	r0, r3
 800047c:	eba4 0408 	sub.w	r4, r4, r8
 8000480:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000484:	e79f      	b.n	80003c6 <__udivmoddi4+0x96>
 8000486:	f1c7 0c20 	rsb	ip, r7, #32
 800048a:	40bb      	lsls	r3, r7
 800048c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000490:	ea4e 0e03 	orr.w	lr, lr, r3
 8000494:	fa01 f407 	lsl.w	r4, r1, r7
 8000498:	fa20 f50c 	lsr.w	r5, r0, ip
 800049c:	fa21 f30c 	lsr.w	r3, r1, ip
 80004a0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80004a4:	4325      	orrs	r5, r4
 80004a6:	fbb3 f9f8 	udiv	r9, r3, r8
 80004aa:	0c2c      	lsrs	r4, r5, #16
 80004ac:	fb08 3319 	mls	r3, r8, r9, r3
 80004b0:	fa1f fa8e 	uxth.w	sl, lr
 80004b4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80004b8:	fb09 f40a 	mul.w	r4, r9, sl
 80004bc:	429c      	cmp	r4, r3
 80004be:	fa02 f207 	lsl.w	r2, r2, r7
 80004c2:	fa00 f107 	lsl.w	r1, r0, r7
 80004c6:	d90b      	bls.n	80004e0 <__udivmoddi4+0x1b0>
 80004c8:	eb1e 0303 	adds.w	r3, lr, r3
 80004cc:	f109 30ff 	add.w	r0, r9, #4294967295
 80004d0:	f080 8087 	bcs.w	80005e2 <__udivmoddi4+0x2b2>
 80004d4:	429c      	cmp	r4, r3
 80004d6:	f240 8084 	bls.w	80005e2 <__udivmoddi4+0x2b2>
 80004da:	f1a9 0902 	sub.w	r9, r9, #2
 80004de:	4473      	add	r3, lr
 80004e0:	1b1b      	subs	r3, r3, r4
 80004e2:	b2ad      	uxth	r5, r5
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3310 	mls	r3, r8, r0, r3
 80004ec:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004f0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004f4:	45a2      	cmp	sl, r4
 80004f6:	d908      	bls.n	800050a <__udivmoddi4+0x1da>
 80004f8:	eb1e 0404 	adds.w	r4, lr, r4
 80004fc:	f100 33ff 	add.w	r3, r0, #4294967295
 8000500:	d26b      	bcs.n	80005da <__udivmoddi4+0x2aa>
 8000502:	45a2      	cmp	sl, r4
 8000504:	d969      	bls.n	80005da <__udivmoddi4+0x2aa>
 8000506:	3802      	subs	r0, #2
 8000508:	4474      	add	r4, lr
 800050a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800050e:	fba0 8902 	umull	r8, r9, r0, r2
 8000512:	eba4 040a 	sub.w	r4, r4, sl
 8000516:	454c      	cmp	r4, r9
 8000518:	46c2      	mov	sl, r8
 800051a:	464b      	mov	r3, r9
 800051c:	d354      	bcc.n	80005c8 <__udivmoddi4+0x298>
 800051e:	d051      	beq.n	80005c4 <__udivmoddi4+0x294>
 8000520:	2e00      	cmp	r6, #0
 8000522:	d069      	beq.n	80005f8 <__udivmoddi4+0x2c8>
 8000524:	ebb1 050a 	subs.w	r5, r1, sl
 8000528:	eb64 0403 	sbc.w	r4, r4, r3
 800052c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000530:	40fd      	lsrs	r5, r7
 8000532:	40fc      	lsrs	r4, r7
 8000534:	ea4c 0505 	orr.w	r5, ip, r5
 8000538:	e9c6 5400 	strd	r5, r4, [r6]
 800053c:	2700      	movs	r7, #0
 800053e:	e747      	b.n	80003d0 <__udivmoddi4+0xa0>
 8000540:	f1c2 0320 	rsb	r3, r2, #32
 8000544:	fa20 f703 	lsr.w	r7, r0, r3
 8000548:	4095      	lsls	r5, r2
 800054a:	fa01 f002 	lsl.w	r0, r1, r2
 800054e:	fa21 f303 	lsr.w	r3, r1, r3
 8000552:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000556:	4338      	orrs	r0, r7
 8000558:	0c01      	lsrs	r1, r0, #16
 800055a:	fbb3 f7fe 	udiv	r7, r3, lr
 800055e:	fa1f f885 	uxth.w	r8, r5
 8000562:	fb0e 3317 	mls	r3, lr, r7, r3
 8000566:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056a:	fb07 f308 	mul.w	r3, r7, r8
 800056e:	428b      	cmp	r3, r1
 8000570:	fa04 f402 	lsl.w	r4, r4, r2
 8000574:	d907      	bls.n	8000586 <__udivmoddi4+0x256>
 8000576:	1869      	adds	r1, r5, r1
 8000578:	f107 3cff 	add.w	ip, r7, #4294967295
 800057c:	d22f      	bcs.n	80005de <__udivmoddi4+0x2ae>
 800057e:	428b      	cmp	r3, r1
 8000580:	d92d      	bls.n	80005de <__udivmoddi4+0x2ae>
 8000582:	3f02      	subs	r7, #2
 8000584:	4429      	add	r1, r5
 8000586:	1acb      	subs	r3, r1, r3
 8000588:	b281      	uxth	r1, r0
 800058a:	fbb3 f0fe 	udiv	r0, r3, lr
 800058e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000592:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000596:	fb00 f308 	mul.w	r3, r0, r8
 800059a:	428b      	cmp	r3, r1
 800059c:	d907      	bls.n	80005ae <__udivmoddi4+0x27e>
 800059e:	1869      	adds	r1, r5, r1
 80005a0:	f100 3cff 	add.w	ip, r0, #4294967295
 80005a4:	d217      	bcs.n	80005d6 <__udivmoddi4+0x2a6>
 80005a6:	428b      	cmp	r3, r1
 80005a8:	d915      	bls.n	80005d6 <__udivmoddi4+0x2a6>
 80005aa:	3802      	subs	r0, #2
 80005ac:	4429      	add	r1, r5
 80005ae:	1ac9      	subs	r1, r1, r3
 80005b0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80005b4:	e73b      	b.n	800042e <__udivmoddi4+0xfe>
 80005b6:	4637      	mov	r7, r6
 80005b8:	4630      	mov	r0, r6
 80005ba:	e709      	b.n	80003d0 <__udivmoddi4+0xa0>
 80005bc:	4607      	mov	r7, r0
 80005be:	e6e7      	b.n	8000390 <__udivmoddi4+0x60>
 80005c0:	4618      	mov	r0, r3
 80005c2:	e6fb      	b.n	80003bc <__udivmoddi4+0x8c>
 80005c4:	4541      	cmp	r1, r8
 80005c6:	d2ab      	bcs.n	8000520 <__udivmoddi4+0x1f0>
 80005c8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005cc:	eb69 020e 	sbc.w	r2, r9, lr
 80005d0:	3801      	subs	r0, #1
 80005d2:	4613      	mov	r3, r2
 80005d4:	e7a4      	b.n	8000520 <__udivmoddi4+0x1f0>
 80005d6:	4660      	mov	r0, ip
 80005d8:	e7e9      	b.n	80005ae <__udivmoddi4+0x27e>
 80005da:	4618      	mov	r0, r3
 80005dc:	e795      	b.n	800050a <__udivmoddi4+0x1da>
 80005de:	4667      	mov	r7, ip
 80005e0:	e7d1      	b.n	8000586 <__udivmoddi4+0x256>
 80005e2:	4681      	mov	r9, r0
 80005e4:	e77c      	b.n	80004e0 <__udivmoddi4+0x1b0>
 80005e6:	3802      	subs	r0, #2
 80005e8:	442c      	add	r4, r5
 80005ea:	e747      	b.n	800047c <__udivmoddi4+0x14c>
 80005ec:	f1ac 0c02 	sub.w	ip, ip, #2
 80005f0:	442b      	add	r3, r5
 80005f2:	e72f      	b.n	8000454 <__udivmoddi4+0x124>
 80005f4:	4638      	mov	r0, r7
 80005f6:	e708      	b.n	800040a <__udivmoddi4+0xda>
 80005f8:	4637      	mov	r7, r6
 80005fa:	e6e9      	b.n	80003d0 <__udivmoddi4+0xa0>

080005fc <__aeabi_idiv0>:
 80005fc:	4770      	bx	lr
 80005fe:	bf00      	nop

08000600 <vApplicationIdleHook>:
/* Hook prototypes */
void vApplicationIdleHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 8000600:	b480      	push	{r7}
 8000602:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 8000604:	bf00      	nop
 8000606:	46bd      	mov	sp, r7
 8000608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060c:	4770      	bx	lr
	...

08000610 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000610:	b480      	push	{r7}
 8000612:	b085      	sub	sp, #20
 8000614:	af00      	add	r7, sp, #0
 8000616:	60f8      	str	r0, [r7, #12]
 8000618:	60b9      	str	r1, [r7, #8]
 800061a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800061c:	68fb      	ldr	r3, [r7, #12]
 800061e:	4a07      	ldr	r2, [pc, #28]	; (800063c <vApplicationGetIdleTaskMemory+0x2c>)
 8000620:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000622:	68bb      	ldr	r3, [r7, #8]
 8000624:	4a06      	ldr	r2, [pc, #24]	; (8000640 <vApplicationGetIdleTaskMemory+0x30>)
 8000626:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	2280      	movs	r2, #128	; 0x80
 800062c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800062e:	bf00      	nop
 8000630:	3714      	adds	r7, #20
 8000632:	46bd      	mov	sp, r7
 8000634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000638:	4770      	bx	lr
 800063a:	bf00      	nop
 800063c:	20000208 	.word	0x20000208
 8000640:	2000026c 	.word	0x2000026c

08000644 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 8000644:	b480      	push	{r7}
 8000646:	b085      	sub	sp, #20
 8000648:	af00      	add	r7, sp, #0
 800064a:	60f8      	str	r0, [r7, #12]
 800064c:	60b9      	str	r1, [r7, #8]
 800064e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8000650:	68fb      	ldr	r3, [r7, #12]
 8000652:	4a07      	ldr	r2, [pc, #28]	; (8000670 <vApplicationGetTimerTaskMemory+0x2c>)
 8000654:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 8000656:	68bb      	ldr	r3, [r7, #8]
 8000658:	4a06      	ldr	r2, [pc, #24]	; (8000674 <vApplicationGetTimerTaskMemory+0x30>)
 800065a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000662:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000664:	bf00      	nop
 8000666:	3714      	adds	r7, #20
 8000668:	46bd      	mov	sp, r7
 800066a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066e:	4770      	bx	lr
 8000670:	2000046c 	.word	0x2000046c
 8000674:	200004d0 	.word	0x200004d0

08000678 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b084      	sub	sp, #16
 800067c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800067e:	f000 fc9c 	bl	8000fba <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000682:	f000 f85d 	bl	8000740 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000686:	f000 f91b 	bl	80008c0 <MX_GPIO_Init>
  MX_ADC1_Init();
 800068a:	f000 f8c5 	bl	8000818 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  MX_LWIP_Init();
 800068e:	f003 fd3f 	bl	8004110 <MX_LWIP_Init>
  /* USER CODE END 2 */

  /* USER CODE BEGIN RTOS_MUTEX */
  /* add mutexes, ... */
  Own_Queue = xQueueCreate(3,sizeof(struct queue_struct));
 8000692:	2200      	movs	r2, #0
 8000694:	2130      	movs	r1, #48	; 0x30
 8000696:	2003      	movs	r0, #3
 8000698:	f004 ff5d 	bl	8005556 <xQueueGenericCreate>
 800069c:	4602      	mov	r2, r0
 800069e:	4b1f      	ldr	r3, [pc, #124]	; (800071c <main+0xa4>)
 80006a0:	601a      	str	r2, [r3, #0]
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  HeartBeat_Timer = xTimerCreate("HeartBeat", pdMS_TO_TICKS(HEART_BEAT_RATE), pdTRUE, 0, HeartBeatCallback);
 80006a2:	4b1f      	ldr	r3, [pc, #124]	; (8000720 <main+0xa8>)
 80006a4:	9300      	str	r3, [sp, #0]
 80006a6:	2300      	movs	r3, #0
 80006a8:	2201      	movs	r2, #1
 80006aa:	21fa      	movs	r1, #250	; 0xfa
 80006ac:	481d      	ldr	r0, [pc, #116]	; (8000724 <main+0xac>)
 80006ae:	f006 ffe7 	bl	8007680 <xTimerCreate>
 80006b2:	6078      	str	r0, [r7, #4]
  /* Create the thread(s) */
  /* definition and creation of defaultTask */

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  xTaskCreate(vTemp_Task, "Temperature",configMINIMAL_STACK_SIZE, NULL,1, NULL);		// Stacksize 128kB
 80006b4:	2300      	movs	r3, #0
 80006b6:	9301      	str	r3, [sp, #4]
 80006b8:	2301      	movs	r3, #1
 80006ba:	9300      	str	r3, [sp, #0]
 80006bc:	2300      	movs	r3, #0
 80006be:	2280      	movs	r2, #128	; 0x80
 80006c0:	4919      	ldr	r1, [pc, #100]	; (8000728 <main+0xb0>)
 80006c2:	481a      	ldr	r0, [pc, #104]	; (800072c <main+0xb4>)
 80006c4:	f005 ff0a 	bl	80064dc <xTaskCreate>
  xTaskCreate(vGateKeeper_Task,"GateKeeper",4*configMINIMAL_STACK_SIZE,NULL,2,NULL);	// Stacksize 4*128kB
 80006c8:	2300      	movs	r3, #0
 80006ca:	9301      	str	r3, [sp, #4]
 80006cc:	2302      	movs	r3, #2
 80006ce:	9300      	str	r3, [sp, #0]
 80006d0:	2300      	movs	r3, #0
 80006d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006d6:	4916      	ldr	r1, [pc, #88]	; (8000730 <main+0xb8>)
 80006d8:	4816      	ldr	r0, [pc, #88]	; (8000734 <main+0xbc>)
 80006da:	f005 feff 	bl	80064dc <xTaskCreate>
  xTaskCreate(vUDP_Task,"UDP",4*configMINIMAL_STACK_SIZE,NULL,1,NULL);					// Stacksize 4*128kB
 80006de:	2300      	movs	r3, #0
 80006e0:	9301      	str	r3, [sp, #4]
 80006e2:	2301      	movs	r3, #1
 80006e4:	9300      	str	r3, [sp, #0]
 80006e6:	2300      	movs	r3, #0
 80006e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006ec:	4912      	ldr	r1, [pc, #72]	; (8000738 <main+0xc0>)
 80006ee:	4813      	ldr	r0, [pc, #76]	; (800073c <main+0xc4>)
 80006f0:	f005 fef4 	bl	80064dc <xTaskCreate>

  if(HeartBeat_Timer != NULL){
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d00f      	beq.n	800071a <main+0xa2>
	  Timer_State = xTimerStart(HeartBeat_Timer,0);
 80006fa:	f006 f9f1 	bl	8006ae0 <xTaskGetTickCount>
 80006fe:	4602      	mov	r2, r0
 8000700:	2300      	movs	r3, #0
 8000702:	9300      	str	r3, [sp, #0]
 8000704:	2300      	movs	r3, #0
 8000706:	2101      	movs	r1, #1
 8000708:	6878      	ldr	r0, [r7, #4]
 800070a:	f007 f817 	bl	800773c <xTimerGenericCommand>
 800070e:	6038      	str	r0, [r7, #0]
	  if(Timer_State == pdPASS){
 8000710:	683b      	ldr	r3, [r7, #0]
 8000712:	2b01      	cmp	r3, #1
 8000714:	d101      	bne.n	800071a <main+0xa2>
		  vTaskStartScheduler();
 8000716:	f006 f8cf 	bl	80068b8 <vTaskStartScheduler>
  /* Start scheduler */

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800071a:	e7fe      	b.n	800071a <main+0xa2>
 800071c:	20004954 	.word	0x20004954
 8000720:	08000989 	.word	0x08000989
 8000724:	08018014 	.word	0x08018014
 8000728:	08018020 	.word	0x08018020
 800072c:	080009a5 	.word	0x080009a5
 8000730:	0801802c 	.word	0x0801802c
 8000734:	08000bc1 	.word	0x08000bc1
 8000738:	08018038 	.word	0x08018038
 800073c:	08000a79 	.word	0x08000a79

08000740 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b094      	sub	sp, #80	; 0x50
 8000744:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000746:	f107 031c 	add.w	r3, r7, #28
 800074a:	2234      	movs	r2, #52	; 0x34
 800074c:	2100      	movs	r1, #0
 800074e:	4618      	mov	r0, r3
 8000750:	f016 fb7d 	bl	8016e4e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000754:	f107 0308 	add.w	r3, r7, #8
 8000758:	2200      	movs	r2, #0
 800075a:	601a      	str	r2, [r3, #0]
 800075c:	605a      	str	r2, [r3, #4]
 800075e:	609a      	str	r2, [r3, #8]
 8000760:	60da      	str	r2, [r3, #12]
 8000762:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000764:	4b2a      	ldr	r3, [pc, #168]	; (8000810 <SystemClock_Config+0xd0>)
 8000766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000768:	4a29      	ldr	r2, [pc, #164]	; (8000810 <SystemClock_Config+0xd0>)
 800076a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800076e:	6413      	str	r3, [r2, #64]	; 0x40
 8000770:	4b27      	ldr	r3, [pc, #156]	; (8000810 <SystemClock_Config+0xd0>)
 8000772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000774:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000778:	607b      	str	r3, [r7, #4]
 800077a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800077c:	4b25      	ldr	r3, [pc, #148]	; (8000814 <SystemClock_Config+0xd4>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	4a24      	ldr	r2, [pc, #144]	; (8000814 <SystemClock_Config+0xd4>)
 8000782:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000786:	6013      	str	r3, [r2, #0]
 8000788:	4b22      	ldr	r3, [pc, #136]	; (8000814 <SystemClock_Config+0xd4>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000790:	603b      	str	r3, [r7, #0]
 8000792:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000794:	2301      	movs	r3, #1
 8000796:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000798:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800079c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800079e:	2302      	movs	r3, #2
 80007a0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007a2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80007a6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80007a8:	2304      	movs	r3, #4
 80007aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 80007ac:	23d8      	movs	r3, #216	; 0xd8
 80007ae:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007b0:	2302      	movs	r3, #2
 80007b2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80007b4:	2302      	movs	r3, #2
 80007b6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007b8:	f107 031c 	add.w	r3, r7, #28
 80007bc:	4618      	mov	r0, r3
 80007be:	f002 fd03 	bl	80031c8 <HAL_RCC_OscConfig>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80007c8:	f000 fa3a 	bl	8000c40 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80007cc:	f002 fcac 	bl	8003128 <HAL_PWREx_EnableOverDrive>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80007d6:	f000 fa33 	bl	8000c40 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007da:	230f      	movs	r3, #15
 80007dc:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007de:	2302      	movs	r3, #2
 80007e0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007e2:	2300      	movs	r3, #0
 80007e4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007e6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007ea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007f0:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80007f2:	f107 0308 	add.w	r3, r7, #8
 80007f6:	2107      	movs	r1, #7
 80007f8:	4618      	mov	r0, r3
 80007fa:	f002 ff93 	bl	8003724 <HAL_RCC_ClockConfig>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d001      	beq.n	8000808 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000804:	f000 fa1c 	bl	8000c40 <Error_Handler>
  }
}
 8000808:	bf00      	nop
 800080a:	3750      	adds	r7, #80	; 0x50
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}
 8000810:	40023800 	.word	0x40023800
 8000814:	40007000 	.word	0x40007000

08000818 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b084      	sub	sp, #16
 800081c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800081e:	463b      	mov	r3, r7
 8000820:	2200      	movs	r2, #0
 8000822:	601a      	str	r2, [r3, #0]
 8000824:	605a      	str	r2, [r3, #4]
 8000826:	609a      	str	r2, [r3, #8]
 8000828:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800082a:	4b21      	ldr	r3, [pc, #132]	; (80008b0 <MX_ADC1_Init+0x98>)
 800082c:	4a21      	ldr	r2, [pc, #132]	; (80008b4 <MX_ADC1_Init+0x9c>)
 800082e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8000830:	4b1f      	ldr	r3, [pc, #124]	; (80008b0 <MX_ADC1_Init+0x98>)
 8000832:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000836:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000838:	4b1d      	ldr	r3, [pc, #116]	; (80008b0 <MX_ADC1_Init+0x98>)
 800083a:	2200      	movs	r2, #0
 800083c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800083e:	4b1c      	ldr	r3, [pc, #112]	; (80008b0 <MX_ADC1_Init+0x98>)
 8000840:	2200      	movs	r2, #0
 8000842:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000844:	4b1a      	ldr	r3, [pc, #104]	; (80008b0 <MX_ADC1_Init+0x98>)
 8000846:	2201      	movs	r2, #1
 8000848:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800084a:	4b19      	ldr	r3, [pc, #100]	; (80008b0 <MX_ADC1_Init+0x98>)
 800084c:	2200      	movs	r2, #0
 800084e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000852:	4b17      	ldr	r3, [pc, #92]	; (80008b0 <MX_ADC1_Init+0x98>)
 8000854:	2200      	movs	r2, #0
 8000856:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000858:	4b15      	ldr	r3, [pc, #84]	; (80008b0 <MX_ADC1_Init+0x98>)
 800085a:	4a17      	ldr	r2, [pc, #92]	; (80008b8 <MX_ADC1_Init+0xa0>)
 800085c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800085e:	4b14      	ldr	r3, [pc, #80]	; (80008b0 <MX_ADC1_Init+0x98>)
 8000860:	2200      	movs	r2, #0
 8000862:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000864:	4b12      	ldr	r3, [pc, #72]	; (80008b0 <MX_ADC1_Init+0x98>)
 8000866:	2201      	movs	r2, #1
 8000868:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800086a:	4b11      	ldr	r3, [pc, #68]	; (80008b0 <MX_ADC1_Init+0x98>)
 800086c:	2200      	movs	r2, #0
 800086e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000872:	4b0f      	ldr	r3, [pc, #60]	; (80008b0 <MX_ADC1_Init+0x98>)
 8000874:	2201      	movs	r2, #1
 8000876:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000878:	480d      	ldr	r0, [pc, #52]	; (80008b0 <MX_ADC1_Init+0x98>)
 800087a:	f000 fbed 	bl	8001058 <HAL_ADC_Init>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d001      	beq.n	8000888 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000884:	f000 f9dc 	bl	8000c40 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000888:	4b0c      	ldr	r3, [pc, #48]	; (80008bc <MX_ADC1_Init+0xa4>)
 800088a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800088c:	2301      	movs	r3, #1
 800088e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 8000890:	2306      	movs	r3, #6
 8000892:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000894:	463b      	mov	r3, r7
 8000896:	4619      	mov	r1, r3
 8000898:	4805      	ldr	r0, [pc, #20]	; (80008b0 <MX_ADC1_Init+0x98>)
 800089a:	f000 fdbb 	bl	8001414 <HAL_ADC_ConfigChannel>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80008a4:	f000 f9cc 	bl	8000c40 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80008a8:	bf00      	nop
 80008aa:	3710      	adds	r7, #16
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	20004908 	.word	0x20004908
 80008b4:	40012000 	.word	0x40012000
 80008b8:	0f000001 	.word	0x0f000001
 80008bc:	10000012 	.word	0x10000012

080008c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b08a      	sub	sp, #40	; 0x28
 80008c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c6:	f107 0314 	add.w	r3, r7, #20
 80008ca:	2200      	movs	r2, #0
 80008cc:	601a      	str	r2, [r3, #0]
 80008ce:	605a      	str	r2, [r3, #4]
 80008d0:	609a      	str	r2, [r3, #8]
 80008d2:	60da      	str	r2, [r3, #12]
 80008d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008d6:	4b2a      	ldr	r3, [pc, #168]	; (8000980 <MX_GPIO_Init+0xc0>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008da:	4a29      	ldr	r2, [pc, #164]	; (8000980 <MX_GPIO_Init+0xc0>)
 80008dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008e0:	6313      	str	r3, [r2, #48]	; 0x30
 80008e2:	4b27      	ldr	r3, [pc, #156]	; (8000980 <MX_GPIO_Init+0xc0>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008ea:	613b      	str	r3, [r7, #16]
 80008ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008ee:	4b24      	ldr	r3, [pc, #144]	; (8000980 <MX_GPIO_Init+0xc0>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f2:	4a23      	ldr	r2, [pc, #140]	; (8000980 <MX_GPIO_Init+0xc0>)
 80008f4:	f043 0304 	orr.w	r3, r3, #4
 80008f8:	6313      	str	r3, [r2, #48]	; 0x30
 80008fa:	4b21      	ldr	r3, [pc, #132]	; (8000980 <MX_GPIO_Init+0xc0>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fe:	f003 0304 	and.w	r3, r3, #4
 8000902:	60fb      	str	r3, [r7, #12]
 8000904:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000906:	4b1e      	ldr	r3, [pc, #120]	; (8000980 <MX_GPIO_Init+0xc0>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090a:	4a1d      	ldr	r2, [pc, #116]	; (8000980 <MX_GPIO_Init+0xc0>)
 800090c:	f043 0301 	orr.w	r3, r3, #1
 8000910:	6313      	str	r3, [r2, #48]	; 0x30
 8000912:	4b1b      	ldr	r3, [pc, #108]	; (8000980 <MX_GPIO_Init+0xc0>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000916:	f003 0301 	and.w	r3, r3, #1
 800091a:	60bb      	str	r3, [r7, #8]
 800091c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800091e:	4b18      	ldr	r3, [pc, #96]	; (8000980 <MX_GPIO_Init+0xc0>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000922:	4a17      	ldr	r2, [pc, #92]	; (8000980 <MX_GPIO_Init+0xc0>)
 8000924:	f043 0302 	orr.w	r3, r3, #2
 8000928:	6313      	str	r3, [r2, #48]	; 0x30
 800092a:	4b15      	ldr	r3, [pc, #84]	; (8000980 <MX_GPIO_Init+0xc0>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092e:	f003 0302 	and.w	r3, r3, #2
 8000932:	607b      	str	r3, [r7, #4]
 8000934:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000936:	4b12      	ldr	r3, [pc, #72]	; (8000980 <MX_GPIO_Init+0xc0>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093a:	4a11      	ldr	r2, [pc, #68]	; (8000980 <MX_GPIO_Init+0xc0>)
 800093c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000940:	6313      	str	r3, [r2, #48]	; 0x30
 8000942:	4b0f      	ldr	r3, [pc, #60]	; (8000980 <MX_GPIO_Init+0xc0>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000946:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800094a:	603b      	str	r3, [r7, #0]
 800094c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Green_LED_Pin|Red_LED_Pin|Blue_LED_Pin, GPIO_PIN_RESET);
 800094e:	2200      	movs	r2, #0
 8000950:	f244 0181 	movw	r1, #16513	; 0x4081
 8000954:	480b      	ldr	r0, [pc, #44]	; (8000984 <MX_GPIO_Init+0xc4>)
 8000956:	f002 fbb3 	bl	80030c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Green_LED_Pin Red_LED_Pin Blue_LED_Pin */
  GPIO_InitStruct.Pin = Green_LED_Pin|Red_LED_Pin|Blue_LED_Pin;
 800095a:	f244 0381 	movw	r3, #16513	; 0x4081
 800095e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000960:	2301      	movs	r3, #1
 8000962:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000964:	2300      	movs	r3, #0
 8000966:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000968:	2300      	movs	r3, #0
 800096a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800096c:	f107 0314 	add.w	r3, r7, #20
 8000970:	4619      	mov	r1, r3
 8000972:	4804      	ldr	r0, [pc, #16]	; (8000984 <MX_GPIO_Init+0xc4>)
 8000974:	f002 f9fa 	bl	8002d6c <HAL_GPIO_Init>

}
 8000978:	bf00      	nop
 800097a:	3728      	adds	r7, #40	; 0x28
 800097c:	46bd      	mov	sp, r7
 800097e:	bd80      	pop	{r7, pc}
 8000980:	40023800 	.word	0x40023800
 8000984:	40020400 	.word	0x40020400

08000988 <HeartBeatCallback>:
void vAplicationIdleHook(void){
	__WFI();
}

/* Timer callback function */
void HeartBeatCallback(TimerHandle_t xTimer){
 8000988:	b580      	push	{r7, lr}
 800098a:	b082      	sub	sp, #8
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOB, Green_LED_Pin);
 8000990:	2101      	movs	r1, #1
 8000992:	4803      	ldr	r0, [pc, #12]	; (80009a0 <HeartBeatCallback+0x18>)
 8000994:	f002 fbad 	bl	80030f2 <HAL_GPIO_TogglePin>
}
 8000998:	bf00      	nop
 800099a:	3708      	adds	r7, #8
 800099c:	46bd      	mov	sp, r7
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	40020400 	.word	0x40020400

080009a4 <vTemp_Task>:

/* Temperature reading task */
void vTemp_Task(void *pvParameters){
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b092      	sub	sp, #72	; 0x48
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
	TickType_t xLastWakeTime;
	static uint16_t counter = 0; // Counter variable to count tempr. reading
	static uint32_t temp_sum = 0; // variable to store sum of temp. value
	uint32_t temp = 0;			// variable to store current temp. value
 80009ac:	2300      	movs	r3, #0
 80009ae:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t temp_avr = 0;		// variable to store average temp. value
 80009b0:	2300      	movs	r3, #0
 80009b2:	643b      	str	r3, [r7, #64]	; 0x40
	queue_struct from_temp_task; // structure variable to store data for gate keeper task
	from_temp_task.port = htons(CLIENT_PORT);	// port for client
 80009b4:	f641 305b 	movw	r0, #7003	; 0x1b5b
 80009b8:	f00a ff4e 	bl	800b858 <lwip_htons>
 80009bc:	4603      	mov	r3, r0
 80009be:	823b      	strh	r3, [r7, #16]
	from_temp_task.addr = IPADDR_BROADCAST;	// client address
 80009c0:	f04f 33ff 	mov.w	r3, #4294967295
 80009c4:	60fb      	str	r3, [r7, #12]

	xLastWakeTime = xTaskGetTickCount();
 80009c6:	f006 f88b 	bl	8006ae0 <xTaskGetTickCount>
 80009ca:	4603      	mov	r3, r0
 80009cc:	63fb      	str	r3, [r7, #60]	; 0x3c

	while(1){

		/* Read temp. adc value */
		HAL_ADC_Start(&hadc1);
 80009ce:	4824      	ldr	r0, [pc, #144]	; (8000a60 <vTemp_Task+0xbc>)
 80009d0:	f000 fb86 	bl	80010e0 <HAL_ADC_Start>
		while(HAL_ADC_PollForConversion(&hadc1,1) != HAL_OK){}
 80009d4:	bf00      	nop
 80009d6:	2101      	movs	r1, #1
 80009d8:	4821      	ldr	r0, [pc, #132]	; (8000a60 <vTemp_Task+0xbc>)
 80009da:	f000 fc83 	bl	80012e4 <HAL_ADC_PollForConversion>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d1f8      	bne.n	80009d6 <vTemp_Task+0x32>
		temp = HAL_ADC_GetValue(&hadc1);
 80009e4:	481e      	ldr	r0, [pc, #120]	; (8000a60 <vTemp_Task+0xbc>)
 80009e6:	f000 fd08 	bl	80013fa <HAL_ADC_GetValue>
 80009ea:	6478      	str	r0, [r7, #68]	; 0x44
		temp_sum += temp;
 80009ec:	4b1d      	ldr	r3, [pc, #116]	; (8000a64 <vTemp_Task+0xc0>)
 80009ee:	681a      	ldr	r2, [r3, #0]
 80009f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80009f2:	4413      	add	r3, r2
 80009f4:	4a1b      	ldr	r2, [pc, #108]	; (8000a64 <vTemp_Task+0xc0>)
 80009f6:	6013      	str	r3, [r2, #0]
		counter++;
 80009f8:	4b1b      	ldr	r3, [pc, #108]	; (8000a68 <vTemp_Task+0xc4>)
 80009fa:	881b      	ldrh	r3, [r3, #0]
 80009fc:	3301      	adds	r3, #1
 80009fe:	b29a      	uxth	r2, r3
 8000a00:	4b19      	ldr	r3, [pc, #100]	; (8000a68 <vTemp_Task+0xc4>)
 8000a02:	801a      	strh	r2, [r3, #0]
		temp_avr = temp_sum / counter;	// get average value
 8000a04:	4b17      	ldr	r3, [pc, #92]	; (8000a64 <vTemp_Task+0xc0>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	4a17      	ldr	r2, [pc, #92]	; (8000a68 <vTemp_Task+0xc4>)
 8000a0a:	8812      	ldrh	r2, [r2, #0]
 8000a0c:	fbb3 f3f2 	udiv	r3, r3, r2
 8000a10:	643b      	str	r3, [r7, #64]	; 0x40
		HAL_ADC_Stop(&hadc1);
 8000a12:	4813      	ldr	r0, [pc, #76]	; (8000a60 <vTemp_Task+0xbc>)
 8000a14:	f000 fc32 	bl	800127c <HAL_ADC_Stop>

		memset(&from_temp_task.msg_buffer,0,BUFFER_LENGTH); // clear the character buffer
 8000a18:	f107 030c 	add.w	r3, r7, #12
 8000a1c:	3306      	adds	r3, #6
 8000a1e:	2228      	movs	r2, #40	; 0x28
 8000a20:	2100      	movs	r1, #0
 8000a22:	4618      	mov	r0, r3
 8000a24:	f016 fa13 	bl	8016e4e <memset>
		/* make a string */
		sprintf(from_temp_task.msg_buffer,"Cur_Temp= %lu , Avr_Temp= %lu\n",(unsigned long)temp,(unsigned long)temp_avr);
 8000a28:	f107 030c 	add.w	r3, r7, #12
 8000a2c:	1d98      	adds	r0, r3, #6
 8000a2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000a30:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000a32:	490e      	ldr	r1, [pc, #56]	; (8000a6c <vTemp_Task+0xc8>)
 8000a34:	f016 fa60 	bl	8016ef8 <siprintf>

		HAL_GPIO_TogglePin(GPIOB, Blue_LED_Pin);	// toggel blue led
 8000a38:	2180      	movs	r1, #128	; 0x80
 8000a3a:	480d      	ldr	r0, [pc, #52]	; (8000a70 <vTemp_Task+0xcc>)
 8000a3c:	f002 fb59 	bl	80030f2 <HAL_GPIO_TogglePin>

		xQueueSendToBack(Own_Queue, &from_temp_task, 10);	// send message to gatekeeper task
 8000a40:	4b0c      	ldr	r3, [pc, #48]	; (8000a74 <vTemp_Task+0xd0>)
 8000a42:	6818      	ldr	r0, [r3, #0]
 8000a44:	f107 010c 	add.w	r1, r7, #12
 8000a48:	2300      	movs	r3, #0
 8000a4a:	220a      	movs	r2, #10
 8000a4c:	f004 fe30 	bl	80056b0 <xQueueGenericSend>

		vTaskDelayUntil(&xLastWakeTime, TEMP_READING_RATE); // wait till timeout
 8000a50:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000a54:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000a58:	4618      	mov	r0, r3
 8000a5a:	f005 fe77 	bl	800674c <vTaskDelayUntil>
		HAL_ADC_Start(&hadc1);
 8000a5e:	e7b6      	b.n	80009ce <vTemp_Task+0x2a>
 8000a60:	20004908 	.word	0x20004908
 8000a64:	200008d0 	.word	0x200008d0
 8000a68:	200008d4 	.word	0x200008d4
 8000a6c:	0801803c 	.word	0x0801803c
 8000a70:	40020400 	.word	0x40020400
 8000a74:	20004954 	.word	0x20004954

08000a78 <vUDP_Task>:
	}
}

/* UDP task */
void vUDP_Task(void *pvParameters){
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b09a      	sub	sp, #104	; 0x68
 8000a7c:	af02      	add	r7, sp, #8
 8000a7e:	6078      	str	r0, [r7, #4]
	struct sockaddr_in client_addr; // struct variable for udp client
	struct sockaddr_in server_addr; // struct variable for udp server
	queue_struct from_udp_task;		// struct variable to pass through gate keeper
	uint8_t echo_flag = FALSE;		// echo flag
 8000a80:	2300      	movs	r3, #0
 8000a82:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

	/*
	 * Create socket descriptor : "Domain=AF_INET","Type=SOCK_DGRAM","Protocol=0"
	 *  AF_INET= Connect with different machine, SOCK_DGRAM= UDP, 0=No additional protocol
	 *  */
	socket_id = socket(AF_INET,SOCK_DGRAM,0);
 8000a86:	2200      	movs	r2, #0
 8000a88:	2102      	movs	r1, #2
 8000a8a:	2002      	movs	r0, #2
 8000a8c:	f00a fb54 	bl	800b138 <lwip_socket>
 8000a90:	4602      	mov	r2, r0
 8000a92:	4b44      	ldr	r3, [pc, #272]	; (8000ba4 <vUDP_Task+0x12c>)
 8000a94:	601a      	str	r2, [r3, #0]

//	Reset structure variable
	memset(&server_addr, 0, sizeof(server_addr));
 8000a96:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000a9a:	2210      	movs	r2, #16
 8000a9c:	2100      	movs	r1, #0
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	f016 f9d5 	bl	8016e4e <memset>
	memset(&client_addr, 0, sizeof(client_addr));
 8000aa4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000aa8:	2210      	movs	r2, #16
 8000aaa:	2100      	movs	r1, #0
 8000aac:	4618      	mov	r0, r3
 8000aae:	f016 f9ce 	bl	8016e4e <memset>

// Initialize port
	server_addr.sin_family = AF_INET;	// Domain used in socket descriptor
 8000ab2:	2302      	movs	r3, #2
 8000ab4:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	server_addr.sin_addr.s_addr = inet_addr(OWN_IP_ADDR); // Permit given IP Address
 8000ab8:	483b      	ldr	r0, [pc, #236]	; (8000ba8 <vUDP_Task+0x130>)
 8000aba:	f014 ff1e 	bl	80158fa <ipaddr_addr>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	643b      	str	r3, [r7, #64]	; 0x40
//	server_addr.sin_addr.s_addr = htonl(INADDR_ANY);
	server_addr.sin_port = htons(OWN_PORT);	// Permit given Port
 8000ac2:	f641 208f 	movw	r0, #6799	; 0x1a8f
 8000ac6:	f00a fec7 	bl	800b858 <lwip_htons>
 8000aca:	4603      	mov	r3, r0
 8000acc:	87fb      	strh	r3, [r7, #62]	; 0x3e

//	Bind the socket to a defined port
	if (bind(socket_id,(struct sockaddr *) &server_addr, sizeof(server_addr)) == -1){
 8000ace:	4b35      	ldr	r3, [pc, #212]	; (8000ba4 <vUDP_Task+0x12c>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8000ad6:	2210      	movs	r2, #16
 8000ad8:	4618      	mov	r0, r3
 8000ada:	f009 fe97 	bl	800a80c <lwip_bind>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ae4:	d101      	bne.n	8000aea <vUDP_Task+0x72>
		Error_Handler();
 8000ae6:	f000 f8ab 	bl	8000c40 <Error_Handler>
	}

	from_len = sizeof(client_addr);
 8000aea:	2310      	movs	r3, #16
 8000aec:	60bb      	str	r3, [r7, #8]

//	Endlos loop
	while(1){
//	Clear recv_data array
		memset(&from_udp_task.msg_buffer,0,BUFFER_LENGTH);
 8000aee:	f107 030c 	add.w	r3, r7, #12
 8000af2:	3306      	adds	r3, #6
 8000af4:	2228      	movs	r2, #40	; 0x28
 8000af6:	2100      	movs	r1, #0
 8000af8:	4618      	mov	r0, r3
 8000afa:	f016 f9a8 	bl	8016e4e <memset>
//	Receive data from server
		recvfrom(socket_id,from_udp_task.msg_buffer,sizeof(from_udp_task.msg_buffer),0,(struct sockaddr *)&client_addr,&from_len);
 8000afe:	4b29      	ldr	r3, [pc, #164]	; (8000ba4 <vUDP_Task+0x12c>)
 8000b00:	6818      	ldr	r0, [r3, #0]
 8000b02:	f107 030c 	add.w	r3, r7, #12
 8000b06:	1d99      	adds	r1, r3, #6
 8000b08:	f107 0308 	add.w	r3, r7, #8
 8000b0c:	9301      	str	r3, [sp, #4]
 8000b0e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000b12:	9300      	str	r3, [sp, #0]
 8000b14:	2300      	movs	r3, #0
 8000b16:	2228      	movs	r2, #40	; 0x28
 8000b18:	f00a f96a 	bl	800adf0 <lwip_recvfrom>

// Set flag according received message
		if(strcmp(from_udp_task.msg_buffer,"ECHO_ON") == 0){
 8000b1c:	f107 030c 	add.w	r3, r7, #12
 8000b20:	3306      	adds	r3, #6
 8000b22:	4922      	ldr	r1, [pc, #136]	; (8000bac <vUDP_Task+0x134>)
 8000b24:	4618      	mov	r0, r3
 8000b26:	f7ff fb8b 	bl	8000240 <strcmp>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d109      	bne.n	8000b44 <vUDP_Task+0xcc>
			HAL_GPIO_WritePin(GPIOB, Red_LED_Pin,GPIO_PIN_SET);
 8000b30:	2201      	movs	r2, #1
 8000b32:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b36:	481e      	ldr	r0, [pc, #120]	; (8000bb0 <vUDP_Task+0x138>)
 8000b38:	f002 fac2 	bl	80030c0 <HAL_GPIO_WritePin>
			echo_flag = TRUE;
 8000b3c:	2301      	movs	r3, #1
 8000b3e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8000b42:	e012      	b.n	8000b6a <vUDP_Task+0xf2>
		}
		else if(strcmp(from_udp_task.msg_buffer,"ECHO_OFF")== 0){
 8000b44:	f107 030c 	add.w	r3, r7, #12
 8000b48:	3306      	adds	r3, #6
 8000b4a:	491a      	ldr	r1, [pc, #104]	; (8000bb4 <vUDP_Task+0x13c>)
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	f7ff fb77 	bl	8000240 <strcmp>
 8000b52:	4603      	mov	r3, r0
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d108      	bne.n	8000b6a <vUDP_Task+0xf2>
			HAL_GPIO_WritePin(GPIOB, Red_LED_Pin,GPIO_PIN_RESET);
 8000b58:	2200      	movs	r2, #0
 8000b5a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b5e:	4814      	ldr	r0, [pc, #80]	; (8000bb0 <vUDP_Task+0x138>)
 8000b60:	f002 faae 	bl	80030c0 <HAL_GPIO_WritePin>
			echo_flag = FALSE;
 8000b64:	2300      	movs	r3, #0
 8000b66:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		if (echo_flag == TRUE){
 8000b6a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000b6e:	2b01      	cmp	r3, #1
 8000b70:	d1bd      	bne.n	8000aee <vUDP_Task+0x76>
			from_udp_task.addr = client_addr.sin_addr.s_addr;
 8000b72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000b74:	60fb      	str	r3, [r7, #12]
			from_udp_task.port = client_addr.sin_port;
 8000b76:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8000b7a:	823b      	strh	r3, [r7, #16]
			/* Make string */
			sprintf(from_udp_task.msg_buffer,"%s\n",from_udp_task.msg_buffer);
 8000b7c:	f107 030c 	add.w	r3, r7, #12
 8000b80:	1d9a      	adds	r2, r3, #6
 8000b82:	f107 030c 	add.w	r3, r7, #12
 8000b86:	3306      	adds	r3, #6
 8000b88:	490b      	ldr	r1, [pc, #44]	; (8000bb8 <vUDP_Task+0x140>)
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	f016 f9b4 	bl	8016ef8 <siprintf>
			xQueueSend(Own_Queue,&from_udp_task,10); // send to gatekeeper task
 8000b90:	4b0a      	ldr	r3, [pc, #40]	; (8000bbc <vUDP_Task+0x144>)
 8000b92:	6818      	ldr	r0, [r3, #0]
 8000b94:	f107 010c 	add.w	r1, r7, #12
 8000b98:	2300      	movs	r3, #0
 8000b9a:	220a      	movs	r2, #10
 8000b9c:	f004 fd88 	bl	80056b0 <xQueueGenericSend>
		memset(&from_udp_task.msg_buffer,0,BUFFER_LENGTH);
 8000ba0:	e7a5      	b.n	8000aee <vUDP_Task+0x76>
 8000ba2:	bf00      	nop
 8000ba4:	20004950 	.word	0x20004950
 8000ba8:	0801805c 	.word	0x0801805c
 8000bac:	0801806c 	.word	0x0801806c
 8000bb0:	40020400 	.word	0x40020400
 8000bb4:	08018074 	.word	0x08018074
 8000bb8:	08018080 	.word	0x08018080
 8000bbc:	20004954 	.word	0x20004954

08000bc0 <vGateKeeper_Task>:
		}
	}
}

/* Gatekeeper task */
void vGateKeeper_Task(void *pvParameters){
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b094      	sub	sp, #80	; 0x50
 8000bc4:	af02      	add	r7, sp, #8
 8000bc6:	6078      	str	r0, [r7, #4]
	queue_struct recv_from; // struct variable to store received message from queue
	struct sockaddr_in client_addr; // struct variable for udp client

	while(1){
		memset(&recv_from,0,sizeof(recv_from)); // reset the struct variable
 8000bc8:	f107 0318 	add.w	r3, r7, #24
 8000bcc:	2230      	movs	r2, #48	; 0x30
 8000bce:	2100      	movs	r1, #0
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f016 f93c 	bl	8016e4e <memset>
		xQueueReceive(Own_Queue, &recv_from, portMAX_DELAY); // receive message
 8000bd6:	4b0f      	ldr	r3, [pc, #60]	; (8000c14 <vGateKeeper_Task+0x54>)
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	f107 0118 	add.w	r1, r7, #24
 8000bde:	f04f 32ff 	mov.w	r2, #4294967295
 8000be2:	4618      	mov	r0, r3
 8000be4:	f004 ff94 	bl	8005b10 <xQueueReceive>

		/* UDP client initialization */
		client_addr.sin_family = AF_INET;
 8000be8:	2302      	movs	r3, #2
 8000bea:	727b      	strb	r3, [r7, #9]
		client_addr.sin_addr.s_addr = recv_from.addr;
 8000bec:	69bb      	ldr	r3, [r7, #24]
 8000bee:	60fb      	str	r3, [r7, #12]
		client_addr.sin_port = recv_from.port;
 8000bf0:	8bbb      	ldrh	r3, [r7, #28]
 8000bf2:	817b      	strh	r3, [r7, #10]

		/* Send message via UDP interface */
		sendto(socket_id,recv_from.msg_buffer,sizeof(recv_from.msg_buffer),0,(struct sockaddr *)&client_addr,sizeof(client_addr));
 8000bf4:	4b08      	ldr	r3, [pc, #32]	; (8000c18 <vGateKeeper_Task+0x58>)
 8000bf6:	6818      	ldr	r0, [r3, #0]
 8000bf8:	f107 0318 	add.w	r3, r7, #24
 8000bfc:	1d99      	adds	r1, r3, #6
 8000bfe:	2310      	movs	r3, #16
 8000c00:	9301      	str	r3, [sp, #4]
 8000c02:	f107 0308 	add.w	r3, r7, #8
 8000c06:	9300      	str	r3, [sp, #0]
 8000c08:	2300      	movs	r3, #0
 8000c0a:	2228      	movs	r2, #40	; 0x28
 8000c0c:	f00a f9e2 	bl	800afd4 <lwip_sendto>
		memset(&recv_from,0,sizeof(recv_from)); // reset the struct variable
 8000c10:	e7da      	b.n	8000bc8 <vGateKeeper_Task+0x8>
 8000c12:	bf00      	nop
 8000c14:	20004954 	.word	0x20004954
 8000c18:	20004950 	.word	0x20004950

08000c1c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b082      	sub	sp, #8
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM10) {
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	4a04      	ldr	r2, [pc, #16]	; (8000c3c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c2a:	4293      	cmp	r3, r2
 8000c2c:	d101      	bne.n	8000c32 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000c2e:	f000 f9d1 	bl	8000fd4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000c32:	bf00      	nop
 8000c34:	3708      	adds	r7, #8
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	40014400 	.word	0x40014400

08000c40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000c44:	bf00      	nop
 8000c46:	46bd      	mov	sp, r7
 8000c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4c:	4770      	bx	lr
	...

08000c50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	b083      	sub	sp, #12
 8000c54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000c56:	4b0f      	ldr	r3, [pc, #60]	; (8000c94 <HAL_MspInit+0x44>)
 8000c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c5a:	4a0e      	ldr	r2, [pc, #56]	; (8000c94 <HAL_MspInit+0x44>)
 8000c5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c60:	6413      	str	r3, [r2, #64]	; 0x40
 8000c62:	4b0c      	ldr	r3, [pc, #48]	; (8000c94 <HAL_MspInit+0x44>)
 8000c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c6a:	607b      	str	r3, [r7, #4]
 8000c6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c6e:	4b09      	ldr	r3, [pc, #36]	; (8000c94 <HAL_MspInit+0x44>)
 8000c70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c72:	4a08      	ldr	r2, [pc, #32]	; (8000c94 <HAL_MspInit+0x44>)
 8000c74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c78:	6453      	str	r3, [r2, #68]	; 0x44
 8000c7a:	4b06      	ldr	r3, [pc, #24]	; (8000c94 <HAL_MspInit+0x44>)
 8000c7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c82:	603b      	str	r3, [r7, #0]
 8000c84:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c86:	bf00      	nop
 8000c88:	370c      	adds	r7, #12
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c90:	4770      	bx	lr
 8000c92:	bf00      	nop
 8000c94:	40023800 	.word	0x40023800

08000c98 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b085      	sub	sp, #20
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	4a0a      	ldr	r2, [pc, #40]	; (8000cd0 <HAL_ADC_MspInit+0x38>)
 8000ca6:	4293      	cmp	r3, r2
 8000ca8:	d10b      	bne.n	8000cc2 <HAL_ADC_MspInit+0x2a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000caa:	4b0a      	ldr	r3, [pc, #40]	; (8000cd4 <HAL_ADC_MspInit+0x3c>)
 8000cac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cae:	4a09      	ldr	r2, [pc, #36]	; (8000cd4 <HAL_ADC_MspInit+0x3c>)
 8000cb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cb4:	6453      	str	r3, [r2, #68]	; 0x44
 8000cb6:	4b07      	ldr	r3, [pc, #28]	; (8000cd4 <HAL_ADC_MspInit+0x3c>)
 8000cb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000cbe:	60fb      	str	r3, [r7, #12]
 8000cc0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000cc2:	bf00      	nop
 8000cc4:	3714      	adds	r7, #20
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ccc:	4770      	bx	lr
 8000cce:	bf00      	nop
 8000cd0:	40012000 	.word	0x40012000
 8000cd4:	40023800 	.word	0x40023800

08000cd8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b08c      	sub	sp, #48	; 0x30
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM10 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8000ce8:	2200      	movs	r2, #0
 8000cea:	6879      	ldr	r1, [r7, #4]
 8000cec:	2019      	movs	r0, #25
 8000cee:	f000 fe8d 	bl	8001a0c <HAL_NVIC_SetPriority>

  /* Enable the TIM10 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000cf2:	2019      	movs	r0, #25
 8000cf4:	f000 fea6 	bl	8001a44 <HAL_NVIC_EnableIRQ>
  /* Enable TIM10 clock */
  __HAL_RCC_TIM10_CLK_ENABLE();
 8000cf8:	4b1f      	ldr	r3, [pc, #124]	; (8000d78 <HAL_InitTick+0xa0>)
 8000cfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cfc:	4a1e      	ldr	r2, [pc, #120]	; (8000d78 <HAL_InitTick+0xa0>)
 8000cfe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d02:	6453      	str	r3, [r2, #68]	; 0x44
 8000d04:	4b1c      	ldr	r3, [pc, #112]	; (8000d78 <HAL_InitTick+0xa0>)
 8000d06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d0c:	60fb      	str	r3, [r7, #12]
 8000d0e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d10:	f107 0210 	add.w	r2, r7, #16
 8000d14:	f107 0314 	add.w	r3, r7, #20
 8000d18:	4611      	mov	r1, r2
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f002 fee6 	bl	8003aec <HAL_RCC_GetClockConfig>

  /* Compute TIM10 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000d20:	f002 fed0 	bl	8003ac4 <HAL_RCC_GetPCLK2Freq>
 8000d24:	4603      	mov	r3, r0
 8000d26:	005b      	lsls	r3, r3, #1
 8000d28:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM10 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000d2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d2c:	4a13      	ldr	r2, [pc, #76]	; (8000d7c <HAL_InitTick+0xa4>)
 8000d2e:	fba2 2303 	umull	r2, r3, r2, r3
 8000d32:	0c9b      	lsrs	r3, r3, #18
 8000d34:	3b01      	subs	r3, #1
 8000d36:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM10 */
  htim10.Instance = TIM10;
 8000d38:	4b11      	ldr	r3, [pc, #68]	; (8000d80 <HAL_InitTick+0xa8>)
 8000d3a:	4a12      	ldr	r2, [pc, #72]	; (8000d84 <HAL_InitTick+0xac>)
 8000d3c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM10CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim10.Init.Period = (1000000 / 1000) - 1;
 8000d3e:	4b10      	ldr	r3, [pc, #64]	; (8000d80 <HAL_InitTick+0xa8>)
 8000d40:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d44:	60da      	str	r2, [r3, #12]
  htim10.Init.Prescaler = uwPrescalerValue;
 8000d46:	4a0e      	ldr	r2, [pc, #56]	; (8000d80 <HAL_InitTick+0xa8>)
 8000d48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d4a:	6053      	str	r3, [r2, #4]
  htim10.Init.ClockDivision = 0;
 8000d4c:	4b0c      	ldr	r3, [pc, #48]	; (8000d80 <HAL_InitTick+0xa8>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	611a      	str	r2, [r3, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d52:	4b0b      	ldr	r3, [pc, #44]	; (8000d80 <HAL_InitTick+0xa8>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim10) == HAL_OK)
 8000d58:	4809      	ldr	r0, [pc, #36]	; (8000d80 <HAL_InitTick+0xa8>)
 8000d5a:	f002 fef9 	bl	8003b50 <HAL_TIM_Base_Init>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d104      	bne.n	8000d6e <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim10);
 8000d64:	4806      	ldr	r0, [pc, #24]	; (8000d80 <HAL_InitTick+0xa8>)
 8000d66:	f002 ff55 	bl	8003c14 <HAL_TIM_Base_Start_IT>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	e000      	b.n	8000d70 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8000d6e:	2301      	movs	r3, #1
}
 8000d70:	4618      	mov	r0, r3
 8000d72:	3730      	adds	r7, #48	; 0x30
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	40023800 	.word	0x40023800
 8000d7c:	431bde83 	.word	0x431bde83
 8000d80:	20004958 	.word	0x20004958
 8000d84:	40014400 	.word	0x40014400

08000d88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000d8c:	bf00      	nop
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d94:	4770      	bx	lr

08000d96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d96:	b480      	push	{r7}
 8000d98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d9a:	e7fe      	b.n	8000d9a <HardFault_Handler+0x4>

08000d9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000da0:	e7fe      	b.n	8000da0 <MemManage_Handler+0x4>

08000da2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000da2:	b480      	push	{r7}
 8000da4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000da6:	e7fe      	b.n	8000da6 <BusFault_Handler+0x4>

08000da8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dac:	e7fe      	b.n	8000dac <UsageFault_Handler+0x4>

08000dae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dae:	b480      	push	{r7}
 8000db0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000db2:	bf00      	nop
 8000db4:	46bd      	mov	sp, r7
 8000db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dba:	4770      	bx	lr

08000dbc <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8000dc0:	4802      	ldr	r0, [pc, #8]	; (8000dcc <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000dc2:	f002 ff9f 	bl	8003d04 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000dc6:	bf00      	nop
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	20004958 	.word	0x20004958

08000dd0 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000dd4:	4802      	ldr	r0, [pc, #8]	; (8000de0 <ETH_IRQHandler+0x10>)
 8000dd6:	f001 fa27 	bl	8002228 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8000dda:	bf00      	nop
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	200062cc 	.word	0x200062cc

08000de4 <ETH_WKUP_IRQHandler>:

/**
  * @brief This function handles Ethernet wake-up interrupt through EXTI line 19.
  */
void ETH_WKUP_IRQHandler(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_WKUP_IRQn 0 */

  /* USER CODE END ETH_WKUP_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000de8:	4802      	ldr	r0, [pc, #8]	; (8000df4 <ETH_WKUP_IRQHandler+0x10>)
 8000dea:	f001 fa1d 	bl	8002228 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_WKUP_IRQn 1 */

  /* USER CODE END ETH_WKUP_IRQn 1 */
}
 8000dee:	bf00      	nop
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	200062cc 	.word	0x200062cc

08000df8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b086      	sub	sp, #24
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	60f8      	str	r0, [r7, #12]
 8000e00:	60b9      	str	r1, [r7, #8]
 8000e02:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e04:	2300      	movs	r3, #0
 8000e06:	617b      	str	r3, [r7, #20]
 8000e08:	e00a      	b.n	8000e20 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000e0a:	f3af 8000 	nop.w
 8000e0e:	4601      	mov	r1, r0
 8000e10:	68bb      	ldr	r3, [r7, #8]
 8000e12:	1c5a      	adds	r2, r3, #1
 8000e14:	60ba      	str	r2, [r7, #8]
 8000e16:	b2ca      	uxtb	r2, r1
 8000e18:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e1a:	697b      	ldr	r3, [r7, #20]
 8000e1c:	3301      	adds	r3, #1
 8000e1e:	617b      	str	r3, [r7, #20]
 8000e20:	697a      	ldr	r2, [r7, #20]
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	429a      	cmp	r2, r3
 8000e26:	dbf0      	blt.n	8000e0a <_read+0x12>
	}

return len;
 8000e28:	687b      	ldr	r3, [r7, #4]
}
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	3718      	adds	r7, #24
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}

08000e32 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000e32:	b580      	push	{r7, lr}
 8000e34:	b086      	sub	sp, #24
 8000e36:	af00      	add	r7, sp, #0
 8000e38:	60f8      	str	r0, [r7, #12]
 8000e3a:	60b9      	str	r1, [r7, #8]
 8000e3c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e3e:	2300      	movs	r3, #0
 8000e40:	617b      	str	r3, [r7, #20]
 8000e42:	e009      	b.n	8000e58 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000e44:	68bb      	ldr	r3, [r7, #8]
 8000e46:	1c5a      	adds	r2, r3, #1
 8000e48:	60ba      	str	r2, [r7, #8]
 8000e4a:	781b      	ldrb	r3, [r3, #0]
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e52:	697b      	ldr	r3, [r7, #20]
 8000e54:	3301      	adds	r3, #1
 8000e56:	617b      	str	r3, [r7, #20]
 8000e58:	697a      	ldr	r2, [r7, #20]
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	429a      	cmp	r2, r3
 8000e5e:	dbf1      	blt.n	8000e44 <_write+0x12>
	}
	return len;
 8000e60:	687b      	ldr	r3, [r7, #4]
}
 8000e62:	4618      	mov	r0, r3
 8000e64:	3718      	adds	r7, #24
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}

08000e6a <_close>:

int _close(int file)
{
 8000e6a:	b480      	push	{r7}
 8000e6c:	b083      	sub	sp, #12
 8000e6e:	af00      	add	r7, sp, #0
 8000e70:	6078      	str	r0, [r7, #4]
	return -1;
 8000e72:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e76:	4618      	mov	r0, r3
 8000e78:	370c      	adds	r7, #12
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e80:	4770      	bx	lr

08000e82 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e82:	b480      	push	{r7}
 8000e84:	b083      	sub	sp, #12
 8000e86:	af00      	add	r7, sp, #0
 8000e88:	6078      	str	r0, [r7, #4]
 8000e8a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e92:	605a      	str	r2, [r3, #4]
	return 0;
 8000e94:	2300      	movs	r3, #0
}
 8000e96:	4618      	mov	r0, r3
 8000e98:	370c      	adds	r7, #12
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea0:	4770      	bx	lr

08000ea2 <_isatty>:

int _isatty(int file)
{
 8000ea2:	b480      	push	{r7}
 8000ea4:	b083      	sub	sp, #12
 8000ea6:	af00      	add	r7, sp, #0
 8000ea8:	6078      	str	r0, [r7, #4]
	return 1;
 8000eaa:	2301      	movs	r3, #1
}
 8000eac:	4618      	mov	r0, r3
 8000eae:	370c      	adds	r7, #12
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb6:	4770      	bx	lr

08000eb8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	b085      	sub	sp, #20
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	60f8      	str	r0, [r7, #12]
 8000ec0:	60b9      	str	r1, [r7, #8]
 8000ec2:	607a      	str	r2, [r7, #4]
	return 0;
 8000ec4:	2300      	movs	r3, #0
}
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	3714      	adds	r7, #20
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr
	...

08000ed4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b087      	sub	sp, #28
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000edc:	4a14      	ldr	r2, [pc, #80]	; (8000f30 <_sbrk+0x5c>)
 8000ede:	4b15      	ldr	r3, [pc, #84]	; (8000f34 <_sbrk+0x60>)
 8000ee0:	1ad3      	subs	r3, r2, r3
 8000ee2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ee4:	697b      	ldr	r3, [r7, #20]
 8000ee6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ee8:	4b13      	ldr	r3, [pc, #76]	; (8000f38 <_sbrk+0x64>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d102      	bne.n	8000ef6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ef0:	4b11      	ldr	r3, [pc, #68]	; (8000f38 <_sbrk+0x64>)
 8000ef2:	4a12      	ldr	r2, [pc, #72]	; (8000f3c <_sbrk+0x68>)
 8000ef4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ef6:	4b10      	ldr	r3, [pc, #64]	; (8000f38 <_sbrk+0x64>)
 8000ef8:	681a      	ldr	r2, [r3, #0]
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	4413      	add	r3, r2
 8000efe:	693a      	ldr	r2, [r7, #16]
 8000f00:	429a      	cmp	r2, r3
 8000f02:	d205      	bcs.n	8000f10 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000f04:	4b0e      	ldr	r3, [pc, #56]	; (8000f40 <_sbrk+0x6c>)
 8000f06:	220c      	movs	r2, #12
 8000f08:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f0a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f0e:	e009      	b.n	8000f24 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f10:	4b09      	ldr	r3, [pc, #36]	; (8000f38 <_sbrk+0x64>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f16:	4b08      	ldr	r3, [pc, #32]	; (8000f38 <_sbrk+0x64>)
 8000f18:	681a      	ldr	r2, [r3, #0]
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	4413      	add	r3, r2
 8000f1e:	4a06      	ldr	r2, [pc, #24]	; (8000f38 <_sbrk+0x64>)
 8000f20:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f22:	68fb      	ldr	r3, [r7, #12]
}
 8000f24:	4618      	mov	r0, r3
 8000f26:	371c      	adds	r7, #28
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2e:	4770      	bx	lr
 8000f30:	20080000 	.word	0x20080000
 8000f34:	00000400 	.word	0x00000400
 8000f38:	200008d8 	.word	0x200008d8
 8000f3c:	2000d420 	.word	0x2000d420
 8000f40:	2000d418 	.word	0x2000d418

08000f44 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f48:	4b06      	ldr	r3, [pc, #24]	; (8000f64 <SystemInit+0x20>)
 8000f4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f4e:	4a05      	ldr	r2, [pc, #20]	; (8000f64 <SystemInit+0x20>)
 8000f50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f54:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f58:	bf00      	nop
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop
 8000f64:	e000ed00 	.word	0xe000ed00

08000f68 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000f68:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fa0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f6c:	480d      	ldr	r0, [pc, #52]	; (8000fa4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f6e:	490e      	ldr	r1, [pc, #56]	; (8000fa8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f70:	4a0e      	ldr	r2, [pc, #56]	; (8000fac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f74:	e002      	b.n	8000f7c <LoopCopyDataInit>

08000f76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f7a:	3304      	adds	r3, #4

08000f7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f80:	d3f9      	bcc.n	8000f76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f82:	4a0b      	ldr	r2, [pc, #44]	; (8000fb0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f84:	4c0b      	ldr	r4, [pc, #44]	; (8000fb4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f88:	e001      	b.n	8000f8e <LoopFillZerobss>

08000f8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f8c:	3204      	adds	r2, #4

08000f8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f90:	d3fb      	bcc.n	8000f8a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f92:	f7ff ffd7 	bl	8000f44 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f96:	f015 fee3 	bl	8016d60 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f9a:	f7ff fb6d 	bl	8000678 <main>
  bx  lr    
 8000f9e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000fa0:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000fa4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fa8:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8000fac:	0801bd88 	.word	0x0801bd88
  ldr r2, =_sbss
 8000fb0:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 8000fb4:	2000d420 	.word	0x2000d420

08000fb8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fb8:	e7fe      	b.n	8000fb8 <ADC_IRQHandler>

08000fba <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fba:	b580      	push	{r7, lr}
 8000fbc:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fbe:	2003      	movs	r0, #3
 8000fc0:	f000 fd19 	bl	80019f6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fc4:	2000      	movs	r0, #0
 8000fc6:	f7ff fe87 	bl	8000cd8 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000fca:	f7ff fe41 	bl	8000c50 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000fce:	2300      	movs	r3, #0
}
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	bd80      	pop	{r7, pc}

08000fd4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fd8:	4b06      	ldr	r3, [pc, #24]	; (8000ff4 <HAL_IncTick+0x20>)
 8000fda:	781b      	ldrb	r3, [r3, #0]
 8000fdc:	461a      	mov	r2, r3
 8000fde:	4b06      	ldr	r3, [pc, #24]	; (8000ff8 <HAL_IncTick+0x24>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	4413      	add	r3, r2
 8000fe4:	4a04      	ldr	r2, [pc, #16]	; (8000ff8 <HAL_IncTick+0x24>)
 8000fe6:	6013      	str	r3, [r2, #0]
}
 8000fe8:	bf00      	nop
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop
 8000ff4:	20000008 	.word	0x20000008
 8000ff8:	200049a4 	.word	0x200049a4

08000ffc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
  return uwTick;
 8001000:	4b03      	ldr	r3, [pc, #12]	; (8001010 <HAL_GetTick+0x14>)
 8001002:	681b      	ldr	r3, [r3, #0]
}
 8001004:	4618      	mov	r0, r3
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop
 8001010:	200049a4 	.word	0x200049a4

08001014 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b084      	sub	sp, #16
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800101c:	f7ff ffee 	bl	8000ffc <HAL_GetTick>
 8001020:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	f1b3 3fff 	cmp.w	r3, #4294967295
 800102c:	d005      	beq.n	800103a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800102e:	4b09      	ldr	r3, [pc, #36]	; (8001054 <HAL_Delay+0x40>)
 8001030:	781b      	ldrb	r3, [r3, #0]
 8001032:	461a      	mov	r2, r3
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	4413      	add	r3, r2
 8001038:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800103a:	bf00      	nop
 800103c:	f7ff ffde 	bl	8000ffc <HAL_GetTick>
 8001040:	4602      	mov	r2, r0
 8001042:	68bb      	ldr	r3, [r7, #8]
 8001044:	1ad3      	subs	r3, r2, r3
 8001046:	68fa      	ldr	r2, [r7, #12]
 8001048:	429a      	cmp	r2, r3
 800104a:	d8f7      	bhi.n	800103c <HAL_Delay+0x28>
  {
  }
}
 800104c:	bf00      	nop
 800104e:	3710      	adds	r7, #16
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}
 8001054:	20000008 	.word	0x20000008

08001058 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b084      	sub	sp, #16
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001060:	2300      	movs	r3, #0
 8001062:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d101      	bne.n	800106e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800106a:	2301      	movs	r3, #1
 800106c:	e031      	b.n	80010d2 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001072:	2b00      	cmp	r3, #0
 8001074:	d109      	bne.n	800108a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001076:	6878      	ldr	r0, [r7, #4]
 8001078:	f7ff fe0e 	bl	8000c98 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	2200      	movs	r2, #0
 8001080:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	2200      	movs	r2, #0
 8001086:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800108e:	f003 0310 	and.w	r3, r3, #16
 8001092:	2b00      	cmp	r3, #0
 8001094:	d116      	bne.n	80010c4 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800109a:	4b10      	ldr	r3, [pc, #64]	; (80010dc <HAL_ADC_Init+0x84>)
 800109c:	4013      	ands	r3, r2
 800109e:	f043 0202 	orr.w	r2, r3, #2
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80010a6:	6878      	ldr	r0, [r7, #4]
 80010a8:	f000 fafe 	bl	80016a8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	2200      	movs	r2, #0
 80010b0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b6:	f023 0303 	bic.w	r3, r3, #3
 80010ba:	f043 0201 	orr.w	r2, r3, #1
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	641a      	str	r2, [r3, #64]	; 0x40
 80010c2:	e001      	b.n	80010c8 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80010c4:	2301      	movs	r3, #1
 80010c6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	2200      	movs	r2, #0
 80010cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80010d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80010d2:	4618      	mov	r0, r3
 80010d4:	3710      	adds	r7, #16
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	ffffeefd 	.word	0xffffeefd

080010e0 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b085      	sub	sp, #20
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 80010e8:	2300      	movs	r3, #0
 80010ea:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80010f2:	2b01      	cmp	r3, #1
 80010f4:	d101      	bne.n	80010fa <HAL_ADC_Start+0x1a>
 80010f6:	2302      	movs	r3, #2
 80010f8:	e0ad      	b.n	8001256 <HAL_ADC_Start+0x176>
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	2201      	movs	r2, #1
 80010fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	689b      	ldr	r3, [r3, #8]
 8001108:	f003 0301 	and.w	r3, r3, #1
 800110c:	2b01      	cmp	r3, #1
 800110e:	d018      	beq.n	8001142 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	689a      	ldr	r2, [r3, #8]
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f042 0201 	orr.w	r2, r2, #1
 800111e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8001120:	4b50      	ldr	r3, [pc, #320]	; (8001264 <HAL_ADC_Start+0x184>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4a50      	ldr	r2, [pc, #320]	; (8001268 <HAL_ADC_Start+0x188>)
 8001126:	fba2 2303 	umull	r2, r3, r2, r3
 800112a:	0c9a      	lsrs	r2, r3, #18
 800112c:	4613      	mov	r3, r2
 800112e:	005b      	lsls	r3, r3, #1
 8001130:	4413      	add	r3, r2
 8001132:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8001134:	e002      	b.n	800113c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	3b01      	subs	r3, #1
 800113a:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	2b00      	cmp	r3, #0
 8001140:	d1f9      	bne.n	8001136 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	689b      	ldr	r3, [r3, #8]
 8001148:	f003 0301 	and.w	r3, r3, #1
 800114c:	2b01      	cmp	r3, #1
 800114e:	d175      	bne.n	800123c <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001154:	4b45      	ldr	r3, [pc, #276]	; (800126c <HAL_ADC_Start+0x18c>)
 8001156:	4013      	ands	r3, r2
 8001158:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800116a:	2b00      	cmp	r3, #0
 800116c:	d007      	beq.n	800117e <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001172:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001176:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001182:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001186:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800118a:	d106      	bne.n	800119a <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001190:	f023 0206 	bic.w	r2, r3, #6
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	645a      	str	r2, [r3, #68]	; 0x44
 8001198:	e002      	b.n	80011a0 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	2200      	movs	r2, #0
 800119e:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	2200      	movs	r2, #0
 80011a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80011b0:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 80011b2:	4b2f      	ldr	r3, [pc, #188]	; (8001270 <HAL_ADC_Start+0x190>)
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	f003 031f 	and.w	r3, r3, #31
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d10f      	bne.n	80011de <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	689b      	ldr	r3, [r3, #8]
 80011c4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d143      	bne.n	8001254 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	689a      	ldr	r2, [r3, #8]
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80011da:	609a      	str	r2, [r3, #8]
 80011dc:	e03a      	b.n	8001254 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	4a24      	ldr	r2, [pc, #144]	; (8001274 <HAL_ADC_Start+0x194>)
 80011e4:	4293      	cmp	r3, r2
 80011e6:	d10e      	bne.n	8001206 <HAL_ADC_Start+0x126>
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	689b      	ldr	r3, [r3, #8]
 80011ee:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d107      	bne.n	8001206 <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	689a      	ldr	r2, [r3, #8]
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001204:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8001206:	4b1a      	ldr	r3, [pc, #104]	; (8001270 <HAL_ADC_Start+0x190>)
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	f003 0310 	and.w	r3, r3, #16
 800120e:	2b00      	cmp	r3, #0
 8001210:	d120      	bne.n	8001254 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	4a18      	ldr	r2, [pc, #96]	; (8001278 <HAL_ADC_Start+0x198>)
 8001218:	4293      	cmp	r3, r2
 800121a:	d11b      	bne.n	8001254 <HAL_ADC_Start+0x174>
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	689b      	ldr	r3, [r3, #8]
 8001222:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001226:	2b00      	cmp	r3, #0
 8001228:	d114      	bne.n	8001254 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	689a      	ldr	r2, [r3, #8]
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001238:	609a      	str	r2, [r3, #8]
 800123a:	e00b      	b.n	8001254 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001240:	f043 0210 	orr.w	r2, r3, #16
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800124c:	f043 0201 	orr.w	r2, r3, #1
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001254:	2300      	movs	r3, #0
}
 8001256:	4618      	mov	r0, r3
 8001258:	3714      	adds	r7, #20
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr
 8001262:	bf00      	nop
 8001264:	20000000 	.word	0x20000000
 8001268:	431bde83 	.word	0x431bde83
 800126c:	fffff8fe 	.word	0xfffff8fe
 8001270:	40012300 	.word	0x40012300
 8001274:	40012000 	.word	0x40012000
 8001278:	40012200 	.word	0x40012200

0800127c <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 800127c:	b480      	push	{r7}
 800127e:	b083      	sub	sp, #12
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800128a:	2b01      	cmp	r3, #1
 800128c:	d101      	bne.n	8001292 <HAL_ADC_Stop+0x16>
 800128e:	2302      	movs	r3, #2
 8001290:	e01f      	b.n	80012d2 <HAL_ADC_Stop+0x56>
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	2201      	movs	r2, #1
 8001296:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	689a      	ldr	r2, [r3, #8]
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f022 0201 	bic.w	r2, r2, #1
 80012a8:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	689b      	ldr	r3, [r3, #8]
 80012b0:	f003 0301 	and.w	r3, r3, #1
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d107      	bne.n	80012c8 <HAL_ADC_Stop+0x4c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80012bc:	4b08      	ldr	r3, [pc, #32]	; (80012e0 <HAL_ADC_Stop+0x64>)
 80012be:	4013      	ands	r3, r2
 80012c0:	f043 0201 	orr.w	r2, r3, #1
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	2200      	movs	r2, #0
 80012cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80012d0:	2300      	movs	r3, #0
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	370c      	adds	r7, #12
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr
 80012de:	bf00      	nop
 80012e0:	ffffeefe 	.word	0xffffeefe

080012e4 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b084      	sub	sp, #16
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
 80012ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80012ee:	2300      	movs	r3, #0
 80012f0:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	689b      	ldr	r3, [r3, #8]
 80012f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001300:	d113      	bne.n	800132a <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	689b      	ldr	r3, [r3, #8]
 8001308:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800130c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001310:	d10b      	bne.n	800132a <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001316:	f043 0220 	orr.w	r2, r3, #32
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	2200      	movs	r2, #0
 8001322:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001326:	2301      	movs	r3, #1
 8001328:	e063      	b.n	80013f2 <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 800132a:	f7ff fe67 	bl	8000ffc <HAL_GetTick>
 800132e:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001330:	e021      	b.n	8001376 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001338:	d01d      	beq.n	8001376 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d007      	beq.n	8001350 <HAL_ADC_PollForConversion+0x6c>
 8001340:	f7ff fe5c 	bl	8000ffc <HAL_GetTick>
 8001344:	4602      	mov	r2, r0
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	1ad3      	subs	r3, r2, r3
 800134a:	683a      	ldr	r2, [r7, #0]
 800134c:	429a      	cmp	r2, r3
 800134e:	d212      	bcs.n	8001376 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f003 0302 	and.w	r3, r3, #2
 800135a:	2b02      	cmp	r3, #2
 800135c:	d00b      	beq.n	8001376 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001362:	f043 0204 	orr.w	r2, r3, #4
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	2200      	movs	r2, #0
 800136e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8001372:	2303      	movs	r3, #3
 8001374:	e03d      	b.n	80013f2 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f003 0302 	and.w	r3, r3, #2
 8001380:	2b02      	cmp	r3, #2
 8001382:	d1d6      	bne.n	8001332 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f06f 0212 	mvn.w	r2, #18
 800138c:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001392:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	689b      	ldr	r3, [r3, #8]
 80013a0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d123      	bne.n	80013f0 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d11f      	bne.n	80013f0 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013b6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d006      	beq.n	80013cc <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	689b      	ldr	r3, [r3, #8]
 80013c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d111      	bne.n	80013f0 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d105      	bne.n	80013f0 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e8:	f043 0201 	orr.w	r2, r3, #1
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80013f0:	2300      	movs	r3, #0
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	3710      	adds	r7, #16
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}

080013fa <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80013fa:	b480      	push	{r7}
 80013fc:	b083      	sub	sp, #12
 80013fe:	af00      	add	r7, sp, #0
 8001400:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001408:	4618      	mov	r0, r3
 800140a:	370c      	adds	r7, #12
 800140c:	46bd      	mov	sp, r7
 800140e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001412:	4770      	bx	lr

08001414 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001414:	b480      	push	{r7}
 8001416:	b085      	sub	sp, #20
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
 800141c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 800141e:	2300      	movs	r3, #0
 8001420:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001428:	2b01      	cmp	r3, #1
 800142a:	d101      	bne.n	8001430 <HAL_ADC_ConfigChannel+0x1c>
 800142c:	2302      	movs	r3, #2
 800142e:	e12a      	b.n	8001686 <HAL_ADC_ConfigChannel+0x272>
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	2201      	movs	r2, #1
 8001434:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	2b09      	cmp	r3, #9
 800143e:	d93a      	bls.n	80014b6 <HAL_ADC_ConfigChannel+0xa2>
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001448:	d035      	beq.n	80014b6 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	68d9      	ldr	r1, [r3, #12]
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	b29b      	uxth	r3, r3
 8001456:	461a      	mov	r2, r3
 8001458:	4613      	mov	r3, r2
 800145a:	005b      	lsls	r3, r3, #1
 800145c:	4413      	add	r3, r2
 800145e:	3b1e      	subs	r3, #30
 8001460:	2207      	movs	r2, #7
 8001462:	fa02 f303 	lsl.w	r3, r2, r3
 8001466:	43da      	mvns	r2, r3
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	400a      	ands	r2, r1
 800146e:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4a87      	ldr	r2, [pc, #540]	; (8001694 <HAL_ADC_ConfigChannel+0x280>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d10a      	bne.n	8001490 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	68d9      	ldr	r1, [r3, #12]
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	689b      	ldr	r3, [r3, #8]
 8001484:	061a      	lsls	r2, r3, #24
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	430a      	orrs	r2, r1
 800148c:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800148e:	e035      	b.n	80014fc <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	68d9      	ldr	r1, [r3, #12]
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	689a      	ldr	r2, [r3, #8]
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	b29b      	uxth	r3, r3
 80014a0:	4618      	mov	r0, r3
 80014a2:	4603      	mov	r3, r0
 80014a4:	005b      	lsls	r3, r3, #1
 80014a6:	4403      	add	r3, r0
 80014a8:	3b1e      	subs	r3, #30
 80014aa:	409a      	lsls	r2, r3
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	430a      	orrs	r2, r1
 80014b2:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80014b4:	e022      	b.n	80014fc <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	6919      	ldr	r1, [r3, #16]
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	b29b      	uxth	r3, r3
 80014c2:	461a      	mov	r2, r3
 80014c4:	4613      	mov	r3, r2
 80014c6:	005b      	lsls	r3, r3, #1
 80014c8:	4413      	add	r3, r2
 80014ca:	2207      	movs	r2, #7
 80014cc:	fa02 f303 	lsl.w	r3, r2, r3
 80014d0:	43da      	mvns	r2, r3
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	400a      	ands	r2, r1
 80014d8:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	6919      	ldr	r1, [r3, #16]
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	689a      	ldr	r2, [r3, #8]
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	b29b      	uxth	r3, r3
 80014ea:	4618      	mov	r0, r3
 80014ec:	4603      	mov	r3, r0
 80014ee:	005b      	lsls	r3, r3, #1
 80014f0:	4403      	add	r3, r0
 80014f2:	409a      	lsls	r2, r3
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	430a      	orrs	r2, r1
 80014fa:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	2b06      	cmp	r3, #6
 8001502:	d824      	bhi.n	800154e <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	685a      	ldr	r2, [r3, #4]
 800150e:	4613      	mov	r3, r2
 8001510:	009b      	lsls	r3, r3, #2
 8001512:	4413      	add	r3, r2
 8001514:	3b05      	subs	r3, #5
 8001516:	221f      	movs	r2, #31
 8001518:	fa02 f303 	lsl.w	r3, r2, r3
 800151c:	43da      	mvns	r2, r3
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	400a      	ands	r2, r1
 8001524:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	b29b      	uxth	r3, r3
 8001532:	4618      	mov	r0, r3
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	685a      	ldr	r2, [r3, #4]
 8001538:	4613      	mov	r3, r2
 800153a:	009b      	lsls	r3, r3, #2
 800153c:	4413      	add	r3, r2
 800153e:	3b05      	subs	r3, #5
 8001540:	fa00 f203 	lsl.w	r2, r0, r3
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	430a      	orrs	r2, r1
 800154a:	635a      	str	r2, [r3, #52]	; 0x34
 800154c:	e04c      	b.n	80015e8 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	2b0c      	cmp	r3, #12
 8001554:	d824      	bhi.n	80015a0 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	685a      	ldr	r2, [r3, #4]
 8001560:	4613      	mov	r3, r2
 8001562:	009b      	lsls	r3, r3, #2
 8001564:	4413      	add	r3, r2
 8001566:	3b23      	subs	r3, #35	; 0x23
 8001568:	221f      	movs	r2, #31
 800156a:	fa02 f303 	lsl.w	r3, r2, r3
 800156e:	43da      	mvns	r2, r3
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	400a      	ands	r2, r1
 8001576:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	b29b      	uxth	r3, r3
 8001584:	4618      	mov	r0, r3
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	685a      	ldr	r2, [r3, #4]
 800158a:	4613      	mov	r3, r2
 800158c:	009b      	lsls	r3, r3, #2
 800158e:	4413      	add	r3, r2
 8001590:	3b23      	subs	r3, #35	; 0x23
 8001592:	fa00 f203 	lsl.w	r2, r0, r3
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	430a      	orrs	r2, r1
 800159c:	631a      	str	r2, [r3, #48]	; 0x30
 800159e:	e023      	b.n	80015e8 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	685a      	ldr	r2, [r3, #4]
 80015aa:	4613      	mov	r3, r2
 80015ac:	009b      	lsls	r3, r3, #2
 80015ae:	4413      	add	r3, r2
 80015b0:	3b41      	subs	r3, #65	; 0x41
 80015b2:	221f      	movs	r2, #31
 80015b4:	fa02 f303 	lsl.w	r3, r2, r3
 80015b8:	43da      	mvns	r2, r3
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	400a      	ands	r2, r1
 80015c0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	b29b      	uxth	r3, r3
 80015ce:	4618      	mov	r0, r3
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	685a      	ldr	r2, [r3, #4]
 80015d4:	4613      	mov	r3, r2
 80015d6:	009b      	lsls	r3, r3, #2
 80015d8:	4413      	add	r3, r2
 80015da:	3b41      	subs	r3, #65	; 0x41
 80015dc:	fa00 f203 	lsl.w	r2, r0, r3
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	430a      	orrs	r2, r1
 80015e6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a2a      	ldr	r2, [pc, #168]	; (8001698 <HAL_ADC_ConfigChannel+0x284>)
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d10a      	bne.n	8001608 <HAL_ADC_ConfigChannel+0x1f4>
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80015fa:	d105      	bne.n	8001608 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80015fc:	4b27      	ldr	r3, [pc, #156]	; (800169c <HAL_ADC_ConfigChannel+0x288>)
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	4a26      	ldr	r2, [pc, #152]	; (800169c <HAL_ADC_ConfigChannel+0x288>)
 8001602:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001606:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4a22      	ldr	r2, [pc, #136]	; (8001698 <HAL_ADC_ConfigChannel+0x284>)
 800160e:	4293      	cmp	r3, r2
 8001610:	d109      	bne.n	8001626 <HAL_ADC_ConfigChannel+0x212>
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	2b12      	cmp	r3, #18
 8001618:	d105      	bne.n	8001626 <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800161a:	4b20      	ldr	r3, [pc, #128]	; (800169c <HAL_ADC_ConfigChannel+0x288>)
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	4a1f      	ldr	r2, [pc, #124]	; (800169c <HAL_ADC_ConfigChannel+0x288>)
 8001620:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001624:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4a1b      	ldr	r2, [pc, #108]	; (8001698 <HAL_ADC_ConfigChannel+0x284>)
 800162c:	4293      	cmp	r3, r2
 800162e:	d125      	bne.n	800167c <HAL_ADC_ConfigChannel+0x268>
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a17      	ldr	r2, [pc, #92]	; (8001694 <HAL_ADC_ConfigChannel+0x280>)
 8001636:	4293      	cmp	r3, r2
 8001638:	d003      	beq.n	8001642 <HAL_ADC_ConfigChannel+0x22e>
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	2b11      	cmp	r3, #17
 8001640:	d11c      	bne.n	800167c <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8001642:	4b16      	ldr	r3, [pc, #88]	; (800169c <HAL_ADC_ConfigChannel+0x288>)
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	4a15      	ldr	r2, [pc, #84]	; (800169c <HAL_ADC_ConfigChannel+0x288>)
 8001648:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800164c:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4a10      	ldr	r2, [pc, #64]	; (8001694 <HAL_ADC_ConfigChannel+0x280>)
 8001654:	4293      	cmp	r3, r2
 8001656:	d111      	bne.n	800167c <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001658:	4b11      	ldr	r3, [pc, #68]	; (80016a0 <HAL_ADC_ConfigChannel+0x28c>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4a11      	ldr	r2, [pc, #68]	; (80016a4 <HAL_ADC_ConfigChannel+0x290>)
 800165e:	fba2 2303 	umull	r2, r3, r2, r3
 8001662:	0c9a      	lsrs	r2, r3, #18
 8001664:	4613      	mov	r3, r2
 8001666:	009b      	lsls	r3, r3, #2
 8001668:	4413      	add	r3, r2
 800166a:	005b      	lsls	r3, r3, #1
 800166c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800166e:	e002      	b.n	8001676 <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	3b01      	subs	r3, #1
 8001674:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d1f9      	bne.n	8001670 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2200      	movs	r2, #0
 8001680:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001684:	2300      	movs	r3, #0
}
 8001686:	4618      	mov	r0, r3
 8001688:	3714      	adds	r7, #20
 800168a:	46bd      	mov	sp, r7
 800168c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001690:	4770      	bx	lr
 8001692:	bf00      	nop
 8001694:	10000012 	.word	0x10000012
 8001698:	40012000 	.word	0x40012000
 800169c:	40012300 	.word	0x40012300
 80016a0:	20000000 	.word	0x20000000
 80016a4:	431bde83 	.word	0x431bde83

080016a8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80016a8:	b480      	push	{r7}
 80016aa:	b083      	sub	sp, #12
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80016b0:	4b78      	ldr	r3, [pc, #480]	; (8001894 <ADC_Init+0x1ec>)
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	4a77      	ldr	r2, [pc, #476]	; (8001894 <ADC_Init+0x1ec>)
 80016b6:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80016ba:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80016bc:	4b75      	ldr	r3, [pc, #468]	; (8001894 <ADC_Init+0x1ec>)
 80016be:	685a      	ldr	r2, [r3, #4]
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	4973      	ldr	r1, [pc, #460]	; (8001894 <ADC_Init+0x1ec>)
 80016c6:	4313      	orrs	r3, r2
 80016c8:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	685a      	ldr	r2, [r3, #4]
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80016d8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	6859      	ldr	r1, [r3, #4]
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	691b      	ldr	r3, [r3, #16]
 80016e4:	021a      	lsls	r2, r3, #8
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	430a      	orrs	r2, r1
 80016ec:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	685a      	ldr	r2, [r3, #4]
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80016fc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	6859      	ldr	r1, [r3, #4]
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	689a      	ldr	r2, [r3, #8]
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	430a      	orrs	r2, r1
 800170e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	689a      	ldr	r2, [r3, #8]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800171e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	6899      	ldr	r1, [r3, #8]
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	68da      	ldr	r2, [r3, #12]
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	430a      	orrs	r2, r1
 8001730:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001736:	4a58      	ldr	r2, [pc, #352]	; (8001898 <ADC_Init+0x1f0>)
 8001738:	4293      	cmp	r3, r2
 800173a:	d022      	beq.n	8001782 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	689a      	ldr	r2, [r3, #8]
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800174a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	6899      	ldr	r1, [r3, #8]
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	430a      	orrs	r2, r1
 800175c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	689a      	ldr	r2, [r3, #8]
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800176c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	6899      	ldr	r1, [r3, #8]
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	430a      	orrs	r2, r1
 800177e:	609a      	str	r2, [r3, #8]
 8001780:	e00f      	b.n	80017a2 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	689a      	ldr	r2, [r3, #8]
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001790:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	689a      	ldr	r2, [r3, #8]
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80017a0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	689a      	ldr	r2, [r3, #8]
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f022 0202 	bic.w	r2, r2, #2
 80017b0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	6899      	ldr	r1, [r3, #8]
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	699b      	ldr	r3, [r3, #24]
 80017bc:	005a      	lsls	r2, r3, #1
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	430a      	orrs	r2, r1
 80017c4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d01b      	beq.n	8001808 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	685a      	ldr	r2, [r3, #4]
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80017de:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	685a      	ldr	r2, [r3, #4]
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80017ee:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	6859      	ldr	r1, [r3, #4]
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017fa:	3b01      	subs	r3, #1
 80017fc:	035a      	lsls	r2, r3, #13
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	430a      	orrs	r2, r1
 8001804:	605a      	str	r2, [r3, #4]
 8001806:	e007      	b.n	8001818 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	685a      	ldr	r2, [r3, #4]
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001816:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001826:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	69db      	ldr	r3, [r3, #28]
 8001832:	3b01      	subs	r3, #1
 8001834:	051a      	lsls	r2, r3, #20
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	430a      	orrs	r2, r1
 800183c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	689a      	ldr	r2, [r3, #8]
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800184c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	6899      	ldr	r1, [r3, #8]
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800185a:	025a      	lsls	r2, r3, #9
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	430a      	orrs	r2, r1
 8001862:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	689a      	ldr	r2, [r3, #8]
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001872:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	6899      	ldr	r1, [r3, #8]
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	695b      	ldr	r3, [r3, #20]
 800187e:	029a      	lsls	r2, r3, #10
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	430a      	orrs	r2, r1
 8001886:	609a      	str	r2, [r3, #8]
}
 8001888:	bf00      	nop
 800188a:	370c      	adds	r7, #12
 800188c:	46bd      	mov	sp, r7
 800188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001892:	4770      	bx	lr
 8001894:	40012300 	.word	0x40012300
 8001898:	0f000001 	.word	0x0f000001

0800189c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800189c:	b480      	push	{r7}
 800189e:	b085      	sub	sp, #20
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	f003 0307 	and.w	r3, r3, #7
 80018aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018ac:	4b0b      	ldr	r3, [pc, #44]	; (80018dc <__NVIC_SetPriorityGrouping+0x40>)
 80018ae:	68db      	ldr	r3, [r3, #12]
 80018b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018b2:	68ba      	ldr	r2, [r7, #8]
 80018b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018b8:	4013      	ands	r3, r2
 80018ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018c0:	68bb      	ldr	r3, [r7, #8]
 80018c2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80018c4:	4b06      	ldr	r3, [pc, #24]	; (80018e0 <__NVIC_SetPriorityGrouping+0x44>)
 80018c6:	4313      	orrs	r3, r2
 80018c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018ca:	4a04      	ldr	r2, [pc, #16]	; (80018dc <__NVIC_SetPriorityGrouping+0x40>)
 80018cc:	68bb      	ldr	r3, [r7, #8]
 80018ce:	60d3      	str	r3, [r2, #12]
}
 80018d0:	bf00      	nop
 80018d2:	3714      	adds	r7, #20
 80018d4:	46bd      	mov	sp, r7
 80018d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018da:	4770      	bx	lr
 80018dc:	e000ed00 	.word	0xe000ed00
 80018e0:	05fa0000 	.word	0x05fa0000

080018e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018e4:	b480      	push	{r7}
 80018e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018e8:	4b04      	ldr	r3, [pc, #16]	; (80018fc <__NVIC_GetPriorityGrouping+0x18>)
 80018ea:	68db      	ldr	r3, [r3, #12]
 80018ec:	0a1b      	lsrs	r3, r3, #8
 80018ee:	f003 0307 	and.w	r3, r3, #7
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	46bd      	mov	sp, r7
 80018f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fa:	4770      	bx	lr
 80018fc:	e000ed00 	.word	0xe000ed00

08001900 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001900:	b480      	push	{r7}
 8001902:	b083      	sub	sp, #12
 8001904:	af00      	add	r7, sp, #0
 8001906:	4603      	mov	r3, r0
 8001908:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800190a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800190e:	2b00      	cmp	r3, #0
 8001910:	db0b      	blt.n	800192a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001912:	79fb      	ldrb	r3, [r7, #7]
 8001914:	f003 021f 	and.w	r2, r3, #31
 8001918:	4907      	ldr	r1, [pc, #28]	; (8001938 <__NVIC_EnableIRQ+0x38>)
 800191a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800191e:	095b      	lsrs	r3, r3, #5
 8001920:	2001      	movs	r0, #1
 8001922:	fa00 f202 	lsl.w	r2, r0, r2
 8001926:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800192a:	bf00      	nop
 800192c:	370c      	adds	r7, #12
 800192e:	46bd      	mov	sp, r7
 8001930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001934:	4770      	bx	lr
 8001936:	bf00      	nop
 8001938:	e000e100 	.word	0xe000e100

0800193c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800193c:	b480      	push	{r7}
 800193e:	b083      	sub	sp, #12
 8001940:	af00      	add	r7, sp, #0
 8001942:	4603      	mov	r3, r0
 8001944:	6039      	str	r1, [r7, #0]
 8001946:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001948:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800194c:	2b00      	cmp	r3, #0
 800194e:	db0a      	blt.n	8001966 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	b2da      	uxtb	r2, r3
 8001954:	490c      	ldr	r1, [pc, #48]	; (8001988 <__NVIC_SetPriority+0x4c>)
 8001956:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800195a:	0112      	lsls	r2, r2, #4
 800195c:	b2d2      	uxtb	r2, r2
 800195e:	440b      	add	r3, r1
 8001960:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001964:	e00a      	b.n	800197c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	b2da      	uxtb	r2, r3
 800196a:	4908      	ldr	r1, [pc, #32]	; (800198c <__NVIC_SetPriority+0x50>)
 800196c:	79fb      	ldrb	r3, [r7, #7]
 800196e:	f003 030f 	and.w	r3, r3, #15
 8001972:	3b04      	subs	r3, #4
 8001974:	0112      	lsls	r2, r2, #4
 8001976:	b2d2      	uxtb	r2, r2
 8001978:	440b      	add	r3, r1
 800197a:	761a      	strb	r2, [r3, #24]
}
 800197c:	bf00      	nop
 800197e:	370c      	adds	r7, #12
 8001980:	46bd      	mov	sp, r7
 8001982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001986:	4770      	bx	lr
 8001988:	e000e100 	.word	0xe000e100
 800198c:	e000ed00 	.word	0xe000ed00

08001990 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001990:	b480      	push	{r7}
 8001992:	b089      	sub	sp, #36	; 0x24
 8001994:	af00      	add	r7, sp, #0
 8001996:	60f8      	str	r0, [r7, #12]
 8001998:	60b9      	str	r1, [r7, #8]
 800199a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	f003 0307 	and.w	r3, r3, #7
 80019a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019a4:	69fb      	ldr	r3, [r7, #28]
 80019a6:	f1c3 0307 	rsb	r3, r3, #7
 80019aa:	2b04      	cmp	r3, #4
 80019ac:	bf28      	it	cs
 80019ae:	2304      	movcs	r3, #4
 80019b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019b2:	69fb      	ldr	r3, [r7, #28]
 80019b4:	3304      	adds	r3, #4
 80019b6:	2b06      	cmp	r3, #6
 80019b8:	d902      	bls.n	80019c0 <NVIC_EncodePriority+0x30>
 80019ba:	69fb      	ldr	r3, [r7, #28]
 80019bc:	3b03      	subs	r3, #3
 80019be:	e000      	b.n	80019c2 <NVIC_EncodePriority+0x32>
 80019c0:	2300      	movs	r3, #0
 80019c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019c4:	f04f 32ff 	mov.w	r2, #4294967295
 80019c8:	69bb      	ldr	r3, [r7, #24]
 80019ca:	fa02 f303 	lsl.w	r3, r2, r3
 80019ce:	43da      	mvns	r2, r3
 80019d0:	68bb      	ldr	r3, [r7, #8]
 80019d2:	401a      	ands	r2, r3
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019d8:	f04f 31ff 	mov.w	r1, #4294967295
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	fa01 f303 	lsl.w	r3, r1, r3
 80019e2:	43d9      	mvns	r1, r3
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019e8:	4313      	orrs	r3, r2
         );
}
 80019ea:	4618      	mov	r0, r3
 80019ec:	3724      	adds	r7, #36	; 0x24
 80019ee:	46bd      	mov	sp, r7
 80019f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f4:	4770      	bx	lr

080019f6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019f6:	b580      	push	{r7, lr}
 80019f8:	b082      	sub	sp, #8
 80019fa:	af00      	add	r7, sp, #0
 80019fc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019fe:	6878      	ldr	r0, [r7, #4]
 8001a00:	f7ff ff4c 	bl	800189c <__NVIC_SetPriorityGrouping>
}
 8001a04:	bf00      	nop
 8001a06:	3708      	adds	r7, #8
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}

08001a0c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b086      	sub	sp, #24
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	4603      	mov	r3, r0
 8001a14:	60b9      	str	r1, [r7, #8]
 8001a16:	607a      	str	r2, [r7, #4]
 8001a18:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a1e:	f7ff ff61 	bl	80018e4 <__NVIC_GetPriorityGrouping>
 8001a22:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a24:	687a      	ldr	r2, [r7, #4]
 8001a26:	68b9      	ldr	r1, [r7, #8]
 8001a28:	6978      	ldr	r0, [r7, #20]
 8001a2a:	f7ff ffb1 	bl	8001990 <NVIC_EncodePriority>
 8001a2e:	4602      	mov	r2, r0
 8001a30:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a34:	4611      	mov	r1, r2
 8001a36:	4618      	mov	r0, r3
 8001a38:	f7ff ff80 	bl	800193c <__NVIC_SetPriority>
}
 8001a3c:	bf00      	nop
 8001a3e:	3718      	adds	r7, #24
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}

08001a44 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b082      	sub	sp, #8
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a52:	4618      	mov	r0, r3
 8001a54:	f7ff ff54 	bl	8001900 <__NVIC_EnableIRQ>
}
 8001a58:	bf00      	nop
 8001a5a:	3708      	adds	r7, #8
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}

08001a60 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b088      	sub	sp, #32
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	61fb      	str	r3, [r7, #28]
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 8001a70:	4ba9      	ldr	r3, [pc, #676]	; (8001d18 <HAL_ETH_Init+0x2b8>)
 8001a72:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 8001a74:	2300      	movs	r3, #0
 8001a76:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d101      	bne.n	8001a86 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8001a82:	2301      	movs	r3, #1
 8001a84:	e183      	b.n	8001d8e <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001a8c:	b2db      	uxtb	r3, r3
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d106      	bne.n	8001aa0 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2200      	movs	r2, #0
 8001a96:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001a9a:	6878      	ldr	r0, [r7, #4]
 8001a9c:	f002 fc96 	bl	80043cc <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001aa0:	4b9e      	ldr	r3, [pc, #632]	; (8001d1c <HAL_ETH_Init+0x2bc>)
 8001aa2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aa4:	4a9d      	ldr	r2, [pc, #628]	; (8001d1c <HAL_ETH_Init+0x2bc>)
 8001aa6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001aaa:	6453      	str	r3, [r2, #68]	; 0x44
 8001aac:	4b9b      	ldr	r3, [pc, #620]	; (8001d1c <HAL_ETH_Init+0x2bc>)
 8001aae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ab0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ab4:	60bb      	str	r3, [r7, #8]
 8001ab6:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001ab8:	4b99      	ldr	r3, [pc, #612]	; (8001d20 <HAL_ETH_Init+0x2c0>)
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	4a98      	ldr	r2, [pc, #608]	; (8001d20 <HAL_ETH_Init+0x2c0>)
 8001abe:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001ac2:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001ac4:	4b96      	ldr	r3, [pc, #600]	; (8001d20 <HAL_ETH_Init+0x2c0>)
 8001ac6:	685a      	ldr	r2, [r3, #4]
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6a1b      	ldr	r3, [r3, #32]
 8001acc:	4994      	ldr	r1, [pc, #592]	; (8001d20 <HAL_ETH_Init+0x2c0>)
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ada:	681a      	ldr	r2, [r3, #0]
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f042 0201 	orr.w	r2, r2, #1
 8001ae4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ae8:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001aea:	f7ff fa87 	bl	8000ffc <HAL_GetTick>
 8001aee:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001af0:	e011      	b.n	8001b16 <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8001af2:	f7ff fa83 	bl	8000ffc <HAL_GetTick>
 8001af6:	4602      	mov	r2, r0
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	1ad3      	subs	r3, r2, r3
 8001afc:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001b00:	d909      	bls.n	8001b16 <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	2203      	movs	r2, #3
 8001b06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 8001b12:	2303      	movs	r3, #3
 8001b14:	e13b      	b.n	8001d8e <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f003 0301 	and.w	r3, r3, #1
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d1e4      	bne.n	8001af2 <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	691b      	ldr	r3, [r3, #16]
 8001b2e:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 8001b30:	69fb      	ldr	r3, [r7, #28]
 8001b32:	f023 031c 	bic.w	r3, r3, #28
 8001b36:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001b38:	f001 ffb8 	bl	8003aac <HAL_RCC_GetHCLKFreq>
 8001b3c:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 8001b3e:	69bb      	ldr	r3, [r7, #24]
 8001b40:	4a78      	ldr	r2, [pc, #480]	; (8001d24 <HAL_ETH_Init+0x2c4>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d908      	bls.n	8001b58 <HAL_ETH_Init+0xf8>
 8001b46:	69bb      	ldr	r3, [r7, #24]
 8001b48:	4a77      	ldr	r2, [pc, #476]	; (8001d28 <HAL_ETH_Init+0x2c8>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d804      	bhi.n	8001b58 <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8001b4e:	69fb      	ldr	r3, [r7, #28]
 8001b50:	f043 0308 	orr.w	r3, r3, #8
 8001b54:	61fb      	str	r3, [r7, #28]
 8001b56:	e027      	b.n	8001ba8 <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 8001b58:	69bb      	ldr	r3, [r7, #24]
 8001b5a:	4a73      	ldr	r2, [pc, #460]	; (8001d28 <HAL_ETH_Init+0x2c8>)
 8001b5c:	4293      	cmp	r3, r2
 8001b5e:	d908      	bls.n	8001b72 <HAL_ETH_Init+0x112>
 8001b60:	69bb      	ldr	r3, [r7, #24]
 8001b62:	4a72      	ldr	r2, [pc, #456]	; (8001d2c <HAL_ETH_Init+0x2cc>)
 8001b64:	4293      	cmp	r3, r2
 8001b66:	d804      	bhi.n	8001b72 <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8001b68:	69fb      	ldr	r3, [r7, #28]
 8001b6a:	f043 030c 	orr.w	r3, r3, #12
 8001b6e:	61fb      	str	r3, [r7, #28]
 8001b70:	e01a      	b.n	8001ba8 <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 8001b72:	69bb      	ldr	r3, [r7, #24]
 8001b74:	4a6d      	ldr	r2, [pc, #436]	; (8001d2c <HAL_ETH_Init+0x2cc>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d903      	bls.n	8001b82 <HAL_ETH_Init+0x122>
 8001b7a:	69bb      	ldr	r3, [r7, #24]
 8001b7c:	4a6c      	ldr	r2, [pc, #432]	; (8001d30 <HAL_ETH_Init+0x2d0>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d911      	bls.n	8001ba6 <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 8001b82:	69bb      	ldr	r3, [r7, #24]
 8001b84:	4a6a      	ldr	r2, [pc, #424]	; (8001d30 <HAL_ETH_Init+0x2d0>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d908      	bls.n	8001b9c <HAL_ETH_Init+0x13c>
 8001b8a:	69bb      	ldr	r3, [r7, #24]
 8001b8c:	4a69      	ldr	r2, [pc, #420]	; (8001d34 <HAL_ETH_Init+0x2d4>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d804      	bhi.n	8001b9c <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8001b92:	69fb      	ldr	r3, [r7, #28]
 8001b94:	f043 0304 	orr.w	r3, r3, #4
 8001b98:	61fb      	str	r3, [r7, #28]
 8001b9a:	e005      	b.n	8001ba8 <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8001b9c:	69fb      	ldr	r3, [r7, #28]
 8001b9e:	f043 0310 	orr.w	r3, r3, #16
 8001ba2:	61fb      	str	r3, [r7, #28]
 8001ba4:	e000      	b.n	8001ba8 <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8001ba6:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	69fa      	ldr	r2, [r7, #28]
 8001bae:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8001bb0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001bb4:	2100      	movs	r1, #0
 8001bb6:	6878      	ldr	r0, [r7, #4]
 8001bb8:	f000 fc19 	bl	80023ee <HAL_ETH_WritePHYRegister>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d00b      	beq.n	8001bda <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8001bc6:	6939      	ldr	r1, [r7, #16]
 8001bc8:	6878      	ldr	r0, [r7, #4]
 8001bca:	f000 fdcf 	bl	800276c <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e0d9      	b.n	8001d8e <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8001bda:	20ff      	movs	r0, #255	; 0xff
 8001bdc:	f7ff fa1a 	bl	8001014 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	f000 80a7 	beq.w	8001d38 <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8001bea:	f7ff fa07 	bl	8000ffc <HAL_GetTick>
 8001bee:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001bf0:	f107 030c 	add.w	r3, r7, #12
 8001bf4:	461a      	mov	r2, r3
 8001bf6:	2101      	movs	r1, #1
 8001bf8:	6878      	ldr	r0, [r7, #4]
 8001bfa:	f000 fb90 	bl	800231e <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8001bfe:	f7ff f9fd 	bl	8000ffc <HAL_GetTick>
 8001c02:	4602      	mov	r2, r0
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	1ad3      	subs	r3, r2, r3
 8001c08:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	d90f      	bls.n	8001c30 <HAL_ETH_Init+0x1d0>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001c10:	2301      	movs	r3, #1
 8001c12:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001c14:	6939      	ldr	r1, [r7, #16]
 8001c16:	6878      	ldr	r0, [r7, #4]
 8001c18:	f000 fda8 	bl	800276c <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2201      	movs	r2, #1
 8001c20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2200      	movs	r2, #0
 8001c28:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8001c2c:	2303      	movs	r3, #3
 8001c2e:	e0ae      	b.n	8001d8e <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	f003 0304 	and.w	r3, r3, #4
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d0da      	beq.n	8001bf0 <HAL_ETH_Init+0x190>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8001c3a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001c3e:	2100      	movs	r1, #0
 8001c40:	6878      	ldr	r0, [r7, #4]
 8001c42:	f000 fbd4 	bl	80023ee <HAL_ETH_WritePHYRegister>
 8001c46:	4603      	mov	r3, r0
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d00b      	beq.n	8001c64 <HAL_ETH_Init+0x204>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001c50:	6939      	ldr	r1, [r7, #16]
 8001c52:	6878      	ldr	r0, [r7, #4]
 8001c54:	f000 fd8a 	bl	800276c <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001c60:	2301      	movs	r3, #1
 8001c62:	e094      	b.n	8001d8e <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8001c64:	f7ff f9ca 	bl	8000ffc <HAL_GetTick>
 8001c68:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001c6a:	f107 030c 	add.w	r3, r7, #12
 8001c6e:	461a      	mov	r2, r3
 8001c70:	2101      	movs	r1, #1
 8001c72:	6878      	ldr	r0, [r7, #4]
 8001c74:	f000 fb53 	bl	800231e <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8001c78:	f7ff f9c0 	bl	8000ffc <HAL_GetTick>
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	697b      	ldr	r3, [r7, #20]
 8001c80:	1ad3      	subs	r3, r2, r3
 8001c82:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d90f      	bls.n	8001caa <HAL_ETH_Init+0x24a>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001c8e:	6939      	ldr	r1, [r7, #16]
 8001c90:	6878      	ldr	r0, [r7, #4]
 8001c92:	f000 fd6b 	bl	800276c <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2201      	movs	r2, #1
 8001c9a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8001ca6:	2303      	movs	r3, #3
 8001ca8:	e071      	b.n	8001d8e <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	f003 0320 	and.w	r3, r3, #32
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d0da      	beq.n	8001c6a <HAL_ETH_Init+0x20a>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8001cb4:	f107 030c 	add.w	r3, r7, #12
 8001cb8:	461a      	mov	r2, r3
 8001cba:	211f      	movs	r1, #31
 8001cbc:	6878      	ldr	r0, [r7, #4]
 8001cbe:	f000 fb2e 	bl	800231e <HAL_ETH_ReadPHYRegister>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d00b      	beq.n	8001ce0 <HAL_ETH_Init+0x280>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001cc8:	2301      	movs	r3, #1
 8001cca:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001ccc:	6939      	ldr	r1, [r7, #16]
 8001cce:	6878      	ldr	r0, [r7, #4]
 8001cd0:	f000 fd4c 	bl	800276c <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2201      	movs	r2, #1
 8001cd8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001cdc:	2301      	movs	r3, #1
 8001cde:	e056      	b.n	8001d8e <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	f003 0310 	and.w	r3, r3, #16
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d004      	beq.n	8001cf4 <HAL_ETH_Init+0x294>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001cf0:	60da      	str	r2, [r3, #12]
 8001cf2:	e002      	b.n	8001cfa <HAL_ETH_Init+0x29a>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	f003 0304 	and.w	r3, r3, #4
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d003      	beq.n	8001d0c <HAL_ETH_Init+0x2ac>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2200      	movs	r2, #0
 8001d08:	609a      	str	r2, [r3, #8]
 8001d0a:	e037      	b.n	8001d7c <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001d12:	609a      	str	r2, [r3, #8]
 8001d14:	e032      	b.n	8001d7c <HAL_ETH_Init+0x31c>
 8001d16:	bf00      	nop
 8001d18:	03938700 	.word	0x03938700
 8001d1c:	40023800 	.word	0x40023800
 8001d20:	40013800 	.word	0x40013800
 8001d24:	01312cff 	.word	0x01312cff
 8001d28:	02160ebf 	.word	0x02160ebf
 8001d2c:	039386ff 	.word	0x039386ff
 8001d30:	05f5e0ff 	.word	0x05f5e0ff
 8001d34:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	68db      	ldr	r3, [r3, #12]
 8001d3c:	08db      	lsrs	r3, r3, #3
 8001d3e:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	689b      	ldr	r3, [r3, #8]
 8001d44:	085b      	lsrs	r3, r3, #1
 8001d46:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8001d48:	4313      	orrs	r3, r2
 8001d4a:	b29b      	uxth	r3, r3
 8001d4c:	461a      	mov	r2, r3
 8001d4e:	2100      	movs	r1, #0
 8001d50:	6878      	ldr	r0, [r7, #4]
 8001d52:	f000 fb4c 	bl	80023ee <HAL_ETH_WritePHYRegister>
 8001d56:	4603      	mov	r3, r0
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d00b      	beq.n	8001d74 <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001d60:	6939      	ldr	r1, [r7, #16]
 8001d62:	6878      	ldr	r0, [r7, #4]
 8001d64:	f000 fd02 	bl	800276c <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8001d70:	2301      	movs	r3, #1
 8001d72:	e00c      	b.n	8001d8e <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8001d74:	f640 70ff 	movw	r0, #4095	; 0xfff
 8001d78:	f7ff f94c 	bl	8001014 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8001d7c:	6939      	ldr	r1, [r7, #16]
 8001d7e:	6878      	ldr	r0, [r7, #4]
 8001d80:	f000 fcf4 	bl	800276c <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2201      	movs	r2, #1
 8001d88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001d8c:	2300      	movs	r3, #0
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	3720      	adds	r7, #32
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	bf00      	nop

08001d98 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b087      	sub	sp, #28
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	60f8      	str	r0, [r7, #12]
 8001da0:	60b9      	str	r1, [r7, #8]
 8001da2:	607a      	str	r2, [r7, #4]
 8001da4:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 8001da6:	2300      	movs	r3, #0
 8001da8:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001db0:	2b01      	cmp	r3, #1
 8001db2:	d101      	bne.n	8001db8 <HAL_ETH_DMATxDescListInit+0x20>
 8001db4:	2302      	movs	r3, #2
 8001db6:	e052      	b.n	8001e5e <HAL_ETH_DMATxDescListInit+0xc6>
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	2201      	movs	r2, #1
 8001dbc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	2202      	movs	r2, #2
 8001dc4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	68ba      	ldr	r2, [r7, #8]
 8001dcc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0; i < TxBuffCount; i++)
 8001dce:	2300      	movs	r3, #0
 8001dd0:	617b      	str	r3, [r7, #20]
 8001dd2:	e030      	b.n	8001e36 <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the member (i) of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	015b      	lsls	r3, r3, #5
 8001dd8:	68ba      	ldr	r2, [r7, #8]
 8001dda:	4413      	add	r3, r2
 8001ddc:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8001dde:	693b      	ldr	r3, [r7, #16]
 8001de0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001de4:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8001de6:	697b      	ldr	r3, [r7, #20]
 8001de8:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001dec:	fb02 f303 	mul.w	r3, r2, r3
 8001df0:	687a      	ldr	r2, [r7, #4]
 8001df2:	4413      	add	r3, r2
 8001df4:	461a      	mov	r2, r3
 8001df6:	693b      	ldr	r3, [r7, #16]
 8001df8:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	69db      	ldr	r3, [r3, #28]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d105      	bne.n	8001e0e <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 8001e02:	693b      	ldr	r3, [r7, #16]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1))
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	3b01      	subs	r3, #1
 8001e12:	697a      	ldr	r2, [r7, #20]
 8001e14:	429a      	cmp	r2, r3
 8001e16:	d208      	bcs.n	8001e2a <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1);
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	3301      	adds	r3, #1
 8001e1c:	015b      	lsls	r3, r3, #5
 8001e1e:	68ba      	ldr	r2, [r7, #8]
 8001e20:	4413      	add	r3, r2
 8001e22:	461a      	mov	r2, r3
 8001e24:	693b      	ldr	r3, [r7, #16]
 8001e26:	60da      	str	r2, [r3, #12]
 8001e28:	e002      	b.n	8001e30 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 8001e2a:	68ba      	ldr	r2, [r7, #8]
 8001e2c:	693b      	ldr	r3, [r7, #16]
 8001e2e:	60da      	str	r2, [r3, #12]
  for(i=0; i < TxBuffCount; i++)
 8001e30:	697b      	ldr	r3, [r7, #20]
 8001e32:	3301      	adds	r3, #1
 8001e34:	617b      	str	r3, [r7, #20]
 8001e36:	697a      	ldr	r2, [r7, #20]
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	429a      	cmp	r2, r3
 8001e3c:	d3ca      	bcc.n	8001dd4 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	6819      	ldr	r1, [r3, #0]
 8001e42:	68ba      	ldr	r2, [r7, #8]
 8001e44:	f241 0310 	movw	r3, #4112	; 0x1010
 8001e48:	440b      	add	r3, r1
 8001e4a:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	2201      	movs	r2, #1
 8001e50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	2200      	movs	r2, #0
 8001e58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001e5c:	2300      	movs	r3, #0
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	371c      	adds	r7, #28
 8001e62:	46bd      	mov	sp, r7
 8001e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e68:	4770      	bx	lr

08001e6a <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 8001e6a:	b480      	push	{r7}
 8001e6c:	b087      	sub	sp, #28
 8001e6e:	af00      	add	r7, sp, #0
 8001e70:	60f8      	str	r0, [r7, #12]
 8001e72:	60b9      	str	r1, [r7, #8]
 8001e74:	607a      	str	r2, [r7, #4]
 8001e76:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001e82:	2b01      	cmp	r3, #1
 8001e84:	d101      	bne.n	8001e8a <HAL_ETH_DMARxDescListInit+0x20>
 8001e86:	2302      	movs	r3, #2
 8001e88:	e056      	b.n	8001f38 <HAL_ETH_DMARxDescListInit+0xce>
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	2202      	movs	r2, #2
 8001e96:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	68ba      	ldr	r2, [r7, #8]
 8001e9e:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0; i < RxBuffCount; i++)
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	617b      	str	r3, [r7, #20]
 8001ea4:	e034      	b.n	8001f10 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the member (i) of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 8001ea6:	697b      	ldr	r3, [r7, #20]
 8001ea8:	015b      	lsls	r3, r3, #5
 8001eaa:	68ba      	ldr	r2, [r7, #8]
 8001eac:	4413      	add	r3, r2
 8001eae:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8001eb0:	693b      	ldr	r3, [r7, #16]
 8001eb2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001eb6:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8001eb8:	693b      	ldr	r3, [r7, #16]
 8001eba:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8001ebe:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8001ec0:	697b      	ldr	r3, [r7, #20]
 8001ec2:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001ec6:	fb02 f303 	mul.w	r3, r2, r3
 8001eca:	687a      	ldr	r2, [r7, #4]
 8001ecc:	4413      	add	r3, r2
 8001ece:	461a      	mov	r2, r3
 8001ed0:	693b      	ldr	r3, [r7, #16]
 8001ed2:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	699b      	ldr	r3, [r3, #24]
 8001ed8:	2b01      	cmp	r3, #1
 8001eda:	d105      	bne.n	8001ee8 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8001edc:	693b      	ldr	r3, [r7, #16]
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001ee4:	693b      	ldr	r3, [r7, #16]
 8001ee6:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1))
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	3b01      	subs	r3, #1
 8001eec:	697a      	ldr	r2, [r7, #20]
 8001eee:	429a      	cmp	r2, r3
 8001ef0:	d208      	bcs.n	8001f04 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1); 
 8001ef2:	697b      	ldr	r3, [r7, #20]
 8001ef4:	3301      	adds	r3, #1
 8001ef6:	015b      	lsls	r3, r3, #5
 8001ef8:	68ba      	ldr	r2, [r7, #8]
 8001efa:	4413      	add	r3, r2
 8001efc:	461a      	mov	r2, r3
 8001efe:	693b      	ldr	r3, [r7, #16]
 8001f00:	60da      	str	r2, [r3, #12]
 8001f02:	e002      	b.n	8001f0a <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 8001f04:	68ba      	ldr	r2, [r7, #8]
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	60da      	str	r2, [r3, #12]
  for(i=0; i < RxBuffCount; i++)
 8001f0a:	697b      	ldr	r3, [r7, #20]
 8001f0c:	3301      	adds	r3, #1
 8001f0e:	617b      	str	r3, [r7, #20]
 8001f10:	697a      	ldr	r2, [r7, #20]
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	429a      	cmp	r2, r3
 8001f16:	d3c6      	bcc.n	8001ea6 <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	6819      	ldr	r1, [r3, #0]
 8001f1c:	68ba      	ldr	r2, [r7, #8]
 8001f1e:	f241 030c 	movw	r3, #4108	; 0x100c
 8001f22:	440b      	add	r3, r1
 8001f24:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	2201      	movs	r2, #1
 8001f2a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	2200      	movs	r2, #0
 8001f32:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001f36:	2300      	movs	r3, #0
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	371c      	adds	r7, #28
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f42:	4770      	bx	lr

08001f44 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b087      	sub	sp, #28
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
 8001f4c:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0, size = 0, i = 0;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	617b      	str	r3, [r7, #20]
 8001f52:	2300      	movs	r3, #0
 8001f54:	60fb      	str	r3, [r7, #12]
 8001f56:	2300      	movs	r3, #0
 8001f58:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001f60:	2b01      	cmp	r3, #1
 8001f62:	d101      	bne.n	8001f68 <HAL_ETH_TransmitFrame+0x24>
 8001f64:	2302      	movs	r3, #2
 8001f66:	e0cd      	b.n	8002104 <HAL_ETH_TransmitFrame+0x1c0>
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2202      	movs	r2, #2
 8001f74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0) 
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d109      	bne.n	8001f92 <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2201      	movs	r2, #1
 8001f82:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2200      	movs	r2, #0
 8001f8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 8001f8e:	2301      	movs	r3, #1
 8001f90:	e0b8      	b.n	8002104 <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	da09      	bge.n	8001fb0 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2212      	movs	r2, #18
 8001fa0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 8001fac:	2301      	movs	r3, #1
 8001fae:	e0a9      	b.n	8002104 <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d915      	bls.n	8001fe6 <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	4a54      	ldr	r2, [pc, #336]	; (8002110 <HAL_ETH_TransmitFrame+0x1cc>)
 8001fbe:	fba2 2303 	umull	r2, r3, r2, r3
 8001fc2:	0a9b      	lsrs	r3, r3, #10
 8001fc4:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8001fc6:	683a      	ldr	r2, [r7, #0]
 8001fc8:	4b51      	ldr	r3, [pc, #324]	; (8002110 <HAL_ETH_TransmitFrame+0x1cc>)
 8001fca:	fba3 1302 	umull	r1, r3, r3, r2
 8001fce:	0a9b      	lsrs	r3, r3, #10
 8001fd0:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8001fd4:	fb01 f303 	mul.w	r3, r1, r3
 8001fd8:	1ad3      	subs	r3, r2, r3
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d005      	beq.n	8001fea <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 8001fde:	697b      	ldr	r3, [r7, #20]
 8001fe0:	3301      	adds	r3, #1
 8001fe2:	617b      	str	r3, [r7, #20]
 8001fe4:	e001      	b.n	8001fea <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1)
 8001fea:	697b      	ldr	r3, [r7, #20]
 8001fec:	2b01      	cmp	r3, #1
 8001fee:	d11c      	bne.n	800202a <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ff4:	681a      	ldr	r2, [r3, #0]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ffa:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 8001ffe:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002004:	683a      	ldr	r2, [r7, #0]
 8002006:	f3c2 020c 	ubfx	r2, r2, #0, #13
 800200a:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002010:	681a      	ldr	r2, [r3, #0]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002016:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800201a:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002020:	68db      	ldr	r3, [r3, #12]
 8002022:	461a      	mov	r2, r3
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	62da      	str	r2, [r3, #44]	; 0x2c
 8002028:	e04b      	b.n	80020c2 <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0; i< bufcount; i++)
 800202a:	2300      	movs	r3, #0
 800202c:	613b      	str	r3, [r7, #16]
 800202e:	e044      	b.n	80020ba <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002034:	681a      	ldr	r2, [r3, #0]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800203a:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800203e:	601a      	str	r2, [r3, #0]
      
      if (i == 0) 
 8002040:	693b      	ldr	r3, [r7, #16]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d107      	bne.n	8002056 <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800204a:	681a      	ldr	r2, [r3, #0]
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002050:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002054:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800205a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800205e:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1))
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	3b01      	subs	r3, #1
 8002064:	693a      	ldr	r2, [r7, #16]
 8002066:	429a      	cmp	r2, r3
 8002068:	d116      	bne.n	8002098 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800206e:	681a      	ldr	r2, [r3, #0]
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002074:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002078:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
 800207a:	697b      	ldr	r3, [r7, #20]
 800207c:	4a25      	ldr	r2, [pc, #148]	; (8002114 <HAL_ETH_TransmitFrame+0x1d0>)
 800207e:	fb02 f203 	mul.w	r2, r2, r3
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	4413      	add	r3, r2
 8002086:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800208a:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002090:	68fa      	ldr	r2, [r7, #12]
 8002092:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8002096:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800209c:	681a      	ldr	r2, [r3, #0]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020a2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80020a6:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020ac:	68db      	ldr	r3, [r3, #12]
 80020ae:	461a      	mov	r2, r3
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0; i< bufcount; i++)
 80020b4:	693b      	ldr	r3, [r7, #16]
 80020b6:	3301      	adds	r3, #1
 80020b8:	613b      	str	r3, [r7, #16]
 80020ba:	693a      	ldr	r2, [r7, #16]
 80020bc:	697b      	ldr	r3, [r7, #20]
 80020be:	429a      	cmp	r2, r3
 80020c0:	d3b6      	bcc.n	8002030 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681a      	ldr	r2, [r3, #0]
 80020c6:	f241 0314 	movw	r3, #4116	; 0x1014
 80020ca:	4413      	add	r3, r2
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f003 0304 	and.w	r3, r3, #4
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d00d      	beq.n	80020f2 <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681a      	ldr	r2, [r3, #0]
 80020da:	f241 0314 	movw	r3, #4116	; 0x1014
 80020de:	4413      	add	r3, r2
 80020e0:	2204      	movs	r2, #4
 80020e2:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681a      	ldr	r2, [r3, #0]
 80020e8:	f241 0304 	movw	r3, #4100	; 0x1004
 80020ec:	4413      	add	r3, r2
 80020ee:	2200      	movs	r2, #0
 80020f0:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2201      	movs	r2, #1
 80020f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2200      	movs	r2, #0
 80020fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8002102:	2300      	movs	r3, #0
}
 8002104:	4618      	mov	r0, r3
 8002106:	371c      	adds	r7, #28
 8002108:	46bd      	mov	sp, r7
 800210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210e:	4770      	bx	lr
 8002110:	ac02b00b 	.word	0xac02b00b
 8002114:	fffffa0c 	.word	0xfffffa0c

08002118 <HAL_ETH_GetReceivedFrame_IT>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame_IT(ETH_HandleTypeDef *heth)
{
 8002118:	b480      	push	{r7}
 800211a:	b085      	sub	sp, #20
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  uint32_t descriptorscancounter = 0;
 8002120:	2300      	movs	r3, #0
 8002122:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800212a:	2b01      	cmp	r3, #1
 800212c:	d101      	bne.n	8002132 <HAL_ETH_GetReceivedFrame_IT+0x1a>
 800212e:	2302      	movs	r3, #2
 8002130:	e074      	b.n	800221c <HAL_ETH_GetReceivedFrame_IT+0x104>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2201      	movs	r2, #1
 8002136:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set ETH HAL State to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2202      	movs	r2, #2
 800213e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Scan descriptors owned by CPU */
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8002142:	e05a      	b.n	80021fa <HAL_ETH_GetReceivedFrame_IT+0xe2>
  {
    /* Just for security */
    descriptorscancounter++;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	3301      	adds	r3, #1
 8002148:	60fb      	str	r3, [r7, #12]
    
    /* Check if first segment in frame */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)) */  
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002154:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002158:	d10d      	bne.n	8002176 <HAL_ETH_GetReceivedFrame_IT+0x5e>
    { 
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	631a      	str	r2, [r3, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1;   
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2201      	movs	r2, #1
 8002166:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800216c:	68db      	ldr	r3, [r3, #12]
 800216e:	461a      	mov	r2, r3
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	629a      	str	r2, [r3, #40]	; 0x28
 8002174:	e041      	b.n	80021fa <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Check if intermediate segment */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)&& ((heth->RxDesc->Status & ETH_DMARXDESC_FS) == (uint32_t)RESET)) */
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002180:	2b00      	cmp	r3, #0
 8002182:	d10b      	bne.n	800219c <HAL_ETH_GetReceivedFrame_IT+0x84>
    {
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002188:	1c5a      	adds	r2, r3, #1
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002192:	68db      	ldr	r3, [r3, #12]
 8002194:	461a      	mov	r2, r3
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	629a      	str	r2, [r3, #40]	; 0x28
 800219a:	e02e      	b.n	80021fa <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Should be last segment */
    else
    { 
      /* Last segment */
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021a8:	1c5a      	adds	r2, r3, #1
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos.SegCount) == 1)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021b2:	2b01      	cmp	r3, #1
 80021b4:	d103      	bne.n	80021be <HAL_ETH_GetReceivedFrame_IT+0xa6>
      {
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	0c1b      	lsrs	r3, r3, #16
 80021c6:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80021ca:	1f1a      	subs	r2, r3, #4
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */ 
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d4:	689a      	ldr	r2, [r3, #8]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Point to next descriptor */      
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021de:	68db      	ldr	r3, [r3, #12]
 80021e0:	461a      	mov	r2, r3
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2201      	movs	r2, #1
 80021ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2200      	movs	r2, #0
 80021f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
      /* Return function status */
      return HAL_OK;
 80021f6:	2300      	movs	r3, #0
 80021f8:	e010      	b.n	800221c <HAL_ETH_GetReceivedFrame_IT+0x104>
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	2b00      	cmp	r3, #0
 8002202:	db02      	blt.n	800220a <HAL_ETH_GetReceivedFrame_IT+0xf2>
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	2b03      	cmp	r3, #3
 8002208:	d99c      	bls.n	8002144 <HAL_ETH_GetReceivedFrame_IT+0x2c>
    }
  }

  /* Set HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2201      	movs	r2, #1
 800220e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2200      	movs	r2, #0
 8002216:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 800221a:	2301      	movs	r3, #1
}
 800221c:	4618      	mov	r0, r3
 800221e:	3714      	adds	r7, #20
 8002220:	46bd      	mov	sp, r7
 8002222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002226:	4770      	bx	lr

08002228 <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b082      	sub	sp, #8
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681a      	ldr	r2, [r3, #0]
 8002234:	f241 0314 	movw	r3, #4116	; 0x1014
 8002238:	4413      	add	r3, r2
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002240:	2b40      	cmp	r3, #64	; 0x40
 8002242:	d112      	bne.n	800226a <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8002244:	6878      	ldr	r0, [r7, #4]
 8002246:	f002 f989 	bl	800455c <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    
     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681a      	ldr	r2, [r3, #0]
 800224e:	f241 0314 	movw	r3, #4116	; 0x1014
 8002252:	4413      	add	r3, r2
 8002254:	2240      	movs	r2, #64	; 0x40
 8002256:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2201      	movs	r2, #1
 800225c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2200      	movs	r2, #0
 8002264:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002268:	e01b      	b.n	80022a2 <HAL_ETH_IRQHandler+0x7a>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681a      	ldr	r2, [r3, #0]
 800226e:	f241 0314 	movw	r3, #4116	; 0x1014
 8002272:	4413      	add	r3, r2
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f003 0301 	and.w	r3, r3, #1
 800227a:	2b01      	cmp	r3, #1
 800227c:	d111      	bne.n	80022a2 <HAL_ETH_IRQHandler+0x7a>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 800227e:	6878      	ldr	r0, [r7, #4]
 8002280:	f000 f839 	bl	80022f6 <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681a      	ldr	r2, [r3, #0]
 8002288:	f241 0314 	movw	r3, #4116	; 0x1014
 800228c:	4413      	add	r3, r2
 800228e:	2201      	movs	r2, #1
 8002290:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2201      	movs	r2, #1
 8002296:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2200      	movs	r2, #0
 800229e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681a      	ldr	r2, [r3, #0]
 80022a6:	f241 0314 	movw	r3, #4116	; 0x1014
 80022aa:	4413      	add	r3, r2
 80022ac:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80022b0:	601a      	str	r2, [r3, #0]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681a      	ldr	r2, [r3, #0]
 80022b6:	f241 0314 	movw	r3, #4116	; 0x1014
 80022ba:	4413      	add	r3, r2
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80022c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80022c6:	d112      	bne.n	80022ee <HAL_ETH_IRQHandler+0xc6>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 80022c8:	6878      	ldr	r0, [r7, #4]
 80022ca:	f000 f81e 	bl	800230a <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681a      	ldr	r2, [r3, #0]
 80022d2:	f241 0314 	movw	r3, #4116	; 0x1014
 80022d6:	4413      	add	r3, r2
 80022d8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80022dc:	601a      	str	r2, [r3, #0]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2201      	movs	r2, #1
 80022e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2200      	movs	r2, #0
 80022ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 80022ee:	bf00      	nop
 80022f0:	3708      	adds	r7, #8
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}

080022f6 <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 80022f6:	b480      	push	{r7}
 80022f8:	b083      	sub	sp, #12
 80022fa:	af00      	add	r7, sp, #0
 80022fc:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 80022fe:	bf00      	nop
 8002300:	370c      	adds	r7, #12
 8002302:	46bd      	mov	sp, r7
 8002304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002308:	4770      	bx	lr

0800230a <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 800230a:	b480      	push	{r7}
 800230c:	b083      	sub	sp, #12
 800230e:	af00      	add	r7, sp, #0
 8002310:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */ 
}
 8002312:	bf00      	nop
 8002314:	370c      	adds	r7, #12
 8002316:	46bd      	mov	sp, r7
 8002318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231c:	4770      	bx	lr

0800231e <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 800231e:	b580      	push	{r7, lr}
 8002320:	b086      	sub	sp, #24
 8002322:	af00      	add	r7, sp, #0
 8002324:	60f8      	str	r0, [r7, #12]
 8002326:	460b      	mov	r3, r1
 8002328:	607a      	str	r2, [r7, #4]
 800232a:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 800232c:	2300      	movs	r3, #0
 800232e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8002330:	2300      	movs	r3, #0
 8002332:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800233a:	b2db      	uxtb	r3, r3
 800233c:	2b82      	cmp	r3, #130	; 0x82
 800233e:	d101      	bne.n	8002344 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8002340:	2302      	movs	r3, #2
 8002342:	e050      	b.n	80023e6 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	2282      	movs	r2, #130	; 0x82
 8002348:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	691b      	ldr	r3, [r3, #16]
 8002352:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8002354:	697b      	ldr	r3, [r7, #20]
 8002356:	f003 031c 	and.w	r3, r3, #28
 800235a:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	8a1b      	ldrh	r3, [r3, #16]
 8002360:	02db      	lsls	r3, r3, #11
 8002362:	b29b      	uxth	r3, r3
 8002364:	697a      	ldr	r2, [r7, #20]
 8002366:	4313      	orrs	r3, r2
 8002368:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 800236a:	897b      	ldrh	r3, [r7, #10]
 800236c:	019b      	lsls	r3, r3, #6
 800236e:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8002372:	697a      	ldr	r2, [r7, #20]
 8002374:	4313      	orrs	r3, r2
 8002376:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	f023 0302 	bic.w	r3, r3, #2
 800237e:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	f043 0301 	orr.w	r3, r3, #1
 8002386:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	697a      	ldr	r2, [r7, #20]
 800238e:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8002390:	f7fe fe34 	bl	8000ffc <HAL_GetTick>
 8002394:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002396:	e015      	b.n	80023c4 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8002398:	f7fe fe30 	bl	8000ffc <HAL_GetTick>
 800239c:	4602      	mov	r2, r0
 800239e:	693b      	ldr	r3, [r7, #16]
 80023a0:	1ad3      	subs	r3, r2, r3
 80023a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023a6:	d309      	bcc.n	80023bc <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	2201      	movs	r2, #1
 80023ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	2200      	movs	r2, #0
 80023b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 80023b8:	2303      	movs	r3, #3
 80023ba:	e014      	b.n	80023e6 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	691b      	ldr	r3, [r3, #16]
 80023c2:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	f003 0301 	and.w	r3, r3, #1
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d1e4      	bne.n	8002398 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	695b      	ldr	r3, [r3, #20]
 80023d4:	b29b      	uxth	r3, r3
 80023d6:	461a      	mov	r2, r3
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	2201      	movs	r2, #1
 80023e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80023e4:	2300      	movs	r3, #0
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	3718      	adds	r7, #24
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}

080023ee <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 80023ee:	b580      	push	{r7, lr}
 80023f0:	b086      	sub	sp, #24
 80023f2:	af00      	add	r7, sp, #0
 80023f4:	60f8      	str	r0, [r7, #12]
 80023f6:	460b      	mov	r3, r1
 80023f8:	607a      	str	r2, [r7, #4]
 80023fa:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 80023fc:	2300      	movs	r3, #0
 80023fe:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8002400:	2300      	movs	r3, #0
 8002402:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800240a:	b2db      	uxtb	r3, r3
 800240c:	2b42      	cmp	r3, #66	; 0x42
 800240e:	d101      	bne.n	8002414 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8002410:	2302      	movs	r3, #2
 8002412:	e04e      	b.n	80024b2 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	2242      	movs	r2, #66	; 0x42
 8002418:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	691b      	ldr	r3, [r3, #16]
 8002422:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8002424:	697b      	ldr	r3, [r7, #20]
 8002426:	f003 031c 	and.w	r3, r3, #28
 800242a:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	8a1b      	ldrh	r3, [r3, #16]
 8002430:	02db      	lsls	r3, r3, #11
 8002432:	b29b      	uxth	r3, r3
 8002434:	697a      	ldr	r2, [r7, #20]
 8002436:	4313      	orrs	r3, r2
 8002438:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 800243a:	897b      	ldrh	r3, [r7, #10]
 800243c:	019b      	lsls	r3, r3, #6
 800243e:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8002442:	697a      	ldr	r2, [r7, #20]
 8002444:	4313      	orrs	r3, r2
 8002446:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	f043 0302 	orr.w	r3, r3, #2
 800244e:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	f043 0301 	orr.w	r3, r3, #1
 8002456:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	b29a      	uxth	r2, r3
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	697a      	ldr	r2, [r7, #20]
 8002468:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800246a:	f7fe fdc7 	bl	8000ffc <HAL_GetTick>
 800246e:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002470:	e015      	b.n	800249e <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8002472:	f7fe fdc3 	bl	8000ffc <HAL_GetTick>
 8002476:	4602      	mov	r2, r0
 8002478:	693b      	ldr	r3, [r7, #16]
 800247a:	1ad3      	subs	r3, r2, r3
 800247c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002480:	d309      	bcc.n	8002496 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	2201      	movs	r2, #1
 8002486:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	2200      	movs	r2, #0
 800248e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8002492:	2303      	movs	r3, #3
 8002494:	e00d      	b.n	80024b2 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	691b      	ldr	r3, [r3, #16]
 800249c:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800249e:	697b      	ldr	r3, [r7, #20]
 80024a0:	f003 0301 	and.w	r3, r3, #1
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d1e4      	bne.n	8002472 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	2201      	movs	r2, #1
 80024ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 80024b0:	2300      	movs	r3, #0
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	3718      	adds	r7, #24
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}

080024ba <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 80024ba:	b580      	push	{r7, lr}
 80024bc:	b082      	sub	sp, #8
 80024be:	af00      	add	r7, sp, #0
 80024c0:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80024c8:	2b01      	cmp	r3, #1
 80024ca:	d101      	bne.n	80024d0 <HAL_ETH_Start+0x16>
 80024cc:	2302      	movs	r3, #2
 80024ce:	e01f      	b.n	8002510 <HAL_ETH_Start+0x56>
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2201      	movs	r2, #1
 80024d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2202      	movs	r2, #2
 80024dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 80024e0:	6878      	ldr	r0, [r7, #4]
 80024e2:	f000 fb45 	bl	8002b70 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 80024e6:	6878      	ldr	r0, [r7, #4]
 80024e8:	f000 fb7c 	bl	8002be4 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 80024ec:	6878      	ldr	r0, [r7, #4]
 80024ee:	f000 fc13 	bl	8002d18 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 80024f2:	6878      	ldr	r0, [r7, #4]
 80024f4:	f000 fbb0 	bl	8002c58 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 80024f8:	6878      	ldr	r0, [r7, #4]
 80024fa:	f000 fbdd 	bl	8002cb8 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2201      	movs	r2, #1
 8002502:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2200      	movs	r2, #0
 800250a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800250e:	2300      	movs	r3, #0
}
 8002510:	4618      	mov	r0, r3
 8002512:	3708      	adds	r7, #8
 8002514:	46bd      	mov	sp, r7
 8002516:	bd80      	pop	{r7, pc}

08002518 <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 8002518:	b580      	push	{r7, lr}
 800251a:	b082      	sub	sp, #8
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002526:	2b01      	cmp	r3, #1
 8002528:	d101      	bne.n	800252e <HAL_ETH_Stop+0x16>
 800252a:	2302      	movs	r3, #2
 800252c:	e01f      	b.n	800256e <HAL_ETH_Stop+0x56>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2201      	movs	r2, #1
 8002532:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2202      	movs	r2, #2
 800253a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 800253e:	6878      	ldr	r0, [r7, #4]
 8002540:	f000 fba2 	bl	8002c88 <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 8002544:	6878      	ldr	r0, [r7, #4]
 8002546:	f000 fbcf 	bl	8002ce8 <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 800254a:	6878      	ldr	r0, [r7, #4]
 800254c:	f000 fb67 	bl	8002c1e <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8002550:	6878      	ldr	r0, [r7, #4]
 8002552:	f000 fbe1 	bl	8002d18 <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 8002556:	6878      	ldr	r0, [r7, #4]
 8002558:	f000 fb27 	bl	8002baa <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2201      	movs	r2, #1
 8002560:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2200      	movs	r2, #0
 8002568:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800256c:	2300      	movs	r3, #0
}
 800256e:	4618      	mov	r0, r3
 8002570:	3708      	adds	r7, #8
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}
	...

08002578 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b084      	sub	sp, #16
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
 8002580:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8002582:	2300      	movs	r3, #0
 8002584:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800258c:	2b01      	cmp	r3, #1
 800258e:	d101      	bne.n	8002594 <HAL_ETH_ConfigMAC+0x1c>
 8002590:	2302      	movs	r3, #2
 8002592:	e0e4      	b.n	800275e <HAL_ETH_ConfigMAC+0x1e6>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2201      	movs	r2, #1
 8002598:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2202      	movs	r2, #2
 80025a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	f000 80b1 	beq.w	800270e <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg = (heth->Instance)->MACCR;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg &= ETH_MACCR_CLEAR_MASK;
 80025b4:	68fa      	ldr	r2, [r7, #12]
 80025b6:	4b6c      	ldr	r3, [pc, #432]	; (8002768 <HAL_ETH_ConfigMAC+0x1f0>)
 80025b8:	4013      	ands	r3, r2
 80025ba:	60fb      	str	r3, [r7, #12]
    
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	685b      	ldr	r3, [r3, #4]
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 80025c4:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 80025ca:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 80025d0:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 80025d6:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 80025dc:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 80025e2:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 80025e8:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 80025ee:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 80025f4:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 80025fa:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 8002600:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 8002606:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8002608:	68fa      	ldr	r2, [r7, #12]
 800260a:	4313      	orrs	r3, r2
 800260c:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	68fa      	ldr	r2, [r7, #12]
 8002614:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACCR;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800261e:	2001      	movs	r0, #1
 8002620:	f7fe fcf8 	bl	8001014 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg; 
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	68fa      	ldr	r2, [r7, #12]
 800262a:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8002634:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 800263a:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 8002640:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 8002646:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 800264c:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 8002652:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 800265e:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8002660:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->MACFFR;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 800266a:	2001      	movs	r0, #1
 800266c:	f7fe fcd2 	bl	8001014 <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	68fa      	ldr	r2, [r7, #12]
 8002676:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	683a      	ldr	r2, [r7, #0]
 800267e:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002680:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	683a      	ldr	r2, [r7, #0]
 8002688:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800268a:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg = (heth->Instance)->MACFCR;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	699b      	ldr	r3, [r3, #24]
 8002692:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8002694:	68fa      	ldr	r2, [r7, #12]
 8002696:	f64f 7341 	movw	r3, #65345	; 0xff41
 800269a:	4013      	ands	r3, r2
 800269c:	60fb      	str	r3, [r7, #12]
     
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026a2:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 80026a8:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 80026ae:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 80026b4:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 80026ba:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 80026c0:	4313      	orrs	r3, r2
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 80026c2:	68fa      	ldr	r2, [r7, #12]
 80026c4:	4313      	orrs	r3, r2
 80026c6:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	68fa      	ldr	r2, [r7, #12]
 80026ce:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->MACFCR;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	699b      	ldr	r3, [r3, #24]
 80026d6:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80026d8:	2001      	movs	r0, #1
 80026da:	f7fe fc9b 	bl	8001014 <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	68fa      	ldr	r2, [r7, #12]
 80026e4:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	430a      	orrs	r2, r1
 80026f4:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg = (heth->Instance)->MACVLANTR;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	69db      	ldr	r3, [r3, #28]
 80026fc:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 80026fe:	2001      	movs	r0, #1
 8002700:	f7fe fc88 	bl	8001014 <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	68fa      	ldr	r2, [r7, #12]
 800270a:	61da      	str	r2, [r3, #28]
 800270c:	e01e      	b.n	800274c <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg = (heth->Instance)->MACCR;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg &= ~((uint32_t)0x00004800);
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 800271c:	60fb      	str	r3, [r7, #12]
    
    tmpreg |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	689a      	ldr	r2, [r3, #8]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	68db      	ldr	r3, [r3, #12]
 8002726:	4313      	orrs	r3, r2
 8002728:	68fa      	ldr	r2, [r7, #12]
 800272a:	4313      	orrs	r3, r2
 800272c:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	68fa      	ldr	r2, [r7, #12]
 8002734:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACCR;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800273e:	2001      	movs	r0, #1
 8002740:	f7fe fc68 	bl	8001014 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	68fa      	ldr	r2, [r7, #12]
 800274a:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2201      	movs	r2, #1
 8002750:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2200      	movs	r2, #0
 8002758:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 800275c:	2300      	movs	r3, #0
}
 800275e:	4618      	mov	r0, r3
 8002760:	3710      	adds	r7, #16
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}
 8002766:	bf00      	nop
 8002768:	ff20810f 	.word	0xff20810f

0800276c <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b0b0      	sub	sp, #192	; 0xc0
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
 8002774:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 8002776:	2300      	movs	r3, #0
 8002778:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d007      	beq.n	8002792 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002788:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002790:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8002792:	2300      	movs	r3, #0
 8002794:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8002796:	2300      	movs	r3, #0
 8002798:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 800279a:	2300      	movs	r3, #0
 800279c:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 800279e:	2300      	movs	r3, #0
 80027a0:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 80027a2:	2300      	movs	r3, #0
 80027a4:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 80027a6:	2300      	movs	r3, #0
 80027a8:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	69db      	ldr	r3, [r3, #28]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d103      	bne.n	80027ba <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 80027b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80027b6:	663b      	str	r3, [r7, #96]	; 0x60
 80027b8:	e001      	b.n	80027be <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 80027ba:	2300      	movs	r3, #0
 80027bc:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 80027be:	f44f 7300 	mov.w	r3, #512	; 0x200
 80027c2:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 80027c4:	2300      	movs	r3, #0
 80027c6:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80027c8:	2300      	movs	r3, #0
 80027ca:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 80027cc:	2300      	movs	r3, #0
 80027ce:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 80027d0:	2300      	movs	r3, #0
 80027d2:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 80027d4:	2300      	movs	r3, #0
 80027d6:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 80027d8:	2340      	movs	r3, #64	; 0x40
 80027da:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 80027dc:	2300      	movs	r3, #0
 80027de:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 80027e2:	2300      	movs	r3, #0
 80027e4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 80027e8:	2300      	movs	r3, #0
 80027ea:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 80027ee:	2300      	movs	r3, #0
 80027f0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 80027f4:	2300      	movs	r3, #0
 80027f6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 80027fa:	2300      	movs	r3, #0
 80027fc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 8002800:	2300      	movs	r3, #0
 8002802:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 8002806:	2300      	movs	r3, #0
 8002808:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 800280c:	2380      	movs	r3, #128	; 0x80
 800280e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002812:	2300      	movs	r3, #0
 8002814:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8002818:	2300      	movs	r3, #0
 800281a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 800281e:	2300      	movs	r3, #0
 8002820:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8002824:	2300      	movs	r3, #0
 8002826:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 800282a:	2300      	movs	r3, #0
 800282c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 8002830:	2300      	movs	r3, #0
 8002832:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 8002840:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002844:	4bab      	ldr	r3, [pc, #684]	; (8002af4 <ETH_MACDMAConfig+0x388>)
 8002846:	4013      	ands	r3, r2
 8002848:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 800284c:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 800284e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8002850:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8002852:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8002854:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8002856:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8002858:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 800285e:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8002860:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8002862:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8002864:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8002866:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 800286c:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 800286e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8002870:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8002872:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8002874:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8002876:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8002878:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 800287a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 800287c:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 800287e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8002880:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8002882:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002886:	4313      	orrs	r3, r2
 8002888:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002894:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80028a0:	2001      	movs	r0, #1
 80028a2:	f7fe fbb7 	bl	8001014 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80028ae:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80028b0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 80028b2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80028b4:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 80028b6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 80028b8:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 80028ba:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 80028be:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 80028c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 80028c4:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 80028c6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 80028ca:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 80028cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 80028d0:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 80028d4:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 80028dc:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80028de:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80028ea:	2001      	movs	r0, #1
 80028ec:	f7fe fb92 	bl	8001014 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80028f8:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002902:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800290c:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	699b      	ldr	r3, [r3, #24]
 8002914:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8002918:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800291c:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002920:	4013      	ands	r3, r2
 8002922:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8002926:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800292a:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 800292c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8002930:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8002932:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8002936:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8002938:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 800293c:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 800293e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8002942:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8002944:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8002948:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 800294a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800294e:	4313      	orrs	r3, r2
 8002950:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800295c:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	699b      	ldr	r3, [r3, #24]
 8002964:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8002968:	2001      	movs	r0, #1
 800296a:	f7fe fb53 	bl	8001014 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002976:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8002978:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 800297c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	430a      	orrs	r2, r1
 8002986:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	69db      	ldr	r3, [r3, #28]
 800298e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002992:	2001      	movs	r0, #1
 8002994:	f7fe fb3e 	bl	8001014 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80029a0:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 80029a2:	2300      	movs	r3, #0
 80029a4:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 80029a6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80029aa:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 80029ac:	2300      	movs	r3, #0
 80029ae:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 80029b0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80029b4:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80029b6:	2300      	movs	r3, #0
 80029b8:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 80029ba:	2300      	movs	r3, #0
 80029bc:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 80029be:	2300      	movs	r3, #0
 80029c0:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80029c2:	2300      	movs	r3, #0
 80029c4:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 80029c6:	2304      	movs	r3, #4
 80029c8:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 80029ca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80029ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 80029d0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80029d4:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80029d6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80029da:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80029dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80029e0:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 80029e2:	2380      	movs	r3, #128	; 0x80
 80029e4:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 80029e6:	2300      	movs	r3, #0
 80029e8:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80029ea:	2300      	movs	r3, #0
 80029ec:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681a      	ldr	r2, [r3, #0]
 80029f2:	f241 0318 	movw	r3, #4120	; 0x1018
 80029f6:	4413      	add	r3, r2
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 80029fe:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002a02:	4b3d      	ldr	r3, [pc, #244]	; (8002af8 <ETH_MACDMAConfig+0x38c>)
 8002a04:	4013      	ands	r3, r2
 8002a06:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002a0a:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8002a0c:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002a0e:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8002a10:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8002a12:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8002a14:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8002a16:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8002a18:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8002a1a:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8002a1c:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8002a1e:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8002a20:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8002a22:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8002a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8002a26:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8002a28:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8002a2a:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002a2c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002a30:	4313      	orrs	r3, r2
 8002a32:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681a      	ldr	r2, [r3, #0]
 8002a3a:	f241 0318 	movw	r3, #4120	; 0x1018
 8002a3e:	4413      	add	r3, r2
 8002a40:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002a44:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681a      	ldr	r2, [r3, #0]
 8002a4a:	f241 0318 	movw	r3, #4120	; 0x1018
 8002a4e:	4413      	add	r3, r2
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002a56:	2001      	movs	r0, #1
 8002a58:	f7fe fadc 	bl	8001014 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681a      	ldr	r2, [r3, #0]
 8002a60:	f241 0318 	movw	r3, #4120	; 0x1018
 8002a64:	4413      	add	r3, r2
 8002a66:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002a6a:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002a6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8002a6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002a70:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8002a72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8002a74:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8002a76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8002a78:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8002a7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8002a7c:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 8002a7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a80:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8002a82:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8002a84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 8002a86:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002a90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a94:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8002aa4:	2001      	movs	r0, #1
 8002aa6:	f7fe fab5 	bl	8001014 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ab2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002ab6:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	699b      	ldr	r3, [r3, #24]
 8002abc:	2b01      	cmp	r3, #1
 8002abe:	d10d      	bne.n	8002adc <ETH_MACDMAConfig+0x370>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681a      	ldr	r2, [r3, #0]
 8002ac4:	f241 031c 	movw	r3, #4124	; 0x101c
 8002ac8:	4413      	add	r3, r2
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	687a      	ldr	r2, [r7, #4]
 8002ace:	6811      	ldr	r1, [r2, #0]
 8002ad0:	4a0a      	ldr	r2, [pc, #40]	; (8002afc <ETH_MACDMAConfig+0x390>)
 8002ad2:	431a      	orrs	r2, r3
 8002ad4:	f241 031c 	movw	r3, #4124	; 0x101c
 8002ad8:	440b      	add	r3, r1
 8002ada:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	695b      	ldr	r3, [r3, #20]
 8002ae0:	461a      	mov	r2, r3
 8002ae2:	2100      	movs	r1, #0
 8002ae4:	6878      	ldr	r0, [r7, #4]
 8002ae6:	f000 f80b 	bl	8002b00 <ETH_MACAddressConfig>
}
 8002aea:	bf00      	nop
 8002aec:	37c0      	adds	r7, #192	; 0xc0
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}
 8002af2:	bf00      	nop
 8002af4:	ff20810f 	.word	0xff20810f
 8002af8:	f8de3f23 	.word	0xf8de3f23
 8002afc:	00010040 	.word	0x00010040

08002b00 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002b00:	b480      	push	{r7}
 8002b02:	b087      	sub	sp, #28
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	60f8      	str	r0, [r7, #12]
 8002b08:	60b9      	str	r1, [r7, #8]
 8002b0a:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	3305      	adds	r3, #5
 8002b10:	781b      	ldrb	r3, [r3, #0]
 8002b12:	021b      	lsls	r3, r3, #8
 8002b14:	687a      	ldr	r2, [r7, #4]
 8002b16:	3204      	adds	r2, #4
 8002b18:	7812      	ldrb	r2, [r2, #0]
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 8002b1e:	68ba      	ldr	r2, [r7, #8]
 8002b20:	4b11      	ldr	r3, [pc, #68]	; (8002b68 <ETH_MACAddressConfig+0x68>)
 8002b22:	4413      	add	r3, r2
 8002b24:	461a      	mov	r2, r3
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	3303      	adds	r3, #3
 8002b2e:	781b      	ldrb	r3, [r3, #0]
 8002b30:	061a      	lsls	r2, r3, #24
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	3302      	adds	r3, #2
 8002b36:	781b      	ldrb	r3, [r3, #0]
 8002b38:	041b      	lsls	r3, r3, #16
 8002b3a:	431a      	orrs	r2, r3
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	3301      	adds	r3, #1
 8002b40:	781b      	ldrb	r3, [r3, #0]
 8002b42:	021b      	lsls	r3, r3, #8
 8002b44:	4313      	orrs	r3, r2
 8002b46:	687a      	ldr	r2, [r7, #4]
 8002b48:	7812      	ldrb	r2, [r2, #0]
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 8002b4e:	68ba      	ldr	r2, [r7, #8]
 8002b50:	4b06      	ldr	r3, [pc, #24]	; (8002b6c <ETH_MACAddressConfig+0x6c>)
 8002b52:	4413      	add	r3, r2
 8002b54:	461a      	mov	r2, r3
 8002b56:	697b      	ldr	r3, [r7, #20]
 8002b58:	6013      	str	r3, [r2, #0]
}
 8002b5a:	bf00      	nop
 8002b5c:	371c      	adds	r7, #28
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b64:	4770      	bx	lr
 8002b66:	bf00      	nop
 8002b68:	40028040 	.word	0x40028040
 8002b6c:	40028044 	.word	0x40028044

08002b70 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b084      	sub	sp, #16
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	681a      	ldr	r2, [r3, #0]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f042 0208 	orr.w	r2, r2, #8
 8002b8a:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002b94:	2001      	movs	r0, #1
 8002b96:	f7fe fa3d 	bl	8001014 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	68fa      	ldr	r2, [r7, #12]
 8002ba0:	601a      	str	r2, [r3, #0]
}
 8002ba2:	bf00      	nop
 8002ba4:	3710      	adds	r7, #16
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}

08002baa <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8002baa:	b580      	push	{r7, lr}
 8002bac:	b084      	sub	sp, #16
 8002bae:	af00      	add	r7, sp, #0
 8002bb0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	681a      	ldr	r2, [r3, #0]
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f022 0208 	bic.w	r2, r2, #8
 8002bc4:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002bce:	2001      	movs	r0, #1
 8002bd0:	f7fe fa20 	bl	8001014 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	68fa      	ldr	r2, [r7, #12]
 8002bda:	601a      	str	r2, [r3, #0]
}
 8002bdc:	bf00      	nop
 8002bde:	3710      	adds	r7, #16
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bd80      	pop	{r7, pc}

08002be4 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b084      	sub	sp, #16
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002bec:	2300      	movs	r3, #0
 8002bee:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	681a      	ldr	r2, [r3, #0]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f042 0204 	orr.w	r2, r2, #4
 8002bfe:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002c08:	2001      	movs	r0, #1
 8002c0a:	f7fe fa03 	bl	8001014 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	68fa      	ldr	r2, [r7, #12]
 8002c14:	601a      	str	r2, [r3, #0]
}
 8002c16:	bf00      	nop
 8002c18:	3710      	adds	r7, #16
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}

08002c1e <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8002c1e:	b580      	push	{r7, lr}
 8002c20:	b084      	sub	sp, #16
 8002c22:	af00      	add	r7, sp, #0
 8002c24:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002c26:	2300      	movs	r3, #0
 8002c28:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	681a      	ldr	r2, [r3, #0]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f022 0204 	bic.w	r2, r2, #4
 8002c38:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002c42:	2001      	movs	r0, #1
 8002c44:	f7fe f9e6 	bl	8001014 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	68fa      	ldr	r2, [r7, #12]
 8002c4e:	601a      	str	r2, [r3, #0]
}
 8002c50:	bf00      	nop
 8002c52:	3710      	adds	r7, #16
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bd80      	pop	{r7, pc}

08002c58 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b083      	sub	sp, #12
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681a      	ldr	r2, [r3, #0]
 8002c64:	f241 0318 	movw	r3, #4120	; 0x1018
 8002c68:	4413      	add	r3, r2
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	687a      	ldr	r2, [r7, #4]
 8002c6e:	6811      	ldr	r1, [r2, #0]
 8002c70:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002c74:	f241 0318 	movw	r3, #4120	; 0x1018
 8002c78:	440b      	add	r3, r1
 8002c7a:	601a      	str	r2, [r3, #0]
}
 8002c7c:	bf00      	nop
 8002c7e:	370c      	adds	r7, #12
 8002c80:	46bd      	mov	sp, r7
 8002c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c86:	4770      	bx	lr

08002c88 <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8002c88:	b480      	push	{r7}
 8002c8a:	b083      	sub	sp, #12
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681a      	ldr	r2, [r3, #0]
 8002c94:	f241 0318 	movw	r3, #4120	; 0x1018
 8002c98:	4413      	add	r3, r2
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	687a      	ldr	r2, [r7, #4]
 8002c9e:	6811      	ldr	r1, [r2, #0]
 8002ca0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002ca4:	f241 0318 	movw	r3, #4120	; 0x1018
 8002ca8:	440b      	add	r3, r1
 8002caa:	601a      	str	r2, [r3, #0]
}
 8002cac:	bf00      	nop
 8002cae:	370c      	adds	r7, #12
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb6:	4770      	bx	lr

08002cb8 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8002cb8:	b480      	push	{r7}
 8002cba:	b083      	sub	sp, #12
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681a      	ldr	r2, [r3, #0]
 8002cc4:	f241 0318 	movw	r3, #4120	; 0x1018
 8002cc8:	4413      	add	r3, r2
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	687a      	ldr	r2, [r7, #4]
 8002cce:	6811      	ldr	r1, [r2, #0]
 8002cd0:	f043 0202 	orr.w	r2, r3, #2
 8002cd4:	f241 0318 	movw	r3, #4120	; 0x1018
 8002cd8:	440b      	add	r3, r1
 8002cda:	601a      	str	r2, [r3, #0]
}
 8002cdc:	bf00      	nop
 8002cde:	370c      	adds	r7, #12
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce6:	4770      	bx	lr

08002ce8 <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8002ce8:	b480      	push	{r7}
 8002cea:	b083      	sub	sp, #12
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681a      	ldr	r2, [r3, #0]
 8002cf4:	f241 0318 	movw	r3, #4120	; 0x1018
 8002cf8:	4413      	add	r3, r2
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	687a      	ldr	r2, [r7, #4]
 8002cfe:	6811      	ldr	r1, [r2, #0]
 8002d00:	f023 0202 	bic.w	r2, r3, #2
 8002d04:	f241 0318 	movw	r3, #4120	; 0x1018
 8002d08:	440b      	add	r3, r1
 8002d0a:	601a      	str	r2, [r3, #0]
}
 8002d0c:	bf00      	nop
 8002d0e:	370c      	adds	r7, #12
 8002d10:	46bd      	mov	sp, r7
 8002d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d16:	4770      	bx	lr

08002d18 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b084      	sub	sp, #16
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002d20:	2300      	movs	r3, #0
 8002d22:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681a      	ldr	r2, [r3, #0]
 8002d28:	f241 0318 	movw	r3, #4120	; 0x1018
 8002d2c:	4413      	add	r3, r2
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	687a      	ldr	r2, [r7, #4]
 8002d32:	6811      	ldr	r1, [r2, #0]
 8002d34:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002d38:	f241 0318 	movw	r3, #4120	; 0x1018
 8002d3c:	440b      	add	r3, r1
 8002d3e:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681a      	ldr	r2, [r3, #0]
 8002d44:	f241 0318 	movw	r3, #4120	; 0x1018
 8002d48:	4413      	add	r3, r2
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002d4e:	2001      	movs	r0, #1
 8002d50:	f7fe f960 	bl	8001014 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6819      	ldr	r1, [r3, #0]
 8002d58:	68fa      	ldr	r2, [r7, #12]
 8002d5a:	f241 0318 	movw	r3, #4120	; 0x1018
 8002d5e:	440b      	add	r3, r1
 8002d60:	601a      	str	r2, [r3, #0]
}
 8002d62:	bf00      	nop
 8002d64:	3710      	adds	r7, #16
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}
	...

08002d6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	b089      	sub	sp, #36	; 0x24
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
 8002d74:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002d76:	2300      	movs	r3, #0
 8002d78:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002d82:	2300      	movs	r3, #0
 8002d84:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002d86:	2300      	movs	r3, #0
 8002d88:	61fb      	str	r3, [r7, #28]
 8002d8a:	e175      	b.n	8003078 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002d8c:	2201      	movs	r2, #1
 8002d8e:	69fb      	ldr	r3, [r7, #28]
 8002d90:	fa02 f303 	lsl.w	r3, r2, r3
 8002d94:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	697a      	ldr	r2, [r7, #20]
 8002d9c:	4013      	ands	r3, r2
 8002d9e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002da0:	693a      	ldr	r2, [r7, #16]
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	429a      	cmp	r2, r3
 8002da6:	f040 8164 	bne.w	8003072 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	2b01      	cmp	r3, #1
 8002db0:	d00b      	beq.n	8002dca <HAL_GPIO_Init+0x5e>
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	2b02      	cmp	r3, #2
 8002db8:	d007      	beq.n	8002dca <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002dbe:	2b11      	cmp	r3, #17
 8002dc0:	d003      	beq.n	8002dca <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	2b12      	cmp	r3, #18
 8002dc8:	d130      	bne.n	8002e2c <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	689b      	ldr	r3, [r3, #8]
 8002dce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002dd0:	69fb      	ldr	r3, [r7, #28]
 8002dd2:	005b      	lsls	r3, r3, #1
 8002dd4:	2203      	movs	r2, #3
 8002dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dda:	43db      	mvns	r3, r3
 8002ddc:	69ba      	ldr	r2, [r7, #24]
 8002dde:	4013      	ands	r3, r2
 8002de0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	68da      	ldr	r2, [r3, #12]
 8002de6:	69fb      	ldr	r3, [r7, #28]
 8002de8:	005b      	lsls	r3, r3, #1
 8002dea:	fa02 f303 	lsl.w	r3, r2, r3
 8002dee:	69ba      	ldr	r2, [r7, #24]
 8002df0:	4313      	orrs	r3, r2
 8002df2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	69ba      	ldr	r2, [r7, #24]
 8002df8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002e00:	2201      	movs	r2, #1
 8002e02:	69fb      	ldr	r3, [r7, #28]
 8002e04:	fa02 f303 	lsl.w	r3, r2, r3
 8002e08:	43db      	mvns	r3, r3
 8002e0a:	69ba      	ldr	r2, [r7, #24]
 8002e0c:	4013      	ands	r3, r2
 8002e0e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	091b      	lsrs	r3, r3, #4
 8002e16:	f003 0201 	and.w	r2, r3, #1
 8002e1a:	69fb      	ldr	r3, [r7, #28]
 8002e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e20:	69ba      	ldr	r2, [r7, #24]
 8002e22:	4313      	orrs	r3, r2
 8002e24:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	69ba      	ldr	r2, [r7, #24]
 8002e2a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	68db      	ldr	r3, [r3, #12]
 8002e30:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002e32:	69fb      	ldr	r3, [r7, #28]
 8002e34:	005b      	lsls	r3, r3, #1
 8002e36:	2203      	movs	r2, #3
 8002e38:	fa02 f303 	lsl.w	r3, r2, r3
 8002e3c:	43db      	mvns	r3, r3
 8002e3e:	69ba      	ldr	r2, [r7, #24]
 8002e40:	4013      	ands	r3, r2
 8002e42:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	689a      	ldr	r2, [r3, #8]
 8002e48:	69fb      	ldr	r3, [r7, #28]
 8002e4a:	005b      	lsls	r3, r3, #1
 8002e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e50:	69ba      	ldr	r2, [r7, #24]
 8002e52:	4313      	orrs	r3, r2
 8002e54:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	69ba      	ldr	r2, [r7, #24]
 8002e5a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	2b02      	cmp	r3, #2
 8002e62:	d003      	beq.n	8002e6c <HAL_GPIO_Init+0x100>
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	2b12      	cmp	r3, #18
 8002e6a:	d123      	bne.n	8002eb4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002e6c:	69fb      	ldr	r3, [r7, #28]
 8002e6e:	08da      	lsrs	r2, r3, #3
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	3208      	adds	r2, #8
 8002e74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002e7a:	69fb      	ldr	r3, [r7, #28]
 8002e7c:	f003 0307 	and.w	r3, r3, #7
 8002e80:	009b      	lsls	r3, r3, #2
 8002e82:	220f      	movs	r2, #15
 8002e84:	fa02 f303 	lsl.w	r3, r2, r3
 8002e88:	43db      	mvns	r3, r3
 8002e8a:	69ba      	ldr	r2, [r7, #24]
 8002e8c:	4013      	ands	r3, r2
 8002e8e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	691a      	ldr	r2, [r3, #16]
 8002e94:	69fb      	ldr	r3, [r7, #28]
 8002e96:	f003 0307 	and.w	r3, r3, #7
 8002e9a:	009b      	lsls	r3, r3, #2
 8002e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea0:	69ba      	ldr	r2, [r7, #24]
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002ea6:	69fb      	ldr	r3, [r7, #28]
 8002ea8:	08da      	lsrs	r2, r3, #3
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	3208      	adds	r2, #8
 8002eae:	69b9      	ldr	r1, [r7, #24]
 8002eb0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002eba:	69fb      	ldr	r3, [r7, #28]
 8002ebc:	005b      	lsls	r3, r3, #1
 8002ebe:	2203      	movs	r2, #3
 8002ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec4:	43db      	mvns	r3, r3
 8002ec6:	69ba      	ldr	r2, [r7, #24]
 8002ec8:	4013      	ands	r3, r2
 8002eca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	f003 0203 	and.w	r2, r3, #3
 8002ed4:	69fb      	ldr	r3, [r7, #28]
 8002ed6:	005b      	lsls	r3, r3, #1
 8002ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8002edc:	69ba      	ldr	r2, [r7, #24]
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	69ba      	ldr	r2, [r7, #24]
 8002ee6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	f000 80be 	beq.w	8003072 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ef6:	4b65      	ldr	r3, [pc, #404]	; (800308c <HAL_GPIO_Init+0x320>)
 8002ef8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002efa:	4a64      	ldr	r2, [pc, #400]	; (800308c <HAL_GPIO_Init+0x320>)
 8002efc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f00:	6453      	str	r3, [r2, #68]	; 0x44
 8002f02:	4b62      	ldr	r3, [pc, #392]	; (800308c <HAL_GPIO_Init+0x320>)
 8002f04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f0a:	60fb      	str	r3, [r7, #12]
 8002f0c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002f0e:	4a60      	ldr	r2, [pc, #384]	; (8003090 <HAL_GPIO_Init+0x324>)
 8002f10:	69fb      	ldr	r3, [r7, #28]
 8002f12:	089b      	lsrs	r3, r3, #2
 8002f14:	3302      	adds	r3, #2
 8002f16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002f1c:	69fb      	ldr	r3, [r7, #28]
 8002f1e:	f003 0303 	and.w	r3, r3, #3
 8002f22:	009b      	lsls	r3, r3, #2
 8002f24:	220f      	movs	r2, #15
 8002f26:	fa02 f303 	lsl.w	r3, r2, r3
 8002f2a:	43db      	mvns	r3, r3
 8002f2c:	69ba      	ldr	r2, [r7, #24]
 8002f2e:	4013      	ands	r3, r2
 8002f30:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	4a57      	ldr	r2, [pc, #348]	; (8003094 <HAL_GPIO_Init+0x328>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d037      	beq.n	8002faa <HAL_GPIO_Init+0x23e>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	4a56      	ldr	r2, [pc, #344]	; (8003098 <HAL_GPIO_Init+0x32c>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d031      	beq.n	8002fa6 <HAL_GPIO_Init+0x23a>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	4a55      	ldr	r2, [pc, #340]	; (800309c <HAL_GPIO_Init+0x330>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d02b      	beq.n	8002fa2 <HAL_GPIO_Init+0x236>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	4a54      	ldr	r2, [pc, #336]	; (80030a0 <HAL_GPIO_Init+0x334>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d025      	beq.n	8002f9e <HAL_GPIO_Init+0x232>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	4a53      	ldr	r2, [pc, #332]	; (80030a4 <HAL_GPIO_Init+0x338>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d01f      	beq.n	8002f9a <HAL_GPIO_Init+0x22e>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	4a52      	ldr	r2, [pc, #328]	; (80030a8 <HAL_GPIO_Init+0x33c>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d019      	beq.n	8002f96 <HAL_GPIO_Init+0x22a>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	4a51      	ldr	r2, [pc, #324]	; (80030ac <HAL_GPIO_Init+0x340>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d013      	beq.n	8002f92 <HAL_GPIO_Init+0x226>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	4a50      	ldr	r2, [pc, #320]	; (80030b0 <HAL_GPIO_Init+0x344>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d00d      	beq.n	8002f8e <HAL_GPIO_Init+0x222>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	4a4f      	ldr	r2, [pc, #316]	; (80030b4 <HAL_GPIO_Init+0x348>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d007      	beq.n	8002f8a <HAL_GPIO_Init+0x21e>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	4a4e      	ldr	r2, [pc, #312]	; (80030b8 <HAL_GPIO_Init+0x34c>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d101      	bne.n	8002f86 <HAL_GPIO_Init+0x21a>
 8002f82:	2309      	movs	r3, #9
 8002f84:	e012      	b.n	8002fac <HAL_GPIO_Init+0x240>
 8002f86:	230a      	movs	r3, #10
 8002f88:	e010      	b.n	8002fac <HAL_GPIO_Init+0x240>
 8002f8a:	2308      	movs	r3, #8
 8002f8c:	e00e      	b.n	8002fac <HAL_GPIO_Init+0x240>
 8002f8e:	2307      	movs	r3, #7
 8002f90:	e00c      	b.n	8002fac <HAL_GPIO_Init+0x240>
 8002f92:	2306      	movs	r3, #6
 8002f94:	e00a      	b.n	8002fac <HAL_GPIO_Init+0x240>
 8002f96:	2305      	movs	r3, #5
 8002f98:	e008      	b.n	8002fac <HAL_GPIO_Init+0x240>
 8002f9a:	2304      	movs	r3, #4
 8002f9c:	e006      	b.n	8002fac <HAL_GPIO_Init+0x240>
 8002f9e:	2303      	movs	r3, #3
 8002fa0:	e004      	b.n	8002fac <HAL_GPIO_Init+0x240>
 8002fa2:	2302      	movs	r3, #2
 8002fa4:	e002      	b.n	8002fac <HAL_GPIO_Init+0x240>
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e000      	b.n	8002fac <HAL_GPIO_Init+0x240>
 8002faa:	2300      	movs	r3, #0
 8002fac:	69fa      	ldr	r2, [r7, #28]
 8002fae:	f002 0203 	and.w	r2, r2, #3
 8002fb2:	0092      	lsls	r2, r2, #2
 8002fb4:	4093      	lsls	r3, r2
 8002fb6:	69ba      	ldr	r2, [r7, #24]
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002fbc:	4934      	ldr	r1, [pc, #208]	; (8003090 <HAL_GPIO_Init+0x324>)
 8002fbe:	69fb      	ldr	r3, [r7, #28]
 8002fc0:	089b      	lsrs	r3, r3, #2
 8002fc2:	3302      	adds	r3, #2
 8002fc4:	69ba      	ldr	r2, [r7, #24]
 8002fc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002fca:	4b3c      	ldr	r3, [pc, #240]	; (80030bc <HAL_GPIO_Init+0x350>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fd0:	693b      	ldr	r3, [r7, #16]
 8002fd2:	43db      	mvns	r3, r3
 8002fd4:	69ba      	ldr	r2, [r7, #24]
 8002fd6:	4013      	ands	r3, r2
 8002fd8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d003      	beq.n	8002fee <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002fe6:	69ba      	ldr	r2, [r7, #24]
 8002fe8:	693b      	ldr	r3, [r7, #16]
 8002fea:	4313      	orrs	r3, r2
 8002fec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002fee:	4a33      	ldr	r2, [pc, #204]	; (80030bc <HAL_GPIO_Init+0x350>)
 8002ff0:	69bb      	ldr	r3, [r7, #24]
 8002ff2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002ff4:	4b31      	ldr	r3, [pc, #196]	; (80030bc <HAL_GPIO_Init+0x350>)
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	43db      	mvns	r3, r3
 8002ffe:	69ba      	ldr	r2, [r7, #24]
 8003000:	4013      	ands	r3, r2
 8003002:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800300c:	2b00      	cmp	r3, #0
 800300e:	d003      	beq.n	8003018 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003010:	69ba      	ldr	r2, [r7, #24]
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	4313      	orrs	r3, r2
 8003016:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003018:	4a28      	ldr	r2, [pc, #160]	; (80030bc <HAL_GPIO_Init+0x350>)
 800301a:	69bb      	ldr	r3, [r7, #24]
 800301c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800301e:	4b27      	ldr	r3, [pc, #156]	; (80030bc <HAL_GPIO_Init+0x350>)
 8003020:	689b      	ldr	r3, [r3, #8]
 8003022:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003024:	693b      	ldr	r3, [r7, #16]
 8003026:	43db      	mvns	r3, r3
 8003028:	69ba      	ldr	r2, [r7, #24]
 800302a:	4013      	ands	r3, r2
 800302c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003036:	2b00      	cmp	r3, #0
 8003038:	d003      	beq.n	8003042 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800303a:	69ba      	ldr	r2, [r7, #24]
 800303c:	693b      	ldr	r3, [r7, #16]
 800303e:	4313      	orrs	r3, r2
 8003040:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003042:	4a1e      	ldr	r2, [pc, #120]	; (80030bc <HAL_GPIO_Init+0x350>)
 8003044:	69bb      	ldr	r3, [r7, #24]
 8003046:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003048:	4b1c      	ldr	r3, [pc, #112]	; (80030bc <HAL_GPIO_Init+0x350>)
 800304a:	68db      	ldr	r3, [r3, #12]
 800304c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800304e:	693b      	ldr	r3, [r7, #16]
 8003050:	43db      	mvns	r3, r3
 8003052:	69ba      	ldr	r2, [r7, #24]
 8003054:	4013      	ands	r3, r2
 8003056:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003060:	2b00      	cmp	r3, #0
 8003062:	d003      	beq.n	800306c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003064:	69ba      	ldr	r2, [r7, #24]
 8003066:	693b      	ldr	r3, [r7, #16]
 8003068:	4313      	orrs	r3, r2
 800306a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800306c:	4a13      	ldr	r2, [pc, #76]	; (80030bc <HAL_GPIO_Init+0x350>)
 800306e:	69bb      	ldr	r3, [r7, #24]
 8003070:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003072:	69fb      	ldr	r3, [r7, #28]
 8003074:	3301      	adds	r3, #1
 8003076:	61fb      	str	r3, [r7, #28]
 8003078:	69fb      	ldr	r3, [r7, #28]
 800307a:	2b0f      	cmp	r3, #15
 800307c:	f67f ae86 	bls.w	8002d8c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003080:	bf00      	nop
 8003082:	3724      	adds	r7, #36	; 0x24
 8003084:	46bd      	mov	sp, r7
 8003086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308a:	4770      	bx	lr
 800308c:	40023800 	.word	0x40023800
 8003090:	40013800 	.word	0x40013800
 8003094:	40020000 	.word	0x40020000
 8003098:	40020400 	.word	0x40020400
 800309c:	40020800 	.word	0x40020800
 80030a0:	40020c00 	.word	0x40020c00
 80030a4:	40021000 	.word	0x40021000
 80030a8:	40021400 	.word	0x40021400
 80030ac:	40021800 	.word	0x40021800
 80030b0:	40021c00 	.word	0x40021c00
 80030b4:	40022000 	.word	0x40022000
 80030b8:	40022400 	.word	0x40022400
 80030bc:	40013c00 	.word	0x40013c00

080030c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80030c0:	b480      	push	{r7}
 80030c2:	b083      	sub	sp, #12
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
 80030c8:	460b      	mov	r3, r1
 80030ca:	807b      	strh	r3, [r7, #2]
 80030cc:	4613      	mov	r3, r2
 80030ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80030d0:	787b      	ldrb	r3, [r7, #1]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d003      	beq.n	80030de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80030d6:	887a      	ldrh	r2, [r7, #2]
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80030dc:	e003      	b.n	80030e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80030de:	887b      	ldrh	r3, [r7, #2]
 80030e0:	041a      	lsls	r2, r3, #16
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	619a      	str	r2, [r3, #24]
}
 80030e6:	bf00      	nop
 80030e8:	370c      	adds	r7, #12
 80030ea:	46bd      	mov	sp, r7
 80030ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f0:	4770      	bx	lr

080030f2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80030f2:	b480      	push	{r7}
 80030f4:	b085      	sub	sp, #20
 80030f6:	af00      	add	r7, sp, #0
 80030f8:	6078      	str	r0, [r7, #4]
 80030fa:	460b      	mov	r3, r1
 80030fc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	695b      	ldr	r3, [r3, #20]
 8003102:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003104:	887a      	ldrh	r2, [r7, #2]
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	4013      	ands	r3, r2
 800310a:	041a      	lsls	r2, r3, #16
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	43d9      	mvns	r1, r3
 8003110:	887b      	ldrh	r3, [r7, #2]
 8003112:	400b      	ands	r3, r1
 8003114:	431a      	orrs	r2, r3
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	619a      	str	r2, [r3, #24]
}
 800311a:	bf00      	nop
 800311c:	3714      	adds	r7, #20
 800311e:	46bd      	mov	sp, r7
 8003120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003124:	4770      	bx	lr
	...

08003128 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b082      	sub	sp, #8
 800312c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800312e:	2300      	movs	r3, #0
 8003130:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003132:	4b23      	ldr	r3, [pc, #140]	; (80031c0 <HAL_PWREx_EnableOverDrive+0x98>)
 8003134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003136:	4a22      	ldr	r2, [pc, #136]	; (80031c0 <HAL_PWREx_EnableOverDrive+0x98>)
 8003138:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800313c:	6413      	str	r3, [r2, #64]	; 0x40
 800313e:	4b20      	ldr	r3, [pc, #128]	; (80031c0 <HAL_PWREx_EnableOverDrive+0x98>)
 8003140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003142:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003146:	603b      	str	r3, [r7, #0]
 8003148:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800314a:	4b1e      	ldr	r3, [pc, #120]	; (80031c4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4a1d      	ldr	r2, [pc, #116]	; (80031c4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003150:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003154:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003156:	f7fd ff51 	bl	8000ffc <HAL_GetTick>
 800315a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800315c:	e009      	b.n	8003172 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800315e:	f7fd ff4d 	bl	8000ffc <HAL_GetTick>
 8003162:	4602      	mov	r2, r0
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	1ad3      	subs	r3, r2, r3
 8003168:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800316c:	d901      	bls.n	8003172 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800316e:	2303      	movs	r3, #3
 8003170:	e022      	b.n	80031b8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003172:	4b14      	ldr	r3, [pc, #80]	; (80031c4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800317a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800317e:	d1ee      	bne.n	800315e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003180:	4b10      	ldr	r3, [pc, #64]	; (80031c4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a0f      	ldr	r2, [pc, #60]	; (80031c4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003186:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800318a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800318c:	f7fd ff36 	bl	8000ffc <HAL_GetTick>
 8003190:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003192:	e009      	b.n	80031a8 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003194:	f7fd ff32 	bl	8000ffc <HAL_GetTick>
 8003198:	4602      	mov	r2, r0
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	1ad3      	subs	r3, r2, r3
 800319e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80031a2:	d901      	bls.n	80031a8 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80031a4:	2303      	movs	r3, #3
 80031a6:	e007      	b.n	80031b8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80031a8:	4b06      	ldr	r3, [pc, #24]	; (80031c4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031b0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80031b4:	d1ee      	bne.n	8003194 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80031b6:	2300      	movs	r3, #0
}
 80031b8:	4618      	mov	r0, r3
 80031ba:	3708      	adds	r7, #8
 80031bc:	46bd      	mov	sp, r7
 80031be:	bd80      	pop	{r7, pc}
 80031c0:	40023800 	.word	0x40023800
 80031c4:	40007000 	.word	0x40007000

080031c8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b086      	sub	sp, #24
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80031d0:	2300      	movs	r3, #0
 80031d2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d101      	bne.n	80031de <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80031da:	2301      	movs	r3, #1
 80031dc:	e29b      	b.n	8003716 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f003 0301 	and.w	r3, r3, #1
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	f000 8087 	beq.w	80032fa <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80031ec:	4b96      	ldr	r3, [pc, #600]	; (8003448 <HAL_RCC_OscConfig+0x280>)
 80031ee:	689b      	ldr	r3, [r3, #8]
 80031f0:	f003 030c 	and.w	r3, r3, #12
 80031f4:	2b04      	cmp	r3, #4
 80031f6:	d00c      	beq.n	8003212 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031f8:	4b93      	ldr	r3, [pc, #588]	; (8003448 <HAL_RCC_OscConfig+0x280>)
 80031fa:	689b      	ldr	r3, [r3, #8]
 80031fc:	f003 030c 	and.w	r3, r3, #12
 8003200:	2b08      	cmp	r3, #8
 8003202:	d112      	bne.n	800322a <HAL_RCC_OscConfig+0x62>
 8003204:	4b90      	ldr	r3, [pc, #576]	; (8003448 <HAL_RCC_OscConfig+0x280>)
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800320c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003210:	d10b      	bne.n	800322a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003212:	4b8d      	ldr	r3, [pc, #564]	; (8003448 <HAL_RCC_OscConfig+0x280>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800321a:	2b00      	cmp	r3, #0
 800321c:	d06c      	beq.n	80032f8 <HAL_RCC_OscConfig+0x130>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d168      	bne.n	80032f8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003226:	2301      	movs	r3, #1
 8003228:	e275      	b.n	8003716 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003232:	d106      	bne.n	8003242 <HAL_RCC_OscConfig+0x7a>
 8003234:	4b84      	ldr	r3, [pc, #528]	; (8003448 <HAL_RCC_OscConfig+0x280>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a83      	ldr	r2, [pc, #524]	; (8003448 <HAL_RCC_OscConfig+0x280>)
 800323a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800323e:	6013      	str	r3, [r2, #0]
 8003240:	e02e      	b.n	80032a0 <HAL_RCC_OscConfig+0xd8>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d10c      	bne.n	8003264 <HAL_RCC_OscConfig+0x9c>
 800324a:	4b7f      	ldr	r3, [pc, #508]	; (8003448 <HAL_RCC_OscConfig+0x280>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4a7e      	ldr	r2, [pc, #504]	; (8003448 <HAL_RCC_OscConfig+0x280>)
 8003250:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003254:	6013      	str	r3, [r2, #0]
 8003256:	4b7c      	ldr	r3, [pc, #496]	; (8003448 <HAL_RCC_OscConfig+0x280>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4a7b      	ldr	r2, [pc, #492]	; (8003448 <HAL_RCC_OscConfig+0x280>)
 800325c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003260:	6013      	str	r3, [r2, #0]
 8003262:	e01d      	b.n	80032a0 <HAL_RCC_OscConfig+0xd8>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800326c:	d10c      	bne.n	8003288 <HAL_RCC_OscConfig+0xc0>
 800326e:	4b76      	ldr	r3, [pc, #472]	; (8003448 <HAL_RCC_OscConfig+0x280>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4a75      	ldr	r2, [pc, #468]	; (8003448 <HAL_RCC_OscConfig+0x280>)
 8003274:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003278:	6013      	str	r3, [r2, #0]
 800327a:	4b73      	ldr	r3, [pc, #460]	; (8003448 <HAL_RCC_OscConfig+0x280>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a72      	ldr	r2, [pc, #456]	; (8003448 <HAL_RCC_OscConfig+0x280>)
 8003280:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003284:	6013      	str	r3, [r2, #0]
 8003286:	e00b      	b.n	80032a0 <HAL_RCC_OscConfig+0xd8>
 8003288:	4b6f      	ldr	r3, [pc, #444]	; (8003448 <HAL_RCC_OscConfig+0x280>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a6e      	ldr	r2, [pc, #440]	; (8003448 <HAL_RCC_OscConfig+0x280>)
 800328e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003292:	6013      	str	r3, [r2, #0]
 8003294:	4b6c      	ldr	r3, [pc, #432]	; (8003448 <HAL_RCC_OscConfig+0x280>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a6b      	ldr	r2, [pc, #428]	; (8003448 <HAL_RCC_OscConfig+0x280>)
 800329a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800329e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d013      	beq.n	80032d0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032a8:	f7fd fea8 	bl	8000ffc <HAL_GetTick>
 80032ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032ae:	e008      	b.n	80032c2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032b0:	f7fd fea4 	bl	8000ffc <HAL_GetTick>
 80032b4:	4602      	mov	r2, r0
 80032b6:	693b      	ldr	r3, [r7, #16]
 80032b8:	1ad3      	subs	r3, r2, r3
 80032ba:	2b64      	cmp	r3, #100	; 0x64
 80032bc:	d901      	bls.n	80032c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80032be:	2303      	movs	r3, #3
 80032c0:	e229      	b.n	8003716 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032c2:	4b61      	ldr	r3, [pc, #388]	; (8003448 <HAL_RCC_OscConfig+0x280>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d0f0      	beq.n	80032b0 <HAL_RCC_OscConfig+0xe8>
 80032ce:	e014      	b.n	80032fa <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032d0:	f7fd fe94 	bl	8000ffc <HAL_GetTick>
 80032d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032d6:	e008      	b.n	80032ea <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032d8:	f7fd fe90 	bl	8000ffc <HAL_GetTick>
 80032dc:	4602      	mov	r2, r0
 80032de:	693b      	ldr	r3, [r7, #16]
 80032e0:	1ad3      	subs	r3, r2, r3
 80032e2:	2b64      	cmp	r3, #100	; 0x64
 80032e4:	d901      	bls.n	80032ea <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80032e6:	2303      	movs	r3, #3
 80032e8:	e215      	b.n	8003716 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032ea:	4b57      	ldr	r3, [pc, #348]	; (8003448 <HAL_RCC_OscConfig+0x280>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d1f0      	bne.n	80032d8 <HAL_RCC_OscConfig+0x110>
 80032f6:	e000      	b.n	80032fa <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f003 0302 	and.w	r3, r3, #2
 8003302:	2b00      	cmp	r3, #0
 8003304:	d069      	beq.n	80033da <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003306:	4b50      	ldr	r3, [pc, #320]	; (8003448 <HAL_RCC_OscConfig+0x280>)
 8003308:	689b      	ldr	r3, [r3, #8]
 800330a:	f003 030c 	and.w	r3, r3, #12
 800330e:	2b00      	cmp	r3, #0
 8003310:	d00b      	beq.n	800332a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003312:	4b4d      	ldr	r3, [pc, #308]	; (8003448 <HAL_RCC_OscConfig+0x280>)
 8003314:	689b      	ldr	r3, [r3, #8]
 8003316:	f003 030c 	and.w	r3, r3, #12
 800331a:	2b08      	cmp	r3, #8
 800331c:	d11c      	bne.n	8003358 <HAL_RCC_OscConfig+0x190>
 800331e:	4b4a      	ldr	r3, [pc, #296]	; (8003448 <HAL_RCC_OscConfig+0x280>)
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003326:	2b00      	cmp	r3, #0
 8003328:	d116      	bne.n	8003358 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800332a:	4b47      	ldr	r3, [pc, #284]	; (8003448 <HAL_RCC_OscConfig+0x280>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f003 0302 	and.w	r3, r3, #2
 8003332:	2b00      	cmp	r3, #0
 8003334:	d005      	beq.n	8003342 <HAL_RCC_OscConfig+0x17a>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	68db      	ldr	r3, [r3, #12]
 800333a:	2b01      	cmp	r3, #1
 800333c:	d001      	beq.n	8003342 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800333e:	2301      	movs	r3, #1
 8003340:	e1e9      	b.n	8003716 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003342:	4b41      	ldr	r3, [pc, #260]	; (8003448 <HAL_RCC_OscConfig+0x280>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	691b      	ldr	r3, [r3, #16]
 800334e:	00db      	lsls	r3, r3, #3
 8003350:	493d      	ldr	r1, [pc, #244]	; (8003448 <HAL_RCC_OscConfig+0x280>)
 8003352:	4313      	orrs	r3, r2
 8003354:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003356:	e040      	b.n	80033da <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	68db      	ldr	r3, [r3, #12]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d023      	beq.n	80033a8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003360:	4b39      	ldr	r3, [pc, #228]	; (8003448 <HAL_RCC_OscConfig+0x280>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a38      	ldr	r2, [pc, #224]	; (8003448 <HAL_RCC_OscConfig+0x280>)
 8003366:	f043 0301 	orr.w	r3, r3, #1
 800336a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800336c:	f7fd fe46 	bl	8000ffc <HAL_GetTick>
 8003370:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003372:	e008      	b.n	8003386 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003374:	f7fd fe42 	bl	8000ffc <HAL_GetTick>
 8003378:	4602      	mov	r2, r0
 800337a:	693b      	ldr	r3, [r7, #16]
 800337c:	1ad3      	subs	r3, r2, r3
 800337e:	2b02      	cmp	r3, #2
 8003380:	d901      	bls.n	8003386 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003382:	2303      	movs	r3, #3
 8003384:	e1c7      	b.n	8003716 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003386:	4b30      	ldr	r3, [pc, #192]	; (8003448 <HAL_RCC_OscConfig+0x280>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f003 0302 	and.w	r3, r3, #2
 800338e:	2b00      	cmp	r3, #0
 8003390:	d0f0      	beq.n	8003374 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003392:	4b2d      	ldr	r3, [pc, #180]	; (8003448 <HAL_RCC_OscConfig+0x280>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	691b      	ldr	r3, [r3, #16]
 800339e:	00db      	lsls	r3, r3, #3
 80033a0:	4929      	ldr	r1, [pc, #164]	; (8003448 <HAL_RCC_OscConfig+0x280>)
 80033a2:	4313      	orrs	r3, r2
 80033a4:	600b      	str	r3, [r1, #0]
 80033a6:	e018      	b.n	80033da <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033a8:	4b27      	ldr	r3, [pc, #156]	; (8003448 <HAL_RCC_OscConfig+0x280>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a26      	ldr	r2, [pc, #152]	; (8003448 <HAL_RCC_OscConfig+0x280>)
 80033ae:	f023 0301 	bic.w	r3, r3, #1
 80033b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033b4:	f7fd fe22 	bl	8000ffc <HAL_GetTick>
 80033b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033ba:	e008      	b.n	80033ce <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033bc:	f7fd fe1e 	bl	8000ffc <HAL_GetTick>
 80033c0:	4602      	mov	r2, r0
 80033c2:	693b      	ldr	r3, [r7, #16]
 80033c4:	1ad3      	subs	r3, r2, r3
 80033c6:	2b02      	cmp	r3, #2
 80033c8:	d901      	bls.n	80033ce <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80033ca:	2303      	movs	r3, #3
 80033cc:	e1a3      	b.n	8003716 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033ce:	4b1e      	ldr	r3, [pc, #120]	; (8003448 <HAL_RCC_OscConfig+0x280>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f003 0302 	and.w	r3, r3, #2
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d1f0      	bne.n	80033bc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f003 0308 	and.w	r3, r3, #8
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d038      	beq.n	8003458 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	695b      	ldr	r3, [r3, #20]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d019      	beq.n	8003422 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033ee:	4b16      	ldr	r3, [pc, #88]	; (8003448 <HAL_RCC_OscConfig+0x280>)
 80033f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033f2:	4a15      	ldr	r2, [pc, #84]	; (8003448 <HAL_RCC_OscConfig+0x280>)
 80033f4:	f043 0301 	orr.w	r3, r3, #1
 80033f8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033fa:	f7fd fdff 	bl	8000ffc <HAL_GetTick>
 80033fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003400:	e008      	b.n	8003414 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003402:	f7fd fdfb 	bl	8000ffc <HAL_GetTick>
 8003406:	4602      	mov	r2, r0
 8003408:	693b      	ldr	r3, [r7, #16]
 800340a:	1ad3      	subs	r3, r2, r3
 800340c:	2b02      	cmp	r3, #2
 800340e:	d901      	bls.n	8003414 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003410:	2303      	movs	r3, #3
 8003412:	e180      	b.n	8003716 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003414:	4b0c      	ldr	r3, [pc, #48]	; (8003448 <HAL_RCC_OscConfig+0x280>)
 8003416:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003418:	f003 0302 	and.w	r3, r3, #2
 800341c:	2b00      	cmp	r3, #0
 800341e:	d0f0      	beq.n	8003402 <HAL_RCC_OscConfig+0x23a>
 8003420:	e01a      	b.n	8003458 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003422:	4b09      	ldr	r3, [pc, #36]	; (8003448 <HAL_RCC_OscConfig+0x280>)
 8003424:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003426:	4a08      	ldr	r2, [pc, #32]	; (8003448 <HAL_RCC_OscConfig+0x280>)
 8003428:	f023 0301 	bic.w	r3, r3, #1
 800342c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800342e:	f7fd fde5 	bl	8000ffc <HAL_GetTick>
 8003432:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003434:	e00a      	b.n	800344c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003436:	f7fd fde1 	bl	8000ffc <HAL_GetTick>
 800343a:	4602      	mov	r2, r0
 800343c:	693b      	ldr	r3, [r7, #16]
 800343e:	1ad3      	subs	r3, r2, r3
 8003440:	2b02      	cmp	r3, #2
 8003442:	d903      	bls.n	800344c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003444:	2303      	movs	r3, #3
 8003446:	e166      	b.n	8003716 <HAL_RCC_OscConfig+0x54e>
 8003448:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800344c:	4b92      	ldr	r3, [pc, #584]	; (8003698 <HAL_RCC_OscConfig+0x4d0>)
 800344e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003450:	f003 0302 	and.w	r3, r3, #2
 8003454:	2b00      	cmp	r3, #0
 8003456:	d1ee      	bne.n	8003436 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f003 0304 	and.w	r3, r3, #4
 8003460:	2b00      	cmp	r3, #0
 8003462:	f000 80a4 	beq.w	80035ae <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003466:	4b8c      	ldr	r3, [pc, #560]	; (8003698 <HAL_RCC_OscConfig+0x4d0>)
 8003468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800346a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800346e:	2b00      	cmp	r3, #0
 8003470:	d10d      	bne.n	800348e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003472:	4b89      	ldr	r3, [pc, #548]	; (8003698 <HAL_RCC_OscConfig+0x4d0>)
 8003474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003476:	4a88      	ldr	r2, [pc, #544]	; (8003698 <HAL_RCC_OscConfig+0x4d0>)
 8003478:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800347c:	6413      	str	r3, [r2, #64]	; 0x40
 800347e:	4b86      	ldr	r3, [pc, #536]	; (8003698 <HAL_RCC_OscConfig+0x4d0>)
 8003480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003482:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003486:	60bb      	str	r3, [r7, #8]
 8003488:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800348a:	2301      	movs	r3, #1
 800348c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800348e:	4b83      	ldr	r3, [pc, #524]	; (800369c <HAL_RCC_OscConfig+0x4d4>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003496:	2b00      	cmp	r3, #0
 8003498:	d118      	bne.n	80034cc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800349a:	4b80      	ldr	r3, [pc, #512]	; (800369c <HAL_RCC_OscConfig+0x4d4>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a7f      	ldr	r2, [pc, #508]	; (800369c <HAL_RCC_OscConfig+0x4d4>)
 80034a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034a6:	f7fd fda9 	bl	8000ffc <HAL_GetTick>
 80034aa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80034ac:	e008      	b.n	80034c0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034ae:	f7fd fda5 	bl	8000ffc <HAL_GetTick>
 80034b2:	4602      	mov	r2, r0
 80034b4:	693b      	ldr	r3, [r7, #16]
 80034b6:	1ad3      	subs	r3, r2, r3
 80034b8:	2b64      	cmp	r3, #100	; 0x64
 80034ba:	d901      	bls.n	80034c0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80034bc:	2303      	movs	r3, #3
 80034be:	e12a      	b.n	8003716 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80034c0:	4b76      	ldr	r3, [pc, #472]	; (800369c <HAL_RCC_OscConfig+0x4d4>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d0f0      	beq.n	80034ae <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	689b      	ldr	r3, [r3, #8]
 80034d0:	2b01      	cmp	r3, #1
 80034d2:	d106      	bne.n	80034e2 <HAL_RCC_OscConfig+0x31a>
 80034d4:	4b70      	ldr	r3, [pc, #448]	; (8003698 <HAL_RCC_OscConfig+0x4d0>)
 80034d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034d8:	4a6f      	ldr	r2, [pc, #444]	; (8003698 <HAL_RCC_OscConfig+0x4d0>)
 80034da:	f043 0301 	orr.w	r3, r3, #1
 80034de:	6713      	str	r3, [r2, #112]	; 0x70
 80034e0:	e02d      	b.n	800353e <HAL_RCC_OscConfig+0x376>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	689b      	ldr	r3, [r3, #8]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d10c      	bne.n	8003504 <HAL_RCC_OscConfig+0x33c>
 80034ea:	4b6b      	ldr	r3, [pc, #428]	; (8003698 <HAL_RCC_OscConfig+0x4d0>)
 80034ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034ee:	4a6a      	ldr	r2, [pc, #424]	; (8003698 <HAL_RCC_OscConfig+0x4d0>)
 80034f0:	f023 0301 	bic.w	r3, r3, #1
 80034f4:	6713      	str	r3, [r2, #112]	; 0x70
 80034f6:	4b68      	ldr	r3, [pc, #416]	; (8003698 <HAL_RCC_OscConfig+0x4d0>)
 80034f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034fa:	4a67      	ldr	r2, [pc, #412]	; (8003698 <HAL_RCC_OscConfig+0x4d0>)
 80034fc:	f023 0304 	bic.w	r3, r3, #4
 8003500:	6713      	str	r3, [r2, #112]	; 0x70
 8003502:	e01c      	b.n	800353e <HAL_RCC_OscConfig+0x376>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	689b      	ldr	r3, [r3, #8]
 8003508:	2b05      	cmp	r3, #5
 800350a:	d10c      	bne.n	8003526 <HAL_RCC_OscConfig+0x35e>
 800350c:	4b62      	ldr	r3, [pc, #392]	; (8003698 <HAL_RCC_OscConfig+0x4d0>)
 800350e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003510:	4a61      	ldr	r2, [pc, #388]	; (8003698 <HAL_RCC_OscConfig+0x4d0>)
 8003512:	f043 0304 	orr.w	r3, r3, #4
 8003516:	6713      	str	r3, [r2, #112]	; 0x70
 8003518:	4b5f      	ldr	r3, [pc, #380]	; (8003698 <HAL_RCC_OscConfig+0x4d0>)
 800351a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800351c:	4a5e      	ldr	r2, [pc, #376]	; (8003698 <HAL_RCC_OscConfig+0x4d0>)
 800351e:	f043 0301 	orr.w	r3, r3, #1
 8003522:	6713      	str	r3, [r2, #112]	; 0x70
 8003524:	e00b      	b.n	800353e <HAL_RCC_OscConfig+0x376>
 8003526:	4b5c      	ldr	r3, [pc, #368]	; (8003698 <HAL_RCC_OscConfig+0x4d0>)
 8003528:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800352a:	4a5b      	ldr	r2, [pc, #364]	; (8003698 <HAL_RCC_OscConfig+0x4d0>)
 800352c:	f023 0301 	bic.w	r3, r3, #1
 8003530:	6713      	str	r3, [r2, #112]	; 0x70
 8003532:	4b59      	ldr	r3, [pc, #356]	; (8003698 <HAL_RCC_OscConfig+0x4d0>)
 8003534:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003536:	4a58      	ldr	r2, [pc, #352]	; (8003698 <HAL_RCC_OscConfig+0x4d0>)
 8003538:	f023 0304 	bic.w	r3, r3, #4
 800353c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	689b      	ldr	r3, [r3, #8]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d015      	beq.n	8003572 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003546:	f7fd fd59 	bl	8000ffc <HAL_GetTick>
 800354a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800354c:	e00a      	b.n	8003564 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800354e:	f7fd fd55 	bl	8000ffc <HAL_GetTick>
 8003552:	4602      	mov	r2, r0
 8003554:	693b      	ldr	r3, [r7, #16]
 8003556:	1ad3      	subs	r3, r2, r3
 8003558:	f241 3288 	movw	r2, #5000	; 0x1388
 800355c:	4293      	cmp	r3, r2
 800355e:	d901      	bls.n	8003564 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003560:	2303      	movs	r3, #3
 8003562:	e0d8      	b.n	8003716 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003564:	4b4c      	ldr	r3, [pc, #304]	; (8003698 <HAL_RCC_OscConfig+0x4d0>)
 8003566:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003568:	f003 0302 	and.w	r3, r3, #2
 800356c:	2b00      	cmp	r3, #0
 800356e:	d0ee      	beq.n	800354e <HAL_RCC_OscConfig+0x386>
 8003570:	e014      	b.n	800359c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003572:	f7fd fd43 	bl	8000ffc <HAL_GetTick>
 8003576:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003578:	e00a      	b.n	8003590 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800357a:	f7fd fd3f 	bl	8000ffc <HAL_GetTick>
 800357e:	4602      	mov	r2, r0
 8003580:	693b      	ldr	r3, [r7, #16]
 8003582:	1ad3      	subs	r3, r2, r3
 8003584:	f241 3288 	movw	r2, #5000	; 0x1388
 8003588:	4293      	cmp	r3, r2
 800358a:	d901      	bls.n	8003590 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800358c:	2303      	movs	r3, #3
 800358e:	e0c2      	b.n	8003716 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003590:	4b41      	ldr	r3, [pc, #260]	; (8003698 <HAL_RCC_OscConfig+0x4d0>)
 8003592:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003594:	f003 0302 	and.w	r3, r3, #2
 8003598:	2b00      	cmp	r3, #0
 800359a:	d1ee      	bne.n	800357a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800359c:	7dfb      	ldrb	r3, [r7, #23]
 800359e:	2b01      	cmp	r3, #1
 80035a0:	d105      	bne.n	80035ae <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035a2:	4b3d      	ldr	r3, [pc, #244]	; (8003698 <HAL_RCC_OscConfig+0x4d0>)
 80035a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a6:	4a3c      	ldr	r2, [pc, #240]	; (8003698 <HAL_RCC_OscConfig+0x4d0>)
 80035a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035ac:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	699b      	ldr	r3, [r3, #24]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	f000 80ae 	beq.w	8003714 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80035b8:	4b37      	ldr	r3, [pc, #220]	; (8003698 <HAL_RCC_OscConfig+0x4d0>)
 80035ba:	689b      	ldr	r3, [r3, #8]
 80035bc:	f003 030c 	and.w	r3, r3, #12
 80035c0:	2b08      	cmp	r3, #8
 80035c2:	d06d      	beq.n	80036a0 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	699b      	ldr	r3, [r3, #24]
 80035c8:	2b02      	cmp	r3, #2
 80035ca:	d14b      	bne.n	8003664 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035cc:	4b32      	ldr	r3, [pc, #200]	; (8003698 <HAL_RCC_OscConfig+0x4d0>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a31      	ldr	r2, [pc, #196]	; (8003698 <HAL_RCC_OscConfig+0x4d0>)
 80035d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80035d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035d8:	f7fd fd10 	bl	8000ffc <HAL_GetTick>
 80035dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035de:	e008      	b.n	80035f2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035e0:	f7fd fd0c 	bl	8000ffc <HAL_GetTick>
 80035e4:	4602      	mov	r2, r0
 80035e6:	693b      	ldr	r3, [r7, #16]
 80035e8:	1ad3      	subs	r3, r2, r3
 80035ea:	2b02      	cmp	r3, #2
 80035ec:	d901      	bls.n	80035f2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80035ee:	2303      	movs	r3, #3
 80035f0:	e091      	b.n	8003716 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035f2:	4b29      	ldr	r3, [pc, #164]	; (8003698 <HAL_RCC_OscConfig+0x4d0>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d1f0      	bne.n	80035e0 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	69da      	ldr	r2, [r3, #28]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6a1b      	ldr	r3, [r3, #32]
 8003606:	431a      	orrs	r2, r3
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800360c:	019b      	lsls	r3, r3, #6
 800360e:	431a      	orrs	r2, r3
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003614:	085b      	lsrs	r3, r3, #1
 8003616:	3b01      	subs	r3, #1
 8003618:	041b      	lsls	r3, r3, #16
 800361a:	431a      	orrs	r2, r3
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003620:	061b      	lsls	r3, r3, #24
 8003622:	431a      	orrs	r2, r3
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003628:	071b      	lsls	r3, r3, #28
 800362a:	491b      	ldr	r1, [pc, #108]	; (8003698 <HAL_RCC_OscConfig+0x4d0>)
 800362c:	4313      	orrs	r3, r2
 800362e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003630:	4b19      	ldr	r3, [pc, #100]	; (8003698 <HAL_RCC_OscConfig+0x4d0>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a18      	ldr	r2, [pc, #96]	; (8003698 <HAL_RCC_OscConfig+0x4d0>)
 8003636:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800363a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800363c:	f7fd fcde 	bl	8000ffc <HAL_GetTick>
 8003640:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003642:	e008      	b.n	8003656 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003644:	f7fd fcda 	bl	8000ffc <HAL_GetTick>
 8003648:	4602      	mov	r2, r0
 800364a:	693b      	ldr	r3, [r7, #16]
 800364c:	1ad3      	subs	r3, r2, r3
 800364e:	2b02      	cmp	r3, #2
 8003650:	d901      	bls.n	8003656 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003652:	2303      	movs	r3, #3
 8003654:	e05f      	b.n	8003716 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003656:	4b10      	ldr	r3, [pc, #64]	; (8003698 <HAL_RCC_OscConfig+0x4d0>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800365e:	2b00      	cmp	r3, #0
 8003660:	d0f0      	beq.n	8003644 <HAL_RCC_OscConfig+0x47c>
 8003662:	e057      	b.n	8003714 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003664:	4b0c      	ldr	r3, [pc, #48]	; (8003698 <HAL_RCC_OscConfig+0x4d0>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a0b      	ldr	r2, [pc, #44]	; (8003698 <HAL_RCC_OscConfig+0x4d0>)
 800366a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800366e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003670:	f7fd fcc4 	bl	8000ffc <HAL_GetTick>
 8003674:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003676:	e008      	b.n	800368a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003678:	f7fd fcc0 	bl	8000ffc <HAL_GetTick>
 800367c:	4602      	mov	r2, r0
 800367e:	693b      	ldr	r3, [r7, #16]
 8003680:	1ad3      	subs	r3, r2, r3
 8003682:	2b02      	cmp	r3, #2
 8003684:	d901      	bls.n	800368a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003686:	2303      	movs	r3, #3
 8003688:	e045      	b.n	8003716 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800368a:	4b03      	ldr	r3, [pc, #12]	; (8003698 <HAL_RCC_OscConfig+0x4d0>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003692:	2b00      	cmp	r3, #0
 8003694:	d1f0      	bne.n	8003678 <HAL_RCC_OscConfig+0x4b0>
 8003696:	e03d      	b.n	8003714 <HAL_RCC_OscConfig+0x54c>
 8003698:	40023800 	.word	0x40023800
 800369c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80036a0:	4b1f      	ldr	r3, [pc, #124]	; (8003720 <HAL_RCC_OscConfig+0x558>)
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	699b      	ldr	r3, [r3, #24]
 80036aa:	2b01      	cmp	r3, #1
 80036ac:	d030      	beq.n	8003710 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80036b8:	429a      	cmp	r2, r3
 80036ba:	d129      	bne.n	8003710 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036c6:	429a      	cmp	r2, r3
 80036c8:	d122      	bne.n	8003710 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80036ca:	68fa      	ldr	r2, [r7, #12]
 80036cc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80036d0:	4013      	ands	r3, r2
 80036d2:	687a      	ldr	r2, [r7, #4]
 80036d4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80036d6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80036d8:	4293      	cmp	r3, r2
 80036da:	d119      	bne.n	8003710 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036e6:	085b      	lsrs	r3, r3, #1
 80036e8:	3b01      	subs	r3, #1
 80036ea:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80036ec:	429a      	cmp	r2, r3
 80036ee:	d10f      	bne.n	8003710 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036fa:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80036fc:	429a      	cmp	r2, r3
 80036fe:	d107      	bne.n	8003710 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800370a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800370c:	429a      	cmp	r2, r3
 800370e:	d001      	beq.n	8003714 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003710:	2301      	movs	r3, #1
 8003712:	e000      	b.n	8003716 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003714:	2300      	movs	r3, #0
}
 8003716:	4618      	mov	r0, r3
 8003718:	3718      	adds	r7, #24
 800371a:	46bd      	mov	sp, r7
 800371c:	bd80      	pop	{r7, pc}
 800371e:	bf00      	nop
 8003720:	40023800 	.word	0x40023800

08003724 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b084      	sub	sp, #16
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
 800372c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800372e:	2300      	movs	r3, #0
 8003730:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d101      	bne.n	800373c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003738:	2301      	movs	r3, #1
 800373a:	e0d0      	b.n	80038de <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800373c:	4b6a      	ldr	r3, [pc, #424]	; (80038e8 <HAL_RCC_ClockConfig+0x1c4>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f003 030f 	and.w	r3, r3, #15
 8003744:	683a      	ldr	r2, [r7, #0]
 8003746:	429a      	cmp	r2, r3
 8003748:	d910      	bls.n	800376c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800374a:	4b67      	ldr	r3, [pc, #412]	; (80038e8 <HAL_RCC_ClockConfig+0x1c4>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f023 020f 	bic.w	r2, r3, #15
 8003752:	4965      	ldr	r1, [pc, #404]	; (80038e8 <HAL_RCC_ClockConfig+0x1c4>)
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	4313      	orrs	r3, r2
 8003758:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800375a:	4b63      	ldr	r3, [pc, #396]	; (80038e8 <HAL_RCC_ClockConfig+0x1c4>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f003 030f 	and.w	r3, r3, #15
 8003762:	683a      	ldr	r2, [r7, #0]
 8003764:	429a      	cmp	r2, r3
 8003766:	d001      	beq.n	800376c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003768:	2301      	movs	r3, #1
 800376a:	e0b8      	b.n	80038de <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f003 0302 	and.w	r3, r3, #2
 8003774:	2b00      	cmp	r3, #0
 8003776:	d020      	beq.n	80037ba <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f003 0304 	and.w	r3, r3, #4
 8003780:	2b00      	cmp	r3, #0
 8003782:	d005      	beq.n	8003790 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003784:	4b59      	ldr	r3, [pc, #356]	; (80038ec <HAL_RCC_ClockConfig+0x1c8>)
 8003786:	689b      	ldr	r3, [r3, #8]
 8003788:	4a58      	ldr	r2, [pc, #352]	; (80038ec <HAL_RCC_ClockConfig+0x1c8>)
 800378a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800378e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f003 0308 	and.w	r3, r3, #8
 8003798:	2b00      	cmp	r3, #0
 800379a:	d005      	beq.n	80037a8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800379c:	4b53      	ldr	r3, [pc, #332]	; (80038ec <HAL_RCC_ClockConfig+0x1c8>)
 800379e:	689b      	ldr	r3, [r3, #8]
 80037a0:	4a52      	ldr	r2, [pc, #328]	; (80038ec <HAL_RCC_ClockConfig+0x1c8>)
 80037a2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80037a6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037a8:	4b50      	ldr	r3, [pc, #320]	; (80038ec <HAL_RCC_ClockConfig+0x1c8>)
 80037aa:	689b      	ldr	r3, [r3, #8]
 80037ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	689b      	ldr	r3, [r3, #8]
 80037b4:	494d      	ldr	r1, [pc, #308]	; (80038ec <HAL_RCC_ClockConfig+0x1c8>)
 80037b6:	4313      	orrs	r3, r2
 80037b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f003 0301 	and.w	r3, r3, #1
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d040      	beq.n	8003848 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	2b01      	cmp	r3, #1
 80037cc:	d107      	bne.n	80037de <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037ce:	4b47      	ldr	r3, [pc, #284]	; (80038ec <HAL_RCC_ClockConfig+0x1c8>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d115      	bne.n	8003806 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80037da:	2301      	movs	r3, #1
 80037dc:	e07f      	b.n	80038de <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	2b02      	cmp	r3, #2
 80037e4:	d107      	bne.n	80037f6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037e6:	4b41      	ldr	r3, [pc, #260]	; (80038ec <HAL_RCC_ClockConfig+0x1c8>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d109      	bne.n	8003806 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80037f2:	2301      	movs	r3, #1
 80037f4:	e073      	b.n	80038de <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037f6:	4b3d      	ldr	r3, [pc, #244]	; (80038ec <HAL_RCC_ClockConfig+0x1c8>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f003 0302 	and.w	r3, r3, #2
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d101      	bne.n	8003806 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003802:	2301      	movs	r3, #1
 8003804:	e06b      	b.n	80038de <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003806:	4b39      	ldr	r3, [pc, #228]	; (80038ec <HAL_RCC_ClockConfig+0x1c8>)
 8003808:	689b      	ldr	r3, [r3, #8]
 800380a:	f023 0203 	bic.w	r2, r3, #3
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	4936      	ldr	r1, [pc, #216]	; (80038ec <HAL_RCC_ClockConfig+0x1c8>)
 8003814:	4313      	orrs	r3, r2
 8003816:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003818:	f7fd fbf0 	bl	8000ffc <HAL_GetTick>
 800381c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800381e:	e00a      	b.n	8003836 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003820:	f7fd fbec 	bl	8000ffc <HAL_GetTick>
 8003824:	4602      	mov	r2, r0
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	1ad3      	subs	r3, r2, r3
 800382a:	f241 3288 	movw	r2, #5000	; 0x1388
 800382e:	4293      	cmp	r3, r2
 8003830:	d901      	bls.n	8003836 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003832:	2303      	movs	r3, #3
 8003834:	e053      	b.n	80038de <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003836:	4b2d      	ldr	r3, [pc, #180]	; (80038ec <HAL_RCC_ClockConfig+0x1c8>)
 8003838:	689b      	ldr	r3, [r3, #8]
 800383a:	f003 020c 	and.w	r2, r3, #12
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	009b      	lsls	r3, r3, #2
 8003844:	429a      	cmp	r2, r3
 8003846:	d1eb      	bne.n	8003820 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003848:	4b27      	ldr	r3, [pc, #156]	; (80038e8 <HAL_RCC_ClockConfig+0x1c4>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f003 030f 	and.w	r3, r3, #15
 8003850:	683a      	ldr	r2, [r7, #0]
 8003852:	429a      	cmp	r2, r3
 8003854:	d210      	bcs.n	8003878 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003856:	4b24      	ldr	r3, [pc, #144]	; (80038e8 <HAL_RCC_ClockConfig+0x1c4>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f023 020f 	bic.w	r2, r3, #15
 800385e:	4922      	ldr	r1, [pc, #136]	; (80038e8 <HAL_RCC_ClockConfig+0x1c4>)
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	4313      	orrs	r3, r2
 8003864:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003866:	4b20      	ldr	r3, [pc, #128]	; (80038e8 <HAL_RCC_ClockConfig+0x1c4>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f003 030f 	and.w	r3, r3, #15
 800386e:	683a      	ldr	r2, [r7, #0]
 8003870:	429a      	cmp	r2, r3
 8003872:	d001      	beq.n	8003878 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003874:	2301      	movs	r3, #1
 8003876:	e032      	b.n	80038de <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f003 0304 	and.w	r3, r3, #4
 8003880:	2b00      	cmp	r3, #0
 8003882:	d008      	beq.n	8003896 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003884:	4b19      	ldr	r3, [pc, #100]	; (80038ec <HAL_RCC_ClockConfig+0x1c8>)
 8003886:	689b      	ldr	r3, [r3, #8]
 8003888:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	68db      	ldr	r3, [r3, #12]
 8003890:	4916      	ldr	r1, [pc, #88]	; (80038ec <HAL_RCC_ClockConfig+0x1c8>)
 8003892:	4313      	orrs	r3, r2
 8003894:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f003 0308 	and.w	r3, r3, #8
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d009      	beq.n	80038b6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80038a2:	4b12      	ldr	r3, [pc, #72]	; (80038ec <HAL_RCC_ClockConfig+0x1c8>)
 80038a4:	689b      	ldr	r3, [r3, #8]
 80038a6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	691b      	ldr	r3, [r3, #16]
 80038ae:	00db      	lsls	r3, r3, #3
 80038b0:	490e      	ldr	r1, [pc, #56]	; (80038ec <HAL_RCC_ClockConfig+0x1c8>)
 80038b2:	4313      	orrs	r3, r2
 80038b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80038b6:	f000 f821 	bl	80038fc <HAL_RCC_GetSysClockFreq>
 80038ba:	4601      	mov	r1, r0
 80038bc:	4b0b      	ldr	r3, [pc, #44]	; (80038ec <HAL_RCC_ClockConfig+0x1c8>)
 80038be:	689b      	ldr	r3, [r3, #8]
 80038c0:	091b      	lsrs	r3, r3, #4
 80038c2:	f003 030f 	and.w	r3, r3, #15
 80038c6:	4a0a      	ldr	r2, [pc, #40]	; (80038f0 <HAL_RCC_ClockConfig+0x1cc>)
 80038c8:	5cd3      	ldrb	r3, [r2, r3]
 80038ca:	fa21 f303 	lsr.w	r3, r1, r3
 80038ce:	4a09      	ldr	r2, [pc, #36]	; (80038f4 <HAL_RCC_ClockConfig+0x1d0>)
 80038d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80038d2:	4b09      	ldr	r3, [pc, #36]	; (80038f8 <HAL_RCC_ClockConfig+0x1d4>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4618      	mov	r0, r3
 80038d8:	f7fd f9fe 	bl	8000cd8 <HAL_InitTick>

  return HAL_OK;
 80038dc:	2300      	movs	r3, #0
}
 80038de:	4618      	mov	r0, r3
 80038e0:	3710      	adds	r7, #16
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}
 80038e6:	bf00      	nop
 80038e8:	40023c00 	.word	0x40023c00
 80038ec:	40023800 	.word	0x40023800
 80038f0:	0801ba48 	.word	0x0801ba48
 80038f4:	20000000 	.word	0x20000000
 80038f8:	20000004 	.word	0x20000004

080038fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80038fe:	b085      	sub	sp, #20
 8003900:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003902:	2300      	movs	r3, #0
 8003904:	607b      	str	r3, [r7, #4]
 8003906:	2300      	movs	r3, #0
 8003908:	60fb      	str	r3, [r7, #12]
 800390a:	2300      	movs	r3, #0
 800390c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 800390e:	2300      	movs	r3, #0
 8003910:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003912:	4b63      	ldr	r3, [pc, #396]	; (8003aa0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003914:	689b      	ldr	r3, [r3, #8]
 8003916:	f003 030c 	and.w	r3, r3, #12
 800391a:	2b04      	cmp	r3, #4
 800391c:	d007      	beq.n	800392e <HAL_RCC_GetSysClockFreq+0x32>
 800391e:	2b08      	cmp	r3, #8
 8003920:	d008      	beq.n	8003934 <HAL_RCC_GetSysClockFreq+0x38>
 8003922:	2b00      	cmp	r3, #0
 8003924:	f040 80b4 	bne.w	8003a90 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003928:	4b5e      	ldr	r3, [pc, #376]	; (8003aa4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800392a:	60bb      	str	r3, [r7, #8]
      break;
 800392c:	e0b3      	b.n	8003a96 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800392e:	4b5e      	ldr	r3, [pc, #376]	; (8003aa8 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8003930:	60bb      	str	r3, [r7, #8]
      break;
 8003932:	e0b0      	b.n	8003a96 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003934:	4b5a      	ldr	r3, [pc, #360]	; (8003aa0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800393c:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800393e:	4b58      	ldr	r3, [pc, #352]	; (8003aa0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003946:	2b00      	cmp	r3, #0
 8003948:	d04a      	beq.n	80039e0 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800394a:	4b55      	ldr	r3, [pc, #340]	; (8003aa0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	099b      	lsrs	r3, r3, #6
 8003950:	f04f 0400 	mov.w	r4, #0
 8003954:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003958:	f04f 0200 	mov.w	r2, #0
 800395c:	ea03 0501 	and.w	r5, r3, r1
 8003960:	ea04 0602 	and.w	r6, r4, r2
 8003964:	4629      	mov	r1, r5
 8003966:	4632      	mov	r2, r6
 8003968:	f04f 0300 	mov.w	r3, #0
 800396c:	f04f 0400 	mov.w	r4, #0
 8003970:	0154      	lsls	r4, r2, #5
 8003972:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003976:	014b      	lsls	r3, r1, #5
 8003978:	4619      	mov	r1, r3
 800397a:	4622      	mov	r2, r4
 800397c:	1b49      	subs	r1, r1, r5
 800397e:	eb62 0206 	sbc.w	r2, r2, r6
 8003982:	f04f 0300 	mov.w	r3, #0
 8003986:	f04f 0400 	mov.w	r4, #0
 800398a:	0194      	lsls	r4, r2, #6
 800398c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003990:	018b      	lsls	r3, r1, #6
 8003992:	1a5b      	subs	r3, r3, r1
 8003994:	eb64 0402 	sbc.w	r4, r4, r2
 8003998:	f04f 0100 	mov.w	r1, #0
 800399c:	f04f 0200 	mov.w	r2, #0
 80039a0:	00e2      	lsls	r2, r4, #3
 80039a2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80039a6:	00d9      	lsls	r1, r3, #3
 80039a8:	460b      	mov	r3, r1
 80039aa:	4614      	mov	r4, r2
 80039ac:	195b      	adds	r3, r3, r5
 80039ae:	eb44 0406 	adc.w	r4, r4, r6
 80039b2:	f04f 0100 	mov.w	r1, #0
 80039b6:	f04f 0200 	mov.w	r2, #0
 80039ba:	0262      	lsls	r2, r4, #9
 80039bc:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80039c0:	0259      	lsls	r1, r3, #9
 80039c2:	460b      	mov	r3, r1
 80039c4:	4614      	mov	r4, r2
 80039c6:	4618      	mov	r0, r3
 80039c8:	4621      	mov	r1, r4
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	f04f 0400 	mov.w	r4, #0
 80039d0:	461a      	mov	r2, r3
 80039d2:	4623      	mov	r3, r4
 80039d4:	f7fc fc94 	bl	8000300 <__aeabi_uldivmod>
 80039d8:	4603      	mov	r3, r0
 80039da:	460c      	mov	r4, r1
 80039dc:	60fb      	str	r3, [r7, #12]
 80039de:	e049      	b.n	8003a74 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039e0:	4b2f      	ldr	r3, [pc, #188]	; (8003aa0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	099b      	lsrs	r3, r3, #6
 80039e6:	f04f 0400 	mov.w	r4, #0
 80039ea:	f240 11ff 	movw	r1, #511	; 0x1ff
 80039ee:	f04f 0200 	mov.w	r2, #0
 80039f2:	ea03 0501 	and.w	r5, r3, r1
 80039f6:	ea04 0602 	and.w	r6, r4, r2
 80039fa:	4629      	mov	r1, r5
 80039fc:	4632      	mov	r2, r6
 80039fe:	f04f 0300 	mov.w	r3, #0
 8003a02:	f04f 0400 	mov.w	r4, #0
 8003a06:	0154      	lsls	r4, r2, #5
 8003a08:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003a0c:	014b      	lsls	r3, r1, #5
 8003a0e:	4619      	mov	r1, r3
 8003a10:	4622      	mov	r2, r4
 8003a12:	1b49      	subs	r1, r1, r5
 8003a14:	eb62 0206 	sbc.w	r2, r2, r6
 8003a18:	f04f 0300 	mov.w	r3, #0
 8003a1c:	f04f 0400 	mov.w	r4, #0
 8003a20:	0194      	lsls	r4, r2, #6
 8003a22:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003a26:	018b      	lsls	r3, r1, #6
 8003a28:	1a5b      	subs	r3, r3, r1
 8003a2a:	eb64 0402 	sbc.w	r4, r4, r2
 8003a2e:	f04f 0100 	mov.w	r1, #0
 8003a32:	f04f 0200 	mov.w	r2, #0
 8003a36:	00e2      	lsls	r2, r4, #3
 8003a38:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003a3c:	00d9      	lsls	r1, r3, #3
 8003a3e:	460b      	mov	r3, r1
 8003a40:	4614      	mov	r4, r2
 8003a42:	195b      	adds	r3, r3, r5
 8003a44:	eb44 0406 	adc.w	r4, r4, r6
 8003a48:	f04f 0100 	mov.w	r1, #0
 8003a4c:	f04f 0200 	mov.w	r2, #0
 8003a50:	02a2      	lsls	r2, r4, #10
 8003a52:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003a56:	0299      	lsls	r1, r3, #10
 8003a58:	460b      	mov	r3, r1
 8003a5a:	4614      	mov	r4, r2
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	4621      	mov	r1, r4
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	f04f 0400 	mov.w	r4, #0
 8003a66:	461a      	mov	r2, r3
 8003a68:	4623      	mov	r3, r4
 8003a6a:	f7fc fc49 	bl	8000300 <__aeabi_uldivmod>
 8003a6e:	4603      	mov	r3, r0
 8003a70:	460c      	mov	r4, r1
 8003a72:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003a74:	4b0a      	ldr	r3, [pc, #40]	; (8003aa0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	0c1b      	lsrs	r3, r3, #16
 8003a7a:	f003 0303 	and.w	r3, r3, #3
 8003a7e:	3301      	adds	r3, #1
 8003a80:	005b      	lsls	r3, r3, #1
 8003a82:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8003a84:	68fa      	ldr	r2, [r7, #12]
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a8c:	60bb      	str	r3, [r7, #8]
      break;
 8003a8e:	e002      	b.n	8003a96 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003a90:	4b04      	ldr	r3, [pc, #16]	; (8003aa4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003a92:	60bb      	str	r3, [r7, #8]
      break;
 8003a94:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a96:	68bb      	ldr	r3, [r7, #8]
}
 8003a98:	4618      	mov	r0, r3
 8003a9a:	3714      	adds	r7, #20
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003aa0:	40023800 	.word	0x40023800
 8003aa4:	00f42400 	.word	0x00f42400
 8003aa8:	007a1200 	.word	0x007a1200

08003aac <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003aac:	b480      	push	{r7}
 8003aae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ab0:	4b03      	ldr	r3, [pc, #12]	; (8003ac0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
}
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abc:	4770      	bx	lr
 8003abe:	bf00      	nop
 8003ac0:	20000000 	.word	0x20000000

08003ac4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003ac8:	f7ff fff0 	bl	8003aac <HAL_RCC_GetHCLKFreq>
 8003acc:	4601      	mov	r1, r0
 8003ace:	4b05      	ldr	r3, [pc, #20]	; (8003ae4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003ad0:	689b      	ldr	r3, [r3, #8]
 8003ad2:	0b5b      	lsrs	r3, r3, #13
 8003ad4:	f003 0307 	and.w	r3, r3, #7
 8003ad8:	4a03      	ldr	r2, [pc, #12]	; (8003ae8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ada:	5cd3      	ldrb	r3, [r2, r3]
 8003adc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	bd80      	pop	{r7, pc}
 8003ae4:	40023800 	.word	0x40023800
 8003ae8:	0801ba58 	.word	0x0801ba58

08003aec <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003aec:	b480      	push	{r7}
 8003aee:	b083      	sub	sp, #12
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
 8003af4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	220f      	movs	r2, #15
 8003afa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003afc:	4b12      	ldr	r3, [pc, #72]	; (8003b48 <HAL_RCC_GetClockConfig+0x5c>)
 8003afe:	689b      	ldr	r3, [r3, #8]
 8003b00:	f003 0203 	and.w	r2, r3, #3
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003b08:	4b0f      	ldr	r3, [pc, #60]	; (8003b48 <HAL_RCC_GetClockConfig+0x5c>)
 8003b0a:	689b      	ldr	r3, [r3, #8]
 8003b0c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003b14:	4b0c      	ldr	r3, [pc, #48]	; (8003b48 <HAL_RCC_GetClockConfig+0x5c>)
 8003b16:	689b      	ldr	r3, [r3, #8]
 8003b18:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003b20:	4b09      	ldr	r3, [pc, #36]	; (8003b48 <HAL_RCC_GetClockConfig+0x5c>)
 8003b22:	689b      	ldr	r3, [r3, #8]
 8003b24:	08db      	lsrs	r3, r3, #3
 8003b26:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003b2e:	4b07      	ldr	r3, [pc, #28]	; (8003b4c <HAL_RCC_GetClockConfig+0x60>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f003 020f 	and.w	r2, r3, #15
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	601a      	str	r2, [r3, #0]
}
 8003b3a:	bf00      	nop
 8003b3c:	370c      	adds	r7, #12
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b44:	4770      	bx	lr
 8003b46:	bf00      	nop
 8003b48:	40023800 	.word	0x40023800
 8003b4c:	40023c00 	.word	0x40023c00

08003b50 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b082      	sub	sp, #8
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d101      	bne.n	8003b62 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	e049      	b.n	8003bf6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b68:	b2db      	uxtb	r3, r3
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d106      	bne.n	8003b7c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2200      	movs	r2, #0
 8003b72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003b76:	6878      	ldr	r0, [r7, #4]
 8003b78:	f000 f841 	bl	8003bfe <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2202      	movs	r2, #2
 8003b80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681a      	ldr	r2, [r3, #0]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	3304      	adds	r3, #4
 8003b8c:	4619      	mov	r1, r3
 8003b8e:	4610      	mov	r0, r2
 8003b90:	f000 fa00 	bl	8003f94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2201      	movs	r2, #1
 8003b98:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2201      	movs	r2, #1
 8003ba8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2201      	movs	r2, #1
 8003bb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2201      	movs	r2, #1
 8003bc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2201      	movs	r2, #1
 8003bc8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2201      	movs	r2, #1
 8003bd0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2201      	movs	r2, #1
 8003bd8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2201      	movs	r2, #1
 8003be0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2201      	movs	r2, #1
 8003be8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2201      	movs	r2, #1
 8003bf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003bf4:	2300      	movs	r3, #0
}
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	3708      	adds	r7, #8
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}

08003bfe <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003bfe:	b480      	push	{r7}
 8003c00:	b083      	sub	sp, #12
 8003c02:	af00      	add	r7, sp, #0
 8003c04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003c06:	bf00      	nop
 8003c08:	370c      	adds	r7, #12
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c10:	4770      	bx	lr
	...

08003c14 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003c14:	b480      	push	{r7}
 8003c16:	b085      	sub	sp, #20
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c22:	b2db      	uxtb	r3, r3
 8003c24:	2b01      	cmp	r3, #1
 8003c26:	d001      	beq.n	8003c2c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003c28:	2301      	movs	r3, #1
 8003c2a:	e054      	b.n	8003cd6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2202      	movs	r2, #2
 8003c30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	68da      	ldr	r2, [r3, #12]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f042 0201 	orr.w	r2, r2, #1
 8003c42:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a26      	ldr	r2, [pc, #152]	; (8003ce4 <HAL_TIM_Base_Start_IT+0xd0>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d022      	beq.n	8003c94 <HAL_TIM_Base_Start_IT+0x80>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c56:	d01d      	beq.n	8003c94 <HAL_TIM_Base_Start_IT+0x80>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4a22      	ldr	r2, [pc, #136]	; (8003ce8 <HAL_TIM_Base_Start_IT+0xd4>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d018      	beq.n	8003c94 <HAL_TIM_Base_Start_IT+0x80>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4a21      	ldr	r2, [pc, #132]	; (8003cec <HAL_TIM_Base_Start_IT+0xd8>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d013      	beq.n	8003c94 <HAL_TIM_Base_Start_IT+0x80>
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a1f      	ldr	r2, [pc, #124]	; (8003cf0 <HAL_TIM_Base_Start_IT+0xdc>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d00e      	beq.n	8003c94 <HAL_TIM_Base_Start_IT+0x80>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4a1e      	ldr	r2, [pc, #120]	; (8003cf4 <HAL_TIM_Base_Start_IT+0xe0>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d009      	beq.n	8003c94 <HAL_TIM_Base_Start_IT+0x80>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a1c      	ldr	r2, [pc, #112]	; (8003cf8 <HAL_TIM_Base_Start_IT+0xe4>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d004      	beq.n	8003c94 <HAL_TIM_Base_Start_IT+0x80>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4a1b      	ldr	r2, [pc, #108]	; (8003cfc <HAL_TIM_Base_Start_IT+0xe8>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d115      	bne.n	8003cc0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	689a      	ldr	r2, [r3, #8]
 8003c9a:	4b19      	ldr	r3, [pc, #100]	; (8003d00 <HAL_TIM_Base_Start_IT+0xec>)
 8003c9c:	4013      	ands	r3, r2
 8003c9e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	2b06      	cmp	r3, #6
 8003ca4:	d015      	beq.n	8003cd2 <HAL_TIM_Base_Start_IT+0xbe>
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cac:	d011      	beq.n	8003cd2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	681a      	ldr	r2, [r3, #0]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f042 0201 	orr.w	r2, r2, #1
 8003cbc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cbe:	e008      	b.n	8003cd2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	681a      	ldr	r2, [r3, #0]
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f042 0201 	orr.w	r2, r2, #1
 8003cce:	601a      	str	r2, [r3, #0]
 8003cd0:	e000      	b.n	8003cd4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cd2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003cd4:	2300      	movs	r3, #0
}
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	3714      	adds	r7, #20
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce0:	4770      	bx	lr
 8003ce2:	bf00      	nop
 8003ce4:	40010000 	.word	0x40010000
 8003ce8:	40000400 	.word	0x40000400
 8003cec:	40000800 	.word	0x40000800
 8003cf0:	40000c00 	.word	0x40000c00
 8003cf4:	40010400 	.word	0x40010400
 8003cf8:	40014000 	.word	0x40014000
 8003cfc:	40001800 	.word	0x40001800
 8003d00:	00010007 	.word	0x00010007

08003d04 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b082      	sub	sp, #8
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	691b      	ldr	r3, [r3, #16]
 8003d12:	f003 0302 	and.w	r3, r3, #2
 8003d16:	2b02      	cmp	r3, #2
 8003d18:	d122      	bne.n	8003d60 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	68db      	ldr	r3, [r3, #12]
 8003d20:	f003 0302 	and.w	r3, r3, #2
 8003d24:	2b02      	cmp	r3, #2
 8003d26:	d11b      	bne.n	8003d60 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f06f 0202 	mvn.w	r2, #2
 8003d30:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2201      	movs	r2, #1
 8003d36:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	699b      	ldr	r3, [r3, #24]
 8003d3e:	f003 0303 	and.w	r3, r3, #3
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d003      	beq.n	8003d4e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003d46:	6878      	ldr	r0, [r7, #4]
 8003d48:	f000 f905 	bl	8003f56 <HAL_TIM_IC_CaptureCallback>
 8003d4c:	e005      	b.n	8003d5a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d4e:	6878      	ldr	r0, [r7, #4]
 8003d50:	f000 f8f7 	bl	8003f42 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d54:	6878      	ldr	r0, [r7, #4]
 8003d56:	f000 f908 	bl	8003f6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	691b      	ldr	r3, [r3, #16]
 8003d66:	f003 0304 	and.w	r3, r3, #4
 8003d6a:	2b04      	cmp	r3, #4
 8003d6c:	d122      	bne.n	8003db4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	68db      	ldr	r3, [r3, #12]
 8003d74:	f003 0304 	and.w	r3, r3, #4
 8003d78:	2b04      	cmp	r3, #4
 8003d7a:	d11b      	bne.n	8003db4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f06f 0204 	mvn.w	r2, #4
 8003d84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2202      	movs	r2, #2
 8003d8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	699b      	ldr	r3, [r3, #24]
 8003d92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d003      	beq.n	8003da2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d9a:	6878      	ldr	r0, [r7, #4]
 8003d9c:	f000 f8db 	bl	8003f56 <HAL_TIM_IC_CaptureCallback>
 8003da0:	e005      	b.n	8003dae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003da2:	6878      	ldr	r0, [r7, #4]
 8003da4:	f000 f8cd 	bl	8003f42 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003da8:	6878      	ldr	r0, [r7, #4]
 8003daa:	f000 f8de 	bl	8003f6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2200      	movs	r2, #0
 8003db2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	691b      	ldr	r3, [r3, #16]
 8003dba:	f003 0308 	and.w	r3, r3, #8
 8003dbe:	2b08      	cmp	r3, #8
 8003dc0:	d122      	bne.n	8003e08 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	68db      	ldr	r3, [r3, #12]
 8003dc8:	f003 0308 	and.w	r3, r3, #8
 8003dcc:	2b08      	cmp	r3, #8
 8003dce:	d11b      	bne.n	8003e08 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f06f 0208 	mvn.w	r2, #8
 8003dd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2204      	movs	r2, #4
 8003dde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	69db      	ldr	r3, [r3, #28]
 8003de6:	f003 0303 	and.w	r3, r3, #3
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d003      	beq.n	8003df6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003dee:	6878      	ldr	r0, [r7, #4]
 8003df0:	f000 f8b1 	bl	8003f56 <HAL_TIM_IC_CaptureCallback>
 8003df4:	e005      	b.n	8003e02 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003df6:	6878      	ldr	r0, [r7, #4]
 8003df8:	f000 f8a3 	bl	8003f42 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003dfc:	6878      	ldr	r0, [r7, #4]
 8003dfe:	f000 f8b4 	bl	8003f6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2200      	movs	r2, #0
 8003e06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	691b      	ldr	r3, [r3, #16]
 8003e0e:	f003 0310 	and.w	r3, r3, #16
 8003e12:	2b10      	cmp	r3, #16
 8003e14:	d122      	bne.n	8003e5c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	68db      	ldr	r3, [r3, #12]
 8003e1c:	f003 0310 	and.w	r3, r3, #16
 8003e20:	2b10      	cmp	r3, #16
 8003e22:	d11b      	bne.n	8003e5c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f06f 0210 	mvn.w	r2, #16
 8003e2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2208      	movs	r2, #8
 8003e32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	69db      	ldr	r3, [r3, #28]
 8003e3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d003      	beq.n	8003e4a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e42:	6878      	ldr	r0, [r7, #4]
 8003e44:	f000 f887 	bl	8003f56 <HAL_TIM_IC_CaptureCallback>
 8003e48:	e005      	b.n	8003e56 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e4a:	6878      	ldr	r0, [r7, #4]
 8003e4c:	f000 f879 	bl	8003f42 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e50:	6878      	ldr	r0, [r7, #4]
 8003e52:	f000 f88a 	bl	8003f6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	691b      	ldr	r3, [r3, #16]
 8003e62:	f003 0301 	and.w	r3, r3, #1
 8003e66:	2b01      	cmp	r3, #1
 8003e68:	d10e      	bne.n	8003e88 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	68db      	ldr	r3, [r3, #12]
 8003e70:	f003 0301 	and.w	r3, r3, #1
 8003e74:	2b01      	cmp	r3, #1
 8003e76:	d107      	bne.n	8003e88 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f06f 0201 	mvn.w	r2, #1
 8003e80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003e82:	6878      	ldr	r0, [r7, #4]
 8003e84:	f7fc feca 	bl	8000c1c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	691b      	ldr	r3, [r3, #16]
 8003e8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e92:	2b80      	cmp	r3, #128	; 0x80
 8003e94:	d10e      	bne.n	8003eb4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	68db      	ldr	r3, [r3, #12]
 8003e9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ea0:	2b80      	cmp	r3, #128	; 0x80
 8003ea2:	d107      	bne.n	8003eb4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003eac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003eae:	6878      	ldr	r0, [r7, #4]
 8003eb0:	f000 f91a 	bl	80040e8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	691b      	ldr	r3, [r3, #16]
 8003eba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ebe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ec2:	d10e      	bne.n	8003ee2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	68db      	ldr	r3, [r3, #12]
 8003eca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ece:	2b80      	cmp	r3, #128	; 0x80
 8003ed0:	d107      	bne.n	8003ee2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003eda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003edc:	6878      	ldr	r0, [r7, #4]
 8003ede:	f000 f90d 	bl	80040fc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	691b      	ldr	r3, [r3, #16]
 8003ee8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003eec:	2b40      	cmp	r3, #64	; 0x40
 8003eee:	d10e      	bne.n	8003f0e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	68db      	ldr	r3, [r3, #12]
 8003ef6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003efa:	2b40      	cmp	r3, #64	; 0x40
 8003efc:	d107      	bne.n	8003f0e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003f06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003f08:	6878      	ldr	r0, [r7, #4]
 8003f0a:	f000 f838 	bl	8003f7e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	691b      	ldr	r3, [r3, #16]
 8003f14:	f003 0320 	and.w	r3, r3, #32
 8003f18:	2b20      	cmp	r3, #32
 8003f1a:	d10e      	bne.n	8003f3a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	68db      	ldr	r3, [r3, #12]
 8003f22:	f003 0320 	and.w	r3, r3, #32
 8003f26:	2b20      	cmp	r3, #32
 8003f28:	d107      	bne.n	8003f3a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f06f 0220 	mvn.w	r2, #32
 8003f32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003f34:	6878      	ldr	r0, [r7, #4]
 8003f36:	f000 f8cd 	bl	80040d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003f3a:	bf00      	nop
 8003f3c:	3708      	adds	r7, #8
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bd80      	pop	{r7, pc}

08003f42 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003f42:	b480      	push	{r7}
 8003f44:	b083      	sub	sp, #12
 8003f46:	af00      	add	r7, sp, #0
 8003f48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003f4a:	bf00      	nop
 8003f4c:	370c      	adds	r7, #12
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f54:	4770      	bx	lr

08003f56 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003f56:	b480      	push	{r7}
 8003f58:	b083      	sub	sp, #12
 8003f5a:	af00      	add	r7, sp, #0
 8003f5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003f5e:	bf00      	nop
 8003f60:	370c      	adds	r7, #12
 8003f62:	46bd      	mov	sp, r7
 8003f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f68:	4770      	bx	lr

08003f6a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003f6a:	b480      	push	{r7}
 8003f6c:	b083      	sub	sp, #12
 8003f6e:	af00      	add	r7, sp, #0
 8003f70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003f72:	bf00      	nop
 8003f74:	370c      	adds	r7, #12
 8003f76:	46bd      	mov	sp, r7
 8003f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7c:	4770      	bx	lr

08003f7e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003f7e:	b480      	push	{r7}
 8003f80:	b083      	sub	sp, #12
 8003f82:	af00      	add	r7, sp, #0
 8003f84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003f86:	bf00      	nop
 8003f88:	370c      	adds	r7, #12
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f90:	4770      	bx	lr
	...

08003f94 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003f94:	b480      	push	{r7}
 8003f96:	b085      	sub	sp, #20
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
 8003f9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	4a40      	ldr	r2, [pc, #256]	; (80040a8 <TIM_Base_SetConfig+0x114>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d013      	beq.n	8003fd4 <TIM_Base_SetConfig+0x40>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fb2:	d00f      	beq.n	8003fd4 <TIM_Base_SetConfig+0x40>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	4a3d      	ldr	r2, [pc, #244]	; (80040ac <TIM_Base_SetConfig+0x118>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d00b      	beq.n	8003fd4 <TIM_Base_SetConfig+0x40>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	4a3c      	ldr	r2, [pc, #240]	; (80040b0 <TIM_Base_SetConfig+0x11c>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d007      	beq.n	8003fd4 <TIM_Base_SetConfig+0x40>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	4a3b      	ldr	r2, [pc, #236]	; (80040b4 <TIM_Base_SetConfig+0x120>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d003      	beq.n	8003fd4 <TIM_Base_SetConfig+0x40>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	4a3a      	ldr	r2, [pc, #232]	; (80040b8 <TIM_Base_SetConfig+0x124>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d108      	bne.n	8003fe6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fda:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	68fa      	ldr	r2, [r7, #12]
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	4a2f      	ldr	r2, [pc, #188]	; (80040a8 <TIM_Base_SetConfig+0x114>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d02b      	beq.n	8004046 <TIM_Base_SetConfig+0xb2>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ff4:	d027      	beq.n	8004046 <TIM_Base_SetConfig+0xb2>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	4a2c      	ldr	r2, [pc, #176]	; (80040ac <TIM_Base_SetConfig+0x118>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d023      	beq.n	8004046 <TIM_Base_SetConfig+0xb2>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	4a2b      	ldr	r2, [pc, #172]	; (80040b0 <TIM_Base_SetConfig+0x11c>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d01f      	beq.n	8004046 <TIM_Base_SetConfig+0xb2>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	4a2a      	ldr	r2, [pc, #168]	; (80040b4 <TIM_Base_SetConfig+0x120>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d01b      	beq.n	8004046 <TIM_Base_SetConfig+0xb2>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	4a29      	ldr	r2, [pc, #164]	; (80040b8 <TIM_Base_SetConfig+0x124>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d017      	beq.n	8004046 <TIM_Base_SetConfig+0xb2>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	4a28      	ldr	r2, [pc, #160]	; (80040bc <TIM_Base_SetConfig+0x128>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d013      	beq.n	8004046 <TIM_Base_SetConfig+0xb2>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	4a27      	ldr	r2, [pc, #156]	; (80040c0 <TIM_Base_SetConfig+0x12c>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d00f      	beq.n	8004046 <TIM_Base_SetConfig+0xb2>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	4a26      	ldr	r2, [pc, #152]	; (80040c4 <TIM_Base_SetConfig+0x130>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d00b      	beq.n	8004046 <TIM_Base_SetConfig+0xb2>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	4a25      	ldr	r2, [pc, #148]	; (80040c8 <TIM_Base_SetConfig+0x134>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d007      	beq.n	8004046 <TIM_Base_SetConfig+0xb2>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	4a24      	ldr	r2, [pc, #144]	; (80040cc <TIM_Base_SetConfig+0x138>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d003      	beq.n	8004046 <TIM_Base_SetConfig+0xb2>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	4a23      	ldr	r2, [pc, #140]	; (80040d0 <TIM_Base_SetConfig+0x13c>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d108      	bne.n	8004058 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800404c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	68db      	ldr	r3, [r3, #12]
 8004052:	68fa      	ldr	r2, [r7, #12]
 8004054:	4313      	orrs	r3, r2
 8004056:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	695b      	ldr	r3, [r3, #20]
 8004062:	4313      	orrs	r3, r2
 8004064:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	68fa      	ldr	r2, [r7, #12]
 800406a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	689a      	ldr	r2, [r3, #8]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	681a      	ldr	r2, [r3, #0]
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	4a0a      	ldr	r2, [pc, #40]	; (80040a8 <TIM_Base_SetConfig+0x114>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d003      	beq.n	800408c <TIM_Base_SetConfig+0xf8>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	4a0c      	ldr	r2, [pc, #48]	; (80040b8 <TIM_Base_SetConfig+0x124>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d103      	bne.n	8004094 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	691a      	ldr	r2, [r3, #16]
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2201      	movs	r2, #1
 8004098:	615a      	str	r2, [r3, #20]
}
 800409a:	bf00      	nop
 800409c:	3714      	adds	r7, #20
 800409e:	46bd      	mov	sp, r7
 80040a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a4:	4770      	bx	lr
 80040a6:	bf00      	nop
 80040a8:	40010000 	.word	0x40010000
 80040ac:	40000400 	.word	0x40000400
 80040b0:	40000800 	.word	0x40000800
 80040b4:	40000c00 	.word	0x40000c00
 80040b8:	40010400 	.word	0x40010400
 80040bc:	40014000 	.word	0x40014000
 80040c0:	40014400 	.word	0x40014400
 80040c4:	40014800 	.word	0x40014800
 80040c8:	40001800 	.word	0x40001800
 80040cc:	40001c00 	.word	0x40001c00
 80040d0:	40002000 	.word	0x40002000

080040d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80040d4:	b480      	push	{r7}
 80040d6:	b083      	sub	sp, #12
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80040dc:	bf00      	nop
 80040de:	370c      	adds	r7, #12
 80040e0:	46bd      	mov	sp, r7
 80040e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e6:	4770      	bx	lr

080040e8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80040e8:	b480      	push	{r7}
 80040ea:	b083      	sub	sp, #12
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80040f0:	bf00      	nop
 80040f2:	370c      	adds	r7, #12
 80040f4:	46bd      	mov	sp, r7
 80040f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fa:	4770      	bx	lr

080040fc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80040fc:	b480      	push	{r7}
 80040fe:	b083      	sub	sp, #12
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004104:	bf00      	nop
 8004106:	370c      	adds	r7, #12
 8004108:	46bd      	mov	sp, r7
 800410a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410e:	4770      	bx	lr

08004110 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8004110:	b5b0      	push	{r4, r5, r7, lr}
 8004112:	b08e      	sub	sp, #56	; 0x38
 8004114:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8004116:	4ba0      	ldr	r3, [pc, #640]	; (8004398 <MX_LWIP_Init+0x288>)
 8004118:	22c0      	movs	r2, #192	; 0xc0
 800411a:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 800411c:	4b9e      	ldr	r3, [pc, #632]	; (8004398 <MX_LWIP_Init+0x288>)
 800411e:	22a8      	movs	r2, #168	; 0xa8
 8004120:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 178;
 8004122:	4b9d      	ldr	r3, [pc, #628]	; (8004398 <MX_LWIP_Init+0x288>)
 8004124:	22b2      	movs	r2, #178	; 0xb2
 8004126:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 31;
 8004128:	4b9b      	ldr	r3, [pc, #620]	; (8004398 <MX_LWIP_Init+0x288>)
 800412a:	221f      	movs	r2, #31
 800412c:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800412e:	4b9b      	ldr	r3, [pc, #620]	; (800439c <MX_LWIP_Init+0x28c>)
 8004130:	22ff      	movs	r2, #255	; 0xff
 8004132:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8004134:	4b99      	ldr	r3, [pc, #612]	; (800439c <MX_LWIP_Init+0x28c>)
 8004136:	22ff      	movs	r2, #255	; 0xff
 8004138:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 800413a:	4b98      	ldr	r3, [pc, #608]	; (800439c <MX_LWIP_Init+0x28c>)
 800413c:	22ff      	movs	r2, #255	; 0xff
 800413e:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8004140:	4b96      	ldr	r3, [pc, #600]	; (800439c <MX_LWIP_Init+0x28c>)
 8004142:	2200      	movs	r2, #0
 8004144:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 8004146:	4b96      	ldr	r3, [pc, #600]	; (80043a0 <MX_LWIP_Init+0x290>)
 8004148:	22c0      	movs	r2, #192	; 0xc0
 800414a:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 800414c:	4b94      	ldr	r3, [pc, #592]	; (80043a0 <MX_LWIP_Init+0x290>)
 800414e:	22a8      	movs	r2, #168	; 0xa8
 8004150:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 178;
 8004152:	4b93      	ldr	r3, [pc, #588]	; (80043a0 <MX_LWIP_Init+0x290>)
 8004154:	22b2      	movs	r2, #178	; 0xb2
 8004156:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8004158:	4b91      	ldr	r3, [pc, #580]	; (80043a0 <MX_LWIP_Init+0x290>)
 800415a:	2201      	movs	r2, #1
 800415c:	70da      	strb	r2, [r3, #3]

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 800415e:	2100      	movs	r1, #0
 8004160:	2000      	movs	r0, #0
 8004162:	f007 fb2f 	bl	800b7c4 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8004166:	4b8c      	ldr	r3, [pc, #560]	; (8004398 <MX_LWIP_Init+0x288>)
 8004168:	781b      	ldrb	r3, [r3, #0]
 800416a:	061a      	lsls	r2, r3, #24
 800416c:	4b8a      	ldr	r3, [pc, #552]	; (8004398 <MX_LWIP_Init+0x288>)
 800416e:	785b      	ldrb	r3, [r3, #1]
 8004170:	041b      	lsls	r3, r3, #16
 8004172:	431a      	orrs	r2, r3
 8004174:	4b88      	ldr	r3, [pc, #544]	; (8004398 <MX_LWIP_Init+0x288>)
 8004176:	789b      	ldrb	r3, [r3, #2]
 8004178:	021b      	lsls	r3, r3, #8
 800417a:	4313      	orrs	r3, r2
 800417c:	4a86      	ldr	r2, [pc, #536]	; (8004398 <MX_LWIP_Init+0x288>)
 800417e:	78d2      	ldrb	r2, [r2, #3]
 8004180:	4313      	orrs	r3, r2
 8004182:	061a      	lsls	r2, r3, #24
 8004184:	4b84      	ldr	r3, [pc, #528]	; (8004398 <MX_LWIP_Init+0x288>)
 8004186:	781b      	ldrb	r3, [r3, #0]
 8004188:	0619      	lsls	r1, r3, #24
 800418a:	4b83      	ldr	r3, [pc, #524]	; (8004398 <MX_LWIP_Init+0x288>)
 800418c:	785b      	ldrb	r3, [r3, #1]
 800418e:	041b      	lsls	r3, r3, #16
 8004190:	4319      	orrs	r1, r3
 8004192:	4b81      	ldr	r3, [pc, #516]	; (8004398 <MX_LWIP_Init+0x288>)
 8004194:	789b      	ldrb	r3, [r3, #2]
 8004196:	021b      	lsls	r3, r3, #8
 8004198:	430b      	orrs	r3, r1
 800419a:	497f      	ldr	r1, [pc, #508]	; (8004398 <MX_LWIP_Init+0x288>)
 800419c:	78c9      	ldrb	r1, [r1, #3]
 800419e:	430b      	orrs	r3, r1
 80041a0:	021b      	lsls	r3, r3, #8
 80041a2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80041a6:	431a      	orrs	r2, r3
 80041a8:	4b7b      	ldr	r3, [pc, #492]	; (8004398 <MX_LWIP_Init+0x288>)
 80041aa:	781b      	ldrb	r3, [r3, #0]
 80041ac:	0619      	lsls	r1, r3, #24
 80041ae:	4b7a      	ldr	r3, [pc, #488]	; (8004398 <MX_LWIP_Init+0x288>)
 80041b0:	785b      	ldrb	r3, [r3, #1]
 80041b2:	041b      	lsls	r3, r3, #16
 80041b4:	4319      	orrs	r1, r3
 80041b6:	4b78      	ldr	r3, [pc, #480]	; (8004398 <MX_LWIP_Init+0x288>)
 80041b8:	789b      	ldrb	r3, [r3, #2]
 80041ba:	021b      	lsls	r3, r3, #8
 80041bc:	430b      	orrs	r3, r1
 80041be:	4976      	ldr	r1, [pc, #472]	; (8004398 <MX_LWIP_Init+0x288>)
 80041c0:	78c9      	ldrb	r1, [r1, #3]
 80041c2:	430b      	orrs	r3, r1
 80041c4:	0a1b      	lsrs	r3, r3, #8
 80041c6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80041ca:	431a      	orrs	r2, r3
 80041cc:	4b72      	ldr	r3, [pc, #456]	; (8004398 <MX_LWIP_Init+0x288>)
 80041ce:	781b      	ldrb	r3, [r3, #0]
 80041d0:	0619      	lsls	r1, r3, #24
 80041d2:	4b71      	ldr	r3, [pc, #452]	; (8004398 <MX_LWIP_Init+0x288>)
 80041d4:	785b      	ldrb	r3, [r3, #1]
 80041d6:	041b      	lsls	r3, r3, #16
 80041d8:	4319      	orrs	r1, r3
 80041da:	4b6f      	ldr	r3, [pc, #444]	; (8004398 <MX_LWIP_Init+0x288>)
 80041dc:	789b      	ldrb	r3, [r3, #2]
 80041de:	021b      	lsls	r3, r3, #8
 80041e0:	430b      	orrs	r3, r1
 80041e2:	496d      	ldr	r1, [pc, #436]	; (8004398 <MX_LWIP_Init+0x288>)
 80041e4:	78c9      	ldrb	r1, [r1, #3]
 80041e6:	430b      	orrs	r3, r1
 80041e8:	0e1b      	lsrs	r3, r3, #24
 80041ea:	4313      	orrs	r3, r2
 80041ec:	4a6d      	ldr	r2, [pc, #436]	; (80043a4 <MX_LWIP_Init+0x294>)
 80041ee:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 80041f0:	4b6a      	ldr	r3, [pc, #424]	; (800439c <MX_LWIP_Init+0x28c>)
 80041f2:	781b      	ldrb	r3, [r3, #0]
 80041f4:	061a      	lsls	r2, r3, #24
 80041f6:	4b69      	ldr	r3, [pc, #420]	; (800439c <MX_LWIP_Init+0x28c>)
 80041f8:	785b      	ldrb	r3, [r3, #1]
 80041fa:	041b      	lsls	r3, r3, #16
 80041fc:	431a      	orrs	r2, r3
 80041fe:	4b67      	ldr	r3, [pc, #412]	; (800439c <MX_LWIP_Init+0x28c>)
 8004200:	789b      	ldrb	r3, [r3, #2]
 8004202:	021b      	lsls	r3, r3, #8
 8004204:	4313      	orrs	r3, r2
 8004206:	4a65      	ldr	r2, [pc, #404]	; (800439c <MX_LWIP_Init+0x28c>)
 8004208:	78d2      	ldrb	r2, [r2, #3]
 800420a:	4313      	orrs	r3, r2
 800420c:	061a      	lsls	r2, r3, #24
 800420e:	4b63      	ldr	r3, [pc, #396]	; (800439c <MX_LWIP_Init+0x28c>)
 8004210:	781b      	ldrb	r3, [r3, #0]
 8004212:	0619      	lsls	r1, r3, #24
 8004214:	4b61      	ldr	r3, [pc, #388]	; (800439c <MX_LWIP_Init+0x28c>)
 8004216:	785b      	ldrb	r3, [r3, #1]
 8004218:	041b      	lsls	r3, r3, #16
 800421a:	4319      	orrs	r1, r3
 800421c:	4b5f      	ldr	r3, [pc, #380]	; (800439c <MX_LWIP_Init+0x28c>)
 800421e:	789b      	ldrb	r3, [r3, #2]
 8004220:	021b      	lsls	r3, r3, #8
 8004222:	430b      	orrs	r3, r1
 8004224:	495d      	ldr	r1, [pc, #372]	; (800439c <MX_LWIP_Init+0x28c>)
 8004226:	78c9      	ldrb	r1, [r1, #3]
 8004228:	430b      	orrs	r3, r1
 800422a:	021b      	lsls	r3, r3, #8
 800422c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004230:	431a      	orrs	r2, r3
 8004232:	4b5a      	ldr	r3, [pc, #360]	; (800439c <MX_LWIP_Init+0x28c>)
 8004234:	781b      	ldrb	r3, [r3, #0]
 8004236:	0619      	lsls	r1, r3, #24
 8004238:	4b58      	ldr	r3, [pc, #352]	; (800439c <MX_LWIP_Init+0x28c>)
 800423a:	785b      	ldrb	r3, [r3, #1]
 800423c:	041b      	lsls	r3, r3, #16
 800423e:	4319      	orrs	r1, r3
 8004240:	4b56      	ldr	r3, [pc, #344]	; (800439c <MX_LWIP_Init+0x28c>)
 8004242:	789b      	ldrb	r3, [r3, #2]
 8004244:	021b      	lsls	r3, r3, #8
 8004246:	430b      	orrs	r3, r1
 8004248:	4954      	ldr	r1, [pc, #336]	; (800439c <MX_LWIP_Init+0x28c>)
 800424a:	78c9      	ldrb	r1, [r1, #3]
 800424c:	430b      	orrs	r3, r1
 800424e:	0a1b      	lsrs	r3, r3, #8
 8004250:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004254:	431a      	orrs	r2, r3
 8004256:	4b51      	ldr	r3, [pc, #324]	; (800439c <MX_LWIP_Init+0x28c>)
 8004258:	781b      	ldrb	r3, [r3, #0]
 800425a:	0619      	lsls	r1, r3, #24
 800425c:	4b4f      	ldr	r3, [pc, #316]	; (800439c <MX_LWIP_Init+0x28c>)
 800425e:	785b      	ldrb	r3, [r3, #1]
 8004260:	041b      	lsls	r3, r3, #16
 8004262:	4319      	orrs	r1, r3
 8004264:	4b4d      	ldr	r3, [pc, #308]	; (800439c <MX_LWIP_Init+0x28c>)
 8004266:	789b      	ldrb	r3, [r3, #2]
 8004268:	021b      	lsls	r3, r3, #8
 800426a:	430b      	orrs	r3, r1
 800426c:	494b      	ldr	r1, [pc, #300]	; (800439c <MX_LWIP_Init+0x28c>)
 800426e:	78c9      	ldrb	r1, [r1, #3]
 8004270:	430b      	orrs	r3, r1
 8004272:	0e1b      	lsrs	r3, r3, #24
 8004274:	4313      	orrs	r3, r2
 8004276:	4a4c      	ldr	r2, [pc, #304]	; (80043a8 <MX_LWIP_Init+0x298>)
 8004278:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800427a:	4b49      	ldr	r3, [pc, #292]	; (80043a0 <MX_LWIP_Init+0x290>)
 800427c:	781b      	ldrb	r3, [r3, #0]
 800427e:	061a      	lsls	r2, r3, #24
 8004280:	4b47      	ldr	r3, [pc, #284]	; (80043a0 <MX_LWIP_Init+0x290>)
 8004282:	785b      	ldrb	r3, [r3, #1]
 8004284:	041b      	lsls	r3, r3, #16
 8004286:	431a      	orrs	r2, r3
 8004288:	4b45      	ldr	r3, [pc, #276]	; (80043a0 <MX_LWIP_Init+0x290>)
 800428a:	789b      	ldrb	r3, [r3, #2]
 800428c:	021b      	lsls	r3, r3, #8
 800428e:	4313      	orrs	r3, r2
 8004290:	4a43      	ldr	r2, [pc, #268]	; (80043a0 <MX_LWIP_Init+0x290>)
 8004292:	78d2      	ldrb	r2, [r2, #3]
 8004294:	4313      	orrs	r3, r2
 8004296:	061a      	lsls	r2, r3, #24
 8004298:	4b41      	ldr	r3, [pc, #260]	; (80043a0 <MX_LWIP_Init+0x290>)
 800429a:	781b      	ldrb	r3, [r3, #0]
 800429c:	0619      	lsls	r1, r3, #24
 800429e:	4b40      	ldr	r3, [pc, #256]	; (80043a0 <MX_LWIP_Init+0x290>)
 80042a0:	785b      	ldrb	r3, [r3, #1]
 80042a2:	041b      	lsls	r3, r3, #16
 80042a4:	4319      	orrs	r1, r3
 80042a6:	4b3e      	ldr	r3, [pc, #248]	; (80043a0 <MX_LWIP_Init+0x290>)
 80042a8:	789b      	ldrb	r3, [r3, #2]
 80042aa:	021b      	lsls	r3, r3, #8
 80042ac:	430b      	orrs	r3, r1
 80042ae:	493c      	ldr	r1, [pc, #240]	; (80043a0 <MX_LWIP_Init+0x290>)
 80042b0:	78c9      	ldrb	r1, [r1, #3]
 80042b2:	430b      	orrs	r3, r1
 80042b4:	021b      	lsls	r3, r3, #8
 80042b6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80042ba:	431a      	orrs	r2, r3
 80042bc:	4b38      	ldr	r3, [pc, #224]	; (80043a0 <MX_LWIP_Init+0x290>)
 80042be:	781b      	ldrb	r3, [r3, #0]
 80042c0:	0619      	lsls	r1, r3, #24
 80042c2:	4b37      	ldr	r3, [pc, #220]	; (80043a0 <MX_LWIP_Init+0x290>)
 80042c4:	785b      	ldrb	r3, [r3, #1]
 80042c6:	041b      	lsls	r3, r3, #16
 80042c8:	4319      	orrs	r1, r3
 80042ca:	4b35      	ldr	r3, [pc, #212]	; (80043a0 <MX_LWIP_Init+0x290>)
 80042cc:	789b      	ldrb	r3, [r3, #2]
 80042ce:	021b      	lsls	r3, r3, #8
 80042d0:	430b      	orrs	r3, r1
 80042d2:	4933      	ldr	r1, [pc, #204]	; (80043a0 <MX_LWIP_Init+0x290>)
 80042d4:	78c9      	ldrb	r1, [r1, #3]
 80042d6:	430b      	orrs	r3, r1
 80042d8:	0a1b      	lsrs	r3, r3, #8
 80042da:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80042de:	431a      	orrs	r2, r3
 80042e0:	4b2f      	ldr	r3, [pc, #188]	; (80043a0 <MX_LWIP_Init+0x290>)
 80042e2:	781b      	ldrb	r3, [r3, #0]
 80042e4:	0619      	lsls	r1, r3, #24
 80042e6:	4b2e      	ldr	r3, [pc, #184]	; (80043a0 <MX_LWIP_Init+0x290>)
 80042e8:	785b      	ldrb	r3, [r3, #1]
 80042ea:	041b      	lsls	r3, r3, #16
 80042ec:	4319      	orrs	r1, r3
 80042ee:	4b2c      	ldr	r3, [pc, #176]	; (80043a0 <MX_LWIP_Init+0x290>)
 80042f0:	789b      	ldrb	r3, [r3, #2]
 80042f2:	021b      	lsls	r3, r3, #8
 80042f4:	430b      	orrs	r3, r1
 80042f6:	492a      	ldr	r1, [pc, #168]	; (80043a0 <MX_LWIP_Init+0x290>)
 80042f8:	78c9      	ldrb	r1, [r1, #3]
 80042fa:	430b      	orrs	r3, r1
 80042fc:	0e1b      	lsrs	r3, r3, #24
 80042fe:	4313      	orrs	r3, r2
 8004300:	4a2a      	ldr	r2, [pc, #168]	; (80043ac <MX_LWIP_Init+0x29c>)
 8004302:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8004304:	4b2a      	ldr	r3, [pc, #168]	; (80043b0 <MX_LWIP_Init+0x2a0>)
 8004306:	9302      	str	r3, [sp, #8]
 8004308:	4b2a      	ldr	r3, [pc, #168]	; (80043b4 <MX_LWIP_Init+0x2a4>)
 800430a:	9301      	str	r3, [sp, #4]
 800430c:	2300      	movs	r3, #0
 800430e:	9300      	str	r3, [sp, #0]
 8004310:	4b26      	ldr	r3, [pc, #152]	; (80043ac <MX_LWIP_Init+0x29c>)
 8004312:	4a25      	ldr	r2, [pc, #148]	; (80043a8 <MX_LWIP_Init+0x298>)
 8004314:	4923      	ldr	r1, [pc, #140]	; (80043a4 <MX_LWIP_Init+0x294>)
 8004316:	4828      	ldr	r0, [pc, #160]	; (80043b8 <MX_LWIP_Init+0x2a8>)
 8004318:	f007 ffd8 	bl	800c2cc <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800431c:	4826      	ldr	r0, [pc, #152]	; (80043b8 <MX_LWIP_Init+0x2a8>)
 800431e:	f008 f987 	bl	800c630 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8004322:	4b25      	ldr	r3, [pc, #148]	; (80043b8 <MX_LWIP_Init+0x2a8>)
 8004324:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004328:	089b      	lsrs	r3, r3, #2
 800432a:	f003 0301 	and.w	r3, r3, #1
 800432e:	b2db      	uxtb	r3, r3
 8004330:	2b00      	cmp	r3, #0
 8004332:	d003      	beq.n	800433c <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8004334:	4820      	ldr	r0, [pc, #128]	; (80043b8 <MX_LWIP_Init+0x2a8>)
 8004336:	f008 f98b 	bl	800c650 <netif_set_up>
 800433a:	e002      	b.n	8004342 <MX_LWIP_Init+0x232>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 800433c:	481e      	ldr	r0, [pc, #120]	; (80043b8 <MX_LWIP_Init+0x2a8>)
 800433e:	f008 f9f3 	bl	800c728 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 8004342:	491e      	ldr	r1, [pc, #120]	; (80043bc <MX_LWIP_Init+0x2ac>)
 8004344:	481c      	ldr	r0, [pc, #112]	; (80043b8 <MX_LWIP_Init+0x2a8>)
 8004346:	f008 fa85 	bl	800c854 <netif_set_link_callback>

  /* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(Netif_SEM);
 800434a:	2300      	movs	r3, #0
 800434c:	623b      	str	r3, [r7, #32]
 800434e:	2300      	movs	r3, #0
 8004350:	627b      	str	r3, [r7, #36]	; 0x24
  Netif_LinkSemaphore = osSemaphoreCreate(osSemaphore(Netif_SEM) , 1 );
 8004352:	f107 0320 	add.w	r3, r7, #32
 8004356:	2101      	movs	r1, #1
 8004358:	4618      	mov	r0, r3
 800435a:	f000 fd8f 	bl	8004e7c <osSemaphoreCreate>
 800435e:	4602      	mov	r2, r0
 8004360:	4b17      	ldr	r3, [pc, #92]	; (80043c0 <MX_LWIP_Init+0x2b0>)
 8004362:	601a      	str	r2, [r3, #0]

  link_arg.netif = &gnetif;
 8004364:	4b17      	ldr	r3, [pc, #92]	; (80043c4 <MX_LWIP_Init+0x2b4>)
 8004366:	4a14      	ldr	r2, [pc, #80]	; (80043b8 <MX_LWIP_Init+0x2a8>)
 8004368:	601a      	str	r2, [r3, #0]
  link_arg.semaphore = Netif_LinkSemaphore;
 800436a:	4b15      	ldr	r3, [pc, #84]	; (80043c0 <MX_LWIP_Init+0x2b0>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4a15      	ldr	r2, [pc, #84]	; (80043c4 <MX_LWIP_Init+0x2b4>)
 8004370:	6053      	str	r3, [r2, #4]
  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(LinkThr, ethernetif_set_link, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE * 2);
 8004372:	4b15      	ldr	r3, [pc, #84]	; (80043c8 <MX_LWIP_Init+0x2b8>)
 8004374:	1d3c      	adds	r4, r7, #4
 8004376:	461d      	mov	r5, r3
 8004378:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800437a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800437c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004380:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(LinkThr), &link_arg);
 8004384:	1d3b      	adds	r3, r7, #4
 8004386:	490f      	ldr	r1, [pc, #60]	; (80043c4 <MX_LWIP_Init+0x2b4>)
 8004388:	4618      	mov	r0, r3
 800438a:	f000 fc7b 	bl	8004c84 <osThreadCreate>
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800438e:	bf00      	nop
 8004390:	3728      	adds	r7, #40	; 0x28
 8004392:	46bd      	mov	sp, r7
 8004394:	bdb0      	pop	{r4, r5, r7, pc}
 8004396:	bf00      	nop
 8004398:	200049f0 	.word	0x200049f0
 800439c:	200049ec 	.word	0x200049ec
 80043a0:	200049b0 	.word	0x200049b0
 80043a4:	200049e8 	.word	0x200049e8
 80043a8:	200049f4 	.word	0x200049f4
 80043ac:	200049f8 	.word	0x200049f8
 80043b0:	0800b6d5 	.word	0x0800b6d5
 80043b4:	08004a21 	.word	0x08004a21
 80043b8:	200049b4 	.word	0x200049b4
 80043bc:	08004b05 	.word	0x08004b05
 80043c0:	200008dc 	.word	0x200008dc
 80043c4:	200049a8 	.word	0x200049a8
 80043c8:	0801808c 	.word	0x0801808c

080043cc <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b08e      	sub	sp, #56	; 0x38
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80043d8:	2200      	movs	r2, #0
 80043da:	601a      	str	r2, [r3, #0]
 80043dc:	605a      	str	r2, [r3, #4]
 80043de:	609a      	str	r2, [r3, #8]
 80043e0:	60da      	str	r2, [r3, #12]
 80043e2:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a56      	ldr	r2, [pc, #344]	; (8004544 <HAL_ETH_MspInit+0x178>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	f040 80a6 	bne.w	800453c <HAL_ETH_MspInit+0x170>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 80043f0:	4b55      	ldr	r3, [pc, #340]	; (8004548 <HAL_ETH_MspInit+0x17c>)
 80043f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043f4:	4a54      	ldr	r2, [pc, #336]	; (8004548 <HAL_ETH_MspInit+0x17c>)
 80043f6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80043fa:	6313      	str	r3, [r2, #48]	; 0x30
 80043fc:	4b52      	ldr	r3, [pc, #328]	; (8004548 <HAL_ETH_MspInit+0x17c>)
 80043fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004400:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004404:	623b      	str	r3, [r7, #32]
 8004406:	6a3b      	ldr	r3, [r7, #32]
 8004408:	4b4f      	ldr	r3, [pc, #316]	; (8004548 <HAL_ETH_MspInit+0x17c>)
 800440a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800440c:	4a4e      	ldr	r2, [pc, #312]	; (8004548 <HAL_ETH_MspInit+0x17c>)
 800440e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004412:	6313      	str	r3, [r2, #48]	; 0x30
 8004414:	4b4c      	ldr	r3, [pc, #304]	; (8004548 <HAL_ETH_MspInit+0x17c>)
 8004416:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004418:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800441c:	61fb      	str	r3, [r7, #28]
 800441e:	69fb      	ldr	r3, [r7, #28]
 8004420:	4b49      	ldr	r3, [pc, #292]	; (8004548 <HAL_ETH_MspInit+0x17c>)
 8004422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004424:	4a48      	ldr	r2, [pc, #288]	; (8004548 <HAL_ETH_MspInit+0x17c>)
 8004426:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800442a:	6313      	str	r3, [r2, #48]	; 0x30
 800442c:	4b46      	ldr	r3, [pc, #280]	; (8004548 <HAL_ETH_MspInit+0x17c>)
 800442e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004430:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004434:	61bb      	str	r3, [r7, #24]
 8004436:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004438:	4b43      	ldr	r3, [pc, #268]	; (8004548 <HAL_ETH_MspInit+0x17c>)
 800443a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800443c:	4a42      	ldr	r2, [pc, #264]	; (8004548 <HAL_ETH_MspInit+0x17c>)
 800443e:	f043 0304 	orr.w	r3, r3, #4
 8004442:	6313      	str	r3, [r2, #48]	; 0x30
 8004444:	4b40      	ldr	r3, [pc, #256]	; (8004548 <HAL_ETH_MspInit+0x17c>)
 8004446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004448:	f003 0304 	and.w	r3, r3, #4
 800444c:	617b      	str	r3, [r7, #20]
 800444e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004450:	4b3d      	ldr	r3, [pc, #244]	; (8004548 <HAL_ETH_MspInit+0x17c>)
 8004452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004454:	4a3c      	ldr	r2, [pc, #240]	; (8004548 <HAL_ETH_MspInit+0x17c>)
 8004456:	f043 0301 	orr.w	r3, r3, #1
 800445a:	6313      	str	r3, [r2, #48]	; 0x30
 800445c:	4b3a      	ldr	r3, [pc, #232]	; (8004548 <HAL_ETH_MspInit+0x17c>)
 800445e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004460:	f003 0301 	and.w	r3, r3, #1
 8004464:	613b      	str	r3, [r7, #16]
 8004466:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004468:	4b37      	ldr	r3, [pc, #220]	; (8004548 <HAL_ETH_MspInit+0x17c>)
 800446a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800446c:	4a36      	ldr	r2, [pc, #216]	; (8004548 <HAL_ETH_MspInit+0x17c>)
 800446e:	f043 0302 	orr.w	r3, r3, #2
 8004472:	6313      	str	r3, [r2, #48]	; 0x30
 8004474:	4b34      	ldr	r3, [pc, #208]	; (8004548 <HAL_ETH_MspInit+0x17c>)
 8004476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004478:	f003 0302 	and.w	r3, r3, #2
 800447c:	60fb      	str	r3, [r7, #12]
 800447e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8004480:	4b31      	ldr	r3, [pc, #196]	; (8004548 <HAL_ETH_MspInit+0x17c>)
 8004482:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004484:	4a30      	ldr	r2, [pc, #192]	; (8004548 <HAL_ETH_MspInit+0x17c>)
 8004486:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800448a:	6313      	str	r3, [r2, #48]	; 0x30
 800448c:	4b2e      	ldr	r3, [pc, #184]	; (8004548 <HAL_ETH_MspInit+0x17c>)
 800448e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004490:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004494:	60bb      	str	r3, [r7, #8]
 8004496:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8004498:	2332      	movs	r3, #50	; 0x32
 800449a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800449c:	2302      	movs	r3, #2
 800449e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044a0:	2300      	movs	r3, #0
 80044a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80044a4:	2303      	movs	r3, #3
 80044a6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80044a8:	230b      	movs	r3, #11
 80044aa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80044ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80044b0:	4619      	mov	r1, r3
 80044b2:	4826      	ldr	r0, [pc, #152]	; (800454c <HAL_ETH_MspInit+0x180>)
 80044b4:	f7fe fc5a 	bl	8002d6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 80044b8:	2386      	movs	r3, #134	; 0x86
 80044ba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044bc:	2302      	movs	r3, #2
 80044be:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044c0:	2300      	movs	r3, #0
 80044c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80044c4:	2303      	movs	r3, #3
 80044c6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80044c8:	230b      	movs	r3, #11
 80044ca:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80044cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80044d0:	4619      	mov	r1, r3
 80044d2:	481f      	ldr	r0, [pc, #124]	; (8004550 <HAL_ETH_MspInit+0x184>)
 80044d4:	f7fe fc4a 	bl	8002d6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80044d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80044dc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044de:	2302      	movs	r3, #2
 80044e0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044e2:	2300      	movs	r3, #0
 80044e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80044e6:	2303      	movs	r3, #3
 80044e8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80044ea:	230b      	movs	r3, #11
 80044ec:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80044ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80044f2:	4619      	mov	r1, r3
 80044f4:	4817      	ldr	r0, [pc, #92]	; (8004554 <HAL_ETH_MspInit+0x188>)
 80044f6:	f7fe fc39 	bl	8002d6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 80044fa:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80044fe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004500:	2302      	movs	r3, #2
 8004502:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004504:	2300      	movs	r3, #0
 8004506:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004508:	2303      	movs	r3, #3
 800450a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800450c:	230b      	movs	r3, #11
 800450e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004510:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004514:	4619      	mov	r1, r3
 8004516:	4810      	ldr	r0, [pc, #64]	; (8004558 <HAL_ETH_MspInit+0x18c>)
 8004518:	f7fe fc28 	bl	8002d6c <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 800451c:	2200      	movs	r2, #0
 800451e:	2105      	movs	r1, #5
 8004520:	203d      	movs	r0, #61	; 0x3d
 8004522:	f7fd fa73 	bl	8001a0c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8004526:	203d      	movs	r0, #61	; 0x3d
 8004528:	f7fd fa8c 	bl	8001a44 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(ETH_WKUP_IRQn, 5, 0);
 800452c:	2200      	movs	r2, #0
 800452e:	2105      	movs	r1, #5
 8004530:	203e      	movs	r0, #62	; 0x3e
 8004532:	f7fd fa6b 	bl	8001a0c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_WKUP_IRQn);
 8004536:	203e      	movs	r0, #62	; 0x3e
 8004538:	f7fd fa84 	bl	8001a44 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800453c:	bf00      	nop
 800453e:	3738      	adds	r7, #56	; 0x38
 8004540:	46bd      	mov	sp, r7
 8004542:	bd80      	pop	{r7, pc}
 8004544:	40028000 	.word	0x40028000
 8004548:	40023800 	.word	0x40023800
 800454c:	40020800 	.word	0x40020800
 8004550:	40020000 	.word	0x40020000
 8004554:	40020400 	.word	0x40020400
 8004558:	40021800 	.word	0x40021800

0800455c <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b082      	sub	sp, #8
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(s_xSemaphore);
 8004564:	4b04      	ldr	r3, [pc, #16]	; (8004578 <HAL_ETH_RxCpltCallback+0x1c>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	4618      	mov	r0, r3
 800456a:	f000 fd09 	bl	8004f80 <osSemaphoreRelease>
}
 800456e:	bf00      	nop
 8004570:	3708      	adds	r7, #8
 8004572:	46bd      	mov	sp, r7
 8004574:	bd80      	pop	{r7, pc}
 8004576:	bf00      	nop
 8004578:	200008e0 	.word	0x200008e0

0800457c <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800457c:	b5b0      	push	{r4, r5, r7, lr}
 800457e:	b090      	sub	sp, #64	; 0x40
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8004584:	2300      	movs	r3, #0
 8004586:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8004588:	4b5c      	ldr	r3, [pc, #368]	; (80046fc <low_level_init+0x180>)
 800458a:	4a5d      	ldr	r2, [pc, #372]	; (8004700 <low_level_init+0x184>)
 800458c:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 800458e:	4b5b      	ldr	r3, [pc, #364]	; (80046fc <low_level_init+0x180>)
 8004590:	2201      	movs	r2, #1
 8004592:	605a      	str	r2, [r3, #4]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8004594:	4b59      	ldr	r3, [pc, #356]	; (80046fc <low_level_init+0x180>)
 8004596:	2200      	movs	r2, #0
 8004598:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 800459a:	2300      	movs	r3, #0
 800459c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  MACAddr[1] = 0x80;
 80045a0:	2380      	movs	r3, #128	; 0x80
 80045a2:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  MACAddr[2] = 0xE1;
 80045a6:	23e1      	movs	r3, #225	; 0xe1
 80045a8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  MACAddr[3] = 0x00;
 80045ac:	2300      	movs	r3, #0
 80045ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  MACAddr[4] = 0x00;
 80045b2:	2300      	movs	r3, #0
 80045b4:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  MACAddr[5] = 0x01;
 80045b8:	2301      	movs	r3, #1
 80045ba:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  heth.Init.MACAddr = &MACAddr[0];
 80045be:	4a4f      	ldr	r2, [pc, #316]	; (80046fc <low_level_init+0x180>)
 80045c0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80045c4:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 80045c6:	4b4d      	ldr	r3, [pc, #308]	; (80046fc <low_level_init+0x180>)
 80045c8:	2201      	movs	r2, #1
 80045ca:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 80045cc:	4b4b      	ldr	r3, [pc, #300]	; (80046fc <low_level_init+0x180>)
 80045ce:	2200      	movs	r2, #0
 80045d0:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 80045d2:	4b4a      	ldr	r3, [pc, #296]	; (80046fc <low_level_init+0x180>)
 80045d4:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80045d8:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 80045da:	4848      	ldr	r0, [pc, #288]	; (80046fc <low_level_init+0x180>)
 80045dc:	f7fd fa40 	bl	8001a60 <HAL_ETH_Init>
 80045e0:	4603      	mov	r3, r0
 80045e2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if (hal_eth_init_status == HAL_OK)
 80045e6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d108      	bne.n	8004600 <low_level_init+0x84>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80045f4:	f043 0304 	orr.w	r3, r3, #4
 80045f8:	b2da      	uxtb	r2, r3
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8004600:	2304      	movs	r3, #4
 8004602:	4a40      	ldr	r2, [pc, #256]	; (8004704 <low_level_init+0x188>)
 8004604:	4940      	ldr	r1, [pc, #256]	; (8004708 <low_level_init+0x18c>)
 8004606:	483d      	ldr	r0, [pc, #244]	; (80046fc <low_level_init+0x180>)
 8004608:	f7fd fbc6 	bl	8001d98 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 800460c:	2304      	movs	r3, #4
 800460e:	4a3f      	ldr	r2, [pc, #252]	; (800470c <low_level_init+0x190>)
 8004610:	493f      	ldr	r1, [pc, #252]	; (8004710 <low_level_init+0x194>)
 8004612:	483a      	ldr	r0, [pc, #232]	; (80046fc <low_level_init+0x180>)
 8004614:	f7fd fc29 	bl	8001e6a <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2206      	movs	r2, #6
 800461c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8004620:	4b36      	ldr	r3, [pc, #216]	; (80046fc <low_level_init+0x180>)
 8004622:	695b      	ldr	r3, [r3, #20]
 8004624:	781a      	ldrb	r2, [r3, #0]
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800462c:	4b33      	ldr	r3, [pc, #204]	; (80046fc <low_level_init+0x180>)
 800462e:	695b      	ldr	r3, [r3, #20]
 8004630:	785a      	ldrb	r2, [r3, #1]
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8004638:	4b30      	ldr	r3, [pc, #192]	; (80046fc <low_level_init+0x180>)
 800463a:	695b      	ldr	r3, [r3, #20]
 800463c:	789a      	ldrb	r2, [r3, #2]
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8004644:	4b2d      	ldr	r3, [pc, #180]	; (80046fc <low_level_init+0x180>)
 8004646:	695b      	ldr	r3, [r3, #20]
 8004648:	78da      	ldrb	r2, [r3, #3]
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8004650:	4b2a      	ldr	r3, [pc, #168]	; (80046fc <low_level_init+0x180>)
 8004652:	695b      	ldr	r3, [r3, #20]
 8004654:	791a      	ldrb	r2, [r3, #4]
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800465c:	4b27      	ldr	r3, [pc, #156]	; (80046fc <low_level_init+0x180>)
 800465e:	695b      	ldr	r3, [r3, #20]
 8004660:	795a      	ldrb	r2, [r3, #5]
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = 1500;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800466e:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004676:	f043 030a 	orr.w	r3, r3, #10
 800467a:	b2da      	uxtb	r2, r3
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

/* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(SEM);
 8004682:	2300      	movs	r3, #0
 8004684:	62bb      	str	r3, [r7, #40]	; 0x28
 8004686:	2300      	movs	r3, #0
 8004688:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM), 1);
 800468a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800468e:	2101      	movs	r1, #1
 8004690:	4618      	mov	r0, r3
 8004692:	f000 fbf3 	bl	8004e7c <osSemaphoreCreate>
 8004696:	4602      	mov	r2, r0
 8004698:	4b1e      	ldr	r3, [pc, #120]	; (8004714 <low_level_init+0x198>)
 800469a:	601a      	str	r2, [r3, #0]

/* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 800469c:	4b1e      	ldr	r3, [pc, #120]	; (8004718 <low_level_init+0x19c>)
 800469e:	f107 040c 	add.w	r4, r7, #12
 80046a2:	461d      	mov	r5, r3
 80046a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80046a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80046a8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80046ac:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 80046b0:	f107 030c 	add.w	r3, r7, #12
 80046b4:	6879      	ldr	r1, [r7, #4]
 80046b6:	4618      	mov	r0, r3
 80046b8:	f000 fae4 	bl	8004c84 <osThreadCreate>
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 80046bc:	480f      	ldr	r0, [pc, #60]	; (80046fc <low_level_init+0x180>)
 80046be:	f7fd fefc 	bl	80024ba <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 80046c2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80046c6:	461a      	mov	r2, r3
 80046c8:	211d      	movs	r1, #29
 80046ca:	480c      	ldr	r0, [pc, #48]	; (80046fc <low_level_init+0x180>)
 80046cc:	f7fd fe27 	bl	800231e <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 80046d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046d2:	f043 030b 	orr.w	r3, r3, #11
 80046d6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 80046d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046da:	461a      	mov	r2, r3
 80046dc:	211d      	movs	r1, #29
 80046de:	4807      	ldr	r0, [pc, #28]	; (80046fc <low_level_init+0x180>)
 80046e0:	f7fd fe85 	bl	80023ee <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 80046e4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80046e8:	461a      	mov	r2, r3
 80046ea:	211d      	movs	r1, #29
 80046ec:	4803      	ldr	r0, [pc, #12]	; (80046fc <low_level_init+0x180>)
 80046ee:	f7fd fe16 	bl	800231e <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 80046f2:	bf00      	nop
 80046f4:	3740      	adds	r7, #64	; 0x40
 80046f6:	46bd      	mov	sp, r7
 80046f8:	bdb0      	pop	{r4, r5, r7, pc}
 80046fa:	bf00      	nop
 80046fc:	200062cc 	.word	0x200062cc
 8004700:	40028000 	.word	0x40028000
 8004704:	20006314 	.word	0x20006314
 8004708:	200049fc 	.word	0x200049fc
 800470c:	20004a7c 	.word	0x20004a7c
 8004710:	2000624c 	.word	0x2000624c
 8004714:	200008e0 	.word	0x200008e0
 8004718:	080180b0 	.word	0x080180b0

0800471c <low_level_output>:
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b08a      	sub	sp, #40	; 0x28
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
 8004724:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8004726:	4b4b      	ldr	r3, [pc, #300]	; (8004854 <low_level_output+0x138>)
 8004728:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800472a:	689b      	ldr	r3, [r3, #8]
 800472c:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 800472e:	2300      	movs	r3, #0
 8004730:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 8004732:	2300      	movs	r3, #0
 8004734:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 8004736:	2300      	movs	r3, #0
 8004738:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 800473a:	2300      	movs	r3, #0
 800473c:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 800473e:	4b45      	ldr	r3, [pc, #276]	; (8004854 <low_level_output+0x138>)
 8004740:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004742:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 8004744:	2300      	movs	r3, #0
 8004746:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	623b      	str	r3, [r7, #32]
 800474c:	e05a      	b.n	8004804 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800474e:	69bb      	ldr	r3, [r7, #24]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	2b00      	cmp	r3, #0
 8004754:	da03      	bge.n	800475e <low_level_output+0x42>
      {
        errval = ERR_USE;
 8004756:	23f8      	movs	r3, #248	; 0xf8
 8004758:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 800475c:	e05c      	b.n	8004818 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 800475e:	6a3b      	ldr	r3, [r7, #32]
 8004760:	895b      	ldrh	r3, [r3, #10]
 8004762:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 8004764:	2300      	movs	r3, #0
 8004766:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8004768:	e02f      	b.n	80047ca <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 800476a:	69fa      	ldr	r2, [r7, #28]
 800476c:	693b      	ldr	r3, [r7, #16]
 800476e:	18d0      	adds	r0, r2, r3
 8004770:	6a3b      	ldr	r3, [r7, #32]
 8004772:	685a      	ldr	r2, [r3, #4]
 8004774:	68bb      	ldr	r3, [r7, #8]
 8004776:	18d1      	adds	r1, r2, r3
 8004778:	693a      	ldr	r2, [r7, #16]
 800477a:	f240 53f4 	movw	r3, #1524	; 0x5f4
 800477e:	1a9b      	subs	r3, r3, r2
 8004780:	461a      	mov	r2, r3
 8004782:	f012 fb40 	bl	8016e06 <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 8004786:	69bb      	ldr	r3, [r7, #24]
 8004788:	68db      	ldr	r3, [r3, #12]
 800478a:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800478c:	69bb      	ldr	r3, [r7, #24]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	2b00      	cmp	r3, #0
 8004792:	da03      	bge.n	800479c <low_level_output+0x80>
        {
          errval = ERR_USE;
 8004794:	23f8      	movs	r3, #248	; 0xf8
 8004796:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 800479a:	e03d      	b.n	8004818 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 800479c:	69bb      	ldr	r3, [r7, #24]
 800479e:	689b      	ldr	r3, [r3, #8]
 80047a0:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 80047a2:	693a      	ldr	r2, [r7, #16]
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	4413      	add	r3, r2
 80047a8:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 80047ac:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 80047ae:	68ba      	ldr	r2, [r7, #8]
 80047b0:	693b      	ldr	r3, [r7, #16]
 80047b2:	1ad3      	subs	r3, r2, r3
 80047b4:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80047b8:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 80047ba:	697a      	ldr	r2, [r7, #20]
 80047bc:	693b      	ldr	r3, [r7, #16]
 80047be:	1ad3      	subs	r3, r2, r3
 80047c0:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80047c4:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 80047c6:	2300      	movs	r3, #0
 80047c8:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 80047ca:	68fa      	ldr	r2, [r7, #12]
 80047cc:	693b      	ldr	r3, [r7, #16]
 80047ce:	4413      	add	r3, r2
 80047d0:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d8c8      	bhi.n	800476a <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 80047d8:	69fa      	ldr	r2, [r7, #28]
 80047da:	693b      	ldr	r3, [r7, #16]
 80047dc:	18d0      	adds	r0, r2, r3
 80047de:	6a3b      	ldr	r3, [r7, #32]
 80047e0:	685a      	ldr	r2, [r3, #4]
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	4413      	add	r3, r2
 80047e6:	68fa      	ldr	r2, [r7, #12]
 80047e8:	4619      	mov	r1, r3
 80047ea:	f012 fb0c 	bl	8016e06 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 80047ee:	693a      	ldr	r2, [r7, #16]
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	4413      	add	r3, r2
 80047f4:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 80047f6:	697a      	ldr	r2, [r7, #20]
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	4413      	add	r3, r2
 80047fc:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 80047fe:	6a3b      	ldr	r3, [r7, #32]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	623b      	str	r3, [r7, #32]
 8004804:	6a3b      	ldr	r3, [r7, #32]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d1a1      	bne.n	800474e <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 800480a:	6979      	ldr	r1, [r7, #20]
 800480c:	4811      	ldr	r0, [pc, #68]	; (8004854 <low_level_output+0x138>)
 800480e:	f7fd fb99 	bl	8001f44 <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 8004812:	2300      	movs	r3, #0
 8004814:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8004818:	4b0e      	ldr	r3, [pc, #56]	; (8004854 <low_level_output+0x138>)
 800481a:	681a      	ldr	r2, [r3, #0]
 800481c:	f241 0314 	movw	r3, #4116	; 0x1014
 8004820:	4413      	add	r3, r2
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f003 0320 	and.w	r3, r3, #32
 8004828:	2b00      	cmp	r3, #0
 800482a:	d00d      	beq.n	8004848 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 800482c:	4b09      	ldr	r3, [pc, #36]	; (8004854 <low_level_output+0x138>)
 800482e:	681a      	ldr	r2, [r3, #0]
 8004830:	f241 0314 	movw	r3, #4116	; 0x1014
 8004834:	4413      	add	r3, r2
 8004836:	2220      	movs	r2, #32
 8004838:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 800483a:	4b06      	ldr	r3, [pc, #24]	; (8004854 <low_level_output+0x138>)
 800483c:	681a      	ldr	r2, [r3, #0]
 800483e:	f241 0304 	movw	r3, #4100	; 0x1004
 8004842:	4413      	add	r3, r2
 8004844:	2200      	movs	r2, #0
 8004846:	601a      	str	r2, [r3, #0]
  }
  return errval;
 8004848:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800484c:	4618      	mov	r0, r3
 800484e:	3728      	adds	r7, #40	; 0x28
 8004850:	46bd      	mov	sp, r7
 8004852:	bd80      	pop	{r7, pc}
 8004854:	200062cc 	.word	0x200062cc

08004858 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b08c      	sub	sp, #48	; 0x30
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8004860:	2300      	movs	r3, #0
 8004862:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 8004864:	2300      	movs	r3, #0
 8004866:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 8004868:	2300      	movs	r3, #0
 800486a:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 800486c:	2300      	movs	r3, #0
 800486e:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 8004870:	2300      	movs	r3, #0
 8004872:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 8004874:	2300      	movs	r3, #0
 8004876:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 8004878:	2300      	movs	r3, #0
 800487a:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 800487c:	484f      	ldr	r0, [pc, #316]	; (80049bc <low_level_input+0x164>)
 800487e:	f7fd fc4b 	bl	8002118 <HAL_ETH_GetReceivedFrame_IT>
 8004882:	4603      	mov	r3, r0
 8004884:	2b00      	cmp	r3, #0
 8004886:	d001      	beq.n	800488c <low_level_input+0x34>

    return NULL;
 8004888:	2300      	movs	r3, #0
 800488a:	e092      	b.n	80049b2 <low_level_input+0x15a>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 800488c:	4b4b      	ldr	r3, [pc, #300]	; (80049bc <low_level_input+0x164>)
 800488e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004890:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 8004892:	4b4a      	ldr	r3, [pc, #296]	; (80049bc <low_level_input+0x164>)
 8004894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004896:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 8004898:	89fb      	ldrh	r3, [r7, #14]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d007      	beq.n	80048ae <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 800489e:	89fb      	ldrh	r3, [r7, #14]
 80048a0:	f44f 72c1 	mov.w	r2, #386	; 0x182
 80048a4:	4619      	mov	r1, r3
 80048a6:	2000      	movs	r0, #0
 80048a8:	f008 f89e 	bl	800c9e8 <pbuf_alloc>
 80048ac:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 80048ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d04b      	beq.n	800494c <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 80048b4:	4b41      	ldr	r3, [pc, #260]	; (80049bc <low_level_input+0x164>)
 80048b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048b8:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 80048ba:	2300      	movs	r3, #0
 80048bc:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 80048be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80048c2:	e040      	b.n	8004946 <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 80048c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048c6:	895b      	ldrh	r3, [r3, #10]
 80048c8:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 80048ca:	2300      	movs	r3, #0
 80048cc:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 80048ce:	e021      	b.n	8004914 <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 80048d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048d2:	685a      	ldr	r2, [r3, #4]
 80048d4:	69bb      	ldr	r3, [r7, #24]
 80048d6:	18d0      	adds	r0, r2, r3
 80048d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048da:	69fb      	ldr	r3, [r7, #28]
 80048dc:	18d1      	adds	r1, r2, r3
 80048de:	69fa      	ldr	r2, [r7, #28]
 80048e0:	f240 53f4 	movw	r3, #1524	; 0x5f4
 80048e4:	1a9b      	subs	r3, r3, r2
 80048e6:	461a      	mov	r2, r3
 80048e8:	f012 fa8d 	bl	8016e06 <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 80048ec:	6a3b      	ldr	r3, [r7, #32]
 80048ee:	68db      	ldr	r3, [r3, #12]
 80048f0:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 80048f2:	6a3b      	ldr	r3, [r7, #32]
 80048f4:	689b      	ldr	r3, [r3, #8]
 80048f6:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 80048f8:	69fa      	ldr	r2, [r7, #28]
 80048fa:	697b      	ldr	r3, [r7, #20]
 80048fc:	4413      	add	r3, r2
 80048fe:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8004902:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8004904:	69ba      	ldr	r2, [r7, #24]
 8004906:	69fb      	ldr	r3, [r7, #28]
 8004908:	1ad3      	subs	r3, r2, r3
 800490a:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800490e:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 8004910:	2300      	movs	r3, #0
 8004912:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8004914:	697a      	ldr	r2, [r7, #20]
 8004916:	69fb      	ldr	r3, [r7, #28]
 8004918:	4413      	add	r3, r2
 800491a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800491e:	4293      	cmp	r3, r2
 8004920:	d8d6      	bhi.n	80048d0 <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 8004922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004924:	685a      	ldr	r2, [r3, #4]
 8004926:	69bb      	ldr	r3, [r7, #24]
 8004928:	18d0      	adds	r0, r2, r3
 800492a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800492c:	69fb      	ldr	r3, [r7, #28]
 800492e:	4413      	add	r3, r2
 8004930:	697a      	ldr	r2, [r7, #20]
 8004932:	4619      	mov	r1, r3
 8004934:	f012 fa67 	bl	8016e06 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8004938:	69fa      	ldr	r2, [r7, #28]
 800493a:	697b      	ldr	r3, [r7, #20]
 800493c:	4413      	add	r3, r2
 800493e:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8004940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	62bb      	str	r3, [r7, #40]	; 0x28
 8004946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004948:	2b00      	cmp	r3, #0
 800494a:	d1bb      	bne.n	80048c4 <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800494c:	4b1b      	ldr	r3, [pc, #108]	; (80049bc <low_level_input+0x164>)
 800494e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004950:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8004952:	2300      	movs	r3, #0
 8004954:	613b      	str	r3, [r7, #16]
 8004956:	e00b      	b.n	8004970 <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8004958:	6a3b      	ldr	r3, [r7, #32]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004960:	6a3b      	ldr	r3, [r7, #32]
 8004962:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8004964:	6a3b      	ldr	r3, [r7, #32]
 8004966:	68db      	ldr	r3, [r3, #12]
 8004968:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800496a:	693b      	ldr	r3, [r7, #16]
 800496c:	3301      	adds	r3, #1
 800496e:	613b      	str	r3, [r7, #16]
 8004970:	4b12      	ldr	r3, [pc, #72]	; (80049bc <low_level_input+0x164>)
 8004972:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004974:	693a      	ldr	r2, [r7, #16]
 8004976:	429a      	cmp	r2, r3
 8004978:	d3ee      	bcc.n	8004958 <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 800497a:	4b10      	ldr	r3, [pc, #64]	; (80049bc <low_level_input+0x164>)
 800497c:	2200      	movs	r2, #0
 800497e:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 8004980:	4b0e      	ldr	r3, [pc, #56]	; (80049bc <low_level_input+0x164>)
 8004982:	681a      	ldr	r2, [r3, #0]
 8004984:	f241 0314 	movw	r3, #4116	; 0x1014
 8004988:	4413      	add	r3, r2
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004990:	2b00      	cmp	r3, #0
 8004992:	d00d      	beq.n	80049b0 <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 8004994:	4b09      	ldr	r3, [pc, #36]	; (80049bc <low_level_input+0x164>)
 8004996:	681a      	ldr	r2, [r3, #0]
 8004998:	f241 0314 	movw	r3, #4116	; 0x1014
 800499c:	4413      	add	r3, r2
 800499e:	2280      	movs	r2, #128	; 0x80
 80049a0:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 80049a2:	4b06      	ldr	r3, [pc, #24]	; (80049bc <low_level_input+0x164>)
 80049a4:	681a      	ldr	r2, [r3, #0]
 80049a6:	f241 0308 	movw	r3, #4104	; 0x1008
 80049aa:	4413      	add	r3, r2
 80049ac:	2200      	movs	r2, #0
 80049ae:	601a      	str	r2, [r3, #0]
  }
  return p;
 80049b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80049b2:	4618      	mov	r0, r3
 80049b4:	3730      	adds	r7, #48	; 0x30
 80049b6:	46bd      	mov	sp, r7
 80049b8:	bd80      	pop	{r7, pc}
 80049ba:	bf00      	nop
 80049bc:	200062cc 	.word	0x200062cc

080049c0 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void const * argument)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b084      	sub	sp, #16
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	60fb      	str	r3, [r7, #12]

  for( ;; )
  {
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 80049cc:	4b12      	ldr	r3, [pc, #72]	; (8004a18 <ethernetif_input+0x58>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f04f 31ff 	mov.w	r1, #4294967295
 80049d4:	4618      	mov	r0, r3
 80049d6:	f000 fa85 	bl	8004ee4 <osSemaphoreWait>
 80049da:	4603      	mov	r3, r0
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d1f5      	bne.n	80049cc <ethernetif_input+0xc>
    {
      do
      {
        LOCK_TCPIP_CORE();
 80049e0:	480e      	ldr	r0, [pc, #56]	; (8004a1c <ethernetif_input+0x5c>)
 80049e2:	f012 f95d 	bl	8016ca0 <sys_mutex_lock>
        p = low_level_input( netif );
 80049e6:	68f8      	ldr	r0, [r7, #12]
 80049e8:	f7ff ff36 	bl	8004858 <low_level_input>
 80049ec:	60b8      	str	r0, [r7, #8]
        if   (p != NULL)
 80049ee:	68bb      	ldr	r3, [r7, #8]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d00a      	beq.n	8004a0a <ethernetif_input+0x4a>
        {
          if (netif->input( p, netif) != ERR_OK )
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	691b      	ldr	r3, [r3, #16]
 80049f8:	68f9      	ldr	r1, [r7, #12]
 80049fa:	68b8      	ldr	r0, [r7, #8]
 80049fc:	4798      	blx	r3
 80049fe:	4603      	mov	r3, r0
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d002      	beq.n	8004a0a <ethernetif_input+0x4a>
          {
            pbuf_free(p);
 8004a04:	68b8      	ldr	r0, [r7, #8]
 8004a06:	f008 fb01 	bl	800d00c <pbuf_free>
          }
        }
        UNLOCK_TCPIP_CORE();
 8004a0a:	4804      	ldr	r0, [pc, #16]	; (8004a1c <ethernetif_input+0x5c>)
 8004a0c:	f012 f957 	bl	8016cbe <sys_mutex_unlock>
      } while(p!=NULL);
 8004a10:	68bb      	ldr	r3, [r7, #8]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d1e4      	bne.n	80049e0 <ethernetif_input+0x20>
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8004a16:	e7d9      	b.n	80049cc <ethernetif_input+0xc>
 8004a18:	200008e0 	.word	0x200008e0
 8004a1c:	20007b24 	.word	0x20007b24

08004a20 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b082      	sub	sp, #8
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d106      	bne.n	8004a3c <ethernetif_init+0x1c>
 8004a2e:	4b0e      	ldr	r3, [pc, #56]	; (8004a68 <ethernetif_init+0x48>)
 8004a30:	f240 2237 	movw	r2, #567	; 0x237
 8004a34:	490d      	ldr	r1, [pc, #52]	; (8004a6c <ethernetif_init+0x4c>)
 8004a36:	480e      	ldr	r0, [pc, #56]	; (8004a70 <ethernetif_init+0x50>)
 8004a38:	f012 fa12 	bl	8016e60 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2273      	movs	r2, #115	; 0x73
 8004a40:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2274      	movs	r2, #116	; 0x74
 8004a48:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	4a09      	ldr	r2, [pc, #36]	; (8004a74 <ethernetif_init+0x54>)
 8004a50:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	4a08      	ldr	r2, [pc, #32]	; (8004a78 <ethernetif_init+0x58>)
 8004a56:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8004a58:	6878      	ldr	r0, [r7, #4]
 8004a5a:	f7ff fd8f 	bl	800457c <low_level_init>

  return ERR_OK;
 8004a5e:	2300      	movs	r3, #0
}
 8004a60:	4618      	mov	r0, r3
 8004a62:	3708      	adds	r7, #8
 8004a64:	46bd      	mov	sp, r7
 8004a66:	bd80      	pop	{r7, pc}
 8004a68:	080180cc 	.word	0x080180cc
 8004a6c:	080180e8 	.word	0x080180e8
 8004a70:	080180f8 	.word	0x080180f8
 8004a74:	08014a35 	.word	0x08014a35
 8004a78:	0800471d 	.word	0x0800471d

08004a7c <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8004a80:	f7fc fabc 	bl	8000ffc <HAL_GetTick>
 8004a84:	4603      	mov	r3, r0
}
 8004a86:	4618      	mov	r0, r3
 8004a88:	bd80      	pop	{r7, pc}
	...

08004a8c <ethernetif_set_link>:
  * @param  netif: the network interface
  * @retval None
  */
void ethernetif_set_link(void const *argument)

{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b084      	sub	sp, #16
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8004a94:	2300      	movs	r3, #0
 8004a96:	60bb      	str	r3, [r7, #8]
  struct link_str *link_arg = (struct link_str *)argument;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	60fb      	str	r3, [r7, #12]

  for(;;)
  {
    /* Read PHY_BSR*/
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8004a9c:	f107 0308 	add.w	r3, r7, #8
 8004aa0:	461a      	mov	r2, r3
 8004aa2:	2101      	movs	r1, #1
 8004aa4:	4816      	ldr	r0, [pc, #88]	; (8004b00 <ethernetif_set_link+0x74>)
 8004aa6:	f7fd fc3a 	bl	800231e <HAL_ETH_ReadPHYRegister>

    regvalue &= PHY_LINKED_STATUS;
 8004aaa:	68bb      	ldr	r3, [r7, #8]
 8004aac:	f003 0304 	and.w	r3, r3, #4
 8004ab0:	60bb      	str	r3, [r7, #8]

    /* Check whether the netif link down and the PHY link is up */
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004aba:	f003 0304 	and.w	r3, r3, #4
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d108      	bne.n	8004ad4 <ethernetif_set_link+0x48>
 8004ac2:	68bb      	ldr	r3, [r7, #8]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d005      	beq.n	8004ad4 <ethernetif_set_link+0x48>
    {
      /* network cable is connected */
      netif_set_link_up(link_arg->netif);
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	4618      	mov	r0, r3
 8004ace:	f007 fe5d 	bl	800c78c <netif_set_link_up>
 8004ad2:	e011      	b.n	8004af8 <ethernetif_set_link+0x6c>
    }
    else if(netif_is_link_up(link_arg->netif) && (!regvalue))
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004adc:	089b      	lsrs	r3, r3, #2
 8004ade:	f003 0301 	and.w	r3, r3, #1
 8004ae2:	b2db      	uxtb	r3, r3
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d007      	beq.n	8004af8 <ethernetif_set_link+0x6c>
 8004ae8:	68bb      	ldr	r3, [r7, #8]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d104      	bne.n	8004af8 <ethernetif_set_link+0x6c>
    {
      /* network cable is dis-connected */
      netif_set_link_down(link_arg->netif);
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4618      	mov	r0, r3
 8004af4:	f007 fe7e 	bl	800c7f4 <netif_set_link_down>
    }

    /* Suspend thread for 200 ms */
    osDelay(200);
 8004af8:	20c8      	movs	r0, #200	; 0xc8
 8004afa:	f000 f90f 	bl	8004d1c <osDelay>
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8004afe:	e7cd      	b.n	8004a9c <ethernetif_set_link+0x10>
 8004b00:	200062cc 	.word	0x200062cc

08004b04 <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b084      	sub	sp, #16
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 8004b10:	2300      	movs	r3, #0
 8004b12:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004b1a:	089b      	lsrs	r3, r3, #2
 8004b1c:	f003 0301 	and.w	r3, r3, #1
 8004b20:	b2db      	uxtb	r3, r3
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d05d      	beq.n	8004be2 <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8004b26:	4b34      	ldr	r3, [pc, #208]	; (8004bf8 <ethernetif_update_config+0xf4>)
 8004b28:	685b      	ldr	r3, [r3, #4]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d03f      	beq.n	8004bae <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 8004b2e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004b32:	2100      	movs	r1, #0
 8004b34:	4830      	ldr	r0, [pc, #192]	; (8004bf8 <ethernetif_update_config+0xf4>)
 8004b36:	f7fd fc5a 	bl	80023ee <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 8004b3a:	f7fc fa5f 	bl	8000ffc <HAL_GetTick>
 8004b3e:	4603      	mov	r3, r0
 8004b40:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8004b42:	f107 0308 	add.w	r3, r7, #8
 8004b46:	461a      	mov	r2, r3
 8004b48:	2101      	movs	r1, #1
 8004b4a:	482b      	ldr	r0, [pc, #172]	; (8004bf8 <ethernetif_update_config+0xf4>)
 8004b4c:	f7fd fbe7 	bl	800231e <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 8004b50:	f7fc fa54 	bl	8000ffc <HAL_GetTick>
 8004b54:	4602      	mov	r2, r0
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	1ad3      	subs	r3, r2, r3
 8004b5a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004b5e:	d828      	bhi.n	8004bb2 <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	f003 0320 	and.w	r3, r3, #32
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d0eb      	beq.n	8004b42 <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 8004b6a:	f107 0308 	add.w	r3, r7, #8
 8004b6e:	461a      	mov	r2, r3
 8004b70:	211f      	movs	r1, #31
 8004b72:	4821      	ldr	r0, [pc, #132]	; (8004bf8 <ethernetif_update_config+0xf4>)
 8004b74:	f7fd fbd3 	bl	800231e <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8004b78:	68bb      	ldr	r3, [r7, #8]
 8004b7a:	f003 0310 	and.w	r3, r3, #16
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d004      	beq.n	8004b8c <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8004b82:	4b1d      	ldr	r3, [pc, #116]	; (8004bf8 <ethernetif_update_config+0xf4>)
 8004b84:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004b88:	60da      	str	r2, [r3, #12]
 8004b8a:	e002      	b.n	8004b92 <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 8004b8c:	4b1a      	ldr	r3, [pc, #104]	; (8004bf8 <ethernetif_update_config+0xf4>)
 8004b8e:	2200      	movs	r2, #0
 8004b90:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 8004b92:	68bb      	ldr	r3, [r7, #8]
 8004b94:	f003 0304 	and.w	r3, r3, #4
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d003      	beq.n	8004ba4 <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 8004b9c:	4b16      	ldr	r3, [pc, #88]	; (8004bf8 <ethernetif_update_config+0xf4>)
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	609a      	str	r2, [r3, #8]
 8004ba2:	e016      	b.n	8004bd2 <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 8004ba4:	4b14      	ldr	r3, [pc, #80]	; (8004bf8 <ethernetif_update_config+0xf4>)
 8004ba6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004baa:	609a      	str	r2, [r3, #8]
 8004bac:	e011      	b.n	8004bd2 <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 8004bae:	bf00      	nop
 8004bb0:	e000      	b.n	8004bb4 <ethernetif_update_config+0xb0>
          goto error;
 8004bb2:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8004bb4:	4b10      	ldr	r3, [pc, #64]	; (8004bf8 <ethernetif_update_config+0xf4>)
 8004bb6:	68db      	ldr	r3, [r3, #12]
 8004bb8:	08db      	lsrs	r3, r3, #3
 8004bba:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 8004bbc:	4b0e      	ldr	r3, [pc, #56]	; (8004bf8 <ethernetif_update_config+0xf4>)
 8004bbe:	689b      	ldr	r3, [r3, #8]
 8004bc0:	085b      	lsrs	r3, r3, #1
 8004bc2:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8004bc4:	4313      	orrs	r3, r2
 8004bc6:	b29b      	uxth	r3, r3
 8004bc8:	461a      	mov	r2, r3
 8004bca:	2100      	movs	r1, #0
 8004bcc:	480a      	ldr	r0, [pc, #40]	; (8004bf8 <ethernetif_update_config+0xf4>)
 8004bce:	f7fd fc0e 	bl	80023ee <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 8004bd2:	2100      	movs	r1, #0
 8004bd4:	4808      	ldr	r0, [pc, #32]	; (8004bf8 <ethernetif_update_config+0xf4>)
 8004bd6:	f7fd fccf 	bl	8002578 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 8004bda:	4807      	ldr	r0, [pc, #28]	; (8004bf8 <ethernetif_update_config+0xf4>)
 8004bdc:	f7fd fc6d 	bl	80024ba <HAL_ETH_Start>
 8004be0:	e002      	b.n	8004be8 <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 8004be2:	4805      	ldr	r0, [pc, #20]	; (8004bf8 <ethernetif_update_config+0xf4>)
 8004be4:	f7fd fc98 	bl	8002518 <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 8004be8:	6878      	ldr	r0, [r7, #4]
 8004bea:	f000 f807 	bl	8004bfc <ethernetif_notify_conn_changed>
}
 8004bee:	bf00      	nop
 8004bf0:	3710      	adds	r7, #16
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	bd80      	pop	{r7, pc}
 8004bf6:	bf00      	nop
 8004bf8:	200062cc 	.word	0x200062cc

08004bfc <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 8004bfc:	b480      	push	{r7}
 8004bfe:	b083      	sub	sp, #12
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 8004c04:	bf00      	nop
 8004c06:	370c      	adds	r7, #12
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0e:	4770      	bx	lr

08004c10 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004c10:	b480      	push	{r7}
 8004c12:	b085      	sub	sp, #20
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	4603      	mov	r3, r0
 8004c18:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004c1e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004c22:	2b84      	cmp	r3, #132	; 0x84
 8004c24:	d005      	beq.n	8004c32 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8004c26:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	4413      	add	r3, r2
 8004c2e:	3303      	adds	r3, #3
 8004c30:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004c32:	68fb      	ldr	r3, [r7, #12]
}
 8004c34:	4618      	mov	r0, r3
 8004c36:	3714      	adds	r7, #20
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3e:	4770      	bx	lr

08004c40 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8004c40:	b480      	push	{r7}
 8004c42:	b083      	sub	sp, #12
 8004c44:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004c46:	f3ef 8305 	mrs	r3, IPSR
 8004c4a:	607b      	str	r3, [r7, #4]
  return(result);
 8004c4c:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	bf14      	ite	ne
 8004c52:	2301      	movne	r3, #1
 8004c54:	2300      	moveq	r3, #0
 8004c56:	b2db      	uxtb	r3, r3
}
 8004c58:	4618      	mov	r0, r3
 8004c5a:	370c      	adds	r7, #12
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c62:	4770      	bx	lr

08004c64 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8004c68:	f7ff ffea 	bl	8004c40 <inHandlerMode>
 8004c6c:	4603      	mov	r3, r0
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d003      	beq.n	8004c7a <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8004c72:	f001 ff45 	bl	8006b00 <xTaskGetTickCountFromISR>
 8004c76:	4603      	mov	r3, r0
 8004c78:	e002      	b.n	8004c80 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8004c7a:	f001 ff31 	bl	8006ae0 <xTaskGetTickCount>
 8004c7e:	4603      	mov	r3, r0
  }
}
 8004c80:	4618      	mov	r0, r3
 8004c82:	bd80      	pop	{r7, pc}

08004c84 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004c84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004c86:	b089      	sub	sp, #36	; 0x24
 8004c88:	af04      	add	r7, sp, #16
 8004c8a:	6078      	str	r0, [r7, #4]
 8004c8c:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	695b      	ldr	r3, [r3, #20]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d020      	beq.n	8004cd8 <osThreadCreate+0x54>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	699b      	ldr	r3, [r3, #24]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d01c      	beq.n	8004cd8 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	685c      	ldr	r4, [r3, #4]
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681d      	ldr	r5, [r3, #0]
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	691e      	ldr	r6, [r3, #16]
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	f7ff ffad 	bl	8004c10 <makeFreeRtosPriority>
 8004cb6:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	695b      	ldr	r3, [r3, #20]
 8004cbc:	687a      	ldr	r2, [r7, #4]
 8004cbe:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004cc0:	9202      	str	r2, [sp, #8]
 8004cc2:	9301      	str	r3, [sp, #4]
 8004cc4:	9100      	str	r1, [sp, #0]
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	4632      	mov	r2, r6
 8004cca:	4629      	mov	r1, r5
 8004ccc:	4620      	mov	r0, r4
 8004cce:	f001 fba5 	bl	800641c <xTaskCreateStatic>
 8004cd2:	4603      	mov	r3, r0
 8004cd4:	60fb      	str	r3, [r7, #12]
 8004cd6:	e01c      	b.n	8004d12 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	685c      	ldr	r4, [r3, #4]
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004ce4:	b29e      	uxth	r6, r3
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004cec:	4618      	mov	r0, r3
 8004cee:	f7ff ff8f 	bl	8004c10 <makeFreeRtosPriority>
 8004cf2:	4602      	mov	r2, r0
 8004cf4:	f107 030c 	add.w	r3, r7, #12
 8004cf8:	9301      	str	r3, [sp, #4]
 8004cfa:	9200      	str	r2, [sp, #0]
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	4632      	mov	r2, r6
 8004d00:	4629      	mov	r1, r5
 8004d02:	4620      	mov	r0, r4
 8004d04:	f001 fbea 	bl	80064dc <xTaskCreate>
 8004d08:	4603      	mov	r3, r0
 8004d0a:	2b01      	cmp	r3, #1
 8004d0c:	d001      	beq.n	8004d12 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8004d0e:	2300      	movs	r3, #0
 8004d10:	e000      	b.n	8004d14 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004d12:	68fb      	ldr	r3, [r7, #12]
}
 8004d14:	4618      	mov	r0, r3
 8004d16:	3714      	adds	r7, #20
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004d1c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b084      	sub	sp, #16
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d001      	beq.n	8004d32 <osDelay+0x16>
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	e000      	b.n	8004d34 <osDelay+0x18>
 8004d32:	2301      	movs	r3, #1
 8004d34:	4618      	mov	r0, r3
 8004d36:	f001 fd89 	bl	800684c <vTaskDelay>
  
  return osOK;
 8004d3a:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	3710      	adds	r7, #16
 8004d40:	46bd      	mov	sp, r7
 8004d42:	bd80      	pop	{r7, pc}

08004d44 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b082      	sub	sp, #8
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	685b      	ldr	r3, [r3, #4]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d007      	beq.n	8004d64 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	685b      	ldr	r3, [r3, #4]
 8004d58:	4619      	mov	r1, r3
 8004d5a:	2001      	movs	r0, #1
 8004d5c:	f000 fc8d 	bl	800567a <xQueueCreateMutexStatic>
 8004d60:	4603      	mov	r3, r0
 8004d62:	e003      	b.n	8004d6c <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8004d64:	2001      	movs	r0, #1
 8004d66:	f000 fc70 	bl	800564a <xQueueCreateMutex>
 8004d6a:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	3708      	adds	r7, #8
 8004d70:	46bd      	mov	sp, r7
 8004d72:	bd80      	pop	{r7, pc}

08004d74 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b084      	sub	sp, #16
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
 8004d7c:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8004d7e:	2300      	movs	r3, #0
 8004d80:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d101      	bne.n	8004d8c <osMutexWait+0x18>
    return osErrorParameter;
 8004d88:	2380      	movs	r3, #128	; 0x80
 8004d8a:	e03a      	b.n	8004e02 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d96:	d103      	bne.n	8004da0 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8004d98:	f04f 33ff 	mov.w	r3, #4294967295
 8004d9c:	60fb      	str	r3, [r7, #12]
 8004d9e:	e009      	b.n	8004db4 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d006      	beq.n	8004db4 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d101      	bne.n	8004db4 <osMutexWait+0x40>
      ticks = 1;
 8004db0:	2301      	movs	r3, #1
 8004db2:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8004db4:	f7ff ff44 	bl	8004c40 <inHandlerMode>
 8004db8:	4603      	mov	r3, r0
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d017      	beq.n	8004dee <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8004dbe:	f107 0308 	add.w	r3, r7, #8
 8004dc2:	461a      	mov	r2, r3
 8004dc4:	2100      	movs	r1, #0
 8004dc6:	6878      	ldr	r0, [r7, #4]
 8004dc8:	f001 f894 	bl	8005ef4 <xQueueReceiveFromISR>
 8004dcc:	4603      	mov	r3, r0
 8004dce:	2b01      	cmp	r3, #1
 8004dd0:	d001      	beq.n	8004dd6 <osMutexWait+0x62>
      return osErrorOS;
 8004dd2:	23ff      	movs	r3, #255	; 0xff
 8004dd4:	e015      	b.n	8004e02 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8004dd6:	68bb      	ldr	r3, [r7, #8]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d011      	beq.n	8004e00 <osMutexWait+0x8c>
 8004ddc:	4b0b      	ldr	r3, [pc, #44]	; (8004e0c <osMutexWait+0x98>)
 8004dde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004de2:	601a      	str	r2, [r3, #0]
 8004de4:	f3bf 8f4f 	dsb	sy
 8004de8:	f3bf 8f6f 	isb	sy
 8004dec:	e008      	b.n	8004e00 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8004dee:	68f9      	ldr	r1, [r7, #12]
 8004df0:	6878      	ldr	r0, [r7, #4]
 8004df2:	f000 ff6f 	bl	8005cd4 <xQueueSemaphoreTake>
 8004df6:	4603      	mov	r3, r0
 8004df8:	2b01      	cmp	r3, #1
 8004dfa:	d001      	beq.n	8004e00 <osMutexWait+0x8c>
    return osErrorOS;
 8004dfc:	23ff      	movs	r3, #255	; 0xff
 8004dfe:	e000      	b.n	8004e02 <osMutexWait+0x8e>
  }
  
  return osOK;
 8004e00:	2300      	movs	r3, #0
}
 8004e02:	4618      	mov	r0, r3
 8004e04:	3710      	adds	r7, #16
 8004e06:	46bd      	mov	sp, r7
 8004e08:	bd80      	pop	{r7, pc}
 8004e0a:	bf00      	nop
 8004e0c:	e000ed04 	.word	0xe000ed04

08004e10 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b084      	sub	sp, #16
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8004e18:	2300      	movs	r3, #0
 8004e1a:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8004e20:	f7ff ff0e 	bl	8004c40 <inHandlerMode>
 8004e24:	4603      	mov	r3, r0
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d016      	beq.n	8004e58 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8004e2a:	f107 0308 	add.w	r3, r7, #8
 8004e2e:	4619      	mov	r1, r3
 8004e30:	6878      	ldr	r0, [r7, #4]
 8004e32:	f000 fddb 	bl	80059ec <xQueueGiveFromISR>
 8004e36:	4603      	mov	r3, r0
 8004e38:	2b01      	cmp	r3, #1
 8004e3a:	d001      	beq.n	8004e40 <osMutexRelease+0x30>
      return osErrorOS;
 8004e3c:	23ff      	movs	r3, #255	; 0xff
 8004e3e:	e017      	b.n	8004e70 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d013      	beq.n	8004e6e <osMutexRelease+0x5e>
 8004e46:	4b0c      	ldr	r3, [pc, #48]	; (8004e78 <osMutexRelease+0x68>)
 8004e48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e4c:	601a      	str	r2, [r3, #0]
 8004e4e:	f3bf 8f4f 	dsb	sy
 8004e52:	f3bf 8f6f 	isb	sy
 8004e56:	e00a      	b.n	8004e6e <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8004e58:	2300      	movs	r3, #0
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	2100      	movs	r1, #0
 8004e5e:	6878      	ldr	r0, [r7, #4]
 8004e60:	f000 fc26 	bl	80056b0 <xQueueGenericSend>
 8004e64:	4603      	mov	r3, r0
 8004e66:	2b01      	cmp	r3, #1
 8004e68:	d001      	beq.n	8004e6e <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8004e6a:	23ff      	movs	r3, #255	; 0xff
 8004e6c:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
}
 8004e70:	4618      	mov	r0, r3
 8004e72:	3710      	adds	r7, #16
 8004e74:	46bd      	mov	sp, r7
 8004e76:	bd80      	pop	{r7, pc}
 8004e78:	e000ed04 	.word	0xe000ed04

08004e7c <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b086      	sub	sp, #24
 8004e80:	af02      	add	r7, sp, #8
 8004e82:	6078      	str	r0, [r7, #4]
 8004e84:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	685b      	ldr	r3, [r3, #4]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d010      	beq.n	8004eb0 <osSemaphoreCreate+0x34>
    if (count == 1) {
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	2b01      	cmp	r3, #1
 8004e92:	d10b      	bne.n	8004eac <osSemaphoreCreate+0x30>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	685a      	ldr	r2, [r3, #4]
 8004e98:	2303      	movs	r3, #3
 8004e9a:	9300      	str	r3, [sp, #0]
 8004e9c:	4613      	mov	r3, r2
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	2100      	movs	r1, #0
 8004ea2:	2001      	movs	r0, #1
 8004ea4:	f000 fada 	bl	800545c <xQueueGenericCreateStatic>
 8004ea8:	4603      	mov	r3, r0
 8004eaa:	e016      	b.n	8004eda <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8004eac:	2300      	movs	r3, #0
 8004eae:	e014      	b.n	8004eda <osSemaphoreCreate+0x5e>
#endif
    }
  }
  else {
    if (count == 1) {
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	2b01      	cmp	r3, #1
 8004eb4:	d110      	bne.n	8004ed8 <osSemaphoreCreate+0x5c>
      vSemaphoreCreateBinary(sema);
 8004eb6:	2203      	movs	r2, #3
 8004eb8:	2100      	movs	r1, #0
 8004eba:	2001      	movs	r0, #1
 8004ebc:	f000 fb4b 	bl	8005556 <xQueueGenericCreate>
 8004ec0:	60f8      	str	r0, [r7, #12]
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d005      	beq.n	8004ed4 <osSemaphoreCreate+0x58>
 8004ec8:	2300      	movs	r3, #0
 8004eca:	2200      	movs	r2, #0
 8004ecc:	2100      	movs	r1, #0
 8004ece:	68f8      	ldr	r0, [r7, #12]
 8004ed0:	f000 fbee 	bl	80056b0 <xQueueGenericSend>
      return sema;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	e000      	b.n	8004eda <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8004ed8:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8004eda:	4618      	mov	r0, r3
 8004edc:	3710      	adds	r7, #16
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	bd80      	pop	{r7, pc}
	...

08004ee4 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b084      	sub	sp, #16
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
 8004eec:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8004eee:	2300      	movs	r3, #0
 8004ef0:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d101      	bne.n	8004efc <osSemaphoreWait+0x18>
    return osErrorParameter;
 8004ef8:	2380      	movs	r3, #128	; 0x80
 8004efa:	e03a      	b.n	8004f72 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8004efc:	2300      	movs	r3, #0
 8004efe:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f06:	d103      	bne.n	8004f10 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8004f08:	f04f 33ff 	mov.w	r3, #4294967295
 8004f0c:	60fb      	str	r3, [r7, #12]
 8004f0e:	e009      	b.n	8004f24 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d006      	beq.n	8004f24 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d101      	bne.n	8004f24 <osSemaphoreWait+0x40>
      ticks = 1;
 8004f20:	2301      	movs	r3, #1
 8004f22:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8004f24:	f7ff fe8c 	bl	8004c40 <inHandlerMode>
 8004f28:	4603      	mov	r3, r0
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d017      	beq.n	8004f5e <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8004f2e:	f107 0308 	add.w	r3, r7, #8
 8004f32:	461a      	mov	r2, r3
 8004f34:	2100      	movs	r1, #0
 8004f36:	6878      	ldr	r0, [r7, #4]
 8004f38:	f000 ffdc 	bl	8005ef4 <xQueueReceiveFromISR>
 8004f3c:	4603      	mov	r3, r0
 8004f3e:	2b01      	cmp	r3, #1
 8004f40:	d001      	beq.n	8004f46 <osSemaphoreWait+0x62>
      return osErrorOS;
 8004f42:	23ff      	movs	r3, #255	; 0xff
 8004f44:	e015      	b.n	8004f72 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8004f46:	68bb      	ldr	r3, [r7, #8]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d011      	beq.n	8004f70 <osSemaphoreWait+0x8c>
 8004f4c:	4b0b      	ldr	r3, [pc, #44]	; (8004f7c <osSemaphoreWait+0x98>)
 8004f4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f52:	601a      	str	r2, [r3, #0]
 8004f54:	f3bf 8f4f 	dsb	sy
 8004f58:	f3bf 8f6f 	isb	sy
 8004f5c:	e008      	b.n	8004f70 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8004f5e:	68f9      	ldr	r1, [r7, #12]
 8004f60:	6878      	ldr	r0, [r7, #4]
 8004f62:	f000 feb7 	bl	8005cd4 <xQueueSemaphoreTake>
 8004f66:	4603      	mov	r3, r0
 8004f68:	2b01      	cmp	r3, #1
 8004f6a:	d001      	beq.n	8004f70 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8004f6c:	23ff      	movs	r3, #255	; 0xff
 8004f6e:	e000      	b.n	8004f72 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8004f70:	2300      	movs	r3, #0
}
 8004f72:	4618      	mov	r0, r3
 8004f74:	3710      	adds	r7, #16
 8004f76:	46bd      	mov	sp, r7
 8004f78:	bd80      	pop	{r7, pc}
 8004f7a:	bf00      	nop
 8004f7c:	e000ed04 	.word	0xe000ed04

08004f80 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b084      	sub	sp, #16
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8004f88:	2300      	movs	r3, #0
 8004f8a:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8004f90:	f7ff fe56 	bl	8004c40 <inHandlerMode>
 8004f94:	4603      	mov	r3, r0
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d016      	beq.n	8004fc8 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8004f9a:	f107 0308 	add.w	r3, r7, #8
 8004f9e:	4619      	mov	r1, r3
 8004fa0:	6878      	ldr	r0, [r7, #4]
 8004fa2:	f000 fd23 	bl	80059ec <xQueueGiveFromISR>
 8004fa6:	4603      	mov	r3, r0
 8004fa8:	2b01      	cmp	r3, #1
 8004faa:	d001      	beq.n	8004fb0 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8004fac:	23ff      	movs	r3, #255	; 0xff
 8004fae:	e017      	b.n	8004fe0 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d013      	beq.n	8004fde <osSemaphoreRelease+0x5e>
 8004fb6:	4b0c      	ldr	r3, [pc, #48]	; (8004fe8 <osSemaphoreRelease+0x68>)
 8004fb8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004fbc:	601a      	str	r2, [r3, #0]
 8004fbe:	f3bf 8f4f 	dsb	sy
 8004fc2:	f3bf 8f6f 	isb	sy
 8004fc6:	e00a      	b.n	8004fde <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8004fc8:	2300      	movs	r3, #0
 8004fca:	2200      	movs	r2, #0
 8004fcc:	2100      	movs	r1, #0
 8004fce:	6878      	ldr	r0, [r7, #4]
 8004fd0:	f000 fb6e 	bl	80056b0 <xQueueGenericSend>
 8004fd4:	4603      	mov	r3, r0
 8004fd6:	2b01      	cmp	r3, #1
 8004fd8:	d001      	beq.n	8004fde <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8004fda:	23ff      	movs	r3, #255	; 0xff
 8004fdc:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8004fde:	68fb      	ldr	r3, [r7, #12]
}
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	3710      	adds	r7, #16
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	bd80      	pop	{r7, pc}
 8004fe8:	e000ed04 	.word	0xe000ed04

08004fec <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b082      	sub	sp, #8
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8004ff4:	f7ff fe24 	bl	8004c40 <inHandlerMode>
 8004ff8:	4603      	mov	r3, r0
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d001      	beq.n	8005002 <osSemaphoreDelete+0x16>
    return osErrorISR;
 8004ffe:	2382      	movs	r3, #130	; 0x82
 8005000:	e003      	b.n	800500a <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 8005002:	6878      	ldr	r0, [r7, #4]
 8005004:	f001 f837 	bl	8006076 <vQueueDelete>

  return osOK; 
 8005008:	2300      	movs	r3, #0
}
 800500a:	4618      	mov	r0, r3
 800500c:	3708      	adds	r7, #8
 800500e:	46bd      	mov	sp, r7
 8005010:	bd80      	pop	{r7, pc}

08005012 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8005012:	b590      	push	{r4, r7, lr}
 8005014:	b085      	sub	sp, #20
 8005016:	af02      	add	r7, sp, #8
 8005018:	6078      	str	r0, [r7, #4]
 800501a:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	689b      	ldr	r3, [r3, #8]
 8005020:	2b00      	cmp	r3, #0
 8005022:	d012      	beq.n	800504a <osMessageCreate+0x38>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	68db      	ldr	r3, [r3, #12]
 8005028:	2b00      	cmp	r3, #0
 800502a:	d00e      	beq.n	800504a <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6818      	ldr	r0, [r3, #0]
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	6859      	ldr	r1, [r3, #4]
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	689a      	ldr	r2, [r3, #8]
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	68dc      	ldr	r4, [r3, #12]
 800503c:	2300      	movs	r3, #0
 800503e:	9300      	str	r3, [sp, #0]
 8005040:	4623      	mov	r3, r4
 8005042:	f000 fa0b 	bl	800545c <xQueueGenericCreateStatic>
 8005046:	4603      	mov	r3, r0
 8005048:	e008      	b.n	800505c <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6818      	ldr	r0, [r3, #0]
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	685b      	ldr	r3, [r3, #4]
 8005052:	2200      	movs	r2, #0
 8005054:	4619      	mov	r1, r3
 8005056:	f000 fa7e 	bl	8005556 <xQueueGenericCreate>
 800505a:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800505c:	4618      	mov	r0, r3
 800505e:	370c      	adds	r7, #12
 8005060:	46bd      	mov	sp, r7
 8005062:	bd90      	pop	{r4, r7, pc}

08005064 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b086      	sub	sp, #24
 8005068:	af00      	add	r7, sp, #0
 800506a:	60f8      	str	r0, [r7, #12]
 800506c:	60b9      	str	r1, [r7, #8]
 800506e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8005070:	2300      	movs	r3, #0
 8005072:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8005078:	697b      	ldr	r3, [r7, #20]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d101      	bne.n	8005082 <osMessagePut+0x1e>
    ticks = 1;
 800507e:	2301      	movs	r3, #1
 8005080:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8005082:	f7ff fddd 	bl	8004c40 <inHandlerMode>
 8005086:	4603      	mov	r3, r0
 8005088:	2b00      	cmp	r3, #0
 800508a:	d018      	beq.n	80050be <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800508c:	f107 0210 	add.w	r2, r7, #16
 8005090:	f107 0108 	add.w	r1, r7, #8
 8005094:	2300      	movs	r3, #0
 8005096:	68f8      	ldr	r0, [r7, #12]
 8005098:	f000 fc0c 	bl	80058b4 <xQueueGenericSendFromISR>
 800509c:	4603      	mov	r3, r0
 800509e:	2b01      	cmp	r3, #1
 80050a0:	d001      	beq.n	80050a6 <osMessagePut+0x42>
      return osErrorOS;
 80050a2:	23ff      	movs	r3, #255	; 0xff
 80050a4:	e018      	b.n	80050d8 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80050a6:	693b      	ldr	r3, [r7, #16]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d014      	beq.n	80050d6 <osMessagePut+0x72>
 80050ac:	4b0c      	ldr	r3, [pc, #48]	; (80050e0 <osMessagePut+0x7c>)
 80050ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050b2:	601a      	str	r2, [r3, #0]
 80050b4:	f3bf 8f4f 	dsb	sy
 80050b8:	f3bf 8f6f 	isb	sy
 80050bc:	e00b      	b.n	80050d6 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 80050be:	f107 0108 	add.w	r1, r7, #8
 80050c2:	2300      	movs	r3, #0
 80050c4:	697a      	ldr	r2, [r7, #20]
 80050c6:	68f8      	ldr	r0, [r7, #12]
 80050c8:	f000 faf2 	bl	80056b0 <xQueueGenericSend>
 80050cc:	4603      	mov	r3, r0
 80050ce:	2b01      	cmp	r3, #1
 80050d0:	d001      	beq.n	80050d6 <osMessagePut+0x72>
      return osErrorOS;
 80050d2:	23ff      	movs	r3, #255	; 0xff
 80050d4:	e000      	b.n	80050d8 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 80050d6:	2300      	movs	r3, #0
}
 80050d8:	4618      	mov	r0, r3
 80050da:	3718      	adds	r7, #24
 80050dc:	46bd      	mov	sp, r7
 80050de:	bd80      	pop	{r7, pc}
 80050e0:	e000ed04 	.word	0xe000ed04

080050e4 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 80050e4:	b590      	push	{r4, r7, lr}
 80050e6:	b08b      	sub	sp, #44	; 0x2c
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	60f8      	str	r0, [r7, #12]
 80050ec:	60b9      	str	r1, [r7, #8]
 80050ee:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 80050f0:	68bb      	ldr	r3, [r7, #8]
 80050f2:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 80050f4:	2300      	movs	r3, #0
 80050f6:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 80050f8:	68bb      	ldr	r3, [r7, #8]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d10a      	bne.n	8005114 <osMessageGet+0x30>
    event.status = osErrorParameter;
 80050fe:	2380      	movs	r3, #128	; 0x80
 8005100:	617b      	str	r3, [r7, #20]
    return event;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	461c      	mov	r4, r3
 8005106:	f107 0314 	add.w	r3, r7, #20
 800510a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800510e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005112:	e054      	b.n	80051be <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8005114:	2300      	movs	r3, #0
 8005116:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8005118:	2300      	movs	r3, #0
 800511a:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005122:	d103      	bne.n	800512c <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8005124:	f04f 33ff 	mov.w	r3, #4294967295
 8005128:	627b      	str	r3, [r7, #36]	; 0x24
 800512a:	e009      	b.n	8005140 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d006      	beq.n	8005140 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8005136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005138:	2b00      	cmp	r3, #0
 800513a:	d101      	bne.n	8005140 <osMessageGet+0x5c>
      ticks = 1;
 800513c:	2301      	movs	r3, #1
 800513e:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8005140:	f7ff fd7e 	bl	8004c40 <inHandlerMode>
 8005144:	4603      	mov	r3, r0
 8005146:	2b00      	cmp	r3, #0
 8005148:	d01c      	beq.n	8005184 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800514a:	f107 0220 	add.w	r2, r7, #32
 800514e:	f107 0314 	add.w	r3, r7, #20
 8005152:	3304      	adds	r3, #4
 8005154:	4619      	mov	r1, r3
 8005156:	68b8      	ldr	r0, [r7, #8]
 8005158:	f000 fecc 	bl	8005ef4 <xQueueReceiveFromISR>
 800515c:	4603      	mov	r3, r0
 800515e:	2b01      	cmp	r3, #1
 8005160:	d102      	bne.n	8005168 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8005162:	2310      	movs	r3, #16
 8005164:	617b      	str	r3, [r7, #20]
 8005166:	e001      	b.n	800516c <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8005168:	2300      	movs	r3, #0
 800516a:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800516c:	6a3b      	ldr	r3, [r7, #32]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d01d      	beq.n	80051ae <osMessageGet+0xca>
 8005172:	4b15      	ldr	r3, [pc, #84]	; (80051c8 <osMessageGet+0xe4>)
 8005174:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005178:	601a      	str	r2, [r3, #0]
 800517a:	f3bf 8f4f 	dsb	sy
 800517e:	f3bf 8f6f 	isb	sy
 8005182:	e014      	b.n	80051ae <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8005184:	f107 0314 	add.w	r3, r7, #20
 8005188:	3304      	adds	r3, #4
 800518a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800518c:	4619      	mov	r1, r3
 800518e:	68b8      	ldr	r0, [r7, #8]
 8005190:	f000 fcbe 	bl	8005b10 <xQueueReceive>
 8005194:	4603      	mov	r3, r0
 8005196:	2b01      	cmp	r3, #1
 8005198:	d102      	bne.n	80051a0 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800519a:	2310      	movs	r3, #16
 800519c:	617b      	str	r3, [r7, #20]
 800519e:	e006      	b.n	80051ae <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 80051a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d101      	bne.n	80051aa <osMessageGet+0xc6>
 80051a6:	2300      	movs	r3, #0
 80051a8:	e000      	b.n	80051ac <osMessageGet+0xc8>
 80051aa:	2340      	movs	r3, #64	; 0x40
 80051ac:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	461c      	mov	r4, r3
 80051b2:	f107 0314 	add.w	r3, r7, #20
 80051b6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80051ba:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80051be:	68f8      	ldr	r0, [r7, #12]
 80051c0:	372c      	adds	r7, #44	; 0x2c
 80051c2:	46bd      	mov	sp, r7
 80051c4:	bd90      	pop	{r4, r7, pc}
 80051c6:	bf00      	nop
 80051c8:	e000ed04 	.word	0xe000ed04

080051cc <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b082      	sub	sp, #8
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 80051d4:	f7ff fd34 	bl	8004c40 <inHandlerMode>
 80051d8:	4603      	mov	r3, r0
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d004      	beq.n	80051e8 <osMessageWaiting+0x1c>
    return uxQueueMessagesWaitingFromISR(queue_id);
 80051de:	6878      	ldr	r0, [r7, #4]
 80051e0:	f000 ff2a 	bl	8006038 <uxQueueMessagesWaitingFromISR>
 80051e4:	4603      	mov	r3, r0
 80051e6:	e003      	b.n	80051f0 <osMessageWaiting+0x24>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 80051e8:	6878      	ldr	r0, [r7, #4]
 80051ea:	f000 ff06 	bl	8005ffa <uxQueueMessagesWaiting>
 80051ee:	4603      	mov	r3, r0
  }
}
 80051f0:	4618      	mov	r0, r3
 80051f2:	3708      	adds	r7, #8
 80051f4:	46bd      	mov	sp, r7
 80051f6:	bd80      	pop	{r7, pc}

080051f8 <osMessageDelete>:
* @brief Delete a Message Queue
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osMessageDelete (osMessageQId queue_id)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b082      	sub	sp, #8
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8005200:	f7ff fd1e 	bl	8004c40 <inHandlerMode>
 8005204:	4603      	mov	r3, r0
 8005206:	2b00      	cmp	r3, #0
 8005208:	d001      	beq.n	800520e <osMessageDelete+0x16>
    return osErrorISR;
 800520a:	2382      	movs	r3, #130	; 0x82
 800520c:	e003      	b.n	8005216 <osMessageDelete+0x1e>
  }

  vQueueDelete(queue_id);
 800520e:	6878      	ldr	r0, [r7, #4]
 8005210:	f000 ff31 	bl	8006076 <vQueueDelete>

  return osOK; 
 8005214:	2300      	movs	r3, #0
}
 8005216:	4618      	mov	r0, r3
 8005218:	3708      	adds	r7, #8
 800521a:	46bd      	mov	sp, r7
 800521c:	bd80      	pop	{r7, pc}

0800521e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800521e:	b480      	push	{r7}
 8005220:	b083      	sub	sp, #12
 8005222:	af00      	add	r7, sp, #0
 8005224:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	f103 0208 	add.w	r2, r3, #8
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	f04f 32ff 	mov.w	r2, #4294967295
 8005236:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	f103 0208 	add.w	r2, r3, #8
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	f103 0208 	add.w	r2, r3, #8
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2200      	movs	r2, #0
 8005250:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005252:	bf00      	nop
 8005254:	370c      	adds	r7, #12
 8005256:	46bd      	mov	sp, r7
 8005258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525c:	4770      	bx	lr

0800525e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800525e:	b480      	push	{r7}
 8005260:	b083      	sub	sp, #12
 8005262:	af00      	add	r7, sp, #0
 8005264:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2200      	movs	r2, #0
 800526a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800526c:	bf00      	nop
 800526e:	370c      	adds	r7, #12
 8005270:	46bd      	mov	sp, r7
 8005272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005276:	4770      	bx	lr

08005278 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005278:	b480      	push	{r7}
 800527a:	b085      	sub	sp, #20
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
 8005280:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	685b      	ldr	r3, [r3, #4]
 8005286:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	68fa      	ldr	r2, [r7, #12]
 800528c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	689a      	ldr	r2, [r3, #8]
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	689b      	ldr	r3, [r3, #8]
 800529a:	683a      	ldr	r2, [r7, #0]
 800529c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	683a      	ldr	r2, [r7, #0]
 80052a2:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	687a      	ldr	r2, [r7, #4]
 80052a8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	1c5a      	adds	r2, r3, #1
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	601a      	str	r2, [r3, #0]
}
 80052b4:	bf00      	nop
 80052b6:	3714      	adds	r7, #20
 80052b8:	46bd      	mov	sp, r7
 80052ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052be:	4770      	bx	lr

080052c0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80052c0:	b480      	push	{r7}
 80052c2:	b085      	sub	sp, #20
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
 80052c8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80052d0:	68bb      	ldr	r3, [r7, #8]
 80052d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052d6:	d103      	bne.n	80052e0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	691b      	ldr	r3, [r3, #16]
 80052dc:	60fb      	str	r3, [r7, #12]
 80052de:	e00c      	b.n	80052fa <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	3308      	adds	r3, #8
 80052e4:	60fb      	str	r3, [r7, #12]
 80052e6:	e002      	b.n	80052ee <vListInsert+0x2e>
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	685b      	ldr	r3, [r3, #4]
 80052ec:	60fb      	str	r3, [r7, #12]
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	685b      	ldr	r3, [r3, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	68ba      	ldr	r2, [r7, #8]
 80052f6:	429a      	cmp	r2, r3
 80052f8:	d2f6      	bcs.n	80052e8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	685a      	ldr	r2, [r3, #4]
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	685b      	ldr	r3, [r3, #4]
 8005306:	683a      	ldr	r2, [r7, #0]
 8005308:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	68fa      	ldr	r2, [r7, #12]
 800530e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	683a      	ldr	r2, [r7, #0]
 8005314:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	687a      	ldr	r2, [r7, #4]
 800531a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	1c5a      	adds	r2, r3, #1
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	601a      	str	r2, [r3, #0]
}
 8005326:	bf00      	nop
 8005328:	3714      	adds	r7, #20
 800532a:	46bd      	mov	sp, r7
 800532c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005330:	4770      	bx	lr

08005332 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005332:	b480      	push	{r7}
 8005334:	b085      	sub	sp, #20
 8005336:	af00      	add	r7, sp, #0
 8005338:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	691b      	ldr	r3, [r3, #16]
 800533e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	685b      	ldr	r3, [r3, #4]
 8005344:	687a      	ldr	r2, [r7, #4]
 8005346:	6892      	ldr	r2, [r2, #8]
 8005348:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	689b      	ldr	r3, [r3, #8]
 800534e:	687a      	ldr	r2, [r7, #4]
 8005350:	6852      	ldr	r2, [r2, #4]
 8005352:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	685b      	ldr	r3, [r3, #4]
 8005358:	687a      	ldr	r2, [r7, #4]
 800535a:	429a      	cmp	r2, r3
 800535c:	d103      	bne.n	8005366 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	689a      	ldr	r2, [r3, #8]
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2200      	movs	r2, #0
 800536a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	1e5a      	subs	r2, r3, #1
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
}
 800537a:	4618      	mov	r0, r3
 800537c:	3714      	adds	r7, #20
 800537e:	46bd      	mov	sp, r7
 8005380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005384:	4770      	bx	lr
	...

08005388 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005388:	b580      	push	{r7, lr}
 800538a:	b084      	sub	sp, #16
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
 8005390:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d10b      	bne.n	80053b4 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800539c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053a0:	b672      	cpsid	i
 80053a2:	f383 8811 	msr	BASEPRI, r3
 80053a6:	f3bf 8f6f 	isb	sy
 80053aa:	f3bf 8f4f 	dsb	sy
 80053ae:	b662      	cpsie	i
 80053b0:	60bb      	str	r3, [r7, #8]
 80053b2:	e7fe      	b.n	80053b2 <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
 80053b4:	f002 fdb8 	bl	8007f28 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681a      	ldr	r2, [r3, #0]
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053c0:	68f9      	ldr	r1, [r7, #12]
 80053c2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80053c4:	fb01 f303 	mul.w	r3, r1, r3
 80053c8:	441a      	add	r2, r3
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	2200      	movs	r2, #0
 80053d2:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681a      	ldr	r2, [r3, #0]
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681a      	ldr	r2, [r3, #0]
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053e4:	3b01      	subs	r3, #1
 80053e6:	68f9      	ldr	r1, [r7, #12]
 80053e8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80053ea:	fb01 f303 	mul.w	r3, r1, r3
 80053ee:	441a      	add	r2, r3
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	22ff      	movs	r2, #255	; 0xff
 80053f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	22ff      	movs	r2, #255	; 0xff
 8005400:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d114      	bne.n	8005434 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	691b      	ldr	r3, [r3, #16]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d01a      	beq.n	8005448 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	3310      	adds	r3, #16
 8005416:	4618      	mov	r0, r3
 8005418:	f001 fcec 	bl	8006df4 <xTaskRemoveFromEventList>
 800541c:	4603      	mov	r3, r0
 800541e:	2b00      	cmp	r3, #0
 8005420:	d012      	beq.n	8005448 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005422:	4b0d      	ldr	r3, [pc, #52]	; (8005458 <xQueueGenericReset+0xd0>)
 8005424:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005428:	601a      	str	r2, [r3, #0]
 800542a:	f3bf 8f4f 	dsb	sy
 800542e:	f3bf 8f6f 	isb	sy
 8005432:	e009      	b.n	8005448 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	3310      	adds	r3, #16
 8005438:	4618      	mov	r0, r3
 800543a:	f7ff fef0 	bl	800521e <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	3324      	adds	r3, #36	; 0x24
 8005442:	4618      	mov	r0, r3
 8005444:	f7ff feeb 	bl	800521e <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005448:	f002 fda0 	bl	8007f8c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800544c:	2301      	movs	r3, #1
}
 800544e:	4618      	mov	r0, r3
 8005450:	3710      	adds	r7, #16
 8005452:	46bd      	mov	sp, r7
 8005454:	bd80      	pop	{r7, pc}
 8005456:	bf00      	nop
 8005458:	e000ed04 	.word	0xe000ed04

0800545c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800545c:	b580      	push	{r7, lr}
 800545e:	b08e      	sub	sp, #56	; 0x38
 8005460:	af02      	add	r7, sp, #8
 8005462:	60f8      	str	r0, [r7, #12]
 8005464:	60b9      	str	r1, [r7, #8]
 8005466:	607a      	str	r2, [r7, #4]
 8005468:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d10b      	bne.n	8005488 <xQueueGenericCreateStatic+0x2c>
 8005470:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005474:	b672      	cpsid	i
 8005476:	f383 8811 	msr	BASEPRI, r3
 800547a:	f3bf 8f6f 	isb	sy
 800547e:	f3bf 8f4f 	dsb	sy
 8005482:	b662      	cpsie	i
 8005484:	62bb      	str	r3, [r7, #40]	; 0x28
 8005486:	e7fe      	b.n	8005486 <xQueueGenericCreateStatic+0x2a>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d10b      	bne.n	80054a6 <xQueueGenericCreateStatic+0x4a>
 800548e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005492:	b672      	cpsid	i
 8005494:	f383 8811 	msr	BASEPRI, r3
 8005498:	f3bf 8f6f 	isb	sy
 800549c:	f3bf 8f4f 	dsb	sy
 80054a0:	b662      	cpsie	i
 80054a2:	627b      	str	r3, [r7, #36]	; 0x24
 80054a4:	e7fe      	b.n	80054a4 <xQueueGenericCreateStatic+0x48>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d002      	beq.n	80054b2 <xQueueGenericCreateStatic+0x56>
 80054ac:	68bb      	ldr	r3, [r7, #8]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d001      	beq.n	80054b6 <xQueueGenericCreateStatic+0x5a>
 80054b2:	2301      	movs	r3, #1
 80054b4:	e000      	b.n	80054b8 <xQueueGenericCreateStatic+0x5c>
 80054b6:	2300      	movs	r3, #0
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d10b      	bne.n	80054d4 <xQueueGenericCreateStatic+0x78>
 80054bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054c0:	b672      	cpsid	i
 80054c2:	f383 8811 	msr	BASEPRI, r3
 80054c6:	f3bf 8f6f 	isb	sy
 80054ca:	f3bf 8f4f 	dsb	sy
 80054ce:	b662      	cpsie	i
 80054d0:	623b      	str	r3, [r7, #32]
 80054d2:	e7fe      	b.n	80054d2 <xQueueGenericCreateStatic+0x76>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d102      	bne.n	80054e0 <xQueueGenericCreateStatic+0x84>
 80054da:	68bb      	ldr	r3, [r7, #8]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d101      	bne.n	80054e4 <xQueueGenericCreateStatic+0x88>
 80054e0:	2301      	movs	r3, #1
 80054e2:	e000      	b.n	80054e6 <xQueueGenericCreateStatic+0x8a>
 80054e4:	2300      	movs	r3, #0
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d10b      	bne.n	8005502 <xQueueGenericCreateStatic+0xa6>
 80054ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054ee:	b672      	cpsid	i
 80054f0:	f383 8811 	msr	BASEPRI, r3
 80054f4:	f3bf 8f6f 	isb	sy
 80054f8:	f3bf 8f4f 	dsb	sy
 80054fc:	b662      	cpsie	i
 80054fe:	61fb      	str	r3, [r7, #28]
 8005500:	e7fe      	b.n	8005500 <xQueueGenericCreateStatic+0xa4>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005502:	2348      	movs	r3, #72	; 0x48
 8005504:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005506:	697b      	ldr	r3, [r7, #20]
 8005508:	2b48      	cmp	r3, #72	; 0x48
 800550a:	d00b      	beq.n	8005524 <xQueueGenericCreateStatic+0xc8>
 800550c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005510:	b672      	cpsid	i
 8005512:	f383 8811 	msr	BASEPRI, r3
 8005516:	f3bf 8f6f 	isb	sy
 800551a:	f3bf 8f4f 	dsb	sy
 800551e:	b662      	cpsie	i
 8005520:	61bb      	str	r3, [r7, #24]
 8005522:	e7fe      	b.n	8005522 <xQueueGenericCreateStatic+0xc6>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005524:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800552a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800552c:	2b00      	cmp	r3, #0
 800552e:	d00d      	beq.n	800554c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005532:	2201      	movs	r2, #1
 8005534:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005538:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800553c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800553e:	9300      	str	r3, [sp, #0]
 8005540:	4613      	mov	r3, r2
 8005542:	687a      	ldr	r2, [r7, #4]
 8005544:	68b9      	ldr	r1, [r7, #8]
 8005546:	68f8      	ldr	r0, [r7, #12]
 8005548:	f000 f846 	bl	80055d8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800554c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800554e:	4618      	mov	r0, r3
 8005550:	3730      	adds	r7, #48	; 0x30
 8005552:	46bd      	mov	sp, r7
 8005554:	bd80      	pop	{r7, pc}

08005556 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005556:	b580      	push	{r7, lr}
 8005558:	b08a      	sub	sp, #40	; 0x28
 800555a:	af02      	add	r7, sp, #8
 800555c:	60f8      	str	r0, [r7, #12]
 800555e:	60b9      	str	r1, [r7, #8]
 8005560:	4613      	mov	r3, r2
 8005562:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d10b      	bne.n	8005582 <xQueueGenericCreate+0x2c>
 800556a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800556e:	b672      	cpsid	i
 8005570:	f383 8811 	msr	BASEPRI, r3
 8005574:	f3bf 8f6f 	isb	sy
 8005578:	f3bf 8f4f 	dsb	sy
 800557c:	b662      	cpsie	i
 800557e:	613b      	str	r3, [r7, #16]
 8005580:	e7fe      	b.n	8005580 <xQueueGenericCreate+0x2a>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8005582:	68bb      	ldr	r3, [r7, #8]
 8005584:	2b00      	cmp	r3, #0
 8005586:	d102      	bne.n	800558e <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8005588:	2300      	movs	r3, #0
 800558a:	61fb      	str	r3, [r7, #28]
 800558c:	e004      	b.n	8005598 <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	68ba      	ldr	r2, [r7, #8]
 8005592:	fb02 f303 	mul.w	r3, r2, r3
 8005596:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005598:	69fb      	ldr	r3, [r7, #28]
 800559a:	3348      	adds	r3, #72	; 0x48
 800559c:	4618      	mov	r0, r3
 800559e:	f002 fde5 	bl	800816c <pvPortMalloc>
 80055a2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80055a4:	69bb      	ldr	r3, [r7, #24]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d011      	beq.n	80055ce <xQueueGenericCreate+0x78>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80055aa:	69bb      	ldr	r3, [r7, #24]
 80055ac:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80055ae:	697b      	ldr	r3, [r7, #20]
 80055b0:	3348      	adds	r3, #72	; 0x48
 80055b2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80055b4:	69bb      	ldr	r3, [r7, #24]
 80055b6:	2200      	movs	r2, #0
 80055b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80055bc:	79fa      	ldrb	r2, [r7, #7]
 80055be:	69bb      	ldr	r3, [r7, #24]
 80055c0:	9300      	str	r3, [sp, #0]
 80055c2:	4613      	mov	r3, r2
 80055c4:	697a      	ldr	r2, [r7, #20]
 80055c6:	68b9      	ldr	r1, [r7, #8]
 80055c8:	68f8      	ldr	r0, [r7, #12]
 80055ca:	f000 f805 	bl	80055d8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80055ce:	69bb      	ldr	r3, [r7, #24]
	}
 80055d0:	4618      	mov	r0, r3
 80055d2:	3720      	adds	r7, #32
 80055d4:	46bd      	mov	sp, r7
 80055d6:	bd80      	pop	{r7, pc}

080055d8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	b084      	sub	sp, #16
 80055dc:	af00      	add	r7, sp, #0
 80055de:	60f8      	str	r0, [r7, #12]
 80055e0:	60b9      	str	r1, [r7, #8]
 80055e2:	607a      	str	r2, [r7, #4]
 80055e4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80055e6:	68bb      	ldr	r3, [r7, #8]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d103      	bne.n	80055f4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80055ec:	69bb      	ldr	r3, [r7, #24]
 80055ee:	69ba      	ldr	r2, [r7, #24]
 80055f0:	601a      	str	r2, [r3, #0]
 80055f2:	e002      	b.n	80055fa <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80055f4:	69bb      	ldr	r3, [r7, #24]
 80055f6:	687a      	ldr	r2, [r7, #4]
 80055f8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80055fa:	69bb      	ldr	r3, [r7, #24]
 80055fc:	68fa      	ldr	r2, [r7, #12]
 80055fe:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005600:	69bb      	ldr	r3, [r7, #24]
 8005602:	68ba      	ldr	r2, [r7, #8]
 8005604:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005606:	2101      	movs	r1, #1
 8005608:	69b8      	ldr	r0, [r7, #24]
 800560a:	f7ff febd 	bl	8005388 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800560e:	bf00      	nop
 8005610:	3710      	adds	r7, #16
 8005612:	46bd      	mov	sp, r7
 8005614:	bd80      	pop	{r7, pc}

08005616 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8005616:	b580      	push	{r7, lr}
 8005618:	b082      	sub	sp, #8
 800561a:	af00      	add	r7, sp, #0
 800561c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d00e      	beq.n	8005642 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2200      	movs	r2, #0
 8005628:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	2200      	movs	r2, #0
 800562e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2200      	movs	r2, #0
 8005634:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8005636:	2300      	movs	r3, #0
 8005638:	2200      	movs	r2, #0
 800563a:	2100      	movs	r1, #0
 800563c:	6878      	ldr	r0, [r7, #4]
 800563e:	f000 f837 	bl	80056b0 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8005642:	bf00      	nop
 8005644:	3708      	adds	r7, #8
 8005646:	46bd      	mov	sp, r7
 8005648:	bd80      	pop	{r7, pc}

0800564a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800564a:	b580      	push	{r7, lr}
 800564c:	b086      	sub	sp, #24
 800564e:	af00      	add	r7, sp, #0
 8005650:	4603      	mov	r3, r0
 8005652:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005654:	2301      	movs	r3, #1
 8005656:	617b      	str	r3, [r7, #20]
 8005658:	2300      	movs	r3, #0
 800565a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800565c:	79fb      	ldrb	r3, [r7, #7]
 800565e:	461a      	mov	r2, r3
 8005660:	6939      	ldr	r1, [r7, #16]
 8005662:	6978      	ldr	r0, [r7, #20]
 8005664:	f7ff ff77 	bl	8005556 <xQueueGenericCreate>
 8005668:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800566a:	68f8      	ldr	r0, [r7, #12]
 800566c:	f7ff ffd3 	bl	8005616 <prvInitialiseMutex>

		return xNewQueue;
 8005670:	68fb      	ldr	r3, [r7, #12]
	}
 8005672:	4618      	mov	r0, r3
 8005674:	3718      	adds	r7, #24
 8005676:	46bd      	mov	sp, r7
 8005678:	bd80      	pop	{r7, pc}

0800567a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800567a:	b580      	push	{r7, lr}
 800567c:	b088      	sub	sp, #32
 800567e:	af02      	add	r7, sp, #8
 8005680:	4603      	mov	r3, r0
 8005682:	6039      	str	r1, [r7, #0]
 8005684:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005686:	2301      	movs	r3, #1
 8005688:	617b      	str	r3, [r7, #20]
 800568a:	2300      	movs	r3, #0
 800568c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800568e:	79fb      	ldrb	r3, [r7, #7]
 8005690:	9300      	str	r3, [sp, #0]
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	2200      	movs	r2, #0
 8005696:	6939      	ldr	r1, [r7, #16]
 8005698:	6978      	ldr	r0, [r7, #20]
 800569a:	f7ff fedf 	bl	800545c <xQueueGenericCreateStatic>
 800569e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80056a0:	68f8      	ldr	r0, [r7, #12]
 80056a2:	f7ff ffb8 	bl	8005616 <prvInitialiseMutex>

		return xNewQueue;
 80056a6:	68fb      	ldr	r3, [r7, #12]
	}
 80056a8:	4618      	mov	r0, r3
 80056aa:	3718      	adds	r7, #24
 80056ac:	46bd      	mov	sp, r7
 80056ae:	bd80      	pop	{r7, pc}

080056b0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b08e      	sub	sp, #56	; 0x38
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	60f8      	str	r0, [r7, #12]
 80056b8:	60b9      	str	r1, [r7, #8]
 80056ba:	607a      	str	r2, [r7, #4]
 80056bc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80056be:	2300      	movs	r3, #0
 80056c0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80056c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d10b      	bne.n	80056e4 <xQueueGenericSend+0x34>
 80056cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056d0:	b672      	cpsid	i
 80056d2:	f383 8811 	msr	BASEPRI, r3
 80056d6:	f3bf 8f6f 	isb	sy
 80056da:	f3bf 8f4f 	dsb	sy
 80056de:	b662      	cpsie	i
 80056e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80056e2:	e7fe      	b.n	80056e2 <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80056e4:	68bb      	ldr	r3, [r7, #8]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d103      	bne.n	80056f2 <xQueueGenericSend+0x42>
 80056ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d101      	bne.n	80056f6 <xQueueGenericSend+0x46>
 80056f2:	2301      	movs	r3, #1
 80056f4:	e000      	b.n	80056f8 <xQueueGenericSend+0x48>
 80056f6:	2300      	movs	r3, #0
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d10b      	bne.n	8005714 <xQueueGenericSend+0x64>
 80056fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005700:	b672      	cpsid	i
 8005702:	f383 8811 	msr	BASEPRI, r3
 8005706:	f3bf 8f6f 	isb	sy
 800570a:	f3bf 8f4f 	dsb	sy
 800570e:	b662      	cpsie	i
 8005710:	627b      	str	r3, [r7, #36]	; 0x24
 8005712:	e7fe      	b.n	8005712 <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	2b02      	cmp	r3, #2
 8005718:	d103      	bne.n	8005722 <xQueueGenericSend+0x72>
 800571a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800571c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800571e:	2b01      	cmp	r3, #1
 8005720:	d101      	bne.n	8005726 <xQueueGenericSend+0x76>
 8005722:	2301      	movs	r3, #1
 8005724:	e000      	b.n	8005728 <xQueueGenericSend+0x78>
 8005726:	2300      	movs	r3, #0
 8005728:	2b00      	cmp	r3, #0
 800572a:	d10b      	bne.n	8005744 <xQueueGenericSend+0x94>
 800572c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005730:	b672      	cpsid	i
 8005732:	f383 8811 	msr	BASEPRI, r3
 8005736:	f3bf 8f6f 	isb	sy
 800573a:	f3bf 8f4f 	dsb	sy
 800573e:	b662      	cpsie	i
 8005740:	623b      	str	r3, [r7, #32]
 8005742:	e7fe      	b.n	8005742 <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005744:	f001 fd16 	bl	8007174 <xTaskGetSchedulerState>
 8005748:	4603      	mov	r3, r0
 800574a:	2b00      	cmp	r3, #0
 800574c:	d102      	bne.n	8005754 <xQueueGenericSend+0xa4>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d101      	bne.n	8005758 <xQueueGenericSend+0xa8>
 8005754:	2301      	movs	r3, #1
 8005756:	e000      	b.n	800575a <xQueueGenericSend+0xaa>
 8005758:	2300      	movs	r3, #0
 800575a:	2b00      	cmp	r3, #0
 800575c:	d10b      	bne.n	8005776 <xQueueGenericSend+0xc6>
 800575e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005762:	b672      	cpsid	i
 8005764:	f383 8811 	msr	BASEPRI, r3
 8005768:	f3bf 8f6f 	isb	sy
 800576c:	f3bf 8f4f 	dsb	sy
 8005770:	b662      	cpsie	i
 8005772:	61fb      	str	r3, [r7, #28]
 8005774:	e7fe      	b.n	8005774 <xQueueGenericSend+0xc4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005776:	f002 fbd7 	bl	8007f28 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800577a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800577c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800577e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005780:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005782:	429a      	cmp	r2, r3
 8005784:	d302      	bcc.n	800578c <xQueueGenericSend+0xdc>
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	2b02      	cmp	r3, #2
 800578a:	d129      	bne.n	80057e0 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800578c:	683a      	ldr	r2, [r7, #0]
 800578e:	68b9      	ldr	r1, [r7, #8]
 8005790:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005792:	f000 fcac 	bl	80060ee <prvCopyDataToQueue>
 8005796:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800579a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800579c:	2b00      	cmp	r3, #0
 800579e:	d010      	beq.n	80057c2 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80057a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057a2:	3324      	adds	r3, #36	; 0x24
 80057a4:	4618      	mov	r0, r3
 80057a6:	f001 fb25 	bl	8006df4 <xTaskRemoveFromEventList>
 80057aa:	4603      	mov	r3, r0
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d013      	beq.n	80057d8 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80057b0:	4b3f      	ldr	r3, [pc, #252]	; (80058b0 <xQueueGenericSend+0x200>)
 80057b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80057b6:	601a      	str	r2, [r3, #0]
 80057b8:	f3bf 8f4f 	dsb	sy
 80057bc:	f3bf 8f6f 	isb	sy
 80057c0:	e00a      	b.n	80057d8 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80057c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d007      	beq.n	80057d8 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80057c8:	4b39      	ldr	r3, [pc, #228]	; (80058b0 <xQueueGenericSend+0x200>)
 80057ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80057ce:	601a      	str	r2, [r3, #0]
 80057d0:	f3bf 8f4f 	dsb	sy
 80057d4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80057d8:	f002 fbd8 	bl	8007f8c <vPortExitCritical>
				return pdPASS;
 80057dc:	2301      	movs	r3, #1
 80057de:	e063      	b.n	80058a8 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d103      	bne.n	80057ee <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80057e6:	f002 fbd1 	bl	8007f8c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80057ea:	2300      	movs	r3, #0
 80057ec:	e05c      	b.n	80058a8 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80057ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d106      	bne.n	8005802 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80057f4:	f107 0314 	add.w	r3, r7, #20
 80057f8:	4618      	mov	r0, r3
 80057fa:	f001 fb5f 	bl	8006ebc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80057fe:	2301      	movs	r3, #1
 8005800:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005802:	f002 fbc3 	bl	8007f8c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005806:	f001 f8bf 	bl	8006988 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800580a:	f002 fb8d 	bl	8007f28 <vPortEnterCritical>
 800580e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005810:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005814:	b25b      	sxtb	r3, r3
 8005816:	f1b3 3fff 	cmp.w	r3, #4294967295
 800581a:	d103      	bne.n	8005824 <xQueueGenericSend+0x174>
 800581c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800581e:	2200      	movs	r2, #0
 8005820:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005824:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005826:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800582a:	b25b      	sxtb	r3, r3
 800582c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005830:	d103      	bne.n	800583a <xQueueGenericSend+0x18a>
 8005832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005834:	2200      	movs	r2, #0
 8005836:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800583a:	f002 fba7 	bl	8007f8c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800583e:	1d3a      	adds	r2, r7, #4
 8005840:	f107 0314 	add.w	r3, r7, #20
 8005844:	4611      	mov	r1, r2
 8005846:	4618      	mov	r0, r3
 8005848:	f001 fb4e 	bl	8006ee8 <xTaskCheckForTimeOut>
 800584c:	4603      	mov	r3, r0
 800584e:	2b00      	cmp	r3, #0
 8005850:	d124      	bne.n	800589c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005852:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005854:	f000 fd43 	bl	80062de <prvIsQueueFull>
 8005858:	4603      	mov	r3, r0
 800585a:	2b00      	cmp	r3, #0
 800585c:	d018      	beq.n	8005890 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800585e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005860:	3310      	adds	r3, #16
 8005862:	687a      	ldr	r2, [r7, #4]
 8005864:	4611      	mov	r1, r2
 8005866:	4618      	mov	r0, r3
 8005868:	f001 fa72 	bl	8006d50 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800586c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800586e:	f000 fcce 	bl	800620e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005872:	f001 f897 	bl	80069a4 <xTaskResumeAll>
 8005876:	4603      	mov	r3, r0
 8005878:	2b00      	cmp	r3, #0
 800587a:	f47f af7c 	bne.w	8005776 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800587e:	4b0c      	ldr	r3, [pc, #48]	; (80058b0 <xQueueGenericSend+0x200>)
 8005880:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005884:	601a      	str	r2, [r3, #0]
 8005886:	f3bf 8f4f 	dsb	sy
 800588a:	f3bf 8f6f 	isb	sy
 800588e:	e772      	b.n	8005776 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005890:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005892:	f000 fcbc 	bl	800620e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005896:	f001 f885 	bl	80069a4 <xTaskResumeAll>
 800589a:	e76c      	b.n	8005776 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800589c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800589e:	f000 fcb6 	bl	800620e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80058a2:	f001 f87f 	bl	80069a4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80058a6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80058a8:	4618      	mov	r0, r3
 80058aa:	3738      	adds	r7, #56	; 0x38
 80058ac:	46bd      	mov	sp, r7
 80058ae:	bd80      	pop	{r7, pc}
 80058b0:	e000ed04 	.word	0xe000ed04

080058b4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b08e      	sub	sp, #56	; 0x38
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	60f8      	str	r0, [r7, #12]
 80058bc:	60b9      	str	r1, [r7, #8]
 80058be:	607a      	str	r2, [r7, #4]
 80058c0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80058c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d10b      	bne.n	80058e4 <xQueueGenericSendFromISR+0x30>
 80058cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058d0:	b672      	cpsid	i
 80058d2:	f383 8811 	msr	BASEPRI, r3
 80058d6:	f3bf 8f6f 	isb	sy
 80058da:	f3bf 8f4f 	dsb	sy
 80058de:	b662      	cpsie	i
 80058e0:	627b      	str	r3, [r7, #36]	; 0x24
 80058e2:	e7fe      	b.n	80058e2 <xQueueGenericSendFromISR+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80058e4:	68bb      	ldr	r3, [r7, #8]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d103      	bne.n	80058f2 <xQueueGenericSendFromISR+0x3e>
 80058ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d101      	bne.n	80058f6 <xQueueGenericSendFromISR+0x42>
 80058f2:	2301      	movs	r3, #1
 80058f4:	e000      	b.n	80058f8 <xQueueGenericSendFromISR+0x44>
 80058f6:	2300      	movs	r3, #0
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d10b      	bne.n	8005914 <xQueueGenericSendFromISR+0x60>
 80058fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005900:	b672      	cpsid	i
 8005902:	f383 8811 	msr	BASEPRI, r3
 8005906:	f3bf 8f6f 	isb	sy
 800590a:	f3bf 8f4f 	dsb	sy
 800590e:	b662      	cpsie	i
 8005910:	623b      	str	r3, [r7, #32]
 8005912:	e7fe      	b.n	8005912 <xQueueGenericSendFromISR+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	2b02      	cmp	r3, #2
 8005918:	d103      	bne.n	8005922 <xQueueGenericSendFromISR+0x6e>
 800591a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800591c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800591e:	2b01      	cmp	r3, #1
 8005920:	d101      	bne.n	8005926 <xQueueGenericSendFromISR+0x72>
 8005922:	2301      	movs	r3, #1
 8005924:	e000      	b.n	8005928 <xQueueGenericSendFromISR+0x74>
 8005926:	2300      	movs	r3, #0
 8005928:	2b00      	cmp	r3, #0
 800592a:	d10b      	bne.n	8005944 <xQueueGenericSendFromISR+0x90>
 800592c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005930:	b672      	cpsid	i
 8005932:	f383 8811 	msr	BASEPRI, r3
 8005936:	f3bf 8f6f 	isb	sy
 800593a:	f3bf 8f4f 	dsb	sy
 800593e:	b662      	cpsie	i
 8005940:	61fb      	str	r3, [r7, #28]
 8005942:	e7fe      	b.n	8005942 <xQueueGenericSendFromISR+0x8e>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005944:	f002 fbd0 	bl	80080e8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005948:	f3ef 8211 	mrs	r2, BASEPRI
 800594c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005950:	b672      	cpsid	i
 8005952:	f383 8811 	msr	BASEPRI, r3
 8005956:	f3bf 8f6f 	isb	sy
 800595a:	f3bf 8f4f 	dsb	sy
 800595e:	b662      	cpsie	i
 8005960:	61ba      	str	r2, [r7, #24]
 8005962:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005964:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005966:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005968:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800596a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800596c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800596e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005970:	429a      	cmp	r2, r3
 8005972:	d302      	bcc.n	800597a <xQueueGenericSendFromISR+0xc6>
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	2b02      	cmp	r3, #2
 8005978:	d12c      	bne.n	80059d4 <xQueueGenericSendFromISR+0x120>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800597a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800597c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005980:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005984:	683a      	ldr	r2, [r7, #0]
 8005986:	68b9      	ldr	r1, [r7, #8]
 8005988:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800598a:	f000 fbb0 	bl	80060ee <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800598e:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8005992:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005996:	d112      	bne.n	80059be <xQueueGenericSendFromISR+0x10a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005998:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800599a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800599c:	2b00      	cmp	r3, #0
 800599e:	d016      	beq.n	80059ce <xQueueGenericSendFromISR+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80059a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059a2:	3324      	adds	r3, #36	; 0x24
 80059a4:	4618      	mov	r0, r3
 80059a6:	f001 fa25 	bl	8006df4 <xTaskRemoveFromEventList>
 80059aa:	4603      	mov	r3, r0
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d00e      	beq.n	80059ce <xQueueGenericSendFromISR+0x11a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d00b      	beq.n	80059ce <xQueueGenericSendFromISR+0x11a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2201      	movs	r2, #1
 80059ba:	601a      	str	r2, [r3, #0]
 80059bc:	e007      	b.n	80059ce <xQueueGenericSendFromISR+0x11a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80059be:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80059c2:	3301      	adds	r3, #1
 80059c4:	b2db      	uxtb	r3, r3
 80059c6:	b25a      	sxtb	r2, r3
 80059c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80059ce:	2301      	movs	r3, #1
 80059d0:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80059d2:	e001      	b.n	80059d8 <xQueueGenericSendFromISR+0x124>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80059d4:	2300      	movs	r3, #0
 80059d6:	637b      	str	r3, [r7, #52]	; 0x34
 80059d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059da:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80059dc:	693b      	ldr	r3, [r7, #16]
 80059de:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80059e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80059e4:	4618      	mov	r0, r3
 80059e6:	3738      	adds	r7, #56	; 0x38
 80059e8:	46bd      	mov	sp, r7
 80059ea:	bd80      	pop	{r7, pc}

080059ec <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b08e      	sub	sp, #56	; 0x38
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
 80059f4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80059fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d10b      	bne.n	8005a18 <xQueueGiveFromISR+0x2c>
	__asm volatile
 8005a00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a04:	b672      	cpsid	i
 8005a06:	f383 8811 	msr	BASEPRI, r3
 8005a0a:	f3bf 8f6f 	isb	sy
 8005a0e:	f3bf 8f4f 	dsb	sy
 8005a12:	b662      	cpsie	i
 8005a14:	623b      	str	r3, [r7, #32]
 8005a16:	e7fe      	b.n	8005a16 <xQueueGiveFromISR+0x2a>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005a18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d00b      	beq.n	8005a38 <xQueueGiveFromISR+0x4c>
 8005a20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a24:	b672      	cpsid	i
 8005a26:	f383 8811 	msr	BASEPRI, r3
 8005a2a:	f3bf 8f6f 	isb	sy
 8005a2e:	f3bf 8f4f 	dsb	sy
 8005a32:	b662      	cpsie	i
 8005a34:	61fb      	str	r3, [r7, #28]
 8005a36:	e7fe      	b.n	8005a36 <xQueueGiveFromISR+0x4a>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8005a38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d103      	bne.n	8005a48 <xQueueGiveFromISR+0x5c>
 8005a40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a42:	689b      	ldr	r3, [r3, #8]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d101      	bne.n	8005a4c <xQueueGiveFromISR+0x60>
 8005a48:	2301      	movs	r3, #1
 8005a4a:	e000      	b.n	8005a4e <xQueueGiveFromISR+0x62>
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d10b      	bne.n	8005a6a <xQueueGiveFromISR+0x7e>
 8005a52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a56:	b672      	cpsid	i
 8005a58:	f383 8811 	msr	BASEPRI, r3
 8005a5c:	f3bf 8f6f 	isb	sy
 8005a60:	f3bf 8f4f 	dsb	sy
 8005a64:	b662      	cpsie	i
 8005a66:	61bb      	str	r3, [r7, #24]
 8005a68:	e7fe      	b.n	8005a68 <xQueueGiveFromISR+0x7c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005a6a:	f002 fb3d 	bl	80080e8 <vPortValidateInterruptPriority>
	__asm volatile
 8005a6e:	f3ef 8211 	mrs	r2, BASEPRI
 8005a72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a76:	b672      	cpsid	i
 8005a78:	f383 8811 	msr	BASEPRI, r3
 8005a7c:	f3bf 8f6f 	isb	sy
 8005a80:	f3bf 8f4f 	dsb	sy
 8005a84:	b662      	cpsie	i
 8005a86:	617a      	str	r2, [r7, #20]
 8005a88:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8005a8a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005a8c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a92:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8005a94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a98:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a9a:	429a      	cmp	r2, r3
 8005a9c:	d22b      	bcs.n	8005af6 <xQueueGiveFromISR+0x10a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aa0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005aa4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005aa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aaa:	1c5a      	adds	r2, r3, #1
 8005aac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aae:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005ab0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005ab4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ab8:	d112      	bne.n	8005ae0 <xQueueGiveFromISR+0xf4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005aba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d016      	beq.n	8005af0 <xQueueGiveFromISR+0x104>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005ac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ac4:	3324      	adds	r3, #36	; 0x24
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	f001 f994 	bl	8006df4 <xTaskRemoveFromEventList>
 8005acc:	4603      	mov	r3, r0
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d00e      	beq.n	8005af0 <xQueueGiveFromISR+0x104>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d00b      	beq.n	8005af0 <xQueueGiveFromISR+0x104>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	2201      	movs	r2, #1
 8005adc:	601a      	str	r2, [r3, #0]
 8005ade:	e007      	b.n	8005af0 <xQueueGiveFromISR+0x104>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005ae0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005ae4:	3301      	adds	r3, #1
 8005ae6:	b2db      	uxtb	r3, r3
 8005ae8:	b25a      	sxtb	r2, r3
 8005aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005af0:	2301      	movs	r3, #1
 8005af2:	637b      	str	r3, [r7, #52]	; 0x34
 8005af4:	e001      	b.n	8005afa <xQueueGiveFromISR+0x10e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005af6:	2300      	movs	r3, #0
 8005af8:	637b      	str	r3, [r7, #52]	; 0x34
 8005afa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005afc:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005b04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005b06:	4618      	mov	r0, r3
 8005b08:	3738      	adds	r7, #56	; 0x38
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	bd80      	pop	{r7, pc}
	...

08005b10 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b08c      	sub	sp, #48	; 0x30
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	60f8      	str	r0, [r7, #12]
 8005b18:	60b9      	str	r1, [r7, #8]
 8005b1a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005b24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d10b      	bne.n	8005b42 <xQueueReceive+0x32>
	__asm volatile
 8005b2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b2e:	b672      	cpsid	i
 8005b30:	f383 8811 	msr	BASEPRI, r3
 8005b34:	f3bf 8f6f 	isb	sy
 8005b38:	f3bf 8f4f 	dsb	sy
 8005b3c:	b662      	cpsie	i
 8005b3e:	623b      	str	r3, [r7, #32]
 8005b40:	e7fe      	b.n	8005b40 <xQueueReceive+0x30>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005b42:	68bb      	ldr	r3, [r7, #8]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d103      	bne.n	8005b50 <xQueueReceive+0x40>
 8005b48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d101      	bne.n	8005b54 <xQueueReceive+0x44>
 8005b50:	2301      	movs	r3, #1
 8005b52:	e000      	b.n	8005b56 <xQueueReceive+0x46>
 8005b54:	2300      	movs	r3, #0
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d10b      	bne.n	8005b72 <xQueueReceive+0x62>
 8005b5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b5e:	b672      	cpsid	i
 8005b60:	f383 8811 	msr	BASEPRI, r3
 8005b64:	f3bf 8f6f 	isb	sy
 8005b68:	f3bf 8f4f 	dsb	sy
 8005b6c:	b662      	cpsie	i
 8005b6e:	61fb      	str	r3, [r7, #28]
 8005b70:	e7fe      	b.n	8005b70 <xQueueReceive+0x60>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005b72:	f001 faff 	bl	8007174 <xTaskGetSchedulerState>
 8005b76:	4603      	mov	r3, r0
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d102      	bne.n	8005b82 <xQueueReceive+0x72>
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d101      	bne.n	8005b86 <xQueueReceive+0x76>
 8005b82:	2301      	movs	r3, #1
 8005b84:	e000      	b.n	8005b88 <xQueueReceive+0x78>
 8005b86:	2300      	movs	r3, #0
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d10b      	bne.n	8005ba4 <xQueueReceive+0x94>
 8005b8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b90:	b672      	cpsid	i
 8005b92:	f383 8811 	msr	BASEPRI, r3
 8005b96:	f3bf 8f6f 	isb	sy
 8005b9a:	f3bf 8f4f 	dsb	sy
 8005b9e:	b662      	cpsie	i
 8005ba0:	61bb      	str	r3, [r7, #24]
 8005ba2:	e7fe      	b.n	8005ba2 <xQueueReceive+0x92>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005ba4:	f002 f9c0 	bl	8007f28 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005ba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005baa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bac:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d01f      	beq.n	8005bf4 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005bb4:	68b9      	ldr	r1, [r7, #8]
 8005bb6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005bb8:	f000 fb03 	bl	80061c2 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bbe:	1e5a      	subs	r2, r3, #1
 8005bc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bc2:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005bc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bc6:	691b      	ldr	r3, [r3, #16]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d00f      	beq.n	8005bec <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005bcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bce:	3310      	adds	r3, #16
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	f001 f90f 	bl	8006df4 <xTaskRemoveFromEventList>
 8005bd6:	4603      	mov	r3, r0
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d007      	beq.n	8005bec <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005bdc:	4b3c      	ldr	r3, [pc, #240]	; (8005cd0 <xQueueReceive+0x1c0>)
 8005bde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005be2:	601a      	str	r2, [r3, #0]
 8005be4:	f3bf 8f4f 	dsb	sy
 8005be8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005bec:	f002 f9ce 	bl	8007f8c <vPortExitCritical>
				return pdPASS;
 8005bf0:	2301      	movs	r3, #1
 8005bf2:	e069      	b.n	8005cc8 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d103      	bne.n	8005c02 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005bfa:	f002 f9c7 	bl	8007f8c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005bfe:	2300      	movs	r3, #0
 8005c00:	e062      	b.n	8005cc8 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005c02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d106      	bne.n	8005c16 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005c08:	f107 0310 	add.w	r3, r7, #16
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	f001 f955 	bl	8006ebc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005c12:	2301      	movs	r3, #1
 8005c14:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005c16:	f002 f9b9 	bl	8007f8c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005c1a:	f000 feb5 	bl	8006988 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005c1e:	f002 f983 	bl	8007f28 <vPortEnterCritical>
 8005c22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c24:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005c28:	b25b      	sxtb	r3, r3
 8005c2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c2e:	d103      	bne.n	8005c38 <xQueueReceive+0x128>
 8005c30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c32:	2200      	movs	r2, #0
 8005c34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005c38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c3a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005c3e:	b25b      	sxtb	r3, r3
 8005c40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c44:	d103      	bne.n	8005c4e <xQueueReceive+0x13e>
 8005c46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c48:	2200      	movs	r2, #0
 8005c4a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005c4e:	f002 f99d 	bl	8007f8c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005c52:	1d3a      	adds	r2, r7, #4
 8005c54:	f107 0310 	add.w	r3, r7, #16
 8005c58:	4611      	mov	r1, r2
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	f001 f944 	bl	8006ee8 <xTaskCheckForTimeOut>
 8005c60:	4603      	mov	r3, r0
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d123      	bne.n	8005cae <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005c66:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005c68:	f000 fb23 	bl	80062b2 <prvIsQueueEmpty>
 8005c6c:	4603      	mov	r3, r0
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d017      	beq.n	8005ca2 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005c72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c74:	3324      	adds	r3, #36	; 0x24
 8005c76:	687a      	ldr	r2, [r7, #4]
 8005c78:	4611      	mov	r1, r2
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	f001 f868 	bl	8006d50 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005c80:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005c82:	f000 fac4 	bl	800620e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005c86:	f000 fe8d 	bl	80069a4 <xTaskResumeAll>
 8005c8a:	4603      	mov	r3, r0
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d189      	bne.n	8005ba4 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8005c90:	4b0f      	ldr	r3, [pc, #60]	; (8005cd0 <xQueueReceive+0x1c0>)
 8005c92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c96:	601a      	str	r2, [r3, #0]
 8005c98:	f3bf 8f4f 	dsb	sy
 8005c9c:	f3bf 8f6f 	isb	sy
 8005ca0:	e780      	b.n	8005ba4 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005ca2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005ca4:	f000 fab3 	bl	800620e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005ca8:	f000 fe7c 	bl	80069a4 <xTaskResumeAll>
 8005cac:	e77a      	b.n	8005ba4 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005cae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005cb0:	f000 faad 	bl	800620e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005cb4:	f000 fe76 	bl	80069a4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005cb8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005cba:	f000 fafa 	bl	80062b2 <prvIsQueueEmpty>
 8005cbe:	4603      	mov	r3, r0
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	f43f af6f 	beq.w	8005ba4 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005cc6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005cc8:	4618      	mov	r0, r3
 8005cca:	3730      	adds	r7, #48	; 0x30
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	bd80      	pop	{r7, pc}
 8005cd0:	e000ed04 	.word	0xe000ed04

08005cd4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8005cd4:	b580      	push	{r7, lr}
 8005cd6:	b08e      	sub	sp, #56	; 0x38
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
 8005cdc:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8005cde:	2300      	movs	r3, #0
 8005ce0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005cea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d10b      	bne.n	8005d08 <xQueueSemaphoreTake+0x34>
 8005cf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cf4:	b672      	cpsid	i
 8005cf6:	f383 8811 	msr	BASEPRI, r3
 8005cfa:	f3bf 8f6f 	isb	sy
 8005cfe:	f3bf 8f4f 	dsb	sy
 8005d02:	b662      	cpsie	i
 8005d04:	623b      	str	r3, [r7, #32]
 8005d06:	e7fe      	b.n	8005d06 <xQueueSemaphoreTake+0x32>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005d08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d00b      	beq.n	8005d28 <xQueueSemaphoreTake+0x54>
 8005d10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d14:	b672      	cpsid	i
 8005d16:	f383 8811 	msr	BASEPRI, r3
 8005d1a:	f3bf 8f6f 	isb	sy
 8005d1e:	f3bf 8f4f 	dsb	sy
 8005d22:	b662      	cpsie	i
 8005d24:	61fb      	str	r3, [r7, #28]
 8005d26:	e7fe      	b.n	8005d26 <xQueueSemaphoreTake+0x52>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005d28:	f001 fa24 	bl	8007174 <xTaskGetSchedulerState>
 8005d2c:	4603      	mov	r3, r0
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d102      	bne.n	8005d38 <xQueueSemaphoreTake+0x64>
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d101      	bne.n	8005d3c <xQueueSemaphoreTake+0x68>
 8005d38:	2301      	movs	r3, #1
 8005d3a:	e000      	b.n	8005d3e <xQueueSemaphoreTake+0x6a>
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d10b      	bne.n	8005d5a <xQueueSemaphoreTake+0x86>
 8005d42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d46:	b672      	cpsid	i
 8005d48:	f383 8811 	msr	BASEPRI, r3
 8005d4c:	f3bf 8f6f 	isb	sy
 8005d50:	f3bf 8f4f 	dsb	sy
 8005d54:	b662      	cpsie	i
 8005d56:	61bb      	str	r3, [r7, #24]
 8005d58:	e7fe      	b.n	8005d58 <xQueueSemaphoreTake+0x84>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005d5a:	f002 f8e5 	bl	8007f28 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8005d5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d62:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8005d64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d024      	beq.n	8005db4 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8005d6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d6c:	1e5a      	subs	r2, r3, #1
 8005d6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d70:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005d72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d104      	bne.n	8005d84 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8005d7a:	f001 fbbd 	bl	80074f8 <pvTaskIncrementMutexHeldCount>
 8005d7e:	4602      	mov	r2, r0
 8005d80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d82:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005d84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d86:	691b      	ldr	r3, [r3, #16]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d00f      	beq.n	8005dac <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005d8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d8e:	3310      	adds	r3, #16
 8005d90:	4618      	mov	r0, r3
 8005d92:	f001 f82f 	bl	8006df4 <xTaskRemoveFromEventList>
 8005d96:	4603      	mov	r3, r0
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d007      	beq.n	8005dac <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005d9c:	4b54      	ldr	r3, [pc, #336]	; (8005ef0 <xQueueSemaphoreTake+0x21c>)
 8005d9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005da2:	601a      	str	r2, [r3, #0]
 8005da4:	f3bf 8f4f 	dsb	sy
 8005da8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005dac:	f002 f8ee 	bl	8007f8c <vPortExitCritical>
				return pdPASS;
 8005db0:	2301      	movs	r3, #1
 8005db2:	e098      	b.n	8005ee6 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d112      	bne.n	8005de0 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8005dba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d00b      	beq.n	8005dd8 <xQueueSemaphoreTake+0x104>
 8005dc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dc4:	b672      	cpsid	i
 8005dc6:	f383 8811 	msr	BASEPRI, r3
 8005dca:	f3bf 8f6f 	isb	sy
 8005dce:	f3bf 8f4f 	dsb	sy
 8005dd2:	b662      	cpsie	i
 8005dd4:	617b      	str	r3, [r7, #20]
 8005dd6:	e7fe      	b.n	8005dd6 <xQueueSemaphoreTake+0x102>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8005dd8:	f002 f8d8 	bl	8007f8c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005ddc:	2300      	movs	r3, #0
 8005dde:	e082      	b.n	8005ee6 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005de0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d106      	bne.n	8005df4 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005de6:	f107 030c 	add.w	r3, r7, #12
 8005dea:	4618      	mov	r0, r3
 8005dec:	f001 f866 	bl	8006ebc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005df0:	2301      	movs	r3, #1
 8005df2:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005df4:	f002 f8ca 	bl	8007f8c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005df8:	f000 fdc6 	bl	8006988 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005dfc:	f002 f894 	bl	8007f28 <vPortEnterCritical>
 8005e00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e02:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005e06:	b25b      	sxtb	r3, r3
 8005e08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e0c:	d103      	bne.n	8005e16 <xQueueSemaphoreTake+0x142>
 8005e0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e10:	2200      	movs	r2, #0
 8005e12:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005e16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e18:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005e1c:	b25b      	sxtb	r3, r3
 8005e1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e22:	d103      	bne.n	8005e2c <xQueueSemaphoreTake+0x158>
 8005e24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e26:	2200      	movs	r2, #0
 8005e28:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005e2c:	f002 f8ae 	bl	8007f8c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005e30:	463a      	mov	r2, r7
 8005e32:	f107 030c 	add.w	r3, r7, #12
 8005e36:	4611      	mov	r1, r2
 8005e38:	4618      	mov	r0, r3
 8005e3a:	f001 f855 	bl	8006ee8 <xTaskCheckForTimeOut>
 8005e3e:	4603      	mov	r3, r0
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d132      	bne.n	8005eaa <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005e44:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005e46:	f000 fa34 	bl	80062b2 <prvIsQueueEmpty>
 8005e4a:	4603      	mov	r3, r0
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d026      	beq.n	8005e9e <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005e50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d109      	bne.n	8005e6c <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8005e58:	f002 f866 	bl	8007f28 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005e5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e5e:	689b      	ldr	r3, [r3, #8]
 8005e60:	4618      	mov	r0, r3
 8005e62:	f001 f9a5 	bl	80071b0 <xTaskPriorityInherit>
 8005e66:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8005e68:	f002 f890 	bl	8007f8c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005e6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e6e:	3324      	adds	r3, #36	; 0x24
 8005e70:	683a      	ldr	r2, [r7, #0]
 8005e72:	4611      	mov	r1, r2
 8005e74:	4618      	mov	r0, r3
 8005e76:	f000 ff6b 	bl	8006d50 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005e7a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005e7c:	f000 f9c7 	bl	800620e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005e80:	f000 fd90 	bl	80069a4 <xTaskResumeAll>
 8005e84:	4603      	mov	r3, r0
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	f47f af67 	bne.w	8005d5a <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8005e8c:	4b18      	ldr	r3, [pc, #96]	; (8005ef0 <xQueueSemaphoreTake+0x21c>)
 8005e8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e92:	601a      	str	r2, [r3, #0]
 8005e94:	f3bf 8f4f 	dsb	sy
 8005e98:	f3bf 8f6f 	isb	sy
 8005e9c:	e75d      	b.n	8005d5a <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8005e9e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005ea0:	f000 f9b5 	bl	800620e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005ea4:	f000 fd7e 	bl	80069a4 <xTaskResumeAll>
 8005ea8:	e757      	b.n	8005d5a <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8005eaa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005eac:	f000 f9af 	bl	800620e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005eb0:	f000 fd78 	bl	80069a4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005eb4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005eb6:	f000 f9fc 	bl	80062b2 <prvIsQueueEmpty>
 8005eba:	4603      	mov	r3, r0
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	f43f af4c 	beq.w	8005d5a <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8005ec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d00d      	beq.n	8005ee4 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8005ec8:	f002 f82e 	bl	8007f28 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005ecc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005ece:	f000 f8f6 	bl	80060be <prvGetDisinheritPriorityAfterTimeout>
 8005ed2:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8005ed4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ed6:	689b      	ldr	r3, [r3, #8]
 8005ed8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005eda:	4618      	mov	r0, r3
 8005edc:	f001 fa70 	bl	80073c0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8005ee0:	f002 f854 	bl	8007f8c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005ee4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	3738      	adds	r7, #56	; 0x38
 8005eea:	46bd      	mov	sp, r7
 8005eec:	bd80      	pop	{r7, pc}
 8005eee:	bf00      	nop
 8005ef0:	e000ed04 	.word	0xe000ed04

08005ef4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b08e      	sub	sp, #56	; 0x38
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	60f8      	str	r0, [r7, #12]
 8005efc:	60b9      	str	r1, [r7, #8]
 8005efe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005f04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d10b      	bne.n	8005f22 <xQueueReceiveFromISR+0x2e>
 8005f0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f0e:	b672      	cpsid	i
 8005f10:	f383 8811 	msr	BASEPRI, r3
 8005f14:	f3bf 8f6f 	isb	sy
 8005f18:	f3bf 8f4f 	dsb	sy
 8005f1c:	b662      	cpsie	i
 8005f1e:	623b      	str	r3, [r7, #32]
 8005f20:	e7fe      	b.n	8005f20 <xQueueReceiveFromISR+0x2c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005f22:	68bb      	ldr	r3, [r7, #8]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d103      	bne.n	8005f30 <xQueueReceiveFromISR+0x3c>
 8005f28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d101      	bne.n	8005f34 <xQueueReceiveFromISR+0x40>
 8005f30:	2301      	movs	r3, #1
 8005f32:	e000      	b.n	8005f36 <xQueueReceiveFromISR+0x42>
 8005f34:	2300      	movs	r3, #0
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d10b      	bne.n	8005f52 <xQueueReceiveFromISR+0x5e>
 8005f3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f3e:	b672      	cpsid	i
 8005f40:	f383 8811 	msr	BASEPRI, r3
 8005f44:	f3bf 8f6f 	isb	sy
 8005f48:	f3bf 8f4f 	dsb	sy
 8005f4c:	b662      	cpsie	i
 8005f4e:	61fb      	str	r3, [r7, #28]
 8005f50:	e7fe      	b.n	8005f50 <xQueueReceiveFromISR+0x5c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005f52:	f002 f8c9 	bl	80080e8 <vPortValidateInterruptPriority>
	__asm volatile
 8005f56:	f3ef 8211 	mrs	r2, BASEPRI
 8005f5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f5e:	b672      	cpsid	i
 8005f60:	f383 8811 	msr	BASEPRI, r3
 8005f64:	f3bf 8f6f 	isb	sy
 8005f68:	f3bf 8f4f 	dsb	sy
 8005f6c:	b662      	cpsie	i
 8005f6e:	61ba      	str	r2, [r7, #24]
 8005f70:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8005f72:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005f74:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f7a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005f7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d02f      	beq.n	8005fe2 <xQueueReceiveFromISR+0xee>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8005f82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f84:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005f88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005f8c:	68b9      	ldr	r1, [r7, #8]
 8005f8e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005f90:	f000 f917 	bl	80061c2 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005f94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f96:	1e5a      	subs	r2, r3, #1
 8005f98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f9a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8005f9c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005fa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fa4:	d112      	bne.n	8005fcc <xQueueReceiveFromISR+0xd8>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005fa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fa8:	691b      	ldr	r3, [r3, #16]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d016      	beq.n	8005fdc <xQueueReceiveFromISR+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005fae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fb0:	3310      	adds	r3, #16
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	f000 ff1e 	bl	8006df4 <xTaskRemoveFromEventList>
 8005fb8:	4603      	mov	r3, r0
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d00e      	beq.n	8005fdc <xQueueReceiveFromISR+0xe8>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d00b      	beq.n	8005fdc <xQueueReceiveFromISR+0xe8>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2201      	movs	r2, #1
 8005fc8:	601a      	str	r2, [r3, #0]
 8005fca:	e007      	b.n	8005fdc <xQueueReceiveFromISR+0xe8>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005fcc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005fd0:	3301      	adds	r3, #1
 8005fd2:	b2db      	uxtb	r3, r3
 8005fd4:	b25a      	sxtb	r2, r3
 8005fd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fd8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8005fdc:	2301      	movs	r3, #1
 8005fde:	637b      	str	r3, [r7, #52]	; 0x34
 8005fe0:	e001      	b.n	8005fe6 <xQueueReceiveFromISR+0xf2>
		}
		else
		{
			xReturn = pdFAIL;
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	637b      	str	r3, [r7, #52]	; 0x34
 8005fe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fe8:	613b      	str	r3, [r7, #16]
	__asm volatile
 8005fea:	693b      	ldr	r3, [r7, #16]
 8005fec:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005ff0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	3738      	adds	r7, #56	; 0x38
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	bd80      	pop	{r7, pc}

08005ffa <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8005ffa:	b580      	push	{r7, lr}
 8005ffc:	b084      	sub	sp, #16
 8005ffe:	af00      	add	r7, sp, #0
 8006000:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	2b00      	cmp	r3, #0
 8006006:	d10b      	bne.n	8006020 <uxQueueMessagesWaiting+0x26>
	__asm volatile
 8006008:	f04f 0350 	mov.w	r3, #80	; 0x50
 800600c:	b672      	cpsid	i
 800600e:	f383 8811 	msr	BASEPRI, r3
 8006012:	f3bf 8f6f 	isb	sy
 8006016:	f3bf 8f4f 	dsb	sy
 800601a:	b662      	cpsie	i
 800601c:	60bb      	str	r3, [r7, #8]
 800601e:	e7fe      	b.n	800601e <uxQueueMessagesWaiting+0x24>

	taskENTER_CRITICAL();
 8006020:	f001 ff82 	bl	8007f28 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006028:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800602a:	f001 ffaf 	bl	8007f8c <vPortExitCritical>

	return uxReturn;
 800602e:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8006030:	4618      	mov	r0, r3
 8006032:	3710      	adds	r7, #16
 8006034:	46bd      	mov	sp, r7
 8006036:	bd80      	pop	{r7, pc}

08006038 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8006038:	b480      	push	{r7}
 800603a:	b087      	sub	sp, #28
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8006044:	697b      	ldr	r3, [r7, #20]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d10b      	bne.n	8006062 <uxQueueMessagesWaitingFromISR+0x2a>
 800604a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800604e:	b672      	cpsid	i
 8006050:	f383 8811 	msr	BASEPRI, r3
 8006054:	f3bf 8f6f 	isb	sy
 8006058:	f3bf 8f4f 	dsb	sy
 800605c:	b662      	cpsie	i
 800605e:	60fb      	str	r3, [r7, #12]
 8006060:	e7fe      	b.n	8006060 <uxQueueMessagesWaitingFromISR+0x28>
	uxReturn = pxQueue->uxMessagesWaiting;
 8006062:	697b      	ldr	r3, [r7, #20]
 8006064:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006066:	613b      	str	r3, [r7, #16]

	return uxReturn;
 8006068:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800606a:	4618      	mov	r0, r3
 800606c:	371c      	adds	r7, #28
 800606e:	46bd      	mov	sp, r7
 8006070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006074:	4770      	bx	lr

08006076 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8006076:	b580      	push	{r7, lr}
 8006078:	b084      	sub	sp, #16
 800607a:	af00      	add	r7, sp, #0
 800607c:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d10b      	bne.n	80060a0 <vQueueDelete+0x2a>
 8006088:	f04f 0350 	mov.w	r3, #80	; 0x50
 800608c:	b672      	cpsid	i
 800608e:	f383 8811 	msr	BASEPRI, r3
 8006092:	f3bf 8f6f 	isb	sy
 8006096:	f3bf 8f4f 	dsb	sy
 800609a:	b662      	cpsie	i
 800609c:	60bb      	str	r3, [r7, #8]
 800609e:	e7fe      	b.n	800609e <vQueueDelete+0x28>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80060a0:	68f8      	ldr	r0, [r7, #12]
 80060a2:	f000 f95d 	bl	8006360 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d102      	bne.n	80060b6 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 80060b0:	68f8      	ldr	r0, [r7, #12]
 80060b2:	f002 f923 	bl	80082fc <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80060b6:	bf00      	nop
 80060b8:	3710      	adds	r7, #16
 80060ba:	46bd      	mov	sp, r7
 80060bc:	bd80      	pop	{r7, pc}

080060be <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80060be:	b480      	push	{r7}
 80060c0:	b085      	sub	sp, #20
 80060c2:	af00      	add	r7, sp, #0
 80060c4:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d006      	beq.n	80060dc <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f1c3 0307 	rsb	r3, r3, #7
 80060d8:	60fb      	str	r3, [r7, #12]
 80060da:	e001      	b.n	80060e0 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80060dc:	2300      	movs	r3, #0
 80060de:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80060e0:	68fb      	ldr	r3, [r7, #12]
	}
 80060e2:	4618      	mov	r0, r3
 80060e4:	3714      	adds	r7, #20
 80060e6:	46bd      	mov	sp, r7
 80060e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ec:	4770      	bx	lr

080060ee <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80060ee:	b580      	push	{r7, lr}
 80060f0:	b086      	sub	sp, #24
 80060f2:	af00      	add	r7, sp, #0
 80060f4:	60f8      	str	r0, [r7, #12]
 80060f6:	60b9      	str	r1, [r7, #8]
 80060f8:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80060fa:	2300      	movs	r3, #0
 80060fc:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006102:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006108:	2b00      	cmp	r3, #0
 800610a:	d10d      	bne.n	8006128 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	2b00      	cmp	r3, #0
 8006112:	d14d      	bne.n	80061b0 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	689b      	ldr	r3, [r3, #8]
 8006118:	4618      	mov	r0, r3
 800611a:	f001 f8c9 	bl	80072b0 <xTaskPriorityDisinherit>
 800611e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	2200      	movs	r2, #0
 8006124:	609a      	str	r2, [r3, #8]
 8006126:	e043      	b.n	80061b0 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2b00      	cmp	r3, #0
 800612c:	d119      	bne.n	8006162 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	6858      	ldr	r0, [r3, #4]
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006136:	461a      	mov	r2, r3
 8006138:	68b9      	ldr	r1, [r7, #8]
 800613a:	f010 fe64 	bl	8016e06 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	685a      	ldr	r2, [r3, #4]
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006146:	441a      	add	r2, r3
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	685a      	ldr	r2, [r3, #4]
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	689b      	ldr	r3, [r3, #8]
 8006154:	429a      	cmp	r2, r3
 8006156:	d32b      	bcc.n	80061b0 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681a      	ldr	r2, [r3, #0]
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	605a      	str	r2, [r3, #4]
 8006160:	e026      	b.n	80061b0 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	68d8      	ldr	r0, [r3, #12]
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800616a:	461a      	mov	r2, r3
 800616c:	68b9      	ldr	r1, [r7, #8]
 800616e:	f010 fe4a 	bl	8016e06 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	68da      	ldr	r2, [r3, #12]
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800617a:	425b      	negs	r3, r3
 800617c:	441a      	add	r2, r3
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	68da      	ldr	r2, [r3, #12]
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	429a      	cmp	r2, r3
 800618c:	d207      	bcs.n	800619e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	689a      	ldr	r2, [r3, #8]
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006196:	425b      	negs	r3, r3
 8006198:	441a      	add	r2, r3
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	2b02      	cmp	r3, #2
 80061a2:	d105      	bne.n	80061b0 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80061a4:	693b      	ldr	r3, [r7, #16]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d002      	beq.n	80061b0 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80061aa:	693b      	ldr	r3, [r7, #16]
 80061ac:	3b01      	subs	r3, #1
 80061ae:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80061b0:	693b      	ldr	r3, [r7, #16]
 80061b2:	1c5a      	adds	r2, r3, #1
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80061b8:	697b      	ldr	r3, [r7, #20]
}
 80061ba:	4618      	mov	r0, r3
 80061bc:	3718      	adds	r7, #24
 80061be:	46bd      	mov	sp, r7
 80061c0:	bd80      	pop	{r7, pc}

080061c2 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80061c2:	b580      	push	{r7, lr}
 80061c4:	b082      	sub	sp, #8
 80061c6:	af00      	add	r7, sp, #0
 80061c8:	6078      	str	r0, [r7, #4]
 80061ca:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d018      	beq.n	8006206 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	68da      	ldr	r2, [r3, #12]
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061dc:	441a      	add	r2, r3
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	68da      	ldr	r2, [r3, #12]
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	689b      	ldr	r3, [r3, #8]
 80061ea:	429a      	cmp	r2, r3
 80061ec:	d303      	bcc.n	80061f6 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681a      	ldr	r2, [r3, #0]
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	68d9      	ldr	r1, [r3, #12]
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061fe:	461a      	mov	r2, r3
 8006200:	6838      	ldr	r0, [r7, #0]
 8006202:	f010 fe00 	bl	8016e06 <memcpy>
	}
}
 8006206:	bf00      	nop
 8006208:	3708      	adds	r7, #8
 800620a:	46bd      	mov	sp, r7
 800620c:	bd80      	pop	{r7, pc}

0800620e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800620e:	b580      	push	{r7, lr}
 8006210:	b084      	sub	sp, #16
 8006212:	af00      	add	r7, sp, #0
 8006214:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006216:	f001 fe87 	bl	8007f28 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006220:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006222:	e011      	b.n	8006248 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006228:	2b00      	cmp	r3, #0
 800622a:	d012      	beq.n	8006252 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	3324      	adds	r3, #36	; 0x24
 8006230:	4618      	mov	r0, r3
 8006232:	f000 fddf 	bl	8006df4 <xTaskRemoveFromEventList>
 8006236:	4603      	mov	r3, r0
 8006238:	2b00      	cmp	r3, #0
 800623a:	d001      	beq.n	8006240 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800623c:	f000 feb8 	bl	8006fb0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006240:	7bfb      	ldrb	r3, [r7, #15]
 8006242:	3b01      	subs	r3, #1
 8006244:	b2db      	uxtb	r3, r3
 8006246:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006248:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800624c:	2b00      	cmp	r3, #0
 800624e:	dce9      	bgt.n	8006224 <prvUnlockQueue+0x16>
 8006250:	e000      	b.n	8006254 <prvUnlockQueue+0x46>
					break;
 8006252:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	22ff      	movs	r2, #255	; 0xff
 8006258:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800625c:	f001 fe96 	bl	8007f8c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006260:	f001 fe62 	bl	8007f28 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800626a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800626c:	e011      	b.n	8006292 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	691b      	ldr	r3, [r3, #16]
 8006272:	2b00      	cmp	r3, #0
 8006274:	d012      	beq.n	800629c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	3310      	adds	r3, #16
 800627a:	4618      	mov	r0, r3
 800627c:	f000 fdba 	bl	8006df4 <xTaskRemoveFromEventList>
 8006280:	4603      	mov	r3, r0
 8006282:	2b00      	cmp	r3, #0
 8006284:	d001      	beq.n	800628a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006286:	f000 fe93 	bl	8006fb0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800628a:	7bbb      	ldrb	r3, [r7, #14]
 800628c:	3b01      	subs	r3, #1
 800628e:	b2db      	uxtb	r3, r3
 8006290:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006292:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006296:	2b00      	cmp	r3, #0
 8006298:	dce9      	bgt.n	800626e <prvUnlockQueue+0x60>
 800629a:	e000      	b.n	800629e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800629c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	22ff      	movs	r2, #255	; 0xff
 80062a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80062a6:	f001 fe71 	bl	8007f8c <vPortExitCritical>
}
 80062aa:	bf00      	nop
 80062ac:	3710      	adds	r7, #16
 80062ae:	46bd      	mov	sp, r7
 80062b0:	bd80      	pop	{r7, pc}

080062b2 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80062b2:	b580      	push	{r7, lr}
 80062b4:	b084      	sub	sp, #16
 80062b6:	af00      	add	r7, sp, #0
 80062b8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80062ba:	f001 fe35 	bl	8007f28 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d102      	bne.n	80062cc <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80062c6:	2301      	movs	r3, #1
 80062c8:	60fb      	str	r3, [r7, #12]
 80062ca:	e001      	b.n	80062d0 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80062cc:	2300      	movs	r3, #0
 80062ce:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80062d0:	f001 fe5c 	bl	8007f8c <vPortExitCritical>

	return xReturn;
 80062d4:	68fb      	ldr	r3, [r7, #12]
}
 80062d6:	4618      	mov	r0, r3
 80062d8:	3710      	adds	r7, #16
 80062da:	46bd      	mov	sp, r7
 80062dc:	bd80      	pop	{r7, pc}

080062de <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80062de:	b580      	push	{r7, lr}
 80062e0:	b084      	sub	sp, #16
 80062e2:	af00      	add	r7, sp, #0
 80062e4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80062e6:	f001 fe1f 	bl	8007f28 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062f2:	429a      	cmp	r2, r3
 80062f4:	d102      	bne.n	80062fc <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80062f6:	2301      	movs	r3, #1
 80062f8:	60fb      	str	r3, [r7, #12]
 80062fa:	e001      	b.n	8006300 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80062fc:	2300      	movs	r3, #0
 80062fe:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006300:	f001 fe44 	bl	8007f8c <vPortExitCritical>

	return xReturn;
 8006304:	68fb      	ldr	r3, [r7, #12]
}
 8006306:	4618      	mov	r0, r3
 8006308:	3710      	adds	r7, #16
 800630a:	46bd      	mov	sp, r7
 800630c:	bd80      	pop	{r7, pc}
	...

08006310 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006310:	b480      	push	{r7}
 8006312:	b085      	sub	sp, #20
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
 8006318:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800631a:	2300      	movs	r3, #0
 800631c:	60fb      	str	r3, [r7, #12]
 800631e:	e014      	b.n	800634a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006320:	4a0e      	ldr	r2, [pc, #56]	; (800635c <vQueueAddToRegistry+0x4c>)
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d10b      	bne.n	8006344 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800632c:	490b      	ldr	r1, [pc, #44]	; (800635c <vQueueAddToRegistry+0x4c>)
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	683a      	ldr	r2, [r7, #0]
 8006332:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006336:	4a09      	ldr	r2, [pc, #36]	; (800635c <vQueueAddToRegistry+0x4c>)
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	00db      	lsls	r3, r3, #3
 800633c:	4413      	add	r3, r2
 800633e:	687a      	ldr	r2, [r7, #4]
 8006340:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006342:	e005      	b.n	8006350 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	3301      	adds	r3, #1
 8006348:	60fb      	str	r3, [r7, #12]
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	2b07      	cmp	r3, #7
 800634e:	d9e7      	bls.n	8006320 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006350:	bf00      	nop
 8006352:	3714      	adds	r7, #20
 8006354:	46bd      	mov	sp, r7
 8006356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635a:	4770      	bx	lr
 800635c:	20007ae4 	.word	0x20007ae4

08006360 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8006360:	b480      	push	{r7}
 8006362:	b085      	sub	sp, #20
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006368:	2300      	movs	r3, #0
 800636a:	60fb      	str	r3, [r7, #12]
 800636c:	e016      	b.n	800639c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800636e:	4a10      	ldr	r2, [pc, #64]	; (80063b0 <vQueueUnregisterQueue+0x50>)
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	00db      	lsls	r3, r3, #3
 8006374:	4413      	add	r3, r2
 8006376:	685b      	ldr	r3, [r3, #4]
 8006378:	687a      	ldr	r2, [r7, #4]
 800637a:	429a      	cmp	r2, r3
 800637c:	d10b      	bne.n	8006396 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800637e:	4a0c      	ldr	r2, [pc, #48]	; (80063b0 <vQueueUnregisterQueue+0x50>)
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	2100      	movs	r1, #0
 8006384:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8006388:	4a09      	ldr	r2, [pc, #36]	; (80063b0 <vQueueUnregisterQueue+0x50>)
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	00db      	lsls	r3, r3, #3
 800638e:	4413      	add	r3, r2
 8006390:	2200      	movs	r2, #0
 8006392:	605a      	str	r2, [r3, #4]
				break;
 8006394:	e005      	b.n	80063a2 <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	3301      	adds	r3, #1
 800639a:	60fb      	str	r3, [r7, #12]
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	2b07      	cmp	r3, #7
 80063a0:	d9e5      	bls.n	800636e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80063a2:	bf00      	nop
 80063a4:	3714      	adds	r7, #20
 80063a6:	46bd      	mov	sp, r7
 80063a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ac:	4770      	bx	lr
 80063ae:	bf00      	nop
 80063b0:	20007ae4 	.word	0x20007ae4

080063b4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80063b4:	b580      	push	{r7, lr}
 80063b6:	b086      	sub	sp, #24
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	60f8      	str	r0, [r7, #12]
 80063bc:	60b9      	str	r1, [r7, #8]
 80063be:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80063c4:	f001 fdb0 	bl	8007f28 <vPortEnterCritical>
 80063c8:	697b      	ldr	r3, [r7, #20]
 80063ca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80063ce:	b25b      	sxtb	r3, r3
 80063d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063d4:	d103      	bne.n	80063de <vQueueWaitForMessageRestricted+0x2a>
 80063d6:	697b      	ldr	r3, [r7, #20]
 80063d8:	2200      	movs	r2, #0
 80063da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80063de:	697b      	ldr	r3, [r7, #20]
 80063e0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80063e4:	b25b      	sxtb	r3, r3
 80063e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063ea:	d103      	bne.n	80063f4 <vQueueWaitForMessageRestricted+0x40>
 80063ec:	697b      	ldr	r3, [r7, #20]
 80063ee:	2200      	movs	r2, #0
 80063f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80063f4:	f001 fdca 	bl	8007f8c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80063f8:	697b      	ldr	r3, [r7, #20]
 80063fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d106      	bne.n	800640e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006400:	697b      	ldr	r3, [r7, #20]
 8006402:	3324      	adds	r3, #36	; 0x24
 8006404:	687a      	ldr	r2, [r7, #4]
 8006406:	68b9      	ldr	r1, [r7, #8]
 8006408:	4618      	mov	r0, r3
 800640a:	f000 fcc7 	bl	8006d9c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800640e:	6978      	ldr	r0, [r7, #20]
 8006410:	f7ff fefd 	bl	800620e <prvUnlockQueue>
	}
 8006414:	bf00      	nop
 8006416:	3718      	adds	r7, #24
 8006418:	46bd      	mov	sp, r7
 800641a:	bd80      	pop	{r7, pc}

0800641c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800641c:	b580      	push	{r7, lr}
 800641e:	b08e      	sub	sp, #56	; 0x38
 8006420:	af04      	add	r7, sp, #16
 8006422:	60f8      	str	r0, [r7, #12]
 8006424:	60b9      	str	r1, [r7, #8]
 8006426:	607a      	str	r2, [r7, #4]
 8006428:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800642a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800642c:	2b00      	cmp	r3, #0
 800642e:	d10b      	bne.n	8006448 <xTaskCreateStatic+0x2c>
 8006430:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006434:	b672      	cpsid	i
 8006436:	f383 8811 	msr	BASEPRI, r3
 800643a:	f3bf 8f6f 	isb	sy
 800643e:	f3bf 8f4f 	dsb	sy
 8006442:	b662      	cpsie	i
 8006444:	623b      	str	r3, [r7, #32]
 8006446:	e7fe      	b.n	8006446 <xTaskCreateStatic+0x2a>
		configASSERT( pxTaskBuffer != NULL );
 8006448:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800644a:	2b00      	cmp	r3, #0
 800644c:	d10b      	bne.n	8006466 <xTaskCreateStatic+0x4a>
 800644e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006452:	b672      	cpsid	i
 8006454:	f383 8811 	msr	BASEPRI, r3
 8006458:	f3bf 8f6f 	isb	sy
 800645c:	f3bf 8f4f 	dsb	sy
 8006460:	b662      	cpsie	i
 8006462:	61fb      	str	r3, [r7, #28]
 8006464:	e7fe      	b.n	8006464 <xTaskCreateStatic+0x48>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006466:	2364      	movs	r3, #100	; 0x64
 8006468:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800646a:	693b      	ldr	r3, [r7, #16]
 800646c:	2b64      	cmp	r3, #100	; 0x64
 800646e:	d00b      	beq.n	8006488 <xTaskCreateStatic+0x6c>
 8006470:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006474:	b672      	cpsid	i
 8006476:	f383 8811 	msr	BASEPRI, r3
 800647a:	f3bf 8f6f 	isb	sy
 800647e:	f3bf 8f4f 	dsb	sy
 8006482:	b662      	cpsie	i
 8006484:	61bb      	str	r3, [r7, #24]
 8006486:	e7fe      	b.n	8006486 <xTaskCreateStatic+0x6a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006488:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800648a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800648c:	2b00      	cmp	r3, #0
 800648e:	d01e      	beq.n	80064ce <xTaskCreateStatic+0xb2>
 8006490:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006492:	2b00      	cmp	r3, #0
 8006494:	d01b      	beq.n	80064ce <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006496:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006498:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800649a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800649c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800649e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80064a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064a2:	2202      	movs	r2, #2
 80064a4:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80064a8:	2300      	movs	r3, #0
 80064aa:	9303      	str	r3, [sp, #12]
 80064ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ae:	9302      	str	r3, [sp, #8]
 80064b0:	f107 0314 	add.w	r3, r7, #20
 80064b4:	9301      	str	r3, [sp, #4]
 80064b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064b8:	9300      	str	r3, [sp, #0]
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	687a      	ldr	r2, [r7, #4]
 80064be:	68b9      	ldr	r1, [r7, #8]
 80064c0:	68f8      	ldr	r0, [r7, #12]
 80064c2:	f000 f850 	bl	8006566 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80064c6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80064c8:	f000 f8d6 	bl	8006678 <prvAddNewTaskToReadyList>
 80064cc:	e001      	b.n	80064d2 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80064ce:	2300      	movs	r3, #0
 80064d0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80064d2:	697b      	ldr	r3, [r7, #20]
	}
 80064d4:	4618      	mov	r0, r3
 80064d6:	3728      	adds	r7, #40	; 0x28
 80064d8:	46bd      	mov	sp, r7
 80064da:	bd80      	pop	{r7, pc}

080064dc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80064dc:	b580      	push	{r7, lr}
 80064de:	b08c      	sub	sp, #48	; 0x30
 80064e0:	af04      	add	r7, sp, #16
 80064e2:	60f8      	str	r0, [r7, #12]
 80064e4:	60b9      	str	r1, [r7, #8]
 80064e6:	603b      	str	r3, [r7, #0]
 80064e8:	4613      	mov	r3, r2
 80064ea:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80064ec:	88fb      	ldrh	r3, [r7, #6]
 80064ee:	009b      	lsls	r3, r3, #2
 80064f0:	4618      	mov	r0, r3
 80064f2:	f001 fe3b 	bl	800816c <pvPortMalloc>
 80064f6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80064f8:	697b      	ldr	r3, [r7, #20]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d00e      	beq.n	800651c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80064fe:	2064      	movs	r0, #100	; 0x64
 8006500:	f001 fe34 	bl	800816c <pvPortMalloc>
 8006504:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006506:	69fb      	ldr	r3, [r7, #28]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d003      	beq.n	8006514 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800650c:	69fb      	ldr	r3, [r7, #28]
 800650e:	697a      	ldr	r2, [r7, #20]
 8006510:	631a      	str	r2, [r3, #48]	; 0x30
 8006512:	e005      	b.n	8006520 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006514:	6978      	ldr	r0, [r7, #20]
 8006516:	f001 fef1 	bl	80082fc <vPortFree>
 800651a:	e001      	b.n	8006520 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800651c:	2300      	movs	r3, #0
 800651e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006520:	69fb      	ldr	r3, [r7, #28]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d017      	beq.n	8006556 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006526:	69fb      	ldr	r3, [r7, #28]
 8006528:	2200      	movs	r2, #0
 800652a:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800652e:	88fa      	ldrh	r2, [r7, #6]
 8006530:	2300      	movs	r3, #0
 8006532:	9303      	str	r3, [sp, #12]
 8006534:	69fb      	ldr	r3, [r7, #28]
 8006536:	9302      	str	r3, [sp, #8]
 8006538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800653a:	9301      	str	r3, [sp, #4]
 800653c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800653e:	9300      	str	r3, [sp, #0]
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	68b9      	ldr	r1, [r7, #8]
 8006544:	68f8      	ldr	r0, [r7, #12]
 8006546:	f000 f80e 	bl	8006566 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800654a:	69f8      	ldr	r0, [r7, #28]
 800654c:	f000 f894 	bl	8006678 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006550:	2301      	movs	r3, #1
 8006552:	61bb      	str	r3, [r7, #24]
 8006554:	e002      	b.n	800655c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006556:	f04f 33ff 	mov.w	r3, #4294967295
 800655a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800655c:	69bb      	ldr	r3, [r7, #24]
	}
 800655e:	4618      	mov	r0, r3
 8006560:	3720      	adds	r7, #32
 8006562:	46bd      	mov	sp, r7
 8006564:	bd80      	pop	{r7, pc}

08006566 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006566:	b580      	push	{r7, lr}
 8006568:	b088      	sub	sp, #32
 800656a:	af00      	add	r7, sp, #0
 800656c:	60f8      	str	r0, [r7, #12]
 800656e:	60b9      	str	r1, [r7, #8]
 8006570:	607a      	str	r2, [r7, #4]
 8006572:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006576:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006578:	6879      	ldr	r1, [r7, #4]
 800657a:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800657e:	440b      	add	r3, r1
 8006580:	009b      	lsls	r3, r3, #2
 8006582:	4413      	add	r3, r2
 8006584:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006586:	69bb      	ldr	r3, [r7, #24]
 8006588:	f023 0307 	bic.w	r3, r3, #7
 800658c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800658e:	69bb      	ldr	r3, [r7, #24]
 8006590:	f003 0307 	and.w	r3, r3, #7
 8006594:	2b00      	cmp	r3, #0
 8006596:	d00b      	beq.n	80065b0 <prvInitialiseNewTask+0x4a>
 8006598:	f04f 0350 	mov.w	r3, #80	; 0x50
 800659c:	b672      	cpsid	i
 800659e:	f383 8811 	msr	BASEPRI, r3
 80065a2:	f3bf 8f6f 	isb	sy
 80065a6:	f3bf 8f4f 	dsb	sy
 80065aa:	b662      	cpsie	i
 80065ac:	617b      	str	r3, [r7, #20]
 80065ae:	e7fe      	b.n	80065ae <prvInitialiseNewTask+0x48>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80065b0:	68bb      	ldr	r3, [r7, #8]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d01f      	beq.n	80065f6 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80065b6:	2300      	movs	r3, #0
 80065b8:	61fb      	str	r3, [r7, #28]
 80065ba:	e012      	b.n	80065e2 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80065bc:	68ba      	ldr	r2, [r7, #8]
 80065be:	69fb      	ldr	r3, [r7, #28]
 80065c0:	4413      	add	r3, r2
 80065c2:	7819      	ldrb	r1, [r3, #0]
 80065c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80065c6:	69fb      	ldr	r3, [r7, #28]
 80065c8:	4413      	add	r3, r2
 80065ca:	3334      	adds	r3, #52	; 0x34
 80065cc:	460a      	mov	r2, r1
 80065ce:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80065d0:	68ba      	ldr	r2, [r7, #8]
 80065d2:	69fb      	ldr	r3, [r7, #28]
 80065d4:	4413      	add	r3, r2
 80065d6:	781b      	ldrb	r3, [r3, #0]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d006      	beq.n	80065ea <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80065dc:	69fb      	ldr	r3, [r7, #28]
 80065de:	3301      	adds	r3, #1
 80065e0:	61fb      	str	r3, [r7, #28]
 80065e2:	69fb      	ldr	r3, [r7, #28]
 80065e4:	2b1e      	cmp	r3, #30
 80065e6:	d9e9      	bls.n	80065bc <prvInitialiseNewTask+0x56>
 80065e8:	e000      	b.n	80065ec <prvInitialiseNewTask+0x86>
			{
				break;
 80065ea:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80065ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065ee:	2200      	movs	r2, #0
 80065f0:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
 80065f4:	e003      	b.n	80065fe <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80065f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065f8:	2200      	movs	r2, #0
 80065fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80065fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006600:	2b06      	cmp	r3, #6
 8006602:	d901      	bls.n	8006608 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006604:	2306      	movs	r3, #6
 8006606:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800660a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800660c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800660e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006610:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006612:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->uxMutexesHeld = 0;
 8006614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006616:	2200      	movs	r2, #0
 8006618:	659a      	str	r2, [r3, #88]	; 0x58
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800661a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800661c:	3304      	adds	r3, #4
 800661e:	4618      	mov	r0, r3
 8006620:	f7fe fe1d 	bl	800525e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006626:	3318      	adds	r3, #24
 8006628:	4618      	mov	r0, r3
 800662a:	f7fe fe18 	bl	800525e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800662e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006630:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006632:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006636:	f1c3 0207 	rsb	r2, r3, #7
 800663a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800663c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800663e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006640:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006642:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006646:	2200      	movs	r2, #0
 8006648:	65da      	str	r2, [r3, #92]	; 0x5c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800664a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800664c:	2200      	movs	r2, #0
 800664e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006652:	683a      	ldr	r2, [r7, #0]
 8006654:	68f9      	ldr	r1, [r7, #12]
 8006656:	69b8      	ldr	r0, [r7, #24]
 8006658:	f001 fb60 	bl	8007d1c <pxPortInitialiseStack>
 800665c:	4602      	mov	r2, r0
 800665e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006660:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006664:	2b00      	cmp	r3, #0
 8006666:	d002      	beq.n	800666e <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006668:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800666a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800666c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800666e:	bf00      	nop
 8006670:	3720      	adds	r7, #32
 8006672:	46bd      	mov	sp, r7
 8006674:	bd80      	pop	{r7, pc}
	...

08006678 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006678:	b580      	push	{r7, lr}
 800667a:	b082      	sub	sp, #8
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006680:	f001 fc52 	bl	8007f28 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006684:	4b2a      	ldr	r3, [pc, #168]	; (8006730 <prvAddNewTaskToReadyList+0xb8>)
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	3301      	adds	r3, #1
 800668a:	4a29      	ldr	r2, [pc, #164]	; (8006730 <prvAddNewTaskToReadyList+0xb8>)
 800668c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800668e:	4b29      	ldr	r3, [pc, #164]	; (8006734 <prvAddNewTaskToReadyList+0xbc>)
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d109      	bne.n	80066aa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006696:	4a27      	ldr	r2, [pc, #156]	; (8006734 <prvAddNewTaskToReadyList+0xbc>)
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800669c:	4b24      	ldr	r3, [pc, #144]	; (8006730 <prvAddNewTaskToReadyList+0xb8>)
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	2b01      	cmp	r3, #1
 80066a2:	d110      	bne.n	80066c6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80066a4:	f000 fcaa 	bl	8006ffc <prvInitialiseTaskLists>
 80066a8:	e00d      	b.n	80066c6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80066aa:	4b23      	ldr	r3, [pc, #140]	; (8006738 <prvAddNewTaskToReadyList+0xc0>)
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d109      	bne.n	80066c6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80066b2:	4b20      	ldr	r3, [pc, #128]	; (8006734 <prvAddNewTaskToReadyList+0xbc>)
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066bc:	429a      	cmp	r2, r3
 80066be:	d802      	bhi.n	80066c6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80066c0:	4a1c      	ldr	r2, [pc, #112]	; (8006734 <prvAddNewTaskToReadyList+0xbc>)
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80066c6:	4b1d      	ldr	r3, [pc, #116]	; (800673c <prvAddNewTaskToReadyList+0xc4>)
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	3301      	adds	r3, #1
 80066cc:	4a1b      	ldr	r2, [pc, #108]	; (800673c <prvAddNewTaskToReadyList+0xc4>)
 80066ce:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066d4:	2201      	movs	r2, #1
 80066d6:	409a      	lsls	r2, r3
 80066d8:	4b19      	ldr	r3, [pc, #100]	; (8006740 <prvAddNewTaskToReadyList+0xc8>)
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	4313      	orrs	r3, r2
 80066de:	4a18      	ldr	r2, [pc, #96]	; (8006740 <prvAddNewTaskToReadyList+0xc8>)
 80066e0:	6013      	str	r3, [r2, #0]
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066e6:	4613      	mov	r3, r2
 80066e8:	009b      	lsls	r3, r3, #2
 80066ea:	4413      	add	r3, r2
 80066ec:	009b      	lsls	r3, r3, #2
 80066ee:	4a15      	ldr	r2, [pc, #84]	; (8006744 <prvAddNewTaskToReadyList+0xcc>)
 80066f0:	441a      	add	r2, r3
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	3304      	adds	r3, #4
 80066f6:	4619      	mov	r1, r3
 80066f8:	4610      	mov	r0, r2
 80066fa:	f7fe fdbd 	bl	8005278 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80066fe:	f001 fc45 	bl	8007f8c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006702:	4b0d      	ldr	r3, [pc, #52]	; (8006738 <prvAddNewTaskToReadyList+0xc0>)
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	2b00      	cmp	r3, #0
 8006708:	d00e      	beq.n	8006728 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800670a:	4b0a      	ldr	r3, [pc, #40]	; (8006734 <prvAddNewTaskToReadyList+0xbc>)
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006714:	429a      	cmp	r2, r3
 8006716:	d207      	bcs.n	8006728 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006718:	4b0b      	ldr	r3, [pc, #44]	; (8006748 <prvAddNewTaskToReadyList+0xd0>)
 800671a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800671e:	601a      	str	r2, [r3, #0]
 8006720:	f3bf 8f4f 	dsb	sy
 8006724:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006728:	bf00      	nop
 800672a:	3708      	adds	r7, #8
 800672c:	46bd      	mov	sp, r7
 800672e:	bd80      	pop	{r7, pc}
 8006730:	200009e4 	.word	0x200009e4
 8006734:	200008e4 	.word	0x200008e4
 8006738:	200009f0 	.word	0x200009f0
 800673c:	20000a00 	.word	0x20000a00
 8006740:	200009ec 	.word	0x200009ec
 8006744:	200008e8 	.word	0x200008e8
 8006748:	e000ed04 	.word	0xe000ed04

0800674c <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800674c:	b580      	push	{r7, lr}
 800674e:	b08a      	sub	sp, #40	; 0x28
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
 8006754:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8006756:	2300      	movs	r3, #0
 8006758:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	2b00      	cmp	r3, #0
 800675e:	d10b      	bne.n	8006778 <vTaskDelayUntil+0x2c>
 8006760:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006764:	b672      	cpsid	i
 8006766:	f383 8811 	msr	BASEPRI, r3
 800676a:	f3bf 8f6f 	isb	sy
 800676e:	f3bf 8f4f 	dsb	sy
 8006772:	b662      	cpsie	i
 8006774:	617b      	str	r3, [r7, #20]
 8006776:	e7fe      	b.n	8006776 <vTaskDelayUntil+0x2a>
		configASSERT( ( xTimeIncrement > 0U ) );
 8006778:	683b      	ldr	r3, [r7, #0]
 800677a:	2b00      	cmp	r3, #0
 800677c:	d10b      	bne.n	8006796 <vTaskDelayUntil+0x4a>
 800677e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006782:	b672      	cpsid	i
 8006784:	f383 8811 	msr	BASEPRI, r3
 8006788:	f3bf 8f6f 	isb	sy
 800678c:	f3bf 8f4f 	dsb	sy
 8006790:	b662      	cpsie	i
 8006792:	613b      	str	r3, [r7, #16]
 8006794:	e7fe      	b.n	8006794 <vTaskDelayUntil+0x48>
		configASSERT( uxSchedulerSuspended == 0 );
 8006796:	4b2a      	ldr	r3, [pc, #168]	; (8006840 <vTaskDelayUntil+0xf4>)
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d00b      	beq.n	80067b6 <vTaskDelayUntil+0x6a>
 800679e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067a2:	b672      	cpsid	i
 80067a4:	f383 8811 	msr	BASEPRI, r3
 80067a8:	f3bf 8f6f 	isb	sy
 80067ac:	f3bf 8f4f 	dsb	sy
 80067b0:	b662      	cpsie	i
 80067b2:	60fb      	str	r3, [r7, #12]
 80067b4:	e7fe      	b.n	80067b4 <vTaskDelayUntil+0x68>

		vTaskSuspendAll();
 80067b6:	f000 f8e7 	bl	8006988 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 80067ba:	4b22      	ldr	r3, [pc, #136]	; (8006844 <vTaskDelayUntil+0xf8>)
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	683a      	ldr	r2, [r7, #0]
 80067c6:	4413      	add	r3, r2
 80067c8:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	6a3a      	ldr	r2, [r7, #32]
 80067d0:	429a      	cmp	r2, r3
 80067d2:	d20b      	bcs.n	80067ec <vTaskDelayUntil+0xa0>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	69fa      	ldr	r2, [r7, #28]
 80067da:	429a      	cmp	r2, r3
 80067dc:	d211      	bcs.n	8006802 <vTaskDelayUntil+0xb6>
 80067de:	69fa      	ldr	r2, [r7, #28]
 80067e0:	6a3b      	ldr	r3, [r7, #32]
 80067e2:	429a      	cmp	r2, r3
 80067e4:	d90d      	bls.n	8006802 <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 80067e6:	2301      	movs	r3, #1
 80067e8:	627b      	str	r3, [r7, #36]	; 0x24
 80067ea:	e00a      	b.n	8006802 <vTaskDelayUntil+0xb6>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	69fa      	ldr	r2, [r7, #28]
 80067f2:	429a      	cmp	r2, r3
 80067f4:	d303      	bcc.n	80067fe <vTaskDelayUntil+0xb2>
 80067f6:	69fa      	ldr	r2, [r7, #28]
 80067f8:	6a3b      	ldr	r3, [r7, #32]
 80067fa:	429a      	cmp	r2, r3
 80067fc:	d901      	bls.n	8006802 <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 80067fe:	2301      	movs	r3, #1
 8006800:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	69fa      	ldr	r2, [r7, #28]
 8006806:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8006808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800680a:	2b00      	cmp	r3, #0
 800680c:	d006      	beq.n	800681c <vTaskDelayUntil+0xd0>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800680e:	69fa      	ldr	r2, [r7, #28]
 8006810:	6a3b      	ldr	r3, [r7, #32]
 8006812:	1ad3      	subs	r3, r2, r3
 8006814:	2100      	movs	r1, #0
 8006816:	4618      	mov	r0, r3
 8006818:	f000 fe82 	bl	8007520 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800681c:	f000 f8c2 	bl	80069a4 <xTaskResumeAll>
 8006820:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006822:	69bb      	ldr	r3, [r7, #24]
 8006824:	2b00      	cmp	r3, #0
 8006826:	d107      	bne.n	8006838 <vTaskDelayUntil+0xec>
		{
			portYIELD_WITHIN_API();
 8006828:	4b07      	ldr	r3, [pc, #28]	; (8006848 <vTaskDelayUntil+0xfc>)
 800682a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800682e:	601a      	str	r2, [r3, #0]
 8006830:	f3bf 8f4f 	dsb	sy
 8006834:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006838:	bf00      	nop
 800683a:	3728      	adds	r7, #40	; 0x28
 800683c:	46bd      	mov	sp, r7
 800683e:	bd80      	pop	{r7, pc}
 8006840:	20000a0c 	.word	0x20000a0c
 8006844:	200009e8 	.word	0x200009e8
 8006848:	e000ed04 	.word	0xe000ed04

0800684c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800684c:	b580      	push	{r7, lr}
 800684e:	b084      	sub	sp, #16
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006854:	2300      	movs	r3, #0
 8006856:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d018      	beq.n	8006890 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800685e:	4b14      	ldr	r3, [pc, #80]	; (80068b0 <vTaskDelay+0x64>)
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d00b      	beq.n	800687e <vTaskDelay+0x32>
 8006866:	f04f 0350 	mov.w	r3, #80	; 0x50
 800686a:	b672      	cpsid	i
 800686c:	f383 8811 	msr	BASEPRI, r3
 8006870:	f3bf 8f6f 	isb	sy
 8006874:	f3bf 8f4f 	dsb	sy
 8006878:	b662      	cpsie	i
 800687a:	60bb      	str	r3, [r7, #8]
 800687c:	e7fe      	b.n	800687c <vTaskDelay+0x30>
			vTaskSuspendAll();
 800687e:	f000 f883 	bl	8006988 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006882:	2100      	movs	r1, #0
 8006884:	6878      	ldr	r0, [r7, #4]
 8006886:	f000 fe4b 	bl	8007520 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800688a:	f000 f88b 	bl	80069a4 <xTaskResumeAll>
 800688e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	2b00      	cmp	r3, #0
 8006894:	d107      	bne.n	80068a6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8006896:	4b07      	ldr	r3, [pc, #28]	; (80068b4 <vTaskDelay+0x68>)
 8006898:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800689c:	601a      	str	r2, [r3, #0]
 800689e:	f3bf 8f4f 	dsb	sy
 80068a2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80068a6:	bf00      	nop
 80068a8:	3710      	adds	r7, #16
 80068aa:	46bd      	mov	sp, r7
 80068ac:	bd80      	pop	{r7, pc}
 80068ae:	bf00      	nop
 80068b0:	20000a0c 	.word	0x20000a0c
 80068b4:	e000ed04 	.word	0xe000ed04

080068b8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80068b8:	b580      	push	{r7, lr}
 80068ba:	b08a      	sub	sp, #40	; 0x28
 80068bc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80068be:	2300      	movs	r3, #0
 80068c0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80068c2:	2300      	movs	r3, #0
 80068c4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80068c6:	463a      	mov	r2, r7
 80068c8:	1d39      	adds	r1, r7, #4
 80068ca:	f107 0308 	add.w	r3, r7, #8
 80068ce:	4618      	mov	r0, r3
 80068d0:	f7f9 fe9e 	bl	8000610 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80068d4:	6839      	ldr	r1, [r7, #0]
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	68ba      	ldr	r2, [r7, #8]
 80068da:	9202      	str	r2, [sp, #8]
 80068dc:	9301      	str	r3, [sp, #4]
 80068de:	2300      	movs	r3, #0
 80068e0:	9300      	str	r3, [sp, #0]
 80068e2:	2300      	movs	r3, #0
 80068e4:	460a      	mov	r2, r1
 80068e6:	4922      	ldr	r1, [pc, #136]	; (8006970 <vTaskStartScheduler+0xb8>)
 80068e8:	4822      	ldr	r0, [pc, #136]	; (8006974 <vTaskStartScheduler+0xbc>)
 80068ea:	f7ff fd97 	bl	800641c <xTaskCreateStatic>
 80068ee:	4602      	mov	r2, r0
 80068f0:	4b21      	ldr	r3, [pc, #132]	; (8006978 <vTaskStartScheduler+0xc0>)
 80068f2:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80068f4:	4b20      	ldr	r3, [pc, #128]	; (8006978 <vTaskStartScheduler+0xc0>)
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d002      	beq.n	8006902 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80068fc:	2301      	movs	r3, #1
 80068fe:	617b      	str	r3, [r7, #20]
 8006900:	e001      	b.n	8006906 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006902:	2300      	movs	r3, #0
 8006904:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006906:	697b      	ldr	r3, [r7, #20]
 8006908:	2b01      	cmp	r3, #1
 800690a:	d102      	bne.n	8006912 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800690c:	f000 fe6e 	bl	80075ec <xTimerCreateTimerTask>
 8006910:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006912:	697b      	ldr	r3, [r7, #20]
 8006914:	2b01      	cmp	r3, #1
 8006916:	d117      	bne.n	8006948 <vTaskStartScheduler+0x90>
 8006918:	f04f 0350 	mov.w	r3, #80	; 0x50
 800691c:	b672      	cpsid	i
 800691e:	f383 8811 	msr	BASEPRI, r3
 8006922:	f3bf 8f6f 	isb	sy
 8006926:	f3bf 8f4f 	dsb	sy
 800692a:	b662      	cpsie	i
 800692c:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800692e:	4b13      	ldr	r3, [pc, #76]	; (800697c <vTaskStartScheduler+0xc4>)
 8006930:	f04f 32ff 	mov.w	r2, #4294967295
 8006934:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006936:	4b12      	ldr	r3, [pc, #72]	; (8006980 <vTaskStartScheduler+0xc8>)
 8006938:	2201      	movs	r2, #1
 800693a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800693c:	4b11      	ldr	r3, [pc, #68]	; (8006984 <vTaskStartScheduler+0xcc>)
 800693e:	2200      	movs	r2, #0
 8006940:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006942:	f001 fa75 	bl	8007e30 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006946:	e00f      	b.n	8006968 <vTaskStartScheduler+0xb0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006948:	697b      	ldr	r3, [r7, #20]
 800694a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800694e:	d10b      	bne.n	8006968 <vTaskStartScheduler+0xb0>
 8006950:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006954:	b672      	cpsid	i
 8006956:	f383 8811 	msr	BASEPRI, r3
 800695a:	f3bf 8f6f 	isb	sy
 800695e:	f3bf 8f4f 	dsb	sy
 8006962:	b662      	cpsie	i
 8006964:	60fb      	str	r3, [r7, #12]
 8006966:	e7fe      	b.n	8006966 <vTaskStartScheduler+0xae>
}
 8006968:	bf00      	nop
 800696a:	3718      	adds	r7, #24
 800696c:	46bd      	mov	sp, r7
 800696e:	bd80      	pop	{r7, pc}
 8006970:	08018120 	.word	0x08018120
 8006974:	08006fc9 	.word	0x08006fc9
 8006978:	20000a08 	.word	0x20000a08
 800697c:	20000a04 	.word	0x20000a04
 8006980:	200009f0 	.word	0x200009f0
 8006984:	200009e8 	.word	0x200009e8

08006988 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006988:	b480      	push	{r7}
 800698a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800698c:	4b04      	ldr	r3, [pc, #16]	; (80069a0 <vTaskSuspendAll+0x18>)
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	3301      	adds	r3, #1
 8006992:	4a03      	ldr	r2, [pc, #12]	; (80069a0 <vTaskSuspendAll+0x18>)
 8006994:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8006996:	bf00      	nop
 8006998:	46bd      	mov	sp, r7
 800699a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699e:	4770      	bx	lr
 80069a0:	20000a0c 	.word	0x20000a0c

080069a4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80069a4:	b580      	push	{r7, lr}
 80069a6:	b084      	sub	sp, #16
 80069a8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80069aa:	2300      	movs	r3, #0
 80069ac:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80069ae:	2300      	movs	r3, #0
 80069b0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80069b2:	4b42      	ldr	r3, [pc, #264]	; (8006abc <xTaskResumeAll+0x118>)
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d10b      	bne.n	80069d2 <xTaskResumeAll+0x2e>
 80069ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069be:	b672      	cpsid	i
 80069c0:	f383 8811 	msr	BASEPRI, r3
 80069c4:	f3bf 8f6f 	isb	sy
 80069c8:	f3bf 8f4f 	dsb	sy
 80069cc:	b662      	cpsie	i
 80069ce:	603b      	str	r3, [r7, #0]
 80069d0:	e7fe      	b.n	80069d0 <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80069d2:	f001 faa9 	bl	8007f28 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80069d6:	4b39      	ldr	r3, [pc, #228]	; (8006abc <xTaskResumeAll+0x118>)
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	3b01      	subs	r3, #1
 80069dc:	4a37      	ldr	r2, [pc, #220]	; (8006abc <xTaskResumeAll+0x118>)
 80069de:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80069e0:	4b36      	ldr	r3, [pc, #216]	; (8006abc <xTaskResumeAll+0x118>)
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d161      	bne.n	8006aac <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80069e8:	4b35      	ldr	r3, [pc, #212]	; (8006ac0 <xTaskResumeAll+0x11c>)
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d05d      	beq.n	8006aac <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80069f0:	e02e      	b.n	8006a50 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80069f2:	4b34      	ldr	r3, [pc, #208]	; (8006ac4 <xTaskResumeAll+0x120>)
 80069f4:	68db      	ldr	r3, [r3, #12]
 80069f6:	68db      	ldr	r3, [r3, #12]
 80069f8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	3318      	adds	r3, #24
 80069fe:	4618      	mov	r0, r3
 8006a00:	f7fe fc97 	bl	8005332 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	3304      	adds	r3, #4
 8006a08:	4618      	mov	r0, r3
 8006a0a:	f7fe fc92 	bl	8005332 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a12:	2201      	movs	r2, #1
 8006a14:	409a      	lsls	r2, r3
 8006a16:	4b2c      	ldr	r3, [pc, #176]	; (8006ac8 <xTaskResumeAll+0x124>)
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	4313      	orrs	r3, r2
 8006a1c:	4a2a      	ldr	r2, [pc, #168]	; (8006ac8 <xTaskResumeAll+0x124>)
 8006a1e:	6013      	str	r3, [r2, #0]
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a24:	4613      	mov	r3, r2
 8006a26:	009b      	lsls	r3, r3, #2
 8006a28:	4413      	add	r3, r2
 8006a2a:	009b      	lsls	r3, r3, #2
 8006a2c:	4a27      	ldr	r2, [pc, #156]	; (8006acc <xTaskResumeAll+0x128>)
 8006a2e:	441a      	add	r2, r3
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	3304      	adds	r3, #4
 8006a34:	4619      	mov	r1, r3
 8006a36:	4610      	mov	r0, r2
 8006a38:	f7fe fc1e 	bl	8005278 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a40:	4b23      	ldr	r3, [pc, #140]	; (8006ad0 <xTaskResumeAll+0x12c>)
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a46:	429a      	cmp	r2, r3
 8006a48:	d302      	bcc.n	8006a50 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8006a4a:	4b22      	ldr	r3, [pc, #136]	; (8006ad4 <xTaskResumeAll+0x130>)
 8006a4c:	2201      	movs	r2, #1
 8006a4e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006a50:	4b1c      	ldr	r3, [pc, #112]	; (8006ac4 <xTaskResumeAll+0x120>)
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d1cc      	bne.n	80069f2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d001      	beq.n	8006a62 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006a5e:	f000 fb69 	bl	8007134 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006a62:	4b1d      	ldr	r3, [pc, #116]	; (8006ad8 <xTaskResumeAll+0x134>)
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d010      	beq.n	8006a90 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006a6e:	f000 f859 	bl	8006b24 <xTaskIncrementTick>
 8006a72:	4603      	mov	r3, r0
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d002      	beq.n	8006a7e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006a78:	4b16      	ldr	r3, [pc, #88]	; (8006ad4 <xTaskResumeAll+0x130>)
 8006a7a:	2201      	movs	r2, #1
 8006a7c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	3b01      	subs	r3, #1
 8006a82:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d1f1      	bne.n	8006a6e <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8006a8a:	4b13      	ldr	r3, [pc, #76]	; (8006ad8 <xTaskResumeAll+0x134>)
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006a90:	4b10      	ldr	r3, [pc, #64]	; (8006ad4 <xTaskResumeAll+0x130>)
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d009      	beq.n	8006aac <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006a98:	2301      	movs	r3, #1
 8006a9a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006a9c:	4b0f      	ldr	r3, [pc, #60]	; (8006adc <xTaskResumeAll+0x138>)
 8006a9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006aa2:	601a      	str	r2, [r3, #0]
 8006aa4:	f3bf 8f4f 	dsb	sy
 8006aa8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006aac:	f001 fa6e 	bl	8007f8c <vPortExitCritical>

	return xAlreadyYielded;
 8006ab0:	68bb      	ldr	r3, [r7, #8]
}
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	3710      	adds	r7, #16
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	bd80      	pop	{r7, pc}
 8006aba:	bf00      	nop
 8006abc:	20000a0c 	.word	0x20000a0c
 8006ac0:	200009e4 	.word	0x200009e4
 8006ac4:	200009a4 	.word	0x200009a4
 8006ac8:	200009ec 	.word	0x200009ec
 8006acc:	200008e8 	.word	0x200008e8
 8006ad0:	200008e4 	.word	0x200008e4
 8006ad4:	200009f8 	.word	0x200009f8
 8006ad8:	200009f4 	.word	0x200009f4
 8006adc:	e000ed04 	.word	0xe000ed04

08006ae0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006ae0:	b480      	push	{r7}
 8006ae2:	b083      	sub	sp, #12
 8006ae4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006ae6:	4b05      	ldr	r3, [pc, #20]	; (8006afc <xTaskGetTickCount+0x1c>)
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006aec:	687b      	ldr	r3, [r7, #4]
}
 8006aee:	4618      	mov	r0, r3
 8006af0:	370c      	adds	r7, #12
 8006af2:	46bd      	mov	sp, r7
 8006af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af8:	4770      	bx	lr
 8006afa:	bf00      	nop
 8006afc:	200009e8 	.word	0x200009e8

08006b00 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8006b00:	b580      	push	{r7, lr}
 8006b02:	b082      	sub	sp, #8
 8006b04:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006b06:	f001 faef 	bl	80080e8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8006b0e:	4b04      	ldr	r3, [pc, #16]	; (8006b20 <xTaskGetTickCountFromISR+0x20>)
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006b14:	683b      	ldr	r3, [r7, #0]
}
 8006b16:	4618      	mov	r0, r3
 8006b18:	3708      	adds	r7, #8
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	bd80      	pop	{r7, pc}
 8006b1e:	bf00      	nop
 8006b20:	200009e8 	.word	0x200009e8

08006b24 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006b24:	b580      	push	{r7, lr}
 8006b26:	b086      	sub	sp, #24
 8006b28:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006b2e:	4b4f      	ldr	r3, [pc, #316]	; (8006c6c <xTaskIncrementTick+0x148>)
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	f040 8089 	bne.w	8006c4a <xTaskIncrementTick+0x126>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006b38:	4b4d      	ldr	r3, [pc, #308]	; (8006c70 <xTaskIncrementTick+0x14c>)
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	3301      	adds	r3, #1
 8006b3e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006b40:	4a4b      	ldr	r2, [pc, #300]	; (8006c70 <xTaskIncrementTick+0x14c>)
 8006b42:	693b      	ldr	r3, [r7, #16]
 8006b44:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006b46:	693b      	ldr	r3, [r7, #16]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d121      	bne.n	8006b90 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8006b4c:	4b49      	ldr	r3, [pc, #292]	; (8006c74 <xTaskIncrementTick+0x150>)
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d00b      	beq.n	8006b6e <xTaskIncrementTick+0x4a>
 8006b56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b5a:	b672      	cpsid	i
 8006b5c:	f383 8811 	msr	BASEPRI, r3
 8006b60:	f3bf 8f6f 	isb	sy
 8006b64:	f3bf 8f4f 	dsb	sy
 8006b68:	b662      	cpsie	i
 8006b6a:	603b      	str	r3, [r7, #0]
 8006b6c:	e7fe      	b.n	8006b6c <xTaskIncrementTick+0x48>
 8006b6e:	4b41      	ldr	r3, [pc, #260]	; (8006c74 <xTaskIncrementTick+0x150>)
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	60fb      	str	r3, [r7, #12]
 8006b74:	4b40      	ldr	r3, [pc, #256]	; (8006c78 <xTaskIncrementTick+0x154>)
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	4a3e      	ldr	r2, [pc, #248]	; (8006c74 <xTaskIncrementTick+0x150>)
 8006b7a:	6013      	str	r3, [r2, #0]
 8006b7c:	4a3e      	ldr	r2, [pc, #248]	; (8006c78 <xTaskIncrementTick+0x154>)
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	6013      	str	r3, [r2, #0]
 8006b82:	4b3e      	ldr	r3, [pc, #248]	; (8006c7c <xTaskIncrementTick+0x158>)
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	3301      	adds	r3, #1
 8006b88:	4a3c      	ldr	r2, [pc, #240]	; (8006c7c <xTaskIncrementTick+0x158>)
 8006b8a:	6013      	str	r3, [r2, #0]
 8006b8c:	f000 fad2 	bl	8007134 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006b90:	4b3b      	ldr	r3, [pc, #236]	; (8006c80 <xTaskIncrementTick+0x15c>)
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	693a      	ldr	r2, [r7, #16]
 8006b96:	429a      	cmp	r2, r3
 8006b98:	d348      	bcc.n	8006c2c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006b9a:	4b36      	ldr	r3, [pc, #216]	; (8006c74 <xTaskIncrementTick+0x150>)
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d104      	bne.n	8006bae <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006ba4:	4b36      	ldr	r3, [pc, #216]	; (8006c80 <xTaskIncrementTick+0x15c>)
 8006ba6:	f04f 32ff 	mov.w	r2, #4294967295
 8006baa:	601a      	str	r2, [r3, #0]
					break;
 8006bac:	e03e      	b.n	8006c2c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006bae:	4b31      	ldr	r3, [pc, #196]	; (8006c74 <xTaskIncrementTick+0x150>)
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	68db      	ldr	r3, [r3, #12]
 8006bb4:	68db      	ldr	r3, [r3, #12]
 8006bb6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006bb8:	68bb      	ldr	r3, [r7, #8]
 8006bba:	685b      	ldr	r3, [r3, #4]
 8006bbc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006bbe:	693a      	ldr	r2, [r7, #16]
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	429a      	cmp	r2, r3
 8006bc4:	d203      	bcs.n	8006bce <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006bc6:	4a2e      	ldr	r2, [pc, #184]	; (8006c80 <xTaskIncrementTick+0x15c>)
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006bcc:	e02e      	b.n	8006c2c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006bce:	68bb      	ldr	r3, [r7, #8]
 8006bd0:	3304      	adds	r3, #4
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	f7fe fbad 	bl	8005332 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006bd8:	68bb      	ldr	r3, [r7, #8]
 8006bda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d004      	beq.n	8006bea <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006be0:	68bb      	ldr	r3, [r7, #8]
 8006be2:	3318      	adds	r3, #24
 8006be4:	4618      	mov	r0, r3
 8006be6:	f7fe fba4 	bl	8005332 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006bea:	68bb      	ldr	r3, [r7, #8]
 8006bec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bee:	2201      	movs	r2, #1
 8006bf0:	409a      	lsls	r2, r3
 8006bf2:	4b24      	ldr	r3, [pc, #144]	; (8006c84 <xTaskIncrementTick+0x160>)
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	4313      	orrs	r3, r2
 8006bf8:	4a22      	ldr	r2, [pc, #136]	; (8006c84 <xTaskIncrementTick+0x160>)
 8006bfa:	6013      	str	r3, [r2, #0]
 8006bfc:	68bb      	ldr	r3, [r7, #8]
 8006bfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c00:	4613      	mov	r3, r2
 8006c02:	009b      	lsls	r3, r3, #2
 8006c04:	4413      	add	r3, r2
 8006c06:	009b      	lsls	r3, r3, #2
 8006c08:	4a1f      	ldr	r2, [pc, #124]	; (8006c88 <xTaskIncrementTick+0x164>)
 8006c0a:	441a      	add	r2, r3
 8006c0c:	68bb      	ldr	r3, [r7, #8]
 8006c0e:	3304      	adds	r3, #4
 8006c10:	4619      	mov	r1, r3
 8006c12:	4610      	mov	r0, r2
 8006c14:	f7fe fb30 	bl	8005278 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006c18:	68bb      	ldr	r3, [r7, #8]
 8006c1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c1c:	4b1b      	ldr	r3, [pc, #108]	; (8006c8c <xTaskIncrementTick+0x168>)
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c22:	429a      	cmp	r2, r3
 8006c24:	d3b9      	bcc.n	8006b9a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8006c26:	2301      	movs	r3, #1
 8006c28:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006c2a:	e7b6      	b.n	8006b9a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006c2c:	4b17      	ldr	r3, [pc, #92]	; (8006c8c <xTaskIncrementTick+0x168>)
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c32:	4915      	ldr	r1, [pc, #84]	; (8006c88 <xTaskIncrementTick+0x164>)
 8006c34:	4613      	mov	r3, r2
 8006c36:	009b      	lsls	r3, r3, #2
 8006c38:	4413      	add	r3, r2
 8006c3a:	009b      	lsls	r3, r3, #2
 8006c3c:	440b      	add	r3, r1
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	2b01      	cmp	r3, #1
 8006c42:	d907      	bls.n	8006c54 <xTaskIncrementTick+0x130>
			{
				xSwitchRequired = pdTRUE;
 8006c44:	2301      	movs	r3, #1
 8006c46:	617b      	str	r3, [r7, #20]
 8006c48:	e004      	b.n	8006c54 <xTaskIncrementTick+0x130>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006c4a:	4b11      	ldr	r3, [pc, #68]	; (8006c90 <xTaskIncrementTick+0x16c>)
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	3301      	adds	r3, #1
 8006c50:	4a0f      	ldr	r2, [pc, #60]	; (8006c90 <xTaskIncrementTick+0x16c>)
 8006c52:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006c54:	4b0f      	ldr	r3, [pc, #60]	; (8006c94 <xTaskIncrementTick+0x170>)
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d001      	beq.n	8006c60 <xTaskIncrementTick+0x13c>
		{
			xSwitchRequired = pdTRUE;
 8006c5c:	2301      	movs	r3, #1
 8006c5e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006c60:	697b      	ldr	r3, [r7, #20]
}
 8006c62:	4618      	mov	r0, r3
 8006c64:	3718      	adds	r7, #24
 8006c66:	46bd      	mov	sp, r7
 8006c68:	bd80      	pop	{r7, pc}
 8006c6a:	bf00      	nop
 8006c6c:	20000a0c 	.word	0x20000a0c
 8006c70:	200009e8 	.word	0x200009e8
 8006c74:	2000099c 	.word	0x2000099c
 8006c78:	200009a0 	.word	0x200009a0
 8006c7c:	200009fc 	.word	0x200009fc
 8006c80:	20000a04 	.word	0x20000a04
 8006c84:	200009ec 	.word	0x200009ec
 8006c88:	200008e8 	.word	0x200008e8
 8006c8c:	200008e4 	.word	0x200008e4
 8006c90:	200009f4 	.word	0x200009f4
 8006c94:	200009f8 	.word	0x200009f8

08006c98 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006c98:	b480      	push	{r7}
 8006c9a:	b087      	sub	sp, #28
 8006c9c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006c9e:	4b27      	ldr	r3, [pc, #156]	; (8006d3c <vTaskSwitchContext+0xa4>)
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d003      	beq.n	8006cae <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006ca6:	4b26      	ldr	r3, [pc, #152]	; (8006d40 <vTaskSwitchContext+0xa8>)
 8006ca8:	2201      	movs	r2, #1
 8006caa:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006cac:	e040      	b.n	8006d30 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8006cae:	4b24      	ldr	r3, [pc, #144]	; (8006d40 <vTaskSwitchContext+0xa8>)
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006cb4:	4b23      	ldr	r3, [pc, #140]	; (8006d44 <vTaskSwitchContext+0xac>)
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	fab3 f383 	clz	r3, r3
 8006cc0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8006cc2:	7afb      	ldrb	r3, [r7, #11]
 8006cc4:	f1c3 031f 	rsb	r3, r3, #31
 8006cc8:	617b      	str	r3, [r7, #20]
 8006cca:	491f      	ldr	r1, [pc, #124]	; (8006d48 <vTaskSwitchContext+0xb0>)
 8006ccc:	697a      	ldr	r2, [r7, #20]
 8006cce:	4613      	mov	r3, r2
 8006cd0:	009b      	lsls	r3, r3, #2
 8006cd2:	4413      	add	r3, r2
 8006cd4:	009b      	lsls	r3, r3, #2
 8006cd6:	440b      	add	r3, r1
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d10b      	bne.n	8006cf6 <vTaskSwitchContext+0x5e>
	__asm volatile
 8006cde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ce2:	b672      	cpsid	i
 8006ce4:	f383 8811 	msr	BASEPRI, r3
 8006ce8:	f3bf 8f6f 	isb	sy
 8006cec:	f3bf 8f4f 	dsb	sy
 8006cf0:	b662      	cpsie	i
 8006cf2:	607b      	str	r3, [r7, #4]
 8006cf4:	e7fe      	b.n	8006cf4 <vTaskSwitchContext+0x5c>
 8006cf6:	697a      	ldr	r2, [r7, #20]
 8006cf8:	4613      	mov	r3, r2
 8006cfa:	009b      	lsls	r3, r3, #2
 8006cfc:	4413      	add	r3, r2
 8006cfe:	009b      	lsls	r3, r3, #2
 8006d00:	4a11      	ldr	r2, [pc, #68]	; (8006d48 <vTaskSwitchContext+0xb0>)
 8006d02:	4413      	add	r3, r2
 8006d04:	613b      	str	r3, [r7, #16]
 8006d06:	693b      	ldr	r3, [r7, #16]
 8006d08:	685b      	ldr	r3, [r3, #4]
 8006d0a:	685a      	ldr	r2, [r3, #4]
 8006d0c:	693b      	ldr	r3, [r7, #16]
 8006d0e:	605a      	str	r2, [r3, #4]
 8006d10:	693b      	ldr	r3, [r7, #16]
 8006d12:	685a      	ldr	r2, [r3, #4]
 8006d14:	693b      	ldr	r3, [r7, #16]
 8006d16:	3308      	adds	r3, #8
 8006d18:	429a      	cmp	r2, r3
 8006d1a:	d104      	bne.n	8006d26 <vTaskSwitchContext+0x8e>
 8006d1c:	693b      	ldr	r3, [r7, #16]
 8006d1e:	685b      	ldr	r3, [r3, #4]
 8006d20:	685a      	ldr	r2, [r3, #4]
 8006d22:	693b      	ldr	r3, [r7, #16]
 8006d24:	605a      	str	r2, [r3, #4]
 8006d26:	693b      	ldr	r3, [r7, #16]
 8006d28:	685b      	ldr	r3, [r3, #4]
 8006d2a:	68db      	ldr	r3, [r3, #12]
 8006d2c:	4a07      	ldr	r2, [pc, #28]	; (8006d4c <vTaskSwitchContext+0xb4>)
 8006d2e:	6013      	str	r3, [r2, #0]
}
 8006d30:	bf00      	nop
 8006d32:	371c      	adds	r7, #28
 8006d34:	46bd      	mov	sp, r7
 8006d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3a:	4770      	bx	lr
 8006d3c:	20000a0c 	.word	0x20000a0c
 8006d40:	200009f8 	.word	0x200009f8
 8006d44:	200009ec 	.word	0x200009ec
 8006d48:	200008e8 	.word	0x200008e8
 8006d4c:	200008e4 	.word	0x200008e4

08006d50 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006d50:	b580      	push	{r7, lr}
 8006d52:	b084      	sub	sp, #16
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	6078      	str	r0, [r7, #4]
 8006d58:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d10b      	bne.n	8006d78 <vTaskPlaceOnEventList+0x28>
 8006d60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d64:	b672      	cpsid	i
 8006d66:	f383 8811 	msr	BASEPRI, r3
 8006d6a:	f3bf 8f6f 	isb	sy
 8006d6e:	f3bf 8f4f 	dsb	sy
 8006d72:	b662      	cpsie	i
 8006d74:	60fb      	str	r3, [r7, #12]
 8006d76:	e7fe      	b.n	8006d76 <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006d78:	4b07      	ldr	r3, [pc, #28]	; (8006d98 <vTaskPlaceOnEventList+0x48>)
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	3318      	adds	r3, #24
 8006d7e:	4619      	mov	r1, r3
 8006d80:	6878      	ldr	r0, [r7, #4]
 8006d82:	f7fe fa9d 	bl	80052c0 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006d86:	2101      	movs	r1, #1
 8006d88:	6838      	ldr	r0, [r7, #0]
 8006d8a:	f000 fbc9 	bl	8007520 <prvAddCurrentTaskToDelayedList>
}
 8006d8e:	bf00      	nop
 8006d90:	3710      	adds	r7, #16
 8006d92:	46bd      	mov	sp, r7
 8006d94:	bd80      	pop	{r7, pc}
 8006d96:	bf00      	nop
 8006d98:	200008e4 	.word	0x200008e4

08006d9c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006d9c:	b580      	push	{r7, lr}
 8006d9e:	b086      	sub	sp, #24
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	60f8      	str	r0, [r7, #12]
 8006da4:	60b9      	str	r1, [r7, #8]
 8006da6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d10b      	bne.n	8006dc6 <vTaskPlaceOnEventListRestricted+0x2a>
 8006dae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006db2:	b672      	cpsid	i
 8006db4:	f383 8811 	msr	BASEPRI, r3
 8006db8:	f3bf 8f6f 	isb	sy
 8006dbc:	f3bf 8f4f 	dsb	sy
 8006dc0:	b662      	cpsie	i
 8006dc2:	617b      	str	r3, [r7, #20]
 8006dc4:	e7fe      	b.n	8006dc4 <vTaskPlaceOnEventListRestricted+0x28>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006dc6:	4b0a      	ldr	r3, [pc, #40]	; (8006df0 <vTaskPlaceOnEventListRestricted+0x54>)
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	3318      	adds	r3, #24
 8006dcc:	4619      	mov	r1, r3
 8006dce:	68f8      	ldr	r0, [r7, #12]
 8006dd0:	f7fe fa52 	bl	8005278 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d002      	beq.n	8006de0 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8006dda:	f04f 33ff 	mov.w	r3, #4294967295
 8006dde:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006de0:	6879      	ldr	r1, [r7, #4]
 8006de2:	68b8      	ldr	r0, [r7, #8]
 8006de4:	f000 fb9c 	bl	8007520 <prvAddCurrentTaskToDelayedList>
	}
 8006de8:	bf00      	nop
 8006dea:	3718      	adds	r7, #24
 8006dec:	46bd      	mov	sp, r7
 8006dee:	bd80      	pop	{r7, pc}
 8006df0:	200008e4 	.word	0x200008e4

08006df4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006df4:	b580      	push	{r7, lr}
 8006df6:	b086      	sub	sp, #24
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	68db      	ldr	r3, [r3, #12]
 8006e00:	68db      	ldr	r3, [r3, #12]
 8006e02:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006e04:	693b      	ldr	r3, [r7, #16]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d10b      	bne.n	8006e22 <xTaskRemoveFromEventList+0x2e>
 8006e0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e0e:	b672      	cpsid	i
 8006e10:	f383 8811 	msr	BASEPRI, r3
 8006e14:	f3bf 8f6f 	isb	sy
 8006e18:	f3bf 8f4f 	dsb	sy
 8006e1c:	b662      	cpsie	i
 8006e1e:	60fb      	str	r3, [r7, #12]
 8006e20:	e7fe      	b.n	8006e20 <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006e22:	693b      	ldr	r3, [r7, #16]
 8006e24:	3318      	adds	r3, #24
 8006e26:	4618      	mov	r0, r3
 8006e28:	f7fe fa83 	bl	8005332 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006e2c:	4b1d      	ldr	r3, [pc, #116]	; (8006ea4 <xTaskRemoveFromEventList+0xb0>)
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d11c      	bne.n	8006e6e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006e34:	693b      	ldr	r3, [r7, #16]
 8006e36:	3304      	adds	r3, #4
 8006e38:	4618      	mov	r0, r3
 8006e3a:	f7fe fa7a 	bl	8005332 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006e3e:	693b      	ldr	r3, [r7, #16]
 8006e40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e42:	2201      	movs	r2, #1
 8006e44:	409a      	lsls	r2, r3
 8006e46:	4b18      	ldr	r3, [pc, #96]	; (8006ea8 <xTaskRemoveFromEventList+0xb4>)
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	4313      	orrs	r3, r2
 8006e4c:	4a16      	ldr	r2, [pc, #88]	; (8006ea8 <xTaskRemoveFromEventList+0xb4>)
 8006e4e:	6013      	str	r3, [r2, #0]
 8006e50:	693b      	ldr	r3, [r7, #16]
 8006e52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e54:	4613      	mov	r3, r2
 8006e56:	009b      	lsls	r3, r3, #2
 8006e58:	4413      	add	r3, r2
 8006e5a:	009b      	lsls	r3, r3, #2
 8006e5c:	4a13      	ldr	r2, [pc, #76]	; (8006eac <xTaskRemoveFromEventList+0xb8>)
 8006e5e:	441a      	add	r2, r3
 8006e60:	693b      	ldr	r3, [r7, #16]
 8006e62:	3304      	adds	r3, #4
 8006e64:	4619      	mov	r1, r3
 8006e66:	4610      	mov	r0, r2
 8006e68:	f7fe fa06 	bl	8005278 <vListInsertEnd>
 8006e6c:	e005      	b.n	8006e7a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006e6e:	693b      	ldr	r3, [r7, #16]
 8006e70:	3318      	adds	r3, #24
 8006e72:	4619      	mov	r1, r3
 8006e74:	480e      	ldr	r0, [pc, #56]	; (8006eb0 <xTaskRemoveFromEventList+0xbc>)
 8006e76:	f7fe f9ff 	bl	8005278 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006e7a:	693b      	ldr	r3, [r7, #16]
 8006e7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e7e:	4b0d      	ldr	r3, [pc, #52]	; (8006eb4 <xTaskRemoveFromEventList+0xc0>)
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e84:	429a      	cmp	r2, r3
 8006e86:	d905      	bls.n	8006e94 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006e88:	2301      	movs	r3, #1
 8006e8a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006e8c:	4b0a      	ldr	r3, [pc, #40]	; (8006eb8 <xTaskRemoveFromEventList+0xc4>)
 8006e8e:	2201      	movs	r2, #1
 8006e90:	601a      	str	r2, [r3, #0]
 8006e92:	e001      	b.n	8006e98 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8006e94:	2300      	movs	r3, #0
 8006e96:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006e98:	697b      	ldr	r3, [r7, #20]
}
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	3718      	adds	r7, #24
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	bd80      	pop	{r7, pc}
 8006ea2:	bf00      	nop
 8006ea4:	20000a0c 	.word	0x20000a0c
 8006ea8:	200009ec 	.word	0x200009ec
 8006eac:	200008e8 	.word	0x200008e8
 8006eb0:	200009a4 	.word	0x200009a4
 8006eb4:	200008e4 	.word	0x200008e4
 8006eb8:	200009f8 	.word	0x200009f8

08006ebc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006ebc:	b480      	push	{r7}
 8006ebe:	b083      	sub	sp, #12
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006ec4:	4b06      	ldr	r3, [pc, #24]	; (8006ee0 <vTaskInternalSetTimeOutState+0x24>)
 8006ec6:	681a      	ldr	r2, [r3, #0]
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006ecc:	4b05      	ldr	r3, [pc, #20]	; (8006ee4 <vTaskInternalSetTimeOutState+0x28>)
 8006ece:	681a      	ldr	r2, [r3, #0]
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	605a      	str	r2, [r3, #4]
}
 8006ed4:	bf00      	nop
 8006ed6:	370c      	adds	r7, #12
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ede:	4770      	bx	lr
 8006ee0:	200009fc 	.word	0x200009fc
 8006ee4:	200009e8 	.word	0x200009e8

08006ee8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	b088      	sub	sp, #32
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
 8006ef0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d10b      	bne.n	8006f10 <xTaskCheckForTimeOut+0x28>
 8006ef8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006efc:	b672      	cpsid	i
 8006efe:	f383 8811 	msr	BASEPRI, r3
 8006f02:	f3bf 8f6f 	isb	sy
 8006f06:	f3bf 8f4f 	dsb	sy
 8006f0a:	b662      	cpsie	i
 8006f0c:	613b      	str	r3, [r7, #16]
 8006f0e:	e7fe      	b.n	8006f0e <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 8006f10:	683b      	ldr	r3, [r7, #0]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d10b      	bne.n	8006f2e <xTaskCheckForTimeOut+0x46>
 8006f16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f1a:	b672      	cpsid	i
 8006f1c:	f383 8811 	msr	BASEPRI, r3
 8006f20:	f3bf 8f6f 	isb	sy
 8006f24:	f3bf 8f4f 	dsb	sy
 8006f28:	b662      	cpsie	i
 8006f2a:	60fb      	str	r3, [r7, #12]
 8006f2c:	e7fe      	b.n	8006f2c <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 8006f2e:	f000 fffb 	bl	8007f28 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006f32:	4b1d      	ldr	r3, [pc, #116]	; (8006fa8 <xTaskCheckForTimeOut+0xc0>)
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	685b      	ldr	r3, [r3, #4]
 8006f3c:	69ba      	ldr	r2, [r7, #24]
 8006f3e:	1ad3      	subs	r3, r2, r3
 8006f40:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006f42:	683b      	ldr	r3, [r7, #0]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f4a:	d102      	bne.n	8006f52 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006f4c:	2300      	movs	r3, #0
 8006f4e:	61fb      	str	r3, [r7, #28]
 8006f50:	e023      	b.n	8006f9a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681a      	ldr	r2, [r3, #0]
 8006f56:	4b15      	ldr	r3, [pc, #84]	; (8006fac <xTaskCheckForTimeOut+0xc4>)
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	429a      	cmp	r2, r3
 8006f5c:	d007      	beq.n	8006f6e <xTaskCheckForTimeOut+0x86>
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	685b      	ldr	r3, [r3, #4]
 8006f62:	69ba      	ldr	r2, [r7, #24]
 8006f64:	429a      	cmp	r2, r3
 8006f66:	d302      	bcc.n	8006f6e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006f68:	2301      	movs	r3, #1
 8006f6a:	61fb      	str	r3, [r7, #28]
 8006f6c:	e015      	b.n	8006f9a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006f6e:	683b      	ldr	r3, [r7, #0]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	697a      	ldr	r2, [r7, #20]
 8006f74:	429a      	cmp	r2, r3
 8006f76:	d20b      	bcs.n	8006f90 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006f78:	683b      	ldr	r3, [r7, #0]
 8006f7a:	681a      	ldr	r2, [r3, #0]
 8006f7c:	697b      	ldr	r3, [r7, #20]
 8006f7e:	1ad2      	subs	r2, r2, r3
 8006f80:	683b      	ldr	r3, [r7, #0]
 8006f82:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006f84:	6878      	ldr	r0, [r7, #4]
 8006f86:	f7ff ff99 	bl	8006ebc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	61fb      	str	r3, [r7, #28]
 8006f8e:	e004      	b.n	8006f9a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8006f90:	683b      	ldr	r3, [r7, #0]
 8006f92:	2200      	movs	r2, #0
 8006f94:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006f96:	2301      	movs	r3, #1
 8006f98:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006f9a:	f000 fff7 	bl	8007f8c <vPortExitCritical>

	return xReturn;
 8006f9e:	69fb      	ldr	r3, [r7, #28]
}
 8006fa0:	4618      	mov	r0, r3
 8006fa2:	3720      	adds	r7, #32
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	bd80      	pop	{r7, pc}
 8006fa8:	200009e8 	.word	0x200009e8
 8006fac:	200009fc 	.word	0x200009fc

08006fb0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006fb0:	b480      	push	{r7}
 8006fb2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006fb4:	4b03      	ldr	r3, [pc, #12]	; (8006fc4 <vTaskMissedYield+0x14>)
 8006fb6:	2201      	movs	r2, #1
 8006fb8:	601a      	str	r2, [r3, #0]
}
 8006fba:	bf00      	nop
 8006fbc:	46bd      	mov	sp, r7
 8006fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc2:	4770      	bx	lr
 8006fc4:	200009f8 	.word	0x200009f8

08006fc8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	b082      	sub	sp, #8
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006fd0:	f000 f854 	bl	800707c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006fd4:	4b07      	ldr	r3, [pc, #28]	; (8006ff4 <prvIdleTask+0x2c>)
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	2b01      	cmp	r3, #1
 8006fda:	d907      	bls.n	8006fec <prvIdleTask+0x24>
			{
				taskYIELD();
 8006fdc:	4b06      	ldr	r3, [pc, #24]	; (8006ff8 <prvIdleTask+0x30>)
 8006fde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006fe2:	601a      	str	r2, [r3, #0]
 8006fe4:	f3bf 8f4f 	dsb	sy
 8006fe8:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8006fec:	f7f9 fb08 	bl	8000600 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8006ff0:	e7ee      	b.n	8006fd0 <prvIdleTask+0x8>
 8006ff2:	bf00      	nop
 8006ff4:	200008e8 	.word	0x200008e8
 8006ff8:	e000ed04 	.word	0xe000ed04

08006ffc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	b082      	sub	sp, #8
 8007000:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007002:	2300      	movs	r3, #0
 8007004:	607b      	str	r3, [r7, #4]
 8007006:	e00c      	b.n	8007022 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007008:	687a      	ldr	r2, [r7, #4]
 800700a:	4613      	mov	r3, r2
 800700c:	009b      	lsls	r3, r3, #2
 800700e:	4413      	add	r3, r2
 8007010:	009b      	lsls	r3, r3, #2
 8007012:	4a12      	ldr	r2, [pc, #72]	; (800705c <prvInitialiseTaskLists+0x60>)
 8007014:	4413      	add	r3, r2
 8007016:	4618      	mov	r0, r3
 8007018:	f7fe f901 	bl	800521e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	3301      	adds	r3, #1
 8007020:	607b      	str	r3, [r7, #4]
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	2b06      	cmp	r3, #6
 8007026:	d9ef      	bls.n	8007008 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007028:	480d      	ldr	r0, [pc, #52]	; (8007060 <prvInitialiseTaskLists+0x64>)
 800702a:	f7fe f8f8 	bl	800521e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800702e:	480d      	ldr	r0, [pc, #52]	; (8007064 <prvInitialiseTaskLists+0x68>)
 8007030:	f7fe f8f5 	bl	800521e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007034:	480c      	ldr	r0, [pc, #48]	; (8007068 <prvInitialiseTaskLists+0x6c>)
 8007036:	f7fe f8f2 	bl	800521e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800703a:	480c      	ldr	r0, [pc, #48]	; (800706c <prvInitialiseTaskLists+0x70>)
 800703c:	f7fe f8ef 	bl	800521e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007040:	480b      	ldr	r0, [pc, #44]	; (8007070 <prvInitialiseTaskLists+0x74>)
 8007042:	f7fe f8ec 	bl	800521e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007046:	4b0b      	ldr	r3, [pc, #44]	; (8007074 <prvInitialiseTaskLists+0x78>)
 8007048:	4a05      	ldr	r2, [pc, #20]	; (8007060 <prvInitialiseTaskLists+0x64>)
 800704a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800704c:	4b0a      	ldr	r3, [pc, #40]	; (8007078 <prvInitialiseTaskLists+0x7c>)
 800704e:	4a05      	ldr	r2, [pc, #20]	; (8007064 <prvInitialiseTaskLists+0x68>)
 8007050:	601a      	str	r2, [r3, #0]
}
 8007052:	bf00      	nop
 8007054:	3708      	adds	r7, #8
 8007056:	46bd      	mov	sp, r7
 8007058:	bd80      	pop	{r7, pc}
 800705a:	bf00      	nop
 800705c:	200008e8 	.word	0x200008e8
 8007060:	20000974 	.word	0x20000974
 8007064:	20000988 	.word	0x20000988
 8007068:	200009a4 	.word	0x200009a4
 800706c:	200009b8 	.word	0x200009b8
 8007070:	200009d0 	.word	0x200009d0
 8007074:	2000099c 	.word	0x2000099c
 8007078:	200009a0 	.word	0x200009a0

0800707c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800707c:	b580      	push	{r7, lr}
 800707e:	b082      	sub	sp, #8
 8007080:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007082:	e019      	b.n	80070b8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007084:	f000 ff50 	bl	8007f28 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007088:	4b0f      	ldr	r3, [pc, #60]	; (80070c8 <prvCheckTasksWaitingTermination+0x4c>)
 800708a:	68db      	ldr	r3, [r3, #12]
 800708c:	68db      	ldr	r3, [r3, #12]
 800708e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	3304      	adds	r3, #4
 8007094:	4618      	mov	r0, r3
 8007096:	f7fe f94c 	bl	8005332 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800709a:	4b0c      	ldr	r3, [pc, #48]	; (80070cc <prvCheckTasksWaitingTermination+0x50>)
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	3b01      	subs	r3, #1
 80070a0:	4a0a      	ldr	r2, [pc, #40]	; (80070cc <prvCheckTasksWaitingTermination+0x50>)
 80070a2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80070a4:	4b0a      	ldr	r3, [pc, #40]	; (80070d0 <prvCheckTasksWaitingTermination+0x54>)
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	3b01      	subs	r3, #1
 80070aa:	4a09      	ldr	r2, [pc, #36]	; (80070d0 <prvCheckTasksWaitingTermination+0x54>)
 80070ac:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80070ae:	f000 ff6d 	bl	8007f8c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80070b2:	6878      	ldr	r0, [r7, #4]
 80070b4:	f000 f80e 	bl	80070d4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80070b8:	4b05      	ldr	r3, [pc, #20]	; (80070d0 <prvCheckTasksWaitingTermination+0x54>)
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d1e1      	bne.n	8007084 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80070c0:	bf00      	nop
 80070c2:	3708      	adds	r7, #8
 80070c4:	46bd      	mov	sp, r7
 80070c6:	bd80      	pop	{r7, pc}
 80070c8:	200009b8 	.word	0x200009b8
 80070cc:	200009e4 	.word	0x200009e4
 80070d0:	200009cc 	.word	0x200009cc

080070d4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80070d4:	b580      	push	{r7, lr}
 80070d6:	b084      	sub	sp, #16
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d108      	bne.n	80070f8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070ea:	4618      	mov	r0, r3
 80070ec:	f001 f906 	bl	80082fc <vPortFree>
				vPortFree( pxTCB );
 80070f0:	6878      	ldr	r0, [r7, #4]
 80070f2:	f001 f903 	bl	80082fc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80070f6:	e019      	b.n	800712c <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80070fe:	2b01      	cmp	r3, #1
 8007100:	d103      	bne.n	800710a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007102:	6878      	ldr	r0, [r7, #4]
 8007104:	f001 f8fa 	bl	80082fc <vPortFree>
	}
 8007108:	e010      	b.n	800712c <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8007110:	2b02      	cmp	r3, #2
 8007112:	d00b      	beq.n	800712c <prvDeleteTCB+0x58>
 8007114:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007118:	b672      	cpsid	i
 800711a:	f383 8811 	msr	BASEPRI, r3
 800711e:	f3bf 8f6f 	isb	sy
 8007122:	f3bf 8f4f 	dsb	sy
 8007126:	b662      	cpsie	i
 8007128:	60fb      	str	r3, [r7, #12]
 800712a:	e7fe      	b.n	800712a <prvDeleteTCB+0x56>
	}
 800712c:	bf00      	nop
 800712e:	3710      	adds	r7, #16
 8007130:	46bd      	mov	sp, r7
 8007132:	bd80      	pop	{r7, pc}

08007134 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007134:	b480      	push	{r7}
 8007136:	b083      	sub	sp, #12
 8007138:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800713a:	4b0c      	ldr	r3, [pc, #48]	; (800716c <prvResetNextTaskUnblockTime+0x38>)
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	2b00      	cmp	r3, #0
 8007142:	d104      	bne.n	800714e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007144:	4b0a      	ldr	r3, [pc, #40]	; (8007170 <prvResetNextTaskUnblockTime+0x3c>)
 8007146:	f04f 32ff 	mov.w	r2, #4294967295
 800714a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800714c:	e008      	b.n	8007160 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800714e:	4b07      	ldr	r3, [pc, #28]	; (800716c <prvResetNextTaskUnblockTime+0x38>)
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	68db      	ldr	r3, [r3, #12]
 8007154:	68db      	ldr	r3, [r3, #12]
 8007156:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	685b      	ldr	r3, [r3, #4]
 800715c:	4a04      	ldr	r2, [pc, #16]	; (8007170 <prvResetNextTaskUnblockTime+0x3c>)
 800715e:	6013      	str	r3, [r2, #0]
}
 8007160:	bf00      	nop
 8007162:	370c      	adds	r7, #12
 8007164:	46bd      	mov	sp, r7
 8007166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716a:	4770      	bx	lr
 800716c:	2000099c 	.word	0x2000099c
 8007170:	20000a04 	.word	0x20000a04

08007174 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007174:	b480      	push	{r7}
 8007176:	b083      	sub	sp, #12
 8007178:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800717a:	4b0b      	ldr	r3, [pc, #44]	; (80071a8 <xTaskGetSchedulerState+0x34>)
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	2b00      	cmp	r3, #0
 8007180:	d102      	bne.n	8007188 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007182:	2301      	movs	r3, #1
 8007184:	607b      	str	r3, [r7, #4]
 8007186:	e008      	b.n	800719a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007188:	4b08      	ldr	r3, [pc, #32]	; (80071ac <xTaskGetSchedulerState+0x38>)
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	2b00      	cmp	r3, #0
 800718e:	d102      	bne.n	8007196 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007190:	2302      	movs	r3, #2
 8007192:	607b      	str	r3, [r7, #4]
 8007194:	e001      	b.n	800719a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007196:	2300      	movs	r3, #0
 8007198:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800719a:	687b      	ldr	r3, [r7, #4]
	}
 800719c:	4618      	mov	r0, r3
 800719e:	370c      	adds	r7, #12
 80071a0:	46bd      	mov	sp, r7
 80071a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a6:	4770      	bx	lr
 80071a8:	200009f0 	.word	0x200009f0
 80071ac:	20000a0c 	.word	0x20000a0c

080071b0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80071b0:	b580      	push	{r7, lr}
 80071b2:	b084      	sub	sp, #16
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80071bc:	2300      	movs	r3, #0
 80071be:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d069      	beq.n	800729a <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80071c6:	68bb      	ldr	r3, [r7, #8]
 80071c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071ca:	4b36      	ldr	r3, [pc, #216]	; (80072a4 <xTaskPriorityInherit+0xf4>)
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071d0:	429a      	cmp	r2, r3
 80071d2:	d259      	bcs.n	8007288 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80071d4:	68bb      	ldr	r3, [r7, #8]
 80071d6:	699b      	ldr	r3, [r3, #24]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	db06      	blt.n	80071ea <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80071dc:	4b31      	ldr	r3, [pc, #196]	; (80072a4 <xTaskPriorityInherit+0xf4>)
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071e2:	f1c3 0207 	rsb	r2, r3, #7
 80071e6:	68bb      	ldr	r3, [r7, #8]
 80071e8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80071ea:	68bb      	ldr	r3, [r7, #8]
 80071ec:	6959      	ldr	r1, [r3, #20]
 80071ee:	68bb      	ldr	r3, [r7, #8]
 80071f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071f2:	4613      	mov	r3, r2
 80071f4:	009b      	lsls	r3, r3, #2
 80071f6:	4413      	add	r3, r2
 80071f8:	009b      	lsls	r3, r3, #2
 80071fa:	4a2b      	ldr	r2, [pc, #172]	; (80072a8 <xTaskPriorityInherit+0xf8>)
 80071fc:	4413      	add	r3, r2
 80071fe:	4299      	cmp	r1, r3
 8007200:	d13a      	bne.n	8007278 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007202:	68bb      	ldr	r3, [r7, #8]
 8007204:	3304      	adds	r3, #4
 8007206:	4618      	mov	r0, r3
 8007208:	f7fe f893 	bl	8005332 <uxListRemove>
 800720c:	4603      	mov	r3, r0
 800720e:	2b00      	cmp	r3, #0
 8007210:	d115      	bne.n	800723e <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8007212:	68bb      	ldr	r3, [r7, #8]
 8007214:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007216:	4924      	ldr	r1, [pc, #144]	; (80072a8 <xTaskPriorityInherit+0xf8>)
 8007218:	4613      	mov	r3, r2
 800721a:	009b      	lsls	r3, r3, #2
 800721c:	4413      	add	r3, r2
 800721e:	009b      	lsls	r3, r3, #2
 8007220:	440b      	add	r3, r1
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	2b00      	cmp	r3, #0
 8007226:	d10a      	bne.n	800723e <xTaskPriorityInherit+0x8e>
 8007228:	68bb      	ldr	r3, [r7, #8]
 800722a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800722c:	2201      	movs	r2, #1
 800722e:	fa02 f303 	lsl.w	r3, r2, r3
 8007232:	43da      	mvns	r2, r3
 8007234:	4b1d      	ldr	r3, [pc, #116]	; (80072ac <xTaskPriorityInherit+0xfc>)
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	4013      	ands	r3, r2
 800723a:	4a1c      	ldr	r2, [pc, #112]	; (80072ac <xTaskPriorityInherit+0xfc>)
 800723c:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800723e:	4b19      	ldr	r3, [pc, #100]	; (80072a4 <xTaskPriorityInherit+0xf4>)
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007244:	68bb      	ldr	r3, [r7, #8]
 8007246:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007248:	68bb      	ldr	r3, [r7, #8]
 800724a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800724c:	2201      	movs	r2, #1
 800724e:	409a      	lsls	r2, r3
 8007250:	4b16      	ldr	r3, [pc, #88]	; (80072ac <xTaskPriorityInherit+0xfc>)
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	4313      	orrs	r3, r2
 8007256:	4a15      	ldr	r2, [pc, #84]	; (80072ac <xTaskPriorityInherit+0xfc>)
 8007258:	6013      	str	r3, [r2, #0]
 800725a:	68bb      	ldr	r3, [r7, #8]
 800725c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800725e:	4613      	mov	r3, r2
 8007260:	009b      	lsls	r3, r3, #2
 8007262:	4413      	add	r3, r2
 8007264:	009b      	lsls	r3, r3, #2
 8007266:	4a10      	ldr	r2, [pc, #64]	; (80072a8 <xTaskPriorityInherit+0xf8>)
 8007268:	441a      	add	r2, r3
 800726a:	68bb      	ldr	r3, [r7, #8]
 800726c:	3304      	adds	r3, #4
 800726e:	4619      	mov	r1, r3
 8007270:	4610      	mov	r0, r2
 8007272:	f7fe f801 	bl	8005278 <vListInsertEnd>
 8007276:	e004      	b.n	8007282 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007278:	4b0a      	ldr	r3, [pc, #40]	; (80072a4 <xTaskPriorityInherit+0xf4>)
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800727e:	68bb      	ldr	r3, [r7, #8]
 8007280:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8007282:	2301      	movs	r3, #1
 8007284:	60fb      	str	r3, [r7, #12]
 8007286:	e008      	b.n	800729a <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8007288:	68bb      	ldr	r3, [r7, #8]
 800728a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800728c:	4b05      	ldr	r3, [pc, #20]	; (80072a4 <xTaskPriorityInherit+0xf4>)
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007292:	429a      	cmp	r2, r3
 8007294:	d201      	bcs.n	800729a <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8007296:	2301      	movs	r3, #1
 8007298:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800729a:	68fb      	ldr	r3, [r7, #12]
	}
 800729c:	4618      	mov	r0, r3
 800729e:	3710      	adds	r7, #16
 80072a0:	46bd      	mov	sp, r7
 80072a2:	bd80      	pop	{r7, pc}
 80072a4:	200008e4 	.word	0x200008e4
 80072a8:	200008e8 	.word	0x200008e8
 80072ac:	200009ec 	.word	0x200009ec

080072b0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80072b0:	b580      	push	{r7, lr}
 80072b2:	b086      	sub	sp, #24
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80072bc:	2300      	movs	r3, #0
 80072be:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d070      	beq.n	80073a8 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80072c6:	4b3b      	ldr	r3, [pc, #236]	; (80073b4 <xTaskPriorityDisinherit+0x104>)
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	693a      	ldr	r2, [r7, #16]
 80072cc:	429a      	cmp	r2, r3
 80072ce:	d00b      	beq.n	80072e8 <xTaskPriorityDisinherit+0x38>
 80072d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072d4:	b672      	cpsid	i
 80072d6:	f383 8811 	msr	BASEPRI, r3
 80072da:	f3bf 8f6f 	isb	sy
 80072de:	f3bf 8f4f 	dsb	sy
 80072e2:	b662      	cpsie	i
 80072e4:	60fb      	str	r3, [r7, #12]
 80072e6:	e7fe      	b.n	80072e6 <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 80072e8:	693b      	ldr	r3, [r7, #16]
 80072ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d10b      	bne.n	8007308 <xTaskPriorityDisinherit+0x58>
 80072f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072f4:	b672      	cpsid	i
 80072f6:	f383 8811 	msr	BASEPRI, r3
 80072fa:	f3bf 8f6f 	isb	sy
 80072fe:	f3bf 8f4f 	dsb	sy
 8007302:	b662      	cpsie	i
 8007304:	60bb      	str	r3, [r7, #8]
 8007306:	e7fe      	b.n	8007306 <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 8007308:	693b      	ldr	r3, [r7, #16]
 800730a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800730c:	1e5a      	subs	r2, r3, #1
 800730e:	693b      	ldr	r3, [r7, #16]
 8007310:	659a      	str	r2, [r3, #88]	; 0x58

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007312:	693b      	ldr	r3, [r7, #16]
 8007314:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007316:	693b      	ldr	r3, [r7, #16]
 8007318:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800731a:	429a      	cmp	r2, r3
 800731c:	d044      	beq.n	80073a8 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800731e:	693b      	ldr	r3, [r7, #16]
 8007320:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007322:	2b00      	cmp	r3, #0
 8007324:	d140      	bne.n	80073a8 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007326:	693b      	ldr	r3, [r7, #16]
 8007328:	3304      	adds	r3, #4
 800732a:	4618      	mov	r0, r3
 800732c:	f7fe f801 	bl	8005332 <uxListRemove>
 8007330:	4603      	mov	r3, r0
 8007332:	2b00      	cmp	r3, #0
 8007334:	d115      	bne.n	8007362 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8007336:	693b      	ldr	r3, [r7, #16]
 8007338:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800733a:	491f      	ldr	r1, [pc, #124]	; (80073b8 <xTaskPriorityDisinherit+0x108>)
 800733c:	4613      	mov	r3, r2
 800733e:	009b      	lsls	r3, r3, #2
 8007340:	4413      	add	r3, r2
 8007342:	009b      	lsls	r3, r3, #2
 8007344:	440b      	add	r3, r1
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	2b00      	cmp	r3, #0
 800734a:	d10a      	bne.n	8007362 <xTaskPriorityDisinherit+0xb2>
 800734c:	693b      	ldr	r3, [r7, #16]
 800734e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007350:	2201      	movs	r2, #1
 8007352:	fa02 f303 	lsl.w	r3, r2, r3
 8007356:	43da      	mvns	r2, r3
 8007358:	4b18      	ldr	r3, [pc, #96]	; (80073bc <xTaskPriorityDisinherit+0x10c>)
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	4013      	ands	r3, r2
 800735e:	4a17      	ldr	r2, [pc, #92]	; (80073bc <xTaskPriorityDisinherit+0x10c>)
 8007360:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007362:	693b      	ldr	r3, [r7, #16]
 8007364:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007366:	693b      	ldr	r3, [r7, #16]
 8007368:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800736a:	693b      	ldr	r3, [r7, #16]
 800736c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800736e:	f1c3 0207 	rsb	r2, r3, #7
 8007372:	693b      	ldr	r3, [r7, #16]
 8007374:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007376:	693b      	ldr	r3, [r7, #16]
 8007378:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800737a:	2201      	movs	r2, #1
 800737c:	409a      	lsls	r2, r3
 800737e:	4b0f      	ldr	r3, [pc, #60]	; (80073bc <xTaskPriorityDisinherit+0x10c>)
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	4313      	orrs	r3, r2
 8007384:	4a0d      	ldr	r2, [pc, #52]	; (80073bc <xTaskPriorityDisinherit+0x10c>)
 8007386:	6013      	str	r3, [r2, #0]
 8007388:	693b      	ldr	r3, [r7, #16]
 800738a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800738c:	4613      	mov	r3, r2
 800738e:	009b      	lsls	r3, r3, #2
 8007390:	4413      	add	r3, r2
 8007392:	009b      	lsls	r3, r3, #2
 8007394:	4a08      	ldr	r2, [pc, #32]	; (80073b8 <xTaskPriorityDisinherit+0x108>)
 8007396:	441a      	add	r2, r3
 8007398:	693b      	ldr	r3, [r7, #16]
 800739a:	3304      	adds	r3, #4
 800739c:	4619      	mov	r1, r3
 800739e:	4610      	mov	r0, r2
 80073a0:	f7fd ff6a 	bl	8005278 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80073a4:	2301      	movs	r3, #1
 80073a6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80073a8:	697b      	ldr	r3, [r7, #20]
	}
 80073aa:	4618      	mov	r0, r3
 80073ac:	3718      	adds	r7, #24
 80073ae:	46bd      	mov	sp, r7
 80073b0:	bd80      	pop	{r7, pc}
 80073b2:	bf00      	nop
 80073b4:	200008e4 	.word	0x200008e4
 80073b8:	200008e8 	.word	0x200008e8
 80073bc:	200009ec 	.word	0x200009ec

080073c0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80073c0:	b580      	push	{r7, lr}
 80073c2:	b088      	sub	sp, #32
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]
 80073c8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80073ce:	2301      	movs	r3, #1
 80073d0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	f000 8085 	beq.w	80074e4 <vTaskPriorityDisinheritAfterTimeout+0x124>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80073da:	69bb      	ldr	r3, [r7, #24]
 80073dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d10b      	bne.n	80073fa <vTaskPriorityDisinheritAfterTimeout+0x3a>
 80073e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073e6:	b672      	cpsid	i
 80073e8:	f383 8811 	msr	BASEPRI, r3
 80073ec:	f3bf 8f6f 	isb	sy
 80073f0:	f3bf 8f4f 	dsb	sy
 80073f4:	b662      	cpsie	i
 80073f6:	60fb      	str	r3, [r7, #12]
 80073f8:	e7fe      	b.n	80073f8 <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80073fa:	69bb      	ldr	r3, [r7, #24]
 80073fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073fe:	683a      	ldr	r2, [r7, #0]
 8007400:	429a      	cmp	r2, r3
 8007402:	d902      	bls.n	800740a <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8007404:	683b      	ldr	r3, [r7, #0]
 8007406:	61fb      	str	r3, [r7, #28]
 8007408:	e002      	b.n	8007410 <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800740a:	69bb      	ldr	r3, [r7, #24]
 800740c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800740e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8007410:	69bb      	ldr	r3, [r7, #24]
 8007412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007414:	69fa      	ldr	r2, [r7, #28]
 8007416:	429a      	cmp	r2, r3
 8007418:	d064      	beq.n	80074e4 <vTaskPriorityDisinheritAfterTimeout+0x124>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800741a:	69bb      	ldr	r3, [r7, #24]
 800741c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800741e:	697a      	ldr	r2, [r7, #20]
 8007420:	429a      	cmp	r2, r3
 8007422:	d15f      	bne.n	80074e4 <vTaskPriorityDisinheritAfterTimeout+0x124>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8007424:	4b31      	ldr	r3, [pc, #196]	; (80074ec <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	69ba      	ldr	r2, [r7, #24]
 800742a:	429a      	cmp	r2, r3
 800742c:	d10b      	bne.n	8007446 <vTaskPriorityDisinheritAfterTimeout+0x86>
 800742e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007432:	b672      	cpsid	i
 8007434:	f383 8811 	msr	BASEPRI, r3
 8007438:	f3bf 8f6f 	isb	sy
 800743c:	f3bf 8f4f 	dsb	sy
 8007440:	b662      	cpsie	i
 8007442:	60bb      	str	r3, [r7, #8]
 8007444:	e7fe      	b.n	8007444 <vTaskPriorityDisinheritAfterTimeout+0x84>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007446:	69bb      	ldr	r3, [r7, #24]
 8007448:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800744a:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800744c:	69bb      	ldr	r3, [r7, #24]
 800744e:	69fa      	ldr	r2, [r7, #28]
 8007450:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007452:	69bb      	ldr	r3, [r7, #24]
 8007454:	699b      	ldr	r3, [r3, #24]
 8007456:	2b00      	cmp	r3, #0
 8007458:	db04      	blt.n	8007464 <vTaskPriorityDisinheritAfterTimeout+0xa4>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800745a:	69fb      	ldr	r3, [r7, #28]
 800745c:	f1c3 0207 	rsb	r2, r3, #7
 8007460:	69bb      	ldr	r3, [r7, #24]
 8007462:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007464:	69bb      	ldr	r3, [r7, #24]
 8007466:	6959      	ldr	r1, [r3, #20]
 8007468:	693a      	ldr	r2, [r7, #16]
 800746a:	4613      	mov	r3, r2
 800746c:	009b      	lsls	r3, r3, #2
 800746e:	4413      	add	r3, r2
 8007470:	009b      	lsls	r3, r3, #2
 8007472:	4a1f      	ldr	r2, [pc, #124]	; (80074f0 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8007474:	4413      	add	r3, r2
 8007476:	4299      	cmp	r1, r3
 8007478:	d134      	bne.n	80074e4 <vTaskPriorityDisinheritAfterTimeout+0x124>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800747a:	69bb      	ldr	r3, [r7, #24]
 800747c:	3304      	adds	r3, #4
 800747e:	4618      	mov	r0, r3
 8007480:	f7fd ff57 	bl	8005332 <uxListRemove>
 8007484:	4603      	mov	r3, r0
 8007486:	2b00      	cmp	r3, #0
 8007488:	d115      	bne.n	80074b6 <vTaskPriorityDisinheritAfterTimeout+0xf6>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800748a:	69bb      	ldr	r3, [r7, #24]
 800748c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800748e:	4918      	ldr	r1, [pc, #96]	; (80074f0 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8007490:	4613      	mov	r3, r2
 8007492:	009b      	lsls	r3, r3, #2
 8007494:	4413      	add	r3, r2
 8007496:	009b      	lsls	r3, r3, #2
 8007498:	440b      	add	r3, r1
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	2b00      	cmp	r3, #0
 800749e:	d10a      	bne.n	80074b6 <vTaskPriorityDisinheritAfterTimeout+0xf6>
 80074a0:	69bb      	ldr	r3, [r7, #24]
 80074a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074a4:	2201      	movs	r2, #1
 80074a6:	fa02 f303 	lsl.w	r3, r2, r3
 80074aa:	43da      	mvns	r2, r3
 80074ac:	4b11      	ldr	r3, [pc, #68]	; (80074f4 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	4013      	ands	r3, r2
 80074b2:	4a10      	ldr	r2, [pc, #64]	; (80074f4 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 80074b4:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80074b6:	69bb      	ldr	r3, [r7, #24]
 80074b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074ba:	2201      	movs	r2, #1
 80074bc:	409a      	lsls	r2, r3
 80074be:	4b0d      	ldr	r3, [pc, #52]	; (80074f4 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	4313      	orrs	r3, r2
 80074c4:	4a0b      	ldr	r2, [pc, #44]	; (80074f4 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 80074c6:	6013      	str	r3, [r2, #0]
 80074c8:	69bb      	ldr	r3, [r7, #24]
 80074ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074cc:	4613      	mov	r3, r2
 80074ce:	009b      	lsls	r3, r3, #2
 80074d0:	4413      	add	r3, r2
 80074d2:	009b      	lsls	r3, r3, #2
 80074d4:	4a06      	ldr	r2, [pc, #24]	; (80074f0 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 80074d6:	441a      	add	r2, r3
 80074d8:	69bb      	ldr	r3, [r7, #24]
 80074da:	3304      	adds	r3, #4
 80074dc:	4619      	mov	r1, r3
 80074de:	4610      	mov	r0, r2
 80074e0:	f7fd feca 	bl	8005278 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80074e4:	bf00      	nop
 80074e6:	3720      	adds	r7, #32
 80074e8:	46bd      	mov	sp, r7
 80074ea:	bd80      	pop	{r7, pc}
 80074ec:	200008e4 	.word	0x200008e4
 80074f0:	200008e8 	.word	0x200008e8
 80074f4:	200009ec 	.word	0x200009ec

080074f8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80074f8:	b480      	push	{r7}
 80074fa:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80074fc:	4b07      	ldr	r3, [pc, #28]	; (800751c <pvTaskIncrementMutexHeldCount+0x24>)
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	2b00      	cmp	r3, #0
 8007502:	d004      	beq.n	800750e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007504:	4b05      	ldr	r3, [pc, #20]	; (800751c <pvTaskIncrementMutexHeldCount+0x24>)
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800750a:	3201      	adds	r2, #1
 800750c:	659a      	str	r2, [r3, #88]	; 0x58
		}

		return pxCurrentTCB;
 800750e:	4b03      	ldr	r3, [pc, #12]	; (800751c <pvTaskIncrementMutexHeldCount+0x24>)
 8007510:	681b      	ldr	r3, [r3, #0]
	}
 8007512:	4618      	mov	r0, r3
 8007514:	46bd      	mov	sp, r7
 8007516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751a:	4770      	bx	lr
 800751c:	200008e4 	.word	0x200008e4

08007520 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007520:	b580      	push	{r7, lr}
 8007522:	b084      	sub	sp, #16
 8007524:	af00      	add	r7, sp, #0
 8007526:	6078      	str	r0, [r7, #4]
 8007528:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800752a:	4b29      	ldr	r3, [pc, #164]	; (80075d0 <prvAddCurrentTaskToDelayedList+0xb0>)
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007530:	4b28      	ldr	r3, [pc, #160]	; (80075d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	3304      	adds	r3, #4
 8007536:	4618      	mov	r0, r3
 8007538:	f7fd fefb 	bl	8005332 <uxListRemove>
 800753c:	4603      	mov	r3, r0
 800753e:	2b00      	cmp	r3, #0
 8007540:	d10b      	bne.n	800755a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8007542:	4b24      	ldr	r3, [pc, #144]	; (80075d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007548:	2201      	movs	r2, #1
 800754a:	fa02 f303 	lsl.w	r3, r2, r3
 800754e:	43da      	mvns	r2, r3
 8007550:	4b21      	ldr	r3, [pc, #132]	; (80075d8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	4013      	ands	r3, r2
 8007556:	4a20      	ldr	r2, [pc, #128]	; (80075d8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007558:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007560:	d10a      	bne.n	8007578 <prvAddCurrentTaskToDelayedList+0x58>
 8007562:	683b      	ldr	r3, [r7, #0]
 8007564:	2b00      	cmp	r3, #0
 8007566:	d007      	beq.n	8007578 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007568:	4b1a      	ldr	r3, [pc, #104]	; (80075d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	3304      	adds	r3, #4
 800756e:	4619      	mov	r1, r3
 8007570:	481a      	ldr	r0, [pc, #104]	; (80075dc <prvAddCurrentTaskToDelayedList+0xbc>)
 8007572:	f7fd fe81 	bl	8005278 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007576:	e026      	b.n	80075c6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007578:	68fa      	ldr	r2, [r7, #12]
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	4413      	add	r3, r2
 800757e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007580:	4b14      	ldr	r3, [pc, #80]	; (80075d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	68ba      	ldr	r2, [r7, #8]
 8007586:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007588:	68ba      	ldr	r2, [r7, #8]
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	429a      	cmp	r2, r3
 800758e:	d209      	bcs.n	80075a4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007590:	4b13      	ldr	r3, [pc, #76]	; (80075e0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8007592:	681a      	ldr	r2, [r3, #0]
 8007594:	4b0f      	ldr	r3, [pc, #60]	; (80075d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	3304      	adds	r3, #4
 800759a:	4619      	mov	r1, r3
 800759c:	4610      	mov	r0, r2
 800759e:	f7fd fe8f 	bl	80052c0 <vListInsert>
}
 80075a2:	e010      	b.n	80075c6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80075a4:	4b0f      	ldr	r3, [pc, #60]	; (80075e4 <prvAddCurrentTaskToDelayedList+0xc4>)
 80075a6:	681a      	ldr	r2, [r3, #0]
 80075a8:	4b0a      	ldr	r3, [pc, #40]	; (80075d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	3304      	adds	r3, #4
 80075ae:	4619      	mov	r1, r3
 80075b0:	4610      	mov	r0, r2
 80075b2:	f7fd fe85 	bl	80052c0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80075b6:	4b0c      	ldr	r3, [pc, #48]	; (80075e8 <prvAddCurrentTaskToDelayedList+0xc8>)
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	68ba      	ldr	r2, [r7, #8]
 80075bc:	429a      	cmp	r2, r3
 80075be:	d202      	bcs.n	80075c6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80075c0:	4a09      	ldr	r2, [pc, #36]	; (80075e8 <prvAddCurrentTaskToDelayedList+0xc8>)
 80075c2:	68bb      	ldr	r3, [r7, #8]
 80075c4:	6013      	str	r3, [r2, #0]
}
 80075c6:	bf00      	nop
 80075c8:	3710      	adds	r7, #16
 80075ca:	46bd      	mov	sp, r7
 80075cc:	bd80      	pop	{r7, pc}
 80075ce:	bf00      	nop
 80075d0:	200009e8 	.word	0x200009e8
 80075d4:	200008e4 	.word	0x200008e4
 80075d8:	200009ec 	.word	0x200009ec
 80075dc:	200009d0 	.word	0x200009d0
 80075e0:	200009a0 	.word	0x200009a0
 80075e4:	2000099c 	.word	0x2000099c
 80075e8:	20000a04 	.word	0x20000a04

080075ec <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80075ec:	b580      	push	{r7, lr}
 80075ee:	b08a      	sub	sp, #40	; 0x28
 80075f0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80075f2:	2300      	movs	r3, #0
 80075f4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80075f6:	f000 fb51 	bl	8007c9c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80075fa:	4b1d      	ldr	r3, [pc, #116]	; (8007670 <xTimerCreateTimerTask+0x84>)
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d021      	beq.n	8007646 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007602:	2300      	movs	r3, #0
 8007604:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007606:	2300      	movs	r3, #0
 8007608:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800760a:	1d3a      	adds	r2, r7, #4
 800760c:	f107 0108 	add.w	r1, r7, #8
 8007610:	f107 030c 	add.w	r3, r7, #12
 8007614:	4618      	mov	r0, r3
 8007616:	f7f9 f815 	bl	8000644 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800761a:	6879      	ldr	r1, [r7, #4]
 800761c:	68bb      	ldr	r3, [r7, #8]
 800761e:	68fa      	ldr	r2, [r7, #12]
 8007620:	9202      	str	r2, [sp, #8]
 8007622:	9301      	str	r3, [sp, #4]
 8007624:	2302      	movs	r3, #2
 8007626:	9300      	str	r3, [sp, #0]
 8007628:	2300      	movs	r3, #0
 800762a:	460a      	mov	r2, r1
 800762c:	4911      	ldr	r1, [pc, #68]	; (8007674 <xTimerCreateTimerTask+0x88>)
 800762e:	4812      	ldr	r0, [pc, #72]	; (8007678 <xTimerCreateTimerTask+0x8c>)
 8007630:	f7fe fef4 	bl	800641c <xTaskCreateStatic>
 8007634:	4602      	mov	r2, r0
 8007636:	4b11      	ldr	r3, [pc, #68]	; (800767c <xTimerCreateTimerTask+0x90>)
 8007638:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800763a:	4b10      	ldr	r3, [pc, #64]	; (800767c <xTimerCreateTimerTask+0x90>)
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	2b00      	cmp	r3, #0
 8007640:	d001      	beq.n	8007646 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007642:	2301      	movs	r3, #1
 8007644:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007646:	697b      	ldr	r3, [r7, #20]
 8007648:	2b00      	cmp	r3, #0
 800764a:	d10b      	bne.n	8007664 <xTimerCreateTimerTask+0x78>
 800764c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007650:	b672      	cpsid	i
 8007652:	f383 8811 	msr	BASEPRI, r3
 8007656:	f3bf 8f6f 	isb	sy
 800765a:	f3bf 8f4f 	dsb	sy
 800765e:	b662      	cpsie	i
 8007660:	613b      	str	r3, [r7, #16]
 8007662:	e7fe      	b.n	8007662 <xTimerCreateTimerTask+0x76>
	return xReturn;
 8007664:	697b      	ldr	r3, [r7, #20]
}
 8007666:	4618      	mov	r0, r3
 8007668:	3718      	adds	r7, #24
 800766a:	46bd      	mov	sp, r7
 800766c:	bd80      	pop	{r7, pc}
 800766e:	bf00      	nop
 8007670:	20000a40 	.word	0x20000a40
 8007674:	08018128 	.word	0x08018128
 8007678:	08007875 	.word	0x08007875
 800767c:	20000a44 	.word	0x20000a44

08007680 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8007680:	b580      	push	{r7, lr}
 8007682:	b088      	sub	sp, #32
 8007684:	af02      	add	r7, sp, #8
 8007686:	60f8      	str	r0, [r7, #12]
 8007688:	60b9      	str	r1, [r7, #8]
 800768a:	607a      	str	r2, [r7, #4]
 800768c:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800768e:	2028      	movs	r0, #40	; 0x28
 8007690:	f000 fd6c 	bl	800816c <pvPortMalloc>
 8007694:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8007696:	697b      	ldr	r3, [r7, #20]
 8007698:	2b00      	cmp	r3, #0
 800769a:	d00d      	beq.n	80076b8 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The autoreload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 800769c:	697b      	ldr	r3, [r7, #20]
 800769e:	2200      	movs	r2, #0
 80076a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80076a4:	697b      	ldr	r3, [r7, #20]
 80076a6:	9301      	str	r3, [sp, #4]
 80076a8:	6a3b      	ldr	r3, [r7, #32]
 80076aa:	9300      	str	r3, [sp, #0]
 80076ac:	683b      	ldr	r3, [r7, #0]
 80076ae:	687a      	ldr	r2, [r7, #4]
 80076b0:	68b9      	ldr	r1, [r7, #8]
 80076b2:	68f8      	ldr	r0, [r7, #12]
 80076b4:	f000 f805 	bl	80076c2 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 80076b8:	697b      	ldr	r3, [r7, #20]
	}
 80076ba:	4618      	mov	r0, r3
 80076bc:	3718      	adds	r7, #24
 80076be:	46bd      	mov	sp, r7
 80076c0:	bd80      	pop	{r7, pc}

080076c2 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 80076c2:	b580      	push	{r7, lr}
 80076c4:	b086      	sub	sp, #24
 80076c6:	af00      	add	r7, sp, #0
 80076c8:	60f8      	str	r0, [r7, #12]
 80076ca:	60b9      	str	r1, [r7, #8]
 80076cc:	607a      	str	r2, [r7, #4]
 80076ce:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 80076d0:	68bb      	ldr	r3, [r7, #8]
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d10b      	bne.n	80076ee <prvInitialiseNewTimer+0x2c>
 80076d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076da:	b672      	cpsid	i
 80076dc:	f383 8811 	msr	BASEPRI, r3
 80076e0:	f3bf 8f6f 	isb	sy
 80076e4:	f3bf 8f4f 	dsb	sy
 80076e8:	b662      	cpsie	i
 80076ea:	617b      	str	r3, [r7, #20]
 80076ec:	e7fe      	b.n	80076ec <prvInitialiseNewTimer+0x2a>

	if( pxNewTimer != NULL )
 80076ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d01e      	beq.n	8007732 <prvInitialiseNewTimer+0x70>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 80076f4:	f000 fad2 	bl	8007c9c <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 80076f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076fa:	68fa      	ldr	r2, [r7, #12]
 80076fc:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 80076fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007700:	68ba      	ldr	r2, [r7, #8]
 8007702:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8007704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007706:	683a      	ldr	r2, [r7, #0]
 8007708:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800770a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800770c:	6a3a      	ldr	r2, [r7, #32]
 800770e:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8007710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007712:	3304      	adds	r3, #4
 8007714:	4618      	mov	r0, r3
 8007716:	f7fd fda2 	bl	800525e <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	2b00      	cmp	r3, #0
 800771e:	d008      	beq.n	8007732 <prvInitialiseNewTimer+0x70>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8007720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007722:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007726:	f043 0304 	orr.w	r3, r3, #4
 800772a:	b2da      	uxtb	r2, r3
 800772c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800772e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8007732:	bf00      	nop
 8007734:	3718      	adds	r7, #24
 8007736:	46bd      	mov	sp, r7
 8007738:	bd80      	pop	{r7, pc}
	...

0800773c <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800773c:	b580      	push	{r7, lr}
 800773e:	b08a      	sub	sp, #40	; 0x28
 8007740:	af00      	add	r7, sp, #0
 8007742:	60f8      	str	r0, [r7, #12]
 8007744:	60b9      	str	r1, [r7, #8]
 8007746:	607a      	str	r2, [r7, #4]
 8007748:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800774a:	2300      	movs	r3, #0
 800774c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	2b00      	cmp	r3, #0
 8007752:	d10b      	bne.n	800776c <xTimerGenericCommand+0x30>
 8007754:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007758:	b672      	cpsid	i
 800775a:	f383 8811 	msr	BASEPRI, r3
 800775e:	f3bf 8f6f 	isb	sy
 8007762:	f3bf 8f4f 	dsb	sy
 8007766:	b662      	cpsie	i
 8007768:	623b      	str	r3, [r7, #32]
 800776a:	e7fe      	b.n	800776a <xTimerGenericCommand+0x2e>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800776c:	4b19      	ldr	r3, [pc, #100]	; (80077d4 <xTimerGenericCommand+0x98>)
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	2b00      	cmp	r3, #0
 8007772:	d02a      	beq.n	80077ca <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007774:	68bb      	ldr	r3, [r7, #8]
 8007776:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007780:	68bb      	ldr	r3, [r7, #8]
 8007782:	2b05      	cmp	r3, #5
 8007784:	dc18      	bgt.n	80077b8 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007786:	f7ff fcf5 	bl	8007174 <xTaskGetSchedulerState>
 800778a:	4603      	mov	r3, r0
 800778c:	2b02      	cmp	r3, #2
 800778e:	d109      	bne.n	80077a4 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007790:	4b10      	ldr	r3, [pc, #64]	; (80077d4 <xTimerGenericCommand+0x98>)
 8007792:	6818      	ldr	r0, [r3, #0]
 8007794:	f107 0114 	add.w	r1, r7, #20
 8007798:	2300      	movs	r3, #0
 800779a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800779c:	f7fd ff88 	bl	80056b0 <xQueueGenericSend>
 80077a0:	6278      	str	r0, [r7, #36]	; 0x24
 80077a2:	e012      	b.n	80077ca <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80077a4:	4b0b      	ldr	r3, [pc, #44]	; (80077d4 <xTimerGenericCommand+0x98>)
 80077a6:	6818      	ldr	r0, [r3, #0]
 80077a8:	f107 0114 	add.w	r1, r7, #20
 80077ac:	2300      	movs	r3, #0
 80077ae:	2200      	movs	r2, #0
 80077b0:	f7fd ff7e 	bl	80056b0 <xQueueGenericSend>
 80077b4:	6278      	str	r0, [r7, #36]	; 0x24
 80077b6:	e008      	b.n	80077ca <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80077b8:	4b06      	ldr	r3, [pc, #24]	; (80077d4 <xTimerGenericCommand+0x98>)
 80077ba:	6818      	ldr	r0, [r3, #0]
 80077bc:	f107 0114 	add.w	r1, r7, #20
 80077c0:	2300      	movs	r3, #0
 80077c2:	683a      	ldr	r2, [r7, #0]
 80077c4:	f7fe f876 	bl	80058b4 <xQueueGenericSendFromISR>
 80077c8:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80077ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80077cc:	4618      	mov	r0, r3
 80077ce:	3728      	adds	r7, #40	; 0x28
 80077d0:	46bd      	mov	sp, r7
 80077d2:	bd80      	pop	{r7, pc}
 80077d4:	20000a40 	.word	0x20000a40

080077d8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80077d8:	b580      	push	{r7, lr}
 80077da:	b088      	sub	sp, #32
 80077dc:	af02      	add	r7, sp, #8
 80077de:	6078      	str	r0, [r7, #4]
 80077e0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80077e2:	4b23      	ldr	r3, [pc, #140]	; (8007870 <prvProcessExpiredTimer+0x98>)
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	68db      	ldr	r3, [r3, #12]
 80077e8:	68db      	ldr	r3, [r3, #12]
 80077ea:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80077ec:	697b      	ldr	r3, [r7, #20]
 80077ee:	3304      	adds	r3, #4
 80077f0:	4618      	mov	r0, r3
 80077f2:	f7fd fd9e 	bl	8005332 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80077f6:	697b      	ldr	r3, [r7, #20]
 80077f8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80077fc:	f003 0304 	and.w	r3, r3, #4
 8007800:	2b00      	cmp	r3, #0
 8007802:	d023      	beq.n	800784c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007804:	697b      	ldr	r3, [r7, #20]
 8007806:	699a      	ldr	r2, [r3, #24]
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	18d1      	adds	r1, r2, r3
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	683a      	ldr	r2, [r7, #0]
 8007810:	6978      	ldr	r0, [r7, #20]
 8007812:	f000 f8d3 	bl	80079bc <prvInsertTimerInActiveList>
 8007816:	4603      	mov	r3, r0
 8007818:	2b00      	cmp	r3, #0
 800781a:	d020      	beq.n	800785e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800781c:	2300      	movs	r3, #0
 800781e:	9300      	str	r3, [sp, #0]
 8007820:	2300      	movs	r3, #0
 8007822:	687a      	ldr	r2, [r7, #4]
 8007824:	2100      	movs	r1, #0
 8007826:	6978      	ldr	r0, [r7, #20]
 8007828:	f7ff ff88 	bl	800773c <xTimerGenericCommand>
 800782c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800782e:	693b      	ldr	r3, [r7, #16]
 8007830:	2b00      	cmp	r3, #0
 8007832:	d114      	bne.n	800785e <prvProcessExpiredTimer+0x86>
 8007834:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007838:	b672      	cpsid	i
 800783a:	f383 8811 	msr	BASEPRI, r3
 800783e:	f3bf 8f6f 	isb	sy
 8007842:	f3bf 8f4f 	dsb	sy
 8007846:	b662      	cpsie	i
 8007848:	60fb      	str	r3, [r7, #12]
 800784a:	e7fe      	b.n	800784a <prvProcessExpiredTimer+0x72>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800784c:	697b      	ldr	r3, [r7, #20]
 800784e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007852:	f023 0301 	bic.w	r3, r3, #1
 8007856:	b2da      	uxtb	r2, r3
 8007858:	697b      	ldr	r3, [r7, #20]
 800785a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800785e:	697b      	ldr	r3, [r7, #20]
 8007860:	6a1b      	ldr	r3, [r3, #32]
 8007862:	6978      	ldr	r0, [r7, #20]
 8007864:	4798      	blx	r3
}
 8007866:	bf00      	nop
 8007868:	3718      	adds	r7, #24
 800786a:	46bd      	mov	sp, r7
 800786c:	bd80      	pop	{r7, pc}
 800786e:	bf00      	nop
 8007870:	20000a38 	.word	0x20000a38

08007874 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007874:	b580      	push	{r7, lr}
 8007876:	b084      	sub	sp, #16
 8007878:	af00      	add	r7, sp, #0
 800787a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800787c:	f107 0308 	add.w	r3, r7, #8
 8007880:	4618      	mov	r0, r3
 8007882:	f000 f857 	bl	8007934 <prvGetNextExpireTime>
 8007886:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007888:	68bb      	ldr	r3, [r7, #8]
 800788a:	4619      	mov	r1, r3
 800788c:	68f8      	ldr	r0, [r7, #12]
 800788e:	f000 f803 	bl	8007898 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007892:	f000 f8d5 	bl	8007a40 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007896:	e7f1      	b.n	800787c <prvTimerTask+0x8>

08007898 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007898:	b580      	push	{r7, lr}
 800789a:	b084      	sub	sp, #16
 800789c:	af00      	add	r7, sp, #0
 800789e:	6078      	str	r0, [r7, #4]
 80078a0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80078a2:	f7ff f871 	bl	8006988 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80078a6:	f107 0308 	add.w	r3, r7, #8
 80078aa:	4618      	mov	r0, r3
 80078ac:	f000 f866 	bl	800797c <prvSampleTimeNow>
 80078b0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80078b2:	68bb      	ldr	r3, [r7, #8]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d130      	bne.n	800791a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80078b8:	683b      	ldr	r3, [r7, #0]
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d10a      	bne.n	80078d4 <prvProcessTimerOrBlockTask+0x3c>
 80078be:	687a      	ldr	r2, [r7, #4]
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	429a      	cmp	r2, r3
 80078c4:	d806      	bhi.n	80078d4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80078c6:	f7ff f86d 	bl	80069a4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80078ca:	68f9      	ldr	r1, [r7, #12]
 80078cc:	6878      	ldr	r0, [r7, #4]
 80078ce:	f7ff ff83 	bl	80077d8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80078d2:	e024      	b.n	800791e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80078d4:	683b      	ldr	r3, [r7, #0]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d008      	beq.n	80078ec <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80078da:	4b13      	ldr	r3, [pc, #76]	; (8007928 <prvProcessTimerOrBlockTask+0x90>)
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d101      	bne.n	80078e8 <prvProcessTimerOrBlockTask+0x50>
 80078e4:	2301      	movs	r3, #1
 80078e6:	e000      	b.n	80078ea <prvProcessTimerOrBlockTask+0x52>
 80078e8:	2300      	movs	r3, #0
 80078ea:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80078ec:	4b0f      	ldr	r3, [pc, #60]	; (800792c <prvProcessTimerOrBlockTask+0x94>)
 80078ee:	6818      	ldr	r0, [r3, #0]
 80078f0:	687a      	ldr	r2, [r7, #4]
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	1ad3      	subs	r3, r2, r3
 80078f6:	683a      	ldr	r2, [r7, #0]
 80078f8:	4619      	mov	r1, r3
 80078fa:	f7fe fd5b 	bl	80063b4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80078fe:	f7ff f851 	bl	80069a4 <xTaskResumeAll>
 8007902:	4603      	mov	r3, r0
 8007904:	2b00      	cmp	r3, #0
 8007906:	d10a      	bne.n	800791e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007908:	4b09      	ldr	r3, [pc, #36]	; (8007930 <prvProcessTimerOrBlockTask+0x98>)
 800790a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800790e:	601a      	str	r2, [r3, #0]
 8007910:	f3bf 8f4f 	dsb	sy
 8007914:	f3bf 8f6f 	isb	sy
}
 8007918:	e001      	b.n	800791e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800791a:	f7ff f843 	bl	80069a4 <xTaskResumeAll>
}
 800791e:	bf00      	nop
 8007920:	3710      	adds	r7, #16
 8007922:	46bd      	mov	sp, r7
 8007924:	bd80      	pop	{r7, pc}
 8007926:	bf00      	nop
 8007928:	20000a3c 	.word	0x20000a3c
 800792c:	20000a40 	.word	0x20000a40
 8007930:	e000ed04 	.word	0xe000ed04

08007934 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007934:	b480      	push	{r7}
 8007936:	b085      	sub	sp, #20
 8007938:	af00      	add	r7, sp, #0
 800793a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800793c:	4b0e      	ldr	r3, [pc, #56]	; (8007978 <prvGetNextExpireTime+0x44>)
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	2b00      	cmp	r3, #0
 8007944:	d101      	bne.n	800794a <prvGetNextExpireTime+0x16>
 8007946:	2201      	movs	r2, #1
 8007948:	e000      	b.n	800794c <prvGetNextExpireTime+0x18>
 800794a:	2200      	movs	r2, #0
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	2b00      	cmp	r3, #0
 8007956:	d105      	bne.n	8007964 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007958:	4b07      	ldr	r3, [pc, #28]	; (8007978 <prvGetNextExpireTime+0x44>)
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	68db      	ldr	r3, [r3, #12]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	60fb      	str	r3, [r7, #12]
 8007962:	e001      	b.n	8007968 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007964:	2300      	movs	r3, #0
 8007966:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007968:	68fb      	ldr	r3, [r7, #12]
}
 800796a:	4618      	mov	r0, r3
 800796c:	3714      	adds	r7, #20
 800796e:	46bd      	mov	sp, r7
 8007970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007974:	4770      	bx	lr
 8007976:	bf00      	nop
 8007978:	20000a38 	.word	0x20000a38

0800797c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800797c:	b580      	push	{r7, lr}
 800797e:	b084      	sub	sp, #16
 8007980:	af00      	add	r7, sp, #0
 8007982:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007984:	f7ff f8ac 	bl	8006ae0 <xTaskGetTickCount>
 8007988:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800798a:	4b0b      	ldr	r3, [pc, #44]	; (80079b8 <prvSampleTimeNow+0x3c>)
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	68fa      	ldr	r2, [r7, #12]
 8007990:	429a      	cmp	r2, r3
 8007992:	d205      	bcs.n	80079a0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007994:	f000 f91c 	bl	8007bd0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	2201      	movs	r2, #1
 800799c:	601a      	str	r2, [r3, #0]
 800799e:	e002      	b.n	80079a6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	2200      	movs	r2, #0
 80079a4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80079a6:	4a04      	ldr	r2, [pc, #16]	; (80079b8 <prvSampleTimeNow+0x3c>)
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80079ac:	68fb      	ldr	r3, [r7, #12]
}
 80079ae:	4618      	mov	r0, r3
 80079b0:	3710      	adds	r7, #16
 80079b2:	46bd      	mov	sp, r7
 80079b4:	bd80      	pop	{r7, pc}
 80079b6:	bf00      	nop
 80079b8:	20000a48 	.word	0x20000a48

080079bc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80079bc:	b580      	push	{r7, lr}
 80079be:	b086      	sub	sp, #24
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	60f8      	str	r0, [r7, #12]
 80079c4:	60b9      	str	r1, [r7, #8]
 80079c6:	607a      	str	r2, [r7, #4]
 80079c8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80079ca:	2300      	movs	r3, #0
 80079cc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	68ba      	ldr	r2, [r7, #8]
 80079d2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	68fa      	ldr	r2, [r7, #12]
 80079d8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80079da:	68ba      	ldr	r2, [r7, #8]
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	429a      	cmp	r2, r3
 80079e0:	d812      	bhi.n	8007a08 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80079e2:	687a      	ldr	r2, [r7, #4]
 80079e4:	683b      	ldr	r3, [r7, #0]
 80079e6:	1ad2      	subs	r2, r2, r3
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	699b      	ldr	r3, [r3, #24]
 80079ec:	429a      	cmp	r2, r3
 80079ee:	d302      	bcc.n	80079f6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80079f0:	2301      	movs	r3, #1
 80079f2:	617b      	str	r3, [r7, #20]
 80079f4:	e01b      	b.n	8007a2e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80079f6:	4b10      	ldr	r3, [pc, #64]	; (8007a38 <prvInsertTimerInActiveList+0x7c>)
 80079f8:	681a      	ldr	r2, [r3, #0]
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	3304      	adds	r3, #4
 80079fe:	4619      	mov	r1, r3
 8007a00:	4610      	mov	r0, r2
 8007a02:	f7fd fc5d 	bl	80052c0 <vListInsert>
 8007a06:	e012      	b.n	8007a2e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007a08:	687a      	ldr	r2, [r7, #4]
 8007a0a:	683b      	ldr	r3, [r7, #0]
 8007a0c:	429a      	cmp	r2, r3
 8007a0e:	d206      	bcs.n	8007a1e <prvInsertTimerInActiveList+0x62>
 8007a10:	68ba      	ldr	r2, [r7, #8]
 8007a12:	683b      	ldr	r3, [r7, #0]
 8007a14:	429a      	cmp	r2, r3
 8007a16:	d302      	bcc.n	8007a1e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007a18:	2301      	movs	r3, #1
 8007a1a:	617b      	str	r3, [r7, #20]
 8007a1c:	e007      	b.n	8007a2e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007a1e:	4b07      	ldr	r3, [pc, #28]	; (8007a3c <prvInsertTimerInActiveList+0x80>)
 8007a20:	681a      	ldr	r2, [r3, #0]
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	3304      	adds	r3, #4
 8007a26:	4619      	mov	r1, r3
 8007a28:	4610      	mov	r0, r2
 8007a2a:	f7fd fc49 	bl	80052c0 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007a2e:	697b      	ldr	r3, [r7, #20]
}
 8007a30:	4618      	mov	r0, r3
 8007a32:	3718      	adds	r7, #24
 8007a34:	46bd      	mov	sp, r7
 8007a36:	bd80      	pop	{r7, pc}
 8007a38:	20000a3c 	.word	0x20000a3c
 8007a3c:	20000a38 	.word	0x20000a38

08007a40 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007a40:	b580      	push	{r7, lr}
 8007a42:	b08c      	sub	sp, #48	; 0x30
 8007a44:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007a46:	e0b0      	b.n	8007baa <prvProcessReceivedCommands+0x16a>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007a48:	68bb      	ldr	r3, [r7, #8]
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	f2c0 80ac 	blt.w	8007ba8 <prvProcessReceivedCommands+0x168>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007a50:	693b      	ldr	r3, [r7, #16]
 8007a52:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a56:	695b      	ldr	r3, [r3, #20]
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d004      	beq.n	8007a66 <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a5e:	3304      	adds	r3, #4
 8007a60:	4618      	mov	r0, r3
 8007a62:	f7fd fc66 	bl	8005332 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007a66:	1d3b      	adds	r3, r7, #4
 8007a68:	4618      	mov	r0, r3
 8007a6a:	f7ff ff87 	bl	800797c <prvSampleTimeNow>
 8007a6e:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8007a70:	68bb      	ldr	r3, [r7, #8]
 8007a72:	2b09      	cmp	r3, #9
 8007a74:	f200 8099 	bhi.w	8007baa <prvProcessReceivedCommands+0x16a>
 8007a78:	a201      	add	r2, pc, #4	; (adr r2, 8007a80 <prvProcessReceivedCommands+0x40>)
 8007a7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a7e:	bf00      	nop
 8007a80:	08007aa9 	.word	0x08007aa9
 8007a84:	08007aa9 	.word	0x08007aa9
 8007a88:	08007aa9 	.word	0x08007aa9
 8007a8c:	08007b1f 	.word	0x08007b1f
 8007a90:	08007b33 	.word	0x08007b33
 8007a94:	08007b7f 	.word	0x08007b7f
 8007a98:	08007aa9 	.word	0x08007aa9
 8007a9c:	08007aa9 	.word	0x08007aa9
 8007aa0:	08007b1f 	.word	0x08007b1f
 8007aa4:	08007b33 	.word	0x08007b33
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aaa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007aae:	f043 0301 	orr.w	r3, r3, #1
 8007ab2:	b2da      	uxtb	r2, r3
 8007ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ab6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007aba:	68fa      	ldr	r2, [r7, #12]
 8007abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007abe:	699b      	ldr	r3, [r3, #24]
 8007ac0:	18d1      	adds	r1, r2, r3
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	6a3a      	ldr	r2, [r7, #32]
 8007ac6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007ac8:	f7ff ff78 	bl	80079bc <prvInsertTimerInActiveList>
 8007acc:	4603      	mov	r3, r0
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d06b      	beq.n	8007baa <prvProcessReceivedCommands+0x16a>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ad4:	6a1b      	ldr	r3, [r3, #32]
 8007ad6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007ad8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007adc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007ae0:	f003 0304 	and.w	r3, r3, #4
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d060      	beq.n	8007baa <prvProcessReceivedCommands+0x16a>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007ae8:	68fa      	ldr	r2, [r7, #12]
 8007aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aec:	699b      	ldr	r3, [r3, #24]
 8007aee:	441a      	add	r2, r3
 8007af0:	2300      	movs	r3, #0
 8007af2:	9300      	str	r3, [sp, #0]
 8007af4:	2300      	movs	r3, #0
 8007af6:	2100      	movs	r1, #0
 8007af8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007afa:	f7ff fe1f 	bl	800773c <xTimerGenericCommand>
 8007afe:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8007b00:	69fb      	ldr	r3, [r7, #28]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d151      	bne.n	8007baa <prvProcessReceivedCommands+0x16a>
 8007b06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b0a:	b672      	cpsid	i
 8007b0c:	f383 8811 	msr	BASEPRI, r3
 8007b10:	f3bf 8f6f 	isb	sy
 8007b14:	f3bf 8f4f 	dsb	sy
 8007b18:	b662      	cpsie	i
 8007b1a:	61bb      	str	r3, [r7, #24]
 8007b1c:	e7fe      	b.n	8007b1c <prvProcessReceivedCommands+0xdc>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b20:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007b24:	f023 0301 	bic.w	r3, r3, #1
 8007b28:	b2da      	uxtb	r2, r3
 8007b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b2c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					break;
 8007b30:	e03b      	b.n	8007baa <prvProcessReceivedCommands+0x16a>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b34:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007b38:	f043 0301 	orr.w	r3, r3, #1
 8007b3c:	b2da      	uxtb	r2, r3
 8007b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b40:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007b44:	68fa      	ldr	r2, [r7, #12]
 8007b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b48:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b4c:	699b      	ldr	r3, [r3, #24]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d10b      	bne.n	8007b6a <prvProcessReceivedCommands+0x12a>
 8007b52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b56:	b672      	cpsid	i
 8007b58:	f383 8811 	msr	BASEPRI, r3
 8007b5c:	f3bf 8f6f 	isb	sy
 8007b60:	f3bf 8f4f 	dsb	sy
 8007b64:	b662      	cpsie	i
 8007b66:	617b      	str	r3, [r7, #20]
 8007b68:	e7fe      	b.n	8007b68 <prvProcessReceivedCommands+0x128>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b6c:	699a      	ldr	r2, [r3, #24]
 8007b6e:	6a3b      	ldr	r3, [r7, #32]
 8007b70:	18d1      	adds	r1, r2, r3
 8007b72:	6a3b      	ldr	r3, [r7, #32]
 8007b74:	6a3a      	ldr	r2, [r7, #32]
 8007b76:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007b78:	f7ff ff20 	bl	80079bc <prvInsertTimerInActiveList>
					break;
 8007b7c:	e015      	b.n	8007baa <prvProcessReceivedCommands+0x16a>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b80:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007b84:	f003 0302 	and.w	r3, r3, #2
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d103      	bne.n	8007b94 <prvProcessReceivedCommands+0x154>
						{
							vPortFree( pxTimer );
 8007b8c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007b8e:	f000 fbb5 	bl	80082fc <vPortFree>
 8007b92:	e00a      	b.n	8007baa <prvProcessReceivedCommands+0x16a>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b96:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007b9a:	f023 0301 	bic.w	r3, r3, #1
 8007b9e:	b2da      	uxtb	r2, r3
 8007ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ba2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007ba6:	e000      	b.n	8007baa <prvProcessReceivedCommands+0x16a>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8007ba8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007baa:	4b08      	ldr	r3, [pc, #32]	; (8007bcc <prvProcessReceivedCommands+0x18c>)
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	f107 0108 	add.w	r1, r7, #8
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	f7fd ffab 	bl	8005b10 <xQueueReceive>
 8007bba:	4603      	mov	r3, r0
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	f47f af43 	bne.w	8007a48 <prvProcessReceivedCommands+0x8>
	}
}
 8007bc2:	bf00      	nop
 8007bc4:	3728      	adds	r7, #40	; 0x28
 8007bc6:	46bd      	mov	sp, r7
 8007bc8:	bd80      	pop	{r7, pc}
 8007bca:	bf00      	nop
 8007bcc:	20000a40 	.word	0x20000a40

08007bd0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007bd0:	b580      	push	{r7, lr}
 8007bd2:	b088      	sub	sp, #32
 8007bd4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007bd6:	e049      	b.n	8007c6c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007bd8:	4b2e      	ldr	r3, [pc, #184]	; (8007c94 <prvSwitchTimerLists+0xc4>)
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	68db      	ldr	r3, [r3, #12]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007be2:	4b2c      	ldr	r3, [pc, #176]	; (8007c94 <prvSwitchTimerLists+0xc4>)
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	68db      	ldr	r3, [r3, #12]
 8007be8:	68db      	ldr	r3, [r3, #12]
 8007bea:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	3304      	adds	r3, #4
 8007bf0:	4618      	mov	r0, r3
 8007bf2:	f7fd fb9e 	bl	8005332 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	6a1b      	ldr	r3, [r3, #32]
 8007bfa:	68f8      	ldr	r0, [r7, #12]
 8007bfc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007c04:	f003 0304 	and.w	r3, r3, #4
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d02f      	beq.n	8007c6c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	699b      	ldr	r3, [r3, #24]
 8007c10:	693a      	ldr	r2, [r7, #16]
 8007c12:	4413      	add	r3, r2
 8007c14:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007c16:	68ba      	ldr	r2, [r7, #8]
 8007c18:	693b      	ldr	r3, [r7, #16]
 8007c1a:	429a      	cmp	r2, r3
 8007c1c:	d90e      	bls.n	8007c3c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	68ba      	ldr	r2, [r7, #8]
 8007c22:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	68fa      	ldr	r2, [r7, #12]
 8007c28:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007c2a:	4b1a      	ldr	r3, [pc, #104]	; (8007c94 <prvSwitchTimerLists+0xc4>)
 8007c2c:	681a      	ldr	r2, [r3, #0]
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	3304      	adds	r3, #4
 8007c32:	4619      	mov	r1, r3
 8007c34:	4610      	mov	r0, r2
 8007c36:	f7fd fb43 	bl	80052c0 <vListInsert>
 8007c3a:	e017      	b.n	8007c6c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007c3c:	2300      	movs	r3, #0
 8007c3e:	9300      	str	r3, [sp, #0]
 8007c40:	2300      	movs	r3, #0
 8007c42:	693a      	ldr	r2, [r7, #16]
 8007c44:	2100      	movs	r1, #0
 8007c46:	68f8      	ldr	r0, [r7, #12]
 8007c48:	f7ff fd78 	bl	800773c <xTimerGenericCommand>
 8007c4c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d10b      	bne.n	8007c6c <prvSwitchTimerLists+0x9c>
 8007c54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c58:	b672      	cpsid	i
 8007c5a:	f383 8811 	msr	BASEPRI, r3
 8007c5e:	f3bf 8f6f 	isb	sy
 8007c62:	f3bf 8f4f 	dsb	sy
 8007c66:	b662      	cpsie	i
 8007c68:	603b      	str	r3, [r7, #0]
 8007c6a:	e7fe      	b.n	8007c6a <prvSwitchTimerLists+0x9a>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007c6c:	4b09      	ldr	r3, [pc, #36]	; (8007c94 <prvSwitchTimerLists+0xc4>)
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d1b0      	bne.n	8007bd8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007c76:	4b07      	ldr	r3, [pc, #28]	; (8007c94 <prvSwitchTimerLists+0xc4>)
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007c7c:	4b06      	ldr	r3, [pc, #24]	; (8007c98 <prvSwitchTimerLists+0xc8>)
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	4a04      	ldr	r2, [pc, #16]	; (8007c94 <prvSwitchTimerLists+0xc4>)
 8007c82:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007c84:	4a04      	ldr	r2, [pc, #16]	; (8007c98 <prvSwitchTimerLists+0xc8>)
 8007c86:	697b      	ldr	r3, [r7, #20]
 8007c88:	6013      	str	r3, [r2, #0]
}
 8007c8a:	bf00      	nop
 8007c8c:	3718      	adds	r7, #24
 8007c8e:	46bd      	mov	sp, r7
 8007c90:	bd80      	pop	{r7, pc}
 8007c92:	bf00      	nop
 8007c94:	20000a38 	.word	0x20000a38
 8007c98:	20000a3c 	.word	0x20000a3c

08007c9c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007c9c:	b580      	push	{r7, lr}
 8007c9e:	b082      	sub	sp, #8
 8007ca0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007ca2:	f000 f941 	bl	8007f28 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007ca6:	4b15      	ldr	r3, [pc, #84]	; (8007cfc <prvCheckForValidListAndQueue+0x60>)
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d120      	bne.n	8007cf0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007cae:	4814      	ldr	r0, [pc, #80]	; (8007d00 <prvCheckForValidListAndQueue+0x64>)
 8007cb0:	f7fd fab5 	bl	800521e <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007cb4:	4813      	ldr	r0, [pc, #76]	; (8007d04 <prvCheckForValidListAndQueue+0x68>)
 8007cb6:	f7fd fab2 	bl	800521e <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007cba:	4b13      	ldr	r3, [pc, #76]	; (8007d08 <prvCheckForValidListAndQueue+0x6c>)
 8007cbc:	4a10      	ldr	r2, [pc, #64]	; (8007d00 <prvCheckForValidListAndQueue+0x64>)
 8007cbe:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007cc0:	4b12      	ldr	r3, [pc, #72]	; (8007d0c <prvCheckForValidListAndQueue+0x70>)
 8007cc2:	4a10      	ldr	r2, [pc, #64]	; (8007d04 <prvCheckForValidListAndQueue+0x68>)
 8007cc4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007cc6:	2300      	movs	r3, #0
 8007cc8:	9300      	str	r3, [sp, #0]
 8007cca:	4b11      	ldr	r3, [pc, #68]	; (8007d10 <prvCheckForValidListAndQueue+0x74>)
 8007ccc:	4a11      	ldr	r2, [pc, #68]	; (8007d14 <prvCheckForValidListAndQueue+0x78>)
 8007cce:	210c      	movs	r1, #12
 8007cd0:	200a      	movs	r0, #10
 8007cd2:	f7fd fbc3 	bl	800545c <xQueueGenericCreateStatic>
 8007cd6:	4602      	mov	r2, r0
 8007cd8:	4b08      	ldr	r3, [pc, #32]	; (8007cfc <prvCheckForValidListAndQueue+0x60>)
 8007cda:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007cdc:	4b07      	ldr	r3, [pc, #28]	; (8007cfc <prvCheckForValidListAndQueue+0x60>)
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d005      	beq.n	8007cf0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007ce4:	4b05      	ldr	r3, [pc, #20]	; (8007cfc <prvCheckForValidListAndQueue+0x60>)
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	490b      	ldr	r1, [pc, #44]	; (8007d18 <prvCheckForValidListAndQueue+0x7c>)
 8007cea:	4618      	mov	r0, r3
 8007cec:	f7fe fb10 	bl	8006310 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007cf0:	f000 f94c 	bl	8007f8c <vPortExitCritical>
}
 8007cf4:	bf00      	nop
 8007cf6:	46bd      	mov	sp, r7
 8007cf8:	bd80      	pop	{r7, pc}
 8007cfa:	bf00      	nop
 8007cfc:	20000a40 	.word	0x20000a40
 8007d00:	20000a10 	.word	0x20000a10
 8007d04:	20000a24 	.word	0x20000a24
 8007d08:	20000a38 	.word	0x20000a38
 8007d0c:	20000a3c 	.word	0x20000a3c
 8007d10:	20000ac4 	.word	0x20000ac4
 8007d14:	20000a4c 	.word	0x20000a4c
 8007d18:	08018130 	.word	0x08018130

08007d1c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007d1c:	b480      	push	{r7}
 8007d1e:	b085      	sub	sp, #20
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	60f8      	str	r0, [r7, #12]
 8007d24:	60b9      	str	r1, [r7, #8]
 8007d26:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	3b04      	subs	r3, #4
 8007d2c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007d34:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	3b04      	subs	r3, #4
 8007d3a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007d3c:	68bb      	ldr	r3, [r7, #8]
 8007d3e:	f023 0201 	bic.w	r2, r3, #1
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	3b04      	subs	r3, #4
 8007d4a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007d4c:	4a0c      	ldr	r2, [pc, #48]	; (8007d80 <pxPortInitialiseStack+0x64>)
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	3b14      	subs	r3, #20
 8007d56:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007d58:	687a      	ldr	r2, [r7, #4]
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	3b04      	subs	r3, #4
 8007d62:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	f06f 0202 	mvn.w	r2, #2
 8007d6a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	3b20      	subs	r3, #32
 8007d70:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007d72:	68fb      	ldr	r3, [r7, #12]
}
 8007d74:	4618      	mov	r0, r3
 8007d76:	3714      	adds	r7, #20
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7e:	4770      	bx	lr
 8007d80:	08007d85 	.word	0x08007d85

08007d84 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007d84:	b480      	push	{r7}
 8007d86:	b085      	sub	sp, #20
 8007d88:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007d8a:	2300      	movs	r3, #0
 8007d8c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007d8e:	4b13      	ldr	r3, [pc, #76]	; (8007ddc <prvTaskExitError+0x58>)
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d96:	d00b      	beq.n	8007db0 <prvTaskExitError+0x2c>
 8007d98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d9c:	b672      	cpsid	i
 8007d9e:	f383 8811 	msr	BASEPRI, r3
 8007da2:	f3bf 8f6f 	isb	sy
 8007da6:	f3bf 8f4f 	dsb	sy
 8007daa:	b662      	cpsie	i
 8007dac:	60fb      	str	r3, [r7, #12]
 8007dae:	e7fe      	b.n	8007dae <prvTaskExitError+0x2a>
 8007db0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007db4:	b672      	cpsid	i
 8007db6:	f383 8811 	msr	BASEPRI, r3
 8007dba:	f3bf 8f6f 	isb	sy
 8007dbe:	f3bf 8f4f 	dsb	sy
 8007dc2:	b662      	cpsie	i
 8007dc4:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007dc6:	bf00      	nop
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d0fc      	beq.n	8007dc8 <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007dce:	bf00      	nop
 8007dd0:	3714      	adds	r7, #20
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd8:	4770      	bx	lr
 8007dda:	bf00      	nop
 8007ddc:	2000000c 	.word	0x2000000c

08007de0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007de0:	4b07      	ldr	r3, [pc, #28]	; (8007e00 <pxCurrentTCBConst2>)
 8007de2:	6819      	ldr	r1, [r3, #0]
 8007de4:	6808      	ldr	r0, [r1, #0]
 8007de6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007dea:	f380 8809 	msr	PSP, r0
 8007dee:	f3bf 8f6f 	isb	sy
 8007df2:	f04f 0000 	mov.w	r0, #0
 8007df6:	f380 8811 	msr	BASEPRI, r0
 8007dfa:	4770      	bx	lr
 8007dfc:	f3af 8000 	nop.w

08007e00 <pxCurrentTCBConst2>:
 8007e00:	200008e4 	.word	0x200008e4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007e04:	bf00      	nop
 8007e06:	bf00      	nop

08007e08 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007e08:	4808      	ldr	r0, [pc, #32]	; (8007e2c <prvPortStartFirstTask+0x24>)
 8007e0a:	6800      	ldr	r0, [r0, #0]
 8007e0c:	6800      	ldr	r0, [r0, #0]
 8007e0e:	f380 8808 	msr	MSP, r0
 8007e12:	f04f 0000 	mov.w	r0, #0
 8007e16:	f380 8814 	msr	CONTROL, r0
 8007e1a:	b662      	cpsie	i
 8007e1c:	b661      	cpsie	f
 8007e1e:	f3bf 8f4f 	dsb	sy
 8007e22:	f3bf 8f6f 	isb	sy
 8007e26:	df00      	svc	0
 8007e28:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007e2a:	bf00      	nop
 8007e2c:	e000ed08 	.word	0xe000ed08

08007e30 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007e30:	b580      	push	{r7, lr}
 8007e32:	b084      	sub	sp, #16
 8007e34:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007e36:	4b36      	ldr	r3, [pc, #216]	; (8007f10 <xPortStartScheduler+0xe0>)
 8007e38:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	781b      	ldrb	r3, [r3, #0]
 8007e3e:	b2db      	uxtb	r3, r3
 8007e40:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	22ff      	movs	r2, #255	; 0xff
 8007e46:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	781b      	ldrb	r3, [r3, #0]
 8007e4c:	b2db      	uxtb	r3, r3
 8007e4e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007e50:	78fb      	ldrb	r3, [r7, #3]
 8007e52:	b2db      	uxtb	r3, r3
 8007e54:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007e58:	b2da      	uxtb	r2, r3
 8007e5a:	4b2e      	ldr	r3, [pc, #184]	; (8007f14 <xPortStartScheduler+0xe4>)
 8007e5c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007e5e:	4b2e      	ldr	r3, [pc, #184]	; (8007f18 <xPortStartScheduler+0xe8>)
 8007e60:	2207      	movs	r2, #7
 8007e62:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007e64:	e009      	b.n	8007e7a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8007e66:	4b2c      	ldr	r3, [pc, #176]	; (8007f18 <xPortStartScheduler+0xe8>)
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	3b01      	subs	r3, #1
 8007e6c:	4a2a      	ldr	r2, [pc, #168]	; (8007f18 <xPortStartScheduler+0xe8>)
 8007e6e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007e70:	78fb      	ldrb	r3, [r7, #3]
 8007e72:	b2db      	uxtb	r3, r3
 8007e74:	005b      	lsls	r3, r3, #1
 8007e76:	b2db      	uxtb	r3, r3
 8007e78:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007e7a:	78fb      	ldrb	r3, [r7, #3]
 8007e7c:	b2db      	uxtb	r3, r3
 8007e7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e82:	2b80      	cmp	r3, #128	; 0x80
 8007e84:	d0ef      	beq.n	8007e66 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007e86:	4b24      	ldr	r3, [pc, #144]	; (8007f18 <xPortStartScheduler+0xe8>)
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	f1c3 0307 	rsb	r3, r3, #7
 8007e8e:	2b04      	cmp	r3, #4
 8007e90:	d00b      	beq.n	8007eaa <xPortStartScheduler+0x7a>
 8007e92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e96:	b672      	cpsid	i
 8007e98:	f383 8811 	msr	BASEPRI, r3
 8007e9c:	f3bf 8f6f 	isb	sy
 8007ea0:	f3bf 8f4f 	dsb	sy
 8007ea4:	b662      	cpsie	i
 8007ea6:	60bb      	str	r3, [r7, #8]
 8007ea8:	e7fe      	b.n	8007ea8 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007eaa:	4b1b      	ldr	r3, [pc, #108]	; (8007f18 <xPortStartScheduler+0xe8>)
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	021b      	lsls	r3, r3, #8
 8007eb0:	4a19      	ldr	r2, [pc, #100]	; (8007f18 <xPortStartScheduler+0xe8>)
 8007eb2:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007eb4:	4b18      	ldr	r3, [pc, #96]	; (8007f18 <xPortStartScheduler+0xe8>)
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007ebc:	4a16      	ldr	r2, [pc, #88]	; (8007f18 <xPortStartScheduler+0xe8>)
 8007ebe:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	b2da      	uxtb	r2, r3
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007ec8:	4b14      	ldr	r3, [pc, #80]	; (8007f1c <xPortStartScheduler+0xec>)
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	4a13      	ldr	r2, [pc, #76]	; (8007f1c <xPortStartScheduler+0xec>)
 8007ece:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007ed2:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007ed4:	4b11      	ldr	r3, [pc, #68]	; (8007f1c <xPortStartScheduler+0xec>)
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	4a10      	ldr	r2, [pc, #64]	; (8007f1c <xPortStartScheduler+0xec>)
 8007eda:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007ede:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007ee0:	f000 f8d4 	bl	800808c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007ee4:	4b0e      	ldr	r3, [pc, #56]	; (8007f20 <xPortStartScheduler+0xf0>)
 8007ee6:	2200      	movs	r2, #0
 8007ee8:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007eea:	f000 f8f3 	bl	80080d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007eee:	4b0d      	ldr	r3, [pc, #52]	; (8007f24 <xPortStartScheduler+0xf4>)
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	4a0c      	ldr	r2, [pc, #48]	; (8007f24 <xPortStartScheduler+0xf4>)
 8007ef4:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007ef8:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007efa:	f7ff ff85 	bl	8007e08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007efe:	f7fe fecb 	bl	8006c98 <vTaskSwitchContext>
	prvTaskExitError();
 8007f02:	f7ff ff3f 	bl	8007d84 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007f06:	2300      	movs	r3, #0
}
 8007f08:	4618      	mov	r0, r3
 8007f0a:	3710      	adds	r7, #16
 8007f0c:	46bd      	mov	sp, r7
 8007f0e:	bd80      	pop	{r7, pc}
 8007f10:	e000e400 	.word	0xe000e400
 8007f14:	20000b0c 	.word	0x20000b0c
 8007f18:	20000b10 	.word	0x20000b10
 8007f1c:	e000ed20 	.word	0xe000ed20
 8007f20:	2000000c 	.word	0x2000000c
 8007f24:	e000ef34 	.word	0xe000ef34

08007f28 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007f28:	b480      	push	{r7}
 8007f2a:	b083      	sub	sp, #12
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f32:	b672      	cpsid	i
 8007f34:	f383 8811 	msr	BASEPRI, r3
 8007f38:	f3bf 8f6f 	isb	sy
 8007f3c:	f3bf 8f4f 	dsb	sy
 8007f40:	b662      	cpsie	i
 8007f42:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007f44:	4b0f      	ldr	r3, [pc, #60]	; (8007f84 <vPortEnterCritical+0x5c>)
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	3301      	adds	r3, #1
 8007f4a:	4a0e      	ldr	r2, [pc, #56]	; (8007f84 <vPortEnterCritical+0x5c>)
 8007f4c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007f4e:	4b0d      	ldr	r3, [pc, #52]	; (8007f84 <vPortEnterCritical+0x5c>)
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	2b01      	cmp	r3, #1
 8007f54:	d110      	bne.n	8007f78 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007f56:	4b0c      	ldr	r3, [pc, #48]	; (8007f88 <vPortEnterCritical+0x60>)
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	b2db      	uxtb	r3, r3
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d00b      	beq.n	8007f78 <vPortEnterCritical+0x50>
 8007f60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f64:	b672      	cpsid	i
 8007f66:	f383 8811 	msr	BASEPRI, r3
 8007f6a:	f3bf 8f6f 	isb	sy
 8007f6e:	f3bf 8f4f 	dsb	sy
 8007f72:	b662      	cpsie	i
 8007f74:	603b      	str	r3, [r7, #0]
 8007f76:	e7fe      	b.n	8007f76 <vPortEnterCritical+0x4e>
	}
}
 8007f78:	bf00      	nop
 8007f7a:	370c      	adds	r7, #12
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f82:	4770      	bx	lr
 8007f84:	2000000c 	.word	0x2000000c
 8007f88:	e000ed04 	.word	0xe000ed04

08007f8c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007f8c:	b480      	push	{r7}
 8007f8e:	b083      	sub	sp, #12
 8007f90:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007f92:	4b12      	ldr	r3, [pc, #72]	; (8007fdc <vPortExitCritical+0x50>)
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d10b      	bne.n	8007fb2 <vPortExitCritical+0x26>
 8007f9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f9e:	b672      	cpsid	i
 8007fa0:	f383 8811 	msr	BASEPRI, r3
 8007fa4:	f3bf 8f6f 	isb	sy
 8007fa8:	f3bf 8f4f 	dsb	sy
 8007fac:	b662      	cpsie	i
 8007fae:	607b      	str	r3, [r7, #4]
 8007fb0:	e7fe      	b.n	8007fb0 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 8007fb2:	4b0a      	ldr	r3, [pc, #40]	; (8007fdc <vPortExitCritical+0x50>)
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	3b01      	subs	r3, #1
 8007fb8:	4a08      	ldr	r2, [pc, #32]	; (8007fdc <vPortExitCritical+0x50>)
 8007fba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007fbc:	4b07      	ldr	r3, [pc, #28]	; (8007fdc <vPortExitCritical+0x50>)
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d104      	bne.n	8007fce <vPortExitCritical+0x42>
 8007fc4:	2300      	movs	r3, #0
 8007fc6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007fc8:	683b      	ldr	r3, [r7, #0]
 8007fca:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8007fce:	bf00      	nop
 8007fd0:	370c      	adds	r7, #12
 8007fd2:	46bd      	mov	sp, r7
 8007fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd8:	4770      	bx	lr
 8007fda:	bf00      	nop
 8007fdc:	2000000c 	.word	0x2000000c

08007fe0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007fe0:	f3ef 8009 	mrs	r0, PSP
 8007fe4:	f3bf 8f6f 	isb	sy
 8007fe8:	4b15      	ldr	r3, [pc, #84]	; (8008040 <pxCurrentTCBConst>)
 8007fea:	681a      	ldr	r2, [r3, #0]
 8007fec:	f01e 0f10 	tst.w	lr, #16
 8007ff0:	bf08      	it	eq
 8007ff2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007ff6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ffa:	6010      	str	r0, [r2, #0]
 8007ffc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008000:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008004:	b672      	cpsid	i
 8008006:	f380 8811 	msr	BASEPRI, r0
 800800a:	f3bf 8f4f 	dsb	sy
 800800e:	f3bf 8f6f 	isb	sy
 8008012:	b662      	cpsie	i
 8008014:	f7fe fe40 	bl	8006c98 <vTaskSwitchContext>
 8008018:	f04f 0000 	mov.w	r0, #0
 800801c:	f380 8811 	msr	BASEPRI, r0
 8008020:	bc09      	pop	{r0, r3}
 8008022:	6819      	ldr	r1, [r3, #0]
 8008024:	6808      	ldr	r0, [r1, #0]
 8008026:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800802a:	f01e 0f10 	tst.w	lr, #16
 800802e:	bf08      	it	eq
 8008030:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008034:	f380 8809 	msr	PSP, r0
 8008038:	f3bf 8f6f 	isb	sy
 800803c:	4770      	bx	lr
 800803e:	bf00      	nop

08008040 <pxCurrentTCBConst>:
 8008040:	200008e4 	.word	0x200008e4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008044:	bf00      	nop
 8008046:	bf00      	nop

08008048 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008048:	b580      	push	{r7, lr}
 800804a:	b082      	sub	sp, #8
 800804c:	af00      	add	r7, sp, #0
	__asm volatile
 800804e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008052:	b672      	cpsid	i
 8008054:	f383 8811 	msr	BASEPRI, r3
 8008058:	f3bf 8f6f 	isb	sy
 800805c:	f3bf 8f4f 	dsb	sy
 8008060:	b662      	cpsie	i
 8008062:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008064:	f7fe fd5e 	bl	8006b24 <xTaskIncrementTick>
 8008068:	4603      	mov	r3, r0
 800806a:	2b00      	cmp	r3, #0
 800806c:	d003      	beq.n	8008076 <SysTick_Handler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800806e:	4b06      	ldr	r3, [pc, #24]	; (8008088 <SysTick_Handler+0x40>)
 8008070:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008074:	601a      	str	r2, [r3, #0]
 8008076:	2300      	movs	r3, #0
 8008078:	603b      	str	r3, [r7, #0]
	__asm volatile
 800807a:	683b      	ldr	r3, [r7, #0]
 800807c:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8008080:	bf00      	nop
 8008082:	3708      	adds	r7, #8
 8008084:	46bd      	mov	sp, r7
 8008086:	bd80      	pop	{r7, pc}
 8008088:	e000ed04 	.word	0xe000ed04

0800808c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800808c:	b480      	push	{r7}
 800808e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008090:	4b0b      	ldr	r3, [pc, #44]	; (80080c0 <vPortSetupTimerInterrupt+0x34>)
 8008092:	2200      	movs	r2, #0
 8008094:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008096:	4b0b      	ldr	r3, [pc, #44]	; (80080c4 <vPortSetupTimerInterrupt+0x38>)
 8008098:	2200      	movs	r2, #0
 800809a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800809c:	4b0a      	ldr	r3, [pc, #40]	; (80080c8 <vPortSetupTimerInterrupt+0x3c>)
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	4a0a      	ldr	r2, [pc, #40]	; (80080cc <vPortSetupTimerInterrupt+0x40>)
 80080a2:	fba2 2303 	umull	r2, r3, r2, r3
 80080a6:	099b      	lsrs	r3, r3, #6
 80080a8:	4a09      	ldr	r2, [pc, #36]	; (80080d0 <vPortSetupTimerInterrupt+0x44>)
 80080aa:	3b01      	subs	r3, #1
 80080ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80080ae:	4b04      	ldr	r3, [pc, #16]	; (80080c0 <vPortSetupTimerInterrupt+0x34>)
 80080b0:	2207      	movs	r2, #7
 80080b2:	601a      	str	r2, [r3, #0]
}
 80080b4:	bf00      	nop
 80080b6:	46bd      	mov	sp, r7
 80080b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080bc:	4770      	bx	lr
 80080be:	bf00      	nop
 80080c0:	e000e010 	.word	0xe000e010
 80080c4:	e000e018 	.word	0xe000e018
 80080c8:	20000000 	.word	0x20000000
 80080cc:	10624dd3 	.word	0x10624dd3
 80080d0:	e000e014 	.word	0xe000e014

080080d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80080d4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80080e4 <vPortEnableVFP+0x10>
 80080d8:	6801      	ldr	r1, [r0, #0]
 80080da:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80080de:	6001      	str	r1, [r0, #0]
 80080e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80080e2:	bf00      	nop
 80080e4:	e000ed88 	.word	0xe000ed88

080080e8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80080e8:	b480      	push	{r7}
 80080ea:	b085      	sub	sp, #20
 80080ec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80080ee:	f3ef 8305 	mrs	r3, IPSR
 80080f2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	2b0f      	cmp	r3, #15
 80080f8:	d915      	bls.n	8008126 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80080fa:	4a18      	ldr	r2, [pc, #96]	; (800815c <vPortValidateInterruptPriority+0x74>)
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	4413      	add	r3, r2
 8008100:	781b      	ldrb	r3, [r3, #0]
 8008102:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008104:	4b16      	ldr	r3, [pc, #88]	; (8008160 <vPortValidateInterruptPriority+0x78>)
 8008106:	781b      	ldrb	r3, [r3, #0]
 8008108:	7afa      	ldrb	r2, [r7, #11]
 800810a:	429a      	cmp	r2, r3
 800810c:	d20b      	bcs.n	8008126 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800810e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008112:	b672      	cpsid	i
 8008114:	f383 8811 	msr	BASEPRI, r3
 8008118:	f3bf 8f6f 	isb	sy
 800811c:	f3bf 8f4f 	dsb	sy
 8008120:	b662      	cpsie	i
 8008122:	607b      	str	r3, [r7, #4]
 8008124:	e7fe      	b.n	8008124 <vPortValidateInterruptPriority+0x3c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008126:	4b0f      	ldr	r3, [pc, #60]	; (8008164 <vPortValidateInterruptPriority+0x7c>)
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800812e:	4b0e      	ldr	r3, [pc, #56]	; (8008168 <vPortValidateInterruptPriority+0x80>)
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	429a      	cmp	r2, r3
 8008134:	d90b      	bls.n	800814e <vPortValidateInterruptPriority+0x66>
 8008136:	f04f 0350 	mov.w	r3, #80	; 0x50
 800813a:	b672      	cpsid	i
 800813c:	f383 8811 	msr	BASEPRI, r3
 8008140:	f3bf 8f6f 	isb	sy
 8008144:	f3bf 8f4f 	dsb	sy
 8008148:	b662      	cpsie	i
 800814a:	603b      	str	r3, [r7, #0]
 800814c:	e7fe      	b.n	800814c <vPortValidateInterruptPriority+0x64>
	}
 800814e:	bf00      	nop
 8008150:	3714      	adds	r7, #20
 8008152:	46bd      	mov	sp, r7
 8008154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008158:	4770      	bx	lr
 800815a:	bf00      	nop
 800815c:	e000e3f0 	.word	0xe000e3f0
 8008160:	20000b0c 	.word	0x20000b0c
 8008164:	e000ed0c 	.word	0xe000ed0c
 8008168:	20000b10 	.word	0x20000b10

0800816c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800816c:	b580      	push	{r7, lr}
 800816e:	b08a      	sub	sp, #40	; 0x28
 8008170:	af00      	add	r7, sp, #0
 8008172:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008174:	2300      	movs	r3, #0
 8008176:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008178:	f7fe fc06 	bl	8006988 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800817c:	4b5a      	ldr	r3, [pc, #360]	; (80082e8 <pvPortMalloc+0x17c>)
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	2b00      	cmp	r3, #0
 8008182:	d101      	bne.n	8008188 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008184:	f000 f916 	bl	80083b4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008188:	4b58      	ldr	r3, [pc, #352]	; (80082ec <pvPortMalloc+0x180>)
 800818a:	681a      	ldr	r2, [r3, #0]
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	4013      	ands	r3, r2
 8008190:	2b00      	cmp	r3, #0
 8008192:	f040 8090 	bne.w	80082b6 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	2b00      	cmp	r3, #0
 800819a:	d01e      	beq.n	80081da <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800819c:	2208      	movs	r2, #8
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	4413      	add	r3, r2
 80081a2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	f003 0307 	and.w	r3, r3, #7
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d015      	beq.n	80081da <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	f023 0307 	bic.w	r3, r3, #7
 80081b4:	3308      	adds	r3, #8
 80081b6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	f003 0307 	and.w	r3, r3, #7
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d00b      	beq.n	80081da <pvPortMalloc+0x6e>
 80081c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081c6:	b672      	cpsid	i
 80081c8:	f383 8811 	msr	BASEPRI, r3
 80081cc:	f3bf 8f6f 	isb	sy
 80081d0:	f3bf 8f4f 	dsb	sy
 80081d4:	b662      	cpsie	i
 80081d6:	617b      	str	r3, [r7, #20]
 80081d8:	e7fe      	b.n	80081d8 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d06a      	beq.n	80082b6 <pvPortMalloc+0x14a>
 80081e0:	4b43      	ldr	r3, [pc, #268]	; (80082f0 <pvPortMalloc+0x184>)
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	687a      	ldr	r2, [r7, #4]
 80081e6:	429a      	cmp	r2, r3
 80081e8:	d865      	bhi.n	80082b6 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80081ea:	4b42      	ldr	r3, [pc, #264]	; (80082f4 <pvPortMalloc+0x188>)
 80081ec:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80081ee:	4b41      	ldr	r3, [pc, #260]	; (80082f4 <pvPortMalloc+0x188>)
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80081f4:	e004      	b.n	8008200 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80081f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081f8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80081fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008202:	685b      	ldr	r3, [r3, #4]
 8008204:	687a      	ldr	r2, [r7, #4]
 8008206:	429a      	cmp	r2, r3
 8008208:	d903      	bls.n	8008212 <pvPortMalloc+0xa6>
 800820a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	2b00      	cmp	r3, #0
 8008210:	d1f1      	bne.n	80081f6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008212:	4b35      	ldr	r3, [pc, #212]	; (80082e8 <pvPortMalloc+0x17c>)
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008218:	429a      	cmp	r2, r3
 800821a:	d04c      	beq.n	80082b6 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800821c:	6a3b      	ldr	r3, [r7, #32]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	2208      	movs	r2, #8
 8008222:	4413      	add	r3, r2
 8008224:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008228:	681a      	ldr	r2, [r3, #0]
 800822a:	6a3b      	ldr	r3, [r7, #32]
 800822c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800822e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008230:	685a      	ldr	r2, [r3, #4]
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	1ad2      	subs	r2, r2, r3
 8008236:	2308      	movs	r3, #8
 8008238:	005b      	lsls	r3, r3, #1
 800823a:	429a      	cmp	r2, r3
 800823c:	d920      	bls.n	8008280 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800823e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	4413      	add	r3, r2
 8008244:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008246:	69bb      	ldr	r3, [r7, #24]
 8008248:	f003 0307 	and.w	r3, r3, #7
 800824c:	2b00      	cmp	r3, #0
 800824e:	d00b      	beq.n	8008268 <pvPortMalloc+0xfc>
 8008250:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008254:	b672      	cpsid	i
 8008256:	f383 8811 	msr	BASEPRI, r3
 800825a:	f3bf 8f6f 	isb	sy
 800825e:	f3bf 8f4f 	dsb	sy
 8008262:	b662      	cpsie	i
 8008264:	613b      	str	r3, [r7, #16]
 8008266:	e7fe      	b.n	8008266 <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800826a:	685a      	ldr	r2, [r3, #4]
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	1ad2      	subs	r2, r2, r3
 8008270:	69bb      	ldr	r3, [r7, #24]
 8008272:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008276:	687a      	ldr	r2, [r7, #4]
 8008278:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800827a:	69b8      	ldr	r0, [r7, #24]
 800827c:	f000 f8fc 	bl	8008478 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008280:	4b1b      	ldr	r3, [pc, #108]	; (80082f0 <pvPortMalloc+0x184>)
 8008282:	681a      	ldr	r2, [r3, #0]
 8008284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008286:	685b      	ldr	r3, [r3, #4]
 8008288:	1ad3      	subs	r3, r2, r3
 800828a:	4a19      	ldr	r2, [pc, #100]	; (80082f0 <pvPortMalloc+0x184>)
 800828c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800828e:	4b18      	ldr	r3, [pc, #96]	; (80082f0 <pvPortMalloc+0x184>)
 8008290:	681a      	ldr	r2, [r3, #0]
 8008292:	4b19      	ldr	r3, [pc, #100]	; (80082f8 <pvPortMalloc+0x18c>)
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	429a      	cmp	r2, r3
 8008298:	d203      	bcs.n	80082a2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800829a:	4b15      	ldr	r3, [pc, #84]	; (80082f0 <pvPortMalloc+0x184>)
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	4a16      	ldr	r2, [pc, #88]	; (80082f8 <pvPortMalloc+0x18c>)
 80082a0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80082a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082a4:	685a      	ldr	r2, [r3, #4]
 80082a6:	4b11      	ldr	r3, [pc, #68]	; (80082ec <pvPortMalloc+0x180>)
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	431a      	orrs	r2, r3
 80082ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082ae:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80082b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082b2:	2200      	movs	r2, #0
 80082b4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80082b6:	f7fe fb75 	bl	80069a4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80082ba:	69fb      	ldr	r3, [r7, #28]
 80082bc:	f003 0307 	and.w	r3, r3, #7
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d00b      	beq.n	80082dc <pvPortMalloc+0x170>
 80082c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082c8:	b672      	cpsid	i
 80082ca:	f383 8811 	msr	BASEPRI, r3
 80082ce:	f3bf 8f6f 	isb	sy
 80082d2:	f3bf 8f4f 	dsb	sy
 80082d6:	b662      	cpsie	i
 80082d8:	60fb      	str	r3, [r7, #12]
 80082da:	e7fe      	b.n	80082da <pvPortMalloc+0x16e>
	return pvReturn;
 80082dc:	69fb      	ldr	r3, [r7, #28]
}
 80082de:	4618      	mov	r0, r3
 80082e0:	3728      	adds	r7, #40	; 0x28
 80082e2:	46bd      	mov	sp, r7
 80082e4:	bd80      	pop	{r7, pc}
 80082e6:	bf00      	nop
 80082e8:	2000471c 	.word	0x2000471c
 80082ec:	20004728 	.word	0x20004728
 80082f0:	20004720 	.word	0x20004720
 80082f4:	20004714 	.word	0x20004714
 80082f8:	20004724 	.word	0x20004724

080082fc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80082fc:	b580      	push	{r7, lr}
 80082fe:	b086      	sub	sp, #24
 8008300:	af00      	add	r7, sp, #0
 8008302:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	2b00      	cmp	r3, #0
 800830c:	d04a      	beq.n	80083a4 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800830e:	2308      	movs	r3, #8
 8008310:	425b      	negs	r3, r3
 8008312:	697a      	ldr	r2, [r7, #20]
 8008314:	4413      	add	r3, r2
 8008316:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008318:	697b      	ldr	r3, [r7, #20]
 800831a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800831c:	693b      	ldr	r3, [r7, #16]
 800831e:	685a      	ldr	r2, [r3, #4]
 8008320:	4b22      	ldr	r3, [pc, #136]	; (80083ac <vPortFree+0xb0>)
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	4013      	ands	r3, r2
 8008326:	2b00      	cmp	r3, #0
 8008328:	d10b      	bne.n	8008342 <vPortFree+0x46>
 800832a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800832e:	b672      	cpsid	i
 8008330:	f383 8811 	msr	BASEPRI, r3
 8008334:	f3bf 8f6f 	isb	sy
 8008338:	f3bf 8f4f 	dsb	sy
 800833c:	b662      	cpsie	i
 800833e:	60fb      	str	r3, [r7, #12]
 8008340:	e7fe      	b.n	8008340 <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008342:	693b      	ldr	r3, [r7, #16]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	2b00      	cmp	r3, #0
 8008348:	d00b      	beq.n	8008362 <vPortFree+0x66>
 800834a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800834e:	b672      	cpsid	i
 8008350:	f383 8811 	msr	BASEPRI, r3
 8008354:	f3bf 8f6f 	isb	sy
 8008358:	f3bf 8f4f 	dsb	sy
 800835c:	b662      	cpsie	i
 800835e:	60bb      	str	r3, [r7, #8]
 8008360:	e7fe      	b.n	8008360 <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008362:	693b      	ldr	r3, [r7, #16]
 8008364:	685a      	ldr	r2, [r3, #4]
 8008366:	4b11      	ldr	r3, [pc, #68]	; (80083ac <vPortFree+0xb0>)
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	4013      	ands	r3, r2
 800836c:	2b00      	cmp	r3, #0
 800836e:	d019      	beq.n	80083a4 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008370:	693b      	ldr	r3, [r7, #16]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	2b00      	cmp	r3, #0
 8008376:	d115      	bne.n	80083a4 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008378:	693b      	ldr	r3, [r7, #16]
 800837a:	685a      	ldr	r2, [r3, #4]
 800837c:	4b0b      	ldr	r3, [pc, #44]	; (80083ac <vPortFree+0xb0>)
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	43db      	mvns	r3, r3
 8008382:	401a      	ands	r2, r3
 8008384:	693b      	ldr	r3, [r7, #16]
 8008386:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008388:	f7fe fafe 	bl	8006988 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800838c:	693b      	ldr	r3, [r7, #16]
 800838e:	685a      	ldr	r2, [r3, #4]
 8008390:	4b07      	ldr	r3, [pc, #28]	; (80083b0 <vPortFree+0xb4>)
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	4413      	add	r3, r2
 8008396:	4a06      	ldr	r2, [pc, #24]	; (80083b0 <vPortFree+0xb4>)
 8008398:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800839a:	6938      	ldr	r0, [r7, #16]
 800839c:	f000 f86c 	bl	8008478 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80083a0:	f7fe fb00 	bl	80069a4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80083a4:	bf00      	nop
 80083a6:	3718      	adds	r7, #24
 80083a8:	46bd      	mov	sp, r7
 80083aa:	bd80      	pop	{r7, pc}
 80083ac:	20004728 	.word	0x20004728
 80083b0:	20004720 	.word	0x20004720

080083b4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80083b4:	b480      	push	{r7}
 80083b6:	b085      	sub	sp, #20
 80083b8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80083ba:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80083be:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80083c0:	4b27      	ldr	r3, [pc, #156]	; (8008460 <prvHeapInit+0xac>)
 80083c2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	f003 0307 	and.w	r3, r3, #7
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d00c      	beq.n	80083e8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	3307      	adds	r3, #7
 80083d2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	f023 0307 	bic.w	r3, r3, #7
 80083da:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80083dc:	68ba      	ldr	r2, [r7, #8]
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	1ad3      	subs	r3, r2, r3
 80083e2:	4a1f      	ldr	r2, [pc, #124]	; (8008460 <prvHeapInit+0xac>)
 80083e4:	4413      	add	r3, r2
 80083e6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80083ec:	4a1d      	ldr	r2, [pc, #116]	; (8008464 <prvHeapInit+0xb0>)
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80083f2:	4b1c      	ldr	r3, [pc, #112]	; (8008464 <prvHeapInit+0xb0>)
 80083f4:	2200      	movs	r2, #0
 80083f6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	68ba      	ldr	r2, [r7, #8]
 80083fc:	4413      	add	r3, r2
 80083fe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008400:	2208      	movs	r2, #8
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	1a9b      	subs	r3, r3, r2
 8008406:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	f023 0307 	bic.w	r3, r3, #7
 800840e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	4a15      	ldr	r2, [pc, #84]	; (8008468 <prvHeapInit+0xb4>)
 8008414:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008416:	4b14      	ldr	r3, [pc, #80]	; (8008468 <prvHeapInit+0xb4>)
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	2200      	movs	r2, #0
 800841c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800841e:	4b12      	ldr	r3, [pc, #72]	; (8008468 <prvHeapInit+0xb4>)
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	2200      	movs	r2, #0
 8008424:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800842a:	683b      	ldr	r3, [r7, #0]
 800842c:	68fa      	ldr	r2, [r7, #12]
 800842e:	1ad2      	subs	r2, r2, r3
 8008430:	683b      	ldr	r3, [r7, #0]
 8008432:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008434:	4b0c      	ldr	r3, [pc, #48]	; (8008468 <prvHeapInit+0xb4>)
 8008436:	681a      	ldr	r2, [r3, #0]
 8008438:	683b      	ldr	r3, [r7, #0]
 800843a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800843c:	683b      	ldr	r3, [r7, #0]
 800843e:	685b      	ldr	r3, [r3, #4]
 8008440:	4a0a      	ldr	r2, [pc, #40]	; (800846c <prvHeapInit+0xb8>)
 8008442:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008444:	683b      	ldr	r3, [r7, #0]
 8008446:	685b      	ldr	r3, [r3, #4]
 8008448:	4a09      	ldr	r2, [pc, #36]	; (8008470 <prvHeapInit+0xbc>)
 800844a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800844c:	4b09      	ldr	r3, [pc, #36]	; (8008474 <prvHeapInit+0xc0>)
 800844e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008452:	601a      	str	r2, [r3, #0]
}
 8008454:	bf00      	nop
 8008456:	3714      	adds	r7, #20
 8008458:	46bd      	mov	sp, r7
 800845a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800845e:	4770      	bx	lr
 8008460:	20000b14 	.word	0x20000b14
 8008464:	20004714 	.word	0x20004714
 8008468:	2000471c 	.word	0x2000471c
 800846c:	20004724 	.word	0x20004724
 8008470:	20004720 	.word	0x20004720
 8008474:	20004728 	.word	0x20004728

08008478 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008478:	b480      	push	{r7}
 800847a:	b085      	sub	sp, #20
 800847c:	af00      	add	r7, sp, #0
 800847e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008480:	4b28      	ldr	r3, [pc, #160]	; (8008524 <prvInsertBlockIntoFreeList+0xac>)
 8008482:	60fb      	str	r3, [r7, #12]
 8008484:	e002      	b.n	800848c <prvInsertBlockIntoFreeList+0x14>
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	60fb      	str	r3, [r7, #12]
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	687a      	ldr	r2, [r7, #4]
 8008492:	429a      	cmp	r2, r3
 8008494:	d8f7      	bhi.n	8008486 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	685b      	ldr	r3, [r3, #4]
 800849e:	68ba      	ldr	r2, [r7, #8]
 80084a0:	4413      	add	r3, r2
 80084a2:	687a      	ldr	r2, [r7, #4]
 80084a4:	429a      	cmp	r2, r3
 80084a6:	d108      	bne.n	80084ba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	685a      	ldr	r2, [r3, #4]
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	685b      	ldr	r3, [r3, #4]
 80084b0:	441a      	add	r2, r3
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	685b      	ldr	r3, [r3, #4]
 80084c2:	68ba      	ldr	r2, [r7, #8]
 80084c4:	441a      	add	r2, r3
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	429a      	cmp	r2, r3
 80084cc:	d118      	bne.n	8008500 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	681a      	ldr	r2, [r3, #0]
 80084d2:	4b15      	ldr	r3, [pc, #84]	; (8008528 <prvInsertBlockIntoFreeList+0xb0>)
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	429a      	cmp	r2, r3
 80084d8:	d00d      	beq.n	80084f6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	685a      	ldr	r2, [r3, #4]
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	685b      	ldr	r3, [r3, #4]
 80084e4:	441a      	add	r2, r3
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	681a      	ldr	r2, [r3, #0]
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	601a      	str	r2, [r3, #0]
 80084f4:	e008      	b.n	8008508 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80084f6:	4b0c      	ldr	r3, [pc, #48]	; (8008528 <prvInsertBlockIntoFreeList+0xb0>)
 80084f8:	681a      	ldr	r2, [r3, #0]
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	601a      	str	r2, [r3, #0]
 80084fe:	e003      	b.n	8008508 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	681a      	ldr	r2, [r3, #0]
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008508:	68fa      	ldr	r2, [r7, #12]
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	429a      	cmp	r2, r3
 800850e:	d002      	beq.n	8008516 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	687a      	ldr	r2, [r7, #4]
 8008514:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008516:	bf00      	nop
 8008518:	3714      	adds	r7, #20
 800851a:	46bd      	mov	sp, r7
 800851c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008520:	4770      	bx	lr
 8008522:	bf00      	nop
 8008524:	20004714 	.word	0x20004714
 8008528:	2000471c 	.word	0x2000471c

0800852c <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 800852c:	b580      	push	{r7, lr}
 800852e:	b084      	sub	sp, #16
 8008530:	af00      	add	r7, sp, #0
 8008532:	6078      	str	r0, [r7, #4]
 8008534:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8008536:	683b      	ldr	r3, [r7, #0]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	330c      	adds	r3, #12
 800853c:	461a      	mov	r2, r3
 800853e:	6839      	ldr	r1, [r7, #0]
 8008540:	6878      	ldr	r0, [r7, #4]
 8008542:	f003 f929 	bl	800b798 <tcpip_send_msg_wait_sem>
 8008546:	4603      	mov	r3, r0
 8008548:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800854a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800854e:	2b00      	cmp	r3, #0
 8008550:	d103      	bne.n	800855a <netconn_apimsg+0x2e>
    return apimsg->err;
 8008552:	683b      	ldr	r3, [r7, #0]
 8008554:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8008558:	e001      	b.n	800855e <netconn_apimsg+0x32>
  }
  return err;
 800855a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800855e:	4618      	mov	r0, r3
 8008560:	3710      	adds	r7, #16
 8008562:	46bd      	mov	sp, r7
 8008564:	bd80      	pop	{r7, pc}
	...

08008568 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 8008568:	b580      	push	{r7, lr}
 800856a:	b08c      	sub	sp, #48	; 0x30
 800856c:	af00      	add	r7, sp, #0
 800856e:	4603      	mov	r3, r0
 8008570:	603a      	str	r2, [r7, #0]
 8008572:	71fb      	strb	r3, [r7, #7]
 8008574:	460b      	mov	r3, r1
 8008576:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 8008578:	79fb      	ldrb	r3, [r7, #7]
 800857a:	6839      	ldr	r1, [r7, #0]
 800857c:	4618      	mov	r0, r3
 800857e:	f001 f82b 	bl	80095d8 <netconn_alloc>
 8008582:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (conn != NULL) {
 8008584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008586:	2b00      	cmp	r3, #0
 8008588:	d054      	beq.n	8008634 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 800858a:	79bb      	ldrb	r3, [r7, #6]
 800858c:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 800858e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008590:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 8008592:	f107 0308 	add.w	r3, r7, #8
 8008596:	4619      	mov	r1, r3
 8008598:	4829      	ldr	r0, [pc, #164]	; (8008640 <netconn_new_with_proto_and_callback+0xd8>)
 800859a:	f7ff ffc7 	bl	800852c <netconn_apimsg>
 800859e:	4603      	mov	r3, r0
 80085a0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (err != ERR_OK) {
 80085a4:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d043      	beq.n	8008634 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 80085ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085ae:	685b      	ldr	r3, [r3, #4]
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d005      	beq.n	80085c0 <netconn_new_with_proto_and_callback+0x58>
 80085b4:	4b23      	ldr	r3, [pc, #140]	; (8008644 <netconn_new_with_proto_and_callback+0xdc>)
 80085b6:	22a3      	movs	r2, #163	; 0xa3
 80085b8:	4923      	ldr	r1, [pc, #140]	; (8008648 <netconn_new_with_proto_and_callback+0xe0>)
 80085ba:	4824      	ldr	r0, [pc, #144]	; (800864c <netconn_new_with_proto_and_callback+0xe4>)
 80085bc:	f00e fc50 	bl	8016e60 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 80085c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085c2:	3310      	adds	r3, #16
 80085c4:	4618      	mov	r0, r3
 80085c6:	f00e fa92 	bl	8016aee <sys_mbox_valid>
 80085ca:	4603      	mov	r3, r0
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d105      	bne.n	80085dc <netconn_new_with_proto_and_callback+0x74>
 80085d0:	4b1c      	ldr	r3, [pc, #112]	; (8008644 <netconn_new_with_proto_and_callback+0xdc>)
 80085d2:	22a4      	movs	r2, #164	; 0xa4
 80085d4:	491e      	ldr	r1, [pc, #120]	; (8008650 <netconn_new_with_proto_and_callback+0xe8>)
 80085d6:	481d      	ldr	r0, [pc, #116]	; (800864c <netconn_new_with_proto_and_callback+0xe4>)
 80085d8:	f00e fc42 	bl	8016e60 <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 80085dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085de:	3314      	adds	r3, #20
 80085e0:	4618      	mov	r0, r3
 80085e2:	f00e fa84 	bl	8016aee <sys_mbox_valid>
 80085e6:	4603      	mov	r3, r0
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d005      	beq.n	80085f8 <netconn_new_with_proto_and_callback+0x90>
 80085ec:	4b15      	ldr	r3, [pc, #84]	; (8008644 <netconn_new_with_proto_and_callback+0xdc>)
 80085ee:	22a6      	movs	r2, #166	; 0xa6
 80085f0:	4918      	ldr	r1, [pc, #96]	; (8008654 <netconn_new_with_proto_and_callback+0xec>)
 80085f2:	4816      	ldr	r0, [pc, #88]	; (800864c <netconn_new_with_proto_and_callback+0xe4>)
 80085f4:	f00e fc34 	bl	8016e60 <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 80085f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085fa:	330c      	adds	r3, #12
 80085fc:	4618      	mov	r0, r3
 80085fe:	f00e fb07 	bl	8016c10 <sys_sem_valid>
 8008602:	4603      	mov	r3, r0
 8008604:	2b00      	cmp	r3, #0
 8008606:	d105      	bne.n	8008614 <netconn_new_with_proto_and_callback+0xac>
 8008608:	4b0e      	ldr	r3, [pc, #56]	; (8008644 <netconn_new_with_proto_and_callback+0xdc>)
 800860a:	22a9      	movs	r2, #169	; 0xa9
 800860c:	4912      	ldr	r1, [pc, #72]	; (8008658 <netconn_new_with_proto_and_callback+0xf0>)
 800860e:	480f      	ldr	r0, [pc, #60]	; (800864c <netconn_new_with_proto_and_callback+0xe4>)
 8008610:	f00e fc26 	bl	8016e60 <iprintf>
      sys_sem_free(&conn->op_completed);
 8008614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008616:	330c      	adds	r3, #12
 8008618:	4618      	mov	r0, r3
 800861a:	f00e faec 	bl	8016bf6 <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 800861e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008620:	3310      	adds	r3, #16
 8008622:	4618      	mov	r0, r3
 8008624:	f00e f9dc 	bl	80169e0 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 8008628:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800862a:	2007      	movs	r0, #7
 800862c:	f003 fe1c 	bl	800c268 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 8008630:	2300      	movs	r3, #0
 8008632:	e000      	b.n	8008636 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 8008634:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8008636:	4618      	mov	r0, r3
 8008638:	3730      	adds	r7, #48	; 0x30
 800863a:	46bd      	mov	sp, r7
 800863c:	bd80      	pop	{r7, pc}
 800863e:	bf00      	nop
 8008640:	080095ad 	.word	0x080095ad
 8008644:	08018138 	.word	0x08018138
 8008648:	0801816c 	.word	0x0801816c
 800864c:	08018190 	.word	0x08018190
 8008650:	080181b8 	.word	0x080181b8
 8008654:	080181d0 	.word	0x080181d0
 8008658:	080181f4 	.word	0x080181f4

0800865c <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 800865c:	b580      	push	{r7, lr}
 800865e:	b08c      	sub	sp, #48	; 0x30
 8008660:	af00      	add	r7, sp, #0
 8008662:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	2b00      	cmp	r3, #0
 8008668:	d101      	bne.n	800866e <netconn_prepare_delete+0x12>
    return ERR_OK;
 800866a:	2300      	movs	r3, #0
 800866c:	e014      	b.n	8008698 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8008672:	2329      	movs	r3, #41	; 0x29
 8008674:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 8008676:	f107 030c 	add.w	r3, r7, #12
 800867a:	4619      	mov	r1, r3
 800867c:	4808      	ldr	r0, [pc, #32]	; (80086a0 <netconn_prepare_delete+0x44>)
 800867e:	f7ff ff55 	bl	800852c <netconn_apimsg>
 8008682:	4603      	mov	r3, r0
 8008684:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 8008688:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800868c:	2b00      	cmp	r3, #0
 800868e:	d002      	beq.n	8008696 <netconn_prepare_delete+0x3a>
    return err;
 8008690:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008694:	e000      	b.n	8008698 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 8008696:	2300      	movs	r3, #0
}
 8008698:	4618      	mov	r0, r3
 800869a:	3730      	adds	r7, #48	; 0x30
 800869c:	46bd      	mov	sp, r7
 800869e:	bd80      	pop	{r7, pc}
 80086a0:	08009b11 	.word	0x08009b11

080086a4 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 80086a4:	b580      	push	{r7, lr}
 80086a6:	b084      	sub	sp, #16
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d101      	bne.n	80086b6 <netconn_delete+0x12>
    return ERR_OK;
 80086b2:	2300      	movs	r3, #0
 80086b4:	e00d      	b.n	80086d2 <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 80086b6:	6878      	ldr	r0, [r7, #4]
 80086b8:	f7ff ffd0 	bl	800865c <netconn_prepare_delete>
 80086bc:	4603      	mov	r3, r0
 80086be:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 80086c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d102      	bne.n	80086ce <netconn_delete+0x2a>
    netconn_free(conn);
 80086c8:	6878      	ldr	r0, [r7, #4]
 80086ca:	f000 fff3 	bl	80096b4 <netconn_free>
  }
  return err;
 80086ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80086d2:	4618      	mov	r0, r3
 80086d4:	3710      	adds	r7, #16
 80086d6:	46bd      	mov	sp, r7
 80086d8:	bd80      	pop	{r7, pc}
	...

080086dc <netconn_getaddr>:
 * @return ERR_CONN for invalid connections
 *         ERR_OK if the information was retrieved
 */
err_t
netconn_getaddr(struct netconn *conn, ip_addr_t *addr, u16_t *port, u8_t local)
{
 80086dc:	b580      	push	{r7, lr}
 80086de:	b08e      	sub	sp, #56	; 0x38
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	60f8      	str	r0, [r7, #12]
 80086e4:	60b9      	str	r1, [r7, #8]
 80086e6:	607a      	str	r2, [r7, #4]
 80086e8:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_getaddr: invalid conn", (conn != NULL), return ERR_ARG;);
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d109      	bne.n	8008704 <netconn_getaddr+0x28>
 80086f0:	4b1d      	ldr	r3, [pc, #116]	; (8008768 <netconn_getaddr+0x8c>)
 80086f2:	f44f 7289 	mov.w	r2, #274	; 0x112
 80086f6:	491d      	ldr	r1, [pc, #116]	; (800876c <netconn_getaddr+0x90>)
 80086f8:	481d      	ldr	r0, [pc, #116]	; (8008770 <netconn_getaddr+0x94>)
 80086fa:	f00e fbb1 	bl	8016e60 <iprintf>
 80086fe:	f06f 030f 	mvn.w	r3, #15
 8008702:	e02d      	b.n	8008760 <netconn_getaddr+0x84>
  LWIP_ERROR("netconn_getaddr: invalid addr", (addr != NULL), return ERR_ARG;);
 8008704:	68bb      	ldr	r3, [r7, #8]
 8008706:	2b00      	cmp	r3, #0
 8008708:	d109      	bne.n	800871e <netconn_getaddr+0x42>
 800870a:	4b17      	ldr	r3, [pc, #92]	; (8008768 <netconn_getaddr+0x8c>)
 800870c:	f240 1213 	movw	r2, #275	; 0x113
 8008710:	4918      	ldr	r1, [pc, #96]	; (8008774 <netconn_getaddr+0x98>)
 8008712:	4817      	ldr	r0, [pc, #92]	; (8008770 <netconn_getaddr+0x94>)
 8008714:	f00e fba4 	bl	8016e60 <iprintf>
 8008718:	f06f 030f 	mvn.w	r3, #15
 800871c:	e020      	b.n	8008760 <netconn_getaddr+0x84>
  LWIP_ERROR("netconn_getaddr: invalid port", (port != NULL), return ERR_ARG;);
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	2b00      	cmp	r3, #0
 8008722:	d109      	bne.n	8008738 <netconn_getaddr+0x5c>
 8008724:	4b10      	ldr	r3, [pc, #64]	; (8008768 <netconn_getaddr+0x8c>)
 8008726:	f44f 728a 	mov.w	r2, #276	; 0x114
 800872a:	4913      	ldr	r1, [pc, #76]	; (8008778 <netconn_getaddr+0x9c>)
 800872c:	4810      	ldr	r0, [pc, #64]	; (8008770 <netconn_getaddr+0x94>)
 800872e:	f00e fb97 	bl	8016e60 <iprintf>
 8008732:	f06f 030f 	mvn.w	r3, #15
 8008736:	e013      	b.n	8008760 <netconn_getaddr+0x84>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.ad.local = local;
 800873c:	78fb      	ldrb	r3, [r7, #3]
 800873e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
#if LWIP_MPU_COMPATIBLE
  err = netconn_apimsg(lwip_netconn_do_getaddr, &API_MSG_VAR_REF(msg));
  *addr = msg->msg.ad.ipaddr;
  *port = msg->msg.ad.port;
#else /* LWIP_MPU_COMPATIBLE */
  msg.msg.ad.ipaddr = addr;
 8008742:	68bb      	ldr	r3, [r7, #8]
 8008744:	61fb      	str	r3, [r7, #28]
  msg.msg.ad.port = port;
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	623b      	str	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_getaddr, &msg);
 800874a:	f107 0314 	add.w	r3, r7, #20
 800874e:	4619      	mov	r1, r3
 8008750:	480a      	ldr	r0, [pc, #40]	; (800877c <netconn_getaddr+0xa0>)
 8008752:	f7ff feeb 	bl	800852c <netconn_apimsg>
 8008756:	4603      	mov	r3, r0
 8008758:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
#endif /* LWIP_MPU_COMPATIBLE */
  API_MSG_VAR_FREE(msg);

  return err;
 800875c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8008760:	4618      	mov	r0, r3
 8008762:	3738      	adds	r7, #56	; 0x38
 8008764:	46bd      	mov	sp, r7
 8008766:	bd80      	pop	{r7, pc}
 8008768:	08018138 	.word	0x08018138
 800876c:	08018210 	.word	0x08018210
 8008770:	08018190 	.word	0x08018190
 8008774:	08018230 	.word	0x08018230
 8008778:	08018250 	.word	0x08018250
 800877c:	0800a305 	.word	0x0800a305

08008780 <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 8008780:	b580      	push	{r7, lr}
 8008782:	b08e      	sub	sp, #56	; 0x38
 8008784:	af00      	add	r7, sp, #0
 8008786:	60f8      	str	r0, [r7, #12]
 8008788:	60b9      	str	r1, [r7, #8]
 800878a:	4613      	mov	r3, r2
 800878c:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	2b00      	cmp	r3, #0
 8008792:	d109      	bne.n	80087a8 <netconn_bind+0x28>
 8008794:	4b11      	ldr	r3, [pc, #68]	; (80087dc <netconn_bind+0x5c>)
 8008796:	f44f 729c 	mov.w	r2, #312	; 0x138
 800879a:	4911      	ldr	r1, [pc, #68]	; (80087e0 <netconn_bind+0x60>)
 800879c:	4811      	ldr	r0, [pc, #68]	; (80087e4 <netconn_bind+0x64>)
 800879e:	f00e fb5f 	bl	8016e60 <iprintf>
 80087a2:	f06f 030f 	mvn.w	r3, #15
 80087a6:	e015      	b.n	80087d4 <netconn_bind+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 80087a8:	68bb      	ldr	r3, [r7, #8]
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d101      	bne.n	80087b2 <netconn_bind+0x32>
    addr = IP4_ADDR_ANY;
 80087ae:	4b0e      	ldr	r3, [pc, #56]	; (80087e8 <netconn_bind+0x68>)
 80087b0:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 80087b6:	68bb      	ldr	r3, [r7, #8]
 80087b8:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 80087ba:	88fb      	ldrh	r3, [r7, #6]
 80087bc:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 80087be:	f107 0314 	add.w	r3, r7, #20
 80087c2:	4619      	mov	r1, r3
 80087c4:	4809      	ldr	r0, [pc, #36]	; (80087ec <netconn_bind+0x6c>)
 80087c6:	f7ff feb1 	bl	800852c <netconn_apimsg>
 80087ca:	4603      	mov	r3, r0
 80087cc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 80087d0:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 80087d4:	4618      	mov	r0, r3
 80087d6:	3738      	adds	r7, #56	; 0x38
 80087d8:	46bd      	mov	sp, r7
 80087da:	bd80      	pop	{r7, pc}
 80087dc:	08018138 	.word	0x08018138
 80087e0:	08018270 	.word	0x08018270
 80087e4:	08018190 	.word	0x08018190
 80087e8:	0801bbb8 	.word	0x0801bbb8
 80087ec:	08009cd9 	.word	0x08009cd9

080087f0 <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 80087f0:	b580      	push	{r7, lr}
 80087f2:	b088      	sub	sp, #32
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	60f8      	str	r0, [r7, #12]
 80087f8:	60b9      	str	r1, [r7, #8]
 80087fa:	4613      	mov	r3, r2
 80087fc:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 80087fe:	2300      	movs	r3, #0
 8008800:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8008802:	68bb      	ldr	r3, [r7, #8]
 8008804:	2b00      	cmp	r3, #0
 8008806:	d109      	bne.n	800881c <netconn_recv_data+0x2c>
 8008808:	4b58      	ldr	r3, [pc, #352]	; (800896c <netconn_recv_data+0x17c>)
 800880a:	f44f 7212 	mov.w	r2, #584	; 0x248
 800880e:	4958      	ldr	r1, [pc, #352]	; (8008970 <netconn_recv_data+0x180>)
 8008810:	4858      	ldr	r0, [pc, #352]	; (8008974 <netconn_recv_data+0x184>)
 8008812:	f00e fb25 	bl	8016e60 <iprintf>
 8008816:	f06f 030f 	mvn.w	r3, #15
 800881a:	e0a2      	b.n	8008962 <netconn_recv_data+0x172>
  *new_buf = NULL;
 800881c:	68bb      	ldr	r3, [r7, #8]
 800881e:	2200      	movs	r2, #0
 8008820:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	2b00      	cmp	r3, #0
 8008826:	d109      	bne.n	800883c <netconn_recv_data+0x4c>
 8008828:	4b50      	ldr	r3, [pc, #320]	; (800896c <netconn_recv_data+0x17c>)
 800882a:	f240 224a 	movw	r2, #586	; 0x24a
 800882e:	4952      	ldr	r1, [pc, #328]	; (8008978 <netconn_recv_data+0x188>)
 8008830:	4850      	ldr	r0, [pc, #320]	; (8008974 <netconn_recv_data+0x184>)
 8008832:	f00e fb15 	bl	8016e60 <iprintf>
 8008836:	f06f 030f 	mvn.w	r3, #15
 800883a:	e092      	b.n	8008962 <netconn_recv_data+0x172>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	3310      	adds	r3, #16
 8008840:	4618      	mov	r0, r3
 8008842:	f00e f954 	bl	8016aee <sys_mbox_valid>
 8008846:	4603      	mov	r3, r0
 8008848:	2b00      	cmp	r3, #0
 800884a:	d10e      	bne.n	800886a <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 800884c:	68f8      	ldr	r0, [r7, #12]
 800884e:	f000 fb01 	bl	8008e54 <netconn_err>
 8008852:	4603      	mov	r3, r0
 8008854:	773b      	strb	r3, [r7, #28]
    if (err != ERR_OK) {
 8008856:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800885a:	2b00      	cmp	r3, #0
 800885c:	d002      	beq.n	8008864 <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 800885e:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8008862:	e07e      	b.n	8008962 <netconn_recv_data+0x172>
    }
    return ERR_CONN;
 8008864:	f06f 030a 	mvn.w	r3, #10
 8008868:	e07b      	b.n	8008962 <netconn_recv_data+0x172>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	7f1b      	ldrb	r3, [r3, #28]
 800886e:	f003 0302 	and.w	r3, r3, #2
 8008872:	2b00      	cmp	r3, #0
 8008874:	d10f      	bne.n	8008896 <netconn_recv_data+0xa6>
 8008876:	79fb      	ldrb	r3, [r7, #7]
 8008878:	f003 0304 	and.w	r3, r3, #4
 800887c:	2b00      	cmp	r3, #0
 800887e:	d10a      	bne.n	8008896 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	7f1b      	ldrb	r3, [r3, #28]
 8008884:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 8008888:	2b00      	cmp	r3, #0
 800888a:	d104      	bne.n	8008896 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8008892:	2b00      	cmp	r3, #0
 8008894:	d023      	beq.n	80088de <netconn_recv_data+0xee>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	3310      	adds	r3, #16
 800889a:	f107 0218 	add.w	r2, r7, #24
 800889e:	4611      	mov	r1, r2
 80088a0:	4618      	mov	r0, r3
 80088a2:	f00e f908 	bl	8016ab6 <sys_arch_mbox_tryfetch>
 80088a6:	4603      	mov	r3, r0
 80088a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088ac:	d11f      	bne.n	80088ee <netconn_recv_data+0xfe>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 80088ae:	68f8      	ldr	r0, [r7, #12]
 80088b0:	f000 fad0 	bl	8008e54 <netconn_err>
 80088b4:	4603      	mov	r3, r0
 80088b6:	777b      	strb	r3, [r7, #29]
      if (err != ERR_OK) {
 80088b8:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d002      	beq.n	80088c6 <netconn_recv_data+0xd6>
        /* return pending error */
        return err;
 80088c0:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80088c4:	e04d      	b.n	8008962 <netconn_recv_data+0x172>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	7f1b      	ldrb	r3, [r3, #28]
 80088ca:	f003 0301 	and.w	r3, r3, #1
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d002      	beq.n	80088d8 <netconn_recv_data+0xe8>
        return ERR_CONN;
 80088d2:	f06f 030a 	mvn.w	r3, #10
 80088d6:	e044      	b.n	8008962 <netconn_recv_data+0x172>
      }
      return ERR_WOULDBLOCK;
 80088d8:	f06f 0306 	mvn.w	r3, #6
 80088dc:	e041      	b.n	8008962 <netconn_recv_data+0x172>
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	3310      	adds	r3, #16
 80088e2:	f107 0118 	add.w	r1, r7, #24
 80088e6:	2200      	movs	r2, #0
 80088e8:	4618      	mov	r0, r3
 80088ea:	f00e f8a5 	bl	8016a38 <sys_arch_mbox_fetch>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	781b      	ldrb	r3, [r3, #0]
 80088f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80088f6:	2b10      	cmp	r3, #16
 80088f8:	d117      	bne.n	800892a <netconn_recv_data+0x13a>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 80088fa:	69bb      	ldr	r3, [r7, #24]
 80088fc:	f107 0217 	add.w	r2, r7, #23
 8008900:	4611      	mov	r1, r2
 8008902:	4618      	mov	r0, r3
 8008904:	f000 faf4 	bl	8008ef0 <lwip_netconn_is_err_msg>
 8008908:	4603      	mov	r3, r0
 800890a:	2b00      	cmp	r3, #0
 800890c:	d009      	beq.n	8008922 <netconn_recv_data+0x132>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 800890e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008912:	f113 0f0f 	cmn.w	r3, #15
 8008916:	d101      	bne.n	800891c <netconn_recv_data+0x12c>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 8008918:	2300      	movs	r3, #0
 800891a:	e022      	b.n	8008962 <netconn_recv_data+0x172>
      }
      return err;
 800891c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008920:	e01f      	b.n	8008962 <netconn_recv_data+0x172>
    }
    len = ((struct pbuf *)buf)->tot_len;
 8008922:	69bb      	ldr	r3, [r7, #24]
 8008924:	891b      	ldrh	r3, [r3, #8]
 8008926:	83fb      	strh	r3, [r7, #30]
 8008928:	e00d      	b.n	8008946 <netconn_recv_data+0x156>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 800892a:	69bb      	ldr	r3, [r7, #24]
 800892c:	2b00      	cmp	r3, #0
 800892e:	d106      	bne.n	800893e <netconn_recv_data+0x14e>
 8008930:	4b0e      	ldr	r3, [pc, #56]	; (800896c <netconn_recv_data+0x17c>)
 8008932:	f240 2291 	movw	r2, #657	; 0x291
 8008936:	4911      	ldr	r1, [pc, #68]	; (800897c <netconn_recv_data+0x18c>)
 8008938:	480e      	ldr	r0, [pc, #56]	; (8008974 <netconn_recv_data+0x184>)
 800893a:	f00e fa91 	bl	8016e60 <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 800893e:	69bb      	ldr	r3, [r7, #24]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	891b      	ldrh	r3, [r3, #8]
 8008944:	83fb      	strh	r3, [r7, #30]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800894a:	2b00      	cmp	r3, #0
 800894c:	d005      	beq.n	800895a <netconn_recv_data+0x16a>
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008952:	8bfa      	ldrh	r2, [r7, #30]
 8008954:	2101      	movs	r1, #1
 8008956:	68f8      	ldr	r0, [r7, #12]
 8008958:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 800895a:	69ba      	ldr	r2, [r7, #24]
 800895c:	68bb      	ldr	r3, [r7, #8]
 800895e:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 8008960:	2300      	movs	r3, #0
}
 8008962:	4618      	mov	r0, r3
 8008964:	3720      	adds	r7, #32
 8008966:	46bd      	mov	sp, r7
 8008968:	bd80      	pop	{r7, pc}
 800896a:	bf00      	nop
 800896c:	08018138 	.word	0x08018138
 8008970:	08018350 	.word	0x08018350
 8008974:	08018190 	.word	0x08018190
 8008978:	08018370 	.word	0x08018370
 800897c:	0801838c 	.word	0x0801838c

08008980 <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 8008980:	b580      	push	{r7, lr}
 8008982:	b084      	sub	sp, #16
 8008984:	af00      	add	r7, sp, #0
 8008986:	60f8      	str	r0, [r7, #12]
 8008988:	60b9      	str	r1, [r7, #8]
 800898a:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	2b00      	cmp	r3, #0
 8008990:	d005      	beq.n	800899e <netconn_tcp_recvd_msg+0x1e>
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	781b      	ldrb	r3, [r3, #0]
 8008996:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800899a:	2b10      	cmp	r3, #16
 800899c:	d009      	beq.n	80089b2 <netconn_tcp_recvd_msg+0x32>
 800899e:	4b0c      	ldr	r3, [pc, #48]	; (80089d0 <netconn_tcp_recvd_msg+0x50>)
 80089a0:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 80089a4:	490b      	ldr	r1, [pc, #44]	; (80089d4 <netconn_tcp_recvd_msg+0x54>)
 80089a6:	480c      	ldr	r0, [pc, #48]	; (80089d8 <netconn_tcp_recvd_msg+0x58>)
 80089a8:	f00e fa5a 	bl	8016e60 <iprintf>
 80089ac:	f06f 030f 	mvn.w	r3, #15
 80089b0:	e00a      	b.n	80089c8 <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	68fa      	ldr	r2, [r7, #12]
 80089b6:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	68ba      	ldr	r2, [r7, #8]
 80089bc:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 80089be:	6879      	ldr	r1, [r7, #4]
 80089c0:	4806      	ldr	r0, [pc, #24]	; (80089dc <netconn_tcp_recvd_msg+0x5c>)
 80089c2:	f7ff fdb3 	bl	800852c <netconn_apimsg>
 80089c6:	4603      	mov	r3, r0
}
 80089c8:	4618      	mov	r0, r3
 80089ca:	3710      	adds	r7, #16
 80089cc:	46bd      	mov	sp, r7
 80089ce:	bd80      	pop	{r7, pc}
 80089d0:	08018138 	.word	0x08018138
 80089d4:	08018398 	.word	0x08018398
 80089d8:	08018190 	.word	0x08018190
 80089dc:	08009deb 	.word	0x08009deb

080089e0 <netconn_tcp_recvd>:

err_t
netconn_tcp_recvd(struct netconn *conn, size_t len)
{
 80089e0:	b580      	push	{r7, lr}
 80089e2:	b08c      	sub	sp, #48	; 0x30
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	6078      	str	r0, [r7, #4]
 80089e8:	6039      	str	r1, [r7, #0]
  err_t err;
  API_MSG_VAR_DECLARE(msg);
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d005      	beq.n	80089fc <netconn_tcp_recvd+0x1c>
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	781b      	ldrb	r3, [r3, #0]
 80089f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80089f8:	2b10      	cmp	r3, #16
 80089fa:	d009      	beq.n	8008a10 <netconn_tcp_recvd+0x30>
 80089fc:	4b0c      	ldr	r3, [pc, #48]	; (8008a30 <netconn_tcp_recvd+0x50>)
 80089fe:	f240 22b6 	movw	r2, #694	; 0x2b6
 8008a02:	490c      	ldr	r1, [pc, #48]	; (8008a34 <netconn_tcp_recvd+0x54>)
 8008a04:	480c      	ldr	r0, [pc, #48]	; (8008a38 <netconn_tcp_recvd+0x58>)
 8008a06:	f00e fa2b 	bl	8016e60 <iprintf>
 8008a0a:	f06f 030f 	mvn.w	r3, #15
 8008a0e:	e00b      	b.n	8008a28 <netconn_tcp_recvd+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  API_MSG_VAR_ALLOC(msg);
  err = netconn_tcp_recvd_msg(conn, len, &API_VAR_REF(msg));
 8008a10:	f107 030c 	add.w	r3, r7, #12
 8008a14:	461a      	mov	r2, r3
 8008a16:	6839      	ldr	r1, [r7, #0]
 8008a18:	6878      	ldr	r0, [r7, #4]
 8008a1a:	f7ff ffb1 	bl	8008980 <netconn_tcp_recvd_msg>
 8008a1e:	4603      	mov	r3, r0
 8008a20:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);
  return err;
 8008a24:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8008a28:	4618      	mov	r0, r3
 8008a2a:	3730      	adds	r7, #48	; 0x30
 8008a2c:	46bd      	mov	sp, r7
 8008a2e:	bd80      	pop	{r7, pc}
 8008a30:	08018138 	.word	0x08018138
 8008a34:	08018398 	.word	0x08018398
 8008a38:	08018190 	.word	0x08018190

08008a3c <netconn_recv_data_tcp>:

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 8008a3c:	b580      	push	{r7, lr}
 8008a3e:	b090      	sub	sp, #64	; 0x40
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	60f8      	str	r0, [r7, #12]
 8008a44:	60b9      	str	r1, [r7, #8]
 8008a46:	4613      	mov	r3, r2
 8008a48:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	3310      	adds	r3, #16
 8008a4e:	4618      	mov	r0, r3
 8008a50:	f00e f84d 	bl	8016aee <sys_mbox_valid>
 8008a54:	4603      	mov	r3, r0
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d102      	bne.n	8008a60 <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 8008a5a:	f06f 030a 	mvn.w	r3, #10
 8008a5e:	e06d      	b.n	8008b3c <netconn_recv_data_tcp+0x100>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	7f1b      	ldrb	r3, [r3, #28]
 8008a64:	b25b      	sxtb	r3, r3
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	da07      	bge.n	8008a7a <netconn_recv_data_tcp+0x3e>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	7f1b      	ldrb	r3, [r3, #28]
 8008a6e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a72:	b2da      	uxtb	r2, r3
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	771a      	strb	r2, [r3, #28]
    goto handle_fin;
 8008a78:	e039      	b.n	8008aee <netconn_recv_data_tcp+0xb2>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 8008a7a:	79fb      	ldrb	r3, [r7, #7]
 8008a7c:	461a      	mov	r2, r3
 8008a7e:	68b9      	ldr	r1, [r7, #8]
 8008a80:	68f8      	ldr	r0, [r7, #12]
 8008a82:	f7ff feb5 	bl	80087f0 <netconn_recv_data>
 8008a86:	4603      	mov	r3, r0
 8008a88:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (err != ERR_OK) {
 8008a8c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d002      	beq.n	8008a9a <netconn_recv_data_tcp+0x5e>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 8008a94:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008a98:	e050      	b.n	8008b3c <netconn_recv_data_tcp+0x100>
  }
  buf = *new_buf;
 8008a9a:	68bb      	ldr	r3, [r7, #8]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 8008aa0:	79fb      	ldrb	r3, [r7, #7]
 8008aa2:	f003 0308 	and.w	r3, r3, #8
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d10e      	bne.n	8008ac8 <netconn_recv_data_tcp+0x8c>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 8008aaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d002      	beq.n	8008ab6 <netconn_recv_data_tcp+0x7a>
 8008ab0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ab2:	891b      	ldrh	r3, [r3, #8]
 8008ab4:	e000      	b.n	8008ab8 <netconn_recv_data_tcp+0x7c>
 8008ab6:	2301      	movs	r3, #1
 8008ab8:	86fb      	strh	r3, [r7, #54]	; 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 8008aba:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8008abc:	f107 0214 	add.w	r2, r7, #20
 8008ac0:	4619      	mov	r1, r3
 8008ac2:	68f8      	ldr	r0, [r7, #12]
 8008ac4:	f7ff ff5c 	bl	8008980 <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 8008ac8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d134      	bne.n	8008b38 <netconn_recv_data_tcp+0xfc>
    if (apiflags & NETCONN_NOFIN) {
 8008ace:	79fb      	ldrb	r3, [r7, #7]
 8008ad0:	f003 0310 	and.w	r3, r3, #16
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d009      	beq.n	8008aec <netconn_recv_data_tcp+0xb0>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	7f1b      	ldrb	r3, [r3, #28]
 8008adc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008ae0:	b2da      	uxtb	r2, r3
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	771a      	strb	r2, [r3, #28]
      return ERR_WOULDBLOCK;
 8008ae6:	f06f 0306 	mvn.w	r3, #6
 8008aea:	e027      	b.n	8008b3c <netconn_recv_data_tcp+0x100>
    } else {
handle_fin:
 8008aec:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d005      	beq.n	8008b02 <netconn_recv_data_tcp+0xc6>
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008afa:	2200      	movs	r2, #0
 8008afc:	2101      	movs	r1, #1
 8008afe:	68f8      	ldr	r0, [r7, #12]
 8008b00:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	685b      	ldr	r3, [r3, #4]
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d10f      	bne.n	8008b2a <netconn_recv_data_tcp+0xee>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 8008b0a:	68f8      	ldr	r0, [r7, #12]
 8008b0c:	f000 f9a2 	bl	8008e54 <netconn_err>
 8008b10:	4603      	mov	r3, r0
 8008b12:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        if (err != ERR_OK) {
 8008b16:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d002      	beq.n	8008b24 <netconn_recv_data_tcp+0xe8>
          return err;
 8008b1e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008b22:	e00b      	b.n	8008b3c <netconn_recv_data_tcp+0x100>
        }
        return ERR_RST;
 8008b24:	f06f 030d 	mvn.w	r3, #13
 8008b28:	e008      	b.n	8008b3c <netconn_recv_data_tcp+0x100>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 8008b2a:	2101      	movs	r1, #1
 8008b2c:	68f8      	ldr	r0, [r7, #12]
 8008b2e:	f000 f961 	bl	8008df4 <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 8008b32:	f06f 030e 	mvn.w	r3, #14
 8008b36:	e001      	b.n	8008b3c <netconn_recv_data_tcp+0x100>
    }
  }
  return err;
 8008b38:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8008b3c:	4618      	mov	r0, r3
 8008b3e:	3740      	adds	r7, #64	; 0x40
 8008b40:	46bd      	mov	sp, r7
 8008b42:	bd80      	pop	{r7, pc}

08008b44 <netconn_recv_tcp_pbuf_flags>:
 *                memory error or another error, @see netconn_recv_data)
 *         ERR_ARG if conn is not a TCP netconn
 */
err_t
netconn_recv_tcp_pbuf_flags(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 8008b44:	b580      	push	{r7, lr}
 8008b46:	b084      	sub	sp, #16
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	60f8      	str	r0, [r7, #12]
 8008b4c:	60b9      	str	r1, [r7, #8]
 8008b4e:	4613      	mov	r3, r2
 8008b50:	71fb      	strb	r3, [r7, #7]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d005      	beq.n	8008b64 <netconn_recv_tcp_pbuf_flags+0x20>
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	781b      	ldrb	r3, [r3, #0]
 8008b5c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008b60:	2b10      	cmp	r3, #16
 8008b62:	d009      	beq.n	8008b78 <netconn_recv_tcp_pbuf_flags+0x34>
 8008b64:	4b0a      	ldr	r3, [pc, #40]	; (8008b90 <netconn_recv_tcp_pbuf_flags+0x4c>)
 8008b66:	f240 3226 	movw	r2, #806	; 0x326
 8008b6a:	490a      	ldr	r1, [pc, #40]	; (8008b94 <netconn_recv_tcp_pbuf_flags+0x50>)
 8008b6c:	480a      	ldr	r0, [pc, #40]	; (8008b98 <netconn_recv_tcp_pbuf_flags+0x54>)
 8008b6e:	f00e f977 	bl	8016e60 <iprintf>
 8008b72:	f06f 030f 	mvn.w	r3, #15
 8008b76:	e006      	b.n	8008b86 <netconn_recv_tcp_pbuf_flags+0x42>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  return netconn_recv_data_tcp(conn, new_buf, apiflags);
 8008b78:	79fb      	ldrb	r3, [r7, #7]
 8008b7a:	461a      	mov	r2, r3
 8008b7c:	68b9      	ldr	r1, [r7, #8]
 8008b7e:	68f8      	ldr	r0, [r7, #12]
 8008b80:	f7ff ff5c 	bl	8008a3c <netconn_recv_data_tcp>
 8008b84:	4603      	mov	r3, r0
}
 8008b86:	4618      	mov	r0, r3
 8008b88:	3710      	adds	r7, #16
 8008b8a:	46bd      	mov	sp, r7
 8008b8c:	bd80      	pop	{r7, pc}
 8008b8e:	bf00      	nop
 8008b90:	08018138 	.word	0x08018138
 8008b94:	08018398 	.word	0x08018398
 8008b98:	08018190 	.word	0x08018190

08008b9c <netconn_recv_udp_raw_netbuf_flags>:
 *                memory error or another error)
 *         ERR_ARG if conn is not a UDP/RAW netconn
 */
err_t
netconn_recv_udp_raw_netbuf_flags(struct netconn *conn, struct netbuf **new_buf, u8_t apiflags)
{
 8008b9c:	b580      	push	{r7, lr}
 8008b9e:	b084      	sub	sp, #16
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	60f8      	str	r0, [r7, #12]
 8008ba4:	60b9      	str	r1, [r7, #8]
 8008ba6:	4613      	mov	r3, r2
 8008ba8:	71fb      	strb	r3, [r7, #7]
  LWIP_ERROR("netconn_recv_udp_raw_netbuf: invalid conn", (conn != NULL) &&
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d005      	beq.n	8008bbc <netconn_recv_udp_raw_netbuf_flags+0x20>
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	781b      	ldrb	r3, [r3, #0]
 8008bb4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008bb8:	2b10      	cmp	r3, #16
 8008bba:	d109      	bne.n	8008bd0 <netconn_recv_udp_raw_netbuf_flags+0x34>
 8008bbc:	4b0a      	ldr	r3, [pc, #40]	; (8008be8 <netconn_recv_udp_raw_netbuf_flags+0x4c>)
 8008bbe:	f240 324d 	movw	r2, #845	; 0x34d
 8008bc2:	490a      	ldr	r1, [pc, #40]	; (8008bec <netconn_recv_udp_raw_netbuf_flags+0x50>)
 8008bc4:	480a      	ldr	r0, [pc, #40]	; (8008bf0 <netconn_recv_udp_raw_netbuf_flags+0x54>)
 8008bc6:	f00e f94b 	bl	8016e60 <iprintf>
 8008bca:	f06f 030f 	mvn.w	r3, #15
 8008bce:	e006      	b.n	8008bde <netconn_recv_udp_raw_netbuf_flags+0x42>
             NETCONNTYPE_GROUP(netconn_type(conn)) != NETCONN_TCP, return ERR_ARG;);

  return netconn_recv_data(conn, (void **)new_buf, apiflags);
 8008bd0:	79fb      	ldrb	r3, [r7, #7]
 8008bd2:	461a      	mov	r2, r3
 8008bd4:	68b9      	ldr	r1, [r7, #8]
 8008bd6:	68f8      	ldr	r0, [r7, #12]
 8008bd8:	f7ff fe0a 	bl	80087f0 <netconn_recv_data>
 8008bdc:	4603      	mov	r3, r0
}
 8008bde:	4618      	mov	r0, r3
 8008be0:	3710      	adds	r7, #16
 8008be2:	46bd      	mov	sp, r7
 8008be4:	bd80      	pop	{r7, pc}
 8008be6:	bf00      	nop
 8008be8:	08018138 	.word	0x08018138
 8008bec:	080183bc 	.word	0x080183bc
 8008bf0:	08018190 	.word	0x08018190

08008bf4 <netconn_send>:
 * @param buf a netbuf containing the data to send
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_send(struct netconn *conn, struct netbuf *buf)
{
 8008bf4:	b580      	push	{r7, lr}
 8008bf6:	b08c      	sub	sp, #48	; 0x30
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	6078      	str	r0, [r7, #4]
 8008bfc:	6039      	str	r1, [r7, #0]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_send: invalid conn",  (conn != NULL), return ERR_ARG;);
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d109      	bne.n	8008c18 <netconn_send+0x24>
 8008c04:	4b0e      	ldr	r3, [pc, #56]	; (8008c40 <netconn_send+0x4c>)
 8008c06:	f240 32b2 	movw	r2, #946	; 0x3b2
 8008c0a:	490e      	ldr	r1, [pc, #56]	; (8008c44 <netconn_send+0x50>)
 8008c0c:	480e      	ldr	r0, [pc, #56]	; (8008c48 <netconn_send+0x54>)
 8008c0e:	f00e f927 	bl	8016e60 <iprintf>
 8008c12:	f06f 030f 	mvn.w	r3, #15
 8008c16:	e00e      	b.n	8008c36 <netconn_send+0x42>

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_send: sending %"U16_F" bytes\n", buf->p->tot_len));

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	60fb      	str	r3, [r7, #12]
  API_MSG_VAR_REF(msg).msg.b = buf;
 8008c1c:	683b      	ldr	r3, [r7, #0]
 8008c1e:	617b      	str	r3, [r7, #20]
  err = netconn_apimsg(lwip_netconn_do_send, &API_MSG_VAR_REF(msg));
 8008c20:	f107 030c 	add.w	r3, r7, #12
 8008c24:	4619      	mov	r1, r3
 8008c26:	4809      	ldr	r0, [pc, #36]	; (8008c4c <netconn_send+0x58>)
 8008c28:	f7ff fc80 	bl	800852c <netconn_apimsg>
 8008c2c:	4603      	mov	r3, r0
 8008c2e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8008c32:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8008c36:	4618      	mov	r0, r3
 8008c38:	3730      	adds	r7, #48	; 0x30
 8008c3a:	46bd      	mov	sp, r7
 8008c3c:	bd80      	pop	{r7, pc}
 8008c3e:	bf00      	nop
 8008c40:	08018138 	.word	0x08018138
 8008c44:	080183f4 	.word	0x080183f4
 8008c48:	08018190 	.word	0x08018190
 8008c4c:	08009d4f 	.word	0x08009d4f

08008c50 <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 8008c50:	b580      	push	{r7, lr}
 8008c52:	b088      	sub	sp, #32
 8008c54:	af02      	add	r7, sp, #8
 8008c56:	60f8      	str	r0, [r7, #12]
 8008c58:	60b9      	str	r1, [r7, #8]
 8008c5a:	607a      	str	r2, [r7, #4]
 8008c5c:	70fb      	strb	r3, [r7, #3]
  struct netvector vector;
  vector.ptr = dataptr;
 8008c5e:	68bb      	ldr	r3, [r7, #8]
 8008c60:	613b      	str	r3, [r7, #16]
  vector.len = size;
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	617b      	str	r3, [r7, #20]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 8008c66:	78fa      	ldrb	r2, [r7, #3]
 8008c68:	f107 0110 	add.w	r1, r7, #16
 8008c6c:	6a3b      	ldr	r3, [r7, #32]
 8008c6e:	9300      	str	r3, [sp, #0]
 8008c70:	4613      	mov	r3, r2
 8008c72:	2201      	movs	r2, #1
 8008c74:	68f8      	ldr	r0, [r7, #12]
 8008c76:	f000 f805 	bl	8008c84 <netconn_write_vectors_partly>
 8008c7a:	4603      	mov	r3, r0
}
 8008c7c:	4618      	mov	r0, r3
 8008c7e:	3718      	adds	r7, #24
 8008c80:	46bd      	mov	sp, r7
 8008c82:	bd80      	pop	{r7, pc}

08008c84 <netconn_write_vectors_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_vectors_partly(struct netconn *conn, struct netvector *vectors, u16_t vectorcnt,
                             u8_t apiflags, size_t *bytes_written)
{
 8008c84:	b580      	push	{r7, lr}
 8008c86:	b092      	sub	sp, #72	; 0x48
 8008c88:	af00      	add	r7, sp, #0
 8008c8a:	60f8      	str	r0, [r7, #12]
 8008c8c:	60b9      	str	r1, [r7, #8]
 8008c8e:	4611      	mov	r1, r2
 8008c90:	461a      	mov	r2, r3
 8008c92:	460b      	mov	r3, r1
 8008c94:	80fb      	strh	r3, [r7, #6]
 8008c96:	4613      	mov	r3, r2
 8008c98:	717b      	strb	r3, [r7, #5]
  err_t err;
  u8_t dontblock;
  size_t size;
  int i;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d109      	bne.n	8008cb4 <netconn_write_vectors_partly+0x30>
 8008ca0:	4b4e      	ldr	r3, [pc, #312]	; (8008ddc <netconn_write_vectors_partly+0x158>)
 8008ca2:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8008ca6:	494e      	ldr	r1, [pc, #312]	; (8008de0 <netconn_write_vectors_partly+0x15c>)
 8008ca8:	484e      	ldr	r0, [pc, #312]	; (8008de4 <netconn_write_vectors_partly+0x160>)
 8008caa:	f00e f8d9 	bl	8016e60 <iprintf>
 8008cae:	f06f 030f 	mvn.w	r3, #15
 8008cb2:	e08e      	b.n	8008dd2 <netconn_write_vectors_partly+0x14e>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	781b      	ldrb	r3, [r3, #0]
 8008cb8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008cbc:	2b10      	cmp	r3, #16
 8008cbe:	d009      	beq.n	8008cd4 <netconn_write_vectors_partly+0x50>
 8008cc0:	4b46      	ldr	r3, [pc, #280]	; (8008ddc <netconn_write_vectors_partly+0x158>)
 8008cc2:	f240 32ef 	movw	r2, #1007	; 0x3ef
 8008cc6:	4948      	ldr	r1, [pc, #288]	; (8008de8 <netconn_write_vectors_partly+0x164>)
 8008cc8:	4846      	ldr	r0, [pc, #280]	; (8008de4 <netconn_write_vectors_partly+0x160>)
 8008cca:	f00e f8c9 	bl	8016e60 <iprintf>
 8008cce:	f06f 0305 	mvn.w	r3, #5
 8008cd2:	e07e      	b.n	8008dd2 <netconn_write_vectors_partly+0x14e>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	7f1b      	ldrb	r3, [r3, #28]
 8008cd8:	f003 0302 	and.w	r3, r3, #2
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d104      	bne.n	8008cea <netconn_write_vectors_partly+0x66>
 8008ce0:	797b      	ldrb	r3, [r7, #5]
 8008ce2:	f003 0304 	and.w	r3, r3, #4
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d001      	beq.n	8008cee <netconn_write_vectors_partly+0x6a>
 8008cea:	2301      	movs	r3, #1
 8008cec:	e000      	b.n	8008cf0 <netconn_write_vectors_partly+0x6c>
 8008cee:	2300      	movs	r3, #0
 8008cf0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 8008cf4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d005      	beq.n	8008d08 <netconn_write_vectors_partly+0x84>
 8008cfc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d102      	bne.n	8008d08 <netconn_write_vectors_partly+0x84>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 8008d02:	f06f 0305 	mvn.w	r3, #5
 8008d06:	e064      	b.n	8008dd2 <netconn_write_vectors_partly+0x14e>
  }

  /* sum up the total size */
  size = 0;
 8008d08:	2300      	movs	r3, #0
 8008d0a:	647b      	str	r3, [r7, #68]	; 0x44
  for (i = 0; i < vectorcnt; i++) {
 8008d0c:	2300      	movs	r3, #0
 8008d0e:	643b      	str	r3, [r7, #64]	; 0x40
 8008d10:	e015      	b.n	8008d3e <netconn_write_vectors_partly+0xba>
    size += vectors[i].len;
 8008d12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008d14:	00db      	lsls	r3, r3, #3
 8008d16:	68ba      	ldr	r2, [r7, #8]
 8008d18:	4413      	add	r3, r2
 8008d1a:	685b      	ldr	r3, [r3, #4]
 8008d1c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008d1e:	4413      	add	r3, r2
 8008d20:	647b      	str	r3, [r7, #68]	; 0x44
    if (size < vectors[i].len) {
 8008d22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008d24:	00db      	lsls	r3, r3, #3
 8008d26:	68ba      	ldr	r2, [r7, #8]
 8008d28:	4413      	add	r3, r2
 8008d2a:	685b      	ldr	r3, [r3, #4]
 8008d2c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008d2e:	429a      	cmp	r2, r3
 8008d30:	d202      	bcs.n	8008d38 <netconn_write_vectors_partly+0xb4>
      /* overflow */
      return ERR_VAL;
 8008d32:	f06f 0305 	mvn.w	r3, #5
 8008d36:	e04c      	b.n	8008dd2 <netconn_write_vectors_partly+0x14e>
  for (i = 0; i < vectorcnt; i++) {
 8008d38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008d3a:	3301      	adds	r3, #1
 8008d3c:	643b      	str	r3, [r7, #64]	; 0x40
 8008d3e:	88fb      	ldrh	r3, [r7, #6]
 8008d40:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008d42:	429a      	cmp	r2, r3
 8008d44:	dbe5      	blt.n	8008d12 <netconn_write_vectors_partly+0x8e>
    }
  }
  if (size == 0) {
 8008d46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d101      	bne.n	8008d50 <netconn_write_vectors_partly+0xcc>
    return ERR_OK;
 8008d4c:	2300      	movs	r3, #0
 8008d4e:	e040      	b.n	8008dd2 <netconn_write_vectors_partly+0x14e>
  } else if (size > SSIZE_MAX) {
 8008d50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	da0a      	bge.n	8008d6c <netconn_write_vectors_partly+0xe8>
    ssize_t limited;
    /* this is required by the socket layer (cannot send full size_t range) */
    if (!bytes_written) {
 8008d56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d102      	bne.n	8008d62 <netconn_write_vectors_partly+0xde>
      return ERR_VAL;
 8008d5c:	f06f 0305 	mvn.w	r3, #5
 8008d60:	e037      	b.n	8008dd2 <netconn_write_vectors_partly+0x14e>
    }
    /* limit the amount of data to send */
    limited = SSIZE_MAX;
 8008d62:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8008d66:	63bb      	str	r3, [r7, #56]	; 0x38
    size = (size_t)limited;
 8008d68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d6a:	647b      	str	r3, [r7, #68]	; 0x44
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 8008d70:	68bb      	ldr	r3, [r7, #8]
 8008d72:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 8008d74:	88fb      	ldrh	r3, [r7, #6]
 8008d76:	843b      	strh	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 8008d78:	2300      	movs	r3, #0
 8008d7a:	627b      	str	r3, [r7, #36]	; 0x24
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 8008d7c:	797b      	ldrb	r3, [r7, #5]
 8008d7e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  API_MSG_VAR_REF(msg).msg.w.len = size;
 8008d82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008d84:	62bb      	str	r3, [r7, #40]	; 0x28
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 8008d86:	2300      	movs	r3, #0
 8008d88:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 8008d8a:	f107 0314 	add.w	r3, r7, #20
 8008d8e:	4619      	mov	r1, r3
 8008d90:	4816      	ldr	r0, [pc, #88]	; (8008dec <netconn_write_vectors_partly+0x168>)
 8008d92:	f7ff fbcb 	bl	800852c <netconn_apimsg>
 8008d96:	4603      	mov	r3, r0
 8008d98:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (err == ERR_OK) {
 8008d9c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d114      	bne.n	8008dce <netconn_write_vectors_partly+0x14a>
    if (bytes_written != NULL) {
 8008da4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d002      	beq.n	8008db0 <netconn_write_vectors_partly+0x12c>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 8008daa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008dac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008dae:	601a      	str	r2, [r3, #0]
    }
    /* for blocking, check all requested bytes were written, NOTE: send_timeout is
       treated as dontblock (see dontblock assignment above) */
    if (!dontblock) {
 8008db0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d10a      	bne.n	8008dce <netconn_write_vectors_partly+0x14a>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 8008db8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008dbc:	429a      	cmp	r2, r3
 8008dbe:	d006      	beq.n	8008dce <netconn_write_vectors_partly+0x14a>
 8008dc0:	4b06      	ldr	r3, [pc, #24]	; (8008ddc <netconn_write_vectors_partly+0x158>)
 8008dc2:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8008dc6:	490a      	ldr	r1, [pc, #40]	; (8008df0 <netconn_write_vectors_partly+0x16c>)
 8008dc8:	4806      	ldr	r0, [pc, #24]	; (8008de4 <netconn_write_vectors_partly+0x160>)
 8008dca:	f00e f849 	bl	8016e60 <iprintf>
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 8008dce:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8008dd2:	4618      	mov	r0, r3
 8008dd4:	3748      	adds	r7, #72	; 0x48
 8008dd6:	46bd      	mov	sp, r7
 8008dd8:	bd80      	pop	{r7, pc}
 8008dda:	bf00      	nop
 8008ddc:	08018138 	.word	0x08018138
 8008de0:	08018410 	.word	0x08018410
 8008de4:	08018190 	.word	0x08018190
 8008de8:	0801842c 	.word	0x0801842c
 8008dec:	0800a1ed 	.word	0x0800a1ed
 8008df0:	08018450 	.word	0x08018450

08008df4 <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 8008df4:	b580      	push	{r7, lr}
 8008df6:	b08c      	sub	sp, #48	; 0x30
 8008df8:	af00      	add	r7, sp, #0
 8008dfa:	6078      	str	r0, [r7, #4]
 8008dfc:	460b      	mov	r3, r1
 8008dfe:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d109      	bne.n	8008e1a <netconn_close_shutdown+0x26>
 8008e06:	4b0f      	ldr	r3, [pc, #60]	; (8008e44 <netconn_close_shutdown+0x50>)
 8008e08:	f240 4247 	movw	r2, #1095	; 0x447
 8008e0c:	490e      	ldr	r1, [pc, #56]	; (8008e48 <netconn_close_shutdown+0x54>)
 8008e0e:	480f      	ldr	r0, [pc, #60]	; (8008e4c <netconn_close_shutdown+0x58>)
 8008e10:	f00e f826 	bl	8016e60 <iprintf>
 8008e14:	f06f 030f 	mvn.w	r3, #15
 8008e18:	e010      	b.n	8008e3c <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 8008e1e:	78fb      	ldrb	r3, [r7, #3]
 8008e20:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8008e22:	2329      	movs	r3, #41	; 0x29
 8008e24:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 8008e26:	f107 030c 	add.w	r3, r7, #12
 8008e2a:	4619      	mov	r1, r3
 8008e2c:	4808      	ldr	r0, [pc, #32]	; (8008e50 <netconn_close_shutdown+0x5c>)
 8008e2e:	f7ff fb7d 	bl	800852c <netconn_apimsg>
 8008e32:	4603      	mov	r3, r0
 8008e34:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8008e38:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8008e3c:	4618      	mov	r0, r3
 8008e3e:	3730      	adds	r7, #48	; 0x30
 8008e40:	46bd      	mov	sp, r7
 8008e42:	bd80      	pop	{r7, pc}
 8008e44:	08018138 	.word	0x08018138
 8008e48:	08018474 	.word	0x08018474
 8008e4c:	08018190 	.word	0x08018190
 8008e50:	0800a411 	.word	0x0800a411

08008e54 <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 8008e54:	b580      	push	{r7, lr}
 8008e56:	b084      	sub	sp, #16
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d101      	bne.n	8008e66 <netconn_err+0x12>
    return ERR_OK;
 8008e62:	2300      	movs	r3, #0
 8008e64:	e00d      	b.n	8008e82 <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 8008e66:	f00d ff5d 	bl	8016d24 <sys_arch_protect>
 8008e6a:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	7a1b      	ldrb	r3, [r3, #8]
 8008e70:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	2200      	movs	r2, #0
 8008e76:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 8008e78:	68f8      	ldr	r0, [r7, #12]
 8008e7a:	f00d ff61 	bl	8016d40 <sys_arch_unprotect>
  return err;
 8008e7e:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8008e82:	4618      	mov	r0, r3
 8008e84:	3710      	adds	r7, #16
 8008e86:	46bd      	mov	sp, r7
 8008e88:	bd80      	pop	{r7, pc}
	...

08008e8c <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 8008e8c:	b580      	push	{r7, lr}
 8008e8e:	b082      	sub	sp, #8
 8008e90:	af00      	add	r7, sp, #0
 8008e92:	4603      	mov	r3, r0
 8008e94:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 8008e96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008e9a:	f113 0f0e 	cmn.w	r3, #14
 8008e9e:	d008      	beq.n	8008eb2 <lwip_netconn_err_to_msg+0x26>
 8008ea0:	f113 0f0d 	cmn.w	r3, #13
 8008ea4:	d003      	beq.n	8008eae <lwip_netconn_err_to_msg+0x22>
 8008ea6:	f113 0f0f 	cmn.w	r3, #15
 8008eaa:	d004      	beq.n	8008eb6 <lwip_netconn_err_to_msg+0x2a>
 8008eac:	e005      	b.n	8008eba <lwip_netconn_err_to_msg+0x2e>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 8008eae:	4b0a      	ldr	r3, [pc, #40]	; (8008ed8 <lwip_netconn_err_to_msg+0x4c>)
 8008eb0:	e00e      	b.n	8008ed0 <lwip_netconn_err_to_msg+0x44>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 8008eb2:	4b0a      	ldr	r3, [pc, #40]	; (8008edc <lwip_netconn_err_to_msg+0x50>)
 8008eb4:	e00c      	b.n	8008ed0 <lwip_netconn_err_to_msg+0x44>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 8008eb6:	4b0a      	ldr	r3, [pc, #40]	; (8008ee0 <lwip_netconn_err_to_msg+0x54>)
 8008eb8:	e00a      	b.n	8008ed0 <lwip_netconn_err_to_msg+0x44>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 8008eba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d005      	beq.n	8008ece <lwip_netconn_err_to_msg+0x42>
 8008ec2:	4b08      	ldr	r3, [pc, #32]	; (8008ee4 <lwip_netconn_err_to_msg+0x58>)
 8008ec4:	227d      	movs	r2, #125	; 0x7d
 8008ec6:	4908      	ldr	r1, [pc, #32]	; (8008ee8 <lwip_netconn_err_to_msg+0x5c>)
 8008ec8:	4808      	ldr	r0, [pc, #32]	; (8008eec <lwip_netconn_err_to_msg+0x60>)
 8008eca:	f00d ffc9 	bl	8016e60 <iprintf>
      return NULL;
 8008ece:	2300      	movs	r3, #0
  }
}
 8008ed0:	4618      	mov	r0, r3
 8008ed2:	3708      	adds	r7, #8
 8008ed4:	46bd      	mov	sp, r7
 8008ed6:	bd80      	pop	{r7, pc}
 8008ed8:	0801ba60 	.word	0x0801ba60
 8008edc:	0801ba61 	.word	0x0801ba61
 8008ee0:	0801ba62 	.word	0x0801ba62
 8008ee4:	08018490 	.word	0x08018490
 8008ee8:	080184c4 	.word	0x080184c4
 8008eec:	080184d4 	.word	0x080184d4

08008ef0 <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 8008ef0:	b580      	push	{r7, lr}
 8008ef2:	b082      	sub	sp, #8
 8008ef4:	af00      	add	r7, sp, #0
 8008ef6:	6078      	str	r0, [r7, #4]
 8008ef8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 8008efa:	683b      	ldr	r3, [r7, #0]
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d105      	bne.n	8008f0c <lwip_netconn_is_err_msg+0x1c>
 8008f00:	4b12      	ldr	r3, [pc, #72]	; (8008f4c <lwip_netconn_is_err_msg+0x5c>)
 8008f02:	2285      	movs	r2, #133	; 0x85
 8008f04:	4912      	ldr	r1, [pc, #72]	; (8008f50 <lwip_netconn_is_err_msg+0x60>)
 8008f06:	4813      	ldr	r0, [pc, #76]	; (8008f54 <lwip_netconn_is_err_msg+0x64>)
 8008f08:	f00d ffaa 	bl	8016e60 <iprintf>

  if (msg == &netconn_aborted) {
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	4a12      	ldr	r2, [pc, #72]	; (8008f58 <lwip_netconn_is_err_msg+0x68>)
 8008f10:	4293      	cmp	r3, r2
 8008f12:	d104      	bne.n	8008f1e <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 8008f14:	683b      	ldr	r3, [r7, #0]
 8008f16:	22f3      	movs	r2, #243	; 0xf3
 8008f18:	701a      	strb	r2, [r3, #0]
    return 1;
 8008f1a:	2301      	movs	r3, #1
 8008f1c:	e012      	b.n	8008f44 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	4a0e      	ldr	r2, [pc, #56]	; (8008f5c <lwip_netconn_is_err_msg+0x6c>)
 8008f22:	4293      	cmp	r3, r2
 8008f24:	d104      	bne.n	8008f30 <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 8008f26:	683b      	ldr	r3, [r7, #0]
 8008f28:	22f2      	movs	r2, #242	; 0xf2
 8008f2a:	701a      	strb	r2, [r3, #0]
    return 1;
 8008f2c:	2301      	movs	r3, #1
 8008f2e:	e009      	b.n	8008f44 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	4a0b      	ldr	r2, [pc, #44]	; (8008f60 <lwip_netconn_is_err_msg+0x70>)
 8008f34:	4293      	cmp	r3, r2
 8008f36:	d104      	bne.n	8008f42 <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 8008f38:	683b      	ldr	r3, [r7, #0]
 8008f3a:	22f1      	movs	r2, #241	; 0xf1
 8008f3c:	701a      	strb	r2, [r3, #0]
    return 1;
 8008f3e:	2301      	movs	r3, #1
 8008f40:	e000      	b.n	8008f44 <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 8008f42:	2300      	movs	r3, #0
}
 8008f44:	4618      	mov	r0, r3
 8008f46:	3708      	adds	r7, #8
 8008f48:	46bd      	mov	sp, r7
 8008f4a:	bd80      	pop	{r7, pc}
 8008f4c:	08018490 	.word	0x08018490
 8008f50:	080184fc 	.word	0x080184fc
 8008f54:	080184d4 	.word	0x080184d4
 8008f58:	0801ba60 	.word	0x0801ba60
 8008f5c:	0801ba61 	.word	0x0801ba61
 8008f60:	0801ba62 	.word	0x0801ba62

08008f64 <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 8008f64:	b580      	push	{r7, lr}
 8008f66:	b088      	sub	sp, #32
 8008f68:	af00      	add	r7, sp, #0
 8008f6a:	60f8      	str	r0, [r7, #12]
 8008f6c:	60b9      	str	r1, [r7, #8]
 8008f6e:	607a      	str	r2, [r7, #4]
 8008f70:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 8008f72:	68bb      	ldr	r3, [r7, #8]
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d105      	bne.n	8008f84 <recv_udp+0x20>
 8008f78:	4b34      	ldr	r3, [pc, #208]	; (800904c <recv_udp+0xe8>)
 8008f7a:	22e5      	movs	r2, #229	; 0xe5
 8008f7c:	4934      	ldr	r1, [pc, #208]	; (8009050 <recv_udp+0xec>)
 8008f7e:	4835      	ldr	r0, [pc, #212]	; (8009054 <recv_udp+0xf0>)
 8008f80:	f00d ff6e 	bl	8016e60 <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d105      	bne.n	8008f96 <recv_udp+0x32>
 8008f8a:	4b30      	ldr	r3, [pc, #192]	; (800904c <recv_udp+0xe8>)
 8008f8c:	22e6      	movs	r2, #230	; 0xe6
 8008f8e:	4932      	ldr	r1, [pc, #200]	; (8009058 <recv_udp+0xf4>)
 8008f90:	4830      	ldr	r0, [pc, #192]	; (8009054 <recv_udp+0xf0>)
 8008f92:	f00d ff65 	bl	8016e60 <iprintf>
  conn = (struct netconn *)arg;
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 8008f9a:	69fb      	ldr	r3, [r7, #28]
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d103      	bne.n	8008fa8 <recv_udp+0x44>
    pbuf_free(p);
 8008fa0:	6878      	ldr	r0, [r7, #4]
 8008fa2:	f004 f833 	bl	800d00c <pbuf_free>
    return;
 8008fa6:	e04d      	b.n	8009044 <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 8008fa8:	69fb      	ldr	r3, [r7, #28]
 8008faa:	685b      	ldr	r3, [r3, #4]
 8008fac:	68ba      	ldr	r2, [r7, #8]
 8008fae:	429a      	cmp	r2, r3
 8008fb0:	d005      	beq.n	8008fbe <recv_udp+0x5a>
 8008fb2:	4b26      	ldr	r3, [pc, #152]	; (800904c <recv_udp+0xe8>)
 8008fb4:	22ee      	movs	r2, #238	; 0xee
 8008fb6:	4929      	ldr	r1, [pc, #164]	; (800905c <recv_udp+0xf8>)
 8008fb8:	4826      	ldr	r0, [pc, #152]	; (8009054 <recv_udp+0xf0>)
 8008fba:	f00d ff51 	bl	8016e60 <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8008fbe:	69fb      	ldr	r3, [r7, #28]
 8008fc0:	3310      	adds	r3, #16
 8008fc2:	4618      	mov	r0, r3
 8008fc4:	f00d fd93 	bl	8016aee <sys_mbox_valid>
 8008fc8:	4603      	mov	r3, r0
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d103      	bne.n	8008fd6 <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 8008fce:	6878      	ldr	r0, [r7, #4]
 8008fd0:	f004 f81c 	bl	800d00c <pbuf_free>
    return;
 8008fd4:	e036      	b.n	8009044 <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8008fd6:	2006      	movs	r0, #6
 8008fd8:	f003 f8f4 	bl	800c1c4 <memp_malloc>
 8008fdc:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 8008fde:	69bb      	ldr	r3, [r7, #24]
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d103      	bne.n	8008fec <recv_udp+0x88>
    pbuf_free(p);
 8008fe4:	6878      	ldr	r0, [r7, #4]
 8008fe6:	f004 f811 	bl	800d00c <pbuf_free>
    return;
 8008fea:	e02b      	b.n	8009044 <recv_udp+0xe0>
  } else {
    buf->p = p;
 8008fec:	69bb      	ldr	r3, [r7, #24]
 8008fee:	687a      	ldr	r2, [r7, #4]
 8008ff0:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 8008ff2:	69bb      	ldr	r3, [r7, #24]
 8008ff4:	687a      	ldr	r2, [r7, #4]
 8008ff6:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 8008ff8:	683b      	ldr	r3, [r7, #0]
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d002      	beq.n	8009004 <recv_udp+0xa0>
 8008ffe:	683b      	ldr	r3, [r7, #0]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	e000      	b.n	8009006 <recv_udp+0xa2>
 8009004:	2300      	movs	r3, #0
 8009006:	69ba      	ldr	r2, [r7, #24]
 8009008:	6093      	str	r3, [r2, #8]
    buf->port = port;
 800900a:	69bb      	ldr	r3, [r7, #24]
 800900c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800900e:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	891b      	ldrh	r3, [r3, #8]
 8009014:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 8009016:	69fb      	ldr	r3, [r7, #28]
 8009018:	3310      	adds	r3, #16
 800901a:	69b9      	ldr	r1, [r7, #24]
 800901c:	4618      	mov	r0, r3
 800901e:	f00d fcf1 	bl	8016a04 <sys_mbox_trypost>
 8009022:	4603      	mov	r3, r0
 8009024:	2b00      	cmp	r3, #0
 8009026:	d003      	beq.n	8009030 <recv_udp+0xcc>
    netbuf_delete(buf);
 8009028:	69b8      	ldr	r0, [r7, #24]
 800902a:	f001 fa9b 	bl	800a564 <netbuf_delete>
    return;
 800902e:	e009      	b.n	8009044 <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8009030:	69fb      	ldr	r3, [r7, #28]
 8009032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009034:	2b00      	cmp	r3, #0
 8009036:	d005      	beq.n	8009044 <recv_udp+0xe0>
 8009038:	69fb      	ldr	r3, [r7, #28]
 800903a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800903c:	8afa      	ldrh	r2, [r7, #22]
 800903e:	2100      	movs	r1, #0
 8009040:	69f8      	ldr	r0, [r7, #28]
 8009042:	4798      	blx	r3
  }
}
 8009044:	3720      	adds	r7, #32
 8009046:	46bd      	mov	sp, r7
 8009048:	bd80      	pop	{r7, pc}
 800904a:	bf00      	nop
 800904c:	08018490 	.word	0x08018490
 8009050:	08018508 	.word	0x08018508
 8009054:	080184d4 	.word	0x080184d4
 8009058:	0801852c 	.word	0x0801852c
 800905c:	0801854c 	.word	0x0801854c

08009060 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8009060:	b580      	push	{r7, lr}
 8009062:	b088      	sub	sp, #32
 8009064:	af00      	add	r7, sp, #0
 8009066:	60f8      	str	r0, [r7, #12]
 8009068:	60b9      	str	r1, [r7, #8]
 800906a:	607a      	str	r2, [r7, #4]
 800906c:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 800906e:	68bb      	ldr	r3, [r7, #8]
 8009070:	2b00      	cmp	r3, #0
 8009072:	d106      	bne.n	8009082 <recv_tcp+0x22>
 8009074:	4b36      	ldr	r3, [pc, #216]	; (8009150 <recv_tcp+0xf0>)
 8009076:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800907a:	4936      	ldr	r1, [pc, #216]	; (8009154 <recv_tcp+0xf4>)
 800907c:	4836      	ldr	r0, [pc, #216]	; (8009158 <recv_tcp+0xf8>)
 800907e:	f00d feef 	bl	8016e60 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	2b00      	cmp	r3, #0
 8009086:	d106      	bne.n	8009096 <recv_tcp+0x36>
 8009088:	4b31      	ldr	r3, [pc, #196]	; (8009150 <recv_tcp+0xf0>)
 800908a:	f240 122d 	movw	r2, #301	; 0x12d
 800908e:	4933      	ldr	r1, [pc, #204]	; (800915c <recv_tcp+0xfc>)
 8009090:	4831      	ldr	r0, [pc, #196]	; (8009158 <recv_tcp+0xf8>)
 8009092:	f00d fee5 	bl	8016e60 <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 8009096:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800909a:	2b00      	cmp	r3, #0
 800909c:	d006      	beq.n	80090ac <recv_tcp+0x4c>
 800909e:	4b2c      	ldr	r3, [pc, #176]	; (8009150 <recv_tcp+0xf0>)
 80090a0:	f44f 7297 	mov.w	r2, #302	; 0x12e
 80090a4:	492e      	ldr	r1, [pc, #184]	; (8009160 <recv_tcp+0x100>)
 80090a6:	482c      	ldr	r0, [pc, #176]	; (8009158 <recv_tcp+0xf8>)
 80090a8:	f00d feda 	bl	8016e60 <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 80090b0:	697b      	ldr	r3, [r7, #20]
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d102      	bne.n	80090bc <recv_tcp+0x5c>
    return ERR_VAL;
 80090b6:	f06f 0305 	mvn.w	r3, #5
 80090ba:	e045      	b.n	8009148 <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 80090bc:	697b      	ldr	r3, [r7, #20]
 80090be:	685b      	ldr	r3, [r3, #4]
 80090c0:	68ba      	ldr	r2, [r7, #8]
 80090c2:	429a      	cmp	r2, r3
 80090c4:	d006      	beq.n	80090d4 <recv_tcp+0x74>
 80090c6:	4b22      	ldr	r3, [pc, #136]	; (8009150 <recv_tcp+0xf0>)
 80090c8:	f240 1235 	movw	r2, #309	; 0x135
 80090cc:	4925      	ldr	r1, [pc, #148]	; (8009164 <recv_tcp+0x104>)
 80090ce:	4822      	ldr	r0, [pc, #136]	; (8009158 <recv_tcp+0xf8>)
 80090d0:	f00d fec6 	bl	8016e60 <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 80090d4:	697b      	ldr	r3, [r7, #20]
 80090d6:	3310      	adds	r3, #16
 80090d8:	4618      	mov	r0, r3
 80090da:	f00d fd08 	bl	8016aee <sys_mbox_valid>
 80090de:	4603      	mov	r3, r0
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d10d      	bne.n	8009100 <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d008      	beq.n	80090fc <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	891b      	ldrh	r3, [r3, #8]
 80090ee:	4619      	mov	r1, r3
 80090f0:	68b8      	ldr	r0, [r7, #8]
 80090f2:	f004 fe7f 	bl	800ddf4 <tcp_recved>
      pbuf_free(p);
 80090f6:	6878      	ldr	r0, [r7, #4]
 80090f8:	f003 ff88 	bl	800d00c <pbuf_free>
    }
    return ERR_OK;
 80090fc:	2300      	movs	r3, #0
 80090fe:	e023      	b.n	8009148 <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	2b00      	cmp	r3, #0
 8009104:	d005      	beq.n	8009112 <recv_tcp+0xb2>
    msg = p;
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	891b      	ldrh	r3, [r3, #8]
 800910e:	83fb      	strh	r3, [r7, #30]
 8009110:	e003      	b.n	800911a <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 8009112:	4b15      	ldr	r3, [pc, #84]	; (8009168 <recv_tcp+0x108>)
 8009114:	61bb      	str	r3, [r7, #24]
    len = 0;
 8009116:	2300      	movs	r3, #0
 8009118:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 800911a:	697b      	ldr	r3, [r7, #20]
 800911c:	3310      	adds	r3, #16
 800911e:	69b9      	ldr	r1, [r7, #24]
 8009120:	4618      	mov	r0, r3
 8009122:	f00d fc6f 	bl	8016a04 <sys_mbox_trypost>
 8009126:	4603      	mov	r3, r0
 8009128:	2b00      	cmp	r3, #0
 800912a:	d002      	beq.n	8009132 <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 800912c:	f04f 33ff 	mov.w	r3, #4294967295
 8009130:	e00a      	b.n	8009148 <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8009132:	697b      	ldr	r3, [r7, #20]
 8009134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009136:	2b00      	cmp	r3, #0
 8009138:	d005      	beq.n	8009146 <recv_tcp+0xe6>
 800913a:	697b      	ldr	r3, [r7, #20]
 800913c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800913e:	8bfa      	ldrh	r2, [r7, #30]
 8009140:	2100      	movs	r1, #0
 8009142:	6978      	ldr	r0, [r7, #20]
 8009144:	4798      	blx	r3
  }

  return ERR_OK;
 8009146:	2300      	movs	r3, #0
}
 8009148:	4618      	mov	r0, r3
 800914a:	3720      	adds	r7, #32
 800914c:	46bd      	mov	sp, r7
 800914e:	bd80      	pop	{r7, pc}
 8009150:	08018490 	.word	0x08018490
 8009154:	0801856c 	.word	0x0801856c
 8009158:	080184d4 	.word	0x080184d4
 800915c:	08018590 	.word	0x08018590
 8009160:	080185b0 	.word	0x080185b0
 8009164:	080185c8 	.word	0x080185c8
 8009168:	0801ba62 	.word	0x0801ba62

0800916c <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 800916c:	b580      	push	{r7, lr}
 800916e:	b084      	sub	sp, #16
 8009170:	af00      	add	r7, sp, #0
 8009172:	6078      	str	r0, [r7, #4]
 8009174:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	2b00      	cmp	r3, #0
 800917e:	d106      	bne.n	800918e <poll_tcp+0x22>
 8009180:	4b29      	ldr	r3, [pc, #164]	; (8009228 <poll_tcp+0xbc>)
 8009182:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 8009186:	4929      	ldr	r1, [pc, #164]	; (800922c <poll_tcp+0xc0>)
 8009188:	4829      	ldr	r0, [pc, #164]	; (8009230 <poll_tcp+0xc4>)
 800918a:	f00d fe69 	bl	8016e60 <iprintf>

  if (conn->state == NETCONN_WRITE) {
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	785b      	ldrb	r3, [r3, #1]
 8009192:	2b01      	cmp	r3, #1
 8009194:	d104      	bne.n	80091a0 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8009196:	2101      	movs	r1, #1
 8009198:	68f8      	ldr	r0, [r7, #12]
 800919a:	f000 fe5b 	bl	8009e54 <lwip_netconn_do_writemore>
 800919e:	e016      	b.n	80091ce <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	785b      	ldrb	r3, [r3, #1]
 80091a4:	2b04      	cmp	r3, #4
 80091a6:	d112      	bne.n	80091ce <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	6a1b      	ldr	r3, [r3, #32]
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d00a      	beq.n	80091c6 <poll_tcp+0x5a>
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	6a1b      	ldr	r3, [r3, #32]
 80091b4:	7a5b      	ldrb	r3, [r3, #9]
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d005      	beq.n	80091c6 <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	6a1b      	ldr	r3, [r3, #32]
 80091be:	7a5a      	ldrb	r2, [r3, #9]
 80091c0:	3a01      	subs	r2, #1
 80091c2:	b2d2      	uxtb	r2, r2
 80091c4:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 80091c6:	2101      	movs	r1, #1
 80091c8:	68f8      	ldr	r0, [r7, #12]
 80091ca:	f000 fb3b 	bl	8009844 <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	7f1b      	ldrb	r3, [r3, #28]
 80091d2:	f003 0310 	and.w	r3, r3, #16
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d021      	beq.n	800921e <poll_tcp+0xb2>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	685b      	ldr	r3, [r3, #4]
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d01d      	beq.n	800921e <poll_tcp+0xb2>
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	685b      	ldr	r3, [r3, #4]
 80091e6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80091ea:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 80091ee:	d316      	bcc.n	800921e <poll_tcp+0xb2>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	685b      	ldr	r3, [r3, #4]
 80091f4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 80091f8:	2b04      	cmp	r3, #4
 80091fa:	d810      	bhi.n	800921e <poll_tcp+0xb2>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	7f1b      	ldrb	r3, [r3, #28]
 8009200:	f023 0310 	bic.w	r3, r3, #16
 8009204:	b2da      	uxtb	r2, r3
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800920e:	2b00      	cmp	r3, #0
 8009210:	d005      	beq.n	800921e <poll_tcp+0xb2>
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009216:	2200      	movs	r2, #0
 8009218:	2102      	movs	r1, #2
 800921a:	68f8      	ldr	r0, [r7, #12]
 800921c:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800921e:	2300      	movs	r3, #0
}
 8009220:	4618      	mov	r0, r3
 8009222:	3710      	adds	r7, #16
 8009224:	46bd      	mov	sp, r7
 8009226:	bd80      	pop	{r7, pc}
 8009228:	08018490 	.word	0x08018490
 800922c:	080185e8 	.word	0x080185e8
 8009230:	080184d4 	.word	0x080184d4

08009234 <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 8009234:	b580      	push	{r7, lr}
 8009236:	b086      	sub	sp, #24
 8009238:	af00      	add	r7, sp, #0
 800923a:	60f8      	str	r0, [r7, #12]
 800923c:	60b9      	str	r1, [r7, #8]
 800923e:	4613      	mov	r3, r2
 8009240:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8009246:	697b      	ldr	r3, [r7, #20]
 8009248:	2b00      	cmp	r3, #0
 800924a:	d106      	bne.n	800925a <sent_tcp+0x26>
 800924c:	4b20      	ldr	r3, [pc, #128]	; (80092d0 <sent_tcp+0x9c>)
 800924e:	f240 1293 	movw	r2, #403	; 0x193
 8009252:	4920      	ldr	r1, [pc, #128]	; (80092d4 <sent_tcp+0xa0>)
 8009254:	4820      	ldr	r0, [pc, #128]	; (80092d8 <sent_tcp+0xa4>)
 8009256:	f00d fe03 	bl	8016e60 <iprintf>

  if (conn) {
 800925a:	697b      	ldr	r3, [r7, #20]
 800925c:	2b00      	cmp	r3, #0
 800925e:	d032      	beq.n	80092c6 <sent_tcp+0x92>
    if (conn->state == NETCONN_WRITE) {
 8009260:	697b      	ldr	r3, [r7, #20]
 8009262:	785b      	ldrb	r3, [r3, #1]
 8009264:	2b01      	cmp	r3, #1
 8009266:	d104      	bne.n	8009272 <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8009268:	2101      	movs	r1, #1
 800926a:	6978      	ldr	r0, [r7, #20]
 800926c:	f000 fdf2 	bl	8009e54 <lwip_netconn_do_writemore>
 8009270:	e007      	b.n	8009282 <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 8009272:	697b      	ldr	r3, [r7, #20]
 8009274:	785b      	ldrb	r3, [r3, #1]
 8009276:	2b04      	cmp	r3, #4
 8009278:	d103      	bne.n	8009282 <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800927a:	2101      	movs	r1, #1
 800927c:	6978      	ldr	r0, [r7, #20]
 800927e:	f000 fae1 	bl	8009844 <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8009282:	697b      	ldr	r3, [r7, #20]
 8009284:	685b      	ldr	r3, [r3, #4]
 8009286:	2b00      	cmp	r3, #0
 8009288:	d01d      	beq.n	80092c6 <sent_tcp+0x92>
 800928a:	697b      	ldr	r3, [r7, #20]
 800928c:	685b      	ldr	r3, [r3, #4]
 800928e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8009292:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 8009296:	d316      	bcc.n	80092c6 <sent_tcp+0x92>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8009298:	697b      	ldr	r3, [r7, #20]
 800929a:	685b      	ldr	r3, [r3, #4]
 800929c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 80092a0:	2b04      	cmp	r3, #4
 80092a2:	d810      	bhi.n	80092c6 <sent_tcp+0x92>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 80092a4:	697b      	ldr	r3, [r7, #20]
 80092a6:	7f1b      	ldrb	r3, [r3, #28]
 80092a8:	f023 0310 	bic.w	r3, r3, #16
 80092ac:	b2da      	uxtb	r2, r3
 80092ae:	697b      	ldr	r3, [r7, #20]
 80092b0:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 80092b2:	697b      	ldr	r3, [r7, #20]
 80092b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d005      	beq.n	80092c6 <sent_tcp+0x92>
 80092ba:	697b      	ldr	r3, [r7, #20]
 80092bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092be:	88fa      	ldrh	r2, [r7, #6]
 80092c0:	2102      	movs	r1, #2
 80092c2:	6978      	ldr	r0, [r7, #20]
 80092c4:	4798      	blx	r3
    }
  }

  return ERR_OK;
 80092c6:	2300      	movs	r3, #0
}
 80092c8:	4618      	mov	r0, r3
 80092ca:	3718      	adds	r7, #24
 80092cc:	46bd      	mov	sp, r7
 80092ce:	bd80      	pop	{r7, pc}
 80092d0:	08018490 	.word	0x08018490
 80092d4:	080185e8 	.word	0x080185e8
 80092d8:	080184d4 	.word	0x080184d4

080092dc <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 80092dc:	b580      	push	{r7, lr}
 80092de:	b088      	sub	sp, #32
 80092e0:	af00      	add	r7, sp, #0
 80092e2:	6078      	str	r0, [r7, #4]
 80092e4:	460b      	mov	r3, r1
 80092e6:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 80092ec:	69fb      	ldr	r3, [r7, #28]
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d106      	bne.n	8009300 <err_tcp+0x24>
 80092f2:	4b5f      	ldr	r3, [pc, #380]	; (8009470 <err_tcp+0x194>)
 80092f4:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 80092f8:	495e      	ldr	r1, [pc, #376]	; (8009474 <err_tcp+0x198>)
 80092fa:	485f      	ldr	r0, [pc, #380]	; (8009478 <err_tcp+0x19c>)
 80092fc:	f00d fdb0 	bl	8016e60 <iprintf>

  SYS_ARCH_PROTECT(lev);
 8009300:	f00d fd10 	bl	8016d24 <sys_arch_protect>
 8009304:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 8009306:	69fb      	ldr	r3, [r7, #28]
 8009308:	2200      	movs	r2, #0
 800930a:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 800930c:	69fb      	ldr	r3, [r7, #28]
 800930e:	78fa      	ldrb	r2, [r7, #3]
 8009310:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 8009312:	69fb      	ldr	r3, [r7, #28]
 8009314:	7f1b      	ldrb	r3, [r3, #28]
 8009316:	f043 0301 	orr.w	r3, r3, #1
 800931a:	b2da      	uxtb	r2, r3
 800931c:	69fb      	ldr	r3, [r7, #28]
 800931e:	771a      	strb	r2, [r3, #28]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 8009320:	69fb      	ldr	r3, [r7, #28]
 8009322:	785b      	ldrb	r3, [r3, #1]
 8009324:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 8009326:	69fb      	ldr	r3, [r7, #28]
 8009328:	2200      	movs	r2, #0
 800932a:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 800932c:	69b8      	ldr	r0, [r7, #24]
 800932e:	f00d fd07 	bl	8016d40 <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8009332:	69fb      	ldr	r3, [r7, #28]
 8009334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009336:	2b00      	cmp	r3, #0
 8009338:	d005      	beq.n	8009346 <err_tcp+0x6a>
 800933a:	69fb      	ldr	r3, [r7, #28]
 800933c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800933e:	2200      	movs	r2, #0
 8009340:	2104      	movs	r1, #4
 8009342:	69f8      	ldr	r0, [r7, #28]
 8009344:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8009346:	69fb      	ldr	r3, [r7, #28]
 8009348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800934a:	2b00      	cmp	r3, #0
 800934c:	d005      	beq.n	800935a <err_tcp+0x7e>
 800934e:	69fb      	ldr	r3, [r7, #28]
 8009350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009352:	2200      	movs	r2, #0
 8009354:	2100      	movs	r1, #0
 8009356:	69f8      	ldr	r0, [r7, #28]
 8009358:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800935a:	69fb      	ldr	r3, [r7, #28]
 800935c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800935e:	2b00      	cmp	r3, #0
 8009360:	d005      	beq.n	800936e <err_tcp+0x92>
 8009362:	69fb      	ldr	r3, [r7, #28]
 8009364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009366:	2200      	movs	r2, #0
 8009368:	2102      	movs	r1, #2
 800936a:	69f8      	ldr	r0, [r7, #28]
 800936c:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 800936e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009372:	4618      	mov	r0, r3
 8009374:	f7ff fd8a 	bl	8008e8c <lwip_netconn_err_to_msg>
 8009378:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800937a:	69fb      	ldr	r3, [r7, #28]
 800937c:	3310      	adds	r3, #16
 800937e:	4618      	mov	r0, r3
 8009380:	f00d fbb5 	bl	8016aee <sys_mbox_valid>
 8009384:	4603      	mov	r3, r0
 8009386:	2b00      	cmp	r3, #0
 8009388:	d005      	beq.n	8009396 <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 800938a:	69fb      	ldr	r3, [r7, #28]
 800938c:	3310      	adds	r3, #16
 800938e:	6939      	ldr	r1, [r7, #16]
 8009390:	4618      	mov	r0, r3
 8009392:	f00d fb37 	bl	8016a04 <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 8009396:	69fb      	ldr	r3, [r7, #28]
 8009398:	3314      	adds	r3, #20
 800939a:	4618      	mov	r0, r3
 800939c:	f00d fba7 	bl	8016aee <sys_mbox_valid>
 80093a0:	4603      	mov	r3, r0
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d005      	beq.n	80093b2 <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 80093a6:	69fb      	ldr	r3, [r7, #28]
 80093a8:	3314      	adds	r3, #20
 80093aa:	6939      	ldr	r1, [r7, #16]
 80093ac:	4618      	mov	r0, r3
 80093ae:	f00d fb29 	bl	8016a04 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 80093b2:	7dfb      	ldrb	r3, [r7, #23]
 80093b4:	2b01      	cmp	r3, #1
 80093b6:	d005      	beq.n	80093c4 <err_tcp+0xe8>
 80093b8:	7dfb      	ldrb	r3, [r7, #23]
 80093ba:	2b04      	cmp	r3, #4
 80093bc:	d002      	beq.n	80093c4 <err_tcp+0xe8>
 80093be:	7dfb      	ldrb	r3, [r7, #23]
 80093c0:	2b03      	cmp	r3, #3
 80093c2:	d143      	bne.n	800944c <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 80093c4:	69fb      	ldr	r3, [r7, #28]
 80093c6:	7f1b      	ldrb	r3, [r3, #28]
 80093c8:	f003 0304 	and.w	r3, r3, #4
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	bf14      	ite	ne
 80093d0:	2301      	movne	r3, #1
 80093d2:	2300      	moveq	r3, #0
 80093d4:	b2db      	uxtb	r3, r3
 80093d6:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 80093d8:	69fb      	ldr	r3, [r7, #28]
 80093da:	7f1b      	ldrb	r3, [r3, #28]
 80093dc:	f023 0304 	bic.w	r3, r3, #4
 80093e0:	b2da      	uxtb	r2, r3
 80093e2:	69fb      	ldr	r3, [r7, #28]
 80093e4:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d13b      	bne.n	8009464 <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 80093ec:	69fb      	ldr	r3, [r7, #28]
 80093ee:	6a1b      	ldr	r3, [r3, #32]
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d106      	bne.n	8009402 <err_tcp+0x126>
 80093f4:	4b1e      	ldr	r3, [pc, #120]	; (8009470 <err_tcp+0x194>)
 80093f6:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 80093fa:	4920      	ldr	r1, [pc, #128]	; (800947c <err_tcp+0x1a0>)
 80093fc:	481e      	ldr	r0, [pc, #120]	; (8009478 <err_tcp+0x19c>)
 80093fe:	f00d fd2f 	bl	8016e60 <iprintf>
      if (old_state == NETCONN_CLOSE) {
 8009402:	7dfb      	ldrb	r3, [r7, #23]
 8009404:	2b04      	cmp	r3, #4
 8009406:	d104      	bne.n	8009412 <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 8009408:	69fb      	ldr	r3, [r7, #28]
 800940a:	6a1b      	ldr	r3, [r3, #32]
 800940c:	2200      	movs	r2, #0
 800940e:	711a      	strb	r2, [r3, #4]
 8009410:	e003      	b.n	800941a <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 8009412:	69fb      	ldr	r3, [r7, #28]
 8009414:	6a1b      	ldr	r3, [r3, #32]
 8009416:	78fa      	ldrb	r2, [r7, #3]
 8009418:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800941a:	69fb      	ldr	r3, [r7, #28]
 800941c:	6a1b      	ldr	r3, [r3, #32]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	330c      	adds	r3, #12
 8009422:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 8009424:	68b8      	ldr	r0, [r7, #8]
 8009426:	f00d fbf3 	bl	8016c10 <sys_sem_valid>
 800942a:	4603      	mov	r3, r0
 800942c:	2b00      	cmp	r3, #0
 800942e:	d106      	bne.n	800943e <err_tcp+0x162>
 8009430:	4b0f      	ldr	r3, [pc, #60]	; (8009470 <err_tcp+0x194>)
 8009432:	f240 12ef 	movw	r2, #495	; 0x1ef
 8009436:	4912      	ldr	r1, [pc, #72]	; (8009480 <err_tcp+0x1a4>)
 8009438:	480f      	ldr	r0, [pc, #60]	; (8009478 <err_tcp+0x19c>)
 800943a:	f00d fd11 	bl	8016e60 <iprintf>
      conn->current_msg = NULL;
 800943e:	69fb      	ldr	r3, [r7, #28]
 8009440:	2200      	movs	r2, #0
 8009442:	621a      	str	r2, [r3, #32]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 8009444:	68b8      	ldr	r0, [r7, #8]
 8009446:	f00d fbc9 	bl	8016bdc <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 800944a:	e00b      	b.n	8009464 <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 800944c:	69fb      	ldr	r3, [r7, #28]
 800944e:	6a1b      	ldr	r3, [r3, #32]
 8009450:	2b00      	cmp	r3, #0
 8009452:	d008      	beq.n	8009466 <err_tcp+0x18a>
 8009454:	4b06      	ldr	r3, [pc, #24]	; (8009470 <err_tcp+0x194>)
 8009456:	f240 12f7 	movw	r2, #503	; 0x1f7
 800945a:	490a      	ldr	r1, [pc, #40]	; (8009484 <err_tcp+0x1a8>)
 800945c:	4806      	ldr	r0, [pc, #24]	; (8009478 <err_tcp+0x19c>)
 800945e:	f00d fcff 	bl	8016e60 <iprintf>
  }
}
 8009462:	e000      	b.n	8009466 <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
 8009464:	bf00      	nop
}
 8009466:	bf00      	nop
 8009468:	3720      	adds	r7, #32
 800946a:	46bd      	mov	sp, r7
 800946c:	bd80      	pop	{r7, pc}
 800946e:	bf00      	nop
 8009470:	08018490 	.word	0x08018490
 8009474:	080185e8 	.word	0x080185e8
 8009478:	080184d4 	.word	0x080184d4
 800947c:	080185f8 	.word	0x080185f8
 8009480:	08018614 	.word	0x08018614
 8009484:	08018630 	.word	0x08018630

08009488 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 8009488:	b580      	push	{r7, lr}
 800948a:	b084      	sub	sp, #16
 800948c:	af00      	add	r7, sp, #0
 800948e:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	685b      	ldr	r3, [r3, #4]
 8009494:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 8009496:	6879      	ldr	r1, [r7, #4]
 8009498:	68f8      	ldr	r0, [r7, #12]
 800949a:	f005 fb6d 	bl	800eb78 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 800949e:	490a      	ldr	r1, [pc, #40]	; (80094c8 <setup_tcp+0x40>)
 80094a0:	68f8      	ldr	r0, [r7, #12]
 80094a2:	f005 fb7b 	bl	800eb9c <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 80094a6:	4909      	ldr	r1, [pc, #36]	; (80094cc <setup_tcp+0x44>)
 80094a8:	68f8      	ldr	r0, [r7, #12]
 80094aa:	f005 fb99 	bl	800ebe0 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 80094ae:	2202      	movs	r2, #2
 80094b0:	4907      	ldr	r1, [pc, #28]	; (80094d0 <setup_tcp+0x48>)
 80094b2:	68f8      	ldr	r0, [r7, #12]
 80094b4:	f005 fbf0 	bl	800ec98 <tcp_poll>
  tcp_err(pcb, err_tcp);
 80094b8:	4906      	ldr	r1, [pc, #24]	; (80094d4 <setup_tcp+0x4c>)
 80094ba:	68f8      	ldr	r0, [r7, #12]
 80094bc:	f005 fbb2 	bl	800ec24 <tcp_err>
}
 80094c0:	bf00      	nop
 80094c2:	3710      	adds	r7, #16
 80094c4:	46bd      	mov	sp, r7
 80094c6:	bd80      	pop	{r7, pc}
 80094c8:	08009061 	.word	0x08009061
 80094cc:	08009235 	.word	0x08009235
 80094d0:	0800916d 	.word	0x0800916d
 80094d4:	080092dd 	.word	0x080092dd

080094d8 <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 80094d8:	b590      	push	{r4, r7, lr}
 80094da:	b085      	sub	sp, #20
 80094dc:	af00      	add	r7, sp, #0
 80094de:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 80094e0:	2300      	movs	r3, #0
 80094e2:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	685b      	ldr	r3, [r3, #4]
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d006      	beq.n	80094fc <pcb_new+0x24>
 80094ee:	4b2b      	ldr	r3, [pc, #172]	; (800959c <pcb_new+0xc4>)
 80094f0:	f240 2265 	movw	r2, #613	; 0x265
 80094f4:	492a      	ldr	r1, [pc, #168]	; (80095a0 <pcb_new+0xc8>)
 80094f6:	482b      	ldr	r0, [pc, #172]	; (80095a4 <pcb_new+0xcc>)
 80094f8:	f00d fcb2 	bl	8016e60 <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	781b      	ldrb	r3, [r3, #0]
 8009502:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009506:	2b10      	cmp	r3, #16
 8009508:	d022      	beq.n	8009550 <pcb_new+0x78>
 800950a:	2b20      	cmp	r3, #32
 800950c:	d133      	bne.n	8009576 <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	681c      	ldr	r4, [r3, #0]
 8009512:	7bfb      	ldrb	r3, [r7, #15]
 8009514:	4618      	mov	r0, r3
 8009516:	f00a fe04 	bl	8014122 <udp_new_ip_type>
 800951a:	4603      	mov	r3, r0
 800951c:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	685b      	ldr	r3, [r3, #4]
 8009524:	2b00      	cmp	r3, #0
 8009526:	d02a      	beq.n	800957e <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	781b      	ldrb	r3, [r3, #0]
 800952e:	2b22      	cmp	r3, #34	; 0x22
 8009530:	d104      	bne.n	800953c <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	685b      	ldr	r3, [r3, #4]
 8009538:	2201      	movs	r2, #1
 800953a:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	6858      	ldr	r0, [r3, #4]
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	461a      	mov	r2, r3
 8009548:	4917      	ldr	r1, [pc, #92]	; (80095a8 <pcb_new+0xd0>)
 800954a:	f00a fd71 	bl	8014030 <udp_recv>
      }
      break;
 800954e:	e016      	b.n	800957e <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	681c      	ldr	r4, [r3, #0]
 8009554:	7bfb      	ldrb	r3, [r7, #15]
 8009556:	4618      	mov	r0, r3
 8009558:	f005 fb00 	bl	800eb5c <tcp_new_ip_type>
 800955c:	4603      	mov	r3, r0
 800955e:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	685b      	ldr	r3, [r3, #4]
 8009566:	2b00      	cmp	r3, #0
 8009568:	d00b      	beq.n	8009582 <pcb_new+0xaa>
        setup_tcp(msg->conn);
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	4618      	mov	r0, r3
 8009570:	f7ff ff8a 	bl	8009488 <setup_tcp>
      }
      break;
 8009574:	e005      	b.n	8009582 <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	22fa      	movs	r2, #250	; 0xfa
 800957a:	711a      	strb	r2, [r3, #4]
      return;
 800957c:	e00a      	b.n	8009594 <pcb_new+0xbc>
      break;
 800957e:	bf00      	nop
 8009580:	e000      	b.n	8009584 <pcb_new+0xac>
      break;
 8009582:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	685b      	ldr	r3, [r3, #4]
 800958a:	2b00      	cmp	r3, #0
 800958c:	d102      	bne.n	8009594 <pcb_new+0xbc>
    msg->err = ERR_MEM;
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	22ff      	movs	r2, #255	; 0xff
 8009592:	711a      	strb	r2, [r3, #4]
  }
}
 8009594:	3714      	adds	r7, #20
 8009596:	46bd      	mov	sp, r7
 8009598:	bd90      	pop	{r4, r7, pc}
 800959a:	bf00      	nop
 800959c:	08018490 	.word	0x08018490
 80095a0:	08018674 	.word	0x08018674
 80095a4:	080184d4 	.word	0x080184d4
 80095a8:	08008f65 	.word	0x08008f65

080095ac <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 80095ac:	b580      	push	{r7, lr}
 80095ae:	b084      	sub	sp, #16
 80095b0:	af00      	add	r7, sp, #0
 80095b2:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	2200      	movs	r2, #0
 80095bc:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	685b      	ldr	r3, [r3, #4]
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d102      	bne.n	80095ce <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 80095c8:	68f8      	ldr	r0, [r7, #12]
 80095ca:	f7ff ff85 	bl	80094d8 <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 80095ce:	bf00      	nop
 80095d0:	3710      	adds	r7, #16
 80095d2:	46bd      	mov	sp, r7
 80095d4:	bd80      	pop	{r7, pc}
	...

080095d8 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 80095d8:	b580      	push	{r7, lr}
 80095da:	b086      	sub	sp, #24
 80095dc:	af00      	add	r7, sp, #0
 80095de:	4603      	mov	r3, r0
 80095e0:	6039      	str	r1, [r7, #0]
 80095e2:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 80095e4:	2300      	movs	r3, #0
 80095e6:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 80095e8:	2007      	movs	r0, #7
 80095ea:	f002 fdeb 	bl	800c1c4 <memp_malloc>
 80095ee:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d101      	bne.n	80095fa <netconn_alloc+0x22>
    return NULL;
 80095f6:	2300      	movs	r3, #0
 80095f8:	e052      	b.n	80096a0 <netconn_alloc+0xc8>
  }

  conn->pending_err = ERR_OK;
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	2200      	movs	r2, #0
 80095fe:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	79fa      	ldrb	r2, [r7, #7]
 8009604:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	2200      	movs	r2, #0
 800960a:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 800960c:	79fb      	ldrb	r3, [r7, #7]
 800960e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009612:	2b10      	cmp	r3, #16
 8009614:	d004      	beq.n	8009620 <netconn_alloc+0x48>
 8009616:	2b20      	cmp	r3, #32
 8009618:	d105      	bne.n	8009626 <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 800961a:	2306      	movs	r3, #6
 800961c:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 800961e:	e00a      	b.n	8009636 <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 8009620:	2306      	movs	r3, #6
 8009622:	617b      	str	r3, [r7, #20]
      break;
 8009624:	e007      	b.n	8009636 <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 8009626:	4b20      	ldr	r3, [pc, #128]	; (80096a8 <netconn_alloc+0xd0>)
 8009628:	f240 22e5 	movw	r2, #741	; 0x2e5
 800962c:	491f      	ldr	r1, [pc, #124]	; (80096ac <netconn_alloc+0xd4>)
 800962e:	4820      	ldr	r0, [pc, #128]	; (80096b0 <netconn_alloc+0xd8>)
 8009630:	f00d fc16 	bl	8016e60 <iprintf>
      goto free_and_return;
 8009634:	e02f      	b.n	8009696 <netconn_alloc+0xbe>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	3310      	adds	r3, #16
 800963a:	6979      	ldr	r1, [r7, #20]
 800963c:	4618      	mov	r0, r3
 800963e:	f00d f9ad 	bl	801699c <sys_mbox_new>
 8009642:	4603      	mov	r3, r0
 8009644:	2b00      	cmp	r3, #0
 8009646:	d125      	bne.n	8009694 <netconn_alloc+0xbc>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	330c      	adds	r3, #12
 800964c:	2100      	movs	r1, #0
 800964e:	4618      	mov	r0, r3
 8009650:	f00d fa6b 	bl	8016b2a <sys_sem_new>
 8009654:	4603      	mov	r3, r0
 8009656:	2b00      	cmp	r3, #0
 8009658:	d005      	beq.n	8009666 <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	3310      	adds	r3, #16
 800965e:	4618      	mov	r0, r3
 8009660:	f00d f9be 	bl	80169e0 <sys_mbox_free>
    goto free_and_return;
 8009664:	e017      	b.n	8009696 <netconn_alloc+0xbe>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	3314      	adds	r3, #20
 800966a:	4618      	mov	r0, r3
 800966c:	f00d fa50 	bl	8016b10 <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	2200      	movs	r2, #0
 8009674:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	f04f 32ff 	mov.w	r2, #4294967295
 800967c:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	683a      	ldr	r2, [r7, #0]
 8009682:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCP
  conn->current_msg  = NULL;
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	2200      	movs	r2, #0
 8009688:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	7cfa      	ldrb	r2, [r7, #19]
 800968e:	771a      	strb	r2, [r3, #28]
  return conn;
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	e005      	b.n	80096a0 <netconn_alloc+0xc8>
    goto free_and_return;
 8009694:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 8009696:	68f9      	ldr	r1, [r7, #12]
 8009698:	2007      	movs	r0, #7
 800969a:	f002 fde5 	bl	800c268 <memp_free>
  return NULL;
 800969e:	2300      	movs	r3, #0
}
 80096a0:	4618      	mov	r0, r3
 80096a2:	3718      	adds	r7, #24
 80096a4:	46bd      	mov	sp, r7
 80096a6:	bd80      	pop	{r7, pc}
 80096a8:	08018490 	.word	0x08018490
 80096ac:	08018694 	.word	0x08018694
 80096b0:	080184d4 	.word	0x080184d4

080096b4 <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 80096b4:	b580      	push	{r7, lr}
 80096b6:	b082      	sub	sp, #8
 80096b8:	af00      	add	r7, sp, #0
 80096ba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	685b      	ldr	r3, [r3, #4]
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d006      	beq.n	80096d2 <netconn_free+0x1e>
 80096c4:	4b1b      	ldr	r3, [pc, #108]	; (8009734 <netconn_free+0x80>)
 80096c6:	f44f 7247 	mov.w	r2, #796	; 0x31c
 80096ca:	491b      	ldr	r1, [pc, #108]	; (8009738 <netconn_free+0x84>)
 80096cc:	481b      	ldr	r0, [pc, #108]	; (800973c <netconn_free+0x88>)
 80096ce:	f00d fbc7 	bl	8016e60 <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	3310      	adds	r3, #16
 80096d6:	4618      	mov	r0, r3
 80096d8:	f00d fa09 	bl	8016aee <sys_mbox_valid>
 80096dc:	4603      	mov	r3, r0
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d006      	beq.n	80096f0 <netconn_free+0x3c>
 80096e2:	4b14      	ldr	r3, [pc, #80]	; (8009734 <netconn_free+0x80>)
 80096e4:	f44f 7249 	mov.w	r2, #804	; 0x324
 80096e8:	4915      	ldr	r1, [pc, #84]	; (8009740 <netconn_free+0x8c>)
 80096ea:	4814      	ldr	r0, [pc, #80]	; (800973c <netconn_free+0x88>)
 80096ec:	f00d fbb8 	bl	8016e60 <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	3314      	adds	r3, #20
 80096f4:	4618      	mov	r0, r3
 80096f6:	f00d f9fa 	bl	8016aee <sys_mbox_valid>
 80096fa:	4603      	mov	r3, r0
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d006      	beq.n	800970e <netconn_free+0x5a>
 8009700:	4b0c      	ldr	r3, [pc, #48]	; (8009734 <netconn_free+0x80>)
 8009702:	f240 3227 	movw	r2, #807	; 0x327
 8009706:	490f      	ldr	r1, [pc, #60]	; (8009744 <netconn_free+0x90>)
 8009708:	480c      	ldr	r0, [pc, #48]	; (800973c <netconn_free+0x88>)
 800970a:	f00d fba9 	bl	8016e60 <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	330c      	adds	r3, #12
 8009712:	4618      	mov	r0, r3
 8009714:	f00d fa6f 	bl	8016bf6 <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	330c      	adds	r3, #12
 800971c:	4618      	mov	r0, r3
 800971e:	f00d fa88 	bl	8016c32 <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 8009722:	6879      	ldr	r1, [r7, #4]
 8009724:	2007      	movs	r0, #7
 8009726:	f002 fd9f 	bl	800c268 <memp_free>
}
 800972a:	bf00      	nop
 800972c:	3708      	adds	r7, #8
 800972e:	46bd      	mov	sp, r7
 8009730:	bd80      	pop	{r7, pc}
 8009732:	bf00      	nop
 8009734:	08018490 	.word	0x08018490
 8009738:	080186bc 	.word	0x080186bc
 800973c:	080184d4 	.word	0x080184d4
 8009740:	080186ec 	.word	0x080186ec
 8009744:	08018728 	.word	0x08018728

08009748 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 8009748:	b580      	push	{r7, lr}
 800974a:	b086      	sub	sp, #24
 800974c:	af00      	add	r7, sp, #0
 800974e:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	3310      	adds	r3, #16
 8009754:	4618      	mov	r0, r3
 8009756:	f00d f9ca 	bl	8016aee <sys_mbox_valid>
 800975a:	4603      	mov	r3, r0
 800975c:	2b00      	cmp	r3, #0
 800975e:	d02f      	beq.n	80097c0 <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8009760:	e018      	b.n	8009794 <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	781b      	ldrb	r3, [r3, #0]
 8009766:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800976a:	2b10      	cmp	r3, #16
 800976c:	d10e      	bne.n	800978c <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 800976e:	693b      	ldr	r3, [r7, #16]
 8009770:	f107 020f 	add.w	r2, r7, #15
 8009774:	4611      	mov	r1, r2
 8009776:	4618      	mov	r0, r3
 8009778:	f7ff fbba 	bl	8008ef0 <lwip_netconn_is_err_msg>
 800977c:	4603      	mov	r3, r0
 800977e:	2b00      	cmp	r3, #0
 8009780:	d108      	bne.n	8009794 <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 8009782:	693b      	ldr	r3, [r7, #16]
 8009784:	4618      	mov	r0, r3
 8009786:	f003 fc41 	bl	800d00c <pbuf_free>
 800978a:	e003      	b.n	8009794 <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 800978c:	693b      	ldr	r3, [r7, #16]
 800978e:	4618      	mov	r0, r3
 8009790:	f000 fee8 	bl	800a564 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	3310      	adds	r3, #16
 8009798:	f107 0210 	add.w	r2, r7, #16
 800979c:	4611      	mov	r1, r2
 800979e:	4618      	mov	r0, r3
 80097a0:	f00d f989 	bl	8016ab6 <sys_arch_mbox_tryfetch>
 80097a4:	4603      	mov	r3, r0
 80097a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097aa:	d1da      	bne.n	8009762 <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	3310      	adds	r3, #16
 80097b0:	4618      	mov	r0, r3
 80097b2:	f00d f915 	bl	80169e0 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	3310      	adds	r3, #16
 80097ba:	4618      	mov	r0, r3
 80097bc:	f00d f9a8 	bl	8016b10 <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	3314      	adds	r3, #20
 80097c4:	4618      	mov	r0, r3
 80097c6:	f00d f992 	bl	8016aee <sys_mbox_valid>
 80097ca:	4603      	mov	r3, r0
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d034      	beq.n	800983a <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 80097d0:	e01d      	b.n	800980e <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 80097d2:	693b      	ldr	r3, [r7, #16]
 80097d4:	f107 020e 	add.w	r2, r7, #14
 80097d8:	4611      	mov	r1, r2
 80097da:	4618      	mov	r0, r3
 80097dc:	f7ff fb88 	bl	8008ef0 <lwip_netconn_is_err_msg>
 80097e0:	4603      	mov	r3, r0
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d113      	bne.n	800980e <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 80097e6:	693b      	ldr	r3, [r7, #16]
 80097e8:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 80097ea:	6978      	ldr	r0, [r7, #20]
 80097ec:	f7ff ffac 	bl	8009748 <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 80097f0:	697b      	ldr	r3, [r7, #20]
 80097f2:	685b      	ldr	r3, [r3, #4]
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d007      	beq.n	8009808 <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 80097f8:	697b      	ldr	r3, [r7, #20]
 80097fa:	685b      	ldr	r3, [r3, #4]
 80097fc:	4618      	mov	r0, r3
 80097fe:	f004 f9fb 	bl	800dbf8 <tcp_abort>
            newconn->pcb.tcp = NULL;
 8009802:	697b      	ldr	r3, [r7, #20]
 8009804:	2200      	movs	r2, #0
 8009806:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 8009808:	6978      	ldr	r0, [r7, #20]
 800980a:	f7ff ff53 	bl	80096b4 <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	3314      	adds	r3, #20
 8009812:	f107 0210 	add.w	r2, r7, #16
 8009816:	4611      	mov	r1, r2
 8009818:	4618      	mov	r0, r3
 800981a:	f00d f94c 	bl	8016ab6 <sys_arch_mbox_tryfetch>
 800981e:	4603      	mov	r3, r0
 8009820:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009824:	d1d5      	bne.n	80097d2 <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	3314      	adds	r3, #20
 800982a:	4618      	mov	r0, r3
 800982c:	f00d f8d8 	bl	80169e0 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	3314      	adds	r3, #20
 8009834:	4618      	mov	r0, r3
 8009836:	f00d f96b 	bl	8016b10 <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 800983a:	bf00      	nop
 800983c:	3718      	adds	r7, #24
 800983e:	46bd      	mov	sp, r7
 8009840:	bd80      	pop	{r7, pc}
	...

08009844 <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8009844:	b580      	push	{r7, lr}
 8009846:	b086      	sub	sp, #24
 8009848:	af00      	add	r7, sp, #0
 800984a:	6078      	str	r0, [r7, #4]
 800984c:	460b      	mov	r3, r1
 800984e:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 8009850:	2300      	movs	r3, #0
 8009852:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	2b00      	cmp	r3, #0
 8009858:	d106      	bne.n	8009868 <lwip_netconn_do_close_internal+0x24>
 800985a:	4ba1      	ldr	r3, [pc, #644]	; (8009ae0 <lwip_netconn_do_close_internal+0x29c>)
 800985c:	f240 32a2 	movw	r2, #930	; 0x3a2
 8009860:	49a0      	ldr	r1, [pc, #640]	; (8009ae4 <lwip_netconn_do_close_internal+0x2a0>)
 8009862:	48a1      	ldr	r0, [pc, #644]	; (8009ae8 <lwip_netconn_do_close_internal+0x2a4>)
 8009864:	f00d fafc 	bl	8016e60 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	781b      	ldrb	r3, [r3, #0]
 800986c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009870:	2b10      	cmp	r3, #16
 8009872:	d006      	beq.n	8009882 <lwip_netconn_do_close_internal+0x3e>
 8009874:	4b9a      	ldr	r3, [pc, #616]	; (8009ae0 <lwip_netconn_do_close_internal+0x29c>)
 8009876:	f240 32a3 	movw	r2, #931	; 0x3a3
 800987a:	499c      	ldr	r1, [pc, #624]	; (8009aec <lwip_netconn_do_close_internal+0x2a8>)
 800987c:	489a      	ldr	r0, [pc, #616]	; (8009ae8 <lwip_netconn_do_close_internal+0x2a4>)
 800987e:	f00d faef 	bl	8016e60 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	785b      	ldrb	r3, [r3, #1]
 8009886:	2b04      	cmp	r3, #4
 8009888:	d006      	beq.n	8009898 <lwip_netconn_do_close_internal+0x54>
 800988a:	4b95      	ldr	r3, [pc, #596]	; (8009ae0 <lwip_netconn_do_close_internal+0x29c>)
 800988c:	f44f 7269 	mov.w	r2, #932	; 0x3a4
 8009890:	4997      	ldr	r1, [pc, #604]	; (8009af0 <lwip_netconn_do_close_internal+0x2ac>)
 8009892:	4895      	ldr	r0, [pc, #596]	; (8009ae8 <lwip_netconn_do_close_internal+0x2a4>)
 8009894:	f00d fae4 	bl	8016e60 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	685b      	ldr	r3, [r3, #4]
 800989c:	2b00      	cmp	r3, #0
 800989e:	d106      	bne.n	80098ae <lwip_netconn_do_close_internal+0x6a>
 80098a0:	4b8f      	ldr	r3, [pc, #572]	; (8009ae0 <lwip_netconn_do_close_internal+0x29c>)
 80098a2:	f240 32a5 	movw	r2, #933	; 0x3a5
 80098a6:	4993      	ldr	r1, [pc, #588]	; (8009af4 <lwip_netconn_do_close_internal+0x2b0>)
 80098a8:	488f      	ldr	r0, [pc, #572]	; (8009ae8 <lwip_netconn_do_close_internal+0x2a4>)
 80098aa:	f00d fad9 	bl	8016e60 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	6a1b      	ldr	r3, [r3, #32]
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d106      	bne.n	80098c4 <lwip_netconn_do_close_internal+0x80>
 80098b6:	4b8a      	ldr	r3, [pc, #552]	; (8009ae0 <lwip_netconn_do_close_internal+0x29c>)
 80098b8:	f240 32a6 	movw	r2, #934	; 0x3a6
 80098bc:	498e      	ldr	r1, [pc, #568]	; (8009af8 <lwip_netconn_do_close_internal+0x2b4>)
 80098be:	488a      	ldr	r0, [pc, #552]	; (8009ae8 <lwip_netconn_do_close_internal+0x2a4>)
 80098c0:	f00d face 	bl	8016e60 <iprintf>

  tpcb = conn->pcb.tcp;
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	685b      	ldr	r3, [r3, #4]
 80098c8:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	6a1b      	ldr	r3, [r3, #32]
 80098ce:	7a1b      	ldrb	r3, [r3, #8]
 80098d0:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 80098d2:	7bfb      	ldrb	r3, [r7, #15]
 80098d4:	f003 0301 	and.w	r3, r3, #1
 80098d8:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 80098da:	7bfb      	ldrb	r3, [r7, #15]
 80098dc:	f003 0302 	and.w	r3, r3, #2
 80098e0:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 80098e2:	7bfb      	ldrb	r3, [r7, #15]
 80098e4:	2b03      	cmp	r3, #3
 80098e6:	d102      	bne.n	80098ee <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 80098e8:	2301      	movs	r3, #1
 80098ea:	75bb      	strb	r3, [r7, #22]
 80098ec:	e01f      	b.n	800992e <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 80098ee:	7bbb      	ldrb	r3, [r7, #14]
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d00e      	beq.n	8009912 <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 80098f4:	693b      	ldr	r3, [r7, #16]
 80098f6:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 80098f8:	2b05      	cmp	r3, #5
 80098fa:	d007      	beq.n	800990c <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 80098fc:	693b      	ldr	r3, [r7, #16]
 80098fe:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 8009900:	2b06      	cmp	r3, #6
 8009902:	d003      	beq.n	800990c <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 8009904:	693b      	ldr	r3, [r7, #16]
 8009906:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 8009908:	2b08      	cmp	r3, #8
 800990a:	d102      	bne.n	8009912 <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 800990c:	2301      	movs	r3, #1
 800990e:	75bb      	strb	r3, [r7, #22]
 8009910:	e00d      	b.n	800992e <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 8009912:	7b7b      	ldrb	r3, [r7, #13]
 8009914:	2b00      	cmp	r3, #0
 8009916:	d008      	beq.n	800992a <lwip_netconn_do_close_internal+0xe6>
 8009918:	693b      	ldr	r3, [r7, #16]
 800991a:	8b5b      	ldrh	r3, [r3, #26]
 800991c:	f003 0310 	and.w	r3, r3, #16
 8009920:	2b00      	cmp	r3, #0
 8009922:	d002      	beq.n	800992a <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 8009924:	2301      	movs	r3, #1
 8009926:	75bb      	strb	r3, [r7, #22]
 8009928:	e001      	b.n	800992e <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 800992a:	2300      	movs	r3, #0
 800992c:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 800992e:	7dbb      	ldrb	r3, [r7, #22]
 8009930:	2b00      	cmp	r3, #0
 8009932:	d003      	beq.n	800993c <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 8009934:	2100      	movs	r1, #0
 8009936:	6938      	ldr	r0, [r7, #16]
 8009938:	f005 f91e 	bl	800eb78 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 800993c:	693b      	ldr	r3, [r7, #16]
 800993e:	7d1b      	ldrb	r3, [r3, #20]
 8009940:	2b01      	cmp	r3, #1
 8009942:	d104      	bne.n	800994e <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 8009944:	2100      	movs	r1, #0
 8009946:	6938      	ldr	r0, [r7, #16]
 8009948:	f005 f98e 	bl	800ec68 <tcp_accept>
 800994c:	e01d      	b.n	800998a <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 800994e:	7bbb      	ldrb	r3, [r7, #14]
 8009950:	2b00      	cmp	r3, #0
 8009952:	d007      	beq.n	8009964 <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 8009954:	2100      	movs	r1, #0
 8009956:	6938      	ldr	r0, [r7, #16]
 8009958:	f005 f920 	bl	800eb9c <tcp_recv>
      tcp_accept(tpcb, NULL);
 800995c:	2100      	movs	r1, #0
 800995e:	6938      	ldr	r0, [r7, #16]
 8009960:	f005 f982 	bl	800ec68 <tcp_accept>
    }
    if (shut_tx) {
 8009964:	7b7b      	ldrb	r3, [r7, #13]
 8009966:	2b00      	cmp	r3, #0
 8009968:	d003      	beq.n	8009972 <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 800996a:	2100      	movs	r1, #0
 800996c:	6938      	ldr	r0, [r7, #16]
 800996e:	f005 f937 	bl	800ebe0 <tcp_sent>
    }
    if (shut_close) {
 8009972:	7dbb      	ldrb	r3, [r7, #22]
 8009974:	2b00      	cmp	r3, #0
 8009976:	d008      	beq.n	800998a <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 8009978:	2200      	movs	r2, #0
 800997a:	2100      	movs	r1, #0
 800997c:	6938      	ldr	r0, [r7, #16]
 800997e:	f005 f98b 	bl	800ec98 <tcp_poll>
      tcp_err(tpcb, NULL);
 8009982:	2100      	movs	r1, #0
 8009984:	6938      	ldr	r0, [r7, #16]
 8009986:	f005 f94d 	bl	800ec24 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 800998a:	7dbb      	ldrb	r3, [r7, #22]
 800998c:	2b00      	cmp	r3, #0
 800998e:	d005      	beq.n	800999c <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 8009990:	6938      	ldr	r0, [r7, #16]
 8009992:	f003 ffed 	bl	800d970 <tcp_close>
 8009996:	4603      	mov	r3, r0
 8009998:	75fb      	strb	r3, [r7, #23]
 800999a:	e007      	b.n	80099ac <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 800999c:	7bbb      	ldrb	r3, [r7, #14]
 800999e:	7b7a      	ldrb	r2, [r7, #13]
 80099a0:	4619      	mov	r1, r3
 80099a2:	6938      	ldr	r0, [r7, #16]
 80099a4:	f004 f810 	bl	800d9c8 <tcp_shutdown>
 80099a8:	4603      	mov	r3, r0
 80099aa:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 80099ac:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d102      	bne.n	80099ba <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 80099b4:	2301      	movs	r3, #1
 80099b6:	757b      	strb	r3, [r7, #21]
 80099b8:	e016      	b.n	80099e8 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 80099ba:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80099be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099c2:	d10f      	bne.n	80099e4 <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	6a1b      	ldr	r3, [r3, #32]
 80099c8:	7a5b      	ldrb	r3, [r3, #9]
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d10c      	bne.n	80099e8 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 80099ce:	2301      	movs	r3, #1
 80099d0:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 80099d2:	7dbb      	ldrb	r3, [r7, #22]
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d007      	beq.n	80099e8 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 80099d8:	6938      	ldr	r0, [r7, #16]
 80099da:	f004 f90d 	bl	800dbf8 <tcp_abort>
          err = ERR_OK;
 80099de:	2300      	movs	r3, #0
 80099e0:	75fb      	strb	r3, [r7, #23]
 80099e2:	e001      	b.n	80099e8 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 80099e4:	2301      	movs	r3, #1
 80099e6:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 80099e8:	7d7b      	ldrb	r3, [r7, #21]
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d044      	beq.n	8009a78 <lwip_netconn_do_close_internal+0x234>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	6a1b      	ldr	r3, [r3, #32]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	330c      	adds	r3, #12
 80099f6:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	6a1b      	ldr	r3, [r3, #32]
 80099fc:	7dfa      	ldrb	r2, [r7, #23]
 80099fe:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	2200      	movs	r2, #0
 8009a04:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	2200      	movs	r2, #0
 8009a0a:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 8009a0c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d129      	bne.n	8009a68 <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 8009a14:	7dbb      	ldrb	r3, [r7, #22]
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d00c      	beq.n	8009a34 <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	2200      	movs	r2, #0
 8009a1e:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d005      	beq.n	8009a34 <lwip_netconn_do_close_internal+0x1f0>
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a2c:	2200      	movs	r2, #0
 8009a2e:	2104      	movs	r1, #4
 8009a30:	6878      	ldr	r0, [r7, #4]
 8009a32:	4798      	blx	r3
      }
      if (shut_rx) {
 8009a34:	7bbb      	ldrb	r3, [r7, #14]
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d009      	beq.n	8009a4e <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d005      	beq.n	8009a4e <lwip_netconn_do_close_internal+0x20a>
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a46:	2200      	movs	r2, #0
 8009a48:	2100      	movs	r1, #0
 8009a4a:	6878      	ldr	r0, [r7, #4]
 8009a4c:	4798      	blx	r3
      }
      if (shut_tx) {
 8009a4e:	7b7b      	ldrb	r3, [r7, #13]
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d009      	beq.n	8009a68 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d005      	beq.n	8009a68 <lwip_netconn_do_close_internal+0x224>
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a60:	2200      	movs	r2, #0
 8009a62:	2102      	movs	r1, #2
 8009a64:	6878      	ldr	r0, [r7, #4]
 8009a66:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 8009a68:	78fb      	ldrb	r3, [r7, #3]
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d002      	beq.n	8009a74 <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 8009a6e:	68b8      	ldr	r0, [r7, #8]
 8009a70:	f00d f8b4 	bl	8016bdc <sys_sem_signal>
    }
    return ERR_OK;
 8009a74:	2300      	movs	r3, #0
 8009a76:	e02e      	b.n	8009ad6 <lwip_netconn_do_close_internal+0x292>
  }
  if (!close_finished) {
 8009a78:	7d7b      	ldrb	r3, [r7, #21]
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d11e      	bne.n	8009abc <lwip_netconn_do_close_internal+0x278>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 8009a7e:	693b      	ldr	r3, [r7, #16]
 8009a80:	7d1b      	ldrb	r3, [r3, #20]
 8009a82:	2b01      	cmp	r3, #1
 8009a84:	d106      	bne.n	8009a94 <lwip_netconn_do_close_internal+0x250>
 8009a86:	4b16      	ldr	r3, [pc, #88]	; (8009ae0 <lwip_netconn_do_close_internal+0x29c>)
 8009a88:	f240 4241 	movw	r2, #1089	; 0x441
 8009a8c:	491b      	ldr	r1, [pc, #108]	; (8009afc <lwip_netconn_do_close_internal+0x2b8>)
 8009a8e:	4816      	ldr	r0, [pc, #88]	; (8009ae8 <lwip_netconn_do_close_internal+0x2a4>)
 8009a90:	f00d f9e6 	bl	8016e60 <iprintf>
    if (shut_tx) {
 8009a94:	7b7b      	ldrb	r3, [r7, #13]
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d003      	beq.n	8009aa2 <lwip_netconn_do_close_internal+0x25e>
      tcp_sent(tpcb, sent_tcp);
 8009a9a:	4919      	ldr	r1, [pc, #100]	; (8009b00 <lwip_netconn_do_close_internal+0x2bc>)
 8009a9c:	6938      	ldr	r0, [r7, #16]
 8009a9e:	f005 f89f 	bl	800ebe0 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 8009aa2:	2201      	movs	r2, #1
 8009aa4:	4917      	ldr	r1, [pc, #92]	; (8009b04 <lwip_netconn_do_close_internal+0x2c0>)
 8009aa6:	6938      	ldr	r0, [r7, #16]
 8009aa8:	f005 f8f6 	bl	800ec98 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 8009aac:	4916      	ldr	r1, [pc, #88]	; (8009b08 <lwip_netconn_do_close_internal+0x2c4>)
 8009aae:	6938      	ldr	r0, [r7, #16]
 8009ab0:	f005 f8b8 	bl	800ec24 <tcp_err>
    tcp_arg(tpcb, conn);
 8009ab4:	6879      	ldr	r1, [r7, #4]
 8009ab6:	6938      	ldr	r0, [r7, #16]
 8009ab8:	f005 f85e 	bl	800eb78 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 8009abc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d106      	bne.n	8009ad2 <lwip_netconn_do_close_internal+0x28e>
 8009ac4:	4b06      	ldr	r3, [pc, #24]	; (8009ae0 <lwip_netconn_do_close_internal+0x29c>)
 8009ac6:	f240 424d 	movw	r2, #1101	; 0x44d
 8009aca:	4910      	ldr	r1, [pc, #64]	; (8009b0c <lwip_netconn_do_close_internal+0x2c8>)
 8009acc:	4806      	ldr	r0, [pc, #24]	; (8009ae8 <lwip_netconn_do_close_internal+0x2a4>)
 8009ace:	f00d f9c7 	bl	8016e60 <iprintf>
  return err;
 8009ad2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009ad6:	4618      	mov	r0, r3
 8009ad8:	3718      	adds	r7, #24
 8009ada:	46bd      	mov	sp, r7
 8009adc:	bd80      	pop	{r7, pc}
 8009ade:	bf00      	nop
 8009ae0:	08018490 	.word	0x08018490
 8009ae4:	08018764 	.word	0x08018764
 8009ae8:	080184d4 	.word	0x080184d4
 8009aec:	08018774 	.word	0x08018774
 8009af0:	08018794 	.word	0x08018794
 8009af4:	080187b8 	.word	0x080187b8
 8009af8:	080185f8 	.word	0x080185f8
 8009afc:	080187cc 	.word	0x080187cc
 8009b00:	08009235 	.word	0x08009235
 8009b04:	0800916d 	.word	0x0800916d
 8009b08:	080092dd 	.word	0x080092dd
 8009b0c:	080187f0 	.word	0x080187f0

08009b10 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 8009b10:	b580      	push	{r7, lr}
 8009b12:	b084      	sub	sp, #16
 8009b14:	af00      	add	r7, sp, #0
 8009b16:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	785b      	ldrb	r3, [r3, #1]
 8009b22:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 8009b24:	7afb      	ldrb	r3, [r7, #11]
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d00d      	beq.n	8009b46 <lwip_netconn_do_delconn+0x36>
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	781b      	ldrb	r3, [r3, #0]
 8009b30:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009b34:	2b10      	cmp	r3, #16
 8009b36:	d006      	beq.n	8009b46 <lwip_netconn_do_delconn+0x36>
 8009b38:	4b60      	ldr	r3, [pc, #384]	; (8009cbc <lwip_netconn_do_delconn+0x1ac>)
 8009b3a:	f240 425f 	movw	r2, #1119	; 0x45f
 8009b3e:	4960      	ldr	r1, [pc, #384]	; (8009cc0 <lwip_netconn_do_delconn+0x1b0>)
 8009b40:	4860      	ldr	r0, [pc, #384]	; (8009cc4 <lwip_netconn_do_delconn+0x1b4>)
 8009b42:	f00d f98d 	bl	8016e60 <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 8009b46:	7afb      	ldrb	r3, [r7, #11]
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d005      	beq.n	8009b58 <lwip_netconn_do_delconn+0x48>
 8009b4c:	7afb      	ldrb	r3, [r7, #11]
 8009b4e:	2b02      	cmp	r3, #2
 8009b50:	d002      	beq.n	8009b58 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 8009b52:	7afb      	ldrb	r3, [r7, #11]
 8009b54:	2b03      	cmp	r3, #3
 8009b56:	d109      	bne.n	8009b6c <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 8009b58:	7afb      	ldrb	r3, [r7, #11]
 8009b5a:	2b03      	cmp	r3, #3
 8009b5c:	d10a      	bne.n	8009b74 <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	7f1b      	ldrb	r3, [r3, #28]
 8009b64:	f003 0304 	and.w	r3, r3, #4
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d103      	bne.n	8009b74 <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	22fb      	movs	r2, #251	; 0xfb
 8009b70:	711a      	strb	r2, [r3, #4]
 8009b72:	e097      	b.n	8009ca4 <lwip_netconn_do_delconn+0x194>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 8009b74:	7afb      	ldrb	r3, [r7, #11]
 8009b76:	2b03      	cmp	r3, #3
 8009b78:	d10d      	bne.n	8009b96 <lwip_netconn_do_delconn+0x86>
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	7f1b      	ldrb	r3, [r3, #28]
 8009b80:	f003 0304 	and.w	r3, r3, #4
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d106      	bne.n	8009b96 <lwip_netconn_do_delconn+0x86>
 8009b88:	4b4c      	ldr	r3, [pc, #304]	; (8009cbc <lwip_netconn_do_delconn+0x1ac>)
 8009b8a:	f240 427b 	movw	r2, #1147	; 0x47b
 8009b8e:	494e      	ldr	r1, [pc, #312]	; (8009cc8 <lwip_netconn_do_delconn+0x1b8>)
 8009b90:	484c      	ldr	r0, [pc, #304]	; (8009cc4 <lwip_netconn_do_delconn+0x1b4>)
 8009b92:	f00d f965 	bl	8016e60 <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	2200      	movs	r2, #0
 8009b9a:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	4618      	mov	r0, r3
 8009ba2:	f7ff fdd1 	bl	8009748 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	685b      	ldr	r3, [r3, #4]
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d05f      	beq.n	8009c70 <lwip_netconn_do_delconn+0x160>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	781b      	ldrb	r3, [r3, #0]
 8009bb6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009bba:	2b10      	cmp	r3, #16
 8009bbc:	d00e      	beq.n	8009bdc <lwip_netconn_do_delconn+0xcc>
 8009bbe:	2b20      	cmp	r3, #32
 8009bc0:	d000      	beq.n	8009bc4 <lwip_netconn_do_delconn+0xb4>
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
#endif /* LWIP_TCP */
        default:
          break;
 8009bc2:	e051      	b.n	8009c68 <lwip_netconn_do_delconn+0x158>
          msg->conn->pcb.udp->recv_arg = NULL;
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	685b      	ldr	r3, [r3, #4]
 8009bca:	2200      	movs	r2, #0
 8009bcc:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	685b      	ldr	r3, [r3, #4]
 8009bd4:	4618      	mov	r0, r3
 8009bd6:	f00a fa4b 	bl	8014070 <udp_remove>
          break;
 8009bda:	e045      	b.n	8009c68 <lwip_netconn_do_delconn+0x158>
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	6a1b      	ldr	r3, [r3, #32]
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d006      	beq.n	8009bf4 <lwip_netconn_do_delconn+0xe4>
 8009be6:	4b35      	ldr	r3, [pc, #212]	; (8009cbc <lwip_netconn_do_delconn+0x1ac>)
 8009be8:	f240 4294 	movw	r2, #1172	; 0x494
 8009bec:	4937      	ldr	r1, [pc, #220]	; (8009ccc <lwip_netconn_do_delconn+0x1bc>)
 8009bee:	4835      	ldr	r0, [pc, #212]	; (8009cc4 <lwip_netconn_do_delconn+0x1b4>)
 8009bf0:	f00d f936 	bl	8016e60 <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	2204      	movs	r2, #4
 8009bfa:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	2203      	movs	r2, #3
 8009c00:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	68fa      	ldr	r2, [r7, #12]
 8009c08:	621a      	str	r2, [r3, #32]
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	2100      	movs	r1, #0
 8009c10:	4618      	mov	r0, r3
 8009c12:	f7ff fe17 	bl	8009844 <lwip_netconn_do_close_internal>
 8009c16:	4603      	mov	r3, r0
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d04a      	beq.n	8009cb2 <lwip_netconn_do_delconn+0x1a2>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	785b      	ldrb	r3, [r3, #1]
 8009c22:	2b04      	cmp	r3, #4
 8009c24:	d006      	beq.n	8009c34 <lwip_netconn_do_delconn+0x124>
 8009c26:	4b25      	ldr	r3, [pc, #148]	; (8009cbc <lwip_netconn_do_delconn+0x1ac>)
 8009c28:	f240 429a 	movw	r2, #1178	; 0x49a
 8009c2c:	4928      	ldr	r1, [pc, #160]	; (8009cd0 <lwip_netconn_do_delconn+0x1c0>)
 8009c2e:	4825      	ldr	r0, [pc, #148]	; (8009cc4 <lwip_netconn_do_delconn+0x1b4>)
 8009c30:	f00d f916 	bl	8016e60 <iprintf>
            UNLOCK_TCPIP_CORE();
 8009c34:	4827      	ldr	r0, [pc, #156]	; (8009cd4 <lwip_netconn_do_delconn+0x1c4>)
 8009c36:	f00d f842 	bl	8016cbe <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	330c      	adds	r3, #12
 8009c40:	2100      	movs	r1, #0
 8009c42:	4618      	mov	r0, r3
 8009c44:	f00c ff99 	bl	8016b7a <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 8009c48:	4822      	ldr	r0, [pc, #136]	; (8009cd4 <lwip_netconn_do_delconn+0x1c4>)
 8009c4a:	f00d f829 	bl	8016ca0 <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	785b      	ldrb	r3, [r3, #1]
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d02c      	beq.n	8009cb2 <lwip_netconn_do_delconn+0x1a2>
 8009c58:	4b18      	ldr	r3, [pc, #96]	; (8009cbc <lwip_netconn_do_delconn+0x1ac>)
 8009c5a:	f240 429e 	movw	r2, #1182	; 0x49e
 8009c5e:	491c      	ldr	r1, [pc, #112]	; (8009cd0 <lwip_netconn_do_delconn+0x1c0>)
 8009c60:	4818      	ldr	r0, [pc, #96]	; (8009cc4 <lwip_netconn_do_delconn+0x1b4>)
 8009c62:	f00d f8fd 	bl	8016e60 <iprintf>
          return;
 8009c66:	e024      	b.n	8009cb2 <lwip_netconn_do_delconn+0x1a2>
      }
      msg->conn->pcb.tcp = NULL;
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	2200      	movs	r2, #0
 8009c6e:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d007      	beq.n	8009c8a <lwip_netconn_do_delconn+0x17a>
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c80:	68fa      	ldr	r2, [r7, #12]
 8009c82:	6810      	ldr	r0, [r2, #0]
 8009c84:	2200      	movs	r2, #0
 8009c86:	2100      	movs	r1, #0
 8009c88:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d007      	beq.n	8009ca4 <lwip_netconn_do_delconn+0x194>
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c9a:	68fa      	ldr	r2, [r7, #12]
 8009c9c:	6810      	ldr	r0, [r2, #0]
 8009c9e:	2200      	movs	r2, #0
 8009ca0:	2102      	movs	r1, #2
 8009ca2:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	330c      	adds	r3, #12
 8009caa:	4618      	mov	r0, r3
 8009cac:	f00c ffb0 	bl	8016c10 <sys_sem_valid>
 8009cb0:	e000      	b.n	8009cb4 <lwip_netconn_do_delconn+0x1a4>
          return;
 8009cb2:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 8009cb4:	3710      	adds	r7, #16
 8009cb6:	46bd      	mov	sp, r7
 8009cb8:	bd80      	pop	{r7, pc}
 8009cba:	bf00      	nop
 8009cbc:	08018490 	.word	0x08018490
 8009cc0:	08018800 	.word	0x08018800
 8009cc4:	080184d4 	.word	0x080184d4
 8009cc8:	08018814 	.word	0x08018814
 8009ccc:	08018834 	.word	0x08018834
 8009cd0:	08018850 	.word	0x08018850
 8009cd4:	20007b24 	.word	0x20007b24

08009cd8 <lwip_netconn_do_bind>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 8009cd8:	b580      	push	{r7, lr}
 8009cda:	b084      	sub	sp, #16
 8009cdc:	af00      	add	r7, sp, #0
 8009cde:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	60bb      	str	r3, [r7, #8]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 8009ce4:	68bb      	ldr	r3, [r7, #8]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	685b      	ldr	r3, [r3, #4]
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d026      	beq.n	8009d3c <lwip_netconn_do_bind+0x64>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8009cee:	68bb      	ldr	r3, [r7, #8]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	781b      	ldrb	r3, [r3, #0]
 8009cf4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009cf8:	2b10      	cmp	r3, #16
 8009cfa:	d00e      	beq.n	8009d1a <lwip_netconn_do_bind+0x42>
 8009cfc:	2b20      	cmp	r3, #32
 8009cfe:	d119      	bne.n	8009d34 <lwip_netconn_do_bind+0x5c>
        err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8009d00:	68bb      	ldr	r3, [r7, #8]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	6858      	ldr	r0, [r3, #4]
 8009d06:	68bb      	ldr	r3, [r7, #8]
 8009d08:	6899      	ldr	r1, [r3, #8]
 8009d0a:	68bb      	ldr	r3, [r7, #8]
 8009d0c:	899b      	ldrh	r3, [r3, #12]
 8009d0e:	461a      	mov	r2, r3
 8009d10:	f00a f906 	bl	8013f20 <udp_bind>
 8009d14:	4603      	mov	r3, r0
 8009d16:	73fb      	strb	r3, [r7, #15]
        break;
 8009d18:	e012      	b.n	8009d40 <lwip_netconn_do_bind+0x68>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8009d1a:	68bb      	ldr	r3, [r7, #8]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	6858      	ldr	r0, [r3, #4]
 8009d20:	68bb      	ldr	r3, [r7, #8]
 8009d22:	6899      	ldr	r1, [r3, #8]
 8009d24:	68bb      	ldr	r3, [r7, #8]
 8009d26:	899b      	ldrh	r3, [r3, #12]
 8009d28:	461a      	mov	r2, r3
 8009d2a:	f003 ff71 	bl	800dc10 <tcp_bind>
 8009d2e:	4603      	mov	r3, r0
 8009d30:	73fb      	strb	r3, [r7, #15]
        break;
 8009d32:	e005      	b.n	8009d40 <lwip_netconn_do_bind+0x68>
#endif /* LWIP_TCP */
      default:
        err = ERR_VAL;
 8009d34:	23fa      	movs	r3, #250	; 0xfa
 8009d36:	73fb      	strb	r3, [r7, #15]
        break;
 8009d38:	bf00      	nop
 8009d3a:	e001      	b.n	8009d40 <lwip_netconn_do_bind+0x68>
    }
  } else {
    err = ERR_VAL;
 8009d3c:	23fa      	movs	r3, #250	; 0xfa
 8009d3e:	73fb      	strb	r3, [r7, #15]
  }
  msg->err = err;
 8009d40:	68bb      	ldr	r3, [r7, #8]
 8009d42:	7bfa      	ldrb	r2, [r7, #15]
 8009d44:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 8009d46:	bf00      	nop
 8009d48:	3710      	adds	r7, #16
 8009d4a:	46bd      	mov	sp, r7
 8009d4c:	bd80      	pop	{r7, pc}

08009d4e <lwip_netconn_do_send>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_send(void *m)
{
 8009d4e:	b580      	push	{r7, lr}
 8009d50:	b084      	sub	sp, #16
 8009d52:	af00      	add	r7, sp, #0
 8009d54:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 8009d5a:	68bb      	ldr	r3, [r7, #8]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	4618      	mov	r0, r3
 8009d60:	f7ff f878 	bl	8008e54 <netconn_err>
 8009d64:	4603      	mov	r3, r0
 8009d66:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 8009d68:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d135      	bne.n	8009ddc <lwip_netconn_do_send+0x8e>
    if (msg->conn->pcb.tcp != NULL) {
 8009d70:	68bb      	ldr	r3, [r7, #8]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	685b      	ldr	r3, [r3, #4]
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d02e      	beq.n	8009dd8 <lwip_netconn_do_send+0x8a>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8009d7a:	68bb      	ldr	r3, [r7, #8]
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	781b      	ldrb	r3, [r3, #0]
 8009d80:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009d84:	2b20      	cmp	r3, #32
 8009d86:	d123      	bne.n	8009dd0 <lwip_netconn_do_send+0x82>
            err = udp_sendto_chksum(msg->conn->pcb.udp, msg->msg.b->p,
                                    &msg->msg.b->addr, msg->msg.b->port,
                                    msg->msg.b->flags & NETBUF_FLAG_CHKSUM, msg->msg.b->toport_chksum);
          }
#else /* LWIP_CHECKSUM_ON_COPY */
          if (ip_addr_isany_val(msg->msg.b->addr) || IP_IS_ANY_TYPE_VAL(msg->msg.b->addr)) {
 8009d88:	68bb      	ldr	r3, [r7, #8]
 8009d8a:	689b      	ldr	r3, [r3, #8]
 8009d8c:	689b      	ldr	r3, [r3, #8]
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d10c      	bne.n	8009dac <lwip_netconn_do_send+0x5e>
            err = udp_send(msg->conn->pcb.udp, msg->msg.b->p);
 8009d92:	68bb      	ldr	r3, [r7, #8]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	685a      	ldr	r2, [r3, #4]
 8009d98:	68bb      	ldr	r3, [r7, #8]
 8009d9a:	689b      	ldr	r3, [r3, #8]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	4619      	mov	r1, r3
 8009da0:	4610      	mov	r0, r2
 8009da2:	f009 fed3 	bl	8013b4c <udp_send>
 8009da6:	4603      	mov	r3, r0
 8009da8:	73fb      	strb	r3, [r7, #15]
          } else {
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
          }
#endif /* LWIP_CHECKSUM_ON_COPY */
          break;
 8009daa:	e017      	b.n	8009ddc <lwip_netconn_do_send+0x8e>
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
 8009dac:	68bb      	ldr	r3, [r7, #8]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	6858      	ldr	r0, [r3, #4]
 8009db2:	68bb      	ldr	r3, [r7, #8]
 8009db4:	689b      	ldr	r3, [r3, #8]
 8009db6:	6819      	ldr	r1, [r3, #0]
 8009db8:	68bb      	ldr	r3, [r7, #8]
 8009dba:	689b      	ldr	r3, [r3, #8]
 8009dbc:	f103 0208 	add.w	r2, r3, #8
 8009dc0:	68bb      	ldr	r3, [r7, #8]
 8009dc2:	689b      	ldr	r3, [r3, #8]
 8009dc4:	899b      	ldrh	r3, [r3, #12]
 8009dc6:	f009 fef5 	bl	8013bb4 <udp_sendto>
 8009dca:	4603      	mov	r3, r0
 8009dcc:	73fb      	strb	r3, [r7, #15]
          break;
 8009dce:	e005      	b.n	8009ddc <lwip_netconn_do_send+0x8e>
#endif /* LWIP_UDP */
        default:
          err = ERR_CONN;
 8009dd0:	23f5      	movs	r3, #245	; 0xf5
 8009dd2:	73fb      	strb	r3, [r7, #15]
          break;
 8009dd4:	bf00      	nop
 8009dd6:	e001      	b.n	8009ddc <lwip_netconn_do_send+0x8e>
      }
    } else {
      err = ERR_CONN;
 8009dd8:	23f5      	movs	r3, #245	; 0xf5
 8009dda:	73fb      	strb	r3, [r7, #15]
    }
  }
  msg->err = err;
 8009ddc:	68bb      	ldr	r3, [r7, #8]
 8009dde:	7bfa      	ldrb	r2, [r7, #15]
 8009de0:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 8009de2:	bf00      	nop
 8009de4:	3710      	adds	r7, #16
 8009de6:	46bd      	mov	sp, r7
 8009de8:	bd80      	pop	{r7, pc}

08009dea <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 8009dea:	b580      	push	{r7, lr}
 8009dec:	b086      	sub	sp, #24
 8009dee:	af00      	add	r7, sp, #0
 8009df0:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 8009df6:	693b      	ldr	r3, [r7, #16]
 8009df8:	2200      	movs	r2, #0
 8009dfa:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 8009dfc:	693b      	ldr	r3, [r7, #16]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	685b      	ldr	r3, [r3, #4]
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d022      	beq.n	8009e4c <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8009e06:	693b      	ldr	r3, [r7, #16]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	781b      	ldrb	r3, [r3, #0]
 8009e0c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009e10:	2b10      	cmp	r3, #16
 8009e12:	d11b      	bne.n	8009e4c <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 8009e14:	693b      	ldr	r3, [r7, #16]
 8009e16:	689b      	ldr	r3, [r3, #8]
 8009e18:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 8009e1a:	697b      	ldr	r3, [r7, #20]
 8009e1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009e20:	d202      	bcs.n	8009e28 <lwip_netconn_do_recv+0x3e>
 8009e22:	697b      	ldr	r3, [r7, #20]
 8009e24:	b29b      	uxth	r3, r3
 8009e26:	e001      	b.n	8009e2c <lwip_netconn_do_recv+0x42>
 8009e28:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009e2c:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 8009e2e:	693b      	ldr	r3, [r7, #16]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	685b      	ldr	r3, [r3, #4]
 8009e34:	89fa      	ldrh	r2, [r7, #14]
 8009e36:	4611      	mov	r1, r2
 8009e38:	4618      	mov	r0, r3
 8009e3a:	f003 ffdb 	bl	800ddf4 <tcp_recved>
        remaining -= recved;
 8009e3e:	89fb      	ldrh	r3, [r7, #14]
 8009e40:	697a      	ldr	r2, [r7, #20]
 8009e42:	1ad3      	subs	r3, r2, r3
 8009e44:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 8009e46:	697b      	ldr	r3, [r7, #20]
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d1e6      	bne.n	8009e1a <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 8009e4c:	bf00      	nop
 8009e4e:	3718      	adds	r7, #24
 8009e50:	46bd      	mov	sp, r7
 8009e52:	bd80      	pop	{r7, pc}

08009e54 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8009e54:	b580      	push	{r7, lr}
 8009e56:	b088      	sub	sp, #32
 8009e58:	af00      	add	r7, sp, #0
 8009e5a:	6078      	str	r0, [r7, #4]
 8009e5c:	460b      	mov	r3, r1
 8009e5e:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 8009e60:	2300      	movs	r3, #0
 8009e62:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d106      	bne.n	8009e78 <lwip_netconn_do_writemore+0x24>
 8009e6a:	4b96      	ldr	r3, [pc, #600]	; (800a0c4 <lwip_netconn_do_writemore+0x270>)
 8009e6c:	f240 6273 	movw	r2, #1651	; 0x673
 8009e70:	4995      	ldr	r1, [pc, #596]	; (800a0c8 <lwip_netconn_do_writemore+0x274>)
 8009e72:	4896      	ldr	r0, [pc, #600]	; (800a0cc <lwip_netconn_do_writemore+0x278>)
 8009e74:	f00c fff4 	bl	8016e60 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	785b      	ldrb	r3, [r3, #1]
 8009e7c:	2b01      	cmp	r3, #1
 8009e7e:	d006      	beq.n	8009e8e <lwip_netconn_do_writemore+0x3a>
 8009e80:	4b90      	ldr	r3, [pc, #576]	; (800a0c4 <lwip_netconn_do_writemore+0x270>)
 8009e82:	f240 6274 	movw	r2, #1652	; 0x674
 8009e86:	4992      	ldr	r1, [pc, #584]	; (800a0d0 <lwip_netconn_do_writemore+0x27c>)
 8009e88:	4890      	ldr	r0, [pc, #576]	; (800a0cc <lwip_netconn_do_writemore+0x278>)
 8009e8a:	f00c ffe9 	bl	8016e60 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	6a1b      	ldr	r3, [r3, #32]
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d106      	bne.n	8009ea4 <lwip_netconn_do_writemore+0x50>
 8009e96:	4b8b      	ldr	r3, [pc, #556]	; (800a0c4 <lwip_netconn_do_writemore+0x270>)
 8009e98:	f240 6275 	movw	r2, #1653	; 0x675
 8009e9c:	498d      	ldr	r1, [pc, #564]	; (800a0d4 <lwip_netconn_do_writemore+0x280>)
 8009e9e:	488b      	ldr	r0, [pc, #556]	; (800a0cc <lwip_netconn_do_writemore+0x278>)
 8009ea0:	f00c ffde 	bl	8016e60 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	685b      	ldr	r3, [r3, #4]
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d106      	bne.n	8009eba <lwip_netconn_do_writemore+0x66>
 8009eac:	4b85      	ldr	r3, [pc, #532]	; (800a0c4 <lwip_netconn_do_writemore+0x270>)
 8009eae:	f240 6276 	movw	r2, #1654	; 0x676
 8009eb2:	4989      	ldr	r1, [pc, #548]	; (800a0d8 <lwip_netconn_do_writemore+0x284>)
 8009eb4:	4885      	ldr	r0, [pc, #532]	; (800a0cc <lwip_netconn_do_writemore+0x278>)
 8009eb6:	f00c ffd3 	bl	8016e60 <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	6a1b      	ldr	r3, [r3, #32]
 8009ebe:	699a      	ldr	r2, [r3, #24]
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	6a1b      	ldr	r3, [r3, #32]
 8009ec4:	695b      	ldr	r3, [r3, #20]
 8009ec6:	429a      	cmp	r2, r3
 8009ec8:	d306      	bcc.n	8009ed8 <lwip_netconn_do_writemore+0x84>
 8009eca:	4b7e      	ldr	r3, [pc, #504]	; (800a0c4 <lwip_netconn_do_writemore+0x270>)
 8009ecc:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 8009ed0:	4982      	ldr	r1, [pc, #520]	; (800a0dc <lwip_netconn_do_writemore+0x288>)
 8009ed2:	487e      	ldr	r0, [pc, #504]	; (800a0cc <lwip_netconn_do_writemore+0x278>)
 8009ed4:	f00c ffc4 	bl	8016e60 <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	6a1b      	ldr	r3, [r3, #32]
 8009edc:	899b      	ldrh	r3, [r3, #12]
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d106      	bne.n	8009ef0 <lwip_netconn_do_writemore+0x9c>
 8009ee2:	4b78      	ldr	r3, [pc, #480]	; (800a0c4 <lwip_netconn_do_writemore+0x270>)
 8009ee4:	f240 6279 	movw	r2, #1657	; 0x679
 8009ee8:	497d      	ldr	r1, [pc, #500]	; (800a0e0 <lwip_netconn_do_writemore+0x28c>)
 8009eea:	4878      	ldr	r0, [pc, #480]	; (800a0cc <lwip_netconn_do_writemore+0x278>)
 8009eec:	f00c ffb8 	bl	8016e60 <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	6a1b      	ldr	r3, [r3, #32]
 8009ef4:	7f1b      	ldrb	r3, [r3, #28]
 8009ef6:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	7f1b      	ldrb	r3, [r3, #28]
 8009efc:	f003 0302 	and.w	r3, r3, #2
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d104      	bne.n	8009f0e <lwip_netconn_do_writemore+0xba>
 8009f04:	7ebb      	ldrb	r3, [r7, #26]
 8009f06:	f003 0304 	and.w	r3, r3, #4
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d001      	beq.n	8009f12 <lwip_netconn_do_writemore+0xbe>
 8009f0e:	2301      	movs	r3, #1
 8009f10:	e000      	b.n	8009f14 <lwip_netconn_do_writemore+0xc0>
 8009f12:	2300      	movs	r3, #0
 8009f14:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	6a1b      	ldr	r3, [r3, #32]
 8009f1a:	689b      	ldr	r3, [r3, #8]
 8009f1c:	681a      	ldr	r2, [r3, #0]
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	6a1b      	ldr	r3, [r3, #32]
 8009f22:	691b      	ldr	r3, [r3, #16]
 8009f24:	4413      	add	r3, r2
 8009f26:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	6a1b      	ldr	r3, [r3, #32]
 8009f2c:	689b      	ldr	r3, [r3, #8]
 8009f2e:	685a      	ldr	r2, [r3, #4]
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	6a1b      	ldr	r3, [r3, #32]
 8009f34:	691b      	ldr	r3, [r3, #16]
 8009f36:	1ad3      	subs	r3, r2, r3
 8009f38:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 8009f3a:	693b      	ldr	r3, [r7, #16]
 8009f3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009f40:	d307      	bcc.n	8009f52 <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 8009f42:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009f46:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 8009f48:	7ebb      	ldrb	r3, [r7, #26]
 8009f4a:	f043 0302 	orr.w	r3, r3, #2
 8009f4e:	76bb      	strb	r3, [r7, #26]
 8009f50:	e001      	b.n	8009f56 <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 8009f52:	693b      	ldr	r3, [r7, #16]
 8009f54:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	685b      	ldr	r3, [r3, #4]
 8009f5a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8009f5e:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 8009f60:	89fa      	ldrh	r2, [r7, #14]
 8009f62:	8bbb      	ldrh	r3, [r7, #28]
 8009f64:	429a      	cmp	r2, r3
 8009f66:	d216      	bcs.n	8009f96 <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 8009f68:	89fb      	ldrh	r3, [r7, #14]
 8009f6a:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 8009f6c:	7e3b      	ldrb	r3, [r7, #24]
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d00d      	beq.n	8009f8e <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 8009f72:	8bbb      	ldrh	r3, [r7, #28]
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d10e      	bne.n	8009f96 <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	6a1b      	ldr	r3, [r3, #32]
 8009f7c:	699b      	ldr	r3, [r3, #24]
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d102      	bne.n	8009f88 <lwip_netconn_do_writemore+0x134>
 8009f82:	f06f 0306 	mvn.w	r3, #6
 8009f86:	e000      	b.n	8009f8a <lwip_netconn_do_writemore+0x136>
 8009f88:	2300      	movs	r3, #0
 8009f8a:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 8009f8c:	e07d      	b.n	800a08a <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 8009f8e:	7ebb      	ldrb	r3, [r7, #26]
 8009f90:	f043 0302 	orr.w	r3, r3, #2
 8009f94:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	6a1b      	ldr	r3, [r3, #32]
 8009f9a:	691a      	ldr	r2, [r3, #16]
 8009f9c:	8bbb      	ldrh	r3, [r7, #28]
 8009f9e:	441a      	add	r2, r3
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	6a1b      	ldr	r3, [r3, #32]
 8009fa4:	689b      	ldr	r3, [r3, #8]
 8009fa6:	685b      	ldr	r3, [r3, #4]
 8009fa8:	429a      	cmp	r2, r3
 8009faa:	d906      	bls.n	8009fba <lwip_netconn_do_writemore+0x166>
 8009fac:	4b45      	ldr	r3, [pc, #276]	; (800a0c4 <lwip_netconn_do_writemore+0x270>)
 8009fae:	f240 62a4 	movw	r2, #1700	; 0x6a4
 8009fb2:	494c      	ldr	r1, [pc, #304]	; (800a0e4 <lwip_netconn_do_writemore+0x290>)
 8009fb4:	4845      	ldr	r0, [pc, #276]	; (800a0cc <lwip_netconn_do_writemore+0x278>)
 8009fb6:	f00c ff53 	bl	8016e60 <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 8009fba:	8bbb      	ldrh	r3, [r7, #28]
 8009fbc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009fc0:	4293      	cmp	r3, r2
 8009fc2:	d103      	bne.n	8009fcc <lwip_netconn_do_writemore+0x178>
 8009fc4:	693b      	ldr	r3, [r7, #16]
 8009fc6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009fca:	d209      	bcs.n	8009fe0 <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 8009fcc:	693b      	ldr	r3, [r7, #16]
 8009fce:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 8009fd0:	8bba      	ldrh	r2, [r7, #28]
 8009fd2:	429a      	cmp	r2, r3
 8009fd4:	d10b      	bne.n	8009fee <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	6a1b      	ldr	r3, [r3, #32]
 8009fda:	899b      	ldrh	r3, [r3, #12]
 8009fdc:	2b01      	cmp	r3, #1
 8009fde:	d906      	bls.n	8009fee <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 8009fe0:	2301      	movs	r3, #1
 8009fe2:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 8009fe4:	7ebb      	ldrb	r3, [r7, #26]
 8009fe6:	f043 0302 	orr.w	r3, r3, #2
 8009fea:	76bb      	strb	r3, [r7, #26]
 8009fec:	e001      	b.n	8009ff2 <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 8009fee:	2300      	movs	r3, #0
 8009ff0:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	6858      	ldr	r0, [r3, #4]
 8009ff6:	7ebb      	ldrb	r3, [r7, #26]
 8009ff8:	8bba      	ldrh	r2, [r7, #28]
 8009ffa:	6979      	ldr	r1, [r7, #20]
 8009ffc:	f007 fcf8 	bl	80119f0 <tcp_write>
 800a000:	4603      	mov	r3, r0
 800a002:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 800a004:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d12c      	bne.n	800a066 <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	6a1b      	ldr	r3, [r3, #32]
 800a010:	6999      	ldr	r1, [r3, #24]
 800a012:	8bba      	ldrh	r2, [r7, #28]
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	6a1b      	ldr	r3, [r3, #32]
 800a018:	440a      	add	r2, r1
 800a01a:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	6a1b      	ldr	r3, [r3, #32]
 800a020:	6919      	ldr	r1, [r3, #16]
 800a022:	8bba      	ldrh	r2, [r7, #28]
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	6a1b      	ldr	r3, [r3, #32]
 800a028:	440a      	add	r2, r1
 800a02a:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	6a1b      	ldr	r3, [r3, #32]
 800a030:	691a      	ldr	r2, [r3, #16]
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	6a1b      	ldr	r3, [r3, #32]
 800a036:	689b      	ldr	r3, [r3, #8]
 800a038:	685b      	ldr	r3, [r3, #4]
 800a03a:	429a      	cmp	r2, r3
 800a03c:	d113      	bne.n	800a066 <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	6a1b      	ldr	r3, [r3, #32]
 800a042:	899a      	ldrh	r2, [r3, #12]
 800a044:	3a01      	subs	r2, #1
 800a046:	b292      	uxth	r2, r2
 800a048:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	6a1b      	ldr	r3, [r3, #32]
 800a04e:	899b      	ldrh	r3, [r3, #12]
 800a050:	2b00      	cmp	r3, #0
 800a052:	d008      	beq.n	800a066 <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	6a1b      	ldr	r3, [r3, #32]
 800a058:	689a      	ldr	r2, [r3, #8]
 800a05a:	3208      	adds	r2, #8
 800a05c:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	6a1b      	ldr	r3, [r3, #32]
 800a062:	2200      	movs	r2, #0
 800a064:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 800a066:	7e7b      	ldrb	r3, [r7, #25]
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d004      	beq.n	800a076 <lwip_netconn_do_writemore+0x222>
 800a06c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a070:	2b00      	cmp	r3, #0
 800a072:	f43f af50 	beq.w	8009f16 <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 800a076:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d004      	beq.n	800a088 <lwip_netconn_do_writemore+0x234>
 800a07e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a082:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a086:	d146      	bne.n	800a116 <lwip_netconn_do_writemore+0x2c2>
err_mem:
 800a088:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 800a08a:	7e3b      	ldrb	r3, [r7, #24]
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d02b      	beq.n	800a0e8 <lwip_netconn_do_writemore+0x294>
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	6a1b      	ldr	r3, [r3, #32]
 800a094:	699a      	ldr	r2, [r3, #24]
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	6a1b      	ldr	r3, [r3, #32]
 800a09a:	695b      	ldr	r3, [r3, #20]
 800a09c:	429a      	cmp	r2, r3
 800a09e:	d223      	bcs.n	800a0e8 <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d005      	beq.n	800a0b4 <lwip_netconn_do_writemore+0x260>
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0ac:	2200      	movs	r2, #0
 800a0ae:	2103      	movs	r1, #3
 800a0b0:	6878      	ldr	r0, [r7, #4]
 800a0b2:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	7f1b      	ldrb	r3, [r3, #28]
 800a0b8:	f043 0310 	orr.w	r3, r3, #16
 800a0bc:	b2da      	uxtb	r2, r3
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	771a      	strb	r2, [r3, #28]
 800a0c2:	e028      	b.n	800a116 <lwip_netconn_do_writemore+0x2c2>
 800a0c4:	08018490 	.word	0x08018490
 800a0c8:	080185e8 	.word	0x080185e8
 800a0cc:	080184d4 	.word	0x080184d4
 800a0d0:	080188f0 	.word	0x080188f0
 800a0d4:	080185f8 	.word	0x080185f8
 800a0d8:	08018910 	.word	0x08018910
 800a0dc:	08018928 	.word	0x08018928
 800a0e0:	08018968 	.word	0x08018968
 800a0e4:	08018990 	.word	0x08018990
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	685b      	ldr	r3, [r3, #4]
 800a0ec:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800a0f0:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800a0f4:	d305      	bcc.n	800a102 <lwip_netconn_do_writemore+0x2ae>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	685b      	ldr	r3, [r3, #4]
 800a0fa:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800a0fe:	2b04      	cmp	r3, #4
 800a100:	d909      	bls.n	800a116 <lwip_netconn_do_writemore+0x2c2>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a106:	2b00      	cmp	r3, #0
 800a108:	d005      	beq.n	800a116 <lwip_netconn_do_writemore+0x2c2>
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a10e:	2200      	movs	r2, #0
 800a110:	2103      	movs	r1, #3
 800a112:	6878      	ldr	r0, [r7, #4]
 800a114:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 800a116:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d11d      	bne.n	800a15a <lwip_netconn_do_writemore+0x306>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	6a1b      	ldr	r3, [r3, #32]
 800a122:	699a      	ldr	r2, [r3, #24]
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	6a1b      	ldr	r3, [r3, #32]
 800a128:	695b      	ldr	r3, [r3, #20]
 800a12a:	429a      	cmp	r2, r3
 800a12c:	d002      	beq.n	800a134 <lwip_netconn_do_writemore+0x2e0>
 800a12e:	7e3b      	ldrb	r3, [r7, #24]
 800a130:	2b00      	cmp	r3, #0
 800a132:	d001      	beq.n	800a138 <lwip_netconn_do_writemore+0x2e4>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 800a134:	2301      	movs	r3, #1
 800a136:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	685b      	ldr	r3, [r3, #4]
 800a13c:	4618      	mov	r0, r3
 800a13e:	f008 fa43 	bl	80125c8 <tcp_output>
 800a142:	4603      	mov	r3, r0
 800a144:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 800a146:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800a14a:	f113 0f04 	cmn.w	r3, #4
 800a14e:	d12c      	bne.n	800a1aa <lwip_netconn_do_writemore+0x356>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800a150:	7b3b      	ldrb	r3, [r7, #12]
 800a152:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800a154:	2301      	movs	r3, #1
 800a156:	76fb      	strb	r3, [r7, #27]
 800a158:	e027      	b.n	800a1aa <lwip_netconn_do_writemore+0x356>
      }
    } else if (err == ERR_MEM) {
 800a15a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a15e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a162:	d120      	bne.n	800a1a6 <lwip_netconn_do_writemore+0x352>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	685b      	ldr	r3, [r3, #4]
 800a168:	4618      	mov	r0, r3
 800a16a:	f008 fa2d 	bl	80125c8 <tcp_output>
 800a16e:	4603      	mov	r3, r0
 800a170:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 800a172:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800a176:	f113 0f04 	cmn.w	r3, #4
 800a17a:	d104      	bne.n	800a186 <lwip_netconn_do_writemore+0x332>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800a17c:	7b7b      	ldrb	r3, [r7, #13]
 800a17e:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800a180:	2301      	movs	r3, #1
 800a182:	76fb      	strb	r3, [r7, #27]
 800a184:	e011      	b.n	800a1aa <lwip_netconn_do_writemore+0x356>
      } else if (dontblock) {
 800a186:	7e3b      	ldrb	r3, [r7, #24]
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d00e      	beq.n	800a1aa <lwip_netconn_do_writemore+0x356>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	6a1b      	ldr	r3, [r3, #32]
 800a190:	699b      	ldr	r3, [r3, #24]
 800a192:	2b00      	cmp	r3, #0
 800a194:	d102      	bne.n	800a19c <lwip_netconn_do_writemore+0x348>
 800a196:	f06f 0306 	mvn.w	r3, #6
 800a19a:	e000      	b.n	800a19e <lwip_netconn_do_writemore+0x34a>
 800a19c:	2300      	movs	r3, #0
 800a19e:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800a1a0:	2301      	movs	r3, #1
 800a1a2:	76fb      	strb	r3, [r7, #27]
 800a1a4:	e001      	b.n	800a1aa <lwip_netconn_do_writemore+0x356>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 800a1a6:	2301      	movs	r3, #1
 800a1a8:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 800a1aa:	7efb      	ldrb	r3, [r7, #27]
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d015      	beq.n	800a1dc <lwip_netconn_do_writemore+0x388>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	6a1b      	ldr	r3, [r3, #32]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	330c      	adds	r3, #12
 800a1b8:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	6a1b      	ldr	r3, [r3, #32]
 800a1be:	7ffa      	ldrb	r2, [r7, #31]
 800a1c0:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	2200      	movs	r2, #0
 800a1c6:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	2200      	movs	r2, #0
 800a1cc:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800a1ce:	78fb      	ldrb	r3, [r7, #3]
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d006      	beq.n	800a1e2 <lwip_netconn_do_writemore+0x38e>
#endif
    {
      sys_sem_signal(op_completed_sem);
 800a1d4:	68b8      	ldr	r0, [r7, #8]
 800a1d6:	f00c fd01 	bl	8016bdc <sys_sem_signal>
 800a1da:	e002      	b.n	800a1e2 <lwip_netconn_do_writemore+0x38e>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 800a1dc:	f04f 33ff 	mov.w	r3, #4294967295
 800a1e0:	e000      	b.n	800a1e4 <lwip_netconn_do_writemore+0x390>
  }
#endif
  return ERR_OK;
 800a1e2:	2300      	movs	r3, #0
}
 800a1e4:	4618      	mov	r0, r3
 800a1e6:	3720      	adds	r7, #32
 800a1e8:	46bd      	mov	sp, r7
 800a1ea:	bd80      	pop	{r7, pc}

0800a1ec <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 800a1ec:	b580      	push	{r7, lr}
 800a1ee:	b084      	sub	sp, #16
 800a1f0:	af00      	add	r7, sp, #0
 800a1f2:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 800a1f8:	68bb      	ldr	r3, [r7, #8]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	4618      	mov	r0, r3
 800a1fe:	f7fe fe29 	bl	8008e54 <netconn_err>
 800a202:	4603      	mov	r3, r0
 800a204:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800a206:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d166      	bne.n	800a2dc <lwip_netconn_do_write+0xf0>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800a20e:	68bb      	ldr	r3, [r7, #8]
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	781b      	ldrb	r3, [r3, #0]
 800a214:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a218:	2b10      	cmp	r3, #16
 800a21a:	d15d      	bne.n	800a2d8 <lwip_netconn_do_write+0xec>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 800a21c:	68bb      	ldr	r3, [r7, #8]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	785b      	ldrb	r3, [r3, #1]
 800a222:	2b00      	cmp	r3, #0
 800a224:	d002      	beq.n	800a22c <lwip_netconn_do_write+0x40>
        /* netconn is connecting, closing or in blocking write */
        err = ERR_INPROGRESS;
 800a226:	23fb      	movs	r3, #251	; 0xfb
 800a228:	73fb      	strb	r3, [r7, #15]
 800a22a:	e057      	b.n	800a2dc <lwip_netconn_do_write+0xf0>
      } else if (msg->conn->pcb.tcp != NULL) {
 800a22c:	68bb      	ldr	r3, [r7, #8]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	685b      	ldr	r3, [r3, #4]
 800a232:	2b00      	cmp	r3, #0
 800a234:	d04d      	beq.n	800a2d2 <lwip_netconn_do_write+0xe6>
        msg->conn->state = NETCONN_WRITE;
 800a236:	68bb      	ldr	r3, [r7, #8]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	2201      	movs	r2, #1
 800a23c:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800a23e:	68bb      	ldr	r3, [r7, #8]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	6a1b      	ldr	r3, [r3, #32]
 800a244:	2b00      	cmp	r3, #0
 800a246:	d006      	beq.n	800a256 <lwip_netconn_do_write+0x6a>
 800a248:	4b28      	ldr	r3, [pc, #160]	; (800a2ec <lwip_netconn_do_write+0x100>)
 800a24a:	f240 7223 	movw	r2, #1827	; 0x723
 800a24e:	4928      	ldr	r1, [pc, #160]	; (800a2f0 <lwip_netconn_do_write+0x104>)
 800a250:	4828      	ldr	r0, [pc, #160]	; (800a2f4 <lwip_netconn_do_write+0x108>)
 800a252:	f00c fe05 	bl	8016e60 <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 800a256:	68bb      	ldr	r3, [r7, #8]
 800a258:	695b      	ldr	r3, [r3, #20]
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d106      	bne.n	800a26c <lwip_netconn_do_write+0x80>
 800a25e:	4b23      	ldr	r3, [pc, #140]	; (800a2ec <lwip_netconn_do_write+0x100>)
 800a260:	f240 7224 	movw	r2, #1828	; 0x724
 800a264:	4924      	ldr	r1, [pc, #144]	; (800a2f8 <lwip_netconn_do_write+0x10c>)
 800a266:	4823      	ldr	r0, [pc, #140]	; (800a2f4 <lwip_netconn_do_write+0x108>)
 800a268:	f00c fdfa 	bl	8016e60 <iprintf>
        msg->conn->current_msg = msg;
 800a26c:	68bb      	ldr	r3, [r7, #8]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	68ba      	ldr	r2, [r7, #8]
 800a272:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 800a274:	68bb      	ldr	r3, [r7, #8]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	2100      	movs	r1, #0
 800a27a:	4618      	mov	r0, r3
 800a27c:	f7ff fdea 	bl	8009e54 <lwip_netconn_do_writemore>
 800a280:	4603      	mov	r3, r0
 800a282:	2b00      	cmp	r3, #0
 800a284:	d02e      	beq.n	800a2e4 <lwip_netconn_do_write+0xf8>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 800a286:	68bb      	ldr	r3, [r7, #8]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	785b      	ldrb	r3, [r3, #1]
 800a28c:	2b01      	cmp	r3, #1
 800a28e:	d006      	beq.n	800a29e <lwip_netconn_do_write+0xb2>
 800a290:	4b16      	ldr	r3, [pc, #88]	; (800a2ec <lwip_netconn_do_write+0x100>)
 800a292:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 800a296:	4919      	ldr	r1, [pc, #100]	; (800a2fc <lwip_netconn_do_write+0x110>)
 800a298:	4816      	ldr	r0, [pc, #88]	; (800a2f4 <lwip_netconn_do_write+0x108>)
 800a29a:	f00c fde1 	bl	8016e60 <iprintf>
          UNLOCK_TCPIP_CORE();
 800a29e:	4818      	ldr	r0, [pc, #96]	; (800a300 <lwip_netconn_do_write+0x114>)
 800a2a0:	f00c fd0d 	bl	8016cbe <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800a2a4:	68bb      	ldr	r3, [r7, #8]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	330c      	adds	r3, #12
 800a2aa:	2100      	movs	r1, #0
 800a2ac:	4618      	mov	r0, r3
 800a2ae:	f00c fc64 	bl	8016b7a <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 800a2b2:	4813      	ldr	r0, [pc, #76]	; (800a300 <lwip_netconn_do_write+0x114>)
 800a2b4:	f00c fcf4 	bl	8016ca0 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 800a2b8:	68bb      	ldr	r3, [r7, #8]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	785b      	ldrb	r3, [r3, #1]
 800a2be:	2b01      	cmp	r3, #1
 800a2c0:	d110      	bne.n	800a2e4 <lwip_netconn_do_write+0xf8>
 800a2c2:	4b0a      	ldr	r3, [pc, #40]	; (800a2ec <lwip_netconn_do_write+0x100>)
 800a2c4:	f240 722c 	movw	r2, #1836	; 0x72c
 800a2c8:	490c      	ldr	r1, [pc, #48]	; (800a2fc <lwip_netconn_do_write+0x110>)
 800a2ca:	480a      	ldr	r0, [pc, #40]	; (800a2f4 <lwip_netconn_do_write+0x108>)
 800a2cc:	f00c fdc8 	bl	8016e60 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 800a2d0:	e008      	b.n	800a2e4 <lwip_netconn_do_write+0xf8>
      } else {
        err = ERR_CONN;
 800a2d2:	23f5      	movs	r3, #245	; 0xf5
 800a2d4:	73fb      	strb	r3, [r7, #15]
 800a2d6:	e001      	b.n	800a2dc <lwip_netconn_do_write+0xf0>
#else /* LWIP_TCP */
      err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      err = ERR_VAL;
 800a2d8:	23fa      	movs	r3, #250	; 0xfa
 800a2da:	73fb      	strb	r3, [r7, #15]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
 800a2dc:	68bb      	ldr	r3, [r7, #8]
 800a2de:	7bfa      	ldrb	r2, [r7, #15]
 800a2e0:	711a      	strb	r2, [r3, #4]
 800a2e2:	e000      	b.n	800a2e6 <lwip_netconn_do_write+0xfa>
        return;
 800a2e4:	bf00      	nop
  TCPIP_APIMSG_ACK(msg);
}
 800a2e6:	3710      	adds	r7, #16
 800a2e8:	46bd      	mov	sp, r7
 800a2ea:	bd80      	pop	{r7, pc}
 800a2ec:	08018490 	.word	0x08018490
 800a2f0:	08018834 	.word	0x08018834
 800a2f4:	080184d4 	.word	0x080184d4
 800a2f8:	080189bc 	.word	0x080189bc
 800a2fc:	08018850 	.word	0x08018850
 800a300:	20007b24 	.word	0x20007b24

0800a304 <lwip_netconn_do_getaddr>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_getaddr(void *m)
{
 800a304:	b580      	push	{r7, lr}
 800a306:	b084      	sub	sp, #16
 800a308:	af00      	add	r7, sp, #0
 800a30a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	60fb      	str	r3, [r7, #12]

  if (msg->conn->pcb.ip != NULL) {
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	685b      	ldr	r3, [r3, #4]
 800a316:	2b00      	cmp	r3, #0
 800a318:	d06c      	beq.n	800a3f4 <lwip_netconn_do_getaddr+0xf0>
    if (msg->msg.ad.local) {
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	7c1b      	ldrb	r3, [r3, #16]
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d007      	beq.n	800a332 <lwip_netconn_do_getaddr+0x2e>
      ip_addr_copy(API_EXPR_DEREF(msg->msg.ad.ipaddr),
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	685a      	ldr	r2, [r3, #4]
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	689b      	ldr	r3, [r3, #8]
 800a32c:	6812      	ldr	r2, [r2, #0]
 800a32e:	601a      	str	r2, [r3, #0]
 800a330:	e006      	b.n	800a340 <lwip_netconn_do_getaddr+0x3c>
                   msg->conn->pcb.ip->local_ip);
    } else {
      ip_addr_copy(API_EXPR_DEREF(msg->msg.ad.ipaddr),
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	685a      	ldr	r2, [r3, #4]
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	689b      	ldr	r3, [r3, #8]
 800a33c:	6852      	ldr	r2, [r2, #4]
 800a33e:	601a      	str	r2, [r3, #0]
                   msg->conn->pcb.ip->remote_ip);
    }

    msg->err = ERR_OK;
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	2200      	movs	r2, #0
 800a344:	711a      	strb	r2, [r3, #4]
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	781b      	ldrb	r3, [r3, #0]
 800a34c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a350:	2b10      	cmp	r3, #16
 800a352:	d021      	beq.n	800a398 <lwip_netconn_do_getaddr+0x94>
 800a354:	2b20      	cmp	r3, #32
 800a356:	d144      	bne.n	800a3e2 <lwip_netconn_do_getaddr+0xde>
        }
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        if (msg->msg.ad.local) {
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	7c1b      	ldrb	r3, [r3, #16]
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d007      	beq.n	800a370 <lwip_netconn_do_getaddr+0x6c>
          API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->local_port;
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	685a      	ldr	r2, [r3, #4]
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	68db      	ldr	r3, [r3, #12]
 800a36a:	8a52      	ldrh	r2, [r2, #18]
 800a36c:	801a      	strh	r2, [r3, #0]
            msg->err = ERR_CONN;
          } else {
            API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->remote_port;
          }
        }
        break;
 800a36e:	e044      	b.n	800a3fa <lwip_netconn_do_getaddr+0xf6>
          if ((msg->conn->pcb.udp->flags & UDP_FLAGS_CONNECTED) == 0) {
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	685b      	ldr	r3, [r3, #4]
 800a376:	7c1b      	ldrb	r3, [r3, #16]
 800a378:	f003 0304 	and.w	r3, r3, #4
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d103      	bne.n	800a388 <lwip_netconn_do_getaddr+0x84>
            msg->err = ERR_CONN;
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	22f5      	movs	r2, #245	; 0xf5
 800a384:	711a      	strb	r2, [r3, #4]
        break;
 800a386:	e038      	b.n	800a3fa <lwip_netconn_do_getaddr+0xf6>
            API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->remote_port;
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	685a      	ldr	r2, [r3, #4]
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	68db      	ldr	r3, [r3, #12]
 800a392:	8a92      	ldrh	r2, [r2, #20]
 800a394:	801a      	strh	r2, [r3, #0]
        break;
 800a396:	e030      	b.n	800a3fa <lwip_netconn_do_getaddr+0xf6>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        if ((msg->msg.ad.local == 0) &&
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	7c1b      	ldrb	r3, [r3, #16]
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d10f      	bne.n	800a3c0 <lwip_netconn_do_getaddr+0xbc>
            ((msg->conn->pcb.tcp->state == CLOSED) || (msg->conn->pcb.tcp->state == LISTEN))) {
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	685b      	ldr	r3, [r3, #4]
 800a3a6:	7d1b      	ldrb	r3, [r3, #20]
        if ((msg->msg.ad.local == 0) &&
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d005      	beq.n	800a3b8 <lwip_netconn_do_getaddr+0xb4>
            ((msg->conn->pcb.tcp->state == CLOSED) || (msg->conn->pcb.tcp->state == LISTEN))) {
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	685b      	ldr	r3, [r3, #4]
 800a3b2:	7d1b      	ldrb	r3, [r3, #20]
 800a3b4:	2b01      	cmp	r3, #1
 800a3b6:	d103      	bne.n	800a3c0 <lwip_netconn_do_getaddr+0xbc>
          /* pcb is not connected and remote name is requested */
          msg->err = ERR_CONN;
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	22f5      	movs	r2, #245	; 0xf5
 800a3bc:	711a      	strb	r2, [r3, #4]
        } else {
          API_EXPR_DEREF(msg->msg.ad.port) = (msg->msg.ad.local ? msg->conn->pcb.tcp->local_port : msg->conn->pcb.tcp->remote_port);
        }
        break;
 800a3be:	e01c      	b.n	800a3fa <lwip_netconn_do_getaddr+0xf6>
          API_EXPR_DEREF(msg->msg.ad.port) = (msg->msg.ad.local ? msg->conn->pcb.tcp->local_port : msg->conn->pcb.tcp->remote_port);
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	7c1b      	ldrb	r3, [r3, #16]
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d004      	beq.n	800a3d2 <lwip_netconn_do_getaddr+0xce>
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	685b      	ldr	r3, [r3, #4]
 800a3ce:	8adb      	ldrh	r3, [r3, #22]
 800a3d0:	e003      	b.n	800a3da <lwip_netconn_do_getaddr+0xd6>
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	685b      	ldr	r3, [r3, #4]
 800a3d8:	8b1b      	ldrh	r3, [r3, #24]
 800a3da:	68fa      	ldr	r2, [r7, #12]
 800a3dc:	68d2      	ldr	r2, [r2, #12]
 800a3de:	8013      	strh	r3, [r2, #0]
        break;
 800a3e0:	e00b      	b.n	800a3fa <lwip_netconn_do_getaddr+0xf6>
#endif /* LWIP_TCP */
      default:
        LWIP_ASSERT("invalid netconn_type", 0);
 800a3e2:	4b08      	ldr	r3, [pc, #32]	; (800a404 <lwip_netconn_do_getaddr+0x100>)
 800a3e4:	f240 727d 	movw	r2, #1917	; 0x77d
 800a3e8:	4907      	ldr	r1, [pc, #28]	; (800a408 <lwip_netconn_do_getaddr+0x104>)
 800a3ea:	4808      	ldr	r0, [pc, #32]	; (800a40c <lwip_netconn_do_getaddr+0x108>)
 800a3ec:	f00c fd38 	bl	8016e60 <iprintf>
        break;
 800a3f0:	bf00      	nop
 800a3f2:	e002      	b.n	800a3fa <lwip_netconn_do_getaddr+0xf6>
    }
  } else {
    msg->err = ERR_CONN;
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	22f5      	movs	r2, #245	; 0xf5
 800a3f8:	711a      	strb	r2, [r3, #4]
  }
  TCPIP_APIMSG_ACK(msg);
}
 800a3fa:	bf00      	nop
 800a3fc:	3710      	adds	r7, #16
 800a3fe:	46bd      	mov	sp, r7
 800a400:	bd80      	pop	{r7, pc}
 800a402:	bf00      	nop
 800a404:	08018490 	.word	0x08018490
 800a408:	080189d0 	.word	0x080189d0
 800a40c:	080184d4 	.word	0x080184d4

0800a410 <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 800a410:	b580      	push	{r7, lr}
 800a412:	b084      	sub	sp, #16
 800a414:	af00      	add	r7, sp, #0
 800a416:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	785b      	ldrb	r3, [r3, #1]
 800a422:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	685b      	ldr	r3, [r3, #4]
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d069      	beq.n	800a502 <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	781b      	ldrb	r3, [r3, #0]
 800a434:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 800a438:	2b10      	cmp	r3, #16
 800a43a:	d162      	bne.n	800a502 <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800a440:	2b03      	cmp	r3, #3
 800a442:	d002      	beq.n	800a44a <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800a444:	7afb      	ldrb	r3, [r7, #11]
 800a446:	2b02      	cmp	r3, #2
 800a448:	d05b      	beq.n	800a502 <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 800a44a:	7afb      	ldrb	r3, [r7, #11]
 800a44c:	2b03      	cmp	r3, #3
 800a44e:	d103      	bne.n	800a458 <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	22f5      	movs	r2, #245	; 0xf5
 800a454:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800a456:	e059      	b.n	800a50c <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 800a458:	7afb      	ldrb	r3, [r7, #11]
 800a45a:	2b01      	cmp	r3, #1
 800a45c:	d103      	bne.n	800a466 <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	22fb      	movs	r2, #251	; 0xfb
 800a462:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800a464:	e052      	b.n	800a50c <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	7a1b      	ldrb	r3, [r3, #8]
 800a46a:	f003 0301 	and.w	r3, r3, #1
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d004      	beq.n	800a47c <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	4618      	mov	r0, r3
 800a478:	f7ff f966 	bl	8009748 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	6a1b      	ldr	r3, [r3, #32]
 800a482:	2b00      	cmp	r3, #0
 800a484:	d006      	beq.n	800a494 <lwip_netconn_do_close+0x84>
 800a486:	4b23      	ldr	r3, [pc, #140]	; (800a514 <lwip_netconn_do_close+0x104>)
 800a488:	f240 72bd 	movw	r2, #1981	; 0x7bd
 800a48c:	4922      	ldr	r1, [pc, #136]	; (800a518 <lwip_netconn_do_close+0x108>)
 800a48e:	4823      	ldr	r0, [pc, #140]	; (800a51c <lwip_netconn_do_close+0x10c>)
 800a490:	f00c fce6 	bl	8016e60 <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	2204      	movs	r2, #4
 800a49a:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	68fa      	ldr	r2, [r7, #12]
 800a4a2:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	2100      	movs	r1, #0
 800a4aa:	4618      	mov	r0, r3
 800a4ac:	f7ff f9ca 	bl	8009844 <lwip_netconn_do_close_internal>
 800a4b0:	4603      	mov	r3, r0
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d029      	beq.n	800a50a <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	785b      	ldrb	r3, [r3, #1]
 800a4bc:	2b04      	cmp	r3, #4
 800a4be:	d006      	beq.n	800a4ce <lwip_netconn_do_close+0xbe>
 800a4c0:	4b14      	ldr	r3, [pc, #80]	; (800a514 <lwip_netconn_do_close+0x104>)
 800a4c2:	f240 72c2 	movw	r2, #1986	; 0x7c2
 800a4c6:	4916      	ldr	r1, [pc, #88]	; (800a520 <lwip_netconn_do_close+0x110>)
 800a4c8:	4814      	ldr	r0, [pc, #80]	; (800a51c <lwip_netconn_do_close+0x10c>)
 800a4ca:	f00c fcc9 	bl	8016e60 <iprintf>
        UNLOCK_TCPIP_CORE();
 800a4ce:	4815      	ldr	r0, [pc, #84]	; (800a524 <lwip_netconn_do_close+0x114>)
 800a4d0:	f00c fbf5 	bl	8016cbe <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	330c      	adds	r3, #12
 800a4da:	2100      	movs	r1, #0
 800a4dc:	4618      	mov	r0, r3
 800a4de:	f00c fb4c 	bl	8016b7a <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 800a4e2:	4810      	ldr	r0, [pc, #64]	; (800a524 <lwip_netconn_do_close+0x114>)
 800a4e4:	f00c fbdc 	bl	8016ca0 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	785b      	ldrb	r3, [r3, #1]
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d00b      	beq.n	800a50a <lwip_netconn_do_close+0xfa>
 800a4f2:	4b08      	ldr	r3, [pc, #32]	; (800a514 <lwip_netconn_do_close+0x104>)
 800a4f4:	f240 72c6 	movw	r2, #1990	; 0x7c6
 800a4f8:	4909      	ldr	r1, [pc, #36]	; (800a520 <lwip_netconn_do_close+0x110>)
 800a4fa:	4808      	ldr	r0, [pc, #32]	; (800a51c <lwip_netconn_do_close+0x10c>)
 800a4fc:	f00c fcb0 	bl	8016e60 <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 800a500:	e003      	b.n	800a50a <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	22f5      	movs	r2, #245	; 0xf5
 800a506:	711a      	strb	r2, [r3, #4]
 800a508:	e000      	b.n	800a50c <lwip_netconn_do_close+0xfc>
      return;
 800a50a:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 800a50c:	3710      	adds	r7, #16
 800a50e:	46bd      	mov	sp, r7
 800a510:	bd80      	pop	{r7, pc}
 800a512:	bf00      	nop
 800a514:	08018490 	.word	0x08018490
 800a518:	08018834 	.word	0x08018834
 800a51c:	080184d4 	.word	0x080184d4
 800a520:	08018850 	.word	0x08018850
 800a524:	20007b24 	.word	0x20007b24

0800a528 <err_to_errno>:
  EIO            /* ERR_ARG        -16     Illegal argument.        */
};

int
err_to_errno(err_t err)
{
 800a528:	b480      	push	{r7}
 800a52a:	b083      	sub	sp, #12
 800a52c:	af00      	add	r7, sp, #0
 800a52e:	4603      	mov	r3, r0
 800a530:	71fb      	strb	r3, [r7, #7]
  if ((err > 0) || (-err >= (err_t)LWIP_ARRAYSIZE(err_to_errno_table))) {
 800a532:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a536:	2b00      	cmp	r3, #0
 800a538:	dc04      	bgt.n	800a544 <err_to_errno+0x1c>
 800a53a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a53e:	425b      	negs	r3, r3
 800a540:	2b10      	cmp	r3, #16
 800a542:	dd01      	ble.n	800a548 <err_to_errno+0x20>
    return EIO;
 800a544:	2305      	movs	r3, #5
 800a546:	e005      	b.n	800a554 <err_to_errno+0x2c>
  }
  return err_to_errno_table[-err];
 800a548:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a54c:	425b      	negs	r3, r3
 800a54e:	4a04      	ldr	r2, [pc, #16]	; (800a560 <err_to_errno+0x38>)
 800a550:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 800a554:	4618      	mov	r0, r3
 800a556:	370c      	adds	r7, #12
 800a558:	46bd      	mov	sp, r7
 800a55a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a55e:	4770      	bx	lr
 800a560:	0801ba64 	.word	0x0801ba64

0800a564 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 800a564:	b580      	push	{r7, lr}
 800a566:	b082      	sub	sp, #8
 800a568:	af00      	add	r7, sp, #0
 800a56a:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d013      	beq.n	800a59a <netbuf_delete+0x36>
    if (buf->p != NULL) {
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	2b00      	cmp	r3, #0
 800a578:	d00b      	beq.n	800a592 <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	4618      	mov	r0, r3
 800a580:	f002 fd44 	bl	800d00c <pbuf_free>
      buf->p = buf->ptr = NULL;
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	2200      	movs	r2, #0
 800a588:	605a      	str	r2, [r3, #4]
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	685a      	ldr	r2, [r3, #4]
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 800a592:	6879      	ldr	r1, [r7, #4]
 800a594:	2006      	movs	r0, #6
 800a596:	f001 fe67 	bl	800c268 <memp_free>
  }
}
 800a59a:	bf00      	nop
 800a59c:	3708      	adds	r7, #8
 800a59e:	46bd      	mov	sp, r7
 800a5a0:	bd80      	pop	{r7, pc}
	...

0800a5a4 <netbuf_free>:
 *
 * @param buf pointer to the netbuf which contains the packet buffer to free
 */
void
netbuf_free(struct netbuf *buf)
{
 800a5a4:	b580      	push	{r7, lr}
 800a5a6:	b082      	sub	sp, #8
 800a5a8:	af00      	add	r7, sp, #0
 800a5aa:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("netbuf_free: invalid buf", (buf != NULL), return;);
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d106      	bne.n	800a5c0 <netbuf_free+0x1c>
 800a5b2:	4b0d      	ldr	r3, [pc, #52]	; (800a5e8 <netbuf_free+0x44>)
 800a5b4:	2281      	movs	r2, #129	; 0x81
 800a5b6:	490d      	ldr	r1, [pc, #52]	; (800a5ec <netbuf_free+0x48>)
 800a5b8:	480d      	ldr	r0, [pc, #52]	; (800a5f0 <netbuf_free+0x4c>)
 800a5ba:	f00c fc51 	bl	8016e60 <iprintf>
 800a5be:	e00f      	b.n	800a5e0 <netbuf_free+0x3c>
  if (buf->p != NULL) {
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d004      	beq.n	800a5d2 <netbuf_free+0x2e>
    pbuf_free(buf->p);
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	4618      	mov	r0, r3
 800a5ce:	f002 fd1d 	bl	800d00c <pbuf_free>
  }
  buf->p = buf->ptr = NULL;
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	2200      	movs	r2, #0
 800a5d6:	605a      	str	r2, [r3, #4]
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	685a      	ldr	r2, [r3, #4]
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	601a      	str	r2, [r3, #0]
#if LWIP_CHECKSUM_ON_COPY
  buf->flags = 0;
  buf->toport_chksum = 0;
#endif /* LWIP_CHECKSUM_ON_COPY */
}
 800a5e0:	3708      	adds	r7, #8
 800a5e2:	46bd      	mov	sp, r7
 800a5e4:	bd80      	pop	{r7, pc}
 800a5e6:	bf00      	nop
 800a5e8:	080189e8 	.word	0x080189e8
 800a5ec:	08018a84 	.word	0x08018a84
 800a5f0:	08018a38 	.word	0x08018a38

0800a5f4 <netbuf_ref>:
 * @return ERR_OK if data is referenced
 *         ERR_MEM if data couldn't be referenced due to lack of memory
 */
err_t
netbuf_ref(struct netbuf *buf, const void *dataptr, u16_t size)
{
 800a5f4:	b580      	push	{r7, lr}
 800a5f6:	b084      	sub	sp, #16
 800a5f8:	af00      	add	r7, sp, #0
 800a5fa:	60f8      	str	r0, [r7, #12]
 800a5fc:	60b9      	str	r1, [r7, #8]
 800a5fe:	4613      	mov	r3, r2
 800a600:	80fb      	strh	r3, [r7, #6]
  LWIP_ERROR("netbuf_ref: invalid buf", (buf != NULL), return ERR_ARG;);
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	2b00      	cmp	r3, #0
 800a606:	d108      	bne.n	800a61a <netbuf_ref+0x26>
 800a608:	4b1c      	ldr	r3, [pc, #112]	; (800a67c <netbuf_ref+0x88>)
 800a60a:	2299      	movs	r2, #153	; 0x99
 800a60c:	491c      	ldr	r1, [pc, #112]	; (800a680 <netbuf_ref+0x8c>)
 800a60e:	481d      	ldr	r0, [pc, #116]	; (800a684 <netbuf_ref+0x90>)
 800a610:	f00c fc26 	bl	8016e60 <iprintf>
 800a614:	f06f 030f 	mvn.w	r3, #15
 800a618:	e02b      	b.n	800a672 <netbuf_ref+0x7e>
  if (buf->p != NULL) {
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d004      	beq.n	800a62c <netbuf_ref+0x38>
    pbuf_free(buf->p);
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	4618      	mov	r0, r3
 800a628:	f002 fcf0 	bl	800d00c <pbuf_free>
  }
  buf->p = pbuf_alloc(PBUF_TRANSPORT, 0, PBUF_REF);
 800a62c:	2241      	movs	r2, #65	; 0x41
 800a62e:	2100      	movs	r1, #0
 800a630:	2036      	movs	r0, #54	; 0x36
 800a632:	f002 f9d9 	bl	800c9e8 <pbuf_alloc>
 800a636:	4602      	mov	r2, r0
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	601a      	str	r2, [r3, #0]
  if (buf->p == NULL) {
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	2b00      	cmp	r3, #0
 800a642:	d105      	bne.n	800a650 <netbuf_ref+0x5c>
    buf->ptr = NULL;
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	2200      	movs	r2, #0
 800a648:	605a      	str	r2, [r3, #4]
    return ERR_MEM;
 800a64a:	f04f 33ff 	mov.w	r3, #4294967295
 800a64e:	e010      	b.n	800a672 <netbuf_ref+0x7e>
  }
  ((struct pbuf_rom *)buf->p)->payload = dataptr;
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	68ba      	ldr	r2, [r7, #8]
 800a656:	605a      	str	r2, [r3, #4]
  buf->p->len = buf->p->tot_len = size;
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	88fa      	ldrh	r2, [r7, #6]
 800a65e:	811a      	strh	r2, [r3, #8]
 800a660:	68fa      	ldr	r2, [r7, #12]
 800a662:	6812      	ldr	r2, [r2, #0]
 800a664:	891b      	ldrh	r3, [r3, #8]
 800a666:	8153      	strh	r3, [r2, #10]
  buf->ptr = buf->p;
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	681a      	ldr	r2, [r3, #0]
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	605a      	str	r2, [r3, #4]
  return ERR_OK;
 800a670:	2300      	movs	r3, #0
}
 800a672:	4618      	mov	r0, r3
 800a674:	3710      	adds	r7, #16
 800a676:	46bd      	mov	sp, r7
 800a678:	bd80      	pop	{r7, pc}
 800a67a:	bf00      	nop
 800a67c:	080189e8 	.word	0x080189e8
 800a680:	08018aa0 	.word	0x08018aa0
 800a684:	08018a38 	.word	0x08018a38

0800a688 <tryget_socket_unconn_nouse>:
#endif /* LWIP_NETCONN_FULLDUPLEX */

/* Translate a socket 'int' into a pointer (only fails if the index is invalid) */
static struct lwip_sock *
tryget_socket_unconn_nouse(int fd)
{
 800a688:	b480      	push	{r7}
 800a68a:	b085      	sub	sp, #20
 800a68c:	af00      	add	r7, sp, #0
 800a68e:	6078      	str	r0, [r7, #4]
  int s = fd - LWIP_SOCKET_OFFSET;
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	60fb      	str	r3, [r7, #12]
  if ((s < 0) || (s >= NUM_SOCKETS)) {
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	2b00      	cmp	r3, #0
 800a698:	db02      	blt.n	800a6a0 <tryget_socket_unconn_nouse+0x18>
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	2b03      	cmp	r3, #3
 800a69e:	dd01      	ble.n	800a6a4 <tryget_socket_unconn_nouse+0x1c>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("tryget_socket_unconn(%d): invalid\n", fd));
    return NULL;
 800a6a0:	2300      	movs	r3, #0
 800a6a2:	e003      	b.n	800a6ac <tryget_socket_unconn_nouse+0x24>
  }
  return &sockets[s];
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	011b      	lsls	r3, r3, #4
 800a6a8:	4a03      	ldr	r2, [pc, #12]	; (800a6b8 <tryget_socket_unconn_nouse+0x30>)
 800a6aa:	4413      	add	r3, r2
}
 800a6ac:	4618      	mov	r0, r3
 800a6ae:	3714      	adds	r7, #20
 800a6b0:	46bd      	mov	sp, r7
 800a6b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6b6:	4770      	bx	lr
 800a6b8:	2000472c 	.word	0x2000472c

0800a6bc <tryget_socket_unconn>:
}

/* Translate a socket 'int' into a pointer (only fails if the index is invalid) */
static struct lwip_sock *
tryget_socket_unconn(int fd)
{
 800a6bc:	b580      	push	{r7, lr}
 800a6be:	b084      	sub	sp, #16
 800a6c0:	af00      	add	r7, sp, #0
 800a6c2:	6078      	str	r0, [r7, #4]
  struct lwip_sock *ret = tryget_socket_unconn_nouse(fd);
 800a6c4:	6878      	ldr	r0, [r7, #4]
 800a6c6:	f7ff ffdf 	bl	800a688 <tryget_socket_unconn_nouse>
 800a6ca:	60f8      	str	r0, [r7, #12]
  if (ret != NULL) {
    if (!sock_inc_used(ret)) {
      return NULL;
    }
  }
  return ret;
 800a6cc:	68fb      	ldr	r3, [r7, #12]
}
 800a6ce:	4618      	mov	r0, r3
 800a6d0:	3710      	adds	r7, #16
 800a6d2:	46bd      	mov	sp, r7
 800a6d4:	bd80      	pop	{r7, pc}

0800a6d6 <tryget_socket>:
 * @param fd externally used socket index
 * @return struct lwip_sock for the socket or NULL if not found
 */
static struct lwip_sock *
tryget_socket(int fd)
{
 800a6d6:	b580      	push	{r7, lr}
 800a6d8:	b084      	sub	sp, #16
 800a6da:	af00      	add	r7, sp, #0
 800a6dc:	6078      	str	r0, [r7, #4]
  struct lwip_sock *sock = tryget_socket_unconn(fd);
 800a6de:	6878      	ldr	r0, [r7, #4]
 800a6e0:	f7ff ffec 	bl	800a6bc <tryget_socket_unconn>
 800a6e4:	60f8      	str	r0, [r7, #12]
  if (sock != NULL) {
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d005      	beq.n	800a6f8 <tryget_socket+0x22>
    if (sock->conn) {
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d001      	beq.n	800a6f8 <tryget_socket+0x22>
      return sock;
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	e000      	b.n	800a6fa <tryget_socket+0x24>
    }
    done_socket(sock);
  }
  return NULL;
 800a6f8:	2300      	movs	r3, #0
}
 800a6fa:	4618      	mov	r0, r3
 800a6fc:	3710      	adds	r7, #16
 800a6fe:	46bd      	mov	sp, r7
 800a700:	bd80      	pop	{r7, pc}
	...

0800a704 <get_socket>:
 * @param fd externally used socket index
 * @return struct lwip_sock for the socket or NULL if not found
 */
static struct lwip_sock *
get_socket(int fd)
{
 800a704:	b580      	push	{r7, lr}
 800a706:	b084      	sub	sp, #16
 800a708:	af00      	add	r7, sp, #0
 800a70a:	6078      	str	r0, [r7, #4]
  struct lwip_sock *sock = tryget_socket(fd);
 800a70c:	6878      	ldr	r0, [r7, #4]
 800a70e:	f7ff ffe2 	bl	800a6d6 <tryget_socket>
 800a712:	60f8      	str	r0, [r7, #12]
  if (!sock) {
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	2b00      	cmp	r3, #0
 800a718:	d104      	bne.n	800a724 <get_socket+0x20>
    if ((fd < LWIP_SOCKET_OFFSET) || (fd >= (LWIP_SOCKET_OFFSET + NUM_SOCKETS))) {
      LWIP_DEBUGF(SOCKETS_DEBUG, ("get_socket(%d): invalid\n", fd));
    }
    set_errno(EBADF);
 800a71a:	4b05      	ldr	r3, [pc, #20]	; (800a730 <get_socket+0x2c>)
 800a71c:	2209      	movs	r2, #9
 800a71e:	601a      	str	r2, [r3, #0]
    return NULL;
 800a720:	2300      	movs	r3, #0
 800a722:	e000      	b.n	800a726 <get_socket+0x22>
  }
  return sock;
 800a724:	68fb      	ldr	r3, [r7, #12]
}
 800a726:	4618      	mov	r0, r3
 800a728:	3710      	adds	r7, #16
 800a72a:	46bd      	mov	sp, r7
 800a72c:	bd80      	pop	{r7, pc}
 800a72e:	bf00      	nop
 800a730:	2000d418 	.word	0x2000d418

0800a734 <alloc_socket>:
 *                 0 if socket has been created by socket()
 * @return the index of the new socket; -1 on error
 */
static int
alloc_socket(struct netconn *newconn, int accepted)
{
 800a734:	b580      	push	{r7, lr}
 800a736:	b084      	sub	sp, #16
 800a738:	af00      	add	r7, sp, #0
 800a73a:	6078      	str	r0, [r7, #4]
 800a73c:	6039      	str	r1, [r7, #0]
  int i;
  SYS_ARCH_DECL_PROTECT(lev);
  LWIP_UNUSED_ARG(accepted);

  /* allocate a new socket identifier */
  for (i = 0; i < NUM_SOCKETS; ++i) {
 800a73e:	2300      	movs	r3, #0
 800a740:	60fb      	str	r3, [r7, #12]
 800a742:	e052      	b.n	800a7ea <alloc_socket+0xb6>
    /* Protect socket array */
    SYS_ARCH_PROTECT(lev);
 800a744:	f00c faee 	bl	8016d24 <sys_arch_protect>
 800a748:	60b8      	str	r0, [r7, #8]
    if (!sockets[i].conn) {
 800a74a:	4a2c      	ldr	r2, [pc, #176]	; (800a7fc <alloc_socket+0xc8>)
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	011b      	lsls	r3, r3, #4
 800a750:	4413      	add	r3, r2
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	2b00      	cmp	r3, #0
 800a756:	d142      	bne.n	800a7de <alloc_socket+0xaa>
        continue;
      }
      sockets[i].fd_used    = 1;
      sockets[i].fd_free_pending = 0;
#endif
      sockets[i].conn       = newconn;
 800a758:	4a28      	ldr	r2, [pc, #160]	; (800a7fc <alloc_socket+0xc8>)
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	011b      	lsls	r3, r3, #4
 800a75e:	4413      	add	r3, r2
 800a760:	687a      	ldr	r2, [r7, #4]
 800a762:	601a      	str	r2, [r3, #0]
      /* The socket is not yet known to anyone, so no need to protect
         after having marked it as used. */
      SYS_ARCH_UNPROTECT(lev);
 800a764:	68b8      	ldr	r0, [r7, #8]
 800a766:	f00c faeb 	bl	8016d40 <sys_arch_unprotect>
      sockets[i].lastdata.pbuf = NULL;
 800a76a:	4a24      	ldr	r2, [pc, #144]	; (800a7fc <alloc_socket+0xc8>)
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	011b      	lsls	r3, r3, #4
 800a770:	4413      	add	r3, r2
 800a772:	3304      	adds	r3, #4
 800a774:	2200      	movs	r2, #0
 800a776:	601a      	str	r2, [r3, #0]
#if LWIP_SOCKET_SELECT || LWIP_SOCKET_POLL
      LWIP_ASSERT("sockets[i].select_waiting == 0", sockets[i].select_waiting == 0);
 800a778:	4a20      	ldr	r2, [pc, #128]	; (800a7fc <alloc_socket+0xc8>)
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	011b      	lsls	r3, r3, #4
 800a77e:	4413      	add	r3, r2
 800a780:	330e      	adds	r3, #14
 800a782:	781b      	ldrb	r3, [r3, #0]
 800a784:	2b00      	cmp	r3, #0
 800a786:	d006      	beq.n	800a796 <alloc_socket+0x62>
 800a788:	4b1d      	ldr	r3, [pc, #116]	; (800a800 <alloc_socket+0xcc>)
 800a78a:	f240 220e 	movw	r2, #526	; 0x20e
 800a78e:	491d      	ldr	r1, [pc, #116]	; (800a804 <alloc_socket+0xd0>)
 800a790:	481d      	ldr	r0, [pc, #116]	; (800a808 <alloc_socket+0xd4>)
 800a792:	f00c fb65 	bl	8016e60 <iprintf>
      sockets[i].rcvevent   = 0;
 800a796:	4a19      	ldr	r2, [pc, #100]	; (800a7fc <alloc_socket+0xc8>)
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	011b      	lsls	r3, r3, #4
 800a79c:	4413      	add	r3, r2
 800a79e:	3308      	adds	r3, #8
 800a7a0:	2200      	movs	r2, #0
 800a7a2:	801a      	strh	r2, [r3, #0]
      /* TCP sendbuf is empty, but the socket is not yet writable until connected
       * (unless it has been created by accept()). */
      sockets[i].sendevent  = (NETCONNTYPE_GROUP(newconn->type) == NETCONN_TCP ? (accepted != 0) : 1);
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	781b      	ldrb	r3, [r3, #0]
 800a7a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a7ac:	2b10      	cmp	r3, #16
 800a7ae:	d102      	bne.n	800a7b6 <alloc_socket+0x82>
 800a7b0:	683b      	ldr	r3, [r7, #0]
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d001      	beq.n	800a7ba <alloc_socket+0x86>
 800a7b6:	2301      	movs	r3, #1
 800a7b8:	e000      	b.n	800a7bc <alloc_socket+0x88>
 800a7ba:	2300      	movs	r3, #0
 800a7bc:	b299      	uxth	r1, r3
 800a7be:	4a0f      	ldr	r2, [pc, #60]	; (800a7fc <alloc_socket+0xc8>)
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	011b      	lsls	r3, r3, #4
 800a7c4:	4413      	add	r3, r2
 800a7c6:	330a      	adds	r3, #10
 800a7c8:	460a      	mov	r2, r1
 800a7ca:	801a      	strh	r2, [r3, #0]
      sockets[i].errevent   = 0;
 800a7cc:	4a0b      	ldr	r2, [pc, #44]	; (800a7fc <alloc_socket+0xc8>)
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	011b      	lsls	r3, r3, #4
 800a7d2:	4413      	add	r3, r2
 800a7d4:	330c      	adds	r3, #12
 800a7d6:	2200      	movs	r2, #0
 800a7d8:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_SOCKET_SELECT || LWIP_SOCKET_POLL */
      return i + LWIP_SOCKET_OFFSET;
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	e00a      	b.n	800a7f4 <alloc_socket+0xc0>
    }
    SYS_ARCH_UNPROTECT(lev);
 800a7de:	68b8      	ldr	r0, [r7, #8]
 800a7e0:	f00c faae 	bl	8016d40 <sys_arch_unprotect>
  for (i = 0; i < NUM_SOCKETS; ++i) {
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	3301      	adds	r3, #1
 800a7e8:	60fb      	str	r3, [r7, #12]
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	2b03      	cmp	r3, #3
 800a7ee:	dda9      	ble.n	800a744 <alloc_socket+0x10>
  }
  return -1;
 800a7f0:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a7f4:	4618      	mov	r0, r3
 800a7f6:	3710      	adds	r7, #16
 800a7f8:	46bd      	mov	sp, r7
 800a7fa:	bd80      	pop	{r7, pc}
 800a7fc:	2000472c 	.word	0x2000472c
 800a800:	08018b80 	.word	0x08018b80
 800a804:	08018bb4 	.word	0x08018bb4
 800a808:	08018bd4 	.word	0x08018bd4

0800a80c <lwip_bind>:
  return newsock;
}

int
lwip_bind(int s, const struct sockaddr *name, socklen_t namelen)
{
 800a80c:	b580      	push	{r7, lr}
 800a80e:	b08a      	sub	sp, #40	; 0x28
 800a810:	af00      	add	r7, sp, #0
 800a812:	60f8      	str	r0, [r7, #12]
 800a814:	60b9      	str	r1, [r7, #8]
 800a816:	607a      	str	r2, [r7, #4]
  struct lwip_sock *sock;
  ip_addr_t local_addr;
  u16_t local_port;
  err_t err;

  sock = get_socket(s);
 800a818:	68f8      	ldr	r0, [r7, #12]
 800a81a:	f7ff ff73 	bl	800a704 <get_socket>
 800a81e:	6278      	str	r0, [r7, #36]	; 0x24
  if (!sock) {
 800a820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a822:	2b00      	cmp	r3, #0
 800a824:	d102      	bne.n	800a82c <lwip_bind+0x20>
    return -1;
 800a826:	f04f 33ff 	mov.w	r3, #4294967295
 800a82a:	e051      	b.n	800a8d0 <lwip_bind+0xc4>
    done_socket(sock);
    return -1;
  }

  /* check size, family and alignment of 'name' */
  LWIP_ERROR("lwip_bind: invalid address", (IS_SOCK_ADDR_LEN_VALID(namelen) &&
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	2b10      	cmp	r3, #16
 800a830:	d108      	bne.n	800a844 <lwip_bind+0x38>
 800a832:	68bb      	ldr	r3, [r7, #8]
 800a834:	785b      	ldrb	r3, [r3, #1]
 800a836:	2b02      	cmp	r3, #2
 800a838:	d104      	bne.n	800a844 <lwip_bind+0x38>
 800a83a:	68bb      	ldr	r3, [r7, #8]
 800a83c:	f003 0303 	and.w	r3, r3, #3
 800a840:	2b00      	cmp	r3, #0
 800a842:	d014      	beq.n	800a86e <lwip_bind+0x62>
 800a844:	4b24      	ldr	r3, [pc, #144]	; (800a8d8 <lwip_bind+0xcc>)
 800a846:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800a84a:	4924      	ldr	r1, [pc, #144]	; (800a8dc <lwip_bind+0xd0>)
 800a84c:	4824      	ldr	r0, [pc, #144]	; (800a8e0 <lwip_bind+0xd4>)
 800a84e:	f00c fb07 	bl	8016e60 <iprintf>
 800a852:	f06f 000f 	mvn.w	r0, #15
 800a856:	f7ff fe67 	bl	800a528 <err_to_errno>
 800a85a:	6178      	str	r0, [r7, #20]
 800a85c:	697b      	ldr	r3, [r7, #20]
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d002      	beq.n	800a868 <lwip_bind+0x5c>
 800a862:	4a20      	ldr	r2, [pc, #128]	; (800a8e4 <lwip_bind+0xd8>)
 800a864:	697b      	ldr	r3, [r7, #20]
 800a866:	6013      	str	r3, [r2, #0]
 800a868:	f04f 33ff 	mov.w	r3, #4294967295
 800a86c:	e030      	b.n	800a8d0 <lwip_bind+0xc4>
             IS_SOCK_ADDR_TYPE_VALID(name) && IS_SOCK_ADDR_ALIGNED(name)),
             sock_set_errno(sock, err_to_errno(ERR_ARG)); done_socket(sock); return -1;);
  LWIP_UNUSED_ARG(namelen);

  SOCKADDR_TO_IPADDR_PORT(name, &local_addr, local_port);
 800a86e:	68bb      	ldr	r3, [r7, #8]
 800a870:	685b      	ldr	r3, [r3, #4]
 800a872:	613b      	str	r3, [r7, #16]
 800a874:	68bb      	ldr	r3, [r7, #8]
 800a876:	885b      	ldrh	r3, [r3, #2]
 800a878:	4618      	mov	r0, r3
 800a87a:	f000 ffed 	bl	800b858 <lwip_htons>
 800a87e:	4603      	mov	r3, r0
 800a880:	847b      	strh	r3, [r7, #34]	; 0x22
    unmap_ipv4_mapped_ipv6(ip_2_ip4(&local_addr), ip_2_ip6(&local_addr));
    IP_SET_TYPE_VAL(local_addr, IPADDR_TYPE_V4);
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  err = netconn_bind(sock->conn, &local_addr, local_port);
 800a882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800a888:	f107 0110 	add.w	r1, r7, #16
 800a88c:	4618      	mov	r0, r3
 800a88e:	f7fd ff77 	bl	8008780 <netconn_bind>
 800a892:	4603      	mov	r3, r0
 800a894:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

  if (err != ERR_OK) {
 800a898:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d00e      	beq.n	800a8be <lwip_bind+0xb2>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_bind(%d) failed, err=%d\n", s, err));
    sock_set_errno(sock, err_to_errno(err));
 800a8a0:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 800a8a4:	4618      	mov	r0, r3
 800a8a6:	f7ff fe3f 	bl	800a528 <err_to_errno>
 800a8aa:	61b8      	str	r0, [r7, #24]
 800a8ac:	69bb      	ldr	r3, [r7, #24]
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d002      	beq.n	800a8b8 <lwip_bind+0xac>
 800a8b2:	4a0c      	ldr	r2, [pc, #48]	; (800a8e4 <lwip_bind+0xd8>)
 800a8b4:	69bb      	ldr	r3, [r7, #24]
 800a8b6:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 800a8b8:	f04f 33ff 	mov.w	r3, #4294967295
 800a8bc:	e008      	b.n	800a8d0 <lwip_bind+0xc4>
  }

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_bind(%d) succeeded\n", s));
  sock_set_errno(sock, 0);
 800a8be:	2300      	movs	r3, #0
 800a8c0:	61fb      	str	r3, [r7, #28]
 800a8c2:	69fb      	ldr	r3, [r7, #28]
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d002      	beq.n	800a8ce <lwip_bind+0xc2>
 800a8c8:	4a06      	ldr	r2, [pc, #24]	; (800a8e4 <lwip_bind+0xd8>)
 800a8ca:	69fb      	ldr	r3, [r7, #28]
 800a8cc:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return 0;
 800a8ce:	2300      	movs	r3, #0
}
 800a8d0:	4618      	mov	r0, r3
 800a8d2:	3728      	adds	r7, #40	; 0x28
 800a8d4:	46bd      	mov	sp, r7
 800a8d6:	bd80      	pop	{r7, pc}
 800a8d8:	08018b80 	.word	0x08018b80
 800a8dc:	08018c24 	.word	0x08018c24
 800a8e0:	08018bd4 	.word	0x08018bd4
 800a8e4:	2000d418 	.word	0x2000d418

0800a8e8 <lwip_recv_tcp>:
 * until "len" bytes are received or we're otherwise done.
 * Keeps sock->lastdata for peeking or partly copying.
 */
static ssize_t
lwip_recv_tcp(struct lwip_sock *sock, void *mem, size_t len, int flags)
{
 800a8e8:	b580      	push	{r7, lr}
 800a8ea:	b08c      	sub	sp, #48	; 0x30
 800a8ec:	af00      	add	r7, sp, #0
 800a8ee:	60f8      	str	r0, [r7, #12]
 800a8f0:	60b9      	str	r1, [r7, #8]
 800a8f2:	607a      	str	r2, [r7, #4]
 800a8f4:	603b      	str	r3, [r7, #0]
  u8_t apiflags = NETCONN_NOAUTORCVD;
 800a8f6:	2308      	movs	r3, #8
 800a8f8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  ssize_t recvd = 0;
 800a8fc:	2300      	movs	r3, #0
 800a8fe:	62bb      	str	r3, [r7, #40]	; 0x28
  ssize_t recv_left = (len <= SSIZE_MAX) ? (ssize_t)len : SSIZE_MAX;
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	2b00      	cmp	r3, #0
 800a904:	db01      	blt.n	800a90a <lwip_recv_tcp+0x22>
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	e001      	b.n	800a90e <lwip_recv_tcp+0x26>
 800a90a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800a90e:	627b      	str	r3, [r7, #36]	; 0x24

  LWIP_ASSERT("no socket given", sock != NULL);
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	2b00      	cmp	r3, #0
 800a914:	d106      	bne.n	800a924 <lwip_recv_tcp+0x3c>
 800a916:	4b74      	ldr	r3, [pc, #464]	; (800aae8 <lwip_recv_tcp+0x200>)
 800a918:	f240 329e 	movw	r2, #926	; 0x39e
 800a91c:	4973      	ldr	r1, [pc, #460]	; (800aaec <lwip_recv_tcp+0x204>)
 800a91e:	4874      	ldr	r0, [pc, #464]	; (800aaf0 <lwip_recv_tcp+0x208>)
 800a920:	f00c fa9e 	bl	8016e60 <iprintf>
  LWIP_ASSERT("this should be checked internally", NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP);
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	781b      	ldrb	r3, [r3, #0]
 800a92a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a92e:	2b10      	cmp	r3, #16
 800a930:	d006      	beq.n	800a940 <lwip_recv_tcp+0x58>
 800a932:	4b6d      	ldr	r3, [pc, #436]	; (800aae8 <lwip_recv_tcp+0x200>)
 800a934:	f240 329f 	movw	r2, #927	; 0x39f
 800a938:	496e      	ldr	r1, [pc, #440]	; (800aaf4 <lwip_recv_tcp+0x20c>)
 800a93a:	486d      	ldr	r0, [pc, #436]	; (800aaf0 <lwip_recv_tcp+0x208>)
 800a93c:	f00c fa90 	bl	8016e60 <iprintf>

  if (flags & MSG_DONTWAIT) {
 800a940:	683b      	ldr	r3, [r7, #0]
 800a942:	f003 0308 	and.w	r3, r3, #8
 800a946:	2b00      	cmp	r3, #0
 800a948:	d005      	beq.n	800a956 <lwip_recv_tcp+0x6e>
    apiflags |= NETCONN_DONTBLOCK;
 800a94a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a94e:	f043 0304 	orr.w	r3, r3, #4
 800a952:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    err_t err;
    u16_t copylen;

    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: top while sock->lastdata=%p\n", (void *)sock->lastdata.pbuf));
    /* Check if there is data left from the last recv operation. */
    if (sock->lastdata.pbuf) {
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	685b      	ldr	r3, [r3, #4]
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d003      	beq.n	800a966 <lwip_recv_tcp+0x7e>
      p = sock->lastdata.pbuf;
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	685b      	ldr	r3, [r3, #4]
 800a962:	617b      	str	r3, [r7, #20]
 800a964:	e036      	b.n	800a9d4 <lwip_recv_tcp+0xec>
    } else {
      /* No data was left from the previous operation, so we try to get
         some from the network. */
      err = netconn_recv_tcp_pbuf_flags(sock->conn, &p, apiflags);
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800a96e:	f107 0114 	add.w	r1, r7, #20
 800a972:	4618      	mov	r0, r3
 800a974:	f7fe f8e6 	bl	8008b44 <netconn_recv_tcp_pbuf_flags>
 800a978:	4603      	mov	r3, r0
 800a97a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: netconn_recv err=%d, pbuf=%p\n",
                                  err, (void *)p));

      if (err != ERR_OK) {
 800a97e:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 800a982:	2b00      	cmp	r3, #0
 800a984:	d019      	beq.n	800a9ba <lwip_recv_tcp+0xd2>
        if (recvd > 0) {
 800a986:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a988:	2b00      	cmp	r3, #0
 800a98a:	f300 808d 	bgt.w	800aaa8 <lwip_recv_tcp+0x1c0>
          goto lwip_recv_tcp_done;
        }
        /* We should really do some error checking here. */
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: p == NULL, error is \"%s\"!\n",
                                    lwip_strerr(err)));
        sock_set_errno(sock, err_to_errno(err));
 800a98e:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 800a992:	4618      	mov	r0, r3
 800a994:	f7ff fdc8 	bl	800a528 <err_to_errno>
 800a998:	61f8      	str	r0, [r7, #28]
 800a99a:	69fb      	ldr	r3, [r7, #28]
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d002      	beq.n	800a9a6 <lwip_recv_tcp+0xbe>
 800a9a0:	4a55      	ldr	r2, [pc, #340]	; (800aaf8 <lwip_recv_tcp+0x210>)
 800a9a2:	69fb      	ldr	r3, [r7, #28]
 800a9a4:	6013      	str	r3, [r2, #0]
        if (err == ERR_CLSD) {
 800a9a6:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 800a9aa:	f113 0f0f 	cmn.w	r3, #15
 800a9ae:	d101      	bne.n	800a9b4 <lwip_recv_tcp+0xcc>
          return 0;
 800a9b0:	2300      	movs	r3, #0
 800a9b2:	e094      	b.n	800aade <lwip_recv_tcp+0x1f6>
        } else {
          return -1;
 800a9b4:	f04f 33ff 	mov.w	r3, #4294967295
 800a9b8:	e091      	b.n	800aade <lwip_recv_tcp+0x1f6>
        }
      }
      LWIP_ASSERT("p != NULL", p != NULL);
 800a9ba:	697b      	ldr	r3, [r7, #20]
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d106      	bne.n	800a9ce <lwip_recv_tcp+0xe6>
 800a9c0:	4b49      	ldr	r3, [pc, #292]	; (800aae8 <lwip_recv_tcp+0x200>)
 800a9c2:	f240 32c5 	movw	r2, #965	; 0x3c5
 800a9c6:	494d      	ldr	r1, [pc, #308]	; (800aafc <lwip_recv_tcp+0x214>)
 800a9c8:	4849      	ldr	r0, [pc, #292]	; (800aaf0 <lwip_recv_tcp+0x208>)
 800a9ca:	f00c fa49 	bl	8016e60 <iprintf>
      sock->lastdata.pbuf = p;
 800a9ce:	697a      	ldr	r2, [r7, #20]
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	605a      	str	r2, [r3, #4]
    }

    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: buflen=%"U16_F" recv_left=%d off=%d\n",
                                p->tot_len, (int)recv_left, (int)recvd));

    if (recv_left > p->tot_len) {
 800a9d4:	697b      	ldr	r3, [r7, #20]
 800a9d6:	891b      	ldrh	r3, [r3, #8]
 800a9d8:	461a      	mov	r2, r3
 800a9da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9dc:	4293      	cmp	r3, r2
 800a9de:	dd03      	ble.n	800a9e8 <lwip_recv_tcp+0x100>
      copylen = p->tot_len;
 800a9e0:	697b      	ldr	r3, [r7, #20]
 800a9e2:	891b      	ldrh	r3, [r3, #8]
 800a9e4:	847b      	strh	r3, [r7, #34]	; 0x22
 800a9e6:	e001      	b.n	800a9ec <lwip_recv_tcp+0x104>
    } else {
      copylen = (u16_t)recv_left;
 800a9e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9ea:	847b      	strh	r3, [r7, #34]	; 0x22
    }
    if (recvd + copylen < recvd) {
 800a9ec:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800a9ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9f0:	4413      	add	r3, r2
 800a9f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a9f4:	429a      	cmp	r2, r3
 800a9f6:	dd03      	ble.n	800aa00 <lwip_recv_tcp+0x118>
      /* overflow */
      copylen = (u16_t)(SSIZE_MAX - recvd);
 800a9f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9fa:	b29b      	uxth	r3, r3
 800a9fc:	43db      	mvns	r3, r3
 800a9fe:	847b      	strh	r3, [r7, #34]	; 0x22
    }

    /* copy the contents of the received buffer into
    the supplied memory pointer mem */
    pbuf_copy_partial(p, (u8_t *)mem + recvd, copylen, 0);
 800aa00:	6978      	ldr	r0, [r7, #20]
 800aa02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa04:	68ba      	ldr	r2, [r7, #8]
 800aa06:	18d1      	adds	r1, r2, r3
 800aa08:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800aa0a:	2300      	movs	r3, #0
 800aa0c:	f002 fd04 	bl	800d418 <pbuf_copy_partial>

    recvd += copylen;
 800aa10:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800aa12:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aa14:	4413      	add	r3, r2
 800aa16:	62bb      	str	r3, [r7, #40]	; 0x28

    /* TCP combines multiple pbufs for one recv */
    LWIP_ASSERT("invalid copylen, len would underflow", recv_left >= copylen);
 800aa18:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800aa1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aa1c:	429a      	cmp	r2, r3
 800aa1e:	da06      	bge.n	800aa2e <lwip_recv_tcp+0x146>
 800aa20:	4b31      	ldr	r3, [pc, #196]	; (800aae8 <lwip_recv_tcp+0x200>)
 800aa22:	f240 32dd 	movw	r2, #989	; 0x3dd
 800aa26:	4936      	ldr	r1, [pc, #216]	; (800ab00 <lwip_recv_tcp+0x218>)
 800aa28:	4831      	ldr	r0, [pc, #196]	; (800aaf0 <lwip_recv_tcp+0x208>)
 800aa2a:	f00c fa19 	bl	8016e60 <iprintf>
    recv_left -= copylen;
 800aa2e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800aa30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aa32:	1ad3      	subs	r3, r2, r3
 800aa34:	627b      	str	r3, [r7, #36]	; 0x24

    /* Unless we peek the incoming message... */
    if ((flags & MSG_PEEK) == 0) {
 800aa36:	683b      	ldr	r3, [r7, #0]
 800aa38:	f003 0301 	and.w	r3, r3, #1
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d123      	bne.n	800aa88 <lwip_recv_tcp+0x1a0>
      /* ... check if there is data left in the pbuf */
      LWIP_ASSERT("invalid copylen", p->tot_len >= copylen);
 800aa40:	697b      	ldr	r3, [r7, #20]
 800aa42:	891b      	ldrh	r3, [r3, #8]
 800aa44:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800aa46:	429a      	cmp	r2, r3
 800aa48:	d906      	bls.n	800aa58 <lwip_recv_tcp+0x170>
 800aa4a:	4b27      	ldr	r3, [pc, #156]	; (800aae8 <lwip_recv_tcp+0x200>)
 800aa4c:	f240 32e3 	movw	r2, #995	; 0x3e3
 800aa50:	492c      	ldr	r1, [pc, #176]	; (800ab04 <lwip_recv_tcp+0x21c>)
 800aa52:	4827      	ldr	r0, [pc, #156]	; (800aaf0 <lwip_recv_tcp+0x208>)
 800aa54:	f00c fa04 	bl	8016e60 <iprintf>
      if (p->tot_len - copylen > 0) {
 800aa58:	697b      	ldr	r3, [r7, #20]
 800aa5a:	891b      	ldrh	r3, [r3, #8]
 800aa5c:	461a      	mov	r2, r3
 800aa5e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800aa60:	1ad3      	subs	r3, r2, r3
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	dd09      	ble.n	800aa7a <lwip_recv_tcp+0x192>
        /* If so, it should be saved in the sock structure for the next recv call.
           We store the pbuf but hide/free the consumed data: */
        sock->lastdata.pbuf = pbuf_free_header(p, copylen);
 800aa66:	697b      	ldr	r3, [r7, #20]
 800aa68:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800aa6a:	4611      	mov	r1, r2
 800aa6c:	4618      	mov	r0, r3
 800aa6e:	f002 fa9a 	bl	800cfa6 <pbuf_free_header>
 800aa72:	4602      	mov	r2, r0
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	605a      	str	r2, [r3, #4]
 800aa78:	e006      	b.n	800aa88 <lwip_recv_tcp+0x1a0>
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: lastdata now pbuf=%p\n", (void *)sock->lastdata.pbuf));
      } else {
        sock->lastdata.pbuf = NULL;
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	2200      	movs	r2, #0
 800aa7e:	605a      	str	r2, [r3, #4]
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: deleting pbuf=%p\n", (void *)p));
        pbuf_free(p);
 800aa80:	697b      	ldr	r3, [r7, #20]
 800aa82:	4618      	mov	r0, r3
 800aa84:	f002 fac2 	bl	800d00c <pbuf_free>
      }
    }
    /* once we have some data to return, only add more if we don't need to wait */
    apiflags |= NETCONN_DONTBLOCK | NETCONN_NOFIN;
 800aa88:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800aa8c:	f043 0314 	orr.w	r3, r3, #20
 800aa90:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    /* @todo: do we need to support peeking more than one pbuf? */
  } while ((recv_left > 0) && !(flags & MSG_PEEK));
 800aa94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	dd08      	ble.n	800aaac <lwip_recv_tcp+0x1c4>
 800aa9a:	683b      	ldr	r3, [r7, #0]
 800aa9c:	f003 0301 	and.w	r3, r3, #1
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	f43f af58 	beq.w	800a956 <lwip_recv_tcp+0x6e>
lwip_recv_tcp_done:
 800aaa6:	e001      	b.n	800aaac <lwip_recv_tcp+0x1c4>
          goto lwip_recv_tcp_done;
 800aaa8:	bf00      	nop
 800aaaa:	e000      	b.n	800aaae <lwip_recv_tcp+0x1c6>
lwip_recv_tcp_done:
 800aaac:	bf00      	nop
  if ((recvd > 0) && !(flags & MSG_PEEK)) {
 800aaae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	dd0b      	ble.n	800aacc <lwip_recv_tcp+0x1e4>
 800aab4:	683b      	ldr	r3, [r7, #0]
 800aab6:	f003 0301 	and.w	r3, r3, #1
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d106      	bne.n	800aacc <lwip_recv_tcp+0x1e4>
    /* ensure window update after copying all data */
    netconn_tcp_recvd(sock->conn, (size_t)recvd);
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aac4:	4611      	mov	r1, r2
 800aac6:	4618      	mov	r0, r3
 800aac8:	f7fd ff8a 	bl	80089e0 <netconn_tcp_recvd>
  }
  sock_set_errno(sock, 0);
 800aacc:	2300      	movs	r3, #0
 800aace:	61bb      	str	r3, [r7, #24]
 800aad0:	69bb      	ldr	r3, [r7, #24]
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d002      	beq.n	800aadc <lwip_recv_tcp+0x1f4>
 800aad6:	4a08      	ldr	r2, [pc, #32]	; (800aaf8 <lwip_recv_tcp+0x210>)
 800aad8:	69bb      	ldr	r3, [r7, #24]
 800aada:	6013      	str	r3, [r2, #0]
  return recvd;
 800aadc:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800aade:	4618      	mov	r0, r3
 800aae0:	3730      	adds	r7, #48	; 0x30
 800aae2:	46bd      	mov	sp, r7
 800aae4:	bd80      	pop	{r7, pc}
 800aae6:	bf00      	nop
 800aae8:	08018b80 	.word	0x08018b80
 800aaec:	08018c78 	.word	0x08018c78
 800aaf0:	08018bd4 	.word	0x08018bd4
 800aaf4:	08018c88 	.word	0x08018c88
 800aaf8:	2000d418 	.word	0x2000d418
 800aafc:	08018cac 	.word	0x08018cac
 800ab00:	08018cb8 	.word	0x08018cb8
 800ab04:	08018ce0 	.word	0x08018ce0

0800ab08 <lwip_sock_make_addr>:

/* Convert a netbuf's address data to struct sockaddr */
static int
lwip_sock_make_addr(struct netconn *conn, ip_addr_t *fromaddr, u16_t port,
                    struct sockaddr *from, socklen_t *fromlen)
{
 800ab08:	b590      	push	{r4, r7, lr}
 800ab0a:	b08b      	sub	sp, #44	; 0x2c
 800ab0c:	af00      	add	r7, sp, #0
 800ab0e:	60f8      	str	r0, [r7, #12]
 800ab10:	60b9      	str	r1, [r7, #8]
 800ab12:	603b      	str	r3, [r7, #0]
 800ab14:	4613      	mov	r3, r2
 800ab16:	80fb      	strh	r3, [r7, #6]
  int truncated = 0;
 800ab18:	2300      	movs	r3, #0
 800ab1a:	627b      	str	r3, [r7, #36]	; 0x24
  union sockaddr_aligned saddr;

  LWIP_UNUSED_ARG(conn);

  LWIP_ASSERT("fromaddr != NULL", fromaddr != NULL);
 800ab1c:	68bb      	ldr	r3, [r7, #8]
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d106      	bne.n	800ab30 <lwip_sock_make_addr+0x28>
 800ab22:	4b2b      	ldr	r3, [pc, #172]	; (800abd0 <lwip_sock_make_addr+0xc8>)
 800ab24:	f240 4207 	movw	r2, #1031	; 0x407
 800ab28:	492a      	ldr	r1, [pc, #168]	; (800abd4 <lwip_sock_make_addr+0xcc>)
 800ab2a:	482b      	ldr	r0, [pc, #172]	; (800abd8 <lwip_sock_make_addr+0xd0>)
 800ab2c:	f00c f998 	bl	8016e60 <iprintf>
  LWIP_ASSERT("from != NULL", from != NULL);
 800ab30:	683b      	ldr	r3, [r7, #0]
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d106      	bne.n	800ab44 <lwip_sock_make_addr+0x3c>
 800ab36:	4b26      	ldr	r3, [pc, #152]	; (800abd0 <lwip_sock_make_addr+0xc8>)
 800ab38:	f44f 6281 	mov.w	r2, #1032	; 0x408
 800ab3c:	4927      	ldr	r1, [pc, #156]	; (800abdc <lwip_sock_make_addr+0xd4>)
 800ab3e:	4826      	ldr	r0, [pc, #152]	; (800abd8 <lwip_sock_make_addr+0xd0>)
 800ab40:	f00c f98e 	bl	8016e60 <iprintf>
  LWIP_ASSERT("fromlen != NULL", fromlen != NULL);
 800ab44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d106      	bne.n	800ab58 <lwip_sock_make_addr+0x50>
 800ab4a:	4b21      	ldr	r3, [pc, #132]	; (800abd0 <lwip_sock_make_addr+0xc8>)
 800ab4c:	f240 4209 	movw	r2, #1033	; 0x409
 800ab50:	4923      	ldr	r1, [pc, #140]	; (800abe0 <lwip_sock_make_addr+0xd8>)
 800ab52:	4821      	ldr	r0, [pc, #132]	; (800abd8 <lwip_sock_make_addr+0xd0>)
 800ab54:	f00c f984 	bl	8016e60 <iprintf>
    ip4_2_ipv4_mapped_ipv6(ip_2_ip6(fromaddr), ip_2_ip4(fromaddr));
    IP_SET_TYPE(fromaddr, IPADDR_TYPE_V6);
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  IPADDR_PORT_TO_SOCKADDR(&saddr, fromaddr, port);
 800ab58:	f107 0314 	add.w	r3, r7, #20
 800ab5c:	2210      	movs	r2, #16
 800ab5e:	701a      	strb	r2, [r3, #0]
 800ab60:	f107 0314 	add.w	r3, r7, #20
 800ab64:	2202      	movs	r2, #2
 800ab66:	705a      	strb	r2, [r3, #1]
 800ab68:	f107 0414 	add.w	r4, r7, #20
 800ab6c:	88fb      	ldrh	r3, [r7, #6]
 800ab6e:	4618      	mov	r0, r3
 800ab70:	f000 fe72 	bl	800b858 <lwip_htons>
 800ab74:	4603      	mov	r3, r0
 800ab76:	8063      	strh	r3, [r4, #2]
 800ab78:	f107 0314 	add.w	r3, r7, #20
 800ab7c:	68ba      	ldr	r2, [r7, #8]
 800ab7e:	6812      	ldr	r2, [r2, #0]
 800ab80:	605a      	str	r2, [r3, #4]
 800ab82:	f107 0314 	add.w	r3, r7, #20
 800ab86:	3308      	adds	r3, #8
 800ab88:	2208      	movs	r2, #8
 800ab8a:	2100      	movs	r1, #0
 800ab8c:	4618      	mov	r0, r3
 800ab8e:	f00c f95e 	bl	8016e4e <memset>
  if (*fromlen < saddr.sa.sa_len) {
 800ab92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	7d3a      	ldrb	r2, [r7, #20]
 800ab98:	4293      	cmp	r3, r2
 800ab9a:	d202      	bcs.n	800aba2 <lwip_sock_make_addr+0x9a>
    truncated = 1;
 800ab9c:	2301      	movs	r3, #1
 800ab9e:	627b      	str	r3, [r7, #36]	; 0x24
 800aba0:	e008      	b.n	800abb4 <lwip_sock_make_addr+0xac>
  } else if (*fromlen > saddr.sa.sa_len) {
 800aba2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	7d3a      	ldrb	r2, [r7, #20]
 800aba8:	4293      	cmp	r3, r2
 800abaa:	d903      	bls.n	800abb4 <lwip_sock_make_addr+0xac>
    *fromlen = saddr.sa.sa_len;
 800abac:	7d3b      	ldrb	r3, [r7, #20]
 800abae:	461a      	mov	r2, r3
 800abb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abb2:	601a      	str	r2, [r3, #0]
  }
  MEMCPY(from, &saddr, *fromlen);
 800abb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abb6:	681a      	ldr	r2, [r3, #0]
 800abb8:	f107 0314 	add.w	r3, r7, #20
 800abbc:	4619      	mov	r1, r3
 800abbe:	6838      	ldr	r0, [r7, #0]
 800abc0:	f00c f921 	bl	8016e06 <memcpy>
  return truncated;
 800abc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800abc6:	4618      	mov	r0, r3
 800abc8:	372c      	adds	r7, #44	; 0x2c
 800abca:	46bd      	mov	sp, r7
 800abcc:	bd90      	pop	{r4, r7, pc}
 800abce:	bf00      	nop
 800abd0:	08018b80 	.word	0x08018b80
 800abd4:	08018cf0 	.word	0x08018cf0
 800abd8:	08018bd4 	.word	0x08018bd4
 800abdc:	08018d04 	.word	0x08018d04
 800abe0:	08018d14 	.word	0x08018d14

0800abe4 <lwip_recv_tcp_from>:

#if LWIP_TCP
/* Helper function to get a tcp socket's remote address info */
static int
lwip_recv_tcp_from(struct lwip_sock *sock, struct sockaddr *from, socklen_t *fromlen, const char *dbg_fn, int dbg_s, ssize_t dbg_ret)
{
 800abe4:	b580      	push	{r7, lr}
 800abe6:	b088      	sub	sp, #32
 800abe8:	af02      	add	r7, sp, #8
 800abea:	60f8      	str	r0, [r7, #12]
 800abec:	60b9      	str	r1, [r7, #8]
 800abee:	607a      	str	r2, [r7, #4]
 800abf0:	603b      	str	r3, [r7, #0]
  if (sock == NULL) {
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d101      	bne.n	800abfc <lwip_recv_tcp_from+0x18>
    return 0;
 800abf8:	2300      	movs	r3, #0
 800abfa:	e021      	b.n	800ac40 <lwip_recv_tcp_from+0x5c>
  LWIP_UNUSED_ARG(dbg_fn);
  LWIP_UNUSED_ARG(dbg_s);
  LWIP_UNUSED_ARG(dbg_ret);

#if !SOCKETS_DEBUG
  if (from && fromlen)
 800abfc:	68bb      	ldr	r3, [r7, #8]
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d01d      	beq.n	800ac3e <lwip_recv_tcp_from+0x5a>
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d01a      	beq.n	800ac3e <lwip_recv_tcp_from+0x5a>
#endif /* !SOCKETS_DEBUG */
  {
    /* get remote addr/port from tcp_pcb */
    u16_t port;
    ip_addr_t tmpaddr;
    netconn_getaddr(sock->conn, &tmpaddr, &port, 0);
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	6818      	ldr	r0, [r3, #0]
 800ac0c:	f107 0216 	add.w	r2, r7, #22
 800ac10:	f107 0110 	add.w	r1, r7, #16
 800ac14:	2300      	movs	r3, #0
 800ac16:	f7fd fd61 	bl	80086dc <netconn_getaddr>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("%s(%d):  addr=", dbg_fn, dbg_s));
    ip_addr_debug_print_val(SOCKETS_DEBUG, tmpaddr);
    LWIP_DEBUGF(SOCKETS_DEBUG, (" port=%"U16_F" len=%d\n", port, (int)dbg_ret));
    if (from && fromlen) {
 800ac1a:	68bb      	ldr	r3, [r7, #8]
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d00e      	beq.n	800ac3e <lwip_recv_tcp_from+0x5a>
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d00b      	beq.n	800ac3e <lwip_recv_tcp_from+0x5a>
      return lwip_sock_make_addr(sock->conn, &tmpaddr, port, from, fromlen);
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	6818      	ldr	r0, [r3, #0]
 800ac2a:	8afa      	ldrh	r2, [r7, #22]
 800ac2c:	f107 0110 	add.w	r1, r7, #16
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	9300      	str	r3, [sp, #0]
 800ac34:	68bb      	ldr	r3, [r7, #8]
 800ac36:	f7ff ff67 	bl	800ab08 <lwip_sock_make_addr>
 800ac3a:	4603      	mov	r3, r0
 800ac3c:	e000      	b.n	800ac40 <lwip_recv_tcp_from+0x5c>
    }
  }
  return 0;
 800ac3e:	2300      	movs	r3, #0
}
 800ac40:	4618      	mov	r0, r3
 800ac42:	3718      	adds	r7, #24
 800ac44:	46bd      	mov	sp, r7
 800ac46:	bd80      	pop	{r7, pc}

0800ac48 <lwip_recvfrom_udp_raw>:
/* Helper function to receive a netbuf from a udp or raw netconn.
 * Keeps sock->lastdata for peeking.
 */
static err_t
lwip_recvfrom_udp_raw(struct lwip_sock *sock, int flags, struct msghdr *msg, u16_t *datagram_len, int dbg_s)
{
 800ac48:	b590      	push	{r4, r7, lr}
 800ac4a:	b08d      	sub	sp, #52	; 0x34
 800ac4c:	af02      	add	r7, sp, #8
 800ac4e:	60f8      	str	r0, [r7, #12]
 800ac50:	60b9      	str	r1, [r7, #8]
 800ac52:	607a      	str	r2, [r7, #4]
 800ac54:	603b      	str	r3, [r7, #0]
  err_t err;
  u16_t buflen, copylen, copied;
  int i;

  LWIP_UNUSED_ARG(dbg_s);
  LWIP_ERROR("lwip_recvfrom_udp_raw: invalid arguments", (msg->msg_iov != NULL) || (msg->msg_iovlen <= 0), return ERR_ARG;);
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	689b      	ldr	r3, [r3, #8]
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d10d      	bne.n	800ac7a <lwip_recvfrom_udp_raw+0x32>
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	68db      	ldr	r3, [r3, #12]
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	dd09      	ble.n	800ac7a <lwip_recvfrom_udp_raw+0x32>
 800ac66:	4b5e      	ldr	r3, [pc, #376]	; (800ade0 <lwip_recvfrom_udp_raw+0x198>)
 800ac68:	f240 4249 	movw	r2, #1097	; 0x449
 800ac6c:	495d      	ldr	r1, [pc, #372]	; (800ade4 <lwip_recvfrom_udp_raw+0x19c>)
 800ac6e:	485e      	ldr	r0, [pc, #376]	; (800ade8 <lwip_recvfrom_udp_raw+0x1a0>)
 800ac70:	f00c f8f6 	bl	8016e60 <iprintf>
 800ac74:	f06f 030f 	mvn.w	r3, #15
 800ac78:	e0ad      	b.n	800add6 <lwip_recvfrom_udp_raw+0x18e>

  if (flags & MSG_DONTWAIT) {
 800ac7a:	68bb      	ldr	r3, [r7, #8]
 800ac7c:	f003 0308 	and.w	r3, r3, #8
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d003      	beq.n	800ac8c <lwip_recvfrom_udp_raw+0x44>
    apiflags = NETCONN_DONTBLOCK;
 800ac84:	2304      	movs	r3, #4
 800ac86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ac8a:	e002      	b.n	800ac92 <lwip_recvfrom_udp_raw+0x4a>
  } else {
    apiflags = 0;
 800ac8c:	2300      	movs	r3, #0
 800ac8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom_udp_raw[UDP/RAW]: top sock->lastdata=%p\n", (void *)sock->lastdata.netbuf));
  /* Check if there is data left from the last recv operation. */
  buf = sock->lastdata.netbuf;
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	685b      	ldr	r3, [r3, #4]
 800ac96:	613b      	str	r3, [r7, #16]
  if (buf == NULL) {
 800ac98:	693b      	ldr	r3, [r7, #16]
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d11e      	bne.n	800acdc <lwip_recvfrom_udp_raw+0x94>
    /* No data was left from the previous operation, so we try to get
        some from the network. */
    err = netconn_recv_udp_raw_netbuf_flags(sock->conn, &buf, apiflags);
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800aca6:	f107 0110 	add.w	r1, r7, #16
 800acaa:	4618      	mov	r0, r3
 800acac:	f7fd ff76 	bl	8008b9c <netconn_recv_udp_raw_netbuf_flags>
 800acb0:	4603      	mov	r3, r0
 800acb2:	76fb      	strb	r3, [r7, #27]
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom_udp_raw[UDP/RAW]: netconn_recv err=%d, netbuf=%p\n",
                                err, (void *)buf));

    if (err != ERR_OK) {
 800acb4:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d002      	beq.n	800acc2 <lwip_recvfrom_udp_raw+0x7a>
      return err;
 800acbc:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800acc0:	e089      	b.n	800add6 <lwip_recvfrom_udp_raw+0x18e>
    }
    LWIP_ASSERT("buf != NULL", buf != NULL);
 800acc2:	693b      	ldr	r3, [r7, #16]
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d106      	bne.n	800acd6 <lwip_recvfrom_udp_raw+0x8e>
 800acc8:	4b45      	ldr	r3, [pc, #276]	; (800ade0 <lwip_recvfrom_udp_raw+0x198>)
 800acca:	f240 425e 	movw	r2, #1118	; 0x45e
 800acce:	4947      	ldr	r1, [pc, #284]	; (800adec <lwip_recvfrom_udp_raw+0x1a4>)
 800acd0:	4845      	ldr	r0, [pc, #276]	; (800ade8 <lwip_recvfrom_udp_raw+0x1a0>)
 800acd2:	f00c f8c5 	bl	8016e60 <iprintf>
    sock->lastdata.netbuf = buf;
 800acd6:	693a      	ldr	r2, [r7, #16]
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	605a      	str	r2, [r3, #4]
  }
  buflen = buf->p->tot_len;
 800acdc:	693b      	ldr	r3, [r7, #16]
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	891b      	ldrh	r3, [r3, #8]
 800ace2:	833b      	strh	r3, [r7, #24]
  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom_udp_raw: buflen=%"U16_F"\n", buflen));

  copied = 0;
 800ace4:	2300      	movs	r3, #0
 800ace6:	847b      	strh	r3, [r7, #34]	; 0x22
  /* copy the pbuf payload into the iovs */
  for (i = 0; (i < msg->msg_iovlen) && (copied < buflen); i++) {
 800ace8:	2300      	movs	r3, #0
 800acea:	61fb      	str	r3, [r7, #28]
 800acec:	e029      	b.n	800ad42 <lwip_recvfrom_udp_raw+0xfa>
    u16_t len_left = (u16_t)(buflen - copied);
 800acee:	8b3a      	ldrh	r2, [r7, #24]
 800acf0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800acf2:	1ad3      	subs	r3, r2, r3
 800acf4:	82fb      	strh	r3, [r7, #22]
    if (msg->msg_iov[i].iov_len > len_left) {
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	689a      	ldr	r2, [r3, #8]
 800acfa:	69fb      	ldr	r3, [r7, #28]
 800acfc:	00db      	lsls	r3, r3, #3
 800acfe:	4413      	add	r3, r2
 800ad00:	685a      	ldr	r2, [r3, #4]
 800ad02:	8afb      	ldrh	r3, [r7, #22]
 800ad04:	429a      	cmp	r2, r3
 800ad06:	d902      	bls.n	800ad0e <lwip_recvfrom_udp_raw+0xc6>
      copylen = len_left;
 800ad08:	8afb      	ldrh	r3, [r7, #22]
 800ad0a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800ad0c:	e006      	b.n	800ad1c <lwip_recvfrom_udp_raw+0xd4>
    } else {
      copylen = (u16_t)msg->msg_iov[i].iov_len;
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	689a      	ldr	r2, [r3, #8]
 800ad12:	69fb      	ldr	r3, [r7, #28]
 800ad14:	00db      	lsls	r3, r3, #3
 800ad16:	4413      	add	r3, r2
 800ad18:	685b      	ldr	r3, [r3, #4]
 800ad1a:	84bb      	strh	r3, [r7, #36]	; 0x24
    }

    /* copy the contents of the received buffer into
        the supplied memory buffer */
    pbuf_copy_partial(buf->p, (u8_t *)msg->msg_iov[i].iov_base, copylen, copied);
 800ad1c:	693b      	ldr	r3, [r7, #16]
 800ad1e:	6818      	ldr	r0, [r3, #0]
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	689a      	ldr	r2, [r3, #8]
 800ad24:	69fb      	ldr	r3, [r7, #28]
 800ad26:	00db      	lsls	r3, r3, #3
 800ad28:	4413      	add	r3, r2
 800ad2a:	6819      	ldr	r1, [r3, #0]
 800ad2c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ad2e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800ad30:	f002 fb72 	bl	800d418 <pbuf_copy_partial>
    copied = (u16_t)(copied + copylen);
 800ad34:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800ad36:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ad38:	4413      	add	r3, r2
 800ad3a:	847b      	strh	r3, [r7, #34]	; 0x22
  for (i = 0; (i < msg->msg_iovlen) && (copied < buflen); i++) {
 800ad3c:	69fb      	ldr	r3, [r7, #28]
 800ad3e:	3301      	adds	r3, #1
 800ad40:	61fb      	str	r3, [r7, #28]
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	68db      	ldr	r3, [r3, #12]
 800ad46:	69fa      	ldr	r2, [r7, #28]
 800ad48:	429a      	cmp	r2, r3
 800ad4a:	da03      	bge.n	800ad54 <lwip_recvfrom_udp_raw+0x10c>
 800ad4c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800ad4e:	8b3b      	ldrh	r3, [r7, #24]
 800ad50:	429a      	cmp	r2, r3
 800ad52:	d3cc      	bcc.n	800acee <lwip_recvfrom_udp_raw+0xa6>
  }

  /* Check to see from where the data was.*/
#if !SOCKETS_DEBUG
  if (msg->msg_name && msg->msg_namelen)
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d01a      	beq.n	800ad92 <lwip_recvfrom_udp_raw+0x14a>
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	685b      	ldr	r3, [r3, #4]
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d016      	beq.n	800ad92 <lwip_recvfrom_udp_raw+0x14a>
#endif /* !SOCKETS_DEBUG */
  {
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom_udp_raw(%d):  addr=", dbg_s));
    ip_addr_debug_print_val(SOCKETS_DEBUG, *netbuf_fromaddr(buf));
    LWIP_DEBUGF(SOCKETS_DEBUG, (" port=%"U16_F" len=%d\n", netbuf_fromport(buf), copied));
    if (msg->msg_name && msg->msg_namelen) {
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d012      	beq.n	800ad92 <lwip_recvfrom_udp_raw+0x14a>
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	685b      	ldr	r3, [r3, #4]
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d00e      	beq.n	800ad92 <lwip_recvfrom_udp_raw+0x14a>
      lwip_sock_make_addr(sock->conn, netbuf_fromaddr(buf), netbuf_fromport(buf),
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	6818      	ldr	r0, [r3, #0]
 800ad78:	693b      	ldr	r3, [r7, #16]
 800ad7a:	f103 0108 	add.w	r1, r3, #8
 800ad7e:	693b      	ldr	r3, [r7, #16]
 800ad80:	899a      	ldrh	r2, [r3, #12]
                          (struct sockaddr *)msg->msg_name, &msg->msg_namelen);
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	681c      	ldr	r4, [r3, #0]
      lwip_sock_make_addr(sock->conn, netbuf_fromaddr(buf), netbuf_fromport(buf),
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	3304      	adds	r3, #4
 800ad8a:	9300      	str	r3, [sp, #0]
 800ad8c:	4623      	mov	r3, r4
 800ad8e:	f7ff febb 	bl	800ab08 <lwip_sock_make_addr>
    }
  }

  /* Initialize flag output */
  msg->msg_flags = 0;
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	2200      	movs	r2, #0
 800ad96:	619a      	str	r2, [r3, #24]

  if (msg->msg_control) {
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	691b      	ldr	r3, [r3, #16]
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d007      	beq.n	800adb0 <lwip_recvfrom_udp_raw+0x168>
    u8_t wrote_msg = 0;
 800ada0:	2300      	movs	r3, #0
 800ada2:	757b      	strb	r3, [r7, #21]
#endif /* LWIP_IPV4 */
      }
    }
#endif /* LWIP_NETBUF_RECVINFO */

    if (!wrote_msg) {
 800ada4:	7d7b      	ldrb	r3, [r7, #21]
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d102      	bne.n	800adb0 <lwip_recvfrom_udp_raw+0x168>
      msg->msg_controllen = 0;
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	2200      	movs	r2, #0
 800adae:	615a      	str	r2, [r3, #20]
    }
  }

  /* If we don't peek the incoming message: zero lastdata pointer and free the netbuf */
  if ((flags & MSG_PEEK) == 0) {
 800adb0:	68bb      	ldr	r3, [r7, #8]
 800adb2:	f003 0301 	and.w	r3, r3, #1
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d106      	bne.n	800adc8 <lwip_recvfrom_udp_raw+0x180>
    sock->lastdata.netbuf = NULL;
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	2200      	movs	r2, #0
 800adbe:	605a      	str	r2, [r3, #4]
    netbuf_delete(buf);
 800adc0:	693b      	ldr	r3, [r7, #16]
 800adc2:	4618      	mov	r0, r3
 800adc4:	f7ff fbce 	bl	800a564 <netbuf_delete>
  }
  if (datagram_len) {
 800adc8:	683b      	ldr	r3, [r7, #0]
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d002      	beq.n	800add4 <lwip_recvfrom_udp_raw+0x18c>
    *datagram_len = buflen;
 800adce:	683b      	ldr	r3, [r7, #0]
 800add0:	8b3a      	ldrh	r2, [r7, #24]
 800add2:	801a      	strh	r2, [r3, #0]
  }
  return ERR_OK;
 800add4:	2300      	movs	r3, #0
}
 800add6:	4618      	mov	r0, r3
 800add8:	372c      	adds	r7, #44	; 0x2c
 800adda:	46bd      	mov	sp, r7
 800addc:	bd90      	pop	{r4, r7, pc}
 800adde:	bf00      	nop
 800ade0:	08018b80 	.word	0x08018b80
 800ade4:	08018d24 	.word	0x08018d24
 800ade8:	08018bd4 	.word	0x08018bd4
 800adec:	08018d50 	.word	0x08018d50

0800adf0 <lwip_recvfrom>:

ssize_t
lwip_recvfrom(int s, void *mem, size_t len, int flags,
              struct sockaddr *from, socklen_t *fromlen)
{
 800adf0:	b580      	push	{r7, lr}
 800adf2:	b096      	sub	sp, #88	; 0x58
 800adf4:	af02      	add	r7, sp, #8
 800adf6:	60f8      	str	r0, [r7, #12]
 800adf8:	60b9      	str	r1, [r7, #8]
 800adfa:	607a      	str	r2, [r7, #4]
 800adfc:	603b      	str	r3, [r7, #0]
  struct lwip_sock *sock;
  ssize_t ret;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom(%d, %p, %"SZT_F", 0x%x, ..)\n", s, mem, len, flags));
  sock = get_socket(s);
 800adfe:	68f8      	ldr	r0, [r7, #12]
 800ae00:	f7ff fc80 	bl	800a704 <get_socket>
 800ae04:	64f8      	str	r0, [r7, #76]	; 0x4c
  if (!sock) {
 800ae06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d102      	bne.n	800ae12 <lwip_recvfrom+0x22>
    return -1;
 800ae0c:	f04f 33ff 	mov.w	r3, #4294967295
 800ae10:	e077      	b.n	800af02 <lwip_recvfrom+0x112>
  }
#if LWIP_TCP
  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
 800ae12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	781b      	ldrb	r3, [r3, #0]
 800ae18:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ae1c:	2b10      	cmp	r3, #16
 800ae1e:	d112      	bne.n	800ae46 <lwip_recvfrom+0x56>
    ret = lwip_recv_tcp(sock, mem, len, flags);
 800ae20:	683b      	ldr	r3, [r7, #0]
 800ae22:	687a      	ldr	r2, [r7, #4]
 800ae24:	68b9      	ldr	r1, [r7, #8]
 800ae26:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800ae28:	f7ff fd5e 	bl	800a8e8 <lwip_recv_tcp>
 800ae2c:	6478      	str	r0, [r7, #68]	; 0x44
    lwip_recv_tcp_from(sock, from, fromlen, "lwip_recvfrom", s, ret);
 800ae2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ae30:	9301      	str	r3, [sp, #4]
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	9300      	str	r3, [sp, #0]
 800ae36:	4b35      	ldr	r3, [pc, #212]	; (800af0c <lwip_recvfrom+0x11c>)
 800ae38:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ae3a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ae3c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800ae3e:	f7ff fed1 	bl	800abe4 <lwip_recv_tcp_from>
    done_socket(sock);
    return ret;
 800ae42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ae44:	e05d      	b.n	800af02 <lwip_recvfrom+0x112>
  } else
#endif
  {
    u16_t datagram_len = 0;
 800ae46:	2300      	movs	r3, #0
 800ae48:	877b      	strh	r3, [r7, #58]	; 0x3a
    struct iovec vec;
    struct msghdr msg;
    err_t err;
    vec.iov_base = mem;
 800ae4a:	68bb      	ldr	r3, [r7, #8]
 800ae4c:	633b      	str	r3, [r7, #48]	; 0x30
    vec.iov_len = len;
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	637b      	str	r3, [r7, #52]	; 0x34
    msg.msg_control = NULL;
 800ae52:	2300      	movs	r3, #0
 800ae54:	627b      	str	r3, [r7, #36]	; 0x24
    msg.msg_controllen = 0;
 800ae56:	2300      	movs	r3, #0
 800ae58:	62bb      	str	r3, [r7, #40]	; 0x28
    msg.msg_flags = 0;
 800ae5a:	2300      	movs	r3, #0
 800ae5c:	62fb      	str	r3, [r7, #44]	; 0x2c
    msg.msg_iov = &vec;
 800ae5e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800ae62:	61fb      	str	r3, [r7, #28]
    msg.msg_iovlen = 1;
 800ae64:	2301      	movs	r3, #1
 800ae66:	623b      	str	r3, [r7, #32]
    msg.msg_name = from;
 800ae68:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ae6a:	617b      	str	r3, [r7, #20]
    msg.msg_namelen = (fromlen ? *fromlen : 0);
 800ae6c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d002      	beq.n	800ae78 <lwip_recvfrom+0x88>
 800ae72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	e000      	b.n	800ae7a <lwip_recvfrom+0x8a>
 800ae78:	2300      	movs	r3, #0
 800ae7a:	61bb      	str	r3, [r7, #24]
    err = lwip_recvfrom_udp_raw(sock, flags, &msg, &datagram_len, s);
 800ae7c:	f107 013a 	add.w	r1, r7, #58	; 0x3a
 800ae80:	f107 0214 	add.w	r2, r7, #20
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	9300      	str	r3, [sp, #0]
 800ae88:	460b      	mov	r3, r1
 800ae8a:	6839      	ldr	r1, [r7, #0]
 800ae8c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800ae8e:	f7ff fedb 	bl	800ac48 <lwip_recvfrom_udp_raw>
 800ae92:	4603      	mov	r3, r0
 800ae94:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
    if (err != ERR_OK) {
 800ae98:	f997 304b 	ldrsb.w	r3, [r7, #75]	; 0x4b
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d00e      	beq.n	800aebe <lwip_recvfrom+0xce>
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom[UDP/RAW](%d): buf == NULL, error is \"%s\"!\n",
                                  s, lwip_strerr(err)));
      sock_set_errno(sock, err_to_errno(err));
 800aea0:	f997 304b 	ldrsb.w	r3, [r7, #75]	; 0x4b
 800aea4:	4618      	mov	r0, r3
 800aea6:	f7ff fb3f 	bl	800a528 <err_to_errno>
 800aeaa:	63f8      	str	r0, [r7, #60]	; 0x3c
 800aeac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d002      	beq.n	800aeb8 <lwip_recvfrom+0xc8>
 800aeb2:	4a17      	ldr	r2, [pc, #92]	; (800af10 <lwip_recvfrom+0x120>)
 800aeb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aeb6:	6013      	str	r3, [r2, #0]
      done_socket(sock);
      return -1;
 800aeb8:	f04f 33ff 	mov.w	r3, #4294967295
 800aebc:	e021      	b.n	800af02 <lwip_recvfrom+0x112>
    }
    ret = (ssize_t)LWIP_MIN(LWIP_MIN(len, datagram_len), SSIZE_MAX);
 800aebe:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800aec0:	461a      	mov	r2, r3
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	4293      	cmp	r3, r2
 800aec6:	bf28      	it	cs
 800aec8:	4613      	movcs	r3, r2
 800aeca:	4a12      	ldr	r2, [pc, #72]	; (800af14 <lwip_recvfrom+0x124>)
 800aecc:	4293      	cmp	r3, r2
 800aece:	d806      	bhi.n	800aede <lwip_recvfrom+0xee>
 800aed0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800aed2:	461a      	mov	r2, r3
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	4293      	cmp	r3, r2
 800aed8:	bf28      	it	cs
 800aeda:	4613      	movcs	r3, r2
 800aedc:	e001      	b.n	800aee2 <lwip_recvfrom+0xf2>
 800aede:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800aee2:	647b      	str	r3, [r7, #68]	; 0x44
    if (fromlen) {
 800aee4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d002      	beq.n	800aef0 <lwip_recvfrom+0x100>
      *fromlen = msg.msg_namelen;
 800aeea:	69ba      	ldr	r2, [r7, #24]
 800aeec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800aeee:	601a      	str	r2, [r3, #0]
    }
  }

  sock_set_errno(sock, 0);
 800aef0:	2300      	movs	r3, #0
 800aef2:	643b      	str	r3, [r7, #64]	; 0x40
 800aef4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d002      	beq.n	800af00 <lwip_recvfrom+0x110>
 800aefa:	4a05      	ldr	r2, [pc, #20]	; (800af10 <lwip_recvfrom+0x120>)
 800aefc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aefe:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return ret;
 800af00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800af02:	4618      	mov	r0, r3
 800af04:	3750      	adds	r7, #80	; 0x50
 800af06:	46bd      	mov	sp, r7
 800af08:	bd80      	pop	{r7, pc}
 800af0a:	bf00      	nop
 800af0c:	08018d5c 	.word	0x08018d5c
 800af10:	2000d418 	.word	0x2000d418
 800af14:	7ffffffe 	.word	0x7ffffffe

0800af18 <lwip_send>:
#endif /* LWIP_UDP || LWIP_RAW */
}

ssize_t
lwip_send(int s, const void *data, size_t size, int flags)
{
 800af18:	b580      	push	{r7, lr}
 800af1a:	b08a      	sub	sp, #40	; 0x28
 800af1c:	af02      	add	r7, sp, #8
 800af1e:	60f8      	str	r0, [r7, #12]
 800af20:	60b9      	str	r1, [r7, #8]
 800af22:	607a      	str	r2, [r7, #4]
 800af24:	603b      	str	r3, [r7, #0]
  size_t written;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_send(%d, data=%p, size=%"SZT_F", flags=0x%x)\n",
                              s, data, size, flags));

  sock = get_socket(s);
 800af26:	68f8      	ldr	r0, [r7, #12]
 800af28:	f7ff fbec 	bl	800a704 <get_socket>
 800af2c:	61f8      	str	r0, [r7, #28]
  if (!sock) {
 800af2e:	69fb      	ldr	r3, [r7, #28]
 800af30:	2b00      	cmp	r3, #0
 800af32:	d102      	bne.n	800af3a <lwip_send+0x22>
    return -1;
 800af34:	f04f 33ff 	mov.w	r3, #4294967295
 800af38:	e046      	b.n	800afc8 <lwip_send+0xb0>
  }

  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_TCP) {
 800af3a:	69fb      	ldr	r3, [r7, #28]
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	781b      	ldrb	r3, [r3, #0]
 800af40:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800af44:	2b10      	cmp	r3, #16
 800af46:	d00b      	beq.n	800af60 <lwip_send+0x48>
#if (LWIP_UDP || LWIP_RAW)
    done_socket(sock);
    return lwip_sendto(s, data, size, flags, NULL, 0);
 800af48:	2300      	movs	r3, #0
 800af4a:	9301      	str	r3, [sp, #4]
 800af4c:	2300      	movs	r3, #0
 800af4e:	9300      	str	r3, [sp, #0]
 800af50:	683b      	ldr	r3, [r7, #0]
 800af52:	687a      	ldr	r2, [r7, #4]
 800af54:	68b9      	ldr	r1, [r7, #8]
 800af56:	68f8      	ldr	r0, [r7, #12]
 800af58:	f000 f83c 	bl	800afd4 <lwip_sendto>
 800af5c:	4603      	mov	r3, r0
 800af5e:	e033      	b.n	800afc8 <lwip_send+0xb0>
    return -1;
#endif /* (LWIP_UDP || LWIP_RAW) */
  }

  write_flags = (u8_t)(NETCONN_COPY |
                       ((flags & MSG_MORE)     ? NETCONN_MORE      : 0) |
 800af60:	683b      	ldr	r3, [r7, #0]
 800af62:	f003 0310 	and.w	r3, r3, #16
  write_flags = (u8_t)(NETCONN_COPY |
 800af66:	2b00      	cmp	r3, #0
 800af68:	d001      	beq.n	800af6e <lwip_send+0x56>
 800af6a:	2203      	movs	r2, #3
 800af6c:	e000      	b.n	800af70 <lwip_send+0x58>
 800af6e:	2201      	movs	r2, #1
                       ((flags & MSG_MORE)     ? NETCONN_MORE      : 0) |
 800af70:	683b      	ldr	r3, [r7, #0]
 800af72:	105b      	asrs	r3, r3, #1
 800af74:	b25b      	sxtb	r3, r3
 800af76:	f003 0304 	and.w	r3, r3, #4
 800af7a:	b25b      	sxtb	r3, r3
 800af7c:	4313      	orrs	r3, r2
 800af7e:	b25b      	sxtb	r3, r3
  write_flags = (u8_t)(NETCONN_COPY |
 800af80:	76fb      	strb	r3, [r7, #27]
                       ((flags & MSG_DONTWAIT) ? NETCONN_DONTBLOCK : 0));
  written = 0;
 800af82:	2300      	movs	r3, #0
 800af84:	613b      	str	r3, [r7, #16]
  err = netconn_write_partly(sock->conn, data, size, write_flags, &written);
 800af86:	69fb      	ldr	r3, [r7, #28]
 800af88:	6818      	ldr	r0, [r3, #0]
 800af8a:	7efa      	ldrb	r2, [r7, #27]
 800af8c:	f107 0310 	add.w	r3, r7, #16
 800af90:	9300      	str	r3, [sp, #0]
 800af92:	4613      	mov	r3, r2
 800af94:	687a      	ldr	r2, [r7, #4]
 800af96:	68b9      	ldr	r1, [r7, #8]
 800af98:	f7fd fe5a 	bl	8008c50 <netconn_write_partly>
 800af9c:	4603      	mov	r3, r0
 800af9e:	76bb      	strb	r3, [r7, #26]

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_send(%d) err=%d written=%"SZT_F"\n", s, err, written));
  sock_set_errno(sock, err_to_errno(err));
 800afa0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800afa4:	4618      	mov	r0, r3
 800afa6:	f7ff fabf 	bl	800a528 <err_to_errno>
 800afaa:	6178      	str	r0, [r7, #20]
 800afac:	697b      	ldr	r3, [r7, #20]
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d002      	beq.n	800afb8 <lwip_send+0xa0>
 800afb2:	4a07      	ldr	r2, [pc, #28]	; (800afd0 <lwip_send+0xb8>)
 800afb4:	697b      	ldr	r3, [r7, #20]
 800afb6:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  /* casting 'written' to ssize_t is OK here since the netconn API limits it to SSIZE_MAX */
  return (err == ERR_OK ? (ssize_t)written : -1);
 800afb8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d101      	bne.n	800afc4 <lwip_send+0xac>
 800afc0:	693b      	ldr	r3, [r7, #16]
 800afc2:	e001      	b.n	800afc8 <lwip_send+0xb0>
 800afc4:	f04f 33ff 	mov.w	r3, #4294967295
}
 800afc8:	4618      	mov	r0, r3
 800afca:	3720      	adds	r7, #32
 800afcc:	46bd      	mov	sp, r7
 800afce:	bd80      	pop	{r7, pc}
 800afd0:	2000d418 	.word	0x2000d418

0800afd4 <lwip_sendto>:
}

ssize_t
lwip_sendto(int s, const void *data, size_t size, int flags,
            const struct sockaddr *to, socklen_t tolen)
{
 800afd4:	b580      	push	{r7, lr}
 800afd6:	b08e      	sub	sp, #56	; 0x38
 800afd8:	af00      	add	r7, sp, #0
 800afda:	60f8      	str	r0, [r7, #12]
 800afdc:	60b9      	str	r1, [r7, #8]
 800afde:	607a      	str	r2, [r7, #4]
 800afe0:	603b      	str	r3, [r7, #0]
  err_t err;
  u16_t short_size;
  u16_t remote_port;
  struct netbuf buf;

  sock = get_socket(s);
 800afe2:	68f8      	ldr	r0, [r7, #12]
 800afe4:	f7ff fb8e 	bl	800a704 <get_socket>
 800afe8:	6338      	str	r0, [r7, #48]	; 0x30
  if (!sock) {
 800afea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afec:	2b00      	cmp	r3, #0
 800afee:	d102      	bne.n	800aff6 <lwip_sendto+0x22>
    return -1;
 800aff0:	f04f 33ff 	mov.w	r3, #4294967295
 800aff4:	e093      	b.n	800b11e <lwip_sendto+0x14a>
  }

  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
 800aff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	781b      	ldrb	r3, [r3, #0]
 800affc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b000:	2b10      	cmp	r3, #16
 800b002:	d107      	bne.n	800b014 <lwip_sendto+0x40>
#if LWIP_TCP
    done_socket(sock);
    return lwip_send(s, data, size, flags);
 800b004:	683b      	ldr	r3, [r7, #0]
 800b006:	687a      	ldr	r2, [r7, #4]
 800b008:	68b9      	ldr	r1, [r7, #8]
 800b00a:	68f8      	ldr	r0, [r7, #12]
 800b00c:	f7ff ff84 	bl	800af18 <lwip_send>
 800b010:	4603      	mov	r3, r0
 800b012:	e084      	b.n	800b11e <lwip_sendto+0x14a>
    done_socket(sock);
    return -1;
#endif /* LWIP_TCP */
  }

  if (size > LWIP_MIN(0xFFFF, SSIZE_MAX)) {
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b01a:	d30a      	bcc.n	800b032 <lwip_sendto+0x5e>
    /* cannot fit into one datagram (at least for us) */
    sock_set_errno(sock, EMSGSIZE);
 800b01c:	235a      	movs	r3, #90	; 0x5a
 800b01e:	623b      	str	r3, [r7, #32]
 800b020:	6a3b      	ldr	r3, [r7, #32]
 800b022:	2b00      	cmp	r3, #0
 800b024:	d002      	beq.n	800b02c <lwip_sendto+0x58>
 800b026:	4a40      	ldr	r2, [pc, #256]	; (800b128 <lwip_sendto+0x154>)
 800b028:	6a3b      	ldr	r3, [r7, #32]
 800b02a:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 800b02c:	f04f 33ff 	mov.w	r3, #4294967295
 800b030:	e075      	b.n	800b11e <lwip_sendto+0x14a>
  }
  short_size = (u16_t)size;
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	85fb      	strh	r3, [r7, #46]	; 0x2e
  LWIP_ERROR("lwip_sendto: invalid address", (((to == NULL) && (tolen == 0)) ||
 800b036:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d102      	bne.n	800b042 <lwip_sendto+0x6e>
 800b03c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b03e:	2b00      	cmp	r3, #0
 800b040:	d023      	beq.n	800b08a <lwip_sendto+0xb6>
 800b042:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b044:	2b10      	cmp	r3, #16
 800b046:	d10b      	bne.n	800b060 <lwip_sendto+0x8c>
 800b048:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d008      	beq.n	800b060 <lwip_sendto+0x8c>
 800b04e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b050:	785b      	ldrb	r3, [r3, #1]
 800b052:	2b02      	cmp	r3, #2
 800b054:	d104      	bne.n	800b060 <lwip_sendto+0x8c>
 800b056:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b058:	f003 0303 	and.w	r3, r3, #3
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d014      	beq.n	800b08a <lwip_sendto+0xb6>
 800b060:	4b32      	ldr	r3, [pc, #200]	; (800b12c <lwip_sendto+0x158>)
 800b062:	f240 6255 	movw	r2, #1621	; 0x655
 800b066:	4932      	ldr	r1, [pc, #200]	; (800b130 <lwip_sendto+0x15c>)
 800b068:	4832      	ldr	r0, [pc, #200]	; (800b134 <lwip_sendto+0x160>)
 800b06a:	f00b fef9 	bl	8016e60 <iprintf>
 800b06e:	f06f 000f 	mvn.w	r0, #15
 800b072:	f7ff fa59 	bl	800a528 <err_to_errno>
 800b076:	62b8      	str	r0, [r7, #40]	; 0x28
 800b078:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d002      	beq.n	800b084 <lwip_sendto+0xb0>
 800b07e:	4a2a      	ldr	r2, [pc, #168]	; (800b128 <lwip_sendto+0x154>)
 800b080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b082:	6013      	str	r3, [r2, #0]
 800b084:	f04f 33ff 	mov.w	r3, #4294967295
 800b088:	e049      	b.n	800b11e <lwip_sendto+0x14a>
              ((to != NULL) && (IS_SOCK_ADDR_TYPE_VALID(to) && IS_SOCK_ADDR_ALIGNED(to))))),
             sock_set_errno(sock, err_to_errno(ERR_ARG)); done_socket(sock); return -1;);
  LWIP_UNUSED_ARG(tolen);

  /* initialize a buffer */
  buf.p = buf.ptr = NULL;
 800b08a:	2300      	movs	r3, #0
 800b08c:	617b      	str	r3, [r7, #20]
 800b08e:	697b      	ldr	r3, [r7, #20]
 800b090:	613b      	str	r3, [r7, #16]
#if LWIP_CHECKSUM_ON_COPY
  buf.flags = 0;
#endif /* LWIP_CHECKSUM_ON_COPY */
  if (to) {
 800b092:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b094:	2b00      	cmp	r3, #0
 800b096:	d00a      	beq.n	800b0ae <lwip_sendto+0xda>
    SOCKADDR_TO_IPADDR_PORT(to, &buf.addr, remote_port);
 800b098:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b09a:	685b      	ldr	r3, [r3, #4]
 800b09c:	61bb      	str	r3, [r7, #24]
 800b09e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b0a0:	885b      	ldrh	r3, [r3, #2]
 800b0a2:	4618      	mov	r0, r3
 800b0a4:	f000 fbd8 	bl	800b858 <lwip_htons>
 800b0a8:	4603      	mov	r3, r0
 800b0aa:	86bb      	strh	r3, [r7, #52]	; 0x34
 800b0ac:	e003      	b.n	800b0b6 <lwip_sendto+0xe2>
  } else {
    remote_port = 0;
 800b0ae:	2300      	movs	r3, #0
 800b0b0:	86bb      	strh	r3, [r7, #52]	; 0x34
    ip_addr_set_any(NETCONNTYPE_ISIPV6(netconn_type(sock->conn)), &buf.addr);
 800b0b2:	2300      	movs	r3, #0
 800b0b4:	61bb      	str	r3, [r7, #24]
  }
  netbuf_fromport(&buf) = remote_port;
 800b0b6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800b0b8:	83bb      	strh	r3, [r7, #28]
      MEMCPY(buf.p->payload, data, short_size);
    }
    err = ERR_OK;
  }
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  err = netbuf_ref(&buf, data, short_size);
 800b0ba:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800b0bc:	f107 0310 	add.w	r3, r7, #16
 800b0c0:	68b9      	ldr	r1, [r7, #8]
 800b0c2:	4618      	mov	r0, r3
 800b0c4:	f7ff fa96 	bl	800a5f4 <netbuf_ref>
 800b0c8:	4603      	mov	r3, r0
 800b0ca:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (err == ERR_OK) {
 800b0ce:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d10a      	bne.n	800b0ec <lwip_sendto+0x118>
      IP_SET_TYPE_VAL(buf.addr, IPADDR_TYPE_V4);
    }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

    /* send the data */
    err = netconn_send(sock->conn, &buf);
 800b0d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	f107 0210 	add.w	r2, r7, #16
 800b0de:	4611      	mov	r1, r2
 800b0e0:	4618      	mov	r0, r3
 800b0e2:	f7fd fd87 	bl	8008bf4 <netconn_send>
 800b0e6:	4603      	mov	r3, r0
 800b0e8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }

  /* deallocated the buffer */
  netbuf_free(&buf);
 800b0ec:	f107 0310 	add.w	r3, r7, #16
 800b0f0:	4618      	mov	r0, r3
 800b0f2:	f7ff fa57 	bl	800a5a4 <netbuf_free>

  sock_set_errno(sock, err_to_errno(err));
 800b0f6:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800b0fa:	4618      	mov	r0, r3
 800b0fc:	f7ff fa14 	bl	800a528 <err_to_errno>
 800b100:	6278      	str	r0, [r7, #36]	; 0x24
 800b102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b104:	2b00      	cmp	r3, #0
 800b106:	d002      	beq.n	800b10e <lwip_sendto+0x13a>
 800b108:	4a07      	ldr	r2, [pc, #28]	; (800b128 <lwip_sendto+0x154>)
 800b10a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b10c:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return (err == ERR_OK ? short_size : -1);
 800b10e:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800b112:	2b00      	cmp	r3, #0
 800b114:	d101      	bne.n	800b11a <lwip_sendto+0x146>
 800b116:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b118:	e001      	b.n	800b11e <lwip_sendto+0x14a>
 800b11a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b11e:	4618      	mov	r0, r3
 800b120:	3738      	adds	r7, #56	; 0x38
 800b122:	46bd      	mov	sp, r7
 800b124:	bd80      	pop	{r7, pc}
 800b126:	bf00      	nop
 800b128:	2000d418 	.word	0x2000d418
 800b12c:	08018b80 	.word	0x08018b80
 800b130:	08018e60 	.word	0x08018e60
 800b134:	08018bd4 	.word	0x08018bd4

0800b138 <lwip_socket>:

int
lwip_socket(int domain, int type, int protocol)
{
 800b138:	b580      	push	{r7, lr}
 800b13a:	b086      	sub	sp, #24
 800b13c:	af00      	add	r7, sp, #0
 800b13e:	60f8      	str	r0, [r7, #12]
 800b140:	60b9      	str	r1, [r7, #8]
 800b142:	607a      	str	r2, [r7, #4]
  int i;

  LWIP_UNUSED_ARG(domain); /* @todo: check this */

  /* create a netconn */
  switch (type) {
 800b144:	68bb      	ldr	r3, [r7, #8]
 800b146:	2b02      	cmp	r3, #2
 800b148:	d00d      	beq.n	800b166 <lwip_socket+0x2e>
 800b14a:	2b03      	cmp	r3, #3
 800b14c:	d002      	beq.n	800b154 <lwip_socket+0x1c>
 800b14e:	2b01      	cmp	r3, #1
 800b150:	d016      	beq.n	800b180 <lwip_socket+0x48>
 800b152:	e01c      	b.n	800b18e <lwip_socket+0x56>
    case SOCK_RAW:
      conn = netconn_new_with_proto_and_callback(DOMAIN_TO_NETCONN_TYPE(domain, NETCONN_RAW),
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	b2db      	uxtb	r3, r3
 800b158:	4a21      	ldr	r2, [pc, #132]	; (800b1e0 <lwip_socket+0xa8>)
 800b15a:	4619      	mov	r1, r3
 800b15c:	2040      	movs	r0, #64	; 0x40
 800b15e:	f7fd fa03 	bl	8008568 <netconn_new_with_proto_and_callback>
 800b162:	6178      	str	r0, [r7, #20]
             (u8_t)protocol, DEFAULT_SOCKET_EVENTCB);
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%s, SOCK_RAW, %d) = ",
                                  domain == PF_INET ? "PF_INET" : "UNKNOWN", protocol));
      break;
 800b164:	e019      	b.n	800b19a <lwip_socket+0x62>
    case SOCK_DGRAM:
      conn = netconn_new_with_callback(DOMAIN_TO_NETCONN_TYPE(domain,
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	2b88      	cmp	r3, #136	; 0x88
 800b16a:	d101      	bne.n	800b170 <lwip_socket+0x38>
 800b16c:	2321      	movs	r3, #33	; 0x21
 800b16e:	e000      	b.n	800b172 <lwip_socket+0x3a>
 800b170:	2320      	movs	r3, #32
 800b172:	4a1b      	ldr	r2, [pc, #108]	; (800b1e0 <lwip_socket+0xa8>)
 800b174:	2100      	movs	r1, #0
 800b176:	4618      	mov	r0, r3
 800b178:	f7fd f9f6 	bl	8008568 <netconn_new_with_proto_and_callback>
 800b17c:	6178      	str	r0, [r7, #20]
      if (conn) {
        /* netconn layer enables pktinfo by default, sockets default to off */
        conn->flags &= ~NETCONN_FLAG_PKTINFO;
      }
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 800b17e:	e00c      	b.n	800b19a <lwip_socket+0x62>
    case SOCK_STREAM:
      conn = netconn_new_with_callback(DOMAIN_TO_NETCONN_TYPE(domain, NETCONN_TCP), DEFAULT_SOCKET_EVENTCB);
 800b180:	4a17      	ldr	r2, [pc, #92]	; (800b1e0 <lwip_socket+0xa8>)
 800b182:	2100      	movs	r1, #0
 800b184:	2010      	movs	r0, #16
 800b186:	f7fd f9ef 	bl	8008568 <netconn_new_with_proto_and_callback>
 800b18a:	6178      	str	r0, [r7, #20]
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%s, SOCK_STREAM, %d) = ",
                                  domain == PF_INET ? "PF_INET" : "UNKNOWN", protocol));
      break;
 800b18c:	e005      	b.n	800b19a <lwip_socket+0x62>
    default:
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%d, %d/UNKNOWN, %d) = -1\n",
                                  domain, type, protocol));
      set_errno(EINVAL);
 800b18e:	4b15      	ldr	r3, [pc, #84]	; (800b1e4 <lwip_socket+0xac>)
 800b190:	2216      	movs	r2, #22
 800b192:	601a      	str	r2, [r3, #0]
      return -1;
 800b194:	f04f 33ff 	mov.w	r3, #4294967295
 800b198:	e01e      	b.n	800b1d8 <lwip_socket+0xa0>
  }

  if (!conn) {
 800b19a:	697b      	ldr	r3, [r7, #20]
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d105      	bne.n	800b1ac <lwip_socket+0x74>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("-1 / ENOBUFS (could not create netconn)\n"));
    set_errno(ENOBUFS);
 800b1a0:	4b10      	ldr	r3, [pc, #64]	; (800b1e4 <lwip_socket+0xac>)
 800b1a2:	2269      	movs	r2, #105	; 0x69
 800b1a4:	601a      	str	r2, [r3, #0]
    return -1;
 800b1a6:	f04f 33ff 	mov.w	r3, #4294967295
 800b1aa:	e015      	b.n	800b1d8 <lwip_socket+0xa0>
  }

  i = alloc_socket(conn, 0);
 800b1ac:	2100      	movs	r1, #0
 800b1ae:	6978      	ldr	r0, [r7, #20]
 800b1b0:	f7ff fac0 	bl	800a734 <alloc_socket>
 800b1b4:	6138      	str	r0, [r7, #16]

  if (i == -1) {
 800b1b6:	693b      	ldr	r3, [r7, #16]
 800b1b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b1bc:	d108      	bne.n	800b1d0 <lwip_socket+0x98>
    netconn_delete(conn);
 800b1be:	6978      	ldr	r0, [r7, #20]
 800b1c0:	f7fd fa70 	bl	80086a4 <netconn_delete>
    set_errno(ENFILE);
 800b1c4:	4b07      	ldr	r3, [pc, #28]	; (800b1e4 <lwip_socket+0xac>)
 800b1c6:	2217      	movs	r2, #23
 800b1c8:	601a      	str	r2, [r3, #0]
    return -1;
 800b1ca:	f04f 33ff 	mov.w	r3, #4294967295
 800b1ce:	e003      	b.n	800b1d8 <lwip_socket+0xa0>
  }
  conn->socket = i;
 800b1d0:	697b      	ldr	r3, [r7, #20]
 800b1d2:	693a      	ldr	r2, [r7, #16]
 800b1d4:	619a      	str	r2, [r3, #24]
  done_socket(&sockets[i - LWIP_SOCKET_OFFSET]);
  LWIP_DEBUGF(SOCKETS_DEBUG, ("%d\n", i));
  set_errno(0);
  return i;
 800b1d6:	693b      	ldr	r3, [r7, #16]
}
 800b1d8:	4618      	mov	r0, r3
 800b1da:	3718      	adds	r7, #24
 800b1dc:	46bd      	mov	sp, r7
 800b1de:	bd80      	pop	{r7, pc}
 800b1e0:	0800b271 	.word	0x0800b271
 800b1e4:	2000d418 	.word	0x2000d418

0800b1e8 <lwip_poll_should_wake>:
 * Check whether event_callback should wake up a thread waiting in
 * lwip_poll.
 */
static int
lwip_poll_should_wake(const struct lwip_select_cb *scb, int fd, int has_recvevent, int has_sendevent, int has_errevent)
{
 800b1e8:	b480      	push	{r7}
 800b1ea:	b087      	sub	sp, #28
 800b1ec:	af00      	add	r7, sp, #0
 800b1ee:	60f8      	str	r0, [r7, #12]
 800b1f0:	60b9      	str	r1, [r7, #8]
 800b1f2:	607a      	str	r2, [r7, #4]
 800b1f4:	603b      	str	r3, [r7, #0]
  nfds_t fdi;
  for (fdi = 0; fdi < scb->poll_nfds; fdi++) {
 800b1f6:	2300      	movs	r3, #0
 800b1f8:	617b      	str	r3, [r7, #20]
 800b1fa:	e02c      	b.n	800b256 <lwip_poll_should_wake+0x6e>
    const struct pollfd *pollfd = &scb->poll_fds[fdi];
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	695a      	ldr	r2, [r3, #20]
 800b200:	697b      	ldr	r3, [r7, #20]
 800b202:	00db      	lsls	r3, r3, #3
 800b204:	4413      	add	r3, r2
 800b206:	613b      	str	r3, [r7, #16]
    if (pollfd->fd == fd) {
 800b208:	693b      	ldr	r3, [r7, #16]
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	68ba      	ldr	r2, [r7, #8]
 800b20e:	429a      	cmp	r2, r3
 800b210:	d11e      	bne.n	800b250 <lwip_poll_should_wake+0x68>
      /* Do not update pollfd->revents right here;
         that would be a data race because lwip_pollscan
         accesses revents without protecting. */
      if (has_recvevent && (pollfd->events & POLLIN) != 0) {
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	2b00      	cmp	r3, #0
 800b216:	d009      	beq.n	800b22c <lwip_poll_should_wake+0x44>
 800b218:	693b      	ldr	r3, [r7, #16]
 800b21a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800b21e:	b29b      	uxth	r3, r3
 800b220:	f003 0301 	and.w	r3, r3, #1
 800b224:	2b00      	cmp	r3, #0
 800b226:	d001      	beq.n	800b22c <lwip_poll_should_wake+0x44>
        return 1;
 800b228:	2301      	movs	r3, #1
 800b22a:	e01a      	b.n	800b262 <lwip_poll_should_wake+0x7a>
      }
      if (has_sendevent && (pollfd->events & POLLOUT) != 0) {
 800b22c:	683b      	ldr	r3, [r7, #0]
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d009      	beq.n	800b246 <lwip_poll_should_wake+0x5e>
 800b232:	693b      	ldr	r3, [r7, #16]
 800b234:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800b238:	b29b      	uxth	r3, r3
 800b23a:	f003 0302 	and.w	r3, r3, #2
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d001      	beq.n	800b246 <lwip_poll_should_wake+0x5e>
        return 1;
 800b242:	2301      	movs	r3, #1
 800b244:	e00d      	b.n	800b262 <lwip_poll_should_wake+0x7a>
      }
      if (has_errevent) {
 800b246:	6a3b      	ldr	r3, [r7, #32]
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d001      	beq.n	800b250 <lwip_poll_should_wake+0x68>
        /* POLLERR is output only. */
        return 1;
 800b24c:	2301      	movs	r3, #1
 800b24e:	e008      	b.n	800b262 <lwip_poll_should_wake+0x7a>
  for (fdi = 0; fdi < scb->poll_nfds; fdi++) {
 800b250:	697b      	ldr	r3, [r7, #20]
 800b252:	3301      	adds	r3, #1
 800b254:	617b      	str	r3, [r7, #20]
 800b256:	68fb      	ldr	r3, [r7, #12]
 800b258:	699b      	ldr	r3, [r3, #24]
 800b25a:	697a      	ldr	r2, [r7, #20]
 800b25c:	429a      	cmp	r2, r3
 800b25e:	d3cd      	bcc.n	800b1fc <lwip_poll_should_wake+0x14>
      }
    }
  }
  return 0;
 800b260:	2300      	movs	r3, #0
}
 800b262:	4618      	mov	r0, r3
 800b264:	371c      	adds	r7, #28
 800b266:	46bd      	mov	sp, r7
 800b268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b26c:	4770      	bx	lr
	...

0800b270 <event_callback>:
 *   NETCONN_EVT_ERROR
 * This requirement will be asserted in select_check_waiters()
 */
static void
event_callback(struct netconn *conn, enum netconn_evt evt, u16_t len)
{
 800b270:	b580      	push	{r7, lr}
 800b272:	b08a      	sub	sp, #40	; 0x28
 800b274:	af00      	add	r7, sp, #0
 800b276:	6078      	str	r0, [r7, #4]
 800b278:	460b      	mov	r3, r1
 800b27a:	70fb      	strb	r3, [r7, #3]
 800b27c:	4613      	mov	r3, r2
 800b27e:	803b      	strh	r3, [r7, #0]
  SYS_ARCH_DECL_PROTECT(lev);

  LWIP_UNUSED_ARG(len);

  /* Get socket */
  if (conn) {
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	2b00      	cmp	r3, #0
 800b284:	f000 80a4 	beq.w	800b3d0 <event_callback+0x160>
    s = conn->socket;
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	699b      	ldr	r3, [r3, #24]
 800b28c:	627b      	str	r3, [r7, #36]	; 0x24
    if (s < 0) {
 800b28e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b290:	2b00      	cmp	r3, #0
 800b292:	da18      	bge.n	800b2c6 <event_callback+0x56>
      /* Data comes in right away after an accept, even though
       * the server task might not have created a new socket yet.
       * Just count down (or up) if that's the case and we
       * will use the data later. Note that only receive events
       * can happen before the new socket is set up. */
      SYS_ARCH_PROTECT(lev);
 800b294:	f00b fd46 	bl	8016d24 <sys_arch_protect>
 800b298:	61f8      	str	r0, [r7, #28]
      if (conn->socket < 0) {
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	699b      	ldr	r3, [r3, #24]
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	da0b      	bge.n	800b2ba <event_callback+0x4a>
        if (evt == NETCONN_EVT_RCVPLUS) {
 800b2a2:	78fb      	ldrb	r3, [r7, #3]
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d104      	bne.n	800b2b2 <event_callback+0x42>
          /* conn->socket is -1 on initialization
             lwip_accept adjusts sock->recvevent if conn->socket < -1 */
          conn->socket--;
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	699b      	ldr	r3, [r3, #24]
 800b2ac:	1e5a      	subs	r2, r3, #1
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	619a      	str	r2, [r3, #24]
        }
        SYS_ARCH_UNPROTECT(lev);
 800b2b2:	69f8      	ldr	r0, [r7, #28]
 800b2b4:	f00b fd44 	bl	8016d40 <sys_arch_unprotect>
        return;
 800b2b8:	e08d      	b.n	800b3d6 <event_callback+0x166>
      }
      s = conn->socket;
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	699b      	ldr	r3, [r3, #24]
 800b2be:	627b      	str	r3, [r7, #36]	; 0x24
      SYS_ARCH_UNPROTECT(lev);
 800b2c0:	69f8      	ldr	r0, [r7, #28]
 800b2c2:	f00b fd3d 	bl	8016d40 <sys_arch_unprotect>
    }

    sock = get_socket(s);
 800b2c6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b2c8:	f7ff fa1c 	bl	800a704 <get_socket>
 800b2cc:	61b8      	str	r0, [r7, #24]
    if (!sock) {
 800b2ce:	69bb      	ldr	r3, [r7, #24]
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d07f      	beq.n	800b3d4 <event_callback+0x164>
    }
  } else {
    return;
  }

  check_waiters = 1;
 800b2d4:	2301      	movs	r3, #1
 800b2d6:	623b      	str	r3, [r7, #32]
  SYS_ARCH_PROTECT(lev);
 800b2d8:	f00b fd24 	bl	8016d24 <sys_arch_protect>
 800b2dc:	61f8      	str	r0, [r7, #28]
  /* Set event as required */
  switch (evt) {
 800b2de:	78fb      	ldrb	r3, [r7, #3]
 800b2e0:	2b04      	cmp	r3, #4
 800b2e2:	d83e      	bhi.n	800b362 <event_callback+0xf2>
 800b2e4:	a201      	add	r2, pc, #4	; (adr r2, 800b2ec <event_callback+0x7c>)
 800b2e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2ea:	bf00      	nop
 800b2ec:	0800b301 	.word	0x0800b301
 800b2f0:	0800b323 	.word	0x0800b323
 800b2f4:	0800b33b 	.word	0x0800b33b
 800b2f8:	0800b34f 	.word	0x0800b34f
 800b2fc:	0800b35b 	.word	0x0800b35b
    case NETCONN_EVT_RCVPLUS:
      sock->rcvevent++;
 800b300:	69bb      	ldr	r3, [r7, #24]
 800b302:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b306:	b29b      	uxth	r3, r3
 800b308:	3301      	adds	r3, #1
 800b30a:	b29b      	uxth	r3, r3
 800b30c:	b21a      	sxth	r2, r3
 800b30e:	69bb      	ldr	r3, [r7, #24]
 800b310:	811a      	strh	r2, [r3, #8]
      if (sock->rcvevent > 1) {
 800b312:	69bb      	ldr	r3, [r7, #24]
 800b314:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b318:	2b01      	cmp	r3, #1
 800b31a:	dd2a      	ble.n	800b372 <event_callback+0x102>
        check_waiters = 0;
 800b31c:	2300      	movs	r3, #0
 800b31e:	623b      	str	r3, [r7, #32]
      }
      break;
 800b320:	e027      	b.n	800b372 <event_callback+0x102>
    case NETCONN_EVT_RCVMINUS:
      sock->rcvevent--;
 800b322:	69bb      	ldr	r3, [r7, #24]
 800b324:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b328:	b29b      	uxth	r3, r3
 800b32a:	3b01      	subs	r3, #1
 800b32c:	b29b      	uxth	r3, r3
 800b32e:	b21a      	sxth	r2, r3
 800b330:	69bb      	ldr	r3, [r7, #24]
 800b332:	811a      	strh	r2, [r3, #8]
      check_waiters = 0;
 800b334:	2300      	movs	r3, #0
 800b336:	623b      	str	r3, [r7, #32]
      break;
 800b338:	e01c      	b.n	800b374 <event_callback+0x104>
    case NETCONN_EVT_SENDPLUS:
      if (sock->sendevent) {
 800b33a:	69bb      	ldr	r3, [r7, #24]
 800b33c:	895b      	ldrh	r3, [r3, #10]
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d001      	beq.n	800b346 <event_callback+0xd6>
        check_waiters = 0;
 800b342:	2300      	movs	r3, #0
 800b344:	623b      	str	r3, [r7, #32]
      }
      sock->sendevent = 1;
 800b346:	69bb      	ldr	r3, [r7, #24]
 800b348:	2201      	movs	r2, #1
 800b34a:	815a      	strh	r2, [r3, #10]
      break;
 800b34c:	e012      	b.n	800b374 <event_callback+0x104>
    case NETCONN_EVT_SENDMINUS:
      sock->sendevent = 0;
 800b34e:	69bb      	ldr	r3, [r7, #24]
 800b350:	2200      	movs	r2, #0
 800b352:	815a      	strh	r2, [r3, #10]
      check_waiters = 0;
 800b354:	2300      	movs	r3, #0
 800b356:	623b      	str	r3, [r7, #32]
      break;
 800b358:	e00c      	b.n	800b374 <event_callback+0x104>
    case NETCONN_EVT_ERROR:
      sock->errevent = 1;
 800b35a:	69bb      	ldr	r3, [r7, #24]
 800b35c:	2201      	movs	r2, #1
 800b35e:	819a      	strh	r2, [r3, #12]
      break;
 800b360:	e008      	b.n	800b374 <event_callback+0x104>
    default:
      LWIP_ASSERT("unknown event", 0);
 800b362:	4b1e      	ldr	r3, [pc, #120]	; (800b3dc <event_callback+0x16c>)
 800b364:	f44f 621f 	mov.w	r2, #2544	; 0x9f0
 800b368:	491d      	ldr	r1, [pc, #116]	; (800b3e0 <event_callback+0x170>)
 800b36a:	481e      	ldr	r0, [pc, #120]	; (800b3e4 <event_callback+0x174>)
 800b36c:	f00b fd78 	bl	8016e60 <iprintf>
      break;
 800b370:	e000      	b.n	800b374 <event_callback+0x104>
      break;
 800b372:	bf00      	nop
  }

  if (sock->select_waiting && check_waiters) {
 800b374:	69bb      	ldr	r3, [r7, #24]
 800b376:	7b9b      	ldrb	r3, [r3, #14]
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d025      	beq.n	800b3c8 <event_callback+0x158>
 800b37c:	6a3b      	ldr	r3, [r7, #32]
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d022      	beq.n	800b3c8 <event_callback+0x158>
    /* Save which events are active */
    int has_recvevent, has_sendevent, has_errevent;
    has_recvevent = sock->rcvevent > 0;
 800b382:	69bb      	ldr	r3, [r7, #24]
 800b384:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b388:	2b00      	cmp	r3, #0
 800b38a:	bfcc      	ite	gt
 800b38c:	2301      	movgt	r3, #1
 800b38e:	2300      	movle	r3, #0
 800b390:	b2db      	uxtb	r3, r3
 800b392:	617b      	str	r3, [r7, #20]
    has_sendevent = sock->sendevent != 0;
 800b394:	69bb      	ldr	r3, [r7, #24]
 800b396:	895b      	ldrh	r3, [r3, #10]
 800b398:	2b00      	cmp	r3, #0
 800b39a:	bf14      	ite	ne
 800b39c:	2301      	movne	r3, #1
 800b39e:	2300      	moveq	r3, #0
 800b3a0:	b2db      	uxtb	r3, r3
 800b3a2:	613b      	str	r3, [r7, #16]
    has_errevent = sock->errevent != 0;
 800b3a4:	69bb      	ldr	r3, [r7, #24]
 800b3a6:	899b      	ldrh	r3, [r3, #12]
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	bf14      	ite	ne
 800b3ac:	2301      	movne	r3, #1
 800b3ae:	2300      	moveq	r3, #0
 800b3b0:	b2db      	uxtb	r3, r3
 800b3b2:	60fb      	str	r3, [r7, #12]
    SYS_ARCH_UNPROTECT(lev);
 800b3b4:	69f8      	ldr	r0, [r7, #28]
 800b3b6:	f00b fcc3 	bl	8016d40 <sys_arch_unprotect>
    /* Check any select calls waiting on this socket */
    select_check_waiters(s, has_recvevent, has_sendevent, has_errevent);
 800b3ba:	68fb      	ldr	r3, [r7, #12]
 800b3bc:	693a      	ldr	r2, [r7, #16]
 800b3be:	6979      	ldr	r1, [r7, #20]
 800b3c0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b3c2:	f000 f811 	bl	800b3e8 <select_check_waiters>
  if (sock->select_waiting && check_waiters) {
 800b3c6:	e006      	b.n	800b3d6 <event_callback+0x166>
  } else {
    SYS_ARCH_UNPROTECT(lev);
 800b3c8:	69f8      	ldr	r0, [r7, #28]
 800b3ca:	f00b fcb9 	bl	8016d40 <sys_arch_unprotect>
 800b3ce:	e002      	b.n	800b3d6 <event_callback+0x166>
    return;
 800b3d0:	bf00      	nop
 800b3d2:	e000      	b.n	800b3d6 <event_callback+0x166>
      return;
 800b3d4:	bf00      	nop
  }
  done_socket(sock);
}
 800b3d6:	3728      	adds	r7, #40	; 0x28
 800b3d8:	46bd      	mov	sp, r7
 800b3da:	bd80      	pop	{r7, pc}
 800b3dc:	08018b80 	.word	0x08018b80
 800b3e0:	08018efc 	.word	0x08018efc
 800b3e4:	08018bd4 	.word	0x08018bd4

0800b3e8 <select_check_waiters>:
 * of the loop, thus creating a possibility where a thread could modify the
 * select_cb_list during our UNPROTECT/PROTECT. We use a generational counter to
 * detect this change and restart the list walk. The list is expected to be small
 */
static void select_check_waiters(int s, int has_recvevent, int has_sendevent, int has_errevent)
{
 800b3e8:	b580      	push	{r7, lr}
 800b3ea:	b088      	sub	sp, #32
 800b3ec:	af02      	add	r7, sp, #8
 800b3ee:	60f8      	str	r0, [r7, #12]
 800b3f0:	60b9      	str	r1, [r7, #8]
 800b3f2:	607a      	str	r2, [r7, #4]
 800b3f4:	603b      	str	r3, [r7, #0]
  SYS_ARCH_PROTECT(lev);
again:
  /* remember the state of select_cb_list to detect changes */
  last_select_cb_ctr = select_cb_ctr;
#endif /* !LWIP_TCPIP_CORE_LOCKING */
  for (scb = select_cb_list; scb != NULL; scb = scb->next) {
 800b3f6:	4b3d      	ldr	r3, [pc, #244]	; (800b4ec <select_check_waiters+0x104>)
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	617b      	str	r3, [r7, #20]
 800b3fc:	e06f      	b.n	800b4de <select_check_waiters+0xf6>
    if (scb->sem_signalled == 0) {
 800b3fe:	697b      	ldr	r3, [r7, #20]
 800b400:	69db      	ldr	r3, [r3, #28]
 800b402:	2b00      	cmp	r3, #0
 800b404:	d168      	bne.n	800b4d8 <select_check_waiters+0xf0>
      /* semaphore not signalled yet */
      int do_signal = 0;
 800b406:	2300      	movs	r3, #0
 800b408:	613b      	str	r3, [r7, #16]
#if LWIP_SOCKET_POLL
      if (scb->poll_fds != NULL) {
 800b40a:	697b      	ldr	r3, [r7, #20]
 800b40c:	695b      	ldr	r3, [r3, #20]
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d009      	beq.n	800b426 <select_check_waiters+0x3e>
        do_signal = lwip_poll_should_wake(scb, s, has_recvevent, has_sendevent, has_errevent);
 800b412:	683b      	ldr	r3, [r7, #0]
 800b414:	9300      	str	r3, [sp, #0]
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	68ba      	ldr	r2, [r7, #8]
 800b41a:	68f9      	ldr	r1, [r7, #12]
 800b41c:	6978      	ldr	r0, [r7, #20]
 800b41e:	f7ff fee3 	bl	800b1e8 <lwip_poll_should_wake>
 800b422:	6138      	str	r0, [r7, #16]
 800b424:	e04d      	b.n	800b4c2 <select_check_waiters+0xda>
      else
#endif /* LWIP_SOCKET_SELECT && LWIP_SOCKET_POLL */
#if LWIP_SOCKET_SELECT
      {
        /* Test this select call for our socket */
        if (has_recvevent) {
 800b426:	68bb      	ldr	r3, [r7, #8]
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d014      	beq.n	800b456 <select_check_waiters+0x6e>
          if (scb->readset && FD_ISSET(s, scb->readset)) {
 800b42c:	697b      	ldr	r3, [r7, #20]
 800b42e:	689b      	ldr	r3, [r3, #8]
 800b430:	2b00      	cmp	r3, #0
 800b432:	d010      	beq.n	800b456 <select_check_waiters+0x6e>
 800b434:	697b      	ldr	r3, [r7, #20]
 800b436:	689b      	ldr	r3, [r3, #8]
 800b438:	68fa      	ldr	r2, [r7, #12]
 800b43a:	0952      	lsrs	r2, r2, #5
 800b43c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b440:	68fa      	ldr	r2, [r7, #12]
 800b442:	f002 021f 	and.w	r2, r2, #31
 800b446:	2101      	movs	r1, #1
 800b448:	fa01 f202 	lsl.w	r2, r1, r2
 800b44c:	4013      	ands	r3, r2
 800b44e:	2b00      	cmp	r3, #0
 800b450:	d001      	beq.n	800b456 <select_check_waiters+0x6e>
            do_signal = 1;
 800b452:	2301      	movs	r3, #1
 800b454:	613b      	str	r3, [r7, #16]
          }
        }
        if (has_sendevent) {
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d017      	beq.n	800b48c <select_check_waiters+0xa4>
          if (!do_signal && scb->writeset && FD_ISSET(s, scb->writeset)) {
 800b45c:	693b      	ldr	r3, [r7, #16]
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d114      	bne.n	800b48c <select_check_waiters+0xa4>
 800b462:	697b      	ldr	r3, [r7, #20]
 800b464:	68db      	ldr	r3, [r3, #12]
 800b466:	2b00      	cmp	r3, #0
 800b468:	d010      	beq.n	800b48c <select_check_waiters+0xa4>
 800b46a:	697b      	ldr	r3, [r7, #20]
 800b46c:	68db      	ldr	r3, [r3, #12]
 800b46e:	68fa      	ldr	r2, [r7, #12]
 800b470:	0952      	lsrs	r2, r2, #5
 800b472:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b476:	68fa      	ldr	r2, [r7, #12]
 800b478:	f002 021f 	and.w	r2, r2, #31
 800b47c:	2101      	movs	r1, #1
 800b47e:	fa01 f202 	lsl.w	r2, r1, r2
 800b482:	4013      	ands	r3, r2
 800b484:	2b00      	cmp	r3, #0
 800b486:	d001      	beq.n	800b48c <select_check_waiters+0xa4>
            do_signal = 1;
 800b488:	2301      	movs	r3, #1
 800b48a:	613b      	str	r3, [r7, #16]
          }
        }
        if (has_errevent) {
 800b48c:	683b      	ldr	r3, [r7, #0]
 800b48e:	2b00      	cmp	r3, #0
 800b490:	d017      	beq.n	800b4c2 <select_check_waiters+0xda>
          if (!do_signal && scb->exceptset && FD_ISSET(s, scb->exceptset)) {
 800b492:	693b      	ldr	r3, [r7, #16]
 800b494:	2b00      	cmp	r3, #0
 800b496:	d114      	bne.n	800b4c2 <select_check_waiters+0xda>
 800b498:	697b      	ldr	r3, [r7, #20]
 800b49a:	691b      	ldr	r3, [r3, #16]
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d010      	beq.n	800b4c2 <select_check_waiters+0xda>
 800b4a0:	697b      	ldr	r3, [r7, #20]
 800b4a2:	691b      	ldr	r3, [r3, #16]
 800b4a4:	68fa      	ldr	r2, [r7, #12]
 800b4a6:	0952      	lsrs	r2, r2, #5
 800b4a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b4ac:	68fa      	ldr	r2, [r7, #12]
 800b4ae:	f002 021f 	and.w	r2, r2, #31
 800b4b2:	2101      	movs	r1, #1
 800b4b4:	fa01 f202 	lsl.w	r2, r1, r2
 800b4b8:	4013      	ands	r3, r2
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d001      	beq.n	800b4c2 <select_check_waiters+0xda>
            do_signal = 1;
 800b4be:	2301      	movs	r3, #1
 800b4c0:	613b      	str	r3, [r7, #16]
          }
        }
      }
#endif /* LWIP_SOCKET_SELECT */
      if (do_signal) {
 800b4c2:	693b      	ldr	r3, [r7, #16]
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d007      	beq.n	800b4d8 <select_check_waiters+0xf0>
        scb->sem_signalled = 1;
 800b4c8:	697b      	ldr	r3, [r7, #20]
 800b4ca:	2201      	movs	r2, #1
 800b4cc:	61da      	str	r2, [r3, #28]
        /* For !LWIP_TCPIP_CORE_LOCKING, we don't call SYS_ARCH_UNPROTECT() before signaling
           the semaphore, as this might lead to the select thread taking itself off the list,
           invalidating the semaphore. */
        sys_sem_signal(SELECT_SEM_PTR(scb->sem));
 800b4ce:	697b      	ldr	r3, [r7, #20]
 800b4d0:	3320      	adds	r3, #32
 800b4d2:	4618      	mov	r0, r3
 800b4d4:	f00b fb82 	bl	8016bdc <sys_sem_signal>
  for (scb = select_cb_list; scb != NULL; scb = scb->next) {
 800b4d8:	697b      	ldr	r3, [r7, #20]
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	617b      	str	r3, [r7, #20]
 800b4de:	697b      	ldr	r3, [r7, #20]
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d18c      	bne.n	800b3fe <select_check_waiters+0x16>
    /* remember the state of select_cb_list to detect changes */
    last_select_cb_ctr = select_cb_ctr;
  }
  SYS_ARCH_UNPROTECT(lev);
#endif
}
 800b4e4:	bf00      	nop
 800b4e6:	3718      	adds	r7, #24
 800b4e8:	46bd      	mov	sp, r7
 800b4ea:	bd80      	pop	{r7, pc}
 800b4ec:	2000476c 	.word	0x2000476c

0800b4f0 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800b4f0:	b580      	push	{r7, lr}
 800b4f2:	b084      	sub	sp, #16
 800b4f4:	af00      	add	r7, sp, #0
 800b4f6:	6078      	str	r0, [r7, #4]
 800b4f8:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800b4fa:	f008 f92d 	bl	8013758 <sys_timeouts_sleeptime>
 800b4fe:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800b500:	68fb      	ldr	r3, [r7, #12]
 800b502:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b506:	d10b      	bne.n	800b520 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800b508:	4813      	ldr	r0, [pc, #76]	; (800b558 <tcpip_timeouts_mbox_fetch+0x68>)
 800b50a:	f00b fbd8 	bl	8016cbe <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800b50e:	2200      	movs	r2, #0
 800b510:	6839      	ldr	r1, [r7, #0]
 800b512:	6878      	ldr	r0, [r7, #4]
 800b514:	f00b fa90 	bl	8016a38 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800b518:	480f      	ldr	r0, [pc, #60]	; (800b558 <tcpip_timeouts_mbox_fetch+0x68>)
 800b51a:	f00b fbc1 	bl	8016ca0 <sys_mutex_lock>
    return;
 800b51e:	e018      	b.n	800b552 <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	2b00      	cmp	r3, #0
 800b524:	d102      	bne.n	800b52c <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800b526:	f008 f8dd 	bl	80136e4 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800b52a:	e7e6      	b.n	800b4fa <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800b52c:	480a      	ldr	r0, [pc, #40]	; (800b558 <tcpip_timeouts_mbox_fetch+0x68>)
 800b52e:	f00b fbc6 	bl	8016cbe <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800b532:	68fa      	ldr	r2, [r7, #12]
 800b534:	6839      	ldr	r1, [r7, #0]
 800b536:	6878      	ldr	r0, [r7, #4]
 800b538:	f00b fa7e 	bl	8016a38 <sys_arch_mbox_fetch>
 800b53c:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800b53e:	4806      	ldr	r0, [pc, #24]	; (800b558 <tcpip_timeouts_mbox_fetch+0x68>)
 800b540:	f00b fbae 	bl	8016ca0 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800b544:	68bb      	ldr	r3, [r7, #8]
 800b546:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b54a:	d102      	bne.n	800b552 <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800b54c:	f008 f8ca 	bl	80136e4 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800b550:	e7d3      	b.n	800b4fa <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800b552:	3710      	adds	r7, #16
 800b554:	46bd      	mov	sp, r7
 800b556:	bd80      	pop	{r7, pc}
 800b558:	20007b24 	.word	0x20007b24

0800b55c <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800b55c:	b580      	push	{r7, lr}
 800b55e:	b084      	sub	sp, #16
 800b560:	af00      	add	r7, sp, #0
 800b562:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800b564:	4810      	ldr	r0, [pc, #64]	; (800b5a8 <tcpip_thread+0x4c>)
 800b566:	f00b fb9b 	bl	8016ca0 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800b56a:	4b10      	ldr	r3, [pc, #64]	; (800b5ac <tcpip_thread+0x50>)
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d005      	beq.n	800b57e <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800b572:	4b0e      	ldr	r3, [pc, #56]	; (800b5ac <tcpip_thread+0x50>)
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	4a0e      	ldr	r2, [pc, #56]	; (800b5b0 <tcpip_thread+0x54>)
 800b578:	6812      	ldr	r2, [r2, #0]
 800b57a:	4610      	mov	r0, r2
 800b57c:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800b57e:	f107 030c 	add.w	r3, r7, #12
 800b582:	4619      	mov	r1, r3
 800b584:	480b      	ldr	r0, [pc, #44]	; (800b5b4 <tcpip_thread+0x58>)
 800b586:	f7ff ffb3 	bl	800b4f0 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800b58a:	68fb      	ldr	r3, [r7, #12]
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d106      	bne.n	800b59e <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800b590:	4b09      	ldr	r3, [pc, #36]	; (800b5b8 <tcpip_thread+0x5c>)
 800b592:	2291      	movs	r2, #145	; 0x91
 800b594:	4909      	ldr	r1, [pc, #36]	; (800b5bc <tcpip_thread+0x60>)
 800b596:	480a      	ldr	r0, [pc, #40]	; (800b5c0 <tcpip_thread+0x64>)
 800b598:	f00b fc62 	bl	8016e60 <iprintf>
      continue;
 800b59c:	e003      	b.n	800b5a6 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800b59e:	68fb      	ldr	r3, [r7, #12]
 800b5a0:	4618      	mov	r0, r3
 800b5a2:	f000 f80f 	bl	800b5c4 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800b5a6:	e7ea      	b.n	800b57e <tcpip_thread+0x22>
 800b5a8:	20007b24 	.word	0x20007b24
 800b5ac:	20004770 	.word	0x20004770
 800b5b0:	20004774 	.word	0x20004774
 800b5b4:	20004778 	.word	0x20004778
 800b5b8:	08018f50 	.word	0x08018f50
 800b5bc:	08018f80 	.word	0x08018f80
 800b5c0:	08018fa0 	.word	0x08018fa0

0800b5c4 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800b5c4:	b580      	push	{r7, lr}
 800b5c6:	b082      	sub	sp, #8
 800b5c8:	af00      	add	r7, sp, #0
 800b5ca:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	781b      	ldrb	r3, [r3, #0]
 800b5d0:	2b01      	cmp	r3, #1
 800b5d2:	d018      	beq.n	800b606 <tcpip_thread_handle_msg+0x42>
 800b5d4:	2b02      	cmp	r3, #2
 800b5d6:	d021      	beq.n	800b61c <tcpip_thread_handle_msg+0x58>
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d126      	bne.n	800b62a <tcpip_thread_handle_msg+0x66>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	68db      	ldr	r3, [r3, #12]
 800b5e0:	687a      	ldr	r2, [r7, #4]
 800b5e2:	6850      	ldr	r0, [r2, #4]
 800b5e4:	687a      	ldr	r2, [r7, #4]
 800b5e6:	6892      	ldr	r2, [r2, #8]
 800b5e8:	4611      	mov	r1, r2
 800b5ea:	4798      	blx	r3
 800b5ec:	4603      	mov	r3, r0
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d004      	beq.n	800b5fc <tcpip_thread_handle_msg+0x38>
        pbuf_free(msg->msg.inp.p);
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	685b      	ldr	r3, [r3, #4]
 800b5f6:	4618      	mov	r0, r3
 800b5f8:	f001 fd08 	bl	800d00c <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800b5fc:	6879      	ldr	r1, [r7, #4]
 800b5fe:	2009      	movs	r0, #9
 800b600:	f000 fe32 	bl	800c268 <memp_free>
      break;
 800b604:	e018      	b.n	800b638 <tcpip_thread_handle_msg+0x74>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	685b      	ldr	r3, [r3, #4]
 800b60a:	687a      	ldr	r2, [r7, #4]
 800b60c:	6892      	ldr	r2, [r2, #8]
 800b60e:	4610      	mov	r0, r2
 800b610:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800b612:	6879      	ldr	r1, [r7, #4]
 800b614:	2008      	movs	r0, #8
 800b616:	f000 fe27 	bl	800c268 <memp_free>
      break;
 800b61a:	e00d      	b.n	800b638 <tcpip_thread_handle_msg+0x74>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	685b      	ldr	r3, [r3, #4]
 800b620:	687a      	ldr	r2, [r7, #4]
 800b622:	6892      	ldr	r2, [r2, #8]
 800b624:	4610      	mov	r0, r2
 800b626:	4798      	blx	r3
      break;
 800b628:	e006      	b.n	800b638 <tcpip_thread_handle_msg+0x74>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800b62a:	4b05      	ldr	r3, [pc, #20]	; (800b640 <tcpip_thread_handle_msg+0x7c>)
 800b62c:	22cf      	movs	r2, #207	; 0xcf
 800b62e:	4905      	ldr	r1, [pc, #20]	; (800b644 <tcpip_thread_handle_msg+0x80>)
 800b630:	4805      	ldr	r0, [pc, #20]	; (800b648 <tcpip_thread_handle_msg+0x84>)
 800b632:	f00b fc15 	bl	8016e60 <iprintf>
      break;
 800b636:	bf00      	nop
  }
}
 800b638:	bf00      	nop
 800b63a:	3708      	adds	r7, #8
 800b63c:	46bd      	mov	sp, r7
 800b63e:	bd80      	pop	{r7, pc}
 800b640:	08018f50 	.word	0x08018f50
 800b644:	08018f80 	.word	0x08018f80
 800b648:	08018fa0 	.word	0x08018fa0

0800b64c <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800b64c:	b580      	push	{r7, lr}
 800b64e:	b086      	sub	sp, #24
 800b650:	af00      	add	r7, sp, #0
 800b652:	60f8      	str	r0, [r7, #12]
 800b654:	60b9      	str	r1, [r7, #8]
 800b656:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800b658:	481a      	ldr	r0, [pc, #104]	; (800b6c4 <tcpip_inpkt+0x78>)
 800b65a:	f00b fa48 	bl	8016aee <sys_mbox_valid>
 800b65e:	4603      	mov	r3, r0
 800b660:	2b00      	cmp	r3, #0
 800b662:	d105      	bne.n	800b670 <tcpip_inpkt+0x24>
 800b664:	4b18      	ldr	r3, [pc, #96]	; (800b6c8 <tcpip_inpkt+0x7c>)
 800b666:	22fc      	movs	r2, #252	; 0xfc
 800b668:	4918      	ldr	r1, [pc, #96]	; (800b6cc <tcpip_inpkt+0x80>)
 800b66a:	4819      	ldr	r0, [pc, #100]	; (800b6d0 <tcpip_inpkt+0x84>)
 800b66c:	f00b fbf8 	bl	8016e60 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800b670:	2009      	movs	r0, #9
 800b672:	f000 fda7 	bl	800c1c4 <memp_malloc>
 800b676:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800b678:	697b      	ldr	r3, [r7, #20]
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d102      	bne.n	800b684 <tcpip_inpkt+0x38>
    return ERR_MEM;
 800b67e:	f04f 33ff 	mov.w	r3, #4294967295
 800b682:	e01a      	b.n	800b6ba <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800b684:	697b      	ldr	r3, [r7, #20]
 800b686:	2200      	movs	r2, #0
 800b688:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800b68a:	697b      	ldr	r3, [r7, #20]
 800b68c:	68fa      	ldr	r2, [r7, #12]
 800b68e:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800b690:	697b      	ldr	r3, [r7, #20]
 800b692:	68ba      	ldr	r2, [r7, #8]
 800b694:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800b696:	697b      	ldr	r3, [r7, #20]
 800b698:	687a      	ldr	r2, [r7, #4]
 800b69a:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800b69c:	6979      	ldr	r1, [r7, #20]
 800b69e:	4809      	ldr	r0, [pc, #36]	; (800b6c4 <tcpip_inpkt+0x78>)
 800b6a0:	f00b f9b0 	bl	8016a04 <sys_mbox_trypost>
 800b6a4:	4603      	mov	r3, r0
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d006      	beq.n	800b6b8 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800b6aa:	6979      	ldr	r1, [r7, #20]
 800b6ac:	2009      	movs	r0, #9
 800b6ae:	f000 fddb 	bl	800c268 <memp_free>
    return ERR_MEM;
 800b6b2:	f04f 33ff 	mov.w	r3, #4294967295
 800b6b6:	e000      	b.n	800b6ba <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800b6b8:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800b6ba:	4618      	mov	r0, r3
 800b6bc:	3718      	adds	r7, #24
 800b6be:	46bd      	mov	sp, r7
 800b6c0:	bd80      	pop	{r7, pc}
 800b6c2:	bf00      	nop
 800b6c4:	20004778 	.word	0x20004778
 800b6c8:	08018f50 	.word	0x08018f50
 800b6cc:	08018fc8 	.word	0x08018fc8
 800b6d0:	08018fa0 	.word	0x08018fa0

0800b6d4 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800b6d4:	b580      	push	{r7, lr}
 800b6d6:	b082      	sub	sp, #8
 800b6d8:	af00      	add	r7, sp, #0
 800b6da:	6078      	str	r0, [r7, #4]
 800b6dc:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800b6de:	683b      	ldr	r3, [r7, #0]
 800b6e0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b6e4:	f003 0318 	and.w	r3, r3, #24
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d006      	beq.n	800b6fa <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800b6ec:	4a08      	ldr	r2, [pc, #32]	; (800b710 <tcpip_input+0x3c>)
 800b6ee:	6839      	ldr	r1, [r7, #0]
 800b6f0:	6878      	ldr	r0, [r7, #4]
 800b6f2:	f7ff ffab 	bl	800b64c <tcpip_inpkt>
 800b6f6:	4603      	mov	r3, r0
 800b6f8:	e005      	b.n	800b706 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800b6fa:	4a06      	ldr	r2, [pc, #24]	; (800b714 <tcpip_input+0x40>)
 800b6fc:	6839      	ldr	r1, [r7, #0]
 800b6fe:	6878      	ldr	r0, [r7, #4]
 800b700:	f7ff ffa4 	bl	800b64c <tcpip_inpkt>
 800b704:	4603      	mov	r3, r0
}
 800b706:	4618      	mov	r0, r3
 800b708:	3708      	adds	r7, #8
 800b70a:	46bd      	mov	sp, r7
 800b70c:	bd80      	pop	{r7, pc}
 800b70e:	bf00      	nop
 800b710:	080167f1 	.word	0x080167f1
 800b714:	08015485 	.word	0x08015485

0800b718 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800b718:	b580      	push	{r7, lr}
 800b71a:	b084      	sub	sp, #16
 800b71c:	af00      	add	r7, sp, #0
 800b71e:	6078      	str	r0, [r7, #4]
 800b720:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800b722:	4819      	ldr	r0, [pc, #100]	; (800b788 <tcpip_try_callback+0x70>)
 800b724:	f00b f9e3 	bl	8016aee <sys_mbox_valid>
 800b728:	4603      	mov	r3, r0
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d106      	bne.n	800b73c <tcpip_try_callback+0x24>
 800b72e:	4b17      	ldr	r3, [pc, #92]	; (800b78c <tcpip_try_callback+0x74>)
 800b730:	f240 125d 	movw	r2, #349	; 0x15d
 800b734:	4916      	ldr	r1, [pc, #88]	; (800b790 <tcpip_try_callback+0x78>)
 800b736:	4817      	ldr	r0, [pc, #92]	; (800b794 <tcpip_try_callback+0x7c>)
 800b738:	f00b fb92 	bl	8016e60 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800b73c:	2008      	movs	r0, #8
 800b73e:	f000 fd41 	bl	800c1c4 <memp_malloc>
 800b742:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	2b00      	cmp	r3, #0
 800b748:	d102      	bne.n	800b750 <tcpip_try_callback+0x38>
    return ERR_MEM;
 800b74a:	f04f 33ff 	mov.w	r3, #4294967295
 800b74e:	e017      	b.n	800b780 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	2201      	movs	r2, #1
 800b754:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	687a      	ldr	r2, [r7, #4]
 800b75a:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	683a      	ldr	r2, [r7, #0]
 800b760:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800b762:	68f9      	ldr	r1, [r7, #12]
 800b764:	4808      	ldr	r0, [pc, #32]	; (800b788 <tcpip_try_callback+0x70>)
 800b766:	f00b f94d 	bl	8016a04 <sys_mbox_trypost>
 800b76a:	4603      	mov	r3, r0
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d006      	beq.n	800b77e <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800b770:	68f9      	ldr	r1, [r7, #12]
 800b772:	2008      	movs	r0, #8
 800b774:	f000 fd78 	bl	800c268 <memp_free>
    return ERR_MEM;
 800b778:	f04f 33ff 	mov.w	r3, #4294967295
 800b77c:	e000      	b.n	800b780 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800b77e:	2300      	movs	r3, #0
}
 800b780:	4618      	mov	r0, r3
 800b782:	3710      	adds	r7, #16
 800b784:	46bd      	mov	sp, r7
 800b786:	bd80      	pop	{r7, pc}
 800b788:	20004778 	.word	0x20004778
 800b78c:	08018f50 	.word	0x08018f50
 800b790:	08018fc8 	.word	0x08018fc8
 800b794:	08018fa0 	.word	0x08018fa0

0800b798 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 800b798:	b580      	push	{r7, lr}
 800b79a:	b084      	sub	sp, #16
 800b79c:	af00      	add	r7, sp, #0
 800b79e:	60f8      	str	r0, [r7, #12]
 800b7a0:	60b9      	str	r1, [r7, #8]
 800b7a2:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 800b7a4:	4806      	ldr	r0, [pc, #24]	; (800b7c0 <tcpip_send_msg_wait_sem+0x28>)
 800b7a6:	f00b fa7b 	bl	8016ca0 <sys_mutex_lock>
  fn(apimsg);
 800b7aa:	68fb      	ldr	r3, [r7, #12]
 800b7ac:	68b8      	ldr	r0, [r7, #8]
 800b7ae:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 800b7b0:	4803      	ldr	r0, [pc, #12]	; (800b7c0 <tcpip_send_msg_wait_sem+0x28>)
 800b7b2:	f00b fa84 	bl	8016cbe <sys_mutex_unlock>
  return ERR_OK;
 800b7b6:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 800b7b8:	4618      	mov	r0, r3
 800b7ba:	3710      	adds	r7, #16
 800b7bc:	46bd      	mov	sp, r7
 800b7be:	bd80      	pop	{r7, pc}
 800b7c0:	20007b24 	.word	0x20007b24

0800b7c4 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800b7c4:	b580      	push	{r7, lr}
 800b7c6:	b084      	sub	sp, #16
 800b7c8:	af02      	add	r7, sp, #8
 800b7ca:	6078      	str	r0, [r7, #4]
 800b7cc:	6039      	str	r1, [r7, #0]
  lwip_init();
 800b7ce:	f000 f871 	bl	800b8b4 <lwip_init>

  tcpip_init_done = initfunc;
 800b7d2:	4a17      	ldr	r2, [pc, #92]	; (800b830 <tcpip_init+0x6c>)
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800b7d8:	4a16      	ldr	r2, [pc, #88]	; (800b834 <tcpip_init+0x70>)
 800b7da:	683b      	ldr	r3, [r7, #0]
 800b7dc:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800b7de:	2106      	movs	r1, #6
 800b7e0:	4815      	ldr	r0, [pc, #84]	; (800b838 <tcpip_init+0x74>)
 800b7e2:	f00b f8db 	bl	801699c <sys_mbox_new>
 800b7e6:	4603      	mov	r3, r0
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d006      	beq.n	800b7fa <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800b7ec:	4b13      	ldr	r3, [pc, #76]	; (800b83c <tcpip_init+0x78>)
 800b7ee:	f240 2261 	movw	r2, #609	; 0x261
 800b7f2:	4913      	ldr	r1, [pc, #76]	; (800b840 <tcpip_init+0x7c>)
 800b7f4:	4813      	ldr	r0, [pc, #76]	; (800b844 <tcpip_init+0x80>)
 800b7f6:	f00b fb33 	bl	8016e60 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800b7fa:	4813      	ldr	r0, [pc, #76]	; (800b848 <tcpip_init+0x84>)
 800b7fc:	f00b fa34 	bl	8016c68 <sys_mutex_new>
 800b800:	4603      	mov	r3, r0
 800b802:	2b00      	cmp	r3, #0
 800b804:	d006      	beq.n	800b814 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800b806:	4b0d      	ldr	r3, [pc, #52]	; (800b83c <tcpip_init+0x78>)
 800b808:	f240 2265 	movw	r2, #613	; 0x265
 800b80c:	490f      	ldr	r1, [pc, #60]	; (800b84c <tcpip_init+0x88>)
 800b80e:	480d      	ldr	r0, [pc, #52]	; (800b844 <tcpip_init+0x80>)
 800b810:	f00b fb26 	bl	8016e60 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800b814:	2300      	movs	r3, #0
 800b816:	9300      	str	r3, [sp, #0]
 800b818:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b81c:	2200      	movs	r2, #0
 800b81e:	490c      	ldr	r1, [pc, #48]	; (800b850 <tcpip_init+0x8c>)
 800b820:	480c      	ldr	r0, [pc, #48]	; (800b854 <tcpip_init+0x90>)
 800b822:	f00b fa59 	bl	8016cd8 <sys_thread_new>
}
 800b826:	bf00      	nop
 800b828:	3708      	adds	r7, #8
 800b82a:	46bd      	mov	sp, r7
 800b82c:	bd80      	pop	{r7, pc}
 800b82e:	bf00      	nop
 800b830:	20004770 	.word	0x20004770
 800b834:	20004774 	.word	0x20004774
 800b838:	20004778 	.word	0x20004778
 800b83c:	08018f50 	.word	0x08018f50
 800b840:	08018fd8 	.word	0x08018fd8
 800b844:	08018fa0 	.word	0x08018fa0
 800b848:	20007b24 	.word	0x20007b24
 800b84c:	08018ffc 	.word	0x08018ffc
 800b850:	0800b55d 	.word	0x0800b55d
 800b854:	08019020 	.word	0x08019020

0800b858 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800b858:	b480      	push	{r7}
 800b85a:	b083      	sub	sp, #12
 800b85c:	af00      	add	r7, sp, #0
 800b85e:	4603      	mov	r3, r0
 800b860:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800b862:	88fb      	ldrh	r3, [r7, #6]
 800b864:	021b      	lsls	r3, r3, #8
 800b866:	b21a      	sxth	r2, r3
 800b868:	88fb      	ldrh	r3, [r7, #6]
 800b86a:	0a1b      	lsrs	r3, r3, #8
 800b86c:	b29b      	uxth	r3, r3
 800b86e:	b21b      	sxth	r3, r3
 800b870:	4313      	orrs	r3, r2
 800b872:	b21b      	sxth	r3, r3
 800b874:	b29b      	uxth	r3, r3
}
 800b876:	4618      	mov	r0, r3
 800b878:	370c      	adds	r7, #12
 800b87a:	46bd      	mov	sp, r7
 800b87c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b880:	4770      	bx	lr

0800b882 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800b882:	b480      	push	{r7}
 800b884:	b083      	sub	sp, #12
 800b886:	af00      	add	r7, sp, #0
 800b888:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	061a      	lsls	r2, r3, #24
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	021b      	lsls	r3, r3, #8
 800b892:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b896:	431a      	orrs	r2, r3
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	0a1b      	lsrs	r3, r3, #8
 800b89c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800b8a0:	431a      	orrs	r2, r3
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	0e1b      	lsrs	r3, r3, #24
 800b8a6:	4313      	orrs	r3, r2
}
 800b8a8:	4618      	mov	r0, r3
 800b8aa:	370c      	adds	r7, #12
 800b8ac:	46bd      	mov	sp, r7
 800b8ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8b2:	4770      	bx	lr

0800b8b4 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800b8b4:	b580      	push	{r7, lr}
 800b8b6:	b082      	sub	sp, #8
 800b8b8:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800b8ba:	2300      	movs	r3, #0
 800b8bc:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800b8be:	f00b f9c5 	bl	8016c4c <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800b8c2:	f000 f8d5 	bl	800ba70 <mem_init>
  memp_init();
 800b8c6:	f000 fc31 	bl	800c12c <memp_init>
  pbuf_init();
  netif_init();
 800b8ca:	f000 fcf7 	bl	800c2bc <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800b8ce:	f007 ff7b 	bl	80137c8 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800b8d2:	f001 fe45 	bl	800d560 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800b8d6:	f007 febf 	bl	8013658 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800b8da:	bf00      	nop
 800b8dc:	3708      	adds	r7, #8
 800b8de:	46bd      	mov	sp, r7
 800b8e0:	bd80      	pop	{r7, pc}
	...

0800b8e4 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800b8e4:	b480      	push	{r7}
 800b8e6:	b083      	sub	sp, #12
 800b8e8:	af00      	add	r7, sp, #0
 800b8ea:	4603      	mov	r3, r0
 800b8ec:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800b8ee:	4b05      	ldr	r3, [pc, #20]	; (800b904 <ptr_to_mem+0x20>)
 800b8f0:	681a      	ldr	r2, [r3, #0]
 800b8f2:	88fb      	ldrh	r3, [r7, #6]
 800b8f4:	4413      	add	r3, r2
}
 800b8f6:	4618      	mov	r0, r3
 800b8f8:	370c      	adds	r7, #12
 800b8fa:	46bd      	mov	sp, r7
 800b8fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b900:	4770      	bx	lr
 800b902:	bf00      	nop
 800b904:	2000477c 	.word	0x2000477c

0800b908 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800b908:	b480      	push	{r7}
 800b90a:	b083      	sub	sp, #12
 800b90c:	af00      	add	r7, sp, #0
 800b90e:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	4a05      	ldr	r2, [pc, #20]	; (800b928 <mem_to_ptr+0x20>)
 800b914:	6812      	ldr	r2, [r2, #0]
 800b916:	1a9b      	subs	r3, r3, r2
 800b918:	b29b      	uxth	r3, r3
}
 800b91a:	4618      	mov	r0, r3
 800b91c:	370c      	adds	r7, #12
 800b91e:	46bd      	mov	sp, r7
 800b920:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b924:	4770      	bx	lr
 800b926:	bf00      	nop
 800b928:	2000477c 	.word	0x2000477c

0800b92c <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800b92c:	b590      	push	{r4, r7, lr}
 800b92e:	b085      	sub	sp, #20
 800b930:	af00      	add	r7, sp, #0
 800b932:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800b934:	4b45      	ldr	r3, [pc, #276]	; (800ba4c <plug_holes+0x120>)
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	687a      	ldr	r2, [r7, #4]
 800b93a:	429a      	cmp	r2, r3
 800b93c:	d206      	bcs.n	800b94c <plug_holes+0x20>
 800b93e:	4b44      	ldr	r3, [pc, #272]	; (800ba50 <plug_holes+0x124>)
 800b940:	f240 12df 	movw	r2, #479	; 0x1df
 800b944:	4943      	ldr	r1, [pc, #268]	; (800ba54 <plug_holes+0x128>)
 800b946:	4844      	ldr	r0, [pc, #272]	; (800ba58 <plug_holes+0x12c>)
 800b948:	f00b fa8a 	bl	8016e60 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800b94c:	4b43      	ldr	r3, [pc, #268]	; (800ba5c <plug_holes+0x130>)
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	687a      	ldr	r2, [r7, #4]
 800b952:	429a      	cmp	r2, r3
 800b954:	d306      	bcc.n	800b964 <plug_holes+0x38>
 800b956:	4b3e      	ldr	r3, [pc, #248]	; (800ba50 <plug_holes+0x124>)
 800b958:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800b95c:	4940      	ldr	r1, [pc, #256]	; (800ba60 <plug_holes+0x134>)
 800b95e:	483e      	ldr	r0, [pc, #248]	; (800ba58 <plug_holes+0x12c>)
 800b960:	f00b fa7e 	bl	8016e60 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	791b      	ldrb	r3, [r3, #4]
 800b968:	2b00      	cmp	r3, #0
 800b96a:	d006      	beq.n	800b97a <plug_holes+0x4e>
 800b96c:	4b38      	ldr	r3, [pc, #224]	; (800ba50 <plug_holes+0x124>)
 800b96e:	f240 12e1 	movw	r2, #481	; 0x1e1
 800b972:	493c      	ldr	r1, [pc, #240]	; (800ba64 <plug_holes+0x138>)
 800b974:	4838      	ldr	r0, [pc, #224]	; (800ba58 <plug_holes+0x12c>)
 800b976:	f00b fa73 	bl	8016e60 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	881b      	ldrh	r3, [r3, #0]
 800b97e:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800b982:	d906      	bls.n	800b992 <plug_holes+0x66>
 800b984:	4b32      	ldr	r3, [pc, #200]	; (800ba50 <plug_holes+0x124>)
 800b986:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800b98a:	4937      	ldr	r1, [pc, #220]	; (800ba68 <plug_holes+0x13c>)
 800b98c:	4832      	ldr	r0, [pc, #200]	; (800ba58 <plug_holes+0x12c>)
 800b98e:	f00b fa67 	bl	8016e60 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	881b      	ldrh	r3, [r3, #0]
 800b996:	4618      	mov	r0, r3
 800b998:	f7ff ffa4 	bl	800b8e4 <ptr_to_mem>
 800b99c:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800b99e:	687a      	ldr	r2, [r7, #4]
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	429a      	cmp	r2, r3
 800b9a4:	d024      	beq.n	800b9f0 <plug_holes+0xc4>
 800b9a6:	68fb      	ldr	r3, [r7, #12]
 800b9a8:	791b      	ldrb	r3, [r3, #4]
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d120      	bne.n	800b9f0 <plug_holes+0xc4>
 800b9ae:	4b2b      	ldr	r3, [pc, #172]	; (800ba5c <plug_holes+0x130>)
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	68fa      	ldr	r2, [r7, #12]
 800b9b4:	429a      	cmp	r2, r3
 800b9b6:	d01b      	beq.n	800b9f0 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800b9b8:	4b2c      	ldr	r3, [pc, #176]	; (800ba6c <plug_holes+0x140>)
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	68fa      	ldr	r2, [r7, #12]
 800b9be:	429a      	cmp	r2, r3
 800b9c0:	d102      	bne.n	800b9c8 <plug_holes+0x9c>
      lfree = mem;
 800b9c2:	4a2a      	ldr	r2, [pc, #168]	; (800ba6c <plug_holes+0x140>)
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800b9c8:	68fb      	ldr	r3, [r7, #12]
 800b9ca:	881a      	ldrh	r2, [r3, #0]
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800b9d0:	68fb      	ldr	r3, [r7, #12]
 800b9d2:	881b      	ldrh	r3, [r3, #0]
 800b9d4:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800b9d8:	d00a      	beq.n	800b9f0 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800b9da:	68fb      	ldr	r3, [r7, #12]
 800b9dc:	881b      	ldrh	r3, [r3, #0]
 800b9de:	4618      	mov	r0, r3
 800b9e0:	f7ff ff80 	bl	800b8e4 <ptr_to_mem>
 800b9e4:	4604      	mov	r4, r0
 800b9e6:	6878      	ldr	r0, [r7, #4]
 800b9e8:	f7ff ff8e 	bl	800b908 <mem_to_ptr>
 800b9ec:	4603      	mov	r3, r0
 800b9ee:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	885b      	ldrh	r3, [r3, #2]
 800b9f4:	4618      	mov	r0, r3
 800b9f6:	f7ff ff75 	bl	800b8e4 <ptr_to_mem>
 800b9fa:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800b9fc:	68ba      	ldr	r2, [r7, #8]
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	429a      	cmp	r2, r3
 800ba02:	d01f      	beq.n	800ba44 <plug_holes+0x118>
 800ba04:	68bb      	ldr	r3, [r7, #8]
 800ba06:	791b      	ldrb	r3, [r3, #4]
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d11b      	bne.n	800ba44 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800ba0c:	4b17      	ldr	r3, [pc, #92]	; (800ba6c <plug_holes+0x140>)
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	687a      	ldr	r2, [r7, #4]
 800ba12:	429a      	cmp	r2, r3
 800ba14:	d102      	bne.n	800ba1c <plug_holes+0xf0>
      lfree = pmem;
 800ba16:	4a15      	ldr	r2, [pc, #84]	; (800ba6c <plug_holes+0x140>)
 800ba18:	68bb      	ldr	r3, [r7, #8]
 800ba1a:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	881a      	ldrh	r2, [r3, #0]
 800ba20:	68bb      	ldr	r3, [r7, #8]
 800ba22:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	881b      	ldrh	r3, [r3, #0]
 800ba28:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800ba2c:	d00a      	beq.n	800ba44 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	881b      	ldrh	r3, [r3, #0]
 800ba32:	4618      	mov	r0, r3
 800ba34:	f7ff ff56 	bl	800b8e4 <ptr_to_mem>
 800ba38:	4604      	mov	r4, r0
 800ba3a:	68b8      	ldr	r0, [r7, #8]
 800ba3c:	f7ff ff64 	bl	800b908 <mem_to_ptr>
 800ba40:	4603      	mov	r3, r0
 800ba42:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800ba44:	bf00      	nop
 800ba46:	3714      	adds	r7, #20
 800ba48:	46bd      	mov	sp, r7
 800ba4a:	bd90      	pop	{r4, r7, pc}
 800ba4c:	2000477c 	.word	0x2000477c
 800ba50:	08019030 	.word	0x08019030
 800ba54:	08019060 	.word	0x08019060
 800ba58:	08019078 	.word	0x08019078
 800ba5c:	20004780 	.word	0x20004780
 800ba60:	080190a0 	.word	0x080190a0
 800ba64:	080190bc 	.word	0x080190bc
 800ba68:	080190d8 	.word	0x080190d8
 800ba6c:	20004788 	.word	0x20004788

0800ba70 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800ba70:	b580      	push	{r7, lr}
 800ba72:	b082      	sub	sp, #8
 800ba74:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800ba76:	4b1f      	ldr	r3, [pc, #124]	; (800baf4 <mem_init+0x84>)
 800ba78:	3303      	adds	r3, #3
 800ba7a:	f023 0303 	bic.w	r3, r3, #3
 800ba7e:	461a      	mov	r2, r3
 800ba80:	4b1d      	ldr	r3, [pc, #116]	; (800baf8 <mem_init+0x88>)
 800ba82:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800ba84:	4b1c      	ldr	r3, [pc, #112]	; (800baf8 <mem_init+0x88>)
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800ba90:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	2200      	movs	r2, #0
 800ba96:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	2200      	movs	r2, #0
 800ba9c:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800ba9e:	f44f 5020 	mov.w	r0, #10240	; 0x2800
 800baa2:	f7ff ff1f 	bl	800b8e4 <ptr_to_mem>
 800baa6:	4602      	mov	r2, r0
 800baa8:	4b14      	ldr	r3, [pc, #80]	; (800bafc <mem_init+0x8c>)
 800baaa:	601a      	str	r2, [r3, #0]
  ram_end->used = 1;
 800baac:	4b13      	ldr	r3, [pc, #76]	; (800bafc <mem_init+0x8c>)
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	2201      	movs	r2, #1
 800bab2:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800bab4:	4b11      	ldr	r3, [pc, #68]	; (800bafc <mem_init+0x8c>)
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800babc:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800babe:	4b0f      	ldr	r3, [pc, #60]	; (800bafc <mem_init+0x8c>)
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800bac6:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800bac8:	4b0b      	ldr	r3, [pc, #44]	; (800baf8 <mem_init+0x88>)
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	4a0c      	ldr	r2, [pc, #48]	; (800bb00 <mem_init+0x90>)
 800bace:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800bad0:	480c      	ldr	r0, [pc, #48]	; (800bb04 <mem_init+0x94>)
 800bad2:	f00b f8c9 	bl	8016c68 <sys_mutex_new>
 800bad6:	4603      	mov	r3, r0
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d006      	beq.n	800baea <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800badc:	4b0a      	ldr	r3, [pc, #40]	; (800bb08 <mem_init+0x98>)
 800bade:	f240 221f 	movw	r2, #543	; 0x21f
 800bae2:	490a      	ldr	r1, [pc, #40]	; (800bb0c <mem_init+0x9c>)
 800bae4:	480a      	ldr	r0, [pc, #40]	; (800bb10 <mem_init+0xa0>)
 800bae6:	f00b f9bb 	bl	8016e60 <iprintf>
  }
}
 800baea:	bf00      	nop
 800baec:	3708      	adds	r7, #8
 800baee:	46bd      	mov	sp, r7
 800baf0:	bd80      	pop	{r7, pc}
 800baf2:	bf00      	nop
 800baf4:	20007b40 	.word	0x20007b40
 800baf8:	2000477c 	.word	0x2000477c
 800bafc:	20004780 	.word	0x20004780
 800bb00:	20004788 	.word	0x20004788
 800bb04:	20004784 	.word	0x20004784
 800bb08:	08019030 	.word	0x08019030
 800bb0c:	08019104 	.word	0x08019104
 800bb10:	08019078 	.word	0x08019078

0800bb14 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800bb14:	b580      	push	{r7, lr}
 800bb16:	b086      	sub	sp, #24
 800bb18:	af00      	add	r7, sp, #0
 800bb1a:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800bb1c:	6878      	ldr	r0, [r7, #4]
 800bb1e:	f7ff fef3 	bl	800b908 <mem_to_ptr>
 800bb22:	4603      	mov	r3, r0
 800bb24:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	881b      	ldrh	r3, [r3, #0]
 800bb2a:	4618      	mov	r0, r3
 800bb2c:	f7ff feda 	bl	800b8e4 <ptr_to_mem>
 800bb30:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	885b      	ldrh	r3, [r3, #2]
 800bb36:	4618      	mov	r0, r3
 800bb38:	f7ff fed4 	bl	800b8e4 <ptr_to_mem>
 800bb3c:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	881b      	ldrh	r3, [r3, #0]
 800bb42:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800bb46:	d818      	bhi.n	800bb7a <mem_link_valid+0x66>
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	885b      	ldrh	r3, [r3, #2]
 800bb4c:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800bb50:	d813      	bhi.n	800bb7a <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800bb56:	8afa      	ldrh	r2, [r7, #22]
 800bb58:	429a      	cmp	r2, r3
 800bb5a:	d004      	beq.n	800bb66 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800bb5c:	68fb      	ldr	r3, [r7, #12]
 800bb5e:	881b      	ldrh	r3, [r3, #0]
 800bb60:	8afa      	ldrh	r2, [r7, #22]
 800bb62:	429a      	cmp	r2, r3
 800bb64:	d109      	bne.n	800bb7a <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800bb66:	4b08      	ldr	r3, [pc, #32]	; (800bb88 <mem_link_valid+0x74>)
 800bb68:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800bb6a:	693a      	ldr	r2, [r7, #16]
 800bb6c:	429a      	cmp	r2, r3
 800bb6e:	d006      	beq.n	800bb7e <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800bb70:	693b      	ldr	r3, [r7, #16]
 800bb72:	885b      	ldrh	r3, [r3, #2]
 800bb74:	8afa      	ldrh	r2, [r7, #22]
 800bb76:	429a      	cmp	r2, r3
 800bb78:	d001      	beq.n	800bb7e <mem_link_valid+0x6a>
    return 0;
 800bb7a:	2300      	movs	r3, #0
 800bb7c:	e000      	b.n	800bb80 <mem_link_valid+0x6c>
  }
  return 1;
 800bb7e:	2301      	movs	r3, #1
}
 800bb80:	4618      	mov	r0, r3
 800bb82:	3718      	adds	r7, #24
 800bb84:	46bd      	mov	sp, r7
 800bb86:	bd80      	pop	{r7, pc}
 800bb88:	20004780 	.word	0x20004780

0800bb8c <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800bb8c:	b580      	push	{r7, lr}
 800bb8e:	b088      	sub	sp, #32
 800bb90:	af00      	add	r7, sp, #0
 800bb92:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	d070      	beq.n	800bc7c <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	f003 0303 	and.w	r3, r3, #3
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	d00d      	beq.n	800bbc0 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800bba4:	4b37      	ldr	r3, [pc, #220]	; (800bc84 <mem_free+0xf8>)
 800bba6:	f240 2273 	movw	r2, #627	; 0x273
 800bbaa:	4937      	ldr	r1, [pc, #220]	; (800bc88 <mem_free+0xfc>)
 800bbac:	4837      	ldr	r0, [pc, #220]	; (800bc8c <mem_free+0x100>)
 800bbae:	f00b f957 	bl	8016e60 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800bbb2:	f00b f8b7 	bl	8016d24 <sys_arch_protect>
 800bbb6:	60f8      	str	r0, [r7, #12]
 800bbb8:	68f8      	ldr	r0, [r7, #12]
 800bbba:	f00b f8c1 	bl	8016d40 <sys_arch_unprotect>
    return;
 800bbbe:	e05e      	b.n	800bc7e <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	3b08      	subs	r3, #8
 800bbc4:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800bbc6:	4b32      	ldr	r3, [pc, #200]	; (800bc90 <mem_free+0x104>)
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	69fa      	ldr	r2, [r7, #28]
 800bbcc:	429a      	cmp	r2, r3
 800bbce:	d306      	bcc.n	800bbde <mem_free+0x52>
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	f103 020c 	add.w	r2, r3, #12
 800bbd6:	4b2f      	ldr	r3, [pc, #188]	; (800bc94 <mem_free+0x108>)
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	429a      	cmp	r2, r3
 800bbdc:	d90d      	bls.n	800bbfa <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800bbde:	4b29      	ldr	r3, [pc, #164]	; (800bc84 <mem_free+0xf8>)
 800bbe0:	f240 227f 	movw	r2, #639	; 0x27f
 800bbe4:	492c      	ldr	r1, [pc, #176]	; (800bc98 <mem_free+0x10c>)
 800bbe6:	4829      	ldr	r0, [pc, #164]	; (800bc8c <mem_free+0x100>)
 800bbe8:	f00b f93a 	bl	8016e60 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800bbec:	f00b f89a 	bl	8016d24 <sys_arch_protect>
 800bbf0:	6138      	str	r0, [r7, #16]
 800bbf2:	6938      	ldr	r0, [r7, #16]
 800bbf4:	f00b f8a4 	bl	8016d40 <sys_arch_unprotect>
    return;
 800bbf8:	e041      	b.n	800bc7e <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800bbfa:	4828      	ldr	r0, [pc, #160]	; (800bc9c <mem_free+0x110>)
 800bbfc:	f00b f850 	bl	8016ca0 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800bc00:	69fb      	ldr	r3, [r7, #28]
 800bc02:	791b      	ldrb	r3, [r3, #4]
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	d110      	bne.n	800bc2a <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800bc08:	4b1e      	ldr	r3, [pc, #120]	; (800bc84 <mem_free+0xf8>)
 800bc0a:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800bc0e:	4924      	ldr	r1, [pc, #144]	; (800bca0 <mem_free+0x114>)
 800bc10:	481e      	ldr	r0, [pc, #120]	; (800bc8c <mem_free+0x100>)
 800bc12:	f00b f925 	bl	8016e60 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800bc16:	4821      	ldr	r0, [pc, #132]	; (800bc9c <mem_free+0x110>)
 800bc18:	f00b f851 	bl	8016cbe <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800bc1c:	f00b f882 	bl	8016d24 <sys_arch_protect>
 800bc20:	6178      	str	r0, [r7, #20]
 800bc22:	6978      	ldr	r0, [r7, #20]
 800bc24:	f00b f88c 	bl	8016d40 <sys_arch_unprotect>
    return;
 800bc28:	e029      	b.n	800bc7e <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800bc2a:	69f8      	ldr	r0, [r7, #28]
 800bc2c:	f7ff ff72 	bl	800bb14 <mem_link_valid>
 800bc30:	4603      	mov	r3, r0
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d110      	bne.n	800bc58 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800bc36:	4b13      	ldr	r3, [pc, #76]	; (800bc84 <mem_free+0xf8>)
 800bc38:	f240 2295 	movw	r2, #661	; 0x295
 800bc3c:	4919      	ldr	r1, [pc, #100]	; (800bca4 <mem_free+0x118>)
 800bc3e:	4813      	ldr	r0, [pc, #76]	; (800bc8c <mem_free+0x100>)
 800bc40:	f00b f90e 	bl	8016e60 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800bc44:	4815      	ldr	r0, [pc, #84]	; (800bc9c <mem_free+0x110>)
 800bc46:	f00b f83a 	bl	8016cbe <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800bc4a:	f00b f86b 	bl	8016d24 <sys_arch_protect>
 800bc4e:	61b8      	str	r0, [r7, #24]
 800bc50:	69b8      	ldr	r0, [r7, #24]
 800bc52:	f00b f875 	bl	8016d40 <sys_arch_unprotect>
    return;
 800bc56:	e012      	b.n	800bc7e <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800bc58:	69fb      	ldr	r3, [r7, #28]
 800bc5a:	2200      	movs	r2, #0
 800bc5c:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800bc5e:	4b12      	ldr	r3, [pc, #72]	; (800bca8 <mem_free+0x11c>)
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	69fa      	ldr	r2, [r7, #28]
 800bc64:	429a      	cmp	r2, r3
 800bc66:	d202      	bcs.n	800bc6e <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800bc68:	4a0f      	ldr	r2, [pc, #60]	; (800bca8 <mem_free+0x11c>)
 800bc6a:	69fb      	ldr	r3, [r7, #28]
 800bc6c:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800bc6e:	69f8      	ldr	r0, [r7, #28]
 800bc70:	f7ff fe5c 	bl	800b92c <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800bc74:	4809      	ldr	r0, [pc, #36]	; (800bc9c <mem_free+0x110>)
 800bc76:	f00b f822 	bl	8016cbe <sys_mutex_unlock>
 800bc7a:	e000      	b.n	800bc7e <mem_free+0xf2>
    return;
 800bc7c:	bf00      	nop
}
 800bc7e:	3720      	adds	r7, #32
 800bc80:	46bd      	mov	sp, r7
 800bc82:	bd80      	pop	{r7, pc}
 800bc84:	08019030 	.word	0x08019030
 800bc88:	08019120 	.word	0x08019120
 800bc8c:	08019078 	.word	0x08019078
 800bc90:	2000477c 	.word	0x2000477c
 800bc94:	20004780 	.word	0x20004780
 800bc98:	08019144 	.word	0x08019144
 800bc9c:	20004784 	.word	0x20004784
 800bca0:	08019160 	.word	0x08019160
 800bca4:	08019188 	.word	0x08019188
 800bca8:	20004788 	.word	0x20004788

0800bcac <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800bcac:	b580      	push	{r7, lr}
 800bcae:	b088      	sub	sp, #32
 800bcb0:	af00      	add	r7, sp, #0
 800bcb2:	6078      	str	r0, [r7, #4]
 800bcb4:	460b      	mov	r3, r1
 800bcb6:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800bcb8:	887b      	ldrh	r3, [r7, #2]
 800bcba:	3303      	adds	r3, #3
 800bcbc:	b29b      	uxth	r3, r3
 800bcbe:	f023 0303 	bic.w	r3, r3, #3
 800bcc2:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800bcc4:	8bfb      	ldrh	r3, [r7, #30]
 800bcc6:	2b0b      	cmp	r3, #11
 800bcc8:	d801      	bhi.n	800bcce <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800bcca:	230c      	movs	r3, #12
 800bccc:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800bcce:	8bfb      	ldrh	r3, [r7, #30]
 800bcd0:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800bcd4:	d803      	bhi.n	800bcde <mem_trim+0x32>
 800bcd6:	8bfa      	ldrh	r2, [r7, #30]
 800bcd8:	887b      	ldrh	r3, [r7, #2]
 800bcda:	429a      	cmp	r2, r3
 800bcdc:	d201      	bcs.n	800bce2 <mem_trim+0x36>
    return NULL;
 800bcde:	2300      	movs	r3, #0
 800bce0:	e0d8      	b.n	800be94 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800bce2:	4b6e      	ldr	r3, [pc, #440]	; (800be9c <mem_trim+0x1f0>)
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	687a      	ldr	r2, [r7, #4]
 800bce8:	429a      	cmp	r2, r3
 800bcea:	d304      	bcc.n	800bcf6 <mem_trim+0x4a>
 800bcec:	4b6c      	ldr	r3, [pc, #432]	; (800bea0 <mem_trim+0x1f4>)
 800bcee:	681b      	ldr	r3, [r3, #0]
 800bcf0:	687a      	ldr	r2, [r7, #4]
 800bcf2:	429a      	cmp	r2, r3
 800bcf4:	d306      	bcc.n	800bd04 <mem_trim+0x58>
 800bcf6:	4b6b      	ldr	r3, [pc, #428]	; (800bea4 <mem_trim+0x1f8>)
 800bcf8:	f240 22d2 	movw	r2, #722	; 0x2d2
 800bcfc:	496a      	ldr	r1, [pc, #424]	; (800bea8 <mem_trim+0x1fc>)
 800bcfe:	486b      	ldr	r0, [pc, #428]	; (800beac <mem_trim+0x200>)
 800bd00:	f00b f8ae 	bl	8016e60 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800bd04:	4b65      	ldr	r3, [pc, #404]	; (800be9c <mem_trim+0x1f0>)
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	687a      	ldr	r2, [r7, #4]
 800bd0a:	429a      	cmp	r2, r3
 800bd0c:	d304      	bcc.n	800bd18 <mem_trim+0x6c>
 800bd0e:	4b64      	ldr	r3, [pc, #400]	; (800bea0 <mem_trim+0x1f4>)
 800bd10:	681b      	ldr	r3, [r3, #0]
 800bd12:	687a      	ldr	r2, [r7, #4]
 800bd14:	429a      	cmp	r2, r3
 800bd16:	d307      	bcc.n	800bd28 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800bd18:	f00b f804 	bl	8016d24 <sys_arch_protect>
 800bd1c:	60b8      	str	r0, [r7, #8]
 800bd1e:	68b8      	ldr	r0, [r7, #8]
 800bd20:	f00b f80e 	bl	8016d40 <sys_arch_unprotect>
    return rmem;
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	e0b5      	b.n	800be94 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	3b08      	subs	r3, #8
 800bd2c:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800bd2e:	69b8      	ldr	r0, [r7, #24]
 800bd30:	f7ff fdea 	bl	800b908 <mem_to_ptr>
 800bd34:	4603      	mov	r3, r0
 800bd36:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800bd38:	69bb      	ldr	r3, [r7, #24]
 800bd3a:	881a      	ldrh	r2, [r3, #0]
 800bd3c:	8afb      	ldrh	r3, [r7, #22]
 800bd3e:	1ad3      	subs	r3, r2, r3
 800bd40:	b29b      	uxth	r3, r3
 800bd42:	3b08      	subs	r3, #8
 800bd44:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800bd46:	8bfa      	ldrh	r2, [r7, #30]
 800bd48:	8abb      	ldrh	r3, [r7, #20]
 800bd4a:	429a      	cmp	r2, r3
 800bd4c:	d906      	bls.n	800bd5c <mem_trim+0xb0>
 800bd4e:	4b55      	ldr	r3, [pc, #340]	; (800bea4 <mem_trim+0x1f8>)
 800bd50:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800bd54:	4956      	ldr	r1, [pc, #344]	; (800beb0 <mem_trim+0x204>)
 800bd56:	4855      	ldr	r0, [pc, #340]	; (800beac <mem_trim+0x200>)
 800bd58:	f00b f882 	bl	8016e60 <iprintf>
  if (newsize > size) {
 800bd5c:	8bfa      	ldrh	r2, [r7, #30]
 800bd5e:	8abb      	ldrh	r3, [r7, #20]
 800bd60:	429a      	cmp	r2, r3
 800bd62:	d901      	bls.n	800bd68 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800bd64:	2300      	movs	r3, #0
 800bd66:	e095      	b.n	800be94 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800bd68:	8bfa      	ldrh	r2, [r7, #30]
 800bd6a:	8abb      	ldrh	r3, [r7, #20]
 800bd6c:	429a      	cmp	r2, r3
 800bd6e:	d101      	bne.n	800bd74 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	e08f      	b.n	800be94 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800bd74:	484f      	ldr	r0, [pc, #316]	; (800beb4 <mem_trim+0x208>)
 800bd76:	f00a ff93 	bl	8016ca0 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800bd7a:	69bb      	ldr	r3, [r7, #24]
 800bd7c:	881b      	ldrh	r3, [r3, #0]
 800bd7e:	4618      	mov	r0, r3
 800bd80:	f7ff fdb0 	bl	800b8e4 <ptr_to_mem>
 800bd84:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800bd86:	693b      	ldr	r3, [r7, #16]
 800bd88:	791b      	ldrb	r3, [r3, #4]
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	d13f      	bne.n	800be0e <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800bd8e:	69bb      	ldr	r3, [r7, #24]
 800bd90:	881b      	ldrh	r3, [r3, #0]
 800bd92:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800bd96:	d106      	bne.n	800bda6 <mem_trim+0xfa>
 800bd98:	4b42      	ldr	r3, [pc, #264]	; (800bea4 <mem_trim+0x1f8>)
 800bd9a:	f240 22f5 	movw	r2, #757	; 0x2f5
 800bd9e:	4946      	ldr	r1, [pc, #280]	; (800beb8 <mem_trim+0x20c>)
 800bda0:	4842      	ldr	r0, [pc, #264]	; (800beac <mem_trim+0x200>)
 800bda2:	f00b f85d 	bl	8016e60 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800bda6:	693b      	ldr	r3, [r7, #16]
 800bda8:	881b      	ldrh	r3, [r3, #0]
 800bdaa:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800bdac:	8afa      	ldrh	r2, [r7, #22]
 800bdae:	8bfb      	ldrh	r3, [r7, #30]
 800bdb0:	4413      	add	r3, r2
 800bdb2:	b29b      	uxth	r3, r3
 800bdb4:	3308      	adds	r3, #8
 800bdb6:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800bdb8:	4b40      	ldr	r3, [pc, #256]	; (800bebc <mem_trim+0x210>)
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	693a      	ldr	r2, [r7, #16]
 800bdbe:	429a      	cmp	r2, r3
 800bdc0:	d106      	bne.n	800bdd0 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800bdc2:	89fb      	ldrh	r3, [r7, #14]
 800bdc4:	4618      	mov	r0, r3
 800bdc6:	f7ff fd8d 	bl	800b8e4 <ptr_to_mem>
 800bdca:	4602      	mov	r2, r0
 800bdcc:	4b3b      	ldr	r3, [pc, #236]	; (800bebc <mem_trim+0x210>)
 800bdce:	601a      	str	r2, [r3, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800bdd0:	89fb      	ldrh	r3, [r7, #14]
 800bdd2:	4618      	mov	r0, r3
 800bdd4:	f7ff fd86 	bl	800b8e4 <ptr_to_mem>
 800bdd8:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800bdda:	693b      	ldr	r3, [r7, #16]
 800bddc:	2200      	movs	r2, #0
 800bdde:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800bde0:	693b      	ldr	r3, [r7, #16]
 800bde2:	89ba      	ldrh	r2, [r7, #12]
 800bde4:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800bde6:	693b      	ldr	r3, [r7, #16]
 800bde8:	8afa      	ldrh	r2, [r7, #22]
 800bdea:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800bdec:	69bb      	ldr	r3, [r7, #24]
 800bdee:	89fa      	ldrh	r2, [r7, #14]
 800bdf0:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800bdf2:	693b      	ldr	r3, [r7, #16]
 800bdf4:	881b      	ldrh	r3, [r3, #0]
 800bdf6:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800bdfa:	d047      	beq.n	800be8c <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800bdfc:	693b      	ldr	r3, [r7, #16]
 800bdfe:	881b      	ldrh	r3, [r3, #0]
 800be00:	4618      	mov	r0, r3
 800be02:	f7ff fd6f 	bl	800b8e4 <ptr_to_mem>
 800be06:	4602      	mov	r2, r0
 800be08:	89fb      	ldrh	r3, [r7, #14]
 800be0a:	8053      	strh	r3, [r2, #2]
 800be0c:	e03e      	b.n	800be8c <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800be0e:	8bfb      	ldrh	r3, [r7, #30]
 800be10:	f103 0214 	add.w	r2, r3, #20
 800be14:	8abb      	ldrh	r3, [r7, #20]
 800be16:	429a      	cmp	r2, r3
 800be18:	d838      	bhi.n	800be8c <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800be1a:	8afa      	ldrh	r2, [r7, #22]
 800be1c:	8bfb      	ldrh	r3, [r7, #30]
 800be1e:	4413      	add	r3, r2
 800be20:	b29b      	uxth	r3, r3
 800be22:	3308      	adds	r3, #8
 800be24:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800be26:	69bb      	ldr	r3, [r7, #24]
 800be28:	881b      	ldrh	r3, [r3, #0]
 800be2a:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800be2e:	d106      	bne.n	800be3e <mem_trim+0x192>
 800be30:	4b1c      	ldr	r3, [pc, #112]	; (800bea4 <mem_trim+0x1f8>)
 800be32:	f240 3216 	movw	r2, #790	; 0x316
 800be36:	4920      	ldr	r1, [pc, #128]	; (800beb8 <mem_trim+0x20c>)
 800be38:	481c      	ldr	r0, [pc, #112]	; (800beac <mem_trim+0x200>)
 800be3a:	f00b f811 	bl	8016e60 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800be3e:	89fb      	ldrh	r3, [r7, #14]
 800be40:	4618      	mov	r0, r3
 800be42:	f7ff fd4f 	bl	800b8e4 <ptr_to_mem>
 800be46:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800be48:	4b1c      	ldr	r3, [pc, #112]	; (800bebc <mem_trim+0x210>)
 800be4a:	681b      	ldr	r3, [r3, #0]
 800be4c:	693a      	ldr	r2, [r7, #16]
 800be4e:	429a      	cmp	r2, r3
 800be50:	d202      	bcs.n	800be58 <mem_trim+0x1ac>
      lfree = mem2;
 800be52:	4a1a      	ldr	r2, [pc, #104]	; (800bebc <mem_trim+0x210>)
 800be54:	693b      	ldr	r3, [r7, #16]
 800be56:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800be58:	693b      	ldr	r3, [r7, #16]
 800be5a:	2200      	movs	r2, #0
 800be5c:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800be5e:	69bb      	ldr	r3, [r7, #24]
 800be60:	881a      	ldrh	r2, [r3, #0]
 800be62:	693b      	ldr	r3, [r7, #16]
 800be64:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800be66:	693b      	ldr	r3, [r7, #16]
 800be68:	8afa      	ldrh	r2, [r7, #22]
 800be6a:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800be6c:	69bb      	ldr	r3, [r7, #24]
 800be6e:	89fa      	ldrh	r2, [r7, #14]
 800be70:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800be72:	693b      	ldr	r3, [r7, #16]
 800be74:	881b      	ldrh	r3, [r3, #0]
 800be76:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800be7a:	d007      	beq.n	800be8c <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800be7c:	693b      	ldr	r3, [r7, #16]
 800be7e:	881b      	ldrh	r3, [r3, #0]
 800be80:	4618      	mov	r0, r3
 800be82:	f7ff fd2f 	bl	800b8e4 <ptr_to_mem>
 800be86:	4602      	mov	r2, r0
 800be88:	89fb      	ldrh	r3, [r7, #14]
 800be8a:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800be8c:	4809      	ldr	r0, [pc, #36]	; (800beb4 <mem_trim+0x208>)
 800be8e:	f00a ff16 	bl	8016cbe <sys_mutex_unlock>
  return rmem;
 800be92:	687b      	ldr	r3, [r7, #4]
}
 800be94:	4618      	mov	r0, r3
 800be96:	3720      	adds	r7, #32
 800be98:	46bd      	mov	sp, r7
 800be9a:	bd80      	pop	{r7, pc}
 800be9c:	2000477c 	.word	0x2000477c
 800bea0:	20004780 	.word	0x20004780
 800bea4:	08019030 	.word	0x08019030
 800bea8:	080191bc 	.word	0x080191bc
 800beac:	08019078 	.word	0x08019078
 800beb0:	080191d4 	.word	0x080191d4
 800beb4:	20004784 	.word	0x20004784
 800beb8:	080191f4 	.word	0x080191f4
 800bebc:	20004788 	.word	0x20004788

0800bec0 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800bec0:	b580      	push	{r7, lr}
 800bec2:	b088      	sub	sp, #32
 800bec4:	af00      	add	r7, sp, #0
 800bec6:	4603      	mov	r3, r0
 800bec8:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800beca:	88fb      	ldrh	r3, [r7, #6]
 800becc:	2b00      	cmp	r3, #0
 800bece:	d101      	bne.n	800bed4 <mem_malloc+0x14>
    return NULL;
 800bed0:	2300      	movs	r3, #0
 800bed2:	e0e2      	b.n	800c09a <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800bed4:	88fb      	ldrh	r3, [r7, #6]
 800bed6:	3303      	adds	r3, #3
 800bed8:	b29b      	uxth	r3, r3
 800beda:	f023 0303 	bic.w	r3, r3, #3
 800bede:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800bee0:	8bbb      	ldrh	r3, [r7, #28]
 800bee2:	2b0b      	cmp	r3, #11
 800bee4:	d801      	bhi.n	800beea <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800bee6:	230c      	movs	r3, #12
 800bee8:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800beea:	8bbb      	ldrh	r3, [r7, #28]
 800beec:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800bef0:	d803      	bhi.n	800befa <mem_malloc+0x3a>
 800bef2:	8bba      	ldrh	r2, [r7, #28]
 800bef4:	88fb      	ldrh	r3, [r7, #6]
 800bef6:	429a      	cmp	r2, r3
 800bef8:	d201      	bcs.n	800befe <mem_malloc+0x3e>
    return NULL;
 800befa:	2300      	movs	r3, #0
 800befc:	e0cd      	b.n	800c09a <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800befe:	4869      	ldr	r0, [pc, #420]	; (800c0a4 <mem_malloc+0x1e4>)
 800bf00:	f00a fece 	bl	8016ca0 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800bf04:	4b68      	ldr	r3, [pc, #416]	; (800c0a8 <mem_malloc+0x1e8>)
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	4618      	mov	r0, r3
 800bf0a:	f7ff fcfd 	bl	800b908 <mem_to_ptr>
 800bf0e:	4603      	mov	r3, r0
 800bf10:	83fb      	strh	r3, [r7, #30]
 800bf12:	e0b7      	b.n	800c084 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800bf14:	8bfb      	ldrh	r3, [r7, #30]
 800bf16:	4618      	mov	r0, r3
 800bf18:	f7ff fce4 	bl	800b8e4 <ptr_to_mem>
 800bf1c:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800bf1e:	697b      	ldr	r3, [r7, #20]
 800bf20:	791b      	ldrb	r3, [r3, #4]
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	f040 80a7 	bne.w	800c076 <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800bf28:	697b      	ldr	r3, [r7, #20]
 800bf2a:	881b      	ldrh	r3, [r3, #0]
 800bf2c:	461a      	mov	r2, r3
 800bf2e:	8bfb      	ldrh	r3, [r7, #30]
 800bf30:	1ad3      	subs	r3, r2, r3
 800bf32:	f1a3 0208 	sub.w	r2, r3, #8
 800bf36:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800bf38:	429a      	cmp	r2, r3
 800bf3a:	f0c0 809c 	bcc.w	800c076 <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800bf3e:	697b      	ldr	r3, [r7, #20]
 800bf40:	881b      	ldrh	r3, [r3, #0]
 800bf42:	461a      	mov	r2, r3
 800bf44:	8bfb      	ldrh	r3, [r7, #30]
 800bf46:	1ad3      	subs	r3, r2, r3
 800bf48:	f1a3 0208 	sub.w	r2, r3, #8
 800bf4c:	8bbb      	ldrh	r3, [r7, #28]
 800bf4e:	3314      	adds	r3, #20
 800bf50:	429a      	cmp	r2, r3
 800bf52:	d333      	bcc.n	800bfbc <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800bf54:	8bfa      	ldrh	r2, [r7, #30]
 800bf56:	8bbb      	ldrh	r3, [r7, #28]
 800bf58:	4413      	add	r3, r2
 800bf5a:	b29b      	uxth	r3, r3
 800bf5c:	3308      	adds	r3, #8
 800bf5e:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800bf60:	8a7b      	ldrh	r3, [r7, #18]
 800bf62:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800bf66:	d106      	bne.n	800bf76 <mem_malloc+0xb6>
 800bf68:	4b50      	ldr	r3, [pc, #320]	; (800c0ac <mem_malloc+0x1ec>)
 800bf6a:	f240 3287 	movw	r2, #903	; 0x387
 800bf6e:	4950      	ldr	r1, [pc, #320]	; (800c0b0 <mem_malloc+0x1f0>)
 800bf70:	4850      	ldr	r0, [pc, #320]	; (800c0b4 <mem_malloc+0x1f4>)
 800bf72:	f00a ff75 	bl	8016e60 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800bf76:	8a7b      	ldrh	r3, [r7, #18]
 800bf78:	4618      	mov	r0, r3
 800bf7a:	f7ff fcb3 	bl	800b8e4 <ptr_to_mem>
 800bf7e:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800bf80:	68fb      	ldr	r3, [r7, #12]
 800bf82:	2200      	movs	r2, #0
 800bf84:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800bf86:	697b      	ldr	r3, [r7, #20]
 800bf88:	881a      	ldrh	r2, [r3, #0]
 800bf8a:	68fb      	ldr	r3, [r7, #12]
 800bf8c:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800bf8e:	68fb      	ldr	r3, [r7, #12]
 800bf90:	8bfa      	ldrh	r2, [r7, #30]
 800bf92:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800bf94:	697b      	ldr	r3, [r7, #20]
 800bf96:	8a7a      	ldrh	r2, [r7, #18]
 800bf98:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800bf9a:	697b      	ldr	r3, [r7, #20]
 800bf9c:	2201      	movs	r2, #1
 800bf9e:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800bfa0:	68fb      	ldr	r3, [r7, #12]
 800bfa2:	881b      	ldrh	r3, [r3, #0]
 800bfa4:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800bfa8:	d00b      	beq.n	800bfc2 <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800bfaa:	68fb      	ldr	r3, [r7, #12]
 800bfac:	881b      	ldrh	r3, [r3, #0]
 800bfae:	4618      	mov	r0, r3
 800bfb0:	f7ff fc98 	bl	800b8e4 <ptr_to_mem>
 800bfb4:	4602      	mov	r2, r0
 800bfb6:	8a7b      	ldrh	r3, [r7, #18]
 800bfb8:	8053      	strh	r3, [r2, #2]
 800bfba:	e002      	b.n	800bfc2 <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800bfbc:	697b      	ldr	r3, [r7, #20]
 800bfbe:	2201      	movs	r2, #1
 800bfc0:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800bfc2:	4b39      	ldr	r3, [pc, #228]	; (800c0a8 <mem_malloc+0x1e8>)
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	697a      	ldr	r2, [r7, #20]
 800bfc8:	429a      	cmp	r2, r3
 800bfca:	d127      	bne.n	800c01c <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800bfcc:	4b36      	ldr	r3, [pc, #216]	; (800c0a8 <mem_malloc+0x1e8>)
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800bfd2:	e005      	b.n	800bfe0 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800bfd4:	69bb      	ldr	r3, [r7, #24]
 800bfd6:	881b      	ldrh	r3, [r3, #0]
 800bfd8:	4618      	mov	r0, r3
 800bfda:	f7ff fc83 	bl	800b8e4 <ptr_to_mem>
 800bfde:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800bfe0:	69bb      	ldr	r3, [r7, #24]
 800bfe2:	791b      	ldrb	r3, [r3, #4]
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d004      	beq.n	800bff2 <mem_malloc+0x132>
 800bfe8:	4b33      	ldr	r3, [pc, #204]	; (800c0b8 <mem_malloc+0x1f8>)
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	69ba      	ldr	r2, [r7, #24]
 800bfee:	429a      	cmp	r2, r3
 800bff0:	d1f0      	bne.n	800bfd4 <mem_malloc+0x114>
          }
          lfree = cur;
 800bff2:	4a2d      	ldr	r2, [pc, #180]	; (800c0a8 <mem_malloc+0x1e8>)
 800bff4:	69bb      	ldr	r3, [r7, #24]
 800bff6:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800bff8:	4b2b      	ldr	r3, [pc, #172]	; (800c0a8 <mem_malloc+0x1e8>)
 800bffa:	681a      	ldr	r2, [r3, #0]
 800bffc:	4b2e      	ldr	r3, [pc, #184]	; (800c0b8 <mem_malloc+0x1f8>)
 800bffe:	681b      	ldr	r3, [r3, #0]
 800c000:	429a      	cmp	r2, r3
 800c002:	d00b      	beq.n	800c01c <mem_malloc+0x15c>
 800c004:	4b28      	ldr	r3, [pc, #160]	; (800c0a8 <mem_malloc+0x1e8>)
 800c006:	681b      	ldr	r3, [r3, #0]
 800c008:	791b      	ldrb	r3, [r3, #4]
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	d006      	beq.n	800c01c <mem_malloc+0x15c>
 800c00e:	4b27      	ldr	r3, [pc, #156]	; (800c0ac <mem_malloc+0x1ec>)
 800c010:	f240 32b5 	movw	r2, #949	; 0x3b5
 800c014:	4929      	ldr	r1, [pc, #164]	; (800c0bc <mem_malloc+0x1fc>)
 800c016:	4827      	ldr	r0, [pc, #156]	; (800c0b4 <mem_malloc+0x1f4>)
 800c018:	f00a ff22 	bl	8016e60 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800c01c:	4821      	ldr	r0, [pc, #132]	; (800c0a4 <mem_malloc+0x1e4>)
 800c01e:	f00a fe4e 	bl	8016cbe <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800c022:	8bba      	ldrh	r2, [r7, #28]
 800c024:	697b      	ldr	r3, [r7, #20]
 800c026:	4413      	add	r3, r2
 800c028:	3308      	adds	r3, #8
 800c02a:	4a23      	ldr	r2, [pc, #140]	; (800c0b8 <mem_malloc+0x1f8>)
 800c02c:	6812      	ldr	r2, [r2, #0]
 800c02e:	4293      	cmp	r3, r2
 800c030:	d906      	bls.n	800c040 <mem_malloc+0x180>
 800c032:	4b1e      	ldr	r3, [pc, #120]	; (800c0ac <mem_malloc+0x1ec>)
 800c034:	f240 32ba 	movw	r2, #954	; 0x3ba
 800c038:	4921      	ldr	r1, [pc, #132]	; (800c0c0 <mem_malloc+0x200>)
 800c03a:	481e      	ldr	r0, [pc, #120]	; (800c0b4 <mem_malloc+0x1f4>)
 800c03c:	f00a ff10 	bl	8016e60 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800c040:	697b      	ldr	r3, [r7, #20]
 800c042:	f003 0303 	and.w	r3, r3, #3
 800c046:	2b00      	cmp	r3, #0
 800c048:	d006      	beq.n	800c058 <mem_malloc+0x198>
 800c04a:	4b18      	ldr	r3, [pc, #96]	; (800c0ac <mem_malloc+0x1ec>)
 800c04c:	f44f 726f 	mov.w	r2, #956	; 0x3bc
 800c050:	491c      	ldr	r1, [pc, #112]	; (800c0c4 <mem_malloc+0x204>)
 800c052:	4818      	ldr	r0, [pc, #96]	; (800c0b4 <mem_malloc+0x1f4>)
 800c054:	f00a ff04 	bl	8016e60 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800c058:	697b      	ldr	r3, [r7, #20]
 800c05a:	f003 0303 	and.w	r3, r3, #3
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d006      	beq.n	800c070 <mem_malloc+0x1b0>
 800c062:	4b12      	ldr	r3, [pc, #72]	; (800c0ac <mem_malloc+0x1ec>)
 800c064:	f240 32be 	movw	r2, #958	; 0x3be
 800c068:	4917      	ldr	r1, [pc, #92]	; (800c0c8 <mem_malloc+0x208>)
 800c06a:	4812      	ldr	r0, [pc, #72]	; (800c0b4 <mem_malloc+0x1f4>)
 800c06c:	f00a fef8 	bl	8016e60 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800c070:	697b      	ldr	r3, [r7, #20]
 800c072:	3308      	adds	r3, #8
 800c074:	e011      	b.n	800c09a <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800c076:	8bfb      	ldrh	r3, [r7, #30]
 800c078:	4618      	mov	r0, r3
 800c07a:	f7ff fc33 	bl	800b8e4 <ptr_to_mem>
 800c07e:	4603      	mov	r3, r0
 800c080:	881b      	ldrh	r3, [r3, #0]
 800c082:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800c084:	8bfa      	ldrh	r2, [r7, #30]
 800c086:	8bbb      	ldrh	r3, [r7, #28]
 800c088:	f5c3 5320 	rsb	r3, r3, #10240	; 0x2800
 800c08c:	429a      	cmp	r2, r3
 800c08e:	f4ff af41 	bcc.w	800bf14 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800c092:	4804      	ldr	r0, [pc, #16]	; (800c0a4 <mem_malloc+0x1e4>)
 800c094:	f00a fe13 	bl	8016cbe <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800c098:	2300      	movs	r3, #0
}
 800c09a:	4618      	mov	r0, r3
 800c09c:	3720      	adds	r7, #32
 800c09e:	46bd      	mov	sp, r7
 800c0a0:	bd80      	pop	{r7, pc}
 800c0a2:	bf00      	nop
 800c0a4:	20004784 	.word	0x20004784
 800c0a8:	20004788 	.word	0x20004788
 800c0ac:	08019030 	.word	0x08019030
 800c0b0:	080191f4 	.word	0x080191f4
 800c0b4:	08019078 	.word	0x08019078
 800c0b8:	20004780 	.word	0x20004780
 800c0bc:	08019208 	.word	0x08019208
 800c0c0:	08019224 	.word	0x08019224
 800c0c4:	08019254 	.word	0x08019254
 800c0c8:	08019284 	.word	0x08019284

0800c0cc <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800c0cc:	b480      	push	{r7}
 800c0ce:	b085      	sub	sp, #20
 800c0d0:	af00      	add	r7, sp, #0
 800c0d2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	689b      	ldr	r3, [r3, #8]
 800c0d8:	2200      	movs	r2, #0
 800c0da:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	685b      	ldr	r3, [r3, #4]
 800c0e0:	3303      	adds	r3, #3
 800c0e2:	f023 0303 	bic.w	r3, r3, #3
 800c0e6:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800c0e8:	2300      	movs	r3, #0
 800c0ea:	60fb      	str	r3, [r7, #12]
 800c0ec:	e011      	b.n	800c112 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	689b      	ldr	r3, [r3, #8]
 800c0f2:	681a      	ldr	r2, [r3, #0]
 800c0f4:	68bb      	ldr	r3, [r7, #8]
 800c0f6:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	689b      	ldr	r3, [r3, #8]
 800c0fc:	68ba      	ldr	r2, [r7, #8]
 800c0fe:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	881b      	ldrh	r3, [r3, #0]
 800c104:	461a      	mov	r2, r3
 800c106:	68bb      	ldr	r3, [r7, #8]
 800c108:	4413      	add	r3, r2
 800c10a:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800c10c:	68fb      	ldr	r3, [r7, #12]
 800c10e:	3301      	adds	r3, #1
 800c110:	60fb      	str	r3, [r7, #12]
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	885b      	ldrh	r3, [r3, #2]
 800c116:	461a      	mov	r2, r3
 800c118:	68fb      	ldr	r3, [r7, #12]
 800c11a:	4293      	cmp	r3, r2
 800c11c:	dbe7      	blt.n	800c0ee <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800c11e:	bf00      	nop
 800c120:	3714      	adds	r7, #20
 800c122:	46bd      	mov	sp, r7
 800c124:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c128:	4770      	bx	lr
	...

0800c12c <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800c12c:	b580      	push	{r7, lr}
 800c12e:	b082      	sub	sp, #8
 800c130:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800c132:	2300      	movs	r3, #0
 800c134:	80fb      	strh	r3, [r7, #6]
 800c136:	e009      	b.n	800c14c <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800c138:	88fb      	ldrh	r3, [r7, #6]
 800c13a:	4a08      	ldr	r2, [pc, #32]	; (800c15c <memp_init+0x30>)
 800c13c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c140:	4618      	mov	r0, r3
 800c142:	f7ff ffc3 	bl	800c0cc <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800c146:	88fb      	ldrh	r3, [r7, #6]
 800c148:	3301      	adds	r3, #1
 800c14a:	80fb      	strh	r3, [r7, #6]
 800c14c:	88fb      	ldrh	r3, [r7, #6]
 800c14e:	2b0c      	cmp	r3, #12
 800c150:	d9f2      	bls.n	800c138 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800c152:	bf00      	nop
 800c154:	3708      	adds	r7, #8
 800c156:	46bd      	mov	sp, r7
 800c158:	bd80      	pop	{r7, pc}
 800c15a:	bf00      	nop
 800c15c:	0801bb44 	.word	0x0801bb44

0800c160 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800c160:	b580      	push	{r7, lr}
 800c162:	b084      	sub	sp, #16
 800c164:	af00      	add	r7, sp, #0
 800c166:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800c168:	f00a fddc 	bl	8016d24 <sys_arch_protect>
 800c16c:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	689b      	ldr	r3, [r3, #8]
 800c172:	681b      	ldr	r3, [r3, #0]
 800c174:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800c176:	68bb      	ldr	r3, [r7, #8]
 800c178:	2b00      	cmp	r3, #0
 800c17a:	d015      	beq.n	800c1a8 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	689b      	ldr	r3, [r3, #8]
 800c180:	68ba      	ldr	r2, [r7, #8]
 800c182:	6812      	ldr	r2, [r2, #0]
 800c184:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800c186:	68bb      	ldr	r3, [r7, #8]
 800c188:	f003 0303 	and.w	r3, r3, #3
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	d006      	beq.n	800c19e <do_memp_malloc_pool+0x3e>
 800c190:	4b09      	ldr	r3, [pc, #36]	; (800c1b8 <do_memp_malloc_pool+0x58>)
 800c192:	f240 1219 	movw	r2, #281	; 0x119
 800c196:	4909      	ldr	r1, [pc, #36]	; (800c1bc <do_memp_malloc_pool+0x5c>)
 800c198:	4809      	ldr	r0, [pc, #36]	; (800c1c0 <do_memp_malloc_pool+0x60>)
 800c19a:	f00a fe61 	bl	8016e60 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800c19e:	68f8      	ldr	r0, [r7, #12]
 800c1a0:	f00a fdce 	bl	8016d40 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800c1a4:	68bb      	ldr	r3, [r7, #8]
 800c1a6:	e003      	b.n	800c1b0 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800c1a8:	68f8      	ldr	r0, [r7, #12]
 800c1aa:	f00a fdc9 	bl	8016d40 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800c1ae:	2300      	movs	r3, #0
}
 800c1b0:	4618      	mov	r0, r3
 800c1b2:	3710      	adds	r7, #16
 800c1b4:	46bd      	mov	sp, r7
 800c1b6:	bd80      	pop	{r7, pc}
 800c1b8:	080192a8 	.word	0x080192a8
 800c1bc:	080192d8 	.word	0x080192d8
 800c1c0:	080192fc 	.word	0x080192fc

0800c1c4 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800c1c4:	b580      	push	{r7, lr}
 800c1c6:	b084      	sub	sp, #16
 800c1c8:	af00      	add	r7, sp, #0
 800c1ca:	4603      	mov	r3, r0
 800c1cc:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800c1ce:	79fb      	ldrb	r3, [r7, #7]
 800c1d0:	2b0c      	cmp	r3, #12
 800c1d2:	d908      	bls.n	800c1e6 <memp_malloc+0x22>
 800c1d4:	4b0a      	ldr	r3, [pc, #40]	; (800c200 <memp_malloc+0x3c>)
 800c1d6:	f240 1257 	movw	r2, #343	; 0x157
 800c1da:	490a      	ldr	r1, [pc, #40]	; (800c204 <memp_malloc+0x40>)
 800c1dc:	480a      	ldr	r0, [pc, #40]	; (800c208 <memp_malloc+0x44>)
 800c1de:	f00a fe3f 	bl	8016e60 <iprintf>
 800c1e2:	2300      	movs	r3, #0
 800c1e4:	e008      	b.n	800c1f8 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800c1e6:	79fb      	ldrb	r3, [r7, #7]
 800c1e8:	4a08      	ldr	r2, [pc, #32]	; (800c20c <memp_malloc+0x48>)
 800c1ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c1ee:	4618      	mov	r0, r3
 800c1f0:	f7ff ffb6 	bl	800c160 <do_memp_malloc_pool>
 800c1f4:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800c1f6:	68fb      	ldr	r3, [r7, #12]
}
 800c1f8:	4618      	mov	r0, r3
 800c1fa:	3710      	adds	r7, #16
 800c1fc:	46bd      	mov	sp, r7
 800c1fe:	bd80      	pop	{r7, pc}
 800c200:	080192a8 	.word	0x080192a8
 800c204:	08019338 	.word	0x08019338
 800c208:	080192fc 	.word	0x080192fc
 800c20c:	0801bb44 	.word	0x0801bb44

0800c210 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800c210:	b580      	push	{r7, lr}
 800c212:	b084      	sub	sp, #16
 800c214:	af00      	add	r7, sp, #0
 800c216:	6078      	str	r0, [r7, #4]
 800c218:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800c21a:	683b      	ldr	r3, [r7, #0]
 800c21c:	f003 0303 	and.w	r3, r3, #3
 800c220:	2b00      	cmp	r3, #0
 800c222:	d006      	beq.n	800c232 <do_memp_free_pool+0x22>
 800c224:	4b0d      	ldr	r3, [pc, #52]	; (800c25c <do_memp_free_pool+0x4c>)
 800c226:	f240 126d 	movw	r2, #365	; 0x16d
 800c22a:	490d      	ldr	r1, [pc, #52]	; (800c260 <do_memp_free_pool+0x50>)
 800c22c:	480d      	ldr	r0, [pc, #52]	; (800c264 <do_memp_free_pool+0x54>)
 800c22e:	f00a fe17 	bl	8016e60 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800c232:	683b      	ldr	r3, [r7, #0]
 800c234:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800c236:	f00a fd75 	bl	8016d24 <sys_arch_protect>
 800c23a:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	689b      	ldr	r3, [r3, #8]
 800c240:	681a      	ldr	r2, [r3, #0]
 800c242:	68fb      	ldr	r3, [r7, #12]
 800c244:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	689b      	ldr	r3, [r3, #8]
 800c24a:	68fa      	ldr	r2, [r7, #12]
 800c24c:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800c24e:	68b8      	ldr	r0, [r7, #8]
 800c250:	f00a fd76 	bl	8016d40 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800c254:	bf00      	nop
 800c256:	3710      	adds	r7, #16
 800c258:	46bd      	mov	sp, r7
 800c25a:	bd80      	pop	{r7, pc}
 800c25c:	080192a8 	.word	0x080192a8
 800c260:	08019358 	.word	0x08019358
 800c264:	080192fc 	.word	0x080192fc

0800c268 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800c268:	b580      	push	{r7, lr}
 800c26a:	b082      	sub	sp, #8
 800c26c:	af00      	add	r7, sp, #0
 800c26e:	4603      	mov	r3, r0
 800c270:	6039      	str	r1, [r7, #0]
 800c272:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800c274:	79fb      	ldrb	r3, [r7, #7]
 800c276:	2b0c      	cmp	r3, #12
 800c278:	d907      	bls.n	800c28a <memp_free+0x22>
 800c27a:	4b0c      	ldr	r3, [pc, #48]	; (800c2ac <memp_free+0x44>)
 800c27c:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800c280:	490b      	ldr	r1, [pc, #44]	; (800c2b0 <memp_free+0x48>)
 800c282:	480c      	ldr	r0, [pc, #48]	; (800c2b4 <memp_free+0x4c>)
 800c284:	f00a fdec 	bl	8016e60 <iprintf>
 800c288:	e00c      	b.n	800c2a4 <memp_free+0x3c>

  if (mem == NULL) {
 800c28a:	683b      	ldr	r3, [r7, #0]
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	d008      	beq.n	800c2a2 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800c290:	79fb      	ldrb	r3, [r7, #7]
 800c292:	4a09      	ldr	r2, [pc, #36]	; (800c2b8 <memp_free+0x50>)
 800c294:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c298:	6839      	ldr	r1, [r7, #0]
 800c29a:	4618      	mov	r0, r3
 800c29c:	f7ff ffb8 	bl	800c210 <do_memp_free_pool>
 800c2a0:	e000      	b.n	800c2a4 <memp_free+0x3c>
    return;
 800c2a2:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800c2a4:	3708      	adds	r7, #8
 800c2a6:	46bd      	mov	sp, r7
 800c2a8:	bd80      	pop	{r7, pc}
 800c2aa:	bf00      	nop
 800c2ac:	080192a8 	.word	0x080192a8
 800c2b0:	08019378 	.word	0x08019378
 800c2b4:	080192fc 	.word	0x080192fc
 800c2b8:	0801bb44 	.word	0x0801bb44

0800c2bc <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800c2bc:	b480      	push	{r7}
 800c2be:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800c2c0:	bf00      	nop
 800c2c2:	46bd      	mov	sp, r7
 800c2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2c8:	4770      	bx	lr
	...

0800c2cc <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800c2cc:	b580      	push	{r7, lr}
 800c2ce:	b086      	sub	sp, #24
 800c2d0:	af00      	add	r7, sp, #0
 800c2d2:	60f8      	str	r0, [r7, #12]
 800c2d4:	60b9      	str	r1, [r7, #8]
 800c2d6:	607a      	str	r2, [r7, #4]
 800c2d8:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800c2da:	68fb      	ldr	r3, [r7, #12]
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d108      	bne.n	800c2f2 <netif_add+0x26>
 800c2e0:	4b57      	ldr	r3, [pc, #348]	; (800c440 <netif_add+0x174>)
 800c2e2:	f240 1227 	movw	r2, #295	; 0x127
 800c2e6:	4957      	ldr	r1, [pc, #348]	; (800c444 <netif_add+0x178>)
 800c2e8:	4857      	ldr	r0, [pc, #348]	; (800c448 <netif_add+0x17c>)
 800c2ea:	f00a fdb9 	bl	8016e60 <iprintf>
 800c2ee:	2300      	movs	r3, #0
 800c2f0:	e0a2      	b.n	800c438 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800c2f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	d108      	bne.n	800c30a <netif_add+0x3e>
 800c2f8:	4b51      	ldr	r3, [pc, #324]	; (800c440 <netif_add+0x174>)
 800c2fa:	f44f 7294 	mov.w	r2, #296	; 0x128
 800c2fe:	4953      	ldr	r1, [pc, #332]	; (800c44c <netif_add+0x180>)
 800c300:	4851      	ldr	r0, [pc, #324]	; (800c448 <netif_add+0x17c>)
 800c302:	f00a fdad 	bl	8016e60 <iprintf>
 800c306:	2300      	movs	r3, #0
 800c308:	e096      	b.n	800c438 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800c30a:	68bb      	ldr	r3, [r7, #8]
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	d101      	bne.n	800c314 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800c310:	4b4f      	ldr	r3, [pc, #316]	; (800c450 <netif_add+0x184>)
 800c312:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	2b00      	cmp	r3, #0
 800c318:	d101      	bne.n	800c31e <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800c31a:	4b4d      	ldr	r3, [pc, #308]	; (800c450 <netif_add+0x184>)
 800c31c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800c31e:	683b      	ldr	r3, [r7, #0]
 800c320:	2b00      	cmp	r3, #0
 800c322:	d101      	bne.n	800c328 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800c324:	4b4a      	ldr	r3, [pc, #296]	; (800c450 <netif_add+0x184>)
 800c326:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800c328:	68fb      	ldr	r3, [r7, #12]
 800c32a:	2200      	movs	r2, #0
 800c32c:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800c32e:	68fb      	ldr	r3, [r7, #12]
 800c330:	2200      	movs	r2, #0
 800c332:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800c334:	68fb      	ldr	r3, [r7, #12]
 800c336:	2200      	movs	r2, #0
 800c338:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800c33a:	68fb      	ldr	r3, [r7, #12]
 800c33c:	4a45      	ldr	r2, [pc, #276]	; (800c454 <netif_add+0x188>)
 800c33e:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800c340:	68fb      	ldr	r3, [r7, #12]
 800c342:	2200      	movs	r2, #0
 800c344:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 800c346:	68fb      	ldr	r3, [r7, #12]
 800c348:	2200      	movs	r2, #0
 800c34a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800c34e:	68fb      	ldr	r3, [r7, #12]
 800c350:	2200      	movs	r2, #0
 800c352:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800c354:	68fb      	ldr	r3, [r7, #12]
 800c356:	6a3a      	ldr	r2, [r7, #32]
 800c358:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800c35a:	4b3f      	ldr	r3, [pc, #252]	; (800c458 <netif_add+0x18c>)
 800c35c:	781a      	ldrb	r2, [r3, #0]
 800c35e:	68fb      	ldr	r3, [r7, #12]
 800c360:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 800c364:	68fb      	ldr	r3, [r7, #12]
 800c366:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c368:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800c36a:	683b      	ldr	r3, [r7, #0]
 800c36c:	687a      	ldr	r2, [r7, #4]
 800c36e:	68b9      	ldr	r1, [r7, #8]
 800c370:	68f8      	ldr	r0, [r7, #12]
 800c372:	f000 f913 	bl	800c59c <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800c376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c378:	68f8      	ldr	r0, [r7, #12]
 800c37a:	4798      	blx	r3
 800c37c:	4603      	mov	r3, r0
 800c37e:	2b00      	cmp	r3, #0
 800c380:	d001      	beq.n	800c386 <netif_add+0xba>
    return NULL;
 800c382:	2300      	movs	r3, #0
 800c384:	e058      	b.n	800c438 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800c386:	68fb      	ldr	r3, [r7, #12]
 800c388:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c38c:	2bff      	cmp	r3, #255	; 0xff
 800c38e:	d103      	bne.n	800c398 <netif_add+0xcc>
        netif->num = 0;
 800c390:	68fb      	ldr	r3, [r7, #12]
 800c392:	2200      	movs	r2, #0
 800c394:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 800c398:	2300      	movs	r3, #0
 800c39a:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800c39c:	4b2f      	ldr	r3, [pc, #188]	; (800c45c <netif_add+0x190>)
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	617b      	str	r3, [r7, #20]
 800c3a2:	e02b      	b.n	800c3fc <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800c3a4:	697a      	ldr	r2, [r7, #20]
 800c3a6:	68fb      	ldr	r3, [r7, #12]
 800c3a8:	429a      	cmp	r2, r3
 800c3aa:	d106      	bne.n	800c3ba <netif_add+0xee>
 800c3ac:	4b24      	ldr	r3, [pc, #144]	; (800c440 <netif_add+0x174>)
 800c3ae:	f240 128b 	movw	r2, #395	; 0x18b
 800c3b2:	492b      	ldr	r1, [pc, #172]	; (800c460 <netif_add+0x194>)
 800c3b4:	4824      	ldr	r0, [pc, #144]	; (800c448 <netif_add+0x17c>)
 800c3b6:	f00a fd53 	bl	8016e60 <iprintf>
        num_netifs++;
 800c3ba:	693b      	ldr	r3, [r7, #16]
 800c3bc:	3301      	adds	r3, #1
 800c3be:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800c3c0:	693b      	ldr	r3, [r7, #16]
 800c3c2:	2bff      	cmp	r3, #255	; 0xff
 800c3c4:	dd06      	ble.n	800c3d4 <netif_add+0x108>
 800c3c6:	4b1e      	ldr	r3, [pc, #120]	; (800c440 <netif_add+0x174>)
 800c3c8:	f240 128d 	movw	r2, #397	; 0x18d
 800c3cc:	4925      	ldr	r1, [pc, #148]	; (800c464 <netif_add+0x198>)
 800c3ce:	481e      	ldr	r0, [pc, #120]	; (800c448 <netif_add+0x17c>)
 800c3d0:	f00a fd46 	bl	8016e60 <iprintf>
        if (netif2->num == netif->num) {
 800c3d4:	697b      	ldr	r3, [r7, #20]
 800c3d6:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800c3da:	68fb      	ldr	r3, [r7, #12]
 800c3dc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c3e0:	429a      	cmp	r2, r3
 800c3e2:	d108      	bne.n	800c3f6 <netif_add+0x12a>
          netif->num++;
 800c3e4:	68fb      	ldr	r3, [r7, #12]
 800c3e6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c3ea:	3301      	adds	r3, #1
 800c3ec:	b2da      	uxtb	r2, r3
 800c3ee:	68fb      	ldr	r3, [r7, #12]
 800c3f0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 800c3f4:	e005      	b.n	800c402 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800c3f6:	697b      	ldr	r3, [r7, #20]
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	617b      	str	r3, [r7, #20]
 800c3fc:	697b      	ldr	r3, [r7, #20]
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	d1d0      	bne.n	800c3a4 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800c402:	697b      	ldr	r3, [r7, #20]
 800c404:	2b00      	cmp	r3, #0
 800c406:	d1be      	bne.n	800c386 <netif_add+0xba>
  }
  if (netif->num == 254) {
 800c408:	68fb      	ldr	r3, [r7, #12]
 800c40a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c40e:	2bfe      	cmp	r3, #254	; 0xfe
 800c410:	d103      	bne.n	800c41a <netif_add+0x14e>
    netif_num = 0;
 800c412:	4b11      	ldr	r3, [pc, #68]	; (800c458 <netif_add+0x18c>)
 800c414:	2200      	movs	r2, #0
 800c416:	701a      	strb	r2, [r3, #0]
 800c418:	e006      	b.n	800c428 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800c41a:	68fb      	ldr	r3, [r7, #12]
 800c41c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c420:	3301      	adds	r3, #1
 800c422:	b2da      	uxtb	r2, r3
 800c424:	4b0c      	ldr	r3, [pc, #48]	; (800c458 <netif_add+0x18c>)
 800c426:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800c428:	4b0c      	ldr	r3, [pc, #48]	; (800c45c <netif_add+0x190>)
 800c42a:	681a      	ldr	r2, [r3, #0]
 800c42c:	68fb      	ldr	r3, [r7, #12]
 800c42e:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800c430:	4a0a      	ldr	r2, [pc, #40]	; (800c45c <netif_add+0x190>)
 800c432:	68fb      	ldr	r3, [r7, #12]
 800c434:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800c436:	68fb      	ldr	r3, [r7, #12]
}
 800c438:	4618      	mov	r0, r3
 800c43a:	3718      	adds	r7, #24
 800c43c:	46bd      	mov	sp, r7
 800c43e:	bd80      	pop	{r7, pc}
 800c440:	08019394 	.word	0x08019394
 800c444:	08019428 	.word	0x08019428
 800c448:	080193e4 	.word	0x080193e4
 800c44c:	08019444 	.word	0x08019444
 800c450:	0801bbb8 	.word	0x0801bbb8
 800c454:	0800c877 	.word	0x0800c877
 800c458:	200047c0 	.word	0x200047c0
 800c45c:	2000d3ec 	.word	0x2000d3ec
 800c460:	08019468 	.word	0x08019468
 800c464:	0801947c 	.word	0x0801947c

0800c468 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800c468:	b580      	push	{r7, lr}
 800c46a:	b082      	sub	sp, #8
 800c46c:	af00      	add	r7, sp, #0
 800c46e:	6078      	str	r0, [r7, #4]
 800c470:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800c472:	6839      	ldr	r1, [r7, #0]
 800c474:	6878      	ldr	r0, [r7, #4]
 800c476:	f002 fdb5 	bl	800efe4 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800c47a:	6839      	ldr	r1, [r7, #0]
 800c47c:	6878      	ldr	r0, [r7, #4]
 800c47e:	f007 fe5d 	bl	801413c <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800c482:	bf00      	nop
 800c484:	3708      	adds	r7, #8
 800c486:	46bd      	mov	sp, r7
 800c488:	bd80      	pop	{r7, pc}
	...

0800c48c <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800c48c:	b580      	push	{r7, lr}
 800c48e:	b086      	sub	sp, #24
 800c490:	af00      	add	r7, sp, #0
 800c492:	60f8      	str	r0, [r7, #12]
 800c494:	60b9      	str	r1, [r7, #8]
 800c496:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800c498:	68bb      	ldr	r3, [r7, #8]
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	d106      	bne.n	800c4ac <netif_do_set_ipaddr+0x20>
 800c49e:	4b1d      	ldr	r3, [pc, #116]	; (800c514 <netif_do_set_ipaddr+0x88>)
 800c4a0:	f240 12cb 	movw	r2, #459	; 0x1cb
 800c4a4:	491c      	ldr	r1, [pc, #112]	; (800c518 <netif_do_set_ipaddr+0x8c>)
 800c4a6:	481d      	ldr	r0, [pc, #116]	; (800c51c <netif_do_set_ipaddr+0x90>)
 800c4a8:	f00a fcda 	bl	8016e60 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	d106      	bne.n	800c4c0 <netif_do_set_ipaddr+0x34>
 800c4b2:	4b18      	ldr	r3, [pc, #96]	; (800c514 <netif_do_set_ipaddr+0x88>)
 800c4b4:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800c4b8:	4917      	ldr	r1, [pc, #92]	; (800c518 <netif_do_set_ipaddr+0x8c>)
 800c4ba:	4818      	ldr	r0, [pc, #96]	; (800c51c <netif_do_set_ipaddr+0x90>)
 800c4bc:	f00a fcd0 	bl	8016e60 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800c4c0:	68bb      	ldr	r3, [r7, #8]
 800c4c2:	681a      	ldr	r2, [r3, #0]
 800c4c4:	68fb      	ldr	r3, [r7, #12]
 800c4c6:	3304      	adds	r3, #4
 800c4c8:	681b      	ldr	r3, [r3, #0]
 800c4ca:	429a      	cmp	r2, r3
 800c4cc:	d01c      	beq.n	800c508 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800c4ce:	68bb      	ldr	r3, [r7, #8]
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800c4d4:	68fb      	ldr	r3, [r7, #12]
 800c4d6:	3304      	adds	r3, #4
 800c4d8:	681a      	ldr	r2, [r3, #0]
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800c4de:	f107 0314 	add.w	r3, r7, #20
 800c4e2:	4619      	mov	r1, r3
 800c4e4:	6878      	ldr	r0, [r7, #4]
 800c4e6:	f7ff ffbf 	bl	800c468 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800c4ea:	68bb      	ldr	r3, [r7, #8]
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	d002      	beq.n	800c4f6 <netif_do_set_ipaddr+0x6a>
 800c4f0:	68bb      	ldr	r3, [r7, #8]
 800c4f2:	681b      	ldr	r3, [r3, #0]
 800c4f4:	e000      	b.n	800c4f8 <netif_do_set_ipaddr+0x6c>
 800c4f6:	2300      	movs	r3, #0
 800c4f8:	68fa      	ldr	r2, [r7, #12]
 800c4fa:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800c4fc:	2101      	movs	r1, #1
 800c4fe:	68f8      	ldr	r0, [r7, #12]
 800c500:	f000 f8d2 	bl	800c6a8 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800c504:	2301      	movs	r3, #1
 800c506:	e000      	b.n	800c50a <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800c508:	2300      	movs	r3, #0
}
 800c50a:	4618      	mov	r0, r3
 800c50c:	3718      	adds	r7, #24
 800c50e:	46bd      	mov	sp, r7
 800c510:	bd80      	pop	{r7, pc}
 800c512:	bf00      	nop
 800c514:	08019394 	.word	0x08019394
 800c518:	080194ac 	.word	0x080194ac
 800c51c:	080193e4 	.word	0x080193e4

0800c520 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800c520:	b480      	push	{r7}
 800c522:	b085      	sub	sp, #20
 800c524:	af00      	add	r7, sp, #0
 800c526:	60f8      	str	r0, [r7, #12]
 800c528:	60b9      	str	r1, [r7, #8]
 800c52a:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800c52c:	68bb      	ldr	r3, [r7, #8]
 800c52e:	681a      	ldr	r2, [r3, #0]
 800c530:	68fb      	ldr	r3, [r7, #12]
 800c532:	3308      	adds	r3, #8
 800c534:	681b      	ldr	r3, [r3, #0]
 800c536:	429a      	cmp	r2, r3
 800c538:	d00a      	beq.n	800c550 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800c53a:	68bb      	ldr	r3, [r7, #8]
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	d002      	beq.n	800c546 <netif_do_set_netmask+0x26>
 800c540:	68bb      	ldr	r3, [r7, #8]
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	e000      	b.n	800c548 <netif_do_set_netmask+0x28>
 800c546:	2300      	movs	r3, #0
 800c548:	68fa      	ldr	r2, [r7, #12]
 800c54a:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800c54c:	2301      	movs	r3, #1
 800c54e:	e000      	b.n	800c552 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800c550:	2300      	movs	r3, #0
}
 800c552:	4618      	mov	r0, r3
 800c554:	3714      	adds	r7, #20
 800c556:	46bd      	mov	sp, r7
 800c558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c55c:	4770      	bx	lr

0800c55e <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800c55e:	b480      	push	{r7}
 800c560:	b085      	sub	sp, #20
 800c562:	af00      	add	r7, sp, #0
 800c564:	60f8      	str	r0, [r7, #12]
 800c566:	60b9      	str	r1, [r7, #8]
 800c568:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800c56a:	68bb      	ldr	r3, [r7, #8]
 800c56c:	681a      	ldr	r2, [r3, #0]
 800c56e:	68fb      	ldr	r3, [r7, #12]
 800c570:	330c      	adds	r3, #12
 800c572:	681b      	ldr	r3, [r3, #0]
 800c574:	429a      	cmp	r2, r3
 800c576:	d00a      	beq.n	800c58e <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800c578:	68bb      	ldr	r3, [r7, #8]
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	d002      	beq.n	800c584 <netif_do_set_gw+0x26>
 800c57e:	68bb      	ldr	r3, [r7, #8]
 800c580:	681b      	ldr	r3, [r3, #0]
 800c582:	e000      	b.n	800c586 <netif_do_set_gw+0x28>
 800c584:	2300      	movs	r3, #0
 800c586:	68fa      	ldr	r2, [r7, #12]
 800c588:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800c58a:	2301      	movs	r3, #1
 800c58c:	e000      	b.n	800c590 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800c58e:	2300      	movs	r3, #0
}
 800c590:	4618      	mov	r0, r3
 800c592:	3714      	adds	r7, #20
 800c594:	46bd      	mov	sp, r7
 800c596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c59a:	4770      	bx	lr

0800c59c <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800c59c:	b580      	push	{r7, lr}
 800c59e:	b088      	sub	sp, #32
 800c5a0:	af00      	add	r7, sp, #0
 800c5a2:	60f8      	str	r0, [r7, #12]
 800c5a4:	60b9      	str	r1, [r7, #8]
 800c5a6:	607a      	str	r2, [r7, #4]
 800c5a8:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800c5aa:	2300      	movs	r3, #0
 800c5ac:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800c5ae:	2300      	movs	r3, #0
 800c5b0:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800c5b2:	68bb      	ldr	r3, [r7, #8]
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	d101      	bne.n	800c5bc <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800c5b8:	4b1c      	ldr	r3, [pc, #112]	; (800c62c <netif_set_addr+0x90>)
 800c5ba:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	d101      	bne.n	800c5c6 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800c5c2:	4b1a      	ldr	r3, [pc, #104]	; (800c62c <netif_set_addr+0x90>)
 800c5c4:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800c5c6:	683b      	ldr	r3, [r7, #0]
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	d101      	bne.n	800c5d0 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800c5cc:	4b17      	ldr	r3, [pc, #92]	; (800c62c <netif_set_addr+0x90>)
 800c5ce:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800c5d0:	68bb      	ldr	r3, [r7, #8]
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	d003      	beq.n	800c5de <netif_set_addr+0x42>
 800c5d6:	68bb      	ldr	r3, [r7, #8]
 800c5d8:	681b      	ldr	r3, [r3, #0]
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	d101      	bne.n	800c5e2 <netif_set_addr+0x46>
 800c5de:	2301      	movs	r3, #1
 800c5e0:	e000      	b.n	800c5e4 <netif_set_addr+0x48>
 800c5e2:	2300      	movs	r3, #0
 800c5e4:	617b      	str	r3, [r7, #20]
  if (remove) {
 800c5e6:	697b      	ldr	r3, [r7, #20]
 800c5e8:	2b00      	cmp	r3, #0
 800c5ea:	d006      	beq.n	800c5fa <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800c5ec:	f107 0310 	add.w	r3, r7, #16
 800c5f0:	461a      	mov	r2, r3
 800c5f2:	68b9      	ldr	r1, [r7, #8]
 800c5f4:	68f8      	ldr	r0, [r7, #12]
 800c5f6:	f7ff ff49 	bl	800c48c <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800c5fa:	69fa      	ldr	r2, [r7, #28]
 800c5fc:	6879      	ldr	r1, [r7, #4]
 800c5fe:	68f8      	ldr	r0, [r7, #12]
 800c600:	f7ff ff8e 	bl	800c520 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800c604:	69ba      	ldr	r2, [r7, #24]
 800c606:	6839      	ldr	r1, [r7, #0]
 800c608:	68f8      	ldr	r0, [r7, #12]
 800c60a:	f7ff ffa8 	bl	800c55e <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800c60e:	697b      	ldr	r3, [r7, #20]
 800c610:	2b00      	cmp	r3, #0
 800c612:	d106      	bne.n	800c622 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800c614:	f107 0310 	add.w	r3, r7, #16
 800c618:	461a      	mov	r2, r3
 800c61a:	68b9      	ldr	r1, [r7, #8]
 800c61c:	68f8      	ldr	r0, [r7, #12]
 800c61e:	f7ff ff35 	bl	800c48c <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800c622:	bf00      	nop
 800c624:	3720      	adds	r7, #32
 800c626:	46bd      	mov	sp, r7
 800c628:	bd80      	pop	{r7, pc}
 800c62a:	bf00      	nop
 800c62c:	0801bbb8 	.word	0x0801bbb8

0800c630 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800c630:	b480      	push	{r7}
 800c632:	b083      	sub	sp, #12
 800c634:	af00      	add	r7, sp, #0
 800c636:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800c638:	4a04      	ldr	r2, [pc, #16]	; (800c64c <netif_set_default+0x1c>)
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800c63e:	bf00      	nop
 800c640:	370c      	adds	r7, #12
 800c642:	46bd      	mov	sp, r7
 800c644:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c648:	4770      	bx	lr
 800c64a:	bf00      	nop
 800c64c:	2000d3f0 	.word	0x2000d3f0

0800c650 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800c650:	b580      	push	{r7, lr}
 800c652:	b082      	sub	sp, #8
 800c654:	af00      	add	r7, sp, #0
 800c656:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	d107      	bne.n	800c66e <netif_set_up+0x1e>
 800c65e:	4b0f      	ldr	r3, [pc, #60]	; (800c69c <netif_set_up+0x4c>)
 800c660:	f44f 7254 	mov.w	r2, #848	; 0x350
 800c664:	490e      	ldr	r1, [pc, #56]	; (800c6a0 <netif_set_up+0x50>)
 800c666:	480f      	ldr	r0, [pc, #60]	; (800c6a4 <netif_set_up+0x54>)
 800c668:	f00a fbfa 	bl	8016e60 <iprintf>
 800c66c:	e013      	b.n	800c696 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c674:	f003 0301 	and.w	r3, r3, #1
 800c678:	2b00      	cmp	r3, #0
 800c67a:	d10c      	bne.n	800c696 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c682:	f043 0301 	orr.w	r3, r3, #1
 800c686:	b2da      	uxtb	r2, r3
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800c68e:	2103      	movs	r1, #3
 800c690:	6878      	ldr	r0, [r7, #4]
 800c692:	f000 f809 	bl	800c6a8 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800c696:	3708      	adds	r7, #8
 800c698:	46bd      	mov	sp, r7
 800c69a:	bd80      	pop	{r7, pc}
 800c69c:	08019394 	.word	0x08019394
 800c6a0:	0801951c 	.word	0x0801951c
 800c6a4:	080193e4 	.word	0x080193e4

0800c6a8 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800c6a8:	b580      	push	{r7, lr}
 800c6aa:	b082      	sub	sp, #8
 800c6ac:	af00      	add	r7, sp, #0
 800c6ae:	6078      	str	r0, [r7, #4]
 800c6b0:	460b      	mov	r3, r1
 800c6b2:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	d106      	bne.n	800c6c8 <netif_issue_reports+0x20>
 800c6ba:	4b18      	ldr	r3, [pc, #96]	; (800c71c <netif_issue_reports+0x74>)
 800c6bc:	f240 326d 	movw	r2, #877	; 0x36d
 800c6c0:	4917      	ldr	r1, [pc, #92]	; (800c720 <netif_issue_reports+0x78>)
 800c6c2:	4818      	ldr	r0, [pc, #96]	; (800c724 <netif_issue_reports+0x7c>)
 800c6c4:	f00a fbcc 	bl	8016e60 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c6ce:	f003 0304 	and.w	r3, r3, #4
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	d01e      	beq.n	800c714 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c6dc:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	d017      	beq.n	800c714 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800c6e4:	78fb      	ldrb	r3, [r7, #3]
 800c6e6:	f003 0301 	and.w	r3, r3, #1
 800c6ea:	2b00      	cmp	r3, #0
 800c6ec:	d013      	beq.n	800c716 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	3304      	adds	r3, #4
 800c6f2:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	d00e      	beq.n	800c716 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c6fe:	f003 0308 	and.w	r3, r3, #8
 800c702:	2b00      	cmp	r3, #0
 800c704:	d007      	beq.n	800c716 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	3304      	adds	r3, #4
 800c70a:	4619      	mov	r1, r3
 800c70c:	6878      	ldr	r0, [r7, #4]
 800c70e:	f008 fc7f 	bl	8015010 <etharp_request>
 800c712:	e000      	b.n	800c716 <netif_issue_reports+0x6e>
    return;
 800c714:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800c716:	3708      	adds	r7, #8
 800c718:	46bd      	mov	sp, r7
 800c71a:	bd80      	pop	{r7, pc}
 800c71c:	08019394 	.word	0x08019394
 800c720:	08019538 	.word	0x08019538
 800c724:	080193e4 	.word	0x080193e4

0800c728 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800c728:	b580      	push	{r7, lr}
 800c72a:	b082      	sub	sp, #8
 800c72c:	af00      	add	r7, sp, #0
 800c72e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	2b00      	cmp	r3, #0
 800c734:	d107      	bne.n	800c746 <netif_set_down+0x1e>
 800c736:	4b12      	ldr	r3, [pc, #72]	; (800c780 <netif_set_down+0x58>)
 800c738:	f240 329b 	movw	r2, #923	; 0x39b
 800c73c:	4911      	ldr	r1, [pc, #68]	; (800c784 <netif_set_down+0x5c>)
 800c73e:	4812      	ldr	r0, [pc, #72]	; (800c788 <netif_set_down+0x60>)
 800c740:	f00a fb8e 	bl	8016e60 <iprintf>
 800c744:	e019      	b.n	800c77a <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c74c:	f003 0301 	and.w	r3, r3, #1
 800c750:	2b00      	cmp	r3, #0
 800c752:	d012      	beq.n	800c77a <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c75a:	f023 0301 	bic.w	r3, r3, #1
 800c75e:	b2da      	uxtb	r2, r3
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c76c:	f003 0308 	and.w	r3, r3, #8
 800c770:	2b00      	cmp	r3, #0
 800c772:	d002      	beq.n	800c77a <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800c774:	6878      	ldr	r0, [r7, #4]
 800c776:	f008 f809 	bl	801478c <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800c77a:	3708      	adds	r7, #8
 800c77c:	46bd      	mov	sp, r7
 800c77e:	bd80      	pop	{r7, pc}
 800c780:	08019394 	.word	0x08019394
 800c784:	0801955c 	.word	0x0801955c
 800c788:	080193e4 	.word	0x080193e4

0800c78c <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800c78c:	b580      	push	{r7, lr}
 800c78e:	b082      	sub	sp, #8
 800c790:	af00      	add	r7, sp, #0
 800c792:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	2b00      	cmp	r3, #0
 800c798:	d107      	bne.n	800c7aa <netif_set_link_up+0x1e>
 800c79a:	4b13      	ldr	r3, [pc, #76]	; (800c7e8 <netif_set_link_up+0x5c>)
 800c79c:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800c7a0:	4912      	ldr	r1, [pc, #72]	; (800c7ec <netif_set_link_up+0x60>)
 800c7a2:	4813      	ldr	r0, [pc, #76]	; (800c7f0 <netif_set_link_up+0x64>)
 800c7a4:	f00a fb5c 	bl	8016e60 <iprintf>
 800c7a8:	e01b      	b.n	800c7e2 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c7b0:	f003 0304 	and.w	r3, r3, #4
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	d114      	bne.n	800c7e2 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c7be:	f043 0304 	orr.w	r3, r3, #4
 800c7c2:	b2da      	uxtb	r2, r3
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800c7ca:	2103      	movs	r1, #3
 800c7cc:	6878      	ldr	r0, [r7, #4]
 800c7ce:	f7ff ff6b 	bl	800c6a8 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	69db      	ldr	r3, [r3, #28]
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	d003      	beq.n	800c7e2 <netif_set_link_up+0x56>
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	69db      	ldr	r3, [r3, #28]
 800c7de:	6878      	ldr	r0, [r7, #4]
 800c7e0:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800c7e2:	3708      	adds	r7, #8
 800c7e4:	46bd      	mov	sp, r7
 800c7e6:	bd80      	pop	{r7, pc}
 800c7e8:	08019394 	.word	0x08019394
 800c7ec:	0801957c 	.word	0x0801957c
 800c7f0:	080193e4 	.word	0x080193e4

0800c7f4 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800c7f4:	b580      	push	{r7, lr}
 800c7f6:	b082      	sub	sp, #8
 800c7f8:	af00      	add	r7, sp, #0
 800c7fa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	d107      	bne.n	800c812 <netif_set_link_down+0x1e>
 800c802:	4b11      	ldr	r3, [pc, #68]	; (800c848 <netif_set_link_down+0x54>)
 800c804:	f240 4206 	movw	r2, #1030	; 0x406
 800c808:	4910      	ldr	r1, [pc, #64]	; (800c84c <netif_set_link_down+0x58>)
 800c80a:	4811      	ldr	r0, [pc, #68]	; (800c850 <netif_set_link_down+0x5c>)
 800c80c:	f00a fb28 	bl	8016e60 <iprintf>
 800c810:	e017      	b.n	800c842 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c818:	f003 0304 	and.w	r3, r3, #4
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	d010      	beq.n	800c842 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c826:	f023 0304 	bic.w	r3, r3, #4
 800c82a:	b2da      	uxtb	r2, r3
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	69db      	ldr	r3, [r3, #28]
 800c836:	2b00      	cmp	r3, #0
 800c838:	d003      	beq.n	800c842 <netif_set_link_down+0x4e>
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	69db      	ldr	r3, [r3, #28]
 800c83e:	6878      	ldr	r0, [r7, #4]
 800c840:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800c842:	3708      	adds	r7, #8
 800c844:	46bd      	mov	sp, r7
 800c846:	bd80      	pop	{r7, pc}
 800c848:	08019394 	.word	0x08019394
 800c84c:	080195a0 	.word	0x080195a0
 800c850:	080193e4 	.word	0x080193e4

0800c854 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800c854:	b480      	push	{r7}
 800c856:	b083      	sub	sp, #12
 800c858:	af00      	add	r7, sp, #0
 800c85a:	6078      	str	r0, [r7, #4]
 800c85c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	2b00      	cmp	r3, #0
 800c862:	d002      	beq.n	800c86a <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	683a      	ldr	r2, [r7, #0]
 800c868:	61da      	str	r2, [r3, #28]
  }
}
 800c86a:	bf00      	nop
 800c86c:	370c      	adds	r7, #12
 800c86e:	46bd      	mov	sp, r7
 800c870:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c874:	4770      	bx	lr

0800c876 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800c876:	b480      	push	{r7}
 800c878:	b085      	sub	sp, #20
 800c87a:	af00      	add	r7, sp, #0
 800c87c:	60f8      	str	r0, [r7, #12]
 800c87e:	60b9      	str	r1, [r7, #8]
 800c880:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800c882:	f06f 030b 	mvn.w	r3, #11
}
 800c886:	4618      	mov	r0, r3
 800c888:	3714      	adds	r7, #20
 800c88a:	46bd      	mov	sp, r7
 800c88c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c890:	4770      	bx	lr
	...

0800c894 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800c894:	b480      	push	{r7}
 800c896:	b085      	sub	sp, #20
 800c898:	af00      	add	r7, sp, #0
 800c89a:	4603      	mov	r3, r0
 800c89c:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800c89e:	79fb      	ldrb	r3, [r7, #7]
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	d013      	beq.n	800c8cc <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800c8a4:	4b0d      	ldr	r3, [pc, #52]	; (800c8dc <netif_get_by_index+0x48>)
 800c8a6:	681b      	ldr	r3, [r3, #0]
 800c8a8:	60fb      	str	r3, [r7, #12]
 800c8aa:	e00c      	b.n	800c8c6 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800c8ac:	68fb      	ldr	r3, [r7, #12]
 800c8ae:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c8b2:	3301      	adds	r3, #1
 800c8b4:	b2db      	uxtb	r3, r3
 800c8b6:	79fa      	ldrb	r2, [r7, #7]
 800c8b8:	429a      	cmp	r2, r3
 800c8ba:	d101      	bne.n	800c8c0 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800c8bc:	68fb      	ldr	r3, [r7, #12]
 800c8be:	e006      	b.n	800c8ce <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800c8c0:	68fb      	ldr	r3, [r7, #12]
 800c8c2:	681b      	ldr	r3, [r3, #0]
 800c8c4:	60fb      	str	r3, [r7, #12]
 800c8c6:	68fb      	ldr	r3, [r7, #12]
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	d1ef      	bne.n	800c8ac <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800c8cc:	2300      	movs	r3, #0
}
 800c8ce:	4618      	mov	r0, r3
 800c8d0:	3714      	adds	r7, #20
 800c8d2:	46bd      	mov	sp, r7
 800c8d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8d8:	4770      	bx	lr
 800c8da:	bf00      	nop
 800c8dc:	2000d3ec 	.word	0x2000d3ec

0800c8e0 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800c8e0:	b580      	push	{r7, lr}
 800c8e2:	b082      	sub	sp, #8
 800c8e4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800c8e6:	f00a fa1d 	bl	8016d24 <sys_arch_protect>
 800c8ea:	6038      	str	r0, [r7, #0]
 800c8ec:	4b0d      	ldr	r3, [pc, #52]	; (800c924 <pbuf_free_ooseq+0x44>)
 800c8ee:	2200      	movs	r2, #0
 800c8f0:	701a      	strb	r2, [r3, #0]
 800c8f2:	6838      	ldr	r0, [r7, #0]
 800c8f4:	f00a fa24 	bl	8016d40 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800c8f8:	4b0b      	ldr	r3, [pc, #44]	; (800c928 <pbuf_free_ooseq+0x48>)
 800c8fa:	681b      	ldr	r3, [r3, #0]
 800c8fc:	607b      	str	r3, [r7, #4]
 800c8fe:	e00a      	b.n	800c916 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c904:	2b00      	cmp	r3, #0
 800c906:	d003      	beq.n	800c910 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800c908:	6878      	ldr	r0, [r7, #4]
 800c90a:	f002 fba9 	bl	800f060 <tcp_free_ooseq>
      return;
 800c90e:	e005      	b.n	800c91c <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	68db      	ldr	r3, [r3, #12]
 800c914:	607b      	str	r3, [r7, #4]
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	2b00      	cmp	r3, #0
 800c91a:	d1f1      	bne.n	800c900 <pbuf_free_ooseq+0x20>
    }
  }
}
 800c91c:	3708      	adds	r7, #8
 800c91e:	46bd      	mov	sp, r7
 800c920:	bd80      	pop	{r7, pc}
 800c922:	bf00      	nop
 800c924:	2000d3f4 	.word	0x2000d3f4
 800c928:	2000d3fc 	.word	0x2000d3fc

0800c92c <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800c92c:	b580      	push	{r7, lr}
 800c92e:	b082      	sub	sp, #8
 800c930:	af00      	add	r7, sp, #0
 800c932:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800c934:	f7ff ffd4 	bl	800c8e0 <pbuf_free_ooseq>
}
 800c938:	bf00      	nop
 800c93a:	3708      	adds	r7, #8
 800c93c:	46bd      	mov	sp, r7
 800c93e:	bd80      	pop	{r7, pc}

0800c940 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800c940:	b580      	push	{r7, lr}
 800c942:	b082      	sub	sp, #8
 800c944:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800c946:	f00a f9ed 	bl	8016d24 <sys_arch_protect>
 800c94a:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800c94c:	4b0f      	ldr	r3, [pc, #60]	; (800c98c <pbuf_pool_is_empty+0x4c>)
 800c94e:	781b      	ldrb	r3, [r3, #0]
 800c950:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800c952:	4b0e      	ldr	r3, [pc, #56]	; (800c98c <pbuf_pool_is_empty+0x4c>)
 800c954:	2201      	movs	r2, #1
 800c956:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800c958:	6878      	ldr	r0, [r7, #4]
 800c95a:	f00a f9f1 	bl	8016d40 <sys_arch_unprotect>

  if (!queued) {
 800c95e:	78fb      	ldrb	r3, [r7, #3]
 800c960:	2b00      	cmp	r3, #0
 800c962:	d10f      	bne.n	800c984 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800c964:	2100      	movs	r1, #0
 800c966:	480a      	ldr	r0, [pc, #40]	; (800c990 <pbuf_pool_is_empty+0x50>)
 800c968:	f7fe fed6 	bl	800b718 <tcpip_try_callback>
 800c96c:	4603      	mov	r3, r0
 800c96e:	2b00      	cmp	r3, #0
 800c970:	d008      	beq.n	800c984 <pbuf_pool_is_empty+0x44>
 800c972:	f00a f9d7 	bl	8016d24 <sys_arch_protect>
 800c976:	6078      	str	r0, [r7, #4]
 800c978:	4b04      	ldr	r3, [pc, #16]	; (800c98c <pbuf_pool_is_empty+0x4c>)
 800c97a:	2200      	movs	r2, #0
 800c97c:	701a      	strb	r2, [r3, #0]
 800c97e:	6878      	ldr	r0, [r7, #4]
 800c980:	f00a f9de 	bl	8016d40 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800c984:	bf00      	nop
 800c986:	3708      	adds	r7, #8
 800c988:	46bd      	mov	sp, r7
 800c98a:	bd80      	pop	{r7, pc}
 800c98c:	2000d3f4 	.word	0x2000d3f4
 800c990:	0800c92d 	.word	0x0800c92d

0800c994 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800c994:	b480      	push	{r7}
 800c996:	b085      	sub	sp, #20
 800c998:	af00      	add	r7, sp, #0
 800c99a:	60f8      	str	r0, [r7, #12]
 800c99c:	60b9      	str	r1, [r7, #8]
 800c99e:	4611      	mov	r1, r2
 800c9a0:	461a      	mov	r2, r3
 800c9a2:	460b      	mov	r3, r1
 800c9a4:	80fb      	strh	r3, [r7, #6]
 800c9a6:	4613      	mov	r3, r2
 800c9a8:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800c9aa:	68fb      	ldr	r3, [r7, #12]
 800c9ac:	2200      	movs	r2, #0
 800c9ae:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800c9b0:	68fb      	ldr	r3, [r7, #12]
 800c9b2:	68ba      	ldr	r2, [r7, #8]
 800c9b4:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800c9b6:	68fb      	ldr	r3, [r7, #12]
 800c9b8:	88fa      	ldrh	r2, [r7, #6]
 800c9ba:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800c9bc:	68fb      	ldr	r3, [r7, #12]
 800c9be:	88ba      	ldrh	r2, [r7, #4]
 800c9c0:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800c9c2:	8b3b      	ldrh	r3, [r7, #24]
 800c9c4:	b2da      	uxtb	r2, r3
 800c9c6:	68fb      	ldr	r3, [r7, #12]
 800c9c8:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800c9ca:	68fb      	ldr	r3, [r7, #12]
 800c9cc:	7f3a      	ldrb	r2, [r7, #28]
 800c9ce:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800c9d0:	68fb      	ldr	r3, [r7, #12]
 800c9d2:	2201      	movs	r2, #1
 800c9d4:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800c9d6:	68fb      	ldr	r3, [r7, #12]
 800c9d8:	2200      	movs	r2, #0
 800c9da:	73da      	strb	r2, [r3, #15]
}
 800c9dc:	bf00      	nop
 800c9de:	3714      	adds	r7, #20
 800c9e0:	46bd      	mov	sp, r7
 800c9e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9e6:	4770      	bx	lr

0800c9e8 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800c9e8:	b580      	push	{r7, lr}
 800c9ea:	b08c      	sub	sp, #48	; 0x30
 800c9ec:	af02      	add	r7, sp, #8
 800c9ee:	4603      	mov	r3, r0
 800c9f0:	71fb      	strb	r3, [r7, #7]
 800c9f2:	460b      	mov	r3, r1
 800c9f4:	80bb      	strh	r3, [r7, #4]
 800c9f6:	4613      	mov	r3, r2
 800c9f8:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800c9fa:	79fb      	ldrb	r3, [r7, #7]
 800c9fc:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800c9fe:	887b      	ldrh	r3, [r7, #2]
 800ca00:	2b41      	cmp	r3, #65	; 0x41
 800ca02:	d00b      	beq.n	800ca1c <pbuf_alloc+0x34>
 800ca04:	2b41      	cmp	r3, #65	; 0x41
 800ca06:	dc02      	bgt.n	800ca0e <pbuf_alloc+0x26>
 800ca08:	2b01      	cmp	r3, #1
 800ca0a:	d007      	beq.n	800ca1c <pbuf_alloc+0x34>
 800ca0c:	e0c2      	b.n	800cb94 <pbuf_alloc+0x1ac>
 800ca0e:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800ca12:	d00b      	beq.n	800ca2c <pbuf_alloc+0x44>
 800ca14:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800ca18:	d070      	beq.n	800cafc <pbuf_alloc+0x114>
 800ca1a:	e0bb      	b.n	800cb94 <pbuf_alloc+0x1ac>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800ca1c:	887a      	ldrh	r2, [r7, #2]
 800ca1e:	88bb      	ldrh	r3, [r7, #4]
 800ca20:	4619      	mov	r1, r3
 800ca22:	2000      	movs	r0, #0
 800ca24:	f000 f8d2 	bl	800cbcc <pbuf_alloc_reference>
 800ca28:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800ca2a:	e0bd      	b.n	800cba8 <pbuf_alloc+0x1c0>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800ca2c:	2300      	movs	r3, #0
 800ca2e:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800ca30:	2300      	movs	r3, #0
 800ca32:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800ca34:	88bb      	ldrh	r3, [r7, #4]
 800ca36:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800ca38:	200c      	movs	r0, #12
 800ca3a:	f7ff fbc3 	bl	800c1c4 <memp_malloc>
 800ca3e:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800ca40:	693b      	ldr	r3, [r7, #16]
 800ca42:	2b00      	cmp	r3, #0
 800ca44:	d109      	bne.n	800ca5a <pbuf_alloc+0x72>
          PBUF_POOL_IS_EMPTY();
 800ca46:	f7ff ff7b 	bl	800c940 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800ca4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	d002      	beq.n	800ca56 <pbuf_alloc+0x6e>
            pbuf_free(p);
 800ca50:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ca52:	f000 fadb 	bl	800d00c <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800ca56:	2300      	movs	r3, #0
 800ca58:	e0a7      	b.n	800cbaa <pbuf_alloc+0x1c2>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800ca5a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ca5c:	3303      	adds	r3, #3
 800ca5e:	b29b      	uxth	r3, r3
 800ca60:	f023 0303 	bic.w	r3, r3, #3
 800ca64:	b29b      	uxth	r3, r3
 800ca66:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800ca6a:	b29b      	uxth	r3, r3
 800ca6c:	8b7a      	ldrh	r2, [r7, #26]
 800ca6e:	4293      	cmp	r3, r2
 800ca70:	bf28      	it	cs
 800ca72:	4613      	movcs	r3, r2
 800ca74:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800ca76:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ca78:	3310      	adds	r3, #16
 800ca7a:	693a      	ldr	r2, [r7, #16]
 800ca7c:	4413      	add	r3, r2
 800ca7e:	3303      	adds	r3, #3
 800ca80:	f023 0303 	bic.w	r3, r3, #3
 800ca84:	4618      	mov	r0, r3
 800ca86:	89f9      	ldrh	r1, [r7, #14]
 800ca88:	8b7a      	ldrh	r2, [r7, #26]
 800ca8a:	2300      	movs	r3, #0
 800ca8c:	9301      	str	r3, [sp, #4]
 800ca8e:	887b      	ldrh	r3, [r7, #2]
 800ca90:	9300      	str	r3, [sp, #0]
 800ca92:	460b      	mov	r3, r1
 800ca94:	4601      	mov	r1, r0
 800ca96:	6938      	ldr	r0, [r7, #16]
 800ca98:	f7ff ff7c 	bl	800c994 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800ca9c:	693b      	ldr	r3, [r7, #16]
 800ca9e:	685b      	ldr	r3, [r3, #4]
 800caa0:	f003 0303 	and.w	r3, r3, #3
 800caa4:	2b00      	cmp	r3, #0
 800caa6:	d006      	beq.n	800cab6 <pbuf_alloc+0xce>
 800caa8:	4b42      	ldr	r3, [pc, #264]	; (800cbb4 <pbuf_alloc+0x1cc>)
 800caaa:	f240 1201 	movw	r2, #257	; 0x101
 800caae:	4942      	ldr	r1, [pc, #264]	; (800cbb8 <pbuf_alloc+0x1d0>)
 800cab0:	4842      	ldr	r0, [pc, #264]	; (800cbbc <pbuf_alloc+0x1d4>)
 800cab2:	f00a f9d5 	bl	8016e60 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800cab6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cab8:	3303      	adds	r3, #3
 800caba:	f023 0303 	bic.w	r3, r3, #3
 800cabe:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800cac2:	d106      	bne.n	800cad2 <pbuf_alloc+0xea>
 800cac4:	4b3b      	ldr	r3, [pc, #236]	; (800cbb4 <pbuf_alloc+0x1cc>)
 800cac6:	f240 1203 	movw	r2, #259	; 0x103
 800caca:	493d      	ldr	r1, [pc, #244]	; (800cbc0 <pbuf_alloc+0x1d8>)
 800cacc:	483b      	ldr	r0, [pc, #236]	; (800cbbc <pbuf_alloc+0x1d4>)
 800cace:	f00a f9c7 	bl	8016e60 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800cad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cad4:	2b00      	cmp	r3, #0
 800cad6:	d102      	bne.n	800cade <pbuf_alloc+0xf6>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800cad8:	693b      	ldr	r3, [r7, #16]
 800cada:	627b      	str	r3, [r7, #36]	; 0x24
 800cadc:	e002      	b.n	800cae4 <pbuf_alloc+0xfc>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800cade:	69fb      	ldr	r3, [r7, #28]
 800cae0:	693a      	ldr	r2, [r7, #16]
 800cae2:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800cae4:	693b      	ldr	r3, [r7, #16]
 800cae6:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800cae8:	8b7a      	ldrh	r2, [r7, #26]
 800caea:	89fb      	ldrh	r3, [r7, #14]
 800caec:	1ad3      	subs	r3, r2, r3
 800caee:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800caf0:	2300      	movs	r3, #0
 800caf2:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800caf4:	8b7b      	ldrh	r3, [r7, #26]
 800caf6:	2b00      	cmp	r3, #0
 800caf8:	d19e      	bne.n	800ca38 <pbuf_alloc+0x50>
      break;
 800cafa:	e055      	b.n	800cba8 <pbuf_alloc+0x1c0>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800cafc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cafe:	3303      	adds	r3, #3
 800cb00:	b29b      	uxth	r3, r3
 800cb02:	f023 0303 	bic.w	r3, r3, #3
 800cb06:	b29a      	uxth	r2, r3
 800cb08:	88bb      	ldrh	r3, [r7, #4]
 800cb0a:	3303      	adds	r3, #3
 800cb0c:	b29b      	uxth	r3, r3
 800cb0e:	f023 0303 	bic.w	r3, r3, #3
 800cb12:	b29b      	uxth	r3, r3
 800cb14:	4413      	add	r3, r2
 800cb16:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800cb18:	8b3b      	ldrh	r3, [r7, #24]
 800cb1a:	3310      	adds	r3, #16
 800cb1c:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800cb1e:	8b3a      	ldrh	r2, [r7, #24]
 800cb20:	88bb      	ldrh	r3, [r7, #4]
 800cb22:	3303      	adds	r3, #3
 800cb24:	f023 0303 	bic.w	r3, r3, #3
 800cb28:	429a      	cmp	r2, r3
 800cb2a:	d306      	bcc.n	800cb3a <pbuf_alloc+0x152>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800cb2c:	8afa      	ldrh	r2, [r7, #22]
 800cb2e:	88bb      	ldrh	r3, [r7, #4]
 800cb30:	3303      	adds	r3, #3
 800cb32:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800cb36:	429a      	cmp	r2, r3
 800cb38:	d201      	bcs.n	800cb3e <pbuf_alloc+0x156>
        return NULL;
 800cb3a:	2300      	movs	r3, #0
 800cb3c:	e035      	b.n	800cbaa <pbuf_alloc+0x1c2>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800cb3e:	8afb      	ldrh	r3, [r7, #22]
 800cb40:	4618      	mov	r0, r3
 800cb42:	f7ff f9bd 	bl	800bec0 <mem_malloc>
 800cb46:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800cb48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb4a:	2b00      	cmp	r3, #0
 800cb4c:	d101      	bne.n	800cb52 <pbuf_alloc+0x16a>
        return NULL;
 800cb4e:	2300      	movs	r3, #0
 800cb50:	e02b      	b.n	800cbaa <pbuf_alloc+0x1c2>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800cb52:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cb54:	3310      	adds	r3, #16
 800cb56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cb58:	4413      	add	r3, r2
 800cb5a:	3303      	adds	r3, #3
 800cb5c:	f023 0303 	bic.w	r3, r3, #3
 800cb60:	4618      	mov	r0, r3
 800cb62:	88b9      	ldrh	r1, [r7, #4]
 800cb64:	88ba      	ldrh	r2, [r7, #4]
 800cb66:	2300      	movs	r3, #0
 800cb68:	9301      	str	r3, [sp, #4]
 800cb6a:	887b      	ldrh	r3, [r7, #2]
 800cb6c:	9300      	str	r3, [sp, #0]
 800cb6e:	460b      	mov	r3, r1
 800cb70:	4601      	mov	r1, r0
 800cb72:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cb74:	f7ff ff0e 	bl	800c994 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800cb78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb7a:	685b      	ldr	r3, [r3, #4]
 800cb7c:	f003 0303 	and.w	r3, r3, #3
 800cb80:	2b00      	cmp	r3, #0
 800cb82:	d010      	beq.n	800cba6 <pbuf_alloc+0x1be>
 800cb84:	4b0b      	ldr	r3, [pc, #44]	; (800cbb4 <pbuf_alloc+0x1cc>)
 800cb86:	f240 1223 	movw	r2, #291	; 0x123
 800cb8a:	490e      	ldr	r1, [pc, #56]	; (800cbc4 <pbuf_alloc+0x1dc>)
 800cb8c:	480b      	ldr	r0, [pc, #44]	; (800cbbc <pbuf_alloc+0x1d4>)
 800cb8e:	f00a f967 	bl	8016e60 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800cb92:	e008      	b.n	800cba6 <pbuf_alloc+0x1be>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800cb94:	4b07      	ldr	r3, [pc, #28]	; (800cbb4 <pbuf_alloc+0x1cc>)
 800cb96:	f240 1227 	movw	r2, #295	; 0x127
 800cb9a:	490b      	ldr	r1, [pc, #44]	; (800cbc8 <pbuf_alloc+0x1e0>)
 800cb9c:	4807      	ldr	r0, [pc, #28]	; (800cbbc <pbuf_alloc+0x1d4>)
 800cb9e:	f00a f95f 	bl	8016e60 <iprintf>
      return NULL;
 800cba2:	2300      	movs	r3, #0
 800cba4:	e001      	b.n	800cbaa <pbuf_alloc+0x1c2>
      break;
 800cba6:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800cba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800cbaa:	4618      	mov	r0, r3
 800cbac:	3728      	adds	r7, #40	; 0x28
 800cbae:	46bd      	mov	sp, r7
 800cbb0:	bd80      	pop	{r7, pc}
 800cbb2:	bf00      	nop
 800cbb4:	080195c4 	.word	0x080195c4
 800cbb8:	080195f4 	.word	0x080195f4
 800cbbc:	08019624 	.word	0x08019624
 800cbc0:	0801964c 	.word	0x0801964c
 800cbc4:	08019680 	.word	0x08019680
 800cbc8:	080196ac 	.word	0x080196ac

0800cbcc <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800cbcc:	b580      	push	{r7, lr}
 800cbce:	b086      	sub	sp, #24
 800cbd0:	af02      	add	r7, sp, #8
 800cbd2:	6078      	str	r0, [r7, #4]
 800cbd4:	460b      	mov	r3, r1
 800cbd6:	807b      	strh	r3, [r7, #2]
 800cbd8:	4613      	mov	r3, r2
 800cbda:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800cbdc:	883b      	ldrh	r3, [r7, #0]
 800cbde:	2b41      	cmp	r3, #65	; 0x41
 800cbe0:	d009      	beq.n	800cbf6 <pbuf_alloc_reference+0x2a>
 800cbe2:	883b      	ldrh	r3, [r7, #0]
 800cbe4:	2b01      	cmp	r3, #1
 800cbe6:	d006      	beq.n	800cbf6 <pbuf_alloc_reference+0x2a>
 800cbe8:	4b0f      	ldr	r3, [pc, #60]	; (800cc28 <pbuf_alloc_reference+0x5c>)
 800cbea:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800cbee:	490f      	ldr	r1, [pc, #60]	; (800cc2c <pbuf_alloc_reference+0x60>)
 800cbf0:	480f      	ldr	r0, [pc, #60]	; (800cc30 <pbuf_alloc_reference+0x64>)
 800cbf2:	f00a f935 	bl	8016e60 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800cbf6:	200b      	movs	r0, #11
 800cbf8:	f7ff fae4 	bl	800c1c4 <memp_malloc>
 800cbfc:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800cbfe:	68fb      	ldr	r3, [r7, #12]
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	d101      	bne.n	800cc08 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800cc04:	2300      	movs	r3, #0
 800cc06:	e00b      	b.n	800cc20 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800cc08:	8879      	ldrh	r1, [r7, #2]
 800cc0a:	887a      	ldrh	r2, [r7, #2]
 800cc0c:	2300      	movs	r3, #0
 800cc0e:	9301      	str	r3, [sp, #4]
 800cc10:	883b      	ldrh	r3, [r7, #0]
 800cc12:	9300      	str	r3, [sp, #0]
 800cc14:	460b      	mov	r3, r1
 800cc16:	6879      	ldr	r1, [r7, #4]
 800cc18:	68f8      	ldr	r0, [r7, #12]
 800cc1a:	f7ff febb 	bl	800c994 <pbuf_init_alloced_pbuf>
  return p;
 800cc1e:	68fb      	ldr	r3, [r7, #12]
}
 800cc20:	4618      	mov	r0, r3
 800cc22:	3710      	adds	r7, #16
 800cc24:	46bd      	mov	sp, r7
 800cc26:	bd80      	pop	{r7, pc}
 800cc28:	080195c4 	.word	0x080195c4
 800cc2c:	080196c8 	.word	0x080196c8
 800cc30:	08019624 	.word	0x08019624

0800cc34 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800cc34:	b580      	push	{r7, lr}
 800cc36:	b088      	sub	sp, #32
 800cc38:	af02      	add	r7, sp, #8
 800cc3a:	607b      	str	r3, [r7, #4]
 800cc3c:	4603      	mov	r3, r0
 800cc3e:	73fb      	strb	r3, [r7, #15]
 800cc40:	460b      	mov	r3, r1
 800cc42:	81bb      	strh	r3, [r7, #12]
 800cc44:	4613      	mov	r3, r2
 800cc46:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800cc48:	7bfb      	ldrb	r3, [r7, #15]
 800cc4a:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800cc4c:	8a7b      	ldrh	r3, [r7, #18]
 800cc4e:	3303      	adds	r3, #3
 800cc50:	f023 0203 	bic.w	r2, r3, #3
 800cc54:	89bb      	ldrh	r3, [r7, #12]
 800cc56:	441a      	add	r2, r3
 800cc58:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cc5a:	429a      	cmp	r2, r3
 800cc5c:	d901      	bls.n	800cc62 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800cc5e:	2300      	movs	r3, #0
 800cc60:	e018      	b.n	800cc94 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800cc62:	6a3b      	ldr	r3, [r7, #32]
 800cc64:	2b00      	cmp	r3, #0
 800cc66:	d007      	beq.n	800cc78 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800cc68:	8a7b      	ldrh	r3, [r7, #18]
 800cc6a:	3303      	adds	r3, #3
 800cc6c:	f023 0303 	bic.w	r3, r3, #3
 800cc70:	6a3a      	ldr	r2, [r7, #32]
 800cc72:	4413      	add	r3, r2
 800cc74:	617b      	str	r3, [r7, #20]
 800cc76:	e001      	b.n	800cc7c <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800cc78:	2300      	movs	r3, #0
 800cc7a:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800cc7c:	6878      	ldr	r0, [r7, #4]
 800cc7e:	89b9      	ldrh	r1, [r7, #12]
 800cc80:	89ba      	ldrh	r2, [r7, #12]
 800cc82:	2302      	movs	r3, #2
 800cc84:	9301      	str	r3, [sp, #4]
 800cc86:	897b      	ldrh	r3, [r7, #10]
 800cc88:	9300      	str	r3, [sp, #0]
 800cc8a:	460b      	mov	r3, r1
 800cc8c:	6979      	ldr	r1, [r7, #20]
 800cc8e:	f7ff fe81 	bl	800c994 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800cc92:	687b      	ldr	r3, [r7, #4]
}
 800cc94:	4618      	mov	r0, r3
 800cc96:	3718      	adds	r7, #24
 800cc98:	46bd      	mov	sp, r7
 800cc9a:	bd80      	pop	{r7, pc}

0800cc9c <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800cc9c:	b580      	push	{r7, lr}
 800cc9e:	b084      	sub	sp, #16
 800cca0:	af00      	add	r7, sp, #0
 800cca2:	6078      	str	r0, [r7, #4]
 800cca4:	460b      	mov	r3, r1
 800cca6:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	2b00      	cmp	r3, #0
 800ccac:	d106      	bne.n	800ccbc <pbuf_realloc+0x20>
 800ccae:	4b3a      	ldr	r3, [pc, #232]	; (800cd98 <pbuf_realloc+0xfc>)
 800ccb0:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800ccb4:	4939      	ldr	r1, [pc, #228]	; (800cd9c <pbuf_realloc+0x100>)
 800ccb6:	483a      	ldr	r0, [pc, #232]	; (800cda0 <pbuf_realloc+0x104>)
 800ccb8:	f00a f8d2 	bl	8016e60 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	891b      	ldrh	r3, [r3, #8]
 800ccc0:	887a      	ldrh	r2, [r7, #2]
 800ccc2:	429a      	cmp	r2, r3
 800ccc4:	d264      	bcs.n	800cd90 <pbuf_realloc+0xf4>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	891a      	ldrh	r2, [r3, #8]
 800ccca:	887b      	ldrh	r3, [r7, #2]
 800cccc:	1ad3      	subs	r3, r2, r3
 800ccce:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800ccd0:	887b      	ldrh	r3, [r7, #2]
 800ccd2:	817b      	strh	r3, [r7, #10]
  q = p;
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800ccd8:	e018      	b.n	800cd0c <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800ccda:	68fb      	ldr	r3, [r7, #12]
 800ccdc:	895b      	ldrh	r3, [r3, #10]
 800ccde:	897a      	ldrh	r2, [r7, #10]
 800cce0:	1ad3      	subs	r3, r2, r3
 800cce2:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800cce4:	68fb      	ldr	r3, [r7, #12]
 800cce6:	891a      	ldrh	r2, [r3, #8]
 800cce8:	893b      	ldrh	r3, [r7, #8]
 800ccea:	1ad3      	subs	r3, r2, r3
 800ccec:	b29a      	uxth	r2, r3
 800ccee:	68fb      	ldr	r3, [r7, #12]
 800ccf0:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800ccf2:	68fb      	ldr	r3, [r7, #12]
 800ccf4:	681b      	ldr	r3, [r3, #0]
 800ccf6:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800ccf8:	68fb      	ldr	r3, [r7, #12]
 800ccfa:	2b00      	cmp	r3, #0
 800ccfc:	d106      	bne.n	800cd0c <pbuf_realloc+0x70>
 800ccfe:	4b26      	ldr	r3, [pc, #152]	; (800cd98 <pbuf_realloc+0xfc>)
 800cd00:	f240 12af 	movw	r2, #431	; 0x1af
 800cd04:	4927      	ldr	r1, [pc, #156]	; (800cda4 <pbuf_realloc+0x108>)
 800cd06:	4826      	ldr	r0, [pc, #152]	; (800cda0 <pbuf_realloc+0x104>)
 800cd08:	f00a f8aa 	bl	8016e60 <iprintf>
  while (rem_len > q->len) {
 800cd0c:	68fb      	ldr	r3, [r7, #12]
 800cd0e:	895b      	ldrh	r3, [r3, #10]
 800cd10:	897a      	ldrh	r2, [r7, #10]
 800cd12:	429a      	cmp	r2, r3
 800cd14:	d8e1      	bhi.n	800ccda <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800cd16:	68fb      	ldr	r3, [r7, #12]
 800cd18:	7b1b      	ldrb	r3, [r3, #12]
 800cd1a:	f003 030f 	and.w	r3, r3, #15
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	d122      	bne.n	800cd68 <pbuf_realloc+0xcc>
 800cd22:	68fb      	ldr	r3, [r7, #12]
 800cd24:	895b      	ldrh	r3, [r3, #10]
 800cd26:	897a      	ldrh	r2, [r7, #10]
 800cd28:	429a      	cmp	r2, r3
 800cd2a:	d01d      	beq.n	800cd68 <pbuf_realloc+0xcc>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800cd2c:	68fb      	ldr	r3, [r7, #12]
 800cd2e:	7b5b      	ldrb	r3, [r3, #13]
 800cd30:	f003 0302 	and.w	r3, r3, #2
 800cd34:	2b00      	cmp	r3, #0
 800cd36:	d117      	bne.n	800cd68 <pbuf_realloc+0xcc>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800cd38:	68fb      	ldr	r3, [r7, #12]
 800cd3a:	685b      	ldr	r3, [r3, #4]
 800cd3c:	461a      	mov	r2, r3
 800cd3e:	68fb      	ldr	r3, [r7, #12]
 800cd40:	1ad3      	subs	r3, r2, r3
 800cd42:	b29a      	uxth	r2, r3
 800cd44:	897b      	ldrh	r3, [r7, #10]
 800cd46:	4413      	add	r3, r2
 800cd48:	b29b      	uxth	r3, r3
 800cd4a:	4619      	mov	r1, r3
 800cd4c:	68f8      	ldr	r0, [r7, #12]
 800cd4e:	f7fe ffad 	bl	800bcac <mem_trim>
 800cd52:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800cd54:	68fb      	ldr	r3, [r7, #12]
 800cd56:	2b00      	cmp	r3, #0
 800cd58:	d106      	bne.n	800cd68 <pbuf_realloc+0xcc>
 800cd5a:	4b0f      	ldr	r3, [pc, #60]	; (800cd98 <pbuf_realloc+0xfc>)
 800cd5c:	f240 12bd 	movw	r2, #445	; 0x1bd
 800cd60:	4911      	ldr	r1, [pc, #68]	; (800cda8 <pbuf_realloc+0x10c>)
 800cd62:	480f      	ldr	r0, [pc, #60]	; (800cda0 <pbuf_realloc+0x104>)
 800cd64:	f00a f87c 	bl	8016e60 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800cd68:	68fb      	ldr	r3, [r7, #12]
 800cd6a:	897a      	ldrh	r2, [r7, #10]
 800cd6c:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800cd6e:	68fb      	ldr	r3, [r7, #12]
 800cd70:	895a      	ldrh	r2, [r3, #10]
 800cd72:	68fb      	ldr	r3, [r7, #12]
 800cd74:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800cd76:	68fb      	ldr	r3, [r7, #12]
 800cd78:	681b      	ldr	r3, [r3, #0]
 800cd7a:	2b00      	cmp	r3, #0
 800cd7c:	d004      	beq.n	800cd88 <pbuf_realloc+0xec>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800cd7e:	68fb      	ldr	r3, [r7, #12]
 800cd80:	681b      	ldr	r3, [r3, #0]
 800cd82:	4618      	mov	r0, r3
 800cd84:	f000 f942 	bl	800d00c <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800cd88:	68fb      	ldr	r3, [r7, #12]
 800cd8a:	2200      	movs	r2, #0
 800cd8c:	601a      	str	r2, [r3, #0]
 800cd8e:	e000      	b.n	800cd92 <pbuf_realloc+0xf6>
    return;
 800cd90:	bf00      	nop

}
 800cd92:	3710      	adds	r7, #16
 800cd94:	46bd      	mov	sp, r7
 800cd96:	bd80      	pop	{r7, pc}
 800cd98:	080195c4 	.word	0x080195c4
 800cd9c:	080196dc 	.word	0x080196dc
 800cda0:	08019624 	.word	0x08019624
 800cda4:	080196f4 	.word	0x080196f4
 800cda8:	0801970c 	.word	0x0801970c

0800cdac <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800cdac:	b580      	push	{r7, lr}
 800cdae:	b086      	sub	sp, #24
 800cdb0:	af00      	add	r7, sp, #0
 800cdb2:	60f8      	str	r0, [r7, #12]
 800cdb4:	60b9      	str	r1, [r7, #8]
 800cdb6:	4613      	mov	r3, r2
 800cdb8:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800cdba:	68fb      	ldr	r3, [r7, #12]
 800cdbc:	2b00      	cmp	r3, #0
 800cdbe:	d106      	bne.n	800cdce <pbuf_add_header_impl+0x22>
 800cdc0:	4b2b      	ldr	r3, [pc, #172]	; (800ce70 <pbuf_add_header_impl+0xc4>)
 800cdc2:	f240 12df 	movw	r2, #479	; 0x1df
 800cdc6:	492b      	ldr	r1, [pc, #172]	; (800ce74 <pbuf_add_header_impl+0xc8>)
 800cdc8:	482b      	ldr	r0, [pc, #172]	; (800ce78 <pbuf_add_header_impl+0xcc>)
 800cdca:	f00a f849 	bl	8016e60 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800cdce:	68fb      	ldr	r3, [r7, #12]
 800cdd0:	2b00      	cmp	r3, #0
 800cdd2:	d003      	beq.n	800cddc <pbuf_add_header_impl+0x30>
 800cdd4:	68bb      	ldr	r3, [r7, #8]
 800cdd6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cdda:	d301      	bcc.n	800cde0 <pbuf_add_header_impl+0x34>
    return 1;
 800cddc:	2301      	movs	r3, #1
 800cdde:	e043      	b.n	800ce68 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800cde0:	68bb      	ldr	r3, [r7, #8]
 800cde2:	2b00      	cmp	r3, #0
 800cde4:	d101      	bne.n	800cdea <pbuf_add_header_impl+0x3e>
    return 0;
 800cde6:	2300      	movs	r3, #0
 800cde8:	e03e      	b.n	800ce68 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800cdea:	68bb      	ldr	r3, [r7, #8]
 800cdec:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800cdee:	68fb      	ldr	r3, [r7, #12]
 800cdf0:	891a      	ldrh	r2, [r3, #8]
 800cdf2:	8a7b      	ldrh	r3, [r7, #18]
 800cdf4:	4413      	add	r3, r2
 800cdf6:	b29b      	uxth	r3, r3
 800cdf8:	8a7a      	ldrh	r2, [r7, #18]
 800cdfa:	429a      	cmp	r2, r3
 800cdfc:	d901      	bls.n	800ce02 <pbuf_add_header_impl+0x56>
    return 1;
 800cdfe:	2301      	movs	r3, #1
 800ce00:	e032      	b.n	800ce68 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800ce02:	68fb      	ldr	r3, [r7, #12]
 800ce04:	7b1b      	ldrb	r3, [r3, #12]
 800ce06:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800ce08:	8a3b      	ldrh	r3, [r7, #16]
 800ce0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ce0e:	2b00      	cmp	r3, #0
 800ce10:	d00c      	beq.n	800ce2c <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800ce12:	68fb      	ldr	r3, [r7, #12]
 800ce14:	685a      	ldr	r2, [r3, #4]
 800ce16:	68bb      	ldr	r3, [r7, #8]
 800ce18:	425b      	negs	r3, r3
 800ce1a:	4413      	add	r3, r2
 800ce1c:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800ce1e:	68fb      	ldr	r3, [r7, #12]
 800ce20:	3310      	adds	r3, #16
 800ce22:	697a      	ldr	r2, [r7, #20]
 800ce24:	429a      	cmp	r2, r3
 800ce26:	d20d      	bcs.n	800ce44 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800ce28:	2301      	movs	r3, #1
 800ce2a:	e01d      	b.n	800ce68 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800ce2c:	79fb      	ldrb	r3, [r7, #7]
 800ce2e:	2b00      	cmp	r3, #0
 800ce30:	d006      	beq.n	800ce40 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800ce32:	68fb      	ldr	r3, [r7, #12]
 800ce34:	685a      	ldr	r2, [r3, #4]
 800ce36:	68bb      	ldr	r3, [r7, #8]
 800ce38:	425b      	negs	r3, r3
 800ce3a:	4413      	add	r3, r2
 800ce3c:	617b      	str	r3, [r7, #20]
 800ce3e:	e001      	b.n	800ce44 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800ce40:	2301      	movs	r3, #1
 800ce42:	e011      	b.n	800ce68 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800ce44:	68fb      	ldr	r3, [r7, #12]
 800ce46:	697a      	ldr	r2, [r7, #20]
 800ce48:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800ce4a:	68fb      	ldr	r3, [r7, #12]
 800ce4c:	895a      	ldrh	r2, [r3, #10]
 800ce4e:	8a7b      	ldrh	r3, [r7, #18]
 800ce50:	4413      	add	r3, r2
 800ce52:	b29a      	uxth	r2, r3
 800ce54:	68fb      	ldr	r3, [r7, #12]
 800ce56:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800ce58:	68fb      	ldr	r3, [r7, #12]
 800ce5a:	891a      	ldrh	r2, [r3, #8]
 800ce5c:	8a7b      	ldrh	r3, [r7, #18]
 800ce5e:	4413      	add	r3, r2
 800ce60:	b29a      	uxth	r2, r3
 800ce62:	68fb      	ldr	r3, [r7, #12]
 800ce64:	811a      	strh	r2, [r3, #8]


  return 0;
 800ce66:	2300      	movs	r3, #0
}
 800ce68:	4618      	mov	r0, r3
 800ce6a:	3718      	adds	r7, #24
 800ce6c:	46bd      	mov	sp, r7
 800ce6e:	bd80      	pop	{r7, pc}
 800ce70:	080195c4 	.word	0x080195c4
 800ce74:	08019728 	.word	0x08019728
 800ce78:	08019624 	.word	0x08019624

0800ce7c <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800ce7c:	b580      	push	{r7, lr}
 800ce7e:	b082      	sub	sp, #8
 800ce80:	af00      	add	r7, sp, #0
 800ce82:	6078      	str	r0, [r7, #4]
 800ce84:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800ce86:	2200      	movs	r2, #0
 800ce88:	6839      	ldr	r1, [r7, #0]
 800ce8a:	6878      	ldr	r0, [r7, #4]
 800ce8c:	f7ff ff8e 	bl	800cdac <pbuf_add_header_impl>
 800ce90:	4603      	mov	r3, r0
}
 800ce92:	4618      	mov	r0, r3
 800ce94:	3708      	adds	r7, #8
 800ce96:	46bd      	mov	sp, r7
 800ce98:	bd80      	pop	{r7, pc}
	...

0800ce9c <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800ce9c:	b580      	push	{r7, lr}
 800ce9e:	b084      	sub	sp, #16
 800cea0:	af00      	add	r7, sp, #0
 800cea2:	6078      	str	r0, [r7, #4]
 800cea4:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	d106      	bne.n	800ceba <pbuf_remove_header+0x1e>
 800ceac:	4b20      	ldr	r3, [pc, #128]	; (800cf30 <pbuf_remove_header+0x94>)
 800ceae:	f240 224b 	movw	r2, #587	; 0x24b
 800ceb2:	4920      	ldr	r1, [pc, #128]	; (800cf34 <pbuf_remove_header+0x98>)
 800ceb4:	4820      	ldr	r0, [pc, #128]	; (800cf38 <pbuf_remove_header+0x9c>)
 800ceb6:	f009 ffd3 	bl	8016e60 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	2b00      	cmp	r3, #0
 800cebe:	d003      	beq.n	800cec8 <pbuf_remove_header+0x2c>
 800cec0:	683b      	ldr	r3, [r7, #0]
 800cec2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cec6:	d301      	bcc.n	800cecc <pbuf_remove_header+0x30>
    return 1;
 800cec8:	2301      	movs	r3, #1
 800ceca:	e02c      	b.n	800cf26 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800cecc:	683b      	ldr	r3, [r7, #0]
 800cece:	2b00      	cmp	r3, #0
 800ced0:	d101      	bne.n	800ced6 <pbuf_remove_header+0x3a>
    return 0;
 800ced2:	2300      	movs	r3, #0
 800ced4:	e027      	b.n	800cf26 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800ced6:	683b      	ldr	r3, [r7, #0]
 800ced8:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	895b      	ldrh	r3, [r3, #10]
 800cede:	89fa      	ldrh	r2, [r7, #14]
 800cee0:	429a      	cmp	r2, r3
 800cee2:	d908      	bls.n	800cef6 <pbuf_remove_header+0x5a>
 800cee4:	4b12      	ldr	r3, [pc, #72]	; (800cf30 <pbuf_remove_header+0x94>)
 800cee6:	f240 2255 	movw	r2, #597	; 0x255
 800ceea:	4914      	ldr	r1, [pc, #80]	; (800cf3c <pbuf_remove_header+0xa0>)
 800ceec:	4812      	ldr	r0, [pc, #72]	; (800cf38 <pbuf_remove_header+0x9c>)
 800ceee:	f009 ffb7 	bl	8016e60 <iprintf>
 800cef2:	2301      	movs	r3, #1
 800cef4:	e017      	b.n	800cf26 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	685b      	ldr	r3, [r3, #4]
 800cefa:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	685a      	ldr	r2, [r3, #4]
 800cf00:	683b      	ldr	r3, [r7, #0]
 800cf02:	441a      	add	r2, r3
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	895a      	ldrh	r2, [r3, #10]
 800cf0c:	89fb      	ldrh	r3, [r7, #14]
 800cf0e:	1ad3      	subs	r3, r2, r3
 800cf10:	b29a      	uxth	r2, r3
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	891a      	ldrh	r2, [r3, #8]
 800cf1a:	89fb      	ldrh	r3, [r7, #14]
 800cf1c:	1ad3      	subs	r3, r2, r3
 800cf1e:	b29a      	uxth	r2, r3
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800cf24:	2300      	movs	r3, #0
}
 800cf26:	4618      	mov	r0, r3
 800cf28:	3710      	adds	r7, #16
 800cf2a:	46bd      	mov	sp, r7
 800cf2c:	bd80      	pop	{r7, pc}
 800cf2e:	bf00      	nop
 800cf30:	080195c4 	.word	0x080195c4
 800cf34:	08019728 	.word	0x08019728
 800cf38:	08019624 	.word	0x08019624
 800cf3c:	08019734 	.word	0x08019734

0800cf40 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800cf40:	b580      	push	{r7, lr}
 800cf42:	b082      	sub	sp, #8
 800cf44:	af00      	add	r7, sp, #0
 800cf46:	6078      	str	r0, [r7, #4]
 800cf48:	460b      	mov	r3, r1
 800cf4a:	807b      	strh	r3, [r7, #2]
 800cf4c:	4613      	mov	r3, r2
 800cf4e:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800cf50:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	da08      	bge.n	800cf6a <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800cf58:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800cf5c:	425b      	negs	r3, r3
 800cf5e:	4619      	mov	r1, r3
 800cf60:	6878      	ldr	r0, [r7, #4]
 800cf62:	f7ff ff9b 	bl	800ce9c <pbuf_remove_header>
 800cf66:	4603      	mov	r3, r0
 800cf68:	e007      	b.n	800cf7a <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800cf6a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800cf6e:	787a      	ldrb	r2, [r7, #1]
 800cf70:	4619      	mov	r1, r3
 800cf72:	6878      	ldr	r0, [r7, #4]
 800cf74:	f7ff ff1a 	bl	800cdac <pbuf_add_header_impl>
 800cf78:	4603      	mov	r3, r0
  }
}
 800cf7a:	4618      	mov	r0, r3
 800cf7c:	3708      	adds	r7, #8
 800cf7e:	46bd      	mov	sp, r7
 800cf80:	bd80      	pop	{r7, pc}

0800cf82 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800cf82:	b580      	push	{r7, lr}
 800cf84:	b082      	sub	sp, #8
 800cf86:	af00      	add	r7, sp, #0
 800cf88:	6078      	str	r0, [r7, #4]
 800cf8a:	460b      	mov	r3, r1
 800cf8c:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800cf8e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800cf92:	2201      	movs	r2, #1
 800cf94:	4619      	mov	r1, r3
 800cf96:	6878      	ldr	r0, [r7, #4]
 800cf98:	f7ff ffd2 	bl	800cf40 <pbuf_header_impl>
 800cf9c:	4603      	mov	r3, r0
}
 800cf9e:	4618      	mov	r0, r3
 800cfa0:	3708      	adds	r7, #8
 800cfa2:	46bd      	mov	sp, r7
 800cfa4:	bd80      	pop	{r7, pc}

0800cfa6 <pbuf_free_header>:
 *                   takes an u16_t not s16_t!
 * @return the new head pbuf
 */
struct pbuf *
pbuf_free_header(struct pbuf *q, u16_t size)
{
 800cfa6:	b580      	push	{r7, lr}
 800cfa8:	b086      	sub	sp, #24
 800cfaa:	af00      	add	r7, sp, #0
 800cfac:	6078      	str	r0, [r7, #4]
 800cfae:	460b      	mov	r3, r1
 800cfb0:	807b      	strh	r3, [r7, #2]
  struct pbuf *p = q;
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	617b      	str	r3, [r7, #20]
  u16_t free_left = size;
 800cfb6:	887b      	ldrh	r3, [r7, #2]
 800cfb8:	827b      	strh	r3, [r7, #18]
  while (free_left && p) {
 800cfba:	e01c      	b.n	800cff6 <pbuf_free_header+0x50>
    if (free_left >= p->len) {
 800cfbc:	697b      	ldr	r3, [r7, #20]
 800cfbe:	895b      	ldrh	r3, [r3, #10]
 800cfc0:	8a7a      	ldrh	r2, [r7, #18]
 800cfc2:	429a      	cmp	r2, r3
 800cfc4:	d310      	bcc.n	800cfe8 <pbuf_free_header+0x42>
      struct pbuf *f = p;
 800cfc6:	697b      	ldr	r3, [r7, #20]
 800cfc8:	60fb      	str	r3, [r7, #12]
      free_left = (u16_t)(free_left - p->len);
 800cfca:	697b      	ldr	r3, [r7, #20]
 800cfcc:	895b      	ldrh	r3, [r3, #10]
 800cfce:	8a7a      	ldrh	r2, [r7, #18]
 800cfd0:	1ad3      	subs	r3, r2, r3
 800cfd2:	827b      	strh	r3, [r7, #18]
      p = p->next;
 800cfd4:	697b      	ldr	r3, [r7, #20]
 800cfd6:	681b      	ldr	r3, [r3, #0]
 800cfd8:	617b      	str	r3, [r7, #20]
      f->next = 0;
 800cfda:	68fb      	ldr	r3, [r7, #12]
 800cfdc:	2200      	movs	r2, #0
 800cfde:	601a      	str	r2, [r3, #0]
      pbuf_free(f);
 800cfe0:	68f8      	ldr	r0, [r7, #12]
 800cfe2:	f000 f813 	bl	800d00c <pbuf_free>
 800cfe6:	e006      	b.n	800cff6 <pbuf_free_header+0x50>
    } else {
      pbuf_remove_header(p, free_left);
 800cfe8:	8a7b      	ldrh	r3, [r7, #18]
 800cfea:	4619      	mov	r1, r3
 800cfec:	6978      	ldr	r0, [r7, #20]
 800cfee:	f7ff ff55 	bl	800ce9c <pbuf_remove_header>
      free_left = 0;
 800cff2:	2300      	movs	r3, #0
 800cff4:	827b      	strh	r3, [r7, #18]
  while (free_left && p) {
 800cff6:	8a7b      	ldrh	r3, [r7, #18]
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	d002      	beq.n	800d002 <pbuf_free_header+0x5c>
 800cffc:	697b      	ldr	r3, [r7, #20]
 800cffe:	2b00      	cmp	r3, #0
 800d000:	d1dc      	bne.n	800cfbc <pbuf_free_header+0x16>
    }
  }
  return p;
 800d002:	697b      	ldr	r3, [r7, #20]
}
 800d004:	4618      	mov	r0, r3
 800d006:	3718      	adds	r7, #24
 800d008:	46bd      	mov	sp, r7
 800d00a:	bd80      	pop	{r7, pc}

0800d00c <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800d00c:	b580      	push	{r7, lr}
 800d00e:	b088      	sub	sp, #32
 800d010:	af00      	add	r7, sp, #0
 800d012:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	2b00      	cmp	r3, #0
 800d018:	d10b      	bne.n	800d032 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	d106      	bne.n	800d02e <pbuf_free+0x22>
 800d020:	4b3b      	ldr	r3, [pc, #236]	; (800d110 <pbuf_free+0x104>)
 800d022:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800d026:	493b      	ldr	r1, [pc, #236]	; (800d114 <pbuf_free+0x108>)
 800d028:	483b      	ldr	r0, [pc, #236]	; (800d118 <pbuf_free+0x10c>)
 800d02a:	f009 ff19 	bl	8016e60 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800d02e:	2300      	movs	r3, #0
 800d030:	e069      	b.n	800d106 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800d032:	2300      	movs	r3, #0
 800d034:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800d036:	e062      	b.n	800d0fe <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800d038:	f009 fe74 	bl	8016d24 <sys_arch_protect>
 800d03c:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	7b9b      	ldrb	r3, [r3, #14]
 800d042:	2b00      	cmp	r3, #0
 800d044:	d106      	bne.n	800d054 <pbuf_free+0x48>
 800d046:	4b32      	ldr	r3, [pc, #200]	; (800d110 <pbuf_free+0x104>)
 800d048:	f240 22f1 	movw	r2, #753	; 0x2f1
 800d04c:	4933      	ldr	r1, [pc, #204]	; (800d11c <pbuf_free+0x110>)
 800d04e:	4832      	ldr	r0, [pc, #200]	; (800d118 <pbuf_free+0x10c>)
 800d050:	f009 ff06 	bl	8016e60 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	7b9b      	ldrb	r3, [r3, #14]
 800d058:	3b01      	subs	r3, #1
 800d05a:	b2da      	uxtb	r2, r3
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	739a      	strb	r2, [r3, #14]
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	7b9b      	ldrb	r3, [r3, #14]
 800d064:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800d066:	69b8      	ldr	r0, [r7, #24]
 800d068:	f009 fe6a 	bl	8016d40 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800d06c:	7dfb      	ldrb	r3, [r7, #23]
 800d06e:	2b00      	cmp	r3, #0
 800d070:	d143      	bne.n	800d0fa <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	681b      	ldr	r3, [r3, #0]
 800d076:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	7b1b      	ldrb	r3, [r3, #12]
 800d07c:	f003 030f 	and.w	r3, r3, #15
 800d080:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	7b5b      	ldrb	r3, [r3, #13]
 800d086:	f003 0302 	and.w	r3, r3, #2
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	d011      	beq.n	800d0b2 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800d092:	68bb      	ldr	r3, [r7, #8]
 800d094:	691b      	ldr	r3, [r3, #16]
 800d096:	2b00      	cmp	r3, #0
 800d098:	d106      	bne.n	800d0a8 <pbuf_free+0x9c>
 800d09a:	4b1d      	ldr	r3, [pc, #116]	; (800d110 <pbuf_free+0x104>)
 800d09c:	f240 22ff 	movw	r2, #767	; 0x2ff
 800d0a0:	491f      	ldr	r1, [pc, #124]	; (800d120 <pbuf_free+0x114>)
 800d0a2:	481d      	ldr	r0, [pc, #116]	; (800d118 <pbuf_free+0x10c>)
 800d0a4:	f009 fedc 	bl	8016e60 <iprintf>
        pc->custom_free_function(p);
 800d0a8:	68bb      	ldr	r3, [r7, #8]
 800d0aa:	691b      	ldr	r3, [r3, #16]
 800d0ac:	6878      	ldr	r0, [r7, #4]
 800d0ae:	4798      	blx	r3
 800d0b0:	e01d      	b.n	800d0ee <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800d0b2:	7bfb      	ldrb	r3, [r7, #15]
 800d0b4:	2b02      	cmp	r3, #2
 800d0b6:	d104      	bne.n	800d0c2 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800d0b8:	6879      	ldr	r1, [r7, #4]
 800d0ba:	200c      	movs	r0, #12
 800d0bc:	f7ff f8d4 	bl	800c268 <memp_free>
 800d0c0:	e015      	b.n	800d0ee <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800d0c2:	7bfb      	ldrb	r3, [r7, #15]
 800d0c4:	2b01      	cmp	r3, #1
 800d0c6:	d104      	bne.n	800d0d2 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800d0c8:	6879      	ldr	r1, [r7, #4]
 800d0ca:	200b      	movs	r0, #11
 800d0cc:	f7ff f8cc 	bl	800c268 <memp_free>
 800d0d0:	e00d      	b.n	800d0ee <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800d0d2:	7bfb      	ldrb	r3, [r7, #15]
 800d0d4:	2b00      	cmp	r3, #0
 800d0d6:	d103      	bne.n	800d0e0 <pbuf_free+0xd4>
          mem_free(p);
 800d0d8:	6878      	ldr	r0, [r7, #4]
 800d0da:	f7fe fd57 	bl	800bb8c <mem_free>
 800d0de:	e006      	b.n	800d0ee <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800d0e0:	4b0b      	ldr	r3, [pc, #44]	; (800d110 <pbuf_free+0x104>)
 800d0e2:	f240 320f 	movw	r2, #783	; 0x30f
 800d0e6:	490f      	ldr	r1, [pc, #60]	; (800d124 <pbuf_free+0x118>)
 800d0e8:	480b      	ldr	r0, [pc, #44]	; (800d118 <pbuf_free+0x10c>)
 800d0ea:	f009 feb9 	bl	8016e60 <iprintf>
        }
      }
      count++;
 800d0ee:	7ffb      	ldrb	r3, [r7, #31]
 800d0f0:	3301      	adds	r3, #1
 800d0f2:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800d0f4:	693b      	ldr	r3, [r7, #16]
 800d0f6:	607b      	str	r3, [r7, #4]
 800d0f8:	e001      	b.n	800d0fe <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800d0fa:	2300      	movs	r3, #0
 800d0fc:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	2b00      	cmp	r3, #0
 800d102:	d199      	bne.n	800d038 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800d104:	7ffb      	ldrb	r3, [r7, #31]
}
 800d106:	4618      	mov	r0, r3
 800d108:	3720      	adds	r7, #32
 800d10a:	46bd      	mov	sp, r7
 800d10c:	bd80      	pop	{r7, pc}
 800d10e:	bf00      	nop
 800d110:	080195c4 	.word	0x080195c4
 800d114:	08019728 	.word	0x08019728
 800d118:	08019624 	.word	0x08019624
 800d11c:	08019754 	.word	0x08019754
 800d120:	0801976c 	.word	0x0801976c
 800d124:	08019790 	.word	0x08019790

0800d128 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800d128:	b480      	push	{r7}
 800d12a:	b085      	sub	sp, #20
 800d12c:	af00      	add	r7, sp, #0
 800d12e:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800d130:	2300      	movs	r3, #0
 800d132:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800d134:	e005      	b.n	800d142 <pbuf_clen+0x1a>
    ++len;
 800d136:	89fb      	ldrh	r3, [r7, #14]
 800d138:	3301      	adds	r3, #1
 800d13a:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	681b      	ldr	r3, [r3, #0]
 800d140:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	2b00      	cmp	r3, #0
 800d146:	d1f6      	bne.n	800d136 <pbuf_clen+0xe>
  }
  return len;
 800d148:	89fb      	ldrh	r3, [r7, #14]
}
 800d14a:	4618      	mov	r0, r3
 800d14c:	3714      	adds	r7, #20
 800d14e:	46bd      	mov	sp, r7
 800d150:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d154:	4770      	bx	lr
	...

0800d158 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800d158:	b580      	push	{r7, lr}
 800d15a:	b084      	sub	sp, #16
 800d15c:	af00      	add	r7, sp, #0
 800d15e:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	2b00      	cmp	r3, #0
 800d164:	d016      	beq.n	800d194 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800d166:	f009 fddd 	bl	8016d24 <sys_arch_protect>
 800d16a:	60f8      	str	r0, [r7, #12]
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	7b9b      	ldrb	r3, [r3, #14]
 800d170:	3301      	adds	r3, #1
 800d172:	b2da      	uxtb	r2, r3
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	739a      	strb	r2, [r3, #14]
 800d178:	68f8      	ldr	r0, [r7, #12]
 800d17a:	f009 fde1 	bl	8016d40 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	7b9b      	ldrb	r3, [r3, #14]
 800d182:	2b00      	cmp	r3, #0
 800d184:	d106      	bne.n	800d194 <pbuf_ref+0x3c>
 800d186:	4b05      	ldr	r3, [pc, #20]	; (800d19c <pbuf_ref+0x44>)
 800d188:	f240 3242 	movw	r2, #834	; 0x342
 800d18c:	4904      	ldr	r1, [pc, #16]	; (800d1a0 <pbuf_ref+0x48>)
 800d18e:	4805      	ldr	r0, [pc, #20]	; (800d1a4 <pbuf_ref+0x4c>)
 800d190:	f009 fe66 	bl	8016e60 <iprintf>
  }
}
 800d194:	bf00      	nop
 800d196:	3710      	adds	r7, #16
 800d198:	46bd      	mov	sp, r7
 800d19a:	bd80      	pop	{r7, pc}
 800d19c:	080195c4 	.word	0x080195c4
 800d1a0:	080197a4 	.word	0x080197a4
 800d1a4:	08019624 	.word	0x08019624

0800d1a8 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800d1a8:	b580      	push	{r7, lr}
 800d1aa:	b084      	sub	sp, #16
 800d1ac:	af00      	add	r7, sp, #0
 800d1ae:	6078      	str	r0, [r7, #4]
 800d1b0:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	2b00      	cmp	r3, #0
 800d1b6:	d002      	beq.n	800d1be <pbuf_cat+0x16>
 800d1b8:	683b      	ldr	r3, [r7, #0]
 800d1ba:	2b00      	cmp	r3, #0
 800d1bc:	d107      	bne.n	800d1ce <pbuf_cat+0x26>
 800d1be:	4b20      	ldr	r3, [pc, #128]	; (800d240 <pbuf_cat+0x98>)
 800d1c0:	f240 325a 	movw	r2, #858	; 0x35a
 800d1c4:	491f      	ldr	r1, [pc, #124]	; (800d244 <pbuf_cat+0x9c>)
 800d1c6:	4820      	ldr	r0, [pc, #128]	; (800d248 <pbuf_cat+0xa0>)
 800d1c8:	f009 fe4a 	bl	8016e60 <iprintf>
 800d1cc:	e034      	b.n	800d238 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	60fb      	str	r3, [r7, #12]
 800d1d2:	e00a      	b.n	800d1ea <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800d1d4:	68fb      	ldr	r3, [r7, #12]
 800d1d6:	891a      	ldrh	r2, [r3, #8]
 800d1d8:	683b      	ldr	r3, [r7, #0]
 800d1da:	891b      	ldrh	r3, [r3, #8]
 800d1dc:	4413      	add	r3, r2
 800d1de:	b29a      	uxth	r2, r3
 800d1e0:	68fb      	ldr	r3, [r7, #12]
 800d1e2:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800d1e4:	68fb      	ldr	r3, [r7, #12]
 800d1e6:	681b      	ldr	r3, [r3, #0]
 800d1e8:	60fb      	str	r3, [r7, #12]
 800d1ea:	68fb      	ldr	r3, [r7, #12]
 800d1ec:	681b      	ldr	r3, [r3, #0]
 800d1ee:	2b00      	cmp	r3, #0
 800d1f0:	d1f0      	bne.n	800d1d4 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800d1f2:	68fb      	ldr	r3, [r7, #12]
 800d1f4:	891a      	ldrh	r2, [r3, #8]
 800d1f6:	68fb      	ldr	r3, [r7, #12]
 800d1f8:	895b      	ldrh	r3, [r3, #10]
 800d1fa:	429a      	cmp	r2, r3
 800d1fc:	d006      	beq.n	800d20c <pbuf_cat+0x64>
 800d1fe:	4b10      	ldr	r3, [pc, #64]	; (800d240 <pbuf_cat+0x98>)
 800d200:	f240 3262 	movw	r2, #866	; 0x362
 800d204:	4911      	ldr	r1, [pc, #68]	; (800d24c <pbuf_cat+0xa4>)
 800d206:	4810      	ldr	r0, [pc, #64]	; (800d248 <pbuf_cat+0xa0>)
 800d208:	f009 fe2a 	bl	8016e60 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800d20c:	68fb      	ldr	r3, [r7, #12]
 800d20e:	681b      	ldr	r3, [r3, #0]
 800d210:	2b00      	cmp	r3, #0
 800d212:	d006      	beq.n	800d222 <pbuf_cat+0x7a>
 800d214:	4b0a      	ldr	r3, [pc, #40]	; (800d240 <pbuf_cat+0x98>)
 800d216:	f240 3263 	movw	r2, #867	; 0x363
 800d21a:	490d      	ldr	r1, [pc, #52]	; (800d250 <pbuf_cat+0xa8>)
 800d21c:	480a      	ldr	r0, [pc, #40]	; (800d248 <pbuf_cat+0xa0>)
 800d21e:	f009 fe1f 	bl	8016e60 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800d222:	68fb      	ldr	r3, [r7, #12]
 800d224:	891a      	ldrh	r2, [r3, #8]
 800d226:	683b      	ldr	r3, [r7, #0]
 800d228:	891b      	ldrh	r3, [r3, #8]
 800d22a:	4413      	add	r3, r2
 800d22c:	b29a      	uxth	r2, r3
 800d22e:	68fb      	ldr	r3, [r7, #12]
 800d230:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800d232:	68fb      	ldr	r3, [r7, #12]
 800d234:	683a      	ldr	r2, [r7, #0]
 800d236:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800d238:	3710      	adds	r7, #16
 800d23a:	46bd      	mov	sp, r7
 800d23c:	bd80      	pop	{r7, pc}
 800d23e:	bf00      	nop
 800d240:	080195c4 	.word	0x080195c4
 800d244:	080197b8 	.word	0x080197b8
 800d248:	08019624 	.word	0x08019624
 800d24c:	080197f0 	.word	0x080197f0
 800d250:	08019820 	.word	0x08019820

0800d254 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800d254:	b580      	push	{r7, lr}
 800d256:	b082      	sub	sp, #8
 800d258:	af00      	add	r7, sp, #0
 800d25a:	6078      	str	r0, [r7, #4]
 800d25c:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800d25e:	6839      	ldr	r1, [r7, #0]
 800d260:	6878      	ldr	r0, [r7, #4]
 800d262:	f7ff ffa1 	bl	800d1a8 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800d266:	6838      	ldr	r0, [r7, #0]
 800d268:	f7ff ff76 	bl	800d158 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800d26c:	bf00      	nop
 800d26e:	3708      	adds	r7, #8
 800d270:	46bd      	mov	sp, r7
 800d272:	bd80      	pop	{r7, pc}

0800d274 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800d274:	b580      	push	{r7, lr}
 800d276:	b086      	sub	sp, #24
 800d278:	af00      	add	r7, sp, #0
 800d27a:	6078      	str	r0, [r7, #4]
 800d27c:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800d27e:	2300      	movs	r3, #0
 800d280:	617b      	str	r3, [r7, #20]
 800d282:	2300      	movs	r3, #0
 800d284:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	2b00      	cmp	r3, #0
 800d28a:	d008      	beq.n	800d29e <pbuf_copy+0x2a>
 800d28c:	683b      	ldr	r3, [r7, #0]
 800d28e:	2b00      	cmp	r3, #0
 800d290:	d005      	beq.n	800d29e <pbuf_copy+0x2a>
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	891a      	ldrh	r2, [r3, #8]
 800d296:	683b      	ldr	r3, [r7, #0]
 800d298:	891b      	ldrh	r3, [r3, #8]
 800d29a:	429a      	cmp	r2, r3
 800d29c:	d209      	bcs.n	800d2b2 <pbuf_copy+0x3e>
 800d29e:	4b57      	ldr	r3, [pc, #348]	; (800d3fc <pbuf_copy+0x188>)
 800d2a0:	f240 32ca 	movw	r2, #970	; 0x3ca
 800d2a4:	4956      	ldr	r1, [pc, #344]	; (800d400 <pbuf_copy+0x18c>)
 800d2a6:	4857      	ldr	r0, [pc, #348]	; (800d404 <pbuf_copy+0x190>)
 800d2a8:	f009 fdda 	bl	8016e60 <iprintf>
 800d2ac:	f06f 030f 	mvn.w	r3, #15
 800d2b0:	e09f      	b.n	800d3f2 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	895b      	ldrh	r3, [r3, #10]
 800d2b6:	461a      	mov	r2, r3
 800d2b8:	697b      	ldr	r3, [r7, #20]
 800d2ba:	1ad2      	subs	r2, r2, r3
 800d2bc:	683b      	ldr	r3, [r7, #0]
 800d2be:	895b      	ldrh	r3, [r3, #10]
 800d2c0:	4619      	mov	r1, r3
 800d2c2:	693b      	ldr	r3, [r7, #16]
 800d2c4:	1acb      	subs	r3, r1, r3
 800d2c6:	429a      	cmp	r2, r3
 800d2c8:	d306      	bcc.n	800d2d8 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800d2ca:	683b      	ldr	r3, [r7, #0]
 800d2cc:	895b      	ldrh	r3, [r3, #10]
 800d2ce:	461a      	mov	r2, r3
 800d2d0:	693b      	ldr	r3, [r7, #16]
 800d2d2:	1ad3      	subs	r3, r2, r3
 800d2d4:	60fb      	str	r3, [r7, #12]
 800d2d6:	e005      	b.n	800d2e4 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	895b      	ldrh	r3, [r3, #10]
 800d2dc:	461a      	mov	r2, r3
 800d2de:	697b      	ldr	r3, [r7, #20]
 800d2e0:	1ad3      	subs	r3, r2, r3
 800d2e2:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	685a      	ldr	r2, [r3, #4]
 800d2e8:	697b      	ldr	r3, [r7, #20]
 800d2ea:	18d0      	adds	r0, r2, r3
 800d2ec:	683b      	ldr	r3, [r7, #0]
 800d2ee:	685a      	ldr	r2, [r3, #4]
 800d2f0:	693b      	ldr	r3, [r7, #16]
 800d2f2:	4413      	add	r3, r2
 800d2f4:	68fa      	ldr	r2, [r7, #12]
 800d2f6:	4619      	mov	r1, r3
 800d2f8:	f009 fd85 	bl	8016e06 <memcpy>
    offset_to += len;
 800d2fc:	697a      	ldr	r2, [r7, #20]
 800d2fe:	68fb      	ldr	r3, [r7, #12]
 800d300:	4413      	add	r3, r2
 800d302:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800d304:	693a      	ldr	r2, [r7, #16]
 800d306:	68fb      	ldr	r3, [r7, #12]
 800d308:	4413      	add	r3, r2
 800d30a:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	895b      	ldrh	r3, [r3, #10]
 800d310:	461a      	mov	r2, r3
 800d312:	697b      	ldr	r3, [r7, #20]
 800d314:	4293      	cmp	r3, r2
 800d316:	d906      	bls.n	800d326 <pbuf_copy+0xb2>
 800d318:	4b38      	ldr	r3, [pc, #224]	; (800d3fc <pbuf_copy+0x188>)
 800d31a:	f240 32d9 	movw	r2, #985	; 0x3d9
 800d31e:	493a      	ldr	r1, [pc, #232]	; (800d408 <pbuf_copy+0x194>)
 800d320:	4838      	ldr	r0, [pc, #224]	; (800d404 <pbuf_copy+0x190>)
 800d322:	f009 fd9d 	bl	8016e60 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800d326:	683b      	ldr	r3, [r7, #0]
 800d328:	895b      	ldrh	r3, [r3, #10]
 800d32a:	461a      	mov	r2, r3
 800d32c:	693b      	ldr	r3, [r7, #16]
 800d32e:	4293      	cmp	r3, r2
 800d330:	d906      	bls.n	800d340 <pbuf_copy+0xcc>
 800d332:	4b32      	ldr	r3, [pc, #200]	; (800d3fc <pbuf_copy+0x188>)
 800d334:	f240 32da 	movw	r2, #986	; 0x3da
 800d338:	4934      	ldr	r1, [pc, #208]	; (800d40c <pbuf_copy+0x198>)
 800d33a:	4832      	ldr	r0, [pc, #200]	; (800d404 <pbuf_copy+0x190>)
 800d33c:	f009 fd90 	bl	8016e60 <iprintf>
    if (offset_from >= p_from->len) {
 800d340:	683b      	ldr	r3, [r7, #0]
 800d342:	895b      	ldrh	r3, [r3, #10]
 800d344:	461a      	mov	r2, r3
 800d346:	693b      	ldr	r3, [r7, #16]
 800d348:	4293      	cmp	r3, r2
 800d34a:	d304      	bcc.n	800d356 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800d34c:	2300      	movs	r3, #0
 800d34e:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800d350:	683b      	ldr	r3, [r7, #0]
 800d352:	681b      	ldr	r3, [r3, #0]
 800d354:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	895b      	ldrh	r3, [r3, #10]
 800d35a:	461a      	mov	r2, r3
 800d35c:	697b      	ldr	r3, [r7, #20]
 800d35e:	4293      	cmp	r3, r2
 800d360:	d114      	bne.n	800d38c <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800d362:	2300      	movs	r3, #0
 800d364:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	681b      	ldr	r3, [r3, #0]
 800d36a:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	2b00      	cmp	r3, #0
 800d370:	d10c      	bne.n	800d38c <pbuf_copy+0x118>
 800d372:	683b      	ldr	r3, [r7, #0]
 800d374:	2b00      	cmp	r3, #0
 800d376:	d009      	beq.n	800d38c <pbuf_copy+0x118>
 800d378:	4b20      	ldr	r3, [pc, #128]	; (800d3fc <pbuf_copy+0x188>)
 800d37a:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800d37e:	4924      	ldr	r1, [pc, #144]	; (800d410 <pbuf_copy+0x19c>)
 800d380:	4820      	ldr	r0, [pc, #128]	; (800d404 <pbuf_copy+0x190>)
 800d382:	f009 fd6d 	bl	8016e60 <iprintf>
 800d386:	f06f 030f 	mvn.w	r3, #15
 800d38a:	e032      	b.n	800d3f2 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800d38c:	683b      	ldr	r3, [r7, #0]
 800d38e:	2b00      	cmp	r3, #0
 800d390:	d013      	beq.n	800d3ba <pbuf_copy+0x146>
 800d392:	683b      	ldr	r3, [r7, #0]
 800d394:	895a      	ldrh	r2, [r3, #10]
 800d396:	683b      	ldr	r3, [r7, #0]
 800d398:	891b      	ldrh	r3, [r3, #8]
 800d39a:	429a      	cmp	r2, r3
 800d39c:	d10d      	bne.n	800d3ba <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800d39e:	683b      	ldr	r3, [r7, #0]
 800d3a0:	681b      	ldr	r3, [r3, #0]
 800d3a2:	2b00      	cmp	r3, #0
 800d3a4:	d009      	beq.n	800d3ba <pbuf_copy+0x146>
 800d3a6:	4b15      	ldr	r3, [pc, #84]	; (800d3fc <pbuf_copy+0x188>)
 800d3a8:	f240 32ea 	movw	r2, #1002	; 0x3ea
 800d3ac:	4919      	ldr	r1, [pc, #100]	; (800d414 <pbuf_copy+0x1a0>)
 800d3ae:	4815      	ldr	r0, [pc, #84]	; (800d404 <pbuf_copy+0x190>)
 800d3b0:	f009 fd56 	bl	8016e60 <iprintf>
 800d3b4:	f06f 0305 	mvn.w	r3, #5
 800d3b8:	e01b      	b.n	800d3f2 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	2b00      	cmp	r3, #0
 800d3be:	d013      	beq.n	800d3e8 <pbuf_copy+0x174>
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	895a      	ldrh	r2, [r3, #10]
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	891b      	ldrh	r3, [r3, #8]
 800d3c8:	429a      	cmp	r2, r3
 800d3ca:	d10d      	bne.n	800d3e8 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	681b      	ldr	r3, [r3, #0]
 800d3d0:	2b00      	cmp	r3, #0
 800d3d2:	d009      	beq.n	800d3e8 <pbuf_copy+0x174>
 800d3d4:	4b09      	ldr	r3, [pc, #36]	; (800d3fc <pbuf_copy+0x188>)
 800d3d6:	f240 32ef 	movw	r2, #1007	; 0x3ef
 800d3da:	490e      	ldr	r1, [pc, #56]	; (800d414 <pbuf_copy+0x1a0>)
 800d3dc:	4809      	ldr	r0, [pc, #36]	; (800d404 <pbuf_copy+0x190>)
 800d3de:	f009 fd3f 	bl	8016e60 <iprintf>
 800d3e2:	f06f 0305 	mvn.w	r3, #5
 800d3e6:	e004      	b.n	800d3f2 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800d3e8:	683b      	ldr	r3, [r7, #0]
 800d3ea:	2b00      	cmp	r3, #0
 800d3ec:	f47f af61 	bne.w	800d2b2 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800d3f0:	2300      	movs	r3, #0
}
 800d3f2:	4618      	mov	r0, r3
 800d3f4:	3718      	adds	r7, #24
 800d3f6:	46bd      	mov	sp, r7
 800d3f8:	bd80      	pop	{r7, pc}
 800d3fa:	bf00      	nop
 800d3fc:	080195c4 	.word	0x080195c4
 800d400:	0801986c 	.word	0x0801986c
 800d404:	08019624 	.word	0x08019624
 800d408:	0801989c 	.word	0x0801989c
 800d40c:	080198b4 	.word	0x080198b4
 800d410:	080198d0 	.word	0x080198d0
 800d414:	080198e0 	.word	0x080198e0

0800d418 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800d418:	b580      	push	{r7, lr}
 800d41a:	b088      	sub	sp, #32
 800d41c:	af00      	add	r7, sp, #0
 800d41e:	60f8      	str	r0, [r7, #12]
 800d420:	60b9      	str	r1, [r7, #8]
 800d422:	4611      	mov	r1, r2
 800d424:	461a      	mov	r2, r3
 800d426:	460b      	mov	r3, r1
 800d428:	80fb      	strh	r3, [r7, #6]
 800d42a:	4613      	mov	r3, r2
 800d42c:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800d42e:	2300      	movs	r3, #0
 800d430:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800d432:	2300      	movs	r3, #0
 800d434:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800d436:	68fb      	ldr	r3, [r7, #12]
 800d438:	2b00      	cmp	r3, #0
 800d43a:	d108      	bne.n	800d44e <pbuf_copy_partial+0x36>
 800d43c:	4b2b      	ldr	r3, [pc, #172]	; (800d4ec <pbuf_copy_partial+0xd4>)
 800d43e:	f240 420a 	movw	r2, #1034	; 0x40a
 800d442:	492b      	ldr	r1, [pc, #172]	; (800d4f0 <pbuf_copy_partial+0xd8>)
 800d444:	482b      	ldr	r0, [pc, #172]	; (800d4f4 <pbuf_copy_partial+0xdc>)
 800d446:	f009 fd0b 	bl	8016e60 <iprintf>
 800d44a:	2300      	movs	r3, #0
 800d44c:	e04a      	b.n	800d4e4 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800d44e:	68bb      	ldr	r3, [r7, #8]
 800d450:	2b00      	cmp	r3, #0
 800d452:	d108      	bne.n	800d466 <pbuf_copy_partial+0x4e>
 800d454:	4b25      	ldr	r3, [pc, #148]	; (800d4ec <pbuf_copy_partial+0xd4>)
 800d456:	f240 420b 	movw	r2, #1035	; 0x40b
 800d45a:	4927      	ldr	r1, [pc, #156]	; (800d4f8 <pbuf_copy_partial+0xe0>)
 800d45c:	4825      	ldr	r0, [pc, #148]	; (800d4f4 <pbuf_copy_partial+0xdc>)
 800d45e:	f009 fcff 	bl	8016e60 <iprintf>
 800d462:	2300      	movs	r3, #0
 800d464:	e03e      	b.n	800d4e4 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800d466:	68fb      	ldr	r3, [r7, #12]
 800d468:	61fb      	str	r3, [r7, #28]
 800d46a:	e034      	b.n	800d4d6 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800d46c:	88bb      	ldrh	r3, [r7, #4]
 800d46e:	2b00      	cmp	r3, #0
 800d470:	d00a      	beq.n	800d488 <pbuf_copy_partial+0x70>
 800d472:	69fb      	ldr	r3, [r7, #28]
 800d474:	895b      	ldrh	r3, [r3, #10]
 800d476:	88ba      	ldrh	r2, [r7, #4]
 800d478:	429a      	cmp	r2, r3
 800d47a:	d305      	bcc.n	800d488 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800d47c:	69fb      	ldr	r3, [r7, #28]
 800d47e:	895b      	ldrh	r3, [r3, #10]
 800d480:	88ba      	ldrh	r2, [r7, #4]
 800d482:	1ad3      	subs	r3, r2, r3
 800d484:	80bb      	strh	r3, [r7, #4]
 800d486:	e023      	b.n	800d4d0 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800d488:	69fb      	ldr	r3, [r7, #28]
 800d48a:	895a      	ldrh	r2, [r3, #10]
 800d48c:	88bb      	ldrh	r3, [r7, #4]
 800d48e:	1ad3      	subs	r3, r2, r3
 800d490:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800d492:	8b3a      	ldrh	r2, [r7, #24]
 800d494:	88fb      	ldrh	r3, [r7, #6]
 800d496:	429a      	cmp	r2, r3
 800d498:	d901      	bls.n	800d49e <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800d49a:	88fb      	ldrh	r3, [r7, #6]
 800d49c:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800d49e:	8b7b      	ldrh	r3, [r7, #26]
 800d4a0:	68ba      	ldr	r2, [r7, #8]
 800d4a2:	18d0      	adds	r0, r2, r3
 800d4a4:	69fb      	ldr	r3, [r7, #28]
 800d4a6:	685a      	ldr	r2, [r3, #4]
 800d4a8:	88bb      	ldrh	r3, [r7, #4]
 800d4aa:	4413      	add	r3, r2
 800d4ac:	8b3a      	ldrh	r2, [r7, #24]
 800d4ae:	4619      	mov	r1, r3
 800d4b0:	f009 fca9 	bl	8016e06 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800d4b4:	8afa      	ldrh	r2, [r7, #22]
 800d4b6:	8b3b      	ldrh	r3, [r7, #24]
 800d4b8:	4413      	add	r3, r2
 800d4ba:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800d4bc:	8b7a      	ldrh	r2, [r7, #26]
 800d4be:	8b3b      	ldrh	r3, [r7, #24]
 800d4c0:	4413      	add	r3, r2
 800d4c2:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800d4c4:	88fa      	ldrh	r2, [r7, #6]
 800d4c6:	8b3b      	ldrh	r3, [r7, #24]
 800d4c8:	1ad3      	subs	r3, r2, r3
 800d4ca:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800d4cc:	2300      	movs	r3, #0
 800d4ce:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800d4d0:	69fb      	ldr	r3, [r7, #28]
 800d4d2:	681b      	ldr	r3, [r3, #0]
 800d4d4:	61fb      	str	r3, [r7, #28]
 800d4d6:	88fb      	ldrh	r3, [r7, #6]
 800d4d8:	2b00      	cmp	r3, #0
 800d4da:	d002      	beq.n	800d4e2 <pbuf_copy_partial+0xca>
 800d4dc:	69fb      	ldr	r3, [r7, #28]
 800d4de:	2b00      	cmp	r3, #0
 800d4e0:	d1c4      	bne.n	800d46c <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800d4e2:	8afb      	ldrh	r3, [r7, #22]
}
 800d4e4:	4618      	mov	r0, r3
 800d4e6:	3720      	adds	r7, #32
 800d4e8:	46bd      	mov	sp, r7
 800d4ea:	bd80      	pop	{r7, pc}
 800d4ec:	080195c4 	.word	0x080195c4
 800d4f0:	0801990c 	.word	0x0801990c
 800d4f4:	08019624 	.word	0x08019624
 800d4f8:	0801992c 	.word	0x0801992c

0800d4fc <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800d4fc:	b580      	push	{r7, lr}
 800d4fe:	b084      	sub	sp, #16
 800d500:	af00      	add	r7, sp, #0
 800d502:	4603      	mov	r3, r0
 800d504:	603a      	str	r2, [r7, #0]
 800d506:	71fb      	strb	r3, [r7, #7]
 800d508:	460b      	mov	r3, r1
 800d50a:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800d50c:	683b      	ldr	r3, [r7, #0]
 800d50e:	8919      	ldrh	r1, [r3, #8]
 800d510:	88ba      	ldrh	r2, [r7, #4]
 800d512:	79fb      	ldrb	r3, [r7, #7]
 800d514:	4618      	mov	r0, r3
 800d516:	f7ff fa67 	bl	800c9e8 <pbuf_alloc>
 800d51a:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800d51c:	68fb      	ldr	r3, [r7, #12]
 800d51e:	2b00      	cmp	r3, #0
 800d520:	d101      	bne.n	800d526 <pbuf_clone+0x2a>
    return NULL;
 800d522:	2300      	movs	r3, #0
 800d524:	e011      	b.n	800d54a <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800d526:	6839      	ldr	r1, [r7, #0]
 800d528:	68f8      	ldr	r0, [r7, #12]
 800d52a:	f7ff fea3 	bl	800d274 <pbuf_copy>
 800d52e:	4603      	mov	r3, r0
 800d530:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800d532:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800d536:	2b00      	cmp	r3, #0
 800d538:	d006      	beq.n	800d548 <pbuf_clone+0x4c>
 800d53a:	4b06      	ldr	r3, [pc, #24]	; (800d554 <pbuf_clone+0x58>)
 800d53c:	f240 5224 	movw	r2, #1316	; 0x524
 800d540:	4905      	ldr	r1, [pc, #20]	; (800d558 <pbuf_clone+0x5c>)
 800d542:	4806      	ldr	r0, [pc, #24]	; (800d55c <pbuf_clone+0x60>)
 800d544:	f009 fc8c 	bl	8016e60 <iprintf>
  return q;
 800d548:	68fb      	ldr	r3, [r7, #12]
}
 800d54a:	4618      	mov	r0, r3
 800d54c:	3710      	adds	r7, #16
 800d54e:	46bd      	mov	sp, r7
 800d550:	bd80      	pop	{r7, pc}
 800d552:	bf00      	nop
 800d554:	080195c4 	.word	0x080195c4
 800d558:	08019a38 	.word	0x08019a38
 800d55c:	08019624 	.word	0x08019624

0800d560 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800d560:	b580      	push	{r7, lr}
 800d562:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800d564:	f009 fc94 	bl	8016e90 <rand>
 800d568:	4603      	mov	r3, r0
 800d56a:	b29b      	uxth	r3, r3
 800d56c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800d570:	b29b      	uxth	r3, r3
 800d572:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800d576:	b29a      	uxth	r2, r3
 800d578:	4b01      	ldr	r3, [pc, #4]	; (800d580 <tcp_init+0x20>)
 800d57a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800d57c:	bf00      	nop
 800d57e:	bd80      	pop	{r7, pc}
 800d580:	20000010 	.word	0x20000010

0800d584 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800d584:	b580      	push	{r7, lr}
 800d586:	b082      	sub	sp, #8
 800d588:	af00      	add	r7, sp, #0
 800d58a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	7d1b      	ldrb	r3, [r3, #20]
 800d590:	2b01      	cmp	r3, #1
 800d592:	d105      	bne.n	800d5a0 <tcp_free+0x1c>
 800d594:	4b06      	ldr	r3, [pc, #24]	; (800d5b0 <tcp_free+0x2c>)
 800d596:	22d4      	movs	r2, #212	; 0xd4
 800d598:	4906      	ldr	r1, [pc, #24]	; (800d5b4 <tcp_free+0x30>)
 800d59a:	4807      	ldr	r0, [pc, #28]	; (800d5b8 <tcp_free+0x34>)
 800d59c:	f009 fc60 	bl	8016e60 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800d5a0:	6879      	ldr	r1, [r7, #4]
 800d5a2:	2001      	movs	r0, #1
 800d5a4:	f7fe fe60 	bl	800c268 <memp_free>
}
 800d5a8:	bf00      	nop
 800d5aa:	3708      	adds	r7, #8
 800d5ac:	46bd      	mov	sp, r7
 800d5ae:	bd80      	pop	{r7, pc}
 800d5b0:	08019ac4 	.word	0x08019ac4
 800d5b4:	08019af4 	.word	0x08019af4
 800d5b8:	08019b08 	.word	0x08019b08

0800d5bc <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800d5bc:	b580      	push	{r7, lr}
 800d5be:	b082      	sub	sp, #8
 800d5c0:	af00      	add	r7, sp, #0
 800d5c2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	7d1b      	ldrb	r3, [r3, #20]
 800d5c8:	2b01      	cmp	r3, #1
 800d5ca:	d105      	bne.n	800d5d8 <tcp_free_listen+0x1c>
 800d5cc:	4b06      	ldr	r3, [pc, #24]	; (800d5e8 <tcp_free_listen+0x2c>)
 800d5ce:	22df      	movs	r2, #223	; 0xdf
 800d5d0:	4906      	ldr	r1, [pc, #24]	; (800d5ec <tcp_free_listen+0x30>)
 800d5d2:	4807      	ldr	r0, [pc, #28]	; (800d5f0 <tcp_free_listen+0x34>)
 800d5d4:	f009 fc44 	bl	8016e60 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800d5d8:	6879      	ldr	r1, [r7, #4]
 800d5da:	2002      	movs	r0, #2
 800d5dc:	f7fe fe44 	bl	800c268 <memp_free>
}
 800d5e0:	bf00      	nop
 800d5e2:	3708      	adds	r7, #8
 800d5e4:	46bd      	mov	sp, r7
 800d5e6:	bd80      	pop	{r7, pc}
 800d5e8:	08019ac4 	.word	0x08019ac4
 800d5ec:	08019b30 	.word	0x08019b30
 800d5f0:	08019b08 	.word	0x08019b08

0800d5f4 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800d5f4:	b580      	push	{r7, lr}
 800d5f6:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800d5f8:	f000 ffd0 	bl	800e59c <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800d5fc:	4b07      	ldr	r3, [pc, #28]	; (800d61c <tcp_tmr+0x28>)
 800d5fe:	781b      	ldrb	r3, [r3, #0]
 800d600:	3301      	adds	r3, #1
 800d602:	b2da      	uxtb	r2, r3
 800d604:	4b05      	ldr	r3, [pc, #20]	; (800d61c <tcp_tmr+0x28>)
 800d606:	701a      	strb	r2, [r3, #0]
 800d608:	4b04      	ldr	r3, [pc, #16]	; (800d61c <tcp_tmr+0x28>)
 800d60a:	781b      	ldrb	r3, [r3, #0]
 800d60c:	f003 0301 	and.w	r3, r3, #1
 800d610:	2b00      	cmp	r3, #0
 800d612:	d001      	beq.n	800d618 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800d614:	f000 fc84 	bl	800df20 <tcp_slowtmr>
  }
}
 800d618:	bf00      	nop
 800d61a:	bd80      	pop	{r7, pc}
 800d61c:	200047c1 	.word	0x200047c1

0800d620 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800d620:	b580      	push	{r7, lr}
 800d622:	b084      	sub	sp, #16
 800d624:	af00      	add	r7, sp, #0
 800d626:	6078      	str	r0, [r7, #4]
 800d628:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800d62a:	683b      	ldr	r3, [r7, #0]
 800d62c:	2b00      	cmp	r3, #0
 800d62e:	d105      	bne.n	800d63c <tcp_remove_listener+0x1c>
 800d630:	4b0d      	ldr	r3, [pc, #52]	; (800d668 <tcp_remove_listener+0x48>)
 800d632:	22ff      	movs	r2, #255	; 0xff
 800d634:	490d      	ldr	r1, [pc, #52]	; (800d66c <tcp_remove_listener+0x4c>)
 800d636:	480e      	ldr	r0, [pc, #56]	; (800d670 <tcp_remove_listener+0x50>)
 800d638:	f009 fc12 	bl	8016e60 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	60fb      	str	r3, [r7, #12]
 800d640:	e00a      	b.n	800d658 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800d642:	68fb      	ldr	r3, [r7, #12]
 800d644:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d646:	683a      	ldr	r2, [r7, #0]
 800d648:	429a      	cmp	r2, r3
 800d64a:	d102      	bne.n	800d652 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800d64c:	68fb      	ldr	r3, [r7, #12]
 800d64e:	2200      	movs	r2, #0
 800d650:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800d652:	68fb      	ldr	r3, [r7, #12]
 800d654:	68db      	ldr	r3, [r3, #12]
 800d656:	60fb      	str	r3, [r7, #12]
 800d658:	68fb      	ldr	r3, [r7, #12]
 800d65a:	2b00      	cmp	r3, #0
 800d65c:	d1f1      	bne.n	800d642 <tcp_remove_listener+0x22>
    }
  }
}
 800d65e:	bf00      	nop
 800d660:	3710      	adds	r7, #16
 800d662:	46bd      	mov	sp, r7
 800d664:	bd80      	pop	{r7, pc}
 800d666:	bf00      	nop
 800d668:	08019ac4 	.word	0x08019ac4
 800d66c:	08019b4c 	.word	0x08019b4c
 800d670:	08019b08 	.word	0x08019b08

0800d674 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800d674:	b580      	push	{r7, lr}
 800d676:	b084      	sub	sp, #16
 800d678:	af00      	add	r7, sp, #0
 800d67a:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	2b00      	cmp	r3, #0
 800d680:	d106      	bne.n	800d690 <tcp_listen_closed+0x1c>
 800d682:	4b14      	ldr	r3, [pc, #80]	; (800d6d4 <tcp_listen_closed+0x60>)
 800d684:	f240 1211 	movw	r2, #273	; 0x111
 800d688:	4913      	ldr	r1, [pc, #76]	; (800d6d8 <tcp_listen_closed+0x64>)
 800d68a:	4814      	ldr	r0, [pc, #80]	; (800d6dc <tcp_listen_closed+0x68>)
 800d68c:	f009 fbe8 	bl	8016e60 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	7d1b      	ldrb	r3, [r3, #20]
 800d694:	2b01      	cmp	r3, #1
 800d696:	d006      	beq.n	800d6a6 <tcp_listen_closed+0x32>
 800d698:	4b0e      	ldr	r3, [pc, #56]	; (800d6d4 <tcp_listen_closed+0x60>)
 800d69a:	f44f 7289 	mov.w	r2, #274	; 0x112
 800d69e:	4910      	ldr	r1, [pc, #64]	; (800d6e0 <tcp_listen_closed+0x6c>)
 800d6a0:	480e      	ldr	r0, [pc, #56]	; (800d6dc <tcp_listen_closed+0x68>)
 800d6a2:	f009 fbdd 	bl	8016e60 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800d6a6:	2301      	movs	r3, #1
 800d6a8:	60fb      	str	r3, [r7, #12]
 800d6aa:	e00b      	b.n	800d6c4 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800d6ac:	4a0d      	ldr	r2, [pc, #52]	; (800d6e4 <tcp_listen_closed+0x70>)
 800d6ae:	68fb      	ldr	r3, [r7, #12]
 800d6b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d6b4:	681b      	ldr	r3, [r3, #0]
 800d6b6:	6879      	ldr	r1, [r7, #4]
 800d6b8:	4618      	mov	r0, r3
 800d6ba:	f7ff ffb1 	bl	800d620 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800d6be:	68fb      	ldr	r3, [r7, #12]
 800d6c0:	3301      	adds	r3, #1
 800d6c2:	60fb      	str	r3, [r7, #12]
 800d6c4:	68fb      	ldr	r3, [r7, #12]
 800d6c6:	2b03      	cmp	r3, #3
 800d6c8:	d9f0      	bls.n	800d6ac <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800d6ca:	bf00      	nop
 800d6cc:	3710      	adds	r7, #16
 800d6ce:	46bd      	mov	sp, r7
 800d6d0:	bd80      	pop	{r7, pc}
 800d6d2:	bf00      	nop
 800d6d4:	08019ac4 	.word	0x08019ac4
 800d6d8:	08019b74 	.word	0x08019b74
 800d6dc:	08019b08 	.word	0x08019b08
 800d6e0:	08019b80 	.word	0x08019b80
 800d6e4:	0801bb90 	.word	0x0801bb90

0800d6e8 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800d6e8:	b5b0      	push	{r4, r5, r7, lr}
 800d6ea:	b088      	sub	sp, #32
 800d6ec:	af04      	add	r7, sp, #16
 800d6ee:	6078      	str	r0, [r7, #4]
 800d6f0:	460b      	mov	r3, r1
 800d6f2:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	2b00      	cmp	r3, #0
 800d6f8:	d106      	bne.n	800d708 <tcp_close_shutdown+0x20>
 800d6fa:	4b61      	ldr	r3, [pc, #388]	; (800d880 <tcp_close_shutdown+0x198>)
 800d6fc:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800d700:	4960      	ldr	r1, [pc, #384]	; (800d884 <tcp_close_shutdown+0x19c>)
 800d702:	4861      	ldr	r0, [pc, #388]	; (800d888 <tcp_close_shutdown+0x1a0>)
 800d704:	f009 fbac 	bl	8016e60 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800d708:	78fb      	ldrb	r3, [r7, #3]
 800d70a:	2b00      	cmp	r3, #0
 800d70c:	d066      	beq.n	800d7dc <tcp_close_shutdown+0xf4>
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	7d1b      	ldrb	r3, [r3, #20]
 800d712:	2b04      	cmp	r3, #4
 800d714:	d003      	beq.n	800d71e <tcp_close_shutdown+0x36>
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	7d1b      	ldrb	r3, [r3, #20]
 800d71a:	2b07      	cmp	r3, #7
 800d71c:	d15e      	bne.n	800d7dc <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d722:	2b00      	cmp	r3, #0
 800d724:	d104      	bne.n	800d730 <tcp_close_shutdown+0x48>
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d72a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800d72e:	d055      	beq.n	800d7dc <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	8b5b      	ldrh	r3, [r3, #26]
 800d734:	f003 0310 	and.w	r3, r3, #16
 800d738:	2b00      	cmp	r3, #0
 800d73a:	d106      	bne.n	800d74a <tcp_close_shutdown+0x62>
 800d73c:	4b50      	ldr	r3, [pc, #320]	; (800d880 <tcp_close_shutdown+0x198>)
 800d73e:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800d742:	4952      	ldr	r1, [pc, #328]	; (800d88c <tcp_close_shutdown+0x1a4>)
 800d744:	4850      	ldr	r0, [pc, #320]	; (800d888 <tcp_close_shutdown+0x1a0>)
 800d746:	f009 fb8b 	bl	8016e60 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800d752:	687d      	ldr	r5, [r7, #4]
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	3304      	adds	r3, #4
 800d758:	687a      	ldr	r2, [r7, #4]
 800d75a:	8ad2      	ldrh	r2, [r2, #22]
 800d75c:	6879      	ldr	r1, [r7, #4]
 800d75e:	8b09      	ldrh	r1, [r1, #24]
 800d760:	9102      	str	r1, [sp, #8]
 800d762:	9201      	str	r2, [sp, #4]
 800d764:	9300      	str	r3, [sp, #0]
 800d766:	462b      	mov	r3, r5
 800d768:	4622      	mov	r2, r4
 800d76a:	4601      	mov	r1, r0
 800d76c:	6878      	ldr	r0, [r7, #4]
 800d76e:	f005 fcf1 	bl	8013154 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800d772:	6878      	ldr	r0, [r7, #4]
 800d774:	f001 fac0 	bl	800ecf8 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800d778:	4b45      	ldr	r3, [pc, #276]	; (800d890 <tcp_close_shutdown+0x1a8>)
 800d77a:	681b      	ldr	r3, [r3, #0]
 800d77c:	687a      	ldr	r2, [r7, #4]
 800d77e:	429a      	cmp	r2, r3
 800d780:	d105      	bne.n	800d78e <tcp_close_shutdown+0xa6>
 800d782:	4b43      	ldr	r3, [pc, #268]	; (800d890 <tcp_close_shutdown+0x1a8>)
 800d784:	681b      	ldr	r3, [r3, #0]
 800d786:	68db      	ldr	r3, [r3, #12]
 800d788:	4a41      	ldr	r2, [pc, #260]	; (800d890 <tcp_close_shutdown+0x1a8>)
 800d78a:	6013      	str	r3, [r2, #0]
 800d78c:	e013      	b.n	800d7b6 <tcp_close_shutdown+0xce>
 800d78e:	4b40      	ldr	r3, [pc, #256]	; (800d890 <tcp_close_shutdown+0x1a8>)
 800d790:	681b      	ldr	r3, [r3, #0]
 800d792:	60fb      	str	r3, [r7, #12]
 800d794:	e00c      	b.n	800d7b0 <tcp_close_shutdown+0xc8>
 800d796:	68fb      	ldr	r3, [r7, #12]
 800d798:	68db      	ldr	r3, [r3, #12]
 800d79a:	687a      	ldr	r2, [r7, #4]
 800d79c:	429a      	cmp	r2, r3
 800d79e:	d104      	bne.n	800d7aa <tcp_close_shutdown+0xc2>
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	68da      	ldr	r2, [r3, #12]
 800d7a4:	68fb      	ldr	r3, [r7, #12]
 800d7a6:	60da      	str	r2, [r3, #12]
 800d7a8:	e005      	b.n	800d7b6 <tcp_close_shutdown+0xce>
 800d7aa:	68fb      	ldr	r3, [r7, #12]
 800d7ac:	68db      	ldr	r3, [r3, #12]
 800d7ae:	60fb      	str	r3, [r7, #12]
 800d7b0:	68fb      	ldr	r3, [r7, #12]
 800d7b2:	2b00      	cmp	r3, #0
 800d7b4:	d1ef      	bne.n	800d796 <tcp_close_shutdown+0xae>
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	2200      	movs	r2, #0
 800d7ba:	60da      	str	r2, [r3, #12]
 800d7bc:	4b35      	ldr	r3, [pc, #212]	; (800d894 <tcp_close_shutdown+0x1ac>)
 800d7be:	2201      	movs	r2, #1
 800d7c0:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800d7c2:	4b35      	ldr	r3, [pc, #212]	; (800d898 <tcp_close_shutdown+0x1b0>)
 800d7c4:	681b      	ldr	r3, [r3, #0]
 800d7c6:	687a      	ldr	r2, [r7, #4]
 800d7c8:	429a      	cmp	r2, r3
 800d7ca:	d102      	bne.n	800d7d2 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800d7cc:	f003 ff52 	bl	8011674 <tcp_trigger_input_pcb_close>
 800d7d0:	e002      	b.n	800d7d8 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800d7d2:	6878      	ldr	r0, [r7, #4]
 800d7d4:	f7ff fed6 	bl	800d584 <tcp_free>
      }
      return ERR_OK;
 800d7d8:	2300      	movs	r3, #0
 800d7da:	e04d      	b.n	800d878 <tcp_close_shutdown+0x190>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	7d1b      	ldrb	r3, [r3, #20]
 800d7e0:	2b01      	cmp	r3, #1
 800d7e2:	d02d      	beq.n	800d840 <tcp_close_shutdown+0x158>
 800d7e4:	2b02      	cmp	r3, #2
 800d7e6:	d036      	beq.n	800d856 <tcp_close_shutdown+0x16e>
 800d7e8:	2b00      	cmp	r3, #0
 800d7ea:	d13f      	bne.n	800d86c <tcp_close_shutdown+0x184>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	8adb      	ldrh	r3, [r3, #22]
 800d7f0:	2b00      	cmp	r3, #0
 800d7f2:	d021      	beq.n	800d838 <tcp_close_shutdown+0x150>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800d7f4:	4b29      	ldr	r3, [pc, #164]	; (800d89c <tcp_close_shutdown+0x1b4>)
 800d7f6:	681b      	ldr	r3, [r3, #0]
 800d7f8:	687a      	ldr	r2, [r7, #4]
 800d7fa:	429a      	cmp	r2, r3
 800d7fc:	d105      	bne.n	800d80a <tcp_close_shutdown+0x122>
 800d7fe:	4b27      	ldr	r3, [pc, #156]	; (800d89c <tcp_close_shutdown+0x1b4>)
 800d800:	681b      	ldr	r3, [r3, #0]
 800d802:	68db      	ldr	r3, [r3, #12]
 800d804:	4a25      	ldr	r2, [pc, #148]	; (800d89c <tcp_close_shutdown+0x1b4>)
 800d806:	6013      	str	r3, [r2, #0]
 800d808:	e013      	b.n	800d832 <tcp_close_shutdown+0x14a>
 800d80a:	4b24      	ldr	r3, [pc, #144]	; (800d89c <tcp_close_shutdown+0x1b4>)
 800d80c:	681b      	ldr	r3, [r3, #0]
 800d80e:	60bb      	str	r3, [r7, #8]
 800d810:	e00c      	b.n	800d82c <tcp_close_shutdown+0x144>
 800d812:	68bb      	ldr	r3, [r7, #8]
 800d814:	68db      	ldr	r3, [r3, #12]
 800d816:	687a      	ldr	r2, [r7, #4]
 800d818:	429a      	cmp	r2, r3
 800d81a:	d104      	bne.n	800d826 <tcp_close_shutdown+0x13e>
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	68da      	ldr	r2, [r3, #12]
 800d820:	68bb      	ldr	r3, [r7, #8]
 800d822:	60da      	str	r2, [r3, #12]
 800d824:	e005      	b.n	800d832 <tcp_close_shutdown+0x14a>
 800d826:	68bb      	ldr	r3, [r7, #8]
 800d828:	68db      	ldr	r3, [r3, #12]
 800d82a:	60bb      	str	r3, [r7, #8]
 800d82c:	68bb      	ldr	r3, [r7, #8]
 800d82e:	2b00      	cmp	r3, #0
 800d830:	d1ef      	bne.n	800d812 <tcp_close_shutdown+0x12a>
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	2200      	movs	r2, #0
 800d836:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800d838:	6878      	ldr	r0, [r7, #4]
 800d83a:	f7ff fea3 	bl	800d584 <tcp_free>
      break;
 800d83e:	e01a      	b.n	800d876 <tcp_close_shutdown+0x18e>
    case LISTEN:
      tcp_listen_closed(pcb);
 800d840:	6878      	ldr	r0, [r7, #4]
 800d842:	f7ff ff17 	bl	800d674 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800d846:	6879      	ldr	r1, [r7, #4]
 800d848:	4815      	ldr	r0, [pc, #84]	; (800d8a0 <tcp_close_shutdown+0x1b8>)
 800d84a:	f001 faa5 	bl	800ed98 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800d84e:	6878      	ldr	r0, [r7, #4]
 800d850:	f7ff feb4 	bl	800d5bc <tcp_free_listen>
      break;
 800d854:	e00f      	b.n	800d876 <tcp_close_shutdown+0x18e>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800d856:	6879      	ldr	r1, [r7, #4]
 800d858:	480d      	ldr	r0, [pc, #52]	; (800d890 <tcp_close_shutdown+0x1a8>)
 800d85a:	f001 fa9d 	bl	800ed98 <tcp_pcb_remove>
 800d85e:	4b0d      	ldr	r3, [pc, #52]	; (800d894 <tcp_close_shutdown+0x1ac>)
 800d860:	2201      	movs	r2, #1
 800d862:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800d864:	6878      	ldr	r0, [r7, #4]
 800d866:	f7ff fe8d 	bl	800d584 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800d86a:	e004      	b.n	800d876 <tcp_close_shutdown+0x18e>
    default:
      return tcp_close_shutdown_fin(pcb);
 800d86c:	6878      	ldr	r0, [r7, #4]
 800d86e:	f000 f819 	bl	800d8a4 <tcp_close_shutdown_fin>
 800d872:	4603      	mov	r3, r0
 800d874:	e000      	b.n	800d878 <tcp_close_shutdown+0x190>
  }
  return ERR_OK;
 800d876:	2300      	movs	r3, #0
}
 800d878:	4618      	mov	r0, r3
 800d87a:	3710      	adds	r7, #16
 800d87c:	46bd      	mov	sp, r7
 800d87e:	bdb0      	pop	{r4, r5, r7, pc}
 800d880:	08019ac4 	.word	0x08019ac4
 800d884:	08019b98 	.word	0x08019b98
 800d888:	08019b08 	.word	0x08019b08
 800d88c:	08019bb8 	.word	0x08019bb8
 800d890:	2000d3fc 	.word	0x2000d3fc
 800d894:	2000d3f8 	.word	0x2000d3f8
 800d898:	2000d410 	.word	0x2000d410
 800d89c:	2000d408 	.word	0x2000d408
 800d8a0:	2000d404 	.word	0x2000d404

0800d8a4 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800d8a4:	b580      	push	{r7, lr}
 800d8a6:	b084      	sub	sp, #16
 800d8a8:	af00      	add	r7, sp, #0
 800d8aa:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	2b00      	cmp	r3, #0
 800d8b0:	d106      	bne.n	800d8c0 <tcp_close_shutdown_fin+0x1c>
 800d8b2:	4b2c      	ldr	r3, [pc, #176]	; (800d964 <tcp_close_shutdown_fin+0xc0>)
 800d8b4:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800d8b8:	492b      	ldr	r1, [pc, #172]	; (800d968 <tcp_close_shutdown_fin+0xc4>)
 800d8ba:	482c      	ldr	r0, [pc, #176]	; (800d96c <tcp_close_shutdown_fin+0xc8>)
 800d8bc:	f009 fad0 	bl	8016e60 <iprintf>

  switch (pcb->state) {
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	7d1b      	ldrb	r3, [r3, #20]
 800d8c4:	2b04      	cmp	r3, #4
 800d8c6:	d010      	beq.n	800d8ea <tcp_close_shutdown_fin+0x46>
 800d8c8:	2b07      	cmp	r3, #7
 800d8ca:	d01b      	beq.n	800d904 <tcp_close_shutdown_fin+0x60>
 800d8cc:	2b03      	cmp	r3, #3
 800d8ce:	d126      	bne.n	800d91e <tcp_close_shutdown_fin+0x7a>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800d8d0:	6878      	ldr	r0, [r7, #4]
 800d8d2:	f004 fd3b 	bl	801234c <tcp_send_fin>
 800d8d6:	4603      	mov	r3, r0
 800d8d8:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800d8da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d8de:	2b00      	cmp	r3, #0
 800d8e0:	d11f      	bne.n	800d922 <tcp_close_shutdown_fin+0x7e>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	2205      	movs	r2, #5
 800d8e6:	751a      	strb	r2, [r3, #20]
      }
      break;
 800d8e8:	e01b      	b.n	800d922 <tcp_close_shutdown_fin+0x7e>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800d8ea:	6878      	ldr	r0, [r7, #4]
 800d8ec:	f004 fd2e 	bl	801234c <tcp_send_fin>
 800d8f0:	4603      	mov	r3, r0
 800d8f2:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800d8f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d8f8:	2b00      	cmp	r3, #0
 800d8fa:	d114      	bne.n	800d926 <tcp_close_shutdown_fin+0x82>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	2205      	movs	r2, #5
 800d900:	751a      	strb	r2, [r3, #20]
      }
      break;
 800d902:	e010      	b.n	800d926 <tcp_close_shutdown_fin+0x82>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800d904:	6878      	ldr	r0, [r7, #4]
 800d906:	f004 fd21 	bl	801234c <tcp_send_fin>
 800d90a:	4603      	mov	r3, r0
 800d90c:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800d90e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d912:	2b00      	cmp	r3, #0
 800d914:	d109      	bne.n	800d92a <tcp_close_shutdown_fin+0x86>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	2209      	movs	r2, #9
 800d91a:	751a      	strb	r2, [r3, #20]
      }
      break;
 800d91c:	e005      	b.n	800d92a <tcp_close_shutdown_fin+0x86>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800d91e:	2300      	movs	r3, #0
 800d920:	e01c      	b.n	800d95c <tcp_close_shutdown_fin+0xb8>
      break;
 800d922:	bf00      	nop
 800d924:	e002      	b.n	800d92c <tcp_close_shutdown_fin+0x88>
      break;
 800d926:	bf00      	nop
 800d928:	e000      	b.n	800d92c <tcp_close_shutdown_fin+0x88>
      break;
 800d92a:	bf00      	nop
  }

  if (err == ERR_OK) {
 800d92c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d930:	2b00      	cmp	r3, #0
 800d932:	d103      	bne.n	800d93c <tcp_close_shutdown_fin+0x98>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800d934:	6878      	ldr	r0, [r7, #4]
 800d936:	f004 fe47 	bl	80125c8 <tcp_output>
 800d93a:	e00d      	b.n	800d958 <tcp_close_shutdown_fin+0xb4>
  } else if (err == ERR_MEM) {
 800d93c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d940:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d944:	d108      	bne.n	800d958 <tcp_close_shutdown_fin+0xb4>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	8b5b      	ldrh	r3, [r3, #26]
 800d94a:	f043 0308 	orr.w	r3, r3, #8
 800d94e:	b29a      	uxth	r2, r3
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800d954:	2300      	movs	r3, #0
 800d956:	e001      	b.n	800d95c <tcp_close_shutdown_fin+0xb8>
  }
  return err;
 800d958:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d95c:	4618      	mov	r0, r3
 800d95e:	3710      	adds	r7, #16
 800d960:	46bd      	mov	sp, r7
 800d962:	bd80      	pop	{r7, pc}
 800d964:	08019ac4 	.word	0x08019ac4
 800d968:	08019b74 	.word	0x08019b74
 800d96c:	08019b08 	.word	0x08019b08

0800d970 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800d970:	b580      	push	{r7, lr}
 800d972:	b082      	sub	sp, #8
 800d974:	af00      	add	r7, sp, #0
 800d976:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	2b00      	cmp	r3, #0
 800d97c:	d109      	bne.n	800d992 <tcp_close+0x22>
 800d97e:	4b0f      	ldr	r3, [pc, #60]	; (800d9bc <tcp_close+0x4c>)
 800d980:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800d984:	490e      	ldr	r1, [pc, #56]	; (800d9c0 <tcp_close+0x50>)
 800d986:	480f      	ldr	r0, [pc, #60]	; (800d9c4 <tcp_close+0x54>)
 800d988:	f009 fa6a 	bl	8016e60 <iprintf>
 800d98c:	f06f 030f 	mvn.w	r3, #15
 800d990:	e00f      	b.n	800d9b2 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	7d1b      	ldrb	r3, [r3, #20]
 800d996:	2b01      	cmp	r3, #1
 800d998:	d006      	beq.n	800d9a8 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	8b5b      	ldrh	r3, [r3, #26]
 800d99e:	f043 0310 	orr.w	r3, r3, #16
 800d9a2:	b29a      	uxth	r2, r3
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800d9a8:	2101      	movs	r1, #1
 800d9aa:	6878      	ldr	r0, [r7, #4]
 800d9ac:	f7ff fe9c 	bl	800d6e8 <tcp_close_shutdown>
 800d9b0:	4603      	mov	r3, r0
}
 800d9b2:	4618      	mov	r0, r3
 800d9b4:	3708      	adds	r7, #8
 800d9b6:	46bd      	mov	sp, r7
 800d9b8:	bd80      	pop	{r7, pc}
 800d9ba:	bf00      	nop
 800d9bc:	08019ac4 	.word	0x08019ac4
 800d9c0:	08019bd4 	.word	0x08019bd4
 800d9c4:	08019b08 	.word	0x08019b08

0800d9c8 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 800d9c8:	b580      	push	{r7, lr}
 800d9ca:	b084      	sub	sp, #16
 800d9cc:	af00      	add	r7, sp, #0
 800d9ce:	60f8      	str	r0, [r7, #12]
 800d9d0:	60b9      	str	r1, [r7, #8]
 800d9d2:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 800d9d4:	68fb      	ldr	r3, [r7, #12]
 800d9d6:	2b00      	cmp	r3, #0
 800d9d8:	d109      	bne.n	800d9ee <tcp_shutdown+0x26>
 800d9da:	4b25      	ldr	r3, [pc, #148]	; (800da70 <tcp_shutdown+0xa8>)
 800d9dc:	f240 2207 	movw	r2, #519	; 0x207
 800d9e0:	4924      	ldr	r1, [pc, #144]	; (800da74 <tcp_shutdown+0xac>)
 800d9e2:	4825      	ldr	r0, [pc, #148]	; (800da78 <tcp_shutdown+0xb0>)
 800d9e4:	f009 fa3c 	bl	8016e60 <iprintf>
 800d9e8:	f06f 030f 	mvn.w	r3, #15
 800d9ec:	e03c      	b.n	800da68 <tcp_shutdown+0xa0>

  if (pcb->state == LISTEN) {
 800d9ee:	68fb      	ldr	r3, [r7, #12]
 800d9f0:	7d1b      	ldrb	r3, [r3, #20]
 800d9f2:	2b01      	cmp	r3, #1
 800d9f4:	d102      	bne.n	800d9fc <tcp_shutdown+0x34>
    return ERR_CONN;
 800d9f6:	f06f 030a 	mvn.w	r3, #10
 800d9fa:	e035      	b.n	800da68 <tcp_shutdown+0xa0>
  }
  if (shut_rx) {
 800d9fc:	68bb      	ldr	r3, [r7, #8]
 800d9fe:	2b00      	cmp	r3, #0
 800da00:	d01b      	beq.n	800da3a <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800da02:	68fb      	ldr	r3, [r7, #12]
 800da04:	8b5b      	ldrh	r3, [r3, #26]
 800da06:	f043 0310 	orr.w	r3, r3, #16
 800da0a:	b29a      	uxth	r2, r3
 800da0c:	68fb      	ldr	r3, [r7, #12]
 800da0e:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	2b00      	cmp	r3, #0
 800da14:	d005      	beq.n	800da22 <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 800da16:	2101      	movs	r1, #1
 800da18:	68f8      	ldr	r0, [r7, #12]
 800da1a:	f7ff fe65 	bl	800d6e8 <tcp_close_shutdown>
 800da1e:	4603      	mov	r3, r0
 800da20:	e022      	b.n	800da68 <tcp_shutdown+0xa0>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 800da22:	68fb      	ldr	r3, [r7, #12]
 800da24:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800da26:	2b00      	cmp	r3, #0
 800da28:	d007      	beq.n	800da3a <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 800da2a:	68fb      	ldr	r3, [r7, #12]
 800da2c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800da2e:	4618      	mov	r0, r3
 800da30:	f7ff faec 	bl	800d00c <pbuf_free>
      pcb->refused_data = NULL;
 800da34:	68fb      	ldr	r3, [r7, #12]
 800da36:	2200      	movs	r2, #0
 800da38:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }
  if (shut_tx) {
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	2b00      	cmp	r3, #0
 800da3e:	d012      	beq.n	800da66 <tcp_shutdown+0x9e>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 800da40:	68fb      	ldr	r3, [r7, #12]
 800da42:	7d1b      	ldrb	r3, [r3, #20]
 800da44:	2b03      	cmp	r3, #3
 800da46:	db0b      	blt.n	800da60 <tcp_shutdown+0x98>
 800da48:	2b04      	cmp	r3, #4
 800da4a:	dd01      	ble.n	800da50 <tcp_shutdown+0x88>
 800da4c:	2b07      	cmp	r3, #7
 800da4e:	d107      	bne.n	800da60 <tcp_shutdown+0x98>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 800da50:	68bb      	ldr	r3, [r7, #8]
 800da52:	b2db      	uxtb	r3, r3
 800da54:	4619      	mov	r1, r3
 800da56:	68f8      	ldr	r0, [r7, #12]
 800da58:	f7ff fe46 	bl	800d6e8 <tcp_close_shutdown>
 800da5c:	4603      	mov	r3, r0
 800da5e:	e003      	b.n	800da68 <tcp_shutdown+0xa0>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 800da60:	f06f 030a 	mvn.w	r3, #10
 800da64:	e000      	b.n	800da68 <tcp_shutdown+0xa0>
    }
  }
  return ERR_OK;
 800da66:	2300      	movs	r3, #0
}
 800da68:	4618      	mov	r0, r3
 800da6a:	3710      	adds	r7, #16
 800da6c:	46bd      	mov	sp, r7
 800da6e:	bd80      	pop	{r7, pc}
 800da70:	08019ac4 	.word	0x08019ac4
 800da74:	08019bec 	.word	0x08019bec
 800da78:	08019b08 	.word	0x08019b08

0800da7c <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800da7c:	b580      	push	{r7, lr}
 800da7e:	b08e      	sub	sp, #56	; 0x38
 800da80:	af04      	add	r7, sp, #16
 800da82:	6078      	str	r0, [r7, #4]
 800da84:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	2b00      	cmp	r3, #0
 800da8a:	d107      	bne.n	800da9c <tcp_abandon+0x20>
 800da8c:	4b52      	ldr	r3, [pc, #328]	; (800dbd8 <tcp_abandon+0x15c>)
 800da8e:	f240 223d 	movw	r2, #573	; 0x23d
 800da92:	4952      	ldr	r1, [pc, #328]	; (800dbdc <tcp_abandon+0x160>)
 800da94:	4852      	ldr	r0, [pc, #328]	; (800dbe0 <tcp_abandon+0x164>)
 800da96:	f009 f9e3 	bl	8016e60 <iprintf>
 800da9a:	e099      	b.n	800dbd0 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	7d1b      	ldrb	r3, [r3, #20]
 800daa0:	2b01      	cmp	r3, #1
 800daa2:	d106      	bne.n	800dab2 <tcp_abandon+0x36>
 800daa4:	4b4c      	ldr	r3, [pc, #304]	; (800dbd8 <tcp_abandon+0x15c>)
 800daa6:	f240 2241 	movw	r2, #577	; 0x241
 800daaa:	494e      	ldr	r1, [pc, #312]	; (800dbe4 <tcp_abandon+0x168>)
 800daac:	484c      	ldr	r0, [pc, #304]	; (800dbe0 <tcp_abandon+0x164>)
 800daae:	f009 f9d7 	bl	8016e60 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	7d1b      	ldrb	r3, [r3, #20]
 800dab6:	2b0a      	cmp	r3, #10
 800dab8:	d107      	bne.n	800daca <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800daba:	6879      	ldr	r1, [r7, #4]
 800dabc:	484a      	ldr	r0, [pc, #296]	; (800dbe8 <tcp_abandon+0x16c>)
 800dabe:	f001 f96b 	bl	800ed98 <tcp_pcb_remove>
    tcp_free(pcb);
 800dac2:	6878      	ldr	r0, [r7, #4]
 800dac4:	f7ff fd5e 	bl	800d584 <tcp_free>
 800dac8:	e082      	b.n	800dbd0 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800daca:	2300      	movs	r3, #0
 800dacc:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800dace:	2300      	movs	r3, #0
 800dad0:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dad6:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dadc:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dae4:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	691b      	ldr	r3, [r3, #16]
 800daea:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	7d1b      	ldrb	r3, [r3, #20]
 800daf0:	2b00      	cmp	r3, #0
 800daf2:	d126      	bne.n	800db42 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	8adb      	ldrh	r3, [r3, #22]
 800daf8:	2b00      	cmp	r3, #0
 800dafa:	d02e      	beq.n	800db5a <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800dafc:	4b3b      	ldr	r3, [pc, #236]	; (800dbec <tcp_abandon+0x170>)
 800dafe:	681b      	ldr	r3, [r3, #0]
 800db00:	687a      	ldr	r2, [r7, #4]
 800db02:	429a      	cmp	r2, r3
 800db04:	d105      	bne.n	800db12 <tcp_abandon+0x96>
 800db06:	4b39      	ldr	r3, [pc, #228]	; (800dbec <tcp_abandon+0x170>)
 800db08:	681b      	ldr	r3, [r3, #0]
 800db0a:	68db      	ldr	r3, [r3, #12]
 800db0c:	4a37      	ldr	r2, [pc, #220]	; (800dbec <tcp_abandon+0x170>)
 800db0e:	6013      	str	r3, [r2, #0]
 800db10:	e013      	b.n	800db3a <tcp_abandon+0xbe>
 800db12:	4b36      	ldr	r3, [pc, #216]	; (800dbec <tcp_abandon+0x170>)
 800db14:	681b      	ldr	r3, [r3, #0]
 800db16:	61fb      	str	r3, [r7, #28]
 800db18:	e00c      	b.n	800db34 <tcp_abandon+0xb8>
 800db1a:	69fb      	ldr	r3, [r7, #28]
 800db1c:	68db      	ldr	r3, [r3, #12]
 800db1e:	687a      	ldr	r2, [r7, #4]
 800db20:	429a      	cmp	r2, r3
 800db22:	d104      	bne.n	800db2e <tcp_abandon+0xb2>
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	68da      	ldr	r2, [r3, #12]
 800db28:	69fb      	ldr	r3, [r7, #28]
 800db2a:	60da      	str	r2, [r3, #12]
 800db2c:	e005      	b.n	800db3a <tcp_abandon+0xbe>
 800db2e:	69fb      	ldr	r3, [r7, #28]
 800db30:	68db      	ldr	r3, [r3, #12]
 800db32:	61fb      	str	r3, [r7, #28]
 800db34:	69fb      	ldr	r3, [r7, #28]
 800db36:	2b00      	cmp	r3, #0
 800db38:	d1ef      	bne.n	800db1a <tcp_abandon+0x9e>
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	2200      	movs	r2, #0
 800db3e:	60da      	str	r2, [r3, #12]
 800db40:	e00b      	b.n	800db5a <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800db42:	683b      	ldr	r3, [r7, #0]
 800db44:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	8adb      	ldrh	r3, [r3, #22]
 800db4a:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800db4c:	6879      	ldr	r1, [r7, #4]
 800db4e:	4828      	ldr	r0, [pc, #160]	; (800dbf0 <tcp_abandon+0x174>)
 800db50:	f001 f922 	bl	800ed98 <tcp_pcb_remove>
 800db54:	4b27      	ldr	r3, [pc, #156]	; (800dbf4 <tcp_abandon+0x178>)
 800db56:	2201      	movs	r2, #1
 800db58:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800db5e:	2b00      	cmp	r3, #0
 800db60:	d004      	beq.n	800db6c <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800db66:	4618      	mov	r0, r3
 800db68:	f000 fdf8 	bl	800e75c <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800db70:	2b00      	cmp	r3, #0
 800db72:	d004      	beq.n	800db7e <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800db78:	4618      	mov	r0, r3
 800db7a:	f000 fdef 	bl	800e75c <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800db82:	2b00      	cmp	r3, #0
 800db84:	d004      	beq.n	800db90 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800db8a:	4618      	mov	r0, r3
 800db8c:	f000 fde6 	bl	800e75c <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800db90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db92:	2b00      	cmp	r3, #0
 800db94:	d00e      	beq.n	800dbb4 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800db96:	6879      	ldr	r1, [r7, #4]
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	3304      	adds	r3, #4
 800db9c:	687a      	ldr	r2, [r7, #4]
 800db9e:	8b12      	ldrh	r2, [r2, #24]
 800dba0:	9202      	str	r2, [sp, #8]
 800dba2:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800dba4:	9201      	str	r2, [sp, #4]
 800dba6:	9300      	str	r3, [sp, #0]
 800dba8:	460b      	mov	r3, r1
 800dbaa:	697a      	ldr	r2, [r7, #20]
 800dbac:	69b9      	ldr	r1, [r7, #24]
 800dbae:	6878      	ldr	r0, [r7, #4]
 800dbb0:	f005 fad0 	bl	8013154 <tcp_rst>
    }
    last_state = pcb->state;
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	7d1b      	ldrb	r3, [r3, #20]
 800dbb8:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800dbba:	6878      	ldr	r0, [r7, #4]
 800dbbc:	f7ff fce2 	bl	800d584 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800dbc0:	693b      	ldr	r3, [r7, #16]
 800dbc2:	2b00      	cmp	r3, #0
 800dbc4:	d004      	beq.n	800dbd0 <tcp_abandon+0x154>
 800dbc6:	693b      	ldr	r3, [r7, #16]
 800dbc8:	f06f 010c 	mvn.w	r1, #12
 800dbcc:	68f8      	ldr	r0, [r7, #12]
 800dbce:	4798      	blx	r3
  }
}
 800dbd0:	3728      	adds	r7, #40	; 0x28
 800dbd2:	46bd      	mov	sp, r7
 800dbd4:	bd80      	pop	{r7, pc}
 800dbd6:	bf00      	nop
 800dbd8:	08019ac4 	.word	0x08019ac4
 800dbdc:	08019c08 	.word	0x08019c08
 800dbe0:	08019b08 	.word	0x08019b08
 800dbe4:	08019c24 	.word	0x08019c24
 800dbe8:	2000d40c 	.word	0x2000d40c
 800dbec:	2000d408 	.word	0x2000d408
 800dbf0:	2000d3fc 	.word	0x2000d3fc
 800dbf4:	2000d3f8 	.word	0x2000d3f8

0800dbf8 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800dbf8:	b580      	push	{r7, lr}
 800dbfa:	b082      	sub	sp, #8
 800dbfc:	af00      	add	r7, sp, #0
 800dbfe:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800dc00:	2101      	movs	r1, #1
 800dc02:	6878      	ldr	r0, [r7, #4]
 800dc04:	f7ff ff3a 	bl	800da7c <tcp_abandon>
}
 800dc08:	bf00      	nop
 800dc0a:	3708      	adds	r7, #8
 800dc0c:	46bd      	mov	sp, r7
 800dc0e:	bd80      	pop	{r7, pc}

0800dc10 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800dc10:	b580      	push	{r7, lr}
 800dc12:	b088      	sub	sp, #32
 800dc14:	af00      	add	r7, sp, #0
 800dc16:	60f8      	str	r0, [r7, #12]
 800dc18:	60b9      	str	r1, [r7, #8]
 800dc1a:	4613      	mov	r3, r2
 800dc1c:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 800dc1e:	2304      	movs	r3, #4
 800dc20:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800dc22:	68bb      	ldr	r3, [r7, #8]
 800dc24:	2b00      	cmp	r3, #0
 800dc26:	d101      	bne.n	800dc2c <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 800dc28:	4b3e      	ldr	r3, [pc, #248]	; (800dd24 <tcp_bind+0x114>)
 800dc2a:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800dc2c:	68fb      	ldr	r3, [r7, #12]
 800dc2e:	2b00      	cmp	r3, #0
 800dc30:	d109      	bne.n	800dc46 <tcp_bind+0x36>
 800dc32:	4b3d      	ldr	r3, [pc, #244]	; (800dd28 <tcp_bind+0x118>)
 800dc34:	f240 22a9 	movw	r2, #681	; 0x2a9
 800dc38:	493c      	ldr	r1, [pc, #240]	; (800dd2c <tcp_bind+0x11c>)
 800dc3a:	483d      	ldr	r0, [pc, #244]	; (800dd30 <tcp_bind+0x120>)
 800dc3c:	f009 f910 	bl	8016e60 <iprintf>
 800dc40:	f06f 030f 	mvn.w	r3, #15
 800dc44:	e06a      	b.n	800dd1c <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800dc46:	68fb      	ldr	r3, [r7, #12]
 800dc48:	7d1b      	ldrb	r3, [r3, #20]
 800dc4a:	2b00      	cmp	r3, #0
 800dc4c:	d009      	beq.n	800dc62 <tcp_bind+0x52>
 800dc4e:	4b36      	ldr	r3, [pc, #216]	; (800dd28 <tcp_bind+0x118>)
 800dc50:	f240 22ab 	movw	r2, #683	; 0x2ab
 800dc54:	4937      	ldr	r1, [pc, #220]	; (800dd34 <tcp_bind+0x124>)
 800dc56:	4836      	ldr	r0, [pc, #216]	; (800dd30 <tcp_bind+0x120>)
 800dc58:	f009 f902 	bl	8016e60 <iprintf>
 800dc5c:	f06f 0305 	mvn.w	r3, #5
 800dc60:	e05c      	b.n	800dd1c <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 800dc62:	88fb      	ldrh	r3, [r7, #6]
 800dc64:	2b00      	cmp	r3, #0
 800dc66:	d109      	bne.n	800dc7c <tcp_bind+0x6c>
    port = tcp_new_port();
 800dc68:	f000 f914 	bl	800de94 <tcp_new_port>
 800dc6c:	4603      	mov	r3, r0
 800dc6e:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800dc70:	88fb      	ldrh	r3, [r7, #6]
 800dc72:	2b00      	cmp	r3, #0
 800dc74:	d135      	bne.n	800dce2 <tcp_bind+0xd2>
      return ERR_BUF;
 800dc76:	f06f 0301 	mvn.w	r3, #1
 800dc7a:	e04f      	b.n	800dd1c <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 800dc7c:	2300      	movs	r3, #0
 800dc7e:	61fb      	str	r3, [r7, #28]
 800dc80:	e02b      	b.n	800dcda <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800dc82:	4a2d      	ldr	r2, [pc, #180]	; (800dd38 <tcp_bind+0x128>)
 800dc84:	69fb      	ldr	r3, [r7, #28]
 800dc86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dc8a:	681b      	ldr	r3, [r3, #0]
 800dc8c:	61bb      	str	r3, [r7, #24]
 800dc8e:	e01e      	b.n	800dcce <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 800dc90:	69bb      	ldr	r3, [r7, #24]
 800dc92:	8adb      	ldrh	r3, [r3, #22]
 800dc94:	88fa      	ldrh	r2, [r7, #6]
 800dc96:	429a      	cmp	r2, r3
 800dc98:	d116      	bne.n	800dcc8 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 800dc9a:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800dc9c:	2b00      	cmp	r3, #0
 800dc9e:	d010      	beq.n	800dcc2 <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 800dca0:	69bb      	ldr	r3, [r7, #24]
 800dca2:	681b      	ldr	r3, [r3, #0]
 800dca4:	2b00      	cmp	r3, #0
 800dca6:	d00c      	beq.n	800dcc2 <tcp_bind+0xb2>
 800dca8:	68bb      	ldr	r3, [r7, #8]
 800dcaa:	2b00      	cmp	r3, #0
 800dcac:	d009      	beq.n	800dcc2 <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 800dcae:	68bb      	ldr	r3, [r7, #8]
 800dcb0:	681b      	ldr	r3, [r3, #0]
 800dcb2:	2b00      	cmp	r3, #0
 800dcb4:	d005      	beq.n	800dcc2 <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 800dcb6:	69bb      	ldr	r3, [r7, #24]
 800dcb8:	681a      	ldr	r2, [r3, #0]
 800dcba:	68bb      	ldr	r3, [r7, #8]
 800dcbc:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800dcbe:	429a      	cmp	r2, r3
 800dcc0:	d102      	bne.n	800dcc8 <tcp_bind+0xb8>
              return ERR_USE;
 800dcc2:	f06f 0307 	mvn.w	r3, #7
 800dcc6:	e029      	b.n	800dd1c <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800dcc8:	69bb      	ldr	r3, [r7, #24]
 800dcca:	68db      	ldr	r3, [r3, #12]
 800dccc:	61bb      	str	r3, [r7, #24]
 800dcce:	69bb      	ldr	r3, [r7, #24]
 800dcd0:	2b00      	cmp	r3, #0
 800dcd2:	d1dd      	bne.n	800dc90 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 800dcd4:	69fb      	ldr	r3, [r7, #28]
 800dcd6:	3301      	adds	r3, #1
 800dcd8:	61fb      	str	r3, [r7, #28]
 800dcda:	69fa      	ldr	r2, [r7, #28]
 800dcdc:	697b      	ldr	r3, [r7, #20]
 800dcde:	429a      	cmp	r2, r3
 800dce0:	dbcf      	blt.n	800dc82 <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 800dce2:	68bb      	ldr	r3, [r7, #8]
 800dce4:	2b00      	cmp	r3, #0
 800dce6:	d00c      	beq.n	800dd02 <tcp_bind+0xf2>
 800dce8:	68bb      	ldr	r3, [r7, #8]
 800dcea:	681b      	ldr	r3, [r3, #0]
 800dcec:	2b00      	cmp	r3, #0
 800dcee:	d008      	beq.n	800dd02 <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 800dcf0:	68bb      	ldr	r3, [r7, #8]
 800dcf2:	2b00      	cmp	r3, #0
 800dcf4:	d002      	beq.n	800dcfc <tcp_bind+0xec>
 800dcf6:	68bb      	ldr	r3, [r7, #8]
 800dcf8:	681b      	ldr	r3, [r3, #0]
 800dcfa:	e000      	b.n	800dcfe <tcp_bind+0xee>
 800dcfc:	2300      	movs	r3, #0
 800dcfe:	68fa      	ldr	r2, [r7, #12]
 800dd00:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 800dd02:	68fb      	ldr	r3, [r7, #12]
 800dd04:	88fa      	ldrh	r2, [r7, #6]
 800dd06:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800dd08:	4b0c      	ldr	r3, [pc, #48]	; (800dd3c <tcp_bind+0x12c>)
 800dd0a:	681a      	ldr	r2, [r3, #0]
 800dd0c:	68fb      	ldr	r3, [r7, #12]
 800dd0e:	60da      	str	r2, [r3, #12]
 800dd10:	4a0a      	ldr	r2, [pc, #40]	; (800dd3c <tcp_bind+0x12c>)
 800dd12:	68fb      	ldr	r3, [r7, #12]
 800dd14:	6013      	str	r3, [r2, #0]
 800dd16:	f005 fbdf 	bl	80134d8 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 800dd1a:	2300      	movs	r3, #0
}
 800dd1c:	4618      	mov	r0, r3
 800dd1e:	3720      	adds	r7, #32
 800dd20:	46bd      	mov	sp, r7
 800dd22:	bd80      	pop	{r7, pc}
 800dd24:	0801bbb8 	.word	0x0801bbb8
 800dd28:	08019ac4 	.word	0x08019ac4
 800dd2c:	08019c58 	.word	0x08019c58
 800dd30:	08019b08 	.word	0x08019b08
 800dd34:	08019c70 	.word	0x08019c70
 800dd38:	0801bb90 	.word	0x0801bb90
 800dd3c:	2000d408 	.word	0x2000d408

0800dd40 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800dd40:	b580      	push	{r7, lr}
 800dd42:	b084      	sub	sp, #16
 800dd44:	af00      	add	r7, sp, #0
 800dd46:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	2b00      	cmp	r3, #0
 800dd4c:	d106      	bne.n	800dd5c <tcp_update_rcv_ann_wnd+0x1c>
 800dd4e:	4b25      	ldr	r3, [pc, #148]	; (800dde4 <tcp_update_rcv_ann_wnd+0xa4>)
 800dd50:	f240 32a6 	movw	r2, #934	; 0x3a6
 800dd54:	4924      	ldr	r1, [pc, #144]	; (800dde8 <tcp_update_rcv_ann_wnd+0xa8>)
 800dd56:	4825      	ldr	r0, [pc, #148]	; (800ddec <tcp_update_rcv_ann_wnd+0xac>)
 800dd58:	f009 f882 	bl	8016e60 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd60:	687a      	ldr	r2, [r7, #4]
 800dd62:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800dd64:	4413      	add	r3, r2
 800dd66:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd6c:	687a      	ldr	r2, [r7, #4]
 800dd6e:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800dd70:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800dd74:	bf28      	it	cs
 800dd76:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800dd7a:	b292      	uxth	r2, r2
 800dd7c:	4413      	add	r3, r2
 800dd7e:	68fa      	ldr	r2, [r7, #12]
 800dd80:	1ad3      	subs	r3, r2, r3
 800dd82:	2b00      	cmp	r3, #0
 800dd84:	db08      	blt.n	800dd98 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd92:	68fa      	ldr	r2, [r7, #12]
 800dd94:	1ad3      	subs	r3, r2, r3
 800dd96:	e020      	b.n	800ddda <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dda0:	1ad3      	subs	r3, r2, r3
 800dda2:	2b00      	cmp	r3, #0
 800dda4:	dd03      	ble.n	800ddae <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	2200      	movs	r2, #0
 800ddaa:	855a      	strh	r2, [r3, #42]	; 0x2a
 800ddac:	e014      	b.n	800ddd8 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ddb6:	1ad3      	subs	r3, r2, r3
 800ddb8:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800ddba:	68bb      	ldr	r3, [r7, #8]
 800ddbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ddc0:	d306      	bcc.n	800ddd0 <tcp_update_rcv_ann_wnd+0x90>
 800ddc2:	4b08      	ldr	r3, [pc, #32]	; (800dde4 <tcp_update_rcv_ann_wnd+0xa4>)
 800ddc4:	f240 32b6 	movw	r2, #950	; 0x3b6
 800ddc8:	4909      	ldr	r1, [pc, #36]	; (800ddf0 <tcp_update_rcv_ann_wnd+0xb0>)
 800ddca:	4808      	ldr	r0, [pc, #32]	; (800ddec <tcp_update_rcv_ann_wnd+0xac>)
 800ddcc:	f009 f848 	bl	8016e60 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800ddd0:	68bb      	ldr	r3, [r7, #8]
 800ddd2:	b29a      	uxth	r2, r3
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800ddd8:	2300      	movs	r3, #0
  }
}
 800ddda:	4618      	mov	r0, r3
 800dddc:	3710      	adds	r7, #16
 800ddde:	46bd      	mov	sp, r7
 800dde0:	bd80      	pop	{r7, pc}
 800dde2:	bf00      	nop
 800dde4:	08019ac4 	.word	0x08019ac4
 800dde8:	08019d20 	.word	0x08019d20
 800ddec:	08019b08 	.word	0x08019b08
 800ddf0:	08019d44 	.word	0x08019d44

0800ddf4 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800ddf4:	b580      	push	{r7, lr}
 800ddf6:	b084      	sub	sp, #16
 800ddf8:	af00      	add	r7, sp, #0
 800ddfa:	6078      	str	r0, [r7, #4]
 800ddfc:	460b      	mov	r3, r1
 800ddfe:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	2b00      	cmp	r3, #0
 800de04:	d107      	bne.n	800de16 <tcp_recved+0x22>
 800de06:	4b1f      	ldr	r3, [pc, #124]	; (800de84 <tcp_recved+0x90>)
 800de08:	f240 32cf 	movw	r2, #975	; 0x3cf
 800de0c:	491e      	ldr	r1, [pc, #120]	; (800de88 <tcp_recved+0x94>)
 800de0e:	481f      	ldr	r0, [pc, #124]	; (800de8c <tcp_recved+0x98>)
 800de10:	f009 f826 	bl	8016e60 <iprintf>
 800de14:	e032      	b.n	800de7c <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	7d1b      	ldrb	r3, [r3, #20]
 800de1a:	2b01      	cmp	r3, #1
 800de1c:	d106      	bne.n	800de2c <tcp_recved+0x38>
 800de1e:	4b19      	ldr	r3, [pc, #100]	; (800de84 <tcp_recved+0x90>)
 800de20:	f240 32d3 	movw	r2, #979	; 0x3d3
 800de24:	491a      	ldr	r1, [pc, #104]	; (800de90 <tcp_recved+0x9c>)
 800de26:	4819      	ldr	r0, [pc, #100]	; (800de8c <tcp_recved+0x98>)
 800de28:	f009 f81a 	bl	8016e60 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800de30:	887b      	ldrh	r3, [r7, #2]
 800de32:	4413      	add	r3, r2
 800de34:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800de36:	89fb      	ldrh	r3, [r7, #14]
 800de38:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800de3c:	d804      	bhi.n	800de48 <tcp_recved+0x54>
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800de42:	89fa      	ldrh	r2, [r7, #14]
 800de44:	429a      	cmp	r2, r3
 800de46:	d204      	bcs.n	800de52 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800de4e:	851a      	strh	r2, [r3, #40]	; 0x28
 800de50:	e002      	b.n	800de58 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	89fa      	ldrh	r2, [r7, #14]
 800de56:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800de58:	6878      	ldr	r0, [r7, #4]
 800de5a:	f7ff ff71 	bl	800dd40 <tcp_update_rcv_ann_wnd>
 800de5e:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800de60:	68bb      	ldr	r3, [r7, #8]
 800de62:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800de66:	d309      	bcc.n	800de7c <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	8b5b      	ldrh	r3, [r3, #26]
 800de6c:	f043 0302 	orr.w	r3, r3, #2
 800de70:	b29a      	uxth	r2, r3
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800de76:	6878      	ldr	r0, [r7, #4]
 800de78:	f004 fba6 	bl	80125c8 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800de7c:	3710      	adds	r7, #16
 800de7e:	46bd      	mov	sp, r7
 800de80:	bd80      	pop	{r7, pc}
 800de82:	bf00      	nop
 800de84:	08019ac4 	.word	0x08019ac4
 800de88:	08019d60 	.word	0x08019d60
 800de8c:	08019b08 	.word	0x08019b08
 800de90:	08019d78 	.word	0x08019d78

0800de94 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800de94:	b480      	push	{r7}
 800de96:	b083      	sub	sp, #12
 800de98:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800de9a:	2300      	movs	r3, #0
 800de9c:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800de9e:	4b1e      	ldr	r3, [pc, #120]	; (800df18 <tcp_new_port+0x84>)
 800dea0:	881b      	ldrh	r3, [r3, #0]
 800dea2:	3301      	adds	r3, #1
 800dea4:	b29a      	uxth	r2, r3
 800dea6:	4b1c      	ldr	r3, [pc, #112]	; (800df18 <tcp_new_port+0x84>)
 800dea8:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800deaa:	4b1b      	ldr	r3, [pc, #108]	; (800df18 <tcp_new_port+0x84>)
 800deac:	881b      	ldrh	r3, [r3, #0]
 800deae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800deb2:	4293      	cmp	r3, r2
 800deb4:	d103      	bne.n	800debe <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800deb6:	4b18      	ldr	r3, [pc, #96]	; (800df18 <tcp_new_port+0x84>)
 800deb8:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800debc:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800debe:	2300      	movs	r3, #0
 800dec0:	71fb      	strb	r3, [r7, #7]
 800dec2:	e01e      	b.n	800df02 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800dec4:	79fb      	ldrb	r3, [r7, #7]
 800dec6:	4a15      	ldr	r2, [pc, #84]	; (800df1c <tcp_new_port+0x88>)
 800dec8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800decc:	681b      	ldr	r3, [r3, #0]
 800dece:	603b      	str	r3, [r7, #0]
 800ded0:	e011      	b.n	800def6 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 800ded2:	683b      	ldr	r3, [r7, #0]
 800ded4:	8ada      	ldrh	r2, [r3, #22]
 800ded6:	4b10      	ldr	r3, [pc, #64]	; (800df18 <tcp_new_port+0x84>)
 800ded8:	881b      	ldrh	r3, [r3, #0]
 800deda:	429a      	cmp	r2, r3
 800dedc:	d108      	bne.n	800def0 <tcp_new_port+0x5c>
        n++;
 800dede:	88bb      	ldrh	r3, [r7, #4]
 800dee0:	3301      	adds	r3, #1
 800dee2:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800dee4:	88bb      	ldrh	r3, [r7, #4]
 800dee6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800deea:	d3d8      	bcc.n	800de9e <tcp_new_port+0xa>
          return 0;
 800deec:	2300      	movs	r3, #0
 800deee:	e00d      	b.n	800df0c <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800def0:	683b      	ldr	r3, [r7, #0]
 800def2:	68db      	ldr	r3, [r3, #12]
 800def4:	603b      	str	r3, [r7, #0]
 800def6:	683b      	ldr	r3, [r7, #0]
 800def8:	2b00      	cmp	r3, #0
 800defa:	d1ea      	bne.n	800ded2 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800defc:	79fb      	ldrb	r3, [r7, #7]
 800defe:	3301      	adds	r3, #1
 800df00:	71fb      	strb	r3, [r7, #7]
 800df02:	79fb      	ldrb	r3, [r7, #7]
 800df04:	2b03      	cmp	r3, #3
 800df06:	d9dd      	bls.n	800dec4 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800df08:	4b03      	ldr	r3, [pc, #12]	; (800df18 <tcp_new_port+0x84>)
 800df0a:	881b      	ldrh	r3, [r3, #0]
}
 800df0c:	4618      	mov	r0, r3
 800df0e:	370c      	adds	r7, #12
 800df10:	46bd      	mov	sp, r7
 800df12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df16:	4770      	bx	lr
 800df18:	20000010 	.word	0x20000010
 800df1c:	0801bb90 	.word	0x0801bb90

0800df20 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800df20:	b5b0      	push	{r4, r5, r7, lr}
 800df22:	b090      	sub	sp, #64	; 0x40
 800df24:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800df26:	2300      	movs	r3, #0
 800df28:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800df2c:	4b94      	ldr	r3, [pc, #592]	; (800e180 <tcp_slowtmr+0x260>)
 800df2e:	681b      	ldr	r3, [r3, #0]
 800df30:	3301      	adds	r3, #1
 800df32:	4a93      	ldr	r2, [pc, #588]	; (800e180 <tcp_slowtmr+0x260>)
 800df34:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800df36:	4b93      	ldr	r3, [pc, #588]	; (800e184 <tcp_slowtmr+0x264>)
 800df38:	781b      	ldrb	r3, [r3, #0]
 800df3a:	3301      	adds	r3, #1
 800df3c:	b2da      	uxtb	r2, r3
 800df3e:	4b91      	ldr	r3, [pc, #580]	; (800e184 <tcp_slowtmr+0x264>)
 800df40:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800df42:	2300      	movs	r3, #0
 800df44:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800df46:	4b90      	ldr	r3, [pc, #576]	; (800e188 <tcp_slowtmr+0x268>)
 800df48:	681b      	ldr	r3, [r3, #0]
 800df4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800df4c:	e29d      	b.n	800e48a <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800df4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df50:	7d1b      	ldrb	r3, [r3, #20]
 800df52:	2b00      	cmp	r3, #0
 800df54:	d106      	bne.n	800df64 <tcp_slowtmr+0x44>
 800df56:	4b8d      	ldr	r3, [pc, #564]	; (800e18c <tcp_slowtmr+0x26c>)
 800df58:	f240 42be 	movw	r2, #1214	; 0x4be
 800df5c:	498c      	ldr	r1, [pc, #560]	; (800e190 <tcp_slowtmr+0x270>)
 800df5e:	488d      	ldr	r0, [pc, #564]	; (800e194 <tcp_slowtmr+0x274>)
 800df60:	f008 ff7e 	bl	8016e60 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800df64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df66:	7d1b      	ldrb	r3, [r3, #20]
 800df68:	2b01      	cmp	r3, #1
 800df6a:	d106      	bne.n	800df7a <tcp_slowtmr+0x5a>
 800df6c:	4b87      	ldr	r3, [pc, #540]	; (800e18c <tcp_slowtmr+0x26c>)
 800df6e:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800df72:	4989      	ldr	r1, [pc, #548]	; (800e198 <tcp_slowtmr+0x278>)
 800df74:	4887      	ldr	r0, [pc, #540]	; (800e194 <tcp_slowtmr+0x274>)
 800df76:	f008 ff73 	bl	8016e60 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800df7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df7c:	7d1b      	ldrb	r3, [r3, #20]
 800df7e:	2b0a      	cmp	r3, #10
 800df80:	d106      	bne.n	800df90 <tcp_slowtmr+0x70>
 800df82:	4b82      	ldr	r3, [pc, #520]	; (800e18c <tcp_slowtmr+0x26c>)
 800df84:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800df88:	4984      	ldr	r1, [pc, #528]	; (800e19c <tcp_slowtmr+0x27c>)
 800df8a:	4882      	ldr	r0, [pc, #520]	; (800e194 <tcp_slowtmr+0x274>)
 800df8c:	f008 ff68 	bl	8016e60 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800df90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df92:	7f9a      	ldrb	r2, [r3, #30]
 800df94:	4b7b      	ldr	r3, [pc, #492]	; (800e184 <tcp_slowtmr+0x264>)
 800df96:	781b      	ldrb	r3, [r3, #0]
 800df98:	429a      	cmp	r2, r3
 800df9a:	d105      	bne.n	800dfa8 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800df9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df9e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800dfa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfa2:	68db      	ldr	r3, [r3, #12]
 800dfa4:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800dfa6:	e270      	b.n	800e48a <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 800dfa8:	4b76      	ldr	r3, [pc, #472]	; (800e184 <tcp_slowtmr+0x264>)
 800dfaa:	781a      	ldrb	r2, [r3, #0]
 800dfac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfae:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800dfb0:	2300      	movs	r3, #0
 800dfb2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800dfb6:	2300      	movs	r3, #0
 800dfb8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800dfbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfbe:	7d1b      	ldrb	r3, [r3, #20]
 800dfc0:	2b02      	cmp	r3, #2
 800dfc2:	d10a      	bne.n	800dfda <tcp_slowtmr+0xba>
 800dfc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfc6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800dfca:	2b05      	cmp	r3, #5
 800dfcc:	d905      	bls.n	800dfda <tcp_slowtmr+0xba>
      ++pcb_remove;
 800dfce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dfd2:	3301      	adds	r3, #1
 800dfd4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800dfd8:	e11e      	b.n	800e218 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800dfda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfdc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800dfe0:	2b0b      	cmp	r3, #11
 800dfe2:	d905      	bls.n	800dff0 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800dfe4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dfe8:	3301      	adds	r3, #1
 800dfea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800dfee:	e113      	b.n	800e218 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800dff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dff2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800dff6:	2b00      	cmp	r3, #0
 800dff8:	d075      	beq.n	800e0e6 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800dffa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dffc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dffe:	2b00      	cmp	r3, #0
 800e000:	d006      	beq.n	800e010 <tcp_slowtmr+0xf0>
 800e002:	4b62      	ldr	r3, [pc, #392]	; (800e18c <tcp_slowtmr+0x26c>)
 800e004:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800e008:	4965      	ldr	r1, [pc, #404]	; (800e1a0 <tcp_slowtmr+0x280>)
 800e00a:	4862      	ldr	r0, [pc, #392]	; (800e194 <tcp_slowtmr+0x274>)
 800e00c:	f008 ff28 	bl	8016e60 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800e010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e012:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e014:	2b00      	cmp	r3, #0
 800e016:	d106      	bne.n	800e026 <tcp_slowtmr+0x106>
 800e018:	4b5c      	ldr	r3, [pc, #368]	; (800e18c <tcp_slowtmr+0x26c>)
 800e01a:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800e01e:	4961      	ldr	r1, [pc, #388]	; (800e1a4 <tcp_slowtmr+0x284>)
 800e020:	485c      	ldr	r0, [pc, #368]	; (800e194 <tcp_slowtmr+0x274>)
 800e022:	f008 ff1d 	bl	8016e60 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800e026:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e028:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800e02c:	2b0b      	cmp	r3, #11
 800e02e:	d905      	bls.n	800e03c <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800e030:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e034:	3301      	adds	r3, #1
 800e036:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e03a:	e0ed      	b.n	800e218 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800e03c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e03e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800e042:	3b01      	subs	r3, #1
 800e044:	4a58      	ldr	r2, [pc, #352]	; (800e1a8 <tcp_slowtmr+0x288>)
 800e046:	5cd3      	ldrb	r3, [r2, r3]
 800e048:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800e04a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e04c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800e050:	7c7a      	ldrb	r2, [r7, #17]
 800e052:	429a      	cmp	r2, r3
 800e054:	d907      	bls.n	800e066 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800e056:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e058:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800e05c:	3301      	adds	r3, #1
 800e05e:	b2da      	uxtb	r2, r3
 800e060:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e062:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800e066:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e068:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800e06c:	7c7a      	ldrb	r2, [r7, #17]
 800e06e:	429a      	cmp	r2, r3
 800e070:	f200 80d2 	bhi.w	800e218 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800e074:	2301      	movs	r3, #1
 800e076:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800e078:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e07a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e07e:	2b00      	cmp	r3, #0
 800e080:	d108      	bne.n	800e094 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800e082:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e084:	f005 f95a 	bl	801333c <tcp_zero_window_probe>
 800e088:	4603      	mov	r3, r0
 800e08a:	2b00      	cmp	r3, #0
 800e08c:	d014      	beq.n	800e0b8 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800e08e:	2300      	movs	r3, #0
 800e090:	623b      	str	r3, [r7, #32]
 800e092:	e011      	b.n	800e0b8 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800e094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e096:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e09a:	4619      	mov	r1, r3
 800e09c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e09e:	f004 f80d 	bl	80120bc <tcp_split_unsent_seg>
 800e0a2:	4603      	mov	r3, r0
 800e0a4:	2b00      	cmp	r3, #0
 800e0a6:	d107      	bne.n	800e0b8 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800e0a8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e0aa:	f004 fa8d 	bl	80125c8 <tcp_output>
 800e0ae:	4603      	mov	r3, r0
 800e0b0:	2b00      	cmp	r3, #0
 800e0b2:	d101      	bne.n	800e0b8 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800e0b4:	2300      	movs	r3, #0
 800e0b6:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800e0b8:	6a3b      	ldr	r3, [r7, #32]
 800e0ba:	2b00      	cmp	r3, #0
 800e0bc:	f000 80ac 	beq.w	800e218 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800e0c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0c2:	2200      	movs	r2, #0
 800e0c4:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800e0c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0ca:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800e0ce:	2b06      	cmp	r3, #6
 800e0d0:	f200 80a2 	bhi.w	800e218 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800e0d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0d6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800e0da:	3301      	adds	r3, #1
 800e0dc:	b2da      	uxtb	r2, r3
 800e0de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0e0:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800e0e4:	e098      	b.n	800e218 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800e0e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0e8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800e0ec:	2b00      	cmp	r3, #0
 800e0ee:	db0f      	blt.n	800e110 <tcp_slowtmr+0x1f0>
 800e0f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0f2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800e0f6:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800e0fa:	4293      	cmp	r3, r2
 800e0fc:	d008      	beq.n	800e110 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800e0fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e100:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800e104:	b29b      	uxth	r3, r3
 800e106:	3301      	adds	r3, #1
 800e108:	b29b      	uxth	r3, r3
 800e10a:	b21a      	sxth	r2, r3
 800e10c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e10e:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800e110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e112:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800e116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e118:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800e11c:	429a      	cmp	r2, r3
 800e11e:	db7b      	blt.n	800e218 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800e120:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e122:	f004 fd49 	bl	8012bb8 <tcp_rexmit_rto_prepare>
 800e126:	4603      	mov	r3, r0
 800e128:	2b00      	cmp	r3, #0
 800e12a:	d007      	beq.n	800e13c <tcp_slowtmr+0x21c>
 800e12c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e12e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e130:	2b00      	cmp	r3, #0
 800e132:	d171      	bne.n	800e218 <tcp_slowtmr+0x2f8>
 800e134:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e136:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e138:	2b00      	cmp	r3, #0
 800e13a:	d06d      	beq.n	800e218 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800e13c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e13e:	7d1b      	ldrb	r3, [r3, #20]
 800e140:	2b02      	cmp	r3, #2
 800e142:	d03a      	beq.n	800e1ba <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800e144:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e146:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e14a:	2b0c      	cmp	r3, #12
 800e14c:	bf28      	it	cs
 800e14e:	230c      	movcs	r3, #12
 800e150:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800e152:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e154:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800e158:	10db      	asrs	r3, r3, #3
 800e15a:	b21b      	sxth	r3, r3
 800e15c:	461a      	mov	r2, r3
 800e15e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e160:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800e164:	4413      	add	r3, r2
 800e166:	7efa      	ldrb	r2, [r7, #27]
 800e168:	4910      	ldr	r1, [pc, #64]	; (800e1ac <tcp_slowtmr+0x28c>)
 800e16a:	5c8a      	ldrb	r2, [r1, r2]
 800e16c:	4093      	lsls	r3, r2
 800e16e:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800e170:	697b      	ldr	r3, [r7, #20]
 800e172:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800e176:	4293      	cmp	r3, r2
 800e178:	dc1a      	bgt.n	800e1b0 <tcp_slowtmr+0x290>
 800e17a:	697b      	ldr	r3, [r7, #20]
 800e17c:	b21a      	sxth	r2, r3
 800e17e:	e019      	b.n	800e1b4 <tcp_slowtmr+0x294>
 800e180:	2000d400 	.word	0x2000d400
 800e184:	200047c2 	.word	0x200047c2
 800e188:	2000d3fc 	.word	0x2000d3fc
 800e18c:	08019ac4 	.word	0x08019ac4
 800e190:	08019e08 	.word	0x08019e08
 800e194:	08019b08 	.word	0x08019b08
 800e198:	08019e34 	.word	0x08019e34
 800e19c:	08019e60 	.word	0x08019e60
 800e1a0:	08019e90 	.word	0x08019e90
 800e1a4:	08019ec4 	.word	0x08019ec4
 800e1a8:	0801bb88 	.word	0x0801bb88
 800e1ac:	0801bb78 	.word	0x0801bb78
 800e1b0:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800e1b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1b6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800e1ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1bc:	2200      	movs	r2, #0
 800e1be:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800e1c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1c2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800e1c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1c8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e1cc:	4293      	cmp	r3, r2
 800e1ce:	bf28      	it	cs
 800e1d0:	4613      	movcs	r3, r2
 800e1d2:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800e1d4:	8a7b      	ldrh	r3, [r7, #18]
 800e1d6:	085b      	lsrs	r3, r3, #1
 800e1d8:	b29a      	uxth	r2, r3
 800e1da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1dc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800e1e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1e2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800e1e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1e8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e1ea:	005b      	lsls	r3, r3, #1
 800e1ec:	b29b      	uxth	r3, r3
 800e1ee:	429a      	cmp	r2, r3
 800e1f0:	d206      	bcs.n	800e200 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800e1f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1f4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e1f6:	005b      	lsls	r3, r3, #1
 800e1f8:	b29a      	uxth	r2, r3
 800e1fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1fc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800e200:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e202:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800e204:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e206:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800e20a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e20c:	2200      	movs	r2, #0
 800e20e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800e212:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e214:	f004 fd40 	bl	8012c98 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800e218:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e21a:	7d1b      	ldrb	r3, [r3, #20]
 800e21c:	2b06      	cmp	r3, #6
 800e21e:	d111      	bne.n	800e244 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800e220:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e222:	8b5b      	ldrh	r3, [r3, #26]
 800e224:	f003 0310 	and.w	r3, r3, #16
 800e228:	2b00      	cmp	r3, #0
 800e22a:	d00b      	beq.n	800e244 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e22c:	4b9c      	ldr	r3, [pc, #624]	; (800e4a0 <tcp_slowtmr+0x580>)
 800e22e:	681a      	ldr	r2, [r3, #0]
 800e230:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e232:	6a1b      	ldr	r3, [r3, #32]
 800e234:	1ad3      	subs	r3, r2, r3
 800e236:	2b28      	cmp	r3, #40	; 0x28
 800e238:	d904      	bls.n	800e244 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800e23a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e23e:	3301      	adds	r3, #1
 800e240:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800e244:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e246:	7a5b      	ldrb	r3, [r3, #9]
 800e248:	f003 0308 	and.w	r3, r3, #8
 800e24c:	2b00      	cmp	r3, #0
 800e24e:	d04a      	beq.n	800e2e6 <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 800e250:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e252:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800e254:	2b04      	cmp	r3, #4
 800e256:	d003      	beq.n	800e260 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800e258:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e25a:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800e25c:	2b07      	cmp	r3, #7
 800e25e:	d142      	bne.n	800e2e6 <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e260:	4b8f      	ldr	r3, [pc, #572]	; (800e4a0 <tcp_slowtmr+0x580>)
 800e262:	681a      	ldr	r2, [r3, #0]
 800e264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e266:	6a1b      	ldr	r3, [r3, #32]
 800e268:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800e26a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e26c:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800e270:	4b8c      	ldr	r3, [pc, #560]	; (800e4a4 <tcp_slowtmr+0x584>)
 800e272:	440b      	add	r3, r1
 800e274:	498c      	ldr	r1, [pc, #560]	; (800e4a8 <tcp_slowtmr+0x588>)
 800e276:	fba1 1303 	umull	r1, r3, r1, r3
 800e27a:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e27c:	429a      	cmp	r2, r3
 800e27e:	d90a      	bls.n	800e296 <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800e280:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e284:	3301      	adds	r3, #1
 800e286:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800e28a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e28e:	3301      	adds	r3, #1
 800e290:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800e294:	e027      	b.n	800e2e6 <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e296:	4b82      	ldr	r3, [pc, #520]	; (800e4a0 <tcp_slowtmr+0x580>)
 800e298:	681a      	ldr	r2, [r3, #0]
 800e29a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e29c:	6a1b      	ldr	r3, [r3, #32]
 800e29e:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800e2a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2a2:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800e2a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2a8:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800e2ac:	4618      	mov	r0, r3
 800e2ae:	4b7f      	ldr	r3, [pc, #508]	; (800e4ac <tcp_slowtmr+0x58c>)
 800e2b0:	fb03 f300 	mul.w	r3, r3, r0
 800e2b4:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800e2b6:	497c      	ldr	r1, [pc, #496]	; (800e4a8 <tcp_slowtmr+0x588>)
 800e2b8:	fba1 1303 	umull	r1, r3, r1, r3
 800e2bc:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e2be:	429a      	cmp	r2, r3
 800e2c0:	d911      	bls.n	800e2e6 <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 800e2c2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e2c4:	f004 fffa 	bl	80132bc <tcp_keepalive>
 800e2c8:	4603      	mov	r3, r0
 800e2ca:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800e2ce:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800e2d2:	2b00      	cmp	r3, #0
 800e2d4:	d107      	bne.n	800e2e6 <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 800e2d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2d8:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800e2dc:	3301      	adds	r3, #1
 800e2de:	b2da      	uxtb	r2, r3
 800e2e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2e2:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800e2e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e2ea:	2b00      	cmp	r3, #0
 800e2ec:	d011      	beq.n	800e312 <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800e2ee:	4b6c      	ldr	r3, [pc, #432]	; (800e4a0 <tcp_slowtmr+0x580>)
 800e2f0:	681a      	ldr	r2, [r3, #0]
 800e2f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2f4:	6a1b      	ldr	r3, [r3, #32]
 800e2f6:	1ad2      	subs	r2, r2, r3
 800e2f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2fa:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800e2fe:	4619      	mov	r1, r3
 800e300:	460b      	mov	r3, r1
 800e302:	005b      	lsls	r3, r3, #1
 800e304:	440b      	add	r3, r1
 800e306:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800e308:	429a      	cmp	r2, r3
 800e30a:	d302      	bcc.n	800e312 <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800e30c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e30e:	f000 fea7 	bl	800f060 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800e312:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e314:	7d1b      	ldrb	r3, [r3, #20]
 800e316:	2b03      	cmp	r3, #3
 800e318:	d10b      	bne.n	800e332 <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e31a:	4b61      	ldr	r3, [pc, #388]	; (800e4a0 <tcp_slowtmr+0x580>)
 800e31c:	681a      	ldr	r2, [r3, #0]
 800e31e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e320:	6a1b      	ldr	r3, [r3, #32]
 800e322:	1ad3      	subs	r3, r2, r3
 800e324:	2b28      	cmp	r3, #40	; 0x28
 800e326:	d904      	bls.n	800e332 <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800e328:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e32c:	3301      	adds	r3, #1
 800e32e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800e332:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e334:	7d1b      	ldrb	r3, [r3, #20]
 800e336:	2b09      	cmp	r3, #9
 800e338:	d10b      	bne.n	800e352 <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800e33a:	4b59      	ldr	r3, [pc, #356]	; (800e4a0 <tcp_slowtmr+0x580>)
 800e33c:	681a      	ldr	r2, [r3, #0]
 800e33e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e340:	6a1b      	ldr	r3, [r3, #32]
 800e342:	1ad3      	subs	r3, r2, r3
 800e344:	2bf0      	cmp	r3, #240	; 0xf0
 800e346:	d904      	bls.n	800e352 <tcp_slowtmr+0x432>
        ++pcb_remove;
 800e348:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e34c:	3301      	adds	r3, #1
 800e34e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800e352:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e356:	2b00      	cmp	r3, #0
 800e358:	d060      	beq.n	800e41c <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800e35a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e35c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e360:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800e362:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e364:	f000 fcc8 	bl	800ecf8 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800e368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e36a:	2b00      	cmp	r3, #0
 800e36c:	d010      	beq.n	800e390 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800e36e:	4b50      	ldr	r3, [pc, #320]	; (800e4b0 <tcp_slowtmr+0x590>)
 800e370:	681b      	ldr	r3, [r3, #0]
 800e372:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e374:	429a      	cmp	r2, r3
 800e376:	d106      	bne.n	800e386 <tcp_slowtmr+0x466>
 800e378:	4b4e      	ldr	r3, [pc, #312]	; (800e4b4 <tcp_slowtmr+0x594>)
 800e37a:	f240 526d 	movw	r2, #1389	; 0x56d
 800e37e:	494e      	ldr	r1, [pc, #312]	; (800e4b8 <tcp_slowtmr+0x598>)
 800e380:	484e      	ldr	r0, [pc, #312]	; (800e4bc <tcp_slowtmr+0x59c>)
 800e382:	f008 fd6d 	bl	8016e60 <iprintf>
        prev->next = pcb->next;
 800e386:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e388:	68da      	ldr	r2, [r3, #12]
 800e38a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e38c:	60da      	str	r2, [r3, #12]
 800e38e:	e00f      	b.n	800e3b0 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800e390:	4b47      	ldr	r3, [pc, #284]	; (800e4b0 <tcp_slowtmr+0x590>)
 800e392:	681b      	ldr	r3, [r3, #0]
 800e394:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e396:	429a      	cmp	r2, r3
 800e398:	d006      	beq.n	800e3a8 <tcp_slowtmr+0x488>
 800e39a:	4b46      	ldr	r3, [pc, #280]	; (800e4b4 <tcp_slowtmr+0x594>)
 800e39c:	f240 5271 	movw	r2, #1393	; 0x571
 800e3a0:	4947      	ldr	r1, [pc, #284]	; (800e4c0 <tcp_slowtmr+0x5a0>)
 800e3a2:	4846      	ldr	r0, [pc, #280]	; (800e4bc <tcp_slowtmr+0x59c>)
 800e3a4:	f008 fd5c 	bl	8016e60 <iprintf>
        tcp_active_pcbs = pcb->next;
 800e3a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3aa:	68db      	ldr	r3, [r3, #12]
 800e3ac:	4a40      	ldr	r2, [pc, #256]	; (800e4b0 <tcp_slowtmr+0x590>)
 800e3ae:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800e3b0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e3b4:	2b00      	cmp	r3, #0
 800e3b6:	d013      	beq.n	800e3e0 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800e3b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3ba:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800e3bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3be:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800e3c0:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800e3c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3c4:	3304      	adds	r3, #4
 800e3c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e3c8:	8ad2      	ldrh	r2, [r2, #22]
 800e3ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e3cc:	8b09      	ldrh	r1, [r1, #24]
 800e3ce:	9102      	str	r1, [sp, #8]
 800e3d0:	9201      	str	r2, [sp, #4]
 800e3d2:	9300      	str	r3, [sp, #0]
 800e3d4:	462b      	mov	r3, r5
 800e3d6:	4622      	mov	r2, r4
 800e3d8:	4601      	mov	r1, r0
 800e3da:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e3dc:	f004 feba 	bl	8013154 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800e3e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3e2:	691b      	ldr	r3, [r3, #16]
 800e3e4:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800e3e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3e8:	7d1b      	ldrb	r3, [r3, #20]
 800e3ea:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800e3ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3ee:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800e3f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3f2:	68db      	ldr	r3, [r3, #12]
 800e3f4:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800e3f6:	6838      	ldr	r0, [r7, #0]
 800e3f8:	f7ff f8c4 	bl	800d584 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800e3fc:	4b31      	ldr	r3, [pc, #196]	; (800e4c4 <tcp_slowtmr+0x5a4>)
 800e3fe:	2200      	movs	r2, #0
 800e400:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800e402:	68fb      	ldr	r3, [r7, #12]
 800e404:	2b00      	cmp	r3, #0
 800e406:	d004      	beq.n	800e412 <tcp_slowtmr+0x4f2>
 800e408:	68fb      	ldr	r3, [r7, #12]
 800e40a:	f06f 010c 	mvn.w	r1, #12
 800e40e:	68b8      	ldr	r0, [r7, #8]
 800e410:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800e412:	4b2c      	ldr	r3, [pc, #176]	; (800e4c4 <tcp_slowtmr+0x5a4>)
 800e414:	781b      	ldrb	r3, [r3, #0]
 800e416:	2b00      	cmp	r3, #0
 800e418:	d037      	beq.n	800e48a <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 800e41a:	e592      	b.n	800df42 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800e41c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e41e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800e420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e422:	68db      	ldr	r3, [r3, #12]
 800e424:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800e426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e428:	7f1b      	ldrb	r3, [r3, #28]
 800e42a:	3301      	adds	r3, #1
 800e42c:	b2da      	uxtb	r2, r3
 800e42e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e430:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800e432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e434:	7f1a      	ldrb	r2, [r3, #28]
 800e436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e438:	7f5b      	ldrb	r3, [r3, #29]
 800e43a:	429a      	cmp	r2, r3
 800e43c:	d325      	bcc.n	800e48a <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 800e43e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e440:	2200      	movs	r2, #0
 800e442:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800e444:	4b1f      	ldr	r3, [pc, #124]	; (800e4c4 <tcp_slowtmr+0x5a4>)
 800e446:	2200      	movs	r2, #0
 800e448:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800e44a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e44c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e450:	2b00      	cmp	r3, #0
 800e452:	d00b      	beq.n	800e46c <tcp_slowtmr+0x54c>
 800e454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e456:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e45a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e45c:	6912      	ldr	r2, [r2, #16]
 800e45e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e460:	4610      	mov	r0, r2
 800e462:	4798      	blx	r3
 800e464:	4603      	mov	r3, r0
 800e466:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800e46a:	e002      	b.n	800e472 <tcp_slowtmr+0x552>
 800e46c:	2300      	movs	r3, #0
 800e46e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800e472:	4b14      	ldr	r3, [pc, #80]	; (800e4c4 <tcp_slowtmr+0x5a4>)
 800e474:	781b      	ldrb	r3, [r3, #0]
 800e476:	2b00      	cmp	r3, #0
 800e478:	d000      	beq.n	800e47c <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 800e47a:	e562      	b.n	800df42 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800e47c:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800e480:	2b00      	cmp	r3, #0
 800e482:	d102      	bne.n	800e48a <tcp_slowtmr+0x56a>
          tcp_output(prev);
 800e484:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e486:	f004 f89f 	bl	80125c8 <tcp_output>
  while (pcb != NULL) {
 800e48a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e48c:	2b00      	cmp	r3, #0
 800e48e:	f47f ad5e 	bne.w	800df4e <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800e492:	2300      	movs	r3, #0
 800e494:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800e496:	4b0c      	ldr	r3, [pc, #48]	; (800e4c8 <tcp_slowtmr+0x5a8>)
 800e498:	681b      	ldr	r3, [r3, #0]
 800e49a:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800e49c:	e069      	b.n	800e572 <tcp_slowtmr+0x652>
 800e49e:	bf00      	nop
 800e4a0:	2000d400 	.word	0x2000d400
 800e4a4:	000a4cb8 	.word	0x000a4cb8
 800e4a8:	10624dd3 	.word	0x10624dd3
 800e4ac:	000124f8 	.word	0x000124f8
 800e4b0:	2000d3fc 	.word	0x2000d3fc
 800e4b4:	08019ac4 	.word	0x08019ac4
 800e4b8:	08019efc 	.word	0x08019efc
 800e4bc:	08019b08 	.word	0x08019b08
 800e4c0:	08019f28 	.word	0x08019f28
 800e4c4:	2000d3f8 	.word	0x2000d3f8
 800e4c8:	2000d40c 	.word	0x2000d40c
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800e4cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4ce:	7d1b      	ldrb	r3, [r3, #20]
 800e4d0:	2b0a      	cmp	r3, #10
 800e4d2:	d006      	beq.n	800e4e2 <tcp_slowtmr+0x5c2>
 800e4d4:	4b2a      	ldr	r3, [pc, #168]	; (800e580 <tcp_slowtmr+0x660>)
 800e4d6:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800e4da:	492a      	ldr	r1, [pc, #168]	; (800e584 <tcp_slowtmr+0x664>)
 800e4dc:	482a      	ldr	r0, [pc, #168]	; (800e588 <tcp_slowtmr+0x668>)
 800e4de:	f008 fcbf 	bl	8016e60 <iprintf>
    pcb_remove = 0;
 800e4e2:	2300      	movs	r3, #0
 800e4e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800e4e8:	4b28      	ldr	r3, [pc, #160]	; (800e58c <tcp_slowtmr+0x66c>)
 800e4ea:	681a      	ldr	r2, [r3, #0]
 800e4ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4ee:	6a1b      	ldr	r3, [r3, #32]
 800e4f0:	1ad3      	subs	r3, r2, r3
 800e4f2:	2bf0      	cmp	r3, #240	; 0xf0
 800e4f4:	d904      	bls.n	800e500 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800e4f6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e4fa:	3301      	adds	r3, #1
 800e4fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800e500:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e504:	2b00      	cmp	r3, #0
 800e506:	d02f      	beq.n	800e568 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800e508:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e50a:	f000 fbf5 	bl	800ecf8 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800e50e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e510:	2b00      	cmp	r3, #0
 800e512:	d010      	beq.n	800e536 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800e514:	4b1e      	ldr	r3, [pc, #120]	; (800e590 <tcp_slowtmr+0x670>)
 800e516:	681b      	ldr	r3, [r3, #0]
 800e518:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e51a:	429a      	cmp	r2, r3
 800e51c:	d106      	bne.n	800e52c <tcp_slowtmr+0x60c>
 800e51e:	4b18      	ldr	r3, [pc, #96]	; (800e580 <tcp_slowtmr+0x660>)
 800e520:	f240 52af 	movw	r2, #1455	; 0x5af
 800e524:	491b      	ldr	r1, [pc, #108]	; (800e594 <tcp_slowtmr+0x674>)
 800e526:	4818      	ldr	r0, [pc, #96]	; (800e588 <tcp_slowtmr+0x668>)
 800e528:	f008 fc9a 	bl	8016e60 <iprintf>
        prev->next = pcb->next;
 800e52c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e52e:	68da      	ldr	r2, [r3, #12]
 800e530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e532:	60da      	str	r2, [r3, #12]
 800e534:	e00f      	b.n	800e556 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800e536:	4b16      	ldr	r3, [pc, #88]	; (800e590 <tcp_slowtmr+0x670>)
 800e538:	681b      	ldr	r3, [r3, #0]
 800e53a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e53c:	429a      	cmp	r2, r3
 800e53e:	d006      	beq.n	800e54e <tcp_slowtmr+0x62e>
 800e540:	4b0f      	ldr	r3, [pc, #60]	; (800e580 <tcp_slowtmr+0x660>)
 800e542:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800e546:	4914      	ldr	r1, [pc, #80]	; (800e598 <tcp_slowtmr+0x678>)
 800e548:	480f      	ldr	r0, [pc, #60]	; (800e588 <tcp_slowtmr+0x668>)
 800e54a:	f008 fc89 	bl	8016e60 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800e54e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e550:	68db      	ldr	r3, [r3, #12]
 800e552:	4a0f      	ldr	r2, [pc, #60]	; (800e590 <tcp_slowtmr+0x670>)
 800e554:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800e556:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e558:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800e55a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e55c:	68db      	ldr	r3, [r3, #12]
 800e55e:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800e560:	69f8      	ldr	r0, [r7, #28]
 800e562:	f7ff f80f 	bl	800d584 <tcp_free>
 800e566:	e004      	b.n	800e572 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800e568:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e56a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800e56c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e56e:	68db      	ldr	r3, [r3, #12]
 800e570:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800e572:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e574:	2b00      	cmp	r3, #0
 800e576:	d1a9      	bne.n	800e4cc <tcp_slowtmr+0x5ac>
    }
  }
}
 800e578:	bf00      	nop
 800e57a:	3730      	adds	r7, #48	; 0x30
 800e57c:	46bd      	mov	sp, r7
 800e57e:	bdb0      	pop	{r4, r5, r7, pc}
 800e580:	08019ac4 	.word	0x08019ac4
 800e584:	08019f54 	.word	0x08019f54
 800e588:	08019b08 	.word	0x08019b08
 800e58c:	2000d400 	.word	0x2000d400
 800e590:	2000d40c 	.word	0x2000d40c
 800e594:	08019f84 	.word	0x08019f84
 800e598:	08019fac 	.word	0x08019fac

0800e59c <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800e59c:	b580      	push	{r7, lr}
 800e59e:	b082      	sub	sp, #8
 800e5a0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800e5a2:	4b2d      	ldr	r3, [pc, #180]	; (800e658 <tcp_fasttmr+0xbc>)
 800e5a4:	781b      	ldrb	r3, [r3, #0]
 800e5a6:	3301      	adds	r3, #1
 800e5a8:	b2da      	uxtb	r2, r3
 800e5aa:	4b2b      	ldr	r3, [pc, #172]	; (800e658 <tcp_fasttmr+0xbc>)
 800e5ac:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800e5ae:	4b2b      	ldr	r3, [pc, #172]	; (800e65c <tcp_fasttmr+0xc0>)
 800e5b0:	681b      	ldr	r3, [r3, #0]
 800e5b2:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800e5b4:	e048      	b.n	800e648 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	7f9a      	ldrb	r2, [r3, #30]
 800e5ba:	4b27      	ldr	r3, [pc, #156]	; (800e658 <tcp_fasttmr+0xbc>)
 800e5bc:	781b      	ldrb	r3, [r3, #0]
 800e5be:	429a      	cmp	r2, r3
 800e5c0:	d03f      	beq.n	800e642 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800e5c2:	4b25      	ldr	r3, [pc, #148]	; (800e658 <tcp_fasttmr+0xbc>)
 800e5c4:	781a      	ldrb	r2, [r3, #0]
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	8b5b      	ldrh	r3, [r3, #26]
 800e5ce:	f003 0301 	and.w	r3, r3, #1
 800e5d2:	2b00      	cmp	r3, #0
 800e5d4:	d010      	beq.n	800e5f8 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	8b5b      	ldrh	r3, [r3, #26]
 800e5da:	f043 0302 	orr.w	r3, r3, #2
 800e5de:	b29a      	uxth	r2, r3
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800e5e4:	6878      	ldr	r0, [r7, #4]
 800e5e6:	f003 ffef 	bl	80125c8 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	8b5b      	ldrh	r3, [r3, #26]
 800e5ee:	f023 0303 	bic.w	r3, r3, #3
 800e5f2:	b29a      	uxth	r2, r3
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	8b5b      	ldrh	r3, [r3, #26]
 800e5fc:	f003 0308 	and.w	r3, r3, #8
 800e600:	2b00      	cmp	r3, #0
 800e602:	d009      	beq.n	800e618 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	8b5b      	ldrh	r3, [r3, #26]
 800e608:	f023 0308 	bic.w	r3, r3, #8
 800e60c:	b29a      	uxth	r2, r3
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800e612:	6878      	ldr	r0, [r7, #4]
 800e614:	f7ff f946 	bl	800d8a4 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	68db      	ldr	r3, [r3, #12]
 800e61c:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e622:	2b00      	cmp	r3, #0
 800e624:	d00a      	beq.n	800e63c <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800e626:	4b0e      	ldr	r3, [pc, #56]	; (800e660 <tcp_fasttmr+0xc4>)
 800e628:	2200      	movs	r2, #0
 800e62a:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800e62c:	6878      	ldr	r0, [r7, #4]
 800e62e:	f000 f819 	bl	800e664 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800e632:	4b0b      	ldr	r3, [pc, #44]	; (800e660 <tcp_fasttmr+0xc4>)
 800e634:	781b      	ldrb	r3, [r3, #0]
 800e636:	2b00      	cmp	r3, #0
 800e638:	d000      	beq.n	800e63c <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800e63a:	e7b8      	b.n	800e5ae <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800e63c:	683b      	ldr	r3, [r7, #0]
 800e63e:	607b      	str	r3, [r7, #4]
 800e640:	e002      	b.n	800e648 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	68db      	ldr	r3, [r3, #12]
 800e646:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	2b00      	cmp	r3, #0
 800e64c:	d1b3      	bne.n	800e5b6 <tcp_fasttmr+0x1a>
    }
  }
}
 800e64e:	bf00      	nop
 800e650:	3708      	adds	r7, #8
 800e652:	46bd      	mov	sp, r7
 800e654:	bd80      	pop	{r7, pc}
 800e656:	bf00      	nop
 800e658:	200047c2 	.word	0x200047c2
 800e65c:	2000d3fc 	.word	0x2000d3fc
 800e660:	2000d3f8 	.word	0x2000d3f8

0800e664 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800e664:	b590      	push	{r4, r7, lr}
 800e666:	b085      	sub	sp, #20
 800e668:	af00      	add	r7, sp, #0
 800e66a:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	2b00      	cmp	r3, #0
 800e670:	d109      	bne.n	800e686 <tcp_process_refused_data+0x22>
 800e672:	4b37      	ldr	r3, [pc, #220]	; (800e750 <tcp_process_refused_data+0xec>)
 800e674:	f240 6209 	movw	r2, #1545	; 0x609
 800e678:	4936      	ldr	r1, [pc, #216]	; (800e754 <tcp_process_refused_data+0xf0>)
 800e67a:	4837      	ldr	r0, [pc, #220]	; (800e758 <tcp_process_refused_data+0xf4>)
 800e67c:	f008 fbf0 	bl	8016e60 <iprintf>
 800e680:	f06f 030f 	mvn.w	r3, #15
 800e684:	e060      	b.n	800e748 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e68a:	7b5b      	ldrb	r3, [r3, #13]
 800e68c:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e692:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	2200      	movs	r2, #0
 800e698:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e6a0:	2b00      	cmp	r3, #0
 800e6a2:	d00b      	beq.n	800e6bc <tcp_process_refused_data+0x58>
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	6918      	ldr	r0, [r3, #16]
 800e6ae:	2300      	movs	r3, #0
 800e6b0:	68ba      	ldr	r2, [r7, #8]
 800e6b2:	6879      	ldr	r1, [r7, #4]
 800e6b4:	47a0      	blx	r4
 800e6b6:	4603      	mov	r3, r0
 800e6b8:	73fb      	strb	r3, [r7, #15]
 800e6ba:	e007      	b.n	800e6cc <tcp_process_refused_data+0x68>
 800e6bc:	2300      	movs	r3, #0
 800e6be:	68ba      	ldr	r2, [r7, #8]
 800e6c0:	6879      	ldr	r1, [r7, #4]
 800e6c2:	2000      	movs	r0, #0
 800e6c4:	f000 f8a2 	bl	800e80c <tcp_recv_null>
 800e6c8:	4603      	mov	r3, r0
 800e6ca:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800e6cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e6d0:	2b00      	cmp	r3, #0
 800e6d2:	d12a      	bne.n	800e72a <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800e6d4:	7bbb      	ldrb	r3, [r7, #14]
 800e6d6:	f003 0320 	and.w	r3, r3, #32
 800e6da:	2b00      	cmp	r3, #0
 800e6dc:	d033      	beq.n	800e746 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e6e2:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800e6e6:	d005      	beq.n	800e6f4 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e6ec:	3301      	adds	r3, #1
 800e6ee:	b29a      	uxth	r2, r3
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e6fa:	2b00      	cmp	r3, #0
 800e6fc:	d00b      	beq.n	800e716 <tcp_process_refused_data+0xb2>
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	6918      	ldr	r0, [r3, #16]
 800e708:	2300      	movs	r3, #0
 800e70a:	2200      	movs	r2, #0
 800e70c:	6879      	ldr	r1, [r7, #4]
 800e70e:	47a0      	blx	r4
 800e710:	4603      	mov	r3, r0
 800e712:	73fb      	strb	r3, [r7, #15]
 800e714:	e001      	b.n	800e71a <tcp_process_refused_data+0xb6>
 800e716:	2300      	movs	r3, #0
 800e718:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800e71a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e71e:	f113 0f0d 	cmn.w	r3, #13
 800e722:	d110      	bne.n	800e746 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800e724:	f06f 030c 	mvn.w	r3, #12
 800e728:	e00e      	b.n	800e748 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800e72a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e72e:	f113 0f0d 	cmn.w	r3, #13
 800e732:	d102      	bne.n	800e73a <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800e734:	f06f 030c 	mvn.w	r3, #12
 800e738:	e006      	b.n	800e748 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800e73a:	687b      	ldr	r3, [r7, #4]
 800e73c:	68ba      	ldr	r2, [r7, #8]
 800e73e:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800e740:	f06f 0304 	mvn.w	r3, #4
 800e744:	e000      	b.n	800e748 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800e746:	2300      	movs	r3, #0
}
 800e748:	4618      	mov	r0, r3
 800e74a:	3714      	adds	r7, #20
 800e74c:	46bd      	mov	sp, r7
 800e74e:	bd90      	pop	{r4, r7, pc}
 800e750:	08019ac4 	.word	0x08019ac4
 800e754:	08019fd4 	.word	0x08019fd4
 800e758:	08019b08 	.word	0x08019b08

0800e75c <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800e75c:	b580      	push	{r7, lr}
 800e75e:	b084      	sub	sp, #16
 800e760:	af00      	add	r7, sp, #0
 800e762:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800e764:	e007      	b.n	800e776 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	681b      	ldr	r3, [r3, #0]
 800e76a:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800e76c:	6878      	ldr	r0, [r7, #4]
 800e76e:	f000 f809 	bl	800e784 <tcp_seg_free>
    seg = next;
 800e772:	68fb      	ldr	r3, [r7, #12]
 800e774:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	2b00      	cmp	r3, #0
 800e77a:	d1f4      	bne.n	800e766 <tcp_segs_free+0xa>
  }
}
 800e77c:	bf00      	nop
 800e77e:	3710      	adds	r7, #16
 800e780:	46bd      	mov	sp, r7
 800e782:	bd80      	pop	{r7, pc}

0800e784 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800e784:	b580      	push	{r7, lr}
 800e786:	b082      	sub	sp, #8
 800e788:	af00      	add	r7, sp, #0
 800e78a:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	2b00      	cmp	r3, #0
 800e790:	d00c      	beq.n	800e7ac <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	685b      	ldr	r3, [r3, #4]
 800e796:	2b00      	cmp	r3, #0
 800e798:	d004      	beq.n	800e7a4 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	685b      	ldr	r3, [r3, #4]
 800e79e:	4618      	mov	r0, r3
 800e7a0:	f7fe fc34 	bl	800d00c <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800e7a4:	6879      	ldr	r1, [r7, #4]
 800e7a6:	2003      	movs	r0, #3
 800e7a8:	f7fd fd5e 	bl	800c268 <memp_free>
  }
}
 800e7ac:	bf00      	nop
 800e7ae:	3708      	adds	r7, #8
 800e7b0:	46bd      	mov	sp, r7
 800e7b2:	bd80      	pop	{r7, pc}

0800e7b4 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800e7b4:	b580      	push	{r7, lr}
 800e7b6:	b084      	sub	sp, #16
 800e7b8:	af00      	add	r7, sp, #0
 800e7ba:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	2b00      	cmp	r3, #0
 800e7c0:	d106      	bne.n	800e7d0 <tcp_seg_copy+0x1c>
 800e7c2:	4b0f      	ldr	r3, [pc, #60]	; (800e800 <tcp_seg_copy+0x4c>)
 800e7c4:	f240 6282 	movw	r2, #1666	; 0x682
 800e7c8:	490e      	ldr	r1, [pc, #56]	; (800e804 <tcp_seg_copy+0x50>)
 800e7ca:	480f      	ldr	r0, [pc, #60]	; (800e808 <tcp_seg_copy+0x54>)
 800e7cc:	f008 fb48 	bl	8016e60 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800e7d0:	2003      	movs	r0, #3
 800e7d2:	f7fd fcf7 	bl	800c1c4 <memp_malloc>
 800e7d6:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800e7d8:	68fb      	ldr	r3, [r7, #12]
 800e7da:	2b00      	cmp	r3, #0
 800e7dc:	d101      	bne.n	800e7e2 <tcp_seg_copy+0x2e>
    return NULL;
 800e7de:	2300      	movs	r3, #0
 800e7e0:	e00a      	b.n	800e7f8 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800e7e2:	2210      	movs	r2, #16
 800e7e4:	6879      	ldr	r1, [r7, #4]
 800e7e6:	68f8      	ldr	r0, [r7, #12]
 800e7e8:	f008 fb0d 	bl	8016e06 <memcpy>
  pbuf_ref(cseg->p);
 800e7ec:	68fb      	ldr	r3, [r7, #12]
 800e7ee:	685b      	ldr	r3, [r3, #4]
 800e7f0:	4618      	mov	r0, r3
 800e7f2:	f7fe fcb1 	bl	800d158 <pbuf_ref>
  return cseg;
 800e7f6:	68fb      	ldr	r3, [r7, #12]
}
 800e7f8:	4618      	mov	r0, r3
 800e7fa:	3710      	adds	r7, #16
 800e7fc:	46bd      	mov	sp, r7
 800e7fe:	bd80      	pop	{r7, pc}
 800e800:	08019ac4 	.word	0x08019ac4
 800e804:	0801a018 	.word	0x0801a018
 800e808:	08019b08 	.word	0x08019b08

0800e80c <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800e80c:	b580      	push	{r7, lr}
 800e80e:	b084      	sub	sp, #16
 800e810:	af00      	add	r7, sp, #0
 800e812:	60f8      	str	r0, [r7, #12]
 800e814:	60b9      	str	r1, [r7, #8]
 800e816:	607a      	str	r2, [r7, #4]
 800e818:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800e81a:	68bb      	ldr	r3, [r7, #8]
 800e81c:	2b00      	cmp	r3, #0
 800e81e:	d109      	bne.n	800e834 <tcp_recv_null+0x28>
 800e820:	4b12      	ldr	r3, [pc, #72]	; (800e86c <tcp_recv_null+0x60>)
 800e822:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800e826:	4912      	ldr	r1, [pc, #72]	; (800e870 <tcp_recv_null+0x64>)
 800e828:	4812      	ldr	r0, [pc, #72]	; (800e874 <tcp_recv_null+0x68>)
 800e82a:	f008 fb19 	bl	8016e60 <iprintf>
 800e82e:	f06f 030f 	mvn.w	r3, #15
 800e832:	e016      	b.n	800e862 <tcp_recv_null+0x56>

  if (p != NULL) {
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	2b00      	cmp	r3, #0
 800e838:	d009      	beq.n	800e84e <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	891b      	ldrh	r3, [r3, #8]
 800e83e:	4619      	mov	r1, r3
 800e840:	68b8      	ldr	r0, [r7, #8]
 800e842:	f7ff fad7 	bl	800ddf4 <tcp_recved>
    pbuf_free(p);
 800e846:	6878      	ldr	r0, [r7, #4]
 800e848:	f7fe fbe0 	bl	800d00c <pbuf_free>
 800e84c:	e008      	b.n	800e860 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800e84e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e852:	2b00      	cmp	r3, #0
 800e854:	d104      	bne.n	800e860 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800e856:	68b8      	ldr	r0, [r7, #8]
 800e858:	f7ff f88a 	bl	800d970 <tcp_close>
 800e85c:	4603      	mov	r3, r0
 800e85e:	e000      	b.n	800e862 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800e860:	2300      	movs	r3, #0
}
 800e862:	4618      	mov	r0, r3
 800e864:	3710      	adds	r7, #16
 800e866:	46bd      	mov	sp, r7
 800e868:	bd80      	pop	{r7, pc}
 800e86a:	bf00      	nop
 800e86c:	08019ac4 	.word	0x08019ac4
 800e870:	0801a034 	.word	0x0801a034
 800e874:	08019b08 	.word	0x08019b08

0800e878 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800e878:	b580      	push	{r7, lr}
 800e87a:	b086      	sub	sp, #24
 800e87c:	af00      	add	r7, sp, #0
 800e87e:	4603      	mov	r3, r0
 800e880:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800e882:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e886:	2b00      	cmp	r3, #0
 800e888:	db01      	blt.n	800e88e <tcp_kill_prio+0x16>
 800e88a:	79fb      	ldrb	r3, [r7, #7]
 800e88c:	e000      	b.n	800e890 <tcp_kill_prio+0x18>
 800e88e:	237f      	movs	r3, #127	; 0x7f
 800e890:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800e892:	7afb      	ldrb	r3, [r7, #11]
 800e894:	2b00      	cmp	r3, #0
 800e896:	d034      	beq.n	800e902 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800e898:	7afb      	ldrb	r3, [r7, #11]
 800e89a:	3b01      	subs	r3, #1
 800e89c:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800e89e:	2300      	movs	r3, #0
 800e8a0:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800e8a2:	2300      	movs	r3, #0
 800e8a4:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e8a6:	4b19      	ldr	r3, [pc, #100]	; (800e90c <tcp_kill_prio+0x94>)
 800e8a8:	681b      	ldr	r3, [r3, #0]
 800e8aa:	617b      	str	r3, [r7, #20]
 800e8ac:	e01f      	b.n	800e8ee <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800e8ae:	697b      	ldr	r3, [r7, #20]
 800e8b0:	7d5b      	ldrb	r3, [r3, #21]
 800e8b2:	7afa      	ldrb	r2, [r7, #11]
 800e8b4:	429a      	cmp	r2, r3
 800e8b6:	d80c      	bhi.n	800e8d2 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800e8b8:	697b      	ldr	r3, [r7, #20]
 800e8ba:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800e8bc:	7afa      	ldrb	r2, [r7, #11]
 800e8be:	429a      	cmp	r2, r3
 800e8c0:	d112      	bne.n	800e8e8 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800e8c2:	4b13      	ldr	r3, [pc, #76]	; (800e910 <tcp_kill_prio+0x98>)
 800e8c4:	681a      	ldr	r2, [r3, #0]
 800e8c6:	697b      	ldr	r3, [r7, #20]
 800e8c8:	6a1b      	ldr	r3, [r3, #32]
 800e8ca:	1ad3      	subs	r3, r2, r3
 800e8cc:	68fa      	ldr	r2, [r7, #12]
 800e8ce:	429a      	cmp	r2, r3
 800e8d0:	d80a      	bhi.n	800e8e8 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800e8d2:	4b0f      	ldr	r3, [pc, #60]	; (800e910 <tcp_kill_prio+0x98>)
 800e8d4:	681a      	ldr	r2, [r3, #0]
 800e8d6:	697b      	ldr	r3, [r7, #20]
 800e8d8:	6a1b      	ldr	r3, [r3, #32]
 800e8da:	1ad3      	subs	r3, r2, r3
 800e8dc:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800e8de:	697b      	ldr	r3, [r7, #20]
 800e8e0:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800e8e2:	697b      	ldr	r3, [r7, #20]
 800e8e4:	7d5b      	ldrb	r3, [r3, #21]
 800e8e6:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e8e8:	697b      	ldr	r3, [r7, #20]
 800e8ea:	68db      	ldr	r3, [r3, #12]
 800e8ec:	617b      	str	r3, [r7, #20]
 800e8ee:	697b      	ldr	r3, [r7, #20]
 800e8f0:	2b00      	cmp	r3, #0
 800e8f2:	d1dc      	bne.n	800e8ae <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800e8f4:	693b      	ldr	r3, [r7, #16]
 800e8f6:	2b00      	cmp	r3, #0
 800e8f8:	d004      	beq.n	800e904 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800e8fa:	6938      	ldr	r0, [r7, #16]
 800e8fc:	f7ff f97c 	bl	800dbf8 <tcp_abort>
 800e900:	e000      	b.n	800e904 <tcp_kill_prio+0x8c>
    return;
 800e902:	bf00      	nop
  }
}
 800e904:	3718      	adds	r7, #24
 800e906:	46bd      	mov	sp, r7
 800e908:	bd80      	pop	{r7, pc}
 800e90a:	bf00      	nop
 800e90c:	2000d3fc 	.word	0x2000d3fc
 800e910:	2000d400 	.word	0x2000d400

0800e914 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800e914:	b580      	push	{r7, lr}
 800e916:	b086      	sub	sp, #24
 800e918:	af00      	add	r7, sp, #0
 800e91a:	4603      	mov	r3, r0
 800e91c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800e91e:	79fb      	ldrb	r3, [r7, #7]
 800e920:	2b08      	cmp	r3, #8
 800e922:	d009      	beq.n	800e938 <tcp_kill_state+0x24>
 800e924:	79fb      	ldrb	r3, [r7, #7]
 800e926:	2b09      	cmp	r3, #9
 800e928:	d006      	beq.n	800e938 <tcp_kill_state+0x24>
 800e92a:	4b1a      	ldr	r3, [pc, #104]	; (800e994 <tcp_kill_state+0x80>)
 800e92c:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800e930:	4919      	ldr	r1, [pc, #100]	; (800e998 <tcp_kill_state+0x84>)
 800e932:	481a      	ldr	r0, [pc, #104]	; (800e99c <tcp_kill_state+0x88>)
 800e934:	f008 fa94 	bl	8016e60 <iprintf>

  inactivity = 0;
 800e938:	2300      	movs	r3, #0
 800e93a:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800e93c:	2300      	movs	r3, #0
 800e93e:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e940:	4b17      	ldr	r3, [pc, #92]	; (800e9a0 <tcp_kill_state+0x8c>)
 800e942:	681b      	ldr	r3, [r3, #0]
 800e944:	617b      	str	r3, [r7, #20]
 800e946:	e017      	b.n	800e978 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800e948:	697b      	ldr	r3, [r7, #20]
 800e94a:	7d1b      	ldrb	r3, [r3, #20]
 800e94c:	79fa      	ldrb	r2, [r7, #7]
 800e94e:	429a      	cmp	r2, r3
 800e950:	d10f      	bne.n	800e972 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800e952:	4b14      	ldr	r3, [pc, #80]	; (800e9a4 <tcp_kill_state+0x90>)
 800e954:	681a      	ldr	r2, [r3, #0]
 800e956:	697b      	ldr	r3, [r7, #20]
 800e958:	6a1b      	ldr	r3, [r3, #32]
 800e95a:	1ad3      	subs	r3, r2, r3
 800e95c:	68fa      	ldr	r2, [r7, #12]
 800e95e:	429a      	cmp	r2, r3
 800e960:	d807      	bhi.n	800e972 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800e962:	4b10      	ldr	r3, [pc, #64]	; (800e9a4 <tcp_kill_state+0x90>)
 800e964:	681a      	ldr	r2, [r3, #0]
 800e966:	697b      	ldr	r3, [r7, #20]
 800e968:	6a1b      	ldr	r3, [r3, #32]
 800e96a:	1ad3      	subs	r3, r2, r3
 800e96c:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800e96e:	697b      	ldr	r3, [r7, #20]
 800e970:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e972:	697b      	ldr	r3, [r7, #20]
 800e974:	68db      	ldr	r3, [r3, #12]
 800e976:	617b      	str	r3, [r7, #20]
 800e978:	697b      	ldr	r3, [r7, #20]
 800e97a:	2b00      	cmp	r3, #0
 800e97c:	d1e4      	bne.n	800e948 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800e97e:	693b      	ldr	r3, [r7, #16]
 800e980:	2b00      	cmp	r3, #0
 800e982:	d003      	beq.n	800e98c <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800e984:	2100      	movs	r1, #0
 800e986:	6938      	ldr	r0, [r7, #16]
 800e988:	f7ff f878 	bl	800da7c <tcp_abandon>
  }
}
 800e98c:	bf00      	nop
 800e98e:	3718      	adds	r7, #24
 800e990:	46bd      	mov	sp, r7
 800e992:	bd80      	pop	{r7, pc}
 800e994:	08019ac4 	.word	0x08019ac4
 800e998:	0801a050 	.word	0x0801a050
 800e99c:	08019b08 	.word	0x08019b08
 800e9a0:	2000d3fc 	.word	0x2000d3fc
 800e9a4:	2000d400 	.word	0x2000d400

0800e9a8 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800e9a8:	b580      	push	{r7, lr}
 800e9aa:	b084      	sub	sp, #16
 800e9ac:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800e9ae:	2300      	movs	r3, #0
 800e9b0:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800e9b2:	2300      	movs	r3, #0
 800e9b4:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e9b6:	4b12      	ldr	r3, [pc, #72]	; (800ea00 <tcp_kill_timewait+0x58>)
 800e9b8:	681b      	ldr	r3, [r3, #0]
 800e9ba:	60fb      	str	r3, [r7, #12]
 800e9bc:	e012      	b.n	800e9e4 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800e9be:	4b11      	ldr	r3, [pc, #68]	; (800ea04 <tcp_kill_timewait+0x5c>)
 800e9c0:	681a      	ldr	r2, [r3, #0]
 800e9c2:	68fb      	ldr	r3, [r7, #12]
 800e9c4:	6a1b      	ldr	r3, [r3, #32]
 800e9c6:	1ad3      	subs	r3, r2, r3
 800e9c8:	687a      	ldr	r2, [r7, #4]
 800e9ca:	429a      	cmp	r2, r3
 800e9cc:	d807      	bhi.n	800e9de <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800e9ce:	4b0d      	ldr	r3, [pc, #52]	; (800ea04 <tcp_kill_timewait+0x5c>)
 800e9d0:	681a      	ldr	r2, [r3, #0]
 800e9d2:	68fb      	ldr	r3, [r7, #12]
 800e9d4:	6a1b      	ldr	r3, [r3, #32]
 800e9d6:	1ad3      	subs	r3, r2, r3
 800e9d8:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800e9da:	68fb      	ldr	r3, [r7, #12]
 800e9dc:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e9de:	68fb      	ldr	r3, [r7, #12]
 800e9e0:	68db      	ldr	r3, [r3, #12]
 800e9e2:	60fb      	str	r3, [r7, #12]
 800e9e4:	68fb      	ldr	r3, [r7, #12]
 800e9e6:	2b00      	cmp	r3, #0
 800e9e8:	d1e9      	bne.n	800e9be <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800e9ea:	68bb      	ldr	r3, [r7, #8]
 800e9ec:	2b00      	cmp	r3, #0
 800e9ee:	d002      	beq.n	800e9f6 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800e9f0:	68b8      	ldr	r0, [r7, #8]
 800e9f2:	f7ff f901 	bl	800dbf8 <tcp_abort>
  }
}
 800e9f6:	bf00      	nop
 800e9f8:	3710      	adds	r7, #16
 800e9fa:	46bd      	mov	sp, r7
 800e9fc:	bd80      	pop	{r7, pc}
 800e9fe:	bf00      	nop
 800ea00:	2000d40c 	.word	0x2000d40c
 800ea04:	2000d400 	.word	0x2000d400

0800ea08 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800ea08:	b580      	push	{r7, lr}
 800ea0a:	b082      	sub	sp, #8
 800ea0c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800ea0e:	4b10      	ldr	r3, [pc, #64]	; (800ea50 <tcp_handle_closepend+0x48>)
 800ea10:	681b      	ldr	r3, [r3, #0]
 800ea12:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800ea14:	e014      	b.n	800ea40 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800ea16:	687b      	ldr	r3, [r7, #4]
 800ea18:	68db      	ldr	r3, [r3, #12]
 800ea1a:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	8b5b      	ldrh	r3, [r3, #26]
 800ea20:	f003 0308 	and.w	r3, r3, #8
 800ea24:	2b00      	cmp	r3, #0
 800ea26:	d009      	beq.n	800ea3c <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	8b5b      	ldrh	r3, [r3, #26]
 800ea2c:	f023 0308 	bic.w	r3, r3, #8
 800ea30:	b29a      	uxth	r2, r3
 800ea32:	687b      	ldr	r3, [r7, #4]
 800ea34:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800ea36:	6878      	ldr	r0, [r7, #4]
 800ea38:	f7fe ff34 	bl	800d8a4 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800ea3c:	683b      	ldr	r3, [r7, #0]
 800ea3e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	2b00      	cmp	r3, #0
 800ea44:	d1e7      	bne.n	800ea16 <tcp_handle_closepend+0xe>
  }
}
 800ea46:	bf00      	nop
 800ea48:	3708      	adds	r7, #8
 800ea4a:	46bd      	mov	sp, r7
 800ea4c:	bd80      	pop	{r7, pc}
 800ea4e:	bf00      	nop
 800ea50:	2000d3fc 	.word	0x2000d3fc

0800ea54 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800ea54:	b580      	push	{r7, lr}
 800ea56:	b084      	sub	sp, #16
 800ea58:	af00      	add	r7, sp, #0
 800ea5a:	4603      	mov	r3, r0
 800ea5c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ea5e:	2001      	movs	r0, #1
 800ea60:	f7fd fbb0 	bl	800c1c4 <memp_malloc>
 800ea64:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800ea66:	68fb      	ldr	r3, [r7, #12]
 800ea68:	2b00      	cmp	r3, #0
 800ea6a:	d126      	bne.n	800eaba <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800ea6c:	f7ff ffcc 	bl	800ea08 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800ea70:	f7ff ff9a 	bl	800e9a8 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ea74:	2001      	movs	r0, #1
 800ea76:	f7fd fba5 	bl	800c1c4 <memp_malloc>
 800ea7a:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800ea7c:	68fb      	ldr	r3, [r7, #12]
 800ea7e:	2b00      	cmp	r3, #0
 800ea80:	d11b      	bne.n	800eaba <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800ea82:	2009      	movs	r0, #9
 800ea84:	f7ff ff46 	bl	800e914 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ea88:	2001      	movs	r0, #1
 800ea8a:	f7fd fb9b 	bl	800c1c4 <memp_malloc>
 800ea8e:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800ea90:	68fb      	ldr	r3, [r7, #12]
 800ea92:	2b00      	cmp	r3, #0
 800ea94:	d111      	bne.n	800eaba <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800ea96:	2008      	movs	r0, #8
 800ea98:	f7ff ff3c 	bl	800e914 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ea9c:	2001      	movs	r0, #1
 800ea9e:	f7fd fb91 	bl	800c1c4 <memp_malloc>
 800eaa2:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800eaa4:	68fb      	ldr	r3, [r7, #12]
 800eaa6:	2b00      	cmp	r3, #0
 800eaa8:	d107      	bne.n	800eaba <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800eaaa:	79fb      	ldrb	r3, [r7, #7]
 800eaac:	4618      	mov	r0, r3
 800eaae:	f7ff fee3 	bl	800e878 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800eab2:	2001      	movs	r0, #1
 800eab4:	f7fd fb86 	bl	800c1c4 <memp_malloc>
 800eab8:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800eaba:	68fb      	ldr	r3, [r7, #12]
 800eabc:	2b00      	cmp	r3, #0
 800eabe:	d03f      	beq.n	800eb40 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800eac0:	229c      	movs	r2, #156	; 0x9c
 800eac2:	2100      	movs	r1, #0
 800eac4:	68f8      	ldr	r0, [r7, #12]
 800eac6:	f008 f9c2 	bl	8016e4e <memset>
    pcb->prio = prio;
 800eaca:	68fb      	ldr	r3, [r7, #12]
 800eacc:	79fa      	ldrb	r2, [r7, #7]
 800eace:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800ead0:	68fb      	ldr	r3, [r7, #12]
 800ead2:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800ead6:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800eada:	68fb      	ldr	r3, [r7, #12]
 800eadc:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800eae0:	855a      	strh	r2, [r3, #42]	; 0x2a
 800eae2:	68fb      	ldr	r3, [r7, #12]
 800eae4:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800eae6:	68fb      	ldr	r3, [r7, #12]
 800eae8:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800eaea:	68fb      	ldr	r3, [r7, #12]
 800eaec:	22ff      	movs	r2, #255	; 0xff
 800eaee:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800eaf0:	68fb      	ldr	r3, [r7, #12]
 800eaf2:	f44f 7206 	mov.w	r2, #536	; 0x218
 800eaf6:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800eaf8:	68fb      	ldr	r3, [r7, #12]
 800eafa:	2206      	movs	r2, #6
 800eafc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800eb00:	68fb      	ldr	r3, [r7, #12]
 800eb02:	2206      	movs	r2, #6
 800eb04:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800eb06:	68fb      	ldr	r3, [r7, #12]
 800eb08:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800eb0c:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800eb0e:	68fb      	ldr	r3, [r7, #12]
 800eb10:	2201      	movs	r2, #1
 800eb12:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800eb16:	4b0d      	ldr	r3, [pc, #52]	; (800eb4c <tcp_alloc+0xf8>)
 800eb18:	681a      	ldr	r2, [r3, #0]
 800eb1a:	68fb      	ldr	r3, [r7, #12]
 800eb1c:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800eb1e:	4b0c      	ldr	r3, [pc, #48]	; (800eb50 <tcp_alloc+0xfc>)
 800eb20:	781a      	ldrb	r2, [r3, #0]
 800eb22:	68fb      	ldr	r3, [r7, #12]
 800eb24:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800eb26:	68fb      	ldr	r3, [r7, #12]
 800eb28:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800eb2c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800eb30:	68fb      	ldr	r3, [r7, #12]
 800eb32:	4a08      	ldr	r2, [pc, #32]	; (800eb54 <tcp_alloc+0x100>)
 800eb34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800eb38:	68fb      	ldr	r3, [r7, #12]
 800eb3a:	4a07      	ldr	r2, [pc, #28]	; (800eb58 <tcp_alloc+0x104>)
 800eb3c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800eb40:	68fb      	ldr	r3, [r7, #12]
}
 800eb42:	4618      	mov	r0, r3
 800eb44:	3710      	adds	r7, #16
 800eb46:	46bd      	mov	sp, r7
 800eb48:	bd80      	pop	{r7, pc}
 800eb4a:	bf00      	nop
 800eb4c:	2000d400 	.word	0x2000d400
 800eb50:	200047c2 	.word	0x200047c2
 800eb54:	0800e80d 	.word	0x0800e80d
 800eb58:	006ddd00 	.word	0x006ddd00

0800eb5c <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 800eb5c:	b580      	push	{r7, lr}
 800eb5e:	b084      	sub	sp, #16
 800eb60:	af00      	add	r7, sp, #0
 800eb62:	4603      	mov	r3, r0
 800eb64:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 800eb66:	2040      	movs	r0, #64	; 0x40
 800eb68:	f7ff ff74 	bl	800ea54 <tcp_alloc>
 800eb6c:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 800eb6e:	68fb      	ldr	r3, [r7, #12]
}
 800eb70:	4618      	mov	r0, r3
 800eb72:	3710      	adds	r7, #16
 800eb74:	46bd      	mov	sp, r7
 800eb76:	bd80      	pop	{r7, pc}

0800eb78 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 800eb78:	b480      	push	{r7}
 800eb7a:	b083      	sub	sp, #12
 800eb7c:	af00      	add	r7, sp, #0
 800eb7e:	6078      	str	r0, [r7, #4]
 800eb80:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	2b00      	cmp	r3, #0
 800eb86:	d002      	beq.n	800eb8e <tcp_arg+0x16>
    pcb->callback_arg = arg;
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	683a      	ldr	r2, [r7, #0]
 800eb8c:	611a      	str	r2, [r3, #16]
  }
}
 800eb8e:	bf00      	nop
 800eb90:	370c      	adds	r7, #12
 800eb92:	46bd      	mov	sp, r7
 800eb94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb98:	4770      	bx	lr
	...

0800eb9c <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800eb9c:	b580      	push	{r7, lr}
 800eb9e:	b082      	sub	sp, #8
 800eba0:	af00      	add	r7, sp, #0
 800eba2:	6078      	str	r0, [r7, #4]
 800eba4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	2b00      	cmp	r3, #0
 800ebaa:	d00e      	beq.n	800ebca <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	7d1b      	ldrb	r3, [r3, #20]
 800ebb0:	2b01      	cmp	r3, #1
 800ebb2:	d106      	bne.n	800ebc2 <tcp_recv+0x26>
 800ebb4:	4b07      	ldr	r3, [pc, #28]	; (800ebd4 <tcp_recv+0x38>)
 800ebb6:	f240 72df 	movw	r2, #2015	; 0x7df
 800ebba:	4907      	ldr	r1, [pc, #28]	; (800ebd8 <tcp_recv+0x3c>)
 800ebbc:	4807      	ldr	r0, [pc, #28]	; (800ebdc <tcp_recv+0x40>)
 800ebbe:	f008 f94f 	bl	8016e60 <iprintf>
    pcb->recv = recv;
 800ebc2:	687b      	ldr	r3, [r7, #4]
 800ebc4:	683a      	ldr	r2, [r7, #0]
 800ebc6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 800ebca:	bf00      	nop
 800ebcc:	3708      	adds	r7, #8
 800ebce:	46bd      	mov	sp, r7
 800ebd0:	bd80      	pop	{r7, pc}
 800ebd2:	bf00      	nop
 800ebd4:	08019ac4 	.word	0x08019ac4
 800ebd8:	0801a060 	.word	0x0801a060
 800ebdc:	08019b08 	.word	0x08019b08

0800ebe0 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800ebe0:	b580      	push	{r7, lr}
 800ebe2:	b082      	sub	sp, #8
 800ebe4:	af00      	add	r7, sp, #0
 800ebe6:	6078      	str	r0, [r7, #4]
 800ebe8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	2b00      	cmp	r3, #0
 800ebee:	d00e      	beq.n	800ec0e <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	7d1b      	ldrb	r3, [r3, #20]
 800ebf4:	2b01      	cmp	r3, #1
 800ebf6:	d106      	bne.n	800ec06 <tcp_sent+0x26>
 800ebf8:	4b07      	ldr	r3, [pc, #28]	; (800ec18 <tcp_sent+0x38>)
 800ebfa:	f240 72f3 	movw	r2, #2035	; 0x7f3
 800ebfe:	4907      	ldr	r1, [pc, #28]	; (800ec1c <tcp_sent+0x3c>)
 800ec00:	4807      	ldr	r0, [pc, #28]	; (800ec20 <tcp_sent+0x40>)
 800ec02:	f008 f92d 	bl	8016e60 <iprintf>
    pcb->sent = sent;
 800ec06:	687b      	ldr	r3, [r7, #4]
 800ec08:	683a      	ldr	r2, [r7, #0]
 800ec0a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 800ec0e:	bf00      	nop
 800ec10:	3708      	adds	r7, #8
 800ec12:	46bd      	mov	sp, r7
 800ec14:	bd80      	pop	{r7, pc}
 800ec16:	bf00      	nop
 800ec18:	08019ac4 	.word	0x08019ac4
 800ec1c:	0801a088 	.word	0x0801a088
 800ec20:	08019b08 	.word	0x08019b08

0800ec24 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800ec24:	b580      	push	{r7, lr}
 800ec26:	b082      	sub	sp, #8
 800ec28:	af00      	add	r7, sp, #0
 800ec2a:	6078      	str	r0, [r7, #4]
 800ec2c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800ec2e:	687b      	ldr	r3, [r7, #4]
 800ec30:	2b00      	cmp	r3, #0
 800ec32:	d00e      	beq.n	800ec52 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	7d1b      	ldrb	r3, [r3, #20]
 800ec38:	2b01      	cmp	r3, #1
 800ec3a:	d106      	bne.n	800ec4a <tcp_err+0x26>
 800ec3c:	4b07      	ldr	r3, [pc, #28]	; (800ec5c <tcp_err+0x38>)
 800ec3e:	f640 020d 	movw	r2, #2061	; 0x80d
 800ec42:	4907      	ldr	r1, [pc, #28]	; (800ec60 <tcp_err+0x3c>)
 800ec44:	4807      	ldr	r0, [pc, #28]	; (800ec64 <tcp_err+0x40>)
 800ec46:	f008 f90b 	bl	8016e60 <iprintf>
    pcb->errf = err;
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	683a      	ldr	r2, [r7, #0]
 800ec4e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 800ec52:	bf00      	nop
 800ec54:	3708      	adds	r7, #8
 800ec56:	46bd      	mov	sp, r7
 800ec58:	bd80      	pop	{r7, pc}
 800ec5a:	bf00      	nop
 800ec5c:	08019ac4 	.word	0x08019ac4
 800ec60:	0801a0b0 	.word	0x0801a0b0
 800ec64:	08019b08 	.word	0x08019b08

0800ec68 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 800ec68:	b480      	push	{r7}
 800ec6a:	b085      	sub	sp, #20
 800ec6c:	af00      	add	r7, sp, #0
 800ec6e:	6078      	str	r0, [r7, #4]
 800ec70:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	2b00      	cmp	r3, #0
 800ec76:	d008      	beq.n	800ec8a <tcp_accept+0x22>
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	7d1b      	ldrb	r3, [r3, #20]
 800ec7c:	2b01      	cmp	r3, #1
 800ec7e:	d104      	bne.n	800ec8a <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 800ec80:	687b      	ldr	r3, [r7, #4]
 800ec82:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 800ec84:	68fb      	ldr	r3, [r7, #12]
 800ec86:	683a      	ldr	r2, [r7, #0]
 800ec88:	619a      	str	r2, [r3, #24]
  }
}
 800ec8a:	bf00      	nop
 800ec8c:	3714      	adds	r7, #20
 800ec8e:	46bd      	mov	sp, r7
 800ec90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec94:	4770      	bx	lr
	...

0800ec98 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800ec98:	b580      	push	{r7, lr}
 800ec9a:	b084      	sub	sp, #16
 800ec9c:	af00      	add	r7, sp, #0
 800ec9e:	60f8      	str	r0, [r7, #12]
 800eca0:	60b9      	str	r1, [r7, #8]
 800eca2:	4613      	mov	r3, r2
 800eca4:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800eca6:	68fb      	ldr	r3, [r7, #12]
 800eca8:	2b00      	cmp	r3, #0
 800ecaa:	d107      	bne.n	800ecbc <tcp_poll+0x24>
 800ecac:	4b0e      	ldr	r3, [pc, #56]	; (800ece8 <tcp_poll+0x50>)
 800ecae:	f640 023d 	movw	r2, #2109	; 0x83d
 800ecb2:	490e      	ldr	r1, [pc, #56]	; (800ecec <tcp_poll+0x54>)
 800ecb4:	480e      	ldr	r0, [pc, #56]	; (800ecf0 <tcp_poll+0x58>)
 800ecb6:	f008 f8d3 	bl	8016e60 <iprintf>
 800ecba:	e011      	b.n	800ece0 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800ecbc:	68fb      	ldr	r3, [r7, #12]
 800ecbe:	7d1b      	ldrb	r3, [r3, #20]
 800ecc0:	2b01      	cmp	r3, #1
 800ecc2:	d106      	bne.n	800ecd2 <tcp_poll+0x3a>
 800ecc4:	4b08      	ldr	r3, [pc, #32]	; (800ece8 <tcp_poll+0x50>)
 800ecc6:	f640 023e 	movw	r2, #2110	; 0x83e
 800ecca:	490a      	ldr	r1, [pc, #40]	; (800ecf4 <tcp_poll+0x5c>)
 800eccc:	4808      	ldr	r0, [pc, #32]	; (800ecf0 <tcp_poll+0x58>)
 800ecce:	f008 f8c7 	bl	8016e60 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800ecd2:	68fb      	ldr	r3, [r7, #12]
 800ecd4:	68ba      	ldr	r2, [r7, #8]
 800ecd6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800ecda:	68fb      	ldr	r3, [r7, #12]
 800ecdc:	79fa      	ldrb	r2, [r7, #7]
 800ecde:	775a      	strb	r2, [r3, #29]
}
 800ece0:	3710      	adds	r7, #16
 800ece2:	46bd      	mov	sp, r7
 800ece4:	bd80      	pop	{r7, pc}
 800ece6:	bf00      	nop
 800ece8:	08019ac4 	.word	0x08019ac4
 800ecec:	0801a0d8 	.word	0x0801a0d8
 800ecf0:	08019b08 	.word	0x08019b08
 800ecf4:	0801a0f0 	.word	0x0801a0f0

0800ecf8 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800ecf8:	b580      	push	{r7, lr}
 800ecfa:	b082      	sub	sp, #8
 800ecfc:	af00      	add	r7, sp, #0
 800ecfe:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800ed00:	687b      	ldr	r3, [r7, #4]
 800ed02:	2b00      	cmp	r3, #0
 800ed04:	d107      	bne.n	800ed16 <tcp_pcb_purge+0x1e>
 800ed06:	4b21      	ldr	r3, [pc, #132]	; (800ed8c <tcp_pcb_purge+0x94>)
 800ed08:	f640 0251 	movw	r2, #2129	; 0x851
 800ed0c:	4920      	ldr	r1, [pc, #128]	; (800ed90 <tcp_pcb_purge+0x98>)
 800ed0e:	4821      	ldr	r0, [pc, #132]	; (800ed94 <tcp_pcb_purge+0x9c>)
 800ed10:	f008 f8a6 	bl	8016e60 <iprintf>
 800ed14:	e037      	b.n	800ed86 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800ed16:	687b      	ldr	r3, [r7, #4]
 800ed18:	7d1b      	ldrb	r3, [r3, #20]
 800ed1a:	2b00      	cmp	r3, #0
 800ed1c:	d033      	beq.n	800ed86 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800ed22:	2b0a      	cmp	r3, #10
 800ed24:	d02f      	beq.n	800ed86 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800ed2a:	2b01      	cmp	r3, #1
 800ed2c:	d02b      	beq.n	800ed86 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ed32:	2b00      	cmp	r3, #0
 800ed34:	d007      	beq.n	800ed46 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ed3a:	4618      	mov	r0, r3
 800ed3c:	f7fe f966 	bl	800d00c <pbuf_free>
      pcb->refused_data = NULL;
 800ed40:	687b      	ldr	r3, [r7, #4]
 800ed42:	2200      	movs	r2, #0
 800ed44:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ed4a:	2b00      	cmp	r3, #0
 800ed4c:	d002      	beq.n	800ed54 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800ed4e:	6878      	ldr	r0, [r7, #4]
 800ed50:	f000 f986 	bl	800f060 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ed5a:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ed60:	4618      	mov	r0, r3
 800ed62:	f7ff fcfb 	bl	800e75c <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ed6a:	4618      	mov	r0, r3
 800ed6c:	f7ff fcf6 	bl	800e75c <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	2200      	movs	r2, #0
 800ed74:	66da      	str	r2, [r3, #108]	; 0x6c
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	2200      	movs	r2, #0
 800ed82:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800ed86:	3708      	adds	r7, #8
 800ed88:	46bd      	mov	sp, r7
 800ed8a:	bd80      	pop	{r7, pc}
 800ed8c:	08019ac4 	.word	0x08019ac4
 800ed90:	0801a110 	.word	0x0801a110
 800ed94:	08019b08 	.word	0x08019b08

0800ed98 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800ed98:	b580      	push	{r7, lr}
 800ed9a:	b084      	sub	sp, #16
 800ed9c:	af00      	add	r7, sp, #0
 800ed9e:	6078      	str	r0, [r7, #4]
 800eda0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800eda2:	683b      	ldr	r3, [r7, #0]
 800eda4:	2b00      	cmp	r3, #0
 800eda6:	d106      	bne.n	800edb6 <tcp_pcb_remove+0x1e>
 800eda8:	4b3e      	ldr	r3, [pc, #248]	; (800eea4 <tcp_pcb_remove+0x10c>)
 800edaa:	f640 0283 	movw	r2, #2179	; 0x883
 800edae:	493e      	ldr	r1, [pc, #248]	; (800eea8 <tcp_pcb_remove+0x110>)
 800edb0:	483e      	ldr	r0, [pc, #248]	; (800eeac <tcp_pcb_remove+0x114>)
 800edb2:	f008 f855 	bl	8016e60 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	2b00      	cmp	r3, #0
 800edba:	d106      	bne.n	800edca <tcp_pcb_remove+0x32>
 800edbc:	4b39      	ldr	r3, [pc, #228]	; (800eea4 <tcp_pcb_remove+0x10c>)
 800edbe:	f640 0284 	movw	r2, #2180	; 0x884
 800edc2:	493b      	ldr	r1, [pc, #236]	; (800eeb0 <tcp_pcb_remove+0x118>)
 800edc4:	4839      	ldr	r0, [pc, #228]	; (800eeac <tcp_pcb_remove+0x114>)
 800edc6:	f008 f84b 	bl	8016e60 <iprintf>

  TCP_RMV(pcblist, pcb);
 800edca:	687b      	ldr	r3, [r7, #4]
 800edcc:	681b      	ldr	r3, [r3, #0]
 800edce:	683a      	ldr	r2, [r7, #0]
 800edd0:	429a      	cmp	r2, r3
 800edd2:	d105      	bne.n	800ede0 <tcp_pcb_remove+0x48>
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	681b      	ldr	r3, [r3, #0]
 800edd8:	68da      	ldr	r2, [r3, #12]
 800edda:	687b      	ldr	r3, [r7, #4]
 800eddc:	601a      	str	r2, [r3, #0]
 800edde:	e013      	b.n	800ee08 <tcp_pcb_remove+0x70>
 800ede0:	687b      	ldr	r3, [r7, #4]
 800ede2:	681b      	ldr	r3, [r3, #0]
 800ede4:	60fb      	str	r3, [r7, #12]
 800ede6:	e00c      	b.n	800ee02 <tcp_pcb_remove+0x6a>
 800ede8:	68fb      	ldr	r3, [r7, #12]
 800edea:	68db      	ldr	r3, [r3, #12]
 800edec:	683a      	ldr	r2, [r7, #0]
 800edee:	429a      	cmp	r2, r3
 800edf0:	d104      	bne.n	800edfc <tcp_pcb_remove+0x64>
 800edf2:	683b      	ldr	r3, [r7, #0]
 800edf4:	68da      	ldr	r2, [r3, #12]
 800edf6:	68fb      	ldr	r3, [r7, #12]
 800edf8:	60da      	str	r2, [r3, #12]
 800edfa:	e005      	b.n	800ee08 <tcp_pcb_remove+0x70>
 800edfc:	68fb      	ldr	r3, [r7, #12]
 800edfe:	68db      	ldr	r3, [r3, #12]
 800ee00:	60fb      	str	r3, [r7, #12]
 800ee02:	68fb      	ldr	r3, [r7, #12]
 800ee04:	2b00      	cmp	r3, #0
 800ee06:	d1ef      	bne.n	800ede8 <tcp_pcb_remove+0x50>
 800ee08:	683b      	ldr	r3, [r7, #0]
 800ee0a:	2200      	movs	r2, #0
 800ee0c:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800ee0e:	6838      	ldr	r0, [r7, #0]
 800ee10:	f7ff ff72 	bl	800ecf8 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800ee14:	683b      	ldr	r3, [r7, #0]
 800ee16:	7d1b      	ldrb	r3, [r3, #20]
 800ee18:	2b0a      	cmp	r3, #10
 800ee1a:	d013      	beq.n	800ee44 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800ee1c:	683b      	ldr	r3, [r7, #0]
 800ee1e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800ee20:	2b01      	cmp	r3, #1
 800ee22:	d00f      	beq.n	800ee44 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800ee24:	683b      	ldr	r3, [r7, #0]
 800ee26:	8b5b      	ldrh	r3, [r3, #26]
 800ee28:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800ee2c:	2b00      	cmp	r3, #0
 800ee2e:	d009      	beq.n	800ee44 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800ee30:	683b      	ldr	r3, [r7, #0]
 800ee32:	8b5b      	ldrh	r3, [r3, #26]
 800ee34:	f043 0302 	orr.w	r3, r3, #2
 800ee38:	b29a      	uxth	r2, r3
 800ee3a:	683b      	ldr	r3, [r7, #0]
 800ee3c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800ee3e:	6838      	ldr	r0, [r7, #0]
 800ee40:	f003 fbc2 	bl	80125c8 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800ee44:	683b      	ldr	r3, [r7, #0]
 800ee46:	7d1b      	ldrb	r3, [r3, #20]
 800ee48:	2b01      	cmp	r3, #1
 800ee4a:	d020      	beq.n	800ee8e <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800ee4c:	683b      	ldr	r3, [r7, #0]
 800ee4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ee50:	2b00      	cmp	r3, #0
 800ee52:	d006      	beq.n	800ee62 <tcp_pcb_remove+0xca>
 800ee54:	4b13      	ldr	r3, [pc, #76]	; (800eea4 <tcp_pcb_remove+0x10c>)
 800ee56:	f640 0293 	movw	r2, #2195	; 0x893
 800ee5a:	4916      	ldr	r1, [pc, #88]	; (800eeb4 <tcp_pcb_remove+0x11c>)
 800ee5c:	4813      	ldr	r0, [pc, #76]	; (800eeac <tcp_pcb_remove+0x114>)
 800ee5e:	f007 ffff 	bl	8016e60 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800ee62:	683b      	ldr	r3, [r7, #0]
 800ee64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ee66:	2b00      	cmp	r3, #0
 800ee68:	d006      	beq.n	800ee78 <tcp_pcb_remove+0xe0>
 800ee6a:	4b0e      	ldr	r3, [pc, #56]	; (800eea4 <tcp_pcb_remove+0x10c>)
 800ee6c:	f640 0294 	movw	r2, #2196	; 0x894
 800ee70:	4911      	ldr	r1, [pc, #68]	; (800eeb8 <tcp_pcb_remove+0x120>)
 800ee72:	480e      	ldr	r0, [pc, #56]	; (800eeac <tcp_pcb_remove+0x114>)
 800ee74:	f007 fff4 	bl	8016e60 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800ee78:	683b      	ldr	r3, [r7, #0]
 800ee7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ee7c:	2b00      	cmp	r3, #0
 800ee7e:	d006      	beq.n	800ee8e <tcp_pcb_remove+0xf6>
 800ee80:	4b08      	ldr	r3, [pc, #32]	; (800eea4 <tcp_pcb_remove+0x10c>)
 800ee82:	f640 0296 	movw	r2, #2198	; 0x896
 800ee86:	490d      	ldr	r1, [pc, #52]	; (800eebc <tcp_pcb_remove+0x124>)
 800ee88:	4808      	ldr	r0, [pc, #32]	; (800eeac <tcp_pcb_remove+0x114>)
 800ee8a:	f007 ffe9 	bl	8016e60 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800ee8e:	683b      	ldr	r3, [r7, #0]
 800ee90:	2200      	movs	r2, #0
 800ee92:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800ee94:	683b      	ldr	r3, [r7, #0]
 800ee96:	2200      	movs	r2, #0
 800ee98:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800ee9a:	bf00      	nop
 800ee9c:	3710      	adds	r7, #16
 800ee9e:	46bd      	mov	sp, r7
 800eea0:	bd80      	pop	{r7, pc}
 800eea2:	bf00      	nop
 800eea4:	08019ac4 	.word	0x08019ac4
 800eea8:	0801a12c 	.word	0x0801a12c
 800eeac:	08019b08 	.word	0x08019b08
 800eeb0:	0801a148 	.word	0x0801a148
 800eeb4:	0801a168 	.word	0x0801a168
 800eeb8:	0801a180 	.word	0x0801a180
 800eebc:	0801a19c 	.word	0x0801a19c

0800eec0 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800eec0:	b580      	push	{r7, lr}
 800eec2:	b082      	sub	sp, #8
 800eec4:	af00      	add	r7, sp, #0
 800eec6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	2b00      	cmp	r3, #0
 800eecc:	d106      	bne.n	800eedc <tcp_next_iss+0x1c>
 800eece:	4b0a      	ldr	r3, [pc, #40]	; (800eef8 <tcp_next_iss+0x38>)
 800eed0:	f640 02af 	movw	r2, #2223	; 0x8af
 800eed4:	4909      	ldr	r1, [pc, #36]	; (800eefc <tcp_next_iss+0x3c>)
 800eed6:	480a      	ldr	r0, [pc, #40]	; (800ef00 <tcp_next_iss+0x40>)
 800eed8:	f007 ffc2 	bl	8016e60 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800eedc:	4b09      	ldr	r3, [pc, #36]	; (800ef04 <tcp_next_iss+0x44>)
 800eede:	681a      	ldr	r2, [r3, #0]
 800eee0:	4b09      	ldr	r3, [pc, #36]	; (800ef08 <tcp_next_iss+0x48>)
 800eee2:	681b      	ldr	r3, [r3, #0]
 800eee4:	4413      	add	r3, r2
 800eee6:	4a07      	ldr	r2, [pc, #28]	; (800ef04 <tcp_next_iss+0x44>)
 800eee8:	6013      	str	r3, [r2, #0]
  return iss;
 800eeea:	4b06      	ldr	r3, [pc, #24]	; (800ef04 <tcp_next_iss+0x44>)
 800eeec:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800eeee:	4618      	mov	r0, r3
 800eef0:	3708      	adds	r7, #8
 800eef2:	46bd      	mov	sp, r7
 800eef4:	bd80      	pop	{r7, pc}
 800eef6:	bf00      	nop
 800eef8:	08019ac4 	.word	0x08019ac4
 800eefc:	0801a1b4 	.word	0x0801a1b4
 800ef00:	08019b08 	.word	0x08019b08
 800ef04:	20000014 	.word	0x20000014
 800ef08:	2000d400 	.word	0x2000d400

0800ef0c <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800ef0c:	b580      	push	{r7, lr}
 800ef0e:	b086      	sub	sp, #24
 800ef10:	af00      	add	r7, sp, #0
 800ef12:	4603      	mov	r3, r0
 800ef14:	60b9      	str	r1, [r7, #8]
 800ef16:	607a      	str	r2, [r7, #4]
 800ef18:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	2b00      	cmp	r3, #0
 800ef1e:	d106      	bne.n	800ef2e <tcp_eff_send_mss_netif+0x22>
 800ef20:	4b14      	ldr	r3, [pc, #80]	; (800ef74 <tcp_eff_send_mss_netif+0x68>)
 800ef22:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800ef26:	4914      	ldr	r1, [pc, #80]	; (800ef78 <tcp_eff_send_mss_netif+0x6c>)
 800ef28:	4814      	ldr	r0, [pc, #80]	; (800ef7c <tcp_eff_send_mss_netif+0x70>)
 800ef2a:	f007 ff99 	bl	8016e60 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800ef2e:	68bb      	ldr	r3, [r7, #8]
 800ef30:	2b00      	cmp	r3, #0
 800ef32:	d101      	bne.n	800ef38 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800ef34:	89fb      	ldrh	r3, [r7, #14]
 800ef36:	e019      	b.n	800ef6c <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800ef38:	68bb      	ldr	r3, [r7, #8]
 800ef3a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800ef3c:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800ef3e:	8afb      	ldrh	r3, [r7, #22]
 800ef40:	2b00      	cmp	r3, #0
 800ef42:	d012      	beq.n	800ef6a <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800ef44:	2328      	movs	r3, #40	; 0x28
 800ef46:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800ef48:	8afa      	ldrh	r2, [r7, #22]
 800ef4a:	8abb      	ldrh	r3, [r7, #20]
 800ef4c:	429a      	cmp	r2, r3
 800ef4e:	d904      	bls.n	800ef5a <tcp_eff_send_mss_netif+0x4e>
 800ef50:	8afa      	ldrh	r2, [r7, #22]
 800ef52:	8abb      	ldrh	r3, [r7, #20]
 800ef54:	1ad3      	subs	r3, r2, r3
 800ef56:	b29b      	uxth	r3, r3
 800ef58:	e000      	b.n	800ef5c <tcp_eff_send_mss_netif+0x50>
 800ef5a:	2300      	movs	r3, #0
 800ef5c:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800ef5e:	8a7a      	ldrh	r2, [r7, #18]
 800ef60:	89fb      	ldrh	r3, [r7, #14]
 800ef62:	4293      	cmp	r3, r2
 800ef64:	bf28      	it	cs
 800ef66:	4613      	movcs	r3, r2
 800ef68:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800ef6a:	89fb      	ldrh	r3, [r7, #14]
}
 800ef6c:	4618      	mov	r0, r3
 800ef6e:	3718      	adds	r7, #24
 800ef70:	46bd      	mov	sp, r7
 800ef72:	bd80      	pop	{r7, pc}
 800ef74:	08019ac4 	.word	0x08019ac4
 800ef78:	0801a1d0 	.word	0x0801a1d0
 800ef7c:	08019b08 	.word	0x08019b08

0800ef80 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800ef80:	b580      	push	{r7, lr}
 800ef82:	b084      	sub	sp, #16
 800ef84:	af00      	add	r7, sp, #0
 800ef86:	6078      	str	r0, [r7, #4]
 800ef88:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800ef8a:	683b      	ldr	r3, [r7, #0]
 800ef8c:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	2b00      	cmp	r3, #0
 800ef92:	d119      	bne.n	800efc8 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800ef94:	4b10      	ldr	r3, [pc, #64]	; (800efd8 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800ef96:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800ef9a:	4910      	ldr	r1, [pc, #64]	; (800efdc <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800ef9c:	4810      	ldr	r0, [pc, #64]	; (800efe0 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800ef9e:	f007 ff5f 	bl	8016e60 <iprintf>

  while (pcb != NULL) {
 800efa2:	e011      	b.n	800efc8 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800efa4:	68fb      	ldr	r3, [r7, #12]
 800efa6:	681a      	ldr	r2, [r3, #0]
 800efa8:	687b      	ldr	r3, [r7, #4]
 800efaa:	681b      	ldr	r3, [r3, #0]
 800efac:	429a      	cmp	r2, r3
 800efae:	d108      	bne.n	800efc2 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800efb0:	68fb      	ldr	r3, [r7, #12]
 800efb2:	68db      	ldr	r3, [r3, #12]
 800efb4:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800efb6:	68f8      	ldr	r0, [r7, #12]
 800efb8:	f7fe fe1e 	bl	800dbf8 <tcp_abort>
      pcb = next;
 800efbc:	68bb      	ldr	r3, [r7, #8]
 800efbe:	60fb      	str	r3, [r7, #12]
 800efc0:	e002      	b.n	800efc8 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800efc2:	68fb      	ldr	r3, [r7, #12]
 800efc4:	68db      	ldr	r3, [r3, #12]
 800efc6:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800efc8:	68fb      	ldr	r3, [r7, #12]
 800efca:	2b00      	cmp	r3, #0
 800efcc:	d1ea      	bne.n	800efa4 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800efce:	bf00      	nop
 800efd0:	3710      	adds	r7, #16
 800efd2:	46bd      	mov	sp, r7
 800efd4:	bd80      	pop	{r7, pc}
 800efd6:	bf00      	nop
 800efd8:	08019ac4 	.word	0x08019ac4
 800efdc:	0801a1f8 	.word	0x0801a1f8
 800efe0:	08019b08 	.word	0x08019b08

0800efe4 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800efe4:	b580      	push	{r7, lr}
 800efe6:	b084      	sub	sp, #16
 800efe8:	af00      	add	r7, sp, #0
 800efea:	6078      	str	r0, [r7, #4]
 800efec:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800efee:	687b      	ldr	r3, [r7, #4]
 800eff0:	2b00      	cmp	r3, #0
 800eff2:	d02a      	beq.n	800f04a <tcp_netif_ip_addr_changed+0x66>
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	681b      	ldr	r3, [r3, #0]
 800eff8:	2b00      	cmp	r3, #0
 800effa:	d026      	beq.n	800f04a <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800effc:	4b15      	ldr	r3, [pc, #84]	; (800f054 <tcp_netif_ip_addr_changed+0x70>)
 800effe:	681b      	ldr	r3, [r3, #0]
 800f000:	4619      	mov	r1, r3
 800f002:	6878      	ldr	r0, [r7, #4]
 800f004:	f7ff ffbc 	bl	800ef80 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800f008:	4b13      	ldr	r3, [pc, #76]	; (800f058 <tcp_netif_ip_addr_changed+0x74>)
 800f00a:	681b      	ldr	r3, [r3, #0]
 800f00c:	4619      	mov	r1, r3
 800f00e:	6878      	ldr	r0, [r7, #4]
 800f010:	f7ff ffb6 	bl	800ef80 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800f014:	683b      	ldr	r3, [r7, #0]
 800f016:	2b00      	cmp	r3, #0
 800f018:	d017      	beq.n	800f04a <tcp_netif_ip_addr_changed+0x66>
 800f01a:	683b      	ldr	r3, [r7, #0]
 800f01c:	681b      	ldr	r3, [r3, #0]
 800f01e:	2b00      	cmp	r3, #0
 800f020:	d013      	beq.n	800f04a <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f022:	4b0e      	ldr	r3, [pc, #56]	; (800f05c <tcp_netif_ip_addr_changed+0x78>)
 800f024:	681b      	ldr	r3, [r3, #0]
 800f026:	60fb      	str	r3, [r7, #12]
 800f028:	e00c      	b.n	800f044 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800f02a:	68fb      	ldr	r3, [r7, #12]
 800f02c:	681a      	ldr	r2, [r3, #0]
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	681b      	ldr	r3, [r3, #0]
 800f032:	429a      	cmp	r2, r3
 800f034:	d103      	bne.n	800f03e <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800f036:	683b      	ldr	r3, [r7, #0]
 800f038:	681a      	ldr	r2, [r3, #0]
 800f03a:	68fb      	ldr	r3, [r7, #12]
 800f03c:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f03e:	68fb      	ldr	r3, [r7, #12]
 800f040:	68db      	ldr	r3, [r3, #12]
 800f042:	60fb      	str	r3, [r7, #12]
 800f044:	68fb      	ldr	r3, [r7, #12]
 800f046:	2b00      	cmp	r3, #0
 800f048:	d1ef      	bne.n	800f02a <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800f04a:	bf00      	nop
 800f04c:	3710      	adds	r7, #16
 800f04e:	46bd      	mov	sp, r7
 800f050:	bd80      	pop	{r7, pc}
 800f052:	bf00      	nop
 800f054:	2000d3fc 	.word	0x2000d3fc
 800f058:	2000d408 	.word	0x2000d408
 800f05c:	2000d404 	.word	0x2000d404

0800f060 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800f060:	b580      	push	{r7, lr}
 800f062:	b082      	sub	sp, #8
 800f064:	af00      	add	r7, sp, #0
 800f066:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f06c:	2b00      	cmp	r3, #0
 800f06e:	d007      	beq.n	800f080 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800f070:	687b      	ldr	r3, [r7, #4]
 800f072:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f074:	4618      	mov	r0, r3
 800f076:	f7ff fb71 	bl	800e75c <tcp_segs_free>
    pcb->ooseq = NULL;
 800f07a:	687b      	ldr	r3, [r7, #4]
 800f07c:	2200      	movs	r2, #0
 800f07e:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800f080:	bf00      	nop
 800f082:	3708      	adds	r7, #8
 800f084:	46bd      	mov	sp, r7
 800f086:	bd80      	pop	{r7, pc}

0800f088 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800f088:	b590      	push	{r4, r7, lr}
 800f08a:	b08d      	sub	sp, #52	; 0x34
 800f08c:	af04      	add	r7, sp, #16
 800f08e:	6078      	str	r0, [r7, #4]
 800f090:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800f092:	687b      	ldr	r3, [r7, #4]
 800f094:	2b00      	cmp	r3, #0
 800f096:	d105      	bne.n	800f0a4 <tcp_input+0x1c>
 800f098:	4b9b      	ldr	r3, [pc, #620]	; (800f308 <tcp_input+0x280>)
 800f09a:	2283      	movs	r2, #131	; 0x83
 800f09c:	499b      	ldr	r1, [pc, #620]	; (800f30c <tcp_input+0x284>)
 800f09e:	489c      	ldr	r0, [pc, #624]	; (800f310 <tcp_input+0x288>)
 800f0a0:	f007 fede 	bl	8016e60 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	685b      	ldr	r3, [r3, #4]
 800f0a8:	4a9a      	ldr	r2, [pc, #616]	; (800f314 <tcp_input+0x28c>)
 800f0aa:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800f0ac:	687b      	ldr	r3, [r7, #4]
 800f0ae:	895b      	ldrh	r3, [r3, #10]
 800f0b0:	2b13      	cmp	r3, #19
 800f0b2:	f240 83c4 	bls.w	800f83e <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800f0b6:	4b98      	ldr	r3, [pc, #608]	; (800f318 <tcp_input+0x290>)
 800f0b8:	695a      	ldr	r2, [r3, #20]
 800f0ba:	4b97      	ldr	r3, [pc, #604]	; (800f318 <tcp_input+0x290>)
 800f0bc:	681b      	ldr	r3, [r3, #0]
 800f0be:	4619      	mov	r1, r3
 800f0c0:	4610      	mov	r0, r2
 800f0c2:	f006 fbd9 	bl	8015878 <ip4_addr_isbroadcast_u32>
 800f0c6:	4603      	mov	r3, r0
 800f0c8:	2b00      	cmp	r3, #0
 800f0ca:	f040 83ba 	bne.w	800f842 <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800f0ce:	4b92      	ldr	r3, [pc, #584]	; (800f318 <tcp_input+0x290>)
 800f0d0:	695b      	ldr	r3, [r3, #20]
 800f0d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800f0d6:	2be0      	cmp	r3, #224	; 0xe0
 800f0d8:	f000 83b3 	beq.w	800f842 <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800f0dc:	4b8d      	ldr	r3, [pc, #564]	; (800f314 <tcp_input+0x28c>)
 800f0de:	681b      	ldr	r3, [r3, #0]
 800f0e0:	899b      	ldrh	r3, [r3, #12]
 800f0e2:	b29b      	uxth	r3, r3
 800f0e4:	4618      	mov	r0, r3
 800f0e6:	f7fc fbb7 	bl	800b858 <lwip_htons>
 800f0ea:	4603      	mov	r3, r0
 800f0ec:	0b1b      	lsrs	r3, r3, #12
 800f0ee:	b29b      	uxth	r3, r3
 800f0f0:	b2db      	uxtb	r3, r3
 800f0f2:	009b      	lsls	r3, r3, #2
 800f0f4:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800f0f6:	7cbb      	ldrb	r3, [r7, #18]
 800f0f8:	2b13      	cmp	r3, #19
 800f0fa:	f240 83a2 	bls.w	800f842 <tcp_input+0x7ba>
 800f0fe:	7cbb      	ldrb	r3, [r7, #18]
 800f100:	b29a      	uxth	r2, r3
 800f102:	687b      	ldr	r3, [r7, #4]
 800f104:	891b      	ldrh	r3, [r3, #8]
 800f106:	429a      	cmp	r2, r3
 800f108:	f200 839b 	bhi.w	800f842 <tcp_input+0x7ba>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800f10c:	7cbb      	ldrb	r3, [r7, #18]
 800f10e:	b29b      	uxth	r3, r3
 800f110:	3b14      	subs	r3, #20
 800f112:	b29a      	uxth	r2, r3
 800f114:	4b81      	ldr	r3, [pc, #516]	; (800f31c <tcp_input+0x294>)
 800f116:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800f118:	4b81      	ldr	r3, [pc, #516]	; (800f320 <tcp_input+0x298>)
 800f11a:	2200      	movs	r2, #0
 800f11c:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800f11e:	687b      	ldr	r3, [r7, #4]
 800f120:	895a      	ldrh	r2, [r3, #10]
 800f122:	7cbb      	ldrb	r3, [r7, #18]
 800f124:	b29b      	uxth	r3, r3
 800f126:	429a      	cmp	r2, r3
 800f128:	d309      	bcc.n	800f13e <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800f12a:	4b7c      	ldr	r3, [pc, #496]	; (800f31c <tcp_input+0x294>)
 800f12c:	881a      	ldrh	r2, [r3, #0]
 800f12e:	4b7d      	ldr	r3, [pc, #500]	; (800f324 <tcp_input+0x29c>)
 800f130:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800f132:	7cbb      	ldrb	r3, [r7, #18]
 800f134:	4619      	mov	r1, r3
 800f136:	6878      	ldr	r0, [r7, #4]
 800f138:	f7fd feb0 	bl	800ce9c <pbuf_remove_header>
 800f13c:	e04e      	b.n	800f1dc <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800f13e:	687b      	ldr	r3, [r7, #4]
 800f140:	681b      	ldr	r3, [r3, #0]
 800f142:	2b00      	cmp	r3, #0
 800f144:	d105      	bne.n	800f152 <tcp_input+0xca>
 800f146:	4b70      	ldr	r3, [pc, #448]	; (800f308 <tcp_input+0x280>)
 800f148:	22c2      	movs	r2, #194	; 0xc2
 800f14a:	4977      	ldr	r1, [pc, #476]	; (800f328 <tcp_input+0x2a0>)
 800f14c:	4870      	ldr	r0, [pc, #448]	; (800f310 <tcp_input+0x288>)
 800f14e:	f007 fe87 	bl	8016e60 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800f152:	2114      	movs	r1, #20
 800f154:	6878      	ldr	r0, [r7, #4]
 800f156:	f7fd fea1 	bl	800ce9c <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800f15a:	687b      	ldr	r3, [r7, #4]
 800f15c:	895a      	ldrh	r2, [r3, #10]
 800f15e:	4b71      	ldr	r3, [pc, #452]	; (800f324 <tcp_input+0x29c>)
 800f160:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800f162:	4b6e      	ldr	r3, [pc, #440]	; (800f31c <tcp_input+0x294>)
 800f164:	881a      	ldrh	r2, [r3, #0]
 800f166:	4b6f      	ldr	r3, [pc, #444]	; (800f324 <tcp_input+0x29c>)
 800f168:	881b      	ldrh	r3, [r3, #0]
 800f16a:	1ad3      	subs	r3, r2, r3
 800f16c:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800f16e:	4b6d      	ldr	r3, [pc, #436]	; (800f324 <tcp_input+0x29c>)
 800f170:	881b      	ldrh	r3, [r3, #0]
 800f172:	4619      	mov	r1, r3
 800f174:	6878      	ldr	r0, [r7, #4]
 800f176:	f7fd fe91 	bl	800ce9c <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800f17a:	687b      	ldr	r3, [r7, #4]
 800f17c:	681b      	ldr	r3, [r3, #0]
 800f17e:	895b      	ldrh	r3, [r3, #10]
 800f180:	8a3a      	ldrh	r2, [r7, #16]
 800f182:	429a      	cmp	r2, r3
 800f184:	f200 835f 	bhi.w	800f846 <tcp_input+0x7be>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800f188:	687b      	ldr	r3, [r7, #4]
 800f18a:	681b      	ldr	r3, [r3, #0]
 800f18c:	685b      	ldr	r3, [r3, #4]
 800f18e:	4a64      	ldr	r2, [pc, #400]	; (800f320 <tcp_input+0x298>)
 800f190:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800f192:	687b      	ldr	r3, [r7, #4]
 800f194:	681b      	ldr	r3, [r3, #0]
 800f196:	8a3a      	ldrh	r2, [r7, #16]
 800f198:	4611      	mov	r1, r2
 800f19a:	4618      	mov	r0, r3
 800f19c:	f7fd fe7e 	bl	800ce9c <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800f1a0:	687b      	ldr	r3, [r7, #4]
 800f1a2:	891a      	ldrh	r2, [r3, #8]
 800f1a4:	8a3b      	ldrh	r3, [r7, #16]
 800f1a6:	1ad3      	subs	r3, r2, r3
 800f1a8:	b29a      	uxth	r2, r3
 800f1aa:	687b      	ldr	r3, [r7, #4]
 800f1ac:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	895b      	ldrh	r3, [r3, #10]
 800f1b2:	2b00      	cmp	r3, #0
 800f1b4:	d005      	beq.n	800f1c2 <tcp_input+0x13a>
 800f1b6:	4b54      	ldr	r3, [pc, #336]	; (800f308 <tcp_input+0x280>)
 800f1b8:	22df      	movs	r2, #223	; 0xdf
 800f1ba:	495c      	ldr	r1, [pc, #368]	; (800f32c <tcp_input+0x2a4>)
 800f1bc:	4854      	ldr	r0, [pc, #336]	; (800f310 <tcp_input+0x288>)
 800f1be:	f007 fe4f 	bl	8016e60 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800f1c2:	687b      	ldr	r3, [r7, #4]
 800f1c4:	891a      	ldrh	r2, [r3, #8]
 800f1c6:	687b      	ldr	r3, [r7, #4]
 800f1c8:	681b      	ldr	r3, [r3, #0]
 800f1ca:	891b      	ldrh	r3, [r3, #8]
 800f1cc:	429a      	cmp	r2, r3
 800f1ce:	d005      	beq.n	800f1dc <tcp_input+0x154>
 800f1d0:	4b4d      	ldr	r3, [pc, #308]	; (800f308 <tcp_input+0x280>)
 800f1d2:	22e0      	movs	r2, #224	; 0xe0
 800f1d4:	4956      	ldr	r1, [pc, #344]	; (800f330 <tcp_input+0x2a8>)
 800f1d6:	484e      	ldr	r0, [pc, #312]	; (800f310 <tcp_input+0x288>)
 800f1d8:	f007 fe42 	bl	8016e60 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800f1dc:	4b4d      	ldr	r3, [pc, #308]	; (800f314 <tcp_input+0x28c>)
 800f1de:	681b      	ldr	r3, [r3, #0]
 800f1e0:	881b      	ldrh	r3, [r3, #0]
 800f1e2:	b29a      	uxth	r2, r3
 800f1e4:	4b4b      	ldr	r3, [pc, #300]	; (800f314 <tcp_input+0x28c>)
 800f1e6:	681c      	ldr	r4, [r3, #0]
 800f1e8:	4610      	mov	r0, r2
 800f1ea:	f7fc fb35 	bl	800b858 <lwip_htons>
 800f1ee:	4603      	mov	r3, r0
 800f1f0:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800f1f2:	4b48      	ldr	r3, [pc, #288]	; (800f314 <tcp_input+0x28c>)
 800f1f4:	681b      	ldr	r3, [r3, #0]
 800f1f6:	885b      	ldrh	r3, [r3, #2]
 800f1f8:	b29a      	uxth	r2, r3
 800f1fa:	4b46      	ldr	r3, [pc, #280]	; (800f314 <tcp_input+0x28c>)
 800f1fc:	681c      	ldr	r4, [r3, #0]
 800f1fe:	4610      	mov	r0, r2
 800f200:	f7fc fb2a 	bl	800b858 <lwip_htons>
 800f204:	4603      	mov	r3, r0
 800f206:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800f208:	4b42      	ldr	r3, [pc, #264]	; (800f314 <tcp_input+0x28c>)
 800f20a:	681b      	ldr	r3, [r3, #0]
 800f20c:	685a      	ldr	r2, [r3, #4]
 800f20e:	4b41      	ldr	r3, [pc, #260]	; (800f314 <tcp_input+0x28c>)
 800f210:	681c      	ldr	r4, [r3, #0]
 800f212:	4610      	mov	r0, r2
 800f214:	f7fc fb35 	bl	800b882 <lwip_htonl>
 800f218:	4603      	mov	r3, r0
 800f21a:	6063      	str	r3, [r4, #4]
 800f21c:	6863      	ldr	r3, [r4, #4]
 800f21e:	4a45      	ldr	r2, [pc, #276]	; (800f334 <tcp_input+0x2ac>)
 800f220:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800f222:	4b3c      	ldr	r3, [pc, #240]	; (800f314 <tcp_input+0x28c>)
 800f224:	681b      	ldr	r3, [r3, #0]
 800f226:	689a      	ldr	r2, [r3, #8]
 800f228:	4b3a      	ldr	r3, [pc, #232]	; (800f314 <tcp_input+0x28c>)
 800f22a:	681c      	ldr	r4, [r3, #0]
 800f22c:	4610      	mov	r0, r2
 800f22e:	f7fc fb28 	bl	800b882 <lwip_htonl>
 800f232:	4603      	mov	r3, r0
 800f234:	60a3      	str	r3, [r4, #8]
 800f236:	68a3      	ldr	r3, [r4, #8]
 800f238:	4a3f      	ldr	r2, [pc, #252]	; (800f338 <tcp_input+0x2b0>)
 800f23a:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800f23c:	4b35      	ldr	r3, [pc, #212]	; (800f314 <tcp_input+0x28c>)
 800f23e:	681b      	ldr	r3, [r3, #0]
 800f240:	89db      	ldrh	r3, [r3, #14]
 800f242:	b29a      	uxth	r2, r3
 800f244:	4b33      	ldr	r3, [pc, #204]	; (800f314 <tcp_input+0x28c>)
 800f246:	681c      	ldr	r4, [r3, #0]
 800f248:	4610      	mov	r0, r2
 800f24a:	f7fc fb05 	bl	800b858 <lwip_htons>
 800f24e:	4603      	mov	r3, r0
 800f250:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800f252:	4b30      	ldr	r3, [pc, #192]	; (800f314 <tcp_input+0x28c>)
 800f254:	681b      	ldr	r3, [r3, #0]
 800f256:	899b      	ldrh	r3, [r3, #12]
 800f258:	b29b      	uxth	r3, r3
 800f25a:	4618      	mov	r0, r3
 800f25c:	f7fc fafc 	bl	800b858 <lwip_htons>
 800f260:	4603      	mov	r3, r0
 800f262:	b2db      	uxtb	r3, r3
 800f264:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f268:	b2da      	uxtb	r2, r3
 800f26a:	4b34      	ldr	r3, [pc, #208]	; (800f33c <tcp_input+0x2b4>)
 800f26c:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	891a      	ldrh	r2, [r3, #8]
 800f272:	4b33      	ldr	r3, [pc, #204]	; (800f340 <tcp_input+0x2b8>)
 800f274:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800f276:	4b31      	ldr	r3, [pc, #196]	; (800f33c <tcp_input+0x2b4>)
 800f278:	781b      	ldrb	r3, [r3, #0]
 800f27a:	f003 0303 	and.w	r3, r3, #3
 800f27e:	2b00      	cmp	r3, #0
 800f280:	d00c      	beq.n	800f29c <tcp_input+0x214>
    tcplen++;
 800f282:	4b2f      	ldr	r3, [pc, #188]	; (800f340 <tcp_input+0x2b8>)
 800f284:	881b      	ldrh	r3, [r3, #0]
 800f286:	3301      	adds	r3, #1
 800f288:	b29a      	uxth	r2, r3
 800f28a:	4b2d      	ldr	r3, [pc, #180]	; (800f340 <tcp_input+0x2b8>)
 800f28c:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800f28e:	687b      	ldr	r3, [r7, #4]
 800f290:	891a      	ldrh	r2, [r3, #8]
 800f292:	4b2b      	ldr	r3, [pc, #172]	; (800f340 <tcp_input+0x2b8>)
 800f294:	881b      	ldrh	r3, [r3, #0]
 800f296:	429a      	cmp	r2, r3
 800f298:	f200 82d7 	bhi.w	800f84a <tcp_input+0x7c2>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800f29c:	2300      	movs	r3, #0
 800f29e:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f2a0:	4b28      	ldr	r3, [pc, #160]	; (800f344 <tcp_input+0x2bc>)
 800f2a2:	681b      	ldr	r3, [r3, #0]
 800f2a4:	61fb      	str	r3, [r7, #28]
 800f2a6:	e09d      	b.n	800f3e4 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800f2a8:	69fb      	ldr	r3, [r7, #28]
 800f2aa:	7d1b      	ldrb	r3, [r3, #20]
 800f2ac:	2b00      	cmp	r3, #0
 800f2ae:	d105      	bne.n	800f2bc <tcp_input+0x234>
 800f2b0:	4b15      	ldr	r3, [pc, #84]	; (800f308 <tcp_input+0x280>)
 800f2b2:	22fb      	movs	r2, #251	; 0xfb
 800f2b4:	4924      	ldr	r1, [pc, #144]	; (800f348 <tcp_input+0x2c0>)
 800f2b6:	4816      	ldr	r0, [pc, #88]	; (800f310 <tcp_input+0x288>)
 800f2b8:	f007 fdd2 	bl	8016e60 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800f2bc:	69fb      	ldr	r3, [r7, #28]
 800f2be:	7d1b      	ldrb	r3, [r3, #20]
 800f2c0:	2b0a      	cmp	r3, #10
 800f2c2:	d105      	bne.n	800f2d0 <tcp_input+0x248>
 800f2c4:	4b10      	ldr	r3, [pc, #64]	; (800f308 <tcp_input+0x280>)
 800f2c6:	22fc      	movs	r2, #252	; 0xfc
 800f2c8:	4920      	ldr	r1, [pc, #128]	; (800f34c <tcp_input+0x2c4>)
 800f2ca:	4811      	ldr	r0, [pc, #68]	; (800f310 <tcp_input+0x288>)
 800f2cc:	f007 fdc8 	bl	8016e60 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800f2d0:	69fb      	ldr	r3, [r7, #28]
 800f2d2:	7d1b      	ldrb	r3, [r3, #20]
 800f2d4:	2b01      	cmp	r3, #1
 800f2d6:	d105      	bne.n	800f2e4 <tcp_input+0x25c>
 800f2d8:	4b0b      	ldr	r3, [pc, #44]	; (800f308 <tcp_input+0x280>)
 800f2da:	22fd      	movs	r2, #253	; 0xfd
 800f2dc:	491c      	ldr	r1, [pc, #112]	; (800f350 <tcp_input+0x2c8>)
 800f2de:	480c      	ldr	r0, [pc, #48]	; (800f310 <tcp_input+0x288>)
 800f2e0:	f007 fdbe 	bl	8016e60 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f2e4:	69fb      	ldr	r3, [r7, #28]
 800f2e6:	7a1b      	ldrb	r3, [r3, #8]
 800f2e8:	2b00      	cmp	r3, #0
 800f2ea:	d033      	beq.n	800f354 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f2ec:	69fb      	ldr	r3, [r7, #28]
 800f2ee:	7a1a      	ldrb	r2, [r3, #8]
 800f2f0:	4b09      	ldr	r3, [pc, #36]	; (800f318 <tcp_input+0x290>)
 800f2f2:	685b      	ldr	r3, [r3, #4]
 800f2f4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f2f8:	3301      	adds	r3, #1
 800f2fa:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f2fc:	429a      	cmp	r2, r3
 800f2fe:	d029      	beq.n	800f354 <tcp_input+0x2cc>
      prev = pcb;
 800f300:	69fb      	ldr	r3, [r7, #28]
 800f302:	61bb      	str	r3, [r7, #24]
      continue;
 800f304:	e06b      	b.n	800f3de <tcp_input+0x356>
 800f306:	bf00      	nop
 800f308:	0801a22c 	.word	0x0801a22c
 800f30c:	0801a260 	.word	0x0801a260
 800f310:	0801a278 	.word	0x0801a278
 800f314:	200047d4 	.word	0x200047d4
 800f318:	20007b28 	.word	0x20007b28
 800f31c:	200047d8 	.word	0x200047d8
 800f320:	200047dc 	.word	0x200047dc
 800f324:	200047da 	.word	0x200047da
 800f328:	0801a2a0 	.word	0x0801a2a0
 800f32c:	0801a2b0 	.word	0x0801a2b0
 800f330:	0801a2bc 	.word	0x0801a2bc
 800f334:	200047e4 	.word	0x200047e4
 800f338:	200047e8 	.word	0x200047e8
 800f33c:	200047f0 	.word	0x200047f0
 800f340:	200047ee 	.word	0x200047ee
 800f344:	2000d3fc 	.word	0x2000d3fc
 800f348:	0801a2dc 	.word	0x0801a2dc
 800f34c:	0801a304 	.word	0x0801a304
 800f350:	0801a330 	.word	0x0801a330
    }

    if (pcb->remote_port == tcphdr->src &&
 800f354:	69fb      	ldr	r3, [r7, #28]
 800f356:	8b1a      	ldrh	r2, [r3, #24]
 800f358:	4b94      	ldr	r3, [pc, #592]	; (800f5ac <tcp_input+0x524>)
 800f35a:	681b      	ldr	r3, [r3, #0]
 800f35c:	881b      	ldrh	r3, [r3, #0]
 800f35e:	b29b      	uxth	r3, r3
 800f360:	429a      	cmp	r2, r3
 800f362:	d13a      	bne.n	800f3da <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800f364:	69fb      	ldr	r3, [r7, #28]
 800f366:	8ada      	ldrh	r2, [r3, #22]
 800f368:	4b90      	ldr	r3, [pc, #576]	; (800f5ac <tcp_input+0x524>)
 800f36a:	681b      	ldr	r3, [r3, #0]
 800f36c:	885b      	ldrh	r3, [r3, #2]
 800f36e:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800f370:	429a      	cmp	r2, r3
 800f372:	d132      	bne.n	800f3da <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f374:	69fb      	ldr	r3, [r7, #28]
 800f376:	685a      	ldr	r2, [r3, #4]
 800f378:	4b8d      	ldr	r3, [pc, #564]	; (800f5b0 <tcp_input+0x528>)
 800f37a:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800f37c:	429a      	cmp	r2, r3
 800f37e:	d12c      	bne.n	800f3da <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800f380:	69fb      	ldr	r3, [r7, #28]
 800f382:	681a      	ldr	r2, [r3, #0]
 800f384:	4b8a      	ldr	r3, [pc, #552]	; (800f5b0 <tcp_input+0x528>)
 800f386:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f388:	429a      	cmp	r2, r3
 800f38a:	d126      	bne.n	800f3da <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800f38c:	69fb      	ldr	r3, [r7, #28]
 800f38e:	68db      	ldr	r3, [r3, #12]
 800f390:	69fa      	ldr	r2, [r7, #28]
 800f392:	429a      	cmp	r2, r3
 800f394:	d106      	bne.n	800f3a4 <tcp_input+0x31c>
 800f396:	4b87      	ldr	r3, [pc, #540]	; (800f5b4 <tcp_input+0x52c>)
 800f398:	f240 120d 	movw	r2, #269	; 0x10d
 800f39c:	4986      	ldr	r1, [pc, #536]	; (800f5b8 <tcp_input+0x530>)
 800f39e:	4887      	ldr	r0, [pc, #540]	; (800f5bc <tcp_input+0x534>)
 800f3a0:	f007 fd5e 	bl	8016e60 <iprintf>
      if (prev != NULL) {
 800f3a4:	69bb      	ldr	r3, [r7, #24]
 800f3a6:	2b00      	cmp	r3, #0
 800f3a8:	d00a      	beq.n	800f3c0 <tcp_input+0x338>
        prev->next = pcb->next;
 800f3aa:	69fb      	ldr	r3, [r7, #28]
 800f3ac:	68da      	ldr	r2, [r3, #12]
 800f3ae:	69bb      	ldr	r3, [r7, #24]
 800f3b0:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800f3b2:	4b83      	ldr	r3, [pc, #524]	; (800f5c0 <tcp_input+0x538>)
 800f3b4:	681a      	ldr	r2, [r3, #0]
 800f3b6:	69fb      	ldr	r3, [r7, #28]
 800f3b8:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800f3ba:	4a81      	ldr	r2, [pc, #516]	; (800f5c0 <tcp_input+0x538>)
 800f3bc:	69fb      	ldr	r3, [r7, #28]
 800f3be:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800f3c0:	69fb      	ldr	r3, [r7, #28]
 800f3c2:	68db      	ldr	r3, [r3, #12]
 800f3c4:	69fa      	ldr	r2, [r7, #28]
 800f3c6:	429a      	cmp	r2, r3
 800f3c8:	d111      	bne.n	800f3ee <tcp_input+0x366>
 800f3ca:	4b7a      	ldr	r3, [pc, #488]	; (800f5b4 <tcp_input+0x52c>)
 800f3cc:	f240 1215 	movw	r2, #277	; 0x115
 800f3d0:	497c      	ldr	r1, [pc, #496]	; (800f5c4 <tcp_input+0x53c>)
 800f3d2:	487a      	ldr	r0, [pc, #488]	; (800f5bc <tcp_input+0x534>)
 800f3d4:	f007 fd44 	bl	8016e60 <iprintf>
      break;
 800f3d8:	e009      	b.n	800f3ee <tcp_input+0x366>
    }
    prev = pcb;
 800f3da:	69fb      	ldr	r3, [r7, #28]
 800f3dc:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f3de:	69fb      	ldr	r3, [r7, #28]
 800f3e0:	68db      	ldr	r3, [r3, #12]
 800f3e2:	61fb      	str	r3, [r7, #28]
 800f3e4:	69fb      	ldr	r3, [r7, #28]
 800f3e6:	2b00      	cmp	r3, #0
 800f3e8:	f47f af5e 	bne.w	800f2a8 <tcp_input+0x220>
 800f3ec:	e000      	b.n	800f3f0 <tcp_input+0x368>
      break;
 800f3ee:	bf00      	nop
  }

  if (pcb == NULL) {
 800f3f0:	69fb      	ldr	r3, [r7, #28]
 800f3f2:	2b00      	cmp	r3, #0
 800f3f4:	f040 8095 	bne.w	800f522 <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f3f8:	4b73      	ldr	r3, [pc, #460]	; (800f5c8 <tcp_input+0x540>)
 800f3fa:	681b      	ldr	r3, [r3, #0]
 800f3fc:	61fb      	str	r3, [r7, #28]
 800f3fe:	e03f      	b.n	800f480 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800f400:	69fb      	ldr	r3, [r7, #28]
 800f402:	7d1b      	ldrb	r3, [r3, #20]
 800f404:	2b0a      	cmp	r3, #10
 800f406:	d006      	beq.n	800f416 <tcp_input+0x38e>
 800f408:	4b6a      	ldr	r3, [pc, #424]	; (800f5b4 <tcp_input+0x52c>)
 800f40a:	f240 121f 	movw	r2, #287	; 0x11f
 800f40e:	496f      	ldr	r1, [pc, #444]	; (800f5cc <tcp_input+0x544>)
 800f410:	486a      	ldr	r0, [pc, #424]	; (800f5bc <tcp_input+0x534>)
 800f412:	f007 fd25 	bl	8016e60 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f416:	69fb      	ldr	r3, [r7, #28]
 800f418:	7a1b      	ldrb	r3, [r3, #8]
 800f41a:	2b00      	cmp	r3, #0
 800f41c:	d009      	beq.n	800f432 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f41e:	69fb      	ldr	r3, [r7, #28]
 800f420:	7a1a      	ldrb	r2, [r3, #8]
 800f422:	4b63      	ldr	r3, [pc, #396]	; (800f5b0 <tcp_input+0x528>)
 800f424:	685b      	ldr	r3, [r3, #4]
 800f426:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f42a:	3301      	adds	r3, #1
 800f42c:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f42e:	429a      	cmp	r2, r3
 800f430:	d122      	bne.n	800f478 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800f432:	69fb      	ldr	r3, [r7, #28]
 800f434:	8b1a      	ldrh	r2, [r3, #24]
 800f436:	4b5d      	ldr	r3, [pc, #372]	; (800f5ac <tcp_input+0x524>)
 800f438:	681b      	ldr	r3, [r3, #0]
 800f43a:	881b      	ldrh	r3, [r3, #0]
 800f43c:	b29b      	uxth	r3, r3
 800f43e:	429a      	cmp	r2, r3
 800f440:	d11b      	bne.n	800f47a <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800f442:	69fb      	ldr	r3, [r7, #28]
 800f444:	8ada      	ldrh	r2, [r3, #22]
 800f446:	4b59      	ldr	r3, [pc, #356]	; (800f5ac <tcp_input+0x524>)
 800f448:	681b      	ldr	r3, [r3, #0]
 800f44a:	885b      	ldrh	r3, [r3, #2]
 800f44c:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800f44e:	429a      	cmp	r2, r3
 800f450:	d113      	bne.n	800f47a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f452:	69fb      	ldr	r3, [r7, #28]
 800f454:	685a      	ldr	r2, [r3, #4]
 800f456:	4b56      	ldr	r3, [pc, #344]	; (800f5b0 <tcp_input+0x528>)
 800f458:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800f45a:	429a      	cmp	r2, r3
 800f45c:	d10d      	bne.n	800f47a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800f45e:	69fb      	ldr	r3, [r7, #28]
 800f460:	681a      	ldr	r2, [r3, #0]
 800f462:	4b53      	ldr	r3, [pc, #332]	; (800f5b0 <tcp_input+0x528>)
 800f464:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f466:	429a      	cmp	r2, r3
 800f468:	d107      	bne.n	800f47a <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800f46a:	69f8      	ldr	r0, [r7, #28]
 800f46c:	f000 fb52 	bl	800fb14 <tcp_timewait_input>
        }
        pbuf_free(p);
 800f470:	6878      	ldr	r0, [r7, #4]
 800f472:	f7fd fdcb 	bl	800d00c <pbuf_free>
        return;
 800f476:	e1ee      	b.n	800f856 <tcp_input+0x7ce>
        continue;
 800f478:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f47a:	69fb      	ldr	r3, [r7, #28]
 800f47c:	68db      	ldr	r3, [r3, #12]
 800f47e:	61fb      	str	r3, [r7, #28]
 800f480:	69fb      	ldr	r3, [r7, #28]
 800f482:	2b00      	cmp	r3, #0
 800f484:	d1bc      	bne.n	800f400 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800f486:	2300      	movs	r3, #0
 800f488:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f48a:	4b51      	ldr	r3, [pc, #324]	; (800f5d0 <tcp_input+0x548>)
 800f48c:	681b      	ldr	r3, [r3, #0]
 800f48e:	617b      	str	r3, [r7, #20]
 800f490:	e02a      	b.n	800f4e8 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800f492:	697b      	ldr	r3, [r7, #20]
 800f494:	7a1b      	ldrb	r3, [r3, #8]
 800f496:	2b00      	cmp	r3, #0
 800f498:	d00c      	beq.n	800f4b4 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f49a:	697b      	ldr	r3, [r7, #20]
 800f49c:	7a1a      	ldrb	r2, [r3, #8]
 800f49e:	4b44      	ldr	r3, [pc, #272]	; (800f5b0 <tcp_input+0x528>)
 800f4a0:	685b      	ldr	r3, [r3, #4]
 800f4a2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f4a6:	3301      	adds	r3, #1
 800f4a8:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800f4aa:	429a      	cmp	r2, r3
 800f4ac:	d002      	beq.n	800f4b4 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800f4ae:	697b      	ldr	r3, [r7, #20]
 800f4b0:	61bb      	str	r3, [r7, #24]
        continue;
 800f4b2:	e016      	b.n	800f4e2 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800f4b4:	697b      	ldr	r3, [r7, #20]
 800f4b6:	8ada      	ldrh	r2, [r3, #22]
 800f4b8:	4b3c      	ldr	r3, [pc, #240]	; (800f5ac <tcp_input+0x524>)
 800f4ba:	681b      	ldr	r3, [r3, #0]
 800f4bc:	885b      	ldrh	r3, [r3, #2]
 800f4be:	b29b      	uxth	r3, r3
 800f4c0:	429a      	cmp	r2, r3
 800f4c2:	d10c      	bne.n	800f4de <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800f4c4:	697b      	ldr	r3, [r7, #20]
 800f4c6:	681a      	ldr	r2, [r3, #0]
 800f4c8:	4b39      	ldr	r3, [pc, #228]	; (800f5b0 <tcp_input+0x528>)
 800f4ca:	695b      	ldr	r3, [r3, #20]
 800f4cc:	429a      	cmp	r2, r3
 800f4ce:	d00f      	beq.n	800f4f0 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800f4d0:	697b      	ldr	r3, [r7, #20]
 800f4d2:	2b00      	cmp	r3, #0
 800f4d4:	d00d      	beq.n	800f4f2 <tcp_input+0x46a>
 800f4d6:	697b      	ldr	r3, [r7, #20]
 800f4d8:	681b      	ldr	r3, [r3, #0]
 800f4da:	2b00      	cmp	r3, #0
 800f4dc:	d009      	beq.n	800f4f2 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800f4de:	697b      	ldr	r3, [r7, #20]
 800f4e0:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f4e2:	697b      	ldr	r3, [r7, #20]
 800f4e4:	68db      	ldr	r3, [r3, #12]
 800f4e6:	617b      	str	r3, [r7, #20]
 800f4e8:	697b      	ldr	r3, [r7, #20]
 800f4ea:	2b00      	cmp	r3, #0
 800f4ec:	d1d1      	bne.n	800f492 <tcp_input+0x40a>
 800f4ee:	e000      	b.n	800f4f2 <tcp_input+0x46a>
            break;
 800f4f0:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800f4f2:	697b      	ldr	r3, [r7, #20]
 800f4f4:	2b00      	cmp	r3, #0
 800f4f6:	d014      	beq.n	800f522 <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800f4f8:	69bb      	ldr	r3, [r7, #24]
 800f4fa:	2b00      	cmp	r3, #0
 800f4fc:	d00a      	beq.n	800f514 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800f4fe:	697b      	ldr	r3, [r7, #20]
 800f500:	68da      	ldr	r2, [r3, #12]
 800f502:	69bb      	ldr	r3, [r7, #24]
 800f504:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800f506:	4b32      	ldr	r3, [pc, #200]	; (800f5d0 <tcp_input+0x548>)
 800f508:	681a      	ldr	r2, [r3, #0]
 800f50a:	697b      	ldr	r3, [r7, #20]
 800f50c:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800f50e:	4a30      	ldr	r2, [pc, #192]	; (800f5d0 <tcp_input+0x548>)
 800f510:	697b      	ldr	r3, [r7, #20]
 800f512:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800f514:	6978      	ldr	r0, [r7, #20]
 800f516:	f000 f9ff 	bl	800f918 <tcp_listen_input>
      }
      pbuf_free(p);
 800f51a:	6878      	ldr	r0, [r7, #4]
 800f51c:	f7fd fd76 	bl	800d00c <pbuf_free>
      return;
 800f520:	e199      	b.n	800f856 <tcp_input+0x7ce>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800f522:	69fb      	ldr	r3, [r7, #28]
 800f524:	2b00      	cmp	r3, #0
 800f526:	f000 8160 	beq.w	800f7ea <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800f52a:	4b2a      	ldr	r3, [pc, #168]	; (800f5d4 <tcp_input+0x54c>)
 800f52c:	2200      	movs	r2, #0
 800f52e:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800f530:	687b      	ldr	r3, [r7, #4]
 800f532:	891a      	ldrh	r2, [r3, #8]
 800f534:	4b27      	ldr	r3, [pc, #156]	; (800f5d4 <tcp_input+0x54c>)
 800f536:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800f538:	4a26      	ldr	r2, [pc, #152]	; (800f5d4 <tcp_input+0x54c>)
 800f53a:	687b      	ldr	r3, [r7, #4]
 800f53c:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800f53e:	4b1b      	ldr	r3, [pc, #108]	; (800f5ac <tcp_input+0x524>)
 800f540:	681b      	ldr	r3, [r3, #0]
 800f542:	4a24      	ldr	r2, [pc, #144]	; (800f5d4 <tcp_input+0x54c>)
 800f544:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800f546:	4b24      	ldr	r3, [pc, #144]	; (800f5d8 <tcp_input+0x550>)
 800f548:	2200      	movs	r2, #0
 800f54a:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800f54c:	4b23      	ldr	r3, [pc, #140]	; (800f5dc <tcp_input+0x554>)
 800f54e:	2200      	movs	r2, #0
 800f550:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800f552:	4b23      	ldr	r3, [pc, #140]	; (800f5e0 <tcp_input+0x558>)
 800f554:	2200      	movs	r2, #0
 800f556:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800f558:	4b22      	ldr	r3, [pc, #136]	; (800f5e4 <tcp_input+0x55c>)
 800f55a:	781b      	ldrb	r3, [r3, #0]
 800f55c:	f003 0308 	and.w	r3, r3, #8
 800f560:	2b00      	cmp	r3, #0
 800f562:	d006      	beq.n	800f572 <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 800f564:	687b      	ldr	r3, [r7, #4]
 800f566:	7b5b      	ldrb	r3, [r3, #13]
 800f568:	f043 0301 	orr.w	r3, r3, #1
 800f56c:	b2da      	uxtb	r2, r3
 800f56e:	687b      	ldr	r3, [r7, #4]
 800f570:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800f572:	69fb      	ldr	r3, [r7, #28]
 800f574:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f576:	2b00      	cmp	r3, #0
 800f578:	d038      	beq.n	800f5ec <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800f57a:	69f8      	ldr	r0, [r7, #28]
 800f57c:	f7ff f872 	bl	800e664 <tcp_process_refused_data>
 800f580:	4603      	mov	r3, r0
 800f582:	f113 0f0d 	cmn.w	r3, #13
 800f586:	d007      	beq.n	800f598 <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800f588:	69fb      	ldr	r3, [r7, #28]
 800f58a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800f58c:	2b00      	cmp	r3, #0
 800f58e:	d02d      	beq.n	800f5ec <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800f590:	4b15      	ldr	r3, [pc, #84]	; (800f5e8 <tcp_input+0x560>)
 800f592:	881b      	ldrh	r3, [r3, #0]
 800f594:	2b00      	cmp	r3, #0
 800f596:	d029      	beq.n	800f5ec <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800f598:	69fb      	ldr	r3, [r7, #28]
 800f59a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f59c:	2b00      	cmp	r3, #0
 800f59e:	f040 8104 	bne.w	800f7aa <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800f5a2:	69f8      	ldr	r0, [r7, #28]
 800f5a4:	f003 fe28 	bl	80131f8 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800f5a8:	e0ff      	b.n	800f7aa <tcp_input+0x722>
 800f5aa:	bf00      	nop
 800f5ac:	200047d4 	.word	0x200047d4
 800f5b0:	20007b28 	.word	0x20007b28
 800f5b4:	0801a22c 	.word	0x0801a22c
 800f5b8:	0801a358 	.word	0x0801a358
 800f5bc:	0801a278 	.word	0x0801a278
 800f5c0:	2000d3fc 	.word	0x2000d3fc
 800f5c4:	0801a384 	.word	0x0801a384
 800f5c8:	2000d40c 	.word	0x2000d40c
 800f5cc:	0801a3b0 	.word	0x0801a3b0
 800f5d0:	2000d404 	.word	0x2000d404
 800f5d4:	200047c4 	.word	0x200047c4
 800f5d8:	200047f4 	.word	0x200047f4
 800f5dc:	200047f1 	.word	0x200047f1
 800f5e0:	200047ec 	.word	0x200047ec
 800f5e4:	200047f0 	.word	0x200047f0
 800f5e8:	200047ee 	.word	0x200047ee
      }
    }
    tcp_input_pcb = pcb;
 800f5ec:	4a9b      	ldr	r2, [pc, #620]	; (800f85c <tcp_input+0x7d4>)
 800f5ee:	69fb      	ldr	r3, [r7, #28]
 800f5f0:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800f5f2:	69f8      	ldr	r0, [r7, #28]
 800f5f4:	f000 fb0a 	bl	800fc0c <tcp_process>
 800f5f8:	4603      	mov	r3, r0
 800f5fa:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800f5fc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f600:	f113 0f0d 	cmn.w	r3, #13
 800f604:	f000 80d3 	beq.w	800f7ae <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 800f608:	4b95      	ldr	r3, [pc, #596]	; (800f860 <tcp_input+0x7d8>)
 800f60a:	781b      	ldrb	r3, [r3, #0]
 800f60c:	f003 0308 	and.w	r3, r3, #8
 800f610:	2b00      	cmp	r3, #0
 800f612:	d015      	beq.n	800f640 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800f614:	69fb      	ldr	r3, [r7, #28]
 800f616:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f61a:	2b00      	cmp	r3, #0
 800f61c:	d008      	beq.n	800f630 <tcp_input+0x5a8>
 800f61e:	69fb      	ldr	r3, [r7, #28]
 800f620:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f624:	69fa      	ldr	r2, [r7, #28]
 800f626:	6912      	ldr	r2, [r2, #16]
 800f628:	f06f 010d 	mvn.w	r1, #13
 800f62c:	4610      	mov	r0, r2
 800f62e:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800f630:	69f9      	ldr	r1, [r7, #28]
 800f632:	488c      	ldr	r0, [pc, #560]	; (800f864 <tcp_input+0x7dc>)
 800f634:	f7ff fbb0 	bl	800ed98 <tcp_pcb_remove>
        tcp_free(pcb);
 800f638:	69f8      	ldr	r0, [r7, #28]
 800f63a:	f7fd ffa3 	bl	800d584 <tcp_free>
 800f63e:	e0c1      	b.n	800f7c4 <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 800f640:	2300      	movs	r3, #0
 800f642:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800f644:	4b88      	ldr	r3, [pc, #544]	; (800f868 <tcp_input+0x7e0>)
 800f646:	881b      	ldrh	r3, [r3, #0]
 800f648:	2b00      	cmp	r3, #0
 800f64a:	d01d      	beq.n	800f688 <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800f64c:	4b86      	ldr	r3, [pc, #536]	; (800f868 <tcp_input+0x7e0>)
 800f64e:	881b      	ldrh	r3, [r3, #0]
 800f650:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800f652:	69fb      	ldr	r3, [r7, #28]
 800f654:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f658:	2b00      	cmp	r3, #0
 800f65a:	d00a      	beq.n	800f672 <tcp_input+0x5ea>
 800f65c:	69fb      	ldr	r3, [r7, #28]
 800f65e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f662:	69fa      	ldr	r2, [r7, #28]
 800f664:	6910      	ldr	r0, [r2, #16]
 800f666:	89fa      	ldrh	r2, [r7, #14]
 800f668:	69f9      	ldr	r1, [r7, #28]
 800f66a:	4798      	blx	r3
 800f66c:	4603      	mov	r3, r0
 800f66e:	74fb      	strb	r3, [r7, #19]
 800f670:	e001      	b.n	800f676 <tcp_input+0x5ee>
 800f672:	2300      	movs	r3, #0
 800f674:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800f676:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f67a:	f113 0f0d 	cmn.w	r3, #13
 800f67e:	f000 8098 	beq.w	800f7b2 <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 800f682:	4b79      	ldr	r3, [pc, #484]	; (800f868 <tcp_input+0x7e0>)
 800f684:	2200      	movs	r2, #0
 800f686:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800f688:	69f8      	ldr	r0, [r7, #28]
 800f68a:	f000 f905 	bl	800f898 <tcp_input_delayed_close>
 800f68e:	4603      	mov	r3, r0
 800f690:	2b00      	cmp	r3, #0
 800f692:	f040 8090 	bne.w	800f7b6 <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800f696:	4b75      	ldr	r3, [pc, #468]	; (800f86c <tcp_input+0x7e4>)
 800f698:	681b      	ldr	r3, [r3, #0]
 800f69a:	2b00      	cmp	r3, #0
 800f69c:	d041      	beq.n	800f722 <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800f69e:	69fb      	ldr	r3, [r7, #28]
 800f6a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f6a2:	2b00      	cmp	r3, #0
 800f6a4:	d006      	beq.n	800f6b4 <tcp_input+0x62c>
 800f6a6:	4b72      	ldr	r3, [pc, #456]	; (800f870 <tcp_input+0x7e8>)
 800f6a8:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800f6ac:	4971      	ldr	r1, [pc, #452]	; (800f874 <tcp_input+0x7ec>)
 800f6ae:	4872      	ldr	r0, [pc, #456]	; (800f878 <tcp_input+0x7f0>)
 800f6b0:	f007 fbd6 	bl	8016e60 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800f6b4:	69fb      	ldr	r3, [r7, #28]
 800f6b6:	8b5b      	ldrh	r3, [r3, #26]
 800f6b8:	f003 0310 	and.w	r3, r3, #16
 800f6bc:	2b00      	cmp	r3, #0
 800f6be:	d008      	beq.n	800f6d2 <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800f6c0:	4b6a      	ldr	r3, [pc, #424]	; (800f86c <tcp_input+0x7e4>)
 800f6c2:	681b      	ldr	r3, [r3, #0]
 800f6c4:	4618      	mov	r0, r3
 800f6c6:	f7fd fca1 	bl	800d00c <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800f6ca:	69f8      	ldr	r0, [r7, #28]
 800f6cc:	f7fe fa94 	bl	800dbf8 <tcp_abort>
            goto aborted;
 800f6d0:	e078      	b.n	800f7c4 <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800f6d2:	69fb      	ldr	r3, [r7, #28]
 800f6d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f6d8:	2b00      	cmp	r3, #0
 800f6da:	d00c      	beq.n	800f6f6 <tcp_input+0x66e>
 800f6dc:	69fb      	ldr	r3, [r7, #28]
 800f6de:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800f6e2:	69fb      	ldr	r3, [r7, #28]
 800f6e4:	6918      	ldr	r0, [r3, #16]
 800f6e6:	4b61      	ldr	r3, [pc, #388]	; (800f86c <tcp_input+0x7e4>)
 800f6e8:	681a      	ldr	r2, [r3, #0]
 800f6ea:	2300      	movs	r3, #0
 800f6ec:	69f9      	ldr	r1, [r7, #28]
 800f6ee:	47a0      	blx	r4
 800f6f0:	4603      	mov	r3, r0
 800f6f2:	74fb      	strb	r3, [r7, #19]
 800f6f4:	e008      	b.n	800f708 <tcp_input+0x680>
 800f6f6:	4b5d      	ldr	r3, [pc, #372]	; (800f86c <tcp_input+0x7e4>)
 800f6f8:	681a      	ldr	r2, [r3, #0]
 800f6fa:	2300      	movs	r3, #0
 800f6fc:	69f9      	ldr	r1, [r7, #28]
 800f6fe:	2000      	movs	r0, #0
 800f700:	f7ff f884 	bl	800e80c <tcp_recv_null>
 800f704:	4603      	mov	r3, r0
 800f706:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800f708:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f70c:	f113 0f0d 	cmn.w	r3, #13
 800f710:	d053      	beq.n	800f7ba <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800f712:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f716:	2b00      	cmp	r3, #0
 800f718:	d003      	beq.n	800f722 <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800f71a:	4b54      	ldr	r3, [pc, #336]	; (800f86c <tcp_input+0x7e4>)
 800f71c:	681a      	ldr	r2, [r3, #0]
 800f71e:	69fb      	ldr	r3, [r7, #28]
 800f720:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800f722:	4b4f      	ldr	r3, [pc, #316]	; (800f860 <tcp_input+0x7d8>)
 800f724:	781b      	ldrb	r3, [r3, #0]
 800f726:	f003 0320 	and.w	r3, r3, #32
 800f72a:	2b00      	cmp	r3, #0
 800f72c:	d030      	beq.n	800f790 <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 800f72e:	69fb      	ldr	r3, [r7, #28]
 800f730:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f732:	2b00      	cmp	r3, #0
 800f734:	d009      	beq.n	800f74a <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800f736:	69fb      	ldr	r3, [r7, #28]
 800f738:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f73a:	7b5a      	ldrb	r2, [r3, #13]
 800f73c:	69fb      	ldr	r3, [r7, #28]
 800f73e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f740:	f042 0220 	orr.w	r2, r2, #32
 800f744:	b2d2      	uxtb	r2, r2
 800f746:	735a      	strb	r2, [r3, #13]
 800f748:	e022      	b.n	800f790 <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800f74a:	69fb      	ldr	r3, [r7, #28]
 800f74c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f74e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800f752:	d005      	beq.n	800f760 <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 800f754:	69fb      	ldr	r3, [r7, #28]
 800f756:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f758:	3301      	adds	r3, #1
 800f75a:	b29a      	uxth	r2, r3
 800f75c:	69fb      	ldr	r3, [r7, #28]
 800f75e:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800f760:	69fb      	ldr	r3, [r7, #28]
 800f762:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f766:	2b00      	cmp	r3, #0
 800f768:	d00b      	beq.n	800f782 <tcp_input+0x6fa>
 800f76a:	69fb      	ldr	r3, [r7, #28]
 800f76c:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800f770:	69fb      	ldr	r3, [r7, #28]
 800f772:	6918      	ldr	r0, [r3, #16]
 800f774:	2300      	movs	r3, #0
 800f776:	2200      	movs	r2, #0
 800f778:	69f9      	ldr	r1, [r7, #28]
 800f77a:	47a0      	blx	r4
 800f77c:	4603      	mov	r3, r0
 800f77e:	74fb      	strb	r3, [r7, #19]
 800f780:	e001      	b.n	800f786 <tcp_input+0x6fe>
 800f782:	2300      	movs	r3, #0
 800f784:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800f786:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f78a:	f113 0f0d 	cmn.w	r3, #13
 800f78e:	d016      	beq.n	800f7be <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800f790:	4b32      	ldr	r3, [pc, #200]	; (800f85c <tcp_input+0x7d4>)
 800f792:	2200      	movs	r2, #0
 800f794:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800f796:	69f8      	ldr	r0, [r7, #28]
 800f798:	f000 f87e 	bl	800f898 <tcp_input_delayed_close>
 800f79c:	4603      	mov	r3, r0
 800f79e:	2b00      	cmp	r3, #0
 800f7a0:	d10f      	bne.n	800f7c2 <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800f7a2:	69f8      	ldr	r0, [r7, #28]
 800f7a4:	f002 ff10 	bl	80125c8 <tcp_output>
 800f7a8:	e00c      	b.n	800f7c4 <tcp_input+0x73c>
        goto aborted;
 800f7aa:	bf00      	nop
 800f7ac:	e00a      	b.n	800f7c4 <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800f7ae:	bf00      	nop
 800f7b0:	e008      	b.n	800f7c4 <tcp_input+0x73c>
              goto aborted;
 800f7b2:	bf00      	nop
 800f7b4:	e006      	b.n	800f7c4 <tcp_input+0x73c>
          goto aborted;
 800f7b6:	bf00      	nop
 800f7b8:	e004      	b.n	800f7c4 <tcp_input+0x73c>
            goto aborted;
 800f7ba:	bf00      	nop
 800f7bc:	e002      	b.n	800f7c4 <tcp_input+0x73c>
              goto aborted;
 800f7be:	bf00      	nop
 800f7c0:	e000      	b.n	800f7c4 <tcp_input+0x73c>
          goto aborted;
 800f7c2:	bf00      	nop
    tcp_input_pcb = NULL;
 800f7c4:	4b25      	ldr	r3, [pc, #148]	; (800f85c <tcp_input+0x7d4>)
 800f7c6:	2200      	movs	r2, #0
 800f7c8:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800f7ca:	4b28      	ldr	r3, [pc, #160]	; (800f86c <tcp_input+0x7e4>)
 800f7cc:	2200      	movs	r2, #0
 800f7ce:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800f7d0:	4b2a      	ldr	r3, [pc, #168]	; (800f87c <tcp_input+0x7f4>)
 800f7d2:	685b      	ldr	r3, [r3, #4]
 800f7d4:	2b00      	cmp	r3, #0
 800f7d6:	d03d      	beq.n	800f854 <tcp_input+0x7cc>
      pbuf_free(inseg.p);
 800f7d8:	4b28      	ldr	r3, [pc, #160]	; (800f87c <tcp_input+0x7f4>)
 800f7da:	685b      	ldr	r3, [r3, #4]
 800f7dc:	4618      	mov	r0, r3
 800f7de:	f7fd fc15 	bl	800d00c <pbuf_free>
      inseg.p = NULL;
 800f7e2:	4b26      	ldr	r3, [pc, #152]	; (800f87c <tcp_input+0x7f4>)
 800f7e4:	2200      	movs	r2, #0
 800f7e6:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800f7e8:	e034      	b.n	800f854 <tcp_input+0x7cc>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800f7ea:	4b25      	ldr	r3, [pc, #148]	; (800f880 <tcp_input+0x7f8>)
 800f7ec:	681b      	ldr	r3, [r3, #0]
 800f7ee:	899b      	ldrh	r3, [r3, #12]
 800f7f0:	b29b      	uxth	r3, r3
 800f7f2:	4618      	mov	r0, r3
 800f7f4:	f7fc f830 	bl	800b858 <lwip_htons>
 800f7f8:	4603      	mov	r3, r0
 800f7fa:	b2db      	uxtb	r3, r3
 800f7fc:	f003 0304 	and.w	r3, r3, #4
 800f800:	2b00      	cmp	r3, #0
 800f802:	d118      	bne.n	800f836 <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f804:	4b1f      	ldr	r3, [pc, #124]	; (800f884 <tcp_input+0x7fc>)
 800f806:	6819      	ldr	r1, [r3, #0]
 800f808:	4b1f      	ldr	r3, [pc, #124]	; (800f888 <tcp_input+0x800>)
 800f80a:	881b      	ldrh	r3, [r3, #0]
 800f80c:	461a      	mov	r2, r3
 800f80e:	4b1f      	ldr	r3, [pc, #124]	; (800f88c <tcp_input+0x804>)
 800f810:	681b      	ldr	r3, [r3, #0]
 800f812:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f814:	4b1a      	ldr	r3, [pc, #104]	; (800f880 <tcp_input+0x7f8>)
 800f816:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f818:	885b      	ldrh	r3, [r3, #2]
 800f81a:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f81c:	4a18      	ldr	r2, [pc, #96]	; (800f880 <tcp_input+0x7f8>)
 800f81e:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f820:	8812      	ldrh	r2, [r2, #0]
 800f822:	b292      	uxth	r2, r2
 800f824:	9202      	str	r2, [sp, #8]
 800f826:	9301      	str	r3, [sp, #4]
 800f828:	4b19      	ldr	r3, [pc, #100]	; (800f890 <tcp_input+0x808>)
 800f82a:	9300      	str	r3, [sp, #0]
 800f82c:	4b19      	ldr	r3, [pc, #100]	; (800f894 <tcp_input+0x80c>)
 800f82e:	4602      	mov	r2, r0
 800f830:	2000      	movs	r0, #0
 800f832:	f003 fc8f 	bl	8013154 <tcp_rst>
    pbuf_free(p);
 800f836:	6878      	ldr	r0, [r7, #4]
 800f838:	f7fd fbe8 	bl	800d00c <pbuf_free>
  return;
 800f83c:	e00a      	b.n	800f854 <tcp_input+0x7cc>
    goto dropped;
 800f83e:	bf00      	nop
 800f840:	e004      	b.n	800f84c <tcp_input+0x7c4>
dropped:
 800f842:	bf00      	nop
 800f844:	e002      	b.n	800f84c <tcp_input+0x7c4>
      goto dropped;
 800f846:	bf00      	nop
 800f848:	e000      	b.n	800f84c <tcp_input+0x7c4>
      goto dropped;
 800f84a:	bf00      	nop
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800f84c:	6878      	ldr	r0, [r7, #4]
 800f84e:	f7fd fbdd 	bl	800d00c <pbuf_free>
 800f852:	e000      	b.n	800f856 <tcp_input+0x7ce>
  return;
 800f854:	bf00      	nop
}
 800f856:	3724      	adds	r7, #36	; 0x24
 800f858:	46bd      	mov	sp, r7
 800f85a:	bd90      	pop	{r4, r7, pc}
 800f85c:	2000d410 	.word	0x2000d410
 800f860:	200047f1 	.word	0x200047f1
 800f864:	2000d3fc 	.word	0x2000d3fc
 800f868:	200047ec 	.word	0x200047ec
 800f86c:	200047f4 	.word	0x200047f4
 800f870:	0801a22c 	.word	0x0801a22c
 800f874:	0801a3e0 	.word	0x0801a3e0
 800f878:	0801a278 	.word	0x0801a278
 800f87c:	200047c4 	.word	0x200047c4
 800f880:	200047d4 	.word	0x200047d4
 800f884:	200047e8 	.word	0x200047e8
 800f888:	200047ee 	.word	0x200047ee
 800f88c:	200047e4 	.word	0x200047e4
 800f890:	20007b38 	.word	0x20007b38
 800f894:	20007b3c 	.word	0x20007b3c

0800f898 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800f898:	b580      	push	{r7, lr}
 800f89a:	b082      	sub	sp, #8
 800f89c:	af00      	add	r7, sp, #0
 800f89e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800f8a0:	687b      	ldr	r3, [r7, #4]
 800f8a2:	2b00      	cmp	r3, #0
 800f8a4:	d106      	bne.n	800f8b4 <tcp_input_delayed_close+0x1c>
 800f8a6:	4b17      	ldr	r3, [pc, #92]	; (800f904 <tcp_input_delayed_close+0x6c>)
 800f8a8:	f240 225a 	movw	r2, #602	; 0x25a
 800f8ac:	4916      	ldr	r1, [pc, #88]	; (800f908 <tcp_input_delayed_close+0x70>)
 800f8ae:	4817      	ldr	r0, [pc, #92]	; (800f90c <tcp_input_delayed_close+0x74>)
 800f8b0:	f007 fad6 	bl	8016e60 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800f8b4:	4b16      	ldr	r3, [pc, #88]	; (800f910 <tcp_input_delayed_close+0x78>)
 800f8b6:	781b      	ldrb	r3, [r3, #0]
 800f8b8:	f003 0310 	and.w	r3, r3, #16
 800f8bc:	2b00      	cmp	r3, #0
 800f8be:	d01c      	beq.n	800f8fa <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800f8c0:	687b      	ldr	r3, [r7, #4]
 800f8c2:	8b5b      	ldrh	r3, [r3, #26]
 800f8c4:	f003 0310 	and.w	r3, r3, #16
 800f8c8:	2b00      	cmp	r3, #0
 800f8ca:	d10d      	bne.n	800f8e8 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800f8cc:	687b      	ldr	r3, [r7, #4]
 800f8ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f8d2:	2b00      	cmp	r3, #0
 800f8d4:	d008      	beq.n	800f8e8 <tcp_input_delayed_close+0x50>
 800f8d6:	687b      	ldr	r3, [r7, #4]
 800f8d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f8dc:	687a      	ldr	r2, [r7, #4]
 800f8de:	6912      	ldr	r2, [r2, #16]
 800f8e0:	f06f 010e 	mvn.w	r1, #14
 800f8e4:	4610      	mov	r0, r2
 800f8e6:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800f8e8:	6879      	ldr	r1, [r7, #4]
 800f8ea:	480a      	ldr	r0, [pc, #40]	; (800f914 <tcp_input_delayed_close+0x7c>)
 800f8ec:	f7ff fa54 	bl	800ed98 <tcp_pcb_remove>
    tcp_free(pcb);
 800f8f0:	6878      	ldr	r0, [r7, #4]
 800f8f2:	f7fd fe47 	bl	800d584 <tcp_free>
    return 1;
 800f8f6:	2301      	movs	r3, #1
 800f8f8:	e000      	b.n	800f8fc <tcp_input_delayed_close+0x64>
  }
  return 0;
 800f8fa:	2300      	movs	r3, #0
}
 800f8fc:	4618      	mov	r0, r3
 800f8fe:	3708      	adds	r7, #8
 800f900:	46bd      	mov	sp, r7
 800f902:	bd80      	pop	{r7, pc}
 800f904:	0801a22c 	.word	0x0801a22c
 800f908:	0801a3fc 	.word	0x0801a3fc
 800f90c:	0801a278 	.word	0x0801a278
 800f910:	200047f1 	.word	0x200047f1
 800f914:	2000d3fc 	.word	0x2000d3fc

0800f918 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800f918:	b590      	push	{r4, r7, lr}
 800f91a:	b08b      	sub	sp, #44	; 0x2c
 800f91c:	af04      	add	r7, sp, #16
 800f91e:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800f920:	4b6f      	ldr	r3, [pc, #444]	; (800fae0 <tcp_listen_input+0x1c8>)
 800f922:	781b      	ldrb	r3, [r3, #0]
 800f924:	f003 0304 	and.w	r3, r3, #4
 800f928:	2b00      	cmp	r3, #0
 800f92a:	f040 80d3 	bne.w	800fad4 <tcp_listen_input+0x1bc>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800f92e:	687b      	ldr	r3, [r7, #4]
 800f930:	2b00      	cmp	r3, #0
 800f932:	d106      	bne.n	800f942 <tcp_listen_input+0x2a>
 800f934:	4b6b      	ldr	r3, [pc, #428]	; (800fae4 <tcp_listen_input+0x1cc>)
 800f936:	f240 2281 	movw	r2, #641	; 0x281
 800f93a:	496b      	ldr	r1, [pc, #428]	; (800fae8 <tcp_listen_input+0x1d0>)
 800f93c:	486b      	ldr	r0, [pc, #428]	; (800faec <tcp_listen_input+0x1d4>)
 800f93e:	f007 fa8f 	bl	8016e60 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800f942:	4b67      	ldr	r3, [pc, #412]	; (800fae0 <tcp_listen_input+0x1c8>)
 800f944:	781b      	ldrb	r3, [r3, #0]
 800f946:	f003 0310 	and.w	r3, r3, #16
 800f94a:	2b00      	cmp	r3, #0
 800f94c:	d019      	beq.n	800f982 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f94e:	4b68      	ldr	r3, [pc, #416]	; (800faf0 <tcp_listen_input+0x1d8>)
 800f950:	6819      	ldr	r1, [r3, #0]
 800f952:	4b68      	ldr	r3, [pc, #416]	; (800faf4 <tcp_listen_input+0x1dc>)
 800f954:	881b      	ldrh	r3, [r3, #0]
 800f956:	461a      	mov	r2, r3
 800f958:	4b67      	ldr	r3, [pc, #412]	; (800faf8 <tcp_listen_input+0x1e0>)
 800f95a:	681b      	ldr	r3, [r3, #0]
 800f95c:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f95e:	4b67      	ldr	r3, [pc, #412]	; (800fafc <tcp_listen_input+0x1e4>)
 800f960:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f962:	885b      	ldrh	r3, [r3, #2]
 800f964:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f966:	4a65      	ldr	r2, [pc, #404]	; (800fafc <tcp_listen_input+0x1e4>)
 800f968:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f96a:	8812      	ldrh	r2, [r2, #0]
 800f96c:	b292      	uxth	r2, r2
 800f96e:	9202      	str	r2, [sp, #8]
 800f970:	9301      	str	r3, [sp, #4]
 800f972:	4b63      	ldr	r3, [pc, #396]	; (800fb00 <tcp_listen_input+0x1e8>)
 800f974:	9300      	str	r3, [sp, #0]
 800f976:	4b63      	ldr	r3, [pc, #396]	; (800fb04 <tcp_listen_input+0x1ec>)
 800f978:	4602      	mov	r2, r0
 800f97a:	6878      	ldr	r0, [r7, #4]
 800f97c:	f003 fbea 	bl	8013154 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800f980:	e0aa      	b.n	800fad8 <tcp_listen_input+0x1c0>
  } else if (flags & TCP_SYN) {
 800f982:	4b57      	ldr	r3, [pc, #348]	; (800fae0 <tcp_listen_input+0x1c8>)
 800f984:	781b      	ldrb	r3, [r3, #0]
 800f986:	f003 0302 	and.w	r3, r3, #2
 800f98a:	2b00      	cmp	r3, #0
 800f98c:	f000 80a4 	beq.w	800fad8 <tcp_listen_input+0x1c0>
    npcb = tcp_alloc(pcb->prio);
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	7d5b      	ldrb	r3, [r3, #21]
 800f994:	4618      	mov	r0, r3
 800f996:	f7ff f85d 	bl	800ea54 <tcp_alloc>
 800f99a:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800f99c:	697b      	ldr	r3, [r7, #20]
 800f99e:	2b00      	cmp	r3, #0
 800f9a0:	d111      	bne.n	800f9c6 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800f9a2:	687b      	ldr	r3, [r7, #4]
 800f9a4:	699b      	ldr	r3, [r3, #24]
 800f9a6:	2b00      	cmp	r3, #0
 800f9a8:	d00a      	beq.n	800f9c0 <tcp_listen_input+0xa8>
 800f9aa:	687b      	ldr	r3, [r7, #4]
 800f9ac:	699b      	ldr	r3, [r3, #24]
 800f9ae:	687a      	ldr	r2, [r7, #4]
 800f9b0:	6910      	ldr	r0, [r2, #16]
 800f9b2:	f04f 32ff 	mov.w	r2, #4294967295
 800f9b6:	2100      	movs	r1, #0
 800f9b8:	4798      	blx	r3
 800f9ba:	4603      	mov	r3, r0
 800f9bc:	73bb      	strb	r3, [r7, #14]
      return;
 800f9be:	e08c      	b.n	800fada <tcp_listen_input+0x1c2>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800f9c0:	23f0      	movs	r3, #240	; 0xf0
 800f9c2:	73bb      	strb	r3, [r7, #14]
      return;
 800f9c4:	e089      	b.n	800fada <tcp_listen_input+0x1c2>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800f9c6:	4b50      	ldr	r3, [pc, #320]	; (800fb08 <tcp_listen_input+0x1f0>)
 800f9c8:	695a      	ldr	r2, [r3, #20]
 800f9ca:	697b      	ldr	r3, [r7, #20]
 800f9cc:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800f9ce:	4b4e      	ldr	r3, [pc, #312]	; (800fb08 <tcp_listen_input+0x1f0>)
 800f9d0:	691a      	ldr	r2, [r3, #16]
 800f9d2:	697b      	ldr	r3, [r7, #20]
 800f9d4:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800f9d6:	687b      	ldr	r3, [r7, #4]
 800f9d8:	8ada      	ldrh	r2, [r3, #22]
 800f9da:	697b      	ldr	r3, [r7, #20]
 800f9dc:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800f9de:	4b47      	ldr	r3, [pc, #284]	; (800fafc <tcp_listen_input+0x1e4>)
 800f9e0:	681b      	ldr	r3, [r3, #0]
 800f9e2:	881b      	ldrh	r3, [r3, #0]
 800f9e4:	b29a      	uxth	r2, r3
 800f9e6:	697b      	ldr	r3, [r7, #20]
 800f9e8:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800f9ea:	697b      	ldr	r3, [r7, #20]
 800f9ec:	2203      	movs	r2, #3
 800f9ee:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800f9f0:	4b41      	ldr	r3, [pc, #260]	; (800faf8 <tcp_listen_input+0x1e0>)
 800f9f2:	681b      	ldr	r3, [r3, #0]
 800f9f4:	1c5a      	adds	r2, r3, #1
 800f9f6:	697b      	ldr	r3, [r7, #20]
 800f9f8:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800f9fa:	697b      	ldr	r3, [r7, #20]
 800f9fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f9fe:	697b      	ldr	r3, [r7, #20]
 800fa00:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800fa02:	6978      	ldr	r0, [r7, #20]
 800fa04:	f7ff fa5c 	bl	800eec0 <tcp_next_iss>
 800fa08:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800fa0a:	697b      	ldr	r3, [r7, #20]
 800fa0c:	693a      	ldr	r2, [r7, #16]
 800fa0e:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800fa10:	697b      	ldr	r3, [r7, #20]
 800fa12:	693a      	ldr	r2, [r7, #16]
 800fa14:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800fa16:	697b      	ldr	r3, [r7, #20]
 800fa18:	693a      	ldr	r2, [r7, #16]
 800fa1a:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800fa1c:	697b      	ldr	r3, [r7, #20]
 800fa1e:	693a      	ldr	r2, [r7, #16]
 800fa20:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800fa22:	4b35      	ldr	r3, [pc, #212]	; (800faf8 <tcp_listen_input+0x1e0>)
 800fa24:	681b      	ldr	r3, [r3, #0]
 800fa26:	1e5a      	subs	r2, r3, #1
 800fa28:	697b      	ldr	r3, [r7, #20]
 800fa2a:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800fa2c:	687b      	ldr	r3, [r7, #4]
 800fa2e:	691a      	ldr	r2, [r3, #16]
 800fa30:	697b      	ldr	r3, [r7, #20]
 800fa32:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800fa34:	697b      	ldr	r3, [r7, #20]
 800fa36:	687a      	ldr	r2, [r7, #4]
 800fa38:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800fa3a:	687b      	ldr	r3, [r7, #4]
 800fa3c:	7a5b      	ldrb	r3, [r3, #9]
 800fa3e:	f003 030c 	and.w	r3, r3, #12
 800fa42:	b2da      	uxtb	r2, r3
 800fa44:	697b      	ldr	r3, [r7, #20]
 800fa46:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800fa48:	687b      	ldr	r3, [r7, #4]
 800fa4a:	7a1a      	ldrb	r2, [r3, #8]
 800fa4c:	697b      	ldr	r3, [r7, #20]
 800fa4e:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800fa50:	4b2e      	ldr	r3, [pc, #184]	; (800fb0c <tcp_listen_input+0x1f4>)
 800fa52:	681a      	ldr	r2, [r3, #0]
 800fa54:	697b      	ldr	r3, [r7, #20]
 800fa56:	60da      	str	r2, [r3, #12]
 800fa58:	4a2c      	ldr	r2, [pc, #176]	; (800fb0c <tcp_listen_input+0x1f4>)
 800fa5a:	697b      	ldr	r3, [r7, #20]
 800fa5c:	6013      	str	r3, [r2, #0]
 800fa5e:	f003 fd3b 	bl	80134d8 <tcp_timer_needed>
 800fa62:	4b2b      	ldr	r3, [pc, #172]	; (800fb10 <tcp_listen_input+0x1f8>)
 800fa64:	2201      	movs	r2, #1
 800fa66:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800fa68:	6978      	ldr	r0, [r7, #20]
 800fa6a:	f001 fd8f 	bl	801158c <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800fa6e:	4b23      	ldr	r3, [pc, #140]	; (800fafc <tcp_listen_input+0x1e4>)
 800fa70:	681b      	ldr	r3, [r3, #0]
 800fa72:	89db      	ldrh	r3, [r3, #14]
 800fa74:	b29a      	uxth	r2, r3
 800fa76:	697b      	ldr	r3, [r7, #20]
 800fa78:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800fa7c:	697b      	ldr	r3, [r7, #20]
 800fa7e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800fa82:	697b      	ldr	r3, [r7, #20]
 800fa84:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800fa88:	697b      	ldr	r3, [r7, #20]
 800fa8a:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800fa8c:	697b      	ldr	r3, [r7, #20]
 800fa8e:	3304      	adds	r3, #4
 800fa90:	4618      	mov	r0, r3
 800fa92:	f005 fc5d 	bl	8015350 <ip4_route>
 800fa96:	4601      	mov	r1, r0
 800fa98:	697b      	ldr	r3, [r7, #20]
 800fa9a:	3304      	adds	r3, #4
 800fa9c:	461a      	mov	r2, r3
 800fa9e:	4620      	mov	r0, r4
 800faa0:	f7ff fa34 	bl	800ef0c <tcp_eff_send_mss_netif>
 800faa4:	4603      	mov	r3, r0
 800faa6:	461a      	mov	r2, r3
 800faa8:	697b      	ldr	r3, [r7, #20]
 800faaa:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800faac:	2112      	movs	r1, #18
 800faae:	6978      	ldr	r0, [r7, #20]
 800fab0:	f002 fc9c 	bl	80123ec <tcp_enqueue_flags>
 800fab4:	4603      	mov	r3, r0
 800fab6:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800fab8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fabc:	2b00      	cmp	r3, #0
 800fabe:	d004      	beq.n	800faca <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800fac0:	2100      	movs	r1, #0
 800fac2:	6978      	ldr	r0, [r7, #20]
 800fac4:	f7fd ffda 	bl	800da7c <tcp_abandon>
      return;
 800fac8:	e007      	b.n	800fada <tcp_listen_input+0x1c2>
    tcp_output(npcb);
 800faca:	6978      	ldr	r0, [r7, #20]
 800facc:	f002 fd7c 	bl	80125c8 <tcp_output>
  return;
 800fad0:	bf00      	nop
 800fad2:	e001      	b.n	800fad8 <tcp_listen_input+0x1c0>
    return;
 800fad4:	bf00      	nop
 800fad6:	e000      	b.n	800fada <tcp_listen_input+0x1c2>
  return;
 800fad8:	bf00      	nop
}
 800fada:	371c      	adds	r7, #28
 800fadc:	46bd      	mov	sp, r7
 800fade:	bd90      	pop	{r4, r7, pc}
 800fae0:	200047f0 	.word	0x200047f0
 800fae4:	0801a22c 	.word	0x0801a22c
 800fae8:	0801a424 	.word	0x0801a424
 800faec:	0801a278 	.word	0x0801a278
 800faf0:	200047e8 	.word	0x200047e8
 800faf4:	200047ee 	.word	0x200047ee
 800faf8:	200047e4 	.word	0x200047e4
 800fafc:	200047d4 	.word	0x200047d4
 800fb00:	20007b38 	.word	0x20007b38
 800fb04:	20007b3c 	.word	0x20007b3c
 800fb08:	20007b28 	.word	0x20007b28
 800fb0c:	2000d3fc 	.word	0x2000d3fc
 800fb10:	2000d3f8 	.word	0x2000d3f8

0800fb14 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800fb14:	b580      	push	{r7, lr}
 800fb16:	b086      	sub	sp, #24
 800fb18:	af04      	add	r7, sp, #16
 800fb1a:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800fb1c:	4b30      	ldr	r3, [pc, #192]	; (800fbe0 <tcp_timewait_input+0xcc>)
 800fb1e:	781b      	ldrb	r3, [r3, #0]
 800fb20:	f003 0304 	and.w	r3, r3, #4
 800fb24:	2b00      	cmp	r3, #0
 800fb26:	d154      	bne.n	800fbd2 <tcp_timewait_input+0xbe>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800fb28:	687b      	ldr	r3, [r7, #4]
 800fb2a:	2b00      	cmp	r3, #0
 800fb2c:	d106      	bne.n	800fb3c <tcp_timewait_input+0x28>
 800fb2e:	4b2d      	ldr	r3, [pc, #180]	; (800fbe4 <tcp_timewait_input+0xd0>)
 800fb30:	f240 22ee 	movw	r2, #750	; 0x2ee
 800fb34:	492c      	ldr	r1, [pc, #176]	; (800fbe8 <tcp_timewait_input+0xd4>)
 800fb36:	482d      	ldr	r0, [pc, #180]	; (800fbec <tcp_timewait_input+0xd8>)
 800fb38:	f007 f992 	bl	8016e60 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800fb3c:	4b28      	ldr	r3, [pc, #160]	; (800fbe0 <tcp_timewait_input+0xcc>)
 800fb3e:	781b      	ldrb	r3, [r3, #0]
 800fb40:	f003 0302 	and.w	r3, r3, #2
 800fb44:	2b00      	cmp	r3, #0
 800fb46:	d02a      	beq.n	800fb9e <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800fb48:	4b29      	ldr	r3, [pc, #164]	; (800fbf0 <tcp_timewait_input+0xdc>)
 800fb4a:	681a      	ldr	r2, [r3, #0]
 800fb4c:	687b      	ldr	r3, [r7, #4]
 800fb4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb50:	1ad3      	subs	r3, r2, r3
 800fb52:	2b00      	cmp	r3, #0
 800fb54:	db2d      	blt.n	800fbb2 <tcp_timewait_input+0x9e>
 800fb56:	4b26      	ldr	r3, [pc, #152]	; (800fbf0 <tcp_timewait_input+0xdc>)
 800fb58:	681a      	ldr	r2, [r3, #0]
 800fb5a:	687b      	ldr	r3, [r7, #4]
 800fb5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb5e:	6879      	ldr	r1, [r7, #4]
 800fb60:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800fb62:	440b      	add	r3, r1
 800fb64:	1ad3      	subs	r3, r2, r3
 800fb66:	2b00      	cmp	r3, #0
 800fb68:	dc23      	bgt.n	800fbb2 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fb6a:	4b22      	ldr	r3, [pc, #136]	; (800fbf4 <tcp_timewait_input+0xe0>)
 800fb6c:	6819      	ldr	r1, [r3, #0]
 800fb6e:	4b22      	ldr	r3, [pc, #136]	; (800fbf8 <tcp_timewait_input+0xe4>)
 800fb70:	881b      	ldrh	r3, [r3, #0]
 800fb72:	461a      	mov	r2, r3
 800fb74:	4b1e      	ldr	r3, [pc, #120]	; (800fbf0 <tcp_timewait_input+0xdc>)
 800fb76:	681b      	ldr	r3, [r3, #0]
 800fb78:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fb7a:	4b20      	ldr	r3, [pc, #128]	; (800fbfc <tcp_timewait_input+0xe8>)
 800fb7c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fb7e:	885b      	ldrh	r3, [r3, #2]
 800fb80:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fb82:	4a1e      	ldr	r2, [pc, #120]	; (800fbfc <tcp_timewait_input+0xe8>)
 800fb84:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fb86:	8812      	ldrh	r2, [r2, #0]
 800fb88:	b292      	uxth	r2, r2
 800fb8a:	9202      	str	r2, [sp, #8]
 800fb8c:	9301      	str	r3, [sp, #4]
 800fb8e:	4b1c      	ldr	r3, [pc, #112]	; (800fc00 <tcp_timewait_input+0xec>)
 800fb90:	9300      	str	r3, [sp, #0]
 800fb92:	4b1c      	ldr	r3, [pc, #112]	; (800fc04 <tcp_timewait_input+0xf0>)
 800fb94:	4602      	mov	r2, r0
 800fb96:	6878      	ldr	r0, [r7, #4]
 800fb98:	f003 fadc 	bl	8013154 <tcp_rst>
      return;
 800fb9c:	e01c      	b.n	800fbd8 <tcp_timewait_input+0xc4>
    }
  } else if (flags & TCP_FIN) {
 800fb9e:	4b10      	ldr	r3, [pc, #64]	; (800fbe0 <tcp_timewait_input+0xcc>)
 800fba0:	781b      	ldrb	r3, [r3, #0]
 800fba2:	f003 0301 	and.w	r3, r3, #1
 800fba6:	2b00      	cmp	r3, #0
 800fba8:	d003      	beq.n	800fbb2 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800fbaa:	4b17      	ldr	r3, [pc, #92]	; (800fc08 <tcp_timewait_input+0xf4>)
 800fbac:	681a      	ldr	r2, [r3, #0]
 800fbae:	687b      	ldr	r3, [r7, #4]
 800fbb0:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800fbb2:	4b11      	ldr	r3, [pc, #68]	; (800fbf8 <tcp_timewait_input+0xe4>)
 800fbb4:	881b      	ldrh	r3, [r3, #0]
 800fbb6:	2b00      	cmp	r3, #0
 800fbb8:	d00d      	beq.n	800fbd6 <tcp_timewait_input+0xc2>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800fbba:	687b      	ldr	r3, [r7, #4]
 800fbbc:	8b5b      	ldrh	r3, [r3, #26]
 800fbbe:	f043 0302 	orr.w	r3, r3, #2
 800fbc2:	b29a      	uxth	r2, r3
 800fbc4:	687b      	ldr	r3, [r7, #4]
 800fbc6:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800fbc8:	6878      	ldr	r0, [r7, #4]
 800fbca:	f002 fcfd 	bl	80125c8 <tcp_output>
  }
  return;
 800fbce:	bf00      	nop
 800fbd0:	e001      	b.n	800fbd6 <tcp_timewait_input+0xc2>
    return;
 800fbd2:	bf00      	nop
 800fbd4:	e000      	b.n	800fbd8 <tcp_timewait_input+0xc4>
  return;
 800fbd6:	bf00      	nop
}
 800fbd8:	3708      	adds	r7, #8
 800fbda:	46bd      	mov	sp, r7
 800fbdc:	bd80      	pop	{r7, pc}
 800fbde:	bf00      	nop
 800fbe0:	200047f0 	.word	0x200047f0
 800fbe4:	0801a22c 	.word	0x0801a22c
 800fbe8:	0801a444 	.word	0x0801a444
 800fbec:	0801a278 	.word	0x0801a278
 800fbf0:	200047e4 	.word	0x200047e4
 800fbf4:	200047e8 	.word	0x200047e8
 800fbf8:	200047ee 	.word	0x200047ee
 800fbfc:	200047d4 	.word	0x200047d4
 800fc00:	20007b38 	.word	0x20007b38
 800fc04:	20007b3c 	.word	0x20007b3c
 800fc08:	2000d400 	.word	0x2000d400

0800fc0c <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800fc0c:	b590      	push	{r4, r7, lr}
 800fc0e:	b08d      	sub	sp, #52	; 0x34
 800fc10:	af04      	add	r7, sp, #16
 800fc12:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800fc14:	2300      	movs	r3, #0
 800fc16:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800fc18:	2300      	movs	r3, #0
 800fc1a:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800fc1c:	687b      	ldr	r3, [r7, #4]
 800fc1e:	2b00      	cmp	r3, #0
 800fc20:	d106      	bne.n	800fc30 <tcp_process+0x24>
 800fc22:	4ba5      	ldr	r3, [pc, #660]	; (800feb8 <tcp_process+0x2ac>)
 800fc24:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800fc28:	49a4      	ldr	r1, [pc, #656]	; (800febc <tcp_process+0x2b0>)
 800fc2a:	48a5      	ldr	r0, [pc, #660]	; (800fec0 <tcp_process+0x2b4>)
 800fc2c:	f007 f918 	bl	8016e60 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800fc30:	4ba4      	ldr	r3, [pc, #656]	; (800fec4 <tcp_process+0x2b8>)
 800fc32:	781b      	ldrb	r3, [r3, #0]
 800fc34:	f003 0304 	and.w	r3, r3, #4
 800fc38:	2b00      	cmp	r3, #0
 800fc3a:	d04e      	beq.n	800fcda <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800fc3c:	687b      	ldr	r3, [r7, #4]
 800fc3e:	7d1b      	ldrb	r3, [r3, #20]
 800fc40:	2b02      	cmp	r3, #2
 800fc42:	d108      	bne.n	800fc56 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800fc44:	687b      	ldr	r3, [r7, #4]
 800fc46:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800fc48:	4b9f      	ldr	r3, [pc, #636]	; (800fec8 <tcp_process+0x2bc>)
 800fc4a:	681b      	ldr	r3, [r3, #0]
 800fc4c:	429a      	cmp	r2, r3
 800fc4e:	d123      	bne.n	800fc98 <tcp_process+0x8c>
        acceptable = 1;
 800fc50:	2301      	movs	r3, #1
 800fc52:	76fb      	strb	r3, [r7, #27]
 800fc54:	e020      	b.n	800fc98 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800fc56:	687b      	ldr	r3, [r7, #4]
 800fc58:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fc5a:	4b9c      	ldr	r3, [pc, #624]	; (800fecc <tcp_process+0x2c0>)
 800fc5c:	681b      	ldr	r3, [r3, #0]
 800fc5e:	429a      	cmp	r2, r3
 800fc60:	d102      	bne.n	800fc68 <tcp_process+0x5c>
        acceptable = 1;
 800fc62:	2301      	movs	r3, #1
 800fc64:	76fb      	strb	r3, [r7, #27]
 800fc66:	e017      	b.n	800fc98 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800fc68:	4b98      	ldr	r3, [pc, #608]	; (800fecc <tcp_process+0x2c0>)
 800fc6a:	681a      	ldr	r2, [r3, #0]
 800fc6c:	687b      	ldr	r3, [r7, #4]
 800fc6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc70:	1ad3      	subs	r3, r2, r3
 800fc72:	2b00      	cmp	r3, #0
 800fc74:	db10      	blt.n	800fc98 <tcp_process+0x8c>
 800fc76:	4b95      	ldr	r3, [pc, #596]	; (800fecc <tcp_process+0x2c0>)
 800fc78:	681a      	ldr	r2, [r3, #0]
 800fc7a:	687b      	ldr	r3, [r7, #4]
 800fc7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc7e:	6879      	ldr	r1, [r7, #4]
 800fc80:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800fc82:	440b      	add	r3, r1
 800fc84:	1ad3      	subs	r3, r2, r3
 800fc86:	2b00      	cmp	r3, #0
 800fc88:	dc06      	bgt.n	800fc98 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800fc8a:	687b      	ldr	r3, [r7, #4]
 800fc8c:	8b5b      	ldrh	r3, [r3, #26]
 800fc8e:	f043 0302 	orr.w	r3, r3, #2
 800fc92:	b29a      	uxth	r2, r3
 800fc94:	687b      	ldr	r3, [r7, #4]
 800fc96:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800fc98:	7efb      	ldrb	r3, [r7, #27]
 800fc9a:	2b00      	cmp	r3, #0
 800fc9c:	d01b      	beq.n	800fcd6 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800fc9e:	687b      	ldr	r3, [r7, #4]
 800fca0:	7d1b      	ldrb	r3, [r3, #20]
 800fca2:	2b00      	cmp	r3, #0
 800fca4:	d106      	bne.n	800fcb4 <tcp_process+0xa8>
 800fca6:	4b84      	ldr	r3, [pc, #528]	; (800feb8 <tcp_process+0x2ac>)
 800fca8:	f44f 724e 	mov.w	r2, #824	; 0x338
 800fcac:	4988      	ldr	r1, [pc, #544]	; (800fed0 <tcp_process+0x2c4>)
 800fcae:	4884      	ldr	r0, [pc, #528]	; (800fec0 <tcp_process+0x2b4>)
 800fcb0:	f007 f8d6 	bl	8016e60 <iprintf>
      recv_flags |= TF_RESET;
 800fcb4:	4b87      	ldr	r3, [pc, #540]	; (800fed4 <tcp_process+0x2c8>)
 800fcb6:	781b      	ldrb	r3, [r3, #0]
 800fcb8:	f043 0308 	orr.w	r3, r3, #8
 800fcbc:	b2da      	uxtb	r2, r3
 800fcbe:	4b85      	ldr	r3, [pc, #532]	; (800fed4 <tcp_process+0x2c8>)
 800fcc0:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800fcc2:	687b      	ldr	r3, [r7, #4]
 800fcc4:	8b5b      	ldrh	r3, [r3, #26]
 800fcc6:	f023 0301 	bic.w	r3, r3, #1
 800fcca:	b29a      	uxth	r2, r3
 800fccc:	687b      	ldr	r3, [r7, #4]
 800fcce:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800fcd0:	f06f 030d 	mvn.w	r3, #13
 800fcd4:	e37a      	b.n	80103cc <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800fcd6:	2300      	movs	r3, #0
 800fcd8:	e378      	b.n	80103cc <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800fcda:	4b7a      	ldr	r3, [pc, #488]	; (800fec4 <tcp_process+0x2b8>)
 800fcdc:	781b      	ldrb	r3, [r3, #0]
 800fcde:	f003 0302 	and.w	r3, r3, #2
 800fce2:	2b00      	cmp	r3, #0
 800fce4:	d010      	beq.n	800fd08 <tcp_process+0xfc>
 800fce6:	687b      	ldr	r3, [r7, #4]
 800fce8:	7d1b      	ldrb	r3, [r3, #20]
 800fcea:	2b02      	cmp	r3, #2
 800fcec:	d00c      	beq.n	800fd08 <tcp_process+0xfc>
 800fcee:	687b      	ldr	r3, [r7, #4]
 800fcf0:	7d1b      	ldrb	r3, [r3, #20]
 800fcf2:	2b03      	cmp	r3, #3
 800fcf4:	d008      	beq.n	800fd08 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800fcf6:	687b      	ldr	r3, [r7, #4]
 800fcf8:	8b5b      	ldrh	r3, [r3, #26]
 800fcfa:	f043 0302 	orr.w	r3, r3, #2
 800fcfe:	b29a      	uxth	r2, r3
 800fd00:	687b      	ldr	r3, [r7, #4]
 800fd02:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800fd04:	2300      	movs	r3, #0
 800fd06:	e361      	b.n	80103cc <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800fd08:	687b      	ldr	r3, [r7, #4]
 800fd0a:	8b5b      	ldrh	r3, [r3, #26]
 800fd0c:	f003 0310 	and.w	r3, r3, #16
 800fd10:	2b00      	cmp	r3, #0
 800fd12:	d103      	bne.n	800fd1c <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800fd14:	4b70      	ldr	r3, [pc, #448]	; (800fed8 <tcp_process+0x2cc>)
 800fd16:	681a      	ldr	r2, [r3, #0]
 800fd18:	687b      	ldr	r3, [r7, #4]
 800fd1a:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800fd1c:	687b      	ldr	r3, [r7, #4]
 800fd1e:	2200      	movs	r2, #0
 800fd20:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800fd24:	687b      	ldr	r3, [r7, #4]
 800fd26:	2200      	movs	r2, #0
 800fd28:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800fd2c:	6878      	ldr	r0, [r7, #4]
 800fd2e:	f001 fc2d 	bl	801158c <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800fd32:	687b      	ldr	r3, [r7, #4]
 800fd34:	7d1b      	ldrb	r3, [r3, #20]
 800fd36:	3b02      	subs	r3, #2
 800fd38:	2b07      	cmp	r3, #7
 800fd3a:	f200 8337 	bhi.w	80103ac <tcp_process+0x7a0>
 800fd3e:	a201      	add	r2, pc, #4	; (adr r2, 800fd44 <tcp_process+0x138>)
 800fd40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fd44:	0800fd65 	.word	0x0800fd65
 800fd48:	0800ff95 	.word	0x0800ff95
 800fd4c:	0801010d 	.word	0x0801010d
 800fd50:	08010137 	.word	0x08010137
 800fd54:	0801025b 	.word	0x0801025b
 800fd58:	0801010d 	.word	0x0801010d
 800fd5c:	080102e7 	.word	0x080102e7
 800fd60:	08010377 	.word	0x08010377
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800fd64:	4b57      	ldr	r3, [pc, #348]	; (800fec4 <tcp_process+0x2b8>)
 800fd66:	781b      	ldrb	r3, [r3, #0]
 800fd68:	f003 0310 	and.w	r3, r3, #16
 800fd6c:	2b00      	cmp	r3, #0
 800fd6e:	f000 80e4 	beq.w	800ff3a <tcp_process+0x32e>
 800fd72:	4b54      	ldr	r3, [pc, #336]	; (800fec4 <tcp_process+0x2b8>)
 800fd74:	781b      	ldrb	r3, [r3, #0]
 800fd76:	f003 0302 	and.w	r3, r3, #2
 800fd7a:	2b00      	cmp	r3, #0
 800fd7c:	f000 80dd 	beq.w	800ff3a <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800fd80:	687b      	ldr	r3, [r7, #4]
 800fd82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fd84:	1c5a      	adds	r2, r3, #1
 800fd86:	4b50      	ldr	r3, [pc, #320]	; (800fec8 <tcp_process+0x2bc>)
 800fd88:	681b      	ldr	r3, [r3, #0]
 800fd8a:	429a      	cmp	r2, r3
 800fd8c:	f040 80d5 	bne.w	800ff3a <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800fd90:	4b4e      	ldr	r3, [pc, #312]	; (800fecc <tcp_process+0x2c0>)
 800fd92:	681b      	ldr	r3, [r3, #0]
 800fd94:	1c5a      	adds	r2, r3, #1
 800fd96:	687b      	ldr	r3, [r7, #4]
 800fd98:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800fd9a:	687b      	ldr	r3, [r7, #4]
 800fd9c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fd9e:	687b      	ldr	r3, [r7, #4]
 800fda0:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800fda2:	4b49      	ldr	r3, [pc, #292]	; (800fec8 <tcp_process+0x2bc>)
 800fda4:	681a      	ldr	r2, [r3, #0]
 800fda6:	687b      	ldr	r3, [r7, #4]
 800fda8:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800fdaa:	4b4c      	ldr	r3, [pc, #304]	; (800fedc <tcp_process+0x2d0>)
 800fdac:	681b      	ldr	r3, [r3, #0]
 800fdae:	89db      	ldrh	r3, [r3, #14]
 800fdb0:	b29a      	uxth	r2, r3
 800fdb2:	687b      	ldr	r3, [r7, #4]
 800fdb4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800fdb8:	687b      	ldr	r3, [r7, #4]
 800fdba:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800fdbe:	687b      	ldr	r3, [r7, #4]
 800fdc0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800fdc4:	4b41      	ldr	r3, [pc, #260]	; (800fecc <tcp_process+0x2c0>)
 800fdc6:	681b      	ldr	r3, [r3, #0]
 800fdc8:	1e5a      	subs	r2, r3, #1
 800fdca:	687b      	ldr	r3, [r7, #4]
 800fdcc:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800fdce:	687b      	ldr	r3, [r7, #4]
 800fdd0:	2204      	movs	r2, #4
 800fdd2:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800fdd4:	687b      	ldr	r3, [r7, #4]
 800fdd6:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800fdd8:	687b      	ldr	r3, [r7, #4]
 800fdda:	3304      	adds	r3, #4
 800fddc:	4618      	mov	r0, r3
 800fdde:	f005 fab7 	bl	8015350 <ip4_route>
 800fde2:	4601      	mov	r1, r0
 800fde4:	687b      	ldr	r3, [r7, #4]
 800fde6:	3304      	adds	r3, #4
 800fde8:	461a      	mov	r2, r3
 800fdea:	4620      	mov	r0, r4
 800fdec:	f7ff f88e 	bl	800ef0c <tcp_eff_send_mss_netif>
 800fdf0:	4603      	mov	r3, r0
 800fdf2:	461a      	mov	r2, r3
 800fdf4:	687b      	ldr	r3, [r7, #4]
 800fdf6:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800fdf8:	687b      	ldr	r3, [r7, #4]
 800fdfa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fdfc:	009a      	lsls	r2, r3, #2
 800fdfe:	687b      	ldr	r3, [r7, #4]
 800fe00:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fe02:	005b      	lsls	r3, r3, #1
 800fe04:	f241 111c 	movw	r1, #4380	; 0x111c
 800fe08:	428b      	cmp	r3, r1
 800fe0a:	bf38      	it	cc
 800fe0c:	460b      	movcc	r3, r1
 800fe0e:	429a      	cmp	r2, r3
 800fe10:	d204      	bcs.n	800fe1c <tcp_process+0x210>
 800fe12:	687b      	ldr	r3, [r7, #4]
 800fe14:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fe16:	009b      	lsls	r3, r3, #2
 800fe18:	b29b      	uxth	r3, r3
 800fe1a:	e00d      	b.n	800fe38 <tcp_process+0x22c>
 800fe1c:	687b      	ldr	r3, [r7, #4]
 800fe1e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fe20:	005b      	lsls	r3, r3, #1
 800fe22:	f241 121c 	movw	r2, #4380	; 0x111c
 800fe26:	4293      	cmp	r3, r2
 800fe28:	d904      	bls.n	800fe34 <tcp_process+0x228>
 800fe2a:	687b      	ldr	r3, [r7, #4]
 800fe2c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fe2e:	005b      	lsls	r3, r3, #1
 800fe30:	b29b      	uxth	r3, r3
 800fe32:	e001      	b.n	800fe38 <tcp_process+0x22c>
 800fe34:	f241 131c 	movw	r3, #4380	; 0x111c
 800fe38:	687a      	ldr	r2, [r7, #4]
 800fe3a:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800fe3e:	687b      	ldr	r3, [r7, #4]
 800fe40:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800fe44:	2b00      	cmp	r3, #0
 800fe46:	d106      	bne.n	800fe56 <tcp_process+0x24a>
 800fe48:	4b1b      	ldr	r3, [pc, #108]	; (800feb8 <tcp_process+0x2ac>)
 800fe4a:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800fe4e:	4924      	ldr	r1, [pc, #144]	; (800fee0 <tcp_process+0x2d4>)
 800fe50:	481b      	ldr	r0, [pc, #108]	; (800fec0 <tcp_process+0x2b4>)
 800fe52:	f007 f805 	bl	8016e60 <iprintf>
        --pcb->snd_queuelen;
 800fe56:	687b      	ldr	r3, [r7, #4]
 800fe58:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800fe5c:	3b01      	subs	r3, #1
 800fe5e:	b29a      	uxth	r2, r3
 800fe60:	687b      	ldr	r3, [r7, #4]
 800fe62:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800fe66:	687b      	ldr	r3, [r7, #4]
 800fe68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fe6a:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800fe6c:	69fb      	ldr	r3, [r7, #28]
 800fe6e:	2b00      	cmp	r3, #0
 800fe70:	d111      	bne.n	800fe96 <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800fe72:	687b      	ldr	r3, [r7, #4]
 800fe74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fe76:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800fe78:	69fb      	ldr	r3, [r7, #28]
 800fe7a:	2b00      	cmp	r3, #0
 800fe7c:	d106      	bne.n	800fe8c <tcp_process+0x280>
 800fe7e:	4b0e      	ldr	r3, [pc, #56]	; (800feb8 <tcp_process+0x2ac>)
 800fe80:	f44f 725d 	mov.w	r2, #884	; 0x374
 800fe84:	4917      	ldr	r1, [pc, #92]	; (800fee4 <tcp_process+0x2d8>)
 800fe86:	480e      	ldr	r0, [pc, #56]	; (800fec0 <tcp_process+0x2b4>)
 800fe88:	f006 ffea 	bl	8016e60 <iprintf>
          pcb->unsent = rseg->next;
 800fe8c:	69fb      	ldr	r3, [r7, #28]
 800fe8e:	681a      	ldr	r2, [r3, #0]
 800fe90:	687b      	ldr	r3, [r7, #4]
 800fe92:	66da      	str	r2, [r3, #108]	; 0x6c
 800fe94:	e003      	b.n	800fe9e <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 800fe96:	69fb      	ldr	r3, [r7, #28]
 800fe98:	681a      	ldr	r2, [r3, #0]
 800fe9a:	687b      	ldr	r3, [r7, #4]
 800fe9c:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800fe9e:	69f8      	ldr	r0, [r7, #28]
 800fea0:	f7fe fc70 	bl	800e784 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800fea4:	687b      	ldr	r3, [r7, #4]
 800fea6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fea8:	2b00      	cmp	r3, #0
 800feaa:	d11d      	bne.n	800fee8 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800feac:	687b      	ldr	r3, [r7, #4]
 800feae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800feb2:	861a      	strh	r2, [r3, #48]	; 0x30
 800feb4:	e01f      	b.n	800fef6 <tcp_process+0x2ea>
 800feb6:	bf00      	nop
 800feb8:	0801a22c 	.word	0x0801a22c
 800febc:	0801a464 	.word	0x0801a464
 800fec0:	0801a278 	.word	0x0801a278
 800fec4:	200047f0 	.word	0x200047f0
 800fec8:	200047e8 	.word	0x200047e8
 800fecc:	200047e4 	.word	0x200047e4
 800fed0:	0801a480 	.word	0x0801a480
 800fed4:	200047f1 	.word	0x200047f1
 800fed8:	2000d400 	.word	0x2000d400
 800fedc:	200047d4 	.word	0x200047d4
 800fee0:	0801a4a0 	.word	0x0801a4a0
 800fee4:	0801a4b8 	.word	0x0801a4b8
        } else {
          pcb->rtime = 0;
 800fee8:	687b      	ldr	r3, [r7, #4]
 800feea:	2200      	movs	r2, #0
 800feec:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800feee:	687b      	ldr	r3, [r7, #4]
 800fef0:	2200      	movs	r2, #0
 800fef2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800fef6:	687b      	ldr	r3, [r7, #4]
 800fef8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fefc:	2b00      	cmp	r3, #0
 800fefe:	d00a      	beq.n	800ff16 <tcp_process+0x30a>
 800ff00:	687b      	ldr	r3, [r7, #4]
 800ff02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ff06:	687a      	ldr	r2, [r7, #4]
 800ff08:	6910      	ldr	r0, [r2, #16]
 800ff0a:	2200      	movs	r2, #0
 800ff0c:	6879      	ldr	r1, [r7, #4]
 800ff0e:	4798      	blx	r3
 800ff10:	4603      	mov	r3, r0
 800ff12:	76bb      	strb	r3, [r7, #26]
 800ff14:	e001      	b.n	800ff1a <tcp_process+0x30e>
 800ff16:	2300      	movs	r3, #0
 800ff18:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800ff1a:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800ff1e:	f113 0f0d 	cmn.w	r3, #13
 800ff22:	d102      	bne.n	800ff2a <tcp_process+0x31e>
          return ERR_ABRT;
 800ff24:	f06f 030c 	mvn.w	r3, #12
 800ff28:	e250      	b.n	80103cc <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800ff2a:	687b      	ldr	r3, [r7, #4]
 800ff2c:	8b5b      	ldrh	r3, [r3, #26]
 800ff2e:	f043 0302 	orr.w	r3, r3, #2
 800ff32:	b29a      	uxth	r2, r3
 800ff34:	687b      	ldr	r3, [r7, #4]
 800ff36:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800ff38:	e23a      	b.n	80103b0 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800ff3a:	4b9d      	ldr	r3, [pc, #628]	; (80101b0 <tcp_process+0x5a4>)
 800ff3c:	781b      	ldrb	r3, [r3, #0]
 800ff3e:	f003 0310 	and.w	r3, r3, #16
 800ff42:	2b00      	cmp	r3, #0
 800ff44:	f000 8234 	beq.w	80103b0 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ff48:	4b9a      	ldr	r3, [pc, #616]	; (80101b4 <tcp_process+0x5a8>)
 800ff4a:	6819      	ldr	r1, [r3, #0]
 800ff4c:	4b9a      	ldr	r3, [pc, #616]	; (80101b8 <tcp_process+0x5ac>)
 800ff4e:	881b      	ldrh	r3, [r3, #0]
 800ff50:	461a      	mov	r2, r3
 800ff52:	4b9a      	ldr	r3, [pc, #616]	; (80101bc <tcp_process+0x5b0>)
 800ff54:	681b      	ldr	r3, [r3, #0]
 800ff56:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ff58:	4b99      	ldr	r3, [pc, #612]	; (80101c0 <tcp_process+0x5b4>)
 800ff5a:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ff5c:	885b      	ldrh	r3, [r3, #2]
 800ff5e:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ff60:	4a97      	ldr	r2, [pc, #604]	; (80101c0 <tcp_process+0x5b4>)
 800ff62:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ff64:	8812      	ldrh	r2, [r2, #0]
 800ff66:	b292      	uxth	r2, r2
 800ff68:	9202      	str	r2, [sp, #8]
 800ff6a:	9301      	str	r3, [sp, #4]
 800ff6c:	4b95      	ldr	r3, [pc, #596]	; (80101c4 <tcp_process+0x5b8>)
 800ff6e:	9300      	str	r3, [sp, #0]
 800ff70:	4b95      	ldr	r3, [pc, #596]	; (80101c8 <tcp_process+0x5bc>)
 800ff72:	4602      	mov	r2, r0
 800ff74:	6878      	ldr	r0, [r7, #4]
 800ff76:	f003 f8ed 	bl	8013154 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800ff7a:	687b      	ldr	r3, [r7, #4]
 800ff7c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ff80:	2b05      	cmp	r3, #5
 800ff82:	f200 8215 	bhi.w	80103b0 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800ff86:	687b      	ldr	r3, [r7, #4]
 800ff88:	2200      	movs	r2, #0
 800ff8a:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800ff8c:	6878      	ldr	r0, [r7, #4]
 800ff8e:	f002 feab 	bl	8012ce8 <tcp_rexmit_rto>
      break;
 800ff92:	e20d      	b.n	80103b0 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800ff94:	4b86      	ldr	r3, [pc, #536]	; (80101b0 <tcp_process+0x5a4>)
 800ff96:	781b      	ldrb	r3, [r3, #0]
 800ff98:	f003 0310 	and.w	r3, r3, #16
 800ff9c:	2b00      	cmp	r3, #0
 800ff9e:	f000 80a1 	beq.w	80100e4 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800ffa2:	4b84      	ldr	r3, [pc, #528]	; (80101b4 <tcp_process+0x5a8>)
 800ffa4:	681a      	ldr	r2, [r3, #0]
 800ffa6:	687b      	ldr	r3, [r7, #4]
 800ffa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ffaa:	1ad3      	subs	r3, r2, r3
 800ffac:	3b01      	subs	r3, #1
 800ffae:	2b00      	cmp	r3, #0
 800ffb0:	db7e      	blt.n	80100b0 <tcp_process+0x4a4>
 800ffb2:	4b80      	ldr	r3, [pc, #512]	; (80101b4 <tcp_process+0x5a8>)
 800ffb4:	681a      	ldr	r2, [r3, #0]
 800ffb6:	687b      	ldr	r3, [r7, #4]
 800ffb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ffba:	1ad3      	subs	r3, r2, r3
 800ffbc:	2b00      	cmp	r3, #0
 800ffbe:	dc77      	bgt.n	80100b0 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800ffc0:	687b      	ldr	r3, [r7, #4]
 800ffc2:	2204      	movs	r2, #4
 800ffc4:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800ffc6:	687b      	ldr	r3, [r7, #4]
 800ffc8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ffca:	2b00      	cmp	r3, #0
 800ffcc:	d102      	bne.n	800ffd4 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800ffce:	23fa      	movs	r3, #250	; 0xfa
 800ffd0:	76bb      	strb	r3, [r7, #26]
 800ffd2:	e01d      	b.n	8010010 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800ffd4:	687b      	ldr	r3, [r7, #4]
 800ffd6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ffd8:	699b      	ldr	r3, [r3, #24]
 800ffda:	2b00      	cmp	r3, #0
 800ffdc:	d106      	bne.n	800ffec <tcp_process+0x3e0>
 800ffde:	4b7b      	ldr	r3, [pc, #492]	; (80101cc <tcp_process+0x5c0>)
 800ffe0:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800ffe4:	497a      	ldr	r1, [pc, #488]	; (80101d0 <tcp_process+0x5c4>)
 800ffe6:	487b      	ldr	r0, [pc, #492]	; (80101d4 <tcp_process+0x5c8>)
 800ffe8:	f006 ff3a 	bl	8016e60 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800ffec:	687b      	ldr	r3, [r7, #4]
 800ffee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fff0:	699b      	ldr	r3, [r3, #24]
 800fff2:	2b00      	cmp	r3, #0
 800fff4:	d00a      	beq.n	801000c <tcp_process+0x400>
 800fff6:	687b      	ldr	r3, [r7, #4]
 800fff8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fffa:	699b      	ldr	r3, [r3, #24]
 800fffc:	687a      	ldr	r2, [r7, #4]
 800fffe:	6910      	ldr	r0, [r2, #16]
 8010000:	2200      	movs	r2, #0
 8010002:	6879      	ldr	r1, [r7, #4]
 8010004:	4798      	blx	r3
 8010006:	4603      	mov	r3, r0
 8010008:	76bb      	strb	r3, [r7, #26]
 801000a:	e001      	b.n	8010010 <tcp_process+0x404>
 801000c:	23f0      	movs	r3, #240	; 0xf0
 801000e:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8010010:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8010014:	2b00      	cmp	r3, #0
 8010016:	d00a      	beq.n	801002e <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8010018:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801001c:	f113 0f0d 	cmn.w	r3, #13
 8010020:	d002      	beq.n	8010028 <tcp_process+0x41c>
              tcp_abort(pcb);
 8010022:	6878      	ldr	r0, [r7, #4]
 8010024:	f7fd fde8 	bl	800dbf8 <tcp_abort>
            }
            return ERR_ABRT;
 8010028:	f06f 030c 	mvn.w	r3, #12
 801002c:	e1ce      	b.n	80103cc <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 801002e:	6878      	ldr	r0, [r7, #4]
 8010030:	f000 fae0 	bl	80105f4 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8010034:	4b68      	ldr	r3, [pc, #416]	; (80101d8 <tcp_process+0x5cc>)
 8010036:	881b      	ldrh	r3, [r3, #0]
 8010038:	2b00      	cmp	r3, #0
 801003a:	d005      	beq.n	8010048 <tcp_process+0x43c>
            recv_acked--;
 801003c:	4b66      	ldr	r3, [pc, #408]	; (80101d8 <tcp_process+0x5cc>)
 801003e:	881b      	ldrh	r3, [r3, #0]
 8010040:	3b01      	subs	r3, #1
 8010042:	b29a      	uxth	r2, r3
 8010044:	4b64      	ldr	r3, [pc, #400]	; (80101d8 <tcp_process+0x5cc>)
 8010046:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8010048:	687b      	ldr	r3, [r7, #4]
 801004a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801004c:	009a      	lsls	r2, r3, #2
 801004e:	687b      	ldr	r3, [r7, #4]
 8010050:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010052:	005b      	lsls	r3, r3, #1
 8010054:	f241 111c 	movw	r1, #4380	; 0x111c
 8010058:	428b      	cmp	r3, r1
 801005a:	bf38      	it	cc
 801005c:	460b      	movcc	r3, r1
 801005e:	429a      	cmp	r2, r3
 8010060:	d204      	bcs.n	801006c <tcp_process+0x460>
 8010062:	687b      	ldr	r3, [r7, #4]
 8010064:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010066:	009b      	lsls	r3, r3, #2
 8010068:	b29b      	uxth	r3, r3
 801006a:	e00d      	b.n	8010088 <tcp_process+0x47c>
 801006c:	687b      	ldr	r3, [r7, #4]
 801006e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010070:	005b      	lsls	r3, r3, #1
 8010072:	f241 121c 	movw	r2, #4380	; 0x111c
 8010076:	4293      	cmp	r3, r2
 8010078:	d904      	bls.n	8010084 <tcp_process+0x478>
 801007a:	687b      	ldr	r3, [r7, #4]
 801007c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801007e:	005b      	lsls	r3, r3, #1
 8010080:	b29b      	uxth	r3, r3
 8010082:	e001      	b.n	8010088 <tcp_process+0x47c>
 8010084:	f241 131c 	movw	r3, #4380	; 0x111c
 8010088:	687a      	ldr	r2, [r7, #4]
 801008a:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 801008e:	4b53      	ldr	r3, [pc, #332]	; (80101dc <tcp_process+0x5d0>)
 8010090:	781b      	ldrb	r3, [r3, #0]
 8010092:	f003 0320 	and.w	r3, r3, #32
 8010096:	2b00      	cmp	r3, #0
 8010098:	d037      	beq.n	801010a <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 801009a:	687b      	ldr	r3, [r7, #4]
 801009c:	8b5b      	ldrh	r3, [r3, #26]
 801009e:	f043 0302 	orr.w	r3, r3, #2
 80100a2:	b29a      	uxth	r2, r3
 80100a4:	687b      	ldr	r3, [r7, #4]
 80100a6:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 80100a8:	687b      	ldr	r3, [r7, #4]
 80100aa:	2207      	movs	r2, #7
 80100ac:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 80100ae:	e02c      	b.n	801010a <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80100b0:	4b40      	ldr	r3, [pc, #256]	; (80101b4 <tcp_process+0x5a8>)
 80100b2:	6819      	ldr	r1, [r3, #0]
 80100b4:	4b40      	ldr	r3, [pc, #256]	; (80101b8 <tcp_process+0x5ac>)
 80100b6:	881b      	ldrh	r3, [r3, #0]
 80100b8:	461a      	mov	r2, r3
 80100ba:	4b40      	ldr	r3, [pc, #256]	; (80101bc <tcp_process+0x5b0>)
 80100bc:	681b      	ldr	r3, [r3, #0]
 80100be:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80100c0:	4b3f      	ldr	r3, [pc, #252]	; (80101c0 <tcp_process+0x5b4>)
 80100c2:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80100c4:	885b      	ldrh	r3, [r3, #2]
 80100c6:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80100c8:	4a3d      	ldr	r2, [pc, #244]	; (80101c0 <tcp_process+0x5b4>)
 80100ca:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80100cc:	8812      	ldrh	r2, [r2, #0]
 80100ce:	b292      	uxth	r2, r2
 80100d0:	9202      	str	r2, [sp, #8]
 80100d2:	9301      	str	r3, [sp, #4]
 80100d4:	4b3b      	ldr	r3, [pc, #236]	; (80101c4 <tcp_process+0x5b8>)
 80100d6:	9300      	str	r3, [sp, #0]
 80100d8:	4b3b      	ldr	r3, [pc, #236]	; (80101c8 <tcp_process+0x5bc>)
 80100da:	4602      	mov	r2, r0
 80100dc:	6878      	ldr	r0, [r7, #4]
 80100de:	f003 f839 	bl	8013154 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 80100e2:	e167      	b.n	80103b4 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 80100e4:	4b32      	ldr	r3, [pc, #200]	; (80101b0 <tcp_process+0x5a4>)
 80100e6:	781b      	ldrb	r3, [r3, #0]
 80100e8:	f003 0302 	and.w	r3, r3, #2
 80100ec:	2b00      	cmp	r3, #0
 80100ee:	f000 8161 	beq.w	80103b4 <tcp_process+0x7a8>
 80100f2:	687b      	ldr	r3, [r7, #4]
 80100f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80100f6:	1e5a      	subs	r2, r3, #1
 80100f8:	4b30      	ldr	r3, [pc, #192]	; (80101bc <tcp_process+0x5b0>)
 80100fa:	681b      	ldr	r3, [r3, #0]
 80100fc:	429a      	cmp	r2, r3
 80100fe:	f040 8159 	bne.w	80103b4 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8010102:	6878      	ldr	r0, [r7, #4]
 8010104:	f002 fe12 	bl	8012d2c <tcp_rexmit>
      break;
 8010108:	e154      	b.n	80103b4 <tcp_process+0x7a8>
 801010a:	e153      	b.n	80103b4 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 801010c:	6878      	ldr	r0, [r7, #4]
 801010e:	f000 fa71 	bl	80105f4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8010112:	4b32      	ldr	r3, [pc, #200]	; (80101dc <tcp_process+0x5d0>)
 8010114:	781b      	ldrb	r3, [r3, #0]
 8010116:	f003 0320 	and.w	r3, r3, #32
 801011a:	2b00      	cmp	r3, #0
 801011c:	f000 814c 	beq.w	80103b8 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8010120:	687b      	ldr	r3, [r7, #4]
 8010122:	8b5b      	ldrh	r3, [r3, #26]
 8010124:	f043 0302 	orr.w	r3, r3, #2
 8010128:	b29a      	uxth	r2, r3
 801012a:	687b      	ldr	r3, [r7, #4]
 801012c:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 801012e:	687b      	ldr	r3, [r7, #4]
 8010130:	2207      	movs	r2, #7
 8010132:	751a      	strb	r2, [r3, #20]
      }
      break;
 8010134:	e140      	b.n	80103b8 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8010136:	6878      	ldr	r0, [r7, #4]
 8010138:	f000 fa5c 	bl	80105f4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 801013c:	4b27      	ldr	r3, [pc, #156]	; (80101dc <tcp_process+0x5d0>)
 801013e:	781b      	ldrb	r3, [r3, #0]
 8010140:	f003 0320 	and.w	r3, r3, #32
 8010144:	2b00      	cmp	r3, #0
 8010146:	d071      	beq.n	801022c <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8010148:	4b19      	ldr	r3, [pc, #100]	; (80101b0 <tcp_process+0x5a4>)
 801014a:	781b      	ldrb	r3, [r3, #0]
 801014c:	f003 0310 	and.w	r3, r3, #16
 8010150:	2b00      	cmp	r3, #0
 8010152:	d060      	beq.n	8010216 <tcp_process+0x60a>
 8010154:	687b      	ldr	r3, [r7, #4]
 8010156:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010158:	4b16      	ldr	r3, [pc, #88]	; (80101b4 <tcp_process+0x5a8>)
 801015a:	681b      	ldr	r3, [r3, #0]
 801015c:	429a      	cmp	r2, r3
 801015e:	d15a      	bne.n	8010216 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8010160:	687b      	ldr	r3, [r7, #4]
 8010162:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8010164:	2b00      	cmp	r3, #0
 8010166:	d156      	bne.n	8010216 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8010168:	687b      	ldr	r3, [r7, #4]
 801016a:	8b5b      	ldrh	r3, [r3, #26]
 801016c:	f043 0302 	orr.w	r3, r3, #2
 8010170:	b29a      	uxth	r2, r3
 8010172:	687b      	ldr	r3, [r7, #4]
 8010174:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8010176:	6878      	ldr	r0, [r7, #4]
 8010178:	f7fe fdbe 	bl	800ecf8 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 801017c:	4b18      	ldr	r3, [pc, #96]	; (80101e0 <tcp_process+0x5d4>)
 801017e:	681b      	ldr	r3, [r3, #0]
 8010180:	687a      	ldr	r2, [r7, #4]
 8010182:	429a      	cmp	r2, r3
 8010184:	d105      	bne.n	8010192 <tcp_process+0x586>
 8010186:	4b16      	ldr	r3, [pc, #88]	; (80101e0 <tcp_process+0x5d4>)
 8010188:	681b      	ldr	r3, [r3, #0]
 801018a:	68db      	ldr	r3, [r3, #12]
 801018c:	4a14      	ldr	r2, [pc, #80]	; (80101e0 <tcp_process+0x5d4>)
 801018e:	6013      	str	r3, [r2, #0]
 8010190:	e02e      	b.n	80101f0 <tcp_process+0x5e4>
 8010192:	4b13      	ldr	r3, [pc, #76]	; (80101e0 <tcp_process+0x5d4>)
 8010194:	681b      	ldr	r3, [r3, #0]
 8010196:	617b      	str	r3, [r7, #20]
 8010198:	e027      	b.n	80101ea <tcp_process+0x5de>
 801019a:	697b      	ldr	r3, [r7, #20]
 801019c:	68db      	ldr	r3, [r3, #12]
 801019e:	687a      	ldr	r2, [r7, #4]
 80101a0:	429a      	cmp	r2, r3
 80101a2:	d11f      	bne.n	80101e4 <tcp_process+0x5d8>
 80101a4:	687b      	ldr	r3, [r7, #4]
 80101a6:	68da      	ldr	r2, [r3, #12]
 80101a8:	697b      	ldr	r3, [r7, #20]
 80101aa:	60da      	str	r2, [r3, #12]
 80101ac:	e020      	b.n	80101f0 <tcp_process+0x5e4>
 80101ae:	bf00      	nop
 80101b0:	200047f0 	.word	0x200047f0
 80101b4:	200047e8 	.word	0x200047e8
 80101b8:	200047ee 	.word	0x200047ee
 80101bc:	200047e4 	.word	0x200047e4
 80101c0:	200047d4 	.word	0x200047d4
 80101c4:	20007b38 	.word	0x20007b38
 80101c8:	20007b3c 	.word	0x20007b3c
 80101cc:	0801a22c 	.word	0x0801a22c
 80101d0:	0801a4cc 	.word	0x0801a4cc
 80101d4:	0801a278 	.word	0x0801a278
 80101d8:	200047ec 	.word	0x200047ec
 80101dc:	200047f1 	.word	0x200047f1
 80101e0:	2000d3fc 	.word	0x2000d3fc
 80101e4:	697b      	ldr	r3, [r7, #20]
 80101e6:	68db      	ldr	r3, [r3, #12]
 80101e8:	617b      	str	r3, [r7, #20]
 80101ea:	697b      	ldr	r3, [r7, #20]
 80101ec:	2b00      	cmp	r3, #0
 80101ee:	d1d4      	bne.n	801019a <tcp_process+0x58e>
 80101f0:	687b      	ldr	r3, [r7, #4]
 80101f2:	2200      	movs	r2, #0
 80101f4:	60da      	str	r2, [r3, #12]
 80101f6:	4b77      	ldr	r3, [pc, #476]	; (80103d4 <tcp_process+0x7c8>)
 80101f8:	2201      	movs	r2, #1
 80101fa:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 80101fc:	687b      	ldr	r3, [r7, #4]
 80101fe:	220a      	movs	r2, #10
 8010200:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8010202:	4b75      	ldr	r3, [pc, #468]	; (80103d8 <tcp_process+0x7cc>)
 8010204:	681a      	ldr	r2, [r3, #0]
 8010206:	687b      	ldr	r3, [r7, #4]
 8010208:	60da      	str	r2, [r3, #12]
 801020a:	4a73      	ldr	r2, [pc, #460]	; (80103d8 <tcp_process+0x7cc>)
 801020c:	687b      	ldr	r3, [r7, #4]
 801020e:	6013      	str	r3, [r2, #0]
 8010210:	f003 f962 	bl	80134d8 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8010214:	e0d2      	b.n	80103bc <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8010216:	687b      	ldr	r3, [r7, #4]
 8010218:	8b5b      	ldrh	r3, [r3, #26]
 801021a:	f043 0302 	orr.w	r3, r3, #2
 801021e:	b29a      	uxth	r2, r3
 8010220:	687b      	ldr	r3, [r7, #4]
 8010222:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8010224:	687b      	ldr	r3, [r7, #4]
 8010226:	2208      	movs	r2, #8
 8010228:	751a      	strb	r2, [r3, #20]
      break;
 801022a:	e0c7      	b.n	80103bc <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801022c:	4b6b      	ldr	r3, [pc, #428]	; (80103dc <tcp_process+0x7d0>)
 801022e:	781b      	ldrb	r3, [r3, #0]
 8010230:	f003 0310 	and.w	r3, r3, #16
 8010234:	2b00      	cmp	r3, #0
 8010236:	f000 80c1 	beq.w	80103bc <tcp_process+0x7b0>
 801023a:	687b      	ldr	r3, [r7, #4]
 801023c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801023e:	4b68      	ldr	r3, [pc, #416]	; (80103e0 <tcp_process+0x7d4>)
 8010240:	681b      	ldr	r3, [r3, #0]
 8010242:	429a      	cmp	r2, r3
 8010244:	f040 80ba 	bne.w	80103bc <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8010248:	687b      	ldr	r3, [r7, #4]
 801024a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801024c:	2b00      	cmp	r3, #0
 801024e:	f040 80b5 	bne.w	80103bc <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8010252:	687b      	ldr	r3, [r7, #4]
 8010254:	2206      	movs	r2, #6
 8010256:	751a      	strb	r2, [r3, #20]
      break;
 8010258:	e0b0      	b.n	80103bc <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 801025a:	6878      	ldr	r0, [r7, #4]
 801025c:	f000 f9ca 	bl	80105f4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8010260:	4b60      	ldr	r3, [pc, #384]	; (80103e4 <tcp_process+0x7d8>)
 8010262:	781b      	ldrb	r3, [r3, #0]
 8010264:	f003 0320 	and.w	r3, r3, #32
 8010268:	2b00      	cmp	r3, #0
 801026a:	f000 80a9 	beq.w	80103c0 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 801026e:	687b      	ldr	r3, [r7, #4]
 8010270:	8b5b      	ldrh	r3, [r3, #26]
 8010272:	f043 0302 	orr.w	r3, r3, #2
 8010276:	b29a      	uxth	r2, r3
 8010278:	687b      	ldr	r3, [r7, #4]
 801027a:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 801027c:	6878      	ldr	r0, [r7, #4]
 801027e:	f7fe fd3b 	bl	800ecf8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8010282:	4b59      	ldr	r3, [pc, #356]	; (80103e8 <tcp_process+0x7dc>)
 8010284:	681b      	ldr	r3, [r3, #0]
 8010286:	687a      	ldr	r2, [r7, #4]
 8010288:	429a      	cmp	r2, r3
 801028a:	d105      	bne.n	8010298 <tcp_process+0x68c>
 801028c:	4b56      	ldr	r3, [pc, #344]	; (80103e8 <tcp_process+0x7dc>)
 801028e:	681b      	ldr	r3, [r3, #0]
 8010290:	68db      	ldr	r3, [r3, #12]
 8010292:	4a55      	ldr	r2, [pc, #340]	; (80103e8 <tcp_process+0x7dc>)
 8010294:	6013      	str	r3, [r2, #0]
 8010296:	e013      	b.n	80102c0 <tcp_process+0x6b4>
 8010298:	4b53      	ldr	r3, [pc, #332]	; (80103e8 <tcp_process+0x7dc>)
 801029a:	681b      	ldr	r3, [r3, #0]
 801029c:	613b      	str	r3, [r7, #16]
 801029e:	e00c      	b.n	80102ba <tcp_process+0x6ae>
 80102a0:	693b      	ldr	r3, [r7, #16]
 80102a2:	68db      	ldr	r3, [r3, #12]
 80102a4:	687a      	ldr	r2, [r7, #4]
 80102a6:	429a      	cmp	r2, r3
 80102a8:	d104      	bne.n	80102b4 <tcp_process+0x6a8>
 80102aa:	687b      	ldr	r3, [r7, #4]
 80102ac:	68da      	ldr	r2, [r3, #12]
 80102ae:	693b      	ldr	r3, [r7, #16]
 80102b0:	60da      	str	r2, [r3, #12]
 80102b2:	e005      	b.n	80102c0 <tcp_process+0x6b4>
 80102b4:	693b      	ldr	r3, [r7, #16]
 80102b6:	68db      	ldr	r3, [r3, #12]
 80102b8:	613b      	str	r3, [r7, #16]
 80102ba:	693b      	ldr	r3, [r7, #16]
 80102bc:	2b00      	cmp	r3, #0
 80102be:	d1ef      	bne.n	80102a0 <tcp_process+0x694>
 80102c0:	687b      	ldr	r3, [r7, #4]
 80102c2:	2200      	movs	r2, #0
 80102c4:	60da      	str	r2, [r3, #12]
 80102c6:	4b43      	ldr	r3, [pc, #268]	; (80103d4 <tcp_process+0x7c8>)
 80102c8:	2201      	movs	r2, #1
 80102ca:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80102cc:	687b      	ldr	r3, [r7, #4]
 80102ce:	220a      	movs	r2, #10
 80102d0:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80102d2:	4b41      	ldr	r3, [pc, #260]	; (80103d8 <tcp_process+0x7cc>)
 80102d4:	681a      	ldr	r2, [r3, #0]
 80102d6:	687b      	ldr	r3, [r7, #4]
 80102d8:	60da      	str	r2, [r3, #12]
 80102da:	4a3f      	ldr	r2, [pc, #252]	; (80103d8 <tcp_process+0x7cc>)
 80102dc:	687b      	ldr	r3, [r7, #4]
 80102de:	6013      	str	r3, [r2, #0]
 80102e0:	f003 f8fa 	bl	80134d8 <tcp_timer_needed>
      }
      break;
 80102e4:	e06c      	b.n	80103c0 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 80102e6:	6878      	ldr	r0, [r7, #4]
 80102e8:	f000 f984 	bl	80105f4 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80102ec:	4b3b      	ldr	r3, [pc, #236]	; (80103dc <tcp_process+0x7d0>)
 80102ee:	781b      	ldrb	r3, [r3, #0]
 80102f0:	f003 0310 	and.w	r3, r3, #16
 80102f4:	2b00      	cmp	r3, #0
 80102f6:	d065      	beq.n	80103c4 <tcp_process+0x7b8>
 80102f8:	687b      	ldr	r3, [r7, #4]
 80102fa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80102fc:	4b38      	ldr	r3, [pc, #224]	; (80103e0 <tcp_process+0x7d4>)
 80102fe:	681b      	ldr	r3, [r3, #0]
 8010300:	429a      	cmp	r2, r3
 8010302:	d15f      	bne.n	80103c4 <tcp_process+0x7b8>
 8010304:	687b      	ldr	r3, [r7, #4]
 8010306:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010308:	2b00      	cmp	r3, #0
 801030a:	d15b      	bne.n	80103c4 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 801030c:	6878      	ldr	r0, [r7, #4]
 801030e:	f7fe fcf3 	bl	800ecf8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8010312:	4b35      	ldr	r3, [pc, #212]	; (80103e8 <tcp_process+0x7dc>)
 8010314:	681b      	ldr	r3, [r3, #0]
 8010316:	687a      	ldr	r2, [r7, #4]
 8010318:	429a      	cmp	r2, r3
 801031a:	d105      	bne.n	8010328 <tcp_process+0x71c>
 801031c:	4b32      	ldr	r3, [pc, #200]	; (80103e8 <tcp_process+0x7dc>)
 801031e:	681b      	ldr	r3, [r3, #0]
 8010320:	68db      	ldr	r3, [r3, #12]
 8010322:	4a31      	ldr	r2, [pc, #196]	; (80103e8 <tcp_process+0x7dc>)
 8010324:	6013      	str	r3, [r2, #0]
 8010326:	e013      	b.n	8010350 <tcp_process+0x744>
 8010328:	4b2f      	ldr	r3, [pc, #188]	; (80103e8 <tcp_process+0x7dc>)
 801032a:	681b      	ldr	r3, [r3, #0]
 801032c:	60fb      	str	r3, [r7, #12]
 801032e:	e00c      	b.n	801034a <tcp_process+0x73e>
 8010330:	68fb      	ldr	r3, [r7, #12]
 8010332:	68db      	ldr	r3, [r3, #12]
 8010334:	687a      	ldr	r2, [r7, #4]
 8010336:	429a      	cmp	r2, r3
 8010338:	d104      	bne.n	8010344 <tcp_process+0x738>
 801033a:	687b      	ldr	r3, [r7, #4]
 801033c:	68da      	ldr	r2, [r3, #12]
 801033e:	68fb      	ldr	r3, [r7, #12]
 8010340:	60da      	str	r2, [r3, #12]
 8010342:	e005      	b.n	8010350 <tcp_process+0x744>
 8010344:	68fb      	ldr	r3, [r7, #12]
 8010346:	68db      	ldr	r3, [r3, #12]
 8010348:	60fb      	str	r3, [r7, #12]
 801034a:	68fb      	ldr	r3, [r7, #12]
 801034c:	2b00      	cmp	r3, #0
 801034e:	d1ef      	bne.n	8010330 <tcp_process+0x724>
 8010350:	687b      	ldr	r3, [r7, #4]
 8010352:	2200      	movs	r2, #0
 8010354:	60da      	str	r2, [r3, #12]
 8010356:	4b1f      	ldr	r3, [pc, #124]	; (80103d4 <tcp_process+0x7c8>)
 8010358:	2201      	movs	r2, #1
 801035a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 801035c:	687b      	ldr	r3, [r7, #4]
 801035e:	220a      	movs	r2, #10
 8010360:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8010362:	4b1d      	ldr	r3, [pc, #116]	; (80103d8 <tcp_process+0x7cc>)
 8010364:	681a      	ldr	r2, [r3, #0]
 8010366:	687b      	ldr	r3, [r7, #4]
 8010368:	60da      	str	r2, [r3, #12]
 801036a:	4a1b      	ldr	r2, [pc, #108]	; (80103d8 <tcp_process+0x7cc>)
 801036c:	687b      	ldr	r3, [r7, #4]
 801036e:	6013      	str	r3, [r2, #0]
 8010370:	f003 f8b2 	bl	80134d8 <tcp_timer_needed>
      }
      break;
 8010374:	e026      	b.n	80103c4 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8010376:	6878      	ldr	r0, [r7, #4]
 8010378:	f000 f93c 	bl	80105f4 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801037c:	4b17      	ldr	r3, [pc, #92]	; (80103dc <tcp_process+0x7d0>)
 801037e:	781b      	ldrb	r3, [r3, #0]
 8010380:	f003 0310 	and.w	r3, r3, #16
 8010384:	2b00      	cmp	r3, #0
 8010386:	d01f      	beq.n	80103c8 <tcp_process+0x7bc>
 8010388:	687b      	ldr	r3, [r7, #4]
 801038a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801038c:	4b14      	ldr	r3, [pc, #80]	; (80103e0 <tcp_process+0x7d4>)
 801038e:	681b      	ldr	r3, [r3, #0]
 8010390:	429a      	cmp	r2, r3
 8010392:	d119      	bne.n	80103c8 <tcp_process+0x7bc>
 8010394:	687b      	ldr	r3, [r7, #4]
 8010396:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010398:	2b00      	cmp	r3, #0
 801039a:	d115      	bne.n	80103c8 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 801039c:	4b11      	ldr	r3, [pc, #68]	; (80103e4 <tcp_process+0x7d8>)
 801039e:	781b      	ldrb	r3, [r3, #0]
 80103a0:	f043 0310 	orr.w	r3, r3, #16
 80103a4:	b2da      	uxtb	r2, r3
 80103a6:	4b0f      	ldr	r3, [pc, #60]	; (80103e4 <tcp_process+0x7d8>)
 80103a8:	701a      	strb	r2, [r3, #0]
      }
      break;
 80103aa:	e00d      	b.n	80103c8 <tcp_process+0x7bc>
    default:
      break;
 80103ac:	bf00      	nop
 80103ae:	e00c      	b.n	80103ca <tcp_process+0x7be>
      break;
 80103b0:	bf00      	nop
 80103b2:	e00a      	b.n	80103ca <tcp_process+0x7be>
      break;
 80103b4:	bf00      	nop
 80103b6:	e008      	b.n	80103ca <tcp_process+0x7be>
      break;
 80103b8:	bf00      	nop
 80103ba:	e006      	b.n	80103ca <tcp_process+0x7be>
      break;
 80103bc:	bf00      	nop
 80103be:	e004      	b.n	80103ca <tcp_process+0x7be>
      break;
 80103c0:	bf00      	nop
 80103c2:	e002      	b.n	80103ca <tcp_process+0x7be>
      break;
 80103c4:	bf00      	nop
 80103c6:	e000      	b.n	80103ca <tcp_process+0x7be>
      break;
 80103c8:	bf00      	nop
  }
  return ERR_OK;
 80103ca:	2300      	movs	r3, #0
}
 80103cc:	4618      	mov	r0, r3
 80103ce:	3724      	adds	r7, #36	; 0x24
 80103d0:	46bd      	mov	sp, r7
 80103d2:	bd90      	pop	{r4, r7, pc}
 80103d4:	2000d3f8 	.word	0x2000d3f8
 80103d8:	2000d40c 	.word	0x2000d40c
 80103dc:	200047f0 	.word	0x200047f0
 80103e0:	200047e8 	.word	0x200047e8
 80103e4:	200047f1 	.word	0x200047f1
 80103e8:	2000d3fc 	.word	0x2000d3fc

080103ec <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 80103ec:	b590      	push	{r4, r7, lr}
 80103ee:	b085      	sub	sp, #20
 80103f0:	af00      	add	r7, sp, #0
 80103f2:	6078      	str	r0, [r7, #4]
 80103f4:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 80103f6:	687b      	ldr	r3, [r7, #4]
 80103f8:	2b00      	cmp	r3, #0
 80103fa:	d106      	bne.n	801040a <tcp_oos_insert_segment+0x1e>
 80103fc:	4b3b      	ldr	r3, [pc, #236]	; (80104ec <tcp_oos_insert_segment+0x100>)
 80103fe:	f240 421f 	movw	r2, #1055	; 0x41f
 8010402:	493b      	ldr	r1, [pc, #236]	; (80104f0 <tcp_oos_insert_segment+0x104>)
 8010404:	483b      	ldr	r0, [pc, #236]	; (80104f4 <tcp_oos_insert_segment+0x108>)
 8010406:	f006 fd2b 	bl	8016e60 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801040a:	687b      	ldr	r3, [r7, #4]
 801040c:	68db      	ldr	r3, [r3, #12]
 801040e:	899b      	ldrh	r3, [r3, #12]
 8010410:	b29b      	uxth	r3, r3
 8010412:	4618      	mov	r0, r3
 8010414:	f7fb fa20 	bl	800b858 <lwip_htons>
 8010418:	4603      	mov	r3, r0
 801041a:	b2db      	uxtb	r3, r3
 801041c:	f003 0301 	and.w	r3, r3, #1
 8010420:	2b00      	cmp	r3, #0
 8010422:	d028      	beq.n	8010476 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8010424:	6838      	ldr	r0, [r7, #0]
 8010426:	f7fe f999 	bl	800e75c <tcp_segs_free>
    next = NULL;
 801042a:	2300      	movs	r3, #0
 801042c:	603b      	str	r3, [r7, #0]
 801042e:	e056      	b.n	80104de <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8010430:	683b      	ldr	r3, [r7, #0]
 8010432:	68db      	ldr	r3, [r3, #12]
 8010434:	899b      	ldrh	r3, [r3, #12]
 8010436:	b29b      	uxth	r3, r3
 8010438:	4618      	mov	r0, r3
 801043a:	f7fb fa0d 	bl	800b858 <lwip_htons>
 801043e:	4603      	mov	r3, r0
 8010440:	b2db      	uxtb	r3, r3
 8010442:	f003 0301 	and.w	r3, r3, #1
 8010446:	2b00      	cmp	r3, #0
 8010448:	d00d      	beq.n	8010466 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 801044a:	687b      	ldr	r3, [r7, #4]
 801044c:	68db      	ldr	r3, [r3, #12]
 801044e:	899b      	ldrh	r3, [r3, #12]
 8010450:	b29c      	uxth	r4, r3
 8010452:	2001      	movs	r0, #1
 8010454:	f7fb fa00 	bl	800b858 <lwip_htons>
 8010458:	4603      	mov	r3, r0
 801045a:	461a      	mov	r2, r3
 801045c:	687b      	ldr	r3, [r7, #4]
 801045e:	68db      	ldr	r3, [r3, #12]
 8010460:	4322      	orrs	r2, r4
 8010462:	b292      	uxth	r2, r2
 8010464:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8010466:	683b      	ldr	r3, [r7, #0]
 8010468:	60fb      	str	r3, [r7, #12]
      next = next->next;
 801046a:	683b      	ldr	r3, [r7, #0]
 801046c:	681b      	ldr	r3, [r3, #0]
 801046e:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8010470:	68f8      	ldr	r0, [r7, #12]
 8010472:	f7fe f987 	bl	800e784 <tcp_seg_free>
    while (next &&
 8010476:	683b      	ldr	r3, [r7, #0]
 8010478:	2b00      	cmp	r3, #0
 801047a:	d00e      	beq.n	801049a <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 801047c:	687b      	ldr	r3, [r7, #4]
 801047e:	891b      	ldrh	r3, [r3, #8]
 8010480:	461a      	mov	r2, r3
 8010482:	4b1d      	ldr	r3, [pc, #116]	; (80104f8 <tcp_oos_insert_segment+0x10c>)
 8010484:	681b      	ldr	r3, [r3, #0]
 8010486:	441a      	add	r2, r3
 8010488:	683b      	ldr	r3, [r7, #0]
 801048a:	68db      	ldr	r3, [r3, #12]
 801048c:	685b      	ldr	r3, [r3, #4]
 801048e:	6839      	ldr	r1, [r7, #0]
 8010490:	8909      	ldrh	r1, [r1, #8]
 8010492:	440b      	add	r3, r1
 8010494:	1ad3      	subs	r3, r2, r3
    while (next &&
 8010496:	2b00      	cmp	r3, #0
 8010498:	daca      	bge.n	8010430 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 801049a:	683b      	ldr	r3, [r7, #0]
 801049c:	2b00      	cmp	r3, #0
 801049e:	d01e      	beq.n	80104de <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 80104a0:	687b      	ldr	r3, [r7, #4]
 80104a2:	891b      	ldrh	r3, [r3, #8]
 80104a4:	461a      	mov	r2, r3
 80104a6:	4b14      	ldr	r3, [pc, #80]	; (80104f8 <tcp_oos_insert_segment+0x10c>)
 80104a8:	681b      	ldr	r3, [r3, #0]
 80104aa:	441a      	add	r2, r3
 80104ac:	683b      	ldr	r3, [r7, #0]
 80104ae:	68db      	ldr	r3, [r3, #12]
 80104b0:	685b      	ldr	r3, [r3, #4]
 80104b2:	1ad3      	subs	r3, r2, r3
    if (next &&
 80104b4:	2b00      	cmp	r3, #0
 80104b6:	dd12      	ble.n	80104de <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 80104b8:	683b      	ldr	r3, [r7, #0]
 80104ba:	68db      	ldr	r3, [r3, #12]
 80104bc:	685b      	ldr	r3, [r3, #4]
 80104be:	b29a      	uxth	r2, r3
 80104c0:	4b0d      	ldr	r3, [pc, #52]	; (80104f8 <tcp_oos_insert_segment+0x10c>)
 80104c2:	681b      	ldr	r3, [r3, #0]
 80104c4:	b29b      	uxth	r3, r3
 80104c6:	1ad3      	subs	r3, r2, r3
 80104c8:	b29a      	uxth	r2, r3
 80104ca:	687b      	ldr	r3, [r7, #4]
 80104cc:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 80104ce:	687b      	ldr	r3, [r7, #4]
 80104d0:	685a      	ldr	r2, [r3, #4]
 80104d2:	687b      	ldr	r3, [r7, #4]
 80104d4:	891b      	ldrh	r3, [r3, #8]
 80104d6:	4619      	mov	r1, r3
 80104d8:	4610      	mov	r0, r2
 80104da:	f7fc fbdf 	bl	800cc9c <pbuf_realloc>
    }
  }
  cseg->next = next;
 80104de:	687b      	ldr	r3, [r7, #4]
 80104e0:	683a      	ldr	r2, [r7, #0]
 80104e2:	601a      	str	r2, [r3, #0]
}
 80104e4:	bf00      	nop
 80104e6:	3714      	adds	r7, #20
 80104e8:	46bd      	mov	sp, r7
 80104ea:	bd90      	pop	{r4, r7, pc}
 80104ec:	0801a22c 	.word	0x0801a22c
 80104f0:	0801a4ec 	.word	0x0801a4ec
 80104f4:	0801a278 	.word	0x0801a278
 80104f8:	200047e4 	.word	0x200047e4

080104fc <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 80104fc:	b5b0      	push	{r4, r5, r7, lr}
 80104fe:	b086      	sub	sp, #24
 8010500:	af00      	add	r7, sp, #0
 8010502:	60f8      	str	r0, [r7, #12]
 8010504:	60b9      	str	r1, [r7, #8]
 8010506:	607a      	str	r2, [r7, #4]
 8010508:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 801050a:	e03e      	b.n	801058a <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 801050c:	68bb      	ldr	r3, [r7, #8]
 801050e:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8010510:	68bb      	ldr	r3, [r7, #8]
 8010512:	681b      	ldr	r3, [r3, #0]
 8010514:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8010516:	697b      	ldr	r3, [r7, #20]
 8010518:	685b      	ldr	r3, [r3, #4]
 801051a:	4618      	mov	r0, r3
 801051c:	f7fc fe04 	bl	800d128 <pbuf_clen>
 8010520:	4603      	mov	r3, r0
 8010522:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8010524:	68fb      	ldr	r3, [r7, #12]
 8010526:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801052a:	8a7a      	ldrh	r2, [r7, #18]
 801052c:	429a      	cmp	r2, r3
 801052e:	d906      	bls.n	801053e <tcp_free_acked_segments+0x42>
 8010530:	4b2a      	ldr	r3, [pc, #168]	; (80105dc <tcp_free_acked_segments+0xe0>)
 8010532:	f240 4257 	movw	r2, #1111	; 0x457
 8010536:	492a      	ldr	r1, [pc, #168]	; (80105e0 <tcp_free_acked_segments+0xe4>)
 8010538:	482a      	ldr	r0, [pc, #168]	; (80105e4 <tcp_free_acked_segments+0xe8>)
 801053a:	f006 fc91 	bl	8016e60 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 801053e:	68fb      	ldr	r3, [r7, #12]
 8010540:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8010544:	8a7b      	ldrh	r3, [r7, #18]
 8010546:	1ad3      	subs	r3, r2, r3
 8010548:	b29a      	uxth	r2, r3
 801054a:	68fb      	ldr	r3, [r7, #12]
 801054c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8010550:	697b      	ldr	r3, [r7, #20]
 8010552:	891a      	ldrh	r2, [r3, #8]
 8010554:	4b24      	ldr	r3, [pc, #144]	; (80105e8 <tcp_free_acked_segments+0xec>)
 8010556:	881b      	ldrh	r3, [r3, #0]
 8010558:	4413      	add	r3, r2
 801055a:	b29a      	uxth	r2, r3
 801055c:	4b22      	ldr	r3, [pc, #136]	; (80105e8 <tcp_free_acked_segments+0xec>)
 801055e:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8010560:	6978      	ldr	r0, [r7, #20]
 8010562:	f7fe f90f 	bl	800e784 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8010566:	68fb      	ldr	r3, [r7, #12]
 8010568:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801056c:	2b00      	cmp	r3, #0
 801056e:	d00c      	beq.n	801058a <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8010570:	68bb      	ldr	r3, [r7, #8]
 8010572:	2b00      	cmp	r3, #0
 8010574:	d109      	bne.n	801058a <tcp_free_acked_segments+0x8e>
 8010576:	683b      	ldr	r3, [r7, #0]
 8010578:	2b00      	cmp	r3, #0
 801057a:	d106      	bne.n	801058a <tcp_free_acked_segments+0x8e>
 801057c:	4b17      	ldr	r3, [pc, #92]	; (80105dc <tcp_free_acked_segments+0xe0>)
 801057e:	f240 4262 	movw	r2, #1122	; 0x462
 8010582:	491a      	ldr	r1, [pc, #104]	; (80105ec <tcp_free_acked_segments+0xf0>)
 8010584:	4817      	ldr	r0, [pc, #92]	; (80105e4 <tcp_free_acked_segments+0xe8>)
 8010586:	f006 fc6b 	bl	8016e60 <iprintf>
  while (seg_list != NULL &&
 801058a:	68bb      	ldr	r3, [r7, #8]
 801058c:	2b00      	cmp	r3, #0
 801058e:	d020      	beq.n	80105d2 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8010590:	68bb      	ldr	r3, [r7, #8]
 8010592:	68db      	ldr	r3, [r3, #12]
 8010594:	685b      	ldr	r3, [r3, #4]
 8010596:	4618      	mov	r0, r3
 8010598:	f7fb f973 	bl	800b882 <lwip_htonl>
 801059c:	4604      	mov	r4, r0
 801059e:	68bb      	ldr	r3, [r7, #8]
 80105a0:	891b      	ldrh	r3, [r3, #8]
 80105a2:	461d      	mov	r5, r3
 80105a4:	68bb      	ldr	r3, [r7, #8]
 80105a6:	68db      	ldr	r3, [r3, #12]
 80105a8:	899b      	ldrh	r3, [r3, #12]
 80105aa:	b29b      	uxth	r3, r3
 80105ac:	4618      	mov	r0, r3
 80105ae:	f7fb f953 	bl	800b858 <lwip_htons>
 80105b2:	4603      	mov	r3, r0
 80105b4:	b2db      	uxtb	r3, r3
 80105b6:	f003 0303 	and.w	r3, r3, #3
 80105ba:	2b00      	cmp	r3, #0
 80105bc:	d001      	beq.n	80105c2 <tcp_free_acked_segments+0xc6>
 80105be:	2301      	movs	r3, #1
 80105c0:	e000      	b.n	80105c4 <tcp_free_acked_segments+0xc8>
 80105c2:	2300      	movs	r3, #0
 80105c4:	442b      	add	r3, r5
 80105c6:	18e2      	adds	r2, r4, r3
 80105c8:	4b09      	ldr	r3, [pc, #36]	; (80105f0 <tcp_free_acked_segments+0xf4>)
 80105ca:	681b      	ldr	r3, [r3, #0]
 80105cc:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 80105ce:	2b00      	cmp	r3, #0
 80105d0:	dd9c      	ble.n	801050c <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 80105d2:	68bb      	ldr	r3, [r7, #8]
}
 80105d4:	4618      	mov	r0, r3
 80105d6:	3718      	adds	r7, #24
 80105d8:	46bd      	mov	sp, r7
 80105da:	bdb0      	pop	{r4, r5, r7, pc}
 80105dc:	0801a22c 	.word	0x0801a22c
 80105e0:	0801a514 	.word	0x0801a514
 80105e4:	0801a278 	.word	0x0801a278
 80105e8:	200047ec 	.word	0x200047ec
 80105ec:	0801a53c 	.word	0x0801a53c
 80105f0:	200047e8 	.word	0x200047e8

080105f4 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 80105f4:	b5b0      	push	{r4, r5, r7, lr}
 80105f6:	b094      	sub	sp, #80	; 0x50
 80105f8:	af00      	add	r7, sp, #0
 80105fa:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 80105fc:	2300      	movs	r3, #0
 80105fe:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8010600:	687b      	ldr	r3, [r7, #4]
 8010602:	2b00      	cmp	r3, #0
 8010604:	d106      	bne.n	8010614 <tcp_receive+0x20>
 8010606:	4ba6      	ldr	r3, [pc, #664]	; (80108a0 <tcp_receive+0x2ac>)
 8010608:	f240 427b 	movw	r2, #1147	; 0x47b
 801060c:	49a5      	ldr	r1, [pc, #660]	; (80108a4 <tcp_receive+0x2b0>)
 801060e:	48a6      	ldr	r0, [pc, #664]	; (80108a8 <tcp_receive+0x2b4>)
 8010610:	f006 fc26 	bl	8016e60 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8010614:	687b      	ldr	r3, [r7, #4]
 8010616:	7d1b      	ldrb	r3, [r3, #20]
 8010618:	2b03      	cmp	r3, #3
 801061a:	d806      	bhi.n	801062a <tcp_receive+0x36>
 801061c:	4ba0      	ldr	r3, [pc, #640]	; (80108a0 <tcp_receive+0x2ac>)
 801061e:	f240 427c 	movw	r2, #1148	; 0x47c
 8010622:	49a2      	ldr	r1, [pc, #648]	; (80108ac <tcp_receive+0x2b8>)
 8010624:	48a0      	ldr	r0, [pc, #640]	; (80108a8 <tcp_receive+0x2b4>)
 8010626:	f006 fc1b 	bl	8016e60 <iprintf>

  if (flags & TCP_ACK) {
 801062a:	4ba1      	ldr	r3, [pc, #644]	; (80108b0 <tcp_receive+0x2bc>)
 801062c:	781b      	ldrb	r3, [r3, #0]
 801062e:	f003 0310 	and.w	r3, r3, #16
 8010632:	2b00      	cmp	r3, #0
 8010634:	f000 8263 	beq.w	8010afe <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8010638:	687b      	ldr	r3, [r7, #4]
 801063a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801063e:	461a      	mov	r2, r3
 8010640:	687b      	ldr	r3, [r7, #4]
 8010642:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010644:	4413      	add	r3, r2
 8010646:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8010648:	687b      	ldr	r3, [r7, #4]
 801064a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801064c:	4b99      	ldr	r3, [pc, #612]	; (80108b4 <tcp_receive+0x2c0>)
 801064e:	681b      	ldr	r3, [r3, #0]
 8010650:	1ad3      	subs	r3, r2, r3
 8010652:	2b00      	cmp	r3, #0
 8010654:	db1b      	blt.n	801068e <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8010656:	687b      	ldr	r3, [r7, #4]
 8010658:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801065a:	4b96      	ldr	r3, [pc, #600]	; (80108b4 <tcp_receive+0x2c0>)
 801065c:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801065e:	429a      	cmp	r2, r3
 8010660:	d106      	bne.n	8010670 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8010662:	687b      	ldr	r3, [r7, #4]
 8010664:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8010666:	4b94      	ldr	r3, [pc, #592]	; (80108b8 <tcp_receive+0x2c4>)
 8010668:	681b      	ldr	r3, [r3, #0]
 801066a:	1ad3      	subs	r3, r2, r3
 801066c:	2b00      	cmp	r3, #0
 801066e:	db0e      	blt.n	801068e <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8010670:	687b      	ldr	r3, [r7, #4]
 8010672:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8010674:	4b90      	ldr	r3, [pc, #576]	; (80108b8 <tcp_receive+0x2c4>)
 8010676:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8010678:	429a      	cmp	r2, r3
 801067a:	d125      	bne.n	80106c8 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 801067c:	4b8f      	ldr	r3, [pc, #572]	; (80108bc <tcp_receive+0x2c8>)
 801067e:	681b      	ldr	r3, [r3, #0]
 8010680:	89db      	ldrh	r3, [r3, #14]
 8010682:	b29a      	uxth	r2, r3
 8010684:	687b      	ldr	r3, [r7, #4]
 8010686:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801068a:	429a      	cmp	r2, r3
 801068c:	d91c      	bls.n	80106c8 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 801068e:	4b8b      	ldr	r3, [pc, #556]	; (80108bc <tcp_receive+0x2c8>)
 8010690:	681b      	ldr	r3, [r3, #0]
 8010692:	89db      	ldrh	r3, [r3, #14]
 8010694:	b29a      	uxth	r2, r3
 8010696:	687b      	ldr	r3, [r7, #4]
 8010698:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 801069c:	687b      	ldr	r3, [r7, #4]
 801069e:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 80106a2:	687b      	ldr	r3, [r7, #4]
 80106a4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80106a8:	429a      	cmp	r2, r3
 80106aa:	d205      	bcs.n	80106b8 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 80106ac:	687b      	ldr	r3, [r7, #4]
 80106ae:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80106b2:	687b      	ldr	r3, [r7, #4]
 80106b4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 80106b8:	4b7e      	ldr	r3, [pc, #504]	; (80108b4 <tcp_receive+0x2c0>)
 80106ba:	681a      	ldr	r2, [r3, #0]
 80106bc:	687b      	ldr	r3, [r7, #4]
 80106be:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 80106c0:	4b7d      	ldr	r3, [pc, #500]	; (80108b8 <tcp_receive+0x2c4>)
 80106c2:	681a      	ldr	r2, [r3, #0]
 80106c4:	687b      	ldr	r3, [r7, #4]
 80106c6:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 80106c8:	4b7b      	ldr	r3, [pc, #492]	; (80108b8 <tcp_receive+0x2c4>)
 80106ca:	681a      	ldr	r2, [r3, #0]
 80106cc:	687b      	ldr	r3, [r7, #4]
 80106ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80106d0:	1ad3      	subs	r3, r2, r3
 80106d2:	2b00      	cmp	r3, #0
 80106d4:	dc58      	bgt.n	8010788 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 80106d6:	4b7a      	ldr	r3, [pc, #488]	; (80108c0 <tcp_receive+0x2cc>)
 80106d8:	881b      	ldrh	r3, [r3, #0]
 80106da:	2b00      	cmp	r3, #0
 80106dc:	d14b      	bne.n	8010776 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 80106de:	687b      	ldr	r3, [r7, #4]
 80106e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80106e2:	687a      	ldr	r2, [r7, #4]
 80106e4:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 80106e8:	4413      	add	r3, r2
 80106ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80106ec:	429a      	cmp	r2, r3
 80106ee:	d142      	bne.n	8010776 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 80106f0:	687b      	ldr	r3, [r7, #4]
 80106f2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80106f6:	2b00      	cmp	r3, #0
 80106f8:	db3d      	blt.n	8010776 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 80106fa:	687b      	ldr	r3, [r7, #4]
 80106fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80106fe:	4b6e      	ldr	r3, [pc, #440]	; (80108b8 <tcp_receive+0x2c4>)
 8010700:	681b      	ldr	r3, [r3, #0]
 8010702:	429a      	cmp	r2, r3
 8010704:	d137      	bne.n	8010776 <tcp_receive+0x182>
              found_dupack = 1;
 8010706:	2301      	movs	r3, #1
 8010708:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 801070a:	687b      	ldr	r3, [r7, #4]
 801070c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010710:	2bff      	cmp	r3, #255	; 0xff
 8010712:	d007      	beq.n	8010724 <tcp_receive+0x130>
                ++pcb->dupacks;
 8010714:	687b      	ldr	r3, [r7, #4]
 8010716:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801071a:	3301      	adds	r3, #1
 801071c:	b2da      	uxtb	r2, r3
 801071e:	687b      	ldr	r3, [r7, #4]
 8010720:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8010724:	687b      	ldr	r3, [r7, #4]
 8010726:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801072a:	2b03      	cmp	r3, #3
 801072c:	d91b      	bls.n	8010766 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 801072e:	687b      	ldr	r3, [r7, #4]
 8010730:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010734:	687b      	ldr	r3, [r7, #4]
 8010736:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010738:	4413      	add	r3, r2
 801073a:	b29a      	uxth	r2, r3
 801073c:	687b      	ldr	r3, [r7, #4]
 801073e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010742:	429a      	cmp	r2, r3
 8010744:	d30a      	bcc.n	801075c <tcp_receive+0x168>
 8010746:	687b      	ldr	r3, [r7, #4]
 8010748:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801074c:	687b      	ldr	r3, [r7, #4]
 801074e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010750:	4413      	add	r3, r2
 8010752:	b29a      	uxth	r2, r3
 8010754:	687b      	ldr	r3, [r7, #4]
 8010756:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801075a:	e004      	b.n	8010766 <tcp_receive+0x172>
 801075c:	687b      	ldr	r3, [r7, #4]
 801075e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010762:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 8010766:	687b      	ldr	r3, [r7, #4]
 8010768:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801076c:	2b02      	cmp	r3, #2
 801076e:	d902      	bls.n	8010776 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8010770:	6878      	ldr	r0, [r7, #4]
 8010772:	f002 fb47 	bl	8012e04 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8010776:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010778:	2b00      	cmp	r3, #0
 801077a:	f040 8160 	bne.w	8010a3e <tcp_receive+0x44a>
        pcb->dupacks = 0;
 801077e:	687b      	ldr	r3, [r7, #4]
 8010780:	2200      	movs	r2, #0
 8010782:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8010786:	e15a      	b.n	8010a3e <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010788:	4b4b      	ldr	r3, [pc, #300]	; (80108b8 <tcp_receive+0x2c4>)
 801078a:	681a      	ldr	r2, [r3, #0]
 801078c:	687b      	ldr	r3, [r7, #4]
 801078e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010790:	1ad3      	subs	r3, r2, r3
 8010792:	3b01      	subs	r3, #1
 8010794:	2b00      	cmp	r3, #0
 8010796:	f2c0 814d 	blt.w	8010a34 <tcp_receive+0x440>
 801079a:	4b47      	ldr	r3, [pc, #284]	; (80108b8 <tcp_receive+0x2c4>)
 801079c:	681a      	ldr	r2, [r3, #0]
 801079e:	687b      	ldr	r3, [r7, #4]
 80107a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80107a2:	1ad3      	subs	r3, r2, r3
 80107a4:	2b00      	cmp	r3, #0
 80107a6:	f300 8145 	bgt.w	8010a34 <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 80107aa:	687b      	ldr	r3, [r7, #4]
 80107ac:	8b5b      	ldrh	r3, [r3, #26]
 80107ae:	f003 0304 	and.w	r3, r3, #4
 80107b2:	2b00      	cmp	r3, #0
 80107b4:	d010      	beq.n	80107d8 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 80107b6:	687b      	ldr	r3, [r7, #4]
 80107b8:	8b5b      	ldrh	r3, [r3, #26]
 80107ba:	f023 0304 	bic.w	r3, r3, #4
 80107be:	b29a      	uxth	r2, r3
 80107c0:	687b      	ldr	r3, [r7, #4]
 80107c2:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 80107c4:	687b      	ldr	r3, [r7, #4]
 80107c6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80107ca:	687b      	ldr	r3, [r7, #4]
 80107cc:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 80107d0:	687b      	ldr	r3, [r7, #4]
 80107d2:	2200      	movs	r2, #0
 80107d4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 80107d8:	687b      	ldr	r3, [r7, #4]
 80107da:	2200      	movs	r2, #0
 80107dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80107e0:	687b      	ldr	r3, [r7, #4]
 80107e2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80107e6:	10db      	asrs	r3, r3, #3
 80107e8:	b21b      	sxth	r3, r3
 80107ea:	b29a      	uxth	r2, r3
 80107ec:	687b      	ldr	r3, [r7, #4]
 80107ee:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80107f2:	b29b      	uxth	r3, r3
 80107f4:	4413      	add	r3, r2
 80107f6:	b29b      	uxth	r3, r3
 80107f8:	b21a      	sxth	r2, r3
 80107fa:	687b      	ldr	r3, [r7, #4]
 80107fc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8010800:	4b2d      	ldr	r3, [pc, #180]	; (80108b8 <tcp_receive+0x2c4>)
 8010802:	681b      	ldr	r3, [r3, #0]
 8010804:	b29a      	uxth	r2, r3
 8010806:	687b      	ldr	r3, [r7, #4]
 8010808:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801080a:	b29b      	uxth	r3, r3
 801080c:	1ad3      	subs	r3, r2, r3
 801080e:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8010810:	687b      	ldr	r3, [r7, #4]
 8010812:	2200      	movs	r2, #0
 8010814:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8010818:	4b27      	ldr	r3, [pc, #156]	; (80108b8 <tcp_receive+0x2c4>)
 801081a:	681a      	ldr	r2, [r3, #0]
 801081c:	687b      	ldr	r3, [r7, #4]
 801081e:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8010820:	687b      	ldr	r3, [r7, #4]
 8010822:	7d1b      	ldrb	r3, [r3, #20]
 8010824:	2b03      	cmp	r3, #3
 8010826:	f240 8096 	bls.w	8010956 <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 801082a:	687b      	ldr	r3, [r7, #4]
 801082c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010830:	687b      	ldr	r3, [r7, #4]
 8010832:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8010836:	429a      	cmp	r2, r3
 8010838:	d244      	bcs.n	80108c4 <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 801083a:	687b      	ldr	r3, [r7, #4]
 801083c:	8b5b      	ldrh	r3, [r3, #26]
 801083e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010842:	2b00      	cmp	r3, #0
 8010844:	d001      	beq.n	801084a <tcp_receive+0x256>
 8010846:	2301      	movs	r3, #1
 8010848:	e000      	b.n	801084c <tcp_receive+0x258>
 801084a:	2302      	movs	r3, #2
 801084c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8010850:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8010854:	b29a      	uxth	r2, r3
 8010856:	687b      	ldr	r3, [r7, #4]
 8010858:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801085a:	fb12 f303 	smulbb	r3, r2, r3
 801085e:	b29b      	uxth	r3, r3
 8010860:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8010862:	4293      	cmp	r3, r2
 8010864:	bf28      	it	cs
 8010866:	4613      	movcs	r3, r2
 8010868:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 801086a:	687b      	ldr	r3, [r7, #4]
 801086c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010870:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8010872:	4413      	add	r3, r2
 8010874:	b29a      	uxth	r2, r3
 8010876:	687b      	ldr	r3, [r7, #4]
 8010878:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801087c:	429a      	cmp	r2, r3
 801087e:	d309      	bcc.n	8010894 <tcp_receive+0x2a0>
 8010880:	687b      	ldr	r3, [r7, #4]
 8010882:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010886:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8010888:	4413      	add	r3, r2
 801088a:	b29a      	uxth	r2, r3
 801088c:	687b      	ldr	r3, [r7, #4]
 801088e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8010892:	e060      	b.n	8010956 <tcp_receive+0x362>
 8010894:	687b      	ldr	r3, [r7, #4]
 8010896:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801089a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801089e:	e05a      	b.n	8010956 <tcp_receive+0x362>
 80108a0:	0801a22c 	.word	0x0801a22c
 80108a4:	0801a55c 	.word	0x0801a55c
 80108a8:	0801a278 	.word	0x0801a278
 80108ac:	0801a578 	.word	0x0801a578
 80108b0:	200047f0 	.word	0x200047f0
 80108b4:	200047e4 	.word	0x200047e4
 80108b8:	200047e8 	.word	0x200047e8
 80108bc:	200047d4 	.word	0x200047d4
 80108c0:	200047ee 	.word	0x200047ee
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 80108c4:	687b      	ldr	r3, [r7, #4]
 80108c6:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80108ca:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80108cc:	4413      	add	r3, r2
 80108ce:	b29a      	uxth	r2, r3
 80108d0:	687b      	ldr	r3, [r7, #4]
 80108d2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80108d6:	429a      	cmp	r2, r3
 80108d8:	d309      	bcc.n	80108ee <tcp_receive+0x2fa>
 80108da:	687b      	ldr	r3, [r7, #4]
 80108dc:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80108e0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80108e2:	4413      	add	r3, r2
 80108e4:	b29a      	uxth	r2, r3
 80108e6:	687b      	ldr	r3, [r7, #4]
 80108e8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80108ec:	e004      	b.n	80108f8 <tcp_receive+0x304>
 80108ee:	687b      	ldr	r3, [r7, #4]
 80108f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80108f4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 80108f8:	687b      	ldr	r3, [r7, #4]
 80108fa:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80108fe:	687b      	ldr	r3, [r7, #4]
 8010900:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010904:	429a      	cmp	r2, r3
 8010906:	d326      	bcc.n	8010956 <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8010908:	687b      	ldr	r3, [r7, #4]
 801090a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801090e:	687b      	ldr	r3, [r7, #4]
 8010910:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010914:	1ad3      	subs	r3, r2, r3
 8010916:	b29a      	uxth	r2, r3
 8010918:	687b      	ldr	r3, [r7, #4]
 801091a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 801091e:	687b      	ldr	r3, [r7, #4]
 8010920:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010924:	687b      	ldr	r3, [r7, #4]
 8010926:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010928:	4413      	add	r3, r2
 801092a:	b29a      	uxth	r2, r3
 801092c:	687b      	ldr	r3, [r7, #4]
 801092e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010932:	429a      	cmp	r2, r3
 8010934:	d30a      	bcc.n	801094c <tcp_receive+0x358>
 8010936:	687b      	ldr	r3, [r7, #4]
 8010938:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801093c:	687b      	ldr	r3, [r7, #4]
 801093e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010940:	4413      	add	r3, r2
 8010942:	b29a      	uxth	r2, r3
 8010944:	687b      	ldr	r3, [r7, #4]
 8010946:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801094a:	e004      	b.n	8010956 <tcp_receive+0x362>
 801094c:	687b      	ldr	r3, [r7, #4]
 801094e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010952:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8010956:	687b      	ldr	r3, [r7, #4]
 8010958:	6f19      	ldr	r1, [r3, #112]	; 0x70
 801095a:	687b      	ldr	r3, [r7, #4]
 801095c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801095e:	4a98      	ldr	r2, [pc, #608]	; (8010bc0 <tcp_receive+0x5cc>)
 8010960:	6878      	ldr	r0, [r7, #4]
 8010962:	f7ff fdcb 	bl	80104fc <tcp_free_acked_segments>
 8010966:	4602      	mov	r2, r0
 8010968:	687b      	ldr	r3, [r7, #4]
 801096a:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 801096c:	687b      	ldr	r3, [r7, #4]
 801096e:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8010970:	687b      	ldr	r3, [r7, #4]
 8010972:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010974:	4a93      	ldr	r2, [pc, #588]	; (8010bc4 <tcp_receive+0x5d0>)
 8010976:	6878      	ldr	r0, [r7, #4]
 8010978:	f7ff fdc0 	bl	80104fc <tcp_free_acked_segments>
 801097c:	4602      	mov	r2, r0
 801097e:	687b      	ldr	r3, [r7, #4]
 8010980:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8010982:	687b      	ldr	r3, [r7, #4]
 8010984:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010986:	2b00      	cmp	r3, #0
 8010988:	d104      	bne.n	8010994 <tcp_receive+0x3a0>
        pcb->rtime = -1;
 801098a:	687b      	ldr	r3, [r7, #4]
 801098c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010990:	861a      	strh	r2, [r3, #48]	; 0x30
 8010992:	e002      	b.n	801099a <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 8010994:	687b      	ldr	r3, [r7, #4]
 8010996:	2200      	movs	r2, #0
 8010998:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 801099a:	687b      	ldr	r3, [r7, #4]
 801099c:	2200      	movs	r2, #0
 801099e:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 80109a0:	687b      	ldr	r3, [r7, #4]
 80109a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80109a4:	2b00      	cmp	r3, #0
 80109a6:	d103      	bne.n	80109b0 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 80109a8:	687b      	ldr	r3, [r7, #4]
 80109aa:	2200      	movs	r2, #0
 80109ac:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 80109b0:	687b      	ldr	r3, [r7, #4]
 80109b2:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 80109b6:	4b84      	ldr	r3, [pc, #528]	; (8010bc8 <tcp_receive+0x5d4>)
 80109b8:	881b      	ldrh	r3, [r3, #0]
 80109ba:	4413      	add	r3, r2
 80109bc:	b29a      	uxth	r2, r3
 80109be:	687b      	ldr	r3, [r7, #4]
 80109c0:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 80109c4:	687b      	ldr	r3, [r7, #4]
 80109c6:	8b5b      	ldrh	r3, [r3, #26]
 80109c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80109cc:	2b00      	cmp	r3, #0
 80109ce:	d035      	beq.n	8010a3c <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 80109d0:	687b      	ldr	r3, [r7, #4]
 80109d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80109d4:	2b00      	cmp	r3, #0
 80109d6:	d118      	bne.n	8010a0a <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 80109d8:	687b      	ldr	r3, [r7, #4]
 80109da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80109dc:	2b00      	cmp	r3, #0
 80109de:	d00c      	beq.n	80109fa <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 80109e0:	687b      	ldr	r3, [r7, #4]
 80109e2:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 80109e4:	687b      	ldr	r3, [r7, #4]
 80109e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80109e8:	68db      	ldr	r3, [r3, #12]
 80109ea:	685b      	ldr	r3, [r3, #4]
 80109ec:	4618      	mov	r0, r3
 80109ee:	f7fa ff48 	bl	800b882 <lwip_htonl>
 80109f2:	4603      	mov	r3, r0
 80109f4:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 80109f6:	2b00      	cmp	r3, #0
 80109f8:	dc20      	bgt.n	8010a3c <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 80109fa:	687b      	ldr	r3, [r7, #4]
 80109fc:	8b5b      	ldrh	r3, [r3, #26]
 80109fe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8010a02:	b29a      	uxth	r2, r3
 8010a04:	687b      	ldr	r3, [r7, #4]
 8010a06:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010a08:	e018      	b.n	8010a3c <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8010a0a:	687b      	ldr	r3, [r7, #4]
 8010a0c:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8010a0e:	687b      	ldr	r3, [r7, #4]
 8010a10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010a12:	68db      	ldr	r3, [r3, #12]
 8010a14:	685b      	ldr	r3, [r3, #4]
 8010a16:	4618      	mov	r0, r3
 8010a18:	f7fa ff33 	bl	800b882 <lwip_htonl>
 8010a1c:	4603      	mov	r3, r0
 8010a1e:	1ae3      	subs	r3, r4, r3
 8010a20:	2b00      	cmp	r3, #0
 8010a22:	dc0b      	bgt.n	8010a3c <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 8010a24:	687b      	ldr	r3, [r7, #4]
 8010a26:	8b5b      	ldrh	r3, [r3, #26]
 8010a28:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8010a2c:	b29a      	uxth	r2, r3
 8010a2e:	687b      	ldr	r3, [r7, #4]
 8010a30:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010a32:	e003      	b.n	8010a3c <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8010a34:	6878      	ldr	r0, [r7, #4]
 8010a36:	f002 fbdf 	bl	80131f8 <tcp_send_empty_ack>
 8010a3a:	e000      	b.n	8010a3e <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010a3c:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8010a3e:	687b      	ldr	r3, [r7, #4]
 8010a40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010a42:	2b00      	cmp	r3, #0
 8010a44:	d05b      	beq.n	8010afe <tcp_receive+0x50a>
 8010a46:	687b      	ldr	r3, [r7, #4]
 8010a48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010a4a:	4b60      	ldr	r3, [pc, #384]	; (8010bcc <tcp_receive+0x5d8>)
 8010a4c:	681b      	ldr	r3, [r3, #0]
 8010a4e:	1ad3      	subs	r3, r2, r3
 8010a50:	2b00      	cmp	r3, #0
 8010a52:	da54      	bge.n	8010afe <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8010a54:	4b5e      	ldr	r3, [pc, #376]	; (8010bd0 <tcp_receive+0x5dc>)
 8010a56:	681b      	ldr	r3, [r3, #0]
 8010a58:	b29a      	uxth	r2, r3
 8010a5a:	687b      	ldr	r3, [r7, #4]
 8010a5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010a5e:	b29b      	uxth	r3, r3
 8010a60:	1ad3      	subs	r3, r2, r3
 8010a62:	b29b      	uxth	r3, r3
 8010a64:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8010a68:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8010a6c:	687b      	ldr	r3, [r7, #4]
 8010a6e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010a72:	10db      	asrs	r3, r3, #3
 8010a74:	b21b      	sxth	r3, r3
 8010a76:	b29b      	uxth	r3, r3
 8010a78:	1ad3      	subs	r3, r2, r3
 8010a7a:	b29b      	uxth	r3, r3
 8010a7c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8010a80:	687b      	ldr	r3, [r7, #4]
 8010a82:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010a86:	b29a      	uxth	r2, r3
 8010a88:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8010a8c:	4413      	add	r3, r2
 8010a8e:	b29b      	uxth	r3, r3
 8010a90:	b21a      	sxth	r2, r3
 8010a92:	687b      	ldr	r3, [r7, #4]
 8010a94:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8010a96:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8010a9a:	2b00      	cmp	r3, #0
 8010a9c:	da05      	bge.n	8010aaa <tcp_receive+0x4b6>
        m = (s16_t) - m;
 8010a9e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8010aa2:	425b      	negs	r3, r3
 8010aa4:	b29b      	uxth	r3, r3
 8010aa6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8010aaa:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8010aae:	687b      	ldr	r3, [r7, #4]
 8010ab0:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8010ab4:	109b      	asrs	r3, r3, #2
 8010ab6:	b21b      	sxth	r3, r3
 8010ab8:	b29b      	uxth	r3, r3
 8010aba:	1ad3      	subs	r3, r2, r3
 8010abc:	b29b      	uxth	r3, r3
 8010abe:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8010ac2:	687b      	ldr	r3, [r7, #4]
 8010ac4:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8010ac8:	b29a      	uxth	r2, r3
 8010aca:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8010ace:	4413      	add	r3, r2
 8010ad0:	b29b      	uxth	r3, r3
 8010ad2:	b21a      	sxth	r2, r3
 8010ad4:	687b      	ldr	r3, [r7, #4]
 8010ad6:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8010ad8:	687b      	ldr	r3, [r7, #4]
 8010ada:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010ade:	10db      	asrs	r3, r3, #3
 8010ae0:	b21b      	sxth	r3, r3
 8010ae2:	b29a      	uxth	r2, r3
 8010ae4:	687b      	ldr	r3, [r7, #4]
 8010ae6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8010aea:	b29b      	uxth	r3, r3
 8010aec:	4413      	add	r3, r2
 8010aee:	b29b      	uxth	r3, r3
 8010af0:	b21a      	sxth	r2, r3
 8010af2:	687b      	ldr	r3, [r7, #4]
 8010af4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8010af8:	687b      	ldr	r3, [r7, #4]
 8010afa:	2200      	movs	r2, #0
 8010afc:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8010afe:	4b35      	ldr	r3, [pc, #212]	; (8010bd4 <tcp_receive+0x5e0>)
 8010b00:	881b      	ldrh	r3, [r3, #0]
 8010b02:	2b00      	cmp	r3, #0
 8010b04:	f000 84e1 	beq.w	80114ca <tcp_receive+0xed6>
 8010b08:	687b      	ldr	r3, [r7, #4]
 8010b0a:	7d1b      	ldrb	r3, [r3, #20]
 8010b0c:	2b06      	cmp	r3, #6
 8010b0e:	f200 84dc 	bhi.w	80114ca <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8010b12:	687b      	ldr	r3, [r7, #4]
 8010b14:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010b16:	4b30      	ldr	r3, [pc, #192]	; (8010bd8 <tcp_receive+0x5e4>)
 8010b18:	681b      	ldr	r3, [r3, #0]
 8010b1a:	1ad3      	subs	r3, r2, r3
 8010b1c:	3b01      	subs	r3, #1
 8010b1e:	2b00      	cmp	r3, #0
 8010b20:	f2c0 808e 	blt.w	8010c40 <tcp_receive+0x64c>
 8010b24:	687b      	ldr	r3, [r7, #4]
 8010b26:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010b28:	4b2a      	ldr	r3, [pc, #168]	; (8010bd4 <tcp_receive+0x5e0>)
 8010b2a:	881b      	ldrh	r3, [r3, #0]
 8010b2c:	4619      	mov	r1, r3
 8010b2e:	4b2a      	ldr	r3, [pc, #168]	; (8010bd8 <tcp_receive+0x5e4>)
 8010b30:	681b      	ldr	r3, [r3, #0]
 8010b32:	440b      	add	r3, r1
 8010b34:	1ad3      	subs	r3, r2, r3
 8010b36:	3301      	adds	r3, #1
 8010b38:	2b00      	cmp	r3, #0
 8010b3a:	f300 8081 	bgt.w	8010c40 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8010b3e:	4b27      	ldr	r3, [pc, #156]	; (8010bdc <tcp_receive+0x5e8>)
 8010b40:	685b      	ldr	r3, [r3, #4]
 8010b42:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8010b44:	687b      	ldr	r3, [r7, #4]
 8010b46:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010b48:	4b23      	ldr	r3, [pc, #140]	; (8010bd8 <tcp_receive+0x5e4>)
 8010b4a:	681b      	ldr	r3, [r3, #0]
 8010b4c:	1ad3      	subs	r3, r2, r3
 8010b4e:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8010b50:	4b22      	ldr	r3, [pc, #136]	; (8010bdc <tcp_receive+0x5e8>)
 8010b52:	685b      	ldr	r3, [r3, #4]
 8010b54:	2b00      	cmp	r3, #0
 8010b56:	d106      	bne.n	8010b66 <tcp_receive+0x572>
 8010b58:	4b21      	ldr	r3, [pc, #132]	; (8010be0 <tcp_receive+0x5ec>)
 8010b5a:	f240 5294 	movw	r2, #1428	; 0x594
 8010b5e:	4921      	ldr	r1, [pc, #132]	; (8010be4 <tcp_receive+0x5f0>)
 8010b60:	4821      	ldr	r0, [pc, #132]	; (8010be8 <tcp_receive+0x5f4>)
 8010b62:	f006 f97d 	bl	8016e60 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8010b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b68:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8010b6c:	4293      	cmp	r3, r2
 8010b6e:	d906      	bls.n	8010b7e <tcp_receive+0x58a>
 8010b70:	4b1b      	ldr	r3, [pc, #108]	; (8010be0 <tcp_receive+0x5ec>)
 8010b72:	f240 5295 	movw	r2, #1429	; 0x595
 8010b76:	491d      	ldr	r1, [pc, #116]	; (8010bec <tcp_receive+0x5f8>)
 8010b78:	481b      	ldr	r0, [pc, #108]	; (8010be8 <tcp_receive+0x5f4>)
 8010b7a:	f006 f971 	bl	8016e60 <iprintf>
      off = (u16_t)off32;
 8010b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b80:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8010b84:	4b15      	ldr	r3, [pc, #84]	; (8010bdc <tcp_receive+0x5e8>)
 8010b86:	685b      	ldr	r3, [r3, #4]
 8010b88:	891b      	ldrh	r3, [r3, #8]
 8010b8a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010b8e:	429a      	cmp	r2, r3
 8010b90:	d906      	bls.n	8010ba0 <tcp_receive+0x5ac>
 8010b92:	4b13      	ldr	r3, [pc, #76]	; (8010be0 <tcp_receive+0x5ec>)
 8010b94:	f240 5297 	movw	r2, #1431	; 0x597
 8010b98:	4915      	ldr	r1, [pc, #84]	; (8010bf0 <tcp_receive+0x5fc>)
 8010b9a:	4813      	ldr	r0, [pc, #76]	; (8010be8 <tcp_receive+0x5f4>)
 8010b9c:	f006 f960 	bl	8016e60 <iprintf>
      inseg.len -= off;
 8010ba0:	4b0e      	ldr	r3, [pc, #56]	; (8010bdc <tcp_receive+0x5e8>)
 8010ba2:	891a      	ldrh	r2, [r3, #8]
 8010ba4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010ba8:	1ad3      	subs	r3, r2, r3
 8010baa:	b29a      	uxth	r2, r3
 8010bac:	4b0b      	ldr	r3, [pc, #44]	; (8010bdc <tcp_receive+0x5e8>)
 8010bae:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8010bb0:	4b0a      	ldr	r3, [pc, #40]	; (8010bdc <tcp_receive+0x5e8>)
 8010bb2:	685b      	ldr	r3, [r3, #4]
 8010bb4:	891a      	ldrh	r2, [r3, #8]
 8010bb6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010bba:	1ad3      	subs	r3, r2, r3
 8010bbc:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8010bbe:	e029      	b.n	8010c14 <tcp_receive+0x620>
 8010bc0:	0801a594 	.word	0x0801a594
 8010bc4:	0801a59c 	.word	0x0801a59c
 8010bc8:	200047ec 	.word	0x200047ec
 8010bcc:	200047e8 	.word	0x200047e8
 8010bd0:	2000d400 	.word	0x2000d400
 8010bd4:	200047ee 	.word	0x200047ee
 8010bd8:	200047e4 	.word	0x200047e4
 8010bdc:	200047c4 	.word	0x200047c4
 8010be0:	0801a22c 	.word	0x0801a22c
 8010be4:	0801a5a4 	.word	0x0801a5a4
 8010be8:	0801a278 	.word	0x0801a278
 8010bec:	0801a5b4 	.word	0x0801a5b4
 8010bf0:	0801a5c4 	.word	0x0801a5c4
        off -= p->len;
 8010bf4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010bf6:	895b      	ldrh	r3, [r3, #10]
 8010bf8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010bfc:	1ad3      	subs	r3, r2, r3
 8010bfe:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8010c02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010c04:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8010c06:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8010c08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010c0a:	2200      	movs	r2, #0
 8010c0c:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8010c0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010c10:	681b      	ldr	r3, [r3, #0]
 8010c12:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8010c14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010c16:	895b      	ldrh	r3, [r3, #10]
 8010c18:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010c1c:	429a      	cmp	r2, r3
 8010c1e:	d8e9      	bhi.n	8010bf4 <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8010c20:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010c24:	4619      	mov	r1, r3
 8010c26:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8010c28:	f7fc f938 	bl	800ce9c <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8010c2c:	687b      	ldr	r3, [r7, #4]
 8010c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010c30:	4a91      	ldr	r2, [pc, #580]	; (8010e78 <tcp_receive+0x884>)
 8010c32:	6013      	str	r3, [r2, #0]
 8010c34:	4b91      	ldr	r3, [pc, #580]	; (8010e7c <tcp_receive+0x888>)
 8010c36:	68db      	ldr	r3, [r3, #12]
 8010c38:	4a8f      	ldr	r2, [pc, #572]	; (8010e78 <tcp_receive+0x884>)
 8010c3a:	6812      	ldr	r2, [r2, #0]
 8010c3c:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8010c3e:	e00d      	b.n	8010c5c <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8010c40:	4b8d      	ldr	r3, [pc, #564]	; (8010e78 <tcp_receive+0x884>)
 8010c42:	681a      	ldr	r2, [r3, #0]
 8010c44:	687b      	ldr	r3, [r7, #4]
 8010c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010c48:	1ad3      	subs	r3, r2, r3
 8010c4a:	2b00      	cmp	r3, #0
 8010c4c:	da06      	bge.n	8010c5c <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8010c4e:	687b      	ldr	r3, [r7, #4]
 8010c50:	8b5b      	ldrh	r3, [r3, #26]
 8010c52:	f043 0302 	orr.w	r3, r3, #2
 8010c56:	b29a      	uxth	r2, r3
 8010c58:	687b      	ldr	r3, [r7, #4]
 8010c5a:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8010c5c:	4b86      	ldr	r3, [pc, #536]	; (8010e78 <tcp_receive+0x884>)
 8010c5e:	681a      	ldr	r2, [r3, #0]
 8010c60:	687b      	ldr	r3, [r7, #4]
 8010c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010c64:	1ad3      	subs	r3, r2, r3
 8010c66:	2b00      	cmp	r3, #0
 8010c68:	f2c0 842a 	blt.w	80114c0 <tcp_receive+0xecc>
 8010c6c:	4b82      	ldr	r3, [pc, #520]	; (8010e78 <tcp_receive+0x884>)
 8010c6e:	681a      	ldr	r2, [r3, #0]
 8010c70:	687b      	ldr	r3, [r7, #4]
 8010c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010c74:	6879      	ldr	r1, [r7, #4]
 8010c76:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010c78:	440b      	add	r3, r1
 8010c7a:	1ad3      	subs	r3, r2, r3
 8010c7c:	3301      	adds	r3, #1
 8010c7e:	2b00      	cmp	r3, #0
 8010c80:	f300 841e 	bgt.w	80114c0 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8010c84:	687b      	ldr	r3, [r7, #4]
 8010c86:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010c88:	4b7b      	ldr	r3, [pc, #492]	; (8010e78 <tcp_receive+0x884>)
 8010c8a:	681b      	ldr	r3, [r3, #0]
 8010c8c:	429a      	cmp	r2, r3
 8010c8e:	f040 829a 	bne.w	80111c6 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8010c92:	4b7a      	ldr	r3, [pc, #488]	; (8010e7c <tcp_receive+0x888>)
 8010c94:	891c      	ldrh	r4, [r3, #8]
 8010c96:	4b79      	ldr	r3, [pc, #484]	; (8010e7c <tcp_receive+0x888>)
 8010c98:	68db      	ldr	r3, [r3, #12]
 8010c9a:	899b      	ldrh	r3, [r3, #12]
 8010c9c:	b29b      	uxth	r3, r3
 8010c9e:	4618      	mov	r0, r3
 8010ca0:	f7fa fdda 	bl	800b858 <lwip_htons>
 8010ca4:	4603      	mov	r3, r0
 8010ca6:	b2db      	uxtb	r3, r3
 8010ca8:	f003 0303 	and.w	r3, r3, #3
 8010cac:	2b00      	cmp	r3, #0
 8010cae:	d001      	beq.n	8010cb4 <tcp_receive+0x6c0>
 8010cb0:	2301      	movs	r3, #1
 8010cb2:	e000      	b.n	8010cb6 <tcp_receive+0x6c2>
 8010cb4:	2300      	movs	r3, #0
 8010cb6:	4423      	add	r3, r4
 8010cb8:	b29a      	uxth	r2, r3
 8010cba:	4b71      	ldr	r3, [pc, #452]	; (8010e80 <tcp_receive+0x88c>)
 8010cbc:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8010cbe:	687b      	ldr	r3, [r7, #4]
 8010cc0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010cc2:	4b6f      	ldr	r3, [pc, #444]	; (8010e80 <tcp_receive+0x88c>)
 8010cc4:	881b      	ldrh	r3, [r3, #0]
 8010cc6:	429a      	cmp	r2, r3
 8010cc8:	d275      	bcs.n	8010db6 <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8010cca:	4b6c      	ldr	r3, [pc, #432]	; (8010e7c <tcp_receive+0x888>)
 8010ccc:	68db      	ldr	r3, [r3, #12]
 8010cce:	899b      	ldrh	r3, [r3, #12]
 8010cd0:	b29b      	uxth	r3, r3
 8010cd2:	4618      	mov	r0, r3
 8010cd4:	f7fa fdc0 	bl	800b858 <lwip_htons>
 8010cd8:	4603      	mov	r3, r0
 8010cda:	b2db      	uxtb	r3, r3
 8010cdc:	f003 0301 	and.w	r3, r3, #1
 8010ce0:	2b00      	cmp	r3, #0
 8010ce2:	d01f      	beq.n	8010d24 <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8010ce4:	4b65      	ldr	r3, [pc, #404]	; (8010e7c <tcp_receive+0x888>)
 8010ce6:	68db      	ldr	r3, [r3, #12]
 8010ce8:	899b      	ldrh	r3, [r3, #12]
 8010cea:	b29b      	uxth	r3, r3
 8010cec:	b21b      	sxth	r3, r3
 8010cee:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8010cf2:	b21c      	sxth	r4, r3
 8010cf4:	4b61      	ldr	r3, [pc, #388]	; (8010e7c <tcp_receive+0x888>)
 8010cf6:	68db      	ldr	r3, [r3, #12]
 8010cf8:	899b      	ldrh	r3, [r3, #12]
 8010cfa:	b29b      	uxth	r3, r3
 8010cfc:	4618      	mov	r0, r3
 8010cfe:	f7fa fdab 	bl	800b858 <lwip_htons>
 8010d02:	4603      	mov	r3, r0
 8010d04:	b2db      	uxtb	r3, r3
 8010d06:	b29b      	uxth	r3, r3
 8010d08:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8010d0c:	b29b      	uxth	r3, r3
 8010d0e:	4618      	mov	r0, r3
 8010d10:	f7fa fda2 	bl	800b858 <lwip_htons>
 8010d14:	4603      	mov	r3, r0
 8010d16:	b21b      	sxth	r3, r3
 8010d18:	4323      	orrs	r3, r4
 8010d1a:	b21a      	sxth	r2, r3
 8010d1c:	4b57      	ldr	r3, [pc, #348]	; (8010e7c <tcp_receive+0x888>)
 8010d1e:	68db      	ldr	r3, [r3, #12]
 8010d20:	b292      	uxth	r2, r2
 8010d22:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8010d24:	687b      	ldr	r3, [r7, #4]
 8010d26:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010d28:	4b54      	ldr	r3, [pc, #336]	; (8010e7c <tcp_receive+0x888>)
 8010d2a:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8010d2c:	4b53      	ldr	r3, [pc, #332]	; (8010e7c <tcp_receive+0x888>)
 8010d2e:	68db      	ldr	r3, [r3, #12]
 8010d30:	899b      	ldrh	r3, [r3, #12]
 8010d32:	b29b      	uxth	r3, r3
 8010d34:	4618      	mov	r0, r3
 8010d36:	f7fa fd8f 	bl	800b858 <lwip_htons>
 8010d3a:	4603      	mov	r3, r0
 8010d3c:	b2db      	uxtb	r3, r3
 8010d3e:	f003 0302 	and.w	r3, r3, #2
 8010d42:	2b00      	cmp	r3, #0
 8010d44:	d005      	beq.n	8010d52 <tcp_receive+0x75e>
            inseg.len -= 1;
 8010d46:	4b4d      	ldr	r3, [pc, #308]	; (8010e7c <tcp_receive+0x888>)
 8010d48:	891b      	ldrh	r3, [r3, #8]
 8010d4a:	3b01      	subs	r3, #1
 8010d4c:	b29a      	uxth	r2, r3
 8010d4e:	4b4b      	ldr	r3, [pc, #300]	; (8010e7c <tcp_receive+0x888>)
 8010d50:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8010d52:	4b4a      	ldr	r3, [pc, #296]	; (8010e7c <tcp_receive+0x888>)
 8010d54:	685a      	ldr	r2, [r3, #4]
 8010d56:	4b49      	ldr	r3, [pc, #292]	; (8010e7c <tcp_receive+0x888>)
 8010d58:	891b      	ldrh	r3, [r3, #8]
 8010d5a:	4619      	mov	r1, r3
 8010d5c:	4610      	mov	r0, r2
 8010d5e:	f7fb ff9d 	bl	800cc9c <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8010d62:	4b46      	ldr	r3, [pc, #280]	; (8010e7c <tcp_receive+0x888>)
 8010d64:	891c      	ldrh	r4, [r3, #8]
 8010d66:	4b45      	ldr	r3, [pc, #276]	; (8010e7c <tcp_receive+0x888>)
 8010d68:	68db      	ldr	r3, [r3, #12]
 8010d6a:	899b      	ldrh	r3, [r3, #12]
 8010d6c:	b29b      	uxth	r3, r3
 8010d6e:	4618      	mov	r0, r3
 8010d70:	f7fa fd72 	bl	800b858 <lwip_htons>
 8010d74:	4603      	mov	r3, r0
 8010d76:	b2db      	uxtb	r3, r3
 8010d78:	f003 0303 	and.w	r3, r3, #3
 8010d7c:	2b00      	cmp	r3, #0
 8010d7e:	d001      	beq.n	8010d84 <tcp_receive+0x790>
 8010d80:	2301      	movs	r3, #1
 8010d82:	e000      	b.n	8010d86 <tcp_receive+0x792>
 8010d84:	2300      	movs	r3, #0
 8010d86:	4423      	add	r3, r4
 8010d88:	b29a      	uxth	r2, r3
 8010d8a:	4b3d      	ldr	r3, [pc, #244]	; (8010e80 <tcp_receive+0x88c>)
 8010d8c:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8010d8e:	4b3c      	ldr	r3, [pc, #240]	; (8010e80 <tcp_receive+0x88c>)
 8010d90:	881b      	ldrh	r3, [r3, #0]
 8010d92:	461a      	mov	r2, r3
 8010d94:	4b38      	ldr	r3, [pc, #224]	; (8010e78 <tcp_receive+0x884>)
 8010d96:	681b      	ldr	r3, [r3, #0]
 8010d98:	441a      	add	r2, r3
 8010d9a:	687b      	ldr	r3, [r7, #4]
 8010d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010d9e:	6879      	ldr	r1, [r7, #4]
 8010da0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010da2:	440b      	add	r3, r1
 8010da4:	429a      	cmp	r2, r3
 8010da6:	d006      	beq.n	8010db6 <tcp_receive+0x7c2>
 8010da8:	4b36      	ldr	r3, [pc, #216]	; (8010e84 <tcp_receive+0x890>)
 8010daa:	f240 52cc 	movw	r2, #1484	; 0x5cc
 8010dae:	4936      	ldr	r1, [pc, #216]	; (8010e88 <tcp_receive+0x894>)
 8010db0:	4836      	ldr	r0, [pc, #216]	; (8010e8c <tcp_receive+0x898>)
 8010db2:	f006 f855 	bl	8016e60 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8010db6:	687b      	ldr	r3, [r7, #4]
 8010db8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010dba:	2b00      	cmp	r3, #0
 8010dbc:	f000 80e7 	beq.w	8010f8e <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8010dc0:	4b2e      	ldr	r3, [pc, #184]	; (8010e7c <tcp_receive+0x888>)
 8010dc2:	68db      	ldr	r3, [r3, #12]
 8010dc4:	899b      	ldrh	r3, [r3, #12]
 8010dc6:	b29b      	uxth	r3, r3
 8010dc8:	4618      	mov	r0, r3
 8010dca:	f7fa fd45 	bl	800b858 <lwip_htons>
 8010dce:	4603      	mov	r3, r0
 8010dd0:	b2db      	uxtb	r3, r3
 8010dd2:	f003 0301 	and.w	r3, r3, #1
 8010dd6:	2b00      	cmp	r3, #0
 8010dd8:	d010      	beq.n	8010dfc <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8010dda:	e00a      	b.n	8010df2 <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8010ddc:	687b      	ldr	r3, [r7, #4]
 8010dde:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010de0:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8010de2:	687b      	ldr	r3, [r7, #4]
 8010de4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010de6:	681a      	ldr	r2, [r3, #0]
 8010de8:	687b      	ldr	r3, [r7, #4]
 8010dea:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8010dec:	68f8      	ldr	r0, [r7, #12]
 8010dee:	f7fd fcc9 	bl	800e784 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8010df2:	687b      	ldr	r3, [r7, #4]
 8010df4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010df6:	2b00      	cmp	r3, #0
 8010df8:	d1f0      	bne.n	8010ddc <tcp_receive+0x7e8>
 8010dfa:	e0c8      	b.n	8010f8e <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8010dfc:	687b      	ldr	r3, [r7, #4]
 8010dfe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010e00:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8010e02:	e052      	b.n	8010eaa <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8010e04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010e06:	68db      	ldr	r3, [r3, #12]
 8010e08:	899b      	ldrh	r3, [r3, #12]
 8010e0a:	b29b      	uxth	r3, r3
 8010e0c:	4618      	mov	r0, r3
 8010e0e:	f7fa fd23 	bl	800b858 <lwip_htons>
 8010e12:	4603      	mov	r3, r0
 8010e14:	b2db      	uxtb	r3, r3
 8010e16:	f003 0301 	and.w	r3, r3, #1
 8010e1a:	2b00      	cmp	r3, #0
 8010e1c:	d03d      	beq.n	8010e9a <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8010e1e:	4b17      	ldr	r3, [pc, #92]	; (8010e7c <tcp_receive+0x888>)
 8010e20:	68db      	ldr	r3, [r3, #12]
 8010e22:	899b      	ldrh	r3, [r3, #12]
 8010e24:	b29b      	uxth	r3, r3
 8010e26:	4618      	mov	r0, r3
 8010e28:	f7fa fd16 	bl	800b858 <lwip_htons>
 8010e2c:	4603      	mov	r3, r0
 8010e2e:	b2db      	uxtb	r3, r3
 8010e30:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8010e34:	2b00      	cmp	r3, #0
 8010e36:	d130      	bne.n	8010e9a <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8010e38:	4b10      	ldr	r3, [pc, #64]	; (8010e7c <tcp_receive+0x888>)
 8010e3a:	68db      	ldr	r3, [r3, #12]
 8010e3c:	899b      	ldrh	r3, [r3, #12]
 8010e3e:	b29c      	uxth	r4, r3
 8010e40:	2001      	movs	r0, #1
 8010e42:	f7fa fd09 	bl	800b858 <lwip_htons>
 8010e46:	4603      	mov	r3, r0
 8010e48:	461a      	mov	r2, r3
 8010e4a:	4b0c      	ldr	r3, [pc, #48]	; (8010e7c <tcp_receive+0x888>)
 8010e4c:	68db      	ldr	r3, [r3, #12]
 8010e4e:	4322      	orrs	r2, r4
 8010e50:	b292      	uxth	r2, r2
 8010e52:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8010e54:	4b09      	ldr	r3, [pc, #36]	; (8010e7c <tcp_receive+0x888>)
 8010e56:	891c      	ldrh	r4, [r3, #8]
 8010e58:	4b08      	ldr	r3, [pc, #32]	; (8010e7c <tcp_receive+0x888>)
 8010e5a:	68db      	ldr	r3, [r3, #12]
 8010e5c:	899b      	ldrh	r3, [r3, #12]
 8010e5e:	b29b      	uxth	r3, r3
 8010e60:	4618      	mov	r0, r3
 8010e62:	f7fa fcf9 	bl	800b858 <lwip_htons>
 8010e66:	4603      	mov	r3, r0
 8010e68:	b2db      	uxtb	r3, r3
 8010e6a:	f003 0303 	and.w	r3, r3, #3
 8010e6e:	2b00      	cmp	r3, #0
 8010e70:	d00e      	beq.n	8010e90 <tcp_receive+0x89c>
 8010e72:	2301      	movs	r3, #1
 8010e74:	e00d      	b.n	8010e92 <tcp_receive+0x89e>
 8010e76:	bf00      	nop
 8010e78:	200047e4 	.word	0x200047e4
 8010e7c:	200047c4 	.word	0x200047c4
 8010e80:	200047ee 	.word	0x200047ee
 8010e84:	0801a22c 	.word	0x0801a22c
 8010e88:	0801a5d4 	.word	0x0801a5d4
 8010e8c:	0801a278 	.word	0x0801a278
 8010e90:	2300      	movs	r3, #0
 8010e92:	4423      	add	r3, r4
 8010e94:	b29a      	uxth	r2, r3
 8010e96:	4b98      	ldr	r3, [pc, #608]	; (80110f8 <tcp_receive+0xb04>)
 8010e98:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8010e9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010e9c:	613b      	str	r3, [r7, #16]
              next = next->next;
 8010e9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010ea0:	681b      	ldr	r3, [r3, #0]
 8010ea2:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8010ea4:	6938      	ldr	r0, [r7, #16]
 8010ea6:	f7fd fc6d 	bl	800e784 <tcp_seg_free>
            while (next &&
 8010eaa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010eac:	2b00      	cmp	r3, #0
 8010eae:	d00e      	beq.n	8010ece <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8010eb0:	4b91      	ldr	r3, [pc, #580]	; (80110f8 <tcp_receive+0xb04>)
 8010eb2:	881b      	ldrh	r3, [r3, #0]
 8010eb4:	461a      	mov	r2, r3
 8010eb6:	4b91      	ldr	r3, [pc, #580]	; (80110fc <tcp_receive+0xb08>)
 8010eb8:	681b      	ldr	r3, [r3, #0]
 8010eba:	441a      	add	r2, r3
 8010ebc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010ebe:	68db      	ldr	r3, [r3, #12]
 8010ec0:	685b      	ldr	r3, [r3, #4]
 8010ec2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8010ec4:	8909      	ldrh	r1, [r1, #8]
 8010ec6:	440b      	add	r3, r1
 8010ec8:	1ad3      	subs	r3, r2, r3
            while (next &&
 8010eca:	2b00      	cmp	r3, #0
 8010ecc:	da9a      	bge.n	8010e04 <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8010ece:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010ed0:	2b00      	cmp	r3, #0
 8010ed2:	d059      	beq.n	8010f88 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 8010ed4:	4b88      	ldr	r3, [pc, #544]	; (80110f8 <tcp_receive+0xb04>)
 8010ed6:	881b      	ldrh	r3, [r3, #0]
 8010ed8:	461a      	mov	r2, r3
 8010eda:	4b88      	ldr	r3, [pc, #544]	; (80110fc <tcp_receive+0xb08>)
 8010edc:	681b      	ldr	r3, [r3, #0]
 8010ede:	441a      	add	r2, r3
 8010ee0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010ee2:	68db      	ldr	r3, [r3, #12]
 8010ee4:	685b      	ldr	r3, [r3, #4]
 8010ee6:	1ad3      	subs	r3, r2, r3
            if (next &&
 8010ee8:	2b00      	cmp	r3, #0
 8010eea:	dd4d      	ble.n	8010f88 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8010eec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010eee:	68db      	ldr	r3, [r3, #12]
 8010ef0:	685b      	ldr	r3, [r3, #4]
 8010ef2:	b29a      	uxth	r2, r3
 8010ef4:	4b81      	ldr	r3, [pc, #516]	; (80110fc <tcp_receive+0xb08>)
 8010ef6:	681b      	ldr	r3, [r3, #0]
 8010ef8:	b29b      	uxth	r3, r3
 8010efa:	1ad3      	subs	r3, r2, r3
 8010efc:	b29a      	uxth	r2, r3
 8010efe:	4b80      	ldr	r3, [pc, #512]	; (8011100 <tcp_receive+0xb0c>)
 8010f00:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8010f02:	4b7f      	ldr	r3, [pc, #508]	; (8011100 <tcp_receive+0xb0c>)
 8010f04:	68db      	ldr	r3, [r3, #12]
 8010f06:	899b      	ldrh	r3, [r3, #12]
 8010f08:	b29b      	uxth	r3, r3
 8010f0a:	4618      	mov	r0, r3
 8010f0c:	f7fa fca4 	bl	800b858 <lwip_htons>
 8010f10:	4603      	mov	r3, r0
 8010f12:	b2db      	uxtb	r3, r3
 8010f14:	f003 0302 	and.w	r3, r3, #2
 8010f18:	2b00      	cmp	r3, #0
 8010f1a:	d005      	beq.n	8010f28 <tcp_receive+0x934>
                inseg.len -= 1;
 8010f1c:	4b78      	ldr	r3, [pc, #480]	; (8011100 <tcp_receive+0xb0c>)
 8010f1e:	891b      	ldrh	r3, [r3, #8]
 8010f20:	3b01      	subs	r3, #1
 8010f22:	b29a      	uxth	r2, r3
 8010f24:	4b76      	ldr	r3, [pc, #472]	; (8011100 <tcp_receive+0xb0c>)
 8010f26:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8010f28:	4b75      	ldr	r3, [pc, #468]	; (8011100 <tcp_receive+0xb0c>)
 8010f2a:	685a      	ldr	r2, [r3, #4]
 8010f2c:	4b74      	ldr	r3, [pc, #464]	; (8011100 <tcp_receive+0xb0c>)
 8010f2e:	891b      	ldrh	r3, [r3, #8]
 8010f30:	4619      	mov	r1, r3
 8010f32:	4610      	mov	r0, r2
 8010f34:	f7fb feb2 	bl	800cc9c <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8010f38:	4b71      	ldr	r3, [pc, #452]	; (8011100 <tcp_receive+0xb0c>)
 8010f3a:	891c      	ldrh	r4, [r3, #8]
 8010f3c:	4b70      	ldr	r3, [pc, #448]	; (8011100 <tcp_receive+0xb0c>)
 8010f3e:	68db      	ldr	r3, [r3, #12]
 8010f40:	899b      	ldrh	r3, [r3, #12]
 8010f42:	b29b      	uxth	r3, r3
 8010f44:	4618      	mov	r0, r3
 8010f46:	f7fa fc87 	bl	800b858 <lwip_htons>
 8010f4a:	4603      	mov	r3, r0
 8010f4c:	b2db      	uxtb	r3, r3
 8010f4e:	f003 0303 	and.w	r3, r3, #3
 8010f52:	2b00      	cmp	r3, #0
 8010f54:	d001      	beq.n	8010f5a <tcp_receive+0x966>
 8010f56:	2301      	movs	r3, #1
 8010f58:	e000      	b.n	8010f5c <tcp_receive+0x968>
 8010f5a:	2300      	movs	r3, #0
 8010f5c:	4423      	add	r3, r4
 8010f5e:	b29a      	uxth	r2, r3
 8010f60:	4b65      	ldr	r3, [pc, #404]	; (80110f8 <tcp_receive+0xb04>)
 8010f62:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8010f64:	4b64      	ldr	r3, [pc, #400]	; (80110f8 <tcp_receive+0xb04>)
 8010f66:	881b      	ldrh	r3, [r3, #0]
 8010f68:	461a      	mov	r2, r3
 8010f6a:	4b64      	ldr	r3, [pc, #400]	; (80110fc <tcp_receive+0xb08>)
 8010f6c:	681b      	ldr	r3, [r3, #0]
 8010f6e:	441a      	add	r2, r3
 8010f70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010f72:	68db      	ldr	r3, [r3, #12]
 8010f74:	685b      	ldr	r3, [r3, #4]
 8010f76:	429a      	cmp	r2, r3
 8010f78:	d006      	beq.n	8010f88 <tcp_receive+0x994>
 8010f7a:	4b62      	ldr	r3, [pc, #392]	; (8011104 <tcp_receive+0xb10>)
 8010f7c:	f240 52fd 	movw	r2, #1533	; 0x5fd
 8010f80:	4961      	ldr	r1, [pc, #388]	; (8011108 <tcp_receive+0xb14>)
 8010f82:	4862      	ldr	r0, [pc, #392]	; (801110c <tcp_receive+0xb18>)
 8010f84:	f005 ff6c 	bl	8016e60 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8010f88:	687b      	ldr	r3, [r7, #4]
 8010f8a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010f8c:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8010f8e:	4b5a      	ldr	r3, [pc, #360]	; (80110f8 <tcp_receive+0xb04>)
 8010f90:	881b      	ldrh	r3, [r3, #0]
 8010f92:	461a      	mov	r2, r3
 8010f94:	4b59      	ldr	r3, [pc, #356]	; (80110fc <tcp_receive+0xb08>)
 8010f96:	681b      	ldr	r3, [r3, #0]
 8010f98:	441a      	add	r2, r3
 8010f9a:	687b      	ldr	r3, [r7, #4]
 8010f9c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8010f9e:	687b      	ldr	r3, [r7, #4]
 8010fa0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010fa2:	4b55      	ldr	r3, [pc, #340]	; (80110f8 <tcp_receive+0xb04>)
 8010fa4:	881b      	ldrh	r3, [r3, #0]
 8010fa6:	429a      	cmp	r2, r3
 8010fa8:	d206      	bcs.n	8010fb8 <tcp_receive+0x9c4>
 8010faa:	4b56      	ldr	r3, [pc, #344]	; (8011104 <tcp_receive+0xb10>)
 8010fac:	f240 6207 	movw	r2, #1543	; 0x607
 8010fb0:	4957      	ldr	r1, [pc, #348]	; (8011110 <tcp_receive+0xb1c>)
 8010fb2:	4856      	ldr	r0, [pc, #344]	; (801110c <tcp_receive+0xb18>)
 8010fb4:	f005 ff54 	bl	8016e60 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8010fb8:	687b      	ldr	r3, [r7, #4]
 8010fba:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010fbc:	4b4e      	ldr	r3, [pc, #312]	; (80110f8 <tcp_receive+0xb04>)
 8010fbe:	881b      	ldrh	r3, [r3, #0]
 8010fc0:	1ad3      	subs	r3, r2, r3
 8010fc2:	b29a      	uxth	r2, r3
 8010fc4:	687b      	ldr	r3, [r7, #4]
 8010fc6:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8010fc8:	6878      	ldr	r0, [r7, #4]
 8010fca:	f7fc feb9 	bl	800dd40 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8010fce:	4b4c      	ldr	r3, [pc, #304]	; (8011100 <tcp_receive+0xb0c>)
 8010fd0:	685b      	ldr	r3, [r3, #4]
 8010fd2:	891b      	ldrh	r3, [r3, #8]
 8010fd4:	2b00      	cmp	r3, #0
 8010fd6:	d006      	beq.n	8010fe6 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 8010fd8:	4b49      	ldr	r3, [pc, #292]	; (8011100 <tcp_receive+0xb0c>)
 8010fda:	685b      	ldr	r3, [r3, #4]
 8010fdc:	4a4d      	ldr	r2, [pc, #308]	; (8011114 <tcp_receive+0xb20>)
 8010fde:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8010fe0:	4b47      	ldr	r3, [pc, #284]	; (8011100 <tcp_receive+0xb0c>)
 8010fe2:	2200      	movs	r2, #0
 8010fe4:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8010fe6:	4b46      	ldr	r3, [pc, #280]	; (8011100 <tcp_receive+0xb0c>)
 8010fe8:	68db      	ldr	r3, [r3, #12]
 8010fea:	899b      	ldrh	r3, [r3, #12]
 8010fec:	b29b      	uxth	r3, r3
 8010fee:	4618      	mov	r0, r3
 8010ff0:	f7fa fc32 	bl	800b858 <lwip_htons>
 8010ff4:	4603      	mov	r3, r0
 8010ff6:	b2db      	uxtb	r3, r3
 8010ff8:	f003 0301 	and.w	r3, r3, #1
 8010ffc:	2b00      	cmp	r3, #0
 8010ffe:	f000 80b8 	beq.w	8011172 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8011002:	4b45      	ldr	r3, [pc, #276]	; (8011118 <tcp_receive+0xb24>)
 8011004:	781b      	ldrb	r3, [r3, #0]
 8011006:	f043 0320 	orr.w	r3, r3, #32
 801100a:	b2da      	uxtb	r2, r3
 801100c:	4b42      	ldr	r3, [pc, #264]	; (8011118 <tcp_receive+0xb24>)
 801100e:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8011010:	e0af      	b.n	8011172 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8011012:	687b      	ldr	r3, [r7, #4]
 8011014:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011016:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8011018:	687b      	ldr	r3, [r7, #4]
 801101a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801101c:	68db      	ldr	r3, [r3, #12]
 801101e:	685b      	ldr	r3, [r3, #4]
 8011020:	4a36      	ldr	r2, [pc, #216]	; (80110fc <tcp_receive+0xb08>)
 8011022:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8011024:	68bb      	ldr	r3, [r7, #8]
 8011026:	891b      	ldrh	r3, [r3, #8]
 8011028:	461c      	mov	r4, r3
 801102a:	68bb      	ldr	r3, [r7, #8]
 801102c:	68db      	ldr	r3, [r3, #12]
 801102e:	899b      	ldrh	r3, [r3, #12]
 8011030:	b29b      	uxth	r3, r3
 8011032:	4618      	mov	r0, r3
 8011034:	f7fa fc10 	bl	800b858 <lwip_htons>
 8011038:	4603      	mov	r3, r0
 801103a:	b2db      	uxtb	r3, r3
 801103c:	f003 0303 	and.w	r3, r3, #3
 8011040:	2b00      	cmp	r3, #0
 8011042:	d001      	beq.n	8011048 <tcp_receive+0xa54>
 8011044:	2301      	movs	r3, #1
 8011046:	e000      	b.n	801104a <tcp_receive+0xa56>
 8011048:	2300      	movs	r3, #0
 801104a:	191a      	adds	r2, r3, r4
 801104c:	687b      	ldr	r3, [r7, #4]
 801104e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011050:	441a      	add	r2, r3
 8011052:	687b      	ldr	r3, [r7, #4]
 8011054:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8011056:	687b      	ldr	r3, [r7, #4]
 8011058:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801105a:	461c      	mov	r4, r3
 801105c:	68bb      	ldr	r3, [r7, #8]
 801105e:	891b      	ldrh	r3, [r3, #8]
 8011060:	461d      	mov	r5, r3
 8011062:	68bb      	ldr	r3, [r7, #8]
 8011064:	68db      	ldr	r3, [r3, #12]
 8011066:	899b      	ldrh	r3, [r3, #12]
 8011068:	b29b      	uxth	r3, r3
 801106a:	4618      	mov	r0, r3
 801106c:	f7fa fbf4 	bl	800b858 <lwip_htons>
 8011070:	4603      	mov	r3, r0
 8011072:	b2db      	uxtb	r3, r3
 8011074:	f003 0303 	and.w	r3, r3, #3
 8011078:	2b00      	cmp	r3, #0
 801107a:	d001      	beq.n	8011080 <tcp_receive+0xa8c>
 801107c:	2301      	movs	r3, #1
 801107e:	e000      	b.n	8011082 <tcp_receive+0xa8e>
 8011080:	2300      	movs	r3, #0
 8011082:	442b      	add	r3, r5
 8011084:	429c      	cmp	r4, r3
 8011086:	d206      	bcs.n	8011096 <tcp_receive+0xaa2>
 8011088:	4b1e      	ldr	r3, [pc, #120]	; (8011104 <tcp_receive+0xb10>)
 801108a:	f240 622c 	movw	r2, #1580	; 0x62c
 801108e:	4923      	ldr	r1, [pc, #140]	; (801111c <tcp_receive+0xb28>)
 8011090:	481e      	ldr	r0, [pc, #120]	; (801110c <tcp_receive+0xb18>)
 8011092:	f005 fee5 	bl	8016e60 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8011096:	68bb      	ldr	r3, [r7, #8]
 8011098:	891b      	ldrh	r3, [r3, #8]
 801109a:	461c      	mov	r4, r3
 801109c:	68bb      	ldr	r3, [r7, #8]
 801109e:	68db      	ldr	r3, [r3, #12]
 80110a0:	899b      	ldrh	r3, [r3, #12]
 80110a2:	b29b      	uxth	r3, r3
 80110a4:	4618      	mov	r0, r3
 80110a6:	f7fa fbd7 	bl	800b858 <lwip_htons>
 80110aa:	4603      	mov	r3, r0
 80110ac:	b2db      	uxtb	r3, r3
 80110ae:	f003 0303 	and.w	r3, r3, #3
 80110b2:	2b00      	cmp	r3, #0
 80110b4:	d001      	beq.n	80110ba <tcp_receive+0xac6>
 80110b6:	2301      	movs	r3, #1
 80110b8:	e000      	b.n	80110bc <tcp_receive+0xac8>
 80110ba:	2300      	movs	r3, #0
 80110bc:	1919      	adds	r1, r3, r4
 80110be:	687b      	ldr	r3, [r7, #4]
 80110c0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80110c2:	b28b      	uxth	r3, r1
 80110c4:	1ad3      	subs	r3, r2, r3
 80110c6:	b29a      	uxth	r2, r3
 80110c8:	687b      	ldr	r3, [r7, #4]
 80110ca:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 80110cc:	6878      	ldr	r0, [r7, #4]
 80110ce:	f7fc fe37 	bl	800dd40 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 80110d2:	68bb      	ldr	r3, [r7, #8]
 80110d4:	685b      	ldr	r3, [r3, #4]
 80110d6:	891b      	ldrh	r3, [r3, #8]
 80110d8:	2b00      	cmp	r3, #0
 80110da:	d028      	beq.n	801112e <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 80110dc:	4b0d      	ldr	r3, [pc, #52]	; (8011114 <tcp_receive+0xb20>)
 80110de:	681b      	ldr	r3, [r3, #0]
 80110e0:	2b00      	cmp	r3, #0
 80110e2:	d01d      	beq.n	8011120 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 80110e4:	4b0b      	ldr	r3, [pc, #44]	; (8011114 <tcp_receive+0xb20>)
 80110e6:	681a      	ldr	r2, [r3, #0]
 80110e8:	68bb      	ldr	r3, [r7, #8]
 80110ea:	685b      	ldr	r3, [r3, #4]
 80110ec:	4619      	mov	r1, r3
 80110ee:	4610      	mov	r0, r2
 80110f0:	f7fc f85a 	bl	800d1a8 <pbuf_cat>
 80110f4:	e018      	b.n	8011128 <tcp_receive+0xb34>
 80110f6:	bf00      	nop
 80110f8:	200047ee 	.word	0x200047ee
 80110fc:	200047e4 	.word	0x200047e4
 8011100:	200047c4 	.word	0x200047c4
 8011104:	0801a22c 	.word	0x0801a22c
 8011108:	0801a60c 	.word	0x0801a60c
 801110c:	0801a278 	.word	0x0801a278
 8011110:	0801a648 	.word	0x0801a648
 8011114:	200047f4 	.word	0x200047f4
 8011118:	200047f1 	.word	0x200047f1
 801111c:	0801a668 	.word	0x0801a668
            } else {
              recv_data = cseg->p;
 8011120:	68bb      	ldr	r3, [r7, #8]
 8011122:	685b      	ldr	r3, [r3, #4]
 8011124:	4a70      	ldr	r2, [pc, #448]	; (80112e8 <tcp_receive+0xcf4>)
 8011126:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8011128:	68bb      	ldr	r3, [r7, #8]
 801112a:	2200      	movs	r2, #0
 801112c:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801112e:	68bb      	ldr	r3, [r7, #8]
 8011130:	68db      	ldr	r3, [r3, #12]
 8011132:	899b      	ldrh	r3, [r3, #12]
 8011134:	b29b      	uxth	r3, r3
 8011136:	4618      	mov	r0, r3
 8011138:	f7fa fb8e 	bl	800b858 <lwip_htons>
 801113c:	4603      	mov	r3, r0
 801113e:	b2db      	uxtb	r3, r3
 8011140:	f003 0301 	and.w	r3, r3, #1
 8011144:	2b00      	cmp	r3, #0
 8011146:	d00d      	beq.n	8011164 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8011148:	4b68      	ldr	r3, [pc, #416]	; (80112ec <tcp_receive+0xcf8>)
 801114a:	781b      	ldrb	r3, [r3, #0]
 801114c:	f043 0320 	orr.w	r3, r3, #32
 8011150:	b2da      	uxtb	r2, r3
 8011152:	4b66      	ldr	r3, [pc, #408]	; (80112ec <tcp_receive+0xcf8>)
 8011154:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8011156:	687b      	ldr	r3, [r7, #4]
 8011158:	7d1b      	ldrb	r3, [r3, #20]
 801115a:	2b04      	cmp	r3, #4
 801115c:	d102      	bne.n	8011164 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 801115e:	687b      	ldr	r3, [r7, #4]
 8011160:	2207      	movs	r2, #7
 8011162:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8011164:	68bb      	ldr	r3, [r7, #8]
 8011166:	681a      	ldr	r2, [r3, #0]
 8011168:	687b      	ldr	r3, [r7, #4]
 801116a:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 801116c:	68b8      	ldr	r0, [r7, #8]
 801116e:	f7fd fb09 	bl	800e784 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8011172:	687b      	ldr	r3, [r7, #4]
 8011174:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011176:	2b00      	cmp	r3, #0
 8011178:	d008      	beq.n	801118c <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 801117a:	687b      	ldr	r3, [r7, #4]
 801117c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801117e:	68db      	ldr	r3, [r3, #12]
 8011180:	685a      	ldr	r2, [r3, #4]
 8011182:	687b      	ldr	r3, [r7, #4]
 8011184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8011186:	429a      	cmp	r2, r3
 8011188:	f43f af43 	beq.w	8011012 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 801118c:	687b      	ldr	r3, [r7, #4]
 801118e:	8b5b      	ldrh	r3, [r3, #26]
 8011190:	f003 0301 	and.w	r3, r3, #1
 8011194:	2b00      	cmp	r3, #0
 8011196:	d00e      	beq.n	80111b6 <tcp_receive+0xbc2>
 8011198:	687b      	ldr	r3, [r7, #4]
 801119a:	8b5b      	ldrh	r3, [r3, #26]
 801119c:	f023 0301 	bic.w	r3, r3, #1
 80111a0:	b29a      	uxth	r2, r3
 80111a2:	687b      	ldr	r3, [r7, #4]
 80111a4:	835a      	strh	r2, [r3, #26]
 80111a6:	687b      	ldr	r3, [r7, #4]
 80111a8:	8b5b      	ldrh	r3, [r3, #26]
 80111aa:	f043 0302 	orr.w	r3, r3, #2
 80111ae:	b29a      	uxth	r2, r3
 80111b0:	687b      	ldr	r3, [r7, #4]
 80111b2:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80111b4:	e188      	b.n	80114c8 <tcp_receive+0xed4>
        tcp_ack(pcb);
 80111b6:	687b      	ldr	r3, [r7, #4]
 80111b8:	8b5b      	ldrh	r3, [r3, #26]
 80111ba:	f043 0301 	orr.w	r3, r3, #1
 80111be:	b29a      	uxth	r2, r3
 80111c0:	687b      	ldr	r3, [r7, #4]
 80111c2:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80111c4:	e180      	b.n	80114c8 <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 80111c6:	687b      	ldr	r3, [r7, #4]
 80111c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80111ca:	2b00      	cmp	r3, #0
 80111cc:	d106      	bne.n	80111dc <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 80111ce:	4848      	ldr	r0, [pc, #288]	; (80112f0 <tcp_receive+0xcfc>)
 80111d0:	f7fd faf0 	bl	800e7b4 <tcp_seg_copy>
 80111d4:	4602      	mov	r2, r0
 80111d6:	687b      	ldr	r3, [r7, #4]
 80111d8:	675a      	str	r2, [r3, #116]	; 0x74
 80111da:	e16d      	b.n	80114b8 <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 80111dc:	2300      	movs	r3, #0
 80111de:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80111e0:	687b      	ldr	r3, [r7, #4]
 80111e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80111e4:	63bb      	str	r3, [r7, #56]	; 0x38
 80111e6:	e157      	b.n	8011498 <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 80111e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111ea:	68db      	ldr	r3, [r3, #12]
 80111ec:	685a      	ldr	r2, [r3, #4]
 80111ee:	4b41      	ldr	r3, [pc, #260]	; (80112f4 <tcp_receive+0xd00>)
 80111f0:	681b      	ldr	r3, [r3, #0]
 80111f2:	429a      	cmp	r2, r3
 80111f4:	d11d      	bne.n	8011232 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 80111f6:	4b3e      	ldr	r3, [pc, #248]	; (80112f0 <tcp_receive+0xcfc>)
 80111f8:	891a      	ldrh	r2, [r3, #8]
 80111fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111fc:	891b      	ldrh	r3, [r3, #8]
 80111fe:	429a      	cmp	r2, r3
 8011200:	f240 814f 	bls.w	80114a2 <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8011204:	483a      	ldr	r0, [pc, #232]	; (80112f0 <tcp_receive+0xcfc>)
 8011206:	f7fd fad5 	bl	800e7b4 <tcp_seg_copy>
 801120a:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 801120c:	697b      	ldr	r3, [r7, #20]
 801120e:	2b00      	cmp	r3, #0
 8011210:	f000 8149 	beq.w	80114a6 <tcp_receive+0xeb2>
                  if (prev != NULL) {
 8011214:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011216:	2b00      	cmp	r3, #0
 8011218:	d003      	beq.n	8011222 <tcp_receive+0xc2e>
                    prev->next = cseg;
 801121a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801121c:	697a      	ldr	r2, [r7, #20]
 801121e:	601a      	str	r2, [r3, #0]
 8011220:	e002      	b.n	8011228 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 8011222:	687b      	ldr	r3, [r7, #4]
 8011224:	697a      	ldr	r2, [r7, #20]
 8011226:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8011228:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801122a:	6978      	ldr	r0, [r7, #20]
 801122c:	f7ff f8de 	bl	80103ec <tcp_oos_insert_segment>
                }
                break;
 8011230:	e139      	b.n	80114a6 <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8011232:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011234:	2b00      	cmp	r3, #0
 8011236:	d117      	bne.n	8011268 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8011238:	4b2e      	ldr	r3, [pc, #184]	; (80112f4 <tcp_receive+0xd00>)
 801123a:	681a      	ldr	r2, [r3, #0]
 801123c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801123e:	68db      	ldr	r3, [r3, #12]
 8011240:	685b      	ldr	r3, [r3, #4]
 8011242:	1ad3      	subs	r3, r2, r3
 8011244:	2b00      	cmp	r3, #0
 8011246:	da57      	bge.n	80112f8 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8011248:	4829      	ldr	r0, [pc, #164]	; (80112f0 <tcp_receive+0xcfc>)
 801124a:	f7fd fab3 	bl	800e7b4 <tcp_seg_copy>
 801124e:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8011250:	69bb      	ldr	r3, [r7, #24]
 8011252:	2b00      	cmp	r3, #0
 8011254:	f000 8129 	beq.w	80114aa <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 8011258:	687b      	ldr	r3, [r7, #4]
 801125a:	69ba      	ldr	r2, [r7, #24]
 801125c:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 801125e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8011260:	69b8      	ldr	r0, [r7, #24]
 8011262:	f7ff f8c3 	bl	80103ec <tcp_oos_insert_segment>
                  }
                  break;
 8011266:	e120      	b.n	80114aa <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8011268:	4b22      	ldr	r3, [pc, #136]	; (80112f4 <tcp_receive+0xd00>)
 801126a:	681a      	ldr	r2, [r3, #0]
 801126c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801126e:	68db      	ldr	r3, [r3, #12]
 8011270:	685b      	ldr	r3, [r3, #4]
 8011272:	1ad3      	subs	r3, r2, r3
 8011274:	3b01      	subs	r3, #1
 8011276:	2b00      	cmp	r3, #0
 8011278:	db3e      	blt.n	80112f8 <tcp_receive+0xd04>
 801127a:	4b1e      	ldr	r3, [pc, #120]	; (80112f4 <tcp_receive+0xd00>)
 801127c:	681a      	ldr	r2, [r3, #0]
 801127e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011280:	68db      	ldr	r3, [r3, #12]
 8011282:	685b      	ldr	r3, [r3, #4]
 8011284:	1ad3      	subs	r3, r2, r3
 8011286:	3301      	adds	r3, #1
 8011288:	2b00      	cmp	r3, #0
 801128a:	dc35      	bgt.n	80112f8 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801128c:	4818      	ldr	r0, [pc, #96]	; (80112f0 <tcp_receive+0xcfc>)
 801128e:	f7fd fa91 	bl	800e7b4 <tcp_seg_copy>
 8011292:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8011294:	69fb      	ldr	r3, [r7, #28]
 8011296:	2b00      	cmp	r3, #0
 8011298:	f000 8109 	beq.w	80114ae <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 801129c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801129e:	68db      	ldr	r3, [r3, #12]
 80112a0:	685b      	ldr	r3, [r3, #4]
 80112a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80112a4:	8912      	ldrh	r2, [r2, #8]
 80112a6:	441a      	add	r2, r3
 80112a8:	4b12      	ldr	r3, [pc, #72]	; (80112f4 <tcp_receive+0xd00>)
 80112aa:	681b      	ldr	r3, [r3, #0]
 80112ac:	1ad3      	subs	r3, r2, r3
 80112ae:	2b00      	cmp	r3, #0
 80112b0:	dd12      	ble.n	80112d8 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 80112b2:	4b10      	ldr	r3, [pc, #64]	; (80112f4 <tcp_receive+0xd00>)
 80112b4:	681b      	ldr	r3, [r3, #0]
 80112b6:	b29a      	uxth	r2, r3
 80112b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80112ba:	68db      	ldr	r3, [r3, #12]
 80112bc:	685b      	ldr	r3, [r3, #4]
 80112be:	b29b      	uxth	r3, r3
 80112c0:	1ad3      	subs	r3, r2, r3
 80112c2:	b29a      	uxth	r2, r3
 80112c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80112c6:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 80112c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80112ca:	685a      	ldr	r2, [r3, #4]
 80112cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80112ce:	891b      	ldrh	r3, [r3, #8]
 80112d0:	4619      	mov	r1, r3
 80112d2:	4610      	mov	r0, r2
 80112d4:	f7fb fce2 	bl	800cc9c <pbuf_realloc>
                    }
                    prev->next = cseg;
 80112d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80112da:	69fa      	ldr	r2, [r7, #28]
 80112dc:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 80112de:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80112e0:	69f8      	ldr	r0, [r7, #28]
 80112e2:	f7ff f883 	bl	80103ec <tcp_oos_insert_segment>
                  }
                  break;
 80112e6:	e0e2      	b.n	80114ae <tcp_receive+0xeba>
 80112e8:	200047f4 	.word	0x200047f4
 80112ec:	200047f1 	.word	0x200047f1
 80112f0:	200047c4 	.word	0x200047c4
 80112f4:	200047e4 	.word	0x200047e4
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 80112f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112fa:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 80112fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112fe:	681b      	ldr	r3, [r3, #0]
 8011300:	2b00      	cmp	r3, #0
 8011302:	f040 80c6 	bne.w	8011492 <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8011306:	4b80      	ldr	r3, [pc, #512]	; (8011508 <tcp_receive+0xf14>)
 8011308:	681a      	ldr	r2, [r3, #0]
 801130a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801130c:	68db      	ldr	r3, [r3, #12]
 801130e:	685b      	ldr	r3, [r3, #4]
 8011310:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8011312:	2b00      	cmp	r3, #0
 8011314:	f340 80bd 	ble.w	8011492 <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8011318:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801131a:	68db      	ldr	r3, [r3, #12]
 801131c:	899b      	ldrh	r3, [r3, #12]
 801131e:	b29b      	uxth	r3, r3
 8011320:	4618      	mov	r0, r3
 8011322:	f7fa fa99 	bl	800b858 <lwip_htons>
 8011326:	4603      	mov	r3, r0
 8011328:	b2db      	uxtb	r3, r3
 801132a:	f003 0301 	and.w	r3, r3, #1
 801132e:	2b00      	cmp	r3, #0
 8011330:	f040 80bf 	bne.w	80114b2 <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8011334:	4875      	ldr	r0, [pc, #468]	; (801150c <tcp_receive+0xf18>)
 8011336:	f7fd fa3d 	bl	800e7b4 <tcp_seg_copy>
 801133a:	4602      	mov	r2, r0
 801133c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801133e:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8011340:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011342:	681b      	ldr	r3, [r3, #0]
 8011344:	2b00      	cmp	r3, #0
 8011346:	f000 80b6 	beq.w	80114b6 <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 801134a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801134c:	68db      	ldr	r3, [r3, #12]
 801134e:	685b      	ldr	r3, [r3, #4]
 8011350:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011352:	8912      	ldrh	r2, [r2, #8]
 8011354:	441a      	add	r2, r3
 8011356:	4b6c      	ldr	r3, [pc, #432]	; (8011508 <tcp_receive+0xf14>)
 8011358:	681b      	ldr	r3, [r3, #0]
 801135a:	1ad3      	subs	r3, r2, r3
 801135c:	2b00      	cmp	r3, #0
 801135e:	dd12      	ble.n	8011386 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8011360:	4b69      	ldr	r3, [pc, #420]	; (8011508 <tcp_receive+0xf14>)
 8011362:	681b      	ldr	r3, [r3, #0]
 8011364:	b29a      	uxth	r2, r3
 8011366:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011368:	68db      	ldr	r3, [r3, #12]
 801136a:	685b      	ldr	r3, [r3, #4]
 801136c:	b29b      	uxth	r3, r3
 801136e:	1ad3      	subs	r3, r2, r3
 8011370:	b29a      	uxth	r2, r3
 8011372:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011374:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8011376:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011378:	685a      	ldr	r2, [r3, #4]
 801137a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801137c:	891b      	ldrh	r3, [r3, #8]
 801137e:	4619      	mov	r1, r3
 8011380:	4610      	mov	r0, r2
 8011382:	f7fb fc8b 	bl	800cc9c <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8011386:	4b62      	ldr	r3, [pc, #392]	; (8011510 <tcp_receive+0xf1c>)
 8011388:	881b      	ldrh	r3, [r3, #0]
 801138a:	461a      	mov	r2, r3
 801138c:	4b5e      	ldr	r3, [pc, #376]	; (8011508 <tcp_receive+0xf14>)
 801138e:	681b      	ldr	r3, [r3, #0]
 8011390:	441a      	add	r2, r3
 8011392:	687b      	ldr	r3, [r7, #4]
 8011394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011396:	6879      	ldr	r1, [r7, #4]
 8011398:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801139a:	440b      	add	r3, r1
 801139c:	1ad3      	subs	r3, r2, r3
 801139e:	2b00      	cmp	r3, #0
 80113a0:	f340 8089 	ble.w	80114b6 <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 80113a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80113a6:	681b      	ldr	r3, [r3, #0]
 80113a8:	68db      	ldr	r3, [r3, #12]
 80113aa:	899b      	ldrh	r3, [r3, #12]
 80113ac:	b29b      	uxth	r3, r3
 80113ae:	4618      	mov	r0, r3
 80113b0:	f7fa fa52 	bl	800b858 <lwip_htons>
 80113b4:	4603      	mov	r3, r0
 80113b6:	b2db      	uxtb	r3, r3
 80113b8:	f003 0301 	and.w	r3, r3, #1
 80113bc:	2b00      	cmp	r3, #0
 80113be:	d022      	beq.n	8011406 <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 80113c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80113c2:	681b      	ldr	r3, [r3, #0]
 80113c4:	68db      	ldr	r3, [r3, #12]
 80113c6:	899b      	ldrh	r3, [r3, #12]
 80113c8:	b29b      	uxth	r3, r3
 80113ca:	b21b      	sxth	r3, r3
 80113cc:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80113d0:	b21c      	sxth	r4, r3
 80113d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80113d4:	681b      	ldr	r3, [r3, #0]
 80113d6:	68db      	ldr	r3, [r3, #12]
 80113d8:	899b      	ldrh	r3, [r3, #12]
 80113da:	b29b      	uxth	r3, r3
 80113dc:	4618      	mov	r0, r3
 80113de:	f7fa fa3b 	bl	800b858 <lwip_htons>
 80113e2:	4603      	mov	r3, r0
 80113e4:	b2db      	uxtb	r3, r3
 80113e6:	b29b      	uxth	r3, r3
 80113e8:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80113ec:	b29b      	uxth	r3, r3
 80113ee:	4618      	mov	r0, r3
 80113f0:	f7fa fa32 	bl	800b858 <lwip_htons>
 80113f4:	4603      	mov	r3, r0
 80113f6:	b21b      	sxth	r3, r3
 80113f8:	4323      	orrs	r3, r4
 80113fa:	b21a      	sxth	r2, r3
 80113fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80113fe:	681b      	ldr	r3, [r3, #0]
 8011400:	68db      	ldr	r3, [r3, #12]
 8011402:	b292      	uxth	r2, r2
 8011404:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8011406:	687b      	ldr	r3, [r7, #4]
 8011408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801140a:	b29a      	uxth	r2, r3
 801140c:	687b      	ldr	r3, [r7, #4]
 801140e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011410:	4413      	add	r3, r2
 8011412:	b299      	uxth	r1, r3
 8011414:	4b3c      	ldr	r3, [pc, #240]	; (8011508 <tcp_receive+0xf14>)
 8011416:	681b      	ldr	r3, [r3, #0]
 8011418:	b29a      	uxth	r2, r3
 801141a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801141c:	681b      	ldr	r3, [r3, #0]
 801141e:	1a8a      	subs	r2, r1, r2
 8011420:	b292      	uxth	r2, r2
 8011422:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8011424:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011426:	681b      	ldr	r3, [r3, #0]
 8011428:	685a      	ldr	r2, [r3, #4]
 801142a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801142c:	681b      	ldr	r3, [r3, #0]
 801142e:	891b      	ldrh	r3, [r3, #8]
 8011430:	4619      	mov	r1, r3
 8011432:	4610      	mov	r0, r2
 8011434:	f7fb fc32 	bl	800cc9c <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8011438:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801143a:	681b      	ldr	r3, [r3, #0]
 801143c:	891c      	ldrh	r4, [r3, #8]
 801143e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011440:	681b      	ldr	r3, [r3, #0]
 8011442:	68db      	ldr	r3, [r3, #12]
 8011444:	899b      	ldrh	r3, [r3, #12]
 8011446:	b29b      	uxth	r3, r3
 8011448:	4618      	mov	r0, r3
 801144a:	f7fa fa05 	bl	800b858 <lwip_htons>
 801144e:	4603      	mov	r3, r0
 8011450:	b2db      	uxtb	r3, r3
 8011452:	f003 0303 	and.w	r3, r3, #3
 8011456:	2b00      	cmp	r3, #0
 8011458:	d001      	beq.n	801145e <tcp_receive+0xe6a>
 801145a:	2301      	movs	r3, #1
 801145c:	e000      	b.n	8011460 <tcp_receive+0xe6c>
 801145e:	2300      	movs	r3, #0
 8011460:	4423      	add	r3, r4
 8011462:	b29a      	uxth	r2, r3
 8011464:	4b2a      	ldr	r3, [pc, #168]	; (8011510 <tcp_receive+0xf1c>)
 8011466:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8011468:	4b29      	ldr	r3, [pc, #164]	; (8011510 <tcp_receive+0xf1c>)
 801146a:	881b      	ldrh	r3, [r3, #0]
 801146c:	461a      	mov	r2, r3
 801146e:	4b26      	ldr	r3, [pc, #152]	; (8011508 <tcp_receive+0xf14>)
 8011470:	681b      	ldr	r3, [r3, #0]
 8011472:	441a      	add	r2, r3
 8011474:	687b      	ldr	r3, [r7, #4]
 8011476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011478:	6879      	ldr	r1, [r7, #4]
 801147a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801147c:	440b      	add	r3, r1
 801147e:	429a      	cmp	r2, r3
 8011480:	d019      	beq.n	80114b6 <tcp_receive+0xec2>
 8011482:	4b24      	ldr	r3, [pc, #144]	; (8011514 <tcp_receive+0xf20>)
 8011484:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8011488:	4923      	ldr	r1, [pc, #140]	; (8011518 <tcp_receive+0xf24>)
 801148a:	4824      	ldr	r0, [pc, #144]	; (801151c <tcp_receive+0xf28>)
 801148c:	f005 fce8 	bl	8016e60 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8011490:	e011      	b.n	80114b6 <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8011492:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011494:	681b      	ldr	r3, [r3, #0]
 8011496:	63bb      	str	r3, [r7, #56]	; 0x38
 8011498:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801149a:	2b00      	cmp	r3, #0
 801149c:	f47f aea4 	bne.w	80111e8 <tcp_receive+0xbf4>
 80114a0:	e00a      	b.n	80114b8 <tcp_receive+0xec4>
                break;
 80114a2:	bf00      	nop
 80114a4:	e008      	b.n	80114b8 <tcp_receive+0xec4>
                break;
 80114a6:	bf00      	nop
 80114a8:	e006      	b.n	80114b8 <tcp_receive+0xec4>
                  break;
 80114aa:	bf00      	nop
 80114ac:	e004      	b.n	80114b8 <tcp_receive+0xec4>
                  break;
 80114ae:	bf00      	nop
 80114b0:	e002      	b.n	80114b8 <tcp_receive+0xec4>
                  break;
 80114b2:	bf00      	nop
 80114b4:	e000      	b.n	80114b8 <tcp_receive+0xec4>
                break;
 80114b6:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 80114b8:	6878      	ldr	r0, [r7, #4]
 80114ba:	f001 fe9d 	bl	80131f8 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 80114be:	e003      	b.n	80114c8 <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 80114c0:	6878      	ldr	r0, [r7, #4]
 80114c2:	f001 fe99 	bl	80131f8 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80114c6:	e01a      	b.n	80114fe <tcp_receive+0xf0a>
 80114c8:	e019      	b.n	80114fe <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 80114ca:	4b0f      	ldr	r3, [pc, #60]	; (8011508 <tcp_receive+0xf14>)
 80114cc:	681a      	ldr	r2, [r3, #0]
 80114ce:	687b      	ldr	r3, [r7, #4]
 80114d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80114d2:	1ad3      	subs	r3, r2, r3
 80114d4:	2b00      	cmp	r3, #0
 80114d6:	db0a      	blt.n	80114ee <tcp_receive+0xefa>
 80114d8:	4b0b      	ldr	r3, [pc, #44]	; (8011508 <tcp_receive+0xf14>)
 80114da:	681a      	ldr	r2, [r3, #0]
 80114dc:	687b      	ldr	r3, [r7, #4]
 80114de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80114e0:	6879      	ldr	r1, [r7, #4]
 80114e2:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80114e4:	440b      	add	r3, r1
 80114e6:	1ad3      	subs	r3, r2, r3
 80114e8:	3301      	adds	r3, #1
 80114ea:	2b00      	cmp	r3, #0
 80114ec:	dd07      	ble.n	80114fe <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 80114ee:	687b      	ldr	r3, [r7, #4]
 80114f0:	8b5b      	ldrh	r3, [r3, #26]
 80114f2:	f043 0302 	orr.w	r3, r3, #2
 80114f6:	b29a      	uxth	r2, r3
 80114f8:	687b      	ldr	r3, [r7, #4]
 80114fa:	835a      	strh	r2, [r3, #26]
    }
  }
}
 80114fc:	e7ff      	b.n	80114fe <tcp_receive+0xf0a>
 80114fe:	bf00      	nop
 8011500:	3750      	adds	r7, #80	; 0x50
 8011502:	46bd      	mov	sp, r7
 8011504:	bdb0      	pop	{r4, r5, r7, pc}
 8011506:	bf00      	nop
 8011508:	200047e4 	.word	0x200047e4
 801150c:	200047c4 	.word	0x200047c4
 8011510:	200047ee 	.word	0x200047ee
 8011514:	0801a22c 	.word	0x0801a22c
 8011518:	0801a5d4 	.word	0x0801a5d4
 801151c:	0801a278 	.word	0x0801a278

08011520 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8011520:	b480      	push	{r7}
 8011522:	b083      	sub	sp, #12
 8011524:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8011526:	4b15      	ldr	r3, [pc, #84]	; (801157c <tcp_get_next_optbyte+0x5c>)
 8011528:	881b      	ldrh	r3, [r3, #0]
 801152a:	1c5a      	adds	r2, r3, #1
 801152c:	b291      	uxth	r1, r2
 801152e:	4a13      	ldr	r2, [pc, #76]	; (801157c <tcp_get_next_optbyte+0x5c>)
 8011530:	8011      	strh	r1, [r2, #0]
 8011532:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8011534:	4b12      	ldr	r3, [pc, #72]	; (8011580 <tcp_get_next_optbyte+0x60>)
 8011536:	681b      	ldr	r3, [r3, #0]
 8011538:	2b00      	cmp	r3, #0
 801153a:	d004      	beq.n	8011546 <tcp_get_next_optbyte+0x26>
 801153c:	4b11      	ldr	r3, [pc, #68]	; (8011584 <tcp_get_next_optbyte+0x64>)
 801153e:	881b      	ldrh	r3, [r3, #0]
 8011540:	88fa      	ldrh	r2, [r7, #6]
 8011542:	429a      	cmp	r2, r3
 8011544:	d208      	bcs.n	8011558 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8011546:	4b10      	ldr	r3, [pc, #64]	; (8011588 <tcp_get_next_optbyte+0x68>)
 8011548:	681b      	ldr	r3, [r3, #0]
 801154a:	3314      	adds	r3, #20
 801154c:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 801154e:	88fb      	ldrh	r3, [r7, #6]
 8011550:	683a      	ldr	r2, [r7, #0]
 8011552:	4413      	add	r3, r2
 8011554:	781b      	ldrb	r3, [r3, #0]
 8011556:	e00b      	b.n	8011570 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8011558:	88fb      	ldrh	r3, [r7, #6]
 801155a:	b2da      	uxtb	r2, r3
 801155c:	4b09      	ldr	r3, [pc, #36]	; (8011584 <tcp_get_next_optbyte+0x64>)
 801155e:	881b      	ldrh	r3, [r3, #0]
 8011560:	b2db      	uxtb	r3, r3
 8011562:	1ad3      	subs	r3, r2, r3
 8011564:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8011566:	4b06      	ldr	r3, [pc, #24]	; (8011580 <tcp_get_next_optbyte+0x60>)
 8011568:	681a      	ldr	r2, [r3, #0]
 801156a:	797b      	ldrb	r3, [r7, #5]
 801156c:	4413      	add	r3, r2
 801156e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8011570:	4618      	mov	r0, r3
 8011572:	370c      	adds	r7, #12
 8011574:	46bd      	mov	sp, r7
 8011576:	f85d 7b04 	ldr.w	r7, [sp], #4
 801157a:	4770      	bx	lr
 801157c:	200047e0 	.word	0x200047e0
 8011580:	200047dc 	.word	0x200047dc
 8011584:	200047da 	.word	0x200047da
 8011588:	200047d4 	.word	0x200047d4

0801158c <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 801158c:	b580      	push	{r7, lr}
 801158e:	b084      	sub	sp, #16
 8011590:	af00      	add	r7, sp, #0
 8011592:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8011594:	687b      	ldr	r3, [r7, #4]
 8011596:	2b00      	cmp	r3, #0
 8011598:	d106      	bne.n	80115a8 <tcp_parseopt+0x1c>
 801159a:	4b31      	ldr	r3, [pc, #196]	; (8011660 <tcp_parseopt+0xd4>)
 801159c:	f240 727d 	movw	r2, #1917	; 0x77d
 80115a0:	4930      	ldr	r1, [pc, #192]	; (8011664 <tcp_parseopt+0xd8>)
 80115a2:	4831      	ldr	r0, [pc, #196]	; (8011668 <tcp_parseopt+0xdc>)
 80115a4:	f005 fc5c 	bl	8016e60 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 80115a8:	4b30      	ldr	r3, [pc, #192]	; (801166c <tcp_parseopt+0xe0>)
 80115aa:	881b      	ldrh	r3, [r3, #0]
 80115ac:	2b00      	cmp	r3, #0
 80115ae:	d053      	beq.n	8011658 <tcp_parseopt+0xcc>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80115b0:	4b2f      	ldr	r3, [pc, #188]	; (8011670 <tcp_parseopt+0xe4>)
 80115b2:	2200      	movs	r2, #0
 80115b4:	801a      	strh	r2, [r3, #0]
 80115b6:	e043      	b.n	8011640 <tcp_parseopt+0xb4>
      u8_t opt = tcp_get_next_optbyte();
 80115b8:	f7ff ffb2 	bl	8011520 <tcp_get_next_optbyte>
 80115bc:	4603      	mov	r3, r0
 80115be:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 80115c0:	7bfb      	ldrb	r3, [r7, #15]
 80115c2:	2b01      	cmp	r3, #1
 80115c4:	d03c      	beq.n	8011640 <tcp_parseopt+0xb4>
 80115c6:	2b02      	cmp	r3, #2
 80115c8:	d002      	beq.n	80115d0 <tcp_parseopt+0x44>
 80115ca:	2b00      	cmp	r3, #0
 80115cc:	d03f      	beq.n	801164e <tcp_parseopt+0xc2>
 80115ce:	e026      	b.n	801161e <tcp_parseopt+0x92>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 80115d0:	f7ff ffa6 	bl	8011520 <tcp_get_next_optbyte>
 80115d4:	4603      	mov	r3, r0
 80115d6:	2b04      	cmp	r3, #4
 80115d8:	d13b      	bne.n	8011652 <tcp_parseopt+0xc6>
 80115da:	4b25      	ldr	r3, [pc, #148]	; (8011670 <tcp_parseopt+0xe4>)
 80115dc:	881b      	ldrh	r3, [r3, #0]
 80115de:	3302      	adds	r3, #2
 80115e0:	4a22      	ldr	r2, [pc, #136]	; (801166c <tcp_parseopt+0xe0>)
 80115e2:	8812      	ldrh	r2, [r2, #0]
 80115e4:	4293      	cmp	r3, r2
 80115e6:	dc34      	bgt.n	8011652 <tcp_parseopt+0xc6>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 80115e8:	f7ff ff9a 	bl	8011520 <tcp_get_next_optbyte>
 80115ec:	4603      	mov	r3, r0
 80115ee:	b29b      	uxth	r3, r3
 80115f0:	021b      	lsls	r3, r3, #8
 80115f2:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 80115f4:	f7ff ff94 	bl	8011520 <tcp_get_next_optbyte>
 80115f8:	4603      	mov	r3, r0
 80115fa:	b29a      	uxth	r2, r3
 80115fc:	89bb      	ldrh	r3, [r7, #12]
 80115fe:	4313      	orrs	r3, r2
 8011600:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8011602:	89bb      	ldrh	r3, [r7, #12]
 8011604:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8011608:	d804      	bhi.n	8011614 <tcp_parseopt+0x88>
 801160a:	89bb      	ldrh	r3, [r7, #12]
 801160c:	2b00      	cmp	r3, #0
 801160e:	d001      	beq.n	8011614 <tcp_parseopt+0x88>
 8011610:	89ba      	ldrh	r2, [r7, #12]
 8011612:	e001      	b.n	8011618 <tcp_parseopt+0x8c>
 8011614:	f44f 7206 	mov.w	r2, #536	; 0x218
 8011618:	687b      	ldr	r3, [r7, #4]
 801161a:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 801161c:	e010      	b.n	8011640 <tcp_parseopt+0xb4>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 801161e:	f7ff ff7f 	bl	8011520 <tcp_get_next_optbyte>
 8011622:	4603      	mov	r3, r0
 8011624:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8011626:	7afb      	ldrb	r3, [r7, #11]
 8011628:	2b01      	cmp	r3, #1
 801162a:	d914      	bls.n	8011656 <tcp_parseopt+0xca>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 801162c:	7afb      	ldrb	r3, [r7, #11]
 801162e:	b29a      	uxth	r2, r3
 8011630:	4b0f      	ldr	r3, [pc, #60]	; (8011670 <tcp_parseopt+0xe4>)
 8011632:	881b      	ldrh	r3, [r3, #0]
 8011634:	4413      	add	r3, r2
 8011636:	b29b      	uxth	r3, r3
 8011638:	3b02      	subs	r3, #2
 801163a:	b29a      	uxth	r2, r3
 801163c:	4b0c      	ldr	r3, [pc, #48]	; (8011670 <tcp_parseopt+0xe4>)
 801163e:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8011640:	4b0b      	ldr	r3, [pc, #44]	; (8011670 <tcp_parseopt+0xe4>)
 8011642:	881a      	ldrh	r2, [r3, #0]
 8011644:	4b09      	ldr	r3, [pc, #36]	; (801166c <tcp_parseopt+0xe0>)
 8011646:	881b      	ldrh	r3, [r3, #0]
 8011648:	429a      	cmp	r2, r3
 801164a:	d3b5      	bcc.n	80115b8 <tcp_parseopt+0x2c>
 801164c:	e004      	b.n	8011658 <tcp_parseopt+0xcc>
          return;
 801164e:	bf00      	nop
 8011650:	e002      	b.n	8011658 <tcp_parseopt+0xcc>
            return;
 8011652:	bf00      	nop
 8011654:	e000      	b.n	8011658 <tcp_parseopt+0xcc>
            return;
 8011656:	bf00      	nop
      }
    }
  }
}
 8011658:	3710      	adds	r7, #16
 801165a:	46bd      	mov	sp, r7
 801165c:	bd80      	pop	{r7, pc}
 801165e:	bf00      	nop
 8011660:	0801a22c 	.word	0x0801a22c
 8011664:	0801a690 	.word	0x0801a690
 8011668:	0801a278 	.word	0x0801a278
 801166c:	200047d8 	.word	0x200047d8
 8011670:	200047e0 	.word	0x200047e0

08011674 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8011674:	b480      	push	{r7}
 8011676:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8011678:	4b05      	ldr	r3, [pc, #20]	; (8011690 <tcp_trigger_input_pcb_close+0x1c>)
 801167a:	781b      	ldrb	r3, [r3, #0]
 801167c:	f043 0310 	orr.w	r3, r3, #16
 8011680:	b2da      	uxtb	r2, r3
 8011682:	4b03      	ldr	r3, [pc, #12]	; (8011690 <tcp_trigger_input_pcb_close+0x1c>)
 8011684:	701a      	strb	r2, [r3, #0]
}
 8011686:	bf00      	nop
 8011688:	46bd      	mov	sp, r7
 801168a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801168e:	4770      	bx	lr
 8011690:	200047f1 	.word	0x200047f1

08011694 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8011694:	b580      	push	{r7, lr}
 8011696:	b084      	sub	sp, #16
 8011698:	af00      	add	r7, sp, #0
 801169a:	60f8      	str	r0, [r7, #12]
 801169c:	60b9      	str	r1, [r7, #8]
 801169e:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 80116a0:	68fb      	ldr	r3, [r7, #12]
 80116a2:	2b00      	cmp	r3, #0
 80116a4:	d00a      	beq.n	80116bc <tcp_route+0x28>
 80116a6:	68fb      	ldr	r3, [r7, #12]
 80116a8:	7a1b      	ldrb	r3, [r3, #8]
 80116aa:	2b00      	cmp	r3, #0
 80116ac:	d006      	beq.n	80116bc <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 80116ae:	68fb      	ldr	r3, [r7, #12]
 80116b0:	7a1b      	ldrb	r3, [r3, #8]
 80116b2:	4618      	mov	r0, r3
 80116b4:	f7fb f8ee 	bl	800c894 <netif_get_by_index>
 80116b8:	4603      	mov	r3, r0
 80116ba:	e003      	b.n	80116c4 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 80116bc:	6878      	ldr	r0, [r7, #4]
 80116be:	f003 fe47 	bl	8015350 <ip4_route>
 80116c2:	4603      	mov	r3, r0
  }
}
 80116c4:	4618      	mov	r0, r3
 80116c6:	3710      	adds	r7, #16
 80116c8:	46bd      	mov	sp, r7
 80116ca:	bd80      	pop	{r7, pc}

080116cc <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 80116cc:	b590      	push	{r4, r7, lr}
 80116ce:	b087      	sub	sp, #28
 80116d0:	af00      	add	r7, sp, #0
 80116d2:	60f8      	str	r0, [r7, #12]
 80116d4:	60b9      	str	r1, [r7, #8]
 80116d6:	603b      	str	r3, [r7, #0]
 80116d8:	4613      	mov	r3, r2
 80116da:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 80116dc:	68fb      	ldr	r3, [r7, #12]
 80116de:	2b00      	cmp	r3, #0
 80116e0:	d105      	bne.n	80116ee <tcp_create_segment+0x22>
 80116e2:	4b44      	ldr	r3, [pc, #272]	; (80117f4 <tcp_create_segment+0x128>)
 80116e4:	22a3      	movs	r2, #163	; 0xa3
 80116e6:	4944      	ldr	r1, [pc, #272]	; (80117f8 <tcp_create_segment+0x12c>)
 80116e8:	4844      	ldr	r0, [pc, #272]	; (80117fc <tcp_create_segment+0x130>)
 80116ea:	f005 fbb9 	bl	8016e60 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 80116ee:	68bb      	ldr	r3, [r7, #8]
 80116f0:	2b00      	cmp	r3, #0
 80116f2:	d105      	bne.n	8011700 <tcp_create_segment+0x34>
 80116f4:	4b3f      	ldr	r3, [pc, #252]	; (80117f4 <tcp_create_segment+0x128>)
 80116f6:	22a4      	movs	r2, #164	; 0xa4
 80116f8:	4941      	ldr	r1, [pc, #260]	; (8011800 <tcp_create_segment+0x134>)
 80116fa:	4840      	ldr	r0, [pc, #256]	; (80117fc <tcp_create_segment+0x130>)
 80116fc:	f005 fbb0 	bl	8016e60 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8011700:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8011704:	009b      	lsls	r3, r3, #2
 8011706:	b2db      	uxtb	r3, r3
 8011708:	f003 0304 	and.w	r3, r3, #4
 801170c:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 801170e:	2003      	movs	r0, #3
 8011710:	f7fa fd58 	bl	800c1c4 <memp_malloc>
 8011714:	6138      	str	r0, [r7, #16]
 8011716:	693b      	ldr	r3, [r7, #16]
 8011718:	2b00      	cmp	r3, #0
 801171a:	d104      	bne.n	8011726 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 801171c:	68b8      	ldr	r0, [r7, #8]
 801171e:	f7fb fc75 	bl	800d00c <pbuf_free>
    return NULL;
 8011722:	2300      	movs	r3, #0
 8011724:	e061      	b.n	80117ea <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 8011726:	693b      	ldr	r3, [r7, #16]
 8011728:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 801172c:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 801172e:	693b      	ldr	r3, [r7, #16]
 8011730:	2200      	movs	r2, #0
 8011732:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8011734:	693b      	ldr	r3, [r7, #16]
 8011736:	68ba      	ldr	r2, [r7, #8]
 8011738:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801173a:	68bb      	ldr	r3, [r7, #8]
 801173c:	891a      	ldrh	r2, [r3, #8]
 801173e:	7dfb      	ldrb	r3, [r7, #23]
 8011740:	b29b      	uxth	r3, r3
 8011742:	429a      	cmp	r2, r3
 8011744:	d205      	bcs.n	8011752 <tcp_create_segment+0x86>
 8011746:	4b2b      	ldr	r3, [pc, #172]	; (80117f4 <tcp_create_segment+0x128>)
 8011748:	22b0      	movs	r2, #176	; 0xb0
 801174a:	492e      	ldr	r1, [pc, #184]	; (8011804 <tcp_create_segment+0x138>)
 801174c:	482b      	ldr	r0, [pc, #172]	; (80117fc <tcp_create_segment+0x130>)
 801174e:	f005 fb87 	bl	8016e60 <iprintf>
  seg->len = p->tot_len - optlen;
 8011752:	68bb      	ldr	r3, [r7, #8]
 8011754:	891a      	ldrh	r2, [r3, #8]
 8011756:	7dfb      	ldrb	r3, [r7, #23]
 8011758:	b29b      	uxth	r3, r3
 801175a:	1ad3      	subs	r3, r2, r3
 801175c:	b29a      	uxth	r2, r3
 801175e:	693b      	ldr	r3, [r7, #16]
 8011760:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8011762:	2114      	movs	r1, #20
 8011764:	68b8      	ldr	r0, [r7, #8]
 8011766:	f7fb fb89 	bl	800ce7c <pbuf_add_header>
 801176a:	4603      	mov	r3, r0
 801176c:	2b00      	cmp	r3, #0
 801176e:	d004      	beq.n	801177a <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8011770:	6938      	ldr	r0, [r7, #16]
 8011772:	f7fd f807 	bl	800e784 <tcp_seg_free>
    return NULL;
 8011776:	2300      	movs	r3, #0
 8011778:	e037      	b.n	80117ea <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 801177a:	693b      	ldr	r3, [r7, #16]
 801177c:	685b      	ldr	r3, [r3, #4]
 801177e:	685a      	ldr	r2, [r3, #4]
 8011780:	693b      	ldr	r3, [r7, #16]
 8011782:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8011784:	68fb      	ldr	r3, [r7, #12]
 8011786:	8ada      	ldrh	r2, [r3, #22]
 8011788:	693b      	ldr	r3, [r7, #16]
 801178a:	68dc      	ldr	r4, [r3, #12]
 801178c:	4610      	mov	r0, r2
 801178e:	f7fa f863 	bl	800b858 <lwip_htons>
 8011792:	4603      	mov	r3, r0
 8011794:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8011796:	68fb      	ldr	r3, [r7, #12]
 8011798:	8b1a      	ldrh	r2, [r3, #24]
 801179a:	693b      	ldr	r3, [r7, #16]
 801179c:	68dc      	ldr	r4, [r3, #12]
 801179e:	4610      	mov	r0, r2
 80117a0:	f7fa f85a 	bl	800b858 <lwip_htons>
 80117a4:	4603      	mov	r3, r0
 80117a6:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 80117a8:	693b      	ldr	r3, [r7, #16]
 80117aa:	68dc      	ldr	r4, [r3, #12]
 80117ac:	6838      	ldr	r0, [r7, #0]
 80117ae:	f7fa f868 	bl	800b882 <lwip_htonl>
 80117b2:	4603      	mov	r3, r0
 80117b4:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 80117b6:	7dfb      	ldrb	r3, [r7, #23]
 80117b8:	089b      	lsrs	r3, r3, #2
 80117ba:	b2db      	uxtb	r3, r3
 80117bc:	b29b      	uxth	r3, r3
 80117be:	3305      	adds	r3, #5
 80117c0:	b29b      	uxth	r3, r3
 80117c2:	031b      	lsls	r3, r3, #12
 80117c4:	b29a      	uxth	r2, r3
 80117c6:	79fb      	ldrb	r3, [r7, #7]
 80117c8:	b29b      	uxth	r3, r3
 80117ca:	4313      	orrs	r3, r2
 80117cc:	b29a      	uxth	r2, r3
 80117ce:	693b      	ldr	r3, [r7, #16]
 80117d0:	68dc      	ldr	r4, [r3, #12]
 80117d2:	4610      	mov	r0, r2
 80117d4:	f7fa f840 	bl	800b858 <lwip_htons>
 80117d8:	4603      	mov	r3, r0
 80117da:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 80117dc:	693b      	ldr	r3, [r7, #16]
 80117de:	68db      	ldr	r3, [r3, #12]
 80117e0:	2200      	movs	r2, #0
 80117e2:	749a      	strb	r2, [r3, #18]
 80117e4:	2200      	movs	r2, #0
 80117e6:	74da      	strb	r2, [r3, #19]
  return seg;
 80117e8:	693b      	ldr	r3, [r7, #16]
}
 80117ea:	4618      	mov	r0, r3
 80117ec:	371c      	adds	r7, #28
 80117ee:	46bd      	mov	sp, r7
 80117f0:	bd90      	pop	{r4, r7, pc}
 80117f2:	bf00      	nop
 80117f4:	0801a6ac 	.word	0x0801a6ac
 80117f8:	0801a6e0 	.word	0x0801a6e0
 80117fc:	0801a700 	.word	0x0801a700
 8011800:	0801a728 	.word	0x0801a728
 8011804:	0801a74c 	.word	0x0801a74c

08011808 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8011808:	b580      	push	{r7, lr}
 801180a:	b086      	sub	sp, #24
 801180c:	af00      	add	r7, sp, #0
 801180e:	607b      	str	r3, [r7, #4]
 8011810:	4603      	mov	r3, r0
 8011812:	73fb      	strb	r3, [r7, #15]
 8011814:	460b      	mov	r3, r1
 8011816:	81bb      	strh	r3, [r7, #12]
 8011818:	4613      	mov	r3, r2
 801181a:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 801181c:	89bb      	ldrh	r3, [r7, #12]
 801181e:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8011820:	687b      	ldr	r3, [r7, #4]
 8011822:	2b00      	cmp	r3, #0
 8011824:	d105      	bne.n	8011832 <tcp_pbuf_prealloc+0x2a>
 8011826:	4b30      	ldr	r3, [pc, #192]	; (80118e8 <tcp_pbuf_prealloc+0xe0>)
 8011828:	22e8      	movs	r2, #232	; 0xe8
 801182a:	4930      	ldr	r1, [pc, #192]	; (80118ec <tcp_pbuf_prealloc+0xe4>)
 801182c:	4830      	ldr	r0, [pc, #192]	; (80118f0 <tcp_pbuf_prealloc+0xe8>)
 801182e:	f005 fb17 	bl	8016e60 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 8011832:	6a3b      	ldr	r3, [r7, #32]
 8011834:	2b00      	cmp	r3, #0
 8011836:	d105      	bne.n	8011844 <tcp_pbuf_prealloc+0x3c>
 8011838:	4b2b      	ldr	r3, [pc, #172]	; (80118e8 <tcp_pbuf_prealloc+0xe0>)
 801183a:	22e9      	movs	r2, #233	; 0xe9
 801183c:	492d      	ldr	r1, [pc, #180]	; (80118f4 <tcp_pbuf_prealloc+0xec>)
 801183e:	482c      	ldr	r0, [pc, #176]	; (80118f0 <tcp_pbuf_prealloc+0xe8>)
 8011840:	f005 fb0e 	bl	8016e60 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8011844:	89ba      	ldrh	r2, [r7, #12]
 8011846:	897b      	ldrh	r3, [r7, #10]
 8011848:	429a      	cmp	r2, r3
 801184a:	d221      	bcs.n	8011890 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 801184c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8011850:	f003 0302 	and.w	r3, r3, #2
 8011854:	2b00      	cmp	r3, #0
 8011856:	d111      	bne.n	801187c <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8011858:	6a3b      	ldr	r3, [r7, #32]
 801185a:	8b5b      	ldrh	r3, [r3, #26]
 801185c:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8011860:	2b00      	cmp	r3, #0
 8011862:	d115      	bne.n	8011890 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 8011864:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8011868:	2b00      	cmp	r3, #0
 801186a:	d007      	beq.n	801187c <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 801186c:	6a3b      	ldr	r3, [r7, #32]
 801186e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 8011870:	2b00      	cmp	r3, #0
 8011872:	d103      	bne.n	801187c <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 8011874:	6a3b      	ldr	r3, [r7, #32]
 8011876:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 8011878:	2b00      	cmp	r3, #0
 801187a:	d009      	beq.n	8011890 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 801187c:	89bb      	ldrh	r3, [r7, #12]
 801187e:	f203 231b 	addw	r3, r3, #539	; 0x21b
 8011882:	f023 0203 	bic.w	r2, r3, #3
 8011886:	897b      	ldrh	r3, [r7, #10]
 8011888:	4293      	cmp	r3, r2
 801188a:	bf28      	it	cs
 801188c:	4613      	movcs	r3, r2
 801188e:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8011890:	8af9      	ldrh	r1, [r7, #22]
 8011892:	7bfb      	ldrb	r3, [r7, #15]
 8011894:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011898:	4618      	mov	r0, r3
 801189a:	f7fb f8a5 	bl	800c9e8 <pbuf_alloc>
 801189e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80118a0:	693b      	ldr	r3, [r7, #16]
 80118a2:	2b00      	cmp	r3, #0
 80118a4:	d101      	bne.n	80118aa <tcp_pbuf_prealloc+0xa2>
    return NULL;
 80118a6:	2300      	movs	r3, #0
 80118a8:	e019      	b.n	80118de <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 80118aa:	693b      	ldr	r3, [r7, #16]
 80118ac:	681b      	ldr	r3, [r3, #0]
 80118ae:	2b00      	cmp	r3, #0
 80118b0:	d006      	beq.n	80118c0 <tcp_pbuf_prealloc+0xb8>
 80118b2:	4b0d      	ldr	r3, [pc, #52]	; (80118e8 <tcp_pbuf_prealloc+0xe0>)
 80118b4:	f240 120b 	movw	r2, #267	; 0x10b
 80118b8:	490f      	ldr	r1, [pc, #60]	; (80118f8 <tcp_pbuf_prealloc+0xf0>)
 80118ba:	480d      	ldr	r0, [pc, #52]	; (80118f0 <tcp_pbuf_prealloc+0xe8>)
 80118bc:	f005 fad0 	bl	8016e60 <iprintf>
  *oversize = p->len - length;
 80118c0:	693b      	ldr	r3, [r7, #16]
 80118c2:	895a      	ldrh	r2, [r3, #10]
 80118c4:	89bb      	ldrh	r3, [r7, #12]
 80118c6:	1ad3      	subs	r3, r2, r3
 80118c8:	b29a      	uxth	r2, r3
 80118ca:	687b      	ldr	r3, [r7, #4]
 80118cc:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 80118ce:	693b      	ldr	r3, [r7, #16]
 80118d0:	89ba      	ldrh	r2, [r7, #12]
 80118d2:	811a      	strh	r2, [r3, #8]
 80118d4:	693b      	ldr	r3, [r7, #16]
 80118d6:	891a      	ldrh	r2, [r3, #8]
 80118d8:	693b      	ldr	r3, [r7, #16]
 80118da:	815a      	strh	r2, [r3, #10]
  return p;
 80118dc:	693b      	ldr	r3, [r7, #16]
}
 80118de:	4618      	mov	r0, r3
 80118e0:	3718      	adds	r7, #24
 80118e2:	46bd      	mov	sp, r7
 80118e4:	bd80      	pop	{r7, pc}
 80118e6:	bf00      	nop
 80118e8:	0801a6ac 	.word	0x0801a6ac
 80118ec:	0801a764 	.word	0x0801a764
 80118f0:	0801a700 	.word	0x0801a700
 80118f4:	0801a788 	.word	0x0801a788
 80118f8:	0801a7a8 	.word	0x0801a7a8

080118fc <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 80118fc:	b580      	push	{r7, lr}
 80118fe:	b082      	sub	sp, #8
 8011900:	af00      	add	r7, sp, #0
 8011902:	6078      	str	r0, [r7, #4]
 8011904:	460b      	mov	r3, r1
 8011906:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 8011908:	687b      	ldr	r3, [r7, #4]
 801190a:	2b00      	cmp	r3, #0
 801190c:	d106      	bne.n	801191c <tcp_write_checks+0x20>
 801190e:	4b33      	ldr	r3, [pc, #204]	; (80119dc <tcp_write_checks+0xe0>)
 8011910:	f240 1233 	movw	r2, #307	; 0x133
 8011914:	4932      	ldr	r1, [pc, #200]	; (80119e0 <tcp_write_checks+0xe4>)
 8011916:	4833      	ldr	r0, [pc, #204]	; (80119e4 <tcp_write_checks+0xe8>)
 8011918:	f005 faa2 	bl	8016e60 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 801191c:	687b      	ldr	r3, [r7, #4]
 801191e:	7d1b      	ldrb	r3, [r3, #20]
 8011920:	2b04      	cmp	r3, #4
 8011922:	d00e      	beq.n	8011942 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 8011924:	687b      	ldr	r3, [r7, #4]
 8011926:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8011928:	2b07      	cmp	r3, #7
 801192a:	d00a      	beq.n	8011942 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 801192c:	687b      	ldr	r3, [r7, #4]
 801192e:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8011930:	2b02      	cmp	r3, #2
 8011932:	d006      	beq.n	8011942 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 8011934:	687b      	ldr	r3, [r7, #4]
 8011936:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8011938:	2b03      	cmp	r3, #3
 801193a:	d002      	beq.n	8011942 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 801193c:	f06f 030a 	mvn.w	r3, #10
 8011940:	e048      	b.n	80119d4 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 8011942:	887b      	ldrh	r3, [r7, #2]
 8011944:	2b00      	cmp	r3, #0
 8011946:	d101      	bne.n	801194c <tcp_write_checks+0x50>
    return ERR_OK;
 8011948:	2300      	movs	r3, #0
 801194a:	e043      	b.n	80119d4 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 801194c:	687b      	ldr	r3, [r7, #4]
 801194e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8011952:	887a      	ldrh	r2, [r7, #2]
 8011954:	429a      	cmp	r2, r3
 8011956:	d909      	bls.n	801196c <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011958:	687b      	ldr	r3, [r7, #4]
 801195a:	8b5b      	ldrh	r3, [r3, #26]
 801195c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011960:	b29a      	uxth	r2, r3
 8011962:	687b      	ldr	r3, [r7, #4]
 8011964:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8011966:	f04f 33ff 	mov.w	r3, #4294967295
 801196a:	e033      	b.n	80119d4 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 801196c:	687b      	ldr	r3, [r7, #4]
 801196e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011972:	2b08      	cmp	r3, #8
 8011974:	d909      	bls.n	801198a <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011976:	687b      	ldr	r3, [r7, #4]
 8011978:	8b5b      	ldrh	r3, [r3, #26]
 801197a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801197e:	b29a      	uxth	r2, r3
 8011980:	687b      	ldr	r3, [r7, #4]
 8011982:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8011984:	f04f 33ff 	mov.w	r3, #4294967295
 8011988:	e024      	b.n	80119d4 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 801198a:	687b      	ldr	r3, [r7, #4]
 801198c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011990:	2b00      	cmp	r3, #0
 8011992:	d00f      	beq.n	80119b4 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8011994:	687b      	ldr	r3, [r7, #4]
 8011996:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011998:	2b00      	cmp	r3, #0
 801199a:	d11a      	bne.n	80119d2 <tcp_write_checks+0xd6>
 801199c:	687b      	ldr	r3, [r7, #4]
 801199e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80119a0:	2b00      	cmp	r3, #0
 80119a2:	d116      	bne.n	80119d2 <tcp_write_checks+0xd6>
 80119a4:	4b0d      	ldr	r3, [pc, #52]	; (80119dc <tcp_write_checks+0xe0>)
 80119a6:	f44f 72ab 	mov.w	r2, #342	; 0x156
 80119aa:	490f      	ldr	r1, [pc, #60]	; (80119e8 <tcp_write_checks+0xec>)
 80119ac:	480d      	ldr	r0, [pc, #52]	; (80119e4 <tcp_write_checks+0xe8>)
 80119ae:	f005 fa57 	bl	8016e60 <iprintf>
 80119b2:	e00e      	b.n	80119d2 <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 80119b4:	687b      	ldr	r3, [r7, #4]
 80119b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80119b8:	2b00      	cmp	r3, #0
 80119ba:	d103      	bne.n	80119c4 <tcp_write_checks+0xc8>
 80119bc:	687b      	ldr	r3, [r7, #4]
 80119be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80119c0:	2b00      	cmp	r3, #0
 80119c2:	d006      	beq.n	80119d2 <tcp_write_checks+0xd6>
 80119c4:	4b05      	ldr	r3, [pc, #20]	; (80119dc <tcp_write_checks+0xe0>)
 80119c6:	f240 1259 	movw	r2, #345	; 0x159
 80119ca:	4908      	ldr	r1, [pc, #32]	; (80119ec <tcp_write_checks+0xf0>)
 80119cc:	4805      	ldr	r0, [pc, #20]	; (80119e4 <tcp_write_checks+0xe8>)
 80119ce:	f005 fa47 	bl	8016e60 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 80119d2:	2300      	movs	r3, #0
}
 80119d4:	4618      	mov	r0, r3
 80119d6:	3708      	adds	r7, #8
 80119d8:	46bd      	mov	sp, r7
 80119da:	bd80      	pop	{r7, pc}
 80119dc:	0801a6ac 	.word	0x0801a6ac
 80119e0:	0801a7bc 	.word	0x0801a7bc
 80119e4:	0801a700 	.word	0x0801a700
 80119e8:	0801a7dc 	.word	0x0801a7dc
 80119ec:	0801a818 	.word	0x0801a818

080119f0 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 80119f0:	b590      	push	{r4, r7, lr}
 80119f2:	b09b      	sub	sp, #108	; 0x6c
 80119f4:	af04      	add	r7, sp, #16
 80119f6:	60f8      	str	r0, [r7, #12]
 80119f8:	60b9      	str	r1, [r7, #8]
 80119fa:	4611      	mov	r1, r2
 80119fc:	461a      	mov	r2, r3
 80119fe:	460b      	mov	r3, r1
 8011a00:	80fb      	strh	r3, [r7, #6]
 8011a02:	4613      	mov	r3, r2
 8011a04:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 8011a06:	2300      	movs	r3, #0
 8011a08:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8011a0a:	2300      	movs	r3, #0
 8011a0c:	653b      	str	r3, [r7, #80]	; 0x50
 8011a0e:	2300      	movs	r3, #0
 8011a10:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011a12:	2300      	movs	r3, #0
 8011a14:	64bb      	str	r3, [r7, #72]	; 0x48
 8011a16:	2300      	movs	r3, #0
 8011a18:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 8011a1a:	2300      	movs	r3, #0
 8011a1c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 8011a20:	2300      	movs	r3, #0
 8011a22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 8011a26:	2300      	movs	r3, #0
 8011a28:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 8011a2a:	2300      	movs	r3, #0
 8011a2c:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 8011a2e:	2300      	movs	r3, #0
 8011a30:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 8011a32:	68fb      	ldr	r3, [r7, #12]
 8011a34:	2b00      	cmp	r3, #0
 8011a36:	d109      	bne.n	8011a4c <tcp_write+0x5c>
 8011a38:	4ba5      	ldr	r3, [pc, #660]	; (8011cd0 <tcp_write+0x2e0>)
 8011a3a:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 8011a3e:	49a5      	ldr	r1, [pc, #660]	; (8011cd4 <tcp_write+0x2e4>)
 8011a40:	48a5      	ldr	r0, [pc, #660]	; (8011cd8 <tcp_write+0x2e8>)
 8011a42:	f005 fa0d 	bl	8016e60 <iprintf>
 8011a46:	f06f 030f 	mvn.w	r3, #15
 8011a4a:	e32c      	b.n	80120a6 <tcp_write+0x6b6>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 8011a4c:	68fb      	ldr	r3, [r7, #12]
 8011a4e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8011a52:	085b      	lsrs	r3, r3, #1
 8011a54:	b29a      	uxth	r2, r3
 8011a56:	68fb      	ldr	r3, [r7, #12]
 8011a58:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011a5a:	4293      	cmp	r3, r2
 8011a5c:	bf28      	it	cs
 8011a5e:	4613      	movcs	r3, r2
 8011a60:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 8011a62:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011a64:	2b00      	cmp	r3, #0
 8011a66:	d102      	bne.n	8011a6e <tcp_write+0x7e>
 8011a68:	68fb      	ldr	r3, [r7, #12]
 8011a6a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011a6c:	e000      	b.n	8011a70 <tcp_write+0x80>
 8011a6e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011a70:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8011a72:	68bb      	ldr	r3, [r7, #8]
 8011a74:	2b00      	cmp	r3, #0
 8011a76:	d109      	bne.n	8011a8c <tcp_write+0x9c>
 8011a78:	4b95      	ldr	r3, [pc, #596]	; (8011cd0 <tcp_write+0x2e0>)
 8011a7a:	f44f 72d7 	mov.w	r2, #430	; 0x1ae
 8011a7e:	4997      	ldr	r1, [pc, #604]	; (8011cdc <tcp_write+0x2ec>)
 8011a80:	4895      	ldr	r0, [pc, #596]	; (8011cd8 <tcp_write+0x2e8>)
 8011a82:	f005 f9ed 	bl	8016e60 <iprintf>
 8011a86:	f06f 030f 	mvn.w	r3, #15
 8011a8a:	e30c      	b.n	80120a6 <tcp_write+0x6b6>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8011a8c:	88fb      	ldrh	r3, [r7, #6]
 8011a8e:	4619      	mov	r1, r3
 8011a90:	68f8      	ldr	r0, [r7, #12]
 8011a92:	f7ff ff33 	bl	80118fc <tcp_write_checks>
 8011a96:	4603      	mov	r3, r0
 8011a98:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 8011a9c:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8011aa0:	2b00      	cmp	r3, #0
 8011aa2:	d002      	beq.n	8011aaa <tcp_write+0xba>
    return err;
 8011aa4:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8011aa8:	e2fd      	b.n	80120a6 <tcp_write+0x6b6>
  }
  queuelen = pcb->snd_queuelen;
 8011aaa:	68fb      	ldr	r3, [r7, #12]
 8011aac:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011ab0:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8011ab4:	2300      	movs	r3, #0
 8011ab6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 8011aba:	68fb      	ldr	r3, [r7, #12]
 8011abc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011abe:	2b00      	cmp	r3, #0
 8011ac0:	f000 80f7 	beq.w	8011cb2 <tcp_write+0x2c2>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8011ac4:	68fb      	ldr	r3, [r7, #12]
 8011ac6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011ac8:	653b      	str	r3, [r7, #80]	; 0x50
 8011aca:	e002      	b.n	8011ad2 <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 8011acc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011ace:	681b      	ldr	r3, [r3, #0]
 8011ad0:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8011ad2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011ad4:	681b      	ldr	r3, [r3, #0]
 8011ad6:	2b00      	cmp	r3, #0
 8011ad8:	d1f8      	bne.n	8011acc <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 8011ada:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011adc:	7a9b      	ldrb	r3, [r3, #10]
 8011ade:	009b      	lsls	r3, r3, #2
 8011ae0:	b29b      	uxth	r3, r3
 8011ae2:	f003 0304 	and.w	r3, r3, #4
 8011ae6:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8011ae8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8011aea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011aec:	891b      	ldrh	r3, [r3, #8]
 8011aee:	4619      	mov	r1, r3
 8011af0:	8c3b      	ldrh	r3, [r7, #32]
 8011af2:	440b      	add	r3, r1
 8011af4:	429a      	cmp	r2, r3
 8011af6:	da06      	bge.n	8011b06 <tcp_write+0x116>
 8011af8:	4b75      	ldr	r3, [pc, #468]	; (8011cd0 <tcp_write+0x2e0>)
 8011afa:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8011afe:	4978      	ldr	r1, [pc, #480]	; (8011ce0 <tcp_write+0x2f0>)
 8011b00:	4875      	ldr	r0, [pc, #468]	; (8011cd8 <tcp_write+0x2e8>)
 8011b02:	f005 f9ad 	bl	8016e60 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8011b06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011b08:	891a      	ldrh	r2, [r3, #8]
 8011b0a:	8c3b      	ldrh	r3, [r7, #32]
 8011b0c:	4413      	add	r3, r2
 8011b0e:	b29b      	uxth	r3, r3
 8011b10:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8011b12:	1ad3      	subs	r3, r2, r3
 8011b14:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 8011b16:	68fb      	ldr	r3, [r7, #12]
 8011b18:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8011b1c:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 8011b1e:	8a7b      	ldrh	r3, [r7, #18]
 8011b20:	2b00      	cmp	r3, #0
 8011b22:	d027      	beq.n	8011b74 <tcp_write+0x184>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8011b24:	8a7b      	ldrh	r3, [r7, #18]
 8011b26:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8011b28:	429a      	cmp	r2, r3
 8011b2a:	d206      	bcs.n	8011b3a <tcp_write+0x14a>
 8011b2c:	4b68      	ldr	r3, [pc, #416]	; (8011cd0 <tcp_write+0x2e0>)
 8011b2e:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 8011b32:	496c      	ldr	r1, [pc, #432]	; (8011ce4 <tcp_write+0x2f4>)
 8011b34:	4868      	ldr	r0, [pc, #416]	; (8011cd8 <tcp_write+0x2e8>)
 8011b36:	f005 f993 	bl	8016e60 <iprintf>
      seg = last_unsent;
 8011b3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011b3c:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8011b3e:	8a7b      	ldrh	r3, [r7, #18]
 8011b40:	88fa      	ldrh	r2, [r7, #6]
 8011b42:	429a      	cmp	r2, r3
 8011b44:	d901      	bls.n	8011b4a <tcp_write+0x15a>
 8011b46:	8a7b      	ldrh	r3, [r7, #18]
 8011b48:	e000      	b.n	8011b4c <tcp_write+0x15c>
 8011b4a:	88fb      	ldrh	r3, [r7, #6]
 8011b4c:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8011b4e:	4293      	cmp	r3, r2
 8011b50:	bfa8      	it	ge
 8011b52:	4613      	movge	r3, r2
 8011b54:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 8011b56:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011b5a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011b5c:	4413      	add	r3, r2
 8011b5e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 8011b62:	8a7a      	ldrh	r2, [r7, #18]
 8011b64:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011b66:	1ad3      	subs	r3, r2, r3
 8011b68:	b29b      	uxth	r3, r3
 8011b6a:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 8011b6c:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8011b6e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011b70:	1ad3      	subs	r3, r2, r3
 8011b72:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 8011b74:	8a7b      	ldrh	r3, [r7, #18]
 8011b76:	2b00      	cmp	r3, #0
 8011b78:	d00b      	beq.n	8011b92 <tcp_write+0x1a2>
 8011b7a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011b7e:	88fb      	ldrh	r3, [r7, #6]
 8011b80:	429a      	cmp	r2, r3
 8011b82:	d006      	beq.n	8011b92 <tcp_write+0x1a2>
 8011b84:	4b52      	ldr	r3, [pc, #328]	; (8011cd0 <tcp_write+0x2e0>)
 8011b86:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011b8a:	4957      	ldr	r1, [pc, #348]	; (8011ce8 <tcp_write+0x2f8>)
 8011b8c:	4852      	ldr	r0, [pc, #328]	; (8011cd8 <tcp_write+0x2e8>)
 8011b8e:	f005 f967 	bl	8016e60 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8011b92:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011b96:	88fb      	ldrh	r3, [r7, #6]
 8011b98:	429a      	cmp	r2, r3
 8011b9a:	f080 8168 	bcs.w	8011e6e <tcp_write+0x47e>
 8011b9e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8011ba0:	2b00      	cmp	r3, #0
 8011ba2:	f000 8164 	beq.w	8011e6e <tcp_write+0x47e>
 8011ba6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011ba8:	891b      	ldrh	r3, [r3, #8]
 8011baa:	2b00      	cmp	r3, #0
 8011bac:	f000 815f 	beq.w	8011e6e <tcp_write+0x47e>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8011bb0:	88fa      	ldrh	r2, [r7, #6]
 8011bb2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011bb6:	1ad2      	subs	r2, r2, r3
 8011bb8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8011bba:	4293      	cmp	r3, r2
 8011bbc:	bfa8      	it	ge
 8011bbe:	4613      	movge	r3, r2
 8011bc0:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8011bc2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011bc4:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8011bc6:	797b      	ldrb	r3, [r7, #5]
 8011bc8:	f003 0301 	and.w	r3, r3, #1
 8011bcc:	2b00      	cmp	r3, #0
 8011bce:	d027      	beq.n	8011c20 <tcp_write+0x230>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8011bd0:	f107 0012 	add.w	r0, r7, #18
 8011bd4:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8011bd6:	8bf9      	ldrh	r1, [r7, #30]
 8011bd8:	2301      	movs	r3, #1
 8011bda:	9302      	str	r3, [sp, #8]
 8011bdc:	797b      	ldrb	r3, [r7, #5]
 8011bde:	9301      	str	r3, [sp, #4]
 8011be0:	68fb      	ldr	r3, [r7, #12]
 8011be2:	9300      	str	r3, [sp, #0]
 8011be4:	4603      	mov	r3, r0
 8011be6:	2000      	movs	r0, #0
 8011be8:	f7ff fe0e 	bl	8011808 <tcp_pbuf_prealloc>
 8011bec:	6578      	str	r0, [r7, #84]	; 0x54
 8011bee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011bf0:	2b00      	cmp	r3, #0
 8011bf2:	f000 8226 	beq.w	8012042 <tcp_write+0x652>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8011bf6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011bf8:	6858      	ldr	r0, [r3, #4]
 8011bfa:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011bfe:	68ba      	ldr	r2, [r7, #8]
 8011c00:	4413      	add	r3, r2
 8011c02:	8bfa      	ldrh	r2, [r7, #30]
 8011c04:	4619      	mov	r1, r3
 8011c06:	f005 f8fe 	bl	8016e06 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8011c0a:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8011c0c:	f7fb fa8c 	bl	800d128 <pbuf_clen>
 8011c10:	4603      	mov	r3, r0
 8011c12:	461a      	mov	r2, r3
 8011c14:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8011c18:	4413      	add	r3, r2
 8011c1a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8011c1e:	e041      	b.n	8011ca4 <tcp_write+0x2b4>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8011c20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011c22:	685b      	ldr	r3, [r3, #4]
 8011c24:	637b      	str	r3, [r7, #52]	; 0x34
 8011c26:	e002      	b.n	8011c2e <tcp_write+0x23e>
 8011c28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011c2a:	681b      	ldr	r3, [r3, #0]
 8011c2c:	637b      	str	r3, [r7, #52]	; 0x34
 8011c2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011c30:	681b      	ldr	r3, [r3, #0]
 8011c32:	2b00      	cmp	r3, #0
 8011c34:	d1f8      	bne.n	8011c28 <tcp_write+0x238>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8011c36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011c38:	7b1b      	ldrb	r3, [r3, #12]
 8011c3a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8011c3e:	2b00      	cmp	r3, #0
 8011c40:	d115      	bne.n	8011c6e <tcp_write+0x27e>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8011c42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011c44:	685b      	ldr	r3, [r3, #4]
 8011c46:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011c48:	8952      	ldrh	r2, [r2, #10]
 8011c4a:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8011c4c:	68ba      	ldr	r2, [r7, #8]
 8011c4e:	429a      	cmp	r2, r3
 8011c50:	d10d      	bne.n	8011c6e <tcp_write+0x27e>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8011c52:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011c56:	2b00      	cmp	r3, #0
 8011c58:	d006      	beq.n	8011c68 <tcp_write+0x278>
 8011c5a:	4b1d      	ldr	r3, [pc, #116]	; (8011cd0 <tcp_write+0x2e0>)
 8011c5c:	f240 2231 	movw	r2, #561	; 0x231
 8011c60:	4922      	ldr	r1, [pc, #136]	; (8011cec <tcp_write+0x2fc>)
 8011c62:	481d      	ldr	r0, [pc, #116]	; (8011cd8 <tcp_write+0x2e8>)
 8011c64:	f005 f8fc 	bl	8016e60 <iprintf>
          extendlen = seglen;
 8011c68:	8bfb      	ldrh	r3, [r7, #30]
 8011c6a:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8011c6c:	e01a      	b.n	8011ca4 <tcp_write+0x2b4>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8011c6e:	8bfb      	ldrh	r3, [r7, #30]
 8011c70:	2201      	movs	r2, #1
 8011c72:	4619      	mov	r1, r3
 8011c74:	2000      	movs	r0, #0
 8011c76:	f7fa feb7 	bl	800c9e8 <pbuf_alloc>
 8011c7a:	6578      	str	r0, [r7, #84]	; 0x54
 8011c7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011c7e:	2b00      	cmp	r3, #0
 8011c80:	f000 81e1 	beq.w	8012046 <tcp_write+0x656>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 8011c84:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011c88:	68ba      	ldr	r2, [r7, #8]
 8011c8a:	441a      	add	r2, r3
 8011c8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011c8e:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 8011c90:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8011c92:	f7fb fa49 	bl	800d128 <pbuf_clen>
 8011c96:	4603      	mov	r3, r0
 8011c98:	461a      	mov	r2, r3
 8011c9a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8011c9e:	4413      	add	r3, r2
 8011ca0:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 8011ca4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011ca8:	8bfb      	ldrh	r3, [r7, #30]
 8011caa:	4413      	add	r3, r2
 8011cac:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8011cb0:	e0dd      	b.n	8011e6e <tcp_write+0x47e>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8011cb2:	68fb      	ldr	r3, [r7, #12]
 8011cb4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8011cb8:	2b00      	cmp	r3, #0
 8011cba:	f000 80d8 	beq.w	8011e6e <tcp_write+0x47e>
 8011cbe:	4b04      	ldr	r3, [pc, #16]	; (8011cd0 <tcp_write+0x2e0>)
 8011cc0:	f240 224b 	movw	r2, #587	; 0x24b
 8011cc4:	490a      	ldr	r1, [pc, #40]	; (8011cf0 <tcp_write+0x300>)
 8011cc6:	4804      	ldr	r0, [pc, #16]	; (8011cd8 <tcp_write+0x2e8>)
 8011cc8:	f005 f8ca 	bl	8016e60 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 8011ccc:	e0cf      	b.n	8011e6e <tcp_write+0x47e>
 8011cce:	bf00      	nop
 8011cd0:	0801a6ac 	.word	0x0801a6ac
 8011cd4:	0801a84c 	.word	0x0801a84c
 8011cd8:	0801a700 	.word	0x0801a700
 8011cdc:	0801a864 	.word	0x0801a864
 8011ce0:	0801a898 	.word	0x0801a898
 8011ce4:	0801a8b0 	.word	0x0801a8b0
 8011ce8:	0801a8d0 	.word	0x0801a8d0
 8011cec:	0801a8f0 	.word	0x0801a8f0
 8011cf0:	0801a91c 	.word	0x0801a91c
    struct pbuf *p;
    u16_t left = len - pos;
 8011cf4:	88fa      	ldrh	r2, [r7, #6]
 8011cf6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011cfa:	1ad3      	subs	r3, r2, r3
 8011cfc:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 8011cfe:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8011d02:	b29b      	uxth	r3, r3
 8011d04:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8011d06:	1ad3      	subs	r3, r2, r3
 8011d08:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 8011d0a:	8b7a      	ldrh	r2, [r7, #26]
 8011d0c:	8bbb      	ldrh	r3, [r7, #28]
 8011d0e:	4293      	cmp	r3, r2
 8011d10:	bf28      	it	cs
 8011d12:	4613      	movcs	r3, r2
 8011d14:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8011d16:	797b      	ldrb	r3, [r7, #5]
 8011d18:	f003 0301 	and.w	r3, r3, #1
 8011d1c:	2b00      	cmp	r3, #0
 8011d1e:	d036      	beq.n	8011d8e <tcp_write+0x39e>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8011d20:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8011d24:	b29a      	uxth	r2, r3
 8011d26:	8b3b      	ldrh	r3, [r7, #24]
 8011d28:	4413      	add	r3, r2
 8011d2a:	b299      	uxth	r1, r3
 8011d2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011d2e:	2b00      	cmp	r3, #0
 8011d30:	bf0c      	ite	eq
 8011d32:	2301      	moveq	r3, #1
 8011d34:	2300      	movne	r3, #0
 8011d36:	b2db      	uxtb	r3, r3
 8011d38:	f107 0012 	add.w	r0, r7, #18
 8011d3c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8011d3e:	9302      	str	r3, [sp, #8]
 8011d40:	797b      	ldrb	r3, [r7, #5]
 8011d42:	9301      	str	r3, [sp, #4]
 8011d44:	68fb      	ldr	r3, [r7, #12]
 8011d46:	9300      	str	r3, [sp, #0]
 8011d48:	4603      	mov	r3, r0
 8011d4a:	2036      	movs	r0, #54	; 0x36
 8011d4c:	f7ff fd5c 	bl	8011808 <tcp_pbuf_prealloc>
 8011d50:	6338      	str	r0, [r7, #48]	; 0x30
 8011d52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d54:	2b00      	cmp	r3, #0
 8011d56:	f000 8178 	beq.w	801204a <tcp_write+0x65a>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 8011d5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d5c:	895b      	ldrh	r3, [r3, #10]
 8011d5e:	8b3a      	ldrh	r2, [r7, #24]
 8011d60:	429a      	cmp	r2, r3
 8011d62:	d906      	bls.n	8011d72 <tcp_write+0x382>
 8011d64:	4b8c      	ldr	r3, [pc, #560]	; (8011f98 <tcp_write+0x5a8>)
 8011d66:	f240 2267 	movw	r2, #615	; 0x267
 8011d6a:	498c      	ldr	r1, [pc, #560]	; (8011f9c <tcp_write+0x5ac>)
 8011d6c:	488c      	ldr	r0, [pc, #560]	; (8011fa0 <tcp_write+0x5b0>)
 8011d6e:	f005 f877 	bl	8016e60 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 8011d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d74:	685a      	ldr	r2, [r3, #4]
 8011d76:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8011d7a:	18d0      	adds	r0, r2, r3
 8011d7c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011d80:	68ba      	ldr	r2, [r7, #8]
 8011d82:	4413      	add	r3, r2
 8011d84:	8b3a      	ldrh	r2, [r7, #24]
 8011d86:	4619      	mov	r1, r3
 8011d88:	f005 f83d 	bl	8016e06 <memcpy>
 8011d8c:	e02f      	b.n	8011dee <tcp_write+0x3fe>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8011d8e:	8a7b      	ldrh	r3, [r7, #18]
 8011d90:	2b00      	cmp	r3, #0
 8011d92:	d006      	beq.n	8011da2 <tcp_write+0x3b2>
 8011d94:	4b80      	ldr	r3, [pc, #512]	; (8011f98 <tcp_write+0x5a8>)
 8011d96:	f240 2271 	movw	r2, #625	; 0x271
 8011d9a:	4982      	ldr	r1, [pc, #520]	; (8011fa4 <tcp_write+0x5b4>)
 8011d9c:	4880      	ldr	r0, [pc, #512]	; (8011fa0 <tcp_write+0x5b0>)
 8011d9e:	f005 f85f 	bl	8016e60 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8011da2:	8b3b      	ldrh	r3, [r7, #24]
 8011da4:	2201      	movs	r2, #1
 8011da6:	4619      	mov	r1, r3
 8011da8:	2036      	movs	r0, #54	; 0x36
 8011daa:	f7fa fe1d 	bl	800c9e8 <pbuf_alloc>
 8011dae:	6178      	str	r0, [r7, #20]
 8011db0:	697b      	ldr	r3, [r7, #20]
 8011db2:	2b00      	cmp	r3, #0
 8011db4:	f000 814b 	beq.w	801204e <tcp_write+0x65e>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 8011db8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011dbc:	68ba      	ldr	r2, [r7, #8]
 8011dbe:	441a      	add	r2, r3
 8011dc0:	697b      	ldr	r3, [r7, #20]
 8011dc2:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8011dc4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8011dc8:	b29b      	uxth	r3, r3
 8011dca:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011dce:	4619      	mov	r1, r3
 8011dd0:	2036      	movs	r0, #54	; 0x36
 8011dd2:	f7fa fe09 	bl	800c9e8 <pbuf_alloc>
 8011dd6:	6338      	str	r0, [r7, #48]	; 0x30
 8011dd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011dda:	2b00      	cmp	r3, #0
 8011ddc:	d103      	bne.n	8011de6 <tcp_write+0x3f6>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 8011dde:	6978      	ldr	r0, [r7, #20]
 8011de0:	f7fb f914 	bl	800d00c <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8011de4:	e136      	b.n	8012054 <tcp_write+0x664>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 8011de6:	6979      	ldr	r1, [r7, #20]
 8011de8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011dea:	f7fb f9dd 	bl	800d1a8 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 8011dee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011df0:	f7fb f99a 	bl	800d128 <pbuf_clen>
 8011df4:	4603      	mov	r3, r0
 8011df6:	461a      	mov	r2, r3
 8011df8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8011dfc:	4413      	add	r3, r2
 8011dfe:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 8011e02:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8011e06:	2b09      	cmp	r3, #9
 8011e08:	d903      	bls.n	8011e12 <tcp_write+0x422>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 8011e0a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011e0c:	f7fb f8fe 	bl	800d00c <pbuf_free>
      goto memerr;
 8011e10:	e120      	b.n	8012054 <tcp_write+0x664>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8011e12:	68fb      	ldr	r3, [r7, #12]
 8011e14:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8011e16:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011e1a:	441a      	add	r2, r3
 8011e1c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011e20:	9300      	str	r3, [sp, #0]
 8011e22:	4613      	mov	r3, r2
 8011e24:	2200      	movs	r2, #0
 8011e26:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8011e28:	68f8      	ldr	r0, [r7, #12]
 8011e2a:	f7ff fc4f 	bl	80116cc <tcp_create_segment>
 8011e2e:	64f8      	str	r0, [r7, #76]	; 0x4c
 8011e30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011e32:	2b00      	cmp	r3, #0
 8011e34:	f000 810d 	beq.w	8012052 <tcp_write+0x662>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 8011e38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011e3a:	2b00      	cmp	r3, #0
 8011e3c:	d102      	bne.n	8011e44 <tcp_write+0x454>
      queue = seg;
 8011e3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011e40:	647b      	str	r3, [r7, #68]	; 0x44
 8011e42:	e00c      	b.n	8011e5e <tcp_write+0x46e>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8011e44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011e46:	2b00      	cmp	r3, #0
 8011e48:	d106      	bne.n	8011e58 <tcp_write+0x468>
 8011e4a:	4b53      	ldr	r3, [pc, #332]	; (8011f98 <tcp_write+0x5a8>)
 8011e4c:	f240 22ab 	movw	r2, #683	; 0x2ab
 8011e50:	4955      	ldr	r1, [pc, #340]	; (8011fa8 <tcp_write+0x5b8>)
 8011e52:	4853      	ldr	r0, [pc, #332]	; (8011fa0 <tcp_write+0x5b0>)
 8011e54:	f005 f804 	bl	8016e60 <iprintf>
      prev_seg->next = seg;
 8011e58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011e5a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8011e5c:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 8011e5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011e60:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 8011e62:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011e66:	8b3b      	ldrh	r3, [r7, #24]
 8011e68:	4413      	add	r3, r2
 8011e6a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 8011e6e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011e72:	88fb      	ldrh	r3, [r7, #6]
 8011e74:	429a      	cmp	r2, r3
 8011e76:	f4ff af3d 	bcc.w	8011cf4 <tcp_write+0x304>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 8011e7a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011e7c:	2b00      	cmp	r3, #0
 8011e7e:	d02c      	beq.n	8011eda <tcp_write+0x4ea>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8011e80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011e82:	685b      	ldr	r3, [r3, #4]
 8011e84:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011e86:	e01e      	b.n	8011ec6 <tcp_write+0x4d6>
      p->tot_len += oversize_used;
 8011e88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e8a:	891a      	ldrh	r2, [r3, #8]
 8011e8c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011e8e:	4413      	add	r3, r2
 8011e90:	b29a      	uxth	r2, r3
 8011e92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e94:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 8011e96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e98:	681b      	ldr	r3, [r3, #0]
 8011e9a:	2b00      	cmp	r3, #0
 8011e9c:	d110      	bne.n	8011ec0 <tcp_write+0x4d0>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8011e9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ea0:	685b      	ldr	r3, [r3, #4]
 8011ea2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011ea4:	8952      	ldrh	r2, [r2, #10]
 8011ea6:	4413      	add	r3, r2
 8011ea8:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8011eaa:	68b9      	ldr	r1, [r7, #8]
 8011eac:	4618      	mov	r0, r3
 8011eae:	f004 ffaa 	bl	8016e06 <memcpy>
        p->len += oversize_used;
 8011eb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011eb4:	895a      	ldrh	r2, [r3, #10]
 8011eb6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011eb8:	4413      	add	r3, r2
 8011eba:	b29a      	uxth	r2, r3
 8011ebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ebe:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8011ec0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ec2:	681b      	ldr	r3, [r3, #0]
 8011ec4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011ec6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ec8:	2b00      	cmp	r3, #0
 8011eca:	d1dd      	bne.n	8011e88 <tcp_write+0x498>
      }
    }
    last_unsent->len += oversize_used;
 8011ecc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011ece:	891a      	ldrh	r2, [r3, #8]
 8011ed0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011ed2:	4413      	add	r3, r2
 8011ed4:	b29a      	uxth	r2, r3
 8011ed6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011ed8:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 8011eda:	8a7a      	ldrh	r2, [r7, #18]
 8011edc:	68fb      	ldr	r3, [r7, #12]
 8011ede:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 8011ee2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011ee4:	2b00      	cmp	r3, #0
 8011ee6:	d018      	beq.n	8011f1a <tcp_write+0x52a>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8011ee8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011eea:	2b00      	cmp	r3, #0
 8011eec:	d106      	bne.n	8011efc <tcp_write+0x50c>
 8011eee:	4b2a      	ldr	r3, [pc, #168]	; (8011f98 <tcp_write+0x5a8>)
 8011ef0:	f240 22e1 	movw	r2, #737	; 0x2e1
 8011ef4:	492d      	ldr	r1, [pc, #180]	; (8011fac <tcp_write+0x5bc>)
 8011ef6:	482a      	ldr	r0, [pc, #168]	; (8011fa0 <tcp_write+0x5b0>)
 8011ef8:	f004 ffb2 	bl	8016e60 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8011efc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011efe:	685b      	ldr	r3, [r3, #4]
 8011f00:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8011f02:	4618      	mov	r0, r3
 8011f04:	f7fb f950 	bl	800d1a8 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8011f08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011f0a:	891a      	ldrh	r2, [r3, #8]
 8011f0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011f0e:	891b      	ldrh	r3, [r3, #8]
 8011f10:	4413      	add	r3, r2
 8011f12:	b29a      	uxth	r2, r3
 8011f14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011f16:	811a      	strh	r2, [r3, #8]
 8011f18:	e037      	b.n	8011f8a <tcp_write+0x59a>
  } else if (extendlen > 0) {
 8011f1a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8011f1c:	2b00      	cmp	r3, #0
 8011f1e:	d034      	beq.n	8011f8a <tcp_write+0x59a>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8011f20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011f22:	2b00      	cmp	r3, #0
 8011f24:	d003      	beq.n	8011f2e <tcp_write+0x53e>
 8011f26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011f28:	685b      	ldr	r3, [r3, #4]
 8011f2a:	2b00      	cmp	r3, #0
 8011f2c:	d106      	bne.n	8011f3c <tcp_write+0x54c>
 8011f2e:	4b1a      	ldr	r3, [pc, #104]	; (8011f98 <tcp_write+0x5a8>)
 8011f30:	f240 22e7 	movw	r2, #743	; 0x2e7
 8011f34:	491e      	ldr	r1, [pc, #120]	; (8011fb0 <tcp_write+0x5c0>)
 8011f36:	481a      	ldr	r0, [pc, #104]	; (8011fa0 <tcp_write+0x5b0>)
 8011f38:	f004 ff92 	bl	8016e60 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8011f3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011f3e:	685b      	ldr	r3, [r3, #4]
 8011f40:	62bb      	str	r3, [r7, #40]	; 0x28
 8011f42:	e009      	b.n	8011f58 <tcp_write+0x568>
      p->tot_len += extendlen;
 8011f44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f46:	891a      	ldrh	r2, [r3, #8]
 8011f48:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8011f4a:	4413      	add	r3, r2
 8011f4c:	b29a      	uxth	r2, r3
 8011f4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f50:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8011f52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f54:	681b      	ldr	r3, [r3, #0]
 8011f56:	62bb      	str	r3, [r7, #40]	; 0x28
 8011f58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f5a:	681b      	ldr	r3, [r3, #0]
 8011f5c:	2b00      	cmp	r3, #0
 8011f5e:	d1f1      	bne.n	8011f44 <tcp_write+0x554>
    }
    p->tot_len += extendlen;
 8011f60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f62:	891a      	ldrh	r2, [r3, #8]
 8011f64:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8011f66:	4413      	add	r3, r2
 8011f68:	b29a      	uxth	r2, r3
 8011f6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f6c:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 8011f6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f70:	895a      	ldrh	r2, [r3, #10]
 8011f72:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8011f74:	4413      	add	r3, r2
 8011f76:	b29a      	uxth	r2, r3
 8011f78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f7a:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8011f7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011f7e:	891a      	ldrh	r2, [r3, #8]
 8011f80:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8011f82:	4413      	add	r3, r2
 8011f84:	b29a      	uxth	r2, r3
 8011f86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011f88:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 8011f8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011f8c:	2b00      	cmp	r3, #0
 8011f8e:	d111      	bne.n	8011fb4 <tcp_write+0x5c4>
    pcb->unsent = queue;
 8011f90:	68fb      	ldr	r3, [r7, #12]
 8011f92:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011f94:	66da      	str	r2, [r3, #108]	; 0x6c
 8011f96:	e010      	b.n	8011fba <tcp_write+0x5ca>
 8011f98:	0801a6ac 	.word	0x0801a6ac
 8011f9c:	0801a94c 	.word	0x0801a94c
 8011fa0:	0801a700 	.word	0x0801a700
 8011fa4:	0801a98c 	.word	0x0801a98c
 8011fa8:	0801a99c 	.word	0x0801a99c
 8011fac:	0801a9b0 	.word	0x0801a9b0
 8011fb0:	0801a9e8 	.word	0x0801a9e8
  } else {
    last_unsent->next = queue;
 8011fb4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011fb6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011fb8:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 8011fba:	68fb      	ldr	r3, [r7, #12]
 8011fbc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8011fbe:	88fb      	ldrh	r3, [r7, #6]
 8011fc0:	441a      	add	r2, r3
 8011fc2:	68fb      	ldr	r3, [r7, #12]
 8011fc4:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 8011fc6:	68fb      	ldr	r3, [r7, #12]
 8011fc8:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8011fcc:	88fb      	ldrh	r3, [r7, #6]
 8011fce:	1ad3      	subs	r3, r2, r3
 8011fd0:	b29a      	uxth	r2, r3
 8011fd2:	68fb      	ldr	r3, [r7, #12]
 8011fd4:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 8011fd8:	68fb      	ldr	r3, [r7, #12]
 8011fda:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8011fde:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8011fe2:	68fb      	ldr	r3, [r7, #12]
 8011fe4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011fe8:	2b00      	cmp	r3, #0
 8011fea:	d00e      	beq.n	801200a <tcp_write+0x61a>
    LWIP_ASSERT("tcp_write: valid queue length",
 8011fec:	68fb      	ldr	r3, [r7, #12]
 8011fee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011ff0:	2b00      	cmp	r3, #0
 8011ff2:	d10a      	bne.n	801200a <tcp_write+0x61a>
 8011ff4:	68fb      	ldr	r3, [r7, #12]
 8011ff6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011ff8:	2b00      	cmp	r3, #0
 8011ffa:	d106      	bne.n	801200a <tcp_write+0x61a>
 8011ffc:	4b2c      	ldr	r3, [pc, #176]	; (80120b0 <tcp_write+0x6c0>)
 8011ffe:	f240 3213 	movw	r2, #787	; 0x313
 8012002:	492c      	ldr	r1, [pc, #176]	; (80120b4 <tcp_write+0x6c4>)
 8012004:	482c      	ldr	r0, [pc, #176]	; (80120b8 <tcp_write+0x6c8>)
 8012006:	f004 ff2b 	bl	8016e60 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 801200a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801200c:	2b00      	cmp	r3, #0
 801200e:	d016      	beq.n	801203e <tcp_write+0x64e>
 8012010:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012012:	68db      	ldr	r3, [r3, #12]
 8012014:	2b00      	cmp	r3, #0
 8012016:	d012      	beq.n	801203e <tcp_write+0x64e>
 8012018:	797b      	ldrb	r3, [r7, #5]
 801201a:	f003 0302 	and.w	r3, r3, #2
 801201e:	2b00      	cmp	r3, #0
 8012020:	d10d      	bne.n	801203e <tcp_write+0x64e>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8012022:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012024:	68db      	ldr	r3, [r3, #12]
 8012026:	899b      	ldrh	r3, [r3, #12]
 8012028:	b29c      	uxth	r4, r3
 801202a:	2008      	movs	r0, #8
 801202c:	f7f9 fc14 	bl	800b858 <lwip_htons>
 8012030:	4603      	mov	r3, r0
 8012032:	461a      	mov	r2, r3
 8012034:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012036:	68db      	ldr	r3, [r3, #12]
 8012038:	4322      	orrs	r2, r4
 801203a:	b292      	uxth	r2, r2
 801203c:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 801203e:	2300      	movs	r3, #0
 8012040:	e031      	b.n	80120a6 <tcp_write+0x6b6>
          goto memerr;
 8012042:	bf00      	nop
 8012044:	e006      	b.n	8012054 <tcp_write+0x664>
            goto memerr;
 8012046:	bf00      	nop
 8012048:	e004      	b.n	8012054 <tcp_write+0x664>
        goto memerr;
 801204a:	bf00      	nop
 801204c:	e002      	b.n	8012054 <tcp_write+0x664>
        goto memerr;
 801204e:	bf00      	nop
 8012050:	e000      	b.n	8012054 <tcp_write+0x664>
      goto memerr;
 8012052:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8012054:	68fb      	ldr	r3, [r7, #12]
 8012056:	8b5b      	ldrh	r3, [r3, #26]
 8012058:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801205c:	b29a      	uxth	r2, r3
 801205e:	68fb      	ldr	r3, [r7, #12]
 8012060:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 8012062:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012064:	2b00      	cmp	r3, #0
 8012066:	d002      	beq.n	801206e <tcp_write+0x67e>
    pbuf_free(concat_p);
 8012068:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801206a:	f7fa ffcf 	bl	800d00c <pbuf_free>
  }
  if (queue != NULL) {
 801206e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012070:	2b00      	cmp	r3, #0
 8012072:	d002      	beq.n	801207a <tcp_write+0x68a>
    tcp_segs_free(queue);
 8012074:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8012076:	f7fc fb71 	bl	800e75c <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 801207a:	68fb      	ldr	r3, [r7, #12]
 801207c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012080:	2b00      	cmp	r3, #0
 8012082:	d00e      	beq.n	80120a2 <tcp_write+0x6b2>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8012084:	68fb      	ldr	r3, [r7, #12]
 8012086:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012088:	2b00      	cmp	r3, #0
 801208a:	d10a      	bne.n	80120a2 <tcp_write+0x6b2>
 801208c:	68fb      	ldr	r3, [r7, #12]
 801208e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012090:	2b00      	cmp	r3, #0
 8012092:	d106      	bne.n	80120a2 <tcp_write+0x6b2>
 8012094:	4b06      	ldr	r3, [pc, #24]	; (80120b0 <tcp_write+0x6c0>)
 8012096:	f44f 724a 	mov.w	r2, #808	; 0x328
 801209a:	4906      	ldr	r1, [pc, #24]	; (80120b4 <tcp_write+0x6c4>)
 801209c:	4806      	ldr	r0, [pc, #24]	; (80120b8 <tcp_write+0x6c8>)
 801209e:	f004 fedf 	bl	8016e60 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 80120a2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80120a6:	4618      	mov	r0, r3
 80120a8:	375c      	adds	r7, #92	; 0x5c
 80120aa:	46bd      	mov	sp, r7
 80120ac:	bd90      	pop	{r4, r7, pc}
 80120ae:	bf00      	nop
 80120b0:	0801a6ac 	.word	0x0801a6ac
 80120b4:	0801aa20 	.word	0x0801aa20
 80120b8:	0801a700 	.word	0x0801a700

080120bc <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 80120bc:	b590      	push	{r4, r7, lr}
 80120be:	b08b      	sub	sp, #44	; 0x2c
 80120c0:	af02      	add	r7, sp, #8
 80120c2:	6078      	str	r0, [r7, #4]
 80120c4:	460b      	mov	r3, r1
 80120c6:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 80120c8:	2300      	movs	r3, #0
 80120ca:	61fb      	str	r3, [r7, #28]
 80120cc:	2300      	movs	r3, #0
 80120ce:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 80120d0:	2300      	movs	r3, #0
 80120d2:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 80120d4:	687b      	ldr	r3, [r7, #4]
 80120d6:	2b00      	cmp	r3, #0
 80120d8:	d106      	bne.n	80120e8 <tcp_split_unsent_seg+0x2c>
 80120da:	4b95      	ldr	r3, [pc, #596]	; (8012330 <tcp_split_unsent_seg+0x274>)
 80120dc:	f240 324b 	movw	r2, #843	; 0x34b
 80120e0:	4994      	ldr	r1, [pc, #592]	; (8012334 <tcp_split_unsent_seg+0x278>)
 80120e2:	4895      	ldr	r0, [pc, #596]	; (8012338 <tcp_split_unsent_seg+0x27c>)
 80120e4:	f004 febc 	bl	8016e60 <iprintf>

  useg = pcb->unsent;
 80120e8:	687b      	ldr	r3, [r7, #4]
 80120ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80120ec:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 80120ee:	697b      	ldr	r3, [r7, #20]
 80120f0:	2b00      	cmp	r3, #0
 80120f2:	d102      	bne.n	80120fa <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 80120f4:	f04f 33ff 	mov.w	r3, #4294967295
 80120f8:	e116      	b.n	8012328 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 80120fa:	887b      	ldrh	r3, [r7, #2]
 80120fc:	2b00      	cmp	r3, #0
 80120fe:	d109      	bne.n	8012114 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8012100:	4b8b      	ldr	r3, [pc, #556]	; (8012330 <tcp_split_unsent_seg+0x274>)
 8012102:	f240 3253 	movw	r2, #851	; 0x353
 8012106:	498d      	ldr	r1, [pc, #564]	; (801233c <tcp_split_unsent_seg+0x280>)
 8012108:	488b      	ldr	r0, [pc, #556]	; (8012338 <tcp_split_unsent_seg+0x27c>)
 801210a:	f004 fea9 	bl	8016e60 <iprintf>
    return ERR_VAL;
 801210e:	f06f 0305 	mvn.w	r3, #5
 8012112:	e109      	b.n	8012328 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8012114:	697b      	ldr	r3, [r7, #20]
 8012116:	891b      	ldrh	r3, [r3, #8]
 8012118:	887a      	ldrh	r2, [r7, #2]
 801211a:	429a      	cmp	r2, r3
 801211c:	d301      	bcc.n	8012122 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 801211e:	2300      	movs	r3, #0
 8012120:	e102      	b.n	8012328 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8012122:	687b      	ldr	r3, [r7, #4]
 8012124:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012126:	887a      	ldrh	r2, [r7, #2]
 8012128:	429a      	cmp	r2, r3
 801212a:	d906      	bls.n	801213a <tcp_split_unsent_seg+0x7e>
 801212c:	4b80      	ldr	r3, [pc, #512]	; (8012330 <tcp_split_unsent_seg+0x274>)
 801212e:	f240 325b 	movw	r2, #859	; 0x35b
 8012132:	4983      	ldr	r1, [pc, #524]	; (8012340 <tcp_split_unsent_seg+0x284>)
 8012134:	4880      	ldr	r0, [pc, #512]	; (8012338 <tcp_split_unsent_seg+0x27c>)
 8012136:	f004 fe93 	bl	8016e60 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 801213a:	697b      	ldr	r3, [r7, #20]
 801213c:	891b      	ldrh	r3, [r3, #8]
 801213e:	2b00      	cmp	r3, #0
 8012140:	d106      	bne.n	8012150 <tcp_split_unsent_seg+0x94>
 8012142:	4b7b      	ldr	r3, [pc, #492]	; (8012330 <tcp_split_unsent_seg+0x274>)
 8012144:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8012148:	497e      	ldr	r1, [pc, #504]	; (8012344 <tcp_split_unsent_seg+0x288>)
 801214a:	487b      	ldr	r0, [pc, #492]	; (8012338 <tcp_split_unsent_seg+0x27c>)
 801214c:	f004 fe88 	bl	8016e60 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8012150:	697b      	ldr	r3, [r7, #20]
 8012152:	7a9b      	ldrb	r3, [r3, #10]
 8012154:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8012156:	7bfb      	ldrb	r3, [r7, #15]
 8012158:	009b      	lsls	r3, r3, #2
 801215a:	b2db      	uxtb	r3, r3
 801215c:	f003 0304 	and.w	r3, r3, #4
 8012160:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8012162:	697b      	ldr	r3, [r7, #20]
 8012164:	891a      	ldrh	r2, [r3, #8]
 8012166:	887b      	ldrh	r3, [r7, #2]
 8012168:	1ad3      	subs	r3, r2, r3
 801216a:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 801216c:	7bbb      	ldrb	r3, [r7, #14]
 801216e:	b29a      	uxth	r2, r3
 8012170:	89bb      	ldrh	r3, [r7, #12]
 8012172:	4413      	add	r3, r2
 8012174:	b29b      	uxth	r3, r3
 8012176:	f44f 7220 	mov.w	r2, #640	; 0x280
 801217a:	4619      	mov	r1, r3
 801217c:	2036      	movs	r0, #54	; 0x36
 801217e:	f7fa fc33 	bl	800c9e8 <pbuf_alloc>
 8012182:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8012184:	693b      	ldr	r3, [r7, #16]
 8012186:	2b00      	cmp	r3, #0
 8012188:	f000 80b7 	beq.w	80122fa <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 801218c:	697b      	ldr	r3, [r7, #20]
 801218e:	685b      	ldr	r3, [r3, #4]
 8012190:	891a      	ldrh	r2, [r3, #8]
 8012192:	697b      	ldr	r3, [r7, #20]
 8012194:	891b      	ldrh	r3, [r3, #8]
 8012196:	1ad3      	subs	r3, r2, r3
 8012198:	b29a      	uxth	r2, r3
 801219a:	887b      	ldrh	r3, [r7, #2]
 801219c:	4413      	add	r3, r2
 801219e:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 80121a0:	697b      	ldr	r3, [r7, #20]
 80121a2:	6858      	ldr	r0, [r3, #4]
 80121a4:	693b      	ldr	r3, [r7, #16]
 80121a6:	685a      	ldr	r2, [r3, #4]
 80121a8:	7bbb      	ldrb	r3, [r7, #14]
 80121aa:	18d1      	adds	r1, r2, r3
 80121ac:	897b      	ldrh	r3, [r7, #10]
 80121ae:	89ba      	ldrh	r2, [r7, #12]
 80121b0:	f7fb f932 	bl	800d418 <pbuf_copy_partial>
 80121b4:	4603      	mov	r3, r0
 80121b6:	461a      	mov	r2, r3
 80121b8:	89bb      	ldrh	r3, [r7, #12]
 80121ba:	4293      	cmp	r3, r2
 80121bc:	f040 809f 	bne.w	80122fe <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 80121c0:	697b      	ldr	r3, [r7, #20]
 80121c2:	68db      	ldr	r3, [r3, #12]
 80121c4:	899b      	ldrh	r3, [r3, #12]
 80121c6:	b29b      	uxth	r3, r3
 80121c8:	4618      	mov	r0, r3
 80121ca:	f7f9 fb45 	bl	800b858 <lwip_htons>
 80121ce:	4603      	mov	r3, r0
 80121d0:	b2db      	uxtb	r3, r3
 80121d2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80121d6:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 80121d8:	2300      	movs	r3, #0
 80121da:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 80121dc:	7efb      	ldrb	r3, [r7, #27]
 80121de:	f003 0308 	and.w	r3, r3, #8
 80121e2:	2b00      	cmp	r3, #0
 80121e4:	d007      	beq.n	80121f6 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 80121e6:	7efb      	ldrb	r3, [r7, #27]
 80121e8:	f023 0308 	bic.w	r3, r3, #8
 80121ec:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 80121ee:	7ebb      	ldrb	r3, [r7, #26]
 80121f0:	f043 0308 	orr.w	r3, r3, #8
 80121f4:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 80121f6:	7efb      	ldrb	r3, [r7, #27]
 80121f8:	f003 0301 	and.w	r3, r3, #1
 80121fc:	2b00      	cmp	r3, #0
 80121fe:	d007      	beq.n	8012210 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8012200:	7efb      	ldrb	r3, [r7, #27]
 8012202:	f023 0301 	bic.w	r3, r3, #1
 8012206:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8012208:	7ebb      	ldrb	r3, [r7, #26]
 801220a:	f043 0301 	orr.w	r3, r3, #1
 801220e:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8012210:	697b      	ldr	r3, [r7, #20]
 8012212:	68db      	ldr	r3, [r3, #12]
 8012214:	685b      	ldr	r3, [r3, #4]
 8012216:	4618      	mov	r0, r3
 8012218:	f7f9 fb33 	bl	800b882 <lwip_htonl>
 801221c:	4602      	mov	r2, r0
 801221e:	887b      	ldrh	r3, [r7, #2]
 8012220:	18d1      	adds	r1, r2, r3
 8012222:	7eba      	ldrb	r2, [r7, #26]
 8012224:	7bfb      	ldrb	r3, [r7, #15]
 8012226:	9300      	str	r3, [sp, #0]
 8012228:	460b      	mov	r3, r1
 801222a:	6939      	ldr	r1, [r7, #16]
 801222c:	6878      	ldr	r0, [r7, #4]
 801222e:	f7ff fa4d 	bl	80116cc <tcp_create_segment>
 8012232:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8012234:	69fb      	ldr	r3, [r7, #28]
 8012236:	2b00      	cmp	r3, #0
 8012238:	d063      	beq.n	8012302 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 801223a:	697b      	ldr	r3, [r7, #20]
 801223c:	685b      	ldr	r3, [r3, #4]
 801223e:	4618      	mov	r0, r3
 8012240:	f7fa ff72 	bl	800d128 <pbuf_clen>
 8012244:	4603      	mov	r3, r0
 8012246:	461a      	mov	r2, r3
 8012248:	687b      	ldr	r3, [r7, #4]
 801224a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801224e:	1a9b      	subs	r3, r3, r2
 8012250:	b29a      	uxth	r2, r3
 8012252:	687b      	ldr	r3, [r7, #4]
 8012254:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8012258:	697b      	ldr	r3, [r7, #20]
 801225a:	6858      	ldr	r0, [r3, #4]
 801225c:	697b      	ldr	r3, [r7, #20]
 801225e:	685b      	ldr	r3, [r3, #4]
 8012260:	891a      	ldrh	r2, [r3, #8]
 8012262:	89bb      	ldrh	r3, [r7, #12]
 8012264:	1ad3      	subs	r3, r2, r3
 8012266:	b29b      	uxth	r3, r3
 8012268:	4619      	mov	r1, r3
 801226a:	f7fa fd17 	bl	800cc9c <pbuf_realloc>
  useg->len -= remainder;
 801226e:	697b      	ldr	r3, [r7, #20]
 8012270:	891a      	ldrh	r2, [r3, #8]
 8012272:	89bb      	ldrh	r3, [r7, #12]
 8012274:	1ad3      	subs	r3, r2, r3
 8012276:	b29a      	uxth	r2, r3
 8012278:	697b      	ldr	r3, [r7, #20]
 801227a:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 801227c:	697b      	ldr	r3, [r7, #20]
 801227e:	68db      	ldr	r3, [r3, #12]
 8012280:	899b      	ldrh	r3, [r3, #12]
 8012282:	b29c      	uxth	r4, r3
 8012284:	7efb      	ldrb	r3, [r7, #27]
 8012286:	b29b      	uxth	r3, r3
 8012288:	4618      	mov	r0, r3
 801228a:	f7f9 fae5 	bl	800b858 <lwip_htons>
 801228e:	4603      	mov	r3, r0
 8012290:	461a      	mov	r2, r3
 8012292:	697b      	ldr	r3, [r7, #20]
 8012294:	68db      	ldr	r3, [r3, #12]
 8012296:	4322      	orrs	r2, r4
 8012298:	b292      	uxth	r2, r2
 801229a:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 801229c:	697b      	ldr	r3, [r7, #20]
 801229e:	685b      	ldr	r3, [r3, #4]
 80122a0:	4618      	mov	r0, r3
 80122a2:	f7fa ff41 	bl	800d128 <pbuf_clen>
 80122a6:	4603      	mov	r3, r0
 80122a8:	461a      	mov	r2, r3
 80122aa:	687b      	ldr	r3, [r7, #4]
 80122ac:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80122b0:	4413      	add	r3, r2
 80122b2:	b29a      	uxth	r2, r3
 80122b4:	687b      	ldr	r3, [r7, #4]
 80122b6:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80122ba:	69fb      	ldr	r3, [r7, #28]
 80122bc:	685b      	ldr	r3, [r3, #4]
 80122be:	4618      	mov	r0, r3
 80122c0:	f7fa ff32 	bl	800d128 <pbuf_clen>
 80122c4:	4603      	mov	r3, r0
 80122c6:	461a      	mov	r2, r3
 80122c8:	687b      	ldr	r3, [r7, #4]
 80122ca:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80122ce:	4413      	add	r3, r2
 80122d0:	b29a      	uxth	r2, r3
 80122d2:	687b      	ldr	r3, [r7, #4]
 80122d4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 80122d8:	697b      	ldr	r3, [r7, #20]
 80122da:	681a      	ldr	r2, [r3, #0]
 80122dc:	69fb      	ldr	r3, [r7, #28]
 80122de:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 80122e0:	697b      	ldr	r3, [r7, #20]
 80122e2:	69fa      	ldr	r2, [r7, #28]
 80122e4:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 80122e6:	69fb      	ldr	r3, [r7, #28]
 80122e8:	681b      	ldr	r3, [r3, #0]
 80122ea:	2b00      	cmp	r3, #0
 80122ec:	d103      	bne.n	80122f6 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 80122ee:	687b      	ldr	r3, [r7, #4]
 80122f0:	2200      	movs	r2, #0
 80122f2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 80122f6:	2300      	movs	r3, #0
 80122f8:	e016      	b.n	8012328 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 80122fa:	bf00      	nop
 80122fc:	e002      	b.n	8012304 <tcp_split_unsent_seg+0x248>
    goto memerr;
 80122fe:	bf00      	nop
 8012300:	e000      	b.n	8012304 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8012302:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8012304:	69fb      	ldr	r3, [r7, #28]
 8012306:	2b00      	cmp	r3, #0
 8012308:	d006      	beq.n	8012318 <tcp_split_unsent_seg+0x25c>
 801230a:	4b09      	ldr	r3, [pc, #36]	; (8012330 <tcp_split_unsent_seg+0x274>)
 801230c:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8012310:	490d      	ldr	r1, [pc, #52]	; (8012348 <tcp_split_unsent_seg+0x28c>)
 8012312:	4809      	ldr	r0, [pc, #36]	; (8012338 <tcp_split_unsent_seg+0x27c>)
 8012314:	f004 fda4 	bl	8016e60 <iprintf>
  if (p != NULL) {
 8012318:	693b      	ldr	r3, [r7, #16]
 801231a:	2b00      	cmp	r3, #0
 801231c:	d002      	beq.n	8012324 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 801231e:	6938      	ldr	r0, [r7, #16]
 8012320:	f7fa fe74 	bl	800d00c <pbuf_free>
  }

  return ERR_MEM;
 8012324:	f04f 33ff 	mov.w	r3, #4294967295
}
 8012328:	4618      	mov	r0, r3
 801232a:	3724      	adds	r7, #36	; 0x24
 801232c:	46bd      	mov	sp, r7
 801232e:	bd90      	pop	{r4, r7, pc}
 8012330:	0801a6ac 	.word	0x0801a6ac
 8012334:	0801aa40 	.word	0x0801aa40
 8012338:	0801a700 	.word	0x0801a700
 801233c:	0801aa64 	.word	0x0801aa64
 8012340:	0801aa88 	.word	0x0801aa88
 8012344:	0801aa98 	.word	0x0801aa98
 8012348:	0801aaa8 	.word	0x0801aaa8

0801234c <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 801234c:	b590      	push	{r4, r7, lr}
 801234e:	b085      	sub	sp, #20
 8012350:	af00      	add	r7, sp, #0
 8012352:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8012354:	687b      	ldr	r3, [r7, #4]
 8012356:	2b00      	cmp	r3, #0
 8012358:	d106      	bne.n	8012368 <tcp_send_fin+0x1c>
 801235a:	4b21      	ldr	r3, [pc, #132]	; (80123e0 <tcp_send_fin+0x94>)
 801235c:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8012360:	4920      	ldr	r1, [pc, #128]	; (80123e4 <tcp_send_fin+0x98>)
 8012362:	4821      	ldr	r0, [pc, #132]	; (80123e8 <tcp_send_fin+0x9c>)
 8012364:	f004 fd7c 	bl	8016e60 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8012368:	687b      	ldr	r3, [r7, #4]
 801236a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801236c:	2b00      	cmp	r3, #0
 801236e:	d02e      	beq.n	80123ce <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8012370:	687b      	ldr	r3, [r7, #4]
 8012372:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012374:	60fb      	str	r3, [r7, #12]
 8012376:	e002      	b.n	801237e <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8012378:	68fb      	ldr	r3, [r7, #12]
 801237a:	681b      	ldr	r3, [r3, #0]
 801237c:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801237e:	68fb      	ldr	r3, [r7, #12]
 8012380:	681b      	ldr	r3, [r3, #0]
 8012382:	2b00      	cmp	r3, #0
 8012384:	d1f8      	bne.n	8012378 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8012386:	68fb      	ldr	r3, [r7, #12]
 8012388:	68db      	ldr	r3, [r3, #12]
 801238a:	899b      	ldrh	r3, [r3, #12]
 801238c:	b29b      	uxth	r3, r3
 801238e:	4618      	mov	r0, r3
 8012390:	f7f9 fa62 	bl	800b858 <lwip_htons>
 8012394:	4603      	mov	r3, r0
 8012396:	b2db      	uxtb	r3, r3
 8012398:	f003 0307 	and.w	r3, r3, #7
 801239c:	2b00      	cmp	r3, #0
 801239e:	d116      	bne.n	80123ce <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 80123a0:	68fb      	ldr	r3, [r7, #12]
 80123a2:	68db      	ldr	r3, [r3, #12]
 80123a4:	899b      	ldrh	r3, [r3, #12]
 80123a6:	b29c      	uxth	r4, r3
 80123a8:	2001      	movs	r0, #1
 80123aa:	f7f9 fa55 	bl	800b858 <lwip_htons>
 80123ae:	4603      	mov	r3, r0
 80123b0:	461a      	mov	r2, r3
 80123b2:	68fb      	ldr	r3, [r7, #12]
 80123b4:	68db      	ldr	r3, [r3, #12]
 80123b6:	4322      	orrs	r2, r4
 80123b8:	b292      	uxth	r2, r2
 80123ba:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 80123bc:	687b      	ldr	r3, [r7, #4]
 80123be:	8b5b      	ldrh	r3, [r3, #26]
 80123c0:	f043 0320 	orr.w	r3, r3, #32
 80123c4:	b29a      	uxth	r2, r3
 80123c6:	687b      	ldr	r3, [r7, #4]
 80123c8:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 80123ca:	2300      	movs	r3, #0
 80123cc:	e004      	b.n	80123d8 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 80123ce:	2101      	movs	r1, #1
 80123d0:	6878      	ldr	r0, [r7, #4]
 80123d2:	f000 f80b 	bl	80123ec <tcp_enqueue_flags>
 80123d6:	4603      	mov	r3, r0
}
 80123d8:	4618      	mov	r0, r3
 80123da:	3714      	adds	r7, #20
 80123dc:	46bd      	mov	sp, r7
 80123de:	bd90      	pop	{r4, r7, pc}
 80123e0:	0801a6ac 	.word	0x0801a6ac
 80123e4:	0801aab4 	.word	0x0801aab4
 80123e8:	0801a700 	.word	0x0801a700

080123ec <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 80123ec:	b580      	push	{r7, lr}
 80123ee:	b08a      	sub	sp, #40	; 0x28
 80123f0:	af02      	add	r7, sp, #8
 80123f2:	6078      	str	r0, [r7, #4]
 80123f4:	460b      	mov	r3, r1
 80123f6:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 80123f8:	2300      	movs	r3, #0
 80123fa:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 80123fc:	2300      	movs	r3, #0
 80123fe:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8012400:	78fb      	ldrb	r3, [r7, #3]
 8012402:	f003 0303 	and.w	r3, r3, #3
 8012406:	2b00      	cmp	r3, #0
 8012408:	d106      	bne.n	8012418 <tcp_enqueue_flags+0x2c>
 801240a:	4b67      	ldr	r3, [pc, #412]	; (80125a8 <tcp_enqueue_flags+0x1bc>)
 801240c:	f240 4212 	movw	r2, #1042	; 0x412
 8012410:	4966      	ldr	r1, [pc, #408]	; (80125ac <tcp_enqueue_flags+0x1c0>)
 8012412:	4867      	ldr	r0, [pc, #412]	; (80125b0 <tcp_enqueue_flags+0x1c4>)
 8012414:	f004 fd24 	bl	8016e60 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8012418:	687b      	ldr	r3, [r7, #4]
 801241a:	2b00      	cmp	r3, #0
 801241c:	d106      	bne.n	801242c <tcp_enqueue_flags+0x40>
 801241e:	4b62      	ldr	r3, [pc, #392]	; (80125a8 <tcp_enqueue_flags+0x1bc>)
 8012420:	f240 4213 	movw	r2, #1043	; 0x413
 8012424:	4963      	ldr	r1, [pc, #396]	; (80125b4 <tcp_enqueue_flags+0x1c8>)
 8012426:	4862      	ldr	r0, [pc, #392]	; (80125b0 <tcp_enqueue_flags+0x1c4>)
 8012428:	f004 fd1a 	bl	8016e60 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 801242c:	78fb      	ldrb	r3, [r7, #3]
 801242e:	f003 0302 	and.w	r3, r3, #2
 8012432:	2b00      	cmp	r3, #0
 8012434:	d001      	beq.n	801243a <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8012436:	2301      	movs	r3, #1
 8012438:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801243a:	7ffb      	ldrb	r3, [r7, #31]
 801243c:	009b      	lsls	r3, r3, #2
 801243e:	b2db      	uxtb	r3, r3
 8012440:	f003 0304 	and.w	r3, r3, #4
 8012444:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8012446:	7dfb      	ldrb	r3, [r7, #23]
 8012448:	b29b      	uxth	r3, r3
 801244a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801244e:	4619      	mov	r1, r3
 8012450:	2036      	movs	r0, #54	; 0x36
 8012452:	f7fa fac9 	bl	800c9e8 <pbuf_alloc>
 8012456:	6138      	str	r0, [r7, #16]
 8012458:	693b      	ldr	r3, [r7, #16]
 801245a:	2b00      	cmp	r3, #0
 801245c:	d109      	bne.n	8012472 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801245e:	687b      	ldr	r3, [r7, #4]
 8012460:	8b5b      	ldrh	r3, [r3, #26]
 8012462:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012466:	b29a      	uxth	r2, r3
 8012468:	687b      	ldr	r3, [r7, #4]
 801246a:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801246c:	f04f 33ff 	mov.w	r3, #4294967295
 8012470:	e095      	b.n	801259e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8012472:	693b      	ldr	r3, [r7, #16]
 8012474:	895a      	ldrh	r2, [r3, #10]
 8012476:	7dfb      	ldrb	r3, [r7, #23]
 8012478:	b29b      	uxth	r3, r3
 801247a:	429a      	cmp	r2, r3
 801247c:	d206      	bcs.n	801248c <tcp_enqueue_flags+0xa0>
 801247e:	4b4a      	ldr	r3, [pc, #296]	; (80125a8 <tcp_enqueue_flags+0x1bc>)
 8012480:	f240 423a 	movw	r2, #1082	; 0x43a
 8012484:	494c      	ldr	r1, [pc, #304]	; (80125b8 <tcp_enqueue_flags+0x1cc>)
 8012486:	484a      	ldr	r0, [pc, #296]	; (80125b0 <tcp_enqueue_flags+0x1c4>)
 8012488:	f004 fcea 	bl	8016e60 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 801248c:	687b      	ldr	r3, [r7, #4]
 801248e:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8012490:	78fa      	ldrb	r2, [r7, #3]
 8012492:	7ffb      	ldrb	r3, [r7, #31]
 8012494:	9300      	str	r3, [sp, #0]
 8012496:	460b      	mov	r3, r1
 8012498:	6939      	ldr	r1, [r7, #16]
 801249a:	6878      	ldr	r0, [r7, #4]
 801249c:	f7ff f916 	bl	80116cc <tcp_create_segment>
 80124a0:	60f8      	str	r0, [r7, #12]
 80124a2:	68fb      	ldr	r3, [r7, #12]
 80124a4:	2b00      	cmp	r3, #0
 80124a6:	d109      	bne.n	80124bc <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80124a8:	687b      	ldr	r3, [r7, #4]
 80124aa:	8b5b      	ldrh	r3, [r3, #26]
 80124ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80124b0:	b29a      	uxth	r2, r3
 80124b2:	687b      	ldr	r3, [r7, #4]
 80124b4:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80124b6:	f04f 33ff 	mov.w	r3, #4294967295
 80124ba:	e070      	b.n	801259e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 80124bc:	68fb      	ldr	r3, [r7, #12]
 80124be:	68db      	ldr	r3, [r3, #12]
 80124c0:	f003 0303 	and.w	r3, r3, #3
 80124c4:	2b00      	cmp	r3, #0
 80124c6:	d006      	beq.n	80124d6 <tcp_enqueue_flags+0xea>
 80124c8:	4b37      	ldr	r3, [pc, #220]	; (80125a8 <tcp_enqueue_flags+0x1bc>)
 80124ca:	f240 4242 	movw	r2, #1090	; 0x442
 80124ce:	493b      	ldr	r1, [pc, #236]	; (80125bc <tcp_enqueue_flags+0x1d0>)
 80124d0:	4837      	ldr	r0, [pc, #220]	; (80125b0 <tcp_enqueue_flags+0x1c4>)
 80124d2:	f004 fcc5 	bl	8016e60 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 80124d6:	68fb      	ldr	r3, [r7, #12]
 80124d8:	891b      	ldrh	r3, [r3, #8]
 80124da:	2b00      	cmp	r3, #0
 80124dc:	d006      	beq.n	80124ec <tcp_enqueue_flags+0x100>
 80124de:	4b32      	ldr	r3, [pc, #200]	; (80125a8 <tcp_enqueue_flags+0x1bc>)
 80124e0:	f240 4243 	movw	r2, #1091	; 0x443
 80124e4:	4936      	ldr	r1, [pc, #216]	; (80125c0 <tcp_enqueue_flags+0x1d4>)
 80124e6:	4832      	ldr	r0, [pc, #200]	; (80125b0 <tcp_enqueue_flags+0x1c4>)
 80124e8:	f004 fcba 	bl	8016e60 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 80124ec:	687b      	ldr	r3, [r7, #4]
 80124ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80124f0:	2b00      	cmp	r3, #0
 80124f2:	d103      	bne.n	80124fc <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 80124f4:	687b      	ldr	r3, [r7, #4]
 80124f6:	68fa      	ldr	r2, [r7, #12]
 80124f8:	66da      	str	r2, [r3, #108]	; 0x6c
 80124fa:	e00d      	b.n	8012518 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 80124fc:	687b      	ldr	r3, [r7, #4]
 80124fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012500:	61bb      	str	r3, [r7, #24]
 8012502:	e002      	b.n	801250a <tcp_enqueue_flags+0x11e>
 8012504:	69bb      	ldr	r3, [r7, #24]
 8012506:	681b      	ldr	r3, [r3, #0]
 8012508:	61bb      	str	r3, [r7, #24]
 801250a:	69bb      	ldr	r3, [r7, #24]
 801250c:	681b      	ldr	r3, [r3, #0]
 801250e:	2b00      	cmp	r3, #0
 8012510:	d1f8      	bne.n	8012504 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8012512:	69bb      	ldr	r3, [r7, #24]
 8012514:	68fa      	ldr	r2, [r7, #12]
 8012516:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8012518:	687b      	ldr	r3, [r7, #4]
 801251a:	2200      	movs	r2, #0
 801251c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8012520:	78fb      	ldrb	r3, [r7, #3]
 8012522:	f003 0302 	and.w	r3, r3, #2
 8012526:	2b00      	cmp	r3, #0
 8012528:	d104      	bne.n	8012534 <tcp_enqueue_flags+0x148>
 801252a:	78fb      	ldrb	r3, [r7, #3]
 801252c:	f003 0301 	and.w	r3, r3, #1
 8012530:	2b00      	cmp	r3, #0
 8012532:	d004      	beq.n	801253e <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8012534:	687b      	ldr	r3, [r7, #4]
 8012536:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012538:	1c5a      	adds	r2, r3, #1
 801253a:	687b      	ldr	r3, [r7, #4]
 801253c:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 801253e:	78fb      	ldrb	r3, [r7, #3]
 8012540:	f003 0301 	and.w	r3, r3, #1
 8012544:	2b00      	cmp	r3, #0
 8012546:	d006      	beq.n	8012556 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8012548:	687b      	ldr	r3, [r7, #4]
 801254a:	8b5b      	ldrh	r3, [r3, #26]
 801254c:	f043 0320 	orr.w	r3, r3, #32
 8012550:	b29a      	uxth	r2, r3
 8012552:	687b      	ldr	r3, [r7, #4]
 8012554:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8012556:	68fb      	ldr	r3, [r7, #12]
 8012558:	685b      	ldr	r3, [r3, #4]
 801255a:	4618      	mov	r0, r3
 801255c:	f7fa fde4 	bl	800d128 <pbuf_clen>
 8012560:	4603      	mov	r3, r0
 8012562:	461a      	mov	r2, r3
 8012564:	687b      	ldr	r3, [r7, #4]
 8012566:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801256a:	4413      	add	r3, r2
 801256c:	b29a      	uxth	r2, r3
 801256e:	687b      	ldr	r3, [r7, #4]
 8012570:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8012574:	687b      	ldr	r3, [r7, #4]
 8012576:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801257a:	2b00      	cmp	r3, #0
 801257c:	d00e      	beq.n	801259c <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 801257e:	687b      	ldr	r3, [r7, #4]
 8012580:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012582:	2b00      	cmp	r3, #0
 8012584:	d10a      	bne.n	801259c <tcp_enqueue_flags+0x1b0>
 8012586:	687b      	ldr	r3, [r7, #4]
 8012588:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801258a:	2b00      	cmp	r3, #0
 801258c:	d106      	bne.n	801259c <tcp_enqueue_flags+0x1b0>
 801258e:	4b06      	ldr	r3, [pc, #24]	; (80125a8 <tcp_enqueue_flags+0x1bc>)
 8012590:	f240 4266 	movw	r2, #1126	; 0x466
 8012594:	490b      	ldr	r1, [pc, #44]	; (80125c4 <tcp_enqueue_flags+0x1d8>)
 8012596:	4806      	ldr	r0, [pc, #24]	; (80125b0 <tcp_enqueue_flags+0x1c4>)
 8012598:	f004 fc62 	bl	8016e60 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 801259c:	2300      	movs	r3, #0
}
 801259e:	4618      	mov	r0, r3
 80125a0:	3720      	adds	r7, #32
 80125a2:	46bd      	mov	sp, r7
 80125a4:	bd80      	pop	{r7, pc}
 80125a6:	bf00      	nop
 80125a8:	0801a6ac 	.word	0x0801a6ac
 80125ac:	0801aad0 	.word	0x0801aad0
 80125b0:	0801a700 	.word	0x0801a700
 80125b4:	0801ab28 	.word	0x0801ab28
 80125b8:	0801ab48 	.word	0x0801ab48
 80125bc:	0801ab84 	.word	0x0801ab84
 80125c0:	0801ab9c 	.word	0x0801ab9c
 80125c4:	0801abc8 	.word	0x0801abc8

080125c8 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 80125c8:	b5b0      	push	{r4, r5, r7, lr}
 80125ca:	b08a      	sub	sp, #40	; 0x28
 80125cc:	af00      	add	r7, sp, #0
 80125ce:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 80125d0:	687b      	ldr	r3, [r7, #4]
 80125d2:	2b00      	cmp	r3, #0
 80125d4:	d106      	bne.n	80125e4 <tcp_output+0x1c>
 80125d6:	4ba0      	ldr	r3, [pc, #640]	; (8012858 <tcp_output+0x290>)
 80125d8:	f240 42e1 	movw	r2, #1249	; 0x4e1
 80125dc:	499f      	ldr	r1, [pc, #636]	; (801285c <tcp_output+0x294>)
 80125de:	48a0      	ldr	r0, [pc, #640]	; (8012860 <tcp_output+0x298>)
 80125e0:	f004 fc3e 	bl	8016e60 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 80125e4:	687b      	ldr	r3, [r7, #4]
 80125e6:	7d1b      	ldrb	r3, [r3, #20]
 80125e8:	2b01      	cmp	r3, #1
 80125ea:	d106      	bne.n	80125fa <tcp_output+0x32>
 80125ec:	4b9a      	ldr	r3, [pc, #616]	; (8012858 <tcp_output+0x290>)
 80125ee:	f240 42e4 	movw	r2, #1252	; 0x4e4
 80125f2:	499c      	ldr	r1, [pc, #624]	; (8012864 <tcp_output+0x29c>)
 80125f4:	489a      	ldr	r0, [pc, #616]	; (8012860 <tcp_output+0x298>)
 80125f6:	f004 fc33 	bl	8016e60 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 80125fa:	4b9b      	ldr	r3, [pc, #620]	; (8012868 <tcp_output+0x2a0>)
 80125fc:	681b      	ldr	r3, [r3, #0]
 80125fe:	687a      	ldr	r2, [r7, #4]
 8012600:	429a      	cmp	r2, r3
 8012602:	d101      	bne.n	8012608 <tcp_output+0x40>
    return ERR_OK;
 8012604:	2300      	movs	r3, #0
 8012606:	e1d2      	b.n	80129ae <tcp_output+0x3e6>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8012608:	687b      	ldr	r3, [r7, #4]
 801260a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801260e:	687b      	ldr	r3, [r7, #4]
 8012610:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012614:	429a      	cmp	r2, r3
 8012616:	d203      	bcs.n	8012620 <tcp_output+0x58>
 8012618:	687b      	ldr	r3, [r7, #4]
 801261a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801261e:	e002      	b.n	8012626 <tcp_output+0x5e>
 8012620:	687b      	ldr	r3, [r7, #4]
 8012622:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012626:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8012628:	687b      	ldr	r3, [r7, #4]
 801262a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801262c:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 801262e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012630:	2b00      	cmp	r3, #0
 8012632:	d10b      	bne.n	801264c <tcp_output+0x84>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8012634:	687b      	ldr	r3, [r7, #4]
 8012636:	8b5b      	ldrh	r3, [r3, #26]
 8012638:	f003 0302 	and.w	r3, r3, #2
 801263c:	2b00      	cmp	r3, #0
 801263e:	f000 81a9 	beq.w	8012994 <tcp_output+0x3cc>
      return tcp_send_empty_ack(pcb);
 8012642:	6878      	ldr	r0, [r7, #4]
 8012644:	f000 fdd8 	bl	80131f8 <tcp_send_empty_ack>
 8012648:	4603      	mov	r3, r0
 801264a:	e1b0      	b.n	80129ae <tcp_output+0x3e6>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 801264c:	6879      	ldr	r1, [r7, #4]
 801264e:	687b      	ldr	r3, [r7, #4]
 8012650:	3304      	adds	r3, #4
 8012652:	461a      	mov	r2, r3
 8012654:	6878      	ldr	r0, [r7, #4]
 8012656:	f7ff f81d 	bl	8011694 <tcp_route>
 801265a:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 801265c:	697b      	ldr	r3, [r7, #20]
 801265e:	2b00      	cmp	r3, #0
 8012660:	d102      	bne.n	8012668 <tcp_output+0xa0>
    return ERR_RTE;
 8012662:	f06f 0303 	mvn.w	r3, #3
 8012666:	e1a2      	b.n	80129ae <tcp_output+0x3e6>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8012668:	687b      	ldr	r3, [r7, #4]
 801266a:	2b00      	cmp	r3, #0
 801266c:	d003      	beq.n	8012676 <tcp_output+0xae>
 801266e:	687b      	ldr	r3, [r7, #4]
 8012670:	681b      	ldr	r3, [r3, #0]
 8012672:	2b00      	cmp	r3, #0
 8012674:	d111      	bne.n	801269a <tcp_output+0xd2>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8012676:	697b      	ldr	r3, [r7, #20]
 8012678:	2b00      	cmp	r3, #0
 801267a:	d002      	beq.n	8012682 <tcp_output+0xba>
 801267c:	697b      	ldr	r3, [r7, #20]
 801267e:	3304      	adds	r3, #4
 8012680:	e000      	b.n	8012684 <tcp_output+0xbc>
 8012682:	2300      	movs	r3, #0
 8012684:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8012686:	693b      	ldr	r3, [r7, #16]
 8012688:	2b00      	cmp	r3, #0
 801268a:	d102      	bne.n	8012692 <tcp_output+0xca>
      return ERR_RTE;
 801268c:	f06f 0303 	mvn.w	r3, #3
 8012690:	e18d      	b.n	80129ae <tcp_output+0x3e6>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8012692:	693b      	ldr	r3, [r7, #16]
 8012694:	681a      	ldr	r2, [r3, #0]
 8012696:	687b      	ldr	r3, [r7, #4]
 8012698:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 801269a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801269c:	68db      	ldr	r3, [r3, #12]
 801269e:	685b      	ldr	r3, [r3, #4]
 80126a0:	4618      	mov	r0, r3
 80126a2:	f7f9 f8ee 	bl	800b882 <lwip_htonl>
 80126a6:	4602      	mov	r2, r0
 80126a8:	687b      	ldr	r3, [r7, #4]
 80126aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80126ac:	1ad3      	subs	r3, r2, r3
 80126ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80126b0:	8912      	ldrh	r2, [r2, #8]
 80126b2:	4413      	add	r3, r2
 80126b4:	69ba      	ldr	r2, [r7, #24]
 80126b6:	429a      	cmp	r2, r3
 80126b8:	d227      	bcs.n	801270a <tcp_output+0x142>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 80126ba:	687b      	ldr	r3, [r7, #4]
 80126bc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80126c0:	461a      	mov	r2, r3
 80126c2:	69bb      	ldr	r3, [r7, #24]
 80126c4:	4293      	cmp	r3, r2
 80126c6:	d114      	bne.n	80126f2 <tcp_output+0x12a>
 80126c8:	687b      	ldr	r3, [r7, #4]
 80126ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80126cc:	2b00      	cmp	r3, #0
 80126ce:	d110      	bne.n	80126f2 <tcp_output+0x12a>
 80126d0:	687b      	ldr	r3, [r7, #4]
 80126d2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80126d6:	2b00      	cmp	r3, #0
 80126d8:	d10b      	bne.n	80126f2 <tcp_output+0x12a>
      pcb->persist_cnt = 0;
 80126da:	687b      	ldr	r3, [r7, #4]
 80126dc:	2200      	movs	r2, #0
 80126de:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 80126e2:	687b      	ldr	r3, [r7, #4]
 80126e4:	2201      	movs	r2, #1
 80126e6:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 80126ea:	687b      	ldr	r3, [r7, #4]
 80126ec:	2200      	movs	r2, #0
 80126ee:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 80126f2:	687b      	ldr	r3, [r7, #4]
 80126f4:	8b5b      	ldrh	r3, [r3, #26]
 80126f6:	f003 0302 	and.w	r3, r3, #2
 80126fa:	2b00      	cmp	r3, #0
 80126fc:	f000 814c 	beq.w	8012998 <tcp_output+0x3d0>
      return tcp_send_empty_ack(pcb);
 8012700:	6878      	ldr	r0, [r7, #4]
 8012702:	f000 fd79 	bl	80131f8 <tcp_send_empty_ack>
 8012706:	4603      	mov	r3, r0
 8012708:	e151      	b.n	80129ae <tcp_output+0x3e6>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 801270a:	687b      	ldr	r3, [r7, #4]
 801270c:	2200      	movs	r2, #0
 801270e:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8012712:	687b      	ldr	r3, [r7, #4]
 8012714:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012716:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8012718:	6a3b      	ldr	r3, [r7, #32]
 801271a:	2b00      	cmp	r3, #0
 801271c:	f000 811b 	beq.w	8012956 <tcp_output+0x38e>
    for (; useg->next != NULL; useg = useg->next);
 8012720:	e002      	b.n	8012728 <tcp_output+0x160>
 8012722:	6a3b      	ldr	r3, [r7, #32]
 8012724:	681b      	ldr	r3, [r3, #0]
 8012726:	623b      	str	r3, [r7, #32]
 8012728:	6a3b      	ldr	r3, [r7, #32]
 801272a:	681b      	ldr	r3, [r3, #0]
 801272c:	2b00      	cmp	r3, #0
 801272e:	d1f8      	bne.n	8012722 <tcp_output+0x15a>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8012730:	e111      	b.n	8012956 <tcp_output+0x38e>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8012732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012734:	68db      	ldr	r3, [r3, #12]
 8012736:	899b      	ldrh	r3, [r3, #12]
 8012738:	b29b      	uxth	r3, r3
 801273a:	4618      	mov	r0, r3
 801273c:	f7f9 f88c 	bl	800b858 <lwip_htons>
 8012740:	4603      	mov	r3, r0
 8012742:	b2db      	uxtb	r3, r3
 8012744:	f003 0304 	and.w	r3, r3, #4
 8012748:	2b00      	cmp	r3, #0
 801274a:	d006      	beq.n	801275a <tcp_output+0x192>
 801274c:	4b42      	ldr	r3, [pc, #264]	; (8012858 <tcp_output+0x290>)
 801274e:	f240 5237 	movw	r2, #1335	; 0x537
 8012752:	4946      	ldr	r1, [pc, #280]	; (801286c <tcp_output+0x2a4>)
 8012754:	4842      	ldr	r0, [pc, #264]	; (8012860 <tcp_output+0x298>)
 8012756:	f004 fb83 	bl	8016e60 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801275a:	687b      	ldr	r3, [r7, #4]
 801275c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801275e:	2b00      	cmp	r3, #0
 8012760:	d01f      	beq.n	80127a2 <tcp_output+0x1da>
 8012762:	687b      	ldr	r3, [r7, #4]
 8012764:	8b5b      	ldrh	r3, [r3, #26]
 8012766:	f003 0344 	and.w	r3, r3, #68	; 0x44
 801276a:	2b00      	cmp	r3, #0
 801276c:	d119      	bne.n	80127a2 <tcp_output+0x1da>
 801276e:	687b      	ldr	r3, [r7, #4]
 8012770:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012772:	2b00      	cmp	r3, #0
 8012774:	d00b      	beq.n	801278e <tcp_output+0x1c6>
 8012776:	687b      	ldr	r3, [r7, #4]
 8012778:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801277a:	681b      	ldr	r3, [r3, #0]
 801277c:	2b00      	cmp	r3, #0
 801277e:	d110      	bne.n	80127a2 <tcp_output+0x1da>
 8012780:	687b      	ldr	r3, [r7, #4]
 8012782:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012784:	891a      	ldrh	r2, [r3, #8]
 8012786:	687b      	ldr	r3, [r7, #4]
 8012788:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801278a:	429a      	cmp	r2, r3
 801278c:	d209      	bcs.n	80127a2 <tcp_output+0x1da>
 801278e:	687b      	ldr	r3, [r7, #4]
 8012790:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8012794:	2b00      	cmp	r3, #0
 8012796:	d004      	beq.n	80127a2 <tcp_output+0x1da>
 8012798:	687b      	ldr	r3, [r7, #4]
 801279a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801279e:	2b08      	cmp	r3, #8
 80127a0:	d901      	bls.n	80127a6 <tcp_output+0x1de>
 80127a2:	2301      	movs	r3, #1
 80127a4:	e000      	b.n	80127a8 <tcp_output+0x1e0>
 80127a6:	2300      	movs	r3, #0
 80127a8:	2b00      	cmp	r3, #0
 80127aa:	d106      	bne.n	80127ba <tcp_output+0x1f2>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 80127ac:	687b      	ldr	r3, [r7, #4]
 80127ae:	8b5b      	ldrh	r3, [r3, #26]
 80127b0:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80127b4:	2b00      	cmp	r3, #0
 80127b6:	f000 80e3 	beq.w	8012980 <tcp_output+0x3b8>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 80127ba:	687b      	ldr	r3, [r7, #4]
 80127bc:	7d1b      	ldrb	r3, [r3, #20]
 80127be:	2b02      	cmp	r3, #2
 80127c0:	d00d      	beq.n	80127de <tcp_output+0x216>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 80127c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127c4:	68db      	ldr	r3, [r3, #12]
 80127c6:	899b      	ldrh	r3, [r3, #12]
 80127c8:	b29c      	uxth	r4, r3
 80127ca:	2010      	movs	r0, #16
 80127cc:	f7f9 f844 	bl	800b858 <lwip_htons>
 80127d0:	4603      	mov	r3, r0
 80127d2:	461a      	mov	r2, r3
 80127d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127d6:	68db      	ldr	r3, [r3, #12]
 80127d8:	4322      	orrs	r2, r4
 80127da:	b292      	uxth	r2, r2
 80127dc:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 80127de:	697a      	ldr	r2, [r7, #20]
 80127e0:	6879      	ldr	r1, [r7, #4]
 80127e2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80127e4:	f000 f908 	bl	80129f8 <tcp_output_segment>
 80127e8:	4603      	mov	r3, r0
 80127ea:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 80127ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80127f0:	2b00      	cmp	r3, #0
 80127f2:	d009      	beq.n	8012808 <tcp_output+0x240>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80127f4:	687b      	ldr	r3, [r7, #4]
 80127f6:	8b5b      	ldrh	r3, [r3, #26]
 80127f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80127fc:	b29a      	uxth	r2, r3
 80127fe:	687b      	ldr	r3, [r7, #4]
 8012800:	835a      	strh	r2, [r3, #26]
      return err;
 8012802:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012806:	e0d2      	b.n	80129ae <tcp_output+0x3e6>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8012808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801280a:	681a      	ldr	r2, [r3, #0]
 801280c:	687b      	ldr	r3, [r7, #4]
 801280e:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8012810:	687b      	ldr	r3, [r7, #4]
 8012812:	7d1b      	ldrb	r3, [r3, #20]
 8012814:	2b02      	cmp	r3, #2
 8012816:	d006      	beq.n	8012826 <tcp_output+0x25e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8012818:	687b      	ldr	r3, [r7, #4]
 801281a:	8b5b      	ldrh	r3, [r3, #26]
 801281c:	f023 0303 	bic.w	r3, r3, #3
 8012820:	b29a      	uxth	r2, r3
 8012822:	687b      	ldr	r3, [r7, #4]
 8012824:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8012826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012828:	68db      	ldr	r3, [r3, #12]
 801282a:	685b      	ldr	r3, [r3, #4]
 801282c:	4618      	mov	r0, r3
 801282e:	f7f9 f828 	bl	800b882 <lwip_htonl>
 8012832:	4604      	mov	r4, r0
 8012834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012836:	891b      	ldrh	r3, [r3, #8]
 8012838:	461d      	mov	r5, r3
 801283a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801283c:	68db      	ldr	r3, [r3, #12]
 801283e:	899b      	ldrh	r3, [r3, #12]
 8012840:	b29b      	uxth	r3, r3
 8012842:	4618      	mov	r0, r3
 8012844:	f7f9 f808 	bl	800b858 <lwip_htons>
 8012848:	4603      	mov	r3, r0
 801284a:	b2db      	uxtb	r3, r3
 801284c:	f003 0303 	and.w	r3, r3, #3
 8012850:	2b00      	cmp	r3, #0
 8012852:	d00d      	beq.n	8012870 <tcp_output+0x2a8>
 8012854:	2301      	movs	r3, #1
 8012856:	e00c      	b.n	8012872 <tcp_output+0x2aa>
 8012858:	0801a6ac 	.word	0x0801a6ac
 801285c:	0801abf0 	.word	0x0801abf0
 8012860:	0801a700 	.word	0x0801a700
 8012864:	0801ac08 	.word	0x0801ac08
 8012868:	2000d410 	.word	0x2000d410
 801286c:	0801ac30 	.word	0x0801ac30
 8012870:	2300      	movs	r3, #0
 8012872:	442b      	add	r3, r5
 8012874:	4423      	add	r3, r4
 8012876:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8012878:	687b      	ldr	r3, [r7, #4]
 801287a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801287c:	68bb      	ldr	r3, [r7, #8]
 801287e:	1ad3      	subs	r3, r2, r3
 8012880:	2b00      	cmp	r3, #0
 8012882:	da02      	bge.n	801288a <tcp_output+0x2c2>
      pcb->snd_nxt = snd_nxt;
 8012884:	687b      	ldr	r3, [r7, #4]
 8012886:	68ba      	ldr	r2, [r7, #8]
 8012888:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 801288a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801288c:	891b      	ldrh	r3, [r3, #8]
 801288e:	461c      	mov	r4, r3
 8012890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012892:	68db      	ldr	r3, [r3, #12]
 8012894:	899b      	ldrh	r3, [r3, #12]
 8012896:	b29b      	uxth	r3, r3
 8012898:	4618      	mov	r0, r3
 801289a:	f7f8 ffdd 	bl	800b858 <lwip_htons>
 801289e:	4603      	mov	r3, r0
 80128a0:	b2db      	uxtb	r3, r3
 80128a2:	f003 0303 	and.w	r3, r3, #3
 80128a6:	2b00      	cmp	r3, #0
 80128a8:	d001      	beq.n	80128ae <tcp_output+0x2e6>
 80128aa:	2301      	movs	r3, #1
 80128ac:	e000      	b.n	80128b0 <tcp_output+0x2e8>
 80128ae:	2300      	movs	r3, #0
 80128b0:	4423      	add	r3, r4
 80128b2:	2b00      	cmp	r3, #0
 80128b4:	d049      	beq.n	801294a <tcp_output+0x382>
      seg->next = NULL;
 80128b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80128b8:	2200      	movs	r2, #0
 80128ba:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 80128bc:	687b      	ldr	r3, [r7, #4]
 80128be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80128c0:	2b00      	cmp	r3, #0
 80128c2:	d105      	bne.n	80128d0 <tcp_output+0x308>
        pcb->unacked = seg;
 80128c4:	687b      	ldr	r3, [r7, #4]
 80128c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80128c8:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 80128ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80128cc:	623b      	str	r3, [r7, #32]
 80128ce:	e03f      	b.n	8012950 <tcp_output+0x388>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 80128d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80128d2:	68db      	ldr	r3, [r3, #12]
 80128d4:	685b      	ldr	r3, [r3, #4]
 80128d6:	4618      	mov	r0, r3
 80128d8:	f7f8 ffd3 	bl	800b882 <lwip_htonl>
 80128dc:	4604      	mov	r4, r0
 80128de:	6a3b      	ldr	r3, [r7, #32]
 80128e0:	68db      	ldr	r3, [r3, #12]
 80128e2:	685b      	ldr	r3, [r3, #4]
 80128e4:	4618      	mov	r0, r3
 80128e6:	f7f8 ffcc 	bl	800b882 <lwip_htonl>
 80128ea:	4603      	mov	r3, r0
 80128ec:	1ae3      	subs	r3, r4, r3
 80128ee:	2b00      	cmp	r3, #0
 80128f0:	da24      	bge.n	801293c <tcp_output+0x374>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 80128f2:	687b      	ldr	r3, [r7, #4]
 80128f4:	3370      	adds	r3, #112	; 0x70
 80128f6:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80128f8:	e002      	b.n	8012900 <tcp_output+0x338>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 80128fa:	69fb      	ldr	r3, [r7, #28]
 80128fc:	681b      	ldr	r3, [r3, #0]
 80128fe:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8012900:	69fb      	ldr	r3, [r7, #28]
 8012902:	681b      	ldr	r3, [r3, #0]
 8012904:	2b00      	cmp	r3, #0
 8012906:	d011      	beq.n	801292c <tcp_output+0x364>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8012908:	69fb      	ldr	r3, [r7, #28]
 801290a:	681b      	ldr	r3, [r3, #0]
 801290c:	68db      	ldr	r3, [r3, #12]
 801290e:	685b      	ldr	r3, [r3, #4]
 8012910:	4618      	mov	r0, r3
 8012912:	f7f8 ffb6 	bl	800b882 <lwip_htonl>
 8012916:	4604      	mov	r4, r0
 8012918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801291a:	68db      	ldr	r3, [r3, #12]
 801291c:	685b      	ldr	r3, [r3, #4]
 801291e:	4618      	mov	r0, r3
 8012920:	f7f8 ffaf 	bl	800b882 <lwip_htonl>
 8012924:	4603      	mov	r3, r0
 8012926:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8012928:	2b00      	cmp	r3, #0
 801292a:	dbe6      	blt.n	80128fa <tcp_output+0x332>
          }
          seg->next = (*cur_seg);
 801292c:	69fb      	ldr	r3, [r7, #28]
 801292e:	681a      	ldr	r2, [r3, #0]
 8012930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012932:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8012934:	69fb      	ldr	r3, [r7, #28]
 8012936:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012938:	601a      	str	r2, [r3, #0]
 801293a:	e009      	b.n	8012950 <tcp_output+0x388>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 801293c:	6a3b      	ldr	r3, [r7, #32]
 801293e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012940:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8012942:	6a3b      	ldr	r3, [r7, #32]
 8012944:	681b      	ldr	r3, [r3, #0]
 8012946:	623b      	str	r3, [r7, #32]
 8012948:	e002      	b.n	8012950 <tcp_output+0x388>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 801294a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801294c:	f7fb ff1a 	bl	800e784 <tcp_seg_free>
    }
    seg = pcb->unsent;
 8012950:	687b      	ldr	r3, [r7, #4]
 8012952:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012954:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8012956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012958:	2b00      	cmp	r3, #0
 801295a:	d012      	beq.n	8012982 <tcp_output+0x3ba>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 801295c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801295e:	68db      	ldr	r3, [r3, #12]
 8012960:	685b      	ldr	r3, [r3, #4]
 8012962:	4618      	mov	r0, r3
 8012964:	f7f8 ff8d 	bl	800b882 <lwip_htonl>
 8012968:	4602      	mov	r2, r0
 801296a:	687b      	ldr	r3, [r7, #4]
 801296c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801296e:	1ad3      	subs	r3, r2, r3
 8012970:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012972:	8912      	ldrh	r2, [r2, #8]
 8012974:	4413      	add	r3, r2
  while (seg != NULL &&
 8012976:	69ba      	ldr	r2, [r7, #24]
 8012978:	429a      	cmp	r2, r3
 801297a:	f4bf aeda 	bcs.w	8012732 <tcp_output+0x16a>
 801297e:	e000      	b.n	8012982 <tcp_output+0x3ba>
      break;
 8012980:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8012982:	687b      	ldr	r3, [r7, #4]
 8012984:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012986:	2b00      	cmp	r3, #0
 8012988:	d108      	bne.n	801299c <tcp_output+0x3d4>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801298a:	687b      	ldr	r3, [r7, #4]
 801298c:	2200      	movs	r2, #0
 801298e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8012992:	e004      	b.n	801299e <tcp_output+0x3d6>
    goto output_done;
 8012994:	bf00      	nop
 8012996:	e002      	b.n	801299e <tcp_output+0x3d6>
    goto output_done;
 8012998:	bf00      	nop
 801299a:	e000      	b.n	801299e <tcp_output+0x3d6>
  }
#endif /* TCP_OVERSIZE */

output_done:
 801299c:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 801299e:	687b      	ldr	r3, [r7, #4]
 80129a0:	8b5b      	ldrh	r3, [r3, #26]
 80129a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80129a6:	b29a      	uxth	r2, r3
 80129a8:	687b      	ldr	r3, [r7, #4]
 80129aa:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 80129ac:	2300      	movs	r3, #0
}
 80129ae:	4618      	mov	r0, r3
 80129b0:	3728      	adds	r7, #40	; 0x28
 80129b2:	46bd      	mov	sp, r7
 80129b4:	bdb0      	pop	{r4, r5, r7, pc}
 80129b6:	bf00      	nop

080129b8 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 80129b8:	b580      	push	{r7, lr}
 80129ba:	b082      	sub	sp, #8
 80129bc:	af00      	add	r7, sp, #0
 80129be:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 80129c0:	687b      	ldr	r3, [r7, #4]
 80129c2:	2b00      	cmp	r3, #0
 80129c4:	d106      	bne.n	80129d4 <tcp_output_segment_busy+0x1c>
 80129c6:	4b09      	ldr	r3, [pc, #36]	; (80129ec <tcp_output_segment_busy+0x34>)
 80129c8:	f240 529a 	movw	r2, #1434	; 0x59a
 80129cc:	4908      	ldr	r1, [pc, #32]	; (80129f0 <tcp_output_segment_busy+0x38>)
 80129ce:	4809      	ldr	r0, [pc, #36]	; (80129f4 <tcp_output_segment_busy+0x3c>)
 80129d0:	f004 fa46 	bl	8016e60 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 80129d4:	687b      	ldr	r3, [r7, #4]
 80129d6:	685b      	ldr	r3, [r3, #4]
 80129d8:	7b9b      	ldrb	r3, [r3, #14]
 80129da:	2b01      	cmp	r3, #1
 80129dc:	d001      	beq.n	80129e2 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 80129de:	2301      	movs	r3, #1
 80129e0:	e000      	b.n	80129e4 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 80129e2:	2300      	movs	r3, #0
}
 80129e4:	4618      	mov	r0, r3
 80129e6:	3708      	adds	r7, #8
 80129e8:	46bd      	mov	sp, r7
 80129ea:	bd80      	pop	{r7, pc}
 80129ec:	0801a6ac 	.word	0x0801a6ac
 80129f0:	0801ac48 	.word	0x0801ac48
 80129f4:	0801a700 	.word	0x0801a700

080129f8 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 80129f8:	b5b0      	push	{r4, r5, r7, lr}
 80129fa:	b08c      	sub	sp, #48	; 0x30
 80129fc:	af04      	add	r7, sp, #16
 80129fe:	60f8      	str	r0, [r7, #12]
 8012a00:	60b9      	str	r1, [r7, #8]
 8012a02:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8012a04:	68fb      	ldr	r3, [r7, #12]
 8012a06:	2b00      	cmp	r3, #0
 8012a08:	d106      	bne.n	8012a18 <tcp_output_segment+0x20>
 8012a0a:	4b64      	ldr	r3, [pc, #400]	; (8012b9c <tcp_output_segment+0x1a4>)
 8012a0c:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8012a10:	4963      	ldr	r1, [pc, #396]	; (8012ba0 <tcp_output_segment+0x1a8>)
 8012a12:	4864      	ldr	r0, [pc, #400]	; (8012ba4 <tcp_output_segment+0x1ac>)
 8012a14:	f004 fa24 	bl	8016e60 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8012a18:	68bb      	ldr	r3, [r7, #8]
 8012a1a:	2b00      	cmp	r3, #0
 8012a1c:	d106      	bne.n	8012a2c <tcp_output_segment+0x34>
 8012a1e:	4b5f      	ldr	r3, [pc, #380]	; (8012b9c <tcp_output_segment+0x1a4>)
 8012a20:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8012a24:	4960      	ldr	r1, [pc, #384]	; (8012ba8 <tcp_output_segment+0x1b0>)
 8012a26:	485f      	ldr	r0, [pc, #380]	; (8012ba4 <tcp_output_segment+0x1ac>)
 8012a28:	f004 fa1a 	bl	8016e60 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8012a2c:	687b      	ldr	r3, [r7, #4]
 8012a2e:	2b00      	cmp	r3, #0
 8012a30:	d106      	bne.n	8012a40 <tcp_output_segment+0x48>
 8012a32:	4b5a      	ldr	r3, [pc, #360]	; (8012b9c <tcp_output_segment+0x1a4>)
 8012a34:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8012a38:	495c      	ldr	r1, [pc, #368]	; (8012bac <tcp_output_segment+0x1b4>)
 8012a3a:	485a      	ldr	r0, [pc, #360]	; (8012ba4 <tcp_output_segment+0x1ac>)
 8012a3c:	f004 fa10 	bl	8016e60 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8012a40:	68f8      	ldr	r0, [r7, #12]
 8012a42:	f7ff ffb9 	bl	80129b8 <tcp_output_segment_busy>
 8012a46:	4603      	mov	r3, r0
 8012a48:	2b00      	cmp	r3, #0
 8012a4a:	d001      	beq.n	8012a50 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8012a4c:	2300      	movs	r3, #0
 8012a4e:	e0a0      	b.n	8012b92 <tcp_output_segment+0x19a>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8012a50:	68bb      	ldr	r3, [r7, #8]
 8012a52:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012a54:	68fb      	ldr	r3, [r7, #12]
 8012a56:	68dc      	ldr	r4, [r3, #12]
 8012a58:	4610      	mov	r0, r2
 8012a5a:	f7f8 ff12 	bl	800b882 <lwip_htonl>
 8012a5e:	4603      	mov	r3, r0
 8012a60:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8012a62:	68bb      	ldr	r3, [r7, #8]
 8012a64:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8012a66:	68fb      	ldr	r3, [r7, #12]
 8012a68:	68dc      	ldr	r4, [r3, #12]
 8012a6a:	4610      	mov	r0, r2
 8012a6c:	f7f8 fef4 	bl	800b858 <lwip_htons>
 8012a70:	4603      	mov	r3, r0
 8012a72:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8012a74:	68bb      	ldr	r3, [r7, #8]
 8012a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012a78:	68ba      	ldr	r2, [r7, #8]
 8012a7a:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8012a7c:	441a      	add	r2, r3
 8012a7e:	68bb      	ldr	r3, [r7, #8]
 8012a80:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8012a82:	68fb      	ldr	r3, [r7, #12]
 8012a84:	68db      	ldr	r3, [r3, #12]
 8012a86:	3314      	adds	r3, #20
 8012a88:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8012a8a:	68fb      	ldr	r3, [r7, #12]
 8012a8c:	7a9b      	ldrb	r3, [r3, #10]
 8012a8e:	f003 0301 	and.w	r3, r3, #1
 8012a92:	2b00      	cmp	r3, #0
 8012a94:	d015      	beq.n	8012ac2 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8012a96:	68bb      	ldr	r3, [r7, #8]
 8012a98:	3304      	adds	r3, #4
 8012a9a:	461a      	mov	r2, r3
 8012a9c:	6879      	ldr	r1, [r7, #4]
 8012a9e:	f44f 7006 	mov.w	r0, #536	; 0x218
 8012aa2:	f7fc fa33 	bl	800ef0c <tcp_eff_send_mss_netif>
 8012aa6:	4603      	mov	r3, r0
 8012aa8:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8012aaa:	8b7b      	ldrh	r3, [r7, #26]
 8012aac:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8012ab0:	4618      	mov	r0, r3
 8012ab2:	f7f8 fee6 	bl	800b882 <lwip_htonl>
 8012ab6:	4602      	mov	r2, r0
 8012ab8:	69fb      	ldr	r3, [r7, #28]
 8012aba:	601a      	str	r2, [r3, #0]
    opts += 1;
 8012abc:	69fb      	ldr	r3, [r7, #28]
 8012abe:	3304      	adds	r3, #4
 8012ac0:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8012ac2:	68bb      	ldr	r3, [r7, #8]
 8012ac4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8012ac8:	2b00      	cmp	r3, #0
 8012aca:	da02      	bge.n	8012ad2 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8012acc:	68bb      	ldr	r3, [r7, #8]
 8012ace:	2200      	movs	r2, #0
 8012ad0:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8012ad2:	68bb      	ldr	r3, [r7, #8]
 8012ad4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012ad6:	2b00      	cmp	r3, #0
 8012ad8:	d10c      	bne.n	8012af4 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8012ada:	4b35      	ldr	r3, [pc, #212]	; (8012bb0 <tcp_output_segment+0x1b8>)
 8012adc:	681a      	ldr	r2, [r3, #0]
 8012ade:	68bb      	ldr	r3, [r7, #8]
 8012ae0:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8012ae2:	68fb      	ldr	r3, [r7, #12]
 8012ae4:	68db      	ldr	r3, [r3, #12]
 8012ae6:	685b      	ldr	r3, [r3, #4]
 8012ae8:	4618      	mov	r0, r3
 8012aea:	f7f8 feca 	bl	800b882 <lwip_htonl>
 8012aee:	4602      	mov	r2, r0
 8012af0:	68bb      	ldr	r3, [r7, #8]
 8012af2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8012af4:	68fb      	ldr	r3, [r7, #12]
 8012af6:	68db      	ldr	r3, [r3, #12]
 8012af8:	461a      	mov	r2, r3
 8012afa:	68fb      	ldr	r3, [r7, #12]
 8012afc:	685b      	ldr	r3, [r3, #4]
 8012afe:	685b      	ldr	r3, [r3, #4]
 8012b00:	1ad3      	subs	r3, r2, r3
 8012b02:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8012b04:	68fb      	ldr	r3, [r7, #12]
 8012b06:	685b      	ldr	r3, [r3, #4]
 8012b08:	8959      	ldrh	r1, [r3, #10]
 8012b0a:	68fb      	ldr	r3, [r7, #12]
 8012b0c:	685b      	ldr	r3, [r3, #4]
 8012b0e:	8b3a      	ldrh	r2, [r7, #24]
 8012b10:	1a8a      	subs	r2, r1, r2
 8012b12:	b292      	uxth	r2, r2
 8012b14:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8012b16:	68fb      	ldr	r3, [r7, #12]
 8012b18:	685b      	ldr	r3, [r3, #4]
 8012b1a:	8919      	ldrh	r1, [r3, #8]
 8012b1c:	68fb      	ldr	r3, [r7, #12]
 8012b1e:	685b      	ldr	r3, [r3, #4]
 8012b20:	8b3a      	ldrh	r2, [r7, #24]
 8012b22:	1a8a      	subs	r2, r1, r2
 8012b24:	b292      	uxth	r2, r2
 8012b26:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8012b28:	68fb      	ldr	r3, [r7, #12]
 8012b2a:	685b      	ldr	r3, [r3, #4]
 8012b2c:	68fa      	ldr	r2, [r7, #12]
 8012b2e:	68d2      	ldr	r2, [r2, #12]
 8012b30:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8012b32:	68fb      	ldr	r3, [r7, #12]
 8012b34:	68db      	ldr	r3, [r3, #12]
 8012b36:	2200      	movs	r2, #0
 8012b38:	741a      	strb	r2, [r3, #16]
 8012b3a:	2200      	movs	r2, #0
 8012b3c:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8012b3e:	68fb      	ldr	r3, [r7, #12]
 8012b40:	68db      	ldr	r3, [r3, #12]
 8012b42:	f103 0214 	add.w	r2, r3, #20
 8012b46:	68fb      	ldr	r3, [r7, #12]
 8012b48:	7a9b      	ldrb	r3, [r3, #10]
 8012b4a:	009b      	lsls	r3, r3, #2
 8012b4c:	f003 0304 	and.w	r3, r3, #4
 8012b50:	4413      	add	r3, r2
 8012b52:	69fa      	ldr	r2, [r7, #28]
 8012b54:	429a      	cmp	r2, r3
 8012b56:	d006      	beq.n	8012b66 <tcp_output_segment+0x16e>
 8012b58:	4b10      	ldr	r3, [pc, #64]	; (8012b9c <tcp_output_segment+0x1a4>)
 8012b5a:	f240 621c 	movw	r2, #1564	; 0x61c
 8012b5e:	4915      	ldr	r1, [pc, #84]	; (8012bb4 <tcp_output_segment+0x1bc>)
 8012b60:	4810      	ldr	r0, [pc, #64]	; (8012ba4 <tcp_output_segment+0x1ac>)
 8012b62:	f004 f97d 	bl	8016e60 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8012b66:	68fb      	ldr	r3, [r7, #12]
 8012b68:	6858      	ldr	r0, [r3, #4]
 8012b6a:	68b9      	ldr	r1, [r7, #8]
 8012b6c:	68bb      	ldr	r3, [r7, #8]
 8012b6e:	1d1c      	adds	r4, r3, #4
 8012b70:	68bb      	ldr	r3, [r7, #8]
 8012b72:	7add      	ldrb	r5, [r3, #11]
 8012b74:	68bb      	ldr	r3, [r7, #8]
 8012b76:	7a9b      	ldrb	r3, [r3, #10]
 8012b78:	687a      	ldr	r2, [r7, #4]
 8012b7a:	9202      	str	r2, [sp, #8]
 8012b7c:	2206      	movs	r2, #6
 8012b7e:	9201      	str	r2, [sp, #4]
 8012b80:	9300      	str	r3, [sp, #0]
 8012b82:	462b      	mov	r3, r5
 8012b84:	4622      	mov	r2, r4
 8012b86:	f002 fd9f 	bl	80156c8 <ip4_output_if>
 8012b8a:	4603      	mov	r3, r0
 8012b8c:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8012b8e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012b92:	4618      	mov	r0, r3
 8012b94:	3720      	adds	r7, #32
 8012b96:	46bd      	mov	sp, r7
 8012b98:	bdb0      	pop	{r4, r5, r7, pc}
 8012b9a:	bf00      	nop
 8012b9c:	0801a6ac 	.word	0x0801a6ac
 8012ba0:	0801ac70 	.word	0x0801ac70
 8012ba4:	0801a700 	.word	0x0801a700
 8012ba8:	0801ac90 	.word	0x0801ac90
 8012bac:	0801acb0 	.word	0x0801acb0
 8012bb0:	2000d400 	.word	0x2000d400
 8012bb4:	0801acd4 	.word	0x0801acd4

08012bb8 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8012bb8:	b5b0      	push	{r4, r5, r7, lr}
 8012bba:	b084      	sub	sp, #16
 8012bbc:	af00      	add	r7, sp, #0
 8012bbe:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8012bc0:	687b      	ldr	r3, [r7, #4]
 8012bc2:	2b00      	cmp	r3, #0
 8012bc4:	d106      	bne.n	8012bd4 <tcp_rexmit_rto_prepare+0x1c>
 8012bc6:	4b31      	ldr	r3, [pc, #196]	; (8012c8c <tcp_rexmit_rto_prepare+0xd4>)
 8012bc8:	f240 6263 	movw	r2, #1635	; 0x663
 8012bcc:	4930      	ldr	r1, [pc, #192]	; (8012c90 <tcp_rexmit_rto_prepare+0xd8>)
 8012bce:	4831      	ldr	r0, [pc, #196]	; (8012c94 <tcp_rexmit_rto_prepare+0xdc>)
 8012bd0:	f004 f946 	bl	8016e60 <iprintf>

  if (pcb->unacked == NULL) {
 8012bd4:	687b      	ldr	r3, [r7, #4]
 8012bd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012bd8:	2b00      	cmp	r3, #0
 8012bda:	d102      	bne.n	8012be2 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8012bdc:	f06f 0305 	mvn.w	r3, #5
 8012be0:	e050      	b.n	8012c84 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8012be2:	687b      	ldr	r3, [r7, #4]
 8012be4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012be6:	60fb      	str	r3, [r7, #12]
 8012be8:	e00b      	b.n	8012c02 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8012bea:	68f8      	ldr	r0, [r7, #12]
 8012bec:	f7ff fee4 	bl	80129b8 <tcp_output_segment_busy>
 8012bf0:	4603      	mov	r3, r0
 8012bf2:	2b00      	cmp	r3, #0
 8012bf4:	d002      	beq.n	8012bfc <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8012bf6:	f06f 0305 	mvn.w	r3, #5
 8012bfa:	e043      	b.n	8012c84 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8012bfc:	68fb      	ldr	r3, [r7, #12]
 8012bfe:	681b      	ldr	r3, [r3, #0]
 8012c00:	60fb      	str	r3, [r7, #12]
 8012c02:	68fb      	ldr	r3, [r7, #12]
 8012c04:	681b      	ldr	r3, [r3, #0]
 8012c06:	2b00      	cmp	r3, #0
 8012c08:	d1ef      	bne.n	8012bea <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8012c0a:	68f8      	ldr	r0, [r7, #12]
 8012c0c:	f7ff fed4 	bl	80129b8 <tcp_output_segment_busy>
 8012c10:	4603      	mov	r3, r0
 8012c12:	2b00      	cmp	r3, #0
 8012c14:	d002      	beq.n	8012c1c <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8012c16:	f06f 0305 	mvn.w	r3, #5
 8012c1a:	e033      	b.n	8012c84 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8012c1c:	687b      	ldr	r3, [r7, #4]
 8012c1e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8012c20:	68fb      	ldr	r3, [r7, #12]
 8012c22:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8012c24:	687b      	ldr	r3, [r7, #4]
 8012c26:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8012c28:	687b      	ldr	r3, [r7, #4]
 8012c2a:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8012c2c:	687b      	ldr	r3, [r7, #4]
 8012c2e:	2200      	movs	r2, #0
 8012c30:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8012c32:	687b      	ldr	r3, [r7, #4]
 8012c34:	8b5b      	ldrh	r3, [r3, #26]
 8012c36:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8012c3a:	b29a      	uxth	r2, r3
 8012c3c:	687b      	ldr	r3, [r7, #4]
 8012c3e:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8012c40:	68fb      	ldr	r3, [r7, #12]
 8012c42:	68db      	ldr	r3, [r3, #12]
 8012c44:	685b      	ldr	r3, [r3, #4]
 8012c46:	4618      	mov	r0, r3
 8012c48:	f7f8 fe1b 	bl	800b882 <lwip_htonl>
 8012c4c:	4604      	mov	r4, r0
 8012c4e:	68fb      	ldr	r3, [r7, #12]
 8012c50:	891b      	ldrh	r3, [r3, #8]
 8012c52:	461d      	mov	r5, r3
 8012c54:	68fb      	ldr	r3, [r7, #12]
 8012c56:	68db      	ldr	r3, [r3, #12]
 8012c58:	899b      	ldrh	r3, [r3, #12]
 8012c5a:	b29b      	uxth	r3, r3
 8012c5c:	4618      	mov	r0, r3
 8012c5e:	f7f8 fdfb 	bl	800b858 <lwip_htons>
 8012c62:	4603      	mov	r3, r0
 8012c64:	b2db      	uxtb	r3, r3
 8012c66:	f003 0303 	and.w	r3, r3, #3
 8012c6a:	2b00      	cmp	r3, #0
 8012c6c:	d001      	beq.n	8012c72 <tcp_rexmit_rto_prepare+0xba>
 8012c6e:	2301      	movs	r3, #1
 8012c70:	e000      	b.n	8012c74 <tcp_rexmit_rto_prepare+0xbc>
 8012c72:	2300      	movs	r3, #0
 8012c74:	442b      	add	r3, r5
 8012c76:	18e2      	adds	r2, r4, r3
 8012c78:	687b      	ldr	r3, [r7, #4]
 8012c7a:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8012c7c:	687b      	ldr	r3, [r7, #4]
 8012c7e:	2200      	movs	r2, #0
 8012c80:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 8012c82:	2300      	movs	r3, #0
}
 8012c84:	4618      	mov	r0, r3
 8012c86:	3710      	adds	r7, #16
 8012c88:	46bd      	mov	sp, r7
 8012c8a:	bdb0      	pop	{r4, r5, r7, pc}
 8012c8c:	0801a6ac 	.word	0x0801a6ac
 8012c90:	0801ace8 	.word	0x0801ace8
 8012c94:	0801a700 	.word	0x0801a700

08012c98 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8012c98:	b580      	push	{r7, lr}
 8012c9a:	b082      	sub	sp, #8
 8012c9c:	af00      	add	r7, sp, #0
 8012c9e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8012ca0:	687b      	ldr	r3, [r7, #4]
 8012ca2:	2b00      	cmp	r3, #0
 8012ca4:	d106      	bne.n	8012cb4 <tcp_rexmit_rto_commit+0x1c>
 8012ca6:	4b0d      	ldr	r3, [pc, #52]	; (8012cdc <tcp_rexmit_rto_commit+0x44>)
 8012ca8:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8012cac:	490c      	ldr	r1, [pc, #48]	; (8012ce0 <tcp_rexmit_rto_commit+0x48>)
 8012cae:	480d      	ldr	r0, [pc, #52]	; (8012ce4 <tcp_rexmit_rto_commit+0x4c>)
 8012cb0:	f004 f8d6 	bl	8016e60 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8012cb4:	687b      	ldr	r3, [r7, #4]
 8012cb6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012cba:	2bff      	cmp	r3, #255	; 0xff
 8012cbc:	d007      	beq.n	8012cce <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8012cbe:	687b      	ldr	r3, [r7, #4]
 8012cc0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012cc4:	3301      	adds	r3, #1
 8012cc6:	b2da      	uxtb	r2, r3
 8012cc8:	687b      	ldr	r3, [r7, #4]
 8012cca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8012cce:	6878      	ldr	r0, [r7, #4]
 8012cd0:	f7ff fc7a 	bl	80125c8 <tcp_output>
}
 8012cd4:	bf00      	nop
 8012cd6:	3708      	adds	r7, #8
 8012cd8:	46bd      	mov	sp, r7
 8012cda:	bd80      	pop	{r7, pc}
 8012cdc:	0801a6ac 	.word	0x0801a6ac
 8012ce0:	0801ad0c 	.word	0x0801ad0c
 8012ce4:	0801a700 	.word	0x0801a700

08012ce8 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8012ce8:	b580      	push	{r7, lr}
 8012cea:	b082      	sub	sp, #8
 8012cec:	af00      	add	r7, sp, #0
 8012cee:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8012cf0:	687b      	ldr	r3, [r7, #4]
 8012cf2:	2b00      	cmp	r3, #0
 8012cf4:	d106      	bne.n	8012d04 <tcp_rexmit_rto+0x1c>
 8012cf6:	4b0a      	ldr	r3, [pc, #40]	; (8012d20 <tcp_rexmit_rto+0x38>)
 8012cf8:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8012cfc:	4909      	ldr	r1, [pc, #36]	; (8012d24 <tcp_rexmit_rto+0x3c>)
 8012cfe:	480a      	ldr	r0, [pc, #40]	; (8012d28 <tcp_rexmit_rto+0x40>)
 8012d00:	f004 f8ae 	bl	8016e60 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8012d04:	6878      	ldr	r0, [r7, #4]
 8012d06:	f7ff ff57 	bl	8012bb8 <tcp_rexmit_rto_prepare>
 8012d0a:	4603      	mov	r3, r0
 8012d0c:	2b00      	cmp	r3, #0
 8012d0e:	d102      	bne.n	8012d16 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8012d10:	6878      	ldr	r0, [r7, #4]
 8012d12:	f7ff ffc1 	bl	8012c98 <tcp_rexmit_rto_commit>
  }
}
 8012d16:	bf00      	nop
 8012d18:	3708      	adds	r7, #8
 8012d1a:	46bd      	mov	sp, r7
 8012d1c:	bd80      	pop	{r7, pc}
 8012d1e:	bf00      	nop
 8012d20:	0801a6ac 	.word	0x0801a6ac
 8012d24:	0801ad30 	.word	0x0801ad30
 8012d28:	0801a700 	.word	0x0801a700

08012d2c <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8012d2c:	b590      	push	{r4, r7, lr}
 8012d2e:	b085      	sub	sp, #20
 8012d30:	af00      	add	r7, sp, #0
 8012d32:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8012d34:	687b      	ldr	r3, [r7, #4]
 8012d36:	2b00      	cmp	r3, #0
 8012d38:	d106      	bne.n	8012d48 <tcp_rexmit+0x1c>
 8012d3a:	4b2f      	ldr	r3, [pc, #188]	; (8012df8 <tcp_rexmit+0xcc>)
 8012d3c:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8012d40:	492e      	ldr	r1, [pc, #184]	; (8012dfc <tcp_rexmit+0xd0>)
 8012d42:	482f      	ldr	r0, [pc, #188]	; (8012e00 <tcp_rexmit+0xd4>)
 8012d44:	f004 f88c 	bl	8016e60 <iprintf>

  if (pcb->unacked == NULL) {
 8012d48:	687b      	ldr	r3, [r7, #4]
 8012d4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012d4c:	2b00      	cmp	r3, #0
 8012d4e:	d102      	bne.n	8012d56 <tcp_rexmit+0x2a>
    return ERR_VAL;
 8012d50:	f06f 0305 	mvn.w	r3, #5
 8012d54:	e04c      	b.n	8012df0 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8012d56:	687b      	ldr	r3, [r7, #4]
 8012d58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012d5a:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8012d5c:	68b8      	ldr	r0, [r7, #8]
 8012d5e:	f7ff fe2b 	bl	80129b8 <tcp_output_segment_busy>
 8012d62:	4603      	mov	r3, r0
 8012d64:	2b00      	cmp	r3, #0
 8012d66:	d002      	beq.n	8012d6e <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8012d68:	f06f 0305 	mvn.w	r3, #5
 8012d6c:	e040      	b.n	8012df0 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8012d6e:	68bb      	ldr	r3, [r7, #8]
 8012d70:	681a      	ldr	r2, [r3, #0]
 8012d72:	687b      	ldr	r3, [r7, #4]
 8012d74:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 8012d76:	687b      	ldr	r3, [r7, #4]
 8012d78:	336c      	adds	r3, #108	; 0x6c
 8012d7a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8012d7c:	e002      	b.n	8012d84 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8012d7e:	68fb      	ldr	r3, [r7, #12]
 8012d80:	681b      	ldr	r3, [r3, #0]
 8012d82:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8012d84:	68fb      	ldr	r3, [r7, #12]
 8012d86:	681b      	ldr	r3, [r3, #0]
 8012d88:	2b00      	cmp	r3, #0
 8012d8a:	d011      	beq.n	8012db0 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8012d8c:	68fb      	ldr	r3, [r7, #12]
 8012d8e:	681b      	ldr	r3, [r3, #0]
 8012d90:	68db      	ldr	r3, [r3, #12]
 8012d92:	685b      	ldr	r3, [r3, #4]
 8012d94:	4618      	mov	r0, r3
 8012d96:	f7f8 fd74 	bl	800b882 <lwip_htonl>
 8012d9a:	4604      	mov	r4, r0
 8012d9c:	68bb      	ldr	r3, [r7, #8]
 8012d9e:	68db      	ldr	r3, [r3, #12]
 8012da0:	685b      	ldr	r3, [r3, #4]
 8012da2:	4618      	mov	r0, r3
 8012da4:	f7f8 fd6d 	bl	800b882 <lwip_htonl>
 8012da8:	4603      	mov	r3, r0
 8012daa:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8012dac:	2b00      	cmp	r3, #0
 8012dae:	dbe6      	blt.n	8012d7e <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8012db0:	68fb      	ldr	r3, [r7, #12]
 8012db2:	681a      	ldr	r2, [r3, #0]
 8012db4:	68bb      	ldr	r3, [r7, #8]
 8012db6:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8012db8:	68fb      	ldr	r3, [r7, #12]
 8012dba:	68ba      	ldr	r2, [r7, #8]
 8012dbc:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8012dbe:	68bb      	ldr	r3, [r7, #8]
 8012dc0:	681b      	ldr	r3, [r3, #0]
 8012dc2:	2b00      	cmp	r3, #0
 8012dc4:	d103      	bne.n	8012dce <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8012dc6:	687b      	ldr	r3, [r7, #4]
 8012dc8:	2200      	movs	r2, #0
 8012dca:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8012dce:	687b      	ldr	r3, [r7, #4]
 8012dd0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012dd4:	2bff      	cmp	r3, #255	; 0xff
 8012dd6:	d007      	beq.n	8012de8 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8012dd8:	687b      	ldr	r3, [r7, #4]
 8012dda:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012dde:	3301      	adds	r3, #1
 8012de0:	b2da      	uxtb	r2, r3
 8012de2:	687b      	ldr	r3, [r7, #4]
 8012de4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8012de8:	687b      	ldr	r3, [r7, #4]
 8012dea:	2200      	movs	r2, #0
 8012dec:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8012dee:	2300      	movs	r3, #0
}
 8012df0:	4618      	mov	r0, r3
 8012df2:	3714      	adds	r7, #20
 8012df4:	46bd      	mov	sp, r7
 8012df6:	bd90      	pop	{r4, r7, pc}
 8012df8:	0801a6ac 	.word	0x0801a6ac
 8012dfc:	0801ad4c 	.word	0x0801ad4c
 8012e00:	0801a700 	.word	0x0801a700

08012e04 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8012e04:	b580      	push	{r7, lr}
 8012e06:	b082      	sub	sp, #8
 8012e08:	af00      	add	r7, sp, #0
 8012e0a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8012e0c:	687b      	ldr	r3, [r7, #4]
 8012e0e:	2b00      	cmp	r3, #0
 8012e10:	d106      	bne.n	8012e20 <tcp_rexmit_fast+0x1c>
 8012e12:	4b2f      	ldr	r3, [pc, #188]	; (8012ed0 <tcp_rexmit_fast+0xcc>)
 8012e14:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8012e18:	492e      	ldr	r1, [pc, #184]	; (8012ed4 <tcp_rexmit_fast+0xd0>)
 8012e1a:	482f      	ldr	r0, [pc, #188]	; (8012ed8 <tcp_rexmit_fast+0xd4>)
 8012e1c:	f004 f820 	bl	8016e60 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8012e20:	687b      	ldr	r3, [r7, #4]
 8012e22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012e24:	2b00      	cmp	r3, #0
 8012e26:	d04f      	beq.n	8012ec8 <tcp_rexmit_fast+0xc4>
 8012e28:	687b      	ldr	r3, [r7, #4]
 8012e2a:	8b5b      	ldrh	r3, [r3, #26]
 8012e2c:	f003 0304 	and.w	r3, r3, #4
 8012e30:	2b00      	cmp	r3, #0
 8012e32:	d149      	bne.n	8012ec8 <tcp_rexmit_fast+0xc4>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8012e34:	6878      	ldr	r0, [r7, #4]
 8012e36:	f7ff ff79 	bl	8012d2c <tcp_rexmit>
 8012e3a:	4603      	mov	r3, r0
 8012e3c:	2b00      	cmp	r3, #0
 8012e3e:	d143      	bne.n	8012ec8 <tcp_rexmit_fast+0xc4>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8012e40:	687b      	ldr	r3, [r7, #4]
 8012e42:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8012e46:	687b      	ldr	r3, [r7, #4]
 8012e48:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8012e4c:	429a      	cmp	r2, r3
 8012e4e:	d208      	bcs.n	8012e62 <tcp_rexmit_fast+0x5e>
 8012e50:	687b      	ldr	r3, [r7, #4]
 8012e52:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012e56:	2b00      	cmp	r3, #0
 8012e58:	da00      	bge.n	8012e5c <tcp_rexmit_fast+0x58>
 8012e5a:	3301      	adds	r3, #1
 8012e5c:	105b      	asrs	r3, r3, #1
 8012e5e:	b29b      	uxth	r3, r3
 8012e60:	e007      	b.n	8012e72 <tcp_rexmit_fast+0x6e>
 8012e62:	687b      	ldr	r3, [r7, #4]
 8012e64:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8012e68:	2b00      	cmp	r3, #0
 8012e6a:	da00      	bge.n	8012e6e <tcp_rexmit_fast+0x6a>
 8012e6c:	3301      	adds	r3, #1
 8012e6e:	105b      	asrs	r3, r3, #1
 8012e70:	b29b      	uxth	r3, r3
 8012e72:	687a      	ldr	r2, [r7, #4]
 8012e74:	f8a2 304a 	strh.w	r3, [r2, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8012e78:	687b      	ldr	r3, [r7, #4]
 8012e7a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8012e7e:	461a      	mov	r2, r3
 8012e80:	687b      	ldr	r3, [r7, #4]
 8012e82:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012e84:	005b      	lsls	r3, r3, #1
 8012e86:	429a      	cmp	r2, r3
 8012e88:	d206      	bcs.n	8012e98 <tcp_rexmit_fast+0x94>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8012e8a:	687b      	ldr	r3, [r7, #4]
 8012e8c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012e8e:	005b      	lsls	r3, r3, #1
 8012e90:	b29a      	uxth	r2, r3
 8012e92:	687b      	ldr	r3, [r7, #4]
 8012e94:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8012e98:	687b      	ldr	r3, [r7, #4]
 8012e9a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8012e9e:	687b      	ldr	r3, [r7, #4]
 8012ea0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012ea2:	4619      	mov	r1, r3
 8012ea4:	0049      	lsls	r1, r1, #1
 8012ea6:	440b      	add	r3, r1
 8012ea8:	b29b      	uxth	r3, r3
 8012eaa:	4413      	add	r3, r2
 8012eac:	b29a      	uxth	r2, r3
 8012eae:	687b      	ldr	r3, [r7, #4]
 8012eb0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8012eb4:	687b      	ldr	r3, [r7, #4]
 8012eb6:	8b5b      	ldrh	r3, [r3, #26]
 8012eb8:	f043 0304 	orr.w	r3, r3, #4
 8012ebc:	b29a      	uxth	r2, r3
 8012ebe:	687b      	ldr	r3, [r7, #4]
 8012ec0:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8012ec2:	687b      	ldr	r3, [r7, #4]
 8012ec4:	2200      	movs	r2, #0
 8012ec6:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 8012ec8:	bf00      	nop
 8012eca:	3708      	adds	r7, #8
 8012ecc:	46bd      	mov	sp, r7
 8012ece:	bd80      	pop	{r7, pc}
 8012ed0:	0801a6ac 	.word	0x0801a6ac
 8012ed4:	0801ad64 	.word	0x0801ad64
 8012ed8:	0801a700 	.word	0x0801a700

08012edc <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8012edc:	b580      	push	{r7, lr}
 8012ede:	b086      	sub	sp, #24
 8012ee0:	af00      	add	r7, sp, #0
 8012ee2:	60f8      	str	r0, [r7, #12]
 8012ee4:	607b      	str	r3, [r7, #4]
 8012ee6:	460b      	mov	r3, r1
 8012ee8:	817b      	strh	r3, [r7, #10]
 8012eea:	4613      	mov	r3, r2
 8012eec:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8012eee:	897a      	ldrh	r2, [r7, #10]
 8012ef0:	893b      	ldrh	r3, [r7, #8]
 8012ef2:	4413      	add	r3, r2
 8012ef4:	b29b      	uxth	r3, r3
 8012ef6:	3314      	adds	r3, #20
 8012ef8:	b29b      	uxth	r3, r3
 8012efa:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012efe:	4619      	mov	r1, r3
 8012f00:	2022      	movs	r0, #34	; 0x22
 8012f02:	f7f9 fd71 	bl	800c9e8 <pbuf_alloc>
 8012f06:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8012f08:	697b      	ldr	r3, [r7, #20]
 8012f0a:	2b00      	cmp	r3, #0
 8012f0c:	d04e      	beq.n	8012fac <tcp_output_alloc_header_common+0xd0>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8012f0e:	697b      	ldr	r3, [r7, #20]
 8012f10:	895b      	ldrh	r3, [r3, #10]
 8012f12:	461a      	mov	r2, r3
 8012f14:	897b      	ldrh	r3, [r7, #10]
 8012f16:	3314      	adds	r3, #20
 8012f18:	429a      	cmp	r2, r3
 8012f1a:	da06      	bge.n	8012f2a <tcp_output_alloc_header_common+0x4e>
 8012f1c:	4b26      	ldr	r3, [pc, #152]	; (8012fb8 <tcp_output_alloc_header_common+0xdc>)
 8012f1e:	f240 7224 	movw	r2, #1828	; 0x724
 8012f22:	4926      	ldr	r1, [pc, #152]	; (8012fbc <tcp_output_alloc_header_common+0xe0>)
 8012f24:	4826      	ldr	r0, [pc, #152]	; (8012fc0 <tcp_output_alloc_header_common+0xe4>)
 8012f26:	f003 ff9b 	bl	8016e60 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8012f2a:	697b      	ldr	r3, [r7, #20]
 8012f2c:	685b      	ldr	r3, [r3, #4]
 8012f2e:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8012f30:	8c3b      	ldrh	r3, [r7, #32]
 8012f32:	4618      	mov	r0, r3
 8012f34:	f7f8 fc90 	bl	800b858 <lwip_htons>
 8012f38:	4603      	mov	r3, r0
 8012f3a:	461a      	mov	r2, r3
 8012f3c:	693b      	ldr	r3, [r7, #16]
 8012f3e:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8012f40:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012f42:	4618      	mov	r0, r3
 8012f44:	f7f8 fc88 	bl	800b858 <lwip_htons>
 8012f48:	4603      	mov	r3, r0
 8012f4a:	461a      	mov	r2, r3
 8012f4c:	693b      	ldr	r3, [r7, #16]
 8012f4e:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8012f50:	693b      	ldr	r3, [r7, #16]
 8012f52:	687a      	ldr	r2, [r7, #4]
 8012f54:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8012f56:	68f8      	ldr	r0, [r7, #12]
 8012f58:	f7f8 fc93 	bl	800b882 <lwip_htonl>
 8012f5c:	4602      	mov	r2, r0
 8012f5e:	693b      	ldr	r3, [r7, #16]
 8012f60:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8012f62:	897b      	ldrh	r3, [r7, #10]
 8012f64:	089b      	lsrs	r3, r3, #2
 8012f66:	b29b      	uxth	r3, r3
 8012f68:	3305      	adds	r3, #5
 8012f6a:	b29b      	uxth	r3, r3
 8012f6c:	031b      	lsls	r3, r3, #12
 8012f6e:	b29a      	uxth	r2, r3
 8012f70:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8012f74:	b29b      	uxth	r3, r3
 8012f76:	4313      	orrs	r3, r2
 8012f78:	b29b      	uxth	r3, r3
 8012f7a:	4618      	mov	r0, r3
 8012f7c:	f7f8 fc6c 	bl	800b858 <lwip_htons>
 8012f80:	4603      	mov	r3, r0
 8012f82:	461a      	mov	r2, r3
 8012f84:	693b      	ldr	r3, [r7, #16]
 8012f86:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8012f88:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8012f8a:	4618      	mov	r0, r3
 8012f8c:	f7f8 fc64 	bl	800b858 <lwip_htons>
 8012f90:	4603      	mov	r3, r0
 8012f92:	461a      	mov	r2, r3
 8012f94:	693b      	ldr	r3, [r7, #16]
 8012f96:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8012f98:	693b      	ldr	r3, [r7, #16]
 8012f9a:	2200      	movs	r2, #0
 8012f9c:	741a      	strb	r2, [r3, #16]
 8012f9e:	2200      	movs	r2, #0
 8012fa0:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8012fa2:	693b      	ldr	r3, [r7, #16]
 8012fa4:	2200      	movs	r2, #0
 8012fa6:	749a      	strb	r2, [r3, #18]
 8012fa8:	2200      	movs	r2, #0
 8012faa:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8012fac:	697b      	ldr	r3, [r7, #20]
}
 8012fae:	4618      	mov	r0, r3
 8012fb0:	3718      	adds	r7, #24
 8012fb2:	46bd      	mov	sp, r7
 8012fb4:	bd80      	pop	{r7, pc}
 8012fb6:	bf00      	nop
 8012fb8:	0801a6ac 	.word	0x0801a6ac
 8012fbc:	0801ad84 	.word	0x0801ad84
 8012fc0:	0801a700 	.word	0x0801a700

08012fc4 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8012fc4:	b5b0      	push	{r4, r5, r7, lr}
 8012fc6:	b08a      	sub	sp, #40	; 0x28
 8012fc8:	af04      	add	r7, sp, #16
 8012fca:	60f8      	str	r0, [r7, #12]
 8012fcc:	607b      	str	r3, [r7, #4]
 8012fce:	460b      	mov	r3, r1
 8012fd0:	817b      	strh	r3, [r7, #10]
 8012fd2:	4613      	mov	r3, r2
 8012fd4:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8012fd6:	68fb      	ldr	r3, [r7, #12]
 8012fd8:	2b00      	cmp	r3, #0
 8012fda:	d106      	bne.n	8012fea <tcp_output_alloc_header+0x26>
 8012fdc:	4b15      	ldr	r3, [pc, #84]	; (8013034 <tcp_output_alloc_header+0x70>)
 8012fde:	f240 7242 	movw	r2, #1858	; 0x742
 8012fe2:	4915      	ldr	r1, [pc, #84]	; (8013038 <tcp_output_alloc_header+0x74>)
 8012fe4:	4815      	ldr	r0, [pc, #84]	; (801303c <tcp_output_alloc_header+0x78>)
 8012fe6:	f003 ff3b 	bl	8016e60 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8012fea:	68fb      	ldr	r3, [r7, #12]
 8012fec:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8012fee:	68fb      	ldr	r3, [r7, #12]
 8012ff0:	8adb      	ldrh	r3, [r3, #22]
 8012ff2:	68fa      	ldr	r2, [r7, #12]
 8012ff4:	8b12      	ldrh	r2, [r2, #24]
 8012ff6:	68f9      	ldr	r1, [r7, #12]
 8012ff8:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 8012ffa:	893d      	ldrh	r5, [r7, #8]
 8012ffc:	897c      	ldrh	r4, [r7, #10]
 8012ffe:	9103      	str	r1, [sp, #12]
 8013000:	2110      	movs	r1, #16
 8013002:	9102      	str	r1, [sp, #8]
 8013004:	9201      	str	r2, [sp, #4]
 8013006:	9300      	str	r3, [sp, #0]
 8013008:	687b      	ldr	r3, [r7, #4]
 801300a:	462a      	mov	r2, r5
 801300c:	4621      	mov	r1, r4
 801300e:	f7ff ff65 	bl	8012edc <tcp_output_alloc_header_common>
 8013012:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8013014:	697b      	ldr	r3, [r7, #20]
 8013016:	2b00      	cmp	r3, #0
 8013018:	d006      	beq.n	8013028 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801301a:	68fb      	ldr	r3, [r7, #12]
 801301c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801301e:	68fa      	ldr	r2, [r7, #12]
 8013020:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8013022:	441a      	add	r2, r3
 8013024:	68fb      	ldr	r3, [r7, #12]
 8013026:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8013028:	697b      	ldr	r3, [r7, #20]
}
 801302a:	4618      	mov	r0, r3
 801302c:	3718      	adds	r7, #24
 801302e:	46bd      	mov	sp, r7
 8013030:	bdb0      	pop	{r4, r5, r7, pc}
 8013032:	bf00      	nop
 8013034:	0801a6ac 	.word	0x0801a6ac
 8013038:	0801adb4 	.word	0x0801adb4
 801303c:	0801a700 	.word	0x0801a700

08013040 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8013040:	b580      	push	{r7, lr}
 8013042:	b088      	sub	sp, #32
 8013044:	af00      	add	r7, sp, #0
 8013046:	60f8      	str	r0, [r7, #12]
 8013048:	60b9      	str	r1, [r7, #8]
 801304a:	4611      	mov	r1, r2
 801304c:	461a      	mov	r2, r3
 801304e:	460b      	mov	r3, r1
 8013050:	71fb      	strb	r3, [r7, #7]
 8013052:	4613      	mov	r3, r2
 8013054:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8013056:	2300      	movs	r3, #0
 8013058:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 801305a:	68bb      	ldr	r3, [r7, #8]
 801305c:	2b00      	cmp	r3, #0
 801305e:	d106      	bne.n	801306e <tcp_output_fill_options+0x2e>
 8013060:	4b13      	ldr	r3, [pc, #76]	; (80130b0 <tcp_output_fill_options+0x70>)
 8013062:	f240 7256 	movw	r2, #1878	; 0x756
 8013066:	4913      	ldr	r1, [pc, #76]	; (80130b4 <tcp_output_fill_options+0x74>)
 8013068:	4813      	ldr	r0, [pc, #76]	; (80130b8 <tcp_output_fill_options+0x78>)
 801306a:	f003 fef9 	bl	8016e60 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 801306e:	68bb      	ldr	r3, [r7, #8]
 8013070:	685b      	ldr	r3, [r3, #4]
 8013072:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8013074:	69bb      	ldr	r3, [r7, #24]
 8013076:	3314      	adds	r3, #20
 8013078:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 801307a:	69bb      	ldr	r3, [r7, #24]
 801307c:	f103 0214 	add.w	r2, r3, #20
 8013080:	8bfb      	ldrh	r3, [r7, #30]
 8013082:	009b      	lsls	r3, r3, #2
 8013084:	4619      	mov	r1, r3
 8013086:	79fb      	ldrb	r3, [r7, #7]
 8013088:	009b      	lsls	r3, r3, #2
 801308a:	f003 0304 	and.w	r3, r3, #4
 801308e:	440b      	add	r3, r1
 8013090:	4413      	add	r3, r2
 8013092:	697a      	ldr	r2, [r7, #20]
 8013094:	429a      	cmp	r2, r3
 8013096:	d006      	beq.n	80130a6 <tcp_output_fill_options+0x66>
 8013098:	4b05      	ldr	r3, [pc, #20]	; (80130b0 <tcp_output_fill_options+0x70>)
 801309a:	f240 7275 	movw	r2, #1909	; 0x775
 801309e:	4907      	ldr	r1, [pc, #28]	; (80130bc <tcp_output_fill_options+0x7c>)
 80130a0:	4805      	ldr	r0, [pc, #20]	; (80130b8 <tcp_output_fill_options+0x78>)
 80130a2:	f003 fedd 	bl	8016e60 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 80130a6:	bf00      	nop
 80130a8:	3720      	adds	r7, #32
 80130aa:	46bd      	mov	sp, r7
 80130ac:	bd80      	pop	{r7, pc}
 80130ae:	bf00      	nop
 80130b0:	0801a6ac 	.word	0x0801a6ac
 80130b4:	0801addc 	.word	0x0801addc
 80130b8:	0801a700 	.word	0x0801a700
 80130bc:	0801acd4 	.word	0x0801acd4

080130c0 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 80130c0:	b580      	push	{r7, lr}
 80130c2:	b08a      	sub	sp, #40	; 0x28
 80130c4:	af04      	add	r7, sp, #16
 80130c6:	60f8      	str	r0, [r7, #12]
 80130c8:	60b9      	str	r1, [r7, #8]
 80130ca:	607a      	str	r2, [r7, #4]
 80130cc:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 80130ce:	68bb      	ldr	r3, [r7, #8]
 80130d0:	2b00      	cmp	r3, #0
 80130d2:	d106      	bne.n	80130e2 <tcp_output_control_segment+0x22>
 80130d4:	4b1c      	ldr	r3, [pc, #112]	; (8013148 <tcp_output_control_segment+0x88>)
 80130d6:	f240 7287 	movw	r2, #1927	; 0x787
 80130da:	491c      	ldr	r1, [pc, #112]	; (801314c <tcp_output_control_segment+0x8c>)
 80130dc:	481c      	ldr	r0, [pc, #112]	; (8013150 <tcp_output_control_segment+0x90>)
 80130de:	f003 febf 	bl	8016e60 <iprintf>

  netif = tcp_route(pcb, src, dst);
 80130e2:	683a      	ldr	r2, [r7, #0]
 80130e4:	6879      	ldr	r1, [r7, #4]
 80130e6:	68f8      	ldr	r0, [r7, #12]
 80130e8:	f7fe fad4 	bl	8011694 <tcp_route>
 80130ec:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 80130ee:	693b      	ldr	r3, [r7, #16]
 80130f0:	2b00      	cmp	r3, #0
 80130f2:	d102      	bne.n	80130fa <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 80130f4:	23fc      	movs	r3, #252	; 0xfc
 80130f6:	75fb      	strb	r3, [r7, #23]
 80130f8:	e01c      	b.n	8013134 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 80130fa:	68fb      	ldr	r3, [r7, #12]
 80130fc:	2b00      	cmp	r3, #0
 80130fe:	d006      	beq.n	801310e <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8013100:	68fb      	ldr	r3, [r7, #12]
 8013102:	7adb      	ldrb	r3, [r3, #11]
 8013104:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8013106:	68fb      	ldr	r3, [r7, #12]
 8013108:	7a9b      	ldrb	r3, [r3, #10]
 801310a:	757b      	strb	r3, [r7, #21]
 801310c:	e003      	b.n	8013116 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 801310e:	23ff      	movs	r3, #255	; 0xff
 8013110:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8013112:	2300      	movs	r3, #0
 8013114:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8013116:	7dba      	ldrb	r2, [r7, #22]
 8013118:	693b      	ldr	r3, [r7, #16]
 801311a:	9302      	str	r3, [sp, #8]
 801311c:	2306      	movs	r3, #6
 801311e:	9301      	str	r3, [sp, #4]
 8013120:	7d7b      	ldrb	r3, [r7, #21]
 8013122:	9300      	str	r3, [sp, #0]
 8013124:	4613      	mov	r3, r2
 8013126:	683a      	ldr	r2, [r7, #0]
 8013128:	6879      	ldr	r1, [r7, #4]
 801312a:	68b8      	ldr	r0, [r7, #8]
 801312c:	f002 facc 	bl	80156c8 <ip4_output_if>
 8013130:	4603      	mov	r3, r0
 8013132:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8013134:	68b8      	ldr	r0, [r7, #8]
 8013136:	f7f9 ff69 	bl	800d00c <pbuf_free>
  return err;
 801313a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801313e:	4618      	mov	r0, r3
 8013140:	3718      	adds	r7, #24
 8013142:	46bd      	mov	sp, r7
 8013144:	bd80      	pop	{r7, pc}
 8013146:	bf00      	nop
 8013148:	0801a6ac 	.word	0x0801a6ac
 801314c:	0801ae04 	.word	0x0801ae04
 8013150:	0801a700 	.word	0x0801a700

08013154 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8013154:	b590      	push	{r4, r7, lr}
 8013156:	b08b      	sub	sp, #44	; 0x2c
 8013158:	af04      	add	r7, sp, #16
 801315a:	60f8      	str	r0, [r7, #12]
 801315c:	60b9      	str	r1, [r7, #8]
 801315e:	607a      	str	r2, [r7, #4]
 8013160:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8013162:	683b      	ldr	r3, [r7, #0]
 8013164:	2b00      	cmp	r3, #0
 8013166:	d106      	bne.n	8013176 <tcp_rst+0x22>
 8013168:	4b1f      	ldr	r3, [pc, #124]	; (80131e8 <tcp_rst+0x94>)
 801316a:	f240 72c4 	movw	r2, #1988	; 0x7c4
 801316e:	491f      	ldr	r1, [pc, #124]	; (80131ec <tcp_rst+0x98>)
 8013170:	481f      	ldr	r0, [pc, #124]	; (80131f0 <tcp_rst+0x9c>)
 8013172:	f003 fe75 	bl	8016e60 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8013176:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013178:	2b00      	cmp	r3, #0
 801317a:	d106      	bne.n	801318a <tcp_rst+0x36>
 801317c:	4b1a      	ldr	r3, [pc, #104]	; (80131e8 <tcp_rst+0x94>)
 801317e:	f240 72c5 	movw	r2, #1989	; 0x7c5
 8013182:	491c      	ldr	r1, [pc, #112]	; (80131f4 <tcp_rst+0xa0>)
 8013184:	481a      	ldr	r0, [pc, #104]	; (80131f0 <tcp_rst+0x9c>)
 8013186:	f003 fe6b 	bl	8016e60 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801318a:	2300      	movs	r3, #0
 801318c:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 801318e:	f246 0308 	movw	r3, #24584	; 0x6008
 8013192:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8013194:	7dfb      	ldrb	r3, [r7, #23]
 8013196:	b29c      	uxth	r4, r3
 8013198:	68b8      	ldr	r0, [r7, #8]
 801319a:	f7f8 fb72 	bl	800b882 <lwip_htonl>
 801319e:	4602      	mov	r2, r0
 80131a0:	8abb      	ldrh	r3, [r7, #20]
 80131a2:	9303      	str	r3, [sp, #12]
 80131a4:	2314      	movs	r3, #20
 80131a6:	9302      	str	r3, [sp, #8]
 80131a8:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80131aa:	9301      	str	r3, [sp, #4]
 80131ac:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80131ae:	9300      	str	r3, [sp, #0]
 80131b0:	4613      	mov	r3, r2
 80131b2:	2200      	movs	r2, #0
 80131b4:	4621      	mov	r1, r4
 80131b6:	6878      	ldr	r0, [r7, #4]
 80131b8:	f7ff fe90 	bl	8012edc <tcp_output_alloc_header_common>
 80131bc:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 80131be:	693b      	ldr	r3, [r7, #16]
 80131c0:	2b00      	cmp	r3, #0
 80131c2:	d00c      	beq.n	80131de <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80131c4:	7dfb      	ldrb	r3, [r7, #23]
 80131c6:	2200      	movs	r2, #0
 80131c8:	6939      	ldr	r1, [r7, #16]
 80131ca:	68f8      	ldr	r0, [r7, #12]
 80131cc:	f7ff ff38 	bl	8013040 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 80131d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80131d2:	683a      	ldr	r2, [r7, #0]
 80131d4:	6939      	ldr	r1, [r7, #16]
 80131d6:	68f8      	ldr	r0, [r7, #12]
 80131d8:	f7ff ff72 	bl	80130c0 <tcp_output_control_segment>
 80131dc:	e000      	b.n	80131e0 <tcp_rst+0x8c>
    return;
 80131de:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 80131e0:	371c      	adds	r7, #28
 80131e2:	46bd      	mov	sp, r7
 80131e4:	bd90      	pop	{r4, r7, pc}
 80131e6:	bf00      	nop
 80131e8:	0801a6ac 	.word	0x0801a6ac
 80131ec:	0801ae30 	.word	0x0801ae30
 80131f0:	0801a700 	.word	0x0801a700
 80131f4:	0801ae4c 	.word	0x0801ae4c

080131f8 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 80131f8:	b590      	push	{r4, r7, lr}
 80131fa:	b087      	sub	sp, #28
 80131fc:	af00      	add	r7, sp, #0
 80131fe:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8013200:	2300      	movs	r3, #0
 8013202:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8013204:	2300      	movs	r3, #0
 8013206:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8013208:	687b      	ldr	r3, [r7, #4]
 801320a:	2b00      	cmp	r3, #0
 801320c:	d106      	bne.n	801321c <tcp_send_empty_ack+0x24>
 801320e:	4b28      	ldr	r3, [pc, #160]	; (80132b0 <tcp_send_empty_ack+0xb8>)
 8013210:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8013214:	4927      	ldr	r1, [pc, #156]	; (80132b4 <tcp_send_empty_ack+0xbc>)
 8013216:	4828      	ldr	r0, [pc, #160]	; (80132b8 <tcp_send_empty_ack+0xc0>)
 8013218:	f003 fe22 	bl	8016e60 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801321c:	7dfb      	ldrb	r3, [r7, #23]
 801321e:	009b      	lsls	r3, r3, #2
 8013220:	b2db      	uxtb	r3, r3
 8013222:	f003 0304 	and.w	r3, r3, #4
 8013226:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8013228:	7d7b      	ldrb	r3, [r7, #21]
 801322a:	b29c      	uxth	r4, r3
 801322c:	687b      	ldr	r3, [r7, #4]
 801322e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013230:	4618      	mov	r0, r3
 8013232:	f7f8 fb26 	bl	800b882 <lwip_htonl>
 8013236:	4603      	mov	r3, r0
 8013238:	2200      	movs	r2, #0
 801323a:	4621      	mov	r1, r4
 801323c:	6878      	ldr	r0, [r7, #4]
 801323e:	f7ff fec1 	bl	8012fc4 <tcp_output_alloc_header>
 8013242:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8013244:	693b      	ldr	r3, [r7, #16]
 8013246:	2b00      	cmp	r3, #0
 8013248:	d109      	bne.n	801325e <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801324a:	687b      	ldr	r3, [r7, #4]
 801324c:	8b5b      	ldrh	r3, [r3, #26]
 801324e:	f043 0303 	orr.w	r3, r3, #3
 8013252:	b29a      	uxth	r2, r3
 8013254:	687b      	ldr	r3, [r7, #4]
 8013256:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8013258:	f06f 0301 	mvn.w	r3, #1
 801325c:	e023      	b.n	80132a6 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 801325e:	7dbb      	ldrb	r3, [r7, #22]
 8013260:	7dfa      	ldrb	r2, [r7, #23]
 8013262:	6939      	ldr	r1, [r7, #16]
 8013264:	6878      	ldr	r0, [r7, #4]
 8013266:	f7ff feeb 	bl	8013040 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801326a:	687a      	ldr	r2, [r7, #4]
 801326c:	687b      	ldr	r3, [r7, #4]
 801326e:	3304      	adds	r3, #4
 8013270:	6939      	ldr	r1, [r7, #16]
 8013272:	6878      	ldr	r0, [r7, #4]
 8013274:	f7ff ff24 	bl	80130c0 <tcp_output_control_segment>
 8013278:	4603      	mov	r3, r0
 801327a:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 801327c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013280:	2b00      	cmp	r3, #0
 8013282:	d007      	beq.n	8013294 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8013284:	687b      	ldr	r3, [r7, #4]
 8013286:	8b5b      	ldrh	r3, [r3, #26]
 8013288:	f043 0303 	orr.w	r3, r3, #3
 801328c:	b29a      	uxth	r2, r3
 801328e:	687b      	ldr	r3, [r7, #4]
 8013290:	835a      	strh	r2, [r3, #26]
 8013292:	e006      	b.n	80132a2 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8013294:	687b      	ldr	r3, [r7, #4]
 8013296:	8b5b      	ldrh	r3, [r3, #26]
 8013298:	f023 0303 	bic.w	r3, r3, #3
 801329c:	b29a      	uxth	r2, r3
 801329e:	687b      	ldr	r3, [r7, #4]
 80132a0:	835a      	strh	r2, [r3, #26]
  }

  return err;
 80132a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80132a6:	4618      	mov	r0, r3
 80132a8:	371c      	adds	r7, #28
 80132aa:	46bd      	mov	sp, r7
 80132ac:	bd90      	pop	{r4, r7, pc}
 80132ae:	bf00      	nop
 80132b0:	0801a6ac 	.word	0x0801a6ac
 80132b4:	0801ae68 	.word	0x0801ae68
 80132b8:	0801a700 	.word	0x0801a700

080132bc <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 80132bc:	b590      	push	{r4, r7, lr}
 80132be:	b087      	sub	sp, #28
 80132c0:	af00      	add	r7, sp, #0
 80132c2:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80132c4:	2300      	movs	r3, #0
 80132c6:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 80132c8:	687b      	ldr	r3, [r7, #4]
 80132ca:	2b00      	cmp	r3, #0
 80132cc:	d106      	bne.n	80132dc <tcp_keepalive+0x20>
 80132ce:	4b18      	ldr	r3, [pc, #96]	; (8013330 <tcp_keepalive+0x74>)
 80132d0:	f640 0224 	movw	r2, #2084	; 0x824
 80132d4:	4917      	ldr	r1, [pc, #92]	; (8013334 <tcp_keepalive+0x78>)
 80132d6:	4818      	ldr	r0, [pc, #96]	; (8013338 <tcp_keepalive+0x7c>)
 80132d8:	f003 fdc2 	bl	8016e60 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 80132dc:	7dfb      	ldrb	r3, [r7, #23]
 80132de:	b29c      	uxth	r4, r3
 80132e0:	687b      	ldr	r3, [r7, #4]
 80132e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80132e4:	3b01      	subs	r3, #1
 80132e6:	4618      	mov	r0, r3
 80132e8:	f7f8 facb 	bl	800b882 <lwip_htonl>
 80132ec:	4603      	mov	r3, r0
 80132ee:	2200      	movs	r2, #0
 80132f0:	4621      	mov	r1, r4
 80132f2:	6878      	ldr	r0, [r7, #4]
 80132f4:	f7ff fe66 	bl	8012fc4 <tcp_output_alloc_header>
 80132f8:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80132fa:	693b      	ldr	r3, [r7, #16]
 80132fc:	2b00      	cmp	r3, #0
 80132fe:	d102      	bne.n	8013306 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8013300:	f04f 33ff 	mov.w	r3, #4294967295
 8013304:	e010      	b.n	8013328 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8013306:	7dfb      	ldrb	r3, [r7, #23]
 8013308:	2200      	movs	r2, #0
 801330a:	6939      	ldr	r1, [r7, #16]
 801330c:	6878      	ldr	r0, [r7, #4]
 801330e:	f7ff fe97 	bl	8013040 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8013312:	687a      	ldr	r2, [r7, #4]
 8013314:	687b      	ldr	r3, [r7, #4]
 8013316:	3304      	adds	r3, #4
 8013318:	6939      	ldr	r1, [r7, #16]
 801331a:	6878      	ldr	r0, [r7, #4]
 801331c:	f7ff fed0 	bl	80130c0 <tcp_output_control_segment>
 8013320:	4603      	mov	r3, r0
 8013322:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8013324:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8013328:	4618      	mov	r0, r3
 801332a:	371c      	adds	r7, #28
 801332c:	46bd      	mov	sp, r7
 801332e:	bd90      	pop	{r4, r7, pc}
 8013330:	0801a6ac 	.word	0x0801a6ac
 8013334:	0801ae88 	.word	0x0801ae88
 8013338:	0801a700 	.word	0x0801a700

0801333c <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 801333c:	b590      	push	{r4, r7, lr}
 801333e:	b08b      	sub	sp, #44	; 0x2c
 8013340:	af00      	add	r7, sp, #0
 8013342:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8013344:	2300      	movs	r3, #0
 8013346:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 801334a:	687b      	ldr	r3, [r7, #4]
 801334c:	2b00      	cmp	r3, #0
 801334e:	d106      	bne.n	801335e <tcp_zero_window_probe+0x22>
 8013350:	4b4c      	ldr	r3, [pc, #304]	; (8013484 <tcp_zero_window_probe+0x148>)
 8013352:	f640 024f 	movw	r2, #2127	; 0x84f
 8013356:	494c      	ldr	r1, [pc, #304]	; (8013488 <tcp_zero_window_probe+0x14c>)
 8013358:	484c      	ldr	r0, [pc, #304]	; (801348c <tcp_zero_window_probe+0x150>)
 801335a:	f003 fd81 	bl	8016e60 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 801335e:	687b      	ldr	r3, [r7, #4]
 8013360:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013362:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8013364:	6a3b      	ldr	r3, [r7, #32]
 8013366:	2b00      	cmp	r3, #0
 8013368:	d101      	bne.n	801336e <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 801336a:	2300      	movs	r3, #0
 801336c:	e086      	b.n	801347c <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 801336e:	687b      	ldr	r3, [r7, #4]
 8013370:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8013374:	2bff      	cmp	r3, #255	; 0xff
 8013376:	d007      	beq.n	8013388 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8013378:	687b      	ldr	r3, [r7, #4]
 801337a:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801337e:	3301      	adds	r3, #1
 8013380:	b2da      	uxtb	r2, r3
 8013382:	687b      	ldr	r3, [r7, #4]
 8013384:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8013388:	6a3b      	ldr	r3, [r7, #32]
 801338a:	68db      	ldr	r3, [r3, #12]
 801338c:	899b      	ldrh	r3, [r3, #12]
 801338e:	b29b      	uxth	r3, r3
 8013390:	4618      	mov	r0, r3
 8013392:	f7f8 fa61 	bl	800b858 <lwip_htons>
 8013396:	4603      	mov	r3, r0
 8013398:	b2db      	uxtb	r3, r3
 801339a:	f003 0301 	and.w	r3, r3, #1
 801339e:	2b00      	cmp	r3, #0
 80133a0:	d005      	beq.n	80133ae <tcp_zero_window_probe+0x72>
 80133a2:	6a3b      	ldr	r3, [r7, #32]
 80133a4:	891b      	ldrh	r3, [r3, #8]
 80133a6:	2b00      	cmp	r3, #0
 80133a8:	d101      	bne.n	80133ae <tcp_zero_window_probe+0x72>
 80133aa:	2301      	movs	r3, #1
 80133ac:	e000      	b.n	80133b0 <tcp_zero_window_probe+0x74>
 80133ae:	2300      	movs	r3, #0
 80133b0:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 80133b2:	7ffb      	ldrb	r3, [r7, #31]
 80133b4:	2b00      	cmp	r3, #0
 80133b6:	bf0c      	ite	eq
 80133b8:	2301      	moveq	r3, #1
 80133ba:	2300      	movne	r3, #0
 80133bc:	b2db      	uxtb	r3, r3
 80133be:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 80133c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80133c4:	b299      	uxth	r1, r3
 80133c6:	6a3b      	ldr	r3, [r7, #32]
 80133c8:	68db      	ldr	r3, [r3, #12]
 80133ca:	685b      	ldr	r3, [r3, #4]
 80133cc:	8bba      	ldrh	r2, [r7, #28]
 80133ce:	6878      	ldr	r0, [r7, #4]
 80133d0:	f7ff fdf8 	bl	8012fc4 <tcp_output_alloc_header>
 80133d4:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 80133d6:	69bb      	ldr	r3, [r7, #24]
 80133d8:	2b00      	cmp	r3, #0
 80133da:	d102      	bne.n	80133e2 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 80133dc:	f04f 33ff 	mov.w	r3, #4294967295
 80133e0:	e04c      	b.n	801347c <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 80133e2:	69bb      	ldr	r3, [r7, #24]
 80133e4:	685b      	ldr	r3, [r3, #4]
 80133e6:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 80133e8:	7ffb      	ldrb	r3, [r7, #31]
 80133ea:	2b00      	cmp	r3, #0
 80133ec:	d011      	beq.n	8013412 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 80133ee:	697b      	ldr	r3, [r7, #20]
 80133f0:	899b      	ldrh	r3, [r3, #12]
 80133f2:	b29b      	uxth	r3, r3
 80133f4:	b21b      	sxth	r3, r3
 80133f6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80133fa:	b21c      	sxth	r4, r3
 80133fc:	2011      	movs	r0, #17
 80133fe:	f7f8 fa2b 	bl	800b858 <lwip_htons>
 8013402:	4603      	mov	r3, r0
 8013404:	b21b      	sxth	r3, r3
 8013406:	4323      	orrs	r3, r4
 8013408:	b21b      	sxth	r3, r3
 801340a:	b29a      	uxth	r2, r3
 801340c:	697b      	ldr	r3, [r7, #20]
 801340e:	819a      	strh	r2, [r3, #12]
 8013410:	e010      	b.n	8013434 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8013412:	69bb      	ldr	r3, [r7, #24]
 8013414:	685b      	ldr	r3, [r3, #4]
 8013416:	3314      	adds	r3, #20
 8013418:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801341a:	6a3b      	ldr	r3, [r7, #32]
 801341c:	6858      	ldr	r0, [r3, #4]
 801341e:	6a3b      	ldr	r3, [r7, #32]
 8013420:	685b      	ldr	r3, [r3, #4]
 8013422:	891a      	ldrh	r2, [r3, #8]
 8013424:	6a3b      	ldr	r3, [r7, #32]
 8013426:	891b      	ldrh	r3, [r3, #8]
 8013428:	1ad3      	subs	r3, r2, r3
 801342a:	b29b      	uxth	r3, r3
 801342c:	2201      	movs	r2, #1
 801342e:	6939      	ldr	r1, [r7, #16]
 8013430:	f7f9 fff2 	bl	800d418 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8013434:	6a3b      	ldr	r3, [r7, #32]
 8013436:	68db      	ldr	r3, [r3, #12]
 8013438:	685b      	ldr	r3, [r3, #4]
 801343a:	4618      	mov	r0, r3
 801343c:	f7f8 fa21 	bl	800b882 <lwip_htonl>
 8013440:	4603      	mov	r3, r0
 8013442:	3301      	adds	r3, #1
 8013444:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8013446:	687b      	ldr	r3, [r7, #4]
 8013448:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801344a:	68fb      	ldr	r3, [r7, #12]
 801344c:	1ad3      	subs	r3, r2, r3
 801344e:	2b00      	cmp	r3, #0
 8013450:	da02      	bge.n	8013458 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8013452:	687b      	ldr	r3, [r7, #4]
 8013454:	68fa      	ldr	r2, [r7, #12]
 8013456:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8013458:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801345c:	2200      	movs	r2, #0
 801345e:	69b9      	ldr	r1, [r7, #24]
 8013460:	6878      	ldr	r0, [r7, #4]
 8013462:	f7ff fded 	bl	8013040 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8013466:	687a      	ldr	r2, [r7, #4]
 8013468:	687b      	ldr	r3, [r7, #4]
 801346a:	3304      	adds	r3, #4
 801346c:	69b9      	ldr	r1, [r7, #24]
 801346e:	6878      	ldr	r0, [r7, #4]
 8013470:	f7ff fe26 	bl	80130c0 <tcp_output_control_segment>
 8013474:	4603      	mov	r3, r0
 8013476:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8013478:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801347c:	4618      	mov	r0, r3
 801347e:	372c      	adds	r7, #44	; 0x2c
 8013480:	46bd      	mov	sp, r7
 8013482:	bd90      	pop	{r4, r7, pc}
 8013484:	0801a6ac 	.word	0x0801a6ac
 8013488:	0801aea4 	.word	0x0801aea4
 801348c:	0801a700 	.word	0x0801a700

08013490 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8013490:	b580      	push	{r7, lr}
 8013492:	b082      	sub	sp, #8
 8013494:	af00      	add	r7, sp, #0
 8013496:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8013498:	f7fa f8ac 	bl	800d5f4 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 801349c:	4b0a      	ldr	r3, [pc, #40]	; (80134c8 <tcpip_tcp_timer+0x38>)
 801349e:	681b      	ldr	r3, [r3, #0]
 80134a0:	2b00      	cmp	r3, #0
 80134a2:	d103      	bne.n	80134ac <tcpip_tcp_timer+0x1c>
 80134a4:	4b09      	ldr	r3, [pc, #36]	; (80134cc <tcpip_tcp_timer+0x3c>)
 80134a6:	681b      	ldr	r3, [r3, #0]
 80134a8:	2b00      	cmp	r3, #0
 80134aa:	d005      	beq.n	80134b8 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80134ac:	2200      	movs	r2, #0
 80134ae:	4908      	ldr	r1, [pc, #32]	; (80134d0 <tcpip_tcp_timer+0x40>)
 80134b0:	20fa      	movs	r0, #250	; 0xfa
 80134b2:	f000 f8f1 	bl	8013698 <sys_timeout>
 80134b6:	e002      	b.n	80134be <tcpip_tcp_timer+0x2e>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 80134b8:	4b06      	ldr	r3, [pc, #24]	; (80134d4 <tcpip_tcp_timer+0x44>)
 80134ba:	2200      	movs	r2, #0
 80134bc:	601a      	str	r2, [r3, #0]
  }
}
 80134be:	bf00      	nop
 80134c0:	3708      	adds	r7, #8
 80134c2:	46bd      	mov	sp, r7
 80134c4:	bd80      	pop	{r7, pc}
 80134c6:	bf00      	nop
 80134c8:	2000d3fc 	.word	0x2000d3fc
 80134cc:	2000d40c 	.word	0x2000d40c
 80134d0:	08013491 	.word	0x08013491
 80134d4:	20004800 	.word	0x20004800

080134d8 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 80134d8:	b580      	push	{r7, lr}
 80134da:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 80134dc:	4b0a      	ldr	r3, [pc, #40]	; (8013508 <tcp_timer_needed+0x30>)
 80134de:	681b      	ldr	r3, [r3, #0]
 80134e0:	2b00      	cmp	r3, #0
 80134e2:	d10f      	bne.n	8013504 <tcp_timer_needed+0x2c>
 80134e4:	4b09      	ldr	r3, [pc, #36]	; (801350c <tcp_timer_needed+0x34>)
 80134e6:	681b      	ldr	r3, [r3, #0]
 80134e8:	2b00      	cmp	r3, #0
 80134ea:	d103      	bne.n	80134f4 <tcp_timer_needed+0x1c>
 80134ec:	4b08      	ldr	r3, [pc, #32]	; (8013510 <tcp_timer_needed+0x38>)
 80134ee:	681b      	ldr	r3, [r3, #0]
 80134f0:	2b00      	cmp	r3, #0
 80134f2:	d007      	beq.n	8013504 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 80134f4:	4b04      	ldr	r3, [pc, #16]	; (8013508 <tcp_timer_needed+0x30>)
 80134f6:	2201      	movs	r2, #1
 80134f8:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80134fa:	2200      	movs	r2, #0
 80134fc:	4905      	ldr	r1, [pc, #20]	; (8013514 <tcp_timer_needed+0x3c>)
 80134fe:	20fa      	movs	r0, #250	; 0xfa
 8013500:	f000 f8ca 	bl	8013698 <sys_timeout>
  }
}
 8013504:	bf00      	nop
 8013506:	bd80      	pop	{r7, pc}
 8013508:	20004800 	.word	0x20004800
 801350c:	2000d3fc 	.word	0x2000d3fc
 8013510:	2000d40c 	.word	0x2000d40c
 8013514:	08013491 	.word	0x08013491

08013518 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8013518:	b580      	push	{r7, lr}
 801351a:	b086      	sub	sp, #24
 801351c:	af00      	add	r7, sp, #0
 801351e:	60f8      	str	r0, [r7, #12]
 8013520:	60b9      	str	r1, [r7, #8]
 8013522:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8013524:	200a      	movs	r0, #10
 8013526:	f7f8 fe4d 	bl	800c1c4 <memp_malloc>
 801352a:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 801352c:	693b      	ldr	r3, [r7, #16]
 801352e:	2b00      	cmp	r3, #0
 8013530:	d109      	bne.n	8013546 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8013532:	693b      	ldr	r3, [r7, #16]
 8013534:	2b00      	cmp	r3, #0
 8013536:	d151      	bne.n	80135dc <sys_timeout_abs+0xc4>
 8013538:	4b2a      	ldr	r3, [pc, #168]	; (80135e4 <sys_timeout_abs+0xcc>)
 801353a:	22be      	movs	r2, #190	; 0xbe
 801353c:	492a      	ldr	r1, [pc, #168]	; (80135e8 <sys_timeout_abs+0xd0>)
 801353e:	482b      	ldr	r0, [pc, #172]	; (80135ec <sys_timeout_abs+0xd4>)
 8013540:	f003 fc8e 	bl	8016e60 <iprintf>
    return;
 8013544:	e04a      	b.n	80135dc <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8013546:	693b      	ldr	r3, [r7, #16]
 8013548:	2200      	movs	r2, #0
 801354a:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 801354c:	693b      	ldr	r3, [r7, #16]
 801354e:	68ba      	ldr	r2, [r7, #8]
 8013550:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8013552:	693b      	ldr	r3, [r7, #16]
 8013554:	687a      	ldr	r2, [r7, #4]
 8013556:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8013558:	693b      	ldr	r3, [r7, #16]
 801355a:	68fa      	ldr	r2, [r7, #12]
 801355c:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801355e:	4b24      	ldr	r3, [pc, #144]	; (80135f0 <sys_timeout_abs+0xd8>)
 8013560:	681b      	ldr	r3, [r3, #0]
 8013562:	2b00      	cmp	r3, #0
 8013564:	d103      	bne.n	801356e <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8013566:	4a22      	ldr	r2, [pc, #136]	; (80135f0 <sys_timeout_abs+0xd8>)
 8013568:	693b      	ldr	r3, [r7, #16]
 801356a:	6013      	str	r3, [r2, #0]
    return;
 801356c:	e037      	b.n	80135de <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 801356e:	693b      	ldr	r3, [r7, #16]
 8013570:	685a      	ldr	r2, [r3, #4]
 8013572:	4b1f      	ldr	r3, [pc, #124]	; (80135f0 <sys_timeout_abs+0xd8>)
 8013574:	681b      	ldr	r3, [r3, #0]
 8013576:	685b      	ldr	r3, [r3, #4]
 8013578:	1ad3      	subs	r3, r2, r3
 801357a:	0fdb      	lsrs	r3, r3, #31
 801357c:	f003 0301 	and.w	r3, r3, #1
 8013580:	b2db      	uxtb	r3, r3
 8013582:	2b00      	cmp	r3, #0
 8013584:	d007      	beq.n	8013596 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8013586:	4b1a      	ldr	r3, [pc, #104]	; (80135f0 <sys_timeout_abs+0xd8>)
 8013588:	681a      	ldr	r2, [r3, #0]
 801358a:	693b      	ldr	r3, [r7, #16]
 801358c:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 801358e:	4a18      	ldr	r2, [pc, #96]	; (80135f0 <sys_timeout_abs+0xd8>)
 8013590:	693b      	ldr	r3, [r7, #16]
 8013592:	6013      	str	r3, [r2, #0]
 8013594:	e023      	b.n	80135de <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8013596:	4b16      	ldr	r3, [pc, #88]	; (80135f0 <sys_timeout_abs+0xd8>)
 8013598:	681b      	ldr	r3, [r3, #0]
 801359a:	617b      	str	r3, [r7, #20]
 801359c:	e01a      	b.n	80135d4 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 801359e:	697b      	ldr	r3, [r7, #20]
 80135a0:	681b      	ldr	r3, [r3, #0]
 80135a2:	2b00      	cmp	r3, #0
 80135a4:	d00b      	beq.n	80135be <sys_timeout_abs+0xa6>
 80135a6:	693b      	ldr	r3, [r7, #16]
 80135a8:	685a      	ldr	r2, [r3, #4]
 80135aa:	697b      	ldr	r3, [r7, #20]
 80135ac:	681b      	ldr	r3, [r3, #0]
 80135ae:	685b      	ldr	r3, [r3, #4]
 80135b0:	1ad3      	subs	r3, r2, r3
 80135b2:	0fdb      	lsrs	r3, r3, #31
 80135b4:	f003 0301 	and.w	r3, r3, #1
 80135b8:	b2db      	uxtb	r3, r3
 80135ba:	2b00      	cmp	r3, #0
 80135bc:	d007      	beq.n	80135ce <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 80135be:	697b      	ldr	r3, [r7, #20]
 80135c0:	681a      	ldr	r2, [r3, #0]
 80135c2:	693b      	ldr	r3, [r7, #16]
 80135c4:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 80135c6:	697b      	ldr	r3, [r7, #20]
 80135c8:	693a      	ldr	r2, [r7, #16]
 80135ca:	601a      	str	r2, [r3, #0]
        break;
 80135cc:	e007      	b.n	80135de <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 80135ce:	697b      	ldr	r3, [r7, #20]
 80135d0:	681b      	ldr	r3, [r3, #0]
 80135d2:	617b      	str	r3, [r7, #20]
 80135d4:	697b      	ldr	r3, [r7, #20]
 80135d6:	2b00      	cmp	r3, #0
 80135d8:	d1e1      	bne.n	801359e <sys_timeout_abs+0x86>
 80135da:	e000      	b.n	80135de <sys_timeout_abs+0xc6>
    return;
 80135dc:	bf00      	nop
      }
    }
  }
}
 80135de:	3718      	adds	r7, #24
 80135e0:	46bd      	mov	sp, r7
 80135e2:	bd80      	pop	{r7, pc}
 80135e4:	0801aec8 	.word	0x0801aec8
 80135e8:	0801aefc 	.word	0x0801aefc
 80135ec:	0801af3c 	.word	0x0801af3c
 80135f0:	200047f8 	.word	0x200047f8

080135f4 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 80135f4:	b580      	push	{r7, lr}
 80135f6:	b086      	sub	sp, #24
 80135f8:	af00      	add	r7, sp, #0
 80135fa:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 80135fc:	687b      	ldr	r3, [r7, #4]
 80135fe:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8013600:	697b      	ldr	r3, [r7, #20]
 8013602:	685b      	ldr	r3, [r3, #4]
 8013604:	4798      	blx	r3

  now = sys_now();
 8013606:	f7f1 fa39 	bl	8004a7c <sys_now>
 801360a:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 801360c:	697b      	ldr	r3, [r7, #20]
 801360e:	681a      	ldr	r2, [r3, #0]
 8013610:	4b0f      	ldr	r3, [pc, #60]	; (8013650 <lwip_cyclic_timer+0x5c>)
 8013612:	681b      	ldr	r3, [r3, #0]
 8013614:	4413      	add	r3, r2
 8013616:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8013618:	68fa      	ldr	r2, [r7, #12]
 801361a:	693b      	ldr	r3, [r7, #16]
 801361c:	1ad3      	subs	r3, r2, r3
 801361e:	0fdb      	lsrs	r3, r3, #31
 8013620:	f003 0301 	and.w	r3, r3, #1
 8013624:	b2db      	uxtb	r3, r3
 8013626:	2b00      	cmp	r3, #0
 8013628:	d009      	beq.n	801363e <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801362a:	697b      	ldr	r3, [r7, #20]
 801362c:	681a      	ldr	r2, [r3, #0]
 801362e:	693b      	ldr	r3, [r7, #16]
 8013630:	4413      	add	r3, r2
 8013632:	687a      	ldr	r2, [r7, #4]
 8013634:	4907      	ldr	r1, [pc, #28]	; (8013654 <lwip_cyclic_timer+0x60>)
 8013636:	4618      	mov	r0, r3
 8013638:	f7ff ff6e 	bl	8013518 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 801363c:	e004      	b.n	8013648 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 801363e:	687a      	ldr	r2, [r7, #4]
 8013640:	4904      	ldr	r1, [pc, #16]	; (8013654 <lwip_cyclic_timer+0x60>)
 8013642:	68f8      	ldr	r0, [r7, #12]
 8013644:	f7ff ff68 	bl	8013518 <sys_timeout_abs>
}
 8013648:	bf00      	nop
 801364a:	3718      	adds	r7, #24
 801364c:	46bd      	mov	sp, r7
 801364e:	bd80      	pop	{r7, pc}
 8013650:	200047fc 	.word	0x200047fc
 8013654:	080135f5 	.word	0x080135f5

08013658 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8013658:	b580      	push	{r7, lr}
 801365a:	b082      	sub	sp, #8
 801365c:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801365e:	2301      	movs	r3, #1
 8013660:	607b      	str	r3, [r7, #4]
 8013662:	e00e      	b.n	8013682 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8013664:	4a0a      	ldr	r2, [pc, #40]	; (8013690 <sys_timeouts_init+0x38>)
 8013666:	687b      	ldr	r3, [r7, #4]
 8013668:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 801366c:	687b      	ldr	r3, [r7, #4]
 801366e:	00db      	lsls	r3, r3, #3
 8013670:	4a07      	ldr	r2, [pc, #28]	; (8013690 <sys_timeouts_init+0x38>)
 8013672:	4413      	add	r3, r2
 8013674:	461a      	mov	r2, r3
 8013676:	4907      	ldr	r1, [pc, #28]	; (8013694 <sys_timeouts_init+0x3c>)
 8013678:	f000 f80e 	bl	8013698 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801367c:	687b      	ldr	r3, [r7, #4]
 801367e:	3301      	adds	r3, #1
 8013680:	607b      	str	r3, [r7, #4]
 8013682:	687b      	ldr	r3, [r7, #4]
 8013684:	2b02      	cmp	r3, #2
 8013686:	d9ed      	bls.n	8013664 <sys_timeouts_init+0xc>
  }
}
 8013688:	bf00      	nop
 801368a:	3708      	adds	r7, #8
 801368c:	46bd      	mov	sp, r7
 801368e:	bd80      	pop	{r7, pc}
 8013690:	0801bba0 	.word	0x0801bba0
 8013694:	080135f5 	.word	0x080135f5

08013698 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8013698:	b580      	push	{r7, lr}
 801369a:	b086      	sub	sp, #24
 801369c:	af00      	add	r7, sp, #0
 801369e:	60f8      	str	r0, [r7, #12]
 80136a0:	60b9      	str	r1, [r7, #8]
 80136a2:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 80136a4:	68fb      	ldr	r3, [r7, #12]
 80136a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80136aa:	d306      	bcc.n	80136ba <sys_timeout+0x22>
 80136ac:	4b0a      	ldr	r3, [pc, #40]	; (80136d8 <sys_timeout+0x40>)
 80136ae:	f240 1229 	movw	r2, #297	; 0x129
 80136b2:	490a      	ldr	r1, [pc, #40]	; (80136dc <sys_timeout+0x44>)
 80136b4:	480a      	ldr	r0, [pc, #40]	; (80136e0 <sys_timeout+0x48>)
 80136b6:	f003 fbd3 	bl	8016e60 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 80136ba:	f7f1 f9df 	bl	8004a7c <sys_now>
 80136be:	4602      	mov	r2, r0
 80136c0:	68fb      	ldr	r3, [r7, #12]
 80136c2:	4413      	add	r3, r2
 80136c4:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 80136c6:	687a      	ldr	r2, [r7, #4]
 80136c8:	68b9      	ldr	r1, [r7, #8]
 80136ca:	6978      	ldr	r0, [r7, #20]
 80136cc:	f7ff ff24 	bl	8013518 <sys_timeout_abs>
#endif
}
 80136d0:	bf00      	nop
 80136d2:	3718      	adds	r7, #24
 80136d4:	46bd      	mov	sp, r7
 80136d6:	bd80      	pop	{r7, pc}
 80136d8:	0801aec8 	.word	0x0801aec8
 80136dc:	0801af64 	.word	0x0801af64
 80136e0:	0801af3c 	.word	0x0801af3c

080136e4 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 80136e4:	b580      	push	{r7, lr}
 80136e6:	b084      	sub	sp, #16
 80136e8:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 80136ea:	f7f1 f9c7 	bl	8004a7c <sys_now>
 80136ee:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 80136f0:	4b17      	ldr	r3, [pc, #92]	; (8013750 <sys_check_timeouts+0x6c>)
 80136f2:	681b      	ldr	r3, [r3, #0]
 80136f4:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 80136f6:	68bb      	ldr	r3, [r7, #8]
 80136f8:	2b00      	cmp	r3, #0
 80136fa:	d022      	beq.n	8013742 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 80136fc:	68bb      	ldr	r3, [r7, #8]
 80136fe:	685b      	ldr	r3, [r3, #4]
 8013700:	68fa      	ldr	r2, [r7, #12]
 8013702:	1ad3      	subs	r3, r2, r3
 8013704:	0fdb      	lsrs	r3, r3, #31
 8013706:	f003 0301 	and.w	r3, r3, #1
 801370a:	b2db      	uxtb	r3, r3
 801370c:	2b00      	cmp	r3, #0
 801370e:	d11a      	bne.n	8013746 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8013710:	68bb      	ldr	r3, [r7, #8]
 8013712:	681b      	ldr	r3, [r3, #0]
 8013714:	4a0e      	ldr	r2, [pc, #56]	; (8013750 <sys_check_timeouts+0x6c>)
 8013716:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8013718:	68bb      	ldr	r3, [r7, #8]
 801371a:	689b      	ldr	r3, [r3, #8]
 801371c:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 801371e:	68bb      	ldr	r3, [r7, #8]
 8013720:	68db      	ldr	r3, [r3, #12]
 8013722:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8013724:	68bb      	ldr	r3, [r7, #8]
 8013726:	685b      	ldr	r3, [r3, #4]
 8013728:	4a0a      	ldr	r2, [pc, #40]	; (8013754 <sys_check_timeouts+0x70>)
 801372a:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 801372c:	68b9      	ldr	r1, [r7, #8]
 801372e:	200a      	movs	r0, #10
 8013730:	f7f8 fd9a 	bl	800c268 <memp_free>
    if (handler != NULL) {
 8013734:	687b      	ldr	r3, [r7, #4]
 8013736:	2b00      	cmp	r3, #0
 8013738:	d0da      	beq.n	80136f0 <sys_check_timeouts+0xc>
      handler(arg);
 801373a:	687b      	ldr	r3, [r7, #4]
 801373c:	6838      	ldr	r0, [r7, #0]
 801373e:	4798      	blx	r3
  do {
 8013740:	e7d6      	b.n	80136f0 <sys_check_timeouts+0xc>
      return;
 8013742:	bf00      	nop
 8013744:	e000      	b.n	8013748 <sys_check_timeouts+0x64>
      return;
 8013746:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8013748:	3710      	adds	r7, #16
 801374a:	46bd      	mov	sp, r7
 801374c:	bd80      	pop	{r7, pc}
 801374e:	bf00      	nop
 8013750:	200047f8 	.word	0x200047f8
 8013754:	200047fc 	.word	0x200047fc

08013758 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8013758:	b580      	push	{r7, lr}
 801375a:	b082      	sub	sp, #8
 801375c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 801375e:	4b16      	ldr	r3, [pc, #88]	; (80137b8 <sys_timeouts_sleeptime+0x60>)
 8013760:	681b      	ldr	r3, [r3, #0]
 8013762:	2b00      	cmp	r3, #0
 8013764:	d102      	bne.n	801376c <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8013766:	f04f 33ff 	mov.w	r3, #4294967295
 801376a:	e020      	b.n	80137ae <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 801376c:	f7f1 f986 	bl	8004a7c <sys_now>
 8013770:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8013772:	4b11      	ldr	r3, [pc, #68]	; (80137b8 <sys_timeouts_sleeptime+0x60>)
 8013774:	681b      	ldr	r3, [r3, #0]
 8013776:	685a      	ldr	r2, [r3, #4]
 8013778:	687b      	ldr	r3, [r7, #4]
 801377a:	1ad3      	subs	r3, r2, r3
 801377c:	0fdb      	lsrs	r3, r3, #31
 801377e:	f003 0301 	and.w	r3, r3, #1
 8013782:	b2db      	uxtb	r3, r3
 8013784:	2b00      	cmp	r3, #0
 8013786:	d001      	beq.n	801378c <sys_timeouts_sleeptime+0x34>
    return 0;
 8013788:	2300      	movs	r3, #0
 801378a:	e010      	b.n	80137ae <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 801378c:	4b0a      	ldr	r3, [pc, #40]	; (80137b8 <sys_timeouts_sleeptime+0x60>)
 801378e:	681b      	ldr	r3, [r3, #0]
 8013790:	685a      	ldr	r2, [r3, #4]
 8013792:	687b      	ldr	r3, [r7, #4]
 8013794:	1ad3      	subs	r3, r2, r3
 8013796:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8013798:	683b      	ldr	r3, [r7, #0]
 801379a:	2b00      	cmp	r3, #0
 801379c:	da06      	bge.n	80137ac <sys_timeouts_sleeptime+0x54>
 801379e:	4b07      	ldr	r3, [pc, #28]	; (80137bc <sys_timeouts_sleeptime+0x64>)
 80137a0:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 80137a4:	4906      	ldr	r1, [pc, #24]	; (80137c0 <sys_timeouts_sleeptime+0x68>)
 80137a6:	4807      	ldr	r0, [pc, #28]	; (80137c4 <sys_timeouts_sleeptime+0x6c>)
 80137a8:	f003 fb5a 	bl	8016e60 <iprintf>
    return ret;
 80137ac:	683b      	ldr	r3, [r7, #0]
  }
}
 80137ae:	4618      	mov	r0, r3
 80137b0:	3708      	adds	r7, #8
 80137b2:	46bd      	mov	sp, r7
 80137b4:	bd80      	pop	{r7, pc}
 80137b6:	bf00      	nop
 80137b8:	200047f8 	.word	0x200047f8
 80137bc:	0801aec8 	.word	0x0801aec8
 80137c0:	0801af9c 	.word	0x0801af9c
 80137c4:	0801af3c 	.word	0x0801af3c

080137c8 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 80137c8:	b580      	push	{r7, lr}
 80137ca:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80137cc:	f003 fb60 	bl	8016e90 <rand>
 80137d0:	4603      	mov	r3, r0
 80137d2:	b29b      	uxth	r3, r3
 80137d4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80137d8:	b29b      	uxth	r3, r3
 80137da:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80137de:	b29a      	uxth	r2, r3
 80137e0:	4b01      	ldr	r3, [pc, #4]	; (80137e8 <udp_init+0x20>)
 80137e2:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80137e4:	bf00      	nop
 80137e6:	bd80      	pop	{r7, pc}
 80137e8:	20000018 	.word	0x20000018

080137ec <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 80137ec:	b480      	push	{r7}
 80137ee:	b083      	sub	sp, #12
 80137f0:	af00      	add	r7, sp, #0
  u16_t n = 0;
 80137f2:	2300      	movs	r3, #0
 80137f4:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 80137f6:	4b17      	ldr	r3, [pc, #92]	; (8013854 <udp_new_port+0x68>)
 80137f8:	881b      	ldrh	r3, [r3, #0]
 80137fa:	1c5a      	adds	r2, r3, #1
 80137fc:	b291      	uxth	r1, r2
 80137fe:	4a15      	ldr	r2, [pc, #84]	; (8013854 <udp_new_port+0x68>)
 8013800:	8011      	strh	r1, [r2, #0]
 8013802:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013806:	4293      	cmp	r3, r2
 8013808:	d103      	bne.n	8013812 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 801380a:	4b12      	ldr	r3, [pc, #72]	; (8013854 <udp_new_port+0x68>)
 801380c:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8013810:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8013812:	4b11      	ldr	r3, [pc, #68]	; (8013858 <udp_new_port+0x6c>)
 8013814:	681b      	ldr	r3, [r3, #0]
 8013816:	603b      	str	r3, [r7, #0]
 8013818:	e011      	b.n	801383e <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 801381a:	683b      	ldr	r3, [r7, #0]
 801381c:	8a5a      	ldrh	r2, [r3, #18]
 801381e:	4b0d      	ldr	r3, [pc, #52]	; (8013854 <udp_new_port+0x68>)
 8013820:	881b      	ldrh	r3, [r3, #0]
 8013822:	429a      	cmp	r2, r3
 8013824:	d108      	bne.n	8013838 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8013826:	88fb      	ldrh	r3, [r7, #6]
 8013828:	3301      	adds	r3, #1
 801382a:	80fb      	strh	r3, [r7, #6]
 801382c:	88fb      	ldrh	r3, [r7, #6]
 801382e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8013832:	d3e0      	bcc.n	80137f6 <udp_new_port+0xa>
        return 0;
 8013834:	2300      	movs	r3, #0
 8013836:	e007      	b.n	8013848 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8013838:	683b      	ldr	r3, [r7, #0]
 801383a:	68db      	ldr	r3, [r3, #12]
 801383c:	603b      	str	r3, [r7, #0]
 801383e:	683b      	ldr	r3, [r7, #0]
 8013840:	2b00      	cmp	r3, #0
 8013842:	d1ea      	bne.n	801381a <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8013844:	4b03      	ldr	r3, [pc, #12]	; (8013854 <udp_new_port+0x68>)
 8013846:	881b      	ldrh	r3, [r3, #0]
}
 8013848:	4618      	mov	r0, r3
 801384a:	370c      	adds	r7, #12
 801384c:	46bd      	mov	sp, r7
 801384e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013852:	4770      	bx	lr
 8013854:	20000018 	.word	0x20000018
 8013858:	2000d414 	.word	0x2000d414

0801385c <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 801385c:	b580      	push	{r7, lr}
 801385e:	b084      	sub	sp, #16
 8013860:	af00      	add	r7, sp, #0
 8013862:	60f8      	str	r0, [r7, #12]
 8013864:	60b9      	str	r1, [r7, #8]
 8013866:	4613      	mov	r3, r2
 8013868:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 801386a:	68fb      	ldr	r3, [r7, #12]
 801386c:	2b00      	cmp	r3, #0
 801386e:	d105      	bne.n	801387c <udp_input_local_match+0x20>
 8013870:	4b27      	ldr	r3, [pc, #156]	; (8013910 <udp_input_local_match+0xb4>)
 8013872:	2287      	movs	r2, #135	; 0x87
 8013874:	4927      	ldr	r1, [pc, #156]	; (8013914 <udp_input_local_match+0xb8>)
 8013876:	4828      	ldr	r0, [pc, #160]	; (8013918 <udp_input_local_match+0xbc>)
 8013878:	f003 faf2 	bl	8016e60 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 801387c:	68bb      	ldr	r3, [r7, #8]
 801387e:	2b00      	cmp	r3, #0
 8013880:	d105      	bne.n	801388e <udp_input_local_match+0x32>
 8013882:	4b23      	ldr	r3, [pc, #140]	; (8013910 <udp_input_local_match+0xb4>)
 8013884:	2288      	movs	r2, #136	; 0x88
 8013886:	4925      	ldr	r1, [pc, #148]	; (801391c <udp_input_local_match+0xc0>)
 8013888:	4823      	ldr	r0, [pc, #140]	; (8013918 <udp_input_local_match+0xbc>)
 801388a:	f003 fae9 	bl	8016e60 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801388e:	68fb      	ldr	r3, [r7, #12]
 8013890:	7a1b      	ldrb	r3, [r3, #8]
 8013892:	2b00      	cmp	r3, #0
 8013894:	d00b      	beq.n	80138ae <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8013896:	68fb      	ldr	r3, [r7, #12]
 8013898:	7a1a      	ldrb	r2, [r3, #8]
 801389a:	4b21      	ldr	r3, [pc, #132]	; (8013920 <udp_input_local_match+0xc4>)
 801389c:	685b      	ldr	r3, [r3, #4]
 801389e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80138a2:	3301      	adds	r3, #1
 80138a4:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80138a6:	429a      	cmp	r2, r3
 80138a8:	d001      	beq.n	80138ae <udp_input_local_match+0x52>
    return 0;
 80138aa:	2300      	movs	r3, #0
 80138ac:	e02b      	b.n	8013906 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 80138ae:	79fb      	ldrb	r3, [r7, #7]
 80138b0:	2b00      	cmp	r3, #0
 80138b2:	d018      	beq.n	80138e6 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80138b4:	68fb      	ldr	r3, [r7, #12]
 80138b6:	2b00      	cmp	r3, #0
 80138b8:	d013      	beq.n	80138e2 <udp_input_local_match+0x86>
 80138ba:	68fb      	ldr	r3, [r7, #12]
 80138bc:	681b      	ldr	r3, [r3, #0]
 80138be:	2b00      	cmp	r3, #0
 80138c0:	d00f      	beq.n	80138e2 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80138c2:	4b17      	ldr	r3, [pc, #92]	; (8013920 <udp_input_local_match+0xc4>)
 80138c4:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80138c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80138ca:	d00a      	beq.n	80138e2 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 80138cc:	68fb      	ldr	r3, [r7, #12]
 80138ce:	681a      	ldr	r2, [r3, #0]
 80138d0:	4b13      	ldr	r3, [pc, #76]	; (8013920 <udp_input_local_match+0xc4>)
 80138d2:	695b      	ldr	r3, [r3, #20]
 80138d4:	405a      	eors	r2, r3
 80138d6:	68bb      	ldr	r3, [r7, #8]
 80138d8:	3308      	adds	r3, #8
 80138da:	681b      	ldr	r3, [r3, #0]
 80138dc:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80138de:	2b00      	cmp	r3, #0
 80138e0:	d110      	bne.n	8013904 <udp_input_local_match+0xa8>
          return 1;
 80138e2:	2301      	movs	r3, #1
 80138e4:	e00f      	b.n	8013906 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80138e6:	68fb      	ldr	r3, [r7, #12]
 80138e8:	2b00      	cmp	r3, #0
 80138ea:	d009      	beq.n	8013900 <udp_input_local_match+0xa4>
 80138ec:	68fb      	ldr	r3, [r7, #12]
 80138ee:	681b      	ldr	r3, [r3, #0]
 80138f0:	2b00      	cmp	r3, #0
 80138f2:	d005      	beq.n	8013900 <udp_input_local_match+0xa4>
 80138f4:	68fb      	ldr	r3, [r7, #12]
 80138f6:	681a      	ldr	r2, [r3, #0]
 80138f8:	4b09      	ldr	r3, [pc, #36]	; (8013920 <udp_input_local_match+0xc4>)
 80138fa:	695b      	ldr	r3, [r3, #20]
 80138fc:	429a      	cmp	r2, r3
 80138fe:	d101      	bne.n	8013904 <udp_input_local_match+0xa8>
        return 1;
 8013900:	2301      	movs	r3, #1
 8013902:	e000      	b.n	8013906 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8013904:	2300      	movs	r3, #0
}
 8013906:	4618      	mov	r0, r3
 8013908:	3710      	adds	r7, #16
 801390a:	46bd      	mov	sp, r7
 801390c:	bd80      	pop	{r7, pc}
 801390e:	bf00      	nop
 8013910:	0801afb0 	.word	0x0801afb0
 8013914:	0801afe0 	.word	0x0801afe0
 8013918:	0801b004 	.word	0x0801b004
 801391c:	0801b02c 	.word	0x0801b02c
 8013920:	20007b28 	.word	0x20007b28

08013924 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8013924:	b590      	push	{r4, r7, lr}
 8013926:	b08d      	sub	sp, #52	; 0x34
 8013928:	af02      	add	r7, sp, #8
 801392a:	6078      	str	r0, [r7, #4]
 801392c:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 801392e:	2300      	movs	r3, #0
 8013930:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8013932:	687b      	ldr	r3, [r7, #4]
 8013934:	2b00      	cmp	r3, #0
 8013936:	d105      	bne.n	8013944 <udp_input+0x20>
 8013938:	4b7c      	ldr	r3, [pc, #496]	; (8013b2c <udp_input+0x208>)
 801393a:	22cf      	movs	r2, #207	; 0xcf
 801393c:	497c      	ldr	r1, [pc, #496]	; (8013b30 <udp_input+0x20c>)
 801393e:	487d      	ldr	r0, [pc, #500]	; (8013b34 <udp_input+0x210>)
 8013940:	f003 fa8e 	bl	8016e60 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8013944:	683b      	ldr	r3, [r7, #0]
 8013946:	2b00      	cmp	r3, #0
 8013948:	d105      	bne.n	8013956 <udp_input+0x32>
 801394a:	4b78      	ldr	r3, [pc, #480]	; (8013b2c <udp_input+0x208>)
 801394c:	22d0      	movs	r2, #208	; 0xd0
 801394e:	497a      	ldr	r1, [pc, #488]	; (8013b38 <udp_input+0x214>)
 8013950:	4878      	ldr	r0, [pc, #480]	; (8013b34 <udp_input+0x210>)
 8013952:	f003 fa85 	bl	8016e60 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8013956:	687b      	ldr	r3, [r7, #4]
 8013958:	895b      	ldrh	r3, [r3, #10]
 801395a:	2b07      	cmp	r3, #7
 801395c:	d803      	bhi.n	8013966 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 801395e:	6878      	ldr	r0, [r7, #4]
 8013960:	f7f9 fb54 	bl	800d00c <pbuf_free>
    goto end;
 8013964:	e0de      	b.n	8013b24 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8013966:	687b      	ldr	r3, [r7, #4]
 8013968:	685b      	ldr	r3, [r3, #4]
 801396a:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 801396c:	4b73      	ldr	r3, [pc, #460]	; (8013b3c <udp_input+0x218>)
 801396e:	695a      	ldr	r2, [r3, #20]
 8013970:	4b72      	ldr	r3, [pc, #456]	; (8013b3c <udp_input+0x218>)
 8013972:	681b      	ldr	r3, [r3, #0]
 8013974:	4619      	mov	r1, r3
 8013976:	4610      	mov	r0, r2
 8013978:	f001 ff7e 	bl	8015878 <ip4_addr_isbroadcast_u32>
 801397c:	4603      	mov	r3, r0
 801397e:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8013980:	697b      	ldr	r3, [r7, #20]
 8013982:	881b      	ldrh	r3, [r3, #0]
 8013984:	b29b      	uxth	r3, r3
 8013986:	4618      	mov	r0, r3
 8013988:	f7f7 ff66 	bl	800b858 <lwip_htons>
 801398c:	4603      	mov	r3, r0
 801398e:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8013990:	697b      	ldr	r3, [r7, #20]
 8013992:	885b      	ldrh	r3, [r3, #2]
 8013994:	b29b      	uxth	r3, r3
 8013996:	4618      	mov	r0, r3
 8013998:	f7f7 ff5e 	bl	800b858 <lwip_htons>
 801399c:	4603      	mov	r3, r0
 801399e:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 80139a0:	2300      	movs	r3, #0
 80139a2:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 80139a4:	2300      	movs	r3, #0
 80139a6:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 80139a8:	2300      	movs	r3, #0
 80139aa:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80139ac:	4b64      	ldr	r3, [pc, #400]	; (8013b40 <udp_input+0x21c>)
 80139ae:	681b      	ldr	r3, [r3, #0]
 80139b0:	627b      	str	r3, [r7, #36]	; 0x24
 80139b2:	e054      	b.n	8013a5e <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 80139b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80139b6:	8a5b      	ldrh	r3, [r3, #18]
 80139b8:	89fa      	ldrh	r2, [r7, #14]
 80139ba:	429a      	cmp	r2, r3
 80139bc:	d14a      	bne.n	8013a54 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 80139be:	7cfb      	ldrb	r3, [r7, #19]
 80139c0:	461a      	mov	r2, r3
 80139c2:	6839      	ldr	r1, [r7, #0]
 80139c4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80139c6:	f7ff ff49 	bl	801385c <udp_input_local_match>
 80139ca:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 80139cc:	2b00      	cmp	r3, #0
 80139ce:	d041      	beq.n	8013a54 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 80139d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80139d2:	7c1b      	ldrb	r3, [r3, #16]
 80139d4:	f003 0304 	and.w	r3, r3, #4
 80139d8:	2b00      	cmp	r3, #0
 80139da:	d11d      	bne.n	8013a18 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 80139dc:	69fb      	ldr	r3, [r7, #28]
 80139de:	2b00      	cmp	r3, #0
 80139e0:	d102      	bne.n	80139e8 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 80139e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80139e4:	61fb      	str	r3, [r7, #28]
 80139e6:	e017      	b.n	8013a18 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 80139e8:	7cfb      	ldrb	r3, [r7, #19]
 80139ea:	2b00      	cmp	r3, #0
 80139ec:	d014      	beq.n	8013a18 <udp_input+0xf4>
 80139ee:	4b53      	ldr	r3, [pc, #332]	; (8013b3c <udp_input+0x218>)
 80139f0:	695b      	ldr	r3, [r3, #20]
 80139f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80139f6:	d10f      	bne.n	8013a18 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 80139f8:	69fb      	ldr	r3, [r7, #28]
 80139fa:	681a      	ldr	r2, [r3, #0]
 80139fc:	683b      	ldr	r3, [r7, #0]
 80139fe:	3304      	adds	r3, #4
 8013a00:	681b      	ldr	r3, [r3, #0]
 8013a02:	429a      	cmp	r2, r3
 8013a04:	d008      	beq.n	8013a18 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8013a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a08:	681a      	ldr	r2, [r3, #0]
 8013a0a:	683b      	ldr	r3, [r7, #0]
 8013a0c:	3304      	adds	r3, #4
 8013a0e:	681b      	ldr	r3, [r3, #0]
 8013a10:	429a      	cmp	r2, r3
 8013a12:	d101      	bne.n	8013a18 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8013a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a16:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8013a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a1a:	8a9b      	ldrh	r3, [r3, #20]
 8013a1c:	8a3a      	ldrh	r2, [r7, #16]
 8013a1e:	429a      	cmp	r2, r3
 8013a20:	d118      	bne.n	8013a54 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8013a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a24:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8013a26:	2b00      	cmp	r3, #0
 8013a28:	d005      	beq.n	8013a36 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8013a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a2c:	685a      	ldr	r2, [r3, #4]
 8013a2e:	4b43      	ldr	r3, [pc, #268]	; (8013b3c <udp_input+0x218>)
 8013a30:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8013a32:	429a      	cmp	r2, r3
 8013a34:	d10e      	bne.n	8013a54 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8013a36:	6a3b      	ldr	r3, [r7, #32]
 8013a38:	2b00      	cmp	r3, #0
 8013a3a:	d014      	beq.n	8013a66 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8013a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a3e:	68da      	ldr	r2, [r3, #12]
 8013a40:	6a3b      	ldr	r3, [r7, #32]
 8013a42:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8013a44:	4b3e      	ldr	r3, [pc, #248]	; (8013b40 <udp_input+0x21c>)
 8013a46:	681a      	ldr	r2, [r3, #0]
 8013a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a4a:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8013a4c:	4a3c      	ldr	r2, [pc, #240]	; (8013b40 <udp_input+0x21c>)
 8013a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a50:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8013a52:	e008      	b.n	8013a66 <udp_input+0x142>
      }
    }

    prev = pcb;
 8013a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a56:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8013a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a5a:	68db      	ldr	r3, [r3, #12]
 8013a5c:	627b      	str	r3, [r7, #36]	; 0x24
 8013a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a60:	2b00      	cmp	r3, #0
 8013a62:	d1a7      	bne.n	80139b4 <udp_input+0x90>
 8013a64:	e000      	b.n	8013a68 <udp_input+0x144>
        break;
 8013a66:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8013a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a6a:	2b00      	cmp	r3, #0
 8013a6c:	d101      	bne.n	8013a72 <udp_input+0x14e>
    pcb = uncon_pcb;
 8013a6e:	69fb      	ldr	r3, [r7, #28]
 8013a70:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8013a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a74:	2b00      	cmp	r3, #0
 8013a76:	d002      	beq.n	8013a7e <udp_input+0x15a>
    for_us = 1;
 8013a78:	2301      	movs	r3, #1
 8013a7a:	76fb      	strb	r3, [r7, #27]
 8013a7c:	e00a      	b.n	8013a94 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8013a7e:	683b      	ldr	r3, [r7, #0]
 8013a80:	3304      	adds	r3, #4
 8013a82:	681a      	ldr	r2, [r3, #0]
 8013a84:	4b2d      	ldr	r3, [pc, #180]	; (8013b3c <udp_input+0x218>)
 8013a86:	695b      	ldr	r3, [r3, #20]
 8013a88:	429a      	cmp	r2, r3
 8013a8a:	bf0c      	ite	eq
 8013a8c:	2301      	moveq	r3, #1
 8013a8e:	2300      	movne	r3, #0
 8013a90:	b2db      	uxtb	r3, r3
 8013a92:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8013a94:	7efb      	ldrb	r3, [r7, #27]
 8013a96:	2b00      	cmp	r3, #0
 8013a98:	d041      	beq.n	8013b1e <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8013a9a:	2108      	movs	r1, #8
 8013a9c:	6878      	ldr	r0, [r7, #4]
 8013a9e:	f7f9 f9fd 	bl	800ce9c <pbuf_remove_header>
 8013aa2:	4603      	mov	r3, r0
 8013aa4:	2b00      	cmp	r3, #0
 8013aa6:	d00a      	beq.n	8013abe <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8013aa8:	4b20      	ldr	r3, [pc, #128]	; (8013b2c <udp_input+0x208>)
 8013aaa:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8013aae:	4925      	ldr	r1, [pc, #148]	; (8013b44 <udp_input+0x220>)
 8013ab0:	4820      	ldr	r0, [pc, #128]	; (8013b34 <udp_input+0x210>)
 8013ab2:	f003 f9d5 	bl	8016e60 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8013ab6:	6878      	ldr	r0, [r7, #4]
 8013ab8:	f7f9 faa8 	bl	800d00c <pbuf_free>
      goto end;
 8013abc:	e032      	b.n	8013b24 <udp_input+0x200>
    }

    if (pcb != NULL) {
 8013abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ac0:	2b00      	cmp	r3, #0
 8013ac2:	d012      	beq.n	8013aea <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8013ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ac6:	699b      	ldr	r3, [r3, #24]
 8013ac8:	2b00      	cmp	r3, #0
 8013aca:	d00a      	beq.n	8013ae2 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8013acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ace:	699c      	ldr	r4, [r3, #24]
 8013ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ad2:	69d8      	ldr	r0, [r3, #28]
 8013ad4:	8a3b      	ldrh	r3, [r7, #16]
 8013ad6:	9300      	str	r3, [sp, #0]
 8013ad8:	4b1b      	ldr	r3, [pc, #108]	; (8013b48 <udp_input+0x224>)
 8013ada:	687a      	ldr	r2, [r7, #4]
 8013adc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013ade:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8013ae0:	e021      	b.n	8013b26 <udp_input+0x202>
        pbuf_free(p);
 8013ae2:	6878      	ldr	r0, [r7, #4]
 8013ae4:	f7f9 fa92 	bl	800d00c <pbuf_free>
        goto end;
 8013ae8:	e01c      	b.n	8013b24 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8013aea:	7cfb      	ldrb	r3, [r7, #19]
 8013aec:	2b00      	cmp	r3, #0
 8013aee:	d112      	bne.n	8013b16 <udp_input+0x1f2>
 8013af0:	4b12      	ldr	r3, [pc, #72]	; (8013b3c <udp_input+0x218>)
 8013af2:	695b      	ldr	r3, [r3, #20]
 8013af4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8013af8:	2be0      	cmp	r3, #224	; 0xe0
 8013afa:	d00c      	beq.n	8013b16 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8013afc:	4b0f      	ldr	r3, [pc, #60]	; (8013b3c <udp_input+0x218>)
 8013afe:	899b      	ldrh	r3, [r3, #12]
 8013b00:	3308      	adds	r3, #8
 8013b02:	b29b      	uxth	r3, r3
 8013b04:	b21b      	sxth	r3, r3
 8013b06:	4619      	mov	r1, r3
 8013b08:	6878      	ldr	r0, [r7, #4]
 8013b0a:	f7f9 fa3a 	bl	800cf82 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8013b0e:	2103      	movs	r1, #3
 8013b10:	6878      	ldr	r0, [r7, #4]
 8013b12:	f001 fb93 	bl	801523c <icmp_dest_unreach>
      pbuf_free(p);
 8013b16:	6878      	ldr	r0, [r7, #4]
 8013b18:	f7f9 fa78 	bl	800d00c <pbuf_free>
  return;
 8013b1c:	e003      	b.n	8013b26 <udp_input+0x202>
    pbuf_free(p);
 8013b1e:	6878      	ldr	r0, [r7, #4]
 8013b20:	f7f9 fa74 	bl	800d00c <pbuf_free>
  return;
 8013b24:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8013b26:	372c      	adds	r7, #44	; 0x2c
 8013b28:	46bd      	mov	sp, r7
 8013b2a:	bd90      	pop	{r4, r7, pc}
 8013b2c:	0801afb0 	.word	0x0801afb0
 8013b30:	0801b054 	.word	0x0801b054
 8013b34:	0801b004 	.word	0x0801b004
 8013b38:	0801b06c 	.word	0x0801b06c
 8013b3c:	20007b28 	.word	0x20007b28
 8013b40:	2000d414 	.word	0x2000d414
 8013b44:	0801b088 	.word	0x0801b088
 8013b48:	20007b38 	.word	0x20007b38

08013b4c <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 8013b4c:	b580      	push	{r7, lr}
 8013b4e:	b082      	sub	sp, #8
 8013b50:	af00      	add	r7, sp, #0
 8013b52:	6078      	str	r0, [r7, #4]
 8013b54:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 8013b56:	687b      	ldr	r3, [r7, #4]
 8013b58:	2b00      	cmp	r3, #0
 8013b5a:	d109      	bne.n	8013b70 <udp_send+0x24>
 8013b5c:	4b11      	ldr	r3, [pc, #68]	; (8013ba4 <udp_send+0x58>)
 8013b5e:	f240 12d5 	movw	r2, #469	; 0x1d5
 8013b62:	4911      	ldr	r1, [pc, #68]	; (8013ba8 <udp_send+0x5c>)
 8013b64:	4811      	ldr	r0, [pc, #68]	; (8013bac <udp_send+0x60>)
 8013b66:	f003 f97b 	bl	8016e60 <iprintf>
 8013b6a:	f06f 030f 	mvn.w	r3, #15
 8013b6e:	e015      	b.n	8013b9c <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 8013b70:	683b      	ldr	r3, [r7, #0]
 8013b72:	2b00      	cmp	r3, #0
 8013b74:	d109      	bne.n	8013b8a <udp_send+0x3e>
 8013b76:	4b0b      	ldr	r3, [pc, #44]	; (8013ba4 <udp_send+0x58>)
 8013b78:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 8013b7c:	490c      	ldr	r1, [pc, #48]	; (8013bb0 <udp_send+0x64>)
 8013b7e:	480b      	ldr	r0, [pc, #44]	; (8013bac <udp_send+0x60>)
 8013b80:	f003 f96e 	bl	8016e60 <iprintf>
 8013b84:	f06f 030f 	mvn.w	r3, #15
 8013b88:	e008      	b.n	8013b9c <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 8013b8a:	687b      	ldr	r3, [r7, #4]
 8013b8c:	1d1a      	adds	r2, r3, #4
 8013b8e:	687b      	ldr	r3, [r7, #4]
 8013b90:	8a9b      	ldrh	r3, [r3, #20]
 8013b92:	6839      	ldr	r1, [r7, #0]
 8013b94:	6878      	ldr	r0, [r7, #4]
 8013b96:	f000 f80d 	bl	8013bb4 <udp_sendto>
 8013b9a:	4603      	mov	r3, r0
}
 8013b9c:	4618      	mov	r0, r3
 8013b9e:	3708      	adds	r7, #8
 8013ba0:	46bd      	mov	sp, r7
 8013ba2:	bd80      	pop	{r7, pc}
 8013ba4:	0801afb0 	.word	0x0801afb0
 8013ba8:	0801b0a4 	.word	0x0801b0a4
 8013bac:	0801b004 	.word	0x0801b004
 8013bb0:	0801b0bc 	.word	0x0801b0bc

08013bb4 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 8013bb4:	b580      	push	{r7, lr}
 8013bb6:	b088      	sub	sp, #32
 8013bb8:	af02      	add	r7, sp, #8
 8013bba:	60f8      	str	r0, [r7, #12]
 8013bbc:	60b9      	str	r1, [r7, #8]
 8013bbe:	607a      	str	r2, [r7, #4]
 8013bc0:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 8013bc2:	68fb      	ldr	r3, [r7, #12]
 8013bc4:	2b00      	cmp	r3, #0
 8013bc6:	d109      	bne.n	8013bdc <udp_sendto+0x28>
 8013bc8:	4b23      	ldr	r3, [pc, #140]	; (8013c58 <udp_sendto+0xa4>)
 8013bca:	f44f 7206 	mov.w	r2, #536	; 0x218
 8013bce:	4923      	ldr	r1, [pc, #140]	; (8013c5c <udp_sendto+0xa8>)
 8013bd0:	4823      	ldr	r0, [pc, #140]	; (8013c60 <udp_sendto+0xac>)
 8013bd2:	f003 f945 	bl	8016e60 <iprintf>
 8013bd6:	f06f 030f 	mvn.w	r3, #15
 8013bda:	e038      	b.n	8013c4e <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 8013bdc:	68bb      	ldr	r3, [r7, #8]
 8013bde:	2b00      	cmp	r3, #0
 8013be0:	d109      	bne.n	8013bf6 <udp_sendto+0x42>
 8013be2:	4b1d      	ldr	r3, [pc, #116]	; (8013c58 <udp_sendto+0xa4>)
 8013be4:	f240 2219 	movw	r2, #537	; 0x219
 8013be8:	491e      	ldr	r1, [pc, #120]	; (8013c64 <udp_sendto+0xb0>)
 8013bea:	481d      	ldr	r0, [pc, #116]	; (8013c60 <udp_sendto+0xac>)
 8013bec:	f003 f938 	bl	8016e60 <iprintf>
 8013bf0:	f06f 030f 	mvn.w	r3, #15
 8013bf4:	e02b      	b.n	8013c4e <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8013bf6:	687b      	ldr	r3, [r7, #4]
 8013bf8:	2b00      	cmp	r3, #0
 8013bfa:	d109      	bne.n	8013c10 <udp_sendto+0x5c>
 8013bfc:	4b16      	ldr	r3, [pc, #88]	; (8013c58 <udp_sendto+0xa4>)
 8013bfe:	f240 221a 	movw	r2, #538	; 0x21a
 8013c02:	4919      	ldr	r1, [pc, #100]	; (8013c68 <udp_sendto+0xb4>)
 8013c04:	4816      	ldr	r0, [pc, #88]	; (8013c60 <udp_sendto+0xac>)
 8013c06:	f003 f92b 	bl	8016e60 <iprintf>
 8013c0a:	f06f 030f 	mvn.w	r3, #15
 8013c0e:	e01e      	b.n	8013c4e <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8013c10:	68fb      	ldr	r3, [r7, #12]
 8013c12:	7a1b      	ldrb	r3, [r3, #8]
 8013c14:	2b00      	cmp	r3, #0
 8013c16:	d006      	beq.n	8013c26 <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 8013c18:	68fb      	ldr	r3, [r7, #12]
 8013c1a:	7a1b      	ldrb	r3, [r3, #8]
 8013c1c:	4618      	mov	r0, r3
 8013c1e:	f7f8 fe39 	bl	800c894 <netif_get_by_index>
 8013c22:	6178      	str	r0, [r7, #20]
 8013c24:	e003      	b.n	8013c2e <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 8013c26:	6878      	ldr	r0, [r7, #4]
 8013c28:	f001 fb92 	bl	8015350 <ip4_route>
 8013c2c:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 8013c2e:	697b      	ldr	r3, [r7, #20]
 8013c30:	2b00      	cmp	r3, #0
 8013c32:	d102      	bne.n	8013c3a <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 8013c34:	f06f 0303 	mvn.w	r3, #3
 8013c38:	e009      	b.n	8013c4e <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 8013c3a:	887a      	ldrh	r2, [r7, #2]
 8013c3c:	697b      	ldr	r3, [r7, #20]
 8013c3e:	9300      	str	r3, [sp, #0]
 8013c40:	4613      	mov	r3, r2
 8013c42:	687a      	ldr	r2, [r7, #4]
 8013c44:	68b9      	ldr	r1, [r7, #8]
 8013c46:	68f8      	ldr	r0, [r7, #12]
 8013c48:	f000 f810 	bl	8013c6c <udp_sendto_if>
 8013c4c:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8013c4e:	4618      	mov	r0, r3
 8013c50:	3718      	adds	r7, #24
 8013c52:	46bd      	mov	sp, r7
 8013c54:	bd80      	pop	{r7, pc}
 8013c56:	bf00      	nop
 8013c58:	0801afb0 	.word	0x0801afb0
 8013c5c:	0801b0d4 	.word	0x0801b0d4
 8013c60:	0801b004 	.word	0x0801b004
 8013c64:	0801b0ec 	.word	0x0801b0ec
 8013c68:	0801b108 	.word	0x0801b108

08013c6c <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8013c6c:	b580      	push	{r7, lr}
 8013c6e:	b088      	sub	sp, #32
 8013c70:	af02      	add	r7, sp, #8
 8013c72:	60f8      	str	r0, [r7, #12]
 8013c74:	60b9      	str	r1, [r7, #8]
 8013c76:	607a      	str	r2, [r7, #4]
 8013c78:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 8013c7a:	68fb      	ldr	r3, [r7, #12]
 8013c7c:	2b00      	cmp	r3, #0
 8013c7e:	d109      	bne.n	8013c94 <udp_sendto_if+0x28>
 8013c80:	4b2e      	ldr	r3, [pc, #184]	; (8013d3c <udp_sendto_if+0xd0>)
 8013c82:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013c86:	492e      	ldr	r1, [pc, #184]	; (8013d40 <udp_sendto_if+0xd4>)
 8013c88:	482e      	ldr	r0, [pc, #184]	; (8013d44 <udp_sendto_if+0xd8>)
 8013c8a:	f003 f8e9 	bl	8016e60 <iprintf>
 8013c8e:	f06f 030f 	mvn.w	r3, #15
 8013c92:	e04f      	b.n	8013d34 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8013c94:	68bb      	ldr	r3, [r7, #8]
 8013c96:	2b00      	cmp	r3, #0
 8013c98:	d109      	bne.n	8013cae <udp_sendto_if+0x42>
 8013c9a:	4b28      	ldr	r3, [pc, #160]	; (8013d3c <udp_sendto_if+0xd0>)
 8013c9c:	f240 2281 	movw	r2, #641	; 0x281
 8013ca0:	4929      	ldr	r1, [pc, #164]	; (8013d48 <udp_sendto_if+0xdc>)
 8013ca2:	4828      	ldr	r0, [pc, #160]	; (8013d44 <udp_sendto_if+0xd8>)
 8013ca4:	f003 f8dc 	bl	8016e60 <iprintf>
 8013ca8:	f06f 030f 	mvn.w	r3, #15
 8013cac:	e042      	b.n	8013d34 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8013cae:	687b      	ldr	r3, [r7, #4]
 8013cb0:	2b00      	cmp	r3, #0
 8013cb2:	d109      	bne.n	8013cc8 <udp_sendto_if+0x5c>
 8013cb4:	4b21      	ldr	r3, [pc, #132]	; (8013d3c <udp_sendto_if+0xd0>)
 8013cb6:	f240 2282 	movw	r2, #642	; 0x282
 8013cba:	4924      	ldr	r1, [pc, #144]	; (8013d4c <udp_sendto_if+0xe0>)
 8013cbc:	4821      	ldr	r0, [pc, #132]	; (8013d44 <udp_sendto_if+0xd8>)
 8013cbe:	f003 f8cf 	bl	8016e60 <iprintf>
 8013cc2:	f06f 030f 	mvn.w	r3, #15
 8013cc6:	e035      	b.n	8013d34 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8013cc8:	6a3b      	ldr	r3, [r7, #32]
 8013cca:	2b00      	cmp	r3, #0
 8013ccc:	d109      	bne.n	8013ce2 <udp_sendto_if+0x76>
 8013cce:	4b1b      	ldr	r3, [pc, #108]	; (8013d3c <udp_sendto_if+0xd0>)
 8013cd0:	f240 2283 	movw	r2, #643	; 0x283
 8013cd4:	491e      	ldr	r1, [pc, #120]	; (8013d50 <udp_sendto_if+0xe4>)
 8013cd6:	481b      	ldr	r0, [pc, #108]	; (8013d44 <udp_sendto_if+0xd8>)
 8013cd8:	f003 f8c2 	bl	8016e60 <iprintf>
 8013cdc:	f06f 030f 	mvn.w	r3, #15
 8013ce0:	e028      	b.n	8013d34 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8013ce2:	68fb      	ldr	r3, [r7, #12]
 8013ce4:	2b00      	cmp	r3, #0
 8013ce6:	d009      	beq.n	8013cfc <udp_sendto_if+0x90>
 8013ce8:	68fb      	ldr	r3, [r7, #12]
 8013cea:	681b      	ldr	r3, [r3, #0]
 8013cec:	2b00      	cmp	r3, #0
 8013cee:	d005      	beq.n	8013cfc <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8013cf0:	68fb      	ldr	r3, [r7, #12]
 8013cf2:	681b      	ldr	r3, [r3, #0]
 8013cf4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8013cf8:	2be0      	cmp	r3, #224	; 0xe0
 8013cfa:	d103      	bne.n	8013d04 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 8013cfc:	6a3b      	ldr	r3, [r7, #32]
 8013cfe:	3304      	adds	r3, #4
 8013d00:	617b      	str	r3, [r7, #20]
 8013d02:	e00b      	b.n	8013d1c <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8013d04:	68fb      	ldr	r3, [r7, #12]
 8013d06:	681a      	ldr	r2, [r3, #0]
 8013d08:	6a3b      	ldr	r3, [r7, #32]
 8013d0a:	3304      	adds	r3, #4
 8013d0c:	681b      	ldr	r3, [r3, #0]
 8013d0e:	429a      	cmp	r2, r3
 8013d10:	d002      	beq.n	8013d18 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 8013d12:	f06f 0303 	mvn.w	r3, #3
 8013d16:	e00d      	b.n	8013d34 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 8013d18:	68fb      	ldr	r3, [r7, #12]
 8013d1a:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8013d1c:	887a      	ldrh	r2, [r7, #2]
 8013d1e:	697b      	ldr	r3, [r7, #20]
 8013d20:	9301      	str	r3, [sp, #4]
 8013d22:	6a3b      	ldr	r3, [r7, #32]
 8013d24:	9300      	str	r3, [sp, #0]
 8013d26:	4613      	mov	r3, r2
 8013d28:	687a      	ldr	r2, [r7, #4]
 8013d2a:	68b9      	ldr	r1, [r7, #8]
 8013d2c:	68f8      	ldr	r0, [r7, #12]
 8013d2e:	f000 f811 	bl	8013d54 <udp_sendto_if_src>
 8013d32:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8013d34:	4618      	mov	r0, r3
 8013d36:	3718      	adds	r7, #24
 8013d38:	46bd      	mov	sp, r7
 8013d3a:	bd80      	pop	{r7, pc}
 8013d3c:	0801afb0 	.word	0x0801afb0
 8013d40:	0801b124 	.word	0x0801b124
 8013d44:	0801b004 	.word	0x0801b004
 8013d48:	0801b140 	.word	0x0801b140
 8013d4c:	0801b15c 	.word	0x0801b15c
 8013d50:	0801b17c 	.word	0x0801b17c

08013d54 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8013d54:	b580      	push	{r7, lr}
 8013d56:	b08c      	sub	sp, #48	; 0x30
 8013d58:	af04      	add	r7, sp, #16
 8013d5a:	60f8      	str	r0, [r7, #12]
 8013d5c:	60b9      	str	r1, [r7, #8]
 8013d5e:	607a      	str	r2, [r7, #4]
 8013d60:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 8013d62:	68fb      	ldr	r3, [r7, #12]
 8013d64:	2b00      	cmp	r3, #0
 8013d66:	d109      	bne.n	8013d7c <udp_sendto_if_src+0x28>
 8013d68:	4b65      	ldr	r3, [pc, #404]	; (8013f00 <udp_sendto_if_src+0x1ac>)
 8013d6a:	f240 22d1 	movw	r2, #721	; 0x2d1
 8013d6e:	4965      	ldr	r1, [pc, #404]	; (8013f04 <udp_sendto_if_src+0x1b0>)
 8013d70:	4865      	ldr	r0, [pc, #404]	; (8013f08 <udp_sendto_if_src+0x1b4>)
 8013d72:	f003 f875 	bl	8016e60 <iprintf>
 8013d76:	f06f 030f 	mvn.w	r3, #15
 8013d7a:	e0bc      	b.n	8013ef6 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8013d7c:	68bb      	ldr	r3, [r7, #8]
 8013d7e:	2b00      	cmp	r3, #0
 8013d80:	d109      	bne.n	8013d96 <udp_sendto_if_src+0x42>
 8013d82:	4b5f      	ldr	r3, [pc, #380]	; (8013f00 <udp_sendto_if_src+0x1ac>)
 8013d84:	f240 22d2 	movw	r2, #722	; 0x2d2
 8013d88:	4960      	ldr	r1, [pc, #384]	; (8013f0c <udp_sendto_if_src+0x1b8>)
 8013d8a:	485f      	ldr	r0, [pc, #380]	; (8013f08 <udp_sendto_if_src+0x1b4>)
 8013d8c:	f003 f868 	bl	8016e60 <iprintf>
 8013d90:	f06f 030f 	mvn.w	r3, #15
 8013d94:	e0af      	b.n	8013ef6 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8013d96:	687b      	ldr	r3, [r7, #4]
 8013d98:	2b00      	cmp	r3, #0
 8013d9a:	d109      	bne.n	8013db0 <udp_sendto_if_src+0x5c>
 8013d9c:	4b58      	ldr	r3, [pc, #352]	; (8013f00 <udp_sendto_if_src+0x1ac>)
 8013d9e:	f240 22d3 	movw	r2, #723	; 0x2d3
 8013da2:	495b      	ldr	r1, [pc, #364]	; (8013f10 <udp_sendto_if_src+0x1bc>)
 8013da4:	4858      	ldr	r0, [pc, #352]	; (8013f08 <udp_sendto_if_src+0x1b4>)
 8013da6:	f003 f85b 	bl	8016e60 <iprintf>
 8013daa:	f06f 030f 	mvn.w	r3, #15
 8013dae:	e0a2      	b.n	8013ef6 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8013db0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013db2:	2b00      	cmp	r3, #0
 8013db4:	d109      	bne.n	8013dca <udp_sendto_if_src+0x76>
 8013db6:	4b52      	ldr	r3, [pc, #328]	; (8013f00 <udp_sendto_if_src+0x1ac>)
 8013db8:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 8013dbc:	4955      	ldr	r1, [pc, #340]	; (8013f14 <udp_sendto_if_src+0x1c0>)
 8013dbe:	4852      	ldr	r0, [pc, #328]	; (8013f08 <udp_sendto_if_src+0x1b4>)
 8013dc0:	f003 f84e 	bl	8016e60 <iprintf>
 8013dc4:	f06f 030f 	mvn.w	r3, #15
 8013dc8:	e095      	b.n	8013ef6 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 8013dca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013dcc:	2b00      	cmp	r3, #0
 8013dce:	d109      	bne.n	8013de4 <udp_sendto_if_src+0x90>
 8013dd0:	4b4b      	ldr	r3, [pc, #300]	; (8013f00 <udp_sendto_if_src+0x1ac>)
 8013dd2:	f240 22d5 	movw	r2, #725	; 0x2d5
 8013dd6:	4950      	ldr	r1, [pc, #320]	; (8013f18 <udp_sendto_if_src+0x1c4>)
 8013dd8:	484b      	ldr	r0, [pc, #300]	; (8013f08 <udp_sendto_if_src+0x1b4>)
 8013dda:	f003 f841 	bl	8016e60 <iprintf>
 8013dde:	f06f 030f 	mvn.w	r3, #15
 8013de2:	e088      	b.n	8013ef6 <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8013de4:	68fb      	ldr	r3, [r7, #12]
 8013de6:	8a5b      	ldrh	r3, [r3, #18]
 8013de8:	2b00      	cmp	r3, #0
 8013dea:	d10f      	bne.n	8013e0c <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8013dec:	68f9      	ldr	r1, [r7, #12]
 8013dee:	68fb      	ldr	r3, [r7, #12]
 8013df0:	8a5b      	ldrh	r3, [r3, #18]
 8013df2:	461a      	mov	r2, r3
 8013df4:	68f8      	ldr	r0, [r7, #12]
 8013df6:	f000 f893 	bl	8013f20 <udp_bind>
 8013dfa:	4603      	mov	r3, r0
 8013dfc:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 8013dfe:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8013e02:	2b00      	cmp	r3, #0
 8013e04:	d002      	beq.n	8013e0c <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 8013e06:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8013e0a:	e074      	b.n	8013ef6 <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 8013e0c:	68bb      	ldr	r3, [r7, #8]
 8013e0e:	891b      	ldrh	r3, [r3, #8]
 8013e10:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8013e14:	4293      	cmp	r3, r2
 8013e16:	d902      	bls.n	8013e1e <udp_sendto_if_src+0xca>
    return ERR_MEM;
 8013e18:	f04f 33ff 	mov.w	r3, #4294967295
 8013e1c:	e06b      	b.n	8013ef6 <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 8013e1e:	2108      	movs	r1, #8
 8013e20:	68b8      	ldr	r0, [r7, #8]
 8013e22:	f7f9 f82b 	bl	800ce7c <pbuf_add_header>
 8013e26:	4603      	mov	r3, r0
 8013e28:	2b00      	cmp	r3, #0
 8013e2a:	d015      	beq.n	8013e58 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8013e2c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013e30:	2108      	movs	r1, #8
 8013e32:	2022      	movs	r0, #34	; 0x22
 8013e34:	f7f8 fdd8 	bl	800c9e8 <pbuf_alloc>
 8013e38:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 8013e3a:	69fb      	ldr	r3, [r7, #28]
 8013e3c:	2b00      	cmp	r3, #0
 8013e3e:	d102      	bne.n	8013e46 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8013e40:	f04f 33ff 	mov.w	r3, #4294967295
 8013e44:	e057      	b.n	8013ef6 <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 8013e46:	68bb      	ldr	r3, [r7, #8]
 8013e48:	891b      	ldrh	r3, [r3, #8]
 8013e4a:	2b00      	cmp	r3, #0
 8013e4c:	d006      	beq.n	8013e5c <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 8013e4e:	68b9      	ldr	r1, [r7, #8]
 8013e50:	69f8      	ldr	r0, [r7, #28]
 8013e52:	f7f9 f9ff 	bl	800d254 <pbuf_chain>
 8013e56:	e001      	b.n	8013e5c <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8013e58:	68bb      	ldr	r3, [r7, #8]
 8013e5a:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8013e5c:	69fb      	ldr	r3, [r7, #28]
 8013e5e:	895b      	ldrh	r3, [r3, #10]
 8013e60:	2b07      	cmp	r3, #7
 8013e62:	d806      	bhi.n	8013e72 <udp_sendto_if_src+0x11e>
 8013e64:	4b26      	ldr	r3, [pc, #152]	; (8013f00 <udp_sendto_if_src+0x1ac>)
 8013e66:	f240 320e 	movw	r2, #782	; 0x30e
 8013e6a:	492c      	ldr	r1, [pc, #176]	; (8013f1c <udp_sendto_if_src+0x1c8>)
 8013e6c:	4826      	ldr	r0, [pc, #152]	; (8013f08 <udp_sendto_if_src+0x1b4>)
 8013e6e:	f002 fff7 	bl	8016e60 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8013e72:	69fb      	ldr	r3, [r7, #28]
 8013e74:	685b      	ldr	r3, [r3, #4]
 8013e76:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8013e78:	68fb      	ldr	r3, [r7, #12]
 8013e7a:	8a5b      	ldrh	r3, [r3, #18]
 8013e7c:	4618      	mov	r0, r3
 8013e7e:	f7f7 fceb 	bl	800b858 <lwip_htons>
 8013e82:	4603      	mov	r3, r0
 8013e84:	461a      	mov	r2, r3
 8013e86:	697b      	ldr	r3, [r7, #20]
 8013e88:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 8013e8a:	887b      	ldrh	r3, [r7, #2]
 8013e8c:	4618      	mov	r0, r3
 8013e8e:	f7f7 fce3 	bl	800b858 <lwip_htons>
 8013e92:	4603      	mov	r3, r0
 8013e94:	461a      	mov	r2, r3
 8013e96:	697b      	ldr	r3, [r7, #20]
 8013e98:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 8013e9a:	697b      	ldr	r3, [r7, #20]
 8013e9c:	2200      	movs	r2, #0
 8013e9e:	719a      	strb	r2, [r3, #6]
 8013ea0:	2200      	movs	r2, #0
 8013ea2:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8013ea4:	69fb      	ldr	r3, [r7, #28]
 8013ea6:	891b      	ldrh	r3, [r3, #8]
 8013ea8:	4618      	mov	r0, r3
 8013eaa:	f7f7 fcd5 	bl	800b858 <lwip_htons>
 8013eae:	4603      	mov	r3, r0
 8013eb0:	461a      	mov	r2, r3
 8013eb2:	697b      	ldr	r3, [r7, #20]
 8013eb4:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 8013eb6:	2311      	movs	r3, #17
 8013eb8:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 8013eba:	68fb      	ldr	r3, [r7, #12]
 8013ebc:	7adb      	ldrb	r3, [r3, #11]
 8013ebe:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8013ec0:	68fb      	ldr	r3, [r7, #12]
 8013ec2:	7a9b      	ldrb	r3, [r3, #10]
 8013ec4:	7cb9      	ldrb	r1, [r7, #18]
 8013ec6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013ec8:	9202      	str	r2, [sp, #8]
 8013eca:	7cfa      	ldrb	r2, [r7, #19]
 8013ecc:	9201      	str	r2, [sp, #4]
 8013ece:	9300      	str	r3, [sp, #0]
 8013ed0:	460b      	mov	r3, r1
 8013ed2:	687a      	ldr	r2, [r7, #4]
 8013ed4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8013ed6:	69f8      	ldr	r0, [r7, #28]
 8013ed8:	f001 fc20 	bl	801571c <ip4_output_if_src>
 8013edc:	4603      	mov	r3, r0
 8013ede:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8013ee0:	69fa      	ldr	r2, [r7, #28]
 8013ee2:	68bb      	ldr	r3, [r7, #8]
 8013ee4:	429a      	cmp	r2, r3
 8013ee6:	d004      	beq.n	8013ef2 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 8013ee8:	69f8      	ldr	r0, [r7, #28]
 8013eea:	f7f9 f88f 	bl	800d00c <pbuf_free>
    q = NULL;
 8013eee:	2300      	movs	r3, #0
 8013ef0:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 8013ef2:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 8013ef6:	4618      	mov	r0, r3
 8013ef8:	3720      	adds	r7, #32
 8013efa:	46bd      	mov	sp, r7
 8013efc:	bd80      	pop	{r7, pc}
 8013efe:	bf00      	nop
 8013f00:	0801afb0 	.word	0x0801afb0
 8013f04:	0801b19c 	.word	0x0801b19c
 8013f08:	0801b004 	.word	0x0801b004
 8013f0c:	0801b1bc 	.word	0x0801b1bc
 8013f10:	0801b1dc 	.word	0x0801b1dc
 8013f14:	0801b200 	.word	0x0801b200
 8013f18:	0801b224 	.word	0x0801b224
 8013f1c:	0801b248 	.word	0x0801b248

08013f20 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8013f20:	b580      	push	{r7, lr}
 8013f22:	b086      	sub	sp, #24
 8013f24:	af00      	add	r7, sp, #0
 8013f26:	60f8      	str	r0, [r7, #12]
 8013f28:	60b9      	str	r1, [r7, #8]
 8013f2a:	4613      	mov	r3, r2
 8013f2c:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8013f2e:	68bb      	ldr	r3, [r7, #8]
 8013f30:	2b00      	cmp	r3, #0
 8013f32:	d101      	bne.n	8013f38 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8013f34:	4b39      	ldr	r3, [pc, #228]	; (801401c <udp_bind+0xfc>)
 8013f36:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8013f38:	68fb      	ldr	r3, [r7, #12]
 8013f3a:	2b00      	cmp	r3, #0
 8013f3c:	d109      	bne.n	8013f52 <udp_bind+0x32>
 8013f3e:	4b38      	ldr	r3, [pc, #224]	; (8014020 <udp_bind+0x100>)
 8013f40:	f240 32b7 	movw	r2, #951	; 0x3b7
 8013f44:	4937      	ldr	r1, [pc, #220]	; (8014024 <udp_bind+0x104>)
 8013f46:	4838      	ldr	r0, [pc, #224]	; (8014028 <udp_bind+0x108>)
 8013f48:	f002 ff8a 	bl	8016e60 <iprintf>
 8013f4c:	f06f 030f 	mvn.w	r3, #15
 8013f50:	e060      	b.n	8014014 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8013f52:	2300      	movs	r3, #0
 8013f54:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013f56:	4b35      	ldr	r3, [pc, #212]	; (801402c <udp_bind+0x10c>)
 8013f58:	681b      	ldr	r3, [r3, #0]
 8013f5a:	617b      	str	r3, [r7, #20]
 8013f5c:	e009      	b.n	8013f72 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8013f5e:	68fa      	ldr	r2, [r7, #12]
 8013f60:	697b      	ldr	r3, [r7, #20]
 8013f62:	429a      	cmp	r2, r3
 8013f64:	d102      	bne.n	8013f6c <udp_bind+0x4c>
      rebind = 1;
 8013f66:	2301      	movs	r3, #1
 8013f68:	74fb      	strb	r3, [r7, #19]
      break;
 8013f6a:	e005      	b.n	8013f78 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013f6c:	697b      	ldr	r3, [r7, #20]
 8013f6e:	68db      	ldr	r3, [r3, #12]
 8013f70:	617b      	str	r3, [r7, #20]
 8013f72:	697b      	ldr	r3, [r7, #20]
 8013f74:	2b00      	cmp	r3, #0
 8013f76:	d1f2      	bne.n	8013f5e <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8013f78:	88fb      	ldrh	r3, [r7, #6]
 8013f7a:	2b00      	cmp	r3, #0
 8013f7c:	d109      	bne.n	8013f92 <udp_bind+0x72>
    port = udp_new_port();
 8013f7e:	f7ff fc35 	bl	80137ec <udp_new_port>
 8013f82:	4603      	mov	r3, r0
 8013f84:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8013f86:	88fb      	ldrh	r3, [r7, #6]
 8013f88:	2b00      	cmp	r3, #0
 8013f8a:	d12c      	bne.n	8013fe6 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8013f8c:	f06f 0307 	mvn.w	r3, #7
 8013f90:	e040      	b.n	8014014 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013f92:	4b26      	ldr	r3, [pc, #152]	; (801402c <udp_bind+0x10c>)
 8013f94:	681b      	ldr	r3, [r3, #0]
 8013f96:	617b      	str	r3, [r7, #20]
 8013f98:	e022      	b.n	8013fe0 <udp_bind+0xc0>
      if (pcb != ipcb) {
 8013f9a:	68fa      	ldr	r2, [r7, #12]
 8013f9c:	697b      	ldr	r3, [r7, #20]
 8013f9e:	429a      	cmp	r2, r3
 8013fa0:	d01b      	beq.n	8013fda <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8013fa2:	697b      	ldr	r3, [r7, #20]
 8013fa4:	8a5b      	ldrh	r3, [r3, #18]
 8013fa6:	88fa      	ldrh	r2, [r7, #6]
 8013fa8:	429a      	cmp	r2, r3
 8013faa:	d116      	bne.n	8013fda <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8013fac:	697b      	ldr	r3, [r7, #20]
 8013fae:	681a      	ldr	r2, [r3, #0]
 8013fb0:	68bb      	ldr	r3, [r7, #8]
 8013fb2:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8013fb4:	429a      	cmp	r2, r3
 8013fb6:	d00d      	beq.n	8013fd4 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8013fb8:	68bb      	ldr	r3, [r7, #8]
 8013fba:	2b00      	cmp	r3, #0
 8013fbc:	d00a      	beq.n	8013fd4 <udp_bind+0xb4>
 8013fbe:	68bb      	ldr	r3, [r7, #8]
 8013fc0:	681b      	ldr	r3, [r3, #0]
 8013fc2:	2b00      	cmp	r3, #0
 8013fc4:	d006      	beq.n	8013fd4 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8013fc6:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8013fc8:	2b00      	cmp	r3, #0
 8013fca:	d003      	beq.n	8013fd4 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8013fcc:	697b      	ldr	r3, [r7, #20]
 8013fce:	681b      	ldr	r3, [r3, #0]
 8013fd0:	2b00      	cmp	r3, #0
 8013fd2:	d102      	bne.n	8013fda <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8013fd4:	f06f 0307 	mvn.w	r3, #7
 8013fd8:	e01c      	b.n	8014014 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013fda:	697b      	ldr	r3, [r7, #20]
 8013fdc:	68db      	ldr	r3, [r3, #12]
 8013fde:	617b      	str	r3, [r7, #20]
 8013fe0:	697b      	ldr	r3, [r7, #20]
 8013fe2:	2b00      	cmp	r3, #0
 8013fe4:	d1d9      	bne.n	8013f9a <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8013fe6:	68bb      	ldr	r3, [r7, #8]
 8013fe8:	2b00      	cmp	r3, #0
 8013fea:	d002      	beq.n	8013ff2 <udp_bind+0xd2>
 8013fec:	68bb      	ldr	r3, [r7, #8]
 8013fee:	681b      	ldr	r3, [r3, #0]
 8013ff0:	e000      	b.n	8013ff4 <udp_bind+0xd4>
 8013ff2:	2300      	movs	r3, #0
 8013ff4:	68fa      	ldr	r2, [r7, #12]
 8013ff6:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8013ff8:	68fb      	ldr	r3, [r7, #12]
 8013ffa:	88fa      	ldrh	r2, [r7, #6]
 8013ffc:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8013ffe:	7cfb      	ldrb	r3, [r7, #19]
 8014000:	2b00      	cmp	r3, #0
 8014002:	d106      	bne.n	8014012 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8014004:	4b09      	ldr	r3, [pc, #36]	; (801402c <udp_bind+0x10c>)
 8014006:	681a      	ldr	r2, [r3, #0]
 8014008:	68fb      	ldr	r3, [r7, #12]
 801400a:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 801400c:	4a07      	ldr	r2, [pc, #28]	; (801402c <udp_bind+0x10c>)
 801400e:	68fb      	ldr	r3, [r7, #12]
 8014010:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8014012:	2300      	movs	r3, #0
}
 8014014:	4618      	mov	r0, r3
 8014016:	3718      	adds	r7, #24
 8014018:	46bd      	mov	sp, r7
 801401a:	bd80      	pop	{r7, pc}
 801401c:	0801bbb8 	.word	0x0801bbb8
 8014020:	0801afb0 	.word	0x0801afb0
 8014024:	0801b278 	.word	0x0801b278
 8014028:	0801b004 	.word	0x0801b004
 801402c:	2000d414 	.word	0x2000d414

08014030 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8014030:	b580      	push	{r7, lr}
 8014032:	b084      	sub	sp, #16
 8014034:	af00      	add	r7, sp, #0
 8014036:	60f8      	str	r0, [r7, #12]
 8014038:	60b9      	str	r1, [r7, #8]
 801403a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 801403c:	68fb      	ldr	r3, [r7, #12]
 801403e:	2b00      	cmp	r3, #0
 8014040:	d107      	bne.n	8014052 <udp_recv+0x22>
 8014042:	4b08      	ldr	r3, [pc, #32]	; (8014064 <udp_recv+0x34>)
 8014044:	f240 428a 	movw	r2, #1162	; 0x48a
 8014048:	4907      	ldr	r1, [pc, #28]	; (8014068 <udp_recv+0x38>)
 801404a:	4808      	ldr	r0, [pc, #32]	; (801406c <udp_recv+0x3c>)
 801404c:	f002 ff08 	bl	8016e60 <iprintf>
 8014050:	e005      	b.n	801405e <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 8014052:	68fb      	ldr	r3, [r7, #12]
 8014054:	68ba      	ldr	r2, [r7, #8]
 8014056:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8014058:	68fb      	ldr	r3, [r7, #12]
 801405a:	687a      	ldr	r2, [r7, #4]
 801405c:	61da      	str	r2, [r3, #28]
}
 801405e:	3710      	adds	r7, #16
 8014060:	46bd      	mov	sp, r7
 8014062:	bd80      	pop	{r7, pc}
 8014064:	0801afb0 	.word	0x0801afb0
 8014068:	0801b2e4 	.word	0x0801b2e4
 801406c:	0801b004 	.word	0x0801b004

08014070 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8014070:	b580      	push	{r7, lr}
 8014072:	b084      	sub	sp, #16
 8014074:	af00      	add	r7, sp, #0
 8014076:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8014078:	687b      	ldr	r3, [r7, #4]
 801407a:	2b00      	cmp	r3, #0
 801407c:	d107      	bne.n	801408e <udp_remove+0x1e>
 801407e:	4b19      	ldr	r3, [pc, #100]	; (80140e4 <udp_remove+0x74>)
 8014080:	f240 42a1 	movw	r2, #1185	; 0x4a1
 8014084:	4918      	ldr	r1, [pc, #96]	; (80140e8 <udp_remove+0x78>)
 8014086:	4819      	ldr	r0, [pc, #100]	; (80140ec <udp_remove+0x7c>)
 8014088:	f002 feea 	bl	8016e60 <iprintf>
 801408c:	e026      	b.n	80140dc <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 801408e:	4b18      	ldr	r3, [pc, #96]	; (80140f0 <udp_remove+0x80>)
 8014090:	681b      	ldr	r3, [r3, #0]
 8014092:	687a      	ldr	r2, [r7, #4]
 8014094:	429a      	cmp	r2, r3
 8014096:	d105      	bne.n	80140a4 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8014098:	4b15      	ldr	r3, [pc, #84]	; (80140f0 <udp_remove+0x80>)
 801409a:	681b      	ldr	r3, [r3, #0]
 801409c:	68db      	ldr	r3, [r3, #12]
 801409e:	4a14      	ldr	r2, [pc, #80]	; (80140f0 <udp_remove+0x80>)
 80140a0:	6013      	str	r3, [r2, #0]
 80140a2:	e017      	b.n	80140d4 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 80140a4:	4b12      	ldr	r3, [pc, #72]	; (80140f0 <udp_remove+0x80>)
 80140a6:	681b      	ldr	r3, [r3, #0]
 80140a8:	60fb      	str	r3, [r7, #12]
 80140aa:	e010      	b.n	80140ce <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 80140ac:	68fb      	ldr	r3, [r7, #12]
 80140ae:	68db      	ldr	r3, [r3, #12]
 80140b0:	2b00      	cmp	r3, #0
 80140b2:	d009      	beq.n	80140c8 <udp_remove+0x58>
 80140b4:	68fb      	ldr	r3, [r7, #12]
 80140b6:	68db      	ldr	r3, [r3, #12]
 80140b8:	687a      	ldr	r2, [r7, #4]
 80140ba:	429a      	cmp	r2, r3
 80140bc:	d104      	bne.n	80140c8 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 80140be:	687b      	ldr	r3, [r7, #4]
 80140c0:	68da      	ldr	r2, [r3, #12]
 80140c2:	68fb      	ldr	r3, [r7, #12]
 80140c4:	60da      	str	r2, [r3, #12]
        break;
 80140c6:	e005      	b.n	80140d4 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 80140c8:	68fb      	ldr	r3, [r7, #12]
 80140ca:	68db      	ldr	r3, [r3, #12]
 80140cc:	60fb      	str	r3, [r7, #12]
 80140ce:	68fb      	ldr	r3, [r7, #12]
 80140d0:	2b00      	cmp	r3, #0
 80140d2:	d1eb      	bne.n	80140ac <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 80140d4:	6879      	ldr	r1, [r7, #4]
 80140d6:	2000      	movs	r0, #0
 80140d8:	f7f8 f8c6 	bl	800c268 <memp_free>
}
 80140dc:	3710      	adds	r7, #16
 80140de:	46bd      	mov	sp, r7
 80140e0:	bd80      	pop	{r7, pc}
 80140e2:	bf00      	nop
 80140e4:	0801afb0 	.word	0x0801afb0
 80140e8:	0801b2fc 	.word	0x0801b2fc
 80140ec:	0801b004 	.word	0x0801b004
 80140f0:	2000d414 	.word	0x2000d414

080140f4 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 80140f4:	b580      	push	{r7, lr}
 80140f6:	b082      	sub	sp, #8
 80140f8:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 80140fa:	2000      	movs	r0, #0
 80140fc:	f7f8 f862 	bl	800c1c4 <memp_malloc>
 8014100:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8014102:	687b      	ldr	r3, [r7, #4]
 8014104:	2b00      	cmp	r3, #0
 8014106:	d007      	beq.n	8014118 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8014108:	2220      	movs	r2, #32
 801410a:	2100      	movs	r1, #0
 801410c:	6878      	ldr	r0, [r7, #4]
 801410e:	f002 fe9e 	bl	8016e4e <memset>
    pcb->ttl = UDP_TTL;
 8014112:	687b      	ldr	r3, [r7, #4]
 8014114:	22ff      	movs	r2, #255	; 0xff
 8014116:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8014118:	687b      	ldr	r3, [r7, #4]
}
 801411a:	4618      	mov	r0, r3
 801411c:	3708      	adds	r7, #8
 801411e:	46bd      	mov	sp, r7
 8014120:	bd80      	pop	{r7, pc}

08014122 <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 8014122:	b580      	push	{r7, lr}
 8014124:	b084      	sub	sp, #16
 8014126:	af00      	add	r7, sp, #0
 8014128:	4603      	mov	r3, r0
 801412a:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 801412c:	f7ff ffe2 	bl	80140f4 <udp_new>
 8014130:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8014132:	68fb      	ldr	r3, [r7, #12]
}
 8014134:	4618      	mov	r0, r3
 8014136:	3710      	adds	r7, #16
 8014138:	46bd      	mov	sp, r7
 801413a:	bd80      	pop	{r7, pc}

0801413c <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801413c:	b480      	push	{r7}
 801413e:	b085      	sub	sp, #20
 8014140:	af00      	add	r7, sp, #0
 8014142:	6078      	str	r0, [r7, #4]
 8014144:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8014146:	687b      	ldr	r3, [r7, #4]
 8014148:	2b00      	cmp	r3, #0
 801414a:	d01e      	beq.n	801418a <udp_netif_ip_addr_changed+0x4e>
 801414c:	687b      	ldr	r3, [r7, #4]
 801414e:	681b      	ldr	r3, [r3, #0]
 8014150:	2b00      	cmp	r3, #0
 8014152:	d01a      	beq.n	801418a <udp_netif_ip_addr_changed+0x4e>
 8014154:	683b      	ldr	r3, [r7, #0]
 8014156:	2b00      	cmp	r3, #0
 8014158:	d017      	beq.n	801418a <udp_netif_ip_addr_changed+0x4e>
 801415a:	683b      	ldr	r3, [r7, #0]
 801415c:	681b      	ldr	r3, [r3, #0]
 801415e:	2b00      	cmp	r3, #0
 8014160:	d013      	beq.n	801418a <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8014162:	4b0d      	ldr	r3, [pc, #52]	; (8014198 <udp_netif_ip_addr_changed+0x5c>)
 8014164:	681b      	ldr	r3, [r3, #0]
 8014166:	60fb      	str	r3, [r7, #12]
 8014168:	e00c      	b.n	8014184 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 801416a:	68fb      	ldr	r3, [r7, #12]
 801416c:	681a      	ldr	r2, [r3, #0]
 801416e:	687b      	ldr	r3, [r7, #4]
 8014170:	681b      	ldr	r3, [r3, #0]
 8014172:	429a      	cmp	r2, r3
 8014174:	d103      	bne.n	801417e <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8014176:	683b      	ldr	r3, [r7, #0]
 8014178:	681a      	ldr	r2, [r3, #0]
 801417a:	68fb      	ldr	r3, [r7, #12]
 801417c:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801417e:	68fb      	ldr	r3, [r7, #12]
 8014180:	68db      	ldr	r3, [r3, #12]
 8014182:	60fb      	str	r3, [r7, #12]
 8014184:	68fb      	ldr	r3, [r7, #12]
 8014186:	2b00      	cmp	r3, #0
 8014188:	d1ef      	bne.n	801416a <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 801418a:	bf00      	nop
 801418c:	3714      	adds	r7, #20
 801418e:	46bd      	mov	sp, r7
 8014190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014194:	4770      	bx	lr
 8014196:	bf00      	nop
 8014198:	2000d414 	.word	0x2000d414

0801419c <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 801419c:	b580      	push	{r7, lr}
 801419e:	b082      	sub	sp, #8
 80141a0:	af00      	add	r7, sp, #0
 80141a2:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 80141a4:	4915      	ldr	r1, [pc, #84]	; (80141fc <etharp_free_entry+0x60>)
 80141a6:	687a      	ldr	r2, [r7, #4]
 80141a8:	4613      	mov	r3, r2
 80141aa:	005b      	lsls	r3, r3, #1
 80141ac:	4413      	add	r3, r2
 80141ae:	00db      	lsls	r3, r3, #3
 80141b0:	440b      	add	r3, r1
 80141b2:	681b      	ldr	r3, [r3, #0]
 80141b4:	2b00      	cmp	r3, #0
 80141b6:	d013      	beq.n	80141e0 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 80141b8:	4910      	ldr	r1, [pc, #64]	; (80141fc <etharp_free_entry+0x60>)
 80141ba:	687a      	ldr	r2, [r7, #4]
 80141bc:	4613      	mov	r3, r2
 80141be:	005b      	lsls	r3, r3, #1
 80141c0:	4413      	add	r3, r2
 80141c2:	00db      	lsls	r3, r3, #3
 80141c4:	440b      	add	r3, r1
 80141c6:	681b      	ldr	r3, [r3, #0]
 80141c8:	4618      	mov	r0, r3
 80141ca:	f7f8 ff1f 	bl	800d00c <pbuf_free>
    arp_table[i].q = NULL;
 80141ce:	490b      	ldr	r1, [pc, #44]	; (80141fc <etharp_free_entry+0x60>)
 80141d0:	687a      	ldr	r2, [r7, #4]
 80141d2:	4613      	mov	r3, r2
 80141d4:	005b      	lsls	r3, r3, #1
 80141d6:	4413      	add	r3, r2
 80141d8:	00db      	lsls	r3, r3, #3
 80141da:	440b      	add	r3, r1
 80141dc:	2200      	movs	r2, #0
 80141de:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 80141e0:	4906      	ldr	r1, [pc, #24]	; (80141fc <etharp_free_entry+0x60>)
 80141e2:	687a      	ldr	r2, [r7, #4]
 80141e4:	4613      	mov	r3, r2
 80141e6:	005b      	lsls	r3, r3, #1
 80141e8:	4413      	add	r3, r2
 80141ea:	00db      	lsls	r3, r3, #3
 80141ec:	440b      	add	r3, r1
 80141ee:	3314      	adds	r3, #20
 80141f0:	2200      	movs	r2, #0
 80141f2:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 80141f4:	bf00      	nop
 80141f6:	3708      	adds	r7, #8
 80141f8:	46bd      	mov	sp, r7
 80141fa:	bd80      	pop	{r7, pc}
 80141fc:	20004804 	.word	0x20004804

08014200 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8014200:	b580      	push	{r7, lr}
 8014202:	b082      	sub	sp, #8
 8014204:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014206:	2300      	movs	r3, #0
 8014208:	607b      	str	r3, [r7, #4]
 801420a:	e096      	b.n	801433a <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 801420c:	494f      	ldr	r1, [pc, #316]	; (801434c <etharp_tmr+0x14c>)
 801420e:	687a      	ldr	r2, [r7, #4]
 8014210:	4613      	mov	r3, r2
 8014212:	005b      	lsls	r3, r3, #1
 8014214:	4413      	add	r3, r2
 8014216:	00db      	lsls	r3, r3, #3
 8014218:	440b      	add	r3, r1
 801421a:	3314      	adds	r3, #20
 801421c:	781b      	ldrb	r3, [r3, #0]
 801421e:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8014220:	78fb      	ldrb	r3, [r7, #3]
 8014222:	2b00      	cmp	r3, #0
 8014224:	f000 8086 	beq.w	8014334 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8014228:	4948      	ldr	r1, [pc, #288]	; (801434c <etharp_tmr+0x14c>)
 801422a:	687a      	ldr	r2, [r7, #4]
 801422c:	4613      	mov	r3, r2
 801422e:	005b      	lsls	r3, r3, #1
 8014230:	4413      	add	r3, r2
 8014232:	00db      	lsls	r3, r3, #3
 8014234:	440b      	add	r3, r1
 8014236:	3312      	adds	r3, #18
 8014238:	881b      	ldrh	r3, [r3, #0]
 801423a:	3301      	adds	r3, #1
 801423c:	b298      	uxth	r0, r3
 801423e:	4943      	ldr	r1, [pc, #268]	; (801434c <etharp_tmr+0x14c>)
 8014240:	687a      	ldr	r2, [r7, #4]
 8014242:	4613      	mov	r3, r2
 8014244:	005b      	lsls	r3, r3, #1
 8014246:	4413      	add	r3, r2
 8014248:	00db      	lsls	r3, r3, #3
 801424a:	440b      	add	r3, r1
 801424c:	3312      	adds	r3, #18
 801424e:	4602      	mov	r2, r0
 8014250:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8014252:	493e      	ldr	r1, [pc, #248]	; (801434c <etharp_tmr+0x14c>)
 8014254:	687a      	ldr	r2, [r7, #4]
 8014256:	4613      	mov	r3, r2
 8014258:	005b      	lsls	r3, r3, #1
 801425a:	4413      	add	r3, r2
 801425c:	00db      	lsls	r3, r3, #3
 801425e:	440b      	add	r3, r1
 8014260:	3312      	adds	r3, #18
 8014262:	881b      	ldrh	r3, [r3, #0]
 8014264:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8014268:	d215      	bcs.n	8014296 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801426a:	4938      	ldr	r1, [pc, #224]	; (801434c <etharp_tmr+0x14c>)
 801426c:	687a      	ldr	r2, [r7, #4]
 801426e:	4613      	mov	r3, r2
 8014270:	005b      	lsls	r3, r3, #1
 8014272:	4413      	add	r3, r2
 8014274:	00db      	lsls	r3, r3, #3
 8014276:	440b      	add	r3, r1
 8014278:	3314      	adds	r3, #20
 801427a:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801427c:	2b01      	cmp	r3, #1
 801427e:	d10e      	bne.n	801429e <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8014280:	4932      	ldr	r1, [pc, #200]	; (801434c <etharp_tmr+0x14c>)
 8014282:	687a      	ldr	r2, [r7, #4]
 8014284:	4613      	mov	r3, r2
 8014286:	005b      	lsls	r3, r3, #1
 8014288:	4413      	add	r3, r2
 801428a:	00db      	lsls	r3, r3, #3
 801428c:	440b      	add	r3, r1
 801428e:	3312      	adds	r3, #18
 8014290:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8014292:	2b04      	cmp	r3, #4
 8014294:	d903      	bls.n	801429e <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8014296:	6878      	ldr	r0, [r7, #4]
 8014298:	f7ff ff80 	bl	801419c <etharp_free_entry>
 801429c:	e04a      	b.n	8014334 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801429e:	492b      	ldr	r1, [pc, #172]	; (801434c <etharp_tmr+0x14c>)
 80142a0:	687a      	ldr	r2, [r7, #4]
 80142a2:	4613      	mov	r3, r2
 80142a4:	005b      	lsls	r3, r3, #1
 80142a6:	4413      	add	r3, r2
 80142a8:	00db      	lsls	r3, r3, #3
 80142aa:	440b      	add	r3, r1
 80142ac:	3314      	adds	r3, #20
 80142ae:	781b      	ldrb	r3, [r3, #0]
 80142b0:	2b03      	cmp	r3, #3
 80142b2:	d10a      	bne.n	80142ca <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 80142b4:	4925      	ldr	r1, [pc, #148]	; (801434c <etharp_tmr+0x14c>)
 80142b6:	687a      	ldr	r2, [r7, #4]
 80142b8:	4613      	mov	r3, r2
 80142ba:	005b      	lsls	r3, r3, #1
 80142bc:	4413      	add	r3, r2
 80142be:	00db      	lsls	r3, r3, #3
 80142c0:	440b      	add	r3, r1
 80142c2:	3314      	adds	r3, #20
 80142c4:	2204      	movs	r2, #4
 80142c6:	701a      	strb	r2, [r3, #0]
 80142c8:	e034      	b.n	8014334 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 80142ca:	4920      	ldr	r1, [pc, #128]	; (801434c <etharp_tmr+0x14c>)
 80142cc:	687a      	ldr	r2, [r7, #4]
 80142ce:	4613      	mov	r3, r2
 80142d0:	005b      	lsls	r3, r3, #1
 80142d2:	4413      	add	r3, r2
 80142d4:	00db      	lsls	r3, r3, #3
 80142d6:	440b      	add	r3, r1
 80142d8:	3314      	adds	r3, #20
 80142da:	781b      	ldrb	r3, [r3, #0]
 80142dc:	2b04      	cmp	r3, #4
 80142de:	d10a      	bne.n	80142f6 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 80142e0:	491a      	ldr	r1, [pc, #104]	; (801434c <etharp_tmr+0x14c>)
 80142e2:	687a      	ldr	r2, [r7, #4]
 80142e4:	4613      	mov	r3, r2
 80142e6:	005b      	lsls	r3, r3, #1
 80142e8:	4413      	add	r3, r2
 80142ea:	00db      	lsls	r3, r3, #3
 80142ec:	440b      	add	r3, r1
 80142ee:	3314      	adds	r3, #20
 80142f0:	2202      	movs	r2, #2
 80142f2:	701a      	strb	r2, [r3, #0]
 80142f4:	e01e      	b.n	8014334 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80142f6:	4915      	ldr	r1, [pc, #84]	; (801434c <etharp_tmr+0x14c>)
 80142f8:	687a      	ldr	r2, [r7, #4]
 80142fa:	4613      	mov	r3, r2
 80142fc:	005b      	lsls	r3, r3, #1
 80142fe:	4413      	add	r3, r2
 8014300:	00db      	lsls	r3, r3, #3
 8014302:	440b      	add	r3, r1
 8014304:	3314      	adds	r3, #20
 8014306:	781b      	ldrb	r3, [r3, #0]
 8014308:	2b01      	cmp	r3, #1
 801430a:	d113      	bne.n	8014334 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 801430c:	490f      	ldr	r1, [pc, #60]	; (801434c <etharp_tmr+0x14c>)
 801430e:	687a      	ldr	r2, [r7, #4]
 8014310:	4613      	mov	r3, r2
 8014312:	005b      	lsls	r3, r3, #1
 8014314:	4413      	add	r3, r2
 8014316:	00db      	lsls	r3, r3, #3
 8014318:	440b      	add	r3, r1
 801431a:	3308      	adds	r3, #8
 801431c:	6818      	ldr	r0, [r3, #0]
 801431e:	687a      	ldr	r2, [r7, #4]
 8014320:	4613      	mov	r3, r2
 8014322:	005b      	lsls	r3, r3, #1
 8014324:	4413      	add	r3, r2
 8014326:	00db      	lsls	r3, r3, #3
 8014328:	4a08      	ldr	r2, [pc, #32]	; (801434c <etharp_tmr+0x14c>)
 801432a:	4413      	add	r3, r2
 801432c:	3304      	adds	r3, #4
 801432e:	4619      	mov	r1, r3
 8014330:	f000 fe6e 	bl	8015010 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014334:	687b      	ldr	r3, [r7, #4]
 8014336:	3301      	adds	r3, #1
 8014338:	607b      	str	r3, [r7, #4]
 801433a:	687b      	ldr	r3, [r7, #4]
 801433c:	2b09      	cmp	r3, #9
 801433e:	f77f af65 	ble.w	801420c <etharp_tmr+0xc>
      }
    }
  }
}
 8014342:	bf00      	nop
 8014344:	3708      	adds	r7, #8
 8014346:	46bd      	mov	sp, r7
 8014348:	bd80      	pop	{r7, pc}
 801434a:	bf00      	nop
 801434c:	20004804 	.word	0x20004804

08014350 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8014350:	b580      	push	{r7, lr}
 8014352:	b08a      	sub	sp, #40	; 0x28
 8014354:	af00      	add	r7, sp, #0
 8014356:	60f8      	str	r0, [r7, #12]
 8014358:	460b      	mov	r3, r1
 801435a:	607a      	str	r2, [r7, #4]
 801435c:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 801435e:	230a      	movs	r3, #10
 8014360:	84fb      	strh	r3, [r7, #38]	; 0x26
 8014362:	230a      	movs	r3, #10
 8014364:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8014366:	230a      	movs	r3, #10
 8014368:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 801436a:	2300      	movs	r3, #0
 801436c:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 801436e:	230a      	movs	r3, #10
 8014370:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8014372:	2300      	movs	r3, #0
 8014374:	83bb      	strh	r3, [r7, #28]
 8014376:	2300      	movs	r3, #0
 8014378:	837b      	strh	r3, [r7, #26]
 801437a:	2300      	movs	r3, #0
 801437c:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801437e:	2300      	movs	r3, #0
 8014380:	843b      	strh	r3, [r7, #32]
 8014382:	e0ae      	b.n	80144e2 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8014384:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014388:	49a6      	ldr	r1, [pc, #664]	; (8014624 <etharp_find_entry+0x2d4>)
 801438a:	4613      	mov	r3, r2
 801438c:	005b      	lsls	r3, r3, #1
 801438e:	4413      	add	r3, r2
 8014390:	00db      	lsls	r3, r3, #3
 8014392:	440b      	add	r3, r1
 8014394:	3314      	adds	r3, #20
 8014396:	781b      	ldrb	r3, [r3, #0]
 8014398:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801439a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801439e:	2b0a      	cmp	r3, #10
 80143a0:	d105      	bne.n	80143ae <etharp_find_entry+0x5e>
 80143a2:	7dfb      	ldrb	r3, [r7, #23]
 80143a4:	2b00      	cmp	r3, #0
 80143a6:	d102      	bne.n	80143ae <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 80143a8:	8c3b      	ldrh	r3, [r7, #32]
 80143aa:	847b      	strh	r3, [r7, #34]	; 0x22
 80143ac:	e095      	b.n	80144da <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 80143ae:	7dfb      	ldrb	r3, [r7, #23]
 80143b0:	2b00      	cmp	r3, #0
 80143b2:	f000 8092 	beq.w	80144da <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 80143b6:	7dfb      	ldrb	r3, [r7, #23]
 80143b8:	2b01      	cmp	r3, #1
 80143ba:	d009      	beq.n	80143d0 <etharp_find_entry+0x80>
 80143bc:	7dfb      	ldrb	r3, [r7, #23]
 80143be:	2b01      	cmp	r3, #1
 80143c0:	d806      	bhi.n	80143d0 <etharp_find_entry+0x80>
 80143c2:	4b99      	ldr	r3, [pc, #612]	; (8014628 <etharp_find_entry+0x2d8>)
 80143c4:	f44f 7292 	mov.w	r2, #292	; 0x124
 80143c8:	4998      	ldr	r1, [pc, #608]	; (801462c <etharp_find_entry+0x2dc>)
 80143ca:	4899      	ldr	r0, [pc, #612]	; (8014630 <etharp_find_entry+0x2e0>)
 80143cc:	f002 fd48 	bl	8016e60 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 80143d0:	68fb      	ldr	r3, [r7, #12]
 80143d2:	2b00      	cmp	r3, #0
 80143d4:	d020      	beq.n	8014418 <etharp_find_entry+0xc8>
 80143d6:	68fb      	ldr	r3, [r7, #12]
 80143d8:	6819      	ldr	r1, [r3, #0]
 80143da:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80143de:	4891      	ldr	r0, [pc, #580]	; (8014624 <etharp_find_entry+0x2d4>)
 80143e0:	4613      	mov	r3, r2
 80143e2:	005b      	lsls	r3, r3, #1
 80143e4:	4413      	add	r3, r2
 80143e6:	00db      	lsls	r3, r3, #3
 80143e8:	4403      	add	r3, r0
 80143ea:	3304      	adds	r3, #4
 80143ec:	681b      	ldr	r3, [r3, #0]
 80143ee:	4299      	cmp	r1, r3
 80143f0:	d112      	bne.n	8014418 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 80143f2:	687b      	ldr	r3, [r7, #4]
 80143f4:	2b00      	cmp	r3, #0
 80143f6:	d00c      	beq.n	8014412 <etharp_find_entry+0xc2>
 80143f8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80143fc:	4989      	ldr	r1, [pc, #548]	; (8014624 <etharp_find_entry+0x2d4>)
 80143fe:	4613      	mov	r3, r2
 8014400:	005b      	lsls	r3, r3, #1
 8014402:	4413      	add	r3, r2
 8014404:	00db      	lsls	r3, r3, #3
 8014406:	440b      	add	r3, r1
 8014408:	3308      	adds	r3, #8
 801440a:	681b      	ldr	r3, [r3, #0]
 801440c:	687a      	ldr	r2, [r7, #4]
 801440e:	429a      	cmp	r2, r3
 8014410:	d102      	bne.n	8014418 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8014412:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014416:	e100      	b.n	801461a <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8014418:	7dfb      	ldrb	r3, [r7, #23]
 801441a:	2b01      	cmp	r3, #1
 801441c:	d140      	bne.n	80144a0 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 801441e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014422:	4980      	ldr	r1, [pc, #512]	; (8014624 <etharp_find_entry+0x2d4>)
 8014424:	4613      	mov	r3, r2
 8014426:	005b      	lsls	r3, r3, #1
 8014428:	4413      	add	r3, r2
 801442a:	00db      	lsls	r3, r3, #3
 801442c:	440b      	add	r3, r1
 801442e:	681b      	ldr	r3, [r3, #0]
 8014430:	2b00      	cmp	r3, #0
 8014432:	d01a      	beq.n	801446a <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8014434:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014438:	497a      	ldr	r1, [pc, #488]	; (8014624 <etharp_find_entry+0x2d4>)
 801443a:	4613      	mov	r3, r2
 801443c:	005b      	lsls	r3, r3, #1
 801443e:	4413      	add	r3, r2
 8014440:	00db      	lsls	r3, r3, #3
 8014442:	440b      	add	r3, r1
 8014444:	3312      	adds	r3, #18
 8014446:	881b      	ldrh	r3, [r3, #0]
 8014448:	8bba      	ldrh	r2, [r7, #28]
 801444a:	429a      	cmp	r2, r3
 801444c:	d845      	bhi.n	80144da <etharp_find_entry+0x18a>
            old_queue = i;
 801444e:	8c3b      	ldrh	r3, [r7, #32]
 8014450:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8014452:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014456:	4973      	ldr	r1, [pc, #460]	; (8014624 <etharp_find_entry+0x2d4>)
 8014458:	4613      	mov	r3, r2
 801445a:	005b      	lsls	r3, r3, #1
 801445c:	4413      	add	r3, r2
 801445e:	00db      	lsls	r3, r3, #3
 8014460:	440b      	add	r3, r1
 8014462:	3312      	adds	r3, #18
 8014464:	881b      	ldrh	r3, [r3, #0]
 8014466:	83bb      	strh	r3, [r7, #28]
 8014468:	e037      	b.n	80144da <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 801446a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801446e:	496d      	ldr	r1, [pc, #436]	; (8014624 <etharp_find_entry+0x2d4>)
 8014470:	4613      	mov	r3, r2
 8014472:	005b      	lsls	r3, r3, #1
 8014474:	4413      	add	r3, r2
 8014476:	00db      	lsls	r3, r3, #3
 8014478:	440b      	add	r3, r1
 801447a:	3312      	adds	r3, #18
 801447c:	881b      	ldrh	r3, [r3, #0]
 801447e:	8b7a      	ldrh	r2, [r7, #26]
 8014480:	429a      	cmp	r2, r3
 8014482:	d82a      	bhi.n	80144da <etharp_find_entry+0x18a>
            old_pending = i;
 8014484:	8c3b      	ldrh	r3, [r7, #32]
 8014486:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8014488:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801448c:	4965      	ldr	r1, [pc, #404]	; (8014624 <etharp_find_entry+0x2d4>)
 801448e:	4613      	mov	r3, r2
 8014490:	005b      	lsls	r3, r3, #1
 8014492:	4413      	add	r3, r2
 8014494:	00db      	lsls	r3, r3, #3
 8014496:	440b      	add	r3, r1
 8014498:	3312      	adds	r3, #18
 801449a:	881b      	ldrh	r3, [r3, #0]
 801449c:	837b      	strh	r3, [r7, #26]
 801449e:	e01c      	b.n	80144da <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 80144a0:	7dfb      	ldrb	r3, [r7, #23]
 80144a2:	2b01      	cmp	r3, #1
 80144a4:	d919      	bls.n	80144da <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 80144a6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80144aa:	495e      	ldr	r1, [pc, #376]	; (8014624 <etharp_find_entry+0x2d4>)
 80144ac:	4613      	mov	r3, r2
 80144ae:	005b      	lsls	r3, r3, #1
 80144b0:	4413      	add	r3, r2
 80144b2:	00db      	lsls	r3, r3, #3
 80144b4:	440b      	add	r3, r1
 80144b6:	3312      	adds	r3, #18
 80144b8:	881b      	ldrh	r3, [r3, #0]
 80144ba:	8b3a      	ldrh	r2, [r7, #24]
 80144bc:	429a      	cmp	r2, r3
 80144be:	d80c      	bhi.n	80144da <etharp_find_entry+0x18a>
            old_stable = i;
 80144c0:	8c3b      	ldrh	r3, [r7, #32]
 80144c2:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 80144c4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80144c8:	4956      	ldr	r1, [pc, #344]	; (8014624 <etharp_find_entry+0x2d4>)
 80144ca:	4613      	mov	r3, r2
 80144cc:	005b      	lsls	r3, r3, #1
 80144ce:	4413      	add	r3, r2
 80144d0:	00db      	lsls	r3, r3, #3
 80144d2:	440b      	add	r3, r1
 80144d4:	3312      	adds	r3, #18
 80144d6:	881b      	ldrh	r3, [r3, #0]
 80144d8:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80144da:	8c3b      	ldrh	r3, [r7, #32]
 80144dc:	3301      	adds	r3, #1
 80144de:	b29b      	uxth	r3, r3
 80144e0:	843b      	strh	r3, [r7, #32]
 80144e2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80144e6:	2b09      	cmp	r3, #9
 80144e8:	f77f af4c 	ble.w	8014384 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 80144ec:	7afb      	ldrb	r3, [r7, #11]
 80144ee:	f003 0302 	and.w	r3, r3, #2
 80144f2:	2b00      	cmp	r3, #0
 80144f4:	d108      	bne.n	8014508 <etharp_find_entry+0x1b8>
 80144f6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80144fa:	2b0a      	cmp	r3, #10
 80144fc:	d107      	bne.n	801450e <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 80144fe:	7afb      	ldrb	r3, [r7, #11]
 8014500:	f003 0301 	and.w	r3, r3, #1
 8014504:	2b00      	cmp	r3, #0
 8014506:	d102      	bne.n	801450e <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8014508:	f04f 33ff 	mov.w	r3, #4294967295
 801450c:	e085      	b.n	801461a <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 801450e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8014512:	2b09      	cmp	r3, #9
 8014514:	dc02      	bgt.n	801451c <etharp_find_entry+0x1cc>
    i = empty;
 8014516:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014518:	843b      	strh	r3, [r7, #32]
 801451a:	e039      	b.n	8014590 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 801451c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8014520:	2b09      	cmp	r3, #9
 8014522:	dc14      	bgt.n	801454e <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8014524:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014526:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8014528:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801452c:	493d      	ldr	r1, [pc, #244]	; (8014624 <etharp_find_entry+0x2d4>)
 801452e:	4613      	mov	r3, r2
 8014530:	005b      	lsls	r3, r3, #1
 8014532:	4413      	add	r3, r2
 8014534:	00db      	lsls	r3, r3, #3
 8014536:	440b      	add	r3, r1
 8014538:	681b      	ldr	r3, [r3, #0]
 801453a:	2b00      	cmp	r3, #0
 801453c:	d018      	beq.n	8014570 <etharp_find_entry+0x220>
 801453e:	4b3a      	ldr	r3, [pc, #232]	; (8014628 <etharp_find_entry+0x2d8>)
 8014540:	f240 126d 	movw	r2, #365	; 0x16d
 8014544:	493b      	ldr	r1, [pc, #236]	; (8014634 <etharp_find_entry+0x2e4>)
 8014546:	483a      	ldr	r0, [pc, #232]	; (8014630 <etharp_find_entry+0x2e0>)
 8014548:	f002 fc8a 	bl	8016e60 <iprintf>
 801454c:	e010      	b.n	8014570 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 801454e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8014552:	2b09      	cmp	r3, #9
 8014554:	dc02      	bgt.n	801455c <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8014556:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8014558:	843b      	strh	r3, [r7, #32]
 801455a:	e009      	b.n	8014570 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 801455c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8014560:	2b09      	cmp	r3, #9
 8014562:	dc02      	bgt.n	801456a <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8014564:	8bfb      	ldrh	r3, [r7, #30]
 8014566:	843b      	strh	r3, [r7, #32]
 8014568:	e002      	b.n	8014570 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 801456a:	f04f 33ff 	mov.w	r3, #4294967295
 801456e:	e054      	b.n	801461a <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8014570:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014574:	2b09      	cmp	r3, #9
 8014576:	dd06      	ble.n	8014586 <etharp_find_entry+0x236>
 8014578:	4b2b      	ldr	r3, [pc, #172]	; (8014628 <etharp_find_entry+0x2d8>)
 801457a:	f240 127f 	movw	r2, #383	; 0x17f
 801457e:	492e      	ldr	r1, [pc, #184]	; (8014638 <etharp_find_entry+0x2e8>)
 8014580:	482b      	ldr	r0, [pc, #172]	; (8014630 <etharp_find_entry+0x2e0>)
 8014582:	f002 fc6d 	bl	8016e60 <iprintf>
    etharp_free_entry(i);
 8014586:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801458a:	4618      	mov	r0, r3
 801458c:	f7ff fe06 	bl	801419c <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8014590:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014594:	2b09      	cmp	r3, #9
 8014596:	dd06      	ble.n	80145a6 <etharp_find_entry+0x256>
 8014598:	4b23      	ldr	r3, [pc, #140]	; (8014628 <etharp_find_entry+0x2d8>)
 801459a:	f240 1283 	movw	r2, #387	; 0x183
 801459e:	4926      	ldr	r1, [pc, #152]	; (8014638 <etharp_find_entry+0x2e8>)
 80145a0:	4823      	ldr	r0, [pc, #140]	; (8014630 <etharp_find_entry+0x2e0>)
 80145a2:	f002 fc5d 	bl	8016e60 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 80145a6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80145aa:	491e      	ldr	r1, [pc, #120]	; (8014624 <etharp_find_entry+0x2d4>)
 80145ac:	4613      	mov	r3, r2
 80145ae:	005b      	lsls	r3, r3, #1
 80145b0:	4413      	add	r3, r2
 80145b2:	00db      	lsls	r3, r3, #3
 80145b4:	440b      	add	r3, r1
 80145b6:	3314      	adds	r3, #20
 80145b8:	781b      	ldrb	r3, [r3, #0]
 80145ba:	2b00      	cmp	r3, #0
 80145bc:	d006      	beq.n	80145cc <etharp_find_entry+0x27c>
 80145be:	4b1a      	ldr	r3, [pc, #104]	; (8014628 <etharp_find_entry+0x2d8>)
 80145c0:	f240 1285 	movw	r2, #389	; 0x185
 80145c4:	491d      	ldr	r1, [pc, #116]	; (801463c <etharp_find_entry+0x2ec>)
 80145c6:	481a      	ldr	r0, [pc, #104]	; (8014630 <etharp_find_entry+0x2e0>)
 80145c8:	f002 fc4a 	bl	8016e60 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 80145cc:	68fb      	ldr	r3, [r7, #12]
 80145ce:	2b00      	cmp	r3, #0
 80145d0:	d00b      	beq.n	80145ea <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 80145d2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80145d6:	68fb      	ldr	r3, [r7, #12]
 80145d8:	6819      	ldr	r1, [r3, #0]
 80145da:	4812      	ldr	r0, [pc, #72]	; (8014624 <etharp_find_entry+0x2d4>)
 80145dc:	4613      	mov	r3, r2
 80145de:	005b      	lsls	r3, r3, #1
 80145e0:	4413      	add	r3, r2
 80145e2:	00db      	lsls	r3, r3, #3
 80145e4:	4403      	add	r3, r0
 80145e6:	3304      	adds	r3, #4
 80145e8:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 80145ea:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80145ee:	490d      	ldr	r1, [pc, #52]	; (8014624 <etharp_find_entry+0x2d4>)
 80145f0:	4613      	mov	r3, r2
 80145f2:	005b      	lsls	r3, r3, #1
 80145f4:	4413      	add	r3, r2
 80145f6:	00db      	lsls	r3, r3, #3
 80145f8:	440b      	add	r3, r1
 80145fa:	3312      	adds	r3, #18
 80145fc:	2200      	movs	r2, #0
 80145fe:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8014600:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014604:	4907      	ldr	r1, [pc, #28]	; (8014624 <etharp_find_entry+0x2d4>)
 8014606:	4613      	mov	r3, r2
 8014608:	005b      	lsls	r3, r3, #1
 801460a:	4413      	add	r3, r2
 801460c:	00db      	lsls	r3, r3, #3
 801460e:	440b      	add	r3, r1
 8014610:	3308      	adds	r3, #8
 8014612:	687a      	ldr	r2, [r7, #4]
 8014614:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8014616:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 801461a:	4618      	mov	r0, r3
 801461c:	3728      	adds	r7, #40	; 0x28
 801461e:	46bd      	mov	sp, r7
 8014620:	bd80      	pop	{r7, pc}
 8014622:	bf00      	nop
 8014624:	20004804 	.word	0x20004804
 8014628:	0801b314 	.word	0x0801b314
 801462c:	0801b34c 	.word	0x0801b34c
 8014630:	0801b38c 	.word	0x0801b38c
 8014634:	0801b3b4 	.word	0x0801b3b4
 8014638:	0801b3cc 	.word	0x0801b3cc
 801463c:	0801b3e0 	.word	0x0801b3e0

08014640 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8014640:	b580      	push	{r7, lr}
 8014642:	b088      	sub	sp, #32
 8014644:	af02      	add	r7, sp, #8
 8014646:	60f8      	str	r0, [r7, #12]
 8014648:	60b9      	str	r1, [r7, #8]
 801464a:	607a      	str	r2, [r7, #4]
 801464c:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 801464e:	68fb      	ldr	r3, [r7, #12]
 8014650:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8014654:	2b06      	cmp	r3, #6
 8014656:	d006      	beq.n	8014666 <etharp_update_arp_entry+0x26>
 8014658:	4b48      	ldr	r3, [pc, #288]	; (801477c <etharp_update_arp_entry+0x13c>)
 801465a:	f240 12a9 	movw	r2, #425	; 0x1a9
 801465e:	4948      	ldr	r1, [pc, #288]	; (8014780 <etharp_update_arp_entry+0x140>)
 8014660:	4848      	ldr	r0, [pc, #288]	; (8014784 <etharp_update_arp_entry+0x144>)
 8014662:	f002 fbfd 	bl	8016e60 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8014666:	68bb      	ldr	r3, [r7, #8]
 8014668:	2b00      	cmp	r3, #0
 801466a:	d012      	beq.n	8014692 <etharp_update_arp_entry+0x52>
 801466c:	68bb      	ldr	r3, [r7, #8]
 801466e:	681b      	ldr	r3, [r3, #0]
 8014670:	2b00      	cmp	r3, #0
 8014672:	d00e      	beq.n	8014692 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8014674:	68bb      	ldr	r3, [r7, #8]
 8014676:	681b      	ldr	r3, [r3, #0]
 8014678:	68f9      	ldr	r1, [r7, #12]
 801467a:	4618      	mov	r0, r3
 801467c:	f001 f8fc 	bl	8015878 <ip4_addr_isbroadcast_u32>
 8014680:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8014682:	2b00      	cmp	r3, #0
 8014684:	d105      	bne.n	8014692 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8014686:	68bb      	ldr	r3, [r7, #8]
 8014688:	681b      	ldr	r3, [r3, #0]
 801468a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801468e:	2be0      	cmp	r3, #224	; 0xe0
 8014690:	d102      	bne.n	8014698 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8014692:	f06f 030f 	mvn.w	r3, #15
 8014696:	e06c      	b.n	8014772 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8014698:	78fb      	ldrb	r3, [r7, #3]
 801469a:	68fa      	ldr	r2, [r7, #12]
 801469c:	4619      	mov	r1, r3
 801469e:	68b8      	ldr	r0, [r7, #8]
 80146a0:	f7ff fe56 	bl	8014350 <etharp_find_entry>
 80146a4:	4603      	mov	r3, r0
 80146a6:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 80146a8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80146ac:	2b00      	cmp	r3, #0
 80146ae:	da02      	bge.n	80146b6 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 80146b0:	8afb      	ldrh	r3, [r7, #22]
 80146b2:	b25b      	sxtb	r3, r3
 80146b4:	e05d      	b.n	8014772 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 80146b6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80146ba:	4933      	ldr	r1, [pc, #204]	; (8014788 <etharp_update_arp_entry+0x148>)
 80146bc:	4613      	mov	r3, r2
 80146be:	005b      	lsls	r3, r3, #1
 80146c0:	4413      	add	r3, r2
 80146c2:	00db      	lsls	r3, r3, #3
 80146c4:	440b      	add	r3, r1
 80146c6:	3314      	adds	r3, #20
 80146c8:	2202      	movs	r2, #2
 80146ca:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 80146cc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80146d0:	492d      	ldr	r1, [pc, #180]	; (8014788 <etharp_update_arp_entry+0x148>)
 80146d2:	4613      	mov	r3, r2
 80146d4:	005b      	lsls	r3, r3, #1
 80146d6:	4413      	add	r3, r2
 80146d8:	00db      	lsls	r3, r3, #3
 80146da:	440b      	add	r3, r1
 80146dc:	3308      	adds	r3, #8
 80146de:	68fa      	ldr	r2, [r7, #12]
 80146e0:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 80146e2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80146e6:	4613      	mov	r3, r2
 80146e8:	005b      	lsls	r3, r3, #1
 80146ea:	4413      	add	r3, r2
 80146ec:	00db      	lsls	r3, r3, #3
 80146ee:	3308      	adds	r3, #8
 80146f0:	4a25      	ldr	r2, [pc, #148]	; (8014788 <etharp_update_arp_entry+0x148>)
 80146f2:	4413      	add	r3, r2
 80146f4:	3304      	adds	r3, #4
 80146f6:	2206      	movs	r2, #6
 80146f8:	6879      	ldr	r1, [r7, #4]
 80146fa:	4618      	mov	r0, r3
 80146fc:	f002 fb83 	bl	8016e06 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8014700:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014704:	4920      	ldr	r1, [pc, #128]	; (8014788 <etharp_update_arp_entry+0x148>)
 8014706:	4613      	mov	r3, r2
 8014708:	005b      	lsls	r3, r3, #1
 801470a:	4413      	add	r3, r2
 801470c:	00db      	lsls	r3, r3, #3
 801470e:	440b      	add	r3, r1
 8014710:	3312      	adds	r3, #18
 8014712:	2200      	movs	r2, #0
 8014714:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8014716:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801471a:	491b      	ldr	r1, [pc, #108]	; (8014788 <etharp_update_arp_entry+0x148>)
 801471c:	4613      	mov	r3, r2
 801471e:	005b      	lsls	r3, r3, #1
 8014720:	4413      	add	r3, r2
 8014722:	00db      	lsls	r3, r3, #3
 8014724:	440b      	add	r3, r1
 8014726:	681b      	ldr	r3, [r3, #0]
 8014728:	2b00      	cmp	r3, #0
 801472a:	d021      	beq.n	8014770 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 801472c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014730:	4915      	ldr	r1, [pc, #84]	; (8014788 <etharp_update_arp_entry+0x148>)
 8014732:	4613      	mov	r3, r2
 8014734:	005b      	lsls	r3, r3, #1
 8014736:	4413      	add	r3, r2
 8014738:	00db      	lsls	r3, r3, #3
 801473a:	440b      	add	r3, r1
 801473c:	681b      	ldr	r3, [r3, #0]
 801473e:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8014740:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014744:	4910      	ldr	r1, [pc, #64]	; (8014788 <etharp_update_arp_entry+0x148>)
 8014746:	4613      	mov	r3, r2
 8014748:	005b      	lsls	r3, r3, #1
 801474a:	4413      	add	r3, r2
 801474c:	00db      	lsls	r3, r3, #3
 801474e:	440b      	add	r3, r1
 8014750:	2200      	movs	r2, #0
 8014752:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8014754:	68fb      	ldr	r3, [r7, #12]
 8014756:	f103 0226 	add.w	r2, r3, #38	; 0x26
 801475a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801475e:	9300      	str	r3, [sp, #0]
 8014760:	687b      	ldr	r3, [r7, #4]
 8014762:	6939      	ldr	r1, [r7, #16]
 8014764:	68f8      	ldr	r0, [r7, #12]
 8014766:	f002 f8d1 	bl	801690c <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 801476a:	6938      	ldr	r0, [r7, #16]
 801476c:	f7f8 fc4e 	bl	800d00c <pbuf_free>
  }
  return ERR_OK;
 8014770:	2300      	movs	r3, #0
}
 8014772:	4618      	mov	r0, r3
 8014774:	3718      	adds	r7, #24
 8014776:	46bd      	mov	sp, r7
 8014778:	bd80      	pop	{r7, pc}
 801477a:	bf00      	nop
 801477c:	0801b314 	.word	0x0801b314
 8014780:	0801b40c 	.word	0x0801b40c
 8014784:	0801b38c 	.word	0x0801b38c
 8014788:	20004804 	.word	0x20004804

0801478c <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 801478c:	b580      	push	{r7, lr}
 801478e:	b084      	sub	sp, #16
 8014790:	af00      	add	r7, sp, #0
 8014792:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014794:	2300      	movs	r3, #0
 8014796:	60fb      	str	r3, [r7, #12]
 8014798:	e01e      	b.n	80147d8 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 801479a:	4913      	ldr	r1, [pc, #76]	; (80147e8 <etharp_cleanup_netif+0x5c>)
 801479c:	68fa      	ldr	r2, [r7, #12]
 801479e:	4613      	mov	r3, r2
 80147a0:	005b      	lsls	r3, r3, #1
 80147a2:	4413      	add	r3, r2
 80147a4:	00db      	lsls	r3, r3, #3
 80147a6:	440b      	add	r3, r1
 80147a8:	3314      	adds	r3, #20
 80147aa:	781b      	ldrb	r3, [r3, #0]
 80147ac:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 80147ae:	7afb      	ldrb	r3, [r7, #11]
 80147b0:	2b00      	cmp	r3, #0
 80147b2:	d00e      	beq.n	80147d2 <etharp_cleanup_netif+0x46>
 80147b4:	490c      	ldr	r1, [pc, #48]	; (80147e8 <etharp_cleanup_netif+0x5c>)
 80147b6:	68fa      	ldr	r2, [r7, #12]
 80147b8:	4613      	mov	r3, r2
 80147ba:	005b      	lsls	r3, r3, #1
 80147bc:	4413      	add	r3, r2
 80147be:	00db      	lsls	r3, r3, #3
 80147c0:	440b      	add	r3, r1
 80147c2:	3308      	adds	r3, #8
 80147c4:	681b      	ldr	r3, [r3, #0]
 80147c6:	687a      	ldr	r2, [r7, #4]
 80147c8:	429a      	cmp	r2, r3
 80147ca:	d102      	bne.n	80147d2 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 80147cc:	68f8      	ldr	r0, [r7, #12]
 80147ce:	f7ff fce5 	bl	801419c <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80147d2:	68fb      	ldr	r3, [r7, #12]
 80147d4:	3301      	adds	r3, #1
 80147d6:	60fb      	str	r3, [r7, #12]
 80147d8:	68fb      	ldr	r3, [r7, #12]
 80147da:	2b09      	cmp	r3, #9
 80147dc:	dddd      	ble.n	801479a <etharp_cleanup_netif+0xe>
    }
  }
}
 80147de:	bf00      	nop
 80147e0:	3710      	adds	r7, #16
 80147e2:	46bd      	mov	sp, r7
 80147e4:	bd80      	pop	{r7, pc}
 80147e6:	bf00      	nop
 80147e8:	20004804 	.word	0x20004804

080147ec <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 80147ec:	b5b0      	push	{r4, r5, r7, lr}
 80147ee:	b08a      	sub	sp, #40	; 0x28
 80147f0:	af04      	add	r7, sp, #16
 80147f2:	6078      	str	r0, [r7, #4]
 80147f4:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80147f6:	683b      	ldr	r3, [r7, #0]
 80147f8:	2b00      	cmp	r3, #0
 80147fa:	d107      	bne.n	801480c <etharp_input+0x20>
 80147fc:	4b3d      	ldr	r3, [pc, #244]	; (80148f4 <etharp_input+0x108>)
 80147fe:	f240 228a 	movw	r2, #650	; 0x28a
 8014802:	493d      	ldr	r1, [pc, #244]	; (80148f8 <etharp_input+0x10c>)
 8014804:	483d      	ldr	r0, [pc, #244]	; (80148fc <etharp_input+0x110>)
 8014806:	f002 fb2b 	bl	8016e60 <iprintf>
 801480a:	e06f      	b.n	80148ec <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 801480c:	687b      	ldr	r3, [r7, #4]
 801480e:	685b      	ldr	r3, [r3, #4]
 8014810:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8014812:	693b      	ldr	r3, [r7, #16]
 8014814:	881b      	ldrh	r3, [r3, #0]
 8014816:	b29b      	uxth	r3, r3
 8014818:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801481c:	d10c      	bne.n	8014838 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801481e:	693b      	ldr	r3, [r7, #16]
 8014820:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8014822:	2b06      	cmp	r3, #6
 8014824:	d108      	bne.n	8014838 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8014826:	693b      	ldr	r3, [r7, #16]
 8014828:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801482a:	2b04      	cmp	r3, #4
 801482c:	d104      	bne.n	8014838 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 801482e:	693b      	ldr	r3, [r7, #16]
 8014830:	885b      	ldrh	r3, [r3, #2]
 8014832:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8014834:	2b08      	cmp	r3, #8
 8014836:	d003      	beq.n	8014840 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8014838:	6878      	ldr	r0, [r7, #4]
 801483a:	f7f8 fbe7 	bl	800d00c <pbuf_free>
    return;
 801483e:	e055      	b.n	80148ec <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8014840:	693b      	ldr	r3, [r7, #16]
 8014842:	330e      	adds	r3, #14
 8014844:	681b      	ldr	r3, [r3, #0]
 8014846:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8014848:	693b      	ldr	r3, [r7, #16]
 801484a:	3318      	adds	r3, #24
 801484c:	681b      	ldr	r3, [r3, #0]
 801484e:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8014850:	683b      	ldr	r3, [r7, #0]
 8014852:	3304      	adds	r3, #4
 8014854:	681b      	ldr	r3, [r3, #0]
 8014856:	2b00      	cmp	r3, #0
 8014858:	d102      	bne.n	8014860 <etharp_input+0x74>
    for_us = 0;
 801485a:	2300      	movs	r3, #0
 801485c:	75fb      	strb	r3, [r7, #23]
 801485e:	e009      	b.n	8014874 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8014860:	68ba      	ldr	r2, [r7, #8]
 8014862:	683b      	ldr	r3, [r7, #0]
 8014864:	3304      	adds	r3, #4
 8014866:	681b      	ldr	r3, [r3, #0]
 8014868:	429a      	cmp	r2, r3
 801486a:	bf0c      	ite	eq
 801486c:	2301      	moveq	r3, #1
 801486e:	2300      	movne	r3, #0
 8014870:	b2db      	uxtb	r3, r3
 8014872:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8014874:	693b      	ldr	r3, [r7, #16]
 8014876:	f103 0208 	add.w	r2, r3, #8
 801487a:	7dfb      	ldrb	r3, [r7, #23]
 801487c:	2b00      	cmp	r3, #0
 801487e:	d001      	beq.n	8014884 <etharp_input+0x98>
 8014880:	2301      	movs	r3, #1
 8014882:	e000      	b.n	8014886 <etharp_input+0x9a>
 8014884:	2302      	movs	r3, #2
 8014886:	f107 010c 	add.w	r1, r7, #12
 801488a:	6838      	ldr	r0, [r7, #0]
 801488c:	f7ff fed8 	bl	8014640 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8014890:	693b      	ldr	r3, [r7, #16]
 8014892:	88db      	ldrh	r3, [r3, #6]
 8014894:	b29b      	uxth	r3, r3
 8014896:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801489a:	d003      	beq.n	80148a4 <etharp_input+0xb8>
 801489c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80148a0:	d01e      	beq.n	80148e0 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 80148a2:	e020      	b.n	80148e6 <etharp_input+0xfa>
      if (for_us) {
 80148a4:	7dfb      	ldrb	r3, [r7, #23]
 80148a6:	2b00      	cmp	r3, #0
 80148a8:	d01c      	beq.n	80148e4 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 80148aa:	683b      	ldr	r3, [r7, #0]
 80148ac:	f103 0026 	add.w	r0, r3, #38	; 0x26
 80148b0:	693b      	ldr	r3, [r7, #16]
 80148b2:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 80148b6:	683b      	ldr	r3, [r7, #0]
 80148b8:	f103 0526 	add.w	r5, r3, #38	; 0x26
 80148bc:	683b      	ldr	r3, [r7, #0]
 80148be:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 80148c0:	693a      	ldr	r2, [r7, #16]
 80148c2:	3208      	adds	r2, #8
        etharp_raw(netif,
 80148c4:	2102      	movs	r1, #2
 80148c6:	9103      	str	r1, [sp, #12]
 80148c8:	f107 010c 	add.w	r1, r7, #12
 80148cc:	9102      	str	r1, [sp, #8]
 80148ce:	9201      	str	r2, [sp, #4]
 80148d0:	9300      	str	r3, [sp, #0]
 80148d2:	462b      	mov	r3, r5
 80148d4:	4622      	mov	r2, r4
 80148d6:	4601      	mov	r1, r0
 80148d8:	6838      	ldr	r0, [r7, #0]
 80148da:	f000 faeb 	bl	8014eb4 <etharp_raw>
      break;
 80148de:	e001      	b.n	80148e4 <etharp_input+0xf8>
      break;
 80148e0:	bf00      	nop
 80148e2:	e000      	b.n	80148e6 <etharp_input+0xfa>
      break;
 80148e4:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 80148e6:	6878      	ldr	r0, [r7, #4]
 80148e8:	f7f8 fb90 	bl	800d00c <pbuf_free>
}
 80148ec:	3718      	adds	r7, #24
 80148ee:	46bd      	mov	sp, r7
 80148f0:	bdb0      	pop	{r4, r5, r7, pc}
 80148f2:	bf00      	nop
 80148f4:	0801b314 	.word	0x0801b314
 80148f8:	0801b464 	.word	0x0801b464
 80148fc:	0801b38c 	.word	0x0801b38c

08014900 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8014900:	b580      	push	{r7, lr}
 8014902:	b086      	sub	sp, #24
 8014904:	af02      	add	r7, sp, #8
 8014906:	60f8      	str	r0, [r7, #12]
 8014908:	60b9      	str	r1, [r7, #8]
 801490a:	4613      	mov	r3, r2
 801490c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801490e:	79fa      	ldrb	r2, [r7, #7]
 8014910:	4944      	ldr	r1, [pc, #272]	; (8014a24 <etharp_output_to_arp_index+0x124>)
 8014912:	4613      	mov	r3, r2
 8014914:	005b      	lsls	r3, r3, #1
 8014916:	4413      	add	r3, r2
 8014918:	00db      	lsls	r3, r3, #3
 801491a:	440b      	add	r3, r1
 801491c:	3314      	adds	r3, #20
 801491e:	781b      	ldrb	r3, [r3, #0]
 8014920:	2b01      	cmp	r3, #1
 8014922:	d806      	bhi.n	8014932 <etharp_output_to_arp_index+0x32>
 8014924:	4b40      	ldr	r3, [pc, #256]	; (8014a28 <etharp_output_to_arp_index+0x128>)
 8014926:	f240 22ef 	movw	r2, #751	; 0x2ef
 801492a:	4940      	ldr	r1, [pc, #256]	; (8014a2c <etharp_output_to_arp_index+0x12c>)
 801492c:	4840      	ldr	r0, [pc, #256]	; (8014a30 <etharp_output_to_arp_index+0x130>)
 801492e:	f002 fa97 	bl	8016e60 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8014932:	79fa      	ldrb	r2, [r7, #7]
 8014934:	493b      	ldr	r1, [pc, #236]	; (8014a24 <etharp_output_to_arp_index+0x124>)
 8014936:	4613      	mov	r3, r2
 8014938:	005b      	lsls	r3, r3, #1
 801493a:	4413      	add	r3, r2
 801493c:	00db      	lsls	r3, r3, #3
 801493e:	440b      	add	r3, r1
 8014940:	3314      	adds	r3, #20
 8014942:	781b      	ldrb	r3, [r3, #0]
 8014944:	2b02      	cmp	r3, #2
 8014946:	d153      	bne.n	80149f0 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8014948:	79fa      	ldrb	r2, [r7, #7]
 801494a:	4936      	ldr	r1, [pc, #216]	; (8014a24 <etharp_output_to_arp_index+0x124>)
 801494c:	4613      	mov	r3, r2
 801494e:	005b      	lsls	r3, r3, #1
 8014950:	4413      	add	r3, r2
 8014952:	00db      	lsls	r3, r3, #3
 8014954:	440b      	add	r3, r1
 8014956:	3312      	adds	r3, #18
 8014958:	881b      	ldrh	r3, [r3, #0]
 801495a:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 801495e:	d919      	bls.n	8014994 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8014960:	79fa      	ldrb	r2, [r7, #7]
 8014962:	4613      	mov	r3, r2
 8014964:	005b      	lsls	r3, r3, #1
 8014966:	4413      	add	r3, r2
 8014968:	00db      	lsls	r3, r3, #3
 801496a:	4a2e      	ldr	r2, [pc, #184]	; (8014a24 <etharp_output_to_arp_index+0x124>)
 801496c:	4413      	add	r3, r2
 801496e:	3304      	adds	r3, #4
 8014970:	4619      	mov	r1, r3
 8014972:	68f8      	ldr	r0, [r7, #12]
 8014974:	f000 fb4c 	bl	8015010 <etharp_request>
 8014978:	4603      	mov	r3, r0
 801497a:	2b00      	cmp	r3, #0
 801497c:	d138      	bne.n	80149f0 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801497e:	79fa      	ldrb	r2, [r7, #7]
 8014980:	4928      	ldr	r1, [pc, #160]	; (8014a24 <etharp_output_to_arp_index+0x124>)
 8014982:	4613      	mov	r3, r2
 8014984:	005b      	lsls	r3, r3, #1
 8014986:	4413      	add	r3, r2
 8014988:	00db      	lsls	r3, r3, #3
 801498a:	440b      	add	r3, r1
 801498c:	3314      	adds	r3, #20
 801498e:	2203      	movs	r2, #3
 8014990:	701a      	strb	r2, [r3, #0]
 8014992:	e02d      	b.n	80149f0 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8014994:	79fa      	ldrb	r2, [r7, #7]
 8014996:	4923      	ldr	r1, [pc, #140]	; (8014a24 <etharp_output_to_arp_index+0x124>)
 8014998:	4613      	mov	r3, r2
 801499a:	005b      	lsls	r3, r3, #1
 801499c:	4413      	add	r3, r2
 801499e:	00db      	lsls	r3, r3, #3
 80149a0:	440b      	add	r3, r1
 80149a2:	3312      	adds	r3, #18
 80149a4:	881b      	ldrh	r3, [r3, #0]
 80149a6:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 80149aa:	d321      	bcc.n	80149f0 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 80149ac:	79fa      	ldrb	r2, [r7, #7]
 80149ae:	4613      	mov	r3, r2
 80149b0:	005b      	lsls	r3, r3, #1
 80149b2:	4413      	add	r3, r2
 80149b4:	00db      	lsls	r3, r3, #3
 80149b6:	4a1b      	ldr	r2, [pc, #108]	; (8014a24 <etharp_output_to_arp_index+0x124>)
 80149b8:	4413      	add	r3, r2
 80149ba:	1d19      	adds	r1, r3, #4
 80149bc:	79fa      	ldrb	r2, [r7, #7]
 80149be:	4613      	mov	r3, r2
 80149c0:	005b      	lsls	r3, r3, #1
 80149c2:	4413      	add	r3, r2
 80149c4:	00db      	lsls	r3, r3, #3
 80149c6:	3308      	adds	r3, #8
 80149c8:	4a16      	ldr	r2, [pc, #88]	; (8014a24 <etharp_output_to_arp_index+0x124>)
 80149ca:	4413      	add	r3, r2
 80149cc:	3304      	adds	r3, #4
 80149ce:	461a      	mov	r2, r3
 80149d0:	68f8      	ldr	r0, [r7, #12]
 80149d2:	f000 fafb 	bl	8014fcc <etharp_request_dst>
 80149d6:	4603      	mov	r3, r0
 80149d8:	2b00      	cmp	r3, #0
 80149da:	d109      	bne.n	80149f0 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80149dc:	79fa      	ldrb	r2, [r7, #7]
 80149de:	4911      	ldr	r1, [pc, #68]	; (8014a24 <etharp_output_to_arp_index+0x124>)
 80149e0:	4613      	mov	r3, r2
 80149e2:	005b      	lsls	r3, r3, #1
 80149e4:	4413      	add	r3, r2
 80149e6:	00db      	lsls	r3, r3, #3
 80149e8:	440b      	add	r3, r1
 80149ea:	3314      	adds	r3, #20
 80149ec:	2203      	movs	r2, #3
 80149ee:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 80149f0:	68fb      	ldr	r3, [r7, #12]
 80149f2:	f103 0126 	add.w	r1, r3, #38	; 0x26
 80149f6:	79fa      	ldrb	r2, [r7, #7]
 80149f8:	4613      	mov	r3, r2
 80149fa:	005b      	lsls	r3, r3, #1
 80149fc:	4413      	add	r3, r2
 80149fe:	00db      	lsls	r3, r3, #3
 8014a00:	3308      	adds	r3, #8
 8014a02:	4a08      	ldr	r2, [pc, #32]	; (8014a24 <etharp_output_to_arp_index+0x124>)
 8014a04:	4413      	add	r3, r2
 8014a06:	1d1a      	adds	r2, r3, #4
 8014a08:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8014a0c:	9300      	str	r3, [sp, #0]
 8014a0e:	4613      	mov	r3, r2
 8014a10:	460a      	mov	r2, r1
 8014a12:	68b9      	ldr	r1, [r7, #8]
 8014a14:	68f8      	ldr	r0, [r7, #12]
 8014a16:	f001 ff79 	bl	801690c <ethernet_output>
 8014a1a:	4603      	mov	r3, r0
}
 8014a1c:	4618      	mov	r0, r3
 8014a1e:	3710      	adds	r7, #16
 8014a20:	46bd      	mov	sp, r7
 8014a22:	bd80      	pop	{r7, pc}
 8014a24:	20004804 	.word	0x20004804
 8014a28:	0801b314 	.word	0x0801b314
 8014a2c:	0801b484 	.word	0x0801b484
 8014a30:	0801b38c 	.word	0x0801b38c

08014a34 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8014a34:	b580      	push	{r7, lr}
 8014a36:	b08a      	sub	sp, #40	; 0x28
 8014a38:	af02      	add	r7, sp, #8
 8014a3a:	60f8      	str	r0, [r7, #12]
 8014a3c:	60b9      	str	r1, [r7, #8]
 8014a3e:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8014a40:	687b      	ldr	r3, [r7, #4]
 8014a42:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8014a44:	68fb      	ldr	r3, [r7, #12]
 8014a46:	2b00      	cmp	r3, #0
 8014a48:	d106      	bne.n	8014a58 <etharp_output+0x24>
 8014a4a:	4b73      	ldr	r3, [pc, #460]	; (8014c18 <etharp_output+0x1e4>)
 8014a4c:	f240 321e 	movw	r2, #798	; 0x31e
 8014a50:	4972      	ldr	r1, [pc, #456]	; (8014c1c <etharp_output+0x1e8>)
 8014a52:	4873      	ldr	r0, [pc, #460]	; (8014c20 <etharp_output+0x1ec>)
 8014a54:	f002 fa04 	bl	8016e60 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8014a58:	68bb      	ldr	r3, [r7, #8]
 8014a5a:	2b00      	cmp	r3, #0
 8014a5c:	d106      	bne.n	8014a6c <etharp_output+0x38>
 8014a5e:	4b6e      	ldr	r3, [pc, #440]	; (8014c18 <etharp_output+0x1e4>)
 8014a60:	f240 321f 	movw	r2, #799	; 0x31f
 8014a64:	496f      	ldr	r1, [pc, #444]	; (8014c24 <etharp_output+0x1f0>)
 8014a66:	486e      	ldr	r0, [pc, #440]	; (8014c20 <etharp_output+0x1ec>)
 8014a68:	f002 f9fa 	bl	8016e60 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8014a6c:	687b      	ldr	r3, [r7, #4]
 8014a6e:	2b00      	cmp	r3, #0
 8014a70:	d106      	bne.n	8014a80 <etharp_output+0x4c>
 8014a72:	4b69      	ldr	r3, [pc, #420]	; (8014c18 <etharp_output+0x1e4>)
 8014a74:	f44f 7248 	mov.w	r2, #800	; 0x320
 8014a78:	496b      	ldr	r1, [pc, #428]	; (8014c28 <etharp_output+0x1f4>)
 8014a7a:	4869      	ldr	r0, [pc, #420]	; (8014c20 <etharp_output+0x1ec>)
 8014a7c:	f002 f9f0 	bl	8016e60 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8014a80:	687b      	ldr	r3, [r7, #4]
 8014a82:	681b      	ldr	r3, [r3, #0]
 8014a84:	68f9      	ldr	r1, [r7, #12]
 8014a86:	4618      	mov	r0, r3
 8014a88:	f000 fef6 	bl	8015878 <ip4_addr_isbroadcast_u32>
 8014a8c:	4603      	mov	r3, r0
 8014a8e:	2b00      	cmp	r3, #0
 8014a90:	d002      	beq.n	8014a98 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8014a92:	4b66      	ldr	r3, [pc, #408]	; (8014c2c <etharp_output+0x1f8>)
 8014a94:	61fb      	str	r3, [r7, #28]
 8014a96:	e0af      	b.n	8014bf8 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8014a98:	687b      	ldr	r3, [r7, #4]
 8014a9a:	681b      	ldr	r3, [r3, #0]
 8014a9c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014aa0:	2be0      	cmp	r3, #224	; 0xe0
 8014aa2:	d118      	bne.n	8014ad6 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8014aa4:	2301      	movs	r3, #1
 8014aa6:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8014aa8:	2300      	movs	r3, #0
 8014aaa:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8014aac:	235e      	movs	r3, #94	; 0x5e
 8014aae:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8014ab0:	687b      	ldr	r3, [r7, #4]
 8014ab2:	3301      	adds	r3, #1
 8014ab4:	781b      	ldrb	r3, [r3, #0]
 8014ab6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014aba:	b2db      	uxtb	r3, r3
 8014abc:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8014abe:	687b      	ldr	r3, [r7, #4]
 8014ac0:	3302      	adds	r3, #2
 8014ac2:	781b      	ldrb	r3, [r3, #0]
 8014ac4:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8014ac6:	687b      	ldr	r3, [r7, #4]
 8014ac8:	3303      	adds	r3, #3
 8014aca:	781b      	ldrb	r3, [r3, #0]
 8014acc:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8014ace:	f107 0310 	add.w	r3, r7, #16
 8014ad2:	61fb      	str	r3, [r7, #28]
 8014ad4:	e090      	b.n	8014bf8 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8014ad6:	687b      	ldr	r3, [r7, #4]
 8014ad8:	681a      	ldr	r2, [r3, #0]
 8014ada:	68fb      	ldr	r3, [r7, #12]
 8014adc:	3304      	adds	r3, #4
 8014ade:	681b      	ldr	r3, [r3, #0]
 8014ae0:	405a      	eors	r2, r3
 8014ae2:	68fb      	ldr	r3, [r7, #12]
 8014ae4:	3308      	adds	r3, #8
 8014ae6:	681b      	ldr	r3, [r3, #0]
 8014ae8:	4013      	ands	r3, r2
 8014aea:	2b00      	cmp	r3, #0
 8014aec:	d012      	beq.n	8014b14 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8014aee:	687b      	ldr	r3, [r7, #4]
 8014af0:	681b      	ldr	r3, [r3, #0]
 8014af2:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8014af4:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8014af8:	4293      	cmp	r3, r2
 8014afa:	d00b      	beq.n	8014b14 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8014afc:	68fb      	ldr	r3, [r7, #12]
 8014afe:	330c      	adds	r3, #12
 8014b00:	681b      	ldr	r3, [r3, #0]
 8014b02:	2b00      	cmp	r3, #0
 8014b04:	d003      	beq.n	8014b0e <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8014b06:	68fb      	ldr	r3, [r7, #12]
 8014b08:	330c      	adds	r3, #12
 8014b0a:	61bb      	str	r3, [r7, #24]
 8014b0c:	e002      	b.n	8014b14 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8014b0e:	f06f 0303 	mvn.w	r3, #3
 8014b12:	e07d      	b.n	8014c10 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8014b14:	4b46      	ldr	r3, [pc, #280]	; (8014c30 <etharp_output+0x1fc>)
 8014b16:	781b      	ldrb	r3, [r3, #0]
 8014b18:	4619      	mov	r1, r3
 8014b1a:	4a46      	ldr	r2, [pc, #280]	; (8014c34 <etharp_output+0x200>)
 8014b1c:	460b      	mov	r3, r1
 8014b1e:	005b      	lsls	r3, r3, #1
 8014b20:	440b      	add	r3, r1
 8014b22:	00db      	lsls	r3, r3, #3
 8014b24:	4413      	add	r3, r2
 8014b26:	3314      	adds	r3, #20
 8014b28:	781b      	ldrb	r3, [r3, #0]
 8014b2a:	2b01      	cmp	r3, #1
 8014b2c:	d925      	bls.n	8014b7a <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8014b2e:	4b40      	ldr	r3, [pc, #256]	; (8014c30 <etharp_output+0x1fc>)
 8014b30:	781b      	ldrb	r3, [r3, #0]
 8014b32:	4619      	mov	r1, r3
 8014b34:	4a3f      	ldr	r2, [pc, #252]	; (8014c34 <etharp_output+0x200>)
 8014b36:	460b      	mov	r3, r1
 8014b38:	005b      	lsls	r3, r3, #1
 8014b3a:	440b      	add	r3, r1
 8014b3c:	00db      	lsls	r3, r3, #3
 8014b3e:	4413      	add	r3, r2
 8014b40:	3308      	adds	r3, #8
 8014b42:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8014b44:	68fa      	ldr	r2, [r7, #12]
 8014b46:	429a      	cmp	r2, r3
 8014b48:	d117      	bne.n	8014b7a <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8014b4a:	69bb      	ldr	r3, [r7, #24]
 8014b4c:	681a      	ldr	r2, [r3, #0]
 8014b4e:	4b38      	ldr	r3, [pc, #224]	; (8014c30 <etharp_output+0x1fc>)
 8014b50:	781b      	ldrb	r3, [r3, #0]
 8014b52:	4618      	mov	r0, r3
 8014b54:	4937      	ldr	r1, [pc, #220]	; (8014c34 <etharp_output+0x200>)
 8014b56:	4603      	mov	r3, r0
 8014b58:	005b      	lsls	r3, r3, #1
 8014b5a:	4403      	add	r3, r0
 8014b5c:	00db      	lsls	r3, r3, #3
 8014b5e:	440b      	add	r3, r1
 8014b60:	3304      	adds	r3, #4
 8014b62:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8014b64:	429a      	cmp	r2, r3
 8014b66:	d108      	bne.n	8014b7a <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8014b68:	4b31      	ldr	r3, [pc, #196]	; (8014c30 <etharp_output+0x1fc>)
 8014b6a:	781b      	ldrb	r3, [r3, #0]
 8014b6c:	461a      	mov	r2, r3
 8014b6e:	68b9      	ldr	r1, [r7, #8]
 8014b70:	68f8      	ldr	r0, [r7, #12]
 8014b72:	f7ff fec5 	bl	8014900 <etharp_output_to_arp_index>
 8014b76:	4603      	mov	r3, r0
 8014b78:	e04a      	b.n	8014c10 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8014b7a:	2300      	movs	r3, #0
 8014b7c:	75fb      	strb	r3, [r7, #23]
 8014b7e:	e031      	b.n	8014be4 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8014b80:	7dfa      	ldrb	r2, [r7, #23]
 8014b82:	492c      	ldr	r1, [pc, #176]	; (8014c34 <etharp_output+0x200>)
 8014b84:	4613      	mov	r3, r2
 8014b86:	005b      	lsls	r3, r3, #1
 8014b88:	4413      	add	r3, r2
 8014b8a:	00db      	lsls	r3, r3, #3
 8014b8c:	440b      	add	r3, r1
 8014b8e:	3314      	adds	r3, #20
 8014b90:	781b      	ldrb	r3, [r3, #0]
 8014b92:	2b01      	cmp	r3, #1
 8014b94:	d923      	bls.n	8014bde <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8014b96:	7dfa      	ldrb	r2, [r7, #23]
 8014b98:	4926      	ldr	r1, [pc, #152]	; (8014c34 <etharp_output+0x200>)
 8014b9a:	4613      	mov	r3, r2
 8014b9c:	005b      	lsls	r3, r3, #1
 8014b9e:	4413      	add	r3, r2
 8014ba0:	00db      	lsls	r3, r3, #3
 8014ba2:	440b      	add	r3, r1
 8014ba4:	3308      	adds	r3, #8
 8014ba6:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8014ba8:	68fa      	ldr	r2, [r7, #12]
 8014baa:	429a      	cmp	r2, r3
 8014bac:	d117      	bne.n	8014bde <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8014bae:	69bb      	ldr	r3, [r7, #24]
 8014bb0:	6819      	ldr	r1, [r3, #0]
 8014bb2:	7dfa      	ldrb	r2, [r7, #23]
 8014bb4:	481f      	ldr	r0, [pc, #124]	; (8014c34 <etharp_output+0x200>)
 8014bb6:	4613      	mov	r3, r2
 8014bb8:	005b      	lsls	r3, r3, #1
 8014bba:	4413      	add	r3, r2
 8014bbc:	00db      	lsls	r3, r3, #3
 8014bbe:	4403      	add	r3, r0
 8014bc0:	3304      	adds	r3, #4
 8014bc2:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8014bc4:	4299      	cmp	r1, r3
 8014bc6:	d10a      	bne.n	8014bde <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8014bc8:	4a19      	ldr	r2, [pc, #100]	; (8014c30 <etharp_output+0x1fc>)
 8014bca:	7dfb      	ldrb	r3, [r7, #23]
 8014bcc:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8014bce:	7dfb      	ldrb	r3, [r7, #23]
 8014bd0:	461a      	mov	r2, r3
 8014bd2:	68b9      	ldr	r1, [r7, #8]
 8014bd4:	68f8      	ldr	r0, [r7, #12]
 8014bd6:	f7ff fe93 	bl	8014900 <etharp_output_to_arp_index>
 8014bda:	4603      	mov	r3, r0
 8014bdc:	e018      	b.n	8014c10 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8014bde:	7dfb      	ldrb	r3, [r7, #23]
 8014be0:	3301      	adds	r3, #1
 8014be2:	75fb      	strb	r3, [r7, #23]
 8014be4:	7dfb      	ldrb	r3, [r7, #23]
 8014be6:	2b09      	cmp	r3, #9
 8014be8:	d9ca      	bls.n	8014b80 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8014bea:	68ba      	ldr	r2, [r7, #8]
 8014bec:	69b9      	ldr	r1, [r7, #24]
 8014bee:	68f8      	ldr	r0, [r7, #12]
 8014bf0:	f000 f822 	bl	8014c38 <etharp_query>
 8014bf4:	4603      	mov	r3, r0
 8014bf6:	e00b      	b.n	8014c10 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8014bf8:	68fb      	ldr	r3, [r7, #12]
 8014bfa:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8014bfe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8014c02:	9300      	str	r3, [sp, #0]
 8014c04:	69fb      	ldr	r3, [r7, #28]
 8014c06:	68b9      	ldr	r1, [r7, #8]
 8014c08:	68f8      	ldr	r0, [r7, #12]
 8014c0a:	f001 fe7f 	bl	801690c <ethernet_output>
 8014c0e:	4603      	mov	r3, r0
}
 8014c10:	4618      	mov	r0, r3
 8014c12:	3720      	adds	r7, #32
 8014c14:	46bd      	mov	sp, r7
 8014c16:	bd80      	pop	{r7, pc}
 8014c18:	0801b314 	.word	0x0801b314
 8014c1c:	0801b464 	.word	0x0801b464
 8014c20:	0801b38c 	.word	0x0801b38c
 8014c24:	0801b4b4 	.word	0x0801b4b4
 8014c28:	0801b454 	.word	0x0801b454
 8014c2c:	0801bbbc 	.word	0x0801bbbc
 8014c30:	200048f4 	.word	0x200048f4
 8014c34:	20004804 	.word	0x20004804

08014c38 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8014c38:	b580      	push	{r7, lr}
 8014c3a:	b08c      	sub	sp, #48	; 0x30
 8014c3c:	af02      	add	r7, sp, #8
 8014c3e:	60f8      	str	r0, [r7, #12]
 8014c40:	60b9      	str	r1, [r7, #8]
 8014c42:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8014c44:	68fb      	ldr	r3, [r7, #12]
 8014c46:	3326      	adds	r3, #38	; 0x26
 8014c48:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8014c4a:	23ff      	movs	r3, #255	; 0xff
 8014c4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8014c50:	2300      	movs	r3, #0
 8014c52:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8014c54:	68bb      	ldr	r3, [r7, #8]
 8014c56:	681b      	ldr	r3, [r3, #0]
 8014c58:	68f9      	ldr	r1, [r7, #12]
 8014c5a:	4618      	mov	r0, r3
 8014c5c:	f000 fe0c 	bl	8015878 <ip4_addr_isbroadcast_u32>
 8014c60:	4603      	mov	r3, r0
 8014c62:	2b00      	cmp	r3, #0
 8014c64:	d10c      	bne.n	8014c80 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8014c66:	68bb      	ldr	r3, [r7, #8]
 8014c68:	681b      	ldr	r3, [r3, #0]
 8014c6a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8014c6e:	2be0      	cmp	r3, #224	; 0xe0
 8014c70:	d006      	beq.n	8014c80 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8014c72:	68bb      	ldr	r3, [r7, #8]
 8014c74:	2b00      	cmp	r3, #0
 8014c76:	d003      	beq.n	8014c80 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8014c78:	68bb      	ldr	r3, [r7, #8]
 8014c7a:	681b      	ldr	r3, [r3, #0]
 8014c7c:	2b00      	cmp	r3, #0
 8014c7e:	d102      	bne.n	8014c86 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8014c80:	f06f 030f 	mvn.w	r3, #15
 8014c84:	e102      	b.n	8014e8c <etharp_query+0x254>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8014c86:	68fa      	ldr	r2, [r7, #12]
 8014c88:	2101      	movs	r1, #1
 8014c8a:	68b8      	ldr	r0, [r7, #8]
 8014c8c:	f7ff fb60 	bl	8014350 <etharp_find_entry>
 8014c90:	4603      	mov	r3, r0
 8014c92:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8014c94:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8014c98:	2b00      	cmp	r3, #0
 8014c9a:	da02      	bge.n	8014ca2 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8014c9c:	8a7b      	ldrh	r3, [r7, #18]
 8014c9e:	b25b      	sxtb	r3, r3
 8014ca0:	e0f4      	b.n	8014e8c <etharp_query+0x254>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8014ca2:	8a7b      	ldrh	r3, [r7, #18]
 8014ca4:	2b7e      	cmp	r3, #126	; 0x7e
 8014ca6:	d906      	bls.n	8014cb6 <etharp_query+0x7e>
 8014ca8:	4b7a      	ldr	r3, [pc, #488]	; (8014e94 <etharp_query+0x25c>)
 8014caa:	f240 32c1 	movw	r2, #961	; 0x3c1
 8014cae:	497a      	ldr	r1, [pc, #488]	; (8014e98 <etharp_query+0x260>)
 8014cb0:	487a      	ldr	r0, [pc, #488]	; (8014e9c <etharp_query+0x264>)
 8014cb2:	f002 f8d5 	bl	8016e60 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8014cb6:	8a7b      	ldrh	r3, [r7, #18]
 8014cb8:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8014cba:	7c7a      	ldrb	r2, [r7, #17]
 8014cbc:	4978      	ldr	r1, [pc, #480]	; (8014ea0 <etharp_query+0x268>)
 8014cbe:	4613      	mov	r3, r2
 8014cc0:	005b      	lsls	r3, r3, #1
 8014cc2:	4413      	add	r3, r2
 8014cc4:	00db      	lsls	r3, r3, #3
 8014cc6:	440b      	add	r3, r1
 8014cc8:	3314      	adds	r3, #20
 8014cca:	781b      	ldrb	r3, [r3, #0]
 8014ccc:	2b00      	cmp	r3, #0
 8014cce:	d115      	bne.n	8014cfc <etharp_query+0xc4>
    is_new_entry = 1;
 8014cd0:	2301      	movs	r3, #1
 8014cd2:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8014cd4:	7c7a      	ldrb	r2, [r7, #17]
 8014cd6:	4972      	ldr	r1, [pc, #456]	; (8014ea0 <etharp_query+0x268>)
 8014cd8:	4613      	mov	r3, r2
 8014cda:	005b      	lsls	r3, r3, #1
 8014cdc:	4413      	add	r3, r2
 8014cde:	00db      	lsls	r3, r3, #3
 8014ce0:	440b      	add	r3, r1
 8014ce2:	3314      	adds	r3, #20
 8014ce4:	2201      	movs	r2, #1
 8014ce6:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8014ce8:	7c7a      	ldrb	r2, [r7, #17]
 8014cea:	496d      	ldr	r1, [pc, #436]	; (8014ea0 <etharp_query+0x268>)
 8014cec:	4613      	mov	r3, r2
 8014cee:	005b      	lsls	r3, r3, #1
 8014cf0:	4413      	add	r3, r2
 8014cf2:	00db      	lsls	r3, r3, #3
 8014cf4:	440b      	add	r3, r1
 8014cf6:	3308      	adds	r3, #8
 8014cf8:	68fa      	ldr	r2, [r7, #12]
 8014cfa:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8014cfc:	7c7a      	ldrb	r2, [r7, #17]
 8014cfe:	4968      	ldr	r1, [pc, #416]	; (8014ea0 <etharp_query+0x268>)
 8014d00:	4613      	mov	r3, r2
 8014d02:	005b      	lsls	r3, r3, #1
 8014d04:	4413      	add	r3, r2
 8014d06:	00db      	lsls	r3, r3, #3
 8014d08:	440b      	add	r3, r1
 8014d0a:	3314      	adds	r3, #20
 8014d0c:	781b      	ldrb	r3, [r3, #0]
 8014d0e:	2b01      	cmp	r3, #1
 8014d10:	d011      	beq.n	8014d36 <etharp_query+0xfe>
 8014d12:	7c7a      	ldrb	r2, [r7, #17]
 8014d14:	4962      	ldr	r1, [pc, #392]	; (8014ea0 <etharp_query+0x268>)
 8014d16:	4613      	mov	r3, r2
 8014d18:	005b      	lsls	r3, r3, #1
 8014d1a:	4413      	add	r3, r2
 8014d1c:	00db      	lsls	r3, r3, #3
 8014d1e:	440b      	add	r3, r1
 8014d20:	3314      	adds	r3, #20
 8014d22:	781b      	ldrb	r3, [r3, #0]
 8014d24:	2b01      	cmp	r3, #1
 8014d26:	d806      	bhi.n	8014d36 <etharp_query+0xfe>
 8014d28:	4b5a      	ldr	r3, [pc, #360]	; (8014e94 <etharp_query+0x25c>)
 8014d2a:	f240 32cf 	movw	r2, #975	; 0x3cf
 8014d2e:	495d      	ldr	r1, [pc, #372]	; (8014ea4 <etharp_query+0x26c>)
 8014d30:	485a      	ldr	r0, [pc, #360]	; (8014e9c <etharp_query+0x264>)
 8014d32:	f002 f895 	bl	8016e60 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8014d36:	6a3b      	ldr	r3, [r7, #32]
 8014d38:	2b00      	cmp	r3, #0
 8014d3a:	d102      	bne.n	8014d42 <etharp_query+0x10a>
 8014d3c:	687b      	ldr	r3, [r7, #4]
 8014d3e:	2b00      	cmp	r3, #0
 8014d40:	d10c      	bne.n	8014d5c <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8014d42:	68b9      	ldr	r1, [r7, #8]
 8014d44:	68f8      	ldr	r0, [r7, #12]
 8014d46:	f000 f963 	bl	8015010 <etharp_request>
 8014d4a:	4603      	mov	r3, r0
 8014d4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8014d50:	687b      	ldr	r3, [r7, #4]
 8014d52:	2b00      	cmp	r3, #0
 8014d54:	d102      	bne.n	8014d5c <etharp_query+0x124>
      return result;
 8014d56:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8014d5a:	e097      	b.n	8014e8c <etharp_query+0x254>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8014d5c:	687b      	ldr	r3, [r7, #4]
 8014d5e:	2b00      	cmp	r3, #0
 8014d60:	d106      	bne.n	8014d70 <etharp_query+0x138>
 8014d62:	4b4c      	ldr	r3, [pc, #304]	; (8014e94 <etharp_query+0x25c>)
 8014d64:	f240 32e1 	movw	r2, #993	; 0x3e1
 8014d68:	494f      	ldr	r1, [pc, #316]	; (8014ea8 <etharp_query+0x270>)
 8014d6a:	484c      	ldr	r0, [pc, #304]	; (8014e9c <etharp_query+0x264>)
 8014d6c:	f002 f878 	bl	8016e60 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8014d70:	7c7a      	ldrb	r2, [r7, #17]
 8014d72:	494b      	ldr	r1, [pc, #300]	; (8014ea0 <etharp_query+0x268>)
 8014d74:	4613      	mov	r3, r2
 8014d76:	005b      	lsls	r3, r3, #1
 8014d78:	4413      	add	r3, r2
 8014d7a:	00db      	lsls	r3, r3, #3
 8014d7c:	440b      	add	r3, r1
 8014d7e:	3314      	adds	r3, #20
 8014d80:	781b      	ldrb	r3, [r3, #0]
 8014d82:	2b01      	cmp	r3, #1
 8014d84:	d918      	bls.n	8014db8 <etharp_query+0x180>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8014d86:	4a49      	ldr	r2, [pc, #292]	; (8014eac <etharp_query+0x274>)
 8014d88:	7c7b      	ldrb	r3, [r7, #17]
 8014d8a:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8014d8c:	7c7a      	ldrb	r2, [r7, #17]
 8014d8e:	4613      	mov	r3, r2
 8014d90:	005b      	lsls	r3, r3, #1
 8014d92:	4413      	add	r3, r2
 8014d94:	00db      	lsls	r3, r3, #3
 8014d96:	3308      	adds	r3, #8
 8014d98:	4a41      	ldr	r2, [pc, #260]	; (8014ea0 <etharp_query+0x268>)
 8014d9a:	4413      	add	r3, r2
 8014d9c:	1d1a      	adds	r2, r3, #4
 8014d9e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8014da2:	9300      	str	r3, [sp, #0]
 8014da4:	4613      	mov	r3, r2
 8014da6:	697a      	ldr	r2, [r7, #20]
 8014da8:	6879      	ldr	r1, [r7, #4]
 8014daa:	68f8      	ldr	r0, [r7, #12]
 8014dac:	f001 fdae 	bl	801690c <ethernet_output>
 8014db0:	4603      	mov	r3, r0
 8014db2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8014db6:	e067      	b.n	8014e88 <etharp_query+0x250>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8014db8:	7c7a      	ldrb	r2, [r7, #17]
 8014dba:	4939      	ldr	r1, [pc, #228]	; (8014ea0 <etharp_query+0x268>)
 8014dbc:	4613      	mov	r3, r2
 8014dbe:	005b      	lsls	r3, r3, #1
 8014dc0:	4413      	add	r3, r2
 8014dc2:	00db      	lsls	r3, r3, #3
 8014dc4:	440b      	add	r3, r1
 8014dc6:	3314      	adds	r3, #20
 8014dc8:	781b      	ldrb	r3, [r3, #0]
 8014dca:	2b01      	cmp	r3, #1
 8014dcc:	d15c      	bne.n	8014e88 <etharp_query+0x250>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8014dce:	2300      	movs	r3, #0
 8014dd0:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8014dd2:	687b      	ldr	r3, [r7, #4]
 8014dd4:	61fb      	str	r3, [r7, #28]
    while (p) {
 8014dd6:	e01c      	b.n	8014e12 <etharp_query+0x1da>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8014dd8:	69fb      	ldr	r3, [r7, #28]
 8014dda:	895a      	ldrh	r2, [r3, #10]
 8014ddc:	69fb      	ldr	r3, [r7, #28]
 8014dde:	891b      	ldrh	r3, [r3, #8]
 8014de0:	429a      	cmp	r2, r3
 8014de2:	d10a      	bne.n	8014dfa <etharp_query+0x1c2>
 8014de4:	69fb      	ldr	r3, [r7, #28]
 8014de6:	681b      	ldr	r3, [r3, #0]
 8014de8:	2b00      	cmp	r3, #0
 8014dea:	d006      	beq.n	8014dfa <etharp_query+0x1c2>
 8014dec:	4b29      	ldr	r3, [pc, #164]	; (8014e94 <etharp_query+0x25c>)
 8014dee:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8014df2:	492f      	ldr	r1, [pc, #188]	; (8014eb0 <etharp_query+0x278>)
 8014df4:	4829      	ldr	r0, [pc, #164]	; (8014e9c <etharp_query+0x264>)
 8014df6:	f002 f833 	bl	8016e60 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8014dfa:	69fb      	ldr	r3, [r7, #28]
 8014dfc:	7b1b      	ldrb	r3, [r3, #12]
 8014dfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014e02:	2b00      	cmp	r3, #0
 8014e04:	d002      	beq.n	8014e0c <etharp_query+0x1d4>
        copy_needed = 1;
 8014e06:	2301      	movs	r3, #1
 8014e08:	61bb      	str	r3, [r7, #24]
        break;
 8014e0a:	e005      	b.n	8014e18 <etharp_query+0x1e0>
      }
      p = p->next;
 8014e0c:	69fb      	ldr	r3, [r7, #28]
 8014e0e:	681b      	ldr	r3, [r3, #0]
 8014e10:	61fb      	str	r3, [r7, #28]
    while (p) {
 8014e12:	69fb      	ldr	r3, [r7, #28]
 8014e14:	2b00      	cmp	r3, #0
 8014e16:	d1df      	bne.n	8014dd8 <etharp_query+0x1a0>
    }
    if (copy_needed) {
 8014e18:	69bb      	ldr	r3, [r7, #24]
 8014e1a:	2b00      	cmp	r3, #0
 8014e1c:	d007      	beq.n	8014e2e <etharp_query+0x1f6>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8014e1e:	687a      	ldr	r2, [r7, #4]
 8014e20:	f44f 7120 	mov.w	r1, #640	; 0x280
 8014e24:	200e      	movs	r0, #14
 8014e26:	f7f8 fb69 	bl	800d4fc <pbuf_clone>
 8014e2a:	61f8      	str	r0, [r7, #28]
 8014e2c:	e004      	b.n	8014e38 <etharp_query+0x200>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8014e2e:	687b      	ldr	r3, [r7, #4]
 8014e30:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8014e32:	69f8      	ldr	r0, [r7, #28]
 8014e34:	f7f8 f990 	bl	800d158 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8014e38:	69fb      	ldr	r3, [r7, #28]
 8014e3a:	2b00      	cmp	r3, #0
 8014e3c:	d021      	beq.n	8014e82 <etharp_query+0x24a>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8014e3e:	7c7a      	ldrb	r2, [r7, #17]
 8014e40:	4917      	ldr	r1, [pc, #92]	; (8014ea0 <etharp_query+0x268>)
 8014e42:	4613      	mov	r3, r2
 8014e44:	005b      	lsls	r3, r3, #1
 8014e46:	4413      	add	r3, r2
 8014e48:	00db      	lsls	r3, r3, #3
 8014e4a:	440b      	add	r3, r1
 8014e4c:	681b      	ldr	r3, [r3, #0]
 8014e4e:	2b00      	cmp	r3, #0
 8014e50:	d00a      	beq.n	8014e68 <etharp_query+0x230>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8014e52:	7c7a      	ldrb	r2, [r7, #17]
 8014e54:	4912      	ldr	r1, [pc, #72]	; (8014ea0 <etharp_query+0x268>)
 8014e56:	4613      	mov	r3, r2
 8014e58:	005b      	lsls	r3, r3, #1
 8014e5a:	4413      	add	r3, r2
 8014e5c:	00db      	lsls	r3, r3, #3
 8014e5e:	440b      	add	r3, r1
 8014e60:	681b      	ldr	r3, [r3, #0]
 8014e62:	4618      	mov	r0, r3
 8014e64:	f7f8 f8d2 	bl	800d00c <pbuf_free>
      }
      arp_table[i].q = p;
 8014e68:	7c7a      	ldrb	r2, [r7, #17]
 8014e6a:	490d      	ldr	r1, [pc, #52]	; (8014ea0 <etharp_query+0x268>)
 8014e6c:	4613      	mov	r3, r2
 8014e6e:	005b      	lsls	r3, r3, #1
 8014e70:	4413      	add	r3, r2
 8014e72:	00db      	lsls	r3, r3, #3
 8014e74:	440b      	add	r3, r1
 8014e76:	69fa      	ldr	r2, [r7, #28]
 8014e78:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8014e7a:	2300      	movs	r3, #0
 8014e7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8014e80:	e002      	b.n	8014e88 <etharp_query+0x250>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8014e82:	23ff      	movs	r3, #255	; 0xff
 8014e84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8014e88:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8014e8c:	4618      	mov	r0, r3
 8014e8e:	3728      	adds	r7, #40	; 0x28
 8014e90:	46bd      	mov	sp, r7
 8014e92:	bd80      	pop	{r7, pc}
 8014e94:	0801b314 	.word	0x0801b314
 8014e98:	0801b4c0 	.word	0x0801b4c0
 8014e9c:	0801b38c 	.word	0x0801b38c
 8014ea0:	20004804 	.word	0x20004804
 8014ea4:	0801b4d0 	.word	0x0801b4d0
 8014ea8:	0801b4b4 	.word	0x0801b4b4
 8014eac:	200048f4 	.word	0x200048f4
 8014eb0:	0801b4f8 	.word	0x0801b4f8

08014eb4 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8014eb4:	b580      	push	{r7, lr}
 8014eb6:	b08a      	sub	sp, #40	; 0x28
 8014eb8:	af02      	add	r7, sp, #8
 8014eba:	60f8      	str	r0, [r7, #12]
 8014ebc:	60b9      	str	r1, [r7, #8]
 8014ebe:	607a      	str	r2, [r7, #4]
 8014ec0:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8014ec2:	2300      	movs	r3, #0
 8014ec4:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8014ec6:	68fb      	ldr	r3, [r7, #12]
 8014ec8:	2b00      	cmp	r3, #0
 8014eca:	d106      	bne.n	8014eda <etharp_raw+0x26>
 8014ecc:	4b3a      	ldr	r3, [pc, #232]	; (8014fb8 <etharp_raw+0x104>)
 8014ece:	f240 4257 	movw	r2, #1111	; 0x457
 8014ed2:	493a      	ldr	r1, [pc, #232]	; (8014fbc <etharp_raw+0x108>)
 8014ed4:	483a      	ldr	r0, [pc, #232]	; (8014fc0 <etharp_raw+0x10c>)
 8014ed6:	f001 ffc3 	bl	8016e60 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8014eda:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014ede:	211c      	movs	r1, #28
 8014ee0:	200e      	movs	r0, #14
 8014ee2:	f7f7 fd81 	bl	800c9e8 <pbuf_alloc>
 8014ee6:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8014ee8:	69bb      	ldr	r3, [r7, #24]
 8014eea:	2b00      	cmp	r3, #0
 8014eec:	d102      	bne.n	8014ef4 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8014eee:	f04f 33ff 	mov.w	r3, #4294967295
 8014ef2:	e05d      	b.n	8014fb0 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8014ef4:	69bb      	ldr	r3, [r7, #24]
 8014ef6:	895b      	ldrh	r3, [r3, #10]
 8014ef8:	2b1b      	cmp	r3, #27
 8014efa:	d806      	bhi.n	8014f0a <etharp_raw+0x56>
 8014efc:	4b2e      	ldr	r3, [pc, #184]	; (8014fb8 <etharp_raw+0x104>)
 8014efe:	f240 4263 	movw	r2, #1123	; 0x463
 8014f02:	4930      	ldr	r1, [pc, #192]	; (8014fc4 <etharp_raw+0x110>)
 8014f04:	482e      	ldr	r0, [pc, #184]	; (8014fc0 <etharp_raw+0x10c>)
 8014f06:	f001 ffab 	bl	8016e60 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8014f0a:	69bb      	ldr	r3, [r7, #24]
 8014f0c:	685b      	ldr	r3, [r3, #4]
 8014f0e:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8014f10:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8014f12:	4618      	mov	r0, r3
 8014f14:	f7f6 fca0 	bl	800b858 <lwip_htons>
 8014f18:	4603      	mov	r3, r0
 8014f1a:	461a      	mov	r2, r3
 8014f1c:	697b      	ldr	r3, [r7, #20]
 8014f1e:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8014f20:	68fb      	ldr	r3, [r7, #12]
 8014f22:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8014f26:	2b06      	cmp	r3, #6
 8014f28:	d006      	beq.n	8014f38 <etharp_raw+0x84>
 8014f2a:	4b23      	ldr	r3, [pc, #140]	; (8014fb8 <etharp_raw+0x104>)
 8014f2c:	f240 426a 	movw	r2, #1130	; 0x46a
 8014f30:	4925      	ldr	r1, [pc, #148]	; (8014fc8 <etharp_raw+0x114>)
 8014f32:	4823      	ldr	r0, [pc, #140]	; (8014fc0 <etharp_raw+0x10c>)
 8014f34:	f001 ff94 	bl	8016e60 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8014f38:	697b      	ldr	r3, [r7, #20]
 8014f3a:	3308      	adds	r3, #8
 8014f3c:	2206      	movs	r2, #6
 8014f3e:	6839      	ldr	r1, [r7, #0]
 8014f40:	4618      	mov	r0, r3
 8014f42:	f001 ff60 	bl	8016e06 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8014f46:	697b      	ldr	r3, [r7, #20]
 8014f48:	3312      	adds	r3, #18
 8014f4a:	2206      	movs	r2, #6
 8014f4c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8014f4e:	4618      	mov	r0, r3
 8014f50:	f001 ff59 	bl	8016e06 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8014f54:	697b      	ldr	r3, [r7, #20]
 8014f56:	330e      	adds	r3, #14
 8014f58:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014f5a:	6812      	ldr	r2, [r2, #0]
 8014f5c:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8014f5e:	697b      	ldr	r3, [r7, #20]
 8014f60:	3318      	adds	r3, #24
 8014f62:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014f64:	6812      	ldr	r2, [r2, #0]
 8014f66:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8014f68:	697b      	ldr	r3, [r7, #20]
 8014f6a:	2200      	movs	r2, #0
 8014f6c:	701a      	strb	r2, [r3, #0]
 8014f6e:	2200      	movs	r2, #0
 8014f70:	f042 0201 	orr.w	r2, r2, #1
 8014f74:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8014f76:	697b      	ldr	r3, [r7, #20]
 8014f78:	2200      	movs	r2, #0
 8014f7a:	f042 0208 	orr.w	r2, r2, #8
 8014f7e:	709a      	strb	r2, [r3, #2]
 8014f80:	2200      	movs	r2, #0
 8014f82:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8014f84:	697b      	ldr	r3, [r7, #20]
 8014f86:	2206      	movs	r2, #6
 8014f88:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8014f8a:	697b      	ldr	r3, [r7, #20]
 8014f8c:	2204      	movs	r2, #4
 8014f8e:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8014f90:	f640 0306 	movw	r3, #2054	; 0x806
 8014f94:	9300      	str	r3, [sp, #0]
 8014f96:	687b      	ldr	r3, [r7, #4]
 8014f98:	68ba      	ldr	r2, [r7, #8]
 8014f9a:	69b9      	ldr	r1, [r7, #24]
 8014f9c:	68f8      	ldr	r0, [r7, #12]
 8014f9e:	f001 fcb5 	bl	801690c <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8014fa2:	69b8      	ldr	r0, [r7, #24]
 8014fa4:	f7f8 f832 	bl	800d00c <pbuf_free>
  p = NULL;
 8014fa8:	2300      	movs	r3, #0
 8014faa:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8014fac:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8014fb0:	4618      	mov	r0, r3
 8014fb2:	3720      	adds	r7, #32
 8014fb4:	46bd      	mov	sp, r7
 8014fb6:	bd80      	pop	{r7, pc}
 8014fb8:	0801b314 	.word	0x0801b314
 8014fbc:	0801b464 	.word	0x0801b464
 8014fc0:	0801b38c 	.word	0x0801b38c
 8014fc4:	0801b514 	.word	0x0801b514
 8014fc8:	0801b548 	.word	0x0801b548

08014fcc <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8014fcc:	b580      	push	{r7, lr}
 8014fce:	b088      	sub	sp, #32
 8014fd0:	af04      	add	r7, sp, #16
 8014fd2:	60f8      	str	r0, [r7, #12]
 8014fd4:	60b9      	str	r1, [r7, #8]
 8014fd6:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8014fd8:	68fb      	ldr	r3, [r7, #12]
 8014fda:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8014fde:	68fb      	ldr	r3, [r7, #12]
 8014fe0:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8014fe4:	68fb      	ldr	r3, [r7, #12]
 8014fe6:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8014fe8:	2201      	movs	r2, #1
 8014fea:	9203      	str	r2, [sp, #12]
 8014fec:	68ba      	ldr	r2, [r7, #8]
 8014fee:	9202      	str	r2, [sp, #8]
 8014ff0:	4a06      	ldr	r2, [pc, #24]	; (801500c <etharp_request_dst+0x40>)
 8014ff2:	9201      	str	r2, [sp, #4]
 8014ff4:	9300      	str	r3, [sp, #0]
 8014ff6:	4603      	mov	r3, r0
 8014ff8:	687a      	ldr	r2, [r7, #4]
 8014ffa:	68f8      	ldr	r0, [r7, #12]
 8014ffc:	f7ff ff5a 	bl	8014eb4 <etharp_raw>
 8015000:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8015002:	4618      	mov	r0, r3
 8015004:	3710      	adds	r7, #16
 8015006:	46bd      	mov	sp, r7
 8015008:	bd80      	pop	{r7, pc}
 801500a:	bf00      	nop
 801500c:	0801bbc4 	.word	0x0801bbc4

08015010 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8015010:	b580      	push	{r7, lr}
 8015012:	b082      	sub	sp, #8
 8015014:	af00      	add	r7, sp, #0
 8015016:	6078      	str	r0, [r7, #4]
 8015018:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 801501a:	4a05      	ldr	r2, [pc, #20]	; (8015030 <etharp_request+0x20>)
 801501c:	6839      	ldr	r1, [r7, #0]
 801501e:	6878      	ldr	r0, [r7, #4]
 8015020:	f7ff ffd4 	bl	8014fcc <etharp_request_dst>
 8015024:	4603      	mov	r3, r0
}
 8015026:	4618      	mov	r0, r3
 8015028:	3708      	adds	r7, #8
 801502a:	46bd      	mov	sp, r7
 801502c:	bd80      	pop	{r7, pc}
 801502e:	bf00      	nop
 8015030:	0801bbbc 	.word	0x0801bbbc

08015034 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8015034:	b580      	push	{r7, lr}
 8015036:	b08e      	sub	sp, #56	; 0x38
 8015038:	af04      	add	r7, sp, #16
 801503a:	6078      	str	r0, [r7, #4]
 801503c:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801503e:	4b79      	ldr	r3, [pc, #484]	; (8015224 <icmp_input+0x1f0>)
 8015040:	689b      	ldr	r3, [r3, #8]
 8015042:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8015044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015046:	781b      	ldrb	r3, [r3, #0]
 8015048:	f003 030f 	and.w	r3, r3, #15
 801504c:	b2db      	uxtb	r3, r3
 801504e:	009b      	lsls	r3, r3, #2
 8015050:	b2db      	uxtb	r3, r3
 8015052:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8015054:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015056:	2b13      	cmp	r3, #19
 8015058:	f240 80cd 	bls.w	80151f6 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 801505c:	687b      	ldr	r3, [r7, #4]
 801505e:	895b      	ldrh	r3, [r3, #10]
 8015060:	2b03      	cmp	r3, #3
 8015062:	f240 80ca 	bls.w	80151fa <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8015066:	687b      	ldr	r3, [r7, #4]
 8015068:	685b      	ldr	r3, [r3, #4]
 801506a:	781b      	ldrb	r3, [r3, #0]
 801506c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8015070:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8015074:	2b00      	cmp	r3, #0
 8015076:	f000 80b7 	beq.w	80151e8 <icmp_input+0x1b4>
 801507a:	2b08      	cmp	r3, #8
 801507c:	f040 80b7 	bne.w	80151ee <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8015080:	4b69      	ldr	r3, [pc, #420]	; (8015228 <icmp_input+0x1f4>)
 8015082:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8015084:	4b67      	ldr	r3, [pc, #412]	; (8015224 <icmp_input+0x1f0>)
 8015086:	695b      	ldr	r3, [r3, #20]
 8015088:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801508c:	2be0      	cmp	r3, #224	; 0xe0
 801508e:	f000 80bb 	beq.w	8015208 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8015092:	4b64      	ldr	r3, [pc, #400]	; (8015224 <icmp_input+0x1f0>)
 8015094:	695a      	ldr	r2, [r3, #20]
 8015096:	4b63      	ldr	r3, [pc, #396]	; (8015224 <icmp_input+0x1f0>)
 8015098:	681b      	ldr	r3, [r3, #0]
 801509a:	4619      	mov	r1, r3
 801509c:	4610      	mov	r0, r2
 801509e:	f000 fbeb 	bl	8015878 <ip4_addr_isbroadcast_u32>
 80150a2:	4603      	mov	r3, r0
 80150a4:	2b00      	cmp	r3, #0
 80150a6:	f040 80b1 	bne.w	801520c <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 80150aa:	687b      	ldr	r3, [r7, #4]
 80150ac:	891b      	ldrh	r3, [r3, #8]
 80150ae:	2b07      	cmp	r3, #7
 80150b0:	f240 80a5 	bls.w	80151fe <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80150b4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80150b6:	330e      	adds	r3, #14
 80150b8:	4619      	mov	r1, r3
 80150ba:	6878      	ldr	r0, [r7, #4]
 80150bc:	f7f7 fede 	bl	800ce7c <pbuf_add_header>
 80150c0:	4603      	mov	r3, r0
 80150c2:	2b00      	cmp	r3, #0
 80150c4:	d04b      	beq.n	801515e <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 80150c6:	687b      	ldr	r3, [r7, #4]
 80150c8:	891a      	ldrh	r2, [r3, #8]
 80150ca:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80150cc:	4413      	add	r3, r2
 80150ce:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 80150d0:	687b      	ldr	r3, [r7, #4]
 80150d2:	891b      	ldrh	r3, [r3, #8]
 80150d4:	8b7a      	ldrh	r2, [r7, #26]
 80150d6:	429a      	cmp	r2, r3
 80150d8:	f0c0 809a 	bcc.w	8015210 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 80150dc:	8b7b      	ldrh	r3, [r7, #26]
 80150de:	f44f 7220 	mov.w	r2, #640	; 0x280
 80150e2:	4619      	mov	r1, r3
 80150e4:	200e      	movs	r0, #14
 80150e6:	f7f7 fc7f 	bl	800c9e8 <pbuf_alloc>
 80150ea:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 80150ec:	697b      	ldr	r3, [r7, #20]
 80150ee:	2b00      	cmp	r3, #0
 80150f0:	f000 8090 	beq.w	8015214 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 80150f4:	697b      	ldr	r3, [r7, #20]
 80150f6:	895b      	ldrh	r3, [r3, #10]
 80150f8:	461a      	mov	r2, r3
 80150fa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80150fc:	3308      	adds	r3, #8
 80150fe:	429a      	cmp	r2, r3
 8015100:	d203      	bcs.n	801510a <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8015102:	6978      	ldr	r0, [r7, #20]
 8015104:	f7f7 ff82 	bl	800d00c <pbuf_free>
          goto icmperr;
 8015108:	e085      	b.n	8015216 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 801510a:	697b      	ldr	r3, [r7, #20]
 801510c:	685b      	ldr	r3, [r3, #4]
 801510e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8015110:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8015112:	4618      	mov	r0, r3
 8015114:	f001 fe77 	bl	8016e06 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8015118:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801511a:	4619      	mov	r1, r3
 801511c:	6978      	ldr	r0, [r7, #20]
 801511e:	f7f7 febd 	bl	800ce9c <pbuf_remove_header>
 8015122:	4603      	mov	r3, r0
 8015124:	2b00      	cmp	r3, #0
 8015126:	d009      	beq.n	801513c <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8015128:	4b40      	ldr	r3, [pc, #256]	; (801522c <icmp_input+0x1f8>)
 801512a:	22b6      	movs	r2, #182	; 0xb6
 801512c:	4940      	ldr	r1, [pc, #256]	; (8015230 <icmp_input+0x1fc>)
 801512e:	4841      	ldr	r0, [pc, #260]	; (8015234 <icmp_input+0x200>)
 8015130:	f001 fe96 	bl	8016e60 <iprintf>
          pbuf_free(r);
 8015134:	6978      	ldr	r0, [r7, #20]
 8015136:	f7f7 ff69 	bl	800d00c <pbuf_free>
          goto icmperr;
 801513a:	e06c      	b.n	8015216 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 801513c:	6879      	ldr	r1, [r7, #4]
 801513e:	6978      	ldr	r0, [r7, #20]
 8015140:	f7f8 f898 	bl	800d274 <pbuf_copy>
 8015144:	4603      	mov	r3, r0
 8015146:	2b00      	cmp	r3, #0
 8015148:	d003      	beq.n	8015152 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 801514a:	6978      	ldr	r0, [r7, #20]
 801514c:	f7f7 ff5e 	bl	800d00c <pbuf_free>
          goto icmperr;
 8015150:	e061      	b.n	8015216 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 8015152:	6878      	ldr	r0, [r7, #4]
 8015154:	f7f7 ff5a 	bl	800d00c <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8015158:	697b      	ldr	r3, [r7, #20]
 801515a:	607b      	str	r3, [r7, #4]
 801515c:	e00f      	b.n	801517e <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801515e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015160:	330e      	adds	r3, #14
 8015162:	4619      	mov	r1, r3
 8015164:	6878      	ldr	r0, [r7, #4]
 8015166:	f7f7 fe99 	bl	800ce9c <pbuf_remove_header>
 801516a:	4603      	mov	r3, r0
 801516c:	2b00      	cmp	r3, #0
 801516e:	d006      	beq.n	801517e <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8015170:	4b2e      	ldr	r3, [pc, #184]	; (801522c <icmp_input+0x1f8>)
 8015172:	22c7      	movs	r2, #199	; 0xc7
 8015174:	4930      	ldr	r1, [pc, #192]	; (8015238 <icmp_input+0x204>)
 8015176:	482f      	ldr	r0, [pc, #188]	; (8015234 <icmp_input+0x200>)
 8015178:	f001 fe72 	bl	8016e60 <iprintf>
          goto icmperr;
 801517c:	e04b      	b.n	8015216 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 801517e:	687b      	ldr	r3, [r7, #4]
 8015180:	685b      	ldr	r3, [r3, #4]
 8015182:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8015184:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015186:	4619      	mov	r1, r3
 8015188:	6878      	ldr	r0, [r7, #4]
 801518a:	f7f7 fe77 	bl	800ce7c <pbuf_add_header>
 801518e:	4603      	mov	r3, r0
 8015190:	2b00      	cmp	r3, #0
 8015192:	d12b      	bne.n	80151ec <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8015194:	687b      	ldr	r3, [r7, #4]
 8015196:	685b      	ldr	r3, [r3, #4]
 8015198:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 801519a:	69fb      	ldr	r3, [r7, #28]
 801519c:	681a      	ldr	r2, [r3, #0]
 801519e:	68fb      	ldr	r3, [r7, #12]
 80151a0:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 80151a2:	4b20      	ldr	r3, [pc, #128]	; (8015224 <icmp_input+0x1f0>)
 80151a4:	691a      	ldr	r2, [r3, #16]
 80151a6:	68fb      	ldr	r3, [r7, #12]
 80151a8:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 80151aa:	693b      	ldr	r3, [r7, #16]
 80151ac:	2200      	movs	r2, #0
 80151ae:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 80151b0:	693b      	ldr	r3, [r7, #16]
 80151b2:	2200      	movs	r2, #0
 80151b4:	709a      	strb	r2, [r3, #2]
 80151b6:	2200      	movs	r2, #0
 80151b8:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 80151ba:	68fb      	ldr	r3, [r7, #12]
 80151bc:	22ff      	movs	r2, #255	; 0xff
 80151be:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 80151c0:	68fb      	ldr	r3, [r7, #12]
 80151c2:	2200      	movs	r2, #0
 80151c4:	729a      	strb	r2, [r3, #10]
 80151c6:	2200      	movs	r2, #0
 80151c8:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 80151ca:	683b      	ldr	r3, [r7, #0]
 80151cc:	9302      	str	r3, [sp, #8]
 80151ce:	2301      	movs	r3, #1
 80151d0:	9301      	str	r3, [sp, #4]
 80151d2:	2300      	movs	r3, #0
 80151d4:	9300      	str	r3, [sp, #0]
 80151d6:	23ff      	movs	r3, #255	; 0xff
 80151d8:	2200      	movs	r2, #0
 80151da:	69f9      	ldr	r1, [r7, #28]
 80151dc:	6878      	ldr	r0, [r7, #4]
 80151de:	f000 fa73 	bl	80156c8 <ip4_output_if>
 80151e2:	4603      	mov	r3, r0
 80151e4:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 80151e6:	e001      	b.n	80151ec <icmp_input+0x1b8>
      break;
 80151e8:	bf00      	nop
 80151ea:	e000      	b.n	80151ee <icmp_input+0x1ba>
      break;
 80151ec:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 80151ee:	6878      	ldr	r0, [r7, #4]
 80151f0:	f7f7 ff0c 	bl	800d00c <pbuf_free>
  return;
 80151f4:	e013      	b.n	801521e <icmp_input+0x1ea>
    goto lenerr;
 80151f6:	bf00      	nop
 80151f8:	e002      	b.n	8015200 <icmp_input+0x1cc>
    goto lenerr;
 80151fa:	bf00      	nop
 80151fc:	e000      	b.n	8015200 <icmp_input+0x1cc>
        goto lenerr;
 80151fe:	bf00      	nop
lenerr:
  pbuf_free(p);
 8015200:	6878      	ldr	r0, [r7, #4]
 8015202:	f7f7 ff03 	bl	800d00c <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8015206:	e00a      	b.n	801521e <icmp_input+0x1ea>
        goto icmperr;
 8015208:	bf00      	nop
 801520a:	e004      	b.n	8015216 <icmp_input+0x1e2>
        goto icmperr;
 801520c:	bf00      	nop
 801520e:	e002      	b.n	8015216 <icmp_input+0x1e2>
          goto icmperr;
 8015210:	bf00      	nop
 8015212:	e000      	b.n	8015216 <icmp_input+0x1e2>
          goto icmperr;
 8015214:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8015216:	6878      	ldr	r0, [r7, #4]
 8015218:	f7f7 fef8 	bl	800d00c <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801521c:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 801521e:	3728      	adds	r7, #40	; 0x28
 8015220:	46bd      	mov	sp, r7
 8015222:	bd80      	pop	{r7, pc}
 8015224:	20007b28 	.word	0x20007b28
 8015228:	20007b3c 	.word	0x20007b3c
 801522c:	0801b58c 	.word	0x0801b58c
 8015230:	0801b5c4 	.word	0x0801b5c4
 8015234:	0801b5fc 	.word	0x0801b5fc
 8015238:	0801b624 	.word	0x0801b624

0801523c <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 801523c:	b580      	push	{r7, lr}
 801523e:	b082      	sub	sp, #8
 8015240:	af00      	add	r7, sp, #0
 8015242:	6078      	str	r0, [r7, #4]
 8015244:	460b      	mov	r3, r1
 8015246:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8015248:	78fb      	ldrb	r3, [r7, #3]
 801524a:	461a      	mov	r2, r3
 801524c:	2103      	movs	r1, #3
 801524e:	6878      	ldr	r0, [r7, #4]
 8015250:	f000 f814 	bl	801527c <icmp_send_response>
}
 8015254:	bf00      	nop
 8015256:	3708      	adds	r7, #8
 8015258:	46bd      	mov	sp, r7
 801525a:	bd80      	pop	{r7, pc}

0801525c <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 801525c:	b580      	push	{r7, lr}
 801525e:	b082      	sub	sp, #8
 8015260:	af00      	add	r7, sp, #0
 8015262:	6078      	str	r0, [r7, #4]
 8015264:	460b      	mov	r3, r1
 8015266:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8015268:	78fb      	ldrb	r3, [r7, #3]
 801526a:	461a      	mov	r2, r3
 801526c:	210b      	movs	r1, #11
 801526e:	6878      	ldr	r0, [r7, #4]
 8015270:	f000 f804 	bl	801527c <icmp_send_response>
}
 8015274:	bf00      	nop
 8015276:	3708      	adds	r7, #8
 8015278:	46bd      	mov	sp, r7
 801527a:	bd80      	pop	{r7, pc}

0801527c <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 801527c:	b580      	push	{r7, lr}
 801527e:	b08c      	sub	sp, #48	; 0x30
 8015280:	af04      	add	r7, sp, #16
 8015282:	6078      	str	r0, [r7, #4]
 8015284:	460b      	mov	r3, r1
 8015286:	70fb      	strb	r3, [r7, #3]
 8015288:	4613      	mov	r3, r2
 801528a:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 801528c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015290:	2124      	movs	r1, #36	; 0x24
 8015292:	2022      	movs	r0, #34	; 0x22
 8015294:	f7f7 fba8 	bl	800c9e8 <pbuf_alloc>
 8015298:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801529a:	69fb      	ldr	r3, [r7, #28]
 801529c:	2b00      	cmp	r3, #0
 801529e:	d04c      	beq.n	801533a <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 80152a0:	69fb      	ldr	r3, [r7, #28]
 80152a2:	895b      	ldrh	r3, [r3, #10]
 80152a4:	2b23      	cmp	r3, #35	; 0x23
 80152a6:	d806      	bhi.n	80152b6 <icmp_send_response+0x3a>
 80152a8:	4b26      	ldr	r3, [pc, #152]	; (8015344 <icmp_send_response+0xc8>)
 80152aa:	f240 1269 	movw	r2, #361	; 0x169
 80152ae:	4926      	ldr	r1, [pc, #152]	; (8015348 <icmp_send_response+0xcc>)
 80152b0:	4826      	ldr	r0, [pc, #152]	; (801534c <icmp_send_response+0xd0>)
 80152b2:	f001 fdd5 	bl	8016e60 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 80152b6:	687b      	ldr	r3, [r7, #4]
 80152b8:	685b      	ldr	r3, [r3, #4]
 80152ba:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 80152bc:	69fb      	ldr	r3, [r7, #28]
 80152be:	685b      	ldr	r3, [r3, #4]
 80152c0:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 80152c2:	697b      	ldr	r3, [r7, #20]
 80152c4:	78fa      	ldrb	r2, [r7, #3]
 80152c6:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 80152c8:	697b      	ldr	r3, [r7, #20]
 80152ca:	78ba      	ldrb	r2, [r7, #2]
 80152cc:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 80152ce:	697b      	ldr	r3, [r7, #20]
 80152d0:	2200      	movs	r2, #0
 80152d2:	711a      	strb	r2, [r3, #4]
 80152d4:	2200      	movs	r2, #0
 80152d6:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 80152d8:	697b      	ldr	r3, [r7, #20]
 80152da:	2200      	movs	r2, #0
 80152dc:	719a      	strb	r2, [r3, #6]
 80152de:	2200      	movs	r2, #0
 80152e0:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 80152e2:	69fb      	ldr	r3, [r7, #28]
 80152e4:	685b      	ldr	r3, [r3, #4]
 80152e6:	f103 0008 	add.w	r0, r3, #8
 80152ea:	687b      	ldr	r3, [r7, #4]
 80152ec:	685b      	ldr	r3, [r3, #4]
 80152ee:	221c      	movs	r2, #28
 80152f0:	4619      	mov	r1, r3
 80152f2:	f001 fd88 	bl	8016e06 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 80152f6:	69bb      	ldr	r3, [r7, #24]
 80152f8:	68db      	ldr	r3, [r3, #12]
 80152fa:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 80152fc:	f107 030c 	add.w	r3, r7, #12
 8015300:	4618      	mov	r0, r3
 8015302:	f000 f825 	bl	8015350 <ip4_route>
 8015306:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8015308:	693b      	ldr	r3, [r7, #16]
 801530a:	2b00      	cmp	r3, #0
 801530c:	d011      	beq.n	8015332 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801530e:	697b      	ldr	r3, [r7, #20]
 8015310:	2200      	movs	r2, #0
 8015312:	709a      	strb	r2, [r3, #2]
 8015314:	2200      	movs	r2, #0
 8015316:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8015318:	f107 020c 	add.w	r2, r7, #12
 801531c:	693b      	ldr	r3, [r7, #16]
 801531e:	9302      	str	r3, [sp, #8]
 8015320:	2301      	movs	r3, #1
 8015322:	9301      	str	r3, [sp, #4]
 8015324:	2300      	movs	r3, #0
 8015326:	9300      	str	r3, [sp, #0]
 8015328:	23ff      	movs	r3, #255	; 0xff
 801532a:	2100      	movs	r1, #0
 801532c:	69f8      	ldr	r0, [r7, #28]
 801532e:	f000 f9cb 	bl	80156c8 <ip4_output_if>
  }
  pbuf_free(q);
 8015332:	69f8      	ldr	r0, [r7, #28]
 8015334:	f7f7 fe6a 	bl	800d00c <pbuf_free>
 8015338:	e000      	b.n	801533c <icmp_send_response+0xc0>
    return;
 801533a:	bf00      	nop
}
 801533c:	3720      	adds	r7, #32
 801533e:	46bd      	mov	sp, r7
 8015340:	bd80      	pop	{r7, pc}
 8015342:	bf00      	nop
 8015344:	0801b58c 	.word	0x0801b58c
 8015348:	0801b658 	.word	0x0801b658
 801534c:	0801b5fc 	.word	0x0801b5fc

08015350 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8015350:	b480      	push	{r7}
 8015352:	b085      	sub	sp, #20
 8015354:	af00      	add	r7, sp, #0
 8015356:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8015358:	4b33      	ldr	r3, [pc, #204]	; (8015428 <ip4_route+0xd8>)
 801535a:	681b      	ldr	r3, [r3, #0]
 801535c:	60fb      	str	r3, [r7, #12]
 801535e:	e036      	b.n	80153ce <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8015360:	68fb      	ldr	r3, [r7, #12]
 8015362:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015366:	f003 0301 	and.w	r3, r3, #1
 801536a:	b2db      	uxtb	r3, r3
 801536c:	2b00      	cmp	r3, #0
 801536e:	d02b      	beq.n	80153c8 <ip4_route+0x78>
 8015370:	68fb      	ldr	r3, [r7, #12]
 8015372:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015376:	089b      	lsrs	r3, r3, #2
 8015378:	f003 0301 	and.w	r3, r3, #1
 801537c:	b2db      	uxtb	r3, r3
 801537e:	2b00      	cmp	r3, #0
 8015380:	d022      	beq.n	80153c8 <ip4_route+0x78>
 8015382:	68fb      	ldr	r3, [r7, #12]
 8015384:	3304      	adds	r3, #4
 8015386:	681b      	ldr	r3, [r3, #0]
 8015388:	2b00      	cmp	r3, #0
 801538a:	d01d      	beq.n	80153c8 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 801538c:	687b      	ldr	r3, [r7, #4]
 801538e:	681a      	ldr	r2, [r3, #0]
 8015390:	68fb      	ldr	r3, [r7, #12]
 8015392:	3304      	adds	r3, #4
 8015394:	681b      	ldr	r3, [r3, #0]
 8015396:	405a      	eors	r2, r3
 8015398:	68fb      	ldr	r3, [r7, #12]
 801539a:	3308      	adds	r3, #8
 801539c:	681b      	ldr	r3, [r3, #0]
 801539e:	4013      	ands	r3, r2
 80153a0:	2b00      	cmp	r3, #0
 80153a2:	d101      	bne.n	80153a8 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 80153a4:	68fb      	ldr	r3, [r7, #12]
 80153a6:	e038      	b.n	801541a <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 80153a8:	68fb      	ldr	r3, [r7, #12]
 80153aa:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80153ae:	f003 0302 	and.w	r3, r3, #2
 80153b2:	2b00      	cmp	r3, #0
 80153b4:	d108      	bne.n	80153c8 <ip4_route+0x78>
 80153b6:	687b      	ldr	r3, [r7, #4]
 80153b8:	681a      	ldr	r2, [r3, #0]
 80153ba:	68fb      	ldr	r3, [r7, #12]
 80153bc:	330c      	adds	r3, #12
 80153be:	681b      	ldr	r3, [r3, #0]
 80153c0:	429a      	cmp	r2, r3
 80153c2:	d101      	bne.n	80153c8 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 80153c4:	68fb      	ldr	r3, [r7, #12]
 80153c6:	e028      	b.n	801541a <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 80153c8:	68fb      	ldr	r3, [r7, #12]
 80153ca:	681b      	ldr	r3, [r3, #0]
 80153cc:	60fb      	str	r3, [r7, #12]
 80153ce:	68fb      	ldr	r3, [r7, #12]
 80153d0:	2b00      	cmp	r3, #0
 80153d2:	d1c5      	bne.n	8015360 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80153d4:	4b15      	ldr	r3, [pc, #84]	; (801542c <ip4_route+0xdc>)
 80153d6:	681b      	ldr	r3, [r3, #0]
 80153d8:	2b00      	cmp	r3, #0
 80153da:	d01a      	beq.n	8015412 <ip4_route+0xc2>
 80153dc:	4b13      	ldr	r3, [pc, #76]	; (801542c <ip4_route+0xdc>)
 80153de:	681b      	ldr	r3, [r3, #0]
 80153e0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80153e4:	f003 0301 	and.w	r3, r3, #1
 80153e8:	2b00      	cmp	r3, #0
 80153ea:	d012      	beq.n	8015412 <ip4_route+0xc2>
 80153ec:	4b0f      	ldr	r3, [pc, #60]	; (801542c <ip4_route+0xdc>)
 80153ee:	681b      	ldr	r3, [r3, #0]
 80153f0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80153f4:	f003 0304 	and.w	r3, r3, #4
 80153f8:	2b00      	cmp	r3, #0
 80153fa:	d00a      	beq.n	8015412 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80153fc:	4b0b      	ldr	r3, [pc, #44]	; (801542c <ip4_route+0xdc>)
 80153fe:	681b      	ldr	r3, [r3, #0]
 8015400:	3304      	adds	r3, #4
 8015402:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8015404:	2b00      	cmp	r3, #0
 8015406:	d004      	beq.n	8015412 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8015408:	687b      	ldr	r3, [r7, #4]
 801540a:	681b      	ldr	r3, [r3, #0]
 801540c:	b2db      	uxtb	r3, r3
 801540e:	2b7f      	cmp	r3, #127	; 0x7f
 8015410:	d101      	bne.n	8015416 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8015412:	2300      	movs	r3, #0
 8015414:	e001      	b.n	801541a <ip4_route+0xca>
  }

  return netif_default;
 8015416:	4b05      	ldr	r3, [pc, #20]	; (801542c <ip4_route+0xdc>)
 8015418:	681b      	ldr	r3, [r3, #0]
}
 801541a:	4618      	mov	r0, r3
 801541c:	3714      	adds	r7, #20
 801541e:	46bd      	mov	sp, r7
 8015420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015424:	4770      	bx	lr
 8015426:	bf00      	nop
 8015428:	2000d3ec 	.word	0x2000d3ec
 801542c:	2000d3f0 	.word	0x2000d3f0

08015430 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8015430:	b580      	push	{r7, lr}
 8015432:	b082      	sub	sp, #8
 8015434:	af00      	add	r7, sp, #0
 8015436:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8015438:	687b      	ldr	r3, [r7, #4]
 801543a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801543e:	f003 0301 	and.w	r3, r3, #1
 8015442:	b2db      	uxtb	r3, r3
 8015444:	2b00      	cmp	r3, #0
 8015446:	d016      	beq.n	8015476 <ip4_input_accept+0x46>
 8015448:	687b      	ldr	r3, [r7, #4]
 801544a:	3304      	adds	r3, #4
 801544c:	681b      	ldr	r3, [r3, #0]
 801544e:	2b00      	cmp	r3, #0
 8015450:	d011      	beq.n	8015476 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8015452:	4b0b      	ldr	r3, [pc, #44]	; (8015480 <ip4_input_accept+0x50>)
 8015454:	695a      	ldr	r2, [r3, #20]
 8015456:	687b      	ldr	r3, [r7, #4]
 8015458:	3304      	adds	r3, #4
 801545a:	681b      	ldr	r3, [r3, #0]
 801545c:	429a      	cmp	r2, r3
 801545e:	d008      	beq.n	8015472 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8015460:	4b07      	ldr	r3, [pc, #28]	; (8015480 <ip4_input_accept+0x50>)
 8015462:	695b      	ldr	r3, [r3, #20]
 8015464:	6879      	ldr	r1, [r7, #4]
 8015466:	4618      	mov	r0, r3
 8015468:	f000 fa06 	bl	8015878 <ip4_addr_isbroadcast_u32>
 801546c:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801546e:	2b00      	cmp	r3, #0
 8015470:	d001      	beq.n	8015476 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8015472:	2301      	movs	r3, #1
 8015474:	e000      	b.n	8015478 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8015476:	2300      	movs	r3, #0
}
 8015478:	4618      	mov	r0, r3
 801547a:	3708      	adds	r7, #8
 801547c:	46bd      	mov	sp, r7
 801547e:	bd80      	pop	{r7, pc}
 8015480:	20007b28 	.word	0x20007b28

08015484 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8015484:	b580      	push	{r7, lr}
 8015486:	b086      	sub	sp, #24
 8015488:	af00      	add	r7, sp, #0
 801548a:	6078      	str	r0, [r7, #4]
 801548c:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801548e:	687b      	ldr	r3, [r7, #4]
 8015490:	685b      	ldr	r3, [r3, #4]
 8015492:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8015494:	697b      	ldr	r3, [r7, #20]
 8015496:	781b      	ldrb	r3, [r3, #0]
 8015498:	091b      	lsrs	r3, r3, #4
 801549a:	b2db      	uxtb	r3, r3
 801549c:	2b04      	cmp	r3, #4
 801549e:	d004      	beq.n	80154aa <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 80154a0:	6878      	ldr	r0, [r7, #4]
 80154a2:	f7f7 fdb3 	bl	800d00c <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 80154a6:	2300      	movs	r3, #0
 80154a8:	e105      	b.n	80156b6 <ip4_input+0x232>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 80154aa:	697b      	ldr	r3, [r7, #20]
 80154ac:	781b      	ldrb	r3, [r3, #0]
 80154ae:	f003 030f 	and.w	r3, r3, #15
 80154b2:	b2db      	uxtb	r3, r3
 80154b4:	009b      	lsls	r3, r3, #2
 80154b6:	b2db      	uxtb	r3, r3
 80154b8:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 80154ba:	697b      	ldr	r3, [r7, #20]
 80154bc:	885b      	ldrh	r3, [r3, #2]
 80154be:	b29b      	uxth	r3, r3
 80154c0:	4618      	mov	r0, r3
 80154c2:	f7f6 f9c9 	bl	800b858 <lwip_htons>
 80154c6:	4603      	mov	r3, r0
 80154c8:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 80154ca:	687b      	ldr	r3, [r7, #4]
 80154cc:	891b      	ldrh	r3, [r3, #8]
 80154ce:	89ba      	ldrh	r2, [r7, #12]
 80154d0:	429a      	cmp	r2, r3
 80154d2:	d204      	bcs.n	80154de <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 80154d4:	89bb      	ldrh	r3, [r7, #12]
 80154d6:	4619      	mov	r1, r3
 80154d8:	6878      	ldr	r0, [r7, #4]
 80154da:	f7f7 fbdf 	bl	800cc9c <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 80154de:	687b      	ldr	r3, [r7, #4]
 80154e0:	895b      	ldrh	r3, [r3, #10]
 80154e2:	89fa      	ldrh	r2, [r7, #14]
 80154e4:	429a      	cmp	r2, r3
 80154e6:	d807      	bhi.n	80154f8 <ip4_input+0x74>
 80154e8:	687b      	ldr	r3, [r7, #4]
 80154ea:	891b      	ldrh	r3, [r3, #8]
 80154ec:	89ba      	ldrh	r2, [r7, #12]
 80154ee:	429a      	cmp	r2, r3
 80154f0:	d802      	bhi.n	80154f8 <ip4_input+0x74>
 80154f2:	89fb      	ldrh	r3, [r7, #14]
 80154f4:	2b13      	cmp	r3, #19
 80154f6:	d804      	bhi.n	8015502 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 80154f8:	6878      	ldr	r0, [r7, #4]
 80154fa:	f7f7 fd87 	bl	800d00c <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 80154fe:	2300      	movs	r3, #0
 8015500:	e0d9      	b.n	80156b6 <ip4_input+0x232>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8015502:	697b      	ldr	r3, [r7, #20]
 8015504:	691b      	ldr	r3, [r3, #16]
 8015506:	4a6e      	ldr	r2, [pc, #440]	; (80156c0 <ip4_input+0x23c>)
 8015508:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801550a:	697b      	ldr	r3, [r7, #20]
 801550c:	68db      	ldr	r3, [r3, #12]
 801550e:	4a6c      	ldr	r2, [pc, #432]	; (80156c0 <ip4_input+0x23c>)
 8015510:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8015512:	4b6b      	ldr	r3, [pc, #428]	; (80156c0 <ip4_input+0x23c>)
 8015514:	695b      	ldr	r3, [r3, #20]
 8015516:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801551a:	2be0      	cmp	r3, #224	; 0xe0
 801551c:	d112      	bne.n	8015544 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 801551e:	683b      	ldr	r3, [r7, #0]
 8015520:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015524:	f003 0301 	and.w	r3, r3, #1
 8015528:	b2db      	uxtb	r3, r3
 801552a:	2b00      	cmp	r3, #0
 801552c:	d007      	beq.n	801553e <ip4_input+0xba>
 801552e:	683b      	ldr	r3, [r7, #0]
 8015530:	3304      	adds	r3, #4
 8015532:	681b      	ldr	r3, [r3, #0]
 8015534:	2b00      	cmp	r3, #0
 8015536:	d002      	beq.n	801553e <ip4_input+0xba>
      netif = inp;
 8015538:	683b      	ldr	r3, [r7, #0]
 801553a:	613b      	str	r3, [r7, #16]
 801553c:	e02a      	b.n	8015594 <ip4_input+0x110>
    } else {
      netif = NULL;
 801553e:	2300      	movs	r3, #0
 8015540:	613b      	str	r3, [r7, #16]
 8015542:	e027      	b.n	8015594 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8015544:	6838      	ldr	r0, [r7, #0]
 8015546:	f7ff ff73 	bl	8015430 <ip4_input_accept>
 801554a:	4603      	mov	r3, r0
 801554c:	2b00      	cmp	r3, #0
 801554e:	d002      	beq.n	8015556 <ip4_input+0xd2>
      netif = inp;
 8015550:	683b      	ldr	r3, [r7, #0]
 8015552:	613b      	str	r3, [r7, #16]
 8015554:	e01e      	b.n	8015594 <ip4_input+0x110>
    } else {
      netif = NULL;
 8015556:	2300      	movs	r3, #0
 8015558:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 801555a:	4b59      	ldr	r3, [pc, #356]	; (80156c0 <ip4_input+0x23c>)
 801555c:	695b      	ldr	r3, [r3, #20]
 801555e:	b2db      	uxtb	r3, r3
 8015560:	2b7f      	cmp	r3, #127	; 0x7f
 8015562:	d017      	beq.n	8015594 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8015564:	4b57      	ldr	r3, [pc, #348]	; (80156c4 <ip4_input+0x240>)
 8015566:	681b      	ldr	r3, [r3, #0]
 8015568:	613b      	str	r3, [r7, #16]
 801556a:	e00e      	b.n	801558a <ip4_input+0x106>
          if (netif == inp) {
 801556c:	693a      	ldr	r2, [r7, #16]
 801556e:	683b      	ldr	r3, [r7, #0]
 8015570:	429a      	cmp	r2, r3
 8015572:	d006      	beq.n	8015582 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8015574:	6938      	ldr	r0, [r7, #16]
 8015576:	f7ff ff5b 	bl	8015430 <ip4_input_accept>
 801557a:	4603      	mov	r3, r0
 801557c:	2b00      	cmp	r3, #0
 801557e:	d108      	bne.n	8015592 <ip4_input+0x10e>
 8015580:	e000      	b.n	8015584 <ip4_input+0x100>
            continue;
 8015582:	bf00      	nop
        NETIF_FOREACH(netif) {
 8015584:	693b      	ldr	r3, [r7, #16]
 8015586:	681b      	ldr	r3, [r3, #0]
 8015588:	613b      	str	r3, [r7, #16]
 801558a:	693b      	ldr	r3, [r7, #16]
 801558c:	2b00      	cmp	r3, #0
 801558e:	d1ed      	bne.n	801556c <ip4_input+0xe8>
 8015590:	e000      	b.n	8015594 <ip4_input+0x110>
            break;
 8015592:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8015594:	4b4a      	ldr	r3, [pc, #296]	; (80156c0 <ip4_input+0x23c>)
 8015596:	691b      	ldr	r3, [r3, #16]
 8015598:	6839      	ldr	r1, [r7, #0]
 801559a:	4618      	mov	r0, r3
 801559c:	f000 f96c 	bl	8015878 <ip4_addr_isbroadcast_u32>
 80155a0:	4603      	mov	r3, r0
 80155a2:	2b00      	cmp	r3, #0
 80155a4:	d105      	bne.n	80155b2 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 80155a6:	4b46      	ldr	r3, [pc, #280]	; (80156c0 <ip4_input+0x23c>)
 80155a8:	691b      	ldr	r3, [r3, #16]
 80155aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80155ae:	2be0      	cmp	r3, #224	; 0xe0
 80155b0:	d104      	bne.n	80155bc <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 80155b2:	6878      	ldr	r0, [r7, #4]
 80155b4:	f7f7 fd2a 	bl	800d00c <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 80155b8:	2300      	movs	r3, #0
 80155ba:	e07c      	b.n	80156b6 <ip4_input+0x232>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 80155bc:	693b      	ldr	r3, [r7, #16]
 80155be:	2b00      	cmp	r3, #0
 80155c0:	d104      	bne.n	80155cc <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 80155c2:	6878      	ldr	r0, [r7, #4]
 80155c4:	f7f7 fd22 	bl	800d00c <pbuf_free>
    return ERR_OK;
 80155c8:	2300      	movs	r3, #0
 80155ca:	e074      	b.n	80156b6 <ip4_input+0x232>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 80155cc:	697b      	ldr	r3, [r7, #20]
 80155ce:	88db      	ldrh	r3, [r3, #6]
 80155d0:	b29b      	uxth	r3, r3
 80155d2:	461a      	mov	r2, r3
 80155d4:	f64f 733f 	movw	r3, #65343	; 0xff3f
 80155d8:	4013      	ands	r3, r2
 80155da:	2b00      	cmp	r3, #0
 80155dc:	d00b      	beq.n	80155f6 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 80155de:	6878      	ldr	r0, [r7, #4]
 80155e0:	f000 fdd6 	bl	8016190 <ip4_reass>
 80155e4:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 80155e6:	687b      	ldr	r3, [r7, #4]
 80155e8:	2b00      	cmp	r3, #0
 80155ea:	d101      	bne.n	80155f0 <ip4_input+0x16c>
      return ERR_OK;
 80155ec:	2300      	movs	r3, #0
 80155ee:	e062      	b.n	80156b6 <ip4_input+0x232>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 80155f0:	687b      	ldr	r3, [r7, #4]
 80155f2:	685b      	ldr	r3, [r3, #4]
 80155f4:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 80155f6:	4a32      	ldr	r2, [pc, #200]	; (80156c0 <ip4_input+0x23c>)
 80155f8:	693b      	ldr	r3, [r7, #16]
 80155fa:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 80155fc:	4a30      	ldr	r2, [pc, #192]	; (80156c0 <ip4_input+0x23c>)
 80155fe:	683b      	ldr	r3, [r7, #0]
 8015600:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8015602:	4a2f      	ldr	r2, [pc, #188]	; (80156c0 <ip4_input+0x23c>)
 8015604:	697b      	ldr	r3, [r7, #20]
 8015606:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8015608:	697b      	ldr	r3, [r7, #20]
 801560a:	781b      	ldrb	r3, [r3, #0]
 801560c:	f003 030f 	and.w	r3, r3, #15
 8015610:	b2db      	uxtb	r3, r3
 8015612:	009b      	lsls	r3, r3, #2
 8015614:	b2db      	uxtb	r3, r3
 8015616:	b29a      	uxth	r2, r3
 8015618:	4b29      	ldr	r3, [pc, #164]	; (80156c0 <ip4_input+0x23c>)
 801561a:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 801561c:	89fb      	ldrh	r3, [r7, #14]
 801561e:	4619      	mov	r1, r3
 8015620:	6878      	ldr	r0, [r7, #4]
 8015622:	f7f7 fc3b 	bl	800ce9c <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8015626:	697b      	ldr	r3, [r7, #20]
 8015628:	7a5b      	ldrb	r3, [r3, #9]
 801562a:	2b06      	cmp	r3, #6
 801562c:	d009      	beq.n	8015642 <ip4_input+0x1be>
 801562e:	2b11      	cmp	r3, #17
 8015630:	d002      	beq.n	8015638 <ip4_input+0x1b4>
 8015632:	2b01      	cmp	r3, #1
 8015634:	d00a      	beq.n	801564c <ip4_input+0x1c8>
 8015636:	e00e      	b.n	8015656 <ip4_input+0x1d2>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8015638:	6839      	ldr	r1, [r7, #0]
 801563a:	6878      	ldr	r0, [r7, #4]
 801563c:	f7fe f972 	bl	8013924 <udp_input>
        break;
 8015640:	e026      	b.n	8015690 <ip4_input+0x20c>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8015642:	6839      	ldr	r1, [r7, #0]
 8015644:	6878      	ldr	r0, [r7, #4]
 8015646:	f7f9 fd1f 	bl	800f088 <tcp_input>
        break;
 801564a:	e021      	b.n	8015690 <ip4_input+0x20c>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 801564c:	6839      	ldr	r1, [r7, #0]
 801564e:	6878      	ldr	r0, [r7, #4]
 8015650:	f7ff fcf0 	bl	8015034 <icmp_input>
        break;
 8015654:	e01c      	b.n	8015690 <ip4_input+0x20c>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8015656:	4b1a      	ldr	r3, [pc, #104]	; (80156c0 <ip4_input+0x23c>)
 8015658:	695b      	ldr	r3, [r3, #20]
 801565a:	6939      	ldr	r1, [r7, #16]
 801565c:	4618      	mov	r0, r3
 801565e:	f000 f90b 	bl	8015878 <ip4_addr_isbroadcast_u32>
 8015662:	4603      	mov	r3, r0
 8015664:	2b00      	cmp	r3, #0
 8015666:	d10f      	bne.n	8015688 <ip4_input+0x204>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8015668:	4b15      	ldr	r3, [pc, #84]	; (80156c0 <ip4_input+0x23c>)
 801566a:	695b      	ldr	r3, [r3, #20]
 801566c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8015670:	2be0      	cmp	r3, #224	; 0xe0
 8015672:	d009      	beq.n	8015688 <ip4_input+0x204>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8015674:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8015678:	4619      	mov	r1, r3
 801567a:	6878      	ldr	r0, [r7, #4]
 801567c:	f7f7 fc81 	bl	800cf82 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8015680:	2102      	movs	r1, #2
 8015682:	6878      	ldr	r0, [r7, #4]
 8015684:	f7ff fdda 	bl	801523c <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8015688:	6878      	ldr	r0, [r7, #4]
 801568a:	f7f7 fcbf 	bl	800d00c <pbuf_free>
        break;
 801568e:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8015690:	4b0b      	ldr	r3, [pc, #44]	; (80156c0 <ip4_input+0x23c>)
 8015692:	2200      	movs	r2, #0
 8015694:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8015696:	4b0a      	ldr	r3, [pc, #40]	; (80156c0 <ip4_input+0x23c>)
 8015698:	2200      	movs	r2, #0
 801569a:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 801569c:	4b08      	ldr	r3, [pc, #32]	; (80156c0 <ip4_input+0x23c>)
 801569e:	2200      	movs	r2, #0
 80156a0:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 80156a2:	4b07      	ldr	r3, [pc, #28]	; (80156c0 <ip4_input+0x23c>)
 80156a4:	2200      	movs	r2, #0
 80156a6:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 80156a8:	4b05      	ldr	r3, [pc, #20]	; (80156c0 <ip4_input+0x23c>)
 80156aa:	2200      	movs	r2, #0
 80156ac:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 80156ae:	4b04      	ldr	r3, [pc, #16]	; (80156c0 <ip4_input+0x23c>)
 80156b0:	2200      	movs	r2, #0
 80156b2:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 80156b4:	2300      	movs	r3, #0
}
 80156b6:	4618      	mov	r0, r3
 80156b8:	3718      	adds	r7, #24
 80156ba:	46bd      	mov	sp, r7
 80156bc:	bd80      	pop	{r7, pc}
 80156be:	bf00      	nop
 80156c0:	20007b28 	.word	0x20007b28
 80156c4:	2000d3ec 	.word	0x2000d3ec

080156c8 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 80156c8:	b580      	push	{r7, lr}
 80156ca:	b08a      	sub	sp, #40	; 0x28
 80156cc:	af04      	add	r7, sp, #16
 80156ce:	60f8      	str	r0, [r7, #12]
 80156d0:	60b9      	str	r1, [r7, #8]
 80156d2:	607a      	str	r2, [r7, #4]
 80156d4:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 80156d6:	68bb      	ldr	r3, [r7, #8]
 80156d8:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 80156da:	687b      	ldr	r3, [r7, #4]
 80156dc:	2b00      	cmp	r3, #0
 80156de:	d009      	beq.n	80156f4 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 80156e0:	68bb      	ldr	r3, [r7, #8]
 80156e2:	2b00      	cmp	r3, #0
 80156e4:	d003      	beq.n	80156ee <ip4_output_if+0x26>
 80156e6:	68bb      	ldr	r3, [r7, #8]
 80156e8:	681b      	ldr	r3, [r3, #0]
 80156ea:	2b00      	cmp	r3, #0
 80156ec:	d102      	bne.n	80156f4 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 80156ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80156f0:	3304      	adds	r3, #4
 80156f2:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 80156f4:	78fa      	ldrb	r2, [r7, #3]
 80156f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80156f8:	9302      	str	r3, [sp, #8]
 80156fa:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80156fe:	9301      	str	r3, [sp, #4]
 8015700:	f897 3020 	ldrb.w	r3, [r7, #32]
 8015704:	9300      	str	r3, [sp, #0]
 8015706:	4613      	mov	r3, r2
 8015708:	687a      	ldr	r2, [r7, #4]
 801570a:	6979      	ldr	r1, [r7, #20]
 801570c:	68f8      	ldr	r0, [r7, #12]
 801570e:	f000 f805 	bl	801571c <ip4_output_if_src>
 8015712:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8015714:	4618      	mov	r0, r3
 8015716:	3718      	adds	r7, #24
 8015718:	46bd      	mov	sp, r7
 801571a:	bd80      	pop	{r7, pc}

0801571c <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 801571c:	b580      	push	{r7, lr}
 801571e:	b088      	sub	sp, #32
 8015720:	af00      	add	r7, sp, #0
 8015722:	60f8      	str	r0, [r7, #12]
 8015724:	60b9      	str	r1, [r7, #8]
 8015726:	607a      	str	r2, [r7, #4]
 8015728:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801572a:	68fb      	ldr	r3, [r7, #12]
 801572c:	7b9b      	ldrb	r3, [r3, #14]
 801572e:	2b01      	cmp	r3, #1
 8015730:	d006      	beq.n	8015740 <ip4_output_if_src+0x24>
 8015732:	4b4b      	ldr	r3, [pc, #300]	; (8015860 <ip4_output_if_src+0x144>)
 8015734:	f44f 7255 	mov.w	r2, #852	; 0x354
 8015738:	494a      	ldr	r1, [pc, #296]	; (8015864 <ip4_output_if_src+0x148>)
 801573a:	484b      	ldr	r0, [pc, #300]	; (8015868 <ip4_output_if_src+0x14c>)
 801573c:	f001 fb90 	bl	8016e60 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8015740:	687b      	ldr	r3, [r7, #4]
 8015742:	2b00      	cmp	r3, #0
 8015744:	d060      	beq.n	8015808 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8015746:	2314      	movs	r3, #20
 8015748:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 801574a:	2114      	movs	r1, #20
 801574c:	68f8      	ldr	r0, [r7, #12]
 801574e:	f7f7 fb95 	bl	800ce7c <pbuf_add_header>
 8015752:	4603      	mov	r3, r0
 8015754:	2b00      	cmp	r3, #0
 8015756:	d002      	beq.n	801575e <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8015758:	f06f 0301 	mvn.w	r3, #1
 801575c:	e07c      	b.n	8015858 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801575e:	68fb      	ldr	r3, [r7, #12]
 8015760:	685b      	ldr	r3, [r3, #4]
 8015762:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8015764:	68fb      	ldr	r3, [r7, #12]
 8015766:	895b      	ldrh	r3, [r3, #10]
 8015768:	2b13      	cmp	r3, #19
 801576a:	d806      	bhi.n	801577a <ip4_output_if_src+0x5e>
 801576c:	4b3c      	ldr	r3, [pc, #240]	; (8015860 <ip4_output_if_src+0x144>)
 801576e:	f240 3289 	movw	r2, #905	; 0x389
 8015772:	493e      	ldr	r1, [pc, #248]	; (801586c <ip4_output_if_src+0x150>)
 8015774:	483c      	ldr	r0, [pc, #240]	; (8015868 <ip4_output_if_src+0x14c>)
 8015776:	f001 fb73 	bl	8016e60 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801577a:	69fb      	ldr	r3, [r7, #28]
 801577c:	78fa      	ldrb	r2, [r7, #3]
 801577e:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8015780:	69fb      	ldr	r3, [r7, #28]
 8015782:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8015786:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8015788:	687b      	ldr	r3, [r7, #4]
 801578a:	681a      	ldr	r2, [r3, #0]
 801578c:	69fb      	ldr	r3, [r7, #28]
 801578e:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8015790:	8b7b      	ldrh	r3, [r7, #26]
 8015792:	089b      	lsrs	r3, r3, #2
 8015794:	b29b      	uxth	r3, r3
 8015796:	b2db      	uxtb	r3, r3
 8015798:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801579c:	b2da      	uxtb	r2, r3
 801579e:	69fb      	ldr	r3, [r7, #28]
 80157a0:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 80157a2:	69fb      	ldr	r3, [r7, #28]
 80157a4:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80157a8:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 80157aa:	68fb      	ldr	r3, [r7, #12]
 80157ac:	891b      	ldrh	r3, [r3, #8]
 80157ae:	4618      	mov	r0, r3
 80157b0:	f7f6 f852 	bl	800b858 <lwip_htons>
 80157b4:	4603      	mov	r3, r0
 80157b6:	461a      	mov	r2, r3
 80157b8:	69fb      	ldr	r3, [r7, #28]
 80157ba:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 80157bc:	69fb      	ldr	r3, [r7, #28]
 80157be:	2200      	movs	r2, #0
 80157c0:	719a      	strb	r2, [r3, #6]
 80157c2:	2200      	movs	r2, #0
 80157c4:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 80157c6:	4b2a      	ldr	r3, [pc, #168]	; (8015870 <ip4_output_if_src+0x154>)
 80157c8:	881b      	ldrh	r3, [r3, #0]
 80157ca:	4618      	mov	r0, r3
 80157cc:	f7f6 f844 	bl	800b858 <lwip_htons>
 80157d0:	4603      	mov	r3, r0
 80157d2:	461a      	mov	r2, r3
 80157d4:	69fb      	ldr	r3, [r7, #28]
 80157d6:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 80157d8:	4b25      	ldr	r3, [pc, #148]	; (8015870 <ip4_output_if_src+0x154>)
 80157da:	881b      	ldrh	r3, [r3, #0]
 80157dc:	3301      	adds	r3, #1
 80157de:	b29a      	uxth	r2, r3
 80157e0:	4b23      	ldr	r3, [pc, #140]	; (8015870 <ip4_output_if_src+0x154>)
 80157e2:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 80157e4:	68bb      	ldr	r3, [r7, #8]
 80157e6:	2b00      	cmp	r3, #0
 80157e8:	d104      	bne.n	80157f4 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 80157ea:	4b22      	ldr	r3, [pc, #136]	; (8015874 <ip4_output_if_src+0x158>)
 80157ec:	681a      	ldr	r2, [r3, #0]
 80157ee:	69fb      	ldr	r3, [r7, #28]
 80157f0:	60da      	str	r2, [r3, #12]
 80157f2:	e003      	b.n	80157fc <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 80157f4:	68bb      	ldr	r3, [r7, #8]
 80157f6:	681a      	ldr	r2, [r3, #0]
 80157f8:	69fb      	ldr	r3, [r7, #28]
 80157fa:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 80157fc:	69fb      	ldr	r3, [r7, #28]
 80157fe:	2200      	movs	r2, #0
 8015800:	729a      	strb	r2, [r3, #10]
 8015802:	2200      	movs	r2, #0
 8015804:	72da      	strb	r2, [r3, #11]
 8015806:	e00f      	b.n	8015828 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8015808:	68fb      	ldr	r3, [r7, #12]
 801580a:	895b      	ldrh	r3, [r3, #10]
 801580c:	2b13      	cmp	r3, #19
 801580e:	d802      	bhi.n	8015816 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8015810:	f06f 0301 	mvn.w	r3, #1
 8015814:	e020      	b.n	8015858 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8015816:	68fb      	ldr	r3, [r7, #12]
 8015818:	685b      	ldr	r3, [r3, #4]
 801581a:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 801581c:	69fb      	ldr	r3, [r7, #28]
 801581e:	691b      	ldr	r3, [r3, #16]
 8015820:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8015822:	f107 0314 	add.w	r3, r7, #20
 8015826:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8015828:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801582a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801582c:	2b00      	cmp	r3, #0
 801582e:	d00c      	beq.n	801584a <ip4_output_if_src+0x12e>
 8015830:	68fb      	ldr	r3, [r7, #12]
 8015832:	891a      	ldrh	r2, [r3, #8]
 8015834:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015836:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8015838:	429a      	cmp	r2, r3
 801583a:	d906      	bls.n	801584a <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 801583c:	687a      	ldr	r2, [r7, #4]
 801583e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8015840:	68f8      	ldr	r0, [r7, #12]
 8015842:	f000 fe91 	bl	8016568 <ip4_frag>
 8015846:	4603      	mov	r3, r0
 8015848:	e006      	b.n	8015858 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801584a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801584c:	695b      	ldr	r3, [r3, #20]
 801584e:	687a      	ldr	r2, [r7, #4]
 8015850:	68f9      	ldr	r1, [r7, #12]
 8015852:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015854:	4798      	blx	r3
 8015856:	4603      	mov	r3, r0
}
 8015858:	4618      	mov	r0, r3
 801585a:	3720      	adds	r7, #32
 801585c:	46bd      	mov	sp, r7
 801585e:	bd80      	pop	{r7, pc}
 8015860:	0801b684 	.word	0x0801b684
 8015864:	0801b6b8 	.word	0x0801b6b8
 8015868:	0801b6c4 	.word	0x0801b6c4
 801586c:	0801b6ec 	.word	0x0801b6ec
 8015870:	200048f6 	.word	0x200048f6
 8015874:	0801bbb8 	.word	0x0801bbb8

08015878 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8015878:	b480      	push	{r7}
 801587a:	b085      	sub	sp, #20
 801587c:	af00      	add	r7, sp, #0
 801587e:	6078      	str	r0, [r7, #4]
 8015880:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8015882:	687b      	ldr	r3, [r7, #4]
 8015884:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8015886:	687b      	ldr	r3, [r7, #4]
 8015888:	f1b3 3fff 	cmp.w	r3, #4294967295
 801588c:	d002      	beq.n	8015894 <ip4_addr_isbroadcast_u32+0x1c>
 801588e:	687b      	ldr	r3, [r7, #4]
 8015890:	2b00      	cmp	r3, #0
 8015892:	d101      	bne.n	8015898 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8015894:	2301      	movs	r3, #1
 8015896:	e02a      	b.n	80158ee <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8015898:	683b      	ldr	r3, [r7, #0]
 801589a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801589e:	f003 0302 	and.w	r3, r3, #2
 80158a2:	2b00      	cmp	r3, #0
 80158a4:	d101      	bne.n	80158aa <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 80158a6:	2300      	movs	r3, #0
 80158a8:	e021      	b.n	80158ee <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 80158aa:	683b      	ldr	r3, [r7, #0]
 80158ac:	3304      	adds	r3, #4
 80158ae:	681b      	ldr	r3, [r3, #0]
 80158b0:	687a      	ldr	r2, [r7, #4]
 80158b2:	429a      	cmp	r2, r3
 80158b4:	d101      	bne.n	80158ba <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 80158b6:	2300      	movs	r3, #0
 80158b8:	e019      	b.n	80158ee <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 80158ba:	68fa      	ldr	r2, [r7, #12]
 80158bc:	683b      	ldr	r3, [r7, #0]
 80158be:	3304      	adds	r3, #4
 80158c0:	681b      	ldr	r3, [r3, #0]
 80158c2:	405a      	eors	r2, r3
 80158c4:	683b      	ldr	r3, [r7, #0]
 80158c6:	3308      	adds	r3, #8
 80158c8:	681b      	ldr	r3, [r3, #0]
 80158ca:	4013      	ands	r3, r2
 80158cc:	2b00      	cmp	r3, #0
 80158ce:	d10d      	bne.n	80158ec <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80158d0:	683b      	ldr	r3, [r7, #0]
 80158d2:	3308      	adds	r3, #8
 80158d4:	681b      	ldr	r3, [r3, #0]
 80158d6:	43da      	mvns	r2, r3
 80158d8:	687b      	ldr	r3, [r7, #4]
 80158da:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 80158dc:	683b      	ldr	r3, [r7, #0]
 80158de:	3308      	adds	r3, #8
 80158e0:	681b      	ldr	r3, [r3, #0]
 80158e2:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80158e4:	429a      	cmp	r2, r3
 80158e6:	d101      	bne.n	80158ec <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 80158e8:	2301      	movs	r3, #1
 80158ea:	e000      	b.n	80158ee <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 80158ec:	2300      	movs	r3, #0
  }
}
 80158ee:	4618      	mov	r0, r3
 80158f0:	3714      	adds	r7, #20
 80158f2:	46bd      	mov	sp, r7
 80158f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158f8:	4770      	bx	lr

080158fa <ipaddr_addr>:
 * @param cp IP address in ascii representation (e.g. "127.0.0.1")
 * @return ip address in network order
 */
u32_t
ipaddr_addr(const char *cp)
{
 80158fa:	b580      	push	{r7, lr}
 80158fc:	b084      	sub	sp, #16
 80158fe:	af00      	add	r7, sp, #0
 8015900:	6078      	str	r0, [r7, #4]
  ip4_addr_t val;

  if (ip4addr_aton(cp, &val)) {
 8015902:	f107 030c 	add.w	r3, r7, #12
 8015906:	4619      	mov	r1, r3
 8015908:	6878      	ldr	r0, [r7, #4]
 801590a:	f000 f80b 	bl	8015924 <ip4addr_aton>
 801590e:	4603      	mov	r3, r0
 8015910:	2b00      	cmp	r3, #0
 8015912:	d001      	beq.n	8015918 <ipaddr_addr+0x1e>
    return ip4_addr_get_u32(&val);
 8015914:	68fb      	ldr	r3, [r7, #12]
 8015916:	e001      	b.n	801591c <ipaddr_addr+0x22>
  }
  return (IPADDR_NONE);
 8015918:	f04f 33ff 	mov.w	r3, #4294967295
}
 801591c:	4618      	mov	r0, r3
 801591e:	3710      	adds	r7, #16
 8015920:	46bd      	mov	sp, r7
 8015922:	bd80      	pop	{r7, pc}

08015924 <ip4addr_aton>:
 * @param addr pointer to which to save the ip address in network order
 * @return 1 if cp could be converted to addr, 0 on failure
 */
int
ip4addr_aton(const char *cp, ip4_addr_t *addr)
{
 8015924:	b5b0      	push	{r4, r5, r7, lr}
 8015926:	b08a      	sub	sp, #40	; 0x28
 8015928:	af00      	add	r7, sp, #0
 801592a:	6078      	str	r0, [r7, #4]
 801592c:	6039      	str	r1, [r7, #0]
  u32_t val;
  u8_t base;
  char c;
  u32_t parts[4];
  u32_t *pp = parts;
 801592e:	f107 030c 	add.w	r3, r7, #12
 8015932:	61fb      	str	r3, [r7, #28]

  c = *cp;
 8015934:	687b      	ldr	r3, [r7, #4]
 8015936:	781b      	ldrb	r3, [r3, #0]
 8015938:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    /*
     * Collect number up to ``.''.
     * Values are specified as for C:
     * 0x=hex, 0=octal, 1-9=decimal.
     */
    if (!lwip_isdigit(c)) {
 801593c:	f001 fa34 	bl	8016da8 <__locale_ctype_ptr>
 8015940:	4602      	mov	r2, r0
 8015942:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8015946:	3301      	adds	r3, #1
 8015948:	4413      	add	r3, r2
 801594a:	781b      	ldrb	r3, [r3, #0]
 801594c:	f003 0304 	and.w	r3, r3, #4
 8015950:	2b00      	cmp	r3, #0
 8015952:	d101      	bne.n	8015958 <ip4addr_aton+0x34>
      return 0;
 8015954:	2300      	movs	r3, #0
 8015956:	e10d      	b.n	8015b74 <ip4addr_aton+0x250>
    }
    val = 0;
 8015958:	2300      	movs	r3, #0
 801595a:	627b      	str	r3, [r7, #36]	; 0x24
    base = 10;
 801595c:	230a      	movs	r3, #10
 801595e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if (c == '0') {
 8015962:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8015966:	2b30      	cmp	r3, #48	; 0x30
 8015968:	d11c      	bne.n	80159a4 <ip4addr_aton+0x80>
      c = *++cp;
 801596a:	687b      	ldr	r3, [r7, #4]
 801596c:	3301      	adds	r3, #1
 801596e:	607b      	str	r3, [r7, #4]
 8015970:	687b      	ldr	r3, [r7, #4]
 8015972:	781b      	ldrb	r3, [r3, #0]
 8015974:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
      if (c == 'x' || c == 'X') {
 8015978:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801597c:	2b78      	cmp	r3, #120	; 0x78
 801597e:	d003      	beq.n	8015988 <ip4addr_aton+0x64>
 8015980:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8015984:	2b58      	cmp	r3, #88	; 0x58
 8015986:	d10a      	bne.n	801599e <ip4addr_aton+0x7a>
        base = 16;
 8015988:	2310      	movs	r3, #16
 801598a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        c = *++cp;
 801598e:	687b      	ldr	r3, [r7, #4]
 8015990:	3301      	adds	r3, #1
 8015992:	607b      	str	r3, [r7, #4]
 8015994:	687b      	ldr	r3, [r7, #4]
 8015996:	781b      	ldrb	r3, [r3, #0]
 8015998:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 801599c:	e002      	b.n	80159a4 <ip4addr_aton+0x80>
      } else {
        base = 8;
 801599e:	2308      	movs	r3, #8
 80159a0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
      }
    }
    for (;;) {
      if (lwip_isdigit(c)) {
 80159a4:	f001 fa00 	bl	8016da8 <__locale_ctype_ptr>
 80159a8:	4602      	mov	r2, r0
 80159aa:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80159ae:	3301      	adds	r3, #1
 80159b0:	4413      	add	r3, r2
 80159b2:	781b      	ldrb	r3, [r3, #0]
 80159b4:	f003 0304 	and.w	r3, r3, #4
 80159b8:	2b00      	cmp	r3, #0
 80159ba:	d011      	beq.n	80159e0 <ip4addr_aton+0xbc>
        val = (val * base) + (u32_t)(c - '0');
 80159bc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80159c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80159c2:	fb02 f203 	mul.w	r2, r2, r3
 80159c6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80159ca:	4413      	add	r3, r2
 80159cc:	3b30      	subs	r3, #48	; 0x30
 80159ce:	627b      	str	r3, [r7, #36]	; 0x24
        c = *++cp;
 80159d0:	687b      	ldr	r3, [r7, #4]
 80159d2:	3301      	adds	r3, #1
 80159d4:	607b      	str	r3, [r7, #4]
 80159d6:	687b      	ldr	r3, [r7, #4]
 80159d8:	781b      	ldrb	r3, [r3, #0]
 80159da:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80159de:	e7e1      	b.n	80159a4 <ip4addr_aton+0x80>
      } else if (base == 16 && lwip_isxdigit(c)) {
 80159e0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80159e4:	2b10      	cmp	r3, #16
 80159e6:	d12b      	bne.n	8015a40 <ip4addr_aton+0x11c>
 80159e8:	f001 f9de 	bl	8016da8 <__locale_ctype_ptr>
 80159ec:	4602      	mov	r2, r0
 80159ee:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80159f2:	3301      	adds	r3, #1
 80159f4:	4413      	add	r3, r2
 80159f6:	781b      	ldrb	r3, [r3, #0]
 80159f8:	f003 0344 	and.w	r3, r3, #68	; 0x44
 80159fc:	2b00      	cmp	r3, #0
 80159fe:	d01f      	beq.n	8015a40 <ip4addr_aton+0x11c>
        val = (val << 4) | (u32_t)(c + 10 - (lwip_islower(c) ? 'a' : 'A'));
 8015a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015a02:	011c      	lsls	r4, r3, #4
 8015a04:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8015a08:	f103 050a 	add.w	r5, r3, #10
 8015a0c:	f001 f9cc 	bl	8016da8 <__locale_ctype_ptr>
 8015a10:	4602      	mov	r2, r0
 8015a12:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8015a16:	3301      	adds	r3, #1
 8015a18:	4413      	add	r3, r2
 8015a1a:	781b      	ldrb	r3, [r3, #0]
 8015a1c:	f003 0303 	and.w	r3, r3, #3
 8015a20:	2b02      	cmp	r3, #2
 8015a22:	d101      	bne.n	8015a28 <ip4addr_aton+0x104>
 8015a24:	2361      	movs	r3, #97	; 0x61
 8015a26:	e000      	b.n	8015a2a <ip4addr_aton+0x106>
 8015a28:	2341      	movs	r3, #65	; 0x41
 8015a2a:	1aeb      	subs	r3, r5, r3
 8015a2c:	4323      	orrs	r3, r4
 8015a2e:	627b      	str	r3, [r7, #36]	; 0x24
        c = *++cp;
 8015a30:	687b      	ldr	r3, [r7, #4]
 8015a32:	3301      	adds	r3, #1
 8015a34:	607b      	str	r3, [r7, #4]
 8015a36:	687b      	ldr	r3, [r7, #4]
 8015a38:	781b      	ldrb	r3, [r3, #0]
 8015a3a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
      if (lwip_isdigit(c)) {
 8015a3e:	e7b1      	b.n	80159a4 <ip4addr_aton+0x80>
      } else {
        break;
      }
    }
    if (c == '.') {
 8015a40:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8015a44:	2b2e      	cmp	r3, #46	; 0x2e
 8015a46:	d114      	bne.n	8015a72 <ip4addr_aton+0x14e>
       * Internet format:
       *  a.b.c.d
       *  a.b.c   (with c treated as 16 bits)
       *  a.b (with b treated as 24 bits)
       */
      if (pp >= parts + 3) {
 8015a48:	f107 030c 	add.w	r3, r7, #12
 8015a4c:	330c      	adds	r3, #12
 8015a4e:	69fa      	ldr	r2, [r7, #28]
 8015a50:	429a      	cmp	r2, r3
 8015a52:	d301      	bcc.n	8015a58 <ip4addr_aton+0x134>
        return 0;
 8015a54:	2300      	movs	r3, #0
 8015a56:	e08d      	b.n	8015b74 <ip4addr_aton+0x250>
      }
      *pp++ = val;
 8015a58:	69fb      	ldr	r3, [r7, #28]
 8015a5a:	1d1a      	adds	r2, r3, #4
 8015a5c:	61fa      	str	r2, [r7, #28]
 8015a5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015a60:	601a      	str	r2, [r3, #0]
      c = *++cp;
 8015a62:	687b      	ldr	r3, [r7, #4]
 8015a64:	3301      	adds	r3, #1
 8015a66:	607b      	str	r3, [r7, #4]
 8015a68:	687b      	ldr	r3, [r7, #4]
 8015a6a:	781b      	ldrb	r3, [r3, #0]
 8015a6c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    if (!lwip_isdigit(c)) {
 8015a70:	e764      	b.n	801593c <ip4addr_aton+0x18>
    } else {
      break;
 8015a72:	bf00      	nop
    }
  }
  /*
   * Check for trailing characters.
   */
  if (c != '\0' && !lwip_isspace(c)) {
 8015a74:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8015a78:	2b00      	cmp	r3, #0
 8015a7a:	d00d      	beq.n	8015a98 <ip4addr_aton+0x174>
 8015a7c:	f001 f994 	bl	8016da8 <__locale_ctype_ptr>
 8015a80:	4602      	mov	r2, r0
 8015a82:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8015a86:	3301      	adds	r3, #1
 8015a88:	4413      	add	r3, r2
 8015a8a:	781b      	ldrb	r3, [r3, #0]
 8015a8c:	f003 0308 	and.w	r3, r3, #8
 8015a90:	2b00      	cmp	r3, #0
 8015a92:	d101      	bne.n	8015a98 <ip4addr_aton+0x174>
    return 0;
 8015a94:	2300      	movs	r3, #0
 8015a96:	e06d      	b.n	8015b74 <ip4addr_aton+0x250>
  }
  /*
   * Concoct the address according to
   * the number of parts specified.
   */
  switch (pp - parts + 1) {
 8015a98:	69fa      	ldr	r2, [r7, #28]
 8015a9a:	f107 030c 	add.w	r3, r7, #12
 8015a9e:	1ad3      	subs	r3, r2, r3
 8015aa0:	109b      	asrs	r3, r3, #2
 8015aa2:	3301      	adds	r3, #1
 8015aa4:	2b04      	cmp	r3, #4
 8015aa6:	d853      	bhi.n	8015b50 <ip4addr_aton+0x22c>
 8015aa8:	a201      	add	r2, pc, #4	; (adr r2, 8015ab0 <ip4addr_aton+0x18c>)
 8015aaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015aae:	bf00      	nop
 8015ab0:	08015ac5 	.word	0x08015ac5
 8015ab4:	08015b5f 	.word	0x08015b5f
 8015ab8:	08015ac9 	.word	0x08015ac9
 8015abc:	08015aeb 	.word	0x08015aeb
 8015ac0:	08015b19 	.word	0x08015b19

    case 0:
      return 0;       /* initial nondigit */
 8015ac4:	2300      	movs	r3, #0
 8015ac6:	e055      	b.n	8015b74 <ip4addr_aton+0x250>

    case 1:             /* a -- 32 bits */
      break;

    case 2:             /* a.b -- 8.24 bits */
      if (val > 0xffffffUL) {
 8015ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015aca:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8015ace:	d301      	bcc.n	8015ad4 <ip4addr_aton+0x1b0>
        return 0;
 8015ad0:	2300      	movs	r3, #0
 8015ad2:	e04f      	b.n	8015b74 <ip4addr_aton+0x250>
      }
      if (parts[0] > 0xff) {
 8015ad4:	68fb      	ldr	r3, [r7, #12]
 8015ad6:	2bff      	cmp	r3, #255	; 0xff
 8015ad8:	d901      	bls.n	8015ade <ip4addr_aton+0x1ba>
        return 0;
 8015ada:	2300      	movs	r3, #0
 8015adc:	e04a      	b.n	8015b74 <ip4addr_aton+0x250>
      }
      val |= parts[0] << 24;
 8015ade:	68fb      	ldr	r3, [r7, #12]
 8015ae0:	061b      	lsls	r3, r3, #24
 8015ae2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015ae4:	4313      	orrs	r3, r2
 8015ae6:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8015ae8:	e03a      	b.n	8015b60 <ip4addr_aton+0x23c>

    case 3:             /* a.b.c -- 8.8.16 bits */
      if (val > 0xffff) {
 8015aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015aec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015af0:	d301      	bcc.n	8015af6 <ip4addr_aton+0x1d2>
        return 0;
 8015af2:	2300      	movs	r3, #0
 8015af4:	e03e      	b.n	8015b74 <ip4addr_aton+0x250>
      }
      if ((parts[0] > 0xff) || (parts[1] > 0xff)) {
 8015af6:	68fb      	ldr	r3, [r7, #12]
 8015af8:	2bff      	cmp	r3, #255	; 0xff
 8015afa:	d802      	bhi.n	8015b02 <ip4addr_aton+0x1de>
 8015afc:	693b      	ldr	r3, [r7, #16]
 8015afe:	2bff      	cmp	r3, #255	; 0xff
 8015b00:	d901      	bls.n	8015b06 <ip4addr_aton+0x1e2>
        return 0;
 8015b02:	2300      	movs	r3, #0
 8015b04:	e036      	b.n	8015b74 <ip4addr_aton+0x250>
      }
      val |= (parts[0] << 24) | (parts[1] << 16);
 8015b06:	68fb      	ldr	r3, [r7, #12]
 8015b08:	061a      	lsls	r2, r3, #24
 8015b0a:	693b      	ldr	r3, [r7, #16]
 8015b0c:	041b      	lsls	r3, r3, #16
 8015b0e:	4313      	orrs	r3, r2
 8015b10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015b12:	4313      	orrs	r3, r2
 8015b14:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8015b16:	e023      	b.n	8015b60 <ip4addr_aton+0x23c>

    case 4:             /* a.b.c.d -- 8.8.8.8 bits */
      if (val > 0xff) {
 8015b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015b1a:	2bff      	cmp	r3, #255	; 0xff
 8015b1c:	d901      	bls.n	8015b22 <ip4addr_aton+0x1fe>
        return 0;
 8015b1e:	2300      	movs	r3, #0
 8015b20:	e028      	b.n	8015b74 <ip4addr_aton+0x250>
      }
      if ((parts[0] > 0xff) || (parts[1] > 0xff) || (parts[2] > 0xff)) {
 8015b22:	68fb      	ldr	r3, [r7, #12]
 8015b24:	2bff      	cmp	r3, #255	; 0xff
 8015b26:	d805      	bhi.n	8015b34 <ip4addr_aton+0x210>
 8015b28:	693b      	ldr	r3, [r7, #16]
 8015b2a:	2bff      	cmp	r3, #255	; 0xff
 8015b2c:	d802      	bhi.n	8015b34 <ip4addr_aton+0x210>
 8015b2e:	697b      	ldr	r3, [r7, #20]
 8015b30:	2bff      	cmp	r3, #255	; 0xff
 8015b32:	d901      	bls.n	8015b38 <ip4addr_aton+0x214>
        return 0;
 8015b34:	2300      	movs	r3, #0
 8015b36:	e01d      	b.n	8015b74 <ip4addr_aton+0x250>
      }
      val |= (parts[0] << 24) | (parts[1] << 16) | (parts[2] << 8);
 8015b38:	68fb      	ldr	r3, [r7, #12]
 8015b3a:	061a      	lsls	r2, r3, #24
 8015b3c:	693b      	ldr	r3, [r7, #16]
 8015b3e:	041b      	lsls	r3, r3, #16
 8015b40:	431a      	orrs	r2, r3
 8015b42:	697b      	ldr	r3, [r7, #20]
 8015b44:	021b      	lsls	r3, r3, #8
 8015b46:	4313      	orrs	r3, r2
 8015b48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015b4a:	4313      	orrs	r3, r2
 8015b4c:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8015b4e:	e007      	b.n	8015b60 <ip4addr_aton+0x23c>
    default:
      LWIP_ASSERT("unhandled", 0);
 8015b50:	4b0a      	ldr	r3, [pc, #40]	; (8015b7c <ip4addr_aton+0x258>)
 8015b52:	22f9      	movs	r2, #249	; 0xf9
 8015b54:	490a      	ldr	r1, [pc, #40]	; (8015b80 <ip4addr_aton+0x25c>)
 8015b56:	480b      	ldr	r0, [pc, #44]	; (8015b84 <ip4addr_aton+0x260>)
 8015b58:	f001 f982 	bl	8016e60 <iprintf>
      break;
 8015b5c:	e000      	b.n	8015b60 <ip4addr_aton+0x23c>
      break;
 8015b5e:	bf00      	nop
  }
  if (addr) {
 8015b60:	683b      	ldr	r3, [r7, #0]
 8015b62:	2b00      	cmp	r3, #0
 8015b64:	d005      	beq.n	8015b72 <ip4addr_aton+0x24e>
    ip4_addr_set_u32(addr, lwip_htonl(val));
 8015b66:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015b68:	f7f5 fe8b 	bl	800b882 <lwip_htonl>
 8015b6c:	4602      	mov	r2, r0
 8015b6e:	683b      	ldr	r3, [r7, #0]
 8015b70:	601a      	str	r2, [r3, #0]
  }
  return 1;
 8015b72:	2301      	movs	r3, #1
}
 8015b74:	4618      	mov	r0, r3
 8015b76:	3728      	adds	r7, #40	; 0x28
 8015b78:	46bd      	mov	sp, r7
 8015b7a:	bdb0      	pop	{r4, r5, r7, pc}
 8015b7c:	0801b71c 	.word	0x0801b71c
 8015b80:	0801b758 	.word	0x0801b758
 8015b84:	0801b764 	.word	0x0801b764

08015b88 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8015b88:	b580      	push	{r7, lr}
 8015b8a:	b084      	sub	sp, #16
 8015b8c:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8015b8e:	2300      	movs	r3, #0
 8015b90:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8015b92:	4b12      	ldr	r3, [pc, #72]	; (8015bdc <ip_reass_tmr+0x54>)
 8015b94:	681b      	ldr	r3, [r3, #0]
 8015b96:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8015b98:	e018      	b.n	8015bcc <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8015b9a:	68fb      	ldr	r3, [r7, #12]
 8015b9c:	7fdb      	ldrb	r3, [r3, #31]
 8015b9e:	2b00      	cmp	r3, #0
 8015ba0:	d00b      	beq.n	8015bba <ip_reass_tmr+0x32>
      r->timer--;
 8015ba2:	68fb      	ldr	r3, [r7, #12]
 8015ba4:	7fdb      	ldrb	r3, [r3, #31]
 8015ba6:	3b01      	subs	r3, #1
 8015ba8:	b2da      	uxtb	r2, r3
 8015baa:	68fb      	ldr	r3, [r7, #12]
 8015bac:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8015bae:	68fb      	ldr	r3, [r7, #12]
 8015bb0:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8015bb2:	68fb      	ldr	r3, [r7, #12]
 8015bb4:	681b      	ldr	r3, [r3, #0]
 8015bb6:	60fb      	str	r3, [r7, #12]
 8015bb8:	e008      	b.n	8015bcc <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8015bba:	68fb      	ldr	r3, [r7, #12]
 8015bbc:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8015bbe:	68fb      	ldr	r3, [r7, #12]
 8015bc0:	681b      	ldr	r3, [r3, #0]
 8015bc2:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8015bc4:	68b9      	ldr	r1, [r7, #8]
 8015bc6:	6878      	ldr	r0, [r7, #4]
 8015bc8:	f000 f80a 	bl	8015be0 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8015bcc:	68fb      	ldr	r3, [r7, #12]
 8015bce:	2b00      	cmp	r3, #0
 8015bd0:	d1e3      	bne.n	8015b9a <ip_reass_tmr+0x12>
    }
  }
}
 8015bd2:	bf00      	nop
 8015bd4:	3710      	adds	r7, #16
 8015bd6:	46bd      	mov	sp, r7
 8015bd8:	bd80      	pop	{r7, pc}
 8015bda:	bf00      	nop
 8015bdc:	200048f8 	.word	0x200048f8

08015be0 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8015be0:	b580      	push	{r7, lr}
 8015be2:	b088      	sub	sp, #32
 8015be4:	af00      	add	r7, sp, #0
 8015be6:	6078      	str	r0, [r7, #4]
 8015be8:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8015bea:	2300      	movs	r3, #0
 8015bec:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8015bee:	683a      	ldr	r2, [r7, #0]
 8015bf0:	687b      	ldr	r3, [r7, #4]
 8015bf2:	429a      	cmp	r2, r3
 8015bf4:	d105      	bne.n	8015c02 <ip_reass_free_complete_datagram+0x22>
 8015bf6:	4b45      	ldr	r3, [pc, #276]	; (8015d0c <ip_reass_free_complete_datagram+0x12c>)
 8015bf8:	22ab      	movs	r2, #171	; 0xab
 8015bfa:	4945      	ldr	r1, [pc, #276]	; (8015d10 <ip_reass_free_complete_datagram+0x130>)
 8015bfc:	4845      	ldr	r0, [pc, #276]	; (8015d14 <ip_reass_free_complete_datagram+0x134>)
 8015bfe:	f001 f92f 	bl	8016e60 <iprintf>
  if (prev != NULL) {
 8015c02:	683b      	ldr	r3, [r7, #0]
 8015c04:	2b00      	cmp	r3, #0
 8015c06:	d00a      	beq.n	8015c1e <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8015c08:	683b      	ldr	r3, [r7, #0]
 8015c0a:	681b      	ldr	r3, [r3, #0]
 8015c0c:	687a      	ldr	r2, [r7, #4]
 8015c0e:	429a      	cmp	r2, r3
 8015c10:	d005      	beq.n	8015c1e <ip_reass_free_complete_datagram+0x3e>
 8015c12:	4b3e      	ldr	r3, [pc, #248]	; (8015d0c <ip_reass_free_complete_datagram+0x12c>)
 8015c14:	22ad      	movs	r2, #173	; 0xad
 8015c16:	4940      	ldr	r1, [pc, #256]	; (8015d18 <ip_reass_free_complete_datagram+0x138>)
 8015c18:	483e      	ldr	r0, [pc, #248]	; (8015d14 <ip_reass_free_complete_datagram+0x134>)
 8015c1a:	f001 f921 	bl	8016e60 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8015c1e:	687b      	ldr	r3, [r7, #4]
 8015c20:	685b      	ldr	r3, [r3, #4]
 8015c22:	685b      	ldr	r3, [r3, #4]
 8015c24:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8015c26:	697b      	ldr	r3, [r7, #20]
 8015c28:	889b      	ldrh	r3, [r3, #4]
 8015c2a:	b29b      	uxth	r3, r3
 8015c2c:	2b00      	cmp	r3, #0
 8015c2e:	d12a      	bne.n	8015c86 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8015c30:	687b      	ldr	r3, [r7, #4]
 8015c32:	685b      	ldr	r3, [r3, #4]
 8015c34:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8015c36:	697b      	ldr	r3, [r7, #20]
 8015c38:	681a      	ldr	r2, [r3, #0]
 8015c3a:	687b      	ldr	r3, [r7, #4]
 8015c3c:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8015c3e:	69bb      	ldr	r3, [r7, #24]
 8015c40:	6858      	ldr	r0, [r3, #4]
 8015c42:	687b      	ldr	r3, [r7, #4]
 8015c44:	3308      	adds	r3, #8
 8015c46:	2214      	movs	r2, #20
 8015c48:	4619      	mov	r1, r3
 8015c4a:	f001 f8dc 	bl	8016e06 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8015c4e:	2101      	movs	r1, #1
 8015c50:	69b8      	ldr	r0, [r7, #24]
 8015c52:	f7ff fb03 	bl	801525c <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8015c56:	69b8      	ldr	r0, [r7, #24]
 8015c58:	f7f7 fa66 	bl	800d128 <pbuf_clen>
 8015c5c:	4603      	mov	r3, r0
 8015c5e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8015c60:	8bfa      	ldrh	r2, [r7, #30]
 8015c62:	8a7b      	ldrh	r3, [r7, #18]
 8015c64:	4413      	add	r3, r2
 8015c66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015c6a:	db05      	blt.n	8015c78 <ip_reass_free_complete_datagram+0x98>
 8015c6c:	4b27      	ldr	r3, [pc, #156]	; (8015d0c <ip_reass_free_complete_datagram+0x12c>)
 8015c6e:	22bc      	movs	r2, #188	; 0xbc
 8015c70:	492a      	ldr	r1, [pc, #168]	; (8015d1c <ip_reass_free_complete_datagram+0x13c>)
 8015c72:	4828      	ldr	r0, [pc, #160]	; (8015d14 <ip_reass_free_complete_datagram+0x134>)
 8015c74:	f001 f8f4 	bl	8016e60 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8015c78:	8bfa      	ldrh	r2, [r7, #30]
 8015c7a:	8a7b      	ldrh	r3, [r7, #18]
 8015c7c:	4413      	add	r3, r2
 8015c7e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8015c80:	69b8      	ldr	r0, [r7, #24]
 8015c82:	f7f7 f9c3 	bl	800d00c <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8015c86:	687b      	ldr	r3, [r7, #4]
 8015c88:	685b      	ldr	r3, [r3, #4]
 8015c8a:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8015c8c:	e01f      	b.n	8015cce <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8015c8e:	69bb      	ldr	r3, [r7, #24]
 8015c90:	685b      	ldr	r3, [r3, #4]
 8015c92:	617b      	str	r3, [r7, #20]
    pcur = p;
 8015c94:	69bb      	ldr	r3, [r7, #24]
 8015c96:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8015c98:	697b      	ldr	r3, [r7, #20]
 8015c9a:	681b      	ldr	r3, [r3, #0]
 8015c9c:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8015c9e:	68f8      	ldr	r0, [r7, #12]
 8015ca0:	f7f7 fa42 	bl	800d128 <pbuf_clen>
 8015ca4:	4603      	mov	r3, r0
 8015ca6:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8015ca8:	8bfa      	ldrh	r2, [r7, #30]
 8015caa:	8a7b      	ldrh	r3, [r7, #18]
 8015cac:	4413      	add	r3, r2
 8015cae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015cb2:	db05      	blt.n	8015cc0 <ip_reass_free_complete_datagram+0xe0>
 8015cb4:	4b15      	ldr	r3, [pc, #84]	; (8015d0c <ip_reass_free_complete_datagram+0x12c>)
 8015cb6:	22cc      	movs	r2, #204	; 0xcc
 8015cb8:	4918      	ldr	r1, [pc, #96]	; (8015d1c <ip_reass_free_complete_datagram+0x13c>)
 8015cba:	4816      	ldr	r0, [pc, #88]	; (8015d14 <ip_reass_free_complete_datagram+0x134>)
 8015cbc:	f001 f8d0 	bl	8016e60 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8015cc0:	8bfa      	ldrh	r2, [r7, #30]
 8015cc2:	8a7b      	ldrh	r3, [r7, #18]
 8015cc4:	4413      	add	r3, r2
 8015cc6:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8015cc8:	68f8      	ldr	r0, [r7, #12]
 8015cca:	f7f7 f99f 	bl	800d00c <pbuf_free>
  while (p != NULL) {
 8015cce:	69bb      	ldr	r3, [r7, #24]
 8015cd0:	2b00      	cmp	r3, #0
 8015cd2:	d1dc      	bne.n	8015c8e <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8015cd4:	6839      	ldr	r1, [r7, #0]
 8015cd6:	6878      	ldr	r0, [r7, #4]
 8015cd8:	f000 f8c2 	bl	8015e60 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8015cdc:	4b10      	ldr	r3, [pc, #64]	; (8015d20 <ip_reass_free_complete_datagram+0x140>)
 8015cde:	881b      	ldrh	r3, [r3, #0]
 8015ce0:	8bfa      	ldrh	r2, [r7, #30]
 8015ce2:	429a      	cmp	r2, r3
 8015ce4:	d905      	bls.n	8015cf2 <ip_reass_free_complete_datagram+0x112>
 8015ce6:	4b09      	ldr	r3, [pc, #36]	; (8015d0c <ip_reass_free_complete_datagram+0x12c>)
 8015ce8:	22d2      	movs	r2, #210	; 0xd2
 8015cea:	490e      	ldr	r1, [pc, #56]	; (8015d24 <ip_reass_free_complete_datagram+0x144>)
 8015cec:	4809      	ldr	r0, [pc, #36]	; (8015d14 <ip_reass_free_complete_datagram+0x134>)
 8015cee:	f001 f8b7 	bl	8016e60 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8015cf2:	4b0b      	ldr	r3, [pc, #44]	; (8015d20 <ip_reass_free_complete_datagram+0x140>)
 8015cf4:	881a      	ldrh	r2, [r3, #0]
 8015cf6:	8bfb      	ldrh	r3, [r7, #30]
 8015cf8:	1ad3      	subs	r3, r2, r3
 8015cfa:	b29a      	uxth	r2, r3
 8015cfc:	4b08      	ldr	r3, [pc, #32]	; (8015d20 <ip_reass_free_complete_datagram+0x140>)
 8015cfe:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8015d00:	8bfb      	ldrh	r3, [r7, #30]
}
 8015d02:	4618      	mov	r0, r3
 8015d04:	3720      	adds	r7, #32
 8015d06:	46bd      	mov	sp, r7
 8015d08:	bd80      	pop	{r7, pc}
 8015d0a:	bf00      	nop
 8015d0c:	0801b78c 	.word	0x0801b78c
 8015d10:	0801b7c8 	.word	0x0801b7c8
 8015d14:	0801b7d4 	.word	0x0801b7d4
 8015d18:	0801b7fc 	.word	0x0801b7fc
 8015d1c:	0801b810 	.word	0x0801b810
 8015d20:	200048fc 	.word	0x200048fc
 8015d24:	0801b830 	.word	0x0801b830

08015d28 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8015d28:	b580      	push	{r7, lr}
 8015d2a:	b08a      	sub	sp, #40	; 0x28
 8015d2c:	af00      	add	r7, sp, #0
 8015d2e:	6078      	str	r0, [r7, #4]
 8015d30:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8015d32:	2300      	movs	r3, #0
 8015d34:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8015d36:	2300      	movs	r3, #0
 8015d38:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8015d3a:	2300      	movs	r3, #0
 8015d3c:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8015d3e:	2300      	movs	r3, #0
 8015d40:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8015d42:	2300      	movs	r3, #0
 8015d44:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8015d46:	4b28      	ldr	r3, [pc, #160]	; (8015de8 <ip_reass_remove_oldest_datagram+0xc0>)
 8015d48:	681b      	ldr	r3, [r3, #0]
 8015d4a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8015d4c:	e030      	b.n	8015db0 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8015d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015d50:	695a      	ldr	r2, [r3, #20]
 8015d52:	687b      	ldr	r3, [r7, #4]
 8015d54:	68db      	ldr	r3, [r3, #12]
 8015d56:	429a      	cmp	r2, r3
 8015d58:	d10c      	bne.n	8015d74 <ip_reass_remove_oldest_datagram+0x4c>
 8015d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015d5c:	699a      	ldr	r2, [r3, #24]
 8015d5e:	687b      	ldr	r3, [r7, #4]
 8015d60:	691b      	ldr	r3, [r3, #16]
 8015d62:	429a      	cmp	r2, r3
 8015d64:	d106      	bne.n	8015d74 <ip_reass_remove_oldest_datagram+0x4c>
 8015d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015d68:	899a      	ldrh	r2, [r3, #12]
 8015d6a:	687b      	ldr	r3, [r7, #4]
 8015d6c:	889b      	ldrh	r3, [r3, #4]
 8015d6e:	b29b      	uxth	r3, r3
 8015d70:	429a      	cmp	r2, r3
 8015d72:	d014      	beq.n	8015d9e <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8015d74:	693b      	ldr	r3, [r7, #16]
 8015d76:	3301      	adds	r3, #1
 8015d78:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8015d7a:	6a3b      	ldr	r3, [r7, #32]
 8015d7c:	2b00      	cmp	r3, #0
 8015d7e:	d104      	bne.n	8015d8a <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8015d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015d82:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8015d84:	69fb      	ldr	r3, [r7, #28]
 8015d86:	61bb      	str	r3, [r7, #24]
 8015d88:	e009      	b.n	8015d9e <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8015d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015d8c:	7fda      	ldrb	r2, [r3, #31]
 8015d8e:	6a3b      	ldr	r3, [r7, #32]
 8015d90:	7fdb      	ldrb	r3, [r3, #31]
 8015d92:	429a      	cmp	r2, r3
 8015d94:	d803      	bhi.n	8015d9e <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8015d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015d98:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8015d9a:	69fb      	ldr	r3, [r7, #28]
 8015d9c:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8015d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015da0:	681b      	ldr	r3, [r3, #0]
 8015da2:	2b00      	cmp	r3, #0
 8015da4:	d001      	beq.n	8015daa <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8015da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015da8:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8015daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015dac:	681b      	ldr	r3, [r3, #0]
 8015dae:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8015db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015db2:	2b00      	cmp	r3, #0
 8015db4:	d1cb      	bne.n	8015d4e <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8015db6:	6a3b      	ldr	r3, [r7, #32]
 8015db8:	2b00      	cmp	r3, #0
 8015dba:	d008      	beq.n	8015dce <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8015dbc:	69b9      	ldr	r1, [r7, #24]
 8015dbe:	6a38      	ldr	r0, [r7, #32]
 8015dc0:	f7ff ff0e 	bl	8015be0 <ip_reass_free_complete_datagram>
 8015dc4:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8015dc6:	697a      	ldr	r2, [r7, #20]
 8015dc8:	68fb      	ldr	r3, [r7, #12]
 8015dca:	4413      	add	r3, r2
 8015dcc:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8015dce:	697a      	ldr	r2, [r7, #20]
 8015dd0:	683b      	ldr	r3, [r7, #0]
 8015dd2:	429a      	cmp	r2, r3
 8015dd4:	da02      	bge.n	8015ddc <ip_reass_remove_oldest_datagram+0xb4>
 8015dd6:	693b      	ldr	r3, [r7, #16]
 8015dd8:	2b01      	cmp	r3, #1
 8015dda:	dcac      	bgt.n	8015d36 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8015ddc:	697b      	ldr	r3, [r7, #20]
}
 8015dde:	4618      	mov	r0, r3
 8015de0:	3728      	adds	r7, #40	; 0x28
 8015de2:	46bd      	mov	sp, r7
 8015de4:	bd80      	pop	{r7, pc}
 8015de6:	bf00      	nop
 8015de8:	200048f8 	.word	0x200048f8

08015dec <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8015dec:	b580      	push	{r7, lr}
 8015dee:	b084      	sub	sp, #16
 8015df0:	af00      	add	r7, sp, #0
 8015df2:	6078      	str	r0, [r7, #4]
 8015df4:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8015df6:	2004      	movs	r0, #4
 8015df8:	f7f6 f9e4 	bl	800c1c4 <memp_malloc>
 8015dfc:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8015dfe:	68fb      	ldr	r3, [r7, #12]
 8015e00:	2b00      	cmp	r3, #0
 8015e02:	d110      	bne.n	8015e26 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8015e04:	6839      	ldr	r1, [r7, #0]
 8015e06:	6878      	ldr	r0, [r7, #4]
 8015e08:	f7ff ff8e 	bl	8015d28 <ip_reass_remove_oldest_datagram>
 8015e0c:	4602      	mov	r2, r0
 8015e0e:	683b      	ldr	r3, [r7, #0]
 8015e10:	4293      	cmp	r3, r2
 8015e12:	dc03      	bgt.n	8015e1c <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8015e14:	2004      	movs	r0, #4
 8015e16:	f7f6 f9d5 	bl	800c1c4 <memp_malloc>
 8015e1a:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8015e1c:	68fb      	ldr	r3, [r7, #12]
 8015e1e:	2b00      	cmp	r3, #0
 8015e20:	d101      	bne.n	8015e26 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8015e22:	2300      	movs	r3, #0
 8015e24:	e016      	b.n	8015e54 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8015e26:	2220      	movs	r2, #32
 8015e28:	2100      	movs	r1, #0
 8015e2a:	68f8      	ldr	r0, [r7, #12]
 8015e2c:	f001 f80f 	bl	8016e4e <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8015e30:	68fb      	ldr	r3, [r7, #12]
 8015e32:	220f      	movs	r2, #15
 8015e34:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8015e36:	4b09      	ldr	r3, [pc, #36]	; (8015e5c <ip_reass_enqueue_new_datagram+0x70>)
 8015e38:	681a      	ldr	r2, [r3, #0]
 8015e3a:	68fb      	ldr	r3, [r7, #12]
 8015e3c:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8015e3e:	4a07      	ldr	r2, [pc, #28]	; (8015e5c <ip_reass_enqueue_new_datagram+0x70>)
 8015e40:	68fb      	ldr	r3, [r7, #12]
 8015e42:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8015e44:	68fb      	ldr	r3, [r7, #12]
 8015e46:	3308      	adds	r3, #8
 8015e48:	2214      	movs	r2, #20
 8015e4a:	6879      	ldr	r1, [r7, #4]
 8015e4c:	4618      	mov	r0, r3
 8015e4e:	f000 ffda 	bl	8016e06 <memcpy>
  return ipr;
 8015e52:	68fb      	ldr	r3, [r7, #12]
}
 8015e54:	4618      	mov	r0, r3
 8015e56:	3710      	adds	r7, #16
 8015e58:	46bd      	mov	sp, r7
 8015e5a:	bd80      	pop	{r7, pc}
 8015e5c:	200048f8 	.word	0x200048f8

08015e60 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8015e60:	b580      	push	{r7, lr}
 8015e62:	b082      	sub	sp, #8
 8015e64:	af00      	add	r7, sp, #0
 8015e66:	6078      	str	r0, [r7, #4]
 8015e68:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8015e6a:	4b10      	ldr	r3, [pc, #64]	; (8015eac <ip_reass_dequeue_datagram+0x4c>)
 8015e6c:	681b      	ldr	r3, [r3, #0]
 8015e6e:	687a      	ldr	r2, [r7, #4]
 8015e70:	429a      	cmp	r2, r3
 8015e72:	d104      	bne.n	8015e7e <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8015e74:	687b      	ldr	r3, [r7, #4]
 8015e76:	681b      	ldr	r3, [r3, #0]
 8015e78:	4a0c      	ldr	r2, [pc, #48]	; (8015eac <ip_reass_dequeue_datagram+0x4c>)
 8015e7a:	6013      	str	r3, [r2, #0]
 8015e7c:	e00d      	b.n	8015e9a <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8015e7e:	683b      	ldr	r3, [r7, #0]
 8015e80:	2b00      	cmp	r3, #0
 8015e82:	d106      	bne.n	8015e92 <ip_reass_dequeue_datagram+0x32>
 8015e84:	4b0a      	ldr	r3, [pc, #40]	; (8015eb0 <ip_reass_dequeue_datagram+0x50>)
 8015e86:	f240 1245 	movw	r2, #325	; 0x145
 8015e8a:	490a      	ldr	r1, [pc, #40]	; (8015eb4 <ip_reass_dequeue_datagram+0x54>)
 8015e8c:	480a      	ldr	r0, [pc, #40]	; (8015eb8 <ip_reass_dequeue_datagram+0x58>)
 8015e8e:	f000 ffe7 	bl	8016e60 <iprintf>
    prev->next = ipr->next;
 8015e92:	687b      	ldr	r3, [r7, #4]
 8015e94:	681a      	ldr	r2, [r3, #0]
 8015e96:	683b      	ldr	r3, [r7, #0]
 8015e98:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8015e9a:	6879      	ldr	r1, [r7, #4]
 8015e9c:	2004      	movs	r0, #4
 8015e9e:	f7f6 f9e3 	bl	800c268 <memp_free>
}
 8015ea2:	bf00      	nop
 8015ea4:	3708      	adds	r7, #8
 8015ea6:	46bd      	mov	sp, r7
 8015ea8:	bd80      	pop	{r7, pc}
 8015eaa:	bf00      	nop
 8015eac:	200048f8 	.word	0x200048f8
 8015eb0:	0801b78c 	.word	0x0801b78c
 8015eb4:	0801b854 	.word	0x0801b854
 8015eb8:	0801b7d4 	.word	0x0801b7d4

08015ebc <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8015ebc:	b580      	push	{r7, lr}
 8015ebe:	b08c      	sub	sp, #48	; 0x30
 8015ec0:	af00      	add	r7, sp, #0
 8015ec2:	60f8      	str	r0, [r7, #12]
 8015ec4:	60b9      	str	r1, [r7, #8]
 8015ec6:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8015ec8:	2300      	movs	r3, #0
 8015eca:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8015ecc:	2301      	movs	r3, #1
 8015ece:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8015ed0:	68bb      	ldr	r3, [r7, #8]
 8015ed2:	685b      	ldr	r3, [r3, #4]
 8015ed4:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8015ed6:	69fb      	ldr	r3, [r7, #28]
 8015ed8:	885b      	ldrh	r3, [r3, #2]
 8015eda:	b29b      	uxth	r3, r3
 8015edc:	4618      	mov	r0, r3
 8015ede:	f7f5 fcbb 	bl	800b858 <lwip_htons>
 8015ee2:	4603      	mov	r3, r0
 8015ee4:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8015ee6:	69fb      	ldr	r3, [r7, #28]
 8015ee8:	781b      	ldrb	r3, [r3, #0]
 8015eea:	f003 030f 	and.w	r3, r3, #15
 8015eee:	b2db      	uxtb	r3, r3
 8015ef0:	009b      	lsls	r3, r3, #2
 8015ef2:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8015ef4:	7e7b      	ldrb	r3, [r7, #25]
 8015ef6:	b29b      	uxth	r3, r3
 8015ef8:	8b7a      	ldrh	r2, [r7, #26]
 8015efa:	429a      	cmp	r2, r3
 8015efc:	d202      	bcs.n	8015f04 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015efe:	f04f 33ff 	mov.w	r3, #4294967295
 8015f02:	e135      	b.n	8016170 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8015f04:	7e7b      	ldrb	r3, [r7, #25]
 8015f06:	b29b      	uxth	r3, r3
 8015f08:	8b7a      	ldrh	r2, [r7, #26]
 8015f0a:	1ad3      	subs	r3, r2, r3
 8015f0c:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8015f0e:	69fb      	ldr	r3, [r7, #28]
 8015f10:	88db      	ldrh	r3, [r3, #6]
 8015f12:	b29b      	uxth	r3, r3
 8015f14:	4618      	mov	r0, r3
 8015f16:	f7f5 fc9f 	bl	800b858 <lwip_htons>
 8015f1a:	4603      	mov	r3, r0
 8015f1c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015f20:	b29b      	uxth	r3, r3
 8015f22:	00db      	lsls	r3, r3, #3
 8015f24:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8015f26:	68bb      	ldr	r3, [r7, #8]
 8015f28:	685b      	ldr	r3, [r3, #4]
 8015f2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8015f2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015f2e:	2200      	movs	r2, #0
 8015f30:	701a      	strb	r2, [r3, #0]
 8015f32:	2200      	movs	r2, #0
 8015f34:	705a      	strb	r2, [r3, #1]
 8015f36:	2200      	movs	r2, #0
 8015f38:	709a      	strb	r2, [r3, #2]
 8015f3a:	2200      	movs	r2, #0
 8015f3c:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8015f3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015f40:	8afa      	ldrh	r2, [r7, #22]
 8015f42:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8015f44:	8afa      	ldrh	r2, [r7, #22]
 8015f46:	8b7b      	ldrh	r3, [r7, #26]
 8015f48:	4413      	add	r3, r2
 8015f4a:	b29a      	uxth	r2, r3
 8015f4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015f4e:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8015f50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015f52:	88db      	ldrh	r3, [r3, #6]
 8015f54:	b29b      	uxth	r3, r3
 8015f56:	8afa      	ldrh	r2, [r7, #22]
 8015f58:	429a      	cmp	r2, r3
 8015f5a:	d902      	bls.n	8015f62 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015f5c:	f04f 33ff 	mov.w	r3, #4294967295
 8015f60:	e106      	b.n	8016170 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8015f62:	68fb      	ldr	r3, [r7, #12]
 8015f64:	685b      	ldr	r3, [r3, #4]
 8015f66:	627b      	str	r3, [r7, #36]	; 0x24
 8015f68:	e068      	b.n	801603c <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8015f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f6c:	685b      	ldr	r3, [r3, #4]
 8015f6e:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8015f70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015f72:	889b      	ldrh	r3, [r3, #4]
 8015f74:	b29a      	uxth	r2, r3
 8015f76:	693b      	ldr	r3, [r7, #16]
 8015f78:	889b      	ldrh	r3, [r3, #4]
 8015f7a:	b29b      	uxth	r3, r3
 8015f7c:	429a      	cmp	r2, r3
 8015f7e:	d235      	bcs.n	8015fec <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8015f80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015f82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015f84:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8015f86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015f88:	2b00      	cmp	r3, #0
 8015f8a:	d020      	beq.n	8015fce <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8015f8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015f8e:	889b      	ldrh	r3, [r3, #4]
 8015f90:	b29a      	uxth	r2, r3
 8015f92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015f94:	88db      	ldrh	r3, [r3, #6]
 8015f96:	b29b      	uxth	r3, r3
 8015f98:	429a      	cmp	r2, r3
 8015f9a:	d307      	bcc.n	8015fac <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8015f9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015f9e:	88db      	ldrh	r3, [r3, #6]
 8015fa0:	b29a      	uxth	r2, r3
 8015fa2:	693b      	ldr	r3, [r7, #16]
 8015fa4:	889b      	ldrh	r3, [r3, #4]
 8015fa6:	b29b      	uxth	r3, r3
 8015fa8:	429a      	cmp	r2, r3
 8015faa:	d902      	bls.n	8015fb2 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015fac:	f04f 33ff 	mov.w	r3, #4294967295
 8015fb0:	e0de      	b.n	8016170 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8015fb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015fb4:	68ba      	ldr	r2, [r7, #8]
 8015fb6:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8015fb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015fba:	88db      	ldrh	r3, [r3, #6]
 8015fbc:	b29a      	uxth	r2, r3
 8015fbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015fc0:	889b      	ldrh	r3, [r3, #4]
 8015fc2:	b29b      	uxth	r3, r3
 8015fc4:	429a      	cmp	r2, r3
 8015fc6:	d03d      	beq.n	8016044 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8015fc8:	2300      	movs	r3, #0
 8015fca:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8015fcc:	e03a      	b.n	8016044 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8015fce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015fd0:	88db      	ldrh	r3, [r3, #6]
 8015fd2:	b29a      	uxth	r2, r3
 8015fd4:	693b      	ldr	r3, [r7, #16]
 8015fd6:	889b      	ldrh	r3, [r3, #4]
 8015fd8:	b29b      	uxth	r3, r3
 8015fda:	429a      	cmp	r2, r3
 8015fdc:	d902      	bls.n	8015fe4 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015fde:	f04f 33ff 	mov.w	r3, #4294967295
 8015fe2:	e0c5      	b.n	8016170 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8015fe4:	68fb      	ldr	r3, [r7, #12]
 8015fe6:	68ba      	ldr	r2, [r7, #8]
 8015fe8:	605a      	str	r2, [r3, #4]
      break;
 8015fea:	e02b      	b.n	8016044 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8015fec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015fee:	889b      	ldrh	r3, [r3, #4]
 8015ff0:	b29a      	uxth	r2, r3
 8015ff2:	693b      	ldr	r3, [r7, #16]
 8015ff4:	889b      	ldrh	r3, [r3, #4]
 8015ff6:	b29b      	uxth	r3, r3
 8015ff8:	429a      	cmp	r2, r3
 8015ffa:	d102      	bne.n	8016002 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015ffc:	f04f 33ff 	mov.w	r3, #4294967295
 8016000:	e0b6      	b.n	8016170 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8016002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016004:	889b      	ldrh	r3, [r3, #4]
 8016006:	b29a      	uxth	r2, r3
 8016008:	693b      	ldr	r3, [r7, #16]
 801600a:	88db      	ldrh	r3, [r3, #6]
 801600c:	b29b      	uxth	r3, r3
 801600e:	429a      	cmp	r2, r3
 8016010:	d202      	bcs.n	8016018 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016012:	f04f 33ff 	mov.w	r3, #4294967295
 8016016:	e0ab      	b.n	8016170 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8016018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801601a:	2b00      	cmp	r3, #0
 801601c:	d009      	beq.n	8016032 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801601e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016020:	88db      	ldrh	r3, [r3, #6]
 8016022:	b29a      	uxth	r2, r3
 8016024:	693b      	ldr	r3, [r7, #16]
 8016026:	889b      	ldrh	r3, [r3, #4]
 8016028:	b29b      	uxth	r3, r3
 801602a:	429a      	cmp	r2, r3
 801602c:	d001      	beq.n	8016032 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801602e:	2300      	movs	r3, #0
 8016030:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8016032:	693b      	ldr	r3, [r7, #16]
 8016034:	681b      	ldr	r3, [r3, #0]
 8016036:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8016038:	693b      	ldr	r3, [r7, #16]
 801603a:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 801603c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801603e:	2b00      	cmp	r3, #0
 8016040:	d193      	bne.n	8015f6a <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8016042:	e000      	b.n	8016046 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8016044:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8016046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016048:	2b00      	cmp	r3, #0
 801604a:	d12d      	bne.n	80160a8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 801604c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801604e:	2b00      	cmp	r3, #0
 8016050:	d01c      	beq.n	801608c <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8016052:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016054:	88db      	ldrh	r3, [r3, #6]
 8016056:	b29a      	uxth	r2, r3
 8016058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801605a:	889b      	ldrh	r3, [r3, #4]
 801605c:	b29b      	uxth	r3, r3
 801605e:	429a      	cmp	r2, r3
 8016060:	d906      	bls.n	8016070 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8016062:	4b45      	ldr	r3, [pc, #276]	; (8016178 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8016064:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8016068:	4944      	ldr	r1, [pc, #272]	; (801617c <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801606a:	4845      	ldr	r0, [pc, #276]	; (8016180 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801606c:	f000 fef8 	bl	8016e60 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8016070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016072:	68ba      	ldr	r2, [r7, #8]
 8016074:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8016076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016078:	88db      	ldrh	r3, [r3, #6]
 801607a:	b29a      	uxth	r2, r3
 801607c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801607e:	889b      	ldrh	r3, [r3, #4]
 8016080:	b29b      	uxth	r3, r3
 8016082:	429a      	cmp	r2, r3
 8016084:	d010      	beq.n	80160a8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8016086:	2300      	movs	r3, #0
 8016088:	623b      	str	r3, [r7, #32]
 801608a:	e00d      	b.n	80160a8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 801608c:	68fb      	ldr	r3, [r7, #12]
 801608e:	685b      	ldr	r3, [r3, #4]
 8016090:	2b00      	cmp	r3, #0
 8016092:	d006      	beq.n	80160a2 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8016094:	4b38      	ldr	r3, [pc, #224]	; (8016178 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8016096:	f240 12bf 	movw	r2, #447	; 0x1bf
 801609a:	493a      	ldr	r1, [pc, #232]	; (8016184 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 801609c:	4838      	ldr	r0, [pc, #224]	; (8016180 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801609e:	f000 fedf 	bl	8016e60 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 80160a2:	68fb      	ldr	r3, [r7, #12]
 80160a4:	68ba      	ldr	r2, [r7, #8]
 80160a6:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80160a8:	687b      	ldr	r3, [r7, #4]
 80160aa:	2b00      	cmp	r3, #0
 80160ac:	d105      	bne.n	80160ba <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 80160ae:	68fb      	ldr	r3, [r7, #12]
 80160b0:	7f9b      	ldrb	r3, [r3, #30]
 80160b2:	f003 0301 	and.w	r3, r3, #1
 80160b6:	2b00      	cmp	r3, #0
 80160b8:	d059      	beq.n	801616e <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 80160ba:	6a3b      	ldr	r3, [r7, #32]
 80160bc:	2b00      	cmp	r3, #0
 80160be:	d04f      	beq.n	8016160 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 80160c0:	68fb      	ldr	r3, [r7, #12]
 80160c2:	685b      	ldr	r3, [r3, #4]
 80160c4:	2b00      	cmp	r3, #0
 80160c6:	d006      	beq.n	80160d6 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 80160c8:	68fb      	ldr	r3, [r7, #12]
 80160ca:	685b      	ldr	r3, [r3, #4]
 80160cc:	685b      	ldr	r3, [r3, #4]
 80160ce:	889b      	ldrh	r3, [r3, #4]
 80160d0:	b29b      	uxth	r3, r3
 80160d2:	2b00      	cmp	r3, #0
 80160d4:	d002      	beq.n	80160dc <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 80160d6:	2300      	movs	r3, #0
 80160d8:	623b      	str	r3, [r7, #32]
 80160da:	e041      	b.n	8016160 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 80160dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80160de:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 80160e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80160e2:	681b      	ldr	r3, [r3, #0]
 80160e4:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 80160e6:	e012      	b.n	801610e <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 80160e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80160ea:	685b      	ldr	r3, [r3, #4]
 80160ec:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 80160ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80160f0:	88db      	ldrh	r3, [r3, #6]
 80160f2:	b29a      	uxth	r2, r3
 80160f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80160f6:	889b      	ldrh	r3, [r3, #4]
 80160f8:	b29b      	uxth	r3, r3
 80160fa:	429a      	cmp	r2, r3
 80160fc:	d002      	beq.n	8016104 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 80160fe:	2300      	movs	r3, #0
 8016100:	623b      	str	r3, [r7, #32]
            break;
 8016102:	e007      	b.n	8016114 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8016104:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016106:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8016108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801610a:	681b      	ldr	r3, [r3, #0]
 801610c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801610e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016110:	2b00      	cmp	r3, #0
 8016112:	d1e9      	bne.n	80160e8 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8016114:	6a3b      	ldr	r3, [r7, #32]
 8016116:	2b00      	cmp	r3, #0
 8016118:	d022      	beq.n	8016160 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801611a:	68fb      	ldr	r3, [r7, #12]
 801611c:	685b      	ldr	r3, [r3, #4]
 801611e:	2b00      	cmp	r3, #0
 8016120:	d106      	bne.n	8016130 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8016122:	4b15      	ldr	r3, [pc, #84]	; (8016178 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8016124:	f240 12df 	movw	r2, #479	; 0x1df
 8016128:	4917      	ldr	r1, [pc, #92]	; (8016188 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801612a:	4815      	ldr	r0, [pc, #84]	; (8016180 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801612c:	f000 fe98 	bl	8016e60 <iprintf>
          LWIP_ASSERT("sanity check",
 8016130:	68fb      	ldr	r3, [r7, #12]
 8016132:	685b      	ldr	r3, [r3, #4]
 8016134:	685b      	ldr	r3, [r3, #4]
 8016136:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016138:	429a      	cmp	r2, r3
 801613a:	d106      	bne.n	801614a <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 801613c:	4b0e      	ldr	r3, [pc, #56]	; (8016178 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801613e:	f240 12e1 	movw	r2, #481	; 0x1e1
 8016142:	4911      	ldr	r1, [pc, #68]	; (8016188 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8016144:	480e      	ldr	r0, [pc, #56]	; (8016180 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8016146:	f000 fe8b 	bl	8016e60 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801614a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801614c:	681b      	ldr	r3, [r3, #0]
 801614e:	2b00      	cmp	r3, #0
 8016150:	d006      	beq.n	8016160 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8016152:	4b09      	ldr	r3, [pc, #36]	; (8016178 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8016154:	f240 12e3 	movw	r2, #483	; 0x1e3
 8016158:	490c      	ldr	r1, [pc, #48]	; (801618c <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801615a:	4809      	ldr	r0, [pc, #36]	; (8016180 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801615c:	f000 fe80 	bl	8016e60 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8016160:	6a3b      	ldr	r3, [r7, #32]
 8016162:	2b00      	cmp	r3, #0
 8016164:	bf14      	ite	ne
 8016166:	2301      	movne	r3, #1
 8016168:	2300      	moveq	r3, #0
 801616a:	b2db      	uxtb	r3, r3
 801616c:	e000      	b.n	8016170 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801616e:	2300      	movs	r3, #0
}
 8016170:	4618      	mov	r0, r3
 8016172:	3730      	adds	r7, #48	; 0x30
 8016174:	46bd      	mov	sp, r7
 8016176:	bd80      	pop	{r7, pc}
 8016178:	0801b78c 	.word	0x0801b78c
 801617c:	0801b870 	.word	0x0801b870
 8016180:	0801b7d4 	.word	0x0801b7d4
 8016184:	0801b890 	.word	0x0801b890
 8016188:	0801b8c8 	.word	0x0801b8c8
 801618c:	0801b8d8 	.word	0x0801b8d8

08016190 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8016190:	b580      	push	{r7, lr}
 8016192:	b08e      	sub	sp, #56	; 0x38
 8016194:	af00      	add	r7, sp, #0
 8016196:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8016198:	687b      	ldr	r3, [r7, #4]
 801619a:	685b      	ldr	r3, [r3, #4]
 801619c:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801619e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80161a0:	781b      	ldrb	r3, [r3, #0]
 80161a2:	f003 030f 	and.w	r3, r3, #15
 80161a6:	b2db      	uxtb	r3, r3
 80161a8:	009b      	lsls	r3, r3, #2
 80161aa:	b2db      	uxtb	r3, r3
 80161ac:	2b14      	cmp	r3, #20
 80161ae:	f040 8167 	bne.w	8016480 <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 80161b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80161b4:	88db      	ldrh	r3, [r3, #6]
 80161b6:	b29b      	uxth	r3, r3
 80161b8:	4618      	mov	r0, r3
 80161ba:	f7f5 fb4d 	bl	800b858 <lwip_htons>
 80161be:	4603      	mov	r3, r0
 80161c0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80161c4:	b29b      	uxth	r3, r3
 80161c6:	00db      	lsls	r3, r3, #3
 80161c8:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80161ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80161cc:	885b      	ldrh	r3, [r3, #2]
 80161ce:	b29b      	uxth	r3, r3
 80161d0:	4618      	mov	r0, r3
 80161d2:	f7f5 fb41 	bl	800b858 <lwip_htons>
 80161d6:	4603      	mov	r3, r0
 80161d8:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 80161da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80161dc:	781b      	ldrb	r3, [r3, #0]
 80161de:	f003 030f 	and.w	r3, r3, #15
 80161e2:	b2db      	uxtb	r3, r3
 80161e4:	009b      	lsls	r3, r3, #2
 80161e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 80161ea:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80161ee:	b29b      	uxth	r3, r3
 80161f0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80161f2:	429a      	cmp	r2, r3
 80161f4:	f0c0 8146 	bcc.w	8016484 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 80161f8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80161fc:	b29b      	uxth	r3, r3
 80161fe:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8016200:	1ad3      	subs	r3, r2, r3
 8016202:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8016204:	6878      	ldr	r0, [r7, #4]
 8016206:	f7f6 ff8f 	bl	800d128 <pbuf_clen>
 801620a:	4603      	mov	r3, r0
 801620c:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801620e:	4ba3      	ldr	r3, [pc, #652]	; (801649c <ip4_reass+0x30c>)
 8016210:	881b      	ldrh	r3, [r3, #0]
 8016212:	461a      	mov	r2, r3
 8016214:	8c3b      	ldrh	r3, [r7, #32]
 8016216:	4413      	add	r3, r2
 8016218:	2b0a      	cmp	r3, #10
 801621a:	dd10      	ble.n	801623e <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801621c:	8c3b      	ldrh	r3, [r7, #32]
 801621e:	4619      	mov	r1, r3
 8016220:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016222:	f7ff fd81 	bl	8015d28 <ip_reass_remove_oldest_datagram>
 8016226:	4603      	mov	r3, r0
 8016228:	2b00      	cmp	r3, #0
 801622a:	f000 812d 	beq.w	8016488 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801622e:	4b9b      	ldr	r3, [pc, #620]	; (801649c <ip4_reass+0x30c>)
 8016230:	881b      	ldrh	r3, [r3, #0]
 8016232:	461a      	mov	r2, r3
 8016234:	8c3b      	ldrh	r3, [r7, #32]
 8016236:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8016238:	2b0a      	cmp	r3, #10
 801623a:	f300 8125 	bgt.w	8016488 <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801623e:	4b98      	ldr	r3, [pc, #608]	; (80164a0 <ip4_reass+0x310>)
 8016240:	681b      	ldr	r3, [r3, #0]
 8016242:	633b      	str	r3, [r7, #48]	; 0x30
 8016244:	e015      	b.n	8016272 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8016246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016248:	695a      	ldr	r2, [r3, #20]
 801624a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801624c:	68db      	ldr	r3, [r3, #12]
 801624e:	429a      	cmp	r2, r3
 8016250:	d10c      	bne.n	801626c <ip4_reass+0xdc>
 8016252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016254:	699a      	ldr	r2, [r3, #24]
 8016256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016258:	691b      	ldr	r3, [r3, #16]
 801625a:	429a      	cmp	r2, r3
 801625c:	d106      	bne.n	801626c <ip4_reass+0xdc>
 801625e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016260:	899a      	ldrh	r2, [r3, #12]
 8016262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016264:	889b      	ldrh	r3, [r3, #4]
 8016266:	b29b      	uxth	r3, r3
 8016268:	429a      	cmp	r2, r3
 801626a:	d006      	beq.n	801627a <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801626c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801626e:	681b      	ldr	r3, [r3, #0]
 8016270:	633b      	str	r3, [r7, #48]	; 0x30
 8016272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016274:	2b00      	cmp	r3, #0
 8016276:	d1e6      	bne.n	8016246 <ip4_reass+0xb6>
 8016278:	e000      	b.n	801627c <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801627a:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 801627c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801627e:	2b00      	cmp	r3, #0
 8016280:	d109      	bne.n	8016296 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8016282:	8c3b      	ldrh	r3, [r7, #32]
 8016284:	4619      	mov	r1, r3
 8016286:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016288:	f7ff fdb0 	bl	8015dec <ip_reass_enqueue_new_datagram>
 801628c:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801628e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016290:	2b00      	cmp	r3, #0
 8016292:	d11c      	bne.n	80162ce <ip4_reass+0x13e>
      goto nullreturn;
 8016294:	e0f9      	b.n	801648a <ip4_reass+0x2fa>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8016296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016298:	88db      	ldrh	r3, [r3, #6]
 801629a:	b29b      	uxth	r3, r3
 801629c:	4618      	mov	r0, r3
 801629e:	f7f5 fadb 	bl	800b858 <lwip_htons>
 80162a2:	4603      	mov	r3, r0
 80162a4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80162a8:	2b00      	cmp	r3, #0
 80162aa:	d110      	bne.n	80162ce <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 80162ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80162ae:	89db      	ldrh	r3, [r3, #14]
 80162b0:	4618      	mov	r0, r3
 80162b2:	f7f5 fad1 	bl	800b858 <lwip_htons>
 80162b6:	4603      	mov	r3, r0
 80162b8:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80162bc:	2b00      	cmp	r3, #0
 80162be:	d006      	beq.n	80162ce <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 80162c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80162c2:	3308      	adds	r3, #8
 80162c4:	2214      	movs	r2, #20
 80162c6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80162c8:	4618      	mov	r0, r3
 80162ca:	f000 fd9c 	bl	8016e06 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 80162ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80162d0:	88db      	ldrh	r3, [r3, #6]
 80162d2:	b29b      	uxth	r3, r3
 80162d4:	f003 0320 	and.w	r3, r3, #32
 80162d8:	2b00      	cmp	r3, #0
 80162da:	bf0c      	ite	eq
 80162dc:	2301      	moveq	r3, #1
 80162de:	2300      	movne	r3, #0
 80162e0:	b2db      	uxtb	r3, r3
 80162e2:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 80162e4:	69fb      	ldr	r3, [r7, #28]
 80162e6:	2b00      	cmp	r3, #0
 80162e8:	d00e      	beq.n	8016308 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 80162ea:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80162ec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80162ee:	4413      	add	r3, r2
 80162f0:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 80162f2:	8b7a      	ldrh	r2, [r7, #26]
 80162f4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80162f6:	429a      	cmp	r2, r3
 80162f8:	f0c0 80a0 	bcc.w	801643c <ip4_reass+0x2ac>
 80162fc:	8b7b      	ldrh	r3, [r7, #26]
 80162fe:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8016302:	4293      	cmp	r3, r2
 8016304:	f200 809a 	bhi.w	801643c <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8016308:	69fa      	ldr	r2, [r7, #28]
 801630a:	6879      	ldr	r1, [r7, #4]
 801630c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801630e:	f7ff fdd5 	bl	8015ebc <ip_reass_chain_frag_into_datagram_and_validate>
 8016312:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8016314:	697b      	ldr	r3, [r7, #20]
 8016316:	f1b3 3fff 	cmp.w	r3, #4294967295
 801631a:	f000 8091 	beq.w	8016440 <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801631e:	4b5f      	ldr	r3, [pc, #380]	; (801649c <ip4_reass+0x30c>)
 8016320:	881a      	ldrh	r2, [r3, #0]
 8016322:	8c3b      	ldrh	r3, [r7, #32]
 8016324:	4413      	add	r3, r2
 8016326:	b29a      	uxth	r2, r3
 8016328:	4b5c      	ldr	r3, [pc, #368]	; (801649c <ip4_reass+0x30c>)
 801632a:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 801632c:	69fb      	ldr	r3, [r7, #28]
 801632e:	2b00      	cmp	r3, #0
 8016330:	d00d      	beq.n	801634e <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8016332:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8016334:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016336:	4413      	add	r3, r2
 8016338:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801633a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801633c:	8a7a      	ldrh	r2, [r7, #18]
 801633e:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8016340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016342:	7f9b      	ldrb	r3, [r3, #30]
 8016344:	f043 0301 	orr.w	r3, r3, #1
 8016348:	b2da      	uxtb	r2, r3
 801634a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801634c:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801634e:	697b      	ldr	r3, [r7, #20]
 8016350:	2b01      	cmp	r3, #1
 8016352:	d171      	bne.n	8016438 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8016354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016356:	8b9b      	ldrh	r3, [r3, #28]
 8016358:	3314      	adds	r3, #20
 801635a:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 801635c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801635e:	685b      	ldr	r3, [r3, #4]
 8016360:	685b      	ldr	r3, [r3, #4]
 8016362:	681b      	ldr	r3, [r3, #0]
 8016364:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8016366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016368:	685b      	ldr	r3, [r3, #4]
 801636a:	685b      	ldr	r3, [r3, #4]
 801636c:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801636e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016370:	3308      	adds	r3, #8
 8016372:	2214      	movs	r2, #20
 8016374:	4619      	mov	r1, r3
 8016376:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016378:	f000 fd45 	bl	8016e06 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 801637c:	8a3b      	ldrh	r3, [r7, #16]
 801637e:	4618      	mov	r0, r3
 8016380:	f7f5 fa6a 	bl	800b858 <lwip_htons>
 8016384:	4603      	mov	r3, r0
 8016386:	461a      	mov	r2, r3
 8016388:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801638a:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 801638c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801638e:	2200      	movs	r2, #0
 8016390:	719a      	strb	r2, [r3, #6]
 8016392:	2200      	movs	r2, #0
 8016394:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8016396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016398:	2200      	movs	r2, #0
 801639a:	729a      	strb	r2, [r3, #10]
 801639c:	2200      	movs	r2, #0
 801639e:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 80163a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80163a2:	685b      	ldr	r3, [r3, #4]
 80163a4:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 80163a6:	e00d      	b.n	80163c4 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 80163a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80163aa:	685b      	ldr	r3, [r3, #4]
 80163ac:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 80163ae:	2114      	movs	r1, #20
 80163b0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80163b2:	f7f6 fd73 	bl	800ce9c <pbuf_remove_header>
      pbuf_cat(p, r);
 80163b6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80163b8:	6878      	ldr	r0, [r7, #4]
 80163ba:	f7f6 fef5 	bl	800d1a8 <pbuf_cat>
      r = iprh->next_pbuf;
 80163be:	68fb      	ldr	r3, [r7, #12]
 80163c0:	681b      	ldr	r3, [r3, #0]
 80163c2:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 80163c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80163c6:	2b00      	cmp	r3, #0
 80163c8:	d1ee      	bne.n	80163a8 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 80163ca:	4b35      	ldr	r3, [pc, #212]	; (80164a0 <ip4_reass+0x310>)
 80163cc:	681b      	ldr	r3, [r3, #0]
 80163ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80163d0:	429a      	cmp	r2, r3
 80163d2:	d102      	bne.n	80163da <ip4_reass+0x24a>
      ipr_prev = NULL;
 80163d4:	2300      	movs	r3, #0
 80163d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80163d8:	e010      	b.n	80163fc <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80163da:	4b31      	ldr	r3, [pc, #196]	; (80164a0 <ip4_reass+0x310>)
 80163dc:	681b      	ldr	r3, [r3, #0]
 80163de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80163e0:	e007      	b.n	80163f2 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 80163e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80163e4:	681b      	ldr	r3, [r3, #0]
 80163e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80163e8:	429a      	cmp	r2, r3
 80163ea:	d006      	beq.n	80163fa <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80163ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80163ee:	681b      	ldr	r3, [r3, #0]
 80163f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80163f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80163f4:	2b00      	cmp	r3, #0
 80163f6:	d1f4      	bne.n	80163e2 <ip4_reass+0x252>
 80163f8:	e000      	b.n	80163fc <ip4_reass+0x26c>
          break;
 80163fa:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 80163fc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80163fe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016400:	f7ff fd2e 	bl	8015e60 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8016404:	6878      	ldr	r0, [r7, #4]
 8016406:	f7f6 fe8f 	bl	800d128 <pbuf_clen>
 801640a:	4603      	mov	r3, r0
 801640c:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801640e:	4b23      	ldr	r3, [pc, #140]	; (801649c <ip4_reass+0x30c>)
 8016410:	881b      	ldrh	r3, [r3, #0]
 8016412:	8c3a      	ldrh	r2, [r7, #32]
 8016414:	429a      	cmp	r2, r3
 8016416:	d906      	bls.n	8016426 <ip4_reass+0x296>
 8016418:	4b22      	ldr	r3, [pc, #136]	; (80164a4 <ip4_reass+0x314>)
 801641a:	f240 229b 	movw	r2, #667	; 0x29b
 801641e:	4922      	ldr	r1, [pc, #136]	; (80164a8 <ip4_reass+0x318>)
 8016420:	4822      	ldr	r0, [pc, #136]	; (80164ac <ip4_reass+0x31c>)
 8016422:	f000 fd1d 	bl	8016e60 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8016426:	4b1d      	ldr	r3, [pc, #116]	; (801649c <ip4_reass+0x30c>)
 8016428:	881a      	ldrh	r2, [r3, #0]
 801642a:	8c3b      	ldrh	r3, [r7, #32]
 801642c:	1ad3      	subs	r3, r2, r3
 801642e:	b29a      	uxth	r2, r3
 8016430:	4b1a      	ldr	r3, [pc, #104]	; (801649c <ip4_reass+0x30c>)
 8016432:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8016434:	687b      	ldr	r3, [r7, #4]
 8016436:	e02c      	b.n	8016492 <ip4_reass+0x302>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8016438:	2300      	movs	r3, #0
 801643a:	e02a      	b.n	8016492 <ip4_reass+0x302>

nullreturn_ipr:
 801643c:	bf00      	nop
 801643e:	e000      	b.n	8016442 <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 8016440:	bf00      	nop
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8016442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016444:	2b00      	cmp	r3, #0
 8016446:	d106      	bne.n	8016456 <ip4_reass+0x2c6>
 8016448:	4b16      	ldr	r3, [pc, #88]	; (80164a4 <ip4_reass+0x314>)
 801644a:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 801644e:	4918      	ldr	r1, [pc, #96]	; (80164b0 <ip4_reass+0x320>)
 8016450:	4816      	ldr	r0, [pc, #88]	; (80164ac <ip4_reass+0x31c>)
 8016452:	f000 fd05 	bl	8016e60 <iprintf>
  if (ipr->p == NULL) {
 8016456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016458:	685b      	ldr	r3, [r3, #4]
 801645a:	2b00      	cmp	r3, #0
 801645c:	d114      	bne.n	8016488 <ip4_reass+0x2f8>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801645e:	4b10      	ldr	r3, [pc, #64]	; (80164a0 <ip4_reass+0x310>)
 8016460:	681b      	ldr	r3, [r3, #0]
 8016462:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016464:	429a      	cmp	r2, r3
 8016466:	d006      	beq.n	8016476 <ip4_reass+0x2e6>
 8016468:	4b0e      	ldr	r3, [pc, #56]	; (80164a4 <ip4_reass+0x314>)
 801646a:	f240 22ab 	movw	r2, #683	; 0x2ab
 801646e:	4911      	ldr	r1, [pc, #68]	; (80164b4 <ip4_reass+0x324>)
 8016470:	480e      	ldr	r0, [pc, #56]	; (80164ac <ip4_reass+0x31c>)
 8016472:	f000 fcf5 	bl	8016e60 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8016476:	2100      	movs	r1, #0
 8016478:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801647a:	f7ff fcf1 	bl	8015e60 <ip_reass_dequeue_datagram>
 801647e:	e004      	b.n	801648a <ip4_reass+0x2fa>
    goto nullreturn;
 8016480:	bf00      	nop
 8016482:	e002      	b.n	801648a <ip4_reass+0x2fa>
    goto nullreturn;
 8016484:	bf00      	nop
 8016486:	e000      	b.n	801648a <ip4_reass+0x2fa>
  }

nullreturn:
 8016488:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801648a:	6878      	ldr	r0, [r7, #4]
 801648c:	f7f6 fdbe 	bl	800d00c <pbuf_free>
  return NULL;
 8016490:	2300      	movs	r3, #0
}
 8016492:	4618      	mov	r0, r3
 8016494:	3738      	adds	r7, #56	; 0x38
 8016496:	46bd      	mov	sp, r7
 8016498:	bd80      	pop	{r7, pc}
 801649a:	bf00      	nop
 801649c:	200048fc 	.word	0x200048fc
 80164a0:	200048f8 	.word	0x200048f8
 80164a4:	0801b78c 	.word	0x0801b78c
 80164a8:	0801b8fc 	.word	0x0801b8fc
 80164ac:	0801b7d4 	.word	0x0801b7d4
 80164b0:	0801b918 	.word	0x0801b918
 80164b4:	0801b924 	.word	0x0801b924

080164b8 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 80164b8:	b580      	push	{r7, lr}
 80164ba:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 80164bc:	2005      	movs	r0, #5
 80164be:	f7f5 fe81 	bl	800c1c4 <memp_malloc>
 80164c2:	4603      	mov	r3, r0
}
 80164c4:	4618      	mov	r0, r3
 80164c6:	bd80      	pop	{r7, pc}

080164c8 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 80164c8:	b580      	push	{r7, lr}
 80164ca:	b082      	sub	sp, #8
 80164cc:	af00      	add	r7, sp, #0
 80164ce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 80164d0:	687b      	ldr	r3, [r7, #4]
 80164d2:	2b00      	cmp	r3, #0
 80164d4:	d106      	bne.n	80164e4 <ip_frag_free_pbuf_custom_ref+0x1c>
 80164d6:	4b07      	ldr	r3, [pc, #28]	; (80164f4 <ip_frag_free_pbuf_custom_ref+0x2c>)
 80164d8:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 80164dc:	4906      	ldr	r1, [pc, #24]	; (80164f8 <ip_frag_free_pbuf_custom_ref+0x30>)
 80164de:	4807      	ldr	r0, [pc, #28]	; (80164fc <ip_frag_free_pbuf_custom_ref+0x34>)
 80164e0:	f000 fcbe 	bl	8016e60 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 80164e4:	6879      	ldr	r1, [r7, #4]
 80164e6:	2005      	movs	r0, #5
 80164e8:	f7f5 febe 	bl	800c268 <memp_free>
}
 80164ec:	bf00      	nop
 80164ee:	3708      	adds	r7, #8
 80164f0:	46bd      	mov	sp, r7
 80164f2:	bd80      	pop	{r7, pc}
 80164f4:	0801b78c 	.word	0x0801b78c
 80164f8:	0801b944 	.word	0x0801b944
 80164fc:	0801b7d4 	.word	0x0801b7d4

08016500 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8016500:	b580      	push	{r7, lr}
 8016502:	b084      	sub	sp, #16
 8016504:	af00      	add	r7, sp, #0
 8016506:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8016508:	687b      	ldr	r3, [r7, #4]
 801650a:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801650c:	68fb      	ldr	r3, [r7, #12]
 801650e:	2b00      	cmp	r3, #0
 8016510:	d106      	bne.n	8016520 <ipfrag_free_pbuf_custom+0x20>
 8016512:	4b11      	ldr	r3, [pc, #68]	; (8016558 <ipfrag_free_pbuf_custom+0x58>)
 8016514:	f240 22ce 	movw	r2, #718	; 0x2ce
 8016518:	4910      	ldr	r1, [pc, #64]	; (801655c <ipfrag_free_pbuf_custom+0x5c>)
 801651a:	4811      	ldr	r0, [pc, #68]	; (8016560 <ipfrag_free_pbuf_custom+0x60>)
 801651c:	f000 fca0 	bl	8016e60 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8016520:	68fa      	ldr	r2, [r7, #12]
 8016522:	687b      	ldr	r3, [r7, #4]
 8016524:	429a      	cmp	r2, r3
 8016526:	d006      	beq.n	8016536 <ipfrag_free_pbuf_custom+0x36>
 8016528:	4b0b      	ldr	r3, [pc, #44]	; (8016558 <ipfrag_free_pbuf_custom+0x58>)
 801652a:	f240 22cf 	movw	r2, #719	; 0x2cf
 801652e:	490d      	ldr	r1, [pc, #52]	; (8016564 <ipfrag_free_pbuf_custom+0x64>)
 8016530:	480b      	ldr	r0, [pc, #44]	; (8016560 <ipfrag_free_pbuf_custom+0x60>)
 8016532:	f000 fc95 	bl	8016e60 <iprintf>
  if (pcr->original != NULL) {
 8016536:	68fb      	ldr	r3, [r7, #12]
 8016538:	695b      	ldr	r3, [r3, #20]
 801653a:	2b00      	cmp	r3, #0
 801653c:	d004      	beq.n	8016548 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801653e:	68fb      	ldr	r3, [r7, #12]
 8016540:	695b      	ldr	r3, [r3, #20]
 8016542:	4618      	mov	r0, r3
 8016544:	f7f6 fd62 	bl	800d00c <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8016548:	68f8      	ldr	r0, [r7, #12]
 801654a:	f7ff ffbd 	bl	80164c8 <ip_frag_free_pbuf_custom_ref>
}
 801654e:	bf00      	nop
 8016550:	3710      	adds	r7, #16
 8016552:	46bd      	mov	sp, r7
 8016554:	bd80      	pop	{r7, pc}
 8016556:	bf00      	nop
 8016558:	0801b78c 	.word	0x0801b78c
 801655c:	0801b950 	.word	0x0801b950
 8016560:	0801b7d4 	.word	0x0801b7d4
 8016564:	0801b95c 	.word	0x0801b95c

08016568 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8016568:	b580      	push	{r7, lr}
 801656a:	b094      	sub	sp, #80	; 0x50
 801656c:	af02      	add	r7, sp, #8
 801656e:	60f8      	str	r0, [r7, #12]
 8016570:	60b9      	str	r1, [r7, #8]
 8016572:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8016574:	2300      	movs	r3, #0
 8016576:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801657a:	68bb      	ldr	r3, [r7, #8]
 801657c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801657e:	3b14      	subs	r3, #20
 8016580:	2b00      	cmp	r3, #0
 8016582:	da00      	bge.n	8016586 <ip4_frag+0x1e>
 8016584:	3307      	adds	r3, #7
 8016586:	10db      	asrs	r3, r3, #3
 8016588:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801658a:	2314      	movs	r3, #20
 801658c:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801658e:	68fb      	ldr	r3, [r7, #12]
 8016590:	685b      	ldr	r3, [r3, #4]
 8016592:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8016594:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016596:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8016598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801659a:	781b      	ldrb	r3, [r3, #0]
 801659c:	f003 030f 	and.w	r3, r3, #15
 80165a0:	b2db      	uxtb	r3, r3
 80165a2:	009b      	lsls	r3, r3, #2
 80165a4:	b2db      	uxtb	r3, r3
 80165a6:	2b14      	cmp	r3, #20
 80165a8:	d002      	beq.n	80165b0 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 80165aa:	f06f 0305 	mvn.w	r3, #5
 80165ae:	e10f      	b.n	80167d0 <ip4_frag+0x268>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 80165b0:	68fb      	ldr	r3, [r7, #12]
 80165b2:	895b      	ldrh	r3, [r3, #10]
 80165b4:	2b13      	cmp	r3, #19
 80165b6:	d809      	bhi.n	80165cc <ip4_frag+0x64>
 80165b8:	4b87      	ldr	r3, [pc, #540]	; (80167d8 <ip4_frag+0x270>)
 80165ba:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 80165be:	4987      	ldr	r1, [pc, #540]	; (80167dc <ip4_frag+0x274>)
 80165c0:	4887      	ldr	r0, [pc, #540]	; (80167e0 <ip4_frag+0x278>)
 80165c2:	f000 fc4d 	bl	8016e60 <iprintf>
 80165c6:	f06f 0305 	mvn.w	r3, #5
 80165ca:	e101      	b.n	80167d0 <ip4_frag+0x268>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 80165cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80165ce:	88db      	ldrh	r3, [r3, #6]
 80165d0:	b29b      	uxth	r3, r3
 80165d2:	4618      	mov	r0, r3
 80165d4:	f7f5 f940 	bl	800b858 <lwip_htons>
 80165d8:	4603      	mov	r3, r0
 80165da:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 80165dc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80165de:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80165e2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 80165e6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80165e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80165ec:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 80165ee:	68fb      	ldr	r3, [r7, #12]
 80165f0:	891b      	ldrh	r3, [r3, #8]
 80165f2:	3b14      	subs	r3, #20
 80165f4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 80165f8:	e0e0      	b.n	80167bc <ip4_frag+0x254>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 80165fa:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80165fc:	00db      	lsls	r3, r3, #3
 80165fe:	b29b      	uxth	r3, r3
 8016600:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8016604:	4293      	cmp	r3, r2
 8016606:	bf28      	it	cs
 8016608:	4613      	movcs	r3, r2
 801660a:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801660c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8016610:	2114      	movs	r1, #20
 8016612:	200e      	movs	r0, #14
 8016614:	f7f6 f9e8 	bl	800c9e8 <pbuf_alloc>
 8016618:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 801661a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801661c:	2b00      	cmp	r3, #0
 801661e:	f000 80d4 	beq.w	80167ca <ip4_frag+0x262>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8016622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016624:	895b      	ldrh	r3, [r3, #10]
 8016626:	2b13      	cmp	r3, #19
 8016628:	d806      	bhi.n	8016638 <ip4_frag+0xd0>
 801662a:	4b6b      	ldr	r3, [pc, #428]	; (80167d8 <ip4_frag+0x270>)
 801662c:	f240 3225 	movw	r2, #805	; 0x325
 8016630:	496c      	ldr	r1, [pc, #432]	; (80167e4 <ip4_frag+0x27c>)
 8016632:	486b      	ldr	r0, [pc, #428]	; (80167e0 <ip4_frag+0x278>)
 8016634:	f000 fc14 	bl	8016e60 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8016638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801663a:	685b      	ldr	r3, [r3, #4]
 801663c:	2214      	movs	r2, #20
 801663e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8016640:	4618      	mov	r0, r3
 8016642:	f000 fbe0 	bl	8016e06 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8016646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016648:	685b      	ldr	r3, [r3, #4]
 801664a:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 801664c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801664e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8016652:	e064      	b.n	801671e <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8016654:	68fb      	ldr	r3, [r7, #12]
 8016656:	895a      	ldrh	r2, [r3, #10]
 8016658:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801665a:	1ad3      	subs	r3, r2, r3
 801665c:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801665e:	68fb      	ldr	r3, [r7, #12]
 8016660:	895b      	ldrh	r3, [r3, #10]
 8016662:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8016664:	429a      	cmp	r2, r3
 8016666:	d906      	bls.n	8016676 <ip4_frag+0x10e>
 8016668:	4b5b      	ldr	r3, [pc, #364]	; (80167d8 <ip4_frag+0x270>)
 801666a:	f240 322d 	movw	r2, #813	; 0x32d
 801666e:	495e      	ldr	r1, [pc, #376]	; (80167e8 <ip4_frag+0x280>)
 8016670:	485b      	ldr	r0, [pc, #364]	; (80167e0 <ip4_frag+0x278>)
 8016672:	f000 fbf5 	bl	8016e60 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8016676:	8bfa      	ldrh	r2, [r7, #30]
 8016678:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801667c:	4293      	cmp	r3, r2
 801667e:	bf28      	it	cs
 8016680:	4613      	movcs	r3, r2
 8016682:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8016686:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801668a:	2b00      	cmp	r3, #0
 801668c:	d105      	bne.n	801669a <ip4_frag+0x132>
        poff = 0;
 801668e:	2300      	movs	r3, #0
 8016690:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8016692:	68fb      	ldr	r3, [r7, #12]
 8016694:	681b      	ldr	r3, [r3, #0]
 8016696:	60fb      	str	r3, [r7, #12]
        continue;
 8016698:	e041      	b.n	801671e <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801669a:	f7ff ff0d 	bl	80164b8 <ip_frag_alloc_pbuf_custom_ref>
 801669e:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 80166a0:	69bb      	ldr	r3, [r7, #24]
 80166a2:	2b00      	cmp	r3, #0
 80166a4:	d103      	bne.n	80166ae <ip4_frag+0x146>
        pbuf_free(rambuf);
 80166a6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80166a8:	f7f6 fcb0 	bl	800d00c <pbuf_free>
        goto memerr;
 80166ac:	e08e      	b.n	80167cc <ip4_frag+0x264>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80166ae:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 80166b0:	68fb      	ldr	r3, [r7, #12]
 80166b2:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80166b4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80166b6:	4413      	add	r3, r2
 80166b8:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 80166bc:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80166c0:	9201      	str	r2, [sp, #4]
 80166c2:	9300      	str	r3, [sp, #0]
 80166c4:	4603      	mov	r3, r0
 80166c6:	2241      	movs	r2, #65	; 0x41
 80166c8:	2000      	movs	r0, #0
 80166ca:	f7f6 fab3 	bl	800cc34 <pbuf_alloced_custom>
 80166ce:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 80166d0:	697b      	ldr	r3, [r7, #20]
 80166d2:	2b00      	cmp	r3, #0
 80166d4:	d106      	bne.n	80166e4 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 80166d6:	69b8      	ldr	r0, [r7, #24]
 80166d8:	f7ff fef6 	bl	80164c8 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 80166dc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80166de:	f7f6 fc95 	bl	800d00c <pbuf_free>
        goto memerr;
 80166e2:	e073      	b.n	80167cc <ip4_frag+0x264>
      }
      pbuf_ref(p);
 80166e4:	68f8      	ldr	r0, [r7, #12]
 80166e6:	f7f6 fd37 	bl	800d158 <pbuf_ref>
      pcr->original = p;
 80166ea:	69bb      	ldr	r3, [r7, #24]
 80166ec:	68fa      	ldr	r2, [r7, #12]
 80166ee:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 80166f0:	69bb      	ldr	r3, [r7, #24]
 80166f2:	4a3e      	ldr	r2, [pc, #248]	; (80167ec <ip4_frag+0x284>)
 80166f4:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 80166f6:	6979      	ldr	r1, [r7, #20]
 80166f8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80166fa:	f7f6 fd55 	bl	800d1a8 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 80166fe:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8016702:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8016706:	1ad3      	subs	r3, r2, r3
 8016708:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 801670c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8016710:	2b00      	cmp	r3, #0
 8016712:	d004      	beq.n	801671e <ip4_frag+0x1b6>
        poff = 0;
 8016714:	2300      	movs	r3, #0
 8016716:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8016718:	68fb      	ldr	r3, [r7, #12]
 801671a:	681b      	ldr	r3, [r3, #0]
 801671c:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801671e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8016722:	2b00      	cmp	r3, #0
 8016724:	d196      	bne.n	8016654 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8016726:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8016728:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801672c:	4413      	add	r3, r2
 801672e:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8016730:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8016734:	68bb      	ldr	r3, [r7, #8]
 8016736:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8016738:	3b14      	subs	r3, #20
 801673a:	429a      	cmp	r2, r3
 801673c:	bfd4      	ite	le
 801673e:	2301      	movle	r3, #1
 8016740:	2300      	movgt	r3, #0
 8016742:	b2db      	uxtb	r3, r3
 8016744:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8016746:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801674a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801674e:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8016750:	6a3b      	ldr	r3, [r7, #32]
 8016752:	2b00      	cmp	r3, #0
 8016754:	d002      	beq.n	801675c <ip4_frag+0x1f4>
 8016756:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016758:	2b00      	cmp	r3, #0
 801675a:	d003      	beq.n	8016764 <ip4_frag+0x1fc>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801675c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801675e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8016762:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8016764:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8016766:	4618      	mov	r0, r3
 8016768:	f7f5 f876 	bl	800b858 <lwip_htons>
 801676c:	4603      	mov	r3, r0
 801676e:	461a      	mov	r2, r3
 8016770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016772:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8016774:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8016776:	3314      	adds	r3, #20
 8016778:	b29b      	uxth	r3, r3
 801677a:	4618      	mov	r0, r3
 801677c:	f7f5 f86c 	bl	800b858 <lwip_htons>
 8016780:	4603      	mov	r3, r0
 8016782:	461a      	mov	r2, r3
 8016784:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016786:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8016788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801678a:	2200      	movs	r2, #0
 801678c:	729a      	strb	r2, [r3, #10]
 801678e:	2200      	movs	r2, #0
 8016790:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8016792:	68bb      	ldr	r3, [r7, #8]
 8016794:	695b      	ldr	r3, [r3, #20]
 8016796:	687a      	ldr	r2, [r7, #4]
 8016798:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801679a:	68b8      	ldr	r0, [r7, #8]
 801679c:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 801679e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80167a0:	f7f6 fc34 	bl	800d00c <pbuf_free>
    left = (u16_t)(left - fragsize);
 80167a4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80167a8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80167aa:	1ad3      	subs	r3, r2, r3
 80167ac:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 80167b0:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80167b4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80167b6:	4413      	add	r3, r2
 80167b8:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 80167bc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80167c0:	2b00      	cmp	r3, #0
 80167c2:	f47f af1a 	bne.w	80165fa <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 80167c6:	2300      	movs	r3, #0
 80167c8:	e002      	b.n	80167d0 <ip4_frag+0x268>
      goto memerr;
 80167ca:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 80167cc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80167d0:	4618      	mov	r0, r3
 80167d2:	3748      	adds	r7, #72	; 0x48
 80167d4:	46bd      	mov	sp, r7
 80167d6:	bd80      	pop	{r7, pc}
 80167d8:	0801b78c 	.word	0x0801b78c
 80167dc:	0801b968 	.word	0x0801b968
 80167e0:	0801b7d4 	.word	0x0801b7d4
 80167e4:	0801b984 	.word	0x0801b984
 80167e8:	0801b9a4 	.word	0x0801b9a4
 80167ec:	08016501 	.word	0x08016501

080167f0 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 80167f0:	b580      	push	{r7, lr}
 80167f2:	b086      	sub	sp, #24
 80167f4:	af00      	add	r7, sp, #0
 80167f6:	6078      	str	r0, [r7, #4]
 80167f8:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 80167fa:	230e      	movs	r3, #14
 80167fc:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 80167fe:	687b      	ldr	r3, [r7, #4]
 8016800:	895b      	ldrh	r3, [r3, #10]
 8016802:	2b0e      	cmp	r3, #14
 8016804:	d96e      	bls.n	80168e4 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8016806:	687b      	ldr	r3, [r7, #4]
 8016808:	7bdb      	ldrb	r3, [r3, #15]
 801680a:	2b00      	cmp	r3, #0
 801680c:	d106      	bne.n	801681c <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801680e:	683b      	ldr	r3, [r7, #0]
 8016810:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8016814:	3301      	adds	r3, #1
 8016816:	b2da      	uxtb	r2, r3
 8016818:	687b      	ldr	r3, [r7, #4]
 801681a:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801681c:	687b      	ldr	r3, [r7, #4]
 801681e:	685b      	ldr	r3, [r3, #4]
 8016820:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8016822:	693b      	ldr	r3, [r7, #16]
 8016824:	7b1a      	ldrb	r2, [r3, #12]
 8016826:	7b5b      	ldrb	r3, [r3, #13]
 8016828:	021b      	lsls	r3, r3, #8
 801682a:	4313      	orrs	r3, r2
 801682c:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801682e:	693b      	ldr	r3, [r7, #16]
 8016830:	781b      	ldrb	r3, [r3, #0]
 8016832:	f003 0301 	and.w	r3, r3, #1
 8016836:	2b00      	cmp	r3, #0
 8016838:	d023      	beq.n	8016882 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801683a:	693b      	ldr	r3, [r7, #16]
 801683c:	781b      	ldrb	r3, [r3, #0]
 801683e:	2b01      	cmp	r3, #1
 8016840:	d10f      	bne.n	8016862 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8016842:	693b      	ldr	r3, [r7, #16]
 8016844:	785b      	ldrb	r3, [r3, #1]
 8016846:	2b00      	cmp	r3, #0
 8016848:	d11b      	bne.n	8016882 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801684a:	693b      	ldr	r3, [r7, #16]
 801684c:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801684e:	2b5e      	cmp	r3, #94	; 0x5e
 8016850:	d117      	bne.n	8016882 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8016852:	687b      	ldr	r3, [r7, #4]
 8016854:	7b5b      	ldrb	r3, [r3, #13]
 8016856:	f043 0310 	orr.w	r3, r3, #16
 801685a:	b2da      	uxtb	r2, r3
 801685c:	687b      	ldr	r3, [r7, #4]
 801685e:	735a      	strb	r2, [r3, #13]
 8016860:	e00f      	b.n	8016882 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8016862:	693b      	ldr	r3, [r7, #16]
 8016864:	2206      	movs	r2, #6
 8016866:	4928      	ldr	r1, [pc, #160]	; (8016908 <ethernet_input+0x118>)
 8016868:	4618      	mov	r0, r3
 801686a:	f000 fabd 	bl	8016de8 <memcmp>
 801686e:	4603      	mov	r3, r0
 8016870:	2b00      	cmp	r3, #0
 8016872:	d106      	bne.n	8016882 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8016874:	687b      	ldr	r3, [r7, #4]
 8016876:	7b5b      	ldrb	r3, [r3, #13]
 8016878:	f043 0308 	orr.w	r3, r3, #8
 801687c:	b2da      	uxtb	r2, r3
 801687e:	687b      	ldr	r3, [r7, #4]
 8016880:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8016882:	89fb      	ldrh	r3, [r7, #14]
 8016884:	2b08      	cmp	r3, #8
 8016886:	d003      	beq.n	8016890 <ethernet_input+0xa0>
 8016888:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 801688c:	d014      	beq.n	80168b8 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801688e:	e032      	b.n	80168f6 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8016890:	683b      	ldr	r3, [r7, #0]
 8016892:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016896:	f003 0308 	and.w	r3, r3, #8
 801689a:	2b00      	cmp	r3, #0
 801689c:	d024      	beq.n	80168e8 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801689e:	8afb      	ldrh	r3, [r7, #22]
 80168a0:	4619      	mov	r1, r3
 80168a2:	6878      	ldr	r0, [r7, #4]
 80168a4:	f7f6 fafa 	bl	800ce9c <pbuf_remove_header>
 80168a8:	4603      	mov	r3, r0
 80168aa:	2b00      	cmp	r3, #0
 80168ac:	d11e      	bne.n	80168ec <ethernet_input+0xfc>
        ip4_input(p, netif);
 80168ae:	6839      	ldr	r1, [r7, #0]
 80168b0:	6878      	ldr	r0, [r7, #4]
 80168b2:	f7fe fde7 	bl	8015484 <ip4_input>
      break;
 80168b6:	e013      	b.n	80168e0 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80168b8:	683b      	ldr	r3, [r7, #0]
 80168ba:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80168be:	f003 0308 	and.w	r3, r3, #8
 80168c2:	2b00      	cmp	r3, #0
 80168c4:	d014      	beq.n	80168f0 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80168c6:	8afb      	ldrh	r3, [r7, #22]
 80168c8:	4619      	mov	r1, r3
 80168ca:	6878      	ldr	r0, [r7, #4]
 80168cc:	f7f6 fae6 	bl	800ce9c <pbuf_remove_header>
 80168d0:	4603      	mov	r3, r0
 80168d2:	2b00      	cmp	r3, #0
 80168d4:	d10e      	bne.n	80168f4 <ethernet_input+0x104>
        etharp_input(p, netif);
 80168d6:	6839      	ldr	r1, [r7, #0]
 80168d8:	6878      	ldr	r0, [r7, #4]
 80168da:	f7fd ff87 	bl	80147ec <etharp_input>
      break;
 80168de:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 80168e0:	2300      	movs	r3, #0
 80168e2:	e00c      	b.n	80168fe <ethernet_input+0x10e>
    goto free_and_return;
 80168e4:	bf00      	nop
 80168e6:	e006      	b.n	80168f6 <ethernet_input+0x106>
        goto free_and_return;
 80168e8:	bf00      	nop
 80168ea:	e004      	b.n	80168f6 <ethernet_input+0x106>
        goto free_and_return;
 80168ec:	bf00      	nop
 80168ee:	e002      	b.n	80168f6 <ethernet_input+0x106>
        goto free_and_return;
 80168f0:	bf00      	nop
 80168f2:	e000      	b.n	80168f6 <ethernet_input+0x106>
        goto free_and_return;
 80168f4:	bf00      	nop

free_and_return:
  pbuf_free(p);
 80168f6:	6878      	ldr	r0, [r7, #4]
 80168f8:	f7f6 fb88 	bl	800d00c <pbuf_free>
  return ERR_OK;
 80168fc:	2300      	movs	r3, #0
}
 80168fe:	4618      	mov	r0, r3
 8016900:	3718      	adds	r7, #24
 8016902:	46bd      	mov	sp, r7
 8016904:	bd80      	pop	{r7, pc}
 8016906:	bf00      	nop
 8016908:	0801bbbc 	.word	0x0801bbbc

0801690c <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 801690c:	b580      	push	{r7, lr}
 801690e:	b086      	sub	sp, #24
 8016910:	af00      	add	r7, sp, #0
 8016912:	60f8      	str	r0, [r7, #12]
 8016914:	60b9      	str	r1, [r7, #8]
 8016916:	607a      	str	r2, [r7, #4]
 8016918:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801691a:	8c3b      	ldrh	r3, [r7, #32]
 801691c:	4618      	mov	r0, r3
 801691e:	f7f4 ff9b 	bl	800b858 <lwip_htons>
 8016922:	4603      	mov	r3, r0
 8016924:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8016926:	210e      	movs	r1, #14
 8016928:	68b8      	ldr	r0, [r7, #8]
 801692a:	f7f6 faa7 	bl	800ce7c <pbuf_add_header>
 801692e:	4603      	mov	r3, r0
 8016930:	2b00      	cmp	r3, #0
 8016932:	d125      	bne.n	8016980 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8016934:	68bb      	ldr	r3, [r7, #8]
 8016936:	685b      	ldr	r3, [r3, #4]
 8016938:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801693a:	693b      	ldr	r3, [r7, #16]
 801693c:	8afa      	ldrh	r2, [r7, #22]
 801693e:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8016940:	693b      	ldr	r3, [r7, #16]
 8016942:	2206      	movs	r2, #6
 8016944:	6839      	ldr	r1, [r7, #0]
 8016946:	4618      	mov	r0, r3
 8016948:	f000 fa5d 	bl	8016e06 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 801694c:	693b      	ldr	r3, [r7, #16]
 801694e:	3306      	adds	r3, #6
 8016950:	2206      	movs	r2, #6
 8016952:	6879      	ldr	r1, [r7, #4]
 8016954:	4618      	mov	r0, r3
 8016956:	f000 fa56 	bl	8016e06 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801695a:	68fb      	ldr	r3, [r7, #12]
 801695c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8016960:	2b06      	cmp	r3, #6
 8016962:	d006      	beq.n	8016972 <ethernet_output+0x66>
 8016964:	4b0a      	ldr	r3, [pc, #40]	; (8016990 <ethernet_output+0x84>)
 8016966:	f240 1233 	movw	r2, #307	; 0x133
 801696a:	490a      	ldr	r1, [pc, #40]	; (8016994 <ethernet_output+0x88>)
 801696c:	480a      	ldr	r0, [pc, #40]	; (8016998 <ethernet_output+0x8c>)
 801696e:	f000 fa77 	bl	8016e60 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8016972:	68fb      	ldr	r3, [r7, #12]
 8016974:	699b      	ldr	r3, [r3, #24]
 8016976:	68b9      	ldr	r1, [r7, #8]
 8016978:	68f8      	ldr	r0, [r7, #12]
 801697a:	4798      	blx	r3
 801697c:	4603      	mov	r3, r0
 801697e:	e002      	b.n	8016986 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8016980:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8016982:	f06f 0301 	mvn.w	r3, #1
}
 8016986:	4618      	mov	r0, r3
 8016988:	3718      	adds	r7, #24
 801698a:	46bd      	mov	sp, r7
 801698c:	bd80      	pop	{r7, pc}
 801698e:	bf00      	nop
 8016990:	0801b9b4 	.word	0x0801b9b4
 8016994:	0801b9ec 	.word	0x0801b9ec
 8016998:	0801ba20 	.word	0x0801ba20

0801699c <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 801699c:	b580      	push	{r7, lr}
 801699e:	b086      	sub	sp, #24
 80169a0:	af00      	add	r7, sp, #0
 80169a2:	6078      	str	r0, [r7, #4]
 80169a4:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 80169a6:	683b      	ldr	r3, [r7, #0]
 80169a8:	60bb      	str	r3, [r7, #8]
 80169aa:	2304      	movs	r3, #4
 80169ac:	60fb      	str	r3, [r7, #12]
 80169ae:	2300      	movs	r3, #0
 80169b0:	613b      	str	r3, [r7, #16]
 80169b2:	2300      	movs	r3, #0
 80169b4:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 80169b6:	f107 0308 	add.w	r3, r7, #8
 80169ba:	2100      	movs	r1, #0
 80169bc:	4618      	mov	r0, r3
 80169be:	f7ee fb28 	bl	8005012 <osMessageCreate>
 80169c2:	4602      	mov	r2, r0
 80169c4:	687b      	ldr	r3, [r7, #4]
 80169c6:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 80169c8:	687b      	ldr	r3, [r7, #4]
 80169ca:	681b      	ldr	r3, [r3, #0]
 80169cc:	2b00      	cmp	r3, #0
 80169ce:	d102      	bne.n	80169d6 <sys_mbox_new+0x3a>
    return ERR_MEM;
 80169d0:	f04f 33ff 	mov.w	r3, #4294967295
 80169d4:	e000      	b.n	80169d8 <sys_mbox_new+0x3c>

  return ERR_OK;
 80169d6:	2300      	movs	r3, #0
}
 80169d8:	4618      	mov	r0, r3
 80169da:	3718      	adds	r7, #24
 80169dc:	46bd      	mov	sp, r7
 80169de:	bd80      	pop	{r7, pc}

080169e0 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 80169e0:	b580      	push	{r7, lr}
 80169e2:	b082      	sub	sp, #8
 80169e4:	af00      	add	r7, sp, #0
 80169e6:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
 80169e8:	687b      	ldr	r3, [r7, #4]
 80169ea:	681b      	ldr	r3, [r3, #0]
 80169ec:	4618      	mov	r0, r3
 80169ee:	f7ee fbed 	bl	80051cc <osMessageWaiting>
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
 80169f2:	687b      	ldr	r3, [r7, #4]
 80169f4:	681b      	ldr	r3, [r3, #0]
 80169f6:	4618      	mov	r0, r3
 80169f8:	f7ee fbfe 	bl	80051f8 <osMessageDelete>
  osMessageQueueDelete(*mbox);
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 80169fc:	bf00      	nop
 80169fe:	3708      	adds	r7, #8
 8016a00:	46bd      	mov	sp, r7
 8016a02:	bd80      	pop	{r7, pc}

08016a04 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8016a04:	b580      	push	{r7, lr}
 8016a06:	b084      	sub	sp, #16
 8016a08:	af00      	add	r7, sp, #0
 8016a0a:	6078      	str	r0, [r7, #4]
 8016a0c:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 8016a0e:	687b      	ldr	r3, [r7, #4]
 8016a10:	681b      	ldr	r3, [r3, #0]
 8016a12:	6839      	ldr	r1, [r7, #0]
 8016a14:	2200      	movs	r2, #0
 8016a16:	4618      	mov	r0, r3
 8016a18:	f7ee fb24 	bl	8005064 <osMessagePut>
 8016a1c:	4603      	mov	r3, r0
 8016a1e:	2b00      	cmp	r3, #0
 8016a20:	d102      	bne.n	8016a28 <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 8016a22:	2300      	movs	r3, #0
 8016a24:	73fb      	strb	r3, [r7, #15]
 8016a26:	e001      	b.n	8016a2c <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8016a28:	23ff      	movs	r3, #255	; 0xff
 8016a2a:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8016a2c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8016a30:	4618      	mov	r0, r3
 8016a32:	3710      	adds	r7, #16
 8016a34:	46bd      	mov	sp, r7
 8016a36:	bd80      	pop	{r7, pc}

08016a38 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8016a38:	b580      	push	{r7, lr}
 8016a3a:	b08c      	sub	sp, #48	; 0x30
 8016a3c:	af00      	add	r7, sp, #0
 8016a3e:	61f8      	str	r0, [r7, #28]
 8016a40:	61b9      	str	r1, [r7, #24]
 8016a42:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 8016a44:	f7ee f90e 	bl	8004c64 <osKernelSysTick>
 8016a48:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8016a4a:	697b      	ldr	r3, [r7, #20]
 8016a4c:	2b00      	cmp	r3, #0
 8016a4e:	d017      	beq.n	8016a80 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 8016a50:	69fb      	ldr	r3, [r7, #28]
 8016a52:	6819      	ldr	r1, [r3, #0]
 8016a54:	f107 0320 	add.w	r3, r7, #32
 8016a58:	697a      	ldr	r2, [r7, #20]
 8016a5a:	4618      	mov	r0, r3
 8016a5c:	f7ee fb42 	bl	80050e4 <osMessageGet>

    if(event.status == osEventMessage)
 8016a60:	6a3b      	ldr	r3, [r7, #32]
 8016a62:	2b10      	cmp	r3, #16
 8016a64:	d109      	bne.n	8016a7a <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 8016a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016a68:	461a      	mov	r2, r3
 8016a6a:	69bb      	ldr	r3, [r7, #24]
 8016a6c:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 8016a6e:	f7ee f8f9 	bl	8004c64 <osKernelSysTick>
 8016a72:	4602      	mov	r2, r0
 8016a74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016a76:	1ad3      	subs	r3, r2, r3
 8016a78:	e019      	b.n	8016aae <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8016a7a:	f04f 33ff 	mov.w	r3, #4294967295
 8016a7e:	e016      	b.n	8016aae <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 8016a80:	69fb      	ldr	r3, [r7, #28]
 8016a82:	6819      	ldr	r1, [r3, #0]
 8016a84:	463b      	mov	r3, r7
 8016a86:	f04f 32ff 	mov.w	r2, #4294967295
 8016a8a:	4618      	mov	r0, r3
 8016a8c:	f7ee fb2a 	bl	80050e4 <osMessageGet>
 8016a90:	f107 0320 	add.w	r3, r7, #32
 8016a94:	463a      	mov	r2, r7
 8016a96:	ca07      	ldmia	r2, {r0, r1, r2}
 8016a98:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 8016a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016a9e:	461a      	mov	r2, r3
 8016aa0:	69bb      	ldr	r3, [r7, #24]
 8016aa2:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 8016aa4:	f7ee f8de 	bl	8004c64 <osKernelSysTick>
 8016aa8:	4602      	mov	r2, r0
 8016aaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016aac:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8016aae:	4618      	mov	r0, r3
 8016ab0:	3730      	adds	r7, #48	; 0x30
 8016ab2:	46bd      	mov	sp, r7
 8016ab4:	bd80      	pop	{r7, pc}

08016ab6 <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 8016ab6:	b580      	push	{r7, lr}
 8016ab8:	b086      	sub	sp, #24
 8016aba:	af00      	add	r7, sp, #0
 8016abc:	6078      	str	r0, [r7, #4]
 8016abe:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osEvent event;

  event = osMessageGet (*mbox, 0);
 8016ac0:	687b      	ldr	r3, [r7, #4]
 8016ac2:	6819      	ldr	r1, [r3, #0]
 8016ac4:	f107 030c 	add.w	r3, r7, #12
 8016ac8:	2200      	movs	r2, #0
 8016aca:	4618      	mov	r0, r3
 8016acc:	f7ee fb0a 	bl	80050e4 <osMessageGet>

  if(event.status == osEventMessage)
 8016ad0:	68fb      	ldr	r3, [r7, #12]
 8016ad2:	2b10      	cmp	r3, #16
 8016ad4:	d105      	bne.n	8016ae2 <sys_arch_mbox_tryfetch+0x2c>
  {
    *msg = (void *)event.value.v;
 8016ad6:	693b      	ldr	r3, [r7, #16]
 8016ad8:	461a      	mov	r2, r3
 8016ada:	683b      	ldr	r3, [r7, #0]
 8016adc:	601a      	str	r2, [r3, #0]
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
  {
#endif
    return ERR_OK;
 8016ade:	2300      	movs	r3, #0
 8016ae0:	e001      	b.n	8016ae6 <sys_arch_mbox_tryfetch+0x30>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 8016ae2:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 8016ae6:	4618      	mov	r0, r3
 8016ae8:	3718      	adds	r7, #24
 8016aea:	46bd      	mov	sp, r7
 8016aec:	bd80      	pop	{r7, pc}

08016aee <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8016aee:	b480      	push	{r7}
 8016af0:	b083      	sub	sp, #12
 8016af2:	af00      	add	r7, sp, #0
 8016af4:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8016af6:	687b      	ldr	r3, [r7, #4]
 8016af8:	681b      	ldr	r3, [r3, #0]
 8016afa:	2b00      	cmp	r3, #0
 8016afc:	d101      	bne.n	8016b02 <sys_mbox_valid+0x14>
    return 0;
 8016afe:	2300      	movs	r3, #0
 8016b00:	e000      	b.n	8016b04 <sys_mbox_valid+0x16>
  else
    return 1;
 8016b02:	2301      	movs	r3, #1
}
 8016b04:	4618      	mov	r0, r3
 8016b06:	370c      	adds	r7, #12
 8016b08:	46bd      	mov	sp, r7
 8016b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b0e:	4770      	bx	lr

08016b10 <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 8016b10:	b480      	push	{r7}
 8016b12:	b083      	sub	sp, #12
 8016b14:	af00      	add	r7, sp, #0
 8016b16:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 8016b18:	687b      	ldr	r3, [r7, #4]
 8016b1a:	2200      	movs	r2, #0
 8016b1c:	601a      	str	r2, [r3, #0]
}
 8016b1e:	bf00      	nop
 8016b20:	370c      	adds	r7, #12
 8016b22:	46bd      	mov	sp, r7
 8016b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b28:	4770      	bx	lr

08016b2a <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 8016b2a:	b580      	push	{r7, lr}
 8016b2c:	b084      	sub	sp, #16
 8016b2e:	af00      	add	r7, sp, #0
 8016b30:	6078      	str	r0, [r7, #4]
 8016b32:	460b      	mov	r3, r1
 8016b34:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
 8016b36:	2300      	movs	r3, #0
 8016b38:	60bb      	str	r3, [r7, #8]
 8016b3a:	2300      	movs	r3, #0
 8016b3c:	60fb      	str	r3, [r7, #12]
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 8016b3e:	f107 0308 	add.w	r3, r7, #8
 8016b42:	2101      	movs	r1, #1
 8016b44:	4618      	mov	r0, r3
 8016b46:	f7ee f999 	bl	8004e7c <osSemaphoreCreate>
 8016b4a:	4602      	mov	r2, r0
 8016b4c:	687b      	ldr	r3, [r7, #4]
 8016b4e:	601a      	str	r2, [r3, #0]
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
#endif

  if(*sem == NULL)
 8016b50:	687b      	ldr	r3, [r7, #4]
 8016b52:	681b      	ldr	r3, [r3, #0]
 8016b54:	2b00      	cmp	r3, #0
 8016b56:	d102      	bne.n	8016b5e <sys_sem_new+0x34>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8016b58:	f04f 33ff 	mov.w	r3, #4294967295
 8016b5c:	e009      	b.n	8016b72 <sys_sem_new+0x48>
  }

  if(count == 0)	// Means it can't be taken
 8016b5e:	78fb      	ldrb	r3, [r7, #3]
 8016b60:	2b00      	cmp	r3, #0
 8016b62:	d105      	bne.n	8016b70 <sys_sem_new+0x46>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
 8016b64:	687b      	ldr	r3, [r7, #4]
 8016b66:	681b      	ldr	r3, [r3, #0]
 8016b68:	2100      	movs	r1, #0
 8016b6a:	4618      	mov	r0, r3
 8016b6c:	f7ee f9ba 	bl	8004ee4 <osSemaphoreWait>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 8016b70:	2300      	movs	r3, #0
}
 8016b72:	4618      	mov	r0, r3
 8016b74:	3710      	adds	r7, #16
 8016b76:	46bd      	mov	sp, r7
 8016b78:	bd80      	pop	{r7, pc}

08016b7a <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 8016b7a:	b580      	push	{r7, lr}
 8016b7c:	b084      	sub	sp, #16
 8016b7e:	af00      	add	r7, sp, #0
 8016b80:	6078      	str	r0, [r7, #4]
 8016b82:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
 8016b84:	f7ee f86e 	bl	8004c64 <osKernelSysTick>
 8016b88:	60f8      	str	r0, [r7, #12]
#else
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8016b8a:	683b      	ldr	r3, [r7, #0]
 8016b8c:	2b00      	cmp	r3, #0
 8016b8e:	d011      	beq.n	8016bb4 <sys_arch_sem_wait+0x3a>
  {
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
 8016b90:	687b      	ldr	r3, [r7, #4]
 8016b92:	681b      	ldr	r3, [r3, #0]
 8016b94:	6839      	ldr	r1, [r7, #0]
 8016b96:	4618      	mov	r0, r3
 8016b98:	f7ee f9a4 	bl	8004ee4 <osSemaphoreWait>
 8016b9c:	4603      	mov	r3, r0
 8016b9e:	2b00      	cmp	r3, #0
 8016ba0:	d105      	bne.n	8016bae <sys_arch_sem_wait+0x34>
    {
      return (osKernelSysTick() - starttime);
 8016ba2:	f7ee f85f 	bl	8004c64 <osKernelSysTick>
 8016ba6:	4602      	mov	r2, r0
 8016ba8:	68fb      	ldr	r3, [r7, #12]
 8016baa:	1ad3      	subs	r3, r2, r3
 8016bac:	e012      	b.n	8016bd4 <sys_arch_sem_wait+0x5a>
        return (osKernelGetTickCount() - starttime);
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 8016bae:	f04f 33ff 	mov.w	r3, #4294967295
 8016bb2:	e00f      	b.n	8016bd4 <sys_arch_sem_wait+0x5a>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
 8016bb4:	bf00      	nop
 8016bb6:	687b      	ldr	r3, [r7, #4]
 8016bb8:	681b      	ldr	r3, [r3, #0]
 8016bba:	f04f 31ff 	mov.w	r1, #4294967295
 8016bbe:	4618      	mov	r0, r3
 8016bc0:	f7ee f990 	bl	8004ee4 <osSemaphoreWait>
 8016bc4:	4603      	mov	r3, r0
 8016bc6:	2b00      	cmp	r3, #0
 8016bc8:	d1f5      	bne.n	8016bb6 <sys_arch_sem_wait+0x3c>
    return (osKernelSysTick() - starttime);
 8016bca:	f7ee f84b 	bl	8004c64 <osKernelSysTick>
 8016bce:	4602      	mov	r2, r0
 8016bd0:	68fb      	ldr	r3, [r7, #12]
 8016bd2:	1ad3      	subs	r3, r2, r3
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8016bd4:	4618      	mov	r0, r3
 8016bd6:	3710      	adds	r7, #16
 8016bd8:	46bd      	mov	sp, r7
 8016bda:	bd80      	pop	{r7, pc}

08016bdc <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 8016bdc:	b580      	push	{r7, lr}
 8016bde:	b082      	sub	sp, #8
 8016be0:	af00      	add	r7, sp, #0
 8016be2:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 8016be4:	687b      	ldr	r3, [r7, #4]
 8016be6:	681b      	ldr	r3, [r3, #0]
 8016be8:	4618      	mov	r0, r3
 8016bea:	f7ee f9c9 	bl	8004f80 <osSemaphoreRelease>
}
 8016bee:	bf00      	nop
 8016bf0:	3708      	adds	r7, #8
 8016bf2:	46bd      	mov	sp, r7
 8016bf4:	bd80      	pop	{r7, pc}

08016bf6 <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 8016bf6:	b580      	push	{r7, lr}
 8016bf8:	b082      	sub	sp, #8
 8016bfa:	af00      	add	r7, sp, #0
 8016bfc:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 8016bfe:	687b      	ldr	r3, [r7, #4]
 8016c00:	681b      	ldr	r3, [r3, #0]
 8016c02:	4618      	mov	r0, r3
 8016c04:	f7ee f9f2 	bl	8004fec <osSemaphoreDelete>
}
 8016c08:	bf00      	nop
 8016c0a:	3708      	adds	r7, #8
 8016c0c:	46bd      	mov	sp, r7
 8016c0e:	bd80      	pop	{r7, pc}

08016c10 <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 8016c10:	b480      	push	{r7}
 8016c12:	b083      	sub	sp, #12
 8016c14:	af00      	add	r7, sp, #0
 8016c16:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 8016c18:	687b      	ldr	r3, [r7, #4]
 8016c1a:	681b      	ldr	r3, [r3, #0]
 8016c1c:	2b00      	cmp	r3, #0
 8016c1e:	d101      	bne.n	8016c24 <sys_sem_valid+0x14>
    return 0;
 8016c20:	2300      	movs	r3, #0
 8016c22:	e000      	b.n	8016c26 <sys_sem_valid+0x16>
  else
    return 1;
 8016c24:	2301      	movs	r3, #1
}
 8016c26:	4618      	mov	r0, r3
 8016c28:	370c      	adds	r7, #12
 8016c2a:	46bd      	mov	sp, r7
 8016c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c30:	4770      	bx	lr

08016c32 <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 8016c32:	b480      	push	{r7}
 8016c34:	b083      	sub	sp, #12
 8016c36:	af00      	add	r7, sp, #0
 8016c38:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 8016c3a:	687b      	ldr	r3, [r7, #4]
 8016c3c:	2200      	movs	r2, #0
 8016c3e:	601a      	str	r2, [r3, #0]
}
 8016c40:	bf00      	nop
 8016c42:	370c      	adds	r7, #12
 8016c44:	46bd      	mov	sp, r7
 8016c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c4a:	4770      	bx	lr

08016c4c <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8016c4c:	b580      	push	{r7, lr}
 8016c4e:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 8016c50:	4803      	ldr	r0, [pc, #12]	; (8016c60 <sys_init+0x14>)
 8016c52:	f7ee f877 	bl	8004d44 <osMutexCreate>
 8016c56:	4602      	mov	r2, r0
 8016c58:	4b02      	ldr	r3, [pc, #8]	; (8016c64 <sys_init+0x18>)
 8016c5a:	601a      	str	r2, [r3, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 8016c5c:	bf00      	nop
 8016c5e:	bd80      	pop	{r7, pc}
 8016c60:	0801bbcc 	.word	0x0801bbcc
 8016c64:	2000d41c 	.word	0x2000d41c

08016c68 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8016c68:	b580      	push	{r7, lr}
 8016c6a:	b084      	sub	sp, #16
 8016c6c:	af00      	add	r7, sp, #0
 8016c6e:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 8016c70:	2300      	movs	r3, #0
 8016c72:	60bb      	str	r3, [r7, #8]
 8016c74:	2300      	movs	r3, #0
 8016c76:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 8016c78:	f107 0308 	add.w	r3, r7, #8
 8016c7c:	4618      	mov	r0, r3
 8016c7e:	f7ee f861 	bl	8004d44 <osMutexCreate>
 8016c82:	4602      	mov	r2, r0
 8016c84:	687b      	ldr	r3, [r7, #4]
 8016c86:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 8016c88:	687b      	ldr	r3, [r7, #4]
 8016c8a:	681b      	ldr	r3, [r3, #0]
 8016c8c:	2b00      	cmp	r3, #0
 8016c8e:	d102      	bne.n	8016c96 <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8016c90:	f04f 33ff 	mov.w	r3, #4294967295
 8016c94:	e000      	b.n	8016c98 <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8016c96:	2300      	movs	r3, #0
}
 8016c98:	4618      	mov	r0, r3
 8016c9a:	3710      	adds	r7, #16
 8016c9c:	46bd      	mov	sp, r7
 8016c9e:	bd80      	pop	{r7, pc}

08016ca0 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8016ca0:	b580      	push	{r7, lr}
 8016ca2:	b082      	sub	sp, #8
 8016ca4:	af00      	add	r7, sp, #0
 8016ca6:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 8016ca8:	687b      	ldr	r3, [r7, #4]
 8016caa:	681b      	ldr	r3, [r3, #0]
 8016cac:	f04f 31ff 	mov.w	r1, #4294967295
 8016cb0:	4618      	mov	r0, r3
 8016cb2:	f7ee f85f 	bl	8004d74 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 8016cb6:	bf00      	nop
 8016cb8:	3708      	adds	r7, #8
 8016cba:	46bd      	mov	sp, r7
 8016cbc:	bd80      	pop	{r7, pc}

08016cbe <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8016cbe:	b580      	push	{r7, lr}
 8016cc0:	b082      	sub	sp, #8
 8016cc2:	af00      	add	r7, sp, #0
 8016cc4:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8016cc6:	687b      	ldr	r3, [r7, #4]
 8016cc8:	681b      	ldr	r3, [r3, #0]
 8016cca:	4618      	mov	r0, r3
 8016ccc:	f7ee f8a0 	bl	8004e10 <osMutexRelease>
}
 8016cd0:	bf00      	nop
 8016cd2:	3708      	adds	r7, #8
 8016cd4:	46bd      	mov	sp, r7
 8016cd6:	bd80      	pop	{r7, pc}

08016cd8 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8016cd8:	b580      	push	{r7, lr}
 8016cda:	b08c      	sub	sp, #48	; 0x30
 8016cdc:	af00      	add	r7, sp, #0
 8016cde:	60f8      	str	r0, [r7, #12]
 8016ce0:	60b9      	str	r1, [r7, #8]
 8016ce2:	607a      	str	r2, [r7, #4]
 8016ce4:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 8016ce6:	f107 0314 	add.w	r3, r7, #20
 8016cea:	2200      	movs	r2, #0
 8016cec:	601a      	str	r2, [r3, #0]
 8016cee:	605a      	str	r2, [r3, #4]
 8016cf0:	609a      	str	r2, [r3, #8]
 8016cf2:	60da      	str	r2, [r3, #12]
 8016cf4:	611a      	str	r2, [r3, #16]
 8016cf6:	615a      	str	r2, [r3, #20]
 8016cf8:	619a      	str	r2, [r3, #24]
 8016cfa:	68fb      	ldr	r3, [r7, #12]
 8016cfc:	617b      	str	r3, [r7, #20]
 8016cfe:	68bb      	ldr	r3, [r7, #8]
 8016d00:	61bb      	str	r3, [r7, #24]
 8016d02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016d04:	b21b      	sxth	r3, r3
 8016d06:	83bb      	strh	r3, [r7, #28]
 8016d08:	683b      	ldr	r3, [r7, #0]
 8016d0a:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 8016d0c:	f107 0314 	add.w	r3, r7, #20
 8016d10:	6879      	ldr	r1, [r7, #4]
 8016d12:	4618      	mov	r0, r3
 8016d14:	f7ed ffb6 	bl	8004c84 <osThreadCreate>
 8016d18:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 8016d1a:	4618      	mov	r0, r3
 8016d1c:	3730      	adds	r7, #48	; 0x30
 8016d1e:	46bd      	mov	sp, r7
 8016d20:	bd80      	pop	{r7, pc}
	...

08016d24 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8016d24:	b580      	push	{r7, lr}
 8016d26:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 8016d28:	4b04      	ldr	r3, [pc, #16]	; (8016d3c <sys_arch_protect+0x18>)
 8016d2a:	681b      	ldr	r3, [r3, #0]
 8016d2c:	f04f 31ff 	mov.w	r1, #4294967295
 8016d30:	4618      	mov	r0, r3
 8016d32:	f7ee f81f 	bl	8004d74 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 8016d36:	2301      	movs	r3, #1
}
 8016d38:	4618      	mov	r0, r3
 8016d3a:	bd80      	pop	{r7, pc}
 8016d3c:	2000d41c 	.word	0x2000d41c

08016d40 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8016d40:	b580      	push	{r7, lr}
 8016d42:	b082      	sub	sp, #8
 8016d44:	af00      	add	r7, sp, #0
 8016d46:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8016d48:	4b04      	ldr	r3, [pc, #16]	; (8016d5c <sys_arch_unprotect+0x1c>)
 8016d4a:	681b      	ldr	r3, [r3, #0]
 8016d4c:	4618      	mov	r0, r3
 8016d4e:	f7ee f85f 	bl	8004e10 <osMutexRelease>
}
 8016d52:	bf00      	nop
 8016d54:	3708      	adds	r7, #8
 8016d56:	46bd      	mov	sp, r7
 8016d58:	bd80      	pop	{r7, pc}
 8016d5a:	bf00      	nop
 8016d5c:	2000d41c 	.word	0x2000d41c

08016d60 <__libc_init_array>:
 8016d60:	b570      	push	{r4, r5, r6, lr}
 8016d62:	4e0d      	ldr	r6, [pc, #52]	; (8016d98 <__libc_init_array+0x38>)
 8016d64:	4c0d      	ldr	r4, [pc, #52]	; (8016d9c <__libc_init_array+0x3c>)
 8016d66:	1ba4      	subs	r4, r4, r6
 8016d68:	10a4      	asrs	r4, r4, #2
 8016d6a:	2500      	movs	r5, #0
 8016d6c:	42a5      	cmp	r5, r4
 8016d6e:	d109      	bne.n	8016d84 <__libc_init_array+0x24>
 8016d70:	4e0b      	ldr	r6, [pc, #44]	; (8016da0 <__libc_init_array+0x40>)
 8016d72:	4c0c      	ldr	r4, [pc, #48]	; (8016da4 <__libc_init_array+0x44>)
 8016d74:	f001 f942 	bl	8017ffc <_init>
 8016d78:	1ba4      	subs	r4, r4, r6
 8016d7a:	10a4      	asrs	r4, r4, #2
 8016d7c:	2500      	movs	r5, #0
 8016d7e:	42a5      	cmp	r5, r4
 8016d80:	d105      	bne.n	8016d8e <__libc_init_array+0x2e>
 8016d82:	bd70      	pop	{r4, r5, r6, pc}
 8016d84:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8016d88:	4798      	blx	r3
 8016d8a:	3501      	adds	r5, #1
 8016d8c:	e7ee      	b.n	8016d6c <__libc_init_array+0xc>
 8016d8e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8016d92:	4798      	blx	r3
 8016d94:	3501      	adds	r5, #1
 8016d96:	e7f2      	b.n	8016d7e <__libc_init_array+0x1e>
 8016d98:	0801bd80 	.word	0x0801bd80
 8016d9c:	0801bd80 	.word	0x0801bd80
 8016da0:	0801bd80 	.word	0x0801bd80
 8016da4:	0801bd84 	.word	0x0801bd84

08016da8 <__locale_ctype_ptr>:
 8016da8:	4b04      	ldr	r3, [pc, #16]	; (8016dbc <__locale_ctype_ptr+0x14>)
 8016daa:	4a05      	ldr	r2, [pc, #20]	; (8016dc0 <__locale_ctype_ptr+0x18>)
 8016dac:	681b      	ldr	r3, [r3, #0]
 8016dae:	6a1b      	ldr	r3, [r3, #32]
 8016db0:	2b00      	cmp	r3, #0
 8016db2:	bf08      	it	eq
 8016db4:	4613      	moveq	r3, r2
 8016db6:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 8016dba:	4770      	bx	lr
 8016dbc:	2000001c 	.word	0x2000001c
 8016dc0:	20000080 	.word	0x20000080

08016dc4 <__ascii_mbtowc>:
 8016dc4:	b082      	sub	sp, #8
 8016dc6:	b901      	cbnz	r1, 8016dca <__ascii_mbtowc+0x6>
 8016dc8:	a901      	add	r1, sp, #4
 8016dca:	b142      	cbz	r2, 8016dde <__ascii_mbtowc+0x1a>
 8016dcc:	b14b      	cbz	r3, 8016de2 <__ascii_mbtowc+0x1e>
 8016dce:	7813      	ldrb	r3, [r2, #0]
 8016dd0:	600b      	str	r3, [r1, #0]
 8016dd2:	7812      	ldrb	r2, [r2, #0]
 8016dd4:	1c10      	adds	r0, r2, #0
 8016dd6:	bf18      	it	ne
 8016dd8:	2001      	movne	r0, #1
 8016dda:	b002      	add	sp, #8
 8016ddc:	4770      	bx	lr
 8016dde:	4610      	mov	r0, r2
 8016de0:	e7fb      	b.n	8016dda <__ascii_mbtowc+0x16>
 8016de2:	f06f 0001 	mvn.w	r0, #1
 8016de6:	e7f8      	b.n	8016dda <__ascii_mbtowc+0x16>

08016de8 <memcmp>:
 8016de8:	b530      	push	{r4, r5, lr}
 8016dea:	2400      	movs	r4, #0
 8016dec:	42a2      	cmp	r2, r4
 8016dee:	d101      	bne.n	8016df4 <memcmp+0xc>
 8016df0:	2000      	movs	r0, #0
 8016df2:	e007      	b.n	8016e04 <memcmp+0x1c>
 8016df4:	5d03      	ldrb	r3, [r0, r4]
 8016df6:	3401      	adds	r4, #1
 8016df8:	190d      	adds	r5, r1, r4
 8016dfa:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 8016dfe:	42ab      	cmp	r3, r5
 8016e00:	d0f4      	beq.n	8016dec <memcmp+0x4>
 8016e02:	1b58      	subs	r0, r3, r5
 8016e04:	bd30      	pop	{r4, r5, pc}

08016e06 <memcpy>:
 8016e06:	b510      	push	{r4, lr}
 8016e08:	1e43      	subs	r3, r0, #1
 8016e0a:	440a      	add	r2, r1
 8016e0c:	4291      	cmp	r1, r2
 8016e0e:	d100      	bne.n	8016e12 <memcpy+0xc>
 8016e10:	bd10      	pop	{r4, pc}
 8016e12:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016e16:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016e1a:	e7f7      	b.n	8016e0c <memcpy+0x6>

08016e1c <memmove>:
 8016e1c:	4288      	cmp	r0, r1
 8016e1e:	b510      	push	{r4, lr}
 8016e20:	eb01 0302 	add.w	r3, r1, r2
 8016e24:	d807      	bhi.n	8016e36 <memmove+0x1a>
 8016e26:	1e42      	subs	r2, r0, #1
 8016e28:	4299      	cmp	r1, r3
 8016e2a:	d00a      	beq.n	8016e42 <memmove+0x26>
 8016e2c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016e30:	f802 4f01 	strb.w	r4, [r2, #1]!
 8016e34:	e7f8      	b.n	8016e28 <memmove+0xc>
 8016e36:	4283      	cmp	r3, r0
 8016e38:	d9f5      	bls.n	8016e26 <memmove+0xa>
 8016e3a:	1881      	adds	r1, r0, r2
 8016e3c:	1ad2      	subs	r2, r2, r3
 8016e3e:	42d3      	cmn	r3, r2
 8016e40:	d100      	bne.n	8016e44 <memmove+0x28>
 8016e42:	bd10      	pop	{r4, pc}
 8016e44:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8016e48:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8016e4c:	e7f7      	b.n	8016e3e <memmove+0x22>

08016e4e <memset>:
 8016e4e:	4402      	add	r2, r0
 8016e50:	4603      	mov	r3, r0
 8016e52:	4293      	cmp	r3, r2
 8016e54:	d100      	bne.n	8016e58 <memset+0xa>
 8016e56:	4770      	bx	lr
 8016e58:	f803 1b01 	strb.w	r1, [r3], #1
 8016e5c:	e7f9      	b.n	8016e52 <memset+0x4>
	...

08016e60 <iprintf>:
 8016e60:	b40f      	push	{r0, r1, r2, r3}
 8016e62:	4b0a      	ldr	r3, [pc, #40]	; (8016e8c <iprintf+0x2c>)
 8016e64:	b513      	push	{r0, r1, r4, lr}
 8016e66:	681c      	ldr	r4, [r3, #0]
 8016e68:	b124      	cbz	r4, 8016e74 <iprintf+0x14>
 8016e6a:	69a3      	ldr	r3, [r4, #24]
 8016e6c:	b913      	cbnz	r3, 8016e74 <iprintf+0x14>
 8016e6e:	4620      	mov	r0, r4
 8016e70:	f000 f8b0 	bl	8016fd4 <__sinit>
 8016e74:	ab05      	add	r3, sp, #20
 8016e76:	9a04      	ldr	r2, [sp, #16]
 8016e78:	68a1      	ldr	r1, [r4, #8]
 8016e7a:	9301      	str	r3, [sp, #4]
 8016e7c:	4620      	mov	r0, r4
 8016e7e:	f000 fb5f 	bl	8017540 <_vfiprintf_r>
 8016e82:	b002      	add	sp, #8
 8016e84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016e88:	b004      	add	sp, #16
 8016e8a:	4770      	bx	lr
 8016e8c:	2000001c 	.word	0x2000001c

08016e90 <rand>:
 8016e90:	b538      	push	{r3, r4, r5, lr}
 8016e92:	4b13      	ldr	r3, [pc, #76]	; (8016ee0 <rand+0x50>)
 8016e94:	681c      	ldr	r4, [r3, #0]
 8016e96:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8016e98:	b97b      	cbnz	r3, 8016eba <rand+0x2a>
 8016e9a:	2018      	movs	r0, #24
 8016e9c:	f000 f924 	bl	80170e8 <malloc>
 8016ea0:	4a10      	ldr	r2, [pc, #64]	; (8016ee4 <rand+0x54>)
 8016ea2:	4b11      	ldr	r3, [pc, #68]	; (8016ee8 <rand+0x58>)
 8016ea4:	63a0      	str	r0, [r4, #56]	; 0x38
 8016ea6:	e9c0 2300 	strd	r2, r3, [r0]
 8016eaa:	4b10      	ldr	r3, [pc, #64]	; (8016eec <rand+0x5c>)
 8016eac:	6083      	str	r3, [r0, #8]
 8016eae:	230b      	movs	r3, #11
 8016eb0:	8183      	strh	r3, [r0, #12]
 8016eb2:	2201      	movs	r2, #1
 8016eb4:	2300      	movs	r3, #0
 8016eb6:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8016eba:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8016ebc:	480c      	ldr	r0, [pc, #48]	; (8016ef0 <rand+0x60>)
 8016ebe:	690a      	ldr	r2, [r1, #16]
 8016ec0:	694b      	ldr	r3, [r1, #20]
 8016ec2:	4c0c      	ldr	r4, [pc, #48]	; (8016ef4 <rand+0x64>)
 8016ec4:	4350      	muls	r0, r2
 8016ec6:	fb04 0003 	mla	r0, r4, r3, r0
 8016eca:	fba2 2304 	umull	r2, r3, r2, r4
 8016ece:	4403      	add	r3, r0
 8016ed0:	1c54      	adds	r4, r2, #1
 8016ed2:	f143 0500 	adc.w	r5, r3, #0
 8016ed6:	e9c1 4504 	strd	r4, r5, [r1, #16]
 8016eda:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 8016ede:	bd38      	pop	{r3, r4, r5, pc}
 8016ee0:	2000001c 	.word	0x2000001c
 8016ee4:	abcd330e 	.word	0xabcd330e
 8016ee8:	e66d1234 	.word	0xe66d1234
 8016eec:	0005deec 	.word	0x0005deec
 8016ef0:	5851f42d 	.word	0x5851f42d
 8016ef4:	4c957f2d 	.word	0x4c957f2d

08016ef8 <siprintf>:
 8016ef8:	b40e      	push	{r1, r2, r3}
 8016efa:	b500      	push	{lr}
 8016efc:	b09c      	sub	sp, #112	; 0x70
 8016efe:	ab1d      	add	r3, sp, #116	; 0x74
 8016f00:	9002      	str	r0, [sp, #8]
 8016f02:	9006      	str	r0, [sp, #24]
 8016f04:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8016f08:	4809      	ldr	r0, [pc, #36]	; (8016f30 <siprintf+0x38>)
 8016f0a:	9107      	str	r1, [sp, #28]
 8016f0c:	9104      	str	r1, [sp, #16]
 8016f0e:	4909      	ldr	r1, [pc, #36]	; (8016f34 <siprintf+0x3c>)
 8016f10:	f853 2b04 	ldr.w	r2, [r3], #4
 8016f14:	9105      	str	r1, [sp, #20]
 8016f16:	6800      	ldr	r0, [r0, #0]
 8016f18:	9301      	str	r3, [sp, #4]
 8016f1a:	a902      	add	r1, sp, #8
 8016f1c:	f000 f9ee 	bl	80172fc <_svfiprintf_r>
 8016f20:	9b02      	ldr	r3, [sp, #8]
 8016f22:	2200      	movs	r2, #0
 8016f24:	701a      	strb	r2, [r3, #0]
 8016f26:	b01c      	add	sp, #112	; 0x70
 8016f28:	f85d eb04 	ldr.w	lr, [sp], #4
 8016f2c:	b003      	add	sp, #12
 8016f2e:	4770      	bx	lr
 8016f30:	2000001c 	.word	0x2000001c
 8016f34:	ffff0208 	.word	0xffff0208

08016f38 <__ascii_wctomb>:
 8016f38:	b149      	cbz	r1, 8016f4e <__ascii_wctomb+0x16>
 8016f3a:	2aff      	cmp	r2, #255	; 0xff
 8016f3c:	bf85      	ittet	hi
 8016f3e:	238a      	movhi	r3, #138	; 0x8a
 8016f40:	6003      	strhi	r3, [r0, #0]
 8016f42:	700a      	strbls	r2, [r1, #0]
 8016f44:	f04f 30ff 	movhi.w	r0, #4294967295
 8016f48:	bf98      	it	ls
 8016f4a:	2001      	movls	r0, #1
 8016f4c:	4770      	bx	lr
 8016f4e:	4608      	mov	r0, r1
 8016f50:	4770      	bx	lr
	...

08016f54 <std>:
 8016f54:	2300      	movs	r3, #0
 8016f56:	b510      	push	{r4, lr}
 8016f58:	4604      	mov	r4, r0
 8016f5a:	e9c0 3300 	strd	r3, r3, [r0]
 8016f5e:	6083      	str	r3, [r0, #8]
 8016f60:	8181      	strh	r1, [r0, #12]
 8016f62:	6643      	str	r3, [r0, #100]	; 0x64
 8016f64:	81c2      	strh	r2, [r0, #14]
 8016f66:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8016f6a:	6183      	str	r3, [r0, #24]
 8016f6c:	4619      	mov	r1, r3
 8016f6e:	2208      	movs	r2, #8
 8016f70:	305c      	adds	r0, #92	; 0x5c
 8016f72:	f7ff ff6c 	bl	8016e4e <memset>
 8016f76:	4b05      	ldr	r3, [pc, #20]	; (8016f8c <std+0x38>)
 8016f78:	6263      	str	r3, [r4, #36]	; 0x24
 8016f7a:	4b05      	ldr	r3, [pc, #20]	; (8016f90 <std+0x3c>)
 8016f7c:	62a3      	str	r3, [r4, #40]	; 0x28
 8016f7e:	4b05      	ldr	r3, [pc, #20]	; (8016f94 <std+0x40>)
 8016f80:	62e3      	str	r3, [r4, #44]	; 0x2c
 8016f82:	4b05      	ldr	r3, [pc, #20]	; (8016f98 <std+0x44>)
 8016f84:	6224      	str	r4, [r4, #32]
 8016f86:	6323      	str	r3, [r4, #48]	; 0x30
 8016f88:	bd10      	pop	{r4, pc}
 8016f8a:	bf00      	nop
 8016f8c:	08017a9d 	.word	0x08017a9d
 8016f90:	08017abf 	.word	0x08017abf
 8016f94:	08017af7 	.word	0x08017af7
 8016f98:	08017b1b 	.word	0x08017b1b

08016f9c <_cleanup_r>:
 8016f9c:	4901      	ldr	r1, [pc, #4]	; (8016fa4 <_cleanup_r+0x8>)
 8016f9e:	f000 b885 	b.w	80170ac <_fwalk_reent>
 8016fa2:	bf00      	nop
 8016fa4:	08017df5 	.word	0x08017df5

08016fa8 <__sfmoreglue>:
 8016fa8:	b570      	push	{r4, r5, r6, lr}
 8016faa:	1e4a      	subs	r2, r1, #1
 8016fac:	2568      	movs	r5, #104	; 0x68
 8016fae:	4355      	muls	r5, r2
 8016fb0:	460e      	mov	r6, r1
 8016fb2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8016fb6:	f000 f8ed 	bl	8017194 <_malloc_r>
 8016fba:	4604      	mov	r4, r0
 8016fbc:	b140      	cbz	r0, 8016fd0 <__sfmoreglue+0x28>
 8016fbe:	2100      	movs	r1, #0
 8016fc0:	e9c0 1600 	strd	r1, r6, [r0]
 8016fc4:	300c      	adds	r0, #12
 8016fc6:	60a0      	str	r0, [r4, #8]
 8016fc8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8016fcc:	f7ff ff3f 	bl	8016e4e <memset>
 8016fd0:	4620      	mov	r0, r4
 8016fd2:	bd70      	pop	{r4, r5, r6, pc}

08016fd4 <__sinit>:
 8016fd4:	6983      	ldr	r3, [r0, #24]
 8016fd6:	b510      	push	{r4, lr}
 8016fd8:	4604      	mov	r4, r0
 8016fda:	bb33      	cbnz	r3, 801702a <__sinit+0x56>
 8016fdc:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8016fe0:	6503      	str	r3, [r0, #80]	; 0x50
 8016fe2:	4b12      	ldr	r3, [pc, #72]	; (801702c <__sinit+0x58>)
 8016fe4:	4a12      	ldr	r2, [pc, #72]	; (8017030 <__sinit+0x5c>)
 8016fe6:	681b      	ldr	r3, [r3, #0]
 8016fe8:	6282      	str	r2, [r0, #40]	; 0x28
 8016fea:	4298      	cmp	r0, r3
 8016fec:	bf04      	itt	eq
 8016fee:	2301      	moveq	r3, #1
 8016ff0:	6183      	streq	r3, [r0, #24]
 8016ff2:	f000 f81f 	bl	8017034 <__sfp>
 8016ff6:	6060      	str	r0, [r4, #4]
 8016ff8:	4620      	mov	r0, r4
 8016ffa:	f000 f81b 	bl	8017034 <__sfp>
 8016ffe:	60a0      	str	r0, [r4, #8]
 8017000:	4620      	mov	r0, r4
 8017002:	f000 f817 	bl	8017034 <__sfp>
 8017006:	2200      	movs	r2, #0
 8017008:	60e0      	str	r0, [r4, #12]
 801700a:	2104      	movs	r1, #4
 801700c:	6860      	ldr	r0, [r4, #4]
 801700e:	f7ff ffa1 	bl	8016f54 <std>
 8017012:	2201      	movs	r2, #1
 8017014:	2109      	movs	r1, #9
 8017016:	68a0      	ldr	r0, [r4, #8]
 8017018:	f7ff ff9c 	bl	8016f54 <std>
 801701c:	2202      	movs	r2, #2
 801701e:	2112      	movs	r1, #18
 8017020:	68e0      	ldr	r0, [r4, #12]
 8017022:	f7ff ff97 	bl	8016f54 <std>
 8017026:	2301      	movs	r3, #1
 8017028:	61a3      	str	r3, [r4, #24]
 801702a:	bd10      	pop	{r4, pc}
 801702c:	0801bbd4 	.word	0x0801bbd4
 8017030:	08016f9d 	.word	0x08016f9d

08017034 <__sfp>:
 8017034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017036:	4b1b      	ldr	r3, [pc, #108]	; (80170a4 <__sfp+0x70>)
 8017038:	681e      	ldr	r6, [r3, #0]
 801703a:	69b3      	ldr	r3, [r6, #24]
 801703c:	4607      	mov	r7, r0
 801703e:	b913      	cbnz	r3, 8017046 <__sfp+0x12>
 8017040:	4630      	mov	r0, r6
 8017042:	f7ff ffc7 	bl	8016fd4 <__sinit>
 8017046:	3648      	adds	r6, #72	; 0x48
 8017048:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801704c:	3b01      	subs	r3, #1
 801704e:	d503      	bpl.n	8017058 <__sfp+0x24>
 8017050:	6833      	ldr	r3, [r6, #0]
 8017052:	b133      	cbz	r3, 8017062 <__sfp+0x2e>
 8017054:	6836      	ldr	r6, [r6, #0]
 8017056:	e7f7      	b.n	8017048 <__sfp+0x14>
 8017058:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801705c:	b16d      	cbz	r5, 801707a <__sfp+0x46>
 801705e:	3468      	adds	r4, #104	; 0x68
 8017060:	e7f4      	b.n	801704c <__sfp+0x18>
 8017062:	2104      	movs	r1, #4
 8017064:	4638      	mov	r0, r7
 8017066:	f7ff ff9f 	bl	8016fa8 <__sfmoreglue>
 801706a:	6030      	str	r0, [r6, #0]
 801706c:	2800      	cmp	r0, #0
 801706e:	d1f1      	bne.n	8017054 <__sfp+0x20>
 8017070:	230c      	movs	r3, #12
 8017072:	603b      	str	r3, [r7, #0]
 8017074:	4604      	mov	r4, r0
 8017076:	4620      	mov	r0, r4
 8017078:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801707a:	4b0b      	ldr	r3, [pc, #44]	; (80170a8 <__sfp+0x74>)
 801707c:	6665      	str	r5, [r4, #100]	; 0x64
 801707e:	e9c4 5500 	strd	r5, r5, [r4]
 8017082:	60a5      	str	r5, [r4, #8]
 8017084:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8017088:	e9c4 5505 	strd	r5, r5, [r4, #20]
 801708c:	2208      	movs	r2, #8
 801708e:	4629      	mov	r1, r5
 8017090:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8017094:	f7ff fedb 	bl	8016e4e <memset>
 8017098:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801709c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80170a0:	e7e9      	b.n	8017076 <__sfp+0x42>
 80170a2:	bf00      	nop
 80170a4:	0801bbd4 	.word	0x0801bbd4
 80170a8:	ffff0001 	.word	0xffff0001

080170ac <_fwalk_reent>:
 80170ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80170b0:	4680      	mov	r8, r0
 80170b2:	4689      	mov	r9, r1
 80170b4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80170b8:	2600      	movs	r6, #0
 80170ba:	b914      	cbnz	r4, 80170c2 <_fwalk_reent+0x16>
 80170bc:	4630      	mov	r0, r6
 80170be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80170c2:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80170c6:	3f01      	subs	r7, #1
 80170c8:	d501      	bpl.n	80170ce <_fwalk_reent+0x22>
 80170ca:	6824      	ldr	r4, [r4, #0]
 80170cc:	e7f5      	b.n	80170ba <_fwalk_reent+0xe>
 80170ce:	89ab      	ldrh	r3, [r5, #12]
 80170d0:	2b01      	cmp	r3, #1
 80170d2:	d907      	bls.n	80170e4 <_fwalk_reent+0x38>
 80170d4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80170d8:	3301      	adds	r3, #1
 80170da:	d003      	beq.n	80170e4 <_fwalk_reent+0x38>
 80170dc:	4629      	mov	r1, r5
 80170de:	4640      	mov	r0, r8
 80170e0:	47c8      	blx	r9
 80170e2:	4306      	orrs	r6, r0
 80170e4:	3568      	adds	r5, #104	; 0x68
 80170e6:	e7ee      	b.n	80170c6 <_fwalk_reent+0x1a>

080170e8 <malloc>:
 80170e8:	4b02      	ldr	r3, [pc, #8]	; (80170f4 <malloc+0xc>)
 80170ea:	4601      	mov	r1, r0
 80170ec:	6818      	ldr	r0, [r3, #0]
 80170ee:	f000 b851 	b.w	8017194 <_malloc_r>
 80170f2:	bf00      	nop
 80170f4:	2000001c 	.word	0x2000001c

080170f8 <_free_r>:
 80170f8:	b538      	push	{r3, r4, r5, lr}
 80170fa:	4605      	mov	r5, r0
 80170fc:	2900      	cmp	r1, #0
 80170fe:	d045      	beq.n	801718c <_free_r+0x94>
 8017100:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017104:	1f0c      	subs	r4, r1, #4
 8017106:	2b00      	cmp	r3, #0
 8017108:	bfb8      	it	lt
 801710a:	18e4      	addlt	r4, r4, r3
 801710c:	f000 ff12 	bl	8017f34 <__malloc_lock>
 8017110:	4a1f      	ldr	r2, [pc, #124]	; (8017190 <_free_r+0x98>)
 8017112:	6813      	ldr	r3, [r2, #0]
 8017114:	4610      	mov	r0, r2
 8017116:	b933      	cbnz	r3, 8017126 <_free_r+0x2e>
 8017118:	6063      	str	r3, [r4, #4]
 801711a:	6014      	str	r4, [r2, #0]
 801711c:	4628      	mov	r0, r5
 801711e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017122:	f000 bf08 	b.w	8017f36 <__malloc_unlock>
 8017126:	42a3      	cmp	r3, r4
 8017128:	d90c      	bls.n	8017144 <_free_r+0x4c>
 801712a:	6821      	ldr	r1, [r4, #0]
 801712c:	1862      	adds	r2, r4, r1
 801712e:	4293      	cmp	r3, r2
 8017130:	bf04      	itt	eq
 8017132:	681a      	ldreq	r2, [r3, #0]
 8017134:	685b      	ldreq	r3, [r3, #4]
 8017136:	6063      	str	r3, [r4, #4]
 8017138:	bf04      	itt	eq
 801713a:	1852      	addeq	r2, r2, r1
 801713c:	6022      	streq	r2, [r4, #0]
 801713e:	6004      	str	r4, [r0, #0]
 8017140:	e7ec      	b.n	801711c <_free_r+0x24>
 8017142:	4613      	mov	r3, r2
 8017144:	685a      	ldr	r2, [r3, #4]
 8017146:	b10a      	cbz	r2, 801714c <_free_r+0x54>
 8017148:	42a2      	cmp	r2, r4
 801714a:	d9fa      	bls.n	8017142 <_free_r+0x4a>
 801714c:	6819      	ldr	r1, [r3, #0]
 801714e:	1858      	adds	r0, r3, r1
 8017150:	42a0      	cmp	r0, r4
 8017152:	d10b      	bne.n	801716c <_free_r+0x74>
 8017154:	6820      	ldr	r0, [r4, #0]
 8017156:	4401      	add	r1, r0
 8017158:	1858      	adds	r0, r3, r1
 801715a:	4282      	cmp	r2, r0
 801715c:	6019      	str	r1, [r3, #0]
 801715e:	d1dd      	bne.n	801711c <_free_r+0x24>
 8017160:	6810      	ldr	r0, [r2, #0]
 8017162:	6852      	ldr	r2, [r2, #4]
 8017164:	605a      	str	r2, [r3, #4]
 8017166:	4401      	add	r1, r0
 8017168:	6019      	str	r1, [r3, #0]
 801716a:	e7d7      	b.n	801711c <_free_r+0x24>
 801716c:	d902      	bls.n	8017174 <_free_r+0x7c>
 801716e:	230c      	movs	r3, #12
 8017170:	602b      	str	r3, [r5, #0]
 8017172:	e7d3      	b.n	801711c <_free_r+0x24>
 8017174:	6820      	ldr	r0, [r4, #0]
 8017176:	1821      	adds	r1, r4, r0
 8017178:	428a      	cmp	r2, r1
 801717a:	bf04      	itt	eq
 801717c:	6811      	ldreq	r1, [r2, #0]
 801717e:	6852      	ldreq	r2, [r2, #4]
 8017180:	6062      	str	r2, [r4, #4]
 8017182:	bf04      	itt	eq
 8017184:	1809      	addeq	r1, r1, r0
 8017186:	6021      	streq	r1, [r4, #0]
 8017188:	605c      	str	r4, [r3, #4]
 801718a:	e7c7      	b.n	801711c <_free_r+0x24>
 801718c:	bd38      	pop	{r3, r4, r5, pc}
 801718e:	bf00      	nop
 8017190:	20004900 	.word	0x20004900

08017194 <_malloc_r>:
 8017194:	b570      	push	{r4, r5, r6, lr}
 8017196:	1ccd      	adds	r5, r1, #3
 8017198:	f025 0503 	bic.w	r5, r5, #3
 801719c:	3508      	adds	r5, #8
 801719e:	2d0c      	cmp	r5, #12
 80171a0:	bf38      	it	cc
 80171a2:	250c      	movcc	r5, #12
 80171a4:	2d00      	cmp	r5, #0
 80171a6:	4606      	mov	r6, r0
 80171a8:	db01      	blt.n	80171ae <_malloc_r+0x1a>
 80171aa:	42a9      	cmp	r1, r5
 80171ac:	d903      	bls.n	80171b6 <_malloc_r+0x22>
 80171ae:	230c      	movs	r3, #12
 80171b0:	6033      	str	r3, [r6, #0]
 80171b2:	2000      	movs	r0, #0
 80171b4:	bd70      	pop	{r4, r5, r6, pc}
 80171b6:	f000 febd 	bl	8017f34 <__malloc_lock>
 80171ba:	4a21      	ldr	r2, [pc, #132]	; (8017240 <_malloc_r+0xac>)
 80171bc:	6814      	ldr	r4, [r2, #0]
 80171be:	4621      	mov	r1, r4
 80171c0:	b991      	cbnz	r1, 80171e8 <_malloc_r+0x54>
 80171c2:	4c20      	ldr	r4, [pc, #128]	; (8017244 <_malloc_r+0xb0>)
 80171c4:	6823      	ldr	r3, [r4, #0]
 80171c6:	b91b      	cbnz	r3, 80171d0 <_malloc_r+0x3c>
 80171c8:	4630      	mov	r0, r6
 80171ca:	f000 fc57 	bl	8017a7c <_sbrk_r>
 80171ce:	6020      	str	r0, [r4, #0]
 80171d0:	4629      	mov	r1, r5
 80171d2:	4630      	mov	r0, r6
 80171d4:	f000 fc52 	bl	8017a7c <_sbrk_r>
 80171d8:	1c43      	adds	r3, r0, #1
 80171da:	d124      	bne.n	8017226 <_malloc_r+0x92>
 80171dc:	230c      	movs	r3, #12
 80171de:	6033      	str	r3, [r6, #0]
 80171e0:	4630      	mov	r0, r6
 80171e2:	f000 fea8 	bl	8017f36 <__malloc_unlock>
 80171e6:	e7e4      	b.n	80171b2 <_malloc_r+0x1e>
 80171e8:	680b      	ldr	r3, [r1, #0]
 80171ea:	1b5b      	subs	r3, r3, r5
 80171ec:	d418      	bmi.n	8017220 <_malloc_r+0x8c>
 80171ee:	2b0b      	cmp	r3, #11
 80171f0:	d90f      	bls.n	8017212 <_malloc_r+0x7e>
 80171f2:	600b      	str	r3, [r1, #0]
 80171f4:	50cd      	str	r5, [r1, r3]
 80171f6:	18cc      	adds	r4, r1, r3
 80171f8:	4630      	mov	r0, r6
 80171fa:	f000 fe9c 	bl	8017f36 <__malloc_unlock>
 80171fe:	f104 000b 	add.w	r0, r4, #11
 8017202:	1d23      	adds	r3, r4, #4
 8017204:	f020 0007 	bic.w	r0, r0, #7
 8017208:	1ac3      	subs	r3, r0, r3
 801720a:	d0d3      	beq.n	80171b4 <_malloc_r+0x20>
 801720c:	425a      	negs	r2, r3
 801720e:	50e2      	str	r2, [r4, r3]
 8017210:	e7d0      	b.n	80171b4 <_malloc_r+0x20>
 8017212:	428c      	cmp	r4, r1
 8017214:	684b      	ldr	r3, [r1, #4]
 8017216:	bf16      	itet	ne
 8017218:	6063      	strne	r3, [r4, #4]
 801721a:	6013      	streq	r3, [r2, #0]
 801721c:	460c      	movne	r4, r1
 801721e:	e7eb      	b.n	80171f8 <_malloc_r+0x64>
 8017220:	460c      	mov	r4, r1
 8017222:	6849      	ldr	r1, [r1, #4]
 8017224:	e7cc      	b.n	80171c0 <_malloc_r+0x2c>
 8017226:	1cc4      	adds	r4, r0, #3
 8017228:	f024 0403 	bic.w	r4, r4, #3
 801722c:	42a0      	cmp	r0, r4
 801722e:	d005      	beq.n	801723c <_malloc_r+0xa8>
 8017230:	1a21      	subs	r1, r4, r0
 8017232:	4630      	mov	r0, r6
 8017234:	f000 fc22 	bl	8017a7c <_sbrk_r>
 8017238:	3001      	adds	r0, #1
 801723a:	d0cf      	beq.n	80171dc <_malloc_r+0x48>
 801723c:	6025      	str	r5, [r4, #0]
 801723e:	e7db      	b.n	80171f8 <_malloc_r+0x64>
 8017240:	20004900 	.word	0x20004900
 8017244:	20004904 	.word	0x20004904

08017248 <__ssputs_r>:
 8017248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801724c:	688e      	ldr	r6, [r1, #8]
 801724e:	429e      	cmp	r6, r3
 8017250:	4682      	mov	sl, r0
 8017252:	460c      	mov	r4, r1
 8017254:	4690      	mov	r8, r2
 8017256:	4699      	mov	r9, r3
 8017258:	d837      	bhi.n	80172ca <__ssputs_r+0x82>
 801725a:	898a      	ldrh	r2, [r1, #12]
 801725c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8017260:	d031      	beq.n	80172c6 <__ssputs_r+0x7e>
 8017262:	6825      	ldr	r5, [r4, #0]
 8017264:	6909      	ldr	r1, [r1, #16]
 8017266:	1a6f      	subs	r7, r5, r1
 8017268:	6965      	ldr	r5, [r4, #20]
 801726a:	2302      	movs	r3, #2
 801726c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8017270:	fb95 f5f3 	sdiv	r5, r5, r3
 8017274:	f109 0301 	add.w	r3, r9, #1
 8017278:	443b      	add	r3, r7
 801727a:	429d      	cmp	r5, r3
 801727c:	bf38      	it	cc
 801727e:	461d      	movcc	r5, r3
 8017280:	0553      	lsls	r3, r2, #21
 8017282:	d530      	bpl.n	80172e6 <__ssputs_r+0x9e>
 8017284:	4629      	mov	r1, r5
 8017286:	f7ff ff85 	bl	8017194 <_malloc_r>
 801728a:	4606      	mov	r6, r0
 801728c:	b950      	cbnz	r0, 80172a4 <__ssputs_r+0x5c>
 801728e:	230c      	movs	r3, #12
 8017290:	f8ca 3000 	str.w	r3, [sl]
 8017294:	89a3      	ldrh	r3, [r4, #12]
 8017296:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801729a:	81a3      	strh	r3, [r4, #12]
 801729c:	f04f 30ff 	mov.w	r0, #4294967295
 80172a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80172a4:	463a      	mov	r2, r7
 80172a6:	6921      	ldr	r1, [r4, #16]
 80172a8:	f7ff fdad 	bl	8016e06 <memcpy>
 80172ac:	89a3      	ldrh	r3, [r4, #12]
 80172ae:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80172b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80172b6:	81a3      	strh	r3, [r4, #12]
 80172b8:	6126      	str	r6, [r4, #16]
 80172ba:	6165      	str	r5, [r4, #20]
 80172bc:	443e      	add	r6, r7
 80172be:	1bed      	subs	r5, r5, r7
 80172c0:	6026      	str	r6, [r4, #0]
 80172c2:	60a5      	str	r5, [r4, #8]
 80172c4:	464e      	mov	r6, r9
 80172c6:	454e      	cmp	r6, r9
 80172c8:	d900      	bls.n	80172cc <__ssputs_r+0x84>
 80172ca:	464e      	mov	r6, r9
 80172cc:	4632      	mov	r2, r6
 80172ce:	4641      	mov	r1, r8
 80172d0:	6820      	ldr	r0, [r4, #0]
 80172d2:	f7ff fda3 	bl	8016e1c <memmove>
 80172d6:	68a3      	ldr	r3, [r4, #8]
 80172d8:	1b9b      	subs	r3, r3, r6
 80172da:	60a3      	str	r3, [r4, #8]
 80172dc:	6823      	ldr	r3, [r4, #0]
 80172de:	441e      	add	r6, r3
 80172e0:	6026      	str	r6, [r4, #0]
 80172e2:	2000      	movs	r0, #0
 80172e4:	e7dc      	b.n	80172a0 <__ssputs_r+0x58>
 80172e6:	462a      	mov	r2, r5
 80172e8:	f000 fe26 	bl	8017f38 <_realloc_r>
 80172ec:	4606      	mov	r6, r0
 80172ee:	2800      	cmp	r0, #0
 80172f0:	d1e2      	bne.n	80172b8 <__ssputs_r+0x70>
 80172f2:	6921      	ldr	r1, [r4, #16]
 80172f4:	4650      	mov	r0, sl
 80172f6:	f7ff feff 	bl	80170f8 <_free_r>
 80172fa:	e7c8      	b.n	801728e <__ssputs_r+0x46>

080172fc <_svfiprintf_r>:
 80172fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017300:	461d      	mov	r5, r3
 8017302:	898b      	ldrh	r3, [r1, #12]
 8017304:	061f      	lsls	r7, r3, #24
 8017306:	b09d      	sub	sp, #116	; 0x74
 8017308:	4680      	mov	r8, r0
 801730a:	460c      	mov	r4, r1
 801730c:	4616      	mov	r6, r2
 801730e:	d50f      	bpl.n	8017330 <_svfiprintf_r+0x34>
 8017310:	690b      	ldr	r3, [r1, #16]
 8017312:	b96b      	cbnz	r3, 8017330 <_svfiprintf_r+0x34>
 8017314:	2140      	movs	r1, #64	; 0x40
 8017316:	f7ff ff3d 	bl	8017194 <_malloc_r>
 801731a:	6020      	str	r0, [r4, #0]
 801731c:	6120      	str	r0, [r4, #16]
 801731e:	b928      	cbnz	r0, 801732c <_svfiprintf_r+0x30>
 8017320:	230c      	movs	r3, #12
 8017322:	f8c8 3000 	str.w	r3, [r8]
 8017326:	f04f 30ff 	mov.w	r0, #4294967295
 801732a:	e0c8      	b.n	80174be <_svfiprintf_r+0x1c2>
 801732c:	2340      	movs	r3, #64	; 0x40
 801732e:	6163      	str	r3, [r4, #20]
 8017330:	2300      	movs	r3, #0
 8017332:	9309      	str	r3, [sp, #36]	; 0x24
 8017334:	2320      	movs	r3, #32
 8017336:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801733a:	2330      	movs	r3, #48	; 0x30
 801733c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8017340:	9503      	str	r5, [sp, #12]
 8017342:	f04f 0b01 	mov.w	fp, #1
 8017346:	4637      	mov	r7, r6
 8017348:	463d      	mov	r5, r7
 801734a:	f815 3b01 	ldrb.w	r3, [r5], #1
 801734e:	b10b      	cbz	r3, 8017354 <_svfiprintf_r+0x58>
 8017350:	2b25      	cmp	r3, #37	; 0x25
 8017352:	d13e      	bne.n	80173d2 <_svfiprintf_r+0xd6>
 8017354:	ebb7 0a06 	subs.w	sl, r7, r6
 8017358:	d00b      	beq.n	8017372 <_svfiprintf_r+0x76>
 801735a:	4653      	mov	r3, sl
 801735c:	4632      	mov	r2, r6
 801735e:	4621      	mov	r1, r4
 8017360:	4640      	mov	r0, r8
 8017362:	f7ff ff71 	bl	8017248 <__ssputs_r>
 8017366:	3001      	adds	r0, #1
 8017368:	f000 80a4 	beq.w	80174b4 <_svfiprintf_r+0x1b8>
 801736c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801736e:	4453      	add	r3, sl
 8017370:	9309      	str	r3, [sp, #36]	; 0x24
 8017372:	783b      	ldrb	r3, [r7, #0]
 8017374:	2b00      	cmp	r3, #0
 8017376:	f000 809d 	beq.w	80174b4 <_svfiprintf_r+0x1b8>
 801737a:	2300      	movs	r3, #0
 801737c:	f04f 32ff 	mov.w	r2, #4294967295
 8017380:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017384:	9304      	str	r3, [sp, #16]
 8017386:	9307      	str	r3, [sp, #28]
 8017388:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801738c:	931a      	str	r3, [sp, #104]	; 0x68
 801738e:	462f      	mov	r7, r5
 8017390:	2205      	movs	r2, #5
 8017392:	f817 1b01 	ldrb.w	r1, [r7], #1
 8017396:	4850      	ldr	r0, [pc, #320]	; (80174d8 <_svfiprintf_r+0x1dc>)
 8017398:	f7e8 ff62 	bl	8000260 <memchr>
 801739c:	9b04      	ldr	r3, [sp, #16]
 801739e:	b9d0      	cbnz	r0, 80173d6 <_svfiprintf_r+0xda>
 80173a0:	06d9      	lsls	r1, r3, #27
 80173a2:	bf44      	itt	mi
 80173a4:	2220      	movmi	r2, #32
 80173a6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80173aa:	071a      	lsls	r2, r3, #28
 80173ac:	bf44      	itt	mi
 80173ae:	222b      	movmi	r2, #43	; 0x2b
 80173b0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80173b4:	782a      	ldrb	r2, [r5, #0]
 80173b6:	2a2a      	cmp	r2, #42	; 0x2a
 80173b8:	d015      	beq.n	80173e6 <_svfiprintf_r+0xea>
 80173ba:	9a07      	ldr	r2, [sp, #28]
 80173bc:	462f      	mov	r7, r5
 80173be:	2000      	movs	r0, #0
 80173c0:	250a      	movs	r5, #10
 80173c2:	4639      	mov	r1, r7
 80173c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80173c8:	3b30      	subs	r3, #48	; 0x30
 80173ca:	2b09      	cmp	r3, #9
 80173cc:	d94d      	bls.n	801746a <_svfiprintf_r+0x16e>
 80173ce:	b1b8      	cbz	r0, 8017400 <_svfiprintf_r+0x104>
 80173d0:	e00f      	b.n	80173f2 <_svfiprintf_r+0xf6>
 80173d2:	462f      	mov	r7, r5
 80173d4:	e7b8      	b.n	8017348 <_svfiprintf_r+0x4c>
 80173d6:	4a40      	ldr	r2, [pc, #256]	; (80174d8 <_svfiprintf_r+0x1dc>)
 80173d8:	1a80      	subs	r0, r0, r2
 80173da:	fa0b f000 	lsl.w	r0, fp, r0
 80173de:	4318      	orrs	r0, r3
 80173e0:	9004      	str	r0, [sp, #16]
 80173e2:	463d      	mov	r5, r7
 80173e4:	e7d3      	b.n	801738e <_svfiprintf_r+0x92>
 80173e6:	9a03      	ldr	r2, [sp, #12]
 80173e8:	1d11      	adds	r1, r2, #4
 80173ea:	6812      	ldr	r2, [r2, #0]
 80173ec:	9103      	str	r1, [sp, #12]
 80173ee:	2a00      	cmp	r2, #0
 80173f0:	db01      	blt.n	80173f6 <_svfiprintf_r+0xfa>
 80173f2:	9207      	str	r2, [sp, #28]
 80173f4:	e004      	b.n	8017400 <_svfiprintf_r+0x104>
 80173f6:	4252      	negs	r2, r2
 80173f8:	f043 0302 	orr.w	r3, r3, #2
 80173fc:	9207      	str	r2, [sp, #28]
 80173fe:	9304      	str	r3, [sp, #16]
 8017400:	783b      	ldrb	r3, [r7, #0]
 8017402:	2b2e      	cmp	r3, #46	; 0x2e
 8017404:	d10c      	bne.n	8017420 <_svfiprintf_r+0x124>
 8017406:	787b      	ldrb	r3, [r7, #1]
 8017408:	2b2a      	cmp	r3, #42	; 0x2a
 801740a:	d133      	bne.n	8017474 <_svfiprintf_r+0x178>
 801740c:	9b03      	ldr	r3, [sp, #12]
 801740e:	1d1a      	adds	r2, r3, #4
 8017410:	681b      	ldr	r3, [r3, #0]
 8017412:	9203      	str	r2, [sp, #12]
 8017414:	2b00      	cmp	r3, #0
 8017416:	bfb8      	it	lt
 8017418:	f04f 33ff 	movlt.w	r3, #4294967295
 801741c:	3702      	adds	r7, #2
 801741e:	9305      	str	r3, [sp, #20]
 8017420:	4d2e      	ldr	r5, [pc, #184]	; (80174dc <_svfiprintf_r+0x1e0>)
 8017422:	7839      	ldrb	r1, [r7, #0]
 8017424:	2203      	movs	r2, #3
 8017426:	4628      	mov	r0, r5
 8017428:	f7e8 ff1a 	bl	8000260 <memchr>
 801742c:	b138      	cbz	r0, 801743e <_svfiprintf_r+0x142>
 801742e:	2340      	movs	r3, #64	; 0x40
 8017430:	1b40      	subs	r0, r0, r5
 8017432:	fa03 f000 	lsl.w	r0, r3, r0
 8017436:	9b04      	ldr	r3, [sp, #16]
 8017438:	4303      	orrs	r3, r0
 801743a:	3701      	adds	r7, #1
 801743c:	9304      	str	r3, [sp, #16]
 801743e:	7839      	ldrb	r1, [r7, #0]
 8017440:	4827      	ldr	r0, [pc, #156]	; (80174e0 <_svfiprintf_r+0x1e4>)
 8017442:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8017446:	2206      	movs	r2, #6
 8017448:	1c7e      	adds	r6, r7, #1
 801744a:	f7e8 ff09 	bl	8000260 <memchr>
 801744e:	2800      	cmp	r0, #0
 8017450:	d038      	beq.n	80174c4 <_svfiprintf_r+0x1c8>
 8017452:	4b24      	ldr	r3, [pc, #144]	; (80174e4 <_svfiprintf_r+0x1e8>)
 8017454:	bb13      	cbnz	r3, 801749c <_svfiprintf_r+0x1a0>
 8017456:	9b03      	ldr	r3, [sp, #12]
 8017458:	3307      	adds	r3, #7
 801745a:	f023 0307 	bic.w	r3, r3, #7
 801745e:	3308      	adds	r3, #8
 8017460:	9303      	str	r3, [sp, #12]
 8017462:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017464:	444b      	add	r3, r9
 8017466:	9309      	str	r3, [sp, #36]	; 0x24
 8017468:	e76d      	b.n	8017346 <_svfiprintf_r+0x4a>
 801746a:	fb05 3202 	mla	r2, r5, r2, r3
 801746e:	2001      	movs	r0, #1
 8017470:	460f      	mov	r7, r1
 8017472:	e7a6      	b.n	80173c2 <_svfiprintf_r+0xc6>
 8017474:	2300      	movs	r3, #0
 8017476:	3701      	adds	r7, #1
 8017478:	9305      	str	r3, [sp, #20]
 801747a:	4619      	mov	r1, r3
 801747c:	250a      	movs	r5, #10
 801747e:	4638      	mov	r0, r7
 8017480:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017484:	3a30      	subs	r2, #48	; 0x30
 8017486:	2a09      	cmp	r2, #9
 8017488:	d903      	bls.n	8017492 <_svfiprintf_r+0x196>
 801748a:	2b00      	cmp	r3, #0
 801748c:	d0c8      	beq.n	8017420 <_svfiprintf_r+0x124>
 801748e:	9105      	str	r1, [sp, #20]
 8017490:	e7c6      	b.n	8017420 <_svfiprintf_r+0x124>
 8017492:	fb05 2101 	mla	r1, r5, r1, r2
 8017496:	2301      	movs	r3, #1
 8017498:	4607      	mov	r7, r0
 801749a:	e7f0      	b.n	801747e <_svfiprintf_r+0x182>
 801749c:	ab03      	add	r3, sp, #12
 801749e:	9300      	str	r3, [sp, #0]
 80174a0:	4622      	mov	r2, r4
 80174a2:	4b11      	ldr	r3, [pc, #68]	; (80174e8 <_svfiprintf_r+0x1ec>)
 80174a4:	a904      	add	r1, sp, #16
 80174a6:	4640      	mov	r0, r8
 80174a8:	f3af 8000 	nop.w
 80174ac:	f1b0 3fff 	cmp.w	r0, #4294967295
 80174b0:	4681      	mov	r9, r0
 80174b2:	d1d6      	bne.n	8017462 <_svfiprintf_r+0x166>
 80174b4:	89a3      	ldrh	r3, [r4, #12]
 80174b6:	065b      	lsls	r3, r3, #25
 80174b8:	f53f af35 	bmi.w	8017326 <_svfiprintf_r+0x2a>
 80174bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80174be:	b01d      	add	sp, #116	; 0x74
 80174c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80174c4:	ab03      	add	r3, sp, #12
 80174c6:	9300      	str	r3, [sp, #0]
 80174c8:	4622      	mov	r2, r4
 80174ca:	4b07      	ldr	r3, [pc, #28]	; (80174e8 <_svfiprintf_r+0x1ec>)
 80174cc:	a904      	add	r1, sp, #16
 80174ce:	4640      	mov	r0, r8
 80174d0:	f000 f9c2 	bl	8017858 <_printf_i>
 80174d4:	e7ea      	b.n	80174ac <_svfiprintf_r+0x1b0>
 80174d6:	bf00      	nop
 80174d8:	0801bd44 	.word	0x0801bd44
 80174dc:	0801bd4a 	.word	0x0801bd4a
 80174e0:	0801bd4e 	.word	0x0801bd4e
 80174e4:	00000000 	.word	0x00000000
 80174e8:	08017249 	.word	0x08017249

080174ec <__sfputc_r>:
 80174ec:	6893      	ldr	r3, [r2, #8]
 80174ee:	3b01      	subs	r3, #1
 80174f0:	2b00      	cmp	r3, #0
 80174f2:	b410      	push	{r4}
 80174f4:	6093      	str	r3, [r2, #8]
 80174f6:	da08      	bge.n	801750a <__sfputc_r+0x1e>
 80174f8:	6994      	ldr	r4, [r2, #24]
 80174fa:	42a3      	cmp	r3, r4
 80174fc:	db01      	blt.n	8017502 <__sfputc_r+0x16>
 80174fe:	290a      	cmp	r1, #10
 8017500:	d103      	bne.n	801750a <__sfputc_r+0x1e>
 8017502:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017506:	f000 bb0d 	b.w	8017b24 <__swbuf_r>
 801750a:	6813      	ldr	r3, [r2, #0]
 801750c:	1c58      	adds	r0, r3, #1
 801750e:	6010      	str	r0, [r2, #0]
 8017510:	7019      	strb	r1, [r3, #0]
 8017512:	4608      	mov	r0, r1
 8017514:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017518:	4770      	bx	lr

0801751a <__sfputs_r>:
 801751a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801751c:	4606      	mov	r6, r0
 801751e:	460f      	mov	r7, r1
 8017520:	4614      	mov	r4, r2
 8017522:	18d5      	adds	r5, r2, r3
 8017524:	42ac      	cmp	r4, r5
 8017526:	d101      	bne.n	801752c <__sfputs_r+0x12>
 8017528:	2000      	movs	r0, #0
 801752a:	e007      	b.n	801753c <__sfputs_r+0x22>
 801752c:	463a      	mov	r2, r7
 801752e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017532:	4630      	mov	r0, r6
 8017534:	f7ff ffda 	bl	80174ec <__sfputc_r>
 8017538:	1c43      	adds	r3, r0, #1
 801753a:	d1f3      	bne.n	8017524 <__sfputs_r+0xa>
 801753c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08017540 <_vfiprintf_r>:
 8017540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017544:	460c      	mov	r4, r1
 8017546:	b09d      	sub	sp, #116	; 0x74
 8017548:	4617      	mov	r7, r2
 801754a:	461d      	mov	r5, r3
 801754c:	4606      	mov	r6, r0
 801754e:	b118      	cbz	r0, 8017558 <_vfiprintf_r+0x18>
 8017550:	6983      	ldr	r3, [r0, #24]
 8017552:	b90b      	cbnz	r3, 8017558 <_vfiprintf_r+0x18>
 8017554:	f7ff fd3e 	bl	8016fd4 <__sinit>
 8017558:	4b7c      	ldr	r3, [pc, #496]	; (801774c <_vfiprintf_r+0x20c>)
 801755a:	429c      	cmp	r4, r3
 801755c:	d158      	bne.n	8017610 <_vfiprintf_r+0xd0>
 801755e:	6874      	ldr	r4, [r6, #4]
 8017560:	89a3      	ldrh	r3, [r4, #12]
 8017562:	0718      	lsls	r0, r3, #28
 8017564:	d55e      	bpl.n	8017624 <_vfiprintf_r+0xe4>
 8017566:	6923      	ldr	r3, [r4, #16]
 8017568:	2b00      	cmp	r3, #0
 801756a:	d05b      	beq.n	8017624 <_vfiprintf_r+0xe4>
 801756c:	2300      	movs	r3, #0
 801756e:	9309      	str	r3, [sp, #36]	; 0x24
 8017570:	2320      	movs	r3, #32
 8017572:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8017576:	2330      	movs	r3, #48	; 0x30
 8017578:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801757c:	9503      	str	r5, [sp, #12]
 801757e:	f04f 0b01 	mov.w	fp, #1
 8017582:	46b8      	mov	r8, r7
 8017584:	4645      	mov	r5, r8
 8017586:	f815 3b01 	ldrb.w	r3, [r5], #1
 801758a:	b10b      	cbz	r3, 8017590 <_vfiprintf_r+0x50>
 801758c:	2b25      	cmp	r3, #37	; 0x25
 801758e:	d154      	bne.n	801763a <_vfiprintf_r+0xfa>
 8017590:	ebb8 0a07 	subs.w	sl, r8, r7
 8017594:	d00b      	beq.n	80175ae <_vfiprintf_r+0x6e>
 8017596:	4653      	mov	r3, sl
 8017598:	463a      	mov	r2, r7
 801759a:	4621      	mov	r1, r4
 801759c:	4630      	mov	r0, r6
 801759e:	f7ff ffbc 	bl	801751a <__sfputs_r>
 80175a2:	3001      	adds	r0, #1
 80175a4:	f000 80c2 	beq.w	801772c <_vfiprintf_r+0x1ec>
 80175a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80175aa:	4453      	add	r3, sl
 80175ac:	9309      	str	r3, [sp, #36]	; 0x24
 80175ae:	f898 3000 	ldrb.w	r3, [r8]
 80175b2:	2b00      	cmp	r3, #0
 80175b4:	f000 80ba 	beq.w	801772c <_vfiprintf_r+0x1ec>
 80175b8:	2300      	movs	r3, #0
 80175ba:	f04f 32ff 	mov.w	r2, #4294967295
 80175be:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80175c2:	9304      	str	r3, [sp, #16]
 80175c4:	9307      	str	r3, [sp, #28]
 80175c6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80175ca:	931a      	str	r3, [sp, #104]	; 0x68
 80175cc:	46a8      	mov	r8, r5
 80175ce:	2205      	movs	r2, #5
 80175d0:	f818 1b01 	ldrb.w	r1, [r8], #1
 80175d4:	485e      	ldr	r0, [pc, #376]	; (8017750 <_vfiprintf_r+0x210>)
 80175d6:	f7e8 fe43 	bl	8000260 <memchr>
 80175da:	9b04      	ldr	r3, [sp, #16]
 80175dc:	bb78      	cbnz	r0, 801763e <_vfiprintf_r+0xfe>
 80175de:	06d9      	lsls	r1, r3, #27
 80175e0:	bf44      	itt	mi
 80175e2:	2220      	movmi	r2, #32
 80175e4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80175e8:	071a      	lsls	r2, r3, #28
 80175ea:	bf44      	itt	mi
 80175ec:	222b      	movmi	r2, #43	; 0x2b
 80175ee:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80175f2:	782a      	ldrb	r2, [r5, #0]
 80175f4:	2a2a      	cmp	r2, #42	; 0x2a
 80175f6:	d02a      	beq.n	801764e <_vfiprintf_r+0x10e>
 80175f8:	9a07      	ldr	r2, [sp, #28]
 80175fa:	46a8      	mov	r8, r5
 80175fc:	2000      	movs	r0, #0
 80175fe:	250a      	movs	r5, #10
 8017600:	4641      	mov	r1, r8
 8017602:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017606:	3b30      	subs	r3, #48	; 0x30
 8017608:	2b09      	cmp	r3, #9
 801760a:	d969      	bls.n	80176e0 <_vfiprintf_r+0x1a0>
 801760c:	b360      	cbz	r0, 8017668 <_vfiprintf_r+0x128>
 801760e:	e024      	b.n	801765a <_vfiprintf_r+0x11a>
 8017610:	4b50      	ldr	r3, [pc, #320]	; (8017754 <_vfiprintf_r+0x214>)
 8017612:	429c      	cmp	r4, r3
 8017614:	d101      	bne.n	801761a <_vfiprintf_r+0xda>
 8017616:	68b4      	ldr	r4, [r6, #8]
 8017618:	e7a2      	b.n	8017560 <_vfiprintf_r+0x20>
 801761a:	4b4f      	ldr	r3, [pc, #316]	; (8017758 <_vfiprintf_r+0x218>)
 801761c:	429c      	cmp	r4, r3
 801761e:	bf08      	it	eq
 8017620:	68f4      	ldreq	r4, [r6, #12]
 8017622:	e79d      	b.n	8017560 <_vfiprintf_r+0x20>
 8017624:	4621      	mov	r1, r4
 8017626:	4630      	mov	r0, r6
 8017628:	f000 fae0 	bl	8017bec <__swsetup_r>
 801762c:	2800      	cmp	r0, #0
 801762e:	d09d      	beq.n	801756c <_vfiprintf_r+0x2c>
 8017630:	f04f 30ff 	mov.w	r0, #4294967295
 8017634:	b01d      	add	sp, #116	; 0x74
 8017636:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801763a:	46a8      	mov	r8, r5
 801763c:	e7a2      	b.n	8017584 <_vfiprintf_r+0x44>
 801763e:	4a44      	ldr	r2, [pc, #272]	; (8017750 <_vfiprintf_r+0x210>)
 8017640:	1a80      	subs	r0, r0, r2
 8017642:	fa0b f000 	lsl.w	r0, fp, r0
 8017646:	4318      	orrs	r0, r3
 8017648:	9004      	str	r0, [sp, #16]
 801764a:	4645      	mov	r5, r8
 801764c:	e7be      	b.n	80175cc <_vfiprintf_r+0x8c>
 801764e:	9a03      	ldr	r2, [sp, #12]
 8017650:	1d11      	adds	r1, r2, #4
 8017652:	6812      	ldr	r2, [r2, #0]
 8017654:	9103      	str	r1, [sp, #12]
 8017656:	2a00      	cmp	r2, #0
 8017658:	db01      	blt.n	801765e <_vfiprintf_r+0x11e>
 801765a:	9207      	str	r2, [sp, #28]
 801765c:	e004      	b.n	8017668 <_vfiprintf_r+0x128>
 801765e:	4252      	negs	r2, r2
 8017660:	f043 0302 	orr.w	r3, r3, #2
 8017664:	9207      	str	r2, [sp, #28]
 8017666:	9304      	str	r3, [sp, #16]
 8017668:	f898 3000 	ldrb.w	r3, [r8]
 801766c:	2b2e      	cmp	r3, #46	; 0x2e
 801766e:	d10e      	bne.n	801768e <_vfiprintf_r+0x14e>
 8017670:	f898 3001 	ldrb.w	r3, [r8, #1]
 8017674:	2b2a      	cmp	r3, #42	; 0x2a
 8017676:	d138      	bne.n	80176ea <_vfiprintf_r+0x1aa>
 8017678:	9b03      	ldr	r3, [sp, #12]
 801767a:	1d1a      	adds	r2, r3, #4
 801767c:	681b      	ldr	r3, [r3, #0]
 801767e:	9203      	str	r2, [sp, #12]
 8017680:	2b00      	cmp	r3, #0
 8017682:	bfb8      	it	lt
 8017684:	f04f 33ff 	movlt.w	r3, #4294967295
 8017688:	f108 0802 	add.w	r8, r8, #2
 801768c:	9305      	str	r3, [sp, #20]
 801768e:	4d33      	ldr	r5, [pc, #204]	; (801775c <_vfiprintf_r+0x21c>)
 8017690:	f898 1000 	ldrb.w	r1, [r8]
 8017694:	2203      	movs	r2, #3
 8017696:	4628      	mov	r0, r5
 8017698:	f7e8 fde2 	bl	8000260 <memchr>
 801769c:	b140      	cbz	r0, 80176b0 <_vfiprintf_r+0x170>
 801769e:	2340      	movs	r3, #64	; 0x40
 80176a0:	1b40      	subs	r0, r0, r5
 80176a2:	fa03 f000 	lsl.w	r0, r3, r0
 80176a6:	9b04      	ldr	r3, [sp, #16]
 80176a8:	4303      	orrs	r3, r0
 80176aa:	f108 0801 	add.w	r8, r8, #1
 80176ae:	9304      	str	r3, [sp, #16]
 80176b0:	f898 1000 	ldrb.w	r1, [r8]
 80176b4:	482a      	ldr	r0, [pc, #168]	; (8017760 <_vfiprintf_r+0x220>)
 80176b6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80176ba:	2206      	movs	r2, #6
 80176bc:	f108 0701 	add.w	r7, r8, #1
 80176c0:	f7e8 fdce 	bl	8000260 <memchr>
 80176c4:	2800      	cmp	r0, #0
 80176c6:	d037      	beq.n	8017738 <_vfiprintf_r+0x1f8>
 80176c8:	4b26      	ldr	r3, [pc, #152]	; (8017764 <_vfiprintf_r+0x224>)
 80176ca:	bb1b      	cbnz	r3, 8017714 <_vfiprintf_r+0x1d4>
 80176cc:	9b03      	ldr	r3, [sp, #12]
 80176ce:	3307      	adds	r3, #7
 80176d0:	f023 0307 	bic.w	r3, r3, #7
 80176d4:	3308      	adds	r3, #8
 80176d6:	9303      	str	r3, [sp, #12]
 80176d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80176da:	444b      	add	r3, r9
 80176dc:	9309      	str	r3, [sp, #36]	; 0x24
 80176de:	e750      	b.n	8017582 <_vfiprintf_r+0x42>
 80176e0:	fb05 3202 	mla	r2, r5, r2, r3
 80176e4:	2001      	movs	r0, #1
 80176e6:	4688      	mov	r8, r1
 80176e8:	e78a      	b.n	8017600 <_vfiprintf_r+0xc0>
 80176ea:	2300      	movs	r3, #0
 80176ec:	f108 0801 	add.w	r8, r8, #1
 80176f0:	9305      	str	r3, [sp, #20]
 80176f2:	4619      	mov	r1, r3
 80176f4:	250a      	movs	r5, #10
 80176f6:	4640      	mov	r0, r8
 80176f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80176fc:	3a30      	subs	r2, #48	; 0x30
 80176fe:	2a09      	cmp	r2, #9
 8017700:	d903      	bls.n	801770a <_vfiprintf_r+0x1ca>
 8017702:	2b00      	cmp	r3, #0
 8017704:	d0c3      	beq.n	801768e <_vfiprintf_r+0x14e>
 8017706:	9105      	str	r1, [sp, #20]
 8017708:	e7c1      	b.n	801768e <_vfiprintf_r+0x14e>
 801770a:	fb05 2101 	mla	r1, r5, r1, r2
 801770e:	2301      	movs	r3, #1
 8017710:	4680      	mov	r8, r0
 8017712:	e7f0      	b.n	80176f6 <_vfiprintf_r+0x1b6>
 8017714:	ab03      	add	r3, sp, #12
 8017716:	9300      	str	r3, [sp, #0]
 8017718:	4622      	mov	r2, r4
 801771a:	4b13      	ldr	r3, [pc, #76]	; (8017768 <_vfiprintf_r+0x228>)
 801771c:	a904      	add	r1, sp, #16
 801771e:	4630      	mov	r0, r6
 8017720:	f3af 8000 	nop.w
 8017724:	f1b0 3fff 	cmp.w	r0, #4294967295
 8017728:	4681      	mov	r9, r0
 801772a:	d1d5      	bne.n	80176d8 <_vfiprintf_r+0x198>
 801772c:	89a3      	ldrh	r3, [r4, #12]
 801772e:	065b      	lsls	r3, r3, #25
 8017730:	f53f af7e 	bmi.w	8017630 <_vfiprintf_r+0xf0>
 8017734:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017736:	e77d      	b.n	8017634 <_vfiprintf_r+0xf4>
 8017738:	ab03      	add	r3, sp, #12
 801773a:	9300      	str	r3, [sp, #0]
 801773c:	4622      	mov	r2, r4
 801773e:	4b0a      	ldr	r3, [pc, #40]	; (8017768 <_vfiprintf_r+0x228>)
 8017740:	a904      	add	r1, sp, #16
 8017742:	4630      	mov	r0, r6
 8017744:	f000 f888 	bl	8017858 <_printf_i>
 8017748:	e7ec      	b.n	8017724 <_vfiprintf_r+0x1e4>
 801774a:	bf00      	nop
 801774c:	0801bd04 	.word	0x0801bd04
 8017750:	0801bd44 	.word	0x0801bd44
 8017754:	0801bd24 	.word	0x0801bd24
 8017758:	0801bce4 	.word	0x0801bce4
 801775c:	0801bd4a 	.word	0x0801bd4a
 8017760:	0801bd4e 	.word	0x0801bd4e
 8017764:	00000000 	.word	0x00000000
 8017768:	0801751b 	.word	0x0801751b

0801776c <_printf_common>:
 801776c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017770:	4691      	mov	r9, r2
 8017772:	461f      	mov	r7, r3
 8017774:	688a      	ldr	r2, [r1, #8]
 8017776:	690b      	ldr	r3, [r1, #16]
 8017778:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801777c:	4293      	cmp	r3, r2
 801777e:	bfb8      	it	lt
 8017780:	4613      	movlt	r3, r2
 8017782:	f8c9 3000 	str.w	r3, [r9]
 8017786:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801778a:	4606      	mov	r6, r0
 801778c:	460c      	mov	r4, r1
 801778e:	b112      	cbz	r2, 8017796 <_printf_common+0x2a>
 8017790:	3301      	adds	r3, #1
 8017792:	f8c9 3000 	str.w	r3, [r9]
 8017796:	6823      	ldr	r3, [r4, #0]
 8017798:	0699      	lsls	r1, r3, #26
 801779a:	bf42      	ittt	mi
 801779c:	f8d9 3000 	ldrmi.w	r3, [r9]
 80177a0:	3302      	addmi	r3, #2
 80177a2:	f8c9 3000 	strmi.w	r3, [r9]
 80177a6:	6825      	ldr	r5, [r4, #0]
 80177a8:	f015 0506 	ands.w	r5, r5, #6
 80177ac:	d107      	bne.n	80177be <_printf_common+0x52>
 80177ae:	f104 0a19 	add.w	sl, r4, #25
 80177b2:	68e3      	ldr	r3, [r4, #12]
 80177b4:	f8d9 2000 	ldr.w	r2, [r9]
 80177b8:	1a9b      	subs	r3, r3, r2
 80177ba:	42ab      	cmp	r3, r5
 80177bc:	dc28      	bgt.n	8017810 <_printf_common+0xa4>
 80177be:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80177c2:	6822      	ldr	r2, [r4, #0]
 80177c4:	3300      	adds	r3, #0
 80177c6:	bf18      	it	ne
 80177c8:	2301      	movne	r3, #1
 80177ca:	0692      	lsls	r2, r2, #26
 80177cc:	d42d      	bmi.n	801782a <_printf_common+0xbe>
 80177ce:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80177d2:	4639      	mov	r1, r7
 80177d4:	4630      	mov	r0, r6
 80177d6:	47c0      	blx	r8
 80177d8:	3001      	adds	r0, #1
 80177da:	d020      	beq.n	801781e <_printf_common+0xb2>
 80177dc:	6823      	ldr	r3, [r4, #0]
 80177de:	68e5      	ldr	r5, [r4, #12]
 80177e0:	f8d9 2000 	ldr.w	r2, [r9]
 80177e4:	f003 0306 	and.w	r3, r3, #6
 80177e8:	2b04      	cmp	r3, #4
 80177ea:	bf08      	it	eq
 80177ec:	1aad      	subeq	r5, r5, r2
 80177ee:	68a3      	ldr	r3, [r4, #8]
 80177f0:	6922      	ldr	r2, [r4, #16]
 80177f2:	bf0c      	ite	eq
 80177f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80177f8:	2500      	movne	r5, #0
 80177fa:	4293      	cmp	r3, r2
 80177fc:	bfc4      	itt	gt
 80177fe:	1a9b      	subgt	r3, r3, r2
 8017800:	18ed      	addgt	r5, r5, r3
 8017802:	f04f 0900 	mov.w	r9, #0
 8017806:	341a      	adds	r4, #26
 8017808:	454d      	cmp	r5, r9
 801780a:	d11a      	bne.n	8017842 <_printf_common+0xd6>
 801780c:	2000      	movs	r0, #0
 801780e:	e008      	b.n	8017822 <_printf_common+0xb6>
 8017810:	2301      	movs	r3, #1
 8017812:	4652      	mov	r2, sl
 8017814:	4639      	mov	r1, r7
 8017816:	4630      	mov	r0, r6
 8017818:	47c0      	blx	r8
 801781a:	3001      	adds	r0, #1
 801781c:	d103      	bne.n	8017826 <_printf_common+0xba>
 801781e:	f04f 30ff 	mov.w	r0, #4294967295
 8017822:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017826:	3501      	adds	r5, #1
 8017828:	e7c3      	b.n	80177b2 <_printf_common+0x46>
 801782a:	18e1      	adds	r1, r4, r3
 801782c:	1c5a      	adds	r2, r3, #1
 801782e:	2030      	movs	r0, #48	; 0x30
 8017830:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8017834:	4422      	add	r2, r4
 8017836:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801783a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801783e:	3302      	adds	r3, #2
 8017840:	e7c5      	b.n	80177ce <_printf_common+0x62>
 8017842:	2301      	movs	r3, #1
 8017844:	4622      	mov	r2, r4
 8017846:	4639      	mov	r1, r7
 8017848:	4630      	mov	r0, r6
 801784a:	47c0      	blx	r8
 801784c:	3001      	adds	r0, #1
 801784e:	d0e6      	beq.n	801781e <_printf_common+0xb2>
 8017850:	f109 0901 	add.w	r9, r9, #1
 8017854:	e7d8      	b.n	8017808 <_printf_common+0x9c>
	...

08017858 <_printf_i>:
 8017858:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801785c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8017860:	460c      	mov	r4, r1
 8017862:	7e09      	ldrb	r1, [r1, #24]
 8017864:	b085      	sub	sp, #20
 8017866:	296e      	cmp	r1, #110	; 0x6e
 8017868:	4617      	mov	r7, r2
 801786a:	4606      	mov	r6, r0
 801786c:	4698      	mov	r8, r3
 801786e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8017870:	f000 80b3 	beq.w	80179da <_printf_i+0x182>
 8017874:	d822      	bhi.n	80178bc <_printf_i+0x64>
 8017876:	2963      	cmp	r1, #99	; 0x63
 8017878:	d036      	beq.n	80178e8 <_printf_i+0x90>
 801787a:	d80a      	bhi.n	8017892 <_printf_i+0x3a>
 801787c:	2900      	cmp	r1, #0
 801787e:	f000 80b9 	beq.w	80179f4 <_printf_i+0x19c>
 8017882:	2958      	cmp	r1, #88	; 0x58
 8017884:	f000 8083 	beq.w	801798e <_printf_i+0x136>
 8017888:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801788c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8017890:	e032      	b.n	80178f8 <_printf_i+0xa0>
 8017892:	2964      	cmp	r1, #100	; 0x64
 8017894:	d001      	beq.n	801789a <_printf_i+0x42>
 8017896:	2969      	cmp	r1, #105	; 0x69
 8017898:	d1f6      	bne.n	8017888 <_printf_i+0x30>
 801789a:	6820      	ldr	r0, [r4, #0]
 801789c:	6813      	ldr	r3, [r2, #0]
 801789e:	0605      	lsls	r5, r0, #24
 80178a0:	f103 0104 	add.w	r1, r3, #4
 80178a4:	d52a      	bpl.n	80178fc <_printf_i+0xa4>
 80178a6:	681b      	ldr	r3, [r3, #0]
 80178a8:	6011      	str	r1, [r2, #0]
 80178aa:	2b00      	cmp	r3, #0
 80178ac:	da03      	bge.n	80178b6 <_printf_i+0x5e>
 80178ae:	222d      	movs	r2, #45	; 0x2d
 80178b0:	425b      	negs	r3, r3
 80178b2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80178b6:	486f      	ldr	r0, [pc, #444]	; (8017a74 <_printf_i+0x21c>)
 80178b8:	220a      	movs	r2, #10
 80178ba:	e039      	b.n	8017930 <_printf_i+0xd8>
 80178bc:	2973      	cmp	r1, #115	; 0x73
 80178be:	f000 809d 	beq.w	80179fc <_printf_i+0x1a4>
 80178c2:	d808      	bhi.n	80178d6 <_printf_i+0x7e>
 80178c4:	296f      	cmp	r1, #111	; 0x6f
 80178c6:	d020      	beq.n	801790a <_printf_i+0xb2>
 80178c8:	2970      	cmp	r1, #112	; 0x70
 80178ca:	d1dd      	bne.n	8017888 <_printf_i+0x30>
 80178cc:	6823      	ldr	r3, [r4, #0]
 80178ce:	f043 0320 	orr.w	r3, r3, #32
 80178d2:	6023      	str	r3, [r4, #0]
 80178d4:	e003      	b.n	80178de <_printf_i+0x86>
 80178d6:	2975      	cmp	r1, #117	; 0x75
 80178d8:	d017      	beq.n	801790a <_printf_i+0xb2>
 80178da:	2978      	cmp	r1, #120	; 0x78
 80178dc:	d1d4      	bne.n	8017888 <_printf_i+0x30>
 80178de:	2378      	movs	r3, #120	; 0x78
 80178e0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80178e4:	4864      	ldr	r0, [pc, #400]	; (8017a78 <_printf_i+0x220>)
 80178e6:	e055      	b.n	8017994 <_printf_i+0x13c>
 80178e8:	6813      	ldr	r3, [r2, #0]
 80178ea:	1d19      	adds	r1, r3, #4
 80178ec:	681b      	ldr	r3, [r3, #0]
 80178ee:	6011      	str	r1, [r2, #0]
 80178f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80178f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80178f8:	2301      	movs	r3, #1
 80178fa:	e08c      	b.n	8017a16 <_printf_i+0x1be>
 80178fc:	681b      	ldr	r3, [r3, #0]
 80178fe:	6011      	str	r1, [r2, #0]
 8017900:	f010 0f40 	tst.w	r0, #64	; 0x40
 8017904:	bf18      	it	ne
 8017906:	b21b      	sxthne	r3, r3
 8017908:	e7cf      	b.n	80178aa <_printf_i+0x52>
 801790a:	6813      	ldr	r3, [r2, #0]
 801790c:	6825      	ldr	r5, [r4, #0]
 801790e:	1d18      	adds	r0, r3, #4
 8017910:	6010      	str	r0, [r2, #0]
 8017912:	0628      	lsls	r0, r5, #24
 8017914:	d501      	bpl.n	801791a <_printf_i+0xc2>
 8017916:	681b      	ldr	r3, [r3, #0]
 8017918:	e002      	b.n	8017920 <_printf_i+0xc8>
 801791a:	0668      	lsls	r0, r5, #25
 801791c:	d5fb      	bpl.n	8017916 <_printf_i+0xbe>
 801791e:	881b      	ldrh	r3, [r3, #0]
 8017920:	4854      	ldr	r0, [pc, #336]	; (8017a74 <_printf_i+0x21c>)
 8017922:	296f      	cmp	r1, #111	; 0x6f
 8017924:	bf14      	ite	ne
 8017926:	220a      	movne	r2, #10
 8017928:	2208      	moveq	r2, #8
 801792a:	2100      	movs	r1, #0
 801792c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8017930:	6865      	ldr	r5, [r4, #4]
 8017932:	60a5      	str	r5, [r4, #8]
 8017934:	2d00      	cmp	r5, #0
 8017936:	f2c0 8095 	blt.w	8017a64 <_printf_i+0x20c>
 801793a:	6821      	ldr	r1, [r4, #0]
 801793c:	f021 0104 	bic.w	r1, r1, #4
 8017940:	6021      	str	r1, [r4, #0]
 8017942:	2b00      	cmp	r3, #0
 8017944:	d13d      	bne.n	80179c2 <_printf_i+0x16a>
 8017946:	2d00      	cmp	r5, #0
 8017948:	f040 808e 	bne.w	8017a68 <_printf_i+0x210>
 801794c:	4665      	mov	r5, ip
 801794e:	2a08      	cmp	r2, #8
 8017950:	d10b      	bne.n	801796a <_printf_i+0x112>
 8017952:	6823      	ldr	r3, [r4, #0]
 8017954:	07db      	lsls	r3, r3, #31
 8017956:	d508      	bpl.n	801796a <_printf_i+0x112>
 8017958:	6923      	ldr	r3, [r4, #16]
 801795a:	6862      	ldr	r2, [r4, #4]
 801795c:	429a      	cmp	r2, r3
 801795e:	bfde      	ittt	le
 8017960:	2330      	movle	r3, #48	; 0x30
 8017962:	f805 3c01 	strble.w	r3, [r5, #-1]
 8017966:	f105 35ff 	addle.w	r5, r5, #4294967295
 801796a:	ebac 0305 	sub.w	r3, ip, r5
 801796e:	6123      	str	r3, [r4, #16]
 8017970:	f8cd 8000 	str.w	r8, [sp]
 8017974:	463b      	mov	r3, r7
 8017976:	aa03      	add	r2, sp, #12
 8017978:	4621      	mov	r1, r4
 801797a:	4630      	mov	r0, r6
 801797c:	f7ff fef6 	bl	801776c <_printf_common>
 8017980:	3001      	adds	r0, #1
 8017982:	d14d      	bne.n	8017a20 <_printf_i+0x1c8>
 8017984:	f04f 30ff 	mov.w	r0, #4294967295
 8017988:	b005      	add	sp, #20
 801798a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801798e:	4839      	ldr	r0, [pc, #228]	; (8017a74 <_printf_i+0x21c>)
 8017990:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8017994:	6813      	ldr	r3, [r2, #0]
 8017996:	6821      	ldr	r1, [r4, #0]
 8017998:	1d1d      	adds	r5, r3, #4
 801799a:	681b      	ldr	r3, [r3, #0]
 801799c:	6015      	str	r5, [r2, #0]
 801799e:	060a      	lsls	r2, r1, #24
 80179a0:	d50b      	bpl.n	80179ba <_printf_i+0x162>
 80179a2:	07ca      	lsls	r2, r1, #31
 80179a4:	bf44      	itt	mi
 80179a6:	f041 0120 	orrmi.w	r1, r1, #32
 80179aa:	6021      	strmi	r1, [r4, #0]
 80179ac:	b91b      	cbnz	r3, 80179b6 <_printf_i+0x15e>
 80179ae:	6822      	ldr	r2, [r4, #0]
 80179b0:	f022 0220 	bic.w	r2, r2, #32
 80179b4:	6022      	str	r2, [r4, #0]
 80179b6:	2210      	movs	r2, #16
 80179b8:	e7b7      	b.n	801792a <_printf_i+0xd2>
 80179ba:	064d      	lsls	r5, r1, #25
 80179bc:	bf48      	it	mi
 80179be:	b29b      	uxthmi	r3, r3
 80179c0:	e7ef      	b.n	80179a2 <_printf_i+0x14a>
 80179c2:	4665      	mov	r5, ip
 80179c4:	fbb3 f1f2 	udiv	r1, r3, r2
 80179c8:	fb02 3311 	mls	r3, r2, r1, r3
 80179cc:	5cc3      	ldrb	r3, [r0, r3]
 80179ce:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80179d2:	460b      	mov	r3, r1
 80179d4:	2900      	cmp	r1, #0
 80179d6:	d1f5      	bne.n	80179c4 <_printf_i+0x16c>
 80179d8:	e7b9      	b.n	801794e <_printf_i+0xf6>
 80179da:	6813      	ldr	r3, [r2, #0]
 80179dc:	6825      	ldr	r5, [r4, #0]
 80179de:	6961      	ldr	r1, [r4, #20]
 80179e0:	1d18      	adds	r0, r3, #4
 80179e2:	6010      	str	r0, [r2, #0]
 80179e4:	0628      	lsls	r0, r5, #24
 80179e6:	681b      	ldr	r3, [r3, #0]
 80179e8:	d501      	bpl.n	80179ee <_printf_i+0x196>
 80179ea:	6019      	str	r1, [r3, #0]
 80179ec:	e002      	b.n	80179f4 <_printf_i+0x19c>
 80179ee:	066a      	lsls	r2, r5, #25
 80179f0:	d5fb      	bpl.n	80179ea <_printf_i+0x192>
 80179f2:	8019      	strh	r1, [r3, #0]
 80179f4:	2300      	movs	r3, #0
 80179f6:	6123      	str	r3, [r4, #16]
 80179f8:	4665      	mov	r5, ip
 80179fa:	e7b9      	b.n	8017970 <_printf_i+0x118>
 80179fc:	6813      	ldr	r3, [r2, #0]
 80179fe:	1d19      	adds	r1, r3, #4
 8017a00:	6011      	str	r1, [r2, #0]
 8017a02:	681d      	ldr	r5, [r3, #0]
 8017a04:	6862      	ldr	r2, [r4, #4]
 8017a06:	2100      	movs	r1, #0
 8017a08:	4628      	mov	r0, r5
 8017a0a:	f7e8 fc29 	bl	8000260 <memchr>
 8017a0e:	b108      	cbz	r0, 8017a14 <_printf_i+0x1bc>
 8017a10:	1b40      	subs	r0, r0, r5
 8017a12:	6060      	str	r0, [r4, #4]
 8017a14:	6863      	ldr	r3, [r4, #4]
 8017a16:	6123      	str	r3, [r4, #16]
 8017a18:	2300      	movs	r3, #0
 8017a1a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017a1e:	e7a7      	b.n	8017970 <_printf_i+0x118>
 8017a20:	6923      	ldr	r3, [r4, #16]
 8017a22:	462a      	mov	r2, r5
 8017a24:	4639      	mov	r1, r7
 8017a26:	4630      	mov	r0, r6
 8017a28:	47c0      	blx	r8
 8017a2a:	3001      	adds	r0, #1
 8017a2c:	d0aa      	beq.n	8017984 <_printf_i+0x12c>
 8017a2e:	6823      	ldr	r3, [r4, #0]
 8017a30:	079b      	lsls	r3, r3, #30
 8017a32:	d413      	bmi.n	8017a5c <_printf_i+0x204>
 8017a34:	68e0      	ldr	r0, [r4, #12]
 8017a36:	9b03      	ldr	r3, [sp, #12]
 8017a38:	4298      	cmp	r0, r3
 8017a3a:	bfb8      	it	lt
 8017a3c:	4618      	movlt	r0, r3
 8017a3e:	e7a3      	b.n	8017988 <_printf_i+0x130>
 8017a40:	2301      	movs	r3, #1
 8017a42:	464a      	mov	r2, r9
 8017a44:	4639      	mov	r1, r7
 8017a46:	4630      	mov	r0, r6
 8017a48:	47c0      	blx	r8
 8017a4a:	3001      	adds	r0, #1
 8017a4c:	d09a      	beq.n	8017984 <_printf_i+0x12c>
 8017a4e:	3501      	adds	r5, #1
 8017a50:	68e3      	ldr	r3, [r4, #12]
 8017a52:	9a03      	ldr	r2, [sp, #12]
 8017a54:	1a9b      	subs	r3, r3, r2
 8017a56:	42ab      	cmp	r3, r5
 8017a58:	dcf2      	bgt.n	8017a40 <_printf_i+0x1e8>
 8017a5a:	e7eb      	b.n	8017a34 <_printf_i+0x1dc>
 8017a5c:	2500      	movs	r5, #0
 8017a5e:	f104 0919 	add.w	r9, r4, #25
 8017a62:	e7f5      	b.n	8017a50 <_printf_i+0x1f8>
 8017a64:	2b00      	cmp	r3, #0
 8017a66:	d1ac      	bne.n	80179c2 <_printf_i+0x16a>
 8017a68:	7803      	ldrb	r3, [r0, #0]
 8017a6a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8017a6e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8017a72:	e76c      	b.n	801794e <_printf_i+0xf6>
 8017a74:	0801bd55 	.word	0x0801bd55
 8017a78:	0801bd66 	.word	0x0801bd66

08017a7c <_sbrk_r>:
 8017a7c:	b538      	push	{r3, r4, r5, lr}
 8017a7e:	4c06      	ldr	r4, [pc, #24]	; (8017a98 <_sbrk_r+0x1c>)
 8017a80:	2300      	movs	r3, #0
 8017a82:	4605      	mov	r5, r0
 8017a84:	4608      	mov	r0, r1
 8017a86:	6023      	str	r3, [r4, #0]
 8017a88:	f7e9 fa24 	bl	8000ed4 <_sbrk>
 8017a8c:	1c43      	adds	r3, r0, #1
 8017a8e:	d102      	bne.n	8017a96 <_sbrk_r+0x1a>
 8017a90:	6823      	ldr	r3, [r4, #0]
 8017a92:	b103      	cbz	r3, 8017a96 <_sbrk_r+0x1a>
 8017a94:	602b      	str	r3, [r5, #0]
 8017a96:	bd38      	pop	{r3, r4, r5, pc}
 8017a98:	2000d418 	.word	0x2000d418

08017a9c <__sread>:
 8017a9c:	b510      	push	{r4, lr}
 8017a9e:	460c      	mov	r4, r1
 8017aa0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017aa4:	f000 fa6e 	bl	8017f84 <_read_r>
 8017aa8:	2800      	cmp	r0, #0
 8017aaa:	bfab      	itete	ge
 8017aac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8017aae:	89a3      	ldrhlt	r3, [r4, #12]
 8017ab0:	181b      	addge	r3, r3, r0
 8017ab2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8017ab6:	bfac      	ite	ge
 8017ab8:	6563      	strge	r3, [r4, #84]	; 0x54
 8017aba:	81a3      	strhlt	r3, [r4, #12]
 8017abc:	bd10      	pop	{r4, pc}

08017abe <__swrite>:
 8017abe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017ac2:	461f      	mov	r7, r3
 8017ac4:	898b      	ldrh	r3, [r1, #12]
 8017ac6:	05db      	lsls	r3, r3, #23
 8017ac8:	4605      	mov	r5, r0
 8017aca:	460c      	mov	r4, r1
 8017acc:	4616      	mov	r6, r2
 8017ace:	d505      	bpl.n	8017adc <__swrite+0x1e>
 8017ad0:	2302      	movs	r3, #2
 8017ad2:	2200      	movs	r2, #0
 8017ad4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017ad8:	f000 f9b6 	bl	8017e48 <_lseek_r>
 8017adc:	89a3      	ldrh	r3, [r4, #12]
 8017ade:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017ae2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8017ae6:	81a3      	strh	r3, [r4, #12]
 8017ae8:	4632      	mov	r2, r6
 8017aea:	463b      	mov	r3, r7
 8017aec:	4628      	mov	r0, r5
 8017aee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017af2:	f000 b869 	b.w	8017bc8 <_write_r>

08017af6 <__sseek>:
 8017af6:	b510      	push	{r4, lr}
 8017af8:	460c      	mov	r4, r1
 8017afa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017afe:	f000 f9a3 	bl	8017e48 <_lseek_r>
 8017b02:	1c43      	adds	r3, r0, #1
 8017b04:	89a3      	ldrh	r3, [r4, #12]
 8017b06:	bf15      	itete	ne
 8017b08:	6560      	strne	r0, [r4, #84]	; 0x54
 8017b0a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8017b0e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8017b12:	81a3      	strheq	r3, [r4, #12]
 8017b14:	bf18      	it	ne
 8017b16:	81a3      	strhne	r3, [r4, #12]
 8017b18:	bd10      	pop	{r4, pc}

08017b1a <__sclose>:
 8017b1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017b1e:	f000 b8d3 	b.w	8017cc8 <_close_r>
	...

08017b24 <__swbuf_r>:
 8017b24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017b26:	460e      	mov	r6, r1
 8017b28:	4614      	mov	r4, r2
 8017b2a:	4605      	mov	r5, r0
 8017b2c:	b118      	cbz	r0, 8017b36 <__swbuf_r+0x12>
 8017b2e:	6983      	ldr	r3, [r0, #24]
 8017b30:	b90b      	cbnz	r3, 8017b36 <__swbuf_r+0x12>
 8017b32:	f7ff fa4f 	bl	8016fd4 <__sinit>
 8017b36:	4b21      	ldr	r3, [pc, #132]	; (8017bbc <__swbuf_r+0x98>)
 8017b38:	429c      	cmp	r4, r3
 8017b3a:	d12a      	bne.n	8017b92 <__swbuf_r+0x6e>
 8017b3c:	686c      	ldr	r4, [r5, #4]
 8017b3e:	69a3      	ldr	r3, [r4, #24]
 8017b40:	60a3      	str	r3, [r4, #8]
 8017b42:	89a3      	ldrh	r3, [r4, #12]
 8017b44:	071a      	lsls	r2, r3, #28
 8017b46:	d52e      	bpl.n	8017ba6 <__swbuf_r+0x82>
 8017b48:	6923      	ldr	r3, [r4, #16]
 8017b4a:	b363      	cbz	r3, 8017ba6 <__swbuf_r+0x82>
 8017b4c:	6923      	ldr	r3, [r4, #16]
 8017b4e:	6820      	ldr	r0, [r4, #0]
 8017b50:	1ac0      	subs	r0, r0, r3
 8017b52:	6963      	ldr	r3, [r4, #20]
 8017b54:	b2f6      	uxtb	r6, r6
 8017b56:	4283      	cmp	r3, r0
 8017b58:	4637      	mov	r7, r6
 8017b5a:	dc04      	bgt.n	8017b66 <__swbuf_r+0x42>
 8017b5c:	4621      	mov	r1, r4
 8017b5e:	4628      	mov	r0, r5
 8017b60:	f000 f948 	bl	8017df4 <_fflush_r>
 8017b64:	bb28      	cbnz	r0, 8017bb2 <__swbuf_r+0x8e>
 8017b66:	68a3      	ldr	r3, [r4, #8]
 8017b68:	3b01      	subs	r3, #1
 8017b6a:	60a3      	str	r3, [r4, #8]
 8017b6c:	6823      	ldr	r3, [r4, #0]
 8017b6e:	1c5a      	adds	r2, r3, #1
 8017b70:	6022      	str	r2, [r4, #0]
 8017b72:	701e      	strb	r6, [r3, #0]
 8017b74:	6963      	ldr	r3, [r4, #20]
 8017b76:	3001      	adds	r0, #1
 8017b78:	4283      	cmp	r3, r0
 8017b7a:	d004      	beq.n	8017b86 <__swbuf_r+0x62>
 8017b7c:	89a3      	ldrh	r3, [r4, #12]
 8017b7e:	07db      	lsls	r3, r3, #31
 8017b80:	d519      	bpl.n	8017bb6 <__swbuf_r+0x92>
 8017b82:	2e0a      	cmp	r6, #10
 8017b84:	d117      	bne.n	8017bb6 <__swbuf_r+0x92>
 8017b86:	4621      	mov	r1, r4
 8017b88:	4628      	mov	r0, r5
 8017b8a:	f000 f933 	bl	8017df4 <_fflush_r>
 8017b8e:	b190      	cbz	r0, 8017bb6 <__swbuf_r+0x92>
 8017b90:	e00f      	b.n	8017bb2 <__swbuf_r+0x8e>
 8017b92:	4b0b      	ldr	r3, [pc, #44]	; (8017bc0 <__swbuf_r+0x9c>)
 8017b94:	429c      	cmp	r4, r3
 8017b96:	d101      	bne.n	8017b9c <__swbuf_r+0x78>
 8017b98:	68ac      	ldr	r4, [r5, #8]
 8017b9a:	e7d0      	b.n	8017b3e <__swbuf_r+0x1a>
 8017b9c:	4b09      	ldr	r3, [pc, #36]	; (8017bc4 <__swbuf_r+0xa0>)
 8017b9e:	429c      	cmp	r4, r3
 8017ba0:	bf08      	it	eq
 8017ba2:	68ec      	ldreq	r4, [r5, #12]
 8017ba4:	e7cb      	b.n	8017b3e <__swbuf_r+0x1a>
 8017ba6:	4621      	mov	r1, r4
 8017ba8:	4628      	mov	r0, r5
 8017baa:	f000 f81f 	bl	8017bec <__swsetup_r>
 8017bae:	2800      	cmp	r0, #0
 8017bb0:	d0cc      	beq.n	8017b4c <__swbuf_r+0x28>
 8017bb2:	f04f 37ff 	mov.w	r7, #4294967295
 8017bb6:	4638      	mov	r0, r7
 8017bb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017bba:	bf00      	nop
 8017bbc:	0801bd04 	.word	0x0801bd04
 8017bc0:	0801bd24 	.word	0x0801bd24
 8017bc4:	0801bce4 	.word	0x0801bce4

08017bc8 <_write_r>:
 8017bc8:	b538      	push	{r3, r4, r5, lr}
 8017bca:	4c07      	ldr	r4, [pc, #28]	; (8017be8 <_write_r+0x20>)
 8017bcc:	4605      	mov	r5, r0
 8017bce:	4608      	mov	r0, r1
 8017bd0:	4611      	mov	r1, r2
 8017bd2:	2200      	movs	r2, #0
 8017bd4:	6022      	str	r2, [r4, #0]
 8017bd6:	461a      	mov	r2, r3
 8017bd8:	f7e9 f92b 	bl	8000e32 <_write>
 8017bdc:	1c43      	adds	r3, r0, #1
 8017bde:	d102      	bne.n	8017be6 <_write_r+0x1e>
 8017be0:	6823      	ldr	r3, [r4, #0]
 8017be2:	b103      	cbz	r3, 8017be6 <_write_r+0x1e>
 8017be4:	602b      	str	r3, [r5, #0]
 8017be6:	bd38      	pop	{r3, r4, r5, pc}
 8017be8:	2000d418 	.word	0x2000d418

08017bec <__swsetup_r>:
 8017bec:	4b32      	ldr	r3, [pc, #200]	; (8017cb8 <__swsetup_r+0xcc>)
 8017bee:	b570      	push	{r4, r5, r6, lr}
 8017bf0:	681d      	ldr	r5, [r3, #0]
 8017bf2:	4606      	mov	r6, r0
 8017bf4:	460c      	mov	r4, r1
 8017bf6:	b125      	cbz	r5, 8017c02 <__swsetup_r+0x16>
 8017bf8:	69ab      	ldr	r3, [r5, #24]
 8017bfa:	b913      	cbnz	r3, 8017c02 <__swsetup_r+0x16>
 8017bfc:	4628      	mov	r0, r5
 8017bfe:	f7ff f9e9 	bl	8016fd4 <__sinit>
 8017c02:	4b2e      	ldr	r3, [pc, #184]	; (8017cbc <__swsetup_r+0xd0>)
 8017c04:	429c      	cmp	r4, r3
 8017c06:	d10f      	bne.n	8017c28 <__swsetup_r+0x3c>
 8017c08:	686c      	ldr	r4, [r5, #4]
 8017c0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017c0e:	b29a      	uxth	r2, r3
 8017c10:	0715      	lsls	r5, r2, #28
 8017c12:	d42c      	bmi.n	8017c6e <__swsetup_r+0x82>
 8017c14:	06d0      	lsls	r0, r2, #27
 8017c16:	d411      	bmi.n	8017c3c <__swsetup_r+0x50>
 8017c18:	2209      	movs	r2, #9
 8017c1a:	6032      	str	r2, [r6, #0]
 8017c1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017c20:	81a3      	strh	r3, [r4, #12]
 8017c22:	f04f 30ff 	mov.w	r0, #4294967295
 8017c26:	e03e      	b.n	8017ca6 <__swsetup_r+0xba>
 8017c28:	4b25      	ldr	r3, [pc, #148]	; (8017cc0 <__swsetup_r+0xd4>)
 8017c2a:	429c      	cmp	r4, r3
 8017c2c:	d101      	bne.n	8017c32 <__swsetup_r+0x46>
 8017c2e:	68ac      	ldr	r4, [r5, #8]
 8017c30:	e7eb      	b.n	8017c0a <__swsetup_r+0x1e>
 8017c32:	4b24      	ldr	r3, [pc, #144]	; (8017cc4 <__swsetup_r+0xd8>)
 8017c34:	429c      	cmp	r4, r3
 8017c36:	bf08      	it	eq
 8017c38:	68ec      	ldreq	r4, [r5, #12]
 8017c3a:	e7e6      	b.n	8017c0a <__swsetup_r+0x1e>
 8017c3c:	0751      	lsls	r1, r2, #29
 8017c3e:	d512      	bpl.n	8017c66 <__swsetup_r+0x7a>
 8017c40:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017c42:	b141      	cbz	r1, 8017c56 <__swsetup_r+0x6a>
 8017c44:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017c48:	4299      	cmp	r1, r3
 8017c4a:	d002      	beq.n	8017c52 <__swsetup_r+0x66>
 8017c4c:	4630      	mov	r0, r6
 8017c4e:	f7ff fa53 	bl	80170f8 <_free_r>
 8017c52:	2300      	movs	r3, #0
 8017c54:	6363      	str	r3, [r4, #52]	; 0x34
 8017c56:	89a3      	ldrh	r3, [r4, #12]
 8017c58:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8017c5c:	81a3      	strh	r3, [r4, #12]
 8017c5e:	2300      	movs	r3, #0
 8017c60:	6063      	str	r3, [r4, #4]
 8017c62:	6923      	ldr	r3, [r4, #16]
 8017c64:	6023      	str	r3, [r4, #0]
 8017c66:	89a3      	ldrh	r3, [r4, #12]
 8017c68:	f043 0308 	orr.w	r3, r3, #8
 8017c6c:	81a3      	strh	r3, [r4, #12]
 8017c6e:	6923      	ldr	r3, [r4, #16]
 8017c70:	b94b      	cbnz	r3, 8017c86 <__swsetup_r+0x9a>
 8017c72:	89a3      	ldrh	r3, [r4, #12]
 8017c74:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8017c78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017c7c:	d003      	beq.n	8017c86 <__swsetup_r+0x9a>
 8017c7e:	4621      	mov	r1, r4
 8017c80:	4630      	mov	r0, r6
 8017c82:	f000 f917 	bl	8017eb4 <__smakebuf_r>
 8017c86:	89a2      	ldrh	r2, [r4, #12]
 8017c88:	f012 0301 	ands.w	r3, r2, #1
 8017c8c:	d00c      	beq.n	8017ca8 <__swsetup_r+0xbc>
 8017c8e:	2300      	movs	r3, #0
 8017c90:	60a3      	str	r3, [r4, #8]
 8017c92:	6963      	ldr	r3, [r4, #20]
 8017c94:	425b      	negs	r3, r3
 8017c96:	61a3      	str	r3, [r4, #24]
 8017c98:	6923      	ldr	r3, [r4, #16]
 8017c9a:	b953      	cbnz	r3, 8017cb2 <__swsetup_r+0xc6>
 8017c9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017ca0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8017ca4:	d1ba      	bne.n	8017c1c <__swsetup_r+0x30>
 8017ca6:	bd70      	pop	{r4, r5, r6, pc}
 8017ca8:	0792      	lsls	r2, r2, #30
 8017caa:	bf58      	it	pl
 8017cac:	6963      	ldrpl	r3, [r4, #20]
 8017cae:	60a3      	str	r3, [r4, #8]
 8017cb0:	e7f2      	b.n	8017c98 <__swsetup_r+0xac>
 8017cb2:	2000      	movs	r0, #0
 8017cb4:	e7f7      	b.n	8017ca6 <__swsetup_r+0xba>
 8017cb6:	bf00      	nop
 8017cb8:	2000001c 	.word	0x2000001c
 8017cbc:	0801bd04 	.word	0x0801bd04
 8017cc0:	0801bd24 	.word	0x0801bd24
 8017cc4:	0801bce4 	.word	0x0801bce4

08017cc8 <_close_r>:
 8017cc8:	b538      	push	{r3, r4, r5, lr}
 8017cca:	4c06      	ldr	r4, [pc, #24]	; (8017ce4 <_close_r+0x1c>)
 8017ccc:	2300      	movs	r3, #0
 8017cce:	4605      	mov	r5, r0
 8017cd0:	4608      	mov	r0, r1
 8017cd2:	6023      	str	r3, [r4, #0]
 8017cd4:	f7e9 f8c9 	bl	8000e6a <_close>
 8017cd8:	1c43      	adds	r3, r0, #1
 8017cda:	d102      	bne.n	8017ce2 <_close_r+0x1a>
 8017cdc:	6823      	ldr	r3, [r4, #0]
 8017cde:	b103      	cbz	r3, 8017ce2 <_close_r+0x1a>
 8017ce0:	602b      	str	r3, [r5, #0]
 8017ce2:	bd38      	pop	{r3, r4, r5, pc}
 8017ce4:	2000d418 	.word	0x2000d418

08017ce8 <__sflush_r>:
 8017ce8:	898a      	ldrh	r2, [r1, #12]
 8017cea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017cee:	4605      	mov	r5, r0
 8017cf0:	0710      	lsls	r0, r2, #28
 8017cf2:	460c      	mov	r4, r1
 8017cf4:	d458      	bmi.n	8017da8 <__sflush_r+0xc0>
 8017cf6:	684b      	ldr	r3, [r1, #4]
 8017cf8:	2b00      	cmp	r3, #0
 8017cfa:	dc05      	bgt.n	8017d08 <__sflush_r+0x20>
 8017cfc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8017cfe:	2b00      	cmp	r3, #0
 8017d00:	dc02      	bgt.n	8017d08 <__sflush_r+0x20>
 8017d02:	2000      	movs	r0, #0
 8017d04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017d08:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8017d0a:	2e00      	cmp	r6, #0
 8017d0c:	d0f9      	beq.n	8017d02 <__sflush_r+0x1a>
 8017d0e:	2300      	movs	r3, #0
 8017d10:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8017d14:	682f      	ldr	r7, [r5, #0]
 8017d16:	6a21      	ldr	r1, [r4, #32]
 8017d18:	602b      	str	r3, [r5, #0]
 8017d1a:	d032      	beq.n	8017d82 <__sflush_r+0x9a>
 8017d1c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8017d1e:	89a3      	ldrh	r3, [r4, #12]
 8017d20:	075a      	lsls	r2, r3, #29
 8017d22:	d505      	bpl.n	8017d30 <__sflush_r+0x48>
 8017d24:	6863      	ldr	r3, [r4, #4]
 8017d26:	1ac0      	subs	r0, r0, r3
 8017d28:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8017d2a:	b10b      	cbz	r3, 8017d30 <__sflush_r+0x48>
 8017d2c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8017d2e:	1ac0      	subs	r0, r0, r3
 8017d30:	2300      	movs	r3, #0
 8017d32:	4602      	mov	r2, r0
 8017d34:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8017d36:	6a21      	ldr	r1, [r4, #32]
 8017d38:	4628      	mov	r0, r5
 8017d3a:	47b0      	blx	r6
 8017d3c:	1c43      	adds	r3, r0, #1
 8017d3e:	89a3      	ldrh	r3, [r4, #12]
 8017d40:	d106      	bne.n	8017d50 <__sflush_r+0x68>
 8017d42:	6829      	ldr	r1, [r5, #0]
 8017d44:	291d      	cmp	r1, #29
 8017d46:	d848      	bhi.n	8017dda <__sflush_r+0xf2>
 8017d48:	4a29      	ldr	r2, [pc, #164]	; (8017df0 <__sflush_r+0x108>)
 8017d4a:	40ca      	lsrs	r2, r1
 8017d4c:	07d6      	lsls	r6, r2, #31
 8017d4e:	d544      	bpl.n	8017dda <__sflush_r+0xf2>
 8017d50:	2200      	movs	r2, #0
 8017d52:	6062      	str	r2, [r4, #4]
 8017d54:	04d9      	lsls	r1, r3, #19
 8017d56:	6922      	ldr	r2, [r4, #16]
 8017d58:	6022      	str	r2, [r4, #0]
 8017d5a:	d504      	bpl.n	8017d66 <__sflush_r+0x7e>
 8017d5c:	1c42      	adds	r2, r0, #1
 8017d5e:	d101      	bne.n	8017d64 <__sflush_r+0x7c>
 8017d60:	682b      	ldr	r3, [r5, #0]
 8017d62:	b903      	cbnz	r3, 8017d66 <__sflush_r+0x7e>
 8017d64:	6560      	str	r0, [r4, #84]	; 0x54
 8017d66:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017d68:	602f      	str	r7, [r5, #0]
 8017d6a:	2900      	cmp	r1, #0
 8017d6c:	d0c9      	beq.n	8017d02 <__sflush_r+0x1a>
 8017d6e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017d72:	4299      	cmp	r1, r3
 8017d74:	d002      	beq.n	8017d7c <__sflush_r+0x94>
 8017d76:	4628      	mov	r0, r5
 8017d78:	f7ff f9be 	bl	80170f8 <_free_r>
 8017d7c:	2000      	movs	r0, #0
 8017d7e:	6360      	str	r0, [r4, #52]	; 0x34
 8017d80:	e7c0      	b.n	8017d04 <__sflush_r+0x1c>
 8017d82:	2301      	movs	r3, #1
 8017d84:	4628      	mov	r0, r5
 8017d86:	47b0      	blx	r6
 8017d88:	1c41      	adds	r1, r0, #1
 8017d8a:	d1c8      	bne.n	8017d1e <__sflush_r+0x36>
 8017d8c:	682b      	ldr	r3, [r5, #0]
 8017d8e:	2b00      	cmp	r3, #0
 8017d90:	d0c5      	beq.n	8017d1e <__sflush_r+0x36>
 8017d92:	2b1d      	cmp	r3, #29
 8017d94:	d001      	beq.n	8017d9a <__sflush_r+0xb2>
 8017d96:	2b16      	cmp	r3, #22
 8017d98:	d101      	bne.n	8017d9e <__sflush_r+0xb6>
 8017d9a:	602f      	str	r7, [r5, #0]
 8017d9c:	e7b1      	b.n	8017d02 <__sflush_r+0x1a>
 8017d9e:	89a3      	ldrh	r3, [r4, #12]
 8017da0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017da4:	81a3      	strh	r3, [r4, #12]
 8017da6:	e7ad      	b.n	8017d04 <__sflush_r+0x1c>
 8017da8:	690f      	ldr	r7, [r1, #16]
 8017daa:	2f00      	cmp	r7, #0
 8017dac:	d0a9      	beq.n	8017d02 <__sflush_r+0x1a>
 8017dae:	0793      	lsls	r3, r2, #30
 8017db0:	680e      	ldr	r6, [r1, #0]
 8017db2:	bf08      	it	eq
 8017db4:	694b      	ldreq	r3, [r1, #20]
 8017db6:	600f      	str	r7, [r1, #0]
 8017db8:	bf18      	it	ne
 8017dba:	2300      	movne	r3, #0
 8017dbc:	eba6 0807 	sub.w	r8, r6, r7
 8017dc0:	608b      	str	r3, [r1, #8]
 8017dc2:	f1b8 0f00 	cmp.w	r8, #0
 8017dc6:	dd9c      	ble.n	8017d02 <__sflush_r+0x1a>
 8017dc8:	4643      	mov	r3, r8
 8017dca:	463a      	mov	r2, r7
 8017dcc:	6a21      	ldr	r1, [r4, #32]
 8017dce:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8017dd0:	4628      	mov	r0, r5
 8017dd2:	47b0      	blx	r6
 8017dd4:	2800      	cmp	r0, #0
 8017dd6:	dc06      	bgt.n	8017de6 <__sflush_r+0xfe>
 8017dd8:	89a3      	ldrh	r3, [r4, #12]
 8017dda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017dde:	81a3      	strh	r3, [r4, #12]
 8017de0:	f04f 30ff 	mov.w	r0, #4294967295
 8017de4:	e78e      	b.n	8017d04 <__sflush_r+0x1c>
 8017de6:	4407      	add	r7, r0
 8017de8:	eba8 0800 	sub.w	r8, r8, r0
 8017dec:	e7e9      	b.n	8017dc2 <__sflush_r+0xda>
 8017dee:	bf00      	nop
 8017df0:	20400001 	.word	0x20400001

08017df4 <_fflush_r>:
 8017df4:	b538      	push	{r3, r4, r5, lr}
 8017df6:	690b      	ldr	r3, [r1, #16]
 8017df8:	4605      	mov	r5, r0
 8017dfa:	460c      	mov	r4, r1
 8017dfc:	b1db      	cbz	r3, 8017e36 <_fflush_r+0x42>
 8017dfe:	b118      	cbz	r0, 8017e08 <_fflush_r+0x14>
 8017e00:	6983      	ldr	r3, [r0, #24]
 8017e02:	b90b      	cbnz	r3, 8017e08 <_fflush_r+0x14>
 8017e04:	f7ff f8e6 	bl	8016fd4 <__sinit>
 8017e08:	4b0c      	ldr	r3, [pc, #48]	; (8017e3c <_fflush_r+0x48>)
 8017e0a:	429c      	cmp	r4, r3
 8017e0c:	d109      	bne.n	8017e22 <_fflush_r+0x2e>
 8017e0e:	686c      	ldr	r4, [r5, #4]
 8017e10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017e14:	b17b      	cbz	r3, 8017e36 <_fflush_r+0x42>
 8017e16:	4621      	mov	r1, r4
 8017e18:	4628      	mov	r0, r5
 8017e1a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017e1e:	f7ff bf63 	b.w	8017ce8 <__sflush_r>
 8017e22:	4b07      	ldr	r3, [pc, #28]	; (8017e40 <_fflush_r+0x4c>)
 8017e24:	429c      	cmp	r4, r3
 8017e26:	d101      	bne.n	8017e2c <_fflush_r+0x38>
 8017e28:	68ac      	ldr	r4, [r5, #8]
 8017e2a:	e7f1      	b.n	8017e10 <_fflush_r+0x1c>
 8017e2c:	4b05      	ldr	r3, [pc, #20]	; (8017e44 <_fflush_r+0x50>)
 8017e2e:	429c      	cmp	r4, r3
 8017e30:	bf08      	it	eq
 8017e32:	68ec      	ldreq	r4, [r5, #12]
 8017e34:	e7ec      	b.n	8017e10 <_fflush_r+0x1c>
 8017e36:	2000      	movs	r0, #0
 8017e38:	bd38      	pop	{r3, r4, r5, pc}
 8017e3a:	bf00      	nop
 8017e3c:	0801bd04 	.word	0x0801bd04
 8017e40:	0801bd24 	.word	0x0801bd24
 8017e44:	0801bce4 	.word	0x0801bce4

08017e48 <_lseek_r>:
 8017e48:	b538      	push	{r3, r4, r5, lr}
 8017e4a:	4c07      	ldr	r4, [pc, #28]	; (8017e68 <_lseek_r+0x20>)
 8017e4c:	4605      	mov	r5, r0
 8017e4e:	4608      	mov	r0, r1
 8017e50:	4611      	mov	r1, r2
 8017e52:	2200      	movs	r2, #0
 8017e54:	6022      	str	r2, [r4, #0]
 8017e56:	461a      	mov	r2, r3
 8017e58:	f7e9 f82e 	bl	8000eb8 <_lseek>
 8017e5c:	1c43      	adds	r3, r0, #1
 8017e5e:	d102      	bne.n	8017e66 <_lseek_r+0x1e>
 8017e60:	6823      	ldr	r3, [r4, #0]
 8017e62:	b103      	cbz	r3, 8017e66 <_lseek_r+0x1e>
 8017e64:	602b      	str	r3, [r5, #0]
 8017e66:	bd38      	pop	{r3, r4, r5, pc}
 8017e68:	2000d418 	.word	0x2000d418

08017e6c <__swhatbuf_r>:
 8017e6c:	b570      	push	{r4, r5, r6, lr}
 8017e6e:	460e      	mov	r6, r1
 8017e70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017e74:	2900      	cmp	r1, #0
 8017e76:	b096      	sub	sp, #88	; 0x58
 8017e78:	4614      	mov	r4, r2
 8017e7a:	461d      	mov	r5, r3
 8017e7c:	da07      	bge.n	8017e8e <__swhatbuf_r+0x22>
 8017e7e:	2300      	movs	r3, #0
 8017e80:	602b      	str	r3, [r5, #0]
 8017e82:	89b3      	ldrh	r3, [r6, #12]
 8017e84:	061a      	lsls	r2, r3, #24
 8017e86:	d410      	bmi.n	8017eaa <__swhatbuf_r+0x3e>
 8017e88:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8017e8c:	e00e      	b.n	8017eac <__swhatbuf_r+0x40>
 8017e8e:	466a      	mov	r2, sp
 8017e90:	f000 f88a 	bl	8017fa8 <_fstat_r>
 8017e94:	2800      	cmp	r0, #0
 8017e96:	dbf2      	blt.n	8017e7e <__swhatbuf_r+0x12>
 8017e98:	9a01      	ldr	r2, [sp, #4]
 8017e9a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8017e9e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8017ea2:	425a      	negs	r2, r3
 8017ea4:	415a      	adcs	r2, r3
 8017ea6:	602a      	str	r2, [r5, #0]
 8017ea8:	e7ee      	b.n	8017e88 <__swhatbuf_r+0x1c>
 8017eaa:	2340      	movs	r3, #64	; 0x40
 8017eac:	2000      	movs	r0, #0
 8017eae:	6023      	str	r3, [r4, #0]
 8017eb0:	b016      	add	sp, #88	; 0x58
 8017eb2:	bd70      	pop	{r4, r5, r6, pc}

08017eb4 <__smakebuf_r>:
 8017eb4:	898b      	ldrh	r3, [r1, #12]
 8017eb6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8017eb8:	079d      	lsls	r5, r3, #30
 8017eba:	4606      	mov	r6, r0
 8017ebc:	460c      	mov	r4, r1
 8017ebe:	d507      	bpl.n	8017ed0 <__smakebuf_r+0x1c>
 8017ec0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8017ec4:	6023      	str	r3, [r4, #0]
 8017ec6:	6123      	str	r3, [r4, #16]
 8017ec8:	2301      	movs	r3, #1
 8017eca:	6163      	str	r3, [r4, #20]
 8017ecc:	b002      	add	sp, #8
 8017ece:	bd70      	pop	{r4, r5, r6, pc}
 8017ed0:	ab01      	add	r3, sp, #4
 8017ed2:	466a      	mov	r2, sp
 8017ed4:	f7ff ffca 	bl	8017e6c <__swhatbuf_r>
 8017ed8:	9900      	ldr	r1, [sp, #0]
 8017eda:	4605      	mov	r5, r0
 8017edc:	4630      	mov	r0, r6
 8017ede:	f7ff f959 	bl	8017194 <_malloc_r>
 8017ee2:	b948      	cbnz	r0, 8017ef8 <__smakebuf_r+0x44>
 8017ee4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017ee8:	059a      	lsls	r2, r3, #22
 8017eea:	d4ef      	bmi.n	8017ecc <__smakebuf_r+0x18>
 8017eec:	f023 0303 	bic.w	r3, r3, #3
 8017ef0:	f043 0302 	orr.w	r3, r3, #2
 8017ef4:	81a3      	strh	r3, [r4, #12]
 8017ef6:	e7e3      	b.n	8017ec0 <__smakebuf_r+0xc>
 8017ef8:	4b0d      	ldr	r3, [pc, #52]	; (8017f30 <__smakebuf_r+0x7c>)
 8017efa:	62b3      	str	r3, [r6, #40]	; 0x28
 8017efc:	89a3      	ldrh	r3, [r4, #12]
 8017efe:	6020      	str	r0, [r4, #0]
 8017f00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017f04:	81a3      	strh	r3, [r4, #12]
 8017f06:	9b00      	ldr	r3, [sp, #0]
 8017f08:	6163      	str	r3, [r4, #20]
 8017f0a:	9b01      	ldr	r3, [sp, #4]
 8017f0c:	6120      	str	r0, [r4, #16]
 8017f0e:	b15b      	cbz	r3, 8017f28 <__smakebuf_r+0x74>
 8017f10:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017f14:	4630      	mov	r0, r6
 8017f16:	f000 f859 	bl	8017fcc <_isatty_r>
 8017f1a:	b128      	cbz	r0, 8017f28 <__smakebuf_r+0x74>
 8017f1c:	89a3      	ldrh	r3, [r4, #12]
 8017f1e:	f023 0303 	bic.w	r3, r3, #3
 8017f22:	f043 0301 	orr.w	r3, r3, #1
 8017f26:	81a3      	strh	r3, [r4, #12]
 8017f28:	89a3      	ldrh	r3, [r4, #12]
 8017f2a:	431d      	orrs	r5, r3
 8017f2c:	81a5      	strh	r5, [r4, #12]
 8017f2e:	e7cd      	b.n	8017ecc <__smakebuf_r+0x18>
 8017f30:	08016f9d 	.word	0x08016f9d

08017f34 <__malloc_lock>:
 8017f34:	4770      	bx	lr

08017f36 <__malloc_unlock>:
 8017f36:	4770      	bx	lr

08017f38 <_realloc_r>:
 8017f38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017f3a:	4607      	mov	r7, r0
 8017f3c:	4614      	mov	r4, r2
 8017f3e:	460e      	mov	r6, r1
 8017f40:	b921      	cbnz	r1, 8017f4c <_realloc_r+0x14>
 8017f42:	4611      	mov	r1, r2
 8017f44:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8017f48:	f7ff b924 	b.w	8017194 <_malloc_r>
 8017f4c:	b922      	cbnz	r2, 8017f58 <_realloc_r+0x20>
 8017f4e:	f7ff f8d3 	bl	80170f8 <_free_r>
 8017f52:	4625      	mov	r5, r4
 8017f54:	4628      	mov	r0, r5
 8017f56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017f58:	f000 f848 	bl	8017fec <_malloc_usable_size_r>
 8017f5c:	42a0      	cmp	r0, r4
 8017f5e:	d20f      	bcs.n	8017f80 <_realloc_r+0x48>
 8017f60:	4621      	mov	r1, r4
 8017f62:	4638      	mov	r0, r7
 8017f64:	f7ff f916 	bl	8017194 <_malloc_r>
 8017f68:	4605      	mov	r5, r0
 8017f6a:	2800      	cmp	r0, #0
 8017f6c:	d0f2      	beq.n	8017f54 <_realloc_r+0x1c>
 8017f6e:	4631      	mov	r1, r6
 8017f70:	4622      	mov	r2, r4
 8017f72:	f7fe ff48 	bl	8016e06 <memcpy>
 8017f76:	4631      	mov	r1, r6
 8017f78:	4638      	mov	r0, r7
 8017f7a:	f7ff f8bd 	bl	80170f8 <_free_r>
 8017f7e:	e7e9      	b.n	8017f54 <_realloc_r+0x1c>
 8017f80:	4635      	mov	r5, r6
 8017f82:	e7e7      	b.n	8017f54 <_realloc_r+0x1c>

08017f84 <_read_r>:
 8017f84:	b538      	push	{r3, r4, r5, lr}
 8017f86:	4c07      	ldr	r4, [pc, #28]	; (8017fa4 <_read_r+0x20>)
 8017f88:	4605      	mov	r5, r0
 8017f8a:	4608      	mov	r0, r1
 8017f8c:	4611      	mov	r1, r2
 8017f8e:	2200      	movs	r2, #0
 8017f90:	6022      	str	r2, [r4, #0]
 8017f92:	461a      	mov	r2, r3
 8017f94:	f7e8 ff30 	bl	8000df8 <_read>
 8017f98:	1c43      	adds	r3, r0, #1
 8017f9a:	d102      	bne.n	8017fa2 <_read_r+0x1e>
 8017f9c:	6823      	ldr	r3, [r4, #0]
 8017f9e:	b103      	cbz	r3, 8017fa2 <_read_r+0x1e>
 8017fa0:	602b      	str	r3, [r5, #0]
 8017fa2:	bd38      	pop	{r3, r4, r5, pc}
 8017fa4:	2000d418 	.word	0x2000d418

08017fa8 <_fstat_r>:
 8017fa8:	b538      	push	{r3, r4, r5, lr}
 8017faa:	4c07      	ldr	r4, [pc, #28]	; (8017fc8 <_fstat_r+0x20>)
 8017fac:	2300      	movs	r3, #0
 8017fae:	4605      	mov	r5, r0
 8017fb0:	4608      	mov	r0, r1
 8017fb2:	4611      	mov	r1, r2
 8017fb4:	6023      	str	r3, [r4, #0]
 8017fb6:	f7e8 ff64 	bl	8000e82 <_fstat>
 8017fba:	1c43      	adds	r3, r0, #1
 8017fbc:	d102      	bne.n	8017fc4 <_fstat_r+0x1c>
 8017fbe:	6823      	ldr	r3, [r4, #0]
 8017fc0:	b103      	cbz	r3, 8017fc4 <_fstat_r+0x1c>
 8017fc2:	602b      	str	r3, [r5, #0]
 8017fc4:	bd38      	pop	{r3, r4, r5, pc}
 8017fc6:	bf00      	nop
 8017fc8:	2000d418 	.word	0x2000d418

08017fcc <_isatty_r>:
 8017fcc:	b538      	push	{r3, r4, r5, lr}
 8017fce:	4c06      	ldr	r4, [pc, #24]	; (8017fe8 <_isatty_r+0x1c>)
 8017fd0:	2300      	movs	r3, #0
 8017fd2:	4605      	mov	r5, r0
 8017fd4:	4608      	mov	r0, r1
 8017fd6:	6023      	str	r3, [r4, #0]
 8017fd8:	f7e8 ff63 	bl	8000ea2 <_isatty>
 8017fdc:	1c43      	adds	r3, r0, #1
 8017fde:	d102      	bne.n	8017fe6 <_isatty_r+0x1a>
 8017fe0:	6823      	ldr	r3, [r4, #0]
 8017fe2:	b103      	cbz	r3, 8017fe6 <_isatty_r+0x1a>
 8017fe4:	602b      	str	r3, [r5, #0]
 8017fe6:	bd38      	pop	{r3, r4, r5, pc}
 8017fe8:	2000d418 	.word	0x2000d418

08017fec <_malloc_usable_size_r>:
 8017fec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017ff0:	1f18      	subs	r0, r3, #4
 8017ff2:	2b00      	cmp	r3, #0
 8017ff4:	bfbc      	itt	lt
 8017ff6:	580b      	ldrlt	r3, [r1, r0]
 8017ff8:	18c0      	addlt	r0, r0, r3
 8017ffa:	4770      	bx	lr

08017ffc <_init>:
 8017ffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017ffe:	bf00      	nop
 8018000:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018002:	bc08      	pop	{r3}
 8018004:	469e      	mov	lr, r3
 8018006:	4770      	bx	lr

08018008 <_fini>:
 8018008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801800a:	bf00      	nop
 801800c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801800e:	bc08      	pop	{r3}
 8018010:	469e      	mov	lr, r3
 8018012:	4770      	bx	lr
