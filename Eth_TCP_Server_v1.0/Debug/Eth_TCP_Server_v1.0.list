
Eth_TCP_Server_v1.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f594  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002830  0800f794  0800f794  0001f794  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011fc4  08011fc4  00030074  2**0
                  CONTENTS
  4 .ARM          00000008  08011fc4  08011fc4  00021fc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011fcc  08011fcc  00030074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011fcc  08011fcc  00021fcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011fd0  08011fd0  00021fd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08011fd4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008a88  20000074  08012048  00030074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20008afc  08012048  00038afc  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00030074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002ef46  00000000  00000000  000300a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000562b  00000000  00000000  0005efe8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000018f0  00000000  00000000  00064618  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001828  00000000  00000000  00065f08  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00034298  00000000  00000000  00067730  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00020eae  00000000  00000000  0009b9c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00119a5d  00000000  00000000  000bc876  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001d62d3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006d0c  00000000  00000000  001d6350  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000074 	.word	0x20000074
 800021c:	00000000 	.word	0x00000000
 8000220:	0800f77c 	.word	0x0800f77c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000078 	.word	0x20000078
 800023c:	0800f77c 	.word	0x0800f77c

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b972 	b.w	80005ec <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	4688      	mov	r8, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14b      	bne.n	80003c6 <__udivmoddi4+0xa6>
 800032e:	428a      	cmp	r2, r1
 8000330:	4615      	mov	r5, r2
 8000332:	d967      	bls.n	8000404 <__udivmoddi4+0xe4>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0720 	rsb	r7, r2, #32
 800033e:	fa01 f302 	lsl.w	r3, r1, r2
 8000342:	fa20 f707 	lsr.w	r7, r0, r7
 8000346:	4095      	lsls	r5, r2
 8000348:	ea47 0803 	orr.w	r8, r7, r3
 800034c:	4094      	lsls	r4, r2
 800034e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fbb8 f7fe 	udiv	r7, r8, lr
 8000358:	fa1f fc85 	uxth.w	ip, r5
 800035c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000360:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000364:	fb07 f10c 	mul.w	r1, r7, ip
 8000368:	4299      	cmp	r1, r3
 800036a:	d909      	bls.n	8000380 <__udivmoddi4+0x60>
 800036c:	18eb      	adds	r3, r5, r3
 800036e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000372:	f080 811b 	bcs.w	80005ac <__udivmoddi4+0x28c>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 8118 	bls.w	80005ac <__udivmoddi4+0x28c>
 800037c:	3f02      	subs	r7, #2
 800037e:	442b      	add	r3, r5
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0fe 	udiv	r0, r3, lr
 8000388:	fb0e 3310 	mls	r3, lr, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 fc0c 	mul.w	ip, r0, ip
 8000394:	45a4      	cmp	ip, r4
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x8c>
 8000398:	192c      	adds	r4, r5, r4
 800039a:	f100 33ff 	add.w	r3, r0, #4294967295
 800039e:	f080 8107 	bcs.w	80005b0 <__udivmoddi4+0x290>
 80003a2:	45a4      	cmp	ip, r4
 80003a4:	f240 8104 	bls.w	80005b0 <__udivmoddi4+0x290>
 80003a8:	3802      	subs	r0, #2
 80003aa:	442c      	add	r4, r5
 80003ac:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003b0:	eba4 040c 	sub.w	r4, r4, ip
 80003b4:	2700      	movs	r7, #0
 80003b6:	b11e      	cbz	r6, 80003c0 <__udivmoddi4+0xa0>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c6 4300 	strd	r4, r3, [r6]
 80003c0:	4639      	mov	r1, r7
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0xbe>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80eb 	beq.w	80005a6 <__udivmoddi4+0x286>
 80003d0:	2700      	movs	r7, #0
 80003d2:	e9c6 0100 	strd	r0, r1, [r6]
 80003d6:	4638      	mov	r0, r7
 80003d8:	4639      	mov	r1, r7
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f783 	clz	r7, r3
 80003e2:	2f00      	cmp	r7, #0
 80003e4:	d147      	bne.n	8000476 <__udivmoddi4+0x156>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0xd0>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80fa 	bhi.w	80005e4 <__udivmoddi4+0x2c4>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0303 	sbc.w	r3, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	4698      	mov	r8, r3
 80003fa:	2e00      	cmp	r6, #0
 80003fc:	d0e0      	beq.n	80003c0 <__udivmoddi4+0xa0>
 80003fe:	e9c6 4800 	strd	r4, r8, [r6]
 8000402:	e7dd      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000404:	b902      	cbnz	r2, 8000408 <__udivmoddi4+0xe8>
 8000406:	deff      	udf	#255	; 0xff
 8000408:	fab2 f282 	clz	r2, r2
 800040c:	2a00      	cmp	r2, #0
 800040e:	f040 808f 	bne.w	8000530 <__udivmoddi4+0x210>
 8000412:	1b49      	subs	r1, r1, r5
 8000414:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000418:	fa1f f885 	uxth.w	r8, r5
 800041c:	2701      	movs	r7, #1
 800041e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000422:	0c23      	lsrs	r3, r4, #16
 8000424:	fb0e 111c 	mls	r1, lr, ip, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb08 f10c 	mul.w	r1, r8, ip
 8000430:	4299      	cmp	r1, r3
 8000432:	d907      	bls.n	8000444 <__udivmoddi4+0x124>
 8000434:	18eb      	adds	r3, r5, r3
 8000436:	f10c 30ff 	add.w	r0, ip, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4299      	cmp	r1, r3
 800043e:	f200 80cd 	bhi.w	80005dc <__udivmoddi4+0x2bc>
 8000442:	4684      	mov	ip, r0
 8000444:	1a59      	subs	r1, r3, r1
 8000446:	b2a3      	uxth	r3, r4
 8000448:	fbb1 f0fe 	udiv	r0, r1, lr
 800044c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000450:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000454:	fb08 f800 	mul.w	r8, r8, r0
 8000458:	45a0      	cmp	r8, r4
 800045a:	d907      	bls.n	800046c <__udivmoddi4+0x14c>
 800045c:	192c      	adds	r4, r5, r4
 800045e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000462:	d202      	bcs.n	800046a <__udivmoddi4+0x14a>
 8000464:	45a0      	cmp	r8, r4
 8000466:	f200 80b6 	bhi.w	80005d6 <__udivmoddi4+0x2b6>
 800046a:	4618      	mov	r0, r3
 800046c:	eba4 0408 	sub.w	r4, r4, r8
 8000470:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000474:	e79f      	b.n	80003b6 <__udivmoddi4+0x96>
 8000476:	f1c7 0c20 	rsb	ip, r7, #32
 800047a:	40bb      	lsls	r3, r7
 800047c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000480:	ea4e 0e03 	orr.w	lr, lr, r3
 8000484:	fa01 f407 	lsl.w	r4, r1, r7
 8000488:	fa20 f50c 	lsr.w	r5, r0, ip
 800048c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000490:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000494:	4325      	orrs	r5, r4
 8000496:	fbb3 f9f8 	udiv	r9, r3, r8
 800049a:	0c2c      	lsrs	r4, r5, #16
 800049c:	fb08 3319 	mls	r3, r8, r9, r3
 80004a0:	fa1f fa8e 	uxth.w	sl, lr
 80004a4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80004a8:	fb09 f40a 	mul.w	r4, r9, sl
 80004ac:	429c      	cmp	r4, r3
 80004ae:	fa02 f207 	lsl.w	r2, r2, r7
 80004b2:	fa00 f107 	lsl.w	r1, r0, r7
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1e 0303 	adds.w	r3, lr, r3
 80004bc:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c0:	f080 8087 	bcs.w	80005d2 <__udivmoddi4+0x2b2>
 80004c4:	429c      	cmp	r4, r3
 80004c6:	f240 8084 	bls.w	80005d2 <__udivmoddi4+0x2b2>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4473      	add	r3, lr
 80004d0:	1b1b      	subs	r3, r3, r4
 80004d2:	b2ad      	uxth	r5, r5
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3310 	mls	r3, r8, r0, r3
 80004dc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004e0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004e4:	45a2      	cmp	sl, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80004f0:	d26b      	bcs.n	80005ca <__udivmoddi4+0x2aa>
 80004f2:	45a2      	cmp	sl, r4
 80004f4:	d969      	bls.n	80005ca <__udivmoddi4+0x2aa>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4474      	add	r4, lr
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000502:	eba4 040a 	sub.w	r4, r4, sl
 8000506:	454c      	cmp	r4, r9
 8000508:	46c2      	mov	sl, r8
 800050a:	464b      	mov	r3, r9
 800050c:	d354      	bcc.n	80005b8 <__udivmoddi4+0x298>
 800050e:	d051      	beq.n	80005b4 <__udivmoddi4+0x294>
 8000510:	2e00      	cmp	r6, #0
 8000512:	d069      	beq.n	80005e8 <__udivmoddi4+0x2c8>
 8000514:	ebb1 050a 	subs.w	r5, r1, sl
 8000518:	eb64 0403 	sbc.w	r4, r4, r3
 800051c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000520:	40fd      	lsrs	r5, r7
 8000522:	40fc      	lsrs	r4, r7
 8000524:	ea4c 0505 	orr.w	r5, ip, r5
 8000528:	e9c6 5400 	strd	r5, r4, [r6]
 800052c:	2700      	movs	r7, #0
 800052e:	e747      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000530:	f1c2 0320 	rsb	r3, r2, #32
 8000534:	fa20 f703 	lsr.w	r7, r0, r3
 8000538:	4095      	lsls	r5, r2
 800053a:	fa01 f002 	lsl.w	r0, r1, r2
 800053e:	fa21 f303 	lsr.w	r3, r1, r3
 8000542:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000546:	4338      	orrs	r0, r7
 8000548:	0c01      	lsrs	r1, r0, #16
 800054a:	fbb3 f7fe 	udiv	r7, r3, lr
 800054e:	fa1f f885 	uxth.w	r8, r5
 8000552:	fb0e 3317 	mls	r3, lr, r7, r3
 8000556:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800055a:	fb07 f308 	mul.w	r3, r7, r8
 800055e:	428b      	cmp	r3, r1
 8000560:	fa04 f402 	lsl.w	r4, r4, r2
 8000564:	d907      	bls.n	8000576 <__udivmoddi4+0x256>
 8000566:	1869      	adds	r1, r5, r1
 8000568:	f107 3cff 	add.w	ip, r7, #4294967295
 800056c:	d22f      	bcs.n	80005ce <__udivmoddi4+0x2ae>
 800056e:	428b      	cmp	r3, r1
 8000570:	d92d      	bls.n	80005ce <__udivmoddi4+0x2ae>
 8000572:	3f02      	subs	r7, #2
 8000574:	4429      	add	r1, r5
 8000576:	1acb      	subs	r3, r1, r3
 8000578:	b281      	uxth	r1, r0
 800057a:	fbb3 f0fe 	udiv	r0, r3, lr
 800057e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000582:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000586:	fb00 f308 	mul.w	r3, r0, r8
 800058a:	428b      	cmp	r3, r1
 800058c:	d907      	bls.n	800059e <__udivmoddi4+0x27e>
 800058e:	1869      	adds	r1, r5, r1
 8000590:	f100 3cff 	add.w	ip, r0, #4294967295
 8000594:	d217      	bcs.n	80005c6 <__udivmoddi4+0x2a6>
 8000596:	428b      	cmp	r3, r1
 8000598:	d915      	bls.n	80005c6 <__udivmoddi4+0x2a6>
 800059a:	3802      	subs	r0, #2
 800059c:	4429      	add	r1, r5
 800059e:	1ac9      	subs	r1, r1, r3
 80005a0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80005a4:	e73b      	b.n	800041e <__udivmoddi4+0xfe>
 80005a6:	4637      	mov	r7, r6
 80005a8:	4630      	mov	r0, r6
 80005aa:	e709      	b.n	80003c0 <__udivmoddi4+0xa0>
 80005ac:	4607      	mov	r7, r0
 80005ae:	e6e7      	b.n	8000380 <__udivmoddi4+0x60>
 80005b0:	4618      	mov	r0, r3
 80005b2:	e6fb      	b.n	80003ac <__udivmoddi4+0x8c>
 80005b4:	4541      	cmp	r1, r8
 80005b6:	d2ab      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005b8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005bc:	eb69 020e 	sbc.w	r2, r9, lr
 80005c0:	3801      	subs	r0, #1
 80005c2:	4613      	mov	r3, r2
 80005c4:	e7a4      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c6:	4660      	mov	r0, ip
 80005c8:	e7e9      	b.n	800059e <__udivmoddi4+0x27e>
 80005ca:	4618      	mov	r0, r3
 80005cc:	e795      	b.n	80004fa <__udivmoddi4+0x1da>
 80005ce:	4667      	mov	r7, ip
 80005d0:	e7d1      	b.n	8000576 <__udivmoddi4+0x256>
 80005d2:	4681      	mov	r9, r0
 80005d4:	e77c      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d6:	3802      	subs	r0, #2
 80005d8:	442c      	add	r4, r5
 80005da:	e747      	b.n	800046c <__udivmoddi4+0x14c>
 80005dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005e0:	442b      	add	r3, r5
 80005e2:	e72f      	b.n	8000444 <__udivmoddi4+0x124>
 80005e4:	4638      	mov	r0, r7
 80005e6:	e708      	b.n	80003fa <__udivmoddi4+0xda>
 80005e8:	4637      	mov	r7, r6
 80005ea:	e6e9      	b.n	80003c0 <__udivmoddi4+0xa0>

080005ec <__aeabi_idiv0>:
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop

080005f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f0:	b5b0      	push	{r4, r5, r7, lr}
 80005f2:	b08c      	sub	sp, #48	; 0x30
 80005f4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f6:	f000 fbd6 	bl	8000da6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005fa:	f000 f827 	bl	800064c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005fe:	f000 f939 	bl	8000874 <MX_GPIO_Init>
  MX_LWIP_Init();
 8000602:	f004 fb2f 	bl	8004c64 <MX_LWIP_Init>
  MX_USART3_UART_Init();
 8000606:	f000 f905 	bl	8000814 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 800060a:	f000 f8af 	bl	800076c <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  MX_LWIP_Init();
 800060e:	f004 fb29 	bl	8004c64 <MX_LWIP_Init>

  char stri[] = "\n---------- Programm started!!! ----------\n\n\r";
 8000612:	4b0c      	ldr	r3, [pc, #48]	; (8000644 <main+0x54>)
 8000614:	463c      	mov	r4, r7
 8000616:	461d      	mov	r5, r3
 8000618:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800061a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800061c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800061e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000620:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000624:	c407      	stmia	r4!, {r0, r1, r2}
 8000626:	8023      	strh	r3, [r4, #0]
  HAL_UART_Transmit(&huart3, (uint8_t*)stri, strlen(stri), HAL_MAX_DELAY);
 8000628:	463b      	mov	r3, r7
 800062a:	4618      	mov	r0, r3
 800062c:	f7ff fe08 	bl	8000240 <strlen>
 8000630:	4603      	mov	r3, r0
 8000632:	b29a      	uxth	r2, r3
 8000634:	4639      	mov	r1, r7
 8000636:	f04f 33ff 	mov.w	r3, #4294967295
 800063a:	4803      	ldr	r0, [pc, #12]	; (8000648 <main+0x58>)
 800063c:	f003 feb6 	bl	80043ac <HAL_UART_Transmit>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000640:	e7fe      	b.n	8000640 <main+0x50>
 8000642:	bf00      	nop
 8000644:	0800f794 	.word	0x0800f794
 8000648:	20000208 	.word	0x20000208

0800064c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b0b8      	sub	sp, #224	; 0xe0
 8000650:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000652:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000656:	2234      	movs	r2, #52	; 0x34
 8000658:	2100      	movs	r1, #0
 800065a:	4618      	mov	r0, r3
 800065c:	f00e f966 	bl	800e92c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000660:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000664:	2200      	movs	r2, #0
 8000666:	601a      	str	r2, [r3, #0]
 8000668:	605a      	str	r2, [r3, #4]
 800066a:	609a      	str	r2, [r3, #8]
 800066c:	60da      	str	r2, [r3, #12]
 800066e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000670:	f107 0308 	add.w	r3, r7, #8
 8000674:	2290      	movs	r2, #144	; 0x90
 8000676:	2100      	movs	r1, #0
 8000678:	4618      	mov	r0, r3
 800067a:	f00e f957 	bl	800e92c <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800067e:	4b39      	ldr	r3, [pc, #228]	; (8000764 <SystemClock_Config+0x118>)
 8000680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000682:	4a38      	ldr	r2, [pc, #224]	; (8000764 <SystemClock_Config+0x118>)
 8000684:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000688:	6413      	str	r3, [r2, #64]	; 0x40
 800068a:	4b36      	ldr	r3, [pc, #216]	; (8000764 <SystemClock_Config+0x118>)
 800068c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800068e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000692:	607b      	str	r3, [r7, #4]
 8000694:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000696:	4b34      	ldr	r3, [pc, #208]	; (8000768 <SystemClock_Config+0x11c>)
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	4a33      	ldr	r2, [pc, #204]	; (8000768 <SystemClock_Config+0x11c>)
 800069c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006a0:	6013      	str	r3, [r2, #0]
 80006a2:	4b31      	ldr	r3, [pc, #196]	; (8000768 <SystemClock_Config+0x11c>)
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006aa:	603b      	str	r3, [r7, #0]
 80006ac:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006ae:	2301      	movs	r3, #1
 80006b0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006b8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006bc:	2302      	movs	r3, #2
 80006be:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006c2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006c6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006ca:	2304      	movs	r3, #4
 80006cc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 216;
 80006d0:	23d8      	movs	r3, #216	; 0xd8
 80006d2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006d6:	2302      	movs	r3, #2
 80006d8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80006dc:	2302      	movs	r3, #2
 80006de:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006e2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80006e6:	4618      	mov	r0, r3
 80006e8:	f002 fa32 	bl	8002b50 <HAL_RCC_OscConfig>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d001      	beq.n	80006f6 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80006f2:	f000 f941 	bl	8000978 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80006f6:	f002 f9db 	bl	8002ab0 <HAL_PWREx_EnableOverDrive>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d001      	beq.n	8000704 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8000700:	f000 f93a 	bl	8000978 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000704:	230f      	movs	r3, #15
 8000706:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800070a:	2302      	movs	r3, #2
 800070c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000710:	2300      	movs	r3, #0
 8000712:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000716:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800071a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800071e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000722:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000726:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800072a:	2107      	movs	r1, #7
 800072c:	4618      	mov	r0, r3
 800072e:	f002 fcbd 	bl	80030ac <HAL_RCC_ClockConfig>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d001      	beq.n	800073c <SystemClock_Config+0xf0>
  {
    Error_Handler();
 8000738:	f000 f91e 	bl	8000978 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800073c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000740:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000742:	2300      	movs	r3, #0
 8000744:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000746:	f107 0308 	add.w	r3, r7, #8
 800074a:	4618      	mov	r0, r3
 800074c:	f002 fed8 	bl	8003500 <HAL_RCCEx_PeriphCLKConfig>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <SystemClock_Config+0x10e>
  {
    Error_Handler();
 8000756:	f000 f90f 	bl	8000978 <Error_Handler>
  }
}
 800075a:	bf00      	nop
 800075c:	37e0      	adds	r7, #224	; 0xe0
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	40023800 	.word	0x40023800
 8000768:	40007000 	.word	0x40007000

0800076c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b084      	sub	sp, #16
 8000770:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000772:	463b      	mov	r3, r7
 8000774:	2200      	movs	r2, #0
 8000776:	601a      	str	r2, [r3, #0]
 8000778:	605a      	str	r2, [r3, #4]
 800077a:	609a      	str	r2, [r3, #8]
 800077c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800077e:	4b21      	ldr	r3, [pc, #132]	; (8000804 <MX_ADC1_Init+0x98>)
 8000780:	4a21      	ldr	r2, [pc, #132]	; (8000808 <MX_ADC1_Init+0x9c>)
 8000782:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8000784:	4b1f      	ldr	r3, [pc, #124]	; (8000804 <MX_ADC1_Init+0x98>)
 8000786:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800078a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800078c:	4b1d      	ldr	r3, [pc, #116]	; (8000804 <MX_ADC1_Init+0x98>)
 800078e:	2200      	movs	r2, #0
 8000790:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000792:	4b1c      	ldr	r3, [pc, #112]	; (8000804 <MX_ADC1_Init+0x98>)
 8000794:	2200      	movs	r2, #0
 8000796:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000798:	4b1a      	ldr	r3, [pc, #104]	; (8000804 <MX_ADC1_Init+0x98>)
 800079a:	2201      	movs	r2, #1
 800079c:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800079e:	4b19      	ldr	r3, [pc, #100]	; (8000804 <MX_ADC1_Init+0x98>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007a6:	4b17      	ldr	r3, [pc, #92]	; (8000804 <MX_ADC1_Init+0x98>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007ac:	4b15      	ldr	r3, [pc, #84]	; (8000804 <MX_ADC1_Init+0x98>)
 80007ae:	4a17      	ldr	r2, [pc, #92]	; (800080c <MX_ADC1_Init+0xa0>)
 80007b0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007b2:	4b14      	ldr	r3, [pc, #80]	; (8000804 <MX_ADC1_Init+0x98>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80007b8:	4b12      	ldr	r3, [pc, #72]	; (8000804 <MX_ADC1_Init+0x98>)
 80007ba:	2201      	movs	r2, #1
 80007bc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80007be:	4b11      	ldr	r3, [pc, #68]	; (8000804 <MX_ADC1_Init+0x98>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007c6:	4b0f      	ldr	r3, [pc, #60]	; (8000804 <MX_ADC1_Init+0x98>)
 80007c8:	2201      	movs	r2, #1
 80007ca:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007cc:	480d      	ldr	r0, [pc, #52]	; (8000804 <MX_ADC1_Init+0x98>)
 80007ce:	f000 fb39 	bl	8000e44 <HAL_ADC_Init>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d001      	beq.n	80007dc <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80007d8:	f000 f8ce 	bl	8000978 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80007dc:	4b0c      	ldr	r3, [pc, #48]	; (8000810 <MX_ADC1_Init+0xa4>)
 80007de:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007e0:	2301      	movs	r3, #1
 80007e2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80007e4:	2300      	movs	r3, #0
 80007e6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007e8:	463b      	mov	r3, r7
 80007ea:	4619      	mov	r1, r3
 80007ec:	4805      	ldr	r0, [pc, #20]	; (8000804 <MX_ADC1_Init+0x98>)
 80007ee:	f000 fb6d 	bl	8000ecc <HAL_ADC_ConfigChannel>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d001      	beq.n	80007fc <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80007f8:	f000 f8be 	bl	8000978 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007fc:	bf00      	nop
 80007fe:	3710      	adds	r7, #16
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}
 8000804:	2000028c 	.word	0x2000028c
 8000808:	40012000 	.word	0x40012000
 800080c:	0f000001 	.word	0x0f000001
 8000810:	10000012 	.word	0x10000012

08000814 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000818:	4b14      	ldr	r3, [pc, #80]	; (800086c <MX_USART3_UART_Init+0x58>)
 800081a:	4a15      	ldr	r2, [pc, #84]	; (8000870 <MX_USART3_UART_Init+0x5c>)
 800081c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800081e:	4b13      	ldr	r3, [pc, #76]	; (800086c <MX_USART3_UART_Init+0x58>)
 8000820:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000824:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000826:	4b11      	ldr	r3, [pc, #68]	; (800086c <MX_USART3_UART_Init+0x58>)
 8000828:	2200      	movs	r2, #0
 800082a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800082c:	4b0f      	ldr	r3, [pc, #60]	; (800086c <MX_USART3_UART_Init+0x58>)
 800082e:	2200      	movs	r2, #0
 8000830:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000832:	4b0e      	ldr	r3, [pc, #56]	; (800086c <MX_USART3_UART_Init+0x58>)
 8000834:	2200      	movs	r2, #0
 8000836:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000838:	4b0c      	ldr	r3, [pc, #48]	; (800086c <MX_USART3_UART_Init+0x58>)
 800083a:	220c      	movs	r2, #12
 800083c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800083e:	4b0b      	ldr	r3, [pc, #44]	; (800086c <MX_USART3_UART_Init+0x58>)
 8000840:	2200      	movs	r2, #0
 8000842:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000844:	4b09      	ldr	r3, [pc, #36]	; (800086c <MX_USART3_UART_Init+0x58>)
 8000846:	2200      	movs	r2, #0
 8000848:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800084a:	4b08      	ldr	r3, [pc, #32]	; (800086c <MX_USART3_UART_Init+0x58>)
 800084c:	2200      	movs	r2, #0
 800084e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000850:	4b06      	ldr	r3, [pc, #24]	; (800086c <MX_USART3_UART_Init+0x58>)
 8000852:	2200      	movs	r2, #0
 8000854:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000856:	4805      	ldr	r0, [pc, #20]	; (800086c <MX_USART3_UART_Init+0x58>)
 8000858:	f003 fd5a 	bl	8004310 <HAL_UART_Init>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d001      	beq.n	8000866 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000862:	f000 f889 	bl	8000978 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000866:	bf00      	nop
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	20000208 	.word	0x20000208
 8000870:	40004800 	.word	0x40004800

08000874 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b08c      	sub	sp, #48	; 0x30
 8000878:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800087a:	f107 031c 	add.w	r3, r7, #28
 800087e:	2200      	movs	r2, #0
 8000880:	601a      	str	r2, [r3, #0]
 8000882:	605a      	str	r2, [r3, #4]
 8000884:	609a      	str	r2, [r3, #8]
 8000886:	60da      	str	r2, [r3, #12]
 8000888:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800088a:	4b30      	ldr	r3, [pc, #192]	; (800094c <MX_GPIO_Init+0xd8>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088e:	4a2f      	ldr	r2, [pc, #188]	; (800094c <MX_GPIO_Init+0xd8>)
 8000890:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000894:	6313      	str	r3, [r2, #48]	; 0x30
 8000896:	4b2d      	ldr	r3, [pc, #180]	; (800094c <MX_GPIO_Init+0xd8>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800089e:	61bb      	str	r3, [r7, #24]
 80008a0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008a2:	4b2a      	ldr	r3, [pc, #168]	; (800094c <MX_GPIO_Init+0xd8>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a6:	4a29      	ldr	r2, [pc, #164]	; (800094c <MX_GPIO_Init+0xd8>)
 80008a8:	f043 0304 	orr.w	r3, r3, #4
 80008ac:	6313      	str	r3, [r2, #48]	; 0x30
 80008ae:	4b27      	ldr	r3, [pc, #156]	; (800094c <MX_GPIO_Init+0xd8>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b2:	f003 0304 	and.w	r3, r3, #4
 80008b6:	617b      	str	r3, [r7, #20]
 80008b8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ba:	4b24      	ldr	r3, [pc, #144]	; (800094c <MX_GPIO_Init+0xd8>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008be:	4a23      	ldr	r2, [pc, #140]	; (800094c <MX_GPIO_Init+0xd8>)
 80008c0:	f043 0301 	orr.w	r3, r3, #1
 80008c4:	6313      	str	r3, [r2, #48]	; 0x30
 80008c6:	4b21      	ldr	r3, [pc, #132]	; (800094c <MX_GPIO_Init+0xd8>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ca:	f003 0301 	and.w	r3, r3, #1
 80008ce:	613b      	str	r3, [r7, #16]
 80008d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008d2:	4b1e      	ldr	r3, [pc, #120]	; (800094c <MX_GPIO_Init+0xd8>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d6:	4a1d      	ldr	r2, [pc, #116]	; (800094c <MX_GPIO_Init+0xd8>)
 80008d8:	f043 0302 	orr.w	r3, r3, #2
 80008dc:	6313      	str	r3, [r2, #48]	; 0x30
 80008de:	4b1b      	ldr	r3, [pc, #108]	; (800094c <MX_GPIO_Init+0xd8>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e2:	f003 0302 	and.w	r3, r3, #2
 80008e6:	60fb      	str	r3, [r7, #12]
 80008e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008ea:	4b18      	ldr	r3, [pc, #96]	; (800094c <MX_GPIO_Init+0xd8>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ee:	4a17      	ldr	r2, [pc, #92]	; (800094c <MX_GPIO_Init+0xd8>)
 80008f0:	f043 0308 	orr.w	r3, r3, #8
 80008f4:	6313      	str	r3, [r2, #48]	; 0x30
 80008f6:	4b15      	ldr	r3, [pc, #84]	; (800094c <MX_GPIO_Init+0xd8>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fa:	f003 0308 	and.w	r3, r3, #8
 80008fe:	60bb      	str	r3, [r7, #8]
 8000900:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000902:	4b12      	ldr	r3, [pc, #72]	; (800094c <MX_GPIO_Init+0xd8>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000906:	4a11      	ldr	r2, [pc, #68]	; (800094c <MX_GPIO_Init+0xd8>)
 8000908:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800090c:	6313      	str	r3, [r2, #48]	; 0x30
 800090e:	4b0f      	ldr	r3, [pc, #60]	; (800094c <MX_GPIO_Init+0xd8>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000912:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000916:	607b      	str	r3, [r7, #4]
 8000918:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_14|GPIO_PIN_7, GPIO_PIN_RESET);
 800091a:	2200      	movs	r2, #0
 800091c:	f244 0181 	movw	r1, #16513	; 0x4081
 8000920:	480b      	ldr	r0, [pc, #44]	; (8000950 <MX_GPIO_Init+0xdc>)
 8000922:	f002 f8ab 	bl	8002a7c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB0 PB14 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_14|GPIO_PIN_7;
 8000926:	f244 0381 	movw	r3, #16513	; 0x4081
 800092a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800092c:	2301      	movs	r3, #1
 800092e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000930:	2300      	movs	r3, #0
 8000932:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000934:	2300      	movs	r3, #0
 8000936:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000938:	f107 031c 	add.w	r3, r7, #28
 800093c:	4619      	mov	r1, r3
 800093e:	4804      	ldr	r0, [pc, #16]	; (8000950 <MX_GPIO_Init+0xdc>)
 8000940:	f001 fef2 	bl	8002728 <HAL_GPIO_Init>

}
 8000944:	bf00      	nop
 8000946:	3730      	adds	r7, #48	; 0x30
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}
 800094c:	40023800 	.word	0x40023800
 8000950:	40020400 	.word	0x40020400

08000954 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b082      	sub	sp, #8
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM10) {
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	4a04      	ldr	r2, [pc, #16]	; (8000974 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000962:	4293      	cmp	r3, r2
 8000964:	d101      	bne.n	800096a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000966:	f000 fa2b 	bl	8000dc0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800096a:	bf00      	nop
 800096c:	3708      	adds	r7, #8
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	40014400 	.word	0x40014400

08000978 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800097c:	bf00      	nop
 800097e:	46bd      	mov	sp, r7
 8000980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000984:	4770      	bx	lr
	...

08000988 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000988:	b480      	push	{r7}
 800098a:	b083      	sub	sp, #12
 800098c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800098e:	4b0f      	ldr	r3, [pc, #60]	; (80009cc <HAL_MspInit+0x44>)
 8000990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000992:	4a0e      	ldr	r2, [pc, #56]	; (80009cc <HAL_MspInit+0x44>)
 8000994:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000998:	6413      	str	r3, [r2, #64]	; 0x40
 800099a:	4b0c      	ldr	r3, [pc, #48]	; (80009cc <HAL_MspInit+0x44>)
 800099c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800099e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009a2:	607b      	str	r3, [r7, #4]
 80009a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009a6:	4b09      	ldr	r3, [pc, #36]	; (80009cc <HAL_MspInit+0x44>)
 80009a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009aa:	4a08      	ldr	r2, [pc, #32]	; (80009cc <HAL_MspInit+0x44>)
 80009ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009b0:	6453      	str	r3, [r2, #68]	; 0x44
 80009b2:	4b06      	ldr	r3, [pc, #24]	; (80009cc <HAL_MspInit+0x44>)
 80009b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009ba:	603b      	str	r3, [r7, #0]
 80009bc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009be:	bf00      	nop
 80009c0:	370c      	adds	r7, #12
 80009c2:	46bd      	mov	sp, r7
 80009c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c8:	4770      	bx	lr
 80009ca:	bf00      	nop
 80009cc:	40023800 	.word	0x40023800

080009d0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80009d0:	b480      	push	{r7}
 80009d2:	b085      	sub	sp, #20
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	4a0a      	ldr	r2, [pc, #40]	; (8000a08 <HAL_ADC_MspInit+0x38>)
 80009de:	4293      	cmp	r3, r2
 80009e0:	d10b      	bne.n	80009fa <HAL_ADC_MspInit+0x2a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80009e2:	4b0a      	ldr	r3, [pc, #40]	; (8000a0c <HAL_ADC_MspInit+0x3c>)
 80009e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009e6:	4a09      	ldr	r2, [pc, #36]	; (8000a0c <HAL_ADC_MspInit+0x3c>)
 80009e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009ec:	6453      	str	r3, [r2, #68]	; 0x44
 80009ee:	4b07      	ldr	r3, [pc, #28]	; (8000a0c <HAL_ADC_MspInit+0x3c>)
 80009f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80009f6:	60fb      	str	r3, [r7, #12]
 80009f8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80009fa:	bf00      	nop
 80009fc:	3714      	adds	r7, #20
 80009fe:	46bd      	mov	sp, r7
 8000a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop
 8000a08:	40012000 	.word	0x40012000
 8000a0c:	40023800 	.word	0x40023800

08000a10 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b08a      	sub	sp, #40	; 0x28
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a18:	f107 0314 	add.w	r3, r7, #20
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	601a      	str	r2, [r3, #0]
 8000a20:	605a      	str	r2, [r3, #4]
 8000a22:	609a      	str	r2, [r3, #8]
 8000a24:	60da      	str	r2, [r3, #12]
 8000a26:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	4a17      	ldr	r2, [pc, #92]	; (8000a8c <HAL_UART_MspInit+0x7c>)
 8000a2e:	4293      	cmp	r3, r2
 8000a30:	d128      	bne.n	8000a84 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000a32:	4b17      	ldr	r3, [pc, #92]	; (8000a90 <HAL_UART_MspInit+0x80>)
 8000a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a36:	4a16      	ldr	r2, [pc, #88]	; (8000a90 <HAL_UART_MspInit+0x80>)
 8000a38:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a3c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a3e:	4b14      	ldr	r3, [pc, #80]	; (8000a90 <HAL_UART_MspInit+0x80>)
 8000a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a42:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000a46:	613b      	str	r3, [r7, #16]
 8000a48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a4a:	4b11      	ldr	r3, [pc, #68]	; (8000a90 <HAL_UART_MspInit+0x80>)
 8000a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4e:	4a10      	ldr	r2, [pc, #64]	; (8000a90 <HAL_UART_MspInit+0x80>)
 8000a50:	f043 0308 	orr.w	r3, r3, #8
 8000a54:	6313      	str	r3, [r2, #48]	; 0x30
 8000a56:	4b0e      	ldr	r3, [pc, #56]	; (8000a90 <HAL_UART_MspInit+0x80>)
 8000a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5a:	f003 0308 	and.w	r3, r3, #8
 8000a5e:	60fb      	str	r3, [r7, #12]
 8000a60:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000a62:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000a66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a68:	2302      	movs	r3, #2
 8000a6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a70:	2303      	movs	r3, #3
 8000a72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000a74:	2307      	movs	r3, #7
 8000a76:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a78:	f107 0314 	add.w	r3, r7, #20
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	4805      	ldr	r0, [pc, #20]	; (8000a94 <HAL_UART_MspInit+0x84>)
 8000a80:	f001 fe52 	bl	8002728 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000a84:	bf00      	nop
 8000a86:	3728      	adds	r7, #40	; 0x28
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	40004800 	.word	0x40004800
 8000a90:	40023800 	.word	0x40023800
 8000a94:	40020c00 	.word	0x40020c00

08000a98 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b08c      	sub	sp, #48	; 0x30
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM10 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	6879      	ldr	r1, [r7, #4]
 8000aac:	2019      	movs	r0, #25
 8000aae:	f000 fd09 	bl	80014c4 <HAL_NVIC_SetPriority>

  /* Enable the TIM10 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000ab2:	2019      	movs	r0, #25
 8000ab4:	f000 fd22 	bl	80014fc <HAL_NVIC_EnableIRQ>
  /* Enable TIM10 clock */
  __HAL_RCC_TIM10_CLK_ENABLE();
 8000ab8:	4b1f      	ldr	r3, [pc, #124]	; (8000b38 <HAL_InitTick+0xa0>)
 8000aba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000abc:	4a1e      	ldr	r2, [pc, #120]	; (8000b38 <HAL_InitTick+0xa0>)
 8000abe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ac2:	6453      	str	r3, [r2, #68]	; 0x44
 8000ac4:	4b1c      	ldr	r3, [pc, #112]	; (8000b38 <HAL_InitTick+0xa0>)
 8000ac6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ac8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000acc:	60fb      	str	r3, [r7, #12]
 8000ace:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ad0:	f107 0210 	add.w	r2, r7, #16
 8000ad4:	f107 0314 	add.w	r3, r7, #20
 8000ad8:	4611      	mov	r1, r2
 8000ada:	4618      	mov	r0, r3
 8000adc:	f002 fcde 	bl	800349c <HAL_RCC_GetClockConfig>

  /* Compute TIM10 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000ae0:	f002 fcc8 	bl	8003474 <HAL_RCC_GetPCLK2Freq>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	005b      	lsls	r3, r3, #1
 8000ae8:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM10 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000aea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000aec:	4a13      	ldr	r2, [pc, #76]	; (8000b3c <HAL_InitTick+0xa4>)
 8000aee:	fba2 2303 	umull	r2, r3, r2, r3
 8000af2:	0c9b      	lsrs	r3, r3, #18
 8000af4:	3b01      	subs	r3, #1
 8000af6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM10 */
  htim10.Instance = TIM10;
 8000af8:	4b11      	ldr	r3, [pc, #68]	; (8000b40 <HAL_InitTick+0xa8>)
 8000afa:	4a12      	ldr	r2, [pc, #72]	; (8000b44 <HAL_InitTick+0xac>)
 8000afc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM10CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim10.Init.Period = (1000000 / 1000) - 1;
 8000afe:	4b10      	ldr	r3, [pc, #64]	; (8000b40 <HAL_InitTick+0xa8>)
 8000b00:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b04:	60da      	str	r2, [r3, #12]
  htim10.Init.Prescaler = uwPrescalerValue;
 8000b06:	4a0e      	ldr	r2, [pc, #56]	; (8000b40 <HAL_InitTick+0xa8>)
 8000b08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b0a:	6053      	str	r3, [r2, #4]
  htim10.Init.ClockDivision = 0;
 8000b0c:	4b0c      	ldr	r3, [pc, #48]	; (8000b40 <HAL_InitTick+0xa8>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	611a      	str	r2, [r3, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b12:	4b0b      	ldr	r3, [pc, #44]	; (8000b40 <HAL_InitTick+0xa8>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim10) == HAL_OK)
 8000b18:	4809      	ldr	r0, [pc, #36]	; (8000b40 <HAL_InitTick+0xa8>)
 8000b1a:	f003 f919 	bl	8003d50 <HAL_TIM_Base_Init>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d104      	bne.n	8000b2e <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim10);
 8000b24:	4806      	ldr	r0, [pc, #24]	; (8000b40 <HAL_InitTick+0xa8>)
 8000b26:	f003 f975 	bl	8003e14 <HAL_TIM_Base_Start_IT>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	e000      	b.n	8000b30 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8000b2e:	2301      	movs	r3, #1
}
 8000b30:	4618      	mov	r0, r3
 8000b32:	3730      	adds	r7, #48	; 0x30
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	40023800 	.word	0x40023800
 8000b3c:	431bde83 	.word	0x431bde83
 8000b40:	200002dc 	.word	0x200002dc
 8000b44:	40014400 	.word	0x40014400

08000b48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000b4c:	bf00      	nop
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b54:	4770      	bx	lr

08000b56 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b56:	b480      	push	{r7}
 8000b58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b5a:	e7fe      	b.n	8000b5a <HardFault_Handler+0x4>

08000b5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b60:	e7fe      	b.n	8000b60 <MemManage_Handler+0x4>

08000b62 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b62:	b480      	push	{r7}
 8000b64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b66:	e7fe      	b.n	8000b66 <BusFault_Handler+0x4>

08000b68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b6c:	e7fe      	b.n	8000b6c <UsageFault_Handler+0x4>

08000b6e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b6e:	b480      	push	{r7}
 8000b70:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b72:	bf00      	nop
 8000b74:	46bd      	mov	sp, r7
 8000b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7a:	4770      	bx	lr

08000b7c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b80:	bf00      	nop
 8000b82:	46bd      	mov	sp, r7
 8000b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b88:	4770      	bx	lr

08000b8a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b8a:	b480      	push	{r7}
 8000b8c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b8e:	bf00      	nop
 8000b90:	46bd      	mov	sp, r7
 8000b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b96:	4770      	bx	lr

08000b98 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0

  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b9c:	bf00      	nop
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr
	...

08000ba8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8000bac:	4802      	ldr	r0, [pc, #8]	; (8000bb8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000bae:	f003 f9a9 	bl	8003f04 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000bb2:	bf00      	nop
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	200002dc 	.word	0x200002dc

08000bbc <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000bc0:	4802      	ldr	r0, [pc, #8]	; (8000bcc <ETH_IRQHandler+0x10>)
 8000bc2:	f001 f805 	bl	8001bd0 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8000bc6:	bf00      	nop
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	20001c48 	.word	0x20001c48

08000bd0 <ETH_WKUP_IRQHandler>:

/**
  * @brief This function handles Ethernet wake-up interrupt through EXTI line 19.
  */
void ETH_WKUP_IRQHandler(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_WKUP_IRQn 0 */

  /* USER CODE END ETH_WKUP_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000bd4:	4802      	ldr	r0, [pc, #8]	; (8000be0 <ETH_WKUP_IRQHandler+0x10>)
 8000bd6:	f000 fffb 	bl	8001bd0 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_WKUP_IRQn 1 */

  /* USER CODE END ETH_WKUP_IRQn 1 */
}
 8000bda:	bf00      	nop
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	20001c48 	.word	0x20001c48

08000be4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b086      	sub	sp, #24
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	60f8      	str	r0, [r7, #12]
 8000bec:	60b9      	str	r1, [r7, #8]
 8000bee:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	617b      	str	r3, [r7, #20]
 8000bf4:	e00a      	b.n	8000c0c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000bf6:	f3af 8000 	nop.w
 8000bfa:	4601      	mov	r1, r0
 8000bfc:	68bb      	ldr	r3, [r7, #8]
 8000bfe:	1c5a      	adds	r2, r3, #1
 8000c00:	60ba      	str	r2, [r7, #8]
 8000c02:	b2ca      	uxtb	r2, r1
 8000c04:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c06:	697b      	ldr	r3, [r7, #20]
 8000c08:	3301      	adds	r3, #1
 8000c0a:	617b      	str	r3, [r7, #20]
 8000c0c:	697a      	ldr	r2, [r7, #20]
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	429a      	cmp	r2, r3
 8000c12:	dbf0      	blt.n	8000bf6 <_read+0x12>
	}

return len;
 8000c14:	687b      	ldr	r3, [r7, #4]
}
 8000c16:	4618      	mov	r0, r3
 8000c18:	3718      	adds	r7, #24
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}

08000c1e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c1e:	b580      	push	{r7, lr}
 8000c20:	b086      	sub	sp, #24
 8000c22:	af00      	add	r7, sp, #0
 8000c24:	60f8      	str	r0, [r7, #12]
 8000c26:	60b9      	str	r1, [r7, #8]
 8000c28:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	617b      	str	r3, [r7, #20]
 8000c2e:	e009      	b.n	8000c44 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000c30:	68bb      	ldr	r3, [r7, #8]
 8000c32:	1c5a      	adds	r2, r3, #1
 8000c34:	60ba      	str	r2, [r7, #8]
 8000c36:	781b      	ldrb	r3, [r3, #0]
 8000c38:	4618      	mov	r0, r3
 8000c3a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c3e:	697b      	ldr	r3, [r7, #20]
 8000c40:	3301      	adds	r3, #1
 8000c42:	617b      	str	r3, [r7, #20]
 8000c44:	697a      	ldr	r2, [r7, #20]
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	429a      	cmp	r2, r3
 8000c4a:	dbf1      	blt.n	8000c30 <_write+0x12>
	}
	return len;
 8000c4c:	687b      	ldr	r3, [r7, #4]
}
 8000c4e:	4618      	mov	r0, r3
 8000c50:	3718      	adds	r7, #24
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}

08000c56 <_close>:

int _close(int file)
{
 8000c56:	b480      	push	{r7}
 8000c58:	b083      	sub	sp, #12
 8000c5a:	af00      	add	r7, sp, #0
 8000c5c:	6078      	str	r0, [r7, #4]
	return -1;
 8000c5e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c62:	4618      	mov	r0, r3
 8000c64:	370c      	adds	r7, #12
 8000c66:	46bd      	mov	sp, r7
 8000c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6c:	4770      	bx	lr

08000c6e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c6e:	b480      	push	{r7}
 8000c70:	b083      	sub	sp, #12
 8000c72:	af00      	add	r7, sp, #0
 8000c74:	6078      	str	r0, [r7, #4]
 8000c76:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000c78:	683b      	ldr	r3, [r7, #0]
 8000c7a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c7e:	605a      	str	r2, [r3, #4]
	return 0;
 8000c80:	2300      	movs	r3, #0
}
 8000c82:	4618      	mov	r0, r3
 8000c84:	370c      	adds	r7, #12
 8000c86:	46bd      	mov	sp, r7
 8000c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8c:	4770      	bx	lr

08000c8e <_isatty>:

int _isatty(int file)
{
 8000c8e:	b480      	push	{r7}
 8000c90:	b083      	sub	sp, #12
 8000c92:	af00      	add	r7, sp, #0
 8000c94:	6078      	str	r0, [r7, #4]
	return 1;
 8000c96:	2301      	movs	r3, #1
}
 8000c98:	4618      	mov	r0, r3
 8000c9a:	370c      	adds	r7, #12
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca2:	4770      	bx	lr

08000ca4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	b085      	sub	sp, #20
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	60f8      	str	r0, [r7, #12]
 8000cac:	60b9      	str	r1, [r7, #8]
 8000cae:	607a      	str	r2, [r7, #4]
	return 0;
 8000cb0:	2300      	movs	r3, #0
}
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	3714      	adds	r7, #20
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbc:	4770      	bx	lr
	...

08000cc0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b087      	sub	sp, #28
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cc8:	4a14      	ldr	r2, [pc, #80]	; (8000d1c <_sbrk+0x5c>)
 8000cca:	4b15      	ldr	r3, [pc, #84]	; (8000d20 <_sbrk+0x60>)
 8000ccc:	1ad3      	subs	r3, r2, r3
 8000cce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cd0:	697b      	ldr	r3, [r7, #20]
 8000cd2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cd4:	4b13      	ldr	r3, [pc, #76]	; (8000d24 <_sbrk+0x64>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d102      	bne.n	8000ce2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cdc:	4b11      	ldr	r3, [pc, #68]	; (8000d24 <_sbrk+0x64>)
 8000cde:	4a12      	ldr	r2, [pc, #72]	; (8000d28 <_sbrk+0x68>)
 8000ce0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ce2:	4b10      	ldr	r3, [pc, #64]	; (8000d24 <_sbrk+0x64>)
 8000ce4:	681a      	ldr	r2, [r3, #0]
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	4413      	add	r3, r2
 8000cea:	693a      	ldr	r2, [r7, #16]
 8000cec:	429a      	cmp	r2, r3
 8000cee:	d205      	bcs.n	8000cfc <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000cf0:	4b0e      	ldr	r3, [pc, #56]	; (8000d2c <_sbrk+0x6c>)
 8000cf2:	220c      	movs	r2, #12
 8000cf4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cf6:	f04f 33ff 	mov.w	r3, #4294967295
 8000cfa:	e009      	b.n	8000d10 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cfc:	4b09      	ldr	r3, [pc, #36]	; (8000d24 <_sbrk+0x64>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d02:	4b08      	ldr	r3, [pc, #32]	; (8000d24 <_sbrk+0x64>)
 8000d04:	681a      	ldr	r2, [r3, #0]
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	4413      	add	r3, r2
 8000d0a:	4a06      	ldr	r2, [pc, #24]	; (8000d24 <_sbrk+0x64>)
 8000d0c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d0e:	68fb      	ldr	r3, [r7, #12]
}
 8000d10:	4618      	mov	r0, r3
 8000d12:	371c      	adds	r7, #28
 8000d14:	46bd      	mov	sp, r7
 8000d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1a:	4770      	bx	lr
 8000d1c:	20080000 	.word	0x20080000
 8000d20:	00000400 	.word	0x00000400
 8000d24:	20000090 	.word	0x20000090
 8000d28:	20008b00 	.word	0x20008b00
 8000d2c:	20008af8 	.word	0x20008af8

08000d30 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d34:	4b06      	ldr	r3, [pc, #24]	; (8000d50 <SystemInit+0x20>)
 8000d36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d3a:	4a05      	ldr	r2, [pc, #20]	; (8000d50 <SystemInit+0x20>)
 8000d3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d40:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d44:	bf00      	nop
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr
 8000d4e:	bf00      	nop
 8000d50:	e000ed00 	.word	0xe000ed00

08000d54 <Reset_Handler>:
 8000d54:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d8c <LoopFillZerobss+0x12>
 8000d58:	480d      	ldr	r0, [pc, #52]	; (8000d90 <LoopFillZerobss+0x16>)
 8000d5a:	490e      	ldr	r1, [pc, #56]	; (8000d94 <LoopFillZerobss+0x1a>)
 8000d5c:	4a0e      	ldr	r2, [pc, #56]	; (8000d98 <LoopFillZerobss+0x1e>)
 8000d5e:	2300      	movs	r3, #0
 8000d60:	e002      	b.n	8000d68 <LoopCopyDataInit>

08000d62 <CopyDataInit>:
 8000d62:	58d4      	ldr	r4, [r2, r3]
 8000d64:	50c4      	str	r4, [r0, r3]
 8000d66:	3304      	adds	r3, #4

08000d68 <LoopCopyDataInit>:
 8000d68:	18c4      	adds	r4, r0, r3
 8000d6a:	428c      	cmp	r4, r1
 8000d6c:	d3f9      	bcc.n	8000d62 <CopyDataInit>
 8000d6e:	4a0b      	ldr	r2, [pc, #44]	; (8000d9c <LoopFillZerobss+0x22>)
 8000d70:	4c0b      	ldr	r4, [pc, #44]	; (8000da0 <LoopFillZerobss+0x26>)
 8000d72:	2300      	movs	r3, #0
 8000d74:	e001      	b.n	8000d7a <LoopFillZerobss>

08000d76 <FillZerobss>:
 8000d76:	6013      	str	r3, [r2, #0]
 8000d78:	3204      	adds	r2, #4

08000d7a <LoopFillZerobss>:
 8000d7a:	42a2      	cmp	r2, r4
 8000d7c:	d3fb      	bcc.n	8000d76 <FillZerobss>
 8000d7e:	f7ff ffd7 	bl	8000d30 <SystemInit>
 8000d82:	f00d fd95 	bl	800e8b0 <__libc_init_array>
 8000d86:	f7ff fc33 	bl	80005f0 <main>
 8000d8a:	4770      	bx	lr
 8000d8c:	20080000 	.word	0x20080000
 8000d90:	20000000 	.word	0x20000000
 8000d94:	20000074 	.word	0x20000074
 8000d98:	08011fd4 	.word	0x08011fd4
 8000d9c:	20000074 	.word	0x20000074
 8000da0:	20008afc 	.word	0x20008afc

08000da4 <ADC_IRQHandler>:
 8000da4:	e7fe      	b.n	8000da4 <ADC_IRQHandler>

08000da6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000da6:	b580      	push	{r7, lr}
 8000da8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000daa:	2003      	movs	r0, #3
 8000dac:	f000 fb7f 	bl	80014ae <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000db0:	2000      	movs	r0, #0
 8000db2:	f7ff fe71 	bl	8000a98 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000db6:	f7ff fde7 	bl	8000988 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000dba:	2300      	movs	r3, #0
}
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	bd80      	pop	{r7, pc}

08000dc0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dc4:	4b06      	ldr	r3, [pc, #24]	; (8000de0 <HAL_IncTick+0x20>)
 8000dc6:	781b      	ldrb	r3, [r3, #0]
 8000dc8:	461a      	mov	r2, r3
 8000dca:	4b06      	ldr	r3, [pc, #24]	; (8000de4 <HAL_IncTick+0x24>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	4413      	add	r3, r2
 8000dd0:	4a04      	ldr	r2, [pc, #16]	; (8000de4 <HAL_IncTick+0x24>)
 8000dd2:	6013      	str	r3, [r2, #0]
}
 8000dd4:	bf00      	nop
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ddc:	4770      	bx	lr
 8000dde:	bf00      	nop
 8000de0:	20000008 	.word	0x20000008
 8000de4:	20000328 	.word	0x20000328

08000de8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
  return uwTick;
 8000dec:	4b03      	ldr	r3, [pc, #12]	; (8000dfc <HAL_GetTick+0x14>)
 8000dee:	681b      	ldr	r3, [r3, #0]
}
 8000df0:	4618      	mov	r0, r3
 8000df2:	46bd      	mov	sp, r7
 8000df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df8:	4770      	bx	lr
 8000dfa:	bf00      	nop
 8000dfc:	20000328 	.word	0x20000328

08000e00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b084      	sub	sp, #16
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e08:	f7ff ffee 	bl	8000de8 <HAL_GetTick>
 8000e0c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e18:	d005      	beq.n	8000e26 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e1a:	4b09      	ldr	r3, [pc, #36]	; (8000e40 <HAL_Delay+0x40>)
 8000e1c:	781b      	ldrb	r3, [r3, #0]
 8000e1e:	461a      	mov	r2, r3
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	4413      	add	r3, r2
 8000e24:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e26:	bf00      	nop
 8000e28:	f7ff ffde 	bl	8000de8 <HAL_GetTick>
 8000e2c:	4602      	mov	r2, r0
 8000e2e:	68bb      	ldr	r3, [r7, #8]
 8000e30:	1ad3      	subs	r3, r2, r3
 8000e32:	68fa      	ldr	r2, [r7, #12]
 8000e34:	429a      	cmp	r2, r3
 8000e36:	d8f7      	bhi.n	8000e28 <HAL_Delay+0x28>
  {
  }
}
 8000e38:	bf00      	nop
 8000e3a:	3710      	adds	r7, #16
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}
 8000e40:	20000008 	.word	0x20000008

08000e44 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b084      	sub	sp, #16
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d101      	bne.n	8000e5a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000e56:	2301      	movs	r3, #1
 8000e58:	e031      	b.n	8000ebe <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d109      	bne.n	8000e76 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000e62:	6878      	ldr	r0, [r7, #4]
 8000e64:	f7ff fdb4 	bl	80009d0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	2200      	movs	r2, #0
 8000e72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e7a:	f003 0310 	and.w	r3, r3, #16
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d116      	bne.n	8000eb0 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e86:	4b10      	ldr	r3, [pc, #64]	; (8000ec8 <HAL_ADC_Init+0x84>)
 8000e88:	4013      	ands	r3, r2
 8000e8a:	f043 0202 	orr.w	r2, r3, #2
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000e92:	6878      	ldr	r0, [r7, #4]
 8000e94:	f000 f964 	bl	8001160 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ea2:	f023 0303 	bic.w	r3, r3, #3
 8000ea6:	f043 0201 	orr.w	r2, r3, #1
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	641a      	str	r2, [r3, #64]	; 0x40
 8000eae:	e001      	b.n	8000eb4 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000eb0:	2301      	movs	r3, #1
 8000eb2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000ebc:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	3710      	adds	r7, #16
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	ffffeefd 	.word	0xffffeefd

08000ecc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b085      	sub	sp, #20
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
 8000ed4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000ee0:	2b01      	cmp	r3, #1
 8000ee2:	d101      	bne.n	8000ee8 <HAL_ADC_ConfigChannel+0x1c>
 8000ee4:	2302      	movs	r3, #2
 8000ee6:	e12a      	b.n	800113e <HAL_ADC_ConfigChannel+0x272>
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	2201      	movs	r2, #1
 8000eec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	2b09      	cmp	r3, #9
 8000ef6:	d93a      	bls.n	8000f6e <HAL_ADC_ConfigChannel+0xa2>
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000f00:	d035      	beq.n	8000f6e <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	68d9      	ldr	r1, [r3, #12]
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	b29b      	uxth	r3, r3
 8000f0e:	461a      	mov	r2, r3
 8000f10:	4613      	mov	r3, r2
 8000f12:	005b      	lsls	r3, r3, #1
 8000f14:	4413      	add	r3, r2
 8000f16:	3b1e      	subs	r3, #30
 8000f18:	2207      	movs	r2, #7
 8000f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1e:	43da      	mvns	r2, r3
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	400a      	ands	r2, r1
 8000f26:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	4a87      	ldr	r2, [pc, #540]	; (800114c <HAL_ADC_ConfigChannel+0x280>)
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	d10a      	bne.n	8000f48 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	68d9      	ldr	r1, [r3, #12]
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	689b      	ldr	r3, [r3, #8]
 8000f3c:	061a      	lsls	r2, r3, #24
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	430a      	orrs	r2, r1
 8000f44:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000f46:	e035      	b.n	8000fb4 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	68d9      	ldr	r1, [r3, #12]
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	689a      	ldr	r2, [r3, #8]
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	b29b      	uxth	r3, r3
 8000f58:	4618      	mov	r0, r3
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	005b      	lsls	r3, r3, #1
 8000f5e:	4403      	add	r3, r0
 8000f60:	3b1e      	subs	r3, #30
 8000f62:	409a      	lsls	r2, r3
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	430a      	orrs	r2, r1
 8000f6a:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000f6c:	e022      	b.n	8000fb4 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	6919      	ldr	r1, [r3, #16]
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	b29b      	uxth	r3, r3
 8000f7a:	461a      	mov	r2, r3
 8000f7c:	4613      	mov	r3, r2
 8000f7e:	005b      	lsls	r3, r3, #1
 8000f80:	4413      	add	r3, r2
 8000f82:	2207      	movs	r2, #7
 8000f84:	fa02 f303 	lsl.w	r3, r2, r3
 8000f88:	43da      	mvns	r2, r3
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	400a      	ands	r2, r1
 8000f90:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	6919      	ldr	r1, [r3, #16]
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	689a      	ldr	r2, [r3, #8]
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	b29b      	uxth	r3, r3
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	005b      	lsls	r3, r3, #1
 8000fa8:	4403      	add	r3, r0
 8000faa:	409a      	lsls	r2, r3
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	430a      	orrs	r2, r1
 8000fb2:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	2b06      	cmp	r3, #6
 8000fba:	d824      	bhi.n	8001006 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	685a      	ldr	r2, [r3, #4]
 8000fc6:	4613      	mov	r3, r2
 8000fc8:	009b      	lsls	r3, r3, #2
 8000fca:	4413      	add	r3, r2
 8000fcc:	3b05      	subs	r3, #5
 8000fce:	221f      	movs	r2, #31
 8000fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd4:	43da      	mvns	r2, r3
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	400a      	ands	r2, r1
 8000fdc:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	b29b      	uxth	r3, r3
 8000fea:	4618      	mov	r0, r3
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	685a      	ldr	r2, [r3, #4]
 8000ff0:	4613      	mov	r3, r2
 8000ff2:	009b      	lsls	r3, r3, #2
 8000ff4:	4413      	add	r3, r2
 8000ff6:	3b05      	subs	r3, #5
 8000ff8:	fa00 f203 	lsl.w	r2, r0, r3
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	430a      	orrs	r2, r1
 8001002:	635a      	str	r2, [r3, #52]	; 0x34
 8001004:	e04c      	b.n	80010a0 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	685b      	ldr	r3, [r3, #4]
 800100a:	2b0c      	cmp	r3, #12
 800100c:	d824      	bhi.n	8001058 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	685a      	ldr	r2, [r3, #4]
 8001018:	4613      	mov	r3, r2
 800101a:	009b      	lsls	r3, r3, #2
 800101c:	4413      	add	r3, r2
 800101e:	3b23      	subs	r3, #35	; 0x23
 8001020:	221f      	movs	r2, #31
 8001022:	fa02 f303 	lsl.w	r3, r2, r3
 8001026:	43da      	mvns	r2, r3
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	400a      	ands	r2, r1
 800102e:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	b29b      	uxth	r3, r3
 800103c:	4618      	mov	r0, r3
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	685a      	ldr	r2, [r3, #4]
 8001042:	4613      	mov	r3, r2
 8001044:	009b      	lsls	r3, r3, #2
 8001046:	4413      	add	r3, r2
 8001048:	3b23      	subs	r3, #35	; 0x23
 800104a:	fa00 f203 	lsl.w	r2, r0, r3
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	430a      	orrs	r2, r1
 8001054:	631a      	str	r2, [r3, #48]	; 0x30
 8001056:	e023      	b.n	80010a0 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	685a      	ldr	r2, [r3, #4]
 8001062:	4613      	mov	r3, r2
 8001064:	009b      	lsls	r3, r3, #2
 8001066:	4413      	add	r3, r2
 8001068:	3b41      	subs	r3, #65	; 0x41
 800106a:	221f      	movs	r2, #31
 800106c:	fa02 f303 	lsl.w	r3, r2, r3
 8001070:	43da      	mvns	r2, r3
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	400a      	ands	r2, r1
 8001078:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	b29b      	uxth	r3, r3
 8001086:	4618      	mov	r0, r3
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	685a      	ldr	r2, [r3, #4]
 800108c:	4613      	mov	r3, r2
 800108e:	009b      	lsls	r3, r3, #2
 8001090:	4413      	add	r3, r2
 8001092:	3b41      	subs	r3, #65	; 0x41
 8001094:	fa00 f203 	lsl.w	r2, r0, r3
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	430a      	orrs	r2, r1
 800109e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4a2a      	ldr	r2, [pc, #168]	; (8001150 <HAL_ADC_ConfigChannel+0x284>)
 80010a6:	4293      	cmp	r3, r2
 80010a8:	d10a      	bne.n	80010c0 <HAL_ADC_ConfigChannel+0x1f4>
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80010b2:	d105      	bne.n	80010c0 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80010b4:	4b27      	ldr	r3, [pc, #156]	; (8001154 <HAL_ADC_ConfigChannel+0x288>)
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	4a26      	ldr	r2, [pc, #152]	; (8001154 <HAL_ADC_ConfigChannel+0x288>)
 80010ba:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80010be:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4a22      	ldr	r2, [pc, #136]	; (8001150 <HAL_ADC_ConfigChannel+0x284>)
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d109      	bne.n	80010de <HAL_ADC_ConfigChannel+0x212>
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	2b12      	cmp	r3, #18
 80010d0:	d105      	bne.n	80010de <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80010d2:	4b20      	ldr	r3, [pc, #128]	; (8001154 <HAL_ADC_ConfigChannel+0x288>)
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	4a1f      	ldr	r2, [pc, #124]	; (8001154 <HAL_ADC_ConfigChannel+0x288>)
 80010d8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80010dc:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	4a1b      	ldr	r2, [pc, #108]	; (8001150 <HAL_ADC_ConfigChannel+0x284>)
 80010e4:	4293      	cmp	r3, r2
 80010e6:	d125      	bne.n	8001134 <HAL_ADC_ConfigChannel+0x268>
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4a17      	ldr	r2, [pc, #92]	; (800114c <HAL_ADC_ConfigChannel+0x280>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d003      	beq.n	80010fa <HAL_ADC_ConfigChannel+0x22e>
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	2b11      	cmp	r3, #17
 80010f8:	d11c      	bne.n	8001134 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80010fa:	4b16      	ldr	r3, [pc, #88]	; (8001154 <HAL_ADC_ConfigChannel+0x288>)
 80010fc:	685b      	ldr	r3, [r3, #4]
 80010fe:	4a15      	ldr	r2, [pc, #84]	; (8001154 <HAL_ADC_ConfigChannel+0x288>)
 8001100:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001104:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	4a10      	ldr	r2, [pc, #64]	; (800114c <HAL_ADC_ConfigChannel+0x280>)
 800110c:	4293      	cmp	r3, r2
 800110e:	d111      	bne.n	8001134 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001110:	4b11      	ldr	r3, [pc, #68]	; (8001158 <HAL_ADC_ConfigChannel+0x28c>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	4a11      	ldr	r2, [pc, #68]	; (800115c <HAL_ADC_ConfigChannel+0x290>)
 8001116:	fba2 2303 	umull	r2, r3, r2, r3
 800111a:	0c9a      	lsrs	r2, r3, #18
 800111c:	4613      	mov	r3, r2
 800111e:	009b      	lsls	r3, r3, #2
 8001120:	4413      	add	r3, r2
 8001122:	005b      	lsls	r3, r3, #1
 8001124:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001126:	e002      	b.n	800112e <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	3b01      	subs	r3, #1
 800112c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	2b00      	cmp	r3, #0
 8001132:	d1f9      	bne.n	8001128 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	2200      	movs	r2, #0
 8001138:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800113c:	2300      	movs	r3, #0
}
 800113e:	4618      	mov	r0, r3
 8001140:	3714      	adds	r7, #20
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr
 800114a:	bf00      	nop
 800114c:	10000012 	.word	0x10000012
 8001150:	40012000 	.word	0x40012000
 8001154:	40012300 	.word	0x40012300
 8001158:	20000000 	.word	0x20000000
 800115c:	431bde83 	.word	0x431bde83

08001160 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001160:	b480      	push	{r7}
 8001162:	b083      	sub	sp, #12
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001168:	4b78      	ldr	r3, [pc, #480]	; (800134c <ADC_Init+0x1ec>)
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	4a77      	ldr	r2, [pc, #476]	; (800134c <ADC_Init+0x1ec>)
 800116e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001172:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8001174:	4b75      	ldr	r3, [pc, #468]	; (800134c <ADC_Init+0x1ec>)
 8001176:	685a      	ldr	r2, [r3, #4]
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	4973      	ldr	r1, [pc, #460]	; (800134c <ADC_Init+0x1ec>)
 800117e:	4313      	orrs	r3, r2
 8001180:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	685a      	ldr	r2, [r3, #4]
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001190:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	6859      	ldr	r1, [r3, #4]
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	691b      	ldr	r3, [r3, #16]
 800119c:	021a      	lsls	r2, r3, #8
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	430a      	orrs	r2, r1
 80011a4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	685a      	ldr	r2, [r3, #4]
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80011b4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	6859      	ldr	r1, [r3, #4]
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	689a      	ldr	r2, [r3, #8]
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	430a      	orrs	r2, r1
 80011c6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	689a      	ldr	r2, [r3, #8]
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80011d6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	6899      	ldr	r1, [r3, #8]
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	68da      	ldr	r2, [r3, #12]
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	430a      	orrs	r2, r1
 80011e8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011ee:	4a58      	ldr	r2, [pc, #352]	; (8001350 <ADC_Init+0x1f0>)
 80011f0:	4293      	cmp	r3, r2
 80011f2:	d022      	beq.n	800123a <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	689a      	ldr	r2, [r3, #8]
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001202:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	6899      	ldr	r1, [r3, #8]
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	430a      	orrs	r2, r1
 8001214:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	689a      	ldr	r2, [r3, #8]
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001224:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	6899      	ldr	r1, [r3, #8]
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	430a      	orrs	r2, r1
 8001236:	609a      	str	r2, [r3, #8]
 8001238:	e00f      	b.n	800125a <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	689a      	ldr	r2, [r3, #8]
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001248:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	689a      	ldr	r2, [r3, #8]
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001258:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	689a      	ldr	r2, [r3, #8]
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f022 0202 	bic.w	r2, r2, #2
 8001268:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	6899      	ldr	r1, [r3, #8]
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	699b      	ldr	r3, [r3, #24]
 8001274:	005a      	lsls	r2, r3, #1
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	430a      	orrs	r2, r1
 800127c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001284:	2b00      	cmp	r3, #0
 8001286:	d01b      	beq.n	80012c0 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	685a      	ldr	r2, [r3, #4]
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001296:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	685a      	ldr	r2, [r3, #4]
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80012a6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	6859      	ldr	r1, [r3, #4]
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012b2:	3b01      	subs	r3, #1
 80012b4:	035a      	lsls	r2, r3, #13
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	430a      	orrs	r2, r1
 80012bc:	605a      	str	r2, [r3, #4]
 80012be:	e007      	b.n	80012d0 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	685a      	ldr	r2, [r3, #4]
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80012ce:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80012de:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	69db      	ldr	r3, [r3, #28]
 80012ea:	3b01      	subs	r3, #1
 80012ec:	051a      	lsls	r2, r3, #20
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	430a      	orrs	r2, r1
 80012f4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	689a      	ldr	r2, [r3, #8]
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001304:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	6899      	ldr	r1, [r3, #8]
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001312:	025a      	lsls	r2, r3, #9
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	430a      	orrs	r2, r1
 800131a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	689a      	ldr	r2, [r3, #8]
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800132a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	6899      	ldr	r1, [r3, #8]
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	695b      	ldr	r3, [r3, #20]
 8001336:	029a      	lsls	r2, r3, #10
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	430a      	orrs	r2, r1
 800133e:	609a      	str	r2, [r3, #8]
}
 8001340:	bf00      	nop
 8001342:	370c      	adds	r7, #12
 8001344:	46bd      	mov	sp, r7
 8001346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134a:	4770      	bx	lr
 800134c:	40012300 	.word	0x40012300
 8001350:	0f000001 	.word	0x0f000001

08001354 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001354:	b480      	push	{r7}
 8001356:	b085      	sub	sp, #20
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	f003 0307 	and.w	r3, r3, #7
 8001362:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001364:	4b0b      	ldr	r3, [pc, #44]	; (8001394 <__NVIC_SetPriorityGrouping+0x40>)
 8001366:	68db      	ldr	r3, [r3, #12]
 8001368:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800136a:	68ba      	ldr	r2, [r7, #8]
 800136c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001370:	4013      	ands	r3, r2
 8001372:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001378:	68bb      	ldr	r3, [r7, #8]
 800137a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800137c:	4b06      	ldr	r3, [pc, #24]	; (8001398 <__NVIC_SetPriorityGrouping+0x44>)
 800137e:	4313      	orrs	r3, r2
 8001380:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001382:	4a04      	ldr	r2, [pc, #16]	; (8001394 <__NVIC_SetPriorityGrouping+0x40>)
 8001384:	68bb      	ldr	r3, [r7, #8]
 8001386:	60d3      	str	r3, [r2, #12]
}
 8001388:	bf00      	nop
 800138a:	3714      	adds	r7, #20
 800138c:	46bd      	mov	sp, r7
 800138e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001392:	4770      	bx	lr
 8001394:	e000ed00 	.word	0xe000ed00
 8001398:	05fa0000 	.word	0x05fa0000

0800139c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013a0:	4b04      	ldr	r3, [pc, #16]	; (80013b4 <__NVIC_GetPriorityGrouping+0x18>)
 80013a2:	68db      	ldr	r3, [r3, #12]
 80013a4:	0a1b      	lsrs	r3, r3, #8
 80013a6:	f003 0307 	and.w	r3, r3, #7
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	46bd      	mov	sp, r7
 80013ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b2:	4770      	bx	lr
 80013b4:	e000ed00 	.word	0xe000ed00

080013b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b083      	sub	sp, #12
 80013bc:	af00      	add	r7, sp, #0
 80013be:	4603      	mov	r3, r0
 80013c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	db0b      	blt.n	80013e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013ca:	79fb      	ldrb	r3, [r7, #7]
 80013cc:	f003 021f 	and.w	r2, r3, #31
 80013d0:	4907      	ldr	r1, [pc, #28]	; (80013f0 <__NVIC_EnableIRQ+0x38>)
 80013d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013d6:	095b      	lsrs	r3, r3, #5
 80013d8:	2001      	movs	r0, #1
 80013da:	fa00 f202 	lsl.w	r2, r0, r2
 80013de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80013e2:	bf00      	nop
 80013e4:	370c      	adds	r7, #12
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr
 80013ee:	bf00      	nop
 80013f0:	e000e100 	.word	0xe000e100

080013f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b083      	sub	sp, #12
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	4603      	mov	r3, r0
 80013fc:	6039      	str	r1, [r7, #0]
 80013fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001400:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001404:	2b00      	cmp	r3, #0
 8001406:	db0a      	blt.n	800141e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	b2da      	uxtb	r2, r3
 800140c:	490c      	ldr	r1, [pc, #48]	; (8001440 <__NVIC_SetPriority+0x4c>)
 800140e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001412:	0112      	lsls	r2, r2, #4
 8001414:	b2d2      	uxtb	r2, r2
 8001416:	440b      	add	r3, r1
 8001418:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800141c:	e00a      	b.n	8001434 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	b2da      	uxtb	r2, r3
 8001422:	4908      	ldr	r1, [pc, #32]	; (8001444 <__NVIC_SetPriority+0x50>)
 8001424:	79fb      	ldrb	r3, [r7, #7]
 8001426:	f003 030f 	and.w	r3, r3, #15
 800142a:	3b04      	subs	r3, #4
 800142c:	0112      	lsls	r2, r2, #4
 800142e:	b2d2      	uxtb	r2, r2
 8001430:	440b      	add	r3, r1
 8001432:	761a      	strb	r2, [r3, #24]
}
 8001434:	bf00      	nop
 8001436:	370c      	adds	r7, #12
 8001438:	46bd      	mov	sp, r7
 800143a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143e:	4770      	bx	lr
 8001440:	e000e100 	.word	0xe000e100
 8001444:	e000ed00 	.word	0xe000ed00

08001448 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001448:	b480      	push	{r7}
 800144a:	b089      	sub	sp, #36	; 0x24
 800144c:	af00      	add	r7, sp, #0
 800144e:	60f8      	str	r0, [r7, #12]
 8001450:	60b9      	str	r1, [r7, #8]
 8001452:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	f003 0307 	and.w	r3, r3, #7
 800145a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800145c:	69fb      	ldr	r3, [r7, #28]
 800145e:	f1c3 0307 	rsb	r3, r3, #7
 8001462:	2b04      	cmp	r3, #4
 8001464:	bf28      	it	cs
 8001466:	2304      	movcs	r3, #4
 8001468:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800146a:	69fb      	ldr	r3, [r7, #28]
 800146c:	3304      	adds	r3, #4
 800146e:	2b06      	cmp	r3, #6
 8001470:	d902      	bls.n	8001478 <NVIC_EncodePriority+0x30>
 8001472:	69fb      	ldr	r3, [r7, #28]
 8001474:	3b03      	subs	r3, #3
 8001476:	e000      	b.n	800147a <NVIC_EncodePriority+0x32>
 8001478:	2300      	movs	r3, #0
 800147a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800147c:	f04f 32ff 	mov.w	r2, #4294967295
 8001480:	69bb      	ldr	r3, [r7, #24]
 8001482:	fa02 f303 	lsl.w	r3, r2, r3
 8001486:	43da      	mvns	r2, r3
 8001488:	68bb      	ldr	r3, [r7, #8]
 800148a:	401a      	ands	r2, r3
 800148c:	697b      	ldr	r3, [r7, #20]
 800148e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001490:	f04f 31ff 	mov.w	r1, #4294967295
 8001494:	697b      	ldr	r3, [r7, #20]
 8001496:	fa01 f303 	lsl.w	r3, r1, r3
 800149a:	43d9      	mvns	r1, r3
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014a0:	4313      	orrs	r3, r2
         );
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	3724      	adds	r7, #36	; 0x24
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr

080014ae <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014ae:	b580      	push	{r7, lr}
 80014b0:	b082      	sub	sp, #8
 80014b2:	af00      	add	r7, sp, #0
 80014b4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014b6:	6878      	ldr	r0, [r7, #4]
 80014b8:	f7ff ff4c 	bl	8001354 <__NVIC_SetPriorityGrouping>
}
 80014bc:	bf00      	nop
 80014be:	3708      	adds	r7, #8
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}

080014c4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b086      	sub	sp, #24
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	4603      	mov	r3, r0
 80014cc:	60b9      	str	r1, [r7, #8]
 80014ce:	607a      	str	r2, [r7, #4]
 80014d0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80014d2:	2300      	movs	r3, #0
 80014d4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014d6:	f7ff ff61 	bl	800139c <__NVIC_GetPriorityGrouping>
 80014da:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014dc:	687a      	ldr	r2, [r7, #4]
 80014de:	68b9      	ldr	r1, [r7, #8]
 80014e0:	6978      	ldr	r0, [r7, #20]
 80014e2:	f7ff ffb1 	bl	8001448 <NVIC_EncodePriority>
 80014e6:	4602      	mov	r2, r0
 80014e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014ec:	4611      	mov	r1, r2
 80014ee:	4618      	mov	r0, r3
 80014f0:	f7ff ff80 	bl	80013f4 <__NVIC_SetPriority>
}
 80014f4:	bf00      	nop
 80014f6:	3718      	adds	r7, #24
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}

080014fc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b082      	sub	sp, #8
 8001500:	af00      	add	r7, sp, #0
 8001502:	4603      	mov	r3, r0
 8001504:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001506:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800150a:	4618      	mov	r0, r3
 800150c:	f7ff ff54 	bl	80013b8 <__NVIC_EnableIRQ>
}
 8001510:	bf00      	nop
 8001512:	3708      	adds	r7, #8
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}

08001518 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b088      	sub	sp, #32
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 8001520:	2300      	movs	r3, #0
 8001522:	61fb      	str	r3, [r7, #28]
 8001524:	2300      	movs	r3, #0
 8001526:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 8001528:	4ba9      	ldr	r3, [pc, #676]	; (80017d0 <HAL_ETH_Init+0x2b8>)
 800152a:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 800152c:	2300      	movs	r3, #0
 800152e:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8001530:	2300      	movs	r3, #0
 8001532:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	2b00      	cmp	r3, #0
 8001538:	d101      	bne.n	800153e <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 800153a:	2301      	movs	r3, #1
 800153c:	e183      	b.n	8001846 <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001544:	b2db      	uxtb	r3, r3
 8001546:	2b00      	cmp	r3, #0
 8001548:	d106      	bne.n	8001558 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	2200      	movs	r2, #0
 800154e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001552:	6878      	ldr	r0, [r7, #4]
 8001554:	f003 fcb8 	bl	8004ec8 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001558:	4b9e      	ldr	r3, [pc, #632]	; (80017d4 <HAL_ETH_Init+0x2bc>)
 800155a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800155c:	4a9d      	ldr	r2, [pc, #628]	; (80017d4 <HAL_ETH_Init+0x2bc>)
 800155e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001562:	6453      	str	r3, [r2, #68]	; 0x44
 8001564:	4b9b      	ldr	r3, [pc, #620]	; (80017d4 <HAL_ETH_Init+0x2bc>)
 8001566:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001568:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800156c:	60bb      	str	r3, [r7, #8]
 800156e:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001570:	4b99      	ldr	r3, [pc, #612]	; (80017d8 <HAL_ETH_Init+0x2c0>)
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	4a98      	ldr	r2, [pc, #608]	; (80017d8 <HAL_ETH_Init+0x2c0>)
 8001576:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800157a:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800157c:	4b96      	ldr	r3, [pc, #600]	; (80017d8 <HAL_ETH_Init+0x2c0>)
 800157e:	685a      	ldr	r2, [r3, #4]
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6a1b      	ldr	r3, [r3, #32]
 8001584:	4994      	ldr	r1, [pc, #592]	; (80017d8 <HAL_ETH_Init+0x2c0>)
 8001586:	4313      	orrs	r3, r2
 8001588:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001592:	681a      	ldr	r2, [r3, #0]
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f042 0201 	orr.w	r2, r2, #1
 800159c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015a0:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80015a2:	f7ff fc21 	bl	8000de8 <HAL_GetTick>
 80015a6:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80015a8:	e011      	b.n	80015ce <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 80015aa:	f7ff fc1d 	bl	8000de8 <HAL_GetTick>
 80015ae:	4602      	mov	r2, r0
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	1ad3      	subs	r3, r2, r3
 80015b4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80015b8:	d909      	bls.n	80015ce <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	2203      	movs	r2, #3
 80015be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	2200      	movs	r2, #0
 80015c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 80015ca:	2303      	movs	r3, #3
 80015cc:	e13b      	b.n	8001846 <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f003 0301 	and.w	r3, r3, #1
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d1e4      	bne.n	80015aa <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	691b      	ldr	r3, [r3, #16]
 80015e6:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 80015e8:	69fb      	ldr	r3, [r7, #28]
 80015ea:	f023 031c 	bic.w	r3, r3, #28
 80015ee:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80015f0:	f001 ff20 	bl	8003434 <HAL_RCC_GetHCLKFreq>
 80015f4:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 80015f6:	69bb      	ldr	r3, [r7, #24]
 80015f8:	4a78      	ldr	r2, [pc, #480]	; (80017dc <HAL_ETH_Init+0x2c4>)
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d908      	bls.n	8001610 <HAL_ETH_Init+0xf8>
 80015fe:	69bb      	ldr	r3, [r7, #24]
 8001600:	4a77      	ldr	r2, [pc, #476]	; (80017e0 <HAL_ETH_Init+0x2c8>)
 8001602:	4293      	cmp	r3, r2
 8001604:	d804      	bhi.n	8001610 <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8001606:	69fb      	ldr	r3, [r7, #28]
 8001608:	f043 0308 	orr.w	r3, r3, #8
 800160c:	61fb      	str	r3, [r7, #28]
 800160e:	e027      	b.n	8001660 <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 8001610:	69bb      	ldr	r3, [r7, #24]
 8001612:	4a73      	ldr	r2, [pc, #460]	; (80017e0 <HAL_ETH_Init+0x2c8>)
 8001614:	4293      	cmp	r3, r2
 8001616:	d908      	bls.n	800162a <HAL_ETH_Init+0x112>
 8001618:	69bb      	ldr	r3, [r7, #24]
 800161a:	4a72      	ldr	r2, [pc, #456]	; (80017e4 <HAL_ETH_Init+0x2cc>)
 800161c:	4293      	cmp	r3, r2
 800161e:	d804      	bhi.n	800162a <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8001620:	69fb      	ldr	r3, [r7, #28]
 8001622:	f043 030c 	orr.w	r3, r3, #12
 8001626:	61fb      	str	r3, [r7, #28]
 8001628:	e01a      	b.n	8001660 <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 800162a:	69bb      	ldr	r3, [r7, #24]
 800162c:	4a6d      	ldr	r2, [pc, #436]	; (80017e4 <HAL_ETH_Init+0x2cc>)
 800162e:	4293      	cmp	r3, r2
 8001630:	d903      	bls.n	800163a <HAL_ETH_Init+0x122>
 8001632:	69bb      	ldr	r3, [r7, #24]
 8001634:	4a6c      	ldr	r2, [pc, #432]	; (80017e8 <HAL_ETH_Init+0x2d0>)
 8001636:	4293      	cmp	r3, r2
 8001638:	d911      	bls.n	800165e <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 800163a:	69bb      	ldr	r3, [r7, #24]
 800163c:	4a6a      	ldr	r2, [pc, #424]	; (80017e8 <HAL_ETH_Init+0x2d0>)
 800163e:	4293      	cmp	r3, r2
 8001640:	d908      	bls.n	8001654 <HAL_ETH_Init+0x13c>
 8001642:	69bb      	ldr	r3, [r7, #24]
 8001644:	4a69      	ldr	r2, [pc, #420]	; (80017ec <HAL_ETH_Init+0x2d4>)
 8001646:	4293      	cmp	r3, r2
 8001648:	d804      	bhi.n	8001654 <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 800164a:	69fb      	ldr	r3, [r7, #28]
 800164c:	f043 0304 	orr.w	r3, r3, #4
 8001650:	61fb      	str	r3, [r7, #28]
 8001652:	e005      	b.n	8001660 <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8001654:	69fb      	ldr	r3, [r7, #28]
 8001656:	f043 0310 	orr.w	r3, r3, #16
 800165a:	61fb      	str	r3, [r7, #28]
 800165c:	e000      	b.n	8001660 <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 800165e:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	69fa      	ldr	r2, [r7, #28]
 8001666:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8001668:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800166c:	2100      	movs	r1, #0
 800166e:	6878      	ldr	r0, [r7, #4]
 8001670:	f000 fb9b 	bl	8001daa <HAL_ETH_WritePHYRegister>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d00b      	beq.n	8001692 <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 800167a:	2301      	movs	r3, #1
 800167c:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 800167e:	6939      	ldr	r1, [r7, #16]
 8001680:	6878      	ldr	r0, [r7, #4]
 8001682:	f000 fd51 	bl	8002128 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	2201      	movs	r2, #1
 800168a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 800168e:	2301      	movs	r3, #1
 8001690:	e0d9      	b.n	8001846 <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8001692:	20ff      	movs	r0, #255	; 0xff
 8001694:	f7ff fbb4 	bl	8000e00 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	2b00      	cmp	r3, #0
 800169e:	f000 80a7 	beq.w	80017f0 <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80016a2:	f7ff fba1 	bl	8000de8 <HAL_GetTick>
 80016a6:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80016a8:	f107 030c 	add.w	r3, r7, #12
 80016ac:	461a      	mov	r2, r3
 80016ae:	2101      	movs	r1, #1
 80016b0:	6878      	ldr	r0, [r7, #4]
 80016b2:	f000 fb12 	bl	8001cda <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 80016b6:	f7ff fb97 	bl	8000de8 <HAL_GetTick>
 80016ba:	4602      	mov	r2, r0
 80016bc:	697b      	ldr	r3, [r7, #20]
 80016be:	1ad3      	subs	r3, r2, r3
 80016c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80016c4:	4293      	cmp	r3, r2
 80016c6:	d90f      	bls.n	80016e8 <HAL_ETH_Init+0x1d0>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80016c8:	2301      	movs	r3, #1
 80016ca:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80016cc:	6939      	ldr	r1, [r7, #16]
 80016ce:	6878      	ldr	r0, [r7, #4]
 80016d0:	f000 fd2a 	bl	8002128 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	2201      	movs	r2, #1
 80016d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	2200      	movs	r2, #0
 80016e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80016e4:	2303      	movs	r3, #3
 80016e6:	e0ae      	b.n	8001846 <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	f003 0304 	and.w	r3, r3, #4
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d0da      	beq.n	80016a8 <HAL_ETH_Init+0x190>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 80016f2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80016f6:	2100      	movs	r1, #0
 80016f8:	6878      	ldr	r0, [r7, #4]
 80016fa:	f000 fb56 	bl	8001daa <HAL_ETH_WritePHYRegister>
 80016fe:	4603      	mov	r3, r0
 8001700:	2b00      	cmp	r3, #0
 8001702:	d00b      	beq.n	800171c <HAL_ETH_Init+0x204>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001704:	2301      	movs	r3, #1
 8001706:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001708:	6939      	ldr	r1, [r7, #16]
 800170a:	6878      	ldr	r0, [r7, #4]
 800170c:	f000 fd0c 	bl	8002128 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	2201      	movs	r2, #1
 8001714:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001718:	2301      	movs	r3, #1
 800171a:	e094      	b.n	8001846 <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 800171c:	f7ff fb64 	bl	8000de8 <HAL_GetTick>
 8001720:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001722:	f107 030c 	add.w	r3, r7, #12
 8001726:	461a      	mov	r2, r3
 8001728:	2101      	movs	r1, #1
 800172a:	6878      	ldr	r0, [r7, #4]
 800172c:	f000 fad5 	bl	8001cda <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8001730:	f7ff fb5a 	bl	8000de8 <HAL_GetTick>
 8001734:	4602      	mov	r2, r0
 8001736:	697b      	ldr	r3, [r7, #20]
 8001738:	1ad3      	subs	r3, r2, r3
 800173a:	f241 3288 	movw	r2, #5000	; 0x1388
 800173e:	4293      	cmp	r3, r2
 8001740:	d90f      	bls.n	8001762 <HAL_ETH_Init+0x24a>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001742:	2301      	movs	r3, #1
 8001744:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001746:	6939      	ldr	r1, [r7, #16]
 8001748:	6878      	ldr	r0, [r7, #4]
 800174a:	f000 fced 	bl	8002128 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	2201      	movs	r2, #1
 8001752:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	2200      	movs	r2, #0
 800175a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 800175e:	2303      	movs	r3, #3
 8001760:	e071      	b.n	8001846 <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	f003 0320 	and.w	r3, r3, #32
 8001768:	2b00      	cmp	r3, #0
 800176a:	d0da      	beq.n	8001722 <HAL_ETH_Init+0x20a>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 800176c:	f107 030c 	add.w	r3, r7, #12
 8001770:	461a      	mov	r2, r3
 8001772:	211f      	movs	r1, #31
 8001774:	6878      	ldr	r0, [r7, #4]
 8001776:	f000 fab0 	bl	8001cda <HAL_ETH_ReadPHYRegister>
 800177a:	4603      	mov	r3, r0
 800177c:	2b00      	cmp	r3, #0
 800177e:	d00b      	beq.n	8001798 <HAL_ETH_Init+0x280>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001780:	2301      	movs	r3, #1
 8001782:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001784:	6939      	ldr	r1, [r7, #16]
 8001786:	6878      	ldr	r0, [r7, #4]
 8001788:	f000 fcce 	bl	8002128 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2201      	movs	r2, #1
 8001790:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001794:	2301      	movs	r3, #1
 8001796:	e056      	b.n	8001846 <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	f003 0310 	and.w	r3, r3, #16
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d004      	beq.n	80017ac <HAL_ETH_Init+0x294>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80017a8:	60da      	str	r2, [r3, #12]
 80017aa:	e002      	b.n	80017b2 <HAL_ETH_Init+0x29a>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	2200      	movs	r2, #0
 80017b0:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	f003 0304 	and.w	r3, r3, #4
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d003      	beq.n	80017c4 <HAL_ETH_Init+0x2ac>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	2200      	movs	r2, #0
 80017c0:	609a      	str	r2, [r3, #8]
 80017c2:	e037      	b.n	8001834 <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80017ca:	609a      	str	r2, [r3, #8]
 80017cc:	e032      	b.n	8001834 <HAL_ETH_Init+0x31c>
 80017ce:	bf00      	nop
 80017d0:	03938700 	.word	0x03938700
 80017d4:	40023800 	.word	0x40023800
 80017d8:	40013800 	.word	0x40013800
 80017dc:	01312cff 	.word	0x01312cff
 80017e0:	02160ebf 	.word	0x02160ebf
 80017e4:	039386ff 	.word	0x039386ff
 80017e8:	05f5e0ff 	.word	0x05f5e0ff
 80017ec:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	68db      	ldr	r3, [r3, #12]
 80017f4:	08db      	lsrs	r3, r3, #3
 80017f6:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	689b      	ldr	r3, [r3, #8]
 80017fc:	085b      	lsrs	r3, r3, #1
 80017fe:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8001800:	4313      	orrs	r3, r2
 8001802:	b29b      	uxth	r3, r3
 8001804:	461a      	mov	r2, r3
 8001806:	2100      	movs	r1, #0
 8001808:	6878      	ldr	r0, [r7, #4]
 800180a:	f000 face 	bl	8001daa <HAL_ETH_WritePHYRegister>
 800180e:	4603      	mov	r3, r0
 8001810:	2b00      	cmp	r3, #0
 8001812:	d00b      	beq.n	800182c <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001814:	2301      	movs	r3, #1
 8001816:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001818:	6939      	ldr	r1, [r7, #16]
 800181a:	6878      	ldr	r0, [r7, #4]
 800181c:	f000 fc84 	bl	8002128 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2201      	movs	r2, #1
 8001824:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8001828:	2301      	movs	r3, #1
 800182a:	e00c      	b.n	8001846 <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 800182c:	f640 70ff 	movw	r0, #4095	; 0xfff
 8001830:	f7ff fae6 	bl	8000e00 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8001834:	6939      	ldr	r1, [r7, #16]
 8001836:	6878      	ldr	r0, [r7, #4]
 8001838:	f000 fc76 	bl	8002128 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2201      	movs	r2, #1
 8001840:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001844:	2300      	movs	r3, #0
}
 8001846:	4618      	mov	r0, r3
 8001848:	3720      	adds	r7, #32
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop

08001850 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8001850:	b480      	push	{r7}
 8001852:	b087      	sub	sp, #28
 8001854:	af00      	add	r7, sp, #0
 8001856:	60f8      	str	r0, [r7, #12]
 8001858:	60b9      	str	r1, [r7, #8]
 800185a:	607a      	str	r2, [r7, #4]
 800185c:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 800185e:	2300      	movs	r3, #0
 8001860:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001868:	2b01      	cmp	r3, #1
 800186a:	d101      	bne.n	8001870 <HAL_ETH_DMATxDescListInit+0x20>
 800186c:	2302      	movs	r3, #2
 800186e:	e052      	b.n	8001916 <HAL_ETH_DMATxDescListInit+0xc6>
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	2201      	movs	r2, #1
 8001874:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	2202      	movs	r2, #2
 800187c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	68ba      	ldr	r2, [r7, #8]
 8001884:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0; i < TxBuffCount; i++)
 8001886:	2300      	movs	r3, #0
 8001888:	617b      	str	r3, [r7, #20]
 800188a:	e030      	b.n	80018ee <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the member (i) of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 800188c:	697b      	ldr	r3, [r7, #20]
 800188e:	015b      	lsls	r3, r3, #5
 8001890:	68ba      	ldr	r2, [r7, #8]
 8001892:	4413      	add	r3, r2
 8001894:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8001896:	693b      	ldr	r3, [r7, #16]
 8001898:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800189c:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 800189e:	697b      	ldr	r3, [r7, #20]
 80018a0:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80018a4:	fb02 f303 	mul.w	r3, r2, r3
 80018a8:	687a      	ldr	r2, [r7, #4]
 80018aa:	4413      	add	r3, r2
 80018ac:	461a      	mov	r2, r3
 80018ae:	693b      	ldr	r3, [r7, #16]
 80018b0:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	69db      	ldr	r3, [r3, #28]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d105      	bne.n	80018c6 <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 80018ba:	693b      	ldr	r3, [r7, #16]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80018c2:	693b      	ldr	r3, [r7, #16]
 80018c4:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1))
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	3b01      	subs	r3, #1
 80018ca:	697a      	ldr	r2, [r7, #20]
 80018cc:	429a      	cmp	r2, r3
 80018ce:	d208      	bcs.n	80018e2 <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1);
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	3301      	adds	r3, #1
 80018d4:	015b      	lsls	r3, r3, #5
 80018d6:	68ba      	ldr	r2, [r7, #8]
 80018d8:	4413      	add	r3, r2
 80018da:	461a      	mov	r2, r3
 80018dc:	693b      	ldr	r3, [r7, #16]
 80018de:	60da      	str	r2, [r3, #12]
 80018e0:	e002      	b.n	80018e8 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 80018e2:	68ba      	ldr	r2, [r7, #8]
 80018e4:	693b      	ldr	r3, [r7, #16]
 80018e6:	60da      	str	r2, [r3, #12]
  for(i=0; i < TxBuffCount; i++)
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	3301      	adds	r3, #1
 80018ec:	617b      	str	r3, [r7, #20]
 80018ee:	697a      	ldr	r2, [r7, #20]
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	429a      	cmp	r2, r3
 80018f4:	d3ca      	bcc.n	800188c <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	6819      	ldr	r1, [r3, #0]
 80018fa:	68ba      	ldr	r2, [r7, #8]
 80018fc:	f241 0310 	movw	r3, #4112	; 0x1010
 8001900:	440b      	add	r3, r1
 8001902:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	2201      	movs	r2, #1
 8001908:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	2200      	movs	r2, #0
 8001910:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001914:	2300      	movs	r3, #0
}
 8001916:	4618      	mov	r0, r3
 8001918:	371c      	adds	r7, #28
 800191a:	46bd      	mov	sp, r7
 800191c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001920:	4770      	bx	lr

08001922 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 8001922:	b480      	push	{r7}
 8001924:	b087      	sub	sp, #28
 8001926:	af00      	add	r7, sp, #0
 8001928:	60f8      	str	r0, [r7, #12]
 800192a:	60b9      	str	r1, [r7, #8]
 800192c:	607a      	str	r2, [r7, #4]
 800192e:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 8001930:	2300      	movs	r3, #0
 8001932:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800193a:	2b01      	cmp	r3, #1
 800193c:	d101      	bne.n	8001942 <HAL_ETH_DMARxDescListInit+0x20>
 800193e:	2302      	movs	r3, #2
 8001940:	e056      	b.n	80019f0 <HAL_ETH_DMARxDescListInit+0xce>
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	2201      	movs	r2, #1
 8001946:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	2202      	movs	r2, #2
 800194e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	68ba      	ldr	r2, [r7, #8]
 8001956:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0; i < RxBuffCount; i++)
 8001958:	2300      	movs	r3, #0
 800195a:	617b      	str	r3, [r7, #20]
 800195c:	e034      	b.n	80019c8 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the member (i) of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 800195e:	697b      	ldr	r3, [r7, #20]
 8001960:	015b      	lsls	r3, r3, #5
 8001962:	68ba      	ldr	r2, [r7, #8]
 8001964:	4413      	add	r3, r2
 8001966:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8001968:	693b      	ldr	r3, [r7, #16]
 800196a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800196e:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8001970:	693b      	ldr	r3, [r7, #16]
 8001972:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8001976:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8001978:	697b      	ldr	r3, [r7, #20]
 800197a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800197e:	fb02 f303 	mul.w	r3, r2, r3
 8001982:	687a      	ldr	r2, [r7, #4]
 8001984:	4413      	add	r3, r2
 8001986:	461a      	mov	r2, r3
 8001988:	693b      	ldr	r3, [r7, #16]
 800198a:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	699b      	ldr	r3, [r3, #24]
 8001990:	2b01      	cmp	r3, #1
 8001992:	d105      	bne.n	80019a0 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8001994:	693b      	ldr	r3, [r7, #16]
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800199c:	693b      	ldr	r3, [r7, #16]
 800199e:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1))
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	3b01      	subs	r3, #1
 80019a4:	697a      	ldr	r2, [r7, #20]
 80019a6:	429a      	cmp	r2, r3
 80019a8:	d208      	bcs.n	80019bc <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1); 
 80019aa:	697b      	ldr	r3, [r7, #20]
 80019ac:	3301      	adds	r3, #1
 80019ae:	015b      	lsls	r3, r3, #5
 80019b0:	68ba      	ldr	r2, [r7, #8]
 80019b2:	4413      	add	r3, r2
 80019b4:	461a      	mov	r2, r3
 80019b6:	693b      	ldr	r3, [r7, #16]
 80019b8:	60da      	str	r2, [r3, #12]
 80019ba:	e002      	b.n	80019c2 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 80019bc:	68ba      	ldr	r2, [r7, #8]
 80019be:	693b      	ldr	r3, [r7, #16]
 80019c0:	60da      	str	r2, [r3, #12]
  for(i=0; i < RxBuffCount; i++)
 80019c2:	697b      	ldr	r3, [r7, #20]
 80019c4:	3301      	adds	r3, #1
 80019c6:	617b      	str	r3, [r7, #20]
 80019c8:	697a      	ldr	r2, [r7, #20]
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	429a      	cmp	r2, r3
 80019ce:	d3c6      	bcc.n	800195e <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	6819      	ldr	r1, [r3, #0]
 80019d4:	68ba      	ldr	r2, [r7, #8]
 80019d6:	f241 030c 	movw	r3, #4108	; 0x100c
 80019da:	440b      	add	r3, r1
 80019dc:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	2201      	movs	r2, #1
 80019e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	2200      	movs	r2, #0
 80019ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80019ee:	2300      	movs	r3, #0
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	371c      	adds	r7, #28
 80019f4:	46bd      	mov	sp, r7
 80019f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fa:	4770      	bx	lr

080019fc <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b087      	sub	sp, #28
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
 8001a04:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0, size = 0, i = 0;
 8001a06:	2300      	movs	r3, #0
 8001a08:	617b      	str	r3, [r7, #20]
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	60fb      	str	r3, [r7, #12]
 8001a0e:	2300      	movs	r3, #0
 8001a10:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001a18:	2b01      	cmp	r3, #1
 8001a1a:	d101      	bne.n	8001a20 <HAL_ETH_TransmitFrame+0x24>
 8001a1c:	2302      	movs	r3, #2
 8001a1e:	e0cd      	b.n	8001bbc <HAL_ETH_TransmitFrame+0x1c0>
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2201      	movs	r2, #1
 8001a24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2202      	movs	r2, #2
 8001a2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0) 
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d109      	bne.n	8001a4a <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2201      	movs	r2, #1
 8001a3a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	2200      	movs	r2, #0
 8001a42:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 8001a46:	2301      	movs	r3, #1
 8001a48:	e0b8      	b.n	8001bbc <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	da09      	bge.n	8001a68 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2212      	movs	r2, #18
 8001a58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2200      	movs	r2, #0
 8001a60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 8001a64:	2301      	movs	r3, #1
 8001a66:	e0a9      	b.n	8001bbc <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d915      	bls.n	8001a9e <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	4a54      	ldr	r2, [pc, #336]	; (8001bc8 <HAL_ETH_TransmitFrame+0x1cc>)
 8001a76:	fba2 2303 	umull	r2, r3, r2, r3
 8001a7a:	0a9b      	lsrs	r3, r3, #10
 8001a7c:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8001a7e:	683a      	ldr	r2, [r7, #0]
 8001a80:	4b51      	ldr	r3, [pc, #324]	; (8001bc8 <HAL_ETH_TransmitFrame+0x1cc>)
 8001a82:	fba3 1302 	umull	r1, r3, r3, r2
 8001a86:	0a9b      	lsrs	r3, r3, #10
 8001a88:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8001a8c:	fb01 f303 	mul.w	r3, r1, r3
 8001a90:	1ad3      	subs	r3, r2, r3
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d005      	beq.n	8001aa2 <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 8001a96:	697b      	ldr	r3, [r7, #20]
 8001a98:	3301      	adds	r3, #1
 8001a9a:	617b      	str	r3, [r7, #20]
 8001a9c:	e001      	b.n	8001aa2 <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1)
 8001aa2:	697b      	ldr	r3, [r7, #20]
 8001aa4:	2b01      	cmp	r3, #1
 8001aa6:	d11c      	bne.n	8001ae2 <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aac:	681a      	ldr	r2, [r3, #0]
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ab2:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 8001ab6:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001abc:	683a      	ldr	r2, [r7, #0]
 8001abe:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8001ac2:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ac8:	681a      	ldr	r2, [r3, #0]
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ace:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001ad2:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ad8:	68db      	ldr	r3, [r3, #12]
 8001ada:	461a      	mov	r2, r3
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	62da      	str	r2, [r3, #44]	; 0x2c
 8001ae0:	e04b      	b.n	8001b7a <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0; i< bufcount; i++)
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	613b      	str	r3, [r7, #16]
 8001ae6:	e044      	b.n	8001b72 <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aec:	681a      	ldr	r2, [r3, #0]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001af2:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001af6:	601a      	str	r2, [r3, #0]
      
      if (i == 0) 
 8001af8:	693b      	ldr	r3, [r7, #16]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d107      	bne.n	8001b0e <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b02:	681a      	ldr	r2, [r3, #0]
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b08:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001b0c:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b12:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001b16:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1))
 8001b18:	697b      	ldr	r3, [r7, #20]
 8001b1a:	3b01      	subs	r3, #1
 8001b1c:	693a      	ldr	r2, [r7, #16]
 8001b1e:	429a      	cmp	r2, r3
 8001b20:	d116      	bne.n	8001b50 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b26:	681a      	ldr	r2, [r3, #0]
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b2c:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8001b30:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
 8001b32:	697b      	ldr	r3, [r7, #20]
 8001b34:	4a25      	ldr	r2, [pc, #148]	; (8001bcc <HAL_ETH_TransmitFrame+0x1d0>)
 8001b36:	fb02 f203 	mul.w	r2, r2, r3
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	4413      	add	r3, r2
 8001b3e:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8001b42:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b48:	68fa      	ldr	r2, [r7, #12]
 8001b4a:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8001b4e:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b54:	681a      	ldr	r2, [r3, #0]
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b5a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001b5e:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b64:	68db      	ldr	r3, [r3, #12]
 8001b66:	461a      	mov	r2, r3
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0; i< bufcount; i++)
 8001b6c:	693b      	ldr	r3, [r7, #16]
 8001b6e:	3301      	adds	r3, #1
 8001b70:	613b      	str	r3, [r7, #16]
 8001b72:	693a      	ldr	r2, [r7, #16]
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	429a      	cmp	r2, r3
 8001b78:	d3b6      	bcc.n	8001ae8 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681a      	ldr	r2, [r3, #0]
 8001b7e:	f241 0314 	movw	r3, #4116	; 0x1014
 8001b82:	4413      	add	r3, r2
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f003 0304 	and.w	r3, r3, #4
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d00d      	beq.n	8001baa <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681a      	ldr	r2, [r3, #0]
 8001b92:	f241 0314 	movw	r3, #4116	; 0x1014
 8001b96:	4413      	add	r3, r2
 8001b98:	2204      	movs	r2, #4
 8001b9a:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681a      	ldr	r2, [r3, #0]
 8001ba0:	f241 0304 	movw	r3, #4100	; 0x1004
 8001ba4:	4413      	add	r3, r2
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2201      	movs	r2, #1
 8001bae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001bba:	2300      	movs	r3, #0
}
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	371c      	adds	r7, #28
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc6:	4770      	bx	lr
 8001bc8:	ac02b00b 	.word	0xac02b00b
 8001bcc:	fffffa0c 	.word	0xfffffa0c

08001bd0 <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b082      	sub	sp, #8
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681a      	ldr	r2, [r3, #0]
 8001bdc:	f241 0314 	movw	r3, #4116	; 0x1014
 8001be0:	4413      	add	r3, r2
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001be8:	2b40      	cmp	r3, #64	; 0x40
 8001bea:	d112      	bne.n	8001c12 <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8001bec:	6878      	ldr	r0, [r7, #4]
 8001bee:	f000 f860 	bl	8001cb2 <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    
     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681a      	ldr	r2, [r3, #0]
 8001bf6:	f241 0314 	movw	r3, #4116	; 0x1014
 8001bfa:	4413      	add	r3, r2
 8001bfc:	2240      	movs	r2, #64	; 0x40
 8001bfe:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2201      	movs	r2, #1
 8001c04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001c10:	e01b      	b.n	8001c4a <HAL_ETH_IRQHandler+0x7a>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681a      	ldr	r2, [r3, #0]
 8001c16:	f241 0314 	movw	r3, #4116	; 0x1014
 8001c1a:	4413      	add	r3, r2
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f003 0301 	and.w	r3, r3, #1
 8001c22:	2b01      	cmp	r3, #1
 8001c24:	d111      	bne.n	8001c4a <HAL_ETH_IRQHandler+0x7a>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8001c26:	6878      	ldr	r0, [r7, #4]
 8001c28:	f000 f839 	bl	8001c9e <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681a      	ldr	r2, [r3, #0]
 8001c30:	f241 0314 	movw	r3, #4116	; 0x1014
 8001c34:	4413      	add	r3, r2
 8001c36:	2201      	movs	r2, #1
 8001c38:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2201      	movs	r2, #1
 8001c3e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2200      	movs	r2, #0
 8001c46:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681a      	ldr	r2, [r3, #0]
 8001c4e:	f241 0314 	movw	r3, #4116	; 0x1014
 8001c52:	4413      	add	r3, r2
 8001c54:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001c58:	601a      	str	r2, [r3, #0]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681a      	ldr	r2, [r3, #0]
 8001c5e:	f241 0314 	movw	r3, #4116	; 0x1014
 8001c62:	4413      	add	r3, r2
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c6a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001c6e:	d112      	bne.n	8001c96 <HAL_ETH_IRQHandler+0xc6>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8001c70:	6878      	ldr	r0, [r7, #4]
 8001c72:	f000 f828 	bl	8001cc6 <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681a      	ldr	r2, [r3, #0]
 8001c7a:	f241 0314 	movw	r3, #4116	; 0x1014
 8001c7e:	4413      	add	r3, r2
 8001c80:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001c84:	601a      	str	r2, [r3, #0]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2201      	movs	r2, #1
 8001c8a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2200      	movs	r2, #0
 8001c92:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 8001c96:	bf00      	nop
 8001c98:	3708      	adds	r7, #8
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}

08001c9e <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8001c9e:	b480      	push	{r7}
 8001ca0:	b083      	sub	sp, #12
 8001ca2:	af00      	add	r7, sp, #0
 8001ca4:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8001ca6:	bf00      	nop
 8001ca8:	370c      	adds	r7, #12
 8001caa:	46bd      	mov	sp, r7
 8001cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb0:	4770      	bx	lr

08001cb2 <HAL_ETH_RxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8001cb2:	b480      	push	{r7}
 8001cb4:	b083      	sub	sp, #12
 8001cb6:	af00      	add	r7, sp, #0
 8001cb8:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_RxCpltCallback could be implemented in the user file
  */ 
}
 8001cba:	bf00      	nop
 8001cbc:	370c      	adds	r7, #12
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr

08001cc6 <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8001cc6:	b480      	push	{r7}
 8001cc8:	b083      	sub	sp, #12
 8001cca:	af00      	add	r7, sp, #0
 8001ccc:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */ 
}
 8001cce:	bf00      	nop
 8001cd0:	370c      	adds	r7, #12
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd8:	4770      	bx	lr

08001cda <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8001cda:	b580      	push	{r7, lr}
 8001cdc:	b086      	sub	sp, #24
 8001cde:	af00      	add	r7, sp, #0
 8001ce0:	60f8      	str	r0, [r7, #12]
 8001ce2:	460b      	mov	r3, r1
 8001ce4:	607a      	str	r2, [r7, #4]
 8001ce6:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 8001ce8:	2300      	movs	r3, #0
 8001cea:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8001cec:	2300      	movs	r3, #0
 8001cee:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001cf6:	b2db      	uxtb	r3, r3
 8001cf8:	2b82      	cmp	r3, #130	; 0x82
 8001cfa:	d101      	bne.n	8001d00 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8001cfc:	2302      	movs	r3, #2
 8001cfe:	e050      	b.n	8001da2 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	2282      	movs	r2, #130	; 0x82
 8001d04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	691b      	ldr	r3, [r3, #16]
 8001d0e:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	f003 031c 	and.w	r3, r3, #28
 8001d16:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	8a1b      	ldrh	r3, [r3, #16]
 8001d1c:	02db      	lsls	r3, r3, #11
 8001d1e:	b29b      	uxth	r3, r3
 8001d20:	697a      	ldr	r2, [r7, #20]
 8001d22:	4313      	orrs	r3, r2
 8001d24:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8001d26:	897b      	ldrh	r3, [r7, #10]
 8001d28:	019b      	lsls	r3, r3, #6
 8001d2a:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001d2e:	697a      	ldr	r2, [r7, #20]
 8001d30:	4313      	orrs	r3, r2
 8001d32:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 8001d34:	697b      	ldr	r3, [r7, #20]
 8001d36:	f023 0302 	bic.w	r3, r3, #2
 8001d3a:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	f043 0301 	orr.w	r3, r3, #1
 8001d42:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	697a      	ldr	r2, [r7, #20]
 8001d4a:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001d4c:	f7ff f84c 	bl	8000de8 <HAL_GetTick>
 8001d50:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001d52:	e015      	b.n	8001d80 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8001d54:	f7ff f848 	bl	8000de8 <HAL_GetTick>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	693b      	ldr	r3, [r7, #16]
 8001d5c:	1ad3      	subs	r3, r2, r3
 8001d5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d62:	d309      	bcc.n	8001d78 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	2201      	movs	r2, #1
 8001d68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	2200      	movs	r2, #0
 8001d70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001d74:	2303      	movs	r3, #3
 8001d76:	e014      	b.n	8001da2 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	691b      	ldr	r3, [r3, #16]
 8001d7e:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	f003 0301 	and.w	r3, r3, #1
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d1e4      	bne.n	8001d54 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	695b      	ldr	r3, [r3, #20]
 8001d90:	b29b      	uxth	r3, r3
 8001d92:	461a      	mov	r2, r3
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	2201      	movs	r2, #1
 8001d9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001da0:	2300      	movs	r3, #0
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	3718      	adds	r7, #24
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}

08001daa <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8001daa:	b580      	push	{r7, lr}
 8001dac:	b086      	sub	sp, #24
 8001dae:	af00      	add	r7, sp, #0
 8001db0:	60f8      	str	r0, [r7, #12]
 8001db2:	460b      	mov	r3, r1
 8001db4:	607a      	str	r2, [r7, #4]
 8001db6:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 8001db8:	2300      	movs	r3, #0
 8001dba:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001dc6:	b2db      	uxtb	r3, r3
 8001dc8:	2b42      	cmp	r3, #66	; 0x42
 8001dca:	d101      	bne.n	8001dd0 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8001dcc:	2302      	movs	r3, #2
 8001dce:	e04e      	b.n	8001e6e <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	2242      	movs	r2, #66	; 0x42
 8001dd4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	691b      	ldr	r3, [r3, #16]
 8001dde:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	f003 031c 	and.w	r3, r3, #28
 8001de6:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	8a1b      	ldrh	r3, [r3, #16]
 8001dec:	02db      	lsls	r3, r3, #11
 8001dee:	b29b      	uxth	r3, r3
 8001df0:	697a      	ldr	r2, [r7, #20]
 8001df2:	4313      	orrs	r3, r2
 8001df4:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8001df6:	897b      	ldrh	r3, [r7, #10]
 8001df8:	019b      	lsls	r3, r3, #6
 8001dfa:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001dfe:	697a      	ldr	r2, [r7, #20]
 8001e00:	4313      	orrs	r3, r2
 8001e02:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 8001e04:	697b      	ldr	r3, [r7, #20]
 8001e06:	f043 0302 	orr.w	r3, r3, #2
 8001e0a:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 8001e0c:	697b      	ldr	r3, [r7, #20]
 8001e0e:	f043 0301 	orr.w	r3, r3, #1
 8001e12:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	b29a      	uxth	r2, r3
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	697a      	ldr	r2, [r7, #20]
 8001e24:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001e26:	f7fe ffdf 	bl	8000de8 <HAL_GetTick>
 8001e2a:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001e2c:	e015      	b.n	8001e5a <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8001e2e:	f7fe ffdb 	bl	8000de8 <HAL_GetTick>
 8001e32:	4602      	mov	r2, r0
 8001e34:	693b      	ldr	r3, [r7, #16]
 8001e36:	1ad3      	subs	r3, r2, r3
 8001e38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e3c:	d309      	bcc.n	8001e52 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	2201      	movs	r2, #1
 8001e42:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	2200      	movs	r2, #0
 8001e4a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001e4e:	2303      	movs	r3, #3
 8001e50:	e00d      	b.n	8001e6e <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	691b      	ldr	r3, [r3, #16]
 8001e58:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001e5a:	697b      	ldr	r3, [r7, #20]
 8001e5c:	f003 0301 	and.w	r3, r3, #1
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d1e4      	bne.n	8001e2e <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	2201      	movs	r2, #1
 8001e68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8001e6c:	2300      	movs	r3, #0
}
 8001e6e:	4618      	mov	r0, r3
 8001e70:	3718      	adds	r7, #24
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}

08001e76 <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8001e76:	b580      	push	{r7, lr}
 8001e78:	b082      	sub	sp, #8
 8001e7a:	af00      	add	r7, sp, #0
 8001e7c:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001e84:	2b01      	cmp	r3, #1
 8001e86:	d101      	bne.n	8001e8c <HAL_ETH_Start+0x16>
 8001e88:	2302      	movs	r3, #2
 8001e8a:	e01f      	b.n	8001ecc <HAL_ETH_Start+0x56>
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2201      	movs	r2, #1
 8001e90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2202      	movs	r2, #2
 8001e98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8001e9c:	6878      	ldr	r0, [r7, #4]
 8001e9e:	f000 fb45 	bl	800252c <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8001ea2:	6878      	ldr	r0, [r7, #4]
 8001ea4:	f000 fb7c 	bl	80025a0 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8001ea8:	6878      	ldr	r0, [r7, #4]
 8001eaa:	f000 fc13 	bl	80026d4 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8001eae:	6878      	ldr	r0, [r7, #4]
 8001eb0:	f000 fbb0 	bl	8002614 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8001eb4:	6878      	ldr	r0, [r7, #4]
 8001eb6:	f000 fbdd 	bl	8002674 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2201      	movs	r2, #1
 8001ebe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001eca:	2300      	movs	r3, #0
}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	3708      	adds	r7, #8
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}

08001ed4 <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b082      	sub	sp, #8
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001ee2:	2b01      	cmp	r3, #1
 8001ee4:	d101      	bne.n	8001eea <HAL_ETH_Stop+0x16>
 8001ee6:	2302      	movs	r3, #2
 8001ee8:	e01f      	b.n	8001f2a <HAL_ETH_Stop+0x56>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2201      	movs	r2, #1
 8001eee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2202      	movs	r2, #2
 8001ef6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 8001efa:	6878      	ldr	r0, [r7, #4]
 8001efc:	f000 fba2 	bl	8002644 <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 8001f00:	6878      	ldr	r0, [r7, #4]
 8001f02:	f000 fbcf 	bl	80026a4 <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 8001f06:	6878      	ldr	r0, [r7, #4]
 8001f08:	f000 fb67 	bl	80025da <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8001f0c:	6878      	ldr	r0, [r7, #4]
 8001f0e:	f000 fbe1 	bl	80026d4 <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 8001f12:	6878      	ldr	r0, [r7, #4]
 8001f14:	f000 fb27 	bl	8002566 <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2200      	movs	r2, #0
 8001f24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001f28:	2300      	movs	r3, #0
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	3708      	adds	r7, #8
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}
	...

08001f34 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b084      	sub	sp, #16
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
 8001f3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001f48:	2b01      	cmp	r3, #1
 8001f4a:	d101      	bne.n	8001f50 <HAL_ETH_ConfigMAC+0x1c>
 8001f4c:	2302      	movs	r3, #2
 8001f4e:	e0e4      	b.n	800211a <HAL_ETH_ConfigMAC+0x1e6>
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2201      	movs	r2, #1
 8001f54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2202      	movs	r2, #2
 8001f5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	f000 80b1 	beq.w	80020ca <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg = (heth->Instance)->MACCR;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg &= ETH_MACCR_CLEAR_MASK;
 8001f70:	68fa      	ldr	r2, [r7, #12]
 8001f72:	4b6c      	ldr	r3, [pc, #432]	; (8002124 <HAL_ETH_ConfigMAC+0x1f0>)
 8001f74:	4013      	ands	r3, r2
 8001f76:	60fb      	str	r3, [r7, #12]
    
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	685b      	ldr	r3, [r3, #4]
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8001f80:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 8001f86:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 8001f8c:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 8001f92:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 8001f98:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 8001f9e:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 8001fa4:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 8001faa:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 8001fb0:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 8001fb6:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 8001fbc:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 8001fc2:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8001fc4:	68fa      	ldr	r2, [r7, #12]
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	68fa      	ldr	r2, [r7, #12]
 8001fd0:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACCR;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001fda:	2001      	movs	r0, #1
 8001fdc:	f7fe ff10 	bl	8000e00 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg; 
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	68fa      	ldr	r2, [r7, #12]
 8001fe6:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001ff0:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 8001ff6:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 8001ffc:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 8002002:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 8002008:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 800200e:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 800201a:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 800201c:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->MACFFR;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8002026:	2001      	movs	r0, #1
 8002028:	f7fe feea 	bl	8000e00 <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	68fa      	ldr	r2, [r7, #12]
 8002032:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	683a      	ldr	r2, [r7, #0]
 800203a:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800203c:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	683a      	ldr	r2, [r7, #0]
 8002044:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002046:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg = (heth->Instance)->MACFCR;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	699b      	ldr	r3, [r3, #24]
 800204e:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8002050:	68fa      	ldr	r2, [r7, #12]
 8002052:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002056:	4013      	ands	r3, r2
 8002058:	60fb      	str	r3, [r7, #12]
     
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800205e:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8002064:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 800206a:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 8002070:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 8002076:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 800207c:	4313      	orrs	r3, r2
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 800207e:	68fa      	ldr	r2, [r7, #12]
 8002080:	4313      	orrs	r3, r2
 8002082:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	68fa      	ldr	r2, [r7, #12]
 800208a:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->MACFCR;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	699b      	ldr	r3, [r3, #24]
 8002092:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8002094:	2001      	movs	r0, #1
 8002096:	f7fe feb3 	bl	8000e00 <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	68fa      	ldr	r2, [r7, #12]
 80020a0:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	430a      	orrs	r2, r1
 80020b0:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg = (heth->Instance)->MACVLANTR;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	69db      	ldr	r3, [r3, #28]
 80020b8:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 80020ba:	2001      	movs	r0, #1
 80020bc:	f7fe fea0 	bl	8000e00 <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	68fa      	ldr	r2, [r7, #12]
 80020c6:	61da      	str	r2, [r3, #28]
 80020c8:	e01e      	b.n	8002108 <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg = (heth->Instance)->MACCR;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg &= ~((uint32_t)0x00004800);
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80020d8:	60fb      	str	r3, [r7, #12]
    
    tmpreg |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	689a      	ldr	r2, [r3, #8]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	68db      	ldr	r3, [r3, #12]
 80020e2:	4313      	orrs	r3, r2
 80020e4:	68fa      	ldr	r2, [r7, #12]
 80020e6:	4313      	orrs	r3, r2
 80020e8:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	68fa      	ldr	r2, [r7, #12]
 80020f0:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACCR;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80020fa:	2001      	movs	r0, #1
 80020fc:	f7fe fe80 	bl	8000e00 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	68fa      	ldr	r2, [r7, #12]
 8002106:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2201      	movs	r2, #1
 800210c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2200      	movs	r2, #0
 8002114:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 8002118:	2300      	movs	r3, #0
}
 800211a:	4618      	mov	r0, r3
 800211c:	3710      	adds	r7, #16
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}
 8002122:	bf00      	nop
 8002124:	ff20810f 	.word	0xff20810f

08002128 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b0b0      	sub	sp, #192	; 0xc0
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
 8002130:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 8002132:	2300      	movs	r3, #0
 8002134:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d007      	beq.n	800214e <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002144:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800214c:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 800214e:	2300      	movs	r3, #0
 8002150:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8002152:	2300      	movs	r3, #0
 8002154:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8002156:	2300      	movs	r3, #0
 8002158:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 800215a:	2300      	movs	r3, #0
 800215c:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 800215e:	2300      	movs	r3, #0
 8002160:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8002162:	2300      	movs	r3, #0
 8002164:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	69db      	ldr	r3, [r3, #28]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d103      	bne.n	8002176 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 800216e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002172:	663b      	str	r3, [r7, #96]	; 0x60
 8002174:	e001      	b.n	800217a <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8002176:	2300      	movs	r3, #0
 8002178:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 800217a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800217e:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8002180:	2300      	movs	r3, #0
 8002182:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002184:	2300      	movs	r3, #0
 8002186:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8002188:	2300      	movs	r3, #0
 800218a:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 800218c:	2300      	movs	r3, #0
 800218e:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8002190:	2300      	movs	r3, #0
 8002192:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8002194:	2340      	movs	r3, #64	; 0x40
 8002196:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8002198:	2300      	movs	r3, #0
 800219a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 800219e:	2300      	movs	r3, #0
 80021a0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 80021a4:	2300      	movs	r3, #0
 80021a6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 80021aa:	2300      	movs	r3, #0
 80021ac:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 80021b0:	2300      	movs	r3, #0
 80021b2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 80021b6:	2300      	movs	r3, #0
 80021b8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 80021bc:	2300      	movs	r3, #0
 80021be:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 80021c2:	2300      	movs	r3, #0
 80021c4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 80021c8:	2380      	movs	r3, #128	; 0x80
 80021ca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80021ce:	2300      	movs	r3, #0
 80021d0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 80021d4:	2300      	movs	r3, #0
 80021d6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 80021da:	2300      	movs	r3, #0
 80021dc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 80021e0:	2300      	movs	r3, #0
 80021e2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 80021e6:	2300      	movs	r3, #0
 80021e8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 80021ec:	2300      	movs	r3, #0
 80021ee:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 80021fc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002200:	4bab      	ldr	r3, [pc, #684]	; (80024b0 <ETH_MACDMAConfig+0x388>)
 8002202:	4013      	ands	r3, r2
 8002204:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8002208:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 800220a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 800220c:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 800220e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8002210:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8002212:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8002214:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 800221a:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 800221c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 800221e:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8002220:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8002222:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8002228:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 800222a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 800222c:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 800222e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8002230:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8002232:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8002234:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8002236:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8002238:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 800223a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 800223c:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 800223e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002242:	4313      	orrs	r3, r2
 8002244:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002250:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800225c:	2001      	movs	r0, #1
 800225e:	f7fe fdcf 	bl	8000e00 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800226a:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800226c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 800226e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002270:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8002272:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8002274:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8002276:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 800227a:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 800227c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8002280:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8002282:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8002286:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8002288:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 800228c:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8002290:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8002298:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800229a:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80022a6:	2001      	movs	r0, #1
 80022a8:	f7fe fdaa 	bl	8000e00 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80022b4:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80022be:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80022c8:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	699b      	ldr	r3, [r3, #24]
 80022d0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 80022d4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80022d8:	f64f 7341 	movw	r3, #65345	; 0xff41
 80022dc:	4013      	ands	r3, r2
 80022de:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 80022e2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80022e6:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 80022e8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 80022ec:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 80022ee:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 80022f2:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 80022f4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 80022f8:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 80022fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 80022fe:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8002300:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8002304:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8002306:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800230a:	4313      	orrs	r3, r2
 800230c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002318:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	699b      	ldr	r3, [r3, #24]
 8002320:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8002324:	2001      	movs	r0, #1
 8002326:	f7fe fd6b 	bl	8000e00 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002332:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8002334:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8002338:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	430a      	orrs	r2, r1
 8002342:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	69db      	ldr	r3, [r3, #28]
 800234a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800234e:	2001      	movs	r0, #1
 8002350:	f7fe fd56 	bl	8000e00 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800235c:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 800235e:	2300      	movs	r3, #0
 8002360:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8002362:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002366:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8002368:	2300      	movs	r3, #0
 800236a:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 800236c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002370:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002372:	2300      	movs	r3, #0
 8002374:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8002376:	2300      	movs	r3, #0
 8002378:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 800237a:	2300      	movs	r3, #0
 800237c:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800237e:	2300      	movs	r3, #0
 8002380:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8002382:	2304      	movs	r3, #4
 8002384:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8002386:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800238a:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 800238c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002390:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002392:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002396:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002398:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800239c:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 800239e:	2380      	movs	r3, #128	; 0x80
 80023a0:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 80023a2:	2300      	movs	r3, #0
 80023a4:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80023a6:	2300      	movs	r3, #0
 80023a8:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681a      	ldr	r2, [r3, #0]
 80023ae:	f241 0318 	movw	r3, #4120	; 0x1018
 80023b2:	4413      	add	r3, r2
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 80023ba:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80023be:	4b3d      	ldr	r3, [pc, #244]	; (80024b4 <ETH_MACDMAConfig+0x38c>)
 80023c0:	4013      	ands	r3, r2
 80023c2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80023c6:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 80023c8:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80023ca:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 80023cc:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 80023ce:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 80023d0:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 80023d2:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 80023d4:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 80023d6:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 80023d8:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 80023da:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 80023dc:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 80023de:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 80023e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 80023e2:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 80023e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 80023e6:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80023e8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80023ec:	4313      	orrs	r3, r2
 80023ee:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681a      	ldr	r2, [r3, #0]
 80023f6:	f241 0318 	movw	r3, #4120	; 0x1018
 80023fa:	4413      	add	r3, r2
 80023fc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002400:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681a      	ldr	r2, [r3, #0]
 8002406:	f241 0318 	movw	r3, #4120	; 0x1018
 800240a:	4413      	add	r3, r2
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002412:	2001      	movs	r0, #1
 8002414:	f7fe fcf4 	bl	8000e00 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681a      	ldr	r2, [r3, #0]
 800241c:	f241 0318 	movw	r3, #4120	; 0x1018
 8002420:	4413      	add	r3, r2
 8002422:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002426:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002428:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 800242a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 800242c:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 800242e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8002430:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8002432:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8002434:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8002436:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8002438:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 800243a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800243c:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 800243e:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8002440:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 8002442:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800244c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002450:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8002460:	2001      	movs	r0, #1
 8002462:	f7fe fccd 	bl	8000e00 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800246e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002472:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	699b      	ldr	r3, [r3, #24]
 8002478:	2b01      	cmp	r3, #1
 800247a:	d10d      	bne.n	8002498 <ETH_MACDMAConfig+0x370>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681a      	ldr	r2, [r3, #0]
 8002480:	f241 031c 	movw	r3, #4124	; 0x101c
 8002484:	4413      	add	r3, r2
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	687a      	ldr	r2, [r7, #4]
 800248a:	6811      	ldr	r1, [r2, #0]
 800248c:	4a0a      	ldr	r2, [pc, #40]	; (80024b8 <ETH_MACDMAConfig+0x390>)
 800248e:	431a      	orrs	r2, r3
 8002490:	f241 031c 	movw	r3, #4124	; 0x101c
 8002494:	440b      	add	r3, r1
 8002496:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	695b      	ldr	r3, [r3, #20]
 800249c:	461a      	mov	r2, r3
 800249e:	2100      	movs	r1, #0
 80024a0:	6878      	ldr	r0, [r7, #4]
 80024a2:	f000 f80b 	bl	80024bc <ETH_MACAddressConfig>
}
 80024a6:	bf00      	nop
 80024a8:	37c0      	adds	r7, #192	; 0xc0
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	bf00      	nop
 80024b0:	ff20810f 	.word	0xff20810f
 80024b4:	f8de3f23 	.word	0xf8de3f23
 80024b8:	00010040 	.word	0x00010040

080024bc <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80024bc:	b480      	push	{r7}
 80024be:	b087      	sub	sp, #28
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	60f8      	str	r0, [r7, #12]
 80024c4:	60b9      	str	r1, [r7, #8]
 80024c6:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	3305      	adds	r3, #5
 80024cc:	781b      	ldrb	r3, [r3, #0]
 80024ce:	021b      	lsls	r3, r3, #8
 80024d0:	687a      	ldr	r2, [r7, #4]
 80024d2:	3204      	adds	r2, #4
 80024d4:	7812      	ldrb	r2, [r2, #0]
 80024d6:	4313      	orrs	r3, r2
 80024d8:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 80024da:	68ba      	ldr	r2, [r7, #8]
 80024dc:	4b11      	ldr	r3, [pc, #68]	; (8002524 <ETH_MACAddressConfig+0x68>)
 80024de:	4413      	add	r3, r2
 80024e0:	461a      	mov	r2, r3
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	3303      	adds	r3, #3
 80024ea:	781b      	ldrb	r3, [r3, #0]
 80024ec:	061a      	lsls	r2, r3, #24
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	3302      	adds	r3, #2
 80024f2:	781b      	ldrb	r3, [r3, #0]
 80024f4:	041b      	lsls	r3, r3, #16
 80024f6:	431a      	orrs	r2, r3
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	3301      	adds	r3, #1
 80024fc:	781b      	ldrb	r3, [r3, #0]
 80024fe:	021b      	lsls	r3, r3, #8
 8002500:	4313      	orrs	r3, r2
 8002502:	687a      	ldr	r2, [r7, #4]
 8002504:	7812      	ldrb	r2, [r2, #0]
 8002506:	4313      	orrs	r3, r2
 8002508:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 800250a:	68ba      	ldr	r2, [r7, #8]
 800250c:	4b06      	ldr	r3, [pc, #24]	; (8002528 <ETH_MACAddressConfig+0x6c>)
 800250e:	4413      	add	r3, r2
 8002510:	461a      	mov	r2, r3
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	6013      	str	r3, [r2, #0]
}
 8002516:	bf00      	nop
 8002518:	371c      	adds	r7, #28
 800251a:	46bd      	mov	sp, r7
 800251c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002520:	4770      	bx	lr
 8002522:	bf00      	nop
 8002524:	40028040 	.word	0x40028040
 8002528:	40028044 	.word	0x40028044

0800252c <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 800252c:	b580      	push	{r7, lr}
 800252e:	b084      	sub	sp, #16
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002534:	2300      	movs	r3, #0
 8002536:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	681a      	ldr	r2, [r3, #0]
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f042 0208 	orr.w	r2, r2, #8
 8002546:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002550:	2001      	movs	r0, #1
 8002552:	f7fe fc55 	bl	8000e00 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	68fa      	ldr	r2, [r7, #12]
 800255c:	601a      	str	r2, [r3, #0]
}
 800255e:	bf00      	nop
 8002560:	3710      	adds	r7, #16
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}

08002566 <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8002566:	b580      	push	{r7, lr}
 8002568:	b084      	sub	sp, #16
 800256a:	af00      	add	r7, sp, #0
 800256c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 800256e:	2300      	movs	r3, #0
 8002570:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	681a      	ldr	r2, [r3, #0]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f022 0208 	bic.w	r2, r2, #8
 8002580:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800258a:	2001      	movs	r0, #1
 800258c:	f7fe fc38 	bl	8000e00 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	68fa      	ldr	r2, [r7, #12]
 8002596:	601a      	str	r2, [r3, #0]
}
 8002598:	bf00      	nop
 800259a:	3710      	adds	r7, #16
 800259c:	46bd      	mov	sp, r7
 800259e:	bd80      	pop	{r7, pc}

080025a0 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b084      	sub	sp, #16
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80025a8:	2300      	movs	r3, #0
 80025aa:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	681a      	ldr	r2, [r3, #0]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f042 0204 	orr.w	r2, r2, #4
 80025ba:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80025c4:	2001      	movs	r0, #1
 80025c6:	f7fe fc1b 	bl	8000e00 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	68fa      	ldr	r2, [r7, #12]
 80025d0:	601a      	str	r2, [r3, #0]
}
 80025d2:	bf00      	nop
 80025d4:	3710      	adds	r7, #16
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}

080025da <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 80025da:	b580      	push	{r7, lr}
 80025dc:	b084      	sub	sp, #16
 80025de:	af00      	add	r7, sp, #0
 80025e0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80025e2:	2300      	movs	r3, #0
 80025e4:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	681a      	ldr	r2, [r3, #0]
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f022 0204 	bic.w	r2, r2, #4
 80025f4:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80025fe:	2001      	movs	r0, #1
 8002600:	f7fe fbfe 	bl	8000e00 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	68fa      	ldr	r2, [r7, #12]
 800260a:	601a      	str	r2, [r3, #0]
}
 800260c:	bf00      	nop
 800260e:	3710      	adds	r7, #16
 8002610:	46bd      	mov	sp, r7
 8002612:	bd80      	pop	{r7, pc}

08002614 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8002614:	b480      	push	{r7}
 8002616:	b083      	sub	sp, #12
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681a      	ldr	r2, [r3, #0]
 8002620:	f241 0318 	movw	r3, #4120	; 0x1018
 8002624:	4413      	add	r3, r2
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	687a      	ldr	r2, [r7, #4]
 800262a:	6811      	ldr	r1, [r2, #0]
 800262c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002630:	f241 0318 	movw	r3, #4120	; 0x1018
 8002634:	440b      	add	r3, r1
 8002636:	601a      	str	r2, [r3, #0]
}
 8002638:	bf00      	nop
 800263a:	370c      	adds	r7, #12
 800263c:	46bd      	mov	sp, r7
 800263e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002642:	4770      	bx	lr

08002644 <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8002644:	b480      	push	{r7}
 8002646:	b083      	sub	sp, #12
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681a      	ldr	r2, [r3, #0]
 8002650:	f241 0318 	movw	r3, #4120	; 0x1018
 8002654:	4413      	add	r3, r2
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	687a      	ldr	r2, [r7, #4]
 800265a:	6811      	ldr	r1, [r2, #0]
 800265c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002660:	f241 0318 	movw	r3, #4120	; 0x1018
 8002664:	440b      	add	r3, r1
 8002666:	601a      	str	r2, [r3, #0]
}
 8002668:	bf00      	nop
 800266a:	370c      	adds	r7, #12
 800266c:	46bd      	mov	sp, r7
 800266e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002672:	4770      	bx	lr

08002674 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8002674:	b480      	push	{r7}
 8002676:	b083      	sub	sp, #12
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681a      	ldr	r2, [r3, #0]
 8002680:	f241 0318 	movw	r3, #4120	; 0x1018
 8002684:	4413      	add	r3, r2
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	687a      	ldr	r2, [r7, #4]
 800268a:	6811      	ldr	r1, [r2, #0]
 800268c:	f043 0202 	orr.w	r2, r3, #2
 8002690:	f241 0318 	movw	r3, #4120	; 0x1018
 8002694:	440b      	add	r3, r1
 8002696:	601a      	str	r2, [r3, #0]
}
 8002698:	bf00      	nop
 800269a:	370c      	adds	r7, #12
 800269c:	46bd      	mov	sp, r7
 800269e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a2:	4770      	bx	lr

080026a4 <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 80026a4:	b480      	push	{r7}
 80026a6:	b083      	sub	sp, #12
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681a      	ldr	r2, [r3, #0]
 80026b0:	f241 0318 	movw	r3, #4120	; 0x1018
 80026b4:	4413      	add	r3, r2
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	687a      	ldr	r2, [r7, #4]
 80026ba:	6811      	ldr	r1, [r2, #0]
 80026bc:	f023 0202 	bic.w	r2, r3, #2
 80026c0:	f241 0318 	movw	r3, #4120	; 0x1018
 80026c4:	440b      	add	r3, r1
 80026c6:	601a      	str	r2, [r3, #0]
}
 80026c8:	bf00      	nop
 80026ca:	370c      	adds	r7, #12
 80026cc:	46bd      	mov	sp, r7
 80026ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d2:	4770      	bx	lr

080026d4 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b084      	sub	sp, #16
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80026dc:	2300      	movs	r3, #0
 80026de:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681a      	ldr	r2, [r3, #0]
 80026e4:	f241 0318 	movw	r3, #4120	; 0x1018
 80026e8:	4413      	add	r3, r2
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	687a      	ldr	r2, [r7, #4]
 80026ee:	6811      	ldr	r1, [r2, #0]
 80026f0:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80026f4:	f241 0318 	movw	r3, #4120	; 0x1018
 80026f8:	440b      	add	r3, r1
 80026fa:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681a      	ldr	r2, [r3, #0]
 8002700:	f241 0318 	movw	r3, #4120	; 0x1018
 8002704:	4413      	add	r3, r2
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800270a:	2001      	movs	r0, #1
 800270c:	f7fe fb78 	bl	8000e00 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6819      	ldr	r1, [r3, #0]
 8002714:	68fa      	ldr	r2, [r7, #12]
 8002716:	f241 0318 	movw	r3, #4120	; 0x1018
 800271a:	440b      	add	r3, r1
 800271c:	601a      	str	r2, [r3, #0]
}
 800271e:	bf00      	nop
 8002720:	3710      	adds	r7, #16
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}
	...

08002728 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002728:	b480      	push	{r7}
 800272a:	b089      	sub	sp, #36	; 0x24
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
 8002730:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002732:	2300      	movs	r3, #0
 8002734:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002736:	2300      	movs	r3, #0
 8002738:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800273a:	2300      	movs	r3, #0
 800273c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800273e:	2300      	movs	r3, #0
 8002740:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002742:	2300      	movs	r3, #0
 8002744:	61fb      	str	r3, [r7, #28]
 8002746:	e175      	b.n	8002a34 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002748:	2201      	movs	r2, #1
 800274a:	69fb      	ldr	r3, [r7, #28]
 800274c:	fa02 f303 	lsl.w	r3, r2, r3
 8002750:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	697a      	ldr	r2, [r7, #20]
 8002758:	4013      	ands	r3, r2
 800275a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800275c:	693a      	ldr	r2, [r7, #16]
 800275e:	697b      	ldr	r3, [r7, #20]
 8002760:	429a      	cmp	r2, r3
 8002762:	f040 8164 	bne.w	8002a2e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	2b01      	cmp	r3, #1
 800276c:	d00b      	beq.n	8002786 <HAL_GPIO_Init+0x5e>
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	2b02      	cmp	r3, #2
 8002774:	d007      	beq.n	8002786 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800277a:	2b11      	cmp	r3, #17
 800277c:	d003      	beq.n	8002786 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	2b12      	cmp	r3, #18
 8002784:	d130      	bne.n	80027e8 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	689b      	ldr	r3, [r3, #8]
 800278a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800278c:	69fb      	ldr	r3, [r7, #28]
 800278e:	005b      	lsls	r3, r3, #1
 8002790:	2203      	movs	r2, #3
 8002792:	fa02 f303 	lsl.w	r3, r2, r3
 8002796:	43db      	mvns	r3, r3
 8002798:	69ba      	ldr	r2, [r7, #24]
 800279a:	4013      	ands	r3, r2
 800279c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	68da      	ldr	r2, [r3, #12]
 80027a2:	69fb      	ldr	r3, [r7, #28]
 80027a4:	005b      	lsls	r3, r3, #1
 80027a6:	fa02 f303 	lsl.w	r3, r2, r3
 80027aa:	69ba      	ldr	r2, [r7, #24]
 80027ac:	4313      	orrs	r3, r2
 80027ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	69ba      	ldr	r2, [r7, #24]
 80027b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80027bc:	2201      	movs	r2, #1
 80027be:	69fb      	ldr	r3, [r7, #28]
 80027c0:	fa02 f303 	lsl.w	r3, r2, r3
 80027c4:	43db      	mvns	r3, r3
 80027c6:	69ba      	ldr	r2, [r7, #24]
 80027c8:	4013      	ands	r3, r2
 80027ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	091b      	lsrs	r3, r3, #4
 80027d2:	f003 0201 	and.w	r2, r3, #1
 80027d6:	69fb      	ldr	r3, [r7, #28]
 80027d8:	fa02 f303 	lsl.w	r3, r2, r3
 80027dc:	69ba      	ldr	r2, [r7, #24]
 80027de:	4313      	orrs	r3, r2
 80027e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	69ba      	ldr	r2, [r7, #24]
 80027e6:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	68db      	ldr	r3, [r3, #12]
 80027ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80027ee:	69fb      	ldr	r3, [r7, #28]
 80027f0:	005b      	lsls	r3, r3, #1
 80027f2:	2203      	movs	r2, #3
 80027f4:	fa02 f303 	lsl.w	r3, r2, r3
 80027f8:	43db      	mvns	r3, r3
 80027fa:	69ba      	ldr	r2, [r7, #24]
 80027fc:	4013      	ands	r3, r2
 80027fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	689a      	ldr	r2, [r3, #8]
 8002804:	69fb      	ldr	r3, [r7, #28]
 8002806:	005b      	lsls	r3, r3, #1
 8002808:	fa02 f303 	lsl.w	r3, r2, r3
 800280c:	69ba      	ldr	r2, [r7, #24]
 800280e:	4313      	orrs	r3, r2
 8002810:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	69ba      	ldr	r2, [r7, #24]
 8002816:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	2b02      	cmp	r3, #2
 800281e:	d003      	beq.n	8002828 <HAL_GPIO_Init+0x100>
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	2b12      	cmp	r3, #18
 8002826:	d123      	bne.n	8002870 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002828:	69fb      	ldr	r3, [r7, #28]
 800282a:	08da      	lsrs	r2, r3, #3
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	3208      	adds	r2, #8
 8002830:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002834:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002836:	69fb      	ldr	r3, [r7, #28]
 8002838:	f003 0307 	and.w	r3, r3, #7
 800283c:	009b      	lsls	r3, r3, #2
 800283e:	220f      	movs	r2, #15
 8002840:	fa02 f303 	lsl.w	r3, r2, r3
 8002844:	43db      	mvns	r3, r3
 8002846:	69ba      	ldr	r2, [r7, #24]
 8002848:	4013      	ands	r3, r2
 800284a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	691a      	ldr	r2, [r3, #16]
 8002850:	69fb      	ldr	r3, [r7, #28]
 8002852:	f003 0307 	and.w	r3, r3, #7
 8002856:	009b      	lsls	r3, r3, #2
 8002858:	fa02 f303 	lsl.w	r3, r2, r3
 800285c:	69ba      	ldr	r2, [r7, #24]
 800285e:	4313      	orrs	r3, r2
 8002860:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002862:	69fb      	ldr	r3, [r7, #28]
 8002864:	08da      	lsrs	r2, r3, #3
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	3208      	adds	r2, #8
 800286a:	69b9      	ldr	r1, [r7, #24]
 800286c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002876:	69fb      	ldr	r3, [r7, #28]
 8002878:	005b      	lsls	r3, r3, #1
 800287a:	2203      	movs	r2, #3
 800287c:	fa02 f303 	lsl.w	r3, r2, r3
 8002880:	43db      	mvns	r3, r3
 8002882:	69ba      	ldr	r2, [r7, #24]
 8002884:	4013      	ands	r3, r2
 8002886:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	f003 0203 	and.w	r2, r3, #3
 8002890:	69fb      	ldr	r3, [r7, #28]
 8002892:	005b      	lsls	r3, r3, #1
 8002894:	fa02 f303 	lsl.w	r3, r2, r3
 8002898:	69ba      	ldr	r2, [r7, #24]
 800289a:	4313      	orrs	r3, r2
 800289c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	69ba      	ldr	r2, [r7, #24]
 80028a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	f000 80be 	beq.w	8002a2e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028b2:	4b65      	ldr	r3, [pc, #404]	; (8002a48 <HAL_GPIO_Init+0x320>)
 80028b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028b6:	4a64      	ldr	r2, [pc, #400]	; (8002a48 <HAL_GPIO_Init+0x320>)
 80028b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028bc:	6453      	str	r3, [r2, #68]	; 0x44
 80028be:	4b62      	ldr	r3, [pc, #392]	; (8002a48 <HAL_GPIO_Init+0x320>)
 80028c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028c6:	60fb      	str	r3, [r7, #12]
 80028c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80028ca:	4a60      	ldr	r2, [pc, #384]	; (8002a4c <HAL_GPIO_Init+0x324>)
 80028cc:	69fb      	ldr	r3, [r7, #28]
 80028ce:	089b      	lsrs	r3, r3, #2
 80028d0:	3302      	adds	r3, #2
 80028d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80028d8:	69fb      	ldr	r3, [r7, #28]
 80028da:	f003 0303 	and.w	r3, r3, #3
 80028de:	009b      	lsls	r3, r3, #2
 80028e0:	220f      	movs	r2, #15
 80028e2:	fa02 f303 	lsl.w	r3, r2, r3
 80028e6:	43db      	mvns	r3, r3
 80028e8:	69ba      	ldr	r2, [r7, #24]
 80028ea:	4013      	ands	r3, r2
 80028ec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	4a57      	ldr	r2, [pc, #348]	; (8002a50 <HAL_GPIO_Init+0x328>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d037      	beq.n	8002966 <HAL_GPIO_Init+0x23e>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	4a56      	ldr	r2, [pc, #344]	; (8002a54 <HAL_GPIO_Init+0x32c>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d031      	beq.n	8002962 <HAL_GPIO_Init+0x23a>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	4a55      	ldr	r2, [pc, #340]	; (8002a58 <HAL_GPIO_Init+0x330>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d02b      	beq.n	800295e <HAL_GPIO_Init+0x236>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	4a54      	ldr	r2, [pc, #336]	; (8002a5c <HAL_GPIO_Init+0x334>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d025      	beq.n	800295a <HAL_GPIO_Init+0x232>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	4a53      	ldr	r2, [pc, #332]	; (8002a60 <HAL_GPIO_Init+0x338>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d01f      	beq.n	8002956 <HAL_GPIO_Init+0x22e>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	4a52      	ldr	r2, [pc, #328]	; (8002a64 <HAL_GPIO_Init+0x33c>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d019      	beq.n	8002952 <HAL_GPIO_Init+0x22a>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	4a51      	ldr	r2, [pc, #324]	; (8002a68 <HAL_GPIO_Init+0x340>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d013      	beq.n	800294e <HAL_GPIO_Init+0x226>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	4a50      	ldr	r2, [pc, #320]	; (8002a6c <HAL_GPIO_Init+0x344>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d00d      	beq.n	800294a <HAL_GPIO_Init+0x222>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	4a4f      	ldr	r2, [pc, #316]	; (8002a70 <HAL_GPIO_Init+0x348>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d007      	beq.n	8002946 <HAL_GPIO_Init+0x21e>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	4a4e      	ldr	r2, [pc, #312]	; (8002a74 <HAL_GPIO_Init+0x34c>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d101      	bne.n	8002942 <HAL_GPIO_Init+0x21a>
 800293e:	2309      	movs	r3, #9
 8002940:	e012      	b.n	8002968 <HAL_GPIO_Init+0x240>
 8002942:	230a      	movs	r3, #10
 8002944:	e010      	b.n	8002968 <HAL_GPIO_Init+0x240>
 8002946:	2308      	movs	r3, #8
 8002948:	e00e      	b.n	8002968 <HAL_GPIO_Init+0x240>
 800294a:	2307      	movs	r3, #7
 800294c:	e00c      	b.n	8002968 <HAL_GPIO_Init+0x240>
 800294e:	2306      	movs	r3, #6
 8002950:	e00a      	b.n	8002968 <HAL_GPIO_Init+0x240>
 8002952:	2305      	movs	r3, #5
 8002954:	e008      	b.n	8002968 <HAL_GPIO_Init+0x240>
 8002956:	2304      	movs	r3, #4
 8002958:	e006      	b.n	8002968 <HAL_GPIO_Init+0x240>
 800295a:	2303      	movs	r3, #3
 800295c:	e004      	b.n	8002968 <HAL_GPIO_Init+0x240>
 800295e:	2302      	movs	r3, #2
 8002960:	e002      	b.n	8002968 <HAL_GPIO_Init+0x240>
 8002962:	2301      	movs	r3, #1
 8002964:	e000      	b.n	8002968 <HAL_GPIO_Init+0x240>
 8002966:	2300      	movs	r3, #0
 8002968:	69fa      	ldr	r2, [r7, #28]
 800296a:	f002 0203 	and.w	r2, r2, #3
 800296e:	0092      	lsls	r2, r2, #2
 8002970:	4093      	lsls	r3, r2
 8002972:	69ba      	ldr	r2, [r7, #24]
 8002974:	4313      	orrs	r3, r2
 8002976:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002978:	4934      	ldr	r1, [pc, #208]	; (8002a4c <HAL_GPIO_Init+0x324>)
 800297a:	69fb      	ldr	r3, [r7, #28]
 800297c:	089b      	lsrs	r3, r3, #2
 800297e:	3302      	adds	r3, #2
 8002980:	69ba      	ldr	r2, [r7, #24]
 8002982:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002986:	4b3c      	ldr	r3, [pc, #240]	; (8002a78 <HAL_GPIO_Init+0x350>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800298c:	693b      	ldr	r3, [r7, #16]
 800298e:	43db      	mvns	r3, r3
 8002990:	69ba      	ldr	r2, [r7, #24]
 8002992:	4013      	ands	r3, r2
 8002994:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d003      	beq.n	80029aa <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80029a2:	69ba      	ldr	r2, [r7, #24]
 80029a4:	693b      	ldr	r3, [r7, #16]
 80029a6:	4313      	orrs	r3, r2
 80029a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80029aa:	4a33      	ldr	r2, [pc, #204]	; (8002a78 <HAL_GPIO_Init+0x350>)
 80029ac:	69bb      	ldr	r3, [r7, #24]
 80029ae:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80029b0:	4b31      	ldr	r3, [pc, #196]	; (8002a78 <HAL_GPIO_Init+0x350>)
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029b6:	693b      	ldr	r3, [r7, #16]
 80029b8:	43db      	mvns	r3, r3
 80029ba:	69ba      	ldr	r2, [r7, #24]
 80029bc:	4013      	ands	r3, r2
 80029be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d003      	beq.n	80029d4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80029cc:	69ba      	ldr	r2, [r7, #24]
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	4313      	orrs	r3, r2
 80029d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80029d4:	4a28      	ldr	r2, [pc, #160]	; (8002a78 <HAL_GPIO_Init+0x350>)
 80029d6:	69bb      	ldr	r3, [r7, #24]
 80029d8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80029da:	4b27      	ldr	r3, [pc, #156]	; (8002a78 <HAL_GPIO_Init+0x350>)
 80029dc:	689b      	ldr	r3, [r3, #8]
 80029de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029e0:	693b      	ldr	r3, [r7, #16]
 80029e2:	43db      	mvns	r3, r3
 80029e4:	69ba      	ldr	r2, [r7, #24]
 80029e6:	4013      	ands	r3, r2
 80029e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d003      	beq.n	80029fe <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80029f6:	69ba      	ldr	r2, [r7, #24]
 80029f8:	693b      	ldr	r3, [r7, #16]
 80029fa:	4313      	orrs	r3, r2
 80029fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80029fe:	4a1e      	ldr	r2, [pc, #120]	; (8002a78 <HAL_GPIO_Init+0x350>)
 8002a00:	69bb      	ldr	r3, [r7, #24]
 8002a02:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a04:	4b1c      	ldr	r3, [pc, #112]	; (8002a78 <HAL_GPIO_Init+0x350>)
 8002a06:	68db      	ldr	r3, [r3, #12]
 8002a08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	43db      	mvns	r3, r3
 8002a0e:	69ba      	ldr	r2, [r7, #24]
 8002a10:	4013      	ands	r3, r2
 8002a12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d003      	beq.n	8002a28 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002a20:	69ba      	ldr	r2, [r7, #24]
 8002a22:	693b      	ldr	r3, [r7, #16]
 8002a24:	4313      	orrs	r3, r2
 8002a26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a28:	4a13      	ldr	r2, [pc, #76]	; (8002a78 <HAL_GPIO_Init+0x350>)
 8002a2a:	69bb      	ldr	r3, [r7, #24]
 8002a2c:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002a2e:	69fb      	ldr	r3, [r7, #28]
 8002a30:	3301      	adds	r3, #1
 8002a32:	61fb      	str	r3, [r7, #28]
 8002a34:	69fb      	ldr	r3, [r7, #28]
 8002a36:	2b0f      	cmp	r3, #15
 8002a38:	f67f ae86 	bls.w	8002748 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002a3c:	bf00      	nop
 8002a3e:	3724      	adds	r7, #36	; 0x24
 8002a40:	46bd      	mov	sp, r7
 8002a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a46:	4770      	bx	lr
 8002a48:	40023800 	.word	0x40023800
 8002a4c:	40013800 	.word	0x40013800
 8002a50:	40020000 	.word	0x40020000
 8002a54:	40020400 	.word	0x40020400
 8002a58:	40020800 	.word	0x40020800
 8002a5c:	40020c00 	.word	0x40020c00
 8002a60:	40021000 	.word	0x40021000
 8002a64:	40021400 	.word	0x40021400
 8002a68:	40021800 	.word	0x40021800
 8002a6c:	40021c00 	.word	0x40021c00
 8002a70:	40022000 	.word	0x40022000
 8002a74:	40022400 	.word	0x40022400
 8002a78:	40013c00 	.word	0x40013c00

08002a7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b083      	sub	sp, #12
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
 8002a84:	460b      	mov	r3, r1
 8002a86:	807b      	strh	r3, [r7, #2]
 8002a88:	4613      	mov	r3, r2
 8002a8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a8c:	787b      	ldrb	r3, [r7, #1]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d003      	beq.n	8002a9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a92:	887a      	ldrh	r2, [r7, #2]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002a98:	e003      	b.n	8002aa2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002a9a:	887b      	ldrh	r3, [r7, #2]
 8002a9c:	041a      	lsls	r2, r3, #16
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	619a      	str	r2, [r3, #24]
}
 8002aa2:	bf00      	nop
 8002aa4:	370c      	adds	r7, #12
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aac:	4770      	bx	lr
	...

08002ab0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b082      	sub	sp, #8
 8002ab4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002aba:	4b23      	ldr	r3, [pc, #140]	; (8002b48 <HAL_PWREx_EnableOverDrive+0x98>)
 8002abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002abe:	4a22      	ldr	r2, [pc, #136]	; (8002b48 <HAL_PWREx_EnableOverDrive+0x98>)
 8002ac0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ac4:	6413      	str	r3, [r2, #64]	; 0x40
 8002ac6:	4b20      	ldr	r3, [pc, #128]	; (8002b48 <HAL_PWREx_EnableOverDrive+0x98>)
 8002ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ace:	603b      	str	r3, [r7, #0]
 8002ad0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002ad2:	4b1e      	ldr	r3, [pc, #120]	; (8002b4c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4a1d      	ldr	r2, [pc, #116]	; (8002b4c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002ad8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002adc:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002ade:	f7fe f983 	bl	8000de8 <HAL_GetTick>
 8002ae2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002ae4:	e009      	b.n	8002afa <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002ae6:	f7fe f97f 	bl	8000de8 <HAL_GetTick>
 8002aea:	4602      	mov	r2, r0
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	1ad3      	subs	r3, r2, r3
 8002af0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002af4:	d901      	bls.n	8002afa <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002af6:	2303      	movs	r3, #3
 8002af8:	e022      	b.n	8002b40 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002afa:	4b14      	ldr	r3, [pc, #80]	; (8002b4c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b06:	d1ee      	bne.n	8002ae6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002b08:	4b10      	ldr	r3, [pc, #64]	; (8002b4c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a0f      	ldr	r2, [pc, #60]	; (8002b4c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002b0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b12:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002b14:	f7fe f968 	bl	8000de8 <HAL_GetTick>
 8002b18:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002b1a:	e009      	b.n	8002b30 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002b1c:	f7fe f964 	bl	8000de8 <HAL_GetTick>
 8002b20:	4602      	mov	r2, r0
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	1ad3      	subs	r3, r2, r3
 8002b26:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002b2a:	d901      	bls.n	8002b30 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002b2c:	2303      	movs	r3, #3
 8002b2e:	e007      	b.n	8002b40 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002b30:	4b06      	ldr	r3, [pc, #24]	; (8002b4c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b38:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002b3c:	d1ee      	bne.n	8002b1c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002b3e:	2300      	movs	r3, #0
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	3708      	adds	r7, #8
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bd80      	pop	{r7, pc}
 8002b48:	40023800 	.word	0x40023800
 8002b4c:	40007000 	.word	0x40007000

08002b50 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b086      	sub	sp, #24
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d101      	bne.n	8002b66 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002b62:	2301      	movs	r3, #1
 8002b64:	e29b      	b.n	800309e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f003 0301 	and.w	r3, r3, #1
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	f000 8087 	beq.w	8002c82 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002b74:	4b96      	ldr	r3, [pc, #600]	; (8002dd0 <HAL_RCC_OscConfig+0x280>)
 8002b76:	689b      	ldr	r3, [r3, #8]
 8002b78:	f003 030c 	and.w	r3, r3, #12
 8002b7c:	2b04      	cmp	r3, #4
 8002b7e:	d00c      	beq.n	8002b9a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b80:	4b93      	ldr	r3, [pc, #588]	; (8002dd0 <HAL_RCC_OscConfig+0x280>)
 8002b82:	689b      	ldr	r3, [r3, #8]
 8002b84:	f003 030c 	and.w	r3, r3, #12
 8002b88:	2b08      	cmp	r3, #8
 8002b8a:	d112      	bne.n	8002bb2 <HAL_RCC_OscConfig+0x62>
 8002b8c:	4b90      	ldr	r3, [pc, #576]	; (8002dd0 <HAL_RCC_OscConfig+0x280>)
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b94:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b98:	d10b      	bne.n	8002bb2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b9a:	4b8d      	ldr	r3, [pc, #564]	; (8002dd0 <HAL_RCC_OscConfig+0x280>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d06c      	beq.n	8002c80 <HAL_RCC_OscConfig+0x130>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d168      	bne.n	8002c80 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	e275      	b.n	800309e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bba:	d106      	bne.n	8002bca <HAL_RCC_OscConfig+0x7a>
 8002bbc:	4b84      	ldr	r3, [pc, #528]	; (8002dd0 <HAL_RCC_OscConfig+0x280>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a83      	ldr	r2, [pc, #524]	; (8002dd0 <HAL_RCC_OscConfig+0x280>)
 8002bc2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bc6:	6013      	str	r3, [r2, #0]
 8002bc8:	e02e      	b.n	8002c28 <HAL_RCC_OscConfig+0xd8>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d10c      	bne.n	8002bec <HAL_RCC_OscConfig+0x9c>
 8002bd2:	4b7f      	ldr	r3, [pc, #508]	; (8002dd0 <HAL_RCC_OscConfig+0x280>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a7e      	ldr	r2, [pc, #504]	; (8002dd0 <HAL_RCC_OscConfig+0x280>)
 8002bd8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bdc:	6013      	str	r3, [r2, #0]
 8002bde:	4b7c      	ldr	r3, [pc, #496]	; (8002dd0 <HAL_RCC_OscConfig+0x280>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4a7b      	ldr	r2, [pc, #492]	; (8002dd0 <HAL_RCC_OscConfig+0x280>)
 8002be4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002be8:	6013      	str	r3, [r2, #0]
 8002bea:	e01d      	b.n	8002c28 <HAL_RCC_OscConfig+0xd8>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002bf4:	d10c      	bne.n	8002c10 <HAL_RCC_OscConfig+0xc0>
 8002bf6:	4b76      	ldr	r3, [pc, #472]	; (8002dd0 <HAL_RCC_OscConfig+0x280>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a75      	ldr	r2, [pc, #468]	; (8002dd0 <HAL_RCC_OscConfig+0x280>)
 8002bfc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c00:	6013      	str	r3, [r2, #0]
 8002c02:	4b73      	ldr	r3, [pc, #460]	; (8002dd0 <HAL_RCC_OscConfig+0x280>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a72      	ldr	r2, [pc, #456]	; (8002dd0 <HAL_RCC_OscConfig+0x280>)
 8002c08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c0c:	6013      	str	r3, [r2, #0]
 8002c0e:	e00b      	b.n	8002c28 <HAL_RCC_OscConfig+0xd8>
 8002c10:	4b6f      	ldr	r3, [pc, #444]	; (8002dd0 <HAL_RCC_OscConfig+0x280>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a6e      	ldr	r2, [pc, #440]	; (8002dd0 <HAL_RCC_OscConfig+0x280>)
 8002c16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c1a:	6013      	str	r3, [r2, #0]
 8002c1c:	4b6c      	ldr	r3, [pc, #432]	; (8002dd0 <HAL_RCC_OscConfig+0x280>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a6b      	ldr	r2, [pc, #428]	; (8002dd0 <HAL_RCC_OscConfig+0x280>)
 8002c22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c26:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d013      	beq.n	8002c58 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c30:	f7fe f8da 	bl	8000de8 <HAL_GetTick>
 8002c34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c36:	e008      	b.n	8002c4a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c38:	f7fe f8d6 	bl	8000de8 <HAL_GetTick>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	1ad3      	subs	r3, r2, r3
 8002c42:	2b64      	cmp	r3, #100	; 0x64
 8002c44:	d901      	bls.n	8002c4a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002c46:	2303      	movs	r3, #3
 8002c48:	e229      	b.n	800309e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c4a:	4b61      	ldr	r3, [pc, #388]	; (8002dd0 <HAL_RCC_OscConfig+0x280>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d0f0      	beq.n	8002c38 <HAL_RCC_OscConfig+0xe8>
 8002c56:	e014      	b.n	8002c82 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c58:	f7fe f8c6 	bl	8000de8 <HAL_GetTick>
 8002c5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c5e:	e008      	b.n	8002c72 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c60:	f7fe f8c2 	bl	8000de8 <HAL_GetTick>
 8002c64:	4602      	mov	r2, r0
 8002c66:	693b      	ldr	r3, [r7, #16]
 8002c68:	1ad3      	subs	r3, r2, r3
 8002c6a:	2b64      	cmp	r3, #100	; 0x64
 8002c6c:	d901      	bls.n	8002c72 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002c6e:	2303      	movs	r3, #3
 8002c70:	e215      	b.n	800309e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c72:	4b57      	ldr	r3, [pc, #348]	; (8002dd0 <HAL_RCC_OscConfig+0x280>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d1f0      	bne.n	8002c60 <HAL_RCC_OscConfig+0x110>
 8002c7e:	e000      	b.n	8002c82 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f003 0302 	and.w	r3, r3, #2
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d069      	beq.n	8002d62 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002c8e:	4b50      	ldr	r3, [pc, #320]	; (8002dd0 <HAL_RCC_OscConfig+0x280>)
 8002c90:	689b      	ldr	r3, [r3, #8]
 8002c92:	f003 030c 	and.w	r3, r3, #12
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d00b      	beq.n	8002cb2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c9a:	4b4d      	ldr	r3, [pc, #308]	; (8002dd0 <HAL_RCC_OscConfig+0x280>)
 8002c9c:	689b      	ldr	r3, [r3, #8]
 8002c9e:	f003 030c 	and.w	r3, r3, #12
 8002ca2:	2b08      	cmp	r3, #8
 8002ca4:	d11c      	bne.n	8002ce0 <HAL_RCC_OscConfig+0x190>
 8002ca6:	4b4a      	ldr	r3, [pc, #296]	; (8002dd0 <HAL_RCC_OscConfig+0x280>)
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d116      	bne.n	8002ce0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cb2:	4b47      	ldr	r3, [pc, #284]	; (8002dd0 <HAL_RCC_OscConfig+0x280>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f003 0302 	and.w	r3, r3, #2
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d005      	beq.n	8002cca <HAL_RCC_OscConfig+0x17a>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	68db      	ldr	r3, [r3, #12]
 8002cc2:	2b01      	cmp	r3, #1
 8002cc4:	d001      	beq.n	8002cca <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	e1e9      	b.n	800309e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cca:	4b41      	ldr	r3, [pc, #260]	; (8002dd0 <HAL_RCC_OscConfig+0x280>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	691b      	ldr	r3, [r3, #16]
 8002cd6:	00db      	lsls	r3, r3, #3
 8002cd8:	493d      	ldr	r1, [pc, #244]	; (8002dd0 <HAL_RCC_OscConfig+0x280>)
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cde:	e040      	b.n	8002d62 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	68db      	ldr	r3, [r3, #12]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d023      	beq.n	8002d30 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ce8:	4b39      	ldr	r3, [pc, #228]	; (8002dd0 <HAL_RCC_OscConfig+0x280>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a38      	ldr	r2, [pc, #224]	; (8002dd0 <HAL_RCC_OscConfig+0x280>)
 8002cee:	f043 0301 	orr.w	r3, r3, #1
 8002cf2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cf4:	f7fe f878 	bl	8000de8 <HAL_GetTick>
 8002cf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cfa:	e008      	b.n	8002d0e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cfc:	f7fe f874 	bl	8000de8 <HAL_GetTick>
 8002d00:	4602      	mov	r2, r0
 8002d02:	693b      	ldr	r3, [r7, #16]
 8002d04:	1ad3      	subs	r3, r2, r3
 8002d06:	2b02      	cmp	r3, #2
 8002d08:	d901      	bls.n	8002d0e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002d0a:	2303      	movs	r3, #3
 8002d0c:	e1c7      	b.n	800309e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d0e:	4b30      	ldr	r3, [pc, #192]	; (8002dd0 <HAL_RCC_OscConfig+0x280>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f003 0302 	and.w	r3, r3, #2
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d0f0      	beq.n	8002cfc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d1a:	4b2d      	ldr	r3, [pc, #180]	; (8002dd0 <HAL_RCC_OscConfig+0x280>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	691b      	ldr	r3, [r3, #16]
 8002d26:	00db      	lsls	r3, r3, #3
 8002d28:	4929      	ldr	r1, [pc, #164]	; (8002dd0 <HAL_RCC_OscConfig+0x280>)
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	600b      	str	r3, [r1, #0]
 8002d2e:	e018      	b.n	8002d62 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d30:	4b27      	ldr	r3, [pc, #156]	; (8002dd0 <HAL_RCC_OscConfig+0x280>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a26      	ldr	r2, [pc, #152]	; (8002dd0 <HAL_RCC_OscConfig+0x280>)
 8002d36:	f023 0301 	bic.w	r3, r3, #1
 8002d3a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d3c:	f7fe f854 	bl	8000de8 <HAL_GetTick>
 8002d40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d42:	e008      	b.n	8002d56 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d44:	f7fe f850 	bl	8000de8 <HAL_GetTick>
 8002d48:	4602      	mov	r2, r0
 8002d4a:	693b      	ldr	r3, [r7, #16]
 8002d4c:	1ad3      	subs	r3, r2, r3
 8002d4e:	2b02      	cmp	r3, #2
 8002d50:	d901      	bls.n	8002d56 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002d52:	2303      	movs	r3, #3
 8002d54:	e1a3      	b.n	800309e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d56:	4b1e      	ldr	r3, [pc, #120]	; (8002dd0 <HAL_RCC_OscConfig+0x280>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f003 0302 	and.w	r3, r3, #2
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d1f0      	bne.n	8002d44 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f003 0308 	and.w	r3, r3, #8
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d038      	beq.n	8002de0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	695b      	ldr	r3, [r3, #20]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d019      	beq.n	8002daa <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d76:	4b16      	ldr	r3, [pc, #88]	; (8002dd0 <HAL_RCC_OscConfig+0x280>)
 8002d78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d7a:	4a15      	ldr	r2, [pc, #84]	; (8002dd0 <HAL_RCC_OscConfig+0x280>)
 8002d7c:	f043 0301 	orr.w	r3, r3, #1
 8002d80:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d82:	f7fe f831 	bl	8000de8 <HAL_GetTick>
 8002d86:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d88:	e008      	b.n	8002d9c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d8a:	f7fe f82d 	bl	8000de8 <HAL_GetTick>
 8002d8e:	4602      	mov	r2, r0
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	1ad3      	subs	r3, r2, r3
 8002d94:	2b02      	cmp	r3, #2
 8002d96:	d901      	bls.n	8002d9c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002d98:	2303      	movs	r3, #3
 8002d9a:	e180      	b.n	800309e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d9c:	4b0c      	ldr	r3, [pc, #48]	; (8002dd0 <HAL_RCC_OscConfig+0x280>)
 8002d9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002da0:	f003 0302 	and.w	r3, r3, #2
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d0f0      	beq.n	8002d8a <HAL_RCC_OscConfig+0x23a>
 8002da8:	e01a      	b.n	8002de0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002daa:	4b09      	ldr	r3, [pc, #36]	; (8002dd0 <HAL_RCC_OscConfig+0x280>)
 8002dac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dae:	4a08      	ldr	r2, [pc, #32]	; (8002dd0 <HAL_RCC_OscConfig+0x280>)
 8002db0:	f023 0301 	bic.w	r3, r3, #1
 8002db4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002db6:	f7fe f817 	bl	8000de8 <HAL_GetTick>
 8002dba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002dbc:	e00a      	b.n	8002dd4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002dbe:	f7fe f813 	bl	8000de8 <HAL_GetTick>
 8002dc2:	4602      	mov	r2, r0
 8002dc4:	693b      	ldr	r3, [r7, #16]
 8002dc6:	1ad3      	subs	r3, r2, r3
 8002dc8:	2b02      	cmp	r3, #2
 8002dca:	d903      	bls.n	8002dd4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002dcc:	2303      	movs	r3, #3
 8002dce:	e166      	b.n	800309e <HAL_RCC_OscConfig+0x54e>
 8002dd0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002dd4:	4b92      	ldr	r3, [pc, #584]	; (8003020 <HAL_RCC_OscConfig+0x4d0>)
 8002dd6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dd8:	f003 0302 	and.w	r3, r3, #2
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d1ee      	bne.n	8002dbe <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f003 0304 	and.w	r3, r3, #4
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	f000 80a4 	beq.w	8002f36 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002dee:	4b8c      	ldr	r3, [pc, #560]	; (8003020 <HAL_RCC_OscConfig+0x4d0>)
 8002df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d10d      	bne.n	8002e16 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002dfa:	4b89      	ldr	r3, [pc, #548]	; (8003020 <HAL_RCC_OscConfig+0x4d0>)
 8002dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dfe:	4a88      	ldr	r2, [pc, #544]	; (8003020 <HAL_RCC_OscConfig+0x4d0>)
 8002e00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e04:	6413      	str	r3, [r2, #64]	; 0x40
 8002e06:	4b86      	ldr	r3, [pc, #536]	; (8003020 <HAL_RCC_OscConfig+0x4d0>)
 8002e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e0e:	60bb      	str	r3, [r7, #8]
 8002e10:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e12:	2301      	movs	r3, #1
 8002e14:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e16:	4b83      	ldr	r3, [pc, #524]	; (8003024 <HAL_RCC_OscConfig+0x4d4>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d118      	bne.n	8002e54 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002e22:	4b80      	ldr	r3, [pc, #512]	; (8003024 <HAL_RCC_OscConfig+0x4d4>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a7f      	ldr	r2, [pc, #508]	; (8003024 <HAL_RCC_OscConfig+0x4d4>)
 8002e28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e2c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e2e:	f7fd ffdb 	bl	8000de8 <HAL_GetTick>
 8002e32:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e34:	e008      	b.n	8002e48 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e36:	f7fd ffd7 	bl	8000de8 <HAL_GetTick>
 8002e3a:	4602      	mov	r2, r0
 8002e3c:	693b      	ldr	r3, [r7, #16]
 8002e3e:	1ad3      	subs	r3, r2, r3
 8002e40:	2b64      	cmp	r3, #100	; 0x64
 8002e42:	d901      	bls.n	8002e48 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002e44:	2303      	movs	r3, #3
 8002e46:	e12a      	b.n	800309e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e48:	4b76      	ldr	r3, [pc, #472]	; (8003024 <HAL_RCC_OscConfig+0x4d4>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d0f0      	beq.n	8002e36 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	689b      	ldr	r3, [r3, #8]
 8002e58:	2b01      	cmp	r3, #1
 8002e5a:	d106      	bne.n	8002e6a <HAL_RCC_OscConfig+0x31a>
 8002e5c:	4b70      	ldr	r3, [pc, #448]	; (8003020 <HAL_RCC_OscConfig+0x4d0>)
 8002e5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e60:	4a6f      	ldr	r2, [pc, #444]	; (8003020 <HAL_RCC_OscConfig+0x4d0>)
 8002e62:	f043 0301 	orr.w	r3, r3, #1
 8002e66:	6713      	str	r3, [r2, #112]	; 0x70
 8002e68:	e02d      	b.n	8002ec6 <HAL_RCC_OscConfig+0x376>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	689b      	ldr	r3, [r3, #8]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d10c      	bne.n	8002e8c <HAL_RCC_OscConfig+0x33c>
 8002e72:	4b6b      	ldr	r3, [pc, #428]	; (8003020 <HAL_RCC_OscConfig+0x4d0>)
 8002e74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e76:	4a6a      	ldr	r2, [pc, #424]	; (8003020 <HAL_RCC_OscConfig+0x4d0>)
 8002e78:	f023 0301 	bic.w	r3, r3, #1
 8002e7c:	6713      	str	r3, [r2, #112]	; 0x70
 8002e7e:	4b68      	ldr	r3, [pc, #416]	; (8003020 <HAL_RCC_OscConfig+0x4d0>)
 8002e80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e82:	4a67      	ldr	r2, [pc, #412]	; (8003020 <HAL_RCC_OscConfig+0x4d0>)
 8002e84:	f023 0304 	bic.w	r3, r3, #4
 8002e88:	6713      	str	r3, [r2, #112]	; 0x70
 8002e8a:	e01c      	b.n	8002ec6 <HAL_RCC_OscConfig+0x376>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	689b      	ldr	r3, [r3, #8]
 8002e90:	2b05      	cmp	r3, #5
 8002e92:	d10c      	bne.n	8002eae <HAL_RCC_OscConfig+0x35e>
 8002e94:	4b62      	ldr	r3, [pc, #392]	; (8003020 <HAL_RCC_OscConfig+0x4d0>)
 8002e96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e98:	4a61      	ldr	r2, [pc, #388]	; (8003020 <HAL_RCC_OscConfig+0x4d0>)
 8002e9a:	f043 0304 	orr.w	r3, r3, #4
 8002e9e:	6713      	str	r3, [r2, #112]	; 0x70
 8002ea0:	4b5f      	ldr	r3, [pc, #380]	; (8003020 <HAL_RCC_OscConfig+0x4d0>)
 8002ea2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ea4:	4a5e      	ldr	r2, [pc, #376]	; (8003020 <HAL_RCC_OscConfig+0x4d0>)
 8002ea6:	f043 0301 	orr.w	r3, r3, #1
 8002eaa:	6713      	str	r3, [r2, #112]	; 0x70
 8002eac:	e00b      	b.n	8002ec6 <HAL_RCC_OscConfig+0x376>
 8002eae:	4b5c      	ldr	r3, [pc, #368]	; (8003020 <HAL_RCC_OscConfig+0x4d0>)
 8002eb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eb2:	4a5b      	ldr	r2, [pc, #364]	; (8003020 <HAL_RCC_OscConfig+0x4d0>)
 8002eb4:	f023 0301 	bic.w	r3, r3, #1
 8002eb8:	6713      	str	r3, [r2, #112]	; 0x70
 8002eba:	4b59      	ldr	r3, [pc, #356]	; (8003020 <HAL_RCC_OscConfig+0x4d0>)
 8002ebc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ebe:	4a58      	ldr	r2, [pc, #352]	; (8003020 <HAL_RCC_OscConfig+0x4d0>)
 8002ec0:	f023 0304 	bic.w	r3, r3, #4
 8002ec4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	689b      	ldr	r3, [r3, #8]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d015      	beq.n	8002efa <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ece:	f7fd ff8b 	bl	8000de8 <HAL_GetTick>
 8002ed2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ed4:	e00a      	b.n	8002eec <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ed6:	f7fd ff87 	bl	8000de8 <HAL_GetTick>
 8002eda:	4602      	mov	r2, r0
 8002edc:	693b      	ldr	r3, [r7, #16]
 8002ede:	1ad3      	subs	r3, r2, r3
 8002ee0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d901      	bls.n	8002eec <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002ee8:	2303      	movs	r3, #3
 8002eea:	e0d8      	b.n	800309e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002eec:	4b4c      	ldr	r3, [pc, #304]	; (8003020 <HAL_RCC_OscConfig+0x4d0>)
 8002eee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ef0:	f003 0302 	and.w	r3, r3, #2
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d0ee      	beq.n	8002ed6 <HAL_RCC_OscConfig+0x386>
 8002ef8:	e014      	b.n	8002f24 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002efa:	f7fd ff75 	bl	8000de8 <HAL_GetTick>
 8002efe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f00:	e00a      	b.n	8002f18 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f02:	f7fd ff71 	bl	8000de8 <HAL_GetTick>
 8002f06:	4602      	mov	r2, r0
 8002f08:	693b      	ldr	r3, [r7, #16]
 8002f0a:	1ad3      	subs	r3, r2, r3
 8002f0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d901      	bls.n	8002f18 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002f14:	2303      	movs	r3, #3
 8002f16:	e0c2      	b.n	800309e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f18:	4b41      	ldr	r3, [pc, #260]	; (8003020 <HAL_RCC_OscConfig+0x4d0>)
 8002f1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f1c:	f003 0302 	and.w	r3, r3, #2
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d1ee      	bne.n	8002f02 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002f24:	7dfb      	ldrb	r3, [r7, #23]
 8002f26:	2b01      	cmp	r3, #1
 8002f28:	d105      	bne.n	8002f36 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f2a:	4b3d      	ldr	r3, [pc, #244]	; (8003020 <HAL_RCC_OscConfig+0x4d0>)
 8002f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f2e:	4a3c      	ldr	r2, [pc, #240]	; (8003020 <HAL_RCC_OscConfig+0x4d0>)
 8002f30:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f34:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	699b      	ldr	r3, [r3, #24]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	f000 80ae 	beq.w	800309c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f40:	4b37      	ldr	r3, [pc, #220]	; (8003020 <HAL_RCC_OscConfig+0x4d0>)
 8002f42:	689b      	ldr	r3, [r3, #8]
 8002f44:	f003 030c 	and.w	r3, r3, #12
 8002f48:	2b08      	cmp	r3, #8
 8002f4a:	d06d      	beq.n	8003028 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	699b      	ldr	r3, [r3, #24]
 8002f50:	2b02      	cmp	r3, #2
 8002f52:	d14b      	bne.n	8002fec <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f54:	4b32      	ldr	r3, [pc, #200]	; (8003020 <HAL_RCC_OscConfig+0x4d0>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a31      	ldr	r2, [pc, #196]	; (8003020 <HAL_RCC_OscConfig+0x4d0>)
 8002f5a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f5e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f60:	f7fd ff42 	bl	8000de8 <HAL_GetTick>
 8002f64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f66:	e008      	b.n	8002f7a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f68:	f7fd ff3e 	bl	8000de8 <HAL_GetTick>
 8002f6c:	4602      	mov	r2, r0
 8002f6e:	693b      	ldr	r3, [r7, #16]
 8002f70:	1ad3      	subs	r3, r2, r3
 8002f72:	2b02      	cmp	r3, #2
 8002f74:	d901      	bls.n	8002f7a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002f76:	2303      	movs	r3, #3
 8002f78:	e091      	b.n	800309e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f7a:	4b29      	ldr	r3, [pc, #164]	; (8003020 <HAL_RCC_OscConfig+0x4d0>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d1f0      	bne.n	8002f68 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	69da      	ldr	r2, [r3, #28]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6a1b      	ldr	r3, [r3, #32]
 8002f8e:	431a      	orrs	r2, r3
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f94:	019b      	lsls	r3, r3, #6
 8002f96:	431a      	orrs	r2, r3
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f9c:	085b      	lsrs	r3, r3, #1
 8002f9e:	3b01      	subs	r3, #1
 8002fa0:	041b      	lsls	r3, r3, #16
 8002fa2:	431a      	orrs	r2, r3
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fa8:	061b      	lsls	r3, r3, #24
 8002faa:	431a      	orrs	r2, r3
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fb0:	071b      	lsls	r3, r3, #28
 8002fb2:	491b      	ldr	r1, [pc, #108]	; (8003020 <HAL_RCC_OscConfig+0x4d0>)
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002fb8:	4b19      	ldr	r3, [pc, #100]	; (8003020 <HAL_RCC_OscConfig+0x4d0>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a18      	ldr	r2, [pc, #96]	; (8003020 <HAL_RCC_OscConfig+0x4d0>)
 8002fbe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002fc2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fc4:	f7fd ff10 	bl	8000de8 <HAL_GetTick>
 8002fc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fca:	e008      	b.n	8002fde <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fcc:	f7fd ff0c 	bl	8000de8 <HAL_GetTick>
 8002fd0:	4602      	mov	r2, r0
 8002fd2:	693b      	ldr	r3, [r7, #16]
 8002fd4:	1ad3      	subs	r3, r2, r3
 8002fd6:	2b02      	cmp	r3, #2
 8002fd8:	d901      	bls.n	8002fde <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002fda:	2303      	movs	r3, #3
 8002fdc:	e05f      	b.n	800309e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fde:	4b10      	ldr	r3, [pc, #64]	; (8003020 <HAL_RCC_OscConfig+0x4d0>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d0f0      	beq.n	8002fcc <HAL_RCC_OscConfig+0x47c>
 8002fea:	e057      	b.n	800309c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fec:	4b0c      	ldr	r3, [pc, #48]	; (8003020 <HAL_RCC_OscConfig+0x4d0>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a0b      	ldr	r2, [pc, #44]	; (8003020 <HAL_RCC_OscConfig+0x4d0>)
 8002ff2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ff6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ff8:	f7fd fef6 	bl	8000de8 <HAL_GetTick>
 8002ffc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ffe:	e008      	b.n	8003012 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003000:	f7fd fef2 	bl	8000de8 <HAL_GetTick>
 8003004:	4602      	mov	r2, r0
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	1ad3      	subs	r3, r2, r3
 800300a:	2b02      	cmp	r3, #2
 800300c:	d901      	bls.n	8003012 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800300e:	2303      	movs	r3, #3
 8003010:	e045      	b.n	800309e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003012:	4b03      	ldr	r3, [pc, #12]	; (8003020 <HAL_RCC_OscConfig+0x4d0>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800301a:	2b00      	cmp	r3, #0
 800301c:	d1f0      	bne.n	8003000 <HAL_RCC_OscConfig+0x4b0>
 800301e:	e03d      	b.n	800309c <HAL_RCC_OscConfig+0x54c>
 8003020:	40023800 	.word	0x40023800
 8003024:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003028:	4b1f      	ldr	r3, [pc, #124]	; (80030a8 <HAL_RCC_OscConfig+0x558>)
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	699b      	ldr	r3, [r3, #24]
 8003032:	2b01      	cmp	r3, #1
 8003034:	d030      	beq.n	8003098 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003040:	429a      	cmp	r2, r3
 8003042:	d129      	bne.n	8003098 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800304e:	429a      	cmp	r2, r3
 8003050:	d122      	bne.n	8003098 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003052:	68fa      	ldr	r2, [r7, #12]
 8003054:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003058:	4013      	ands	r3, r2
 800305a:	687a      	ldr	r2, [r7, #4]
 800305c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800305e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003060:	4293      	cmp	r3, r2
 8003062:	d119      	bne.n	8003098 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800306e:	085b      	lsrs	r3, r3, #1
 8003070:	3b01      	subs	r3, #1
 8003072:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003074:	429a      	cmp	r2, r3
 8003076:	d10f      	bne.n	8003098 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003082:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003084:	429a      	cmp	r2, r3
 8003086:	d107      	bne.n	8003098 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003092:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003094:	429a      	cmp	r2, r3
 8003096:	d001      	beq.n	800309c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003098:	2301      	movs	r3, #1
 800309a:	e000      	b.n	800309e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 800309c:	2300      	movs	r3, #0
}
 800309e:	4618      	mov	r0, r3
 80030a0:	3718      	adds	r7, #24
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}
 80030a6:	bf00      	nop
 80030a8:	40023800 	.word	0x40023800

080030ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b084      	sub	sp, #16
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
 80030b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80030b6:	2300      	movs	r3, #0
 80030b8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d101      	bne.n	80030c4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80030c0:	2301      	movs	r3, #1
 80030c2:	e0d0      	b.n	8003266 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80030c4:	4b6a      	ldr	r3, [pc, #424]	; (8003270 <HAL_RCC_ClockConfig+0x1c4>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f003 030f 	and.w	r3, r3, #15
 80030cc:	683a      	ldr	r2, [r7, #0]
 80030ce:	429a      	cmp	r2, r3
 80030d0:	d910      	bls.n	80030f4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030d2:	4b67      	ldr	r3, [pc, #412]	; (8003270 <HAL_RCC_ClockConfig+0x1c4>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f023 020f 	bic.w	r2, r3, #15
 80030da:	4965      	ldr	r1, [pc, #404]	; (8003270 <HAL_RCC_ClockConfig+0x1c4>)
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	4313      	orrs	r3, r2
 80030e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030e2:	4b63      	ldr	r3, [pc, #396]	; (8003270 <HAL_RCC_ClockConfig+0x1c4>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f003 030f 	and.w	r3, r3, #15
 80030ea:	683a      	ldr	r2, [r7, #0]
 80030ec:	429a      	cmp	r2, r3
 80030ee:	d001      	beq.n	80030f4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80030f0:	2301      	movs	r3, #1
 80030f2:	e0b8      	b.n	8003266 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f003 0302 	and.w	r3, r3, #2
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d020      	beq.n	8003142 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f003 0304 	and.w	r3, r3, #4
 8003108:	2b00      	cmp	r3, #0
 800310a:	d005      	beq.n	8003118 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800310c:	4b59      	ldr	r3, [pc, #356]	; (8003274 <HAL_RCC_ClockConfig+0x1c8>)
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	4a58      	ldr	r2, [pc, #352]	; (8003274 <HAL_RCC_ClockConfig+0x1c8>)
 8003112:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003116:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f003 0308 	and.w	r3, r3, #8
 8003120:	2b00      	cmp	r3, #0
 8003122:	d005      	beq.n	8003130 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003124:	4b53      	ldr	r3, [pc, #332]	; (8003274 <HAL_RCC_ClockConfig+0x1c8>)
 8003126:	689b      	ldr	r3, [r3, #8]
 8003128:	4a52      	ldr	r2, [pc, #328]	; (8003274 <HAL_RCC_ClockConfig+0x1c8>)
 800312a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800312e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003130:	4b50      	ldr	r3, [pc, #320]	; (8003274 <HAL_RCC_ClockConfig+0x1c8>)
 8003132:	689b      	ldr	r3, [r3, #8]
 8003134:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	689b      	ldr	r3, [r3, #8]
 800313c:	494d      	ldr	r1, [pc, #308]	; (8003274 <HAL_RCC_ClockConfig+0x1c8>)
 800313e:	4313      	orrs	r3, r2
 8003140:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f003 0301 	and.w	r3, r3, #1
 800314a:	2b00      	cmp	r3, #0
 800314c:	d040      	beq.n	80031d0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	2b01      	cmp	r3, #1
 8003154:	d107      	bne.n	8003166 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003156:	4b47      	ldr	r3, [pc, #284]	; (8003274 <HAL_RCC_ClockConfig+0x1c8>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800315e:	2b00      	cmp	r3, #0
 8003160:	d115      	bne.n	800318e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003162:	2301      	movs	r3, #1
 8003164:	e07f      	b.n	8003266 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	2b02      	cmp	r3, #2
 800316c:	d107      	bne.n	800317e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800316e:	4b41      	ldr	r3, [pc, #260]	; (8003274 <HAL_RCC_ClockConfig+0x1c8>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003176:	2b00      	cmp	r3, #0
 8003178:	d109      	bne.n	800318e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800317a:	2301      	movs	r3, #1
 800317c:	e073      	b.n	8003266 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800317e:	4b3d      	ldr	r3, [pc, #244]	; (8003274 <HAL_RCC_ClockConfig+0x1c8>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f003 0302 	and.w	r3, r3, #2
 8003186:	2b00      	cmp	r3, #0
 8003188:	d101      	bne.n	800318e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800318a:	2301      	movs	r3, #1
 800318c:	e06b      	b.n	8003266 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800318e:	4b39      	ldr	r3, [pc, #228]	; (8003274 <HAL_RCC_ClockConfig+0x1c8>)
 8003190:	689b      	ldr	r3, [r3, #8]
 8003192:	f023 0203 	bic.w	r2, r3, #3
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	4936      	ldr	r1, [pc, #216]	; (8003274 <HAL_RCC_ClockConfig+0x1c8>)
 800319c:	4313      	orrs	r3, r2
 800319e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031a0:	f7fd fe22 	bl	8000de8 <HAL_GetTick>
 80031a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031a6:	e00a      	b.n	80031be <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031a8:	f7fd fe1e 	bl	8000de8 <HAL_GetTick>
 80031ac:	4602      	mov	r2, r0
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	1ad3      	subs	r3, r2, r3
 80031b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d901      	bls.n	80031be <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80031ba:	2303      	movs	r3, #3
 80031bc:	e053      	b.n	8003266 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031be:	4b2d      	ldr	r3, [pc, #180]	; (8003274 <HAL_RCC_ClockConfig+0x1c8>)
 80031c0:	689b      	ldr	r3, [r3, #8]
 80031c2:	f003 020c 	and.w	r2, r3, #12
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	009b      	lsls	r3, r3, #2
 80031cc:	429a      	cmp	r2, r3
 80031ce:	d1eb      	bne.n	80031a8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80031d0:	4b27      	ldr	r3, [pc, #156]	; (8003270 <HAL_RCC_ClockConfig+0x1c4>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f003 030f 	and.w	r3, r3, #15
 80031d8:	683a      	ldr	r2, [r7, #0]
 80031da:	429a      	cmp	r2, r3
 80031dc:	d210      	bcs.n	8003200 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031de:	4b24      	ldr	r3, [pc, #144]	; (8003270 <HAL_RCC_ClockConfig+0x1c4>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f023 020f 	bic.w	r2, r3, #15
 80031e6:	4922      	ldr	r1, [pc, #136]	; (8003270 <HAL_RCC_ClockConfig+0x1c4>)
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	4313      	orrs	r3, r2
 80031ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031ee:	4b20      	ldr	r3, [pc, #128]	; (8003270 <HAL_RCC_ClockConfig+0x1c4>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f003 030f 	and.w	r3, r3, #15
 80031f6:	683a      	ldr	r2, [r7, #0]
 80031f8:	429a      	cmp	r2, r3
 80031fa:	d001      	beq.n	8003200 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80031fc:	2301      	movs	r3, #1
 80031fe:	e032      	b.n	8003266 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f003 0304 	and.w	r3, r3, #4
 8003208:	2b00      	cmp	r3, #0
 800320a:	d008      	beq.n	800321e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800320c:	4b19      	ldr	r3, [pc, #100]	; (8003274 <HAL_RCC_ClockConfig+0x1c8>)
 800320e:	689b      	ldr	r3, [r3, #8]
 8003210:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	68db      	ldr	r3, [r3, #12]
 8003218:	4916      	ldr	r1, [pc, #88]	; (8003274 <HAL_RCC_ClockConfig+0x1c8>)
 800321a:	4313      	orrs	r3, r2
 800321c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f003 0308 	and.w	r3, r3, #8
 8003226:	2b00      	cmp	r3, #0
 8003228:	d009      	beq.n	800323e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800322a:	4b12      	ldr	r3, [pc, #72]	; (8003274 <HAL_RCC_ClockConfig+0x1c8>)
 800322c:	689b      	ldr	r3, [r3, #8]
 800322e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	691b      	ldr	r3, [r3, #16]
 8003236:	00db      	lsls	r3, r3, #3
 8003238:	490e      	ldr	r1, [pc, #56]	; (8003274 <HAL_RCC_ClockConfig+0x1c8>)
 800323a:	4313      	orrs	r3, r2
 800323c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800323e:	f000 f821 	bl	8003284 <HAL_RCC_GetSysClockFreq>
 8003242:	4601      	mov	r1, r0
 8003244:	4b0b      	ldr	r3, [pc, #44]	; (8003274 <HAL_RCC_ClockConfig+0x1c8>)
 8003246:	689b      	ldr	r3, [r3, #8]
 8003248:	091b      	lsrs	r3, r3, #4
 800324a:	f003 030f 	and.w	r3, r3, #15
 800324e:	4a0a      	ldr	r2, [pc, #40]	; (8003278 <HAL_RCC_ClockConfig+0x1cc>)
 8003250:	5cd3      	ldrb	r3, [r2, r3]
 8003252:	fa21 f303 	lsr.w	r3, r1, r3
 8003256:	4a09      	ldr	r2, [pc, #36]	; (800327c <HAL_RCC_ClockConfig+0x1d0>)
 8003258:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800325a:	4b09      	ldr	r3, [pc, #36]	; (8003280 <HAL_RCC_ClockConfig+0x1d4>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4618      	mov	r0, r3
 8003260:	f7fd fc1a 	bl	8000a98 <HAL_InitTick>

  return HAL_OK;
 8003264:	2300      	movs	r3, #0
}
 8003266:	4618      	mov	r0, r3
 8003268:	3710      	adds	r7, #16
 800326a:	46bd      	mov	sp, r7
 800326c:	bd80      	pop	{r7, pc}
 800326e:	bf00      	nop
 8003270:	40023c00 	.word	0x40023c00
 8003274:	40023800 	.word	0x40023800
 8003278:	08011e40 	.word	0x08011e40
 800327c:	20000000 	.word	0x20000000
 8003280:	20000004 	.word	0x20000004

08003284 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003284:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003286:	b085      	sub	sp, #20
 8003288:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800328a:	2300      	movs	r3, #0
 800328c:	607b      	str	r3, [r7, #4]
 800328e:	2300      	movs	r3, #0
 8003290:	60fb      	str	r3, [r7, #12]
 8003292:	2300      	movs	r3, #0
 8003294:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8003296:	2300      	movs	r3, #0
 8003298:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800329a:	4b63      	ldr	r3, [pc, #396]	; (8003428 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800329c:	689b      	ldr	r3, [r3, #8]
 800329e:	f003 030c 	and.w	r3, r3, #12
 80032a2:	2b04      	cmp	r3, #4
 80032a4:	d007      	beq.n	80032b6 <HAL_RCC_GetSysClockFreq+0x32>
 80032a6:	2b08      	cmp	r3, #8
 80032a8:	d008      	beq.n	80032bc <HAL_RCC_GetSysClockFreq+0x38>
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	f040 80b4 	bne.w	8003418 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80032b0:	4b5e      	ldr	r3, [pc, #376]	; (800342c <HAL_RCC_GetSysClockFreq+0x1a8>)
 80032b2:	60bb      	str	r3, [r7, #8]
      break;
 80032b4:	e0b3      	b.n	800341e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80032b6:	4b5e      	ldr	r3, [pc, #376]	; (8003430 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80032b8:	60bb      	str	r3, [r7, #8]
      break;
 80032ba:	e0b0      	b.n	800341e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80032bc:	4b5a      	ldr	r3, [pc, #360]	; (8003428 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80032c4:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80032c6:	4b58      	ldr	r3, [pc, #352]	; (8003428 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d04a      	beq.n	8003368 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032d2:	4b55      	ldr	r3, [pc, #340]	; (8003428 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	099b      	lsrs	r3, r3, #6
 80032d8:	f04f 0400 	mov.w	r4, #0
 80032dc:	f240 11ff 	movw	r1, #511	; 0x1ff
 80032e0:	f04f 0200 	mov.w	r2, #0
 80032e4:	ea03 0501 	and.w	r5, r3, r1
 80032e8:	ea04 0602 	and.w	r6, r4, r2
 80032ec:	4629      	mov	r1, r5
 80032ee:	4632      	mov	r2, r6
 80032f0:	f04f 0300 	mov.w	r3, #0
 80032f4:	f04f 0400 	mov.w	r4, #0
 80032f8:	0154      	lsls	r4, r2, #5
 80032fa:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80032fe:	014b      	lsls	r3, r1, #5
 8003300:	4619      	mov	r1, r3
 8003302:	4622      	mov	r2, r4
 8003304:	1b49      	subs	r1, r1, r5
 8003306:	eb62 0206 	sbc.w	r2, r2, r6
 800330a:	f04f 0300 	mov.w	r3, #0
 800330e:	f04f 0400 	mov.w	r4, #0
 8003312:	0194      	lsls	r4, r2, #6
 8003314:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003318:	018b      	lsls	r3, r1, #6
 800331a:	1a5b      	subs	r3, r3, r1
 800331c:	eb64 0402 	sbc.w	r4, r4, r2
 8003320:	f04f 0100 	mov.w	r1, #0
 8003324:	f04f 0200 	mov.w	r2, #0
 8003328:	00e2      	lsls	r2, r4, #3
 800332a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800332e:	00d9      	lsls	r1, r3, #3
 8003330:	460b      	mov	r3, r1
 8003332:	4614      	mov	r4, r2
 8003334:	195b      	adds	r3, r3, r5
 8003336:	eb44 0406 	adc.w	r4, r4, r6
 800333a:	f04f 0100 	mov.w	r1, #0
 800333e:	f04f 0200 	mov.w	r2, #0
 8003342:	0262      	lsls	r2, r4, #9
 8003344:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003348:	0259      	lsls	r1, r3, #9
 800334a:	460b      	mov	r3, r1
 800334c:	4614      	mov	r4, r2
 800334e:	4618      	mov	r0, r3
 8003350:	4621      	mov	r1, r4
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	f04f 0400 	mov.w	r4, #0
 8003358:	461a      	mov	r2, r3
 800335a:	4623      	mov	r3, r4
 800335c:	f7fc ffc8 	bl	80002f0 <__aeabi_uldivmod>
 8003360:	4603      	mov	r3, r0
 8003362:	460c      	mov	r4, r1
 8003364:	60fb      	str	r3, [r7, #12]
 8003366:	e049      	b.n	80033fc <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003368:	4b2f      	ldr	r3, [pc, #188]	; (8003428 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	099b      	lsrs	r3, r3, #6
 800336e:	f04f 0400 	mov.w	r4, #0
 8003372:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003376:	f04f 0200 	mov.w	r2, #0
 800337a:	ea03 0501 	and.w	r5, r3, r1
 800337e:	ea04 0602 	and.w	r6, r4, r2
 8003382:	4629      	mov	r1, r5
 8003384:	4632      	mov	r2, r6
 8003386:	f04f 0300 	mov.w	r3, #0
 800338a:	f04f 0400 	mov.w	r4, #0
 800338e:	0154      	lsls	r4, r2, #5
 8003390:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003394:	014b      	lsls	r3, r1, #5
 8003396:	4619      	mov	r1, r3
 8003398:	4622      	mov	r2, r4
 800339a:	1b49      	subs	r1, r1, r5
 800339c:	eb62 0206 	sbc.w	r2, r2, r6
 80033a0:	f04f 0300 	mov.w	r3, #0
 80033a4:	f04f 0400 	mov.w	r4, #0
 80033a8:	0194      	lsls	r4, r2, #6
 80033aa:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80033ae:	018b      	lsls	r3, r1, #6
 80033b0:	1a5b      	subs	r3, r3, r1
 80033b2:	eb64 0402 	sbc.w	r4, r4, r2
 80033b6:	f04f 0100 	mov.w	r1, #0
 80033ba:	f04f 0200 	mov.w	r2, #0
 80033be:	00e2      	lsls	r2, r4, #3
 80033c0:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80033c4:	00d9      	lsls	r1, r3, #3
 80033c6:	460b      	mov	r3, r1
 80033c8:	4614      	mov	r4, r2
 80033ca:	195b      	adds	r3, r3, r5
 80033cc:	eb44 0406 	adc.w	r4, r4, r6
 80033d0:	f04f 0100 	mov.w	r1, #0
 80033d4:	f04f 0200 	mov.w	r2, #0
 80033d8:	02a2      	lsls	r2, r4, #10
 80033da:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80033de:	0299      	lsls	r1, r3, #10
 80033e0:	460b      	mov	r3, r1
 80033e2:	4614      	mov	r4, r2
 80033e4:	4618      	mov	r0, r3
 80033e6:	4621      	mov	r1, r4
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	f04f 0400 	mov.w	r4, #0
 80033ee:	461a      	mov	r2, r3
 80033f0:	4623      	mov	r3, r4
 80033f2:	f7fc ff7d 	bl	80002f0 <__aeabi_uldivmod>
 80033f6:	4603      	mov	r3, r0
 80033f8:	460c      	mov	r4, r1
 80033fa:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80033fc:	4b0a      	ldr	r3, [pc, #40]	; (8003428 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	0c1b      	lsrs	r3, r3, #16
 8003402:	f003 0303 	and.w	r3, r3, #3
 8003406:	3301      	adds	r3, #1
 8003408:	005b      	lsls	r3, r3, #1
 800340a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 800340c:	68fa      	ldr	r2, [r7, #12]
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	fbb2 f3f3 	udiv	r3, r2, r3
 8003414:	60bb      	str	r3, [r7, #8]
      break;
 8003416:	e002      	b.n	800341e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003418:	4b04      	ldr	r3, [pc, #16]	; (800342c <HAL_RCC_GetSysClockFreq+0x1a8>)
 800341a:	60bb      	str	r3, [r7, #8]
      break;
 800341c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800341e:	68bb      	ldr	r3, [r7, #8]
}
 8003420:	4618      	mov	r0, r3
 8003422:	3714      	adds	r7, #20
 8003424:	46bd      	mov	sp, r7
 8003426:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003428:	40023800 	.word	0x40023800
 800342c:	00f42400 	.word	0x00f42400
 8003430:	007a1200 	.word	0x007a1200

08003434 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003434:	b480      	push	{r7}
 8003436:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003438:	4b03      	ldr	r3, [pc, #12]	; (8003448 <HAL_RCC_GetHCLKFreq+0x14>)
 800343a:	681b      	ldr	r3, [r3, #0]
}
 800343c:	4618      	mov	r0, r3
 800343e:	46bd      	mov	sp, r7
 8003440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003444:	4770      	bx	lr
 8003446:	bf00      	nop
 8003448:	20000000 	.word	0x20000000

0800344c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003450:	f7ff fff0 	bl	8003434 <HAL_RCC_GetHCLKFreq>
 8003454:	4601      	mov	r1, r0
 8003456:	4b05      	ldr	r3, [pc, #20]	; (800346c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003458:	689b      	ldr	r3, [r3, #8]
 800345a:	0a9b      	lsrs	r3, r3, #10
 800345c:	f003 0307 	and.w	r3, r3, #7
 8003460:	4a03      	ldr	r2, [pc, #12]	; (8003470 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003462:	5cd3      	ldrb	r3, [r2, r3]
 8003464:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003468:	4618      	mov	r0, r3
 800346a:	bd80      	pop	{r7, pc}
 800346c:	40023800 	.word	0x40023800
 8003470:	08011e50 	.word	0x08011e50

08003474 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003478:	f7ff ffdc 	bl	8003434 <HAL_RCC_GetHCLKFreq>
 800347c:	4601      	mov	r1, r0
 800347e:	4b05      	ldr	r3, [pc, #20]	; (8003494 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003480:	689b      	ldr	r3, [r3, #8]
 8003482:	0b5b      	lsrs	r3, r3, #13
 8003484:	f003 0307 	and.w	r3, r3, #7
 8003488:	4a03      	ldr	r2, [pc, #12]	; (8003498 <HAL_RCC_GetPCLK2Freq+0x24>)
 800348a:	5cd3      	ldrb	r3, [r2, r3]
 800348c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003490:	4618      	mov	r0, r3
 8003492:	bd80      	pop	{r7, pc}
 8003494:	40023800 	.word	0x40023800
 8003498:	08011e50 	.word	0x08011e50

0800349c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800349c:	b480      	push	{r7}
 800349e:	b083      	sub	sp, #12
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
 80034a4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	220f      	movs	r2, #15
 80034aa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80034ac:	4b12      	ldr	r3, [pc, #72]	; (80034f8 <HAL_RCC_GetClockConfig+0x5c>)
 80034ae:	689b      	ldr	r3, [r3, #8]
 80034b0:	f003 0203 	and.w	r2, r3, #3
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80034b8:	4b0f      	ldr	r3, [pc, #60]	; (80034f8 <HAL_RCC_GetClockConfig+0x5c>)
 80034ba:	689b      	ldr	r3, [r3, #8]
 80034bc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80034c4:	4b0c      	ldr	r3, [pc, #48]	; (80034f8 <HAL_RCC_GetClockConfig+0x5c>)
 80034c6:	689b      	ldr	r3, [r3, #8]
 80034c8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80034d0:	4b09      	ldr	r3, [pc, #36]	; (80034f8 <HAL_RCC_GetClockConfig+0x5c>)
 80034d2:	689b      	ldr	r3, [r3, #8]
 80034d4:	08db      	lsrs	r3, r3, #3
 80034d6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80034de:	4b07      	ldr	r3, [pc, #28]	; (80034fc <HAL_RCC_GetClockConfig+0x60>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f003 020f 	and.w	r2, r3, #15
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	601a      	str	r2, [r3, #0]
}
 80034ea:	bf00      	nop
 80034ec:	370c      	adds	r7, #12
 80034ee:	46bd      	mov	sp, r7
 80034f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f4:	4770      	bx	lr
 80034f6:	bf00      	nop
 80034f8:	40023800 	.word	0x40023800
 80034fc:	40023c00 	.word	0x40023c00

08003500 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b088      	sub	sp, #32
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003508:	2300      	movs	r3, #0
 800350a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800350c:	2300      	movs	r3, #0
 800350e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003510:	2300      	movs	r3, #0
 8003512:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003514:	2300      	movs	r3, #0
 8003516:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003518:	2300      	movs	r3, #0
 800351a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f003 0301 	and.w	r3, r3, #1
 8003524:	2b00      	cmp	r3, #0
 8003526:	d012      	beq.n	800354e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003528:	4b69      	ldr	r3, [pc, #420]	; (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800352a:	689b      	ldr	r3, [r3, #8]
 800352c:	4a68      	ldr	r2, [pc, #416]	; (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800352e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003532:	6093      	str	r3, [r2, #8]
 8003534:	4b66      	ldr	r3, [pc, #408]	; (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003536:	689a      	ldr	r2, [r3, #8]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800353c:	4964      	ldr	r1, [pc, #400]	; (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800353e:	4313      	orrs	r3, r2
 8003540:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003546:	2b00      	cmp	r3, #0
 8003548:	d101      	bne.n	800354e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800354a:	2301      	movs	r3, #1
 800354c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003556:	2b00      	cmp	r3, #0
 8003558:	d017      	beq.n	800358a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800355a:	4b5d      	ldr	r3, [pc, #372]	; (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800355c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003560:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003568:	4959      	ldr	r1, [pc, #356]	; (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800356a:	4313      	orrs	r3, r2
 800356c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003574:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003578:	d101      	bne.n	800357e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800357a:	2301      	movs	r3, #1
 800357c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003582:	2b00      	cmp	r3, #0
 8003584:	d101      	bne.n	800358a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003586:	2301      	movs	r3, #1
 8003588:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003592:	2b00      	cmp	r3, #0
 8003594:	d017      	beq.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003596:	4b4e      	ldr	r3, [pc, #312]	; (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003598:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800359c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a4:	494a      	ldr	r1, [pc, #296]	; (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035a6:	4313      	orrs	r3, r2
 80035a8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80035b4:	d101      	bne.n	80035ba <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80035b6:	2301      	movs	r3, #1
 80035b8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d101      	bne.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80035c2:	2301      	movs	r3, #1
 80035c4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d001      	beq.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80035d2:	2301      	movs	r3, #1
 80035d4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f003 0320 	and.w	r3, r3, #32
 80035de:	2b00      	cmp	r3, #0
 80035e0:	f000 808b 	beq.w	80036fa <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80035e4:	4b3a      	ldr	r3, [pc, #232]	; (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e8:	4a39      	ldr	r2, [pc, #228]	; (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035ee:	6413      	str	r3, [r2, #64]	; 0x40
 80035f0:	4b37      	ldr	r3, [pc, #220]	; (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035f8:	60bb      	str	r3, [r7, #8]
 80035fa:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80035fc:	4b35      	ldr	r3, [pc, #212]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a34      	ldr	r2, [pc, #208]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003602:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003606:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003608:	f7fd fbee 	bl	8000de8 <HAL_GetTick>
 800360c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800360e:	e008      	b.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003610:	f7fd fbea 	bl	8000de8 <HAL_GetTick>
 8003614:	4602      	mov	r2, r0
 8003616:	697b      	ldr	r3, [r7, #20]
 8003618:	1ad3      	subs	r3, r2, r3
 800361a:	2b64      	cmp	r3, #100	; 0x64
 800361c:	d901      	bls.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800361e:	2303      	movs	r3, #3
 8003620:	e38f      	b.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003622:	4b2c      	ldr	r3, [pc, #176]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800362a:	2b00      	cmp	r3, #0
 800362c:	d0f0      	beq.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800362e:	4b28      	ldr	r3, [pc, #160]	; (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003630:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003632:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003636:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003638:	693b      	ldr	r3, [r7, #16]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d035      	beq.n	80036aa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003642:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003646:	693a      	ldr	r2, [r7, #16]
 8003648:	429a      	cmp	r2, r3
 800364a:	d02e      	beq.n	80036aa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800364c:	4b20      	ldr	r3, [pc, #128]	; (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800364e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003650:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003654:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003656:	4b1e      	ldr	r3, [pc, #120]	; (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003658:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800365a:	4a1d      	ldr	r2, [pc, #116]	; (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800365c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003660:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003662:	4b1b      	ldr	r3, [pc, #108]	; (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003664:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003666:	4a1a      	ldr	r2, [pc, #104]	; (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003668:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800366c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800366e:	4a18      	ldr	r2, [pc, #96]	; (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003670:	693b      	ldr	r3, [r7, #16]
 8003672:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003674:	4b16      	ldr	r3, [pc, #88]	; (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003676:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003678:	f003 0301 	and.w	r3, r3, #1
 800367c:	2b01      	cmp	r3, #1
 800367e:	d114      	bne.n	80036aa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003680:	f7fd fbb2 	bl	8000de8 <HAL_GetTick>
 8003684:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003686:	e00a      	b.n	800369e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003688:	f7fd fbae 	bl	8000de8 <HAL_GetTick>
 800368c:	4602      	mov	r2, r0
 800368e:	697b      	ldr	r3, [r7, #20]
 8003690:	1ad3      	subs	r3, r2, r3
 8003692:	f241 3288 	movw	r2, #5000	; 0x1388
 8003696:	4293      	cmp	r3, r2
 8003698:	d901      	bls.n	800369e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800369a:	2303      	movs	r3, #3
 800369c:	e351      	b.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800369e:	4b0c      	ldr	r3, [pc, #48]	; (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036a2:	f003 0302 	and.w	r3, r3, #2
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d0ee      	beq.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036b2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80036b6:	d111      	bne.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80036b8:	4b05      	ldr	r3, [pc, #20]	; (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036ba:	689b      	ldr	r3, [r3, #8]
 80036bc:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80036c4:	4b04      	ldr	r3, [pc, #16]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80036c6:	400b      	ands	r3, r1
 80036c8:	4901      	ldr	r1, [pc, #4]	; (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036ca:	4313      	orrs	r3, r2
 80036cc:	608b      	str	r3, [r1, #8]
 80036ce:	e00b      	b.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80036d0:	40023800 	.word	0x40023800
 80036d4:	40007000 	.word	0x40007000
 80036d8:	0ffffcff 	.word	0x0ffffcff
 80036dc:	4bb3      	ldr	r3, [pc, #716]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80036de:	689b      	ldr	r3, [r3, #8]
 80036e0:	4ab2      	ldr	r2, [pc, #712]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80036e2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80036e6:	6093      	str	r3, [r2, #8]
 80036e8:	4bb0      	ldr	r3, [pc, #704]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80036ea:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036f4:	49ad      	ldr	r1, [pc, #692]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80036f6:	4313      	orrs	r3, r2
 80036f8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f003 0310 	and.w	r3, r3, #16
 8003702:	2b00      	cmp	r3, #0
 8003704:	d010      	beq.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003706:	4ba9      	ldr	r3, [pc, #676]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003708:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800370c:	4aa7      	ldr	r2, [pc, #668]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800370e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003712:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003716:	4ba5      	ldr	r3, [pc, #660]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003718:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003720:	49a2      	ldr	r1, [pc, #648]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003722:	4313      	orrs	r3, r2
 8003724:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003730:	2b00      	cmp	r3, #0
 8003732:	d00a      	beq.n	800374a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003734:	4b9d      	ldr	r3, [pc, #628]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003736:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800373a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003742:	499a      	ldr	r1, [pc, #616]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003744:	4313      	orrs	r3, r2
 8003746:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003752:	2b00      	cmp	r3, #0
 8003754:	d00a      	beq.n	800376c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003756:	4b95      	ldr	r3, [pc, #596]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003758:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800375c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003764:	4991      	ldr	r1, [pc, #580]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003766:	4313      	orrs	r3, r2
 8003768:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003774:	2b00      	cmp	r3, #0
 8003776:	d00a      	beq.n	800378e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003778:	4b8c      	ldr	r3, [pc, #560]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800377a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800377e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003786:	4989      	ldr	r1, [pc, #548]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003788:	4313      	orrs	r3, r2
 800378a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003796:	2b00      	cmp	r3, #0
 8003798:	d00a      	beq.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800379a:	4b84      	ldr	r3, [pc, #528]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800379c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037a0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037a8:	4980      	ldr	r1, [pc, #512]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80037aa:	4313      	orrs	r3, r2
 80037ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d00a      	beq.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80037bc:	4b7b      	ldr	r3, [pc, #492]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80037be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037c2:	f023 0203 	bic.w	r2, r3, #3
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037ca:	4978      	ldr	r1, [pc, #480]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80037cc:	4313      	orrs	r3, r2
 80037ce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d00a      	beq.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80037de:	4b73      	ldr	r3, [pc, #460]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80037e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037e4:	f023 020c 	bic.w	r2, r3, #12
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037ec:	496f      	ldr	r1, [pc, #444]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80037ee:	4313      	orrs	r3, r2
 80037f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d00a      	beq.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003800:	4b6a      	ldr	r3, [pc, #424]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003802:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003806:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800380e:	4967      	ldr	r1, [pc, #412]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003810:	4313      	orrs	r3, r2
 8003812:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800381e:	2b00      	cmp	r3, #0
 8003820:	d00a      	beq.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003822:	4b62      	ldr	r3, [pc, #392]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003824:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003828:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003830:	495e      	ldr	r1, [pc, #376]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003832:	4313      	orrs	r3, r2
 8003834:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003840:	2b00      	cmp	r3, #0
 8003842:	d00a      	beq.n	800385a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003844:	4b59      	ldr	r3, [pc, #356]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003846:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800384a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003852:	4956      	ldr	r1, [pc, #344]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003854:	4313      	orrs	r3, r2
 8003856:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003862:	2b00      	cmp	r3, #0
 8003864:	d00a      	beq.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003866:	4b51      	ldr	r3, [pc, #324]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003868:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800386c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003874:	494d      	ldr	r1, [pc, #308]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003876:	4313      	orrs	r3, r2
 8003878:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003884:	2b00      	cmp	r3, #0
 8003886:	d00a      	beq.n	800389e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003888:	4b48      	ldr	r3, [pc, #288]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800388a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800388e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003896:	4945      	ldr	r1, [pc, #276]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003898:	4313      	orrs	r3, r2
 800389a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d00a      	beq.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80038aa:	4b40      	ldr	r3, [pc, #256]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80038ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038b0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038b8:	493c      	ldr	r1, [pc, #240]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80038ba:	4313      	orrs	r3, r2
 80038bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d00a      	beq.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80038cc:	4b37      	ldr	r3, [pc, #220]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80038ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038d2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80038da:	4934      	ldr	r1, [pc, #208]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80038dc:	4313      	orrs	r3, r2
 80038de:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d011      	beq.n	8003912 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80038ee:	4b2f      	ldr	r3, [pc, #188]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80038f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038f4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80038fc:	492b      	ldr	r1, [pc, #172]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80038fe:	4313      	orrs	r3, r2
 8003900:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003908:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800390c:	d101      	bne.n	8003912 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800390e:	2301      	movs	r3, #1
 8003910:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f003 0308 	and.w	r3, r3, #8
 800391a:	2b00      	cmp	r3, #0
 800391c:	d001      	beq.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800391e:	2301      	movs	r3, #1
 8003920:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800392a:	2b00      	cmp	r3, #0
 800392c:	d00a      	beq.n	8003944 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800392e:	4b1f      	ldr	r3, [pc, #124]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003930:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003934:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800393c:	491b      	ldr	r1, [pc, #108]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800393e:	4313      	orrs	r3, r2
 8003940:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800394c:	2b00      	cmp	r3, #0
 800394e:	d00b      	beq.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003950:	4b16      	ldr	r3, [pc, #88]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003952:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003956:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003960:	4912      	ldr	r1, [pc, #72]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003962:	4313      	orrs	r3, r2
 8003964:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003970:	2b00      	cmp	r3, #0
 8003972:	d00b      	beq.n	800398c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003974:	4b0d      	ldr	r3, [pc, #52]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003976:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800397a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003984:	4909      	ldr	r1, [pc, #36]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003986:	4313      	orrs	r3, r2
 8003988:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003994:	2b00      	cmp	r3, #0
 8003996:	d00f      	beq.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003998:	4b04      	ldr	r3, [pc, #16]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800399a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800399e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039a8:	e002      	b.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 80039aa:	bf00      	nop
 80039ac:	40023800 	.word	0x40023800
 80039b0:	4986      	ldr	r1, [pc, #536]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80039b2:	4313      	orrs	r3, r2
 80039b4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d00b      	beq.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80039c4:	4b81      	ldr	r3, [pc, #516]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80039c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80039ca:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80039d4:	497d      	ldr	r1, [pc, #500]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80039d6:	4313      	orrs	r3, r2
 80039d8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80039dc:	69fb      	ldr	r3, [r7, #28]
 80039de:	2b01      	cmp	r3, #1
 80039e0:	d006      	beq.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	f000 80d6 	beq.w	8003b9c <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80039f0:	4b76      	ldr	r3, [pc, #472]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a75      	ldr	r2, [pc, #468]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80039f6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80039fa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039fc:	f7fd f9f4 	bl	8000de8 <HAL_GetTick>
 8003a00:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003a02:	e008      	b.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003a04:	f7fd f9f0 	bl	8000de8 <HAL_GetTick>
 8003a08:	4602      	mov	r2, r0
 8003a0a:	697b      	ldr	r3, [r7, #20]
 8003a0c:	1ad3      	subs	r3, r2, r3
 8003a0e:	2b64      	cmp	r3, #100	; 0x64
 8003a10:	d901      	bls.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003a12:	2303      	movs	r3, #3
 8003a14:	e195      	b.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003a16:	4b6d      	ldr	r3, [pc, #436]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d1f0      	bne.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f003 0301 	and.w	r3, r3, #1
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d021      	beq.n	8003a72 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d11d      	bne.n	8003a72 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003a36:	4b65      	ldr	r3, [pc, #404]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a38:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a3c:	0c1b      	lsrs	r3, r3, #16
 8003a3e:	f003 0303 	and.w	r3, r3, #3
 8003a42:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003a44:	4b61      	ldr	r3, [pc, #388]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a46:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a4a:	0e1b      	lsrs	r3, r3, #24
 8003a4c:	f003 030f 	and.w	r3, r3, #15
 8003a50:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	019a      	lsls	r2, r3, #6
 8003a58:	693b      	ldr	r3, [r7, #16]
 8003a5a:	041b      	lsls	r3, r3, #16
 8003a5c:	431a      	orrs	r2, r3
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	061b      	lsls	r3, r3, #24
 8003a62:	431a      	orrs	r2, r3
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	689b      	ldr	r3, [r3, #8]
 8003a68:	071b      	lsls	r3, r3, #28
 8003a6a:	4958      	ldr	r1, [pc, #352]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d004      	beq.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a82:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a86:	d00a      	beq.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d02e      	beq.n	8003af2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a98:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a9c:	d129      	bne.n	8003af2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003a9e:	4b4b      	ldr	r3, [pc, #300]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003aa0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003aa4:	0c1b      	lsrs	r3, r3, #16
 8003aa6:	f003 0303 	and.w	r3, r3, #3
 8003aaa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003aac:	4b47      	ldr	r3, [pc, #284]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003aae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ab2:	0f1b      	lsrs	r3, r3, #28
 8003ab4:	f003 0307 	and.w	r3, r3, #7
 8003ab8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	019a      	lsls	r2, r3, #6
 8003ac0:	693b      	ldr	r3, [r7, #16]
 8003ac2:	041b      	lsls	r3, r3, #16
 8003ac4:	431a      	orrs	r2, r3
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	68db      	ldr	r3, [r3, #12]
 8003aca:	061b      	lsls	r3, r3, #24
 8003acc:	431a      	orrs	r2, r3
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	071b      	lsls	r3, r3, #28
 8003ad2:	493e      	ldr	r1, [pc, #248]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003ada:	4b3c      	ldr	r3, [pc, #240]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003adc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ae0:	f023 021f 	bic.w	r2, r3, #31
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae8:	3b01      	subs	r3, #1
 8003aea:	4938      	ldr	r1, [pc, #224]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003aec:	4313      	orrs	r3, r2
 8003aee:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d01d      	beq.n	8003b3a <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003afe:	4b33      	ldr	r3, [pc, #204]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b04:	0e1b      	lsrs	r3, r3, #24
 8003b06:	f003 030f 	and.w	r3, r3, #15
 8003b0a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003b0c:	4b2f      	ldr	r3, [pc, #188]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b12:	0f1b      	lsrs	r3, r3, #28
 8003b14:	f003 0307 	and.w	r3, r3, #7
 8003b18:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	019a      	lsls	r2, r3, #6
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	691b      	ldr	r3, [r3, #16]
 8003b24:	041b      	lsls	r3, r3, #16
 8003b26:	431a      	orrs	r2, r3
 8003b28:	693b      	ldr	r3, [r7, #16]
 8003b2a:	061b      	lsls	r3, r3, #24
 8003b2c:	431a      	orrs	r2, r3
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	071b      	lsls	r3, r3, #28
 8003b32:	4926      	ldr	r1, [pc, #152]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b34:	4313      	orrs	r3, r2
 8003b36:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d011      	beq.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	019a      	lsls	r2, r3, #6
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	691b      	ldr	r3, [r3, #16]
 8003b50:	041b      	lsls	r3, r3, #16
 8003b52:	431a      	orrs	r2, r3
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	68db      	ldr	r3, [r3, #12]
 8003b58:	061b      	lsls	r3, r3, #24
 8003b5a:	431a      	orrs	r2, r3
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	689b      	ldr	r3, [r3, #8]
 8003b60:	071b      	lsls	r3, r3, #28
 8003b62:	491a      	ldr	r1, [pc, #104]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b64:	4313      	orrs	r3, r2
 8003b66:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003b6a:	4b18      	ldr	r3, [pc, #96]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4a17      	ldr	r2, [pc, #92]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b70:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003b74:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b76:	f7fd f937 	bl	8000de8 <HAL_GetTick>
 8003b7a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003b7c:	e008      	b.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003b7e:	f7fd f933 	bl	8000de8 <HAL_GetTick>
 8003b82:	4602      	mov	r2, r0
 8003b84:	697b      	ldr	r3, [r7, #20]
 8003b86:	1ad3      	subs	r3, r2, r3
 8003b88:	2b64      	cmp	r3, #100	; 0x64
 8003b8a:	d901      	bls.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003b8c:	2303      	movs	r3, #3
 8003b8e:	e0d8      	b.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003b90:	4b0e      	ldr	r3, [pc, #56]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d0f0      	beq.n	8003b7e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003b9c:	69bb      	ldr	r3, [r7, #24]
 8003b9e:	2b01      	cmp	r3, #1
 8003ba0:	f040 80ce 	bne.w	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003ba4:	4b09      	ldr	r3, [pc, #36]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a08      	ldr	r2, [pc, #32]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003baa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003bae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003bb0:	f7fd f91a 	bl	8000de8 <HAL_GetTick>
 8003bb4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003bb6:	e00b      	b.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003bb8:	f7fd f916 	bl	8000de8 <HAL_GetTick>
 8003bbc:	4602      	mov	r2, r0
 8003bbe:	697b      	ldr	r3, [r7, #20]
 8003bc0:	1ad3      	subs	r3, r2, r3
 8003bc2:	2b64      	cmp	r3, #100	; 0x64
 8003bc4:	d904      	bls.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003bc6:	2303      	movs	r3, #3
 8003bc8:	e0bb      	b.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003bca:	bf00      	nop
 8003bcc:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003bd0:	4b5e      	ldr	r3, [pc, #376]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003bd8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003bdc:	d0ec      	beq.n	8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d003      	beq.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d009      	beq.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d02e      	beq.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d12a      	bne.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003c06:	4b51      	ldr	r3, [pc, #324]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c0c:	0c1b      	lsrs	r3, r3, #16
 8003c0e:	f003 0303 	and.w	r3, r3, #3
 8003c12:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003c14:	4b4d      	ldr	r3, [pc, #308]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c1a:	0f1b      	lsrs	r3, r3, #28
 8003c1c:	f003 0307 	and.w	r3, r3, #7
 8003c20:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	695b      	ldr	r3, [r3, #20]
 8003c26:	019a      	lsls	r2, r3, #6
 8003c28:	693b      	ldr	r3, [r7, #16]
 8003c2a:	041b      	lsls	r3, r3, #16
 8003c2c:	431a      	orrs	r2, r3
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	699b      	ldr	r3, [r3, #24]
 8003c32:	061b      	lsls	r3, r3, #24
 8003c34:	431a      	orrs	r2, r3
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	071b      	lsls	r3, r3, #28
 8003c3a:	4944      	ldr	r1, [pc, #272]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003c42:	4b42      	ldr	r3, [pc, #264]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c44:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c48:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c50:	3b01      	subs	r3, #1
 8003c52:	021b      	lsls	r3, r3, #8
 8003c54:	493d      	ldr	r1, [pc, #244]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c56:	4313      	orrs	r3, r2
 8003c58:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d022      	beq.n	8003cae <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c6c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003c70:	d11d      	bne.n	8003cae <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003c72:	4b36      	ldr	r3, [pc, #216]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c78:	0e1b      	lsrs	r3, r3, #24
 8003c7a:	f003 030f 	and.w	r3, r3, #15
 8003c7e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003c80:	4b32      	ldr	r3, [pc, #200]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c86:	0f1b      	lsrs	r3, r3, #28
 8003c88:	f003 0307 	and.w	r3, r3, #7
 8003c8c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	695b      	ldr	r3, [r3, #20]
 8003c92:	019a      	lsls	r2, r3, #6
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6a1b      	ldr	r3, [r3, #32]
 8003c98:	041b      	lsls	r3, r3, #16
 8003c9a:	431a      	orrs	r2, r3
 8003c9c:	693b      	ldr	r3, [r7, #16]
 8003c9e:	061b      	lsls	r3, r3, #24
 8003ca0:	431a      	orrs	r2, r3
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	071b      	lsls	r3, r3, #28
 8003ca6:	4929      	ldr	r1, [pc, #164]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f003 0308 	and.w	r3, r3, #8
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d028      	beq.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003cba:	4b24      	ldr	r3, [pc, #144]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003cbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cc0:	0e1b      	lsrs	r3, r3, #24
 8003cc2:	f003 030f 	and.w	r3, r3, #15
 8003cc6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003cc8:	4b20      	ldr	r3, [pc, #128]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003cca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cce:	0c1b      	lsrs	r3, r3, #16
 8003cd0:	f003 0303 	and.w	r3, r3, #3
 8003cd4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	695b      	ldr	r3, [r3, #20]
 8003cda:	019a      	lsls	r2, r3, #6
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	041b      	lsls	r3, r3, #16
 8003ce0:	431a      	orrs	r2, r3
 8003ce2:	693b      	ldr	r3, [r7, #16]
 8003ce4:	061b      	lsls	r3, r3, #24
 8003ce6:	431a      	orrs	r2, r3
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	69db      	ldr	r3, [r3, #28]
 8003cec:	071b      	lsls	r3, r3, #28
 8003cee:	4917      	ldr	r1, [pc, #92]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003cf6:	4b15      	ldr	r3, [pc, #84]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003cf8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003cfc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d04:	4911      	ldr	r1, [pc, #68]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003d06:	4313      	orrs	r3, r2
 8003d08:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003d0c:	4b0f      	ldr	r3, [pc, #60]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a0e      	ldr	r2, [pc, #56]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003d12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d16:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d18:	f7fd f866 	bl	8000de8 <HAL_GetTick>
 8003d1c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003d1e:	e008      	b.n	8003d32 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003d20:	f7fd f862 	bl	8000de8 <HAL_GetTick>
 8003d24:	4602      	mov	r2, r0
 8003d26:	697b      	ldr	r3, [r7, #20]
 8003d28:	1ad3      	subs	r3, r2, r3
 8003d2a:	2b64      	cmp	r3, #100	; 0x64
 8003d2c:	d901      	bls.n	8003d32 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003d2e:	2303      	movs	r3, #3
 8003d30:	e007      	b.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003d32:	4b06      	ldr	r3, [pc, #24]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003d3a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d3e:	d1ef      	bne.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003d40:	2300      	movs	r3, #0
}
 8003d42:	4618      	mov	r0, r3
 8003d44:	3720      	adds	r7, #32
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bd80      	pop	{r7, pc}
 8003d4a:	bf00      	nop
 8003d4c:	40023800 	.word	0x40023800

08003d50 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b082      	sub	sp, #8
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d101      	bne.n	8003d62 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	e049      	b.n	8003df6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d68:	b2db      	uxtb	r3, r3
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d106      	bne.n	8003d7c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2200      	movs	r2, #0
 8003d72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003d76:	6878      	ldr	r0, [r7, #4]
 8003d78:	f000 f841 	bl	8003dfe <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2202      	movs	r2, #2
 8003d80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681a      	ldr	r2, [r3, #0]
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	3304      	adds	r3, #4
 8003d8c:	4619      	mov	r1, r3
 8003d8e:	4610      	mov	r0, r2
 8003d90:	f000 fa00 	bl	8004194 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2201      	movs	r2, #1
 8003d98:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2201      	movs	r2, #1
 8003da0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2201      	movs	r2, #1
 8003da8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2201      	movs	r2, #1
 8003db0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2201      	movs	r2, #1
 8003db8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2201      	movs	r2, #1
 8003dc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2201      	movs	r2, #1
 8003dc8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2201      	movs	r2, #1
 8003dd0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2201      	movs	r2, #1
 8003dd8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2201      	movs	r2, #1
 8003de0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2201      	movs	r2, #1
 8003de8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2201      	movs	r2, #1
 8003df0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003df4:	2300      	movs	r3, #0
}
 8003df6:	4618      	mov	r0, r3
 8003df8:	3708      	adds	r7, #8
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bd80      	pop	{r7, pc}

08003dfe <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003dfe:	b480      	push	{r7}
 8003e00:	b083      	sub	sp, #12
 8003e02:	af00      	add	r7, sp, #0
 8003e04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003e06:	bf00      	nop
 8003e08:	370c      	adds	r7, #12
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e10:	4770      	bx	lr
	...

08003e14 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003e14:	b480      	push	{r7}
 8003e16:	b085      	sub	sp, #20
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e22:	b2db      	uxtb	r3, r3
 8003e24:	2b01      	cmp	r3, #1
 8003e26:	d001      	beq.n	8003e2c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003e28:	2301      	movs	r3, #1
 8003e2a:	e054      	b.n	8003ed6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2202      	movs	r2, #2
 8003e30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	68da      	ldr	r2, [r3, #12]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f042 0201 	orr.w	r2, r2, #1
 8003e42:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a26      	ldr	r2, [pc, #152]	; (8003ee4 <HAL_TIM_Base_Start_IT+0xd0>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d022      	beq.n	8003e94 <HAL_TIM_Base_Start_IT+0x80>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e56:	d01d      	beq.n	8003e94 <HAL_TIM_Base_Start_IT+0x80>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4a22      	ldr	r2, [pc, #136]	; (8003ee8 <HAL_TIM_Base_Start_IT+0xd4>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d018      	beq.n	8003e94 <HAL_TIM_Base_Start_IT+0x80>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4a21      	ldr	r2, [pc, #132]	; (8003eec <HAL_TIM_Base_Start_IT+0xd8>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d013      	beq.n	8003e94 <HAL_TIM_Base_Start_IT+0x80>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a1f      	ldr	r2, [pc, #124]	; (8003ef0 <HAL_TIM_Base_Start_IT+0xdc>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d00e      	beq.n	8003e94 <HAL_TIM_Base_Start_IT+0x80>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4a1e      	ldr	r2, [pc, #120]	; (8003ef4 <HAL_TIM_Base_Start_IT+0xe0>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d009      	beq.n	8003e94 <HAL_TIM_Base_Start_IT+0x80>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4a1c      	ldr	r2, [pc, #112]	; (8003ef8 <HAL_TIM_Base_Start_IT+0xe4>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d004      	beq.n	8003e94 <HAL_TIM_Base_Start_IT+0x80>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4a1b      	ldr	r2, [pc, #108]	; (8003efc <HAL_TIM_Base_Start_IT+0xe8>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d115      	bne.n	8003ec0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	689a      	ldr	r2, [r3, #8]
 8003e9a:	4b19      	ldr	r3, [pc, #100]	; (8003f00 <HAL_TIM_Base_Start_IT+0xec>)
 8003e9c:	4013      	ands	r3, r2
 8003e9e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	2b06      	cmp	r3, #6
 8003ea4:	d015      	beq.n	8003ed2 <HAL_TIM_Base_Start_IT+0xbe>
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003eac:	d011      	beq.n	8003ed2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	681a      	ldr	r2, [r3, #0]
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f042 0201 	orr.w	r2, r2, #1
 8003ebc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ebe:	e008      	b.n	8003ed2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	681a      	ldr	r2, [r3, #0]
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f042 0201 	orr.w	r2, r2, #1
 8003ece:	601a      	str	r2, [r3, #0]
 8003ed0:	e000      	b.n	8003ed4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ed2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003ed4:	2300      	movs	r3, #0
}
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	3714      	adds	r7, #20
 8003eda:	46bd      	mov	sp, r7
 8003edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee0:	4770      	bx	lr
 8003ee2:	bf00      	nop
 8003ee4:	40010000 	.word	0x40010000
 8003ee8:	40000400 	.word	0x40000400
 8003eec:	40000800 	.word	0x40000800
 8003ef0:	40000c00 	.word	0x40000c00
 8003ef4:	40010400 	.word	0x40010400
 8003ef8:	40014000 	.word	0x40014000
 8003efc:	40001800 	.word	0x40001800
 8003f00:	00010007 	.word	0x00010007

08003f04 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b082      	sub	sp, #8
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	691b      	ldr	r3, [r3, #16]
 8003f12:	f003 0302 	and.w	r3, r3, #2
 8003f16:	2b02      	cmp	r3, #2
 8003f18:	d122      	bne.n	8003f60 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	68db      	ldr	r3, [r3, #12]
 8003f20:	f003 0302 	and.w	r3, r3, #2
 8003f24:	2b02      	cmp	r3, #2
 8003f26:	d11b      	bne.n	8003f60 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f06f 0202 	mvn.w	r2, #2
 8003f30:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2201      	movs	r2, #1
 8003f36:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	699b      	ldr	r3, [r3, #24]
 8003f3e:	f003 0303 	and.w	r3, r3, #3
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d003      	beq.n	8003f4e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003f46:	6878      	ldr	r0, [r7, #4]
 8003f48:	f000 f905 	bl	8004156 <HAL_TIM_IC_CaptureCallback>
 8003f4c:	e005      	b.n	8003f5a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f4e:	6878      	ldr	r0, [r7, #4]
 8003f50:	f000 f8f7 	bl	8004142 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f54:	6878      	ldr	r0, [r7, #4]
 8003f56:	f000 f908 	bl	800416a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	691b      	ldr	r3, [r3, #16]
 8003f66:	f003 0304 	and.w	r3, r3, #4
 8003f6a:	2b04      	cmp	r3, #4
 8003f6c:	d122      	bne.n	8003fb4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	68db      	ldr	r3, [r3, #12]
 8003f74:	f003 0304 	and.w	r3, r3, #4
 8003f78:	2b04      	cmp	r3, #4
 8003f7a:	d11b      	bne.n	8003fb4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f06f 0204 	mvn.w	r2, #4
 8003f84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2202      	movs	r2, #2
 8003f8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	699b      	ldr	r3, [r3, #24]
 8003f92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d003      	beq.n	8003fa2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f9a:	6878      	ldr	r0, [r7, #4]
 8003f9c:	f000 f8db 	bl	8004156 <HAL_TIM_IC_CaptureCallback>
 8003fa0:	e005      	b.n	8003fae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fa2:	6878      	ldr	r0, [r7, #4]
 8003fa4:	f000 f8cd 	bl	8004142 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fa8:	6878      	ldr	r0, [r7, #4]
 8003faa:	f000 f8de 	bl	800416a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	691b      	ldr	r3, [r3, #16]
 8003fba:	f003 0308 	and.w	r3, r3, #8
 8003fbe:	2b08      	cmp	r3, #8
 8003fc0:	d122      	bne.n	8004008 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	68db      	ldr	r3, [r3, #12]
 8003fc8:	f003 0308 	and.w	r3, r3, #8
 8003fcc:	2b08      	cmp	r3, #8
 8003fce:	d11b      	bne.n	8004008 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f06f 0208 	mvn.w	r2, #8
 8003fd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2204      	movs	r2, #4
 8003fde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	69db      	ldr	r3, [r3, #28]
 8003fe6:	f003 0303 	and.w	r3, r3, #3
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d003      	beq.n	8003ff6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fee:	6878      	ldr	r0, [r7, #4]
 8003ff0:	f000 f8b1 	bl	8004156 <HAL_TIM_IC_CaptureCallback>
 8003ff4:	e005      	b.n	8004002 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ff6:	6878      	ldr	r0, [r7, #4]
 8003ff8:	f000 f8a3 	bl	8004142 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ffc:	6878      	ldr	r0, [r7, #4]
 8003ffe:	f000 f8b4 	bl	800416a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2200      	movs	r2, #0
 8004006:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	691b      	ldr	r3, [r3, #16]
 800400e:	f003 0310 	and.w	r3, r3, #16
 8004012:	2b10      	cmp	r3, #16
 8004014:	d122      	bne.n	800405c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	68db      	ldr	r3, [r3, #12]
 800401c:	f003 0310 	and.w	r3, r3, #16
 8004020:	2b10      	cmp	r3, #16
 8004022:	d11b      	bne.n	800405c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f06f 0210 	mvn.w	r2, #16
 800402c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2208      	movs	r2, #8
 8004032:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	69db      	ldr	r3, [r3, #28]
 800403a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800403e:	2b00      	cmp	r3, #0
 8004040:	d003      	beq.n	800404a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004042:	6878      	ldr	r0, [r7, #4]
 8004044:	f000 f887 	bl	8004156 <HAL_TIM_IC_CaptureCallback>
 8004048:	e005      	b.n	8004056 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800404a:	6878      	ldr	r0, [r7, #4]
 800404c:	f000 f879 	bl	8004142 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004050:	6878      	ldr	r0, [r7, #4]
 8004052:	f000 f88a 	bl	800416a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2200      	movs	r2, #0
 800405a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	691b      	ldr	r3, [r3, #16]
 8004062:	f003 0301 	and.w	r3, r3, #1
 8004066:	2b01      	cmp	r3, #1
 8004068:	d10e      	bne.n	8004088 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	68db      	ldr	r3, [r3, #12]
 8004070:	f003 0301 	and.w	r3, r3, #1
 8004074:	2b01      	cmp	r3, #1
 8004076:	d107      	bne.n	8004088 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f06f 0201 	mvn.w	r2, #1
 8004080:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004082:	6878      	ldr	r0, [r7, #4]
 8004084:	f7fc fc66 	bl	8000954 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	691b      	ldr	r3, [r3, #16]
 800408e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004092:	2b80      	cmp	r3, #128	; 0x80
 8004094:	d10e      	bne.n	80040b4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	68db      	ldr	r3, [r3, #12]
 800409c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040a0:	2b80      	cmp	r3, #128	; 0x80
 80040a2:	d107      	bne.n	80040b4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80040ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80040ae:	6878      	ldr	r0, [r7, #4]
 80040b0:	f000 f91a 	bl	80042e8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	691b      	ldr	r3, [r3, #16]
 80040ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040c2:	d10e      	bne.n	80040e2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	68db      	ldr	r3, [r3, #12]
 80040ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040ce:	2b80      	cmp	r3, #128	; 0x80
 80040d0:	d107      	bne.n	80040e2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80040da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80040dc:	6878      	ldr	r0, [r7, #4]
 80040de:	f000 f90d 	bl	80042fc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	691b      	ldr	r3, [r3, #16]
 80040e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040ec:	2b40      	cmp	r3, #64	; 0x40
 80040ee:	d10e      	bne.n	800410e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	68db      	ldr	r3, [r3, #12]
 80040f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040fa:	2b40      	cmp	r3, #64	; 0x40
 80040fc:	d107      	bne.n	800410e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004106:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004108:	6878      	ldr	r0, [r7, #4]
 800410a:	f000 f838 	bl	800417e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	691b      	ldr	r3, [r3, #16]
 8004114:	f003 0320 	and.w	r3, r3, #32
 8004118:	2b20      	cmp	r3, #32
 800411a:	d10e      	bne.n	800413a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	68db      	ldr	r3, [r3, #12]
 8004122:	f003 0320 	and.w	r3, r3, #32
 8004126:	2b20      	cmp	r3, #32
 8004128:	d107      	bne.n	800413a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f06f 0220 	mvn.w	r2, #32
 8004132:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004134:	6878      	ldr	r0, [r7, #4]
 8004136:	f000 f8cd 	bl	80042d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800413a:	bf00      	nop
 800413c:	3708      	adds	r7, #8
 800413e:	46bd      	mov	sp, r7
 8004140:	bd80      	pop	{r7, pc}

08004142 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004142:	b480      	push	{r7}
 8004144:	b083      	sub	sp, #12
 8004146:	af00      	add	r7, sp, #0
 8004148:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800414a:	bf00      	nop
 800414c:	370c      	adds	r7, #12
 800414e:	46bd      	mov	sp, r7
 8004150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004154:	4770      	bx	lr

08004156 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004156:	b480      	push	{r7}
 8004158:	b083      	sub	sp, #12
 800415a:	af00      	add	r7, sp, #0
 800415c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800415e:	bf00      	nop
 8004160:	370c      	adds	r7, #12
 8004162:	46bd      	mov	sp, r7
 8004164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004168:	4770      	bx	lr

0800416a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800416a:	b480      	push	{r7}
 800416c:	b083      	sub	sp, #12
 800416e:	af00      	add	r7, sp, #0
 8004170:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004172:	bf00      	nop
 8004174:	370c      	adds	r7, #12
 8004176:	46bd      	mov	sp, r7
 8004178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417c:	4770      	bx	lr

0800417e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800417e:	b480      	push	{r7}
 8004180:	b083      	sub	sp, #12
 8004182:	af00      	add	r7, sp, #0
 8004184:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004186:	bf00      	nop
 8004188:	370c      	adds	r7, #12
 800418a:	46bd      	mov	sp, r7
 800418c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004190:	4770      	bx	lr
	...

08004194 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004194:	b480      	push	{r7}
 8004196:	b085      	sub	sp, #20
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
 800419c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	4a40      	ldr	r2, [pc, #256]	; (80042a8 <TIM_Base_SetConfig+0x114>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d013      	beq.n	80041d4 <TIM_Base_SetConfig+0x40>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041b2:	d00f      	beq.n	80041d4 <TIM_Base_SetConfig+0x40>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	4a3d      	ldr	r2, [pc, #244]	; (80042ac <TIM_Base_SetConfig+0x118>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d00b      	beq.n	80041d4 <TIM_Base_SetConfig+0x40>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	4a3c      	ldr	r2, [pc, #240]	; (80042b0 <TIM_Base_SetConfig+0x11c>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d007      	beq.n	80041d4 <TIM_Base_SetConfig+0x40>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	4a3b      	ldr	r2, [pc, #236]	; (80042b4 <TIM_Base_SetConfig+0x120>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d003      	beq.n	80041d4 <TIM_Base_SetConfig+0x40>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	4a3a      	ldr	r2, [pc, #232]	; (80042b8 <TIM_Base_SetConfig+0x124>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d108      	bne.n	80041e6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	68fa      	ldr	r2, [r7, #12]
 80041e2:	4313      	orrs	r3, r2
 80041e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	4a2f      	ldr	r2, [pc, #188]	; (80042a8 <TIM_Base_SetConfig+0x114>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d02b      	beq.n	8004246 <TIM_Base_SetConfig+0xb2>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041f4:	d027      	beq.n	8004246 <TIM_Base_SetConfig+0xb2>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	4a2c      	ldr	r2, [pc, #176]	; (80042ac <TIM_Base_SetConfig+0x118>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d023      	beq.n	8004246 <TIM_Base_SetConfig+0xb2>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	4a2b      	ldr	r2, [pc, #172]	; (80042b0 <TIM_Base_SetConfig+0x11c>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d01f      	beq.n	8004246 <TIM_Base_SetConfig+0xb2>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	4a2a      	ldr	r2, [pc, #168]	; (80042b4 <TIM_Base_SetConfig+0x120>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d01b      	beq.n	8004246 <TIM_Base_SetConfig+0xb2>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	4a29      	ldr	r2, [pc, #164]	; (80042b8 <TIM_Base_SetConfig+0x124>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d017      	beq.n	8004246 <TIM_Base_SetConfig+0xb2>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	4a28      	ldr	r2, [pc, #160]	; (80042bc <TIM_Base_SetConfig+0x128>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d013      	beq.n	8004246 <TIM_Base_SetConfig+0xb2>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	4a27      	ldr	r2, [pc, #156]	; (80042c0 <TIM_Base_SetConfig+0x12c>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d00f      	beq.n	8004246 <TIM_Base_SetConfig+0xb2>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	4a26      	ldr	r2, [pc, #152]	; (80042c4 <TIM_Base_SetConfig+0x130>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d00b      	beq.n	8004246 <TIM_Base_SetConfig+0xb2>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	4a25      	ldr	r2, [pc, #148]	; (80042c8 <TIM_Base_SetConfig+0x134>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d007      	beq.n	8004246 <TIM_Base_SetConfig+0xb2>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	4a24      	ldr	r2, [pc, #144]	; (80042cc <TIM_Base_SetConfig+0x138>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d003      	beq.n	8004246 <TIM_Base_SetConfig+0xb2>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	4a23      	ldr	r2, [pc, #140]	; (80042d0 <TIM_Base_SetConfig+0x13c>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d108      	bne.n	8004258 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800424c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	68db      	ldr	r3, [r3, #12]
 8004252:	68fa      	ldr	r2, [r7, #12]
 8004254:	4313      	orrs	r3, r2
 8004256:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	695b      	ldr	r3, [r3, #20]
 8004262:	4313      	orrs	r3, r2
 8004264:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	68fa      	ldr	r2, [r7, #12]
 800426a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	689a      	ldr	r2, [r3, #8]
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	681a      	ldr	r2, [r3, #0]
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	4a0a      	ldr	r2, [pc, #40]	; (80042a8 <TIM_Base_SetConfig+0x114>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d003      	beq.n	800428c <TIM_Base_SetConfig+0xf8>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	4a0c      	ldr	r2, [pc, #48]	; (80042b8 <TIM_Base_SetConfig+0x124>)
 8004288:	4293      	cmp	r3, r2
 800428a:	d103      	bne.n	8004294 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	691a      	ldr	r2, [r3, #16]
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2201      	movs	r2, #1
 8004298:	615a      	str	r2, [r3, #20]
}
 800429a:	bf00      	nop
 800429c:	3714      	adds	r7, #20
 800429e:	46bd      	mov	sp, r7
 80042a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a4:	4770      	bx	lr
 80042a6:	bf00      	nop
 80042a8:	40010000 	.word	0x40010000
 80042ac:	40000400 	.word	0x40000400
 80042b0:	40000800 	.word	0x40000800
 80042b4:	40000c00 	.word	0x40000c00
 80042b8:	40010400 	.word	0x40010400
 80042bc:	40014000 	.word	0x40014000
 80042c0:	40014400 	.word	0x40014400
 80042c4:	40014800 	.word	0x40014800
 80042c8:	40001800 	.word	0x40001800
 80042cc:	40001c00 	.word	0x40001c00
 80042d0:	40002000 	.word	0x40002000

080042d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80042d4:	b480      	push	{r7}
 80042d6:	b083      	sub	sp, #12
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80042dc:	bf00      	nop
 80042de:	370c      	adds	r7, #12
 80042e0:	46bd      	mov	sp, r7
 80042e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e6:	4770      	bx	lr

080042e8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80042e8:	b480      	push	{r7}
 80042ea:	b083      	sub	sp, #12
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80042f0:	bf00      	nop
 80042f2:	370c      	adds	r7, #12
 80042f4:	46bd      	mov	sp, r7
 80042f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fa:	4770      	bx	lr

080042fc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80042fc:	b480      	push	{r7}
 80042fe:	b083      	sub	sp, #12
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004304:	bf00      	nop
 8004306:	370c      	adds	r7, #12
 8004308:	46bd      	mov	sp, r7
 800430a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430e:	4770      	bx	lr

08004310 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b082      	sub	sp, #8
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d101      	bne.n	8004322 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800431e:	2301      	movs	r3, #1
 8004320:	e040      	b.n	80043a4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004326:	2b00      	cmp	r3, #0
 8004328:	d106      	bne.n	8004338 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2200      	movs	r2, #0
 800432e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004332:	6878      	ldr	r0, [r7, #4]
 8004334:	f7fc fb6c 	bl	8000a10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2224      	movs	r2, #36	; 0x24
 800433c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	681a      	ldr	r2, [r3, #0]
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f022 0201 	bic.w	r2, r2, #1
 800434c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800434e:	6878      	ldr	r0, [r7, #4]
 8004350:	f000 f8c0 	bl	80044d4 <UART_SetConfig>
 8004354:	4603      	mov	r3, r0
 8004356:	2b01      	cmp	r3, #1
 8004358:	d101      	bne.n	800435e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800435a:	2301      	movs	r3, #1
 800435c:	e022      	b.n	80043a4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004362:	2b00      	cmp	r3, #0
 8004364:	d002      	beq.n	800436c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004366:	6878      	ldr	r0, [r7, #4]
 8004368:	f000 fb14 	bl	8004994 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	685a      	ldr	r2, [r3, #4]
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800437a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	689a      	ldr	r2, [r3, #8]
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800438a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	681a      	ldr	r2, [r3, #0]
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f042 0201 	orr.w	r2, r2, #1
 800439a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800439c:	6878      	ldr	r0, [r7, #4]
 800439e:	f000 fb9b 	bl	8004ad8 <UART_CheckIdleState>
 80043a2:	4603      	mov	r3, r0
}
 80043a4:	4618      	mov	r0, r3
 80043a6:	3708      	adds	r7, #8
 80043a8:	46bd      	mov	sp, r7
 80043aa:	bd80      	pop	{r7, pc}

080043ac <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b08a      	sub	sp, #40	; 0x28
 80043b0:	af02      	add	r7, sp, #8
 80043b2:	60f8      	str	r0, [r7, #12]
 80043b4:	60b9      	str	r1, [r7, #8]
 80043b6:	603b      	str	r3, [r7, #0]
 80043b8:	4613      	mov	r3, r2
 80043ba:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80043c0:	2b20      	cmp	r3, #32
 80043c2:	f040 8081 	bne.w	80044c8 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 80043c6:	68bb      	ldr	r3, [r7, #8]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d002      	beq.n	80043d2 <HAL_UART_Transmit+0x26>
 80043cc:	88fb      	ldrh	r3, [r7, #6]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d101      	bne.n	80043d6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80043d2:	2301      	movs	r3, #1
 80043d4:	e079      	b.n	80044ca <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80043dc:	2b01      	cmp	r3, #1
 80043de:	d101      	bne.n	80043e4 <HAL_UART_Transmit+0x38>
 80043e0:	2302      	movs	r3, #2
 80043e2:	e072      	b.n	80044ca <HAL_UART_Transmit+0x11e>
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	2201      	movs	r2, #1
 80043e8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	2200      	movs	r2, #0
 80043f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	2221      	movs	r2, #33	; 0x21
 80043f8:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80043fa:	f7fc fcf5 	bl	8000de8 <HAL_GetTick>
 80043fe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	88fa      	ldrh	r2, [r7, #6]
 8004404:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	88fa      	ldrh	r2, [r7, #6]
 800440c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	689b      	ldr	r3, [r3, #8]
 8004414:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004418:	d108      	bne.n	800442c <HAL_UART_Transmit+0x80>
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	691b      	ldr	r3, [r3, #16]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d104      	bne.n	800442c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8004422:	2300      	movs	r3, #0
 8004424:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004426:	68bb      	ldr	r3, [r7, #8]
 8004428:	61bb      	str	r3, [r7, #24]
 800442a:	e003      	b.n	8004434 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800442c:	68bb      	ldr	r3, [r7, #8]
 800442e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004430:	2300      	movs	r3, #0
 8004432:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	2200      	movs	r2, #0
 8004438:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800443c:	e02c      	b.n	8004498 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	9300      	str	r3, [sp, #0]
 8004442:	697b      	ldr	r3, [r7, #20]
 8004444:	2200      	movs	r2, #0
 8004446:	2180      	movs	r1, #128	; 0x80
 8004448:	68f8      	ldr	r0, [r7, #12]
 800444a:	f000 fb8e 	bl	8004b6a <UART_WaitOnFlagUntilTimeout>
 800444e:	4603      	mov	r3, r0
 8004450:	2b00      	cmp	r3, #0
 8004452:	d001      	beq.n	8004458 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004454:	2303      	movs	r3, #3
 8004456:	e038      	b.n	80044ca <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8004458:	69fb      	ldr	r3, [r7, #28]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d10b      	bne.n	8004476 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800445e:	69bb      	ldr	r3, [r7, #24]
 8004460:	881b      	ldrh	r3, [r3, #0]
 8004462:	461a      	mov	r2, r3
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800446c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800446e:	69bb      	ldr	r3, [r7, #24]
 8004470:	3302      	adds	r3, #2
 8004472:	61bb      	str	r3, [r7, #24]
 8004474:	e007      	b.n	8004486 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004476:	69fb      	ldr	r3, [r7, #28]
 8004478:	781a      	ldrb	r2, [r3, #0]
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004480:	69fb      	ldr	r3, [r7, #28]
 8004482:	3301      	adds	r3, #1
 8004484:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800448c:	b29b      	uxth	r3, r3
 800448e:	3b01      	subs	r3, #1
 8004490:	b29a      	uxth	r2, r3
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800449e:	b29b      	uxth	r3, r3
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d1cc      	bne.n	800443e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	9300      	str	r3, [sp, #0]
 80044a8:	697b      	ldr	r3, [r7, #20]
 80044aa:	2200      	movs	r2, #0
 80044ac:	2140      	movs	r1, #64	; 0x40
 80044ae:	68f8      	ldr	r0, [r7, #12]
 80044b0:	f000 fb5b 	bl	8004b6a <UART_WaitOnFlagUntilTimeout>
 80044b4:	4603      	mov	r3, r0
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d001      	beq.n	80044be <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 80044ba:	2303      	movs	r3, #3
 80044bc:	e005      	b.n	80044ca <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	2220      	movs	r2, #32
 80044c2:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80044c4:	2300      	movs	r3, #0
 80044c6:	e000      	b.n	80044ca <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 80044c8:	2302      	movs	r3, #2
  }
}
 80044ca:	4618      	mov	r0, r3
 80044cc:	3720      	adds	r7, #32
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bd80      	pop	{r7, pc}
	...

080044d4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b088      	sub	sp, #32
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80044dc:	2300      	movs	r3, #0
 80044de:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	689a      	ldr	r2, [r3, #8]
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	691b      	ldr	r3, [r3, #16]
 80044e8:	431a      	orrs	r2, r3
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	695b      	ldr	r3, [r3, #20]
 80044ee:	431a      	orrs	r2, r3
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	69db      	ldr	r3, [r3, #28]
 80044f4:	4313      	orrs	r3, r2
 80044f6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	681a      	ldr	r2, [r3, #0]
 80044fe:	4bb1      	ldr	r3, [pc, #708]	; (80047c4 <UART_SetConfig+0x2f0>)
 8004500:	4013      	ands	r3, r2
 8004502:	687a      	ldr	r2, [r7, #4]
 8004504:	6812      	ldr	r2, [r2, #0]
 8004506:	6979      	ldr	r1, [r7, #20]
 8004508:	430b      	orrs	r3, r1
 800450a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	685b      	ldr	r3, [r3, #4]
 8004512:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	68da      	ldr	r2, [r3, #12]
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	430a      	orrs	r2, r1
 8004520:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	699b      	ldr	r3, [r3, #24]
 8004526:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6a1b      	ldr	r3, [r3, #32]
 800452c:	697a      	ldr	r2, [r7, #20]
 800452e:	4313      	orrs	r3, r2
 8004530:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	689b      	ldr	r3, [r3, #8]
 8004538:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	697a      	ldr	r2, [r7, #20]
 8004542:	430a      	orrs	r2, r1
 8004544:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	4a9f      	ldr	r2, [pc, #636]	; (80047c8 <UART_SetConfig+0x2f4>)
 800454c:	4293      	cmp	r3, r2
 800454e:	d121      	bne.n	8004594 <UART_SetConfig+0xc0>
 8004550:	4b9e      	ldr	r3, [pc, #632]	; (80047cc <UART_SetConfig+0x2f8>)
 8004552:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004556:	f003 0303 	and.w	r3, r3, #3
 800455a:	2b03      	cmp	r3, #3
 800455c:	d816      	bhi.n	800458c <UART_SetConfig+0xb8>
 800455e:	a201      	add	r2, pc, #4	; (adr r2, 8004564 <UART_SetConfig+0x90>)
 8004560:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004564:	08004575 	.word	0x08004575
 8004568:	08004581 	.word	0x08004581
 800456c:	0800457b 	.word	0x0800457b
 8004570:	08004587 	.word	0x08004587
 8004574:	2301      	movs	r3, #1
 8004576:	77fb      	strb	r3, [r7, #31]
 8004578:	e151      	b.n	800481e <UART_SetConfig+0x34a>
 800457a:	2302      	movs	r3, #2
 800457c:	77fb      	strb	r3, [r7, #31]
 800457e:	e14e      	b.n	800481e <UART_SetConfig+0x34a>
 8004580:	2304      	movs	r3, #4
 8004582:	77fb      	strb	r3, [r7, #31]
 8004584:	e14b      	b.n	800481e <UART_SetConfig+0x34a>
 8004586:	2308      	movs	r3, #8
 8004588:	77fb      	strb	r3, [r7, #31]
 800458a:	e148      	b.n	800481e <UART_SetConfig+0x34a>
 800458c:	2310      	movs	r3, #16
 800458e:	77fb      	strb	r3, [r7, #31]
 8004590:	bf00      	nop
 8004592:	e144      	b.n	800481e <UART_SetConfig+0x34a>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4a8d      	ldr	r2, [pc, #564]	; (80047d0 <UART_SetConfig+0x2fc>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d134      	bne.n	8004608 <UART_SetConfig+0x134>
 800459e:	4b8b      	ldr	r3, [pc, #556]	; (80047cc <UART_SetConfig+0x2f8>)
 80045a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045a4:	f003 030c 	and.w	r3, r3, #12
 80045a8:	2b0c      	cmp	r3, #12
 80045aa:	d829      	bhi.n	8004600 <UART_SetConfig+0x12c>
 80045ac:	a201      	add	r2, pc, #4	; (adr r2, 80045b4 <UART_SetConfig+0xe0>)
 80045ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045b2:	bf00      	nop
 80045b4:	080045e9 	.word	0x080045e9
 80045b8:	08004601 	.word	0x08004601
 80045bc:	08004601 	.word	0x08004601
 80045c0:	08004601 	.word	0x08004601
 80045c4:	080045f5 	.word	0x080045f5
 80045c8:	08004601 	.word	0x08004601
 80045cc:	08004601 	.word	0x08004601
 80045d0:	08004601 	.word	0x08004601
 80045d4:	080045ef 	.word	0x080045ef
 80045d8:	08004601 	.word	0x08004601
 80045dc:	08004601 	.word	0x08004601
 80045e0:	08004601 	.word	0x08004601
 80045e4:	080045fb 	.word	0x080045fb
 80045e8:	2300      	movs	r3, #0
 80045ea:	77fb      	strb	r3, [r7, #31]
 80045ec:	e117      	b.n	800481e <UART_SetConfig+0x34a>
 80045ee:	2302      	movs	r3, #2
 80045f0:	77fb      	strb	r3, [r7, #31]
 80045f2:	e114      	b.n	800481e <UART_SetConfig+0x34a>
 80045f4:	2304      	movs	r3, #4
 80045f6:	77fb      	strb	r3, [r7, #31]
 80045f8:	e111      	b.n	800481e <UART_SetConfig+0x34a>
 80045fa:	2308      	movs	r3, #8
 80045fc:	77fb      	strb	r3, [r7, #31]
 80045fe:	e10e      	b.n	800481e <UART_SetConfig+0x34a>
 8004600:	2310      	movs	r3, #16
 8004602:	77fb      	strb	r3, [r7, #31]
 8004604:	bf00      	nop
 8004606:	e10a      	b.n	800481e <UART_SetConfig+0x34a>
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4a71      	ldr	r2, [pc, #452]	; (80047d4 <UART_SetConfig+0x300>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d120      	bne.n	8004654 <UART_SetConfig+0x180>
 8004612:	4b6e      	ldr	r3, [pc, #440]	; (80047cc <UART_SetConfig+0x2f8>)
 8004614:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004618:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800461c:	2b10      	cmp	r3, #16
 800461e:	d00f      	beq.n	8004640 <UART_SetConfig+0x16c>
 8004620:	2b10      	cmp	r3, #16
 8004622:	d802      	bhi.n	800462a <UART_SetConfig+0x156>
 8004624:	2b00      	cmp	r3, #0
 8004626:	d005      	beq.n	8004634 <UART_SetConfig+0x160>
 8004628:	e010      	b.n	800464c <UART_SetConfig+0x178>
 800462a:	2b20      	cmp	r3, #32
 800462c:	d005      	beq.n	800463a <UART_SetConfig+0x166>
 800462e:	2b30      	cmp	r3, #48	; 0x30
 8004630:	d009      	beq.n	8004646 <UART_SetConfig+0x172>
 8004632:	e00b      	b.n	800464c <UART_SetConfig+0x178>
 8004634:	2300      	movs	r3, #0
 8004636:	77fb      	strb	r3, [r7, #31]
 8004638:	e0f1      	b.n	800481e <UART_SetConfig+0x34a>
 800463a:	2302      	movs	r3, #2
 800463c:	77fb      	strb	r3, [r7, #31]
 800463e:	e0ee      	b.n	800481e <UART_SetConfig+0x34a>
 8004640:	2304      	movs	r3, #4
 8004642:	77fb      	strb	r3, [r7, #31]
 8004644:	e0eb      	b.n	800481e <UART_SetConfig+0x34a>
 8004646:	2308      	movs	r3, #8
 8004648:	77fb      	strb	r3, [r7, #31]
 800464a:	e0e8      	b.n	800481e <UART_SetConfig+0x34a>
 800464c:	2310      	movs	r3, #16
 800464e:	77fb      	strb	r3, [r7, #31]
 8004650:	bf00      	nop
 8004652:	e0e4      	b.n	800481e <UART_SetConfig+0x34a>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4a5f      	ldr	r2, [pc, #380]	; (80047d8 <UART_SetConfig+0x304>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d120      	bne.n	80046a0 <UART_SetConfig+0x1cc>
 800465e:	4b5b      	ldr	r3, [pc, #364]	; (80047cc <UART_SetConfig+0x2f8>)
 8004660:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004664:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004668:	2b40      	cmp	r3, #64	; 0x40
 800466a:	d00f      	beq.n	800468c <UART_SetConfig+0x1b8>
 800466c:	2b40      	cmp	r3, #64	; 0x40
 800466e:	d802      	bhi.n	8004676 <UART_SetConfig+0x1a2>
 8004670:	2b00      	cmp	r3, #0
 8004672:	d005      	beq.n	8004680 <UART_SetConfig+0x1ac>
 8004674:	e010      	b.n	8004698 <UART_SetConfig+0x1c4>
 8004676:	2b80      	cmp	r3, #128	; 0x80
 8004678:	d005      	beq.n	8004686 <UART_SetConfig+0x1b2>
 800467a:	2bc0      	cmp	r3, #192	; 0xc0
 800467c:	d009      	beq.n	8004692 <UART_SetConfig+0x1be>
 800467e:	e00b      	b.n	8004698 <UART_SetConfig+0x1c4>
 8004680:	2300      	movs	r3, #0
 8004682:	77fb      	strb	r3, [r7, #31]
 8004684:	e0cb      	b.n	800481e <UART_SetConfig+0x34a>
 8004686:	2302      	movs	r3, #2
 8004688:	77fb      	strb	r3, [r7, #31]
 800468a:	e0c8      	b.n	800481e <UART_SetConfig+0x34a>
 800468c:	2304      	movs	r3, #4
 800468e:	77fb      	strb	r3, [r7, #31]
 8004690:	e0c5      	b.n	800481e <UART_SetConfig+0x34a>
 8004692:	2308      	movs	r3, #8
 8004694:	77fb      	strb	r3, [r7, #31]
 8004696:	e0c2      	b.n	800481e <UART_SetConfig+0x34a>
 8004698:	2310      	movs	r3, #16
 800469a:	77fb      	strb	r3, [r7, #31]
 800469c:	bf00      	nop
 800469e:	e0be      	b.n	800481e <UART_SetConfig+0x34a>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	4a4d      	ldr	r2, [pc, #308]	; (80047dc <UART_SetConfig+0x308>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d124      	bne.n	80046f4 <UART_SetConfig+0x220>
 80046aa:	4b48      	ldr	r3, [pc, #288]	; (80047cc <UART_SetConfig+0x2f8>)
 80046ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046b8:	d012      	beq.n	80046e0 <UART_SetConfig+0x20c>
 80046ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046be:	d802      	bhi.n	80046c6 <UART_SetConfig+0x1f2>
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d007      	beq.n	80046d4 <UART_SetConfig+0x200>
 80046c4:	e012      	b.n	80046ec <UART_SetConfig+0x218>
 80046c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80046ca:	d006      	beq.n	80046da <UART_SetConfig+0x206>
 80046cc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80046d0:	d009      	beq.n	80046e6 <UART_SetConfig+0x212>
 80046d2:	e00b      	b.n	80046ec <UART_SetConfig+0x218>
 80046d4:	2300      	movs	r3, #0
 80046d6:	77fb      	strb	r3, [r7, #31]
 80046d8:	e0a1      	b.n	800481e <UART_SetConfig+0x34a>
 80046da:	2302      	movs	r3, #2
 80046dc:	77fb      	strb	r3, [r7, #31]
 80046de:	e09e      	b.n	800481e <UART_SetConfig+0x34a>
 80046e0:	2304      	movs	r3, #4
 80046e2:	77fb      	strb	r3, [r7, #31]
 80046e4:	e09b      	b.n	800481e <UART_SetConfig+0x34a>
 80046e6:	2308      	movs	r3, #8
 80046e8:	77fb      	strb	r3, [r7, #31]
 80046ea:	e098      	b.n	800481e <UART_SetConfig+0x34a>
 80046ec:	2310      	movs	r3, #16
 80046ee:	77fb      	strb	r3, [r7, #31]
 80046f0:	bf00      	nop
 80046f2:	e094      	b.n	800481e <UART_SetConfig+0x34a>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4a39      	ldr	r2, [pc, #228]	; (80047e0 <UART_SetConfig+0x30c>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d124      	bne.n	8004748 <UART_SetConfig+0x274>
 80046fe:	4b33      	ldr	r3, [pc, #204]	; (80047cc <UART_SetConfig+0x2f8>)
 8004700:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004704:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004708:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800470c:	d012      	beq.n	8004734 <UART_SetConfig+0x260>
 800470e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004712:	d802      	bhi.n	800471a <UART_SetConfig+0x246>
 8004714:	2b00      	cmp	r3, #0
 8004716:	d007      	beq.n	8004728 <UART_SetConfig+0x254>
 8004718:	e012      	b.n	8004740 <UART_SetConfig+0x26c>
 800471a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800471e:	d006      	beq.n	800472e <UART_SetConfig+0x25a>
 8004720:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004724:	d009      	beq.n	800473a <UART_SetConfig+0x266>
 8004726:	e00b      	b.n	8004740 <UART_SetConfig+0x26c>
 8004728:	2301      	movs	r3, #1
 800472a:	77fb      	strb	r3, [r7, #31]
 800472c:	e077      	b.n	800481e <UART_SetConfig+0x34a>
 800472e:	2302      	movs	r3, #2
 8004730:	77fb      	strb	r3, [r7, #31]
 8004732:	e074      	b.n	800481e <UART_SetConfig+0x34a>
 8004734:	2304      	movs	r3, #4
 8004736:	77fb      	strb	r3, [r7, #31]
 8004738:	e071      	b.n	800481e <UART_SetConfig+0x34a>
 800473a:	2308      	movs	r3, #8
 800473c:	77fb      	strb	r3, [r7, #31]
 800473e:	e06e      	b.n	800481e <UART_SetConfig+0x34a>
 8004740:	2310      	movs	r3, #16
 8004742:	77fb      	strb	r3, [r7, #31]
 8004744:	bf00      	nop
 8004746:	e06a      	b.n	800481e <UART_SetConfig+0x34a>
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4a25      	ldr	r2, [pc, #148]	; (80047e4 <UART_SetConfig+0x310>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d124      	bne.n	800479c <UART_SetConfig+0x2c8>
 8004752:	4b1e      	ldr	r3, [pc, #120]	; (80047cc <UART_SetConfig+0x2f8>)
 8004754:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004758:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800475c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004760:	d012      	beq.n	8004788 <UART_SetConfig+0x2b4>
 8004762:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004766:	d802      	bhi.n	800476e <UART_SetConfig+0x29a>
 8004768:	2b00      	cmp	r3, #0
 800476a:	d007      	beq.n	800477c <UART_SetConfig+0x2a8>
 800476c:	e012      	b.n	8004794 <UART_SetConfig+0x2c0>
 800476e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004772:	d006      	beq.n	8004782 <UART_SetConfig+0x2ae>
 8004774:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004778:	d009      	beq.n	800478e <UART_SetConfig+0x2ba>
 800477a:	e00b      	b.n	8004794 <UART_SetConfig+0x2c0>
 800477c:	2300      	movs	r3, #0
 800477e:	77fb      	strb	r3, [r7, #31]
 8004780:	e04d      	b.n	800481e <UART_SetConfig+0x34a>
 8004782:	2302      	movs	r3, #2
 8004784:	77fb      	strb	r3, [r7, #31]
 8004786:	e04a      	b.n	800481e <UART_SetConfig+0x34a>
 8004788:	2304      	movs	r3, #4
 800478a:	77fb      	strb	r3, [r7, #31]
 800478c:	e047      	b.n	800481e <UART_SetConfig+0x34a>
 800478e:	2308      	movs	r3, #8
 8004790:	77fb      	strb	r3, [r7, #31]
 8004792:	e044      	b.n	800481e <UART_SetConfig+0x34a>
 8004794:	2310      	movs	r3, #16
 8004796:	77fb      	strb	r3, [r7, #31]
 8004798:	bf00      	nop
 800479a:	e040      	b.n	800481e <UART_SetConfig+0x34a>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4a11      	ldr	r2, [pc, #68]	; (80047e8 <UART_SetConfig+0x314>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d139      	bne.n	800481a <UART_SetConfig+0x346>
 80047a6:	4b09      	ldr	r3, [pc, #36]	; (80047cc <UART_SetConfig+0x2f8>)
 80047a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047ac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80047b0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80047b4:	d027      	beq.n	8004806 <UART_SetConfig+0x332>
 80047b6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80047ba:	d817      	bhi.n	80047ec <UART_SetConfig+0x318>
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d01c      	beq.n	80047fa <UART_SetConfig+0x326>
 80047c0:	e027      	b.n	8004812 <UART_SetConfig+0x33e>
 80047c2:	bf00      	nop
 80047c4:	efff69f3 	.word	0xefff69f3
 80047c8:	40011000 	.word	0x40011000
 80047cc:	40023800 	.word	0x40023800
 80047d0:	40004400 	.word	0x40004400
 80047d4:	40004800 	.word	0x40004800
 80047d8:	40004c00 	.word	0x40004c00
 80047dc:	40005000 	.word	0x40005000
 80047e0:	40011400 	.word	0x40011400
 80047e4:	40007800 	.word	0x40007800
 80047e8:	40007c00 	.word	0x40007c00
 80047ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047f0:	d006      	beq.n	8004800 <UART_SetConfig+0x32c>
 80047f2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80047f6:	d009      	beq.n	800480c <UART_SetConfig+0x338>
 80047f8:	e00b      	b.n	8004812 <UART_SetConfig+0x33e>
 80047fa:	2300      	movs	r3, #0
 80047fc:	77fb      	strb	r3, [r7, #31]
 80047fe:	e00e      	b.n	800481e <UART_SetConfig+0x34a>
 8004800:	2302      	movs	r3, #2
 8004802:	77fb      	strb	r3, [r7, #31]
 8004804:	e00b      	b.n	800481e <UART_SetConfig+0x34a>
 8004806:	2304      	movs	r3, #4
 8004808:	77fb      	strb	r3, [r7, #31]
 800480a:	e008      	b.n	800481e <UART_SetConfig+0x34a>
 800480c:	2308      	movs	r3, #8
 800480e:	77fb      	strb	r3, [r7, #31]
 8004810:	e005      	b.n	800481e <UART_SetConfig+0x34a>
 8004812:	2310      	movs	r3, #16
 8004814:	77fb      	strb	r3, [r7, #31]
 8004816:	bf00      	nop
 8004818:	e001      	b.n	800481e <UART_SetConfig+0x34a>
 800481a:	2310      	movs	r3, #16
 800481c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	69db      	ldr	r3, [r3, #28]
 8004822:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004826:	d15b      	bne.n	80048e0 <UART_SetConfig+0x40c>
  {
    switch (clocksource)
 8004828:	7ffb      	ldrb	r3, [r7, #31]
 800482a:	2b08      	cmp	r3, #8
 800482c:	d827      	bhi.n	800487e <UART_SetConfig+0x3aa>
 800482e:	a201      	add	r2, pc, #4	; (adr r2, 8004834 <UART_SetConfig+0x360>)
 8004830:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004834:	08004859 	.word	0x08004859
 8004838:	08004861 	.word	0x08004861
 800483c:	08004869 	.word	0x08004869
 8004840:	0800487f 	.word	0x0800487f
 8004844:	0800486f 	.word	0x0800486f
 8004848:	0800487f 	.word	0x0800487f
 800484c:	0800487f 	.word	0x0800487f
 8004850:	0800487f 	.word	0x0800487f
 8004854:	08004877 	.word	0x08004877
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004858:	f7fe fdf8 	bl	800344c <HAL_RCC_GetPCLK1Freq>
 800485c:	61b8      	str	r0, [r7, #24]
        break;
 800485e:	e013      	b.n	8004888 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004860:	f7fe fe08 	bl	8003474 <HAL_RCC_GetPCLK2Freq>
 8004864:	61b8      	str	r0, [r7, #24]
        break;
 8004866:	e00f      	b.n	8004888 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004868:	4b49      	ldr	r3, [pc, #292]	; (8004990 <UART_SetConfig+0x4bc>)
 800486a:	61bb      	str	r3, [r7, #24]
        break;
 800486c:	e00c      	b.n	8004888 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800486e:	f7fe fd09 	bl	8003284 <HAL_RCC_GetSysClockFreq>
 8004872:	61b8      	str	r0, [r7, #24]
        break;
 8004874:	e008      	b.n	8004888 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004876:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800487a:	61bb      	str	r3, [r7, #24]
        break;
 800487c:	e004      	b.n	8004888 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800487e:	2300      	movs	r3, #0
 8004880:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004882:	2301      	movs	r3, #1
 8004884:	77bb      	strb	r3, [r7, #30]
        break;
 8004886:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004888:	69bb      	ldr	r3, [r7, #24]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d074      	beq.n	8004978 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800488e:	69bb      	ldr	r3, [r7, #24]
 8004890:	005a      	lsls	r2, r3, #1
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	685b      	ldr	r3, [r3, #4]
 8004896:	085b      	lsrs	r3, r3, #1
 8004898:	441a      	add	r2, r3
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	fbb2 f3f3 	udiv	r3, r2, r3
 80048a2:	b29b      	uxth	r3, r3
 80048a4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80048a6:	693b      	ldr	r3, [r7, #16]
 80048a8:	2b0f      	cmp	r3, #15
 80048aa:	d916      	bls.n	80048da <UART_SetConfig+0x406>
 80048ac:	693b      	ldr	r3, [r7, #16]
 80048ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048b2:	d212      	bcs.n	80048da <UART_SetConfig+0x406>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80048b4:	693b      	ldr	r3, [r7, #16]
 80048b6:	b29b      	uxth	r3, r3
 80048b8:	f023 030f 	bic.w	r3, r3, #15
 80048bc:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80048be:	693b      	ldr	r3, [r7, #16]
 80048c0:	085b      	lsrs	r3, r3, #1
 80048c2:	b29b      	uxth	r3, r3
 80048c4:	f003 0307 	and.w	r3, r3, #7
 80048c8:	b29a      	uxth	r2, r3
 80048ca:	89fb      	ldrh	r3, [r7, #14]
 80048cc:	4313      	orrs	r3, r2
 80048ce:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	89fa      	ldrh	r2, [r7, #14]
 80048d6:	60da      	str	r2, [r3, #12]
 80048d8:	e04e      	b.n	8004978 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80048da:	2301      	movs	r3, #1
 80048dc:	77bb      	strb	r3, [r7, #30]
 80048de:	e04b      	b.n	8004978 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80048e0:	7ffb      	ldrb	r3, [r7, #31]
 80048e2:	2b08      	cmp	r3, #8
 80048e4:	d827      	bhi.n	8004936 <UART_SetConfig+0x462>
 80048e6:	a201      	add	r2, pc, #4	; (adr r2, 80048ec <UART_SetConfig+0x418>)
 80048e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048ec:	08004911 	.word	0x08004911
 80048f0:	08004919 	.word	0x08004919
 80048f4:	08004921 	.word	0x08004921
 80048f8:	08004937 	.word	0x08004937
 80048fc:	08004927 	.word	0x08004927
 8004900:	08004937 	.word	0x08004937
 8004904:	08004937 	.word	0x08004937
 8004908:	08004937 	.word	0x08004937
 800490c:	0800492f 	.word	0x0800492f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004910:	f7fe fd9c 	bl	800344c <HAL_RCC_GetPCLK1Freq>
 8004914:	61b8      	str	r0, [r7, #24]
        break;
 8004916:	e013      	b.n	8004940 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004918:	f7fe fdac 	bl	8003474 <HAL_RCC_GetPCLK2Freq>
 800491c:	61b8      	str	r0, [r7, #24]
        break;
 800491e:	e00f      	b.n	8004940 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004920:	4b1b      	ldr	r3, [pc, #108]	; (8004990 <UART_SetConfig+0x4bc>)
 8004922:	61bb      	str	r3, [r7, #24]
        break;
 8004924:	e00c      	b.n	8004940 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004926:	f7fe fcad 	bl	8003284 <HAL_RCC_GetSysClockFreq>
 800492a:	61b8      	str	r0, [r7, #24]
        break;
 800492c:	e008      	b.n	8004940 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800492e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004932:	61bb      	str	r3, [r7, #24]
        break;
 8004934:	e004      	b.n	8004940 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8004936:	2300      	movs	r3, #0
 8004938:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800493a:	2301      	movs	r3, #1
 800493c:	77bb      	strb	r3, [r7, #30]
        break;
 800493e:	bf00      	nop
    }

    if (pclk != 0U)
 8004940:	69bb      	ldr	r3, [r7, #24]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d018      	beq.n	8004978 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	685b      	ldr	r3, [r3, #4]
 800494a:	085a      	lsrs	r2, r3, #1
 800494c:	69bb      	ldr	r3, [r7, #24]
 800494e:	441a      	add	r2, r3
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	685b      	ldr	r3, [r3, #4]
 8004954:	fbb2 f3f3 	udiv	r3, r2, r3
 8004958:	b29b      	uxth	r3, r3
 800495a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800495c:	693b      	ldr	r3, [r7, #16]
 800495e:	2b0f      	cmp	r3, #15
 8004960:	d908      	bls.n	8004974 <UART_SetConfig+0x4a0>
 8004962:	693b      	ldr	r3, [r7, #16]
 8004964:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004968:	d204      	bcs.n	8004974 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = usartdiv;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	693a      	ldr	r2, [r7, #16]
 8004970:	60da      	str	r2, [r3, #12]
 8004972:	e001      	b.n	8004978 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004974:	2301      	movs	r3, #1
 8004976:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2200      	movs	r2, #0
 800497c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2200      	movs	r2, #0
 8004982:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004984:	7fbb      	ldrb	r3, [r7, #30]
}
 8004986:	4618      	mov	r0, r3
 8004988:	3720      	adds	r7, #32
 800498a:	46bd      	mov	sp, r7
 800498c:	bd80      	pop	{r7, pc}
 800498e:	bf00      	nop
 8004990:	00f42400 	.word	0x00f42400

08004994 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004994:	b480      	push	{r7}
 8004996:	b083      	sub	sp, #12
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049a0:	f003 0301 	and.w	r3, r3, #1
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d00a      	beq.n	80049be <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	685b      	ldr	r3, [r3, #4]
 80049ae:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	430a      	orrs	r2, r1
 80049bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049c2:	f003 0302 	and.w	r3, r3, #2
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d00a      	beq.n	80049e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	685b      	ldr	r3, [r3, #4]
 80049d0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	430a      	orrs	r2, r1
 80049de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049e4:	f003 0304 	and.w	r3, r3, #4
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d00a      	beq.n	8004a02 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	685b      	ldr	r3, [r3, #4]
 80049f2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	430a      	orrs	r2, r1
 8004a00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a06:	f003 0308 	and.w	r3, r3, #8
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d00a      	beq.n	8004a24 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	685b      	ldr	r3, [r3, #4]
 8004a14:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	430a      	orrs	r2, r1
 8004a22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a28:	f003 0310 	and.w	r3, r3, #16
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d00a      	beq.n	8004a46 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	689b      	ldr	r3, [r3, #8]
 8004a36:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	430a      	orrs	r2, r1
 8004a44:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a4a:	f003 0320 	and.w	r3, r3, #32
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d00a      	beq.n	8004a68 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	689b      	ldr	r3, [r3, #8]
 8004a58:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	430a      	orrs	r2, r1
 8004a66:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d01a      	beq.n	8004aaa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	685b      	ldr	r3, [r3, #4]
 8004a7a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	430a      	orrs	r2, r1
 8004a88:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a8e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a92:	d10a      	bne.n	8004aaa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	430a      	orrs	r2, r1
 8004aa8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d00a      	beq.n	8004acc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	685b      	ldr	r3, [r3, #4]
 8004abc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	430a      	orrs	r2, r1
 8004aca:	605a      	str	r2, [r3, #4]
  }
}
 8004acc:	bf00      	nop
 8004ace:	370c      	adds	r7, #12
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad6:	4770      	bx	lr

08004ad8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b086      	sub	sp, #24
 8004adc:	af02      	add	r7, sp, #8
 8004ade:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004ae8:	f7fc f97e 	bl	8000de8 <HAL_GetTick>
 8004aec:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f003 0308 	and.w	r3, r3, #8
 8004af8:	2b08      	cmp	r3, #8
 8004afa:	d10e      	bne.n	8004b1a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004afc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004b00:	9300      	str	r3, [sp, #0]
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	2200      	movs	r2, #0
 8004b06:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004b0a:	6878      	ldr	r0, [r7, #4]
 8004b0c:	f000 f82d 	bl	8004b6a <UART_WaitOnFlagUntilTimeout>
 8004b10:	4603      	mov	r3, r0
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d001      	beq.n	8004b1a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b16:	2303      	movs	r3, #3
 8004b18:	e023      	b.n	8004b62 <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f003 0304 	and.w	r3, r3, #4
 8004b24:	2b04      	cmp	r3, #4
 8004b26:	d10e      	bne.n	8004b46 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b28:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004b2c:	9300      	str	r3, [sp, #0]
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	2200      	movs	r2, #0
 8004b32:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004b36:	6878      	ldr	r0, [r7, #4]
 8004b38:	f000 f817 	bl	8004b6a <UART_WaitOnFlagUntilTimeout>
 8004b3c:	4603      	mov	r3, r0
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d001      	beq.n	8004b46 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b42:	2303      	movs	r3, #3
 8004b44:	e00d      	b.n	8004b62 <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2220      	movs	r2, #32
 8004b4a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2220      	movs	r2, #32
 8004b50:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2200      	movs	r2, #0
 8004b56:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004b60:	2300      	movs	r3, #0
}
 8004b62:	4618      	mov	r0, r3
 8004b64:	3710      	adds	r7, #16
 8004b66:	46bd      	mov	sp, r7
 8004b68:	bd80      	pop	{r7, pc}

08004b6a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004b6a:	b580      	push	{r7, lr}
 8004b6c:	b084      	sub	sp, #16
 8004b6e:	af00      	add	r7, sp, #0
 8004b70:	60f8      	str	r0, [r7, #12]
 8004b72:	60b9      	str	r1, [r7, #8]
 8004b74:	603b      	str	r3, [r7, #0]
 8004b76:	4613      	mov	r3, r2
 8004b78:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b7a:	e05e      	b.n	8004c3a <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b7c:	69bb      	ldr	r3, [r7, #24]
 8004b7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b82:	d05a      	beq.n	8004c3a <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b84:	f7fc f930 	bl	8000de8 <HAL_GetTick>
 8004b88:	4602      	mov	r2, r0
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	1ad3      	subs	r3, r2, r3
 8004b8e:	69ba      	ldr	r2, [r7, #24]
 8004b90:	429a      	cmp	r2, r3
 8004b92:	d302      	bcc.n	8004b9a <UART_WaitOnFlagUntilTimeout+0x30>
 8004b94:	69bb      	ldr	r3, [r7, #24]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d11b      	bne.n	8004bd2 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	681a      	ldr	r2, [r3, #0]
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004ba8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	689a      	ldr	r2, [r3, #8]
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f022 0201 	bic.w	r2, r2, #1
 8004bb8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	2220      	movs	r2, #32
 8004bbe:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	2220      	movs	r2, #32
 8004bc4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	2200      	movs	r2, #0
 8004bca:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004bce:	2303      	movs	r3, #3
 8004bd0:	e043      	b.n	8004c5a <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f003 0304 	and.w	r3, r3, #4
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d02c      	beq.n	8004c3a <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	69db      	ldr	r3, [r3, #28]
 8004be6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004bea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004bee:	d124      	bne.n	8004c3a <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004bf8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	681a      	ldr	r2, [r3, #0]
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004c08:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	689a      	ldr	r2, [r3, #8]
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f022 0201 	bic.w	r2, r2, #1
 8004c18:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	2220      	movs	r2, #32
 8004c1e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	2220      	movs	r2, #32
 8004c24:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	2220      	movs	r2, #32
 8004c2a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	2200      	movs	r2, #0
 8004c32:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004c36:	2303      	movs	r3, #3
 8004c38:	e00f      	b.n	8004c5a <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	69da      	ldr	r2, [r3, #28]
 8004c40:	68bb      	ldr	r3, [r7, #8]
 8004c42:	4013      	ands	r3, r2
 8004c44:	68ba      	ldr	r2, [r7, #8]
 8004c46:	429a      	cmp	r2, r3
 8004c48:	bf0c      	ite	eq
 8004c4a:	2301      	moveq	r3, #1
 8004c4c:	2300      	movne	r3, #0
 8004c4e:	b2db      	uxtb	r3, r3
 8004c50:	461a      	mov	r2, r3
 8004c52:	79fb      	ldrb	r3, [r7, #7]
 8004c54:	429a      	cmp	r2, r3
 8004c56:	d091      	beq.n	8004b7c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004c58:	2300      	movs	r3, #0
}
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	3710      	adds	r7, #16
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	bd80      	pop	{r7, pc}
	...

08004c64 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b084      	sub	sp, #16
 8004c68:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8004c6a:	4b8d      	ldr	r3, [pc, #564]	; (8004ea0 <MX_LWIP_Init+0x23c>)
 8004c6c:	22c0      	movs	r2, #192	; 0xc0
 8004c6e:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8004c70:	4b8b      	ldr	r3, [pc, #556]	; (8004ea0 <MX_LWIP_Init+0x23c>)
 8004c72:	22a8      	movs	r2, #168	; 0xa8
 8004c74:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 178;
 8004c76:	4b8a      	ldr	r3, [pc, #552]	; (8004ea0 <MX_LWIP_Init+0x23c>)
 8004c78:	22b2      	movs	r2, #178	; 0xb2
 8004c7a:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 104;
 8004c7c:	4b88      	ldr	r3, [pc, #544]	; (8004ea0 <MX_LWIP_Init+0x23c>)
 8004c7e:	2268      	movs	r2, #104	; 0x68
 8004c80:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8004c82:	4b88      	ldr	r3, [pc, #544]	; (8004ea4 <MX_LWIP_Init+0x240>)
 8004c84:	22ff      	movs	r2, #255	; 0xff
 8004c86:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8004c88:	4b86      	ldr	r3, [pc, #536]	; (8004ea4 <MX_LWIP_Init+0x240>)
 8004c8a:	22ff      	movs	r2, #255	; 0xff
 8004c8c:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8004c8e:	4b85      	ldr	r3, [pc, #532]	; (8004ea4 <MX_LWIP_Init+0x240>)
 8004c90:	22ff      	movs	r2, #255	; 0xff
 8004c92:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8004c94:	4b83      	ldr	r3, [pc, #524]	; (8004ea4 <MX_LWIP_Init+0x240>)
 8004c96:	2200      	movs	r2, #0
 8004c98:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 8004c9a:	4b83      	ldr	r3, [pc, #524]	; (8004ea8 <MX_LWIP_Init+0x244>)
 8004c9c:	22c0      	movs	r2, #192	; 0xc0
 8004c9e:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8004ca0:	4b81      	ldr	r3, [pc, #516]	; (8004ea8 <MX_LWIP_Init+0x244>)
 8004ca2:	22a8      	movs	r2, #168	; 0xa8
 8004ca4:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 178;
 8004ca6:	4b80      	ldr	r3, [pc, #512]	; (8004ea8 <MX_LWIP_Init+0x244>)
 8004ca8:	22b2      	movs	r2, #178	; 0xb2
 8004caa:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8004cac:	4b7e      	ldr	r3, [pc, #504]	; (8004ea8 <MX_LWIP_Init+0x244>)
 8004cae:	2201      	movs	r2, #1
 8004cb0:	70da      	strb	r2, [r3, #3]

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 8004cb2:	f000 fbff 	bl	80054b4 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8004cb6:	4b7a      	ldr	r3, [pc, #488]	; (8004ea0 <MX_LWIP_Init+0x23c>)
 8004cb8:	781b      	ldrb	r3, [r3, #0]
 8004cba:	061a      	lsls	r2, r3, #24
 8004cbc:	4b78      	ldr	r3, [pc, #480]	; (8004ea0 <MX_LWIP_Init+0x23c>)
 8004cbe:	785b      	ldrb	r3, [r3, #1]
 8004cc0:	041b      	lsls	r3, r3, #16
 8004cc2:	431a      	orrs	r2, r3
 8004cc4:	4b76      	ldr	r3, [pc, #472]	; (8004ea0 <MX_LWIP_Init+0x23c>)
 8004cc6:	789b      	ldrb	r3, [r3, #2]
 8004cc8:	021b      	lsls	r3, r3, #8
 8004cca:	4313      	orrs	r3, r2
 8004ccc:	4a74      	ldr	r2, [pc, #464]	; (8004ea0 <MX_LWIP_Init+0x23c>)
 8004cce:	78d2      	ldrb	r2, [r2, #3]
 8004cd0:	4313      	orrs	r3, r2
 8004cd2:	061a      	lsls	r2, r3, #24
 8004cd4:	4b72      	ldr	r3, [pc, #456]	; (8004ea0 <MX_LWIP_Init+0x23c>)
 8004cd6:	781b      	ldrb	r3, [r3, #0]
 8004cd8:	0619      	lsls	r1, r3, #24
 8004cda:	4b71      	ldr	r3, [pc, #452]	; (8004ea0 <MX_LWIP_Init+0x23c>)
 8004cdc:	785b      	ldrb	r3, [r3, #1]
 8004cde:	041b      	lsls	r3, r3, #16
 8004ce0:	4319      	orrs	r1, r3
 8004ce2:	4b6f      	ldr	r3, [pc, #444]	; (8004ea0 <MX_LWIP_Init+0x23c>)
 8004ce4:	789b      	ldrb	r3, [r3, #2]
 8004ce6:	021b      	lsls	r3, r3, #8
 8004ce8:	430b      	orrs	r3, r1
 8004cea:	496d      	ldr	r1, [pc, #436]	; (8004ea0 <MX_LWIP_Init+0x23c>)
 8004cec:	78c9      	ldrb	r1, [r1, #3]
 8004cee:	430b      	orrs	r3, r1
 8004cf0:	021b      	lsls	r3, r3, #8
 8004cf2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004cf6:	431a      	orrs	r2, r3
 8004cf8:	4b69      	ldr	r3, [pc, #420]	; (8004ea0 <MX_LWIP_Init+0x23c>)
 8004cfa:	781b      	ldrb	r3, [r3, #0]
 8004cfc:	0619      	lsls	r1, r3, #24
 8004cfe:	4b68      	ldr	r3, [pc, #416]	; (8004ea0 <MX_LWIP_Init+0x23c>)
 8004d00:	785b      	ldrb	r3, [r3, #1]
 8004d02:	041b      	lsls	r3, r3, #16
 8004d04:	4319      	orrs	r1, r3
 8004d06:	4b66      	ldr	r3, [pc, #408]	; (8004ea0 <MX_LWIP_Init+0x23c>)
 8004d08:	789b      	ldrb	r3, [r3, #2]
 8004d0a:	021b      	lsls	r3, r3, #8
 8004d0c:	430b      	orrs	r3, r1
 8004d0e:	4964      	ldr	r1, [pc, #400]	; (8004ea0 <MX_LWIP_Init+0x23c>)
 8004d10:	78c9      	ldrb	r1, [r1, #3]
 8004d12:	430b      	orrs	r3, r1
 8004d14:	0a1b      	lsrs	r3, r3, #8
 8004d16:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004d1a:	431a      	orrs	r2, r3
 8004d1c:	4b60      	ldr	r3, [pc, #384]	; (8004ea0 <MX_LWIP_Init+0x23c>)
 8004d1e:	781b      	ldrb	r3, [r3, #0]
 8004d20:	0619      	lsls	r1, r3, #24
 8004d22:	4b5f      	ldr	r3, [pc, #380]	; (8004ea0 <MX_LWIP_Init+0x23c>)
 8004d24:	785b      	ldrb	r3, [r3, #1]
 8004d26:	041b      	lsls	r3, r3, #16
 8004d28:	4319      	orrs	r1, r3
 8004d2a:	4b5d      	ldr	r3, [pc, #372]	; (8004ea0 <MX_LWIP_Init+0x23c>)
 8004d2c:	789b      	ldrb	r3, [r3, #2]
 8004d2e:	021b      	lsls	r3, r3, #8
 8004d30:	430b      	orrs	r3, r1
 8004d32:	495b      	ldr	r1, [pc, #364]	; (8004ea0 <MX_LWIP_Init+0x23c>)
 8004d34:	78c9      	ldrb	r1, [r1, #3]
 8004d36:	430b      	orrs	r3, r1
 8004d38:	0e1b      	lsrs	r3, r3, #24
 8004d3a:	4313      	orrs	r3, r2
 8004d3c:	4a5b      	ldr	r2, [pc, #364]	; (8004eac <MX_LWIP_Init+0x248>)
 8004d3e:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8004d40:	4b58      	ldr	r3, [pc, #352]	; (8004ea4 <MX_LWIP_Init+0x240>)
 8004d42:	781b      	ldrb	r3, [r3, #0]
 8004d44:	061a      	lsls	r2, r3, #24
 8004d46:	4b57      	ldr	r3, [pc, #348]	; (8004ea4 <MX_LWIP_Init+0x240>)
 8004d48:	785b      	ldrb	r3, [r3, #1]
 8004d4a:	041b      	lsls	r3, r3, #16
 8004d4c:	431a      	orrs	r2, r3
 8004d4e:	4b55      	ldr	r3, [pc, #340]	; (8004ea4 <MX_LWIP_Init+0x240>)
 8004d50:	789b      	ldrb	r3, [r3, #2]
 8004d52:	021b      	lsls	r3, r3, #8
 8004d54:	4313      	orrs	r3, r2
 8004d56:	4a53      	ldr	r2, [pc, #332]	; (8004ea4 <MX_LWIP_Init+0x240>)
 8004d58:	78d2      	ldrb	r2, [r2, #3]
 8004d5a:	4313      	orrs	r3, r2
 8004d5c:	061a      	lsls	r2, r3, #24
 8004d5e:	4b51      	ldr	r3, [pc, #324]	; (8004ea4 <MX_LWIP_Init+0x240>)
 8004d60:	781b      	ldrb	r3, [r3, #0]
 8004d62:	0619      	lsls	r1, r3, #24
 8004d64:	4b4f      	ldr	r3, [pc, #316]	; (8004ea4 <MX_LWIP_Init+0x240>)
 8004d66:	785b      	ldrb	r3, [r3, #1]
 8004d68:	041b      	lsls	r3, r3, #16
 8004d6a:	4319      	orrs	r1, r3
 8004d6c:	4b4d      	ldr	r3, [pc, #308]	; (8004ea4 <MX_LWIP_Init+0x240>)
 8004d6e:	789b      	ldrb	r3, [r3, #2]
 8004d70:	021b      	lsls	r3, r3, #8
 8004d72:	430b      	orrs	r3, r1
 8004d74:	494b      	ldr	r1, [pc, #300]	; (8004ea4 <MX_LWIP_Init+0x240>)
 8004d76:	78c9      	ldrb	r1, [r1, #3]
 8004d78:	430b      	orrs	r3, r1
 8004d7a:	021b      	lsls	r3, r3, #8
 8004d7c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004d80:	431a      	orrs	r2, r3
 8004d82:	4b48      	ldr	r3, [pc, #288]	; (8004ea4 <MX_LWIP_Init+0x240>)
 8004d84:	781b      	ldrb	r3, [r3, #0]
 8004d86:	0619      	lsls	r1, r3, #24
 8004d88:	4b46      	ldr	r3, [pc, #280]	; (8004ea4 <MX_LWIP_Init+0x240>)
 8004d8a:	785b      	ldrb	r3, [r3, #1]
 8004d8c:	041b      	lsls	r3, r3, #16
 8004d8e:	4319      	orrs	r1, r3
 8004d90:	4b44      	ldr	r3, [pc, #272]	; (8004ea4 <MX_LWIP_Init+0x240>)
 8004d92:	789b      	ldrb	r3, [r3, #2]
 8004d94:	021b      	lsls	r3, r3, #8
 8004d96:	430b      	orrs	r3, r1
 8004d98:	4942      	ldr	r1, [pc, #264]	; (8004ea4 <MX_LWIP_Init+0x240>)
 8004d9a:	78c9      	ldrb	r1, [r1, #3]
 8004d9c:	430b      	orrs	r3, r1
 8004d9e:	0a1b      	lsrs	r3, r3, #8
 8004da0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004da4:	431a      	orrs	r2, r3
 8004da6:	4b3f      	ldr	r3, [pc, #252]	; (8004ea4 <MX_LWIP_Init+0x240>)
 8004da8:	781b      	ldrb	r3, [r3, #0]
 8004daa:	0619      	lsls	r1, r3, #24
 8004dac:	4b3d      	ldr	r3, [pc, #244]	; (8004ea4 <MX_LWIP_Init+0x240>)
 8004dae:	785b      	ldrb	r3, [r3, #1]
 8004db0:	041b      	lsls	r3, r3, #16
 8004db2:	4319      	orrs	r1, r3
 8004db4:	4b3b      	ldr	r3, [pc, #236]	; (8004ea4 <MX_LWIP_Init+0x240>)
 8004db6:	789b      	ldrb	r3, [r3, #2]
 8004db8:	021b      	lsls	r3, r3, #8
 8004dba:	430b      	orrs	r3, r1
 8004dbc:	4939      	ldr	r1, [pc, #228]	; (8004ea4 <MX_LWIP_Init+0x240>)
 8004dbe:	78c9      	ldrb	r1, [r1, #3]
 8004dc0:	430b      	orrs	r3, r1
 8004dc2:	0e1b      	lsrs	r3, r3, #24
 8004dc4:	4313      	orrs	r3, r2
 8004dc6:	4a3a      	ldr	r2, [pc, #232]	; (8004eb0 <MX_LWIP_Init+0x24c>)
 8004dc8:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8004dca:	4b37      	ldr	r3, [pc, #220]	; (8004ea8 <MX_LWIP_Init+0x244>)
 8004dcc:	781b      	ldrb	r3, [r3, #0]
 8004dce:	061a      	lsls	r2, r3, #24
 8004dd0:	4b35      	ldr	r3, [pc, #212]	; (8004ea8 <MX_LWIP_Init+0x244>)
 8004dd2:	785b      	ldrb	r3, [r3, #1]
 8004dd4:	041b      	lsls	r3, r3, #16
 8004dd6:	431a      	orrs	r2, r3
 8004dd8:	4b33      	ldr	r3, [pc, #204]	; (8004ea8 <MX_LWIP_Init+0x244>)
 8004dda:	789b      	ldrb	r3, [r3, #2]
 8004ddc:	021b      	lsls	r3, r3, #8
 8004dde:	4313      	orrs	r3, r2
 8004de0:	4a31      	ldr	r2, [pc, #196]	; (8004ea8 <MX_LWIP_Init+0x244>)
 8004de2:	78d2      	ldrb	r2, [r2, #3]
 8004de4:	4313      	orrs	r3, r2
 8004de6:	061a      	lsls	r2, r3, #24
 8004de8:	4b2f      	ldr	r3, [pc, #188]	; (8004ea8 <MX_LWIP_Init+0x244>)
 8004dea:	781b      	ldrb	r3, [r3, #0]
 8004dec:	0619      	lsls	r1, r3, #24
 8004dee:	4b2e      	ldr	r3, [pc, #184]	; (8004ea8 <MX_LWIP_Init+0x244>)
 8004df0:	785b      	ldrb	r3, [r3, #1]
 8004df2:	041b      	lsls	r3, r3, #16
 8004df4:	4319      	orrs	r1, r3
 8004df6:	4b2c      	ldr	r3, [pc, #176]	; (8004ea8 <MX_LWIP_Init+0x244>)
 8004df8:	789b      	ldrb	r3, [r3, #2]
 8004dfa:	021b      	lsls	r3, r3, #8
 8004dfc:	430b      	orrs	r3, r1
 8004dfe:	492a      	ldr	r1, [pc, #168]	; (8004ea8 <MX_LWIP_Init+0x244>)
 8004e00:	78c9      	ldrb	r1, [r1, #3]
 8004e02:	430b      	orrs	r3, r1
 8004e04:	021b      	lsls	r3, r3, #8
 8004e06:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004e0a:	431a      	orrs	r2, r3
 8004e0c:	4b26      	ldr	r3, [pc, #152]	; (8004ea8 <MX_LWIP_Init+0x244>)
 8004e0e:	781b      	ldrb	r3, [r3, #0]
 8004e10:	0619      	lsls	r1, r3, #24
 8004e12:	4b25      	ldr	r3, [pc, #148]	; (8004ea8 <MX_LWIP_Init+0x244>)
 8004e14:	785b      	ldrb	r3, [r3, #1]
 8004e16:	041b      	lsls	r3, r3, #16
 8004e18:	4319      	orrs	r1, r3
 8004e1a:	4b23      	ldr	r3, [pc, #140]	; (8004ea8 <MX_LWIP_Init+0x244>)
 8004e1c:	789b      	ldrb	r3, [r3, #2]
 8004e1e:	021b      	lsls	r3, r3, #8
 8004e20:	430b      	orrs	r3, r1
 8004e22:	4921      	ldr	r1, [pc, #132]	; (8004ea8 <MX_LWIP_Init+0x244>)
 8004e24:	78c9      	ldrb	r1, [r1, #3]
 8004e26:	430b      	orrs	r3, r1
 8004e28:	0a1b      	lsrs	r3, r3, #8
 8004e2a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004e2e:	431a      	orrs	r2, r3
 8004e30:	4b1d      	ldr	r3, [pc, #116]	; (8004ea8 <MX_LWIP_Init+0x244>)
 8004e32:	781b      	ldrb	r3, [r3, #0]
 8004e34:	0619      	lsls	r1, r3, #24
 8004e36:	4b1c      	ldr	r3, [pc, #112]	; (8004ea8 <MX_LWIP_Init+0x244>)
 8004e38:	785b      	ldrb	r3, [r3, #1]
 8004e3a:	041b      	lsls	r3, r3, #16
 8004e3c:	4319      	orrs	r1, r3
 8004e3e:	4b1a      	ldr	r3, [pc, #104]	; (8004ea8 <MX_LWIP_Init+0x244>)
 8004e40:	789b      	ldrb	r3, [r3, #2]
 8004e42:	021b      	lsls	r3, r3, #8
 8004e44:	430b      	orrs	r3, r1
 8004e46:	4918      	ldr	r1, [pc, #96]	; (8004ea8 <MX_LWIP_Init+0x244>)
 8004e48:	78c9      	ldrb	r1, [r1, #3]
 8004e4a:	430b      	orrs	r3, r1
 8004e4c:	0e1b      	lsrs	r3, r3, #24
 8004e4e:	4313      	orrs	r3, r2
 8004e50:	4a18      	ldr	r2, [pc, #96]	; (8004eb4 <MX_LWIP_Init+0x250>)
 8004e52:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8004e54:	4b18      	ldr	r3, [pc, #96]	; (8004eb8 <MX_LWIP_Init+0x254>)
 8004e56:	9302      	str	r3, [sp, #8]
 8004e58:	4b18      	ldr	r3, [pc, #96]	; (8004ebc <MX_LWIP_Init+0x258>)
 8004e5a:	9301      	str	r3, [sp, #4]
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	9300      	str	r3, [sp, #0]
 8004e60:	4b14      	ldr	r3, [pc, #80]	; (8004eb4 <MX_LWIP_Init+0x250>)
 8004e62:	4a13      	ldr	r2, [pc, #76]	; (8004eb0 <MX_LWIP_Init+0x24c>)
 8004e64:	4911      	ldr	r1, [pc, #68]	; (8004eac <MX_LWIP_Init+0x248>)
 8004e66:	4816      	ldr	r0, [pc, #88]	; (8004ec0 <MX_LWIP_Init+0x25c>)
 8004e68:	f000 ffc8 	bl	8005dfc <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8004e6c:	4814      	ldr	r0, [pc, #80]	; (8004ec0 <MX_LWIP_Init+0x25c>)
 8004e6e:	f001 f973 	bl	8006158 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8004e72:	4b13      	ldr	r3, [pc, #76]	; (8004ec0 <MX_LWIP_Init+0x25c>)
 8004e74:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004e78:	089b      	lsrs	r3, r3, #2
 8004e7a:	f003 0301 	and.w	r3, r3, #1
 8004e7e:	b2db      	uxtb	r3, r3
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d003      	beq.n	8004e8c <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8004e84:	480e      	ldr	r0, [pc, #56]	; (8004ec0 <MX_LWIP_Init+0x25c>)
 8004e86:	f001 f977 	bl	8006178 <netif_set_up>
 8004e8a:	e002      	b.n	8004e92 <MX_LWIP_Init+0x22e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8004e8c:	480c      	ldr	r0, [pc, #48]	; (8004ec0 <MX_LWIP_Init+0x25c>)
 8004e8e:	f001 f9df 	bl	8006250 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 8004e92:	490c      	ldr	r1, [pc, #48]	; (8004ec4 <MX_LWIP_Init+0x260>)
 8004e94:	480a      	ldr	r0, [pc, #40]	; (8004ec0 <MX_LWIP_Init+0x25c>)
 8004e96:	f001 fa0d 	bl	80062b4 <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8004e9a:	bf00      	nop
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	bd80      	pop	{r7, pc}
 8004ea0:	2000036c 	.word	0x2000036c
 8004ea4:	20000368 	.word	0x20000368
 8004ea8:	2000032c 	.word	0x2000032c
 8004eac:	20000364 	.word	0x20000364
 8004eb0:	20000370 	.word	0x20000370
 8004eb4:	20000374 	.word	0x20000374
 8004eb8:	0800e705 	.word	0x0800e705
 8004ebc:	080052e1 	.word	0x080052e1
 8004ec0:	20000330 	.word	0x20000330
 8004ec4:	0800534d 	.word	0x0800534d

08004ec8 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b08e      	sub	sp, #56	; 0x38
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ed0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	601a      	str	r2, [r3, #0]
 8004ed8:	605a      	str	r2, [r3, #4]
 8004eda:	609a      	str	r2, [r3, #8]
 8004edc:	60da      	str	r2, [r3, #12]
 8004ede:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	4a56      	ldr	r2, [pc, #344]	; (8005040 <HAL_ETH_MspInit+0x178>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	f040 80a6 	bne.w	8005038 <HAL_ETH_MspInit+0x170>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8004eec:	4b55      	ldr	r3, [pc, #340]	; (8005044 <HAL_ETH_MspInit+0x17c>)
 8004eee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ef0:	4a54      	ldr	r2, [pc, #336]	; (8005044 <HAL_ETH_MspInit+0x17c>)
 8004ef2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004ef6:	6313      	str	r3, [r2, #48]	; 0x30
 8004ef8:	4b52      	ldr	r3, [pc, #328]	; (8005044 <HAL_ETH_MspInit+0x17c>)
 8004efa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004efc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f00:	623b      	str	r3, [r7, #32]
 8004f02:	6a3b      	ldr	r3, [r7, #32]
 8004f04:	4b4f      	ldr	r3, [pc, #316]	; (8005044 <HAL_ETH_MspInit+0x17c>)
 8004f06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f08:	4a4e      	ldr	r2, [pc, #312]	; (8005044 <HAL_ETH_MspInit+0x17c>)
 8004f0a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004f0e:	6313      	str	r3, [r2, #48]	; 0x30
 8004f10:	4b4c      	ldr	r3, [pc, #304]	; (8005044 <HAL_ETH_MspInit+0x17c>)
 8004f12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f14:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004f18:	61fb      	str	r3, [r7, #28]
 8004f1a:	69fb      	ldr	r3, [r7, #28]
 8004f1c:	4b49      	ldr	r3, [pc, #292]	; (8005044 <HAL_ETH_MspInit+0x17c>)
 8004f1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f20:	4a48      	ldr	r2, [pc, #288]	; (8005044 <HAL_ETH_MspInit+0x17c>)
 8004f22:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004f26:	6313      	str	r3, [r2, #48]	; 0x30
 8004f28:	4b46      	ldr	r3, [pc, #280]	; (8005044 <HAL_ETH_MspInit+0x17c>)
 8004f2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f2c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f30:	61bb      	str	r3, [r7, #24]
 8004f32:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004f34:	4b43      	ldr	r3, [pc, #268]	; (8005044 <HAL_ETH_MspInit+0x17c>)
 8004f36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f38:	4a42      	ldr	r2, [pc, #264]	; (8005044 <HAL_ETH_MspInit+0x17c>)
 8004f3a:	f043 0304 	orr.w	r3, r3, #4
 8004f3e:	6313      	str	r3, [r2, #48]	; 0x30
 8004f40:	4b40      	ldr	r3, [pc, #256]	; (8005044 <HAL_ETH_MspInit+0x17c>)
 8004f42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f44:	f003 0304 	and.w	r3, r3, #4
 8004f48:	617b      	str	r3, [r7, #20]
 8004f4a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004f4c:	4b3d      	ldr	r3, [pc, #244]	; (8005044 <HAL_ETH_MspInit+0x17c>)
 8004f4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f50:	4a3c      	ldr	r2, [pc, #240]	; (8005044 <HAL_ETH_MspInit+0x17c>)
 8004f52:	f043 0301 	orr.w	r3, r3, #1
 8004f56:	6313      	str	r3, [r2, #48]	; 0x30
 8004f58:	4b3a      	ldr	r3, [pc, #232]	; (8005044 <HAL_ETH_MspInit+0x17c>)
 8004f5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f5c:	f003 0301 	and.w	r3, r3, #1
 8004f60:	613b      	str	r3, [r7, #16]
 8004f62:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004f64:	4b37      	ldr	r3, [pc, #220]	; (8005044 <HAL_ETH_MspInit+0x17c>)
 8004f66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f68:	4a36      	ldr	r2, [pc, #216]	; (8005044 <HAL_ETH_MspInit+0x17c>)
 8004f6a:	f043 0302 	orr.w	r3, r3, #2
 8004f6e:	6313      	str	r3, [r2, #48]	; 0x30
 8004f70:	4b34      	ldr	r3, [pc, #208]	; (8005044 <HAL_ETH_MspInit+0x17c>)
 8004f72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f74:	f003 0302 	and.w	r3, r3, #2
 8004f78:	60fb      	str	r3, [r7, #12]
 8004f7a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8004f7c:	4b31      	ldr	r3, [pc, #196]	; (8005044 <HAL_ETH_MspInit+0x17c>)
 8004f7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f80:	4a30      	ldr	r2, [pc, #192]	; (8005044 <HAL_ETH_MspInit+0x17c>)
 8004f82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004f86:	6313      	str	r3, [r2, #48]	; 0x30
 8004f88:	4b2e      	ldr	r3, [pc, #184]	; (8005044 <HAL_ETH_MspInit+0x17c>)
 8004f8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f90:	60bb      	str	r3, [r7, #8]
 8004f92:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8004f94:	2332      	movs	r3, #50	; 0x32
 8004f96:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f98:	2302      	movs	r3, #2
 8004f9a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004fa0:	2303      	movs	r3, #3
 8004fa2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004fa4:	230b      	movs	r3, #11
 8004fa6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004fa8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004fac:	4619      	mov	r1, r3
 8004fae:	4826      	ldr	r0, [pc, #152]	; (8005048 <HAL_ETH_MspInit+0x180>)
 8004fb0:	f7fd fbba 	bl	8002728 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8004fb4:	2386      	movs	r3, #134	; 0x86
 8004fb6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004fb8:	2302      	movs	r3, #2
 8004fba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004fc0:	2303      	movs	r3, #3
 8004fc2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004fc4:	230b      	movs	r3, #11
 8004fc6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004fc8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004fcc:	4619      	mov	r1, r3
 8004fce:	481f      	ldr	r0, [pc, #124]	; (800504c <HAL_ETH_MspInit+0x184>)
 8004fd0:	f7fd fbaa 	bl	8002728 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8004fd4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004fd8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004fda:	2302      	movs	r3, #2
 8004fdc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fde:	2300      	movs	r3, #0
 8004fe0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004fe2:	2303      	movs	r3, #3
 8004fe4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004fe6:	230b      	movs	r3, #11
 8004fe8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004fea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004fee:	4619      	mov	r1, r3
 8004ff0:	4817      	ldr	r0, [pc, #92]	; (8005050 <HAL_ETH_MspInit+0x188>)
 8004ff2:	f7fd fb99 	bl	8002728 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8004ff6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8004ffa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ffc:	2302      	movs	r3, #2
 8004ffe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005000:	2300      	movs	r3, #0
 8005002:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005004:	2303      	movs	r3, #3
 8005006:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005008:	230b      	movs	r3, #11
 800500a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800500c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005010:	4619      	mov	r1, r3
 8005012:	4810      	ldr	r0, [pc, #64]	; (8005054 <HAL_ETH_MspInit+0x18c>)
 8005014:	f7fd fb88 	bl	8002728 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8005018:	2200      	movs	r2, #0
 800501a:	2105      	movs	r1, #5
 800501c:	203d      	movs	r0, #61	; 0x3d
 800501e:	f7fc fa51 	bl	80014c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8005022:	203d      	movs	r0, #61	; 0x3d
 8005024:	f7fc fa6a 	bl	80014fc <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(ETH_WKUP_IRQn, 5, 0);
 8005028:	2200      	movs	r2, #0
 800502a:	2105      	movs	r1, #5
 800502c:	203e      	movs	r0, #62	; 0x3e
 800502e:	f7fc fa49 	bl	80014c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_WKUP_IRQn);
 8005032:	203e      	movs	r0, #62	; 0x3e
 8005034:	f7fc fa62 	bl	80014fc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8005038:	bf00      	nop
 800503a:	3738      	adds	r7, #56	; 0x38
 800503c:	46bd      	mov	sp, r7
 800503e:	bd80      	pop	{r7, pc}
 8005040:	40028000 	.word	0x40028000
 8005044:	40023800 	.word	0x40023800
 8005048:	40020800 	.word	0x40020800
 800504c:	40020000 	.word	0x40020000
 8005050:	40020400 	.word	0x40020400
 8005054:	40021800 	.word	0x40021800

08005058 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8005058:	b580      	push	{r7, lr}
 800505a:	b086      	sub	sp, #24
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8005060:	2300      	movs	r3, #0
 8005062:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8005064:	4b49      	ldr	r3, [pc, #292]	; (800518c <low_level_init+0x134>)
 8005066:	4a4a      	ldr	r2, [pc, #296]	; (8005190 <low_level_init+0x138>)
 8005068:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 800506a:	4b48      	ldr	r3, [pc, #288]	; (800518c <low_level_init+0x134>)
 800506c:	2201      	movs	r2, #1
 800506e:	605a      	str	r2, [r3, #4]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8005070:	4b46      	ldr	r3, [pc, #280]	; (800518c <low_level_init+0x134>)
 8005072:	2200      	movs	r2, #0
 8005074:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 8005076:	2300      	movs	r3, #0
 8005078:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 800507a:	2380      	movs	r3, #128	; 0x80
 800507c:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 800507e:	23e1      	movs	r3, #225	; 0xe1
 8005080:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8005082:	2300      	movs	r3, #0
 8005084:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8005086:	2300      	movs	r3, #0
 8005088:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x01;
 800508a:	2301      	movs	r3, #1
 800508c:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 800508e:	4a3f      	ldr	r2, [pc, #252]	; (800518c <low_level_init+0x134>)
 8005090:	f107 0308 	add.w	r3, r7, #8
 8005094:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 8005096:	4b3d      	ldr	r3, [pc, #244]	; (800518c <low_level_init+0x134>)
 8005098:	2200      	movs	r2, #0
 800509a:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 800509c:	4b3b      	ldr	r3, [pc, #236]	; (800518c <low_level_init+0x134>)
 800509e:	2200      	movs	r2, #0
 80050a0:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 80050a2:	4b3a      	ldr	r3, [pc, #232]	; (800518c <low_level_init+0x134>)
 80050a4:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80050a8:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 80050aa:	4838      	ldr	r0, [pc, #224]	; (800518c <low_level_init+0x134>)
 80050ac:	f7fc fa34 	bl	8001518 <HAL_ETH_Init>
 80050b0:	4603      	mov	r3, r0
 80050b2:	75fb      	strb	r3, [r7, #23]

  if (hal_eth_init_status == HAL_OK)
 80050b4:	7dfb      	ldrb	r3, [r7, #23]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d108      	bne.n	80050cc <low_level_init+0x74>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80050c0:	f043 0304 	orr.w	r3, r3, #4
 80050c4:	b2da      	uxtb	r2, r3
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 80050cc:	2304      	movs	r3, #4
 80050ce:	4a31      	ldr	r2, [pc, #196]	; (8005194 <low_level_init+0x13c>)
 80050d0:	4931      	ldr	r1, [pc, #196]	; (8005198 <low_level_init+0x140>)
 80050d2:	482e      	ldr	r0, [pc, #184]	; (800518c <low_level_init+0x134>)
 80050d4:	f7fc fbbc 	bl	8001850 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 80050d8:	2304      	movs	r3, #4
 80050da:	4a30      	ldr	r2, [pc, #192]	; (800519c <low_level_init+0x144>)
 80050dc:	4930      	ldr	r1, [pc, #192]	; (80051a0 <low_level_init+0x148>)
 80050de:	482b      	ldr	r0, [pc, #172]	; (800518c <low_level_init+0x134>)
 80050e0:	f7fc fc1f 	bl	8001922 <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2206      	movs	r2, #6
 80050e8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 80050ec:	4b27      	ldr	r3, [pc, #156]	; (800518c <low_level_init+0x134>)
 80050ee:	695b      	ldr	r3, [r3, #20]
 80050f0:	781a      	ldrb	r2, [r3, #0]
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 80050f8:	4b24      	ldr	r3, [pc, #144]	; (800518c <low_level_init+0x134>)
 80050fa:	695b      	ldr	r3, [r3, #20]
 80050fc:	785a      	ldrb	r2, [r3, #1]
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8005104:	4b21      	ldr	r3, [pc, #132]	; (800518c <low_level_init+0x134>)
 8005106:	695b      	ldr	r3, [r3, #20]
 8005108:	789a      	ldrb	r2, [r3, #2]
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8005110:	4b1e      	ldr	r3, [pc, #120]	; (800518c <low_level_init+0x134>)
 8005112:	695b      	ldr	r3, [r3, #20]
 8005114:	78da      	ldrb	r2, [r3, #3]
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800511c:	4b1b      	ldr	r3, [pc, #108]	; (800518c <low_level_init+0x134>)
 800511e:	695b      	ldr	r3, [r3, #20]
 8005120:	791a      	ldrb	r2, [r3, #4]
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8005128:	4b18      	ldr	r3, [pc, #96]	; (800518c <low_level_init+0x134>)
 800512a:	695b      	ldr	r3, [r3, #20]
 800512c:	795a      	ldrb	r2, [r3, #5]
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = 1500;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800513a:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005142:	f043 030a 	orr.w	r3, r3, #10
 8005146:	b2da      	uxtb	r2, r3
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 800514e:	480f      	ldr	r0, [pc, #60]	; (800518c <low_level_init+0x134>)
 8005150:	f7fc fe91 	bl	8001e76 <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 8005154:	f107 0310 	add.w	r3, r7, #16
 8005158:	461a      	mov	r2, r3
 800515a:	211d      	movs	r1, #29
 800515c:	480b      	ldr	r0, [pc, #44]	; (800518c <low_level_init+0x134>)
 800515e:	f7fc fdbc 	bl	8001cda <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 8005162:	693b      	ldr	r3, [r7, #16]
 8005164:	f043 030b 	orr.w	r3, r3, #11
 8005168:	613b      	str	r3, [r7, #16]

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 800516a:	693b      	ldr	r3, [r7, #16]
 800516c:	461a      	mov	r2, r3
 800516e:	211d      	movs	r1, #29
 8005170:	4806      	ldr	r0, [pc, #24]	; (800518c <low_level_init+0x134>)
 8005172:	f7fc fe1a 	bl	8001daa <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 8005176:	f107 0310 	add.w	r3, r7, #16
 800517a:	461a      	mov	r2, r3
 800517c:	211d      	movs	r1, #29
 800517e:	4803      	ldr	r0, [pc, #12]	; (800518c <low_level_init+0x134>)
 8005180:	f7fc fdab 	bl	8001cda <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8005184:	bf00      	nop
 8005186:	3718      	adds	r7, #24
 8005188:	46bd      	mov	sp, r7
 800518a:	bd80      	pop	{r7, pc}
 800518c:	20001c48 	.word	0x20001c48
 8005190:	40028000 	.word	0x40028000
 8005194:	20001c90 	.word	0x20001c90
 8005198:	20000378 	.word	0x20000378
 800519c:	200003f8 	.word	0x200003f8
 80051a0:	20001bc8 	.word	0x20001bc8

080051a4 <low_level_output>:
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b08a      	sub	sp, #40	; 0x28
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
 80051ac:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 80051ae:	4b4b      	ldr	r3, [pc, #300]	; (80052dc <low_level_output+0x138>)
 80051b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051b2:	689b      	ldr	r3, [r3, #8]
 80051b4:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 80051b6:	2300      	movs	r3, #0
 80051b8:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 80051ba:	2300      	movs	r3, #0
 80051bc:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 80051be:	2300      	movs	r3, #0
 80051c0:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 80051c2:	2300      	movs	r3, #0
 80051c4:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 80051c6:	4b45      	ldr	r3, [pc, #276]	; (80052dc <low_level_output+0x138>)
 80051c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051ca:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 80051cc:	2300      	movs	r3, #0
 80051ce:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	623b      	str	r3, [r7, #32]
 80051d4:	e05a      	b.n	800528c <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80051d6:	69bb      	ldr	r3, [r7, #24]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	da03      	bge.n	80051e6 <low_level_output+0x42>
      {
        errval = ERR_USE;
 80051de:	23f8      	movs	r3, #248	; 0xf8
 80051e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 80051e4:	e05c      	b.n	80052a0 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 80051e6:	6a3b      	ldr	r3, [r7, #32]
 80051e8:	895b      	ldrh	r3, [r3, #10]
 80051ea:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 80051ec:	2300      	movs	r3, #0
 80051ee:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 80051f0:	e02f      	b.n	8005252 <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 80051f2:	69fa      	ldr	r2, [r7, #28]
 80051f4:	693b      	ldr	r3, [r7, #16]
 80051f6:	18d0      	adds	r0, r2, r3
 80051f8:	6a3b      	ldr	r3, [r7, #32]
 80051fa:	685a      	ldr	r2, [r3, #4]
 80051fc:	68bb      	ldr	r3, [r7, #8]
 80051fe:	18d1      	adds	r1, r2, r3
 8005200:	693a      	ldr	r2, [r7, #16]
 8005202:	f240 53f4 	movw	r3, #1524	; 0x5f4
 8005206:	1a9b      	subs	r3, r3, r2
 8005208:	461a      	mov	r2, r3
 800520a:	f009 fb84 	bl	800e916 <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 800520e:	69bb      	ldr	r3, [r7, #24]
 8005210:	68db      	ldr	r3, [r3, #12]
 8005212:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8005214:	69bb      	ldr	r3, [r7, #24]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	2b00      	cmp	r3, #0
 800521a:	da03      	bge.n	8005224 <low_level_output+0x80>
        {
          errval = ERR_USE;
 800521c:	23f8      	movs	r3, #248	; 0xf8
 800521e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 8005222:	e03d      	b.n	80052a0 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8005224:	69bb      	ldr	r3, [r7, #24]
 8005226:	689b      	ldr	r3, [r3, #8]
 8005228:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 800522a:	693a      	ldr	r2, [r7, #16]
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	4413      	add	r3, r2
 8005230:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8005234:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 8005236:	68ba      	ldr	r2, [r7, #8]
 8005238:	693b      	ldr	r3, [r7, #16]
 800523a:	1ad3      	subs	r3, r2, r3
 800523c:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8005240:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 8005242:	697a      	ldr	r2, [r7, #20]
 8005244:	693b      	ldr	r3, [r7, #16]
 8005246:	1ad3      	subs	r3, r2, r3
 8005248:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800524c:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 800524e:	2300      	movs	r3, #0
 8005250:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8005252:	68fa      	ldr	r2, [r7, #12]
 8005254:	693b      	ldr	r3, [r7, #16]
 8005256:	4413      	add	r3, r2
 8005258:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800525c:	4293      	cmp	r3, r2
 800525e:	d8c8      	bhi.n	80051f2 <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8005260:	69fa      	ldr	r2, [r7, #28]
 8005262:	693b      	ldr	r3, [r7, #16]
 8005264:	18d0      	adds	r0, r2, r3
 8005266:	6a3b      	ldr	r3, [r7, #32]
 8005268:	685a      	ldr	r2, [r3, #4]
 800526a:	68bb      	ldr	r3, [r7, #8]
 800526c:	4413      	add	r3, r2
 800526e:	68fa      	ldr	r2, [r7, #12]
 8005270:	4619      	mov	r1, r3
 8005272:	f009 fb50 	bl	800e916 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8005276:	693a      	ldr	r2, [r7, #16]
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	4413      	add	r3, r2
 800527c:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 800527e:	697a      	ldr	r2, [r7, #20]
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	4413      	add	r3, r2
 8005284:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 8005286:	6a3b      	ldr	r3, [r7, #32]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	623b      	str	r3, [r7, #32]
 800528c:	6a3b      	ldr	r3, [r7, #32]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d1a1      	bne.n	80051d6 <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 8005292:	6979      	ldr	r1, [r7, #20]
 8005294:	4811      	ldr	r0, [pc, #68]	; (80052dc <low_level_output+0x138>)
 8005296:	f7fc fbb1 	bl	80019fc <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 800529a:	2300      	movs	r3, #0
 800529c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 80052a0:	4b0e      	ldr	r3, [pc, #56]	; (80052dc <low_level_output+0x138>)
 80052a2:	681a      	ldr	r2, [r3, #0]
 80052a4:	f241 0314 	movw	r3, #4116	; 0x1014
 80052a8:	4413      	add	r3, r2
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f003 0320 	and.w	r3, r3, #32
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d00d      	beq.n	80052d0 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 80052b4:	4b09      	ldr	r3, [pc, #36]	; (80052dc <low_level_output+0x138>)
 80052b6:	681a      	ldr	r2, [r3, #0]
 80052b8:	f241 0314 	movw	r3, #4116	; 0x1014
 80052bc:	4413      	add	r3, r2
 80052be:	2220      	movs	r2, #32
 80052c0:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 80052c2:	4b06      	ldr	r3, [pc, #24]	; (80052dc <low_level_output+0x138>)
 80052c4:	681a      	ldr	r2, [r3, #0]
 80052c6:	f241 0304 	movw	r3, #4100	; 0x1004
 80052ca:	4413      	add	r3, r2
 80052cc:	2200      	movs	r2, #0
 80052ce:	601a      	str	r2, [r3, #0]
  }
  return errval;
 80052d0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80052d4:	4618      	mov	r0, r3
 80052d6:	3728      	adds	r7, #40	; 0x28
 80052d8:	46bd      	mov	sp, r7
 80052da:	bd80      	pop	{r7, pc}
 80052dc:	20001c48 	.word	0x20001c48

080052e0 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b082      	sub	sp, #8
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d106      	bne.n	80052fc <ethernetif_init+0x1c>
 80052ee:	4b0e      	ldr	r3, [pc, #56]	; (8005328 <ethernetif_init+0x48>)
 80052f0:	f240 2219 	movw	r2, #537	; 0x219
 80052f4:	490d      	ldr	r1, [pc, #52]	; (800532c <ethernetif_init+0x4c>)
 80052f6:	480e      	ldr	r0, [pc, #56]	; (8005330 <ethernetif_init+0x50>)
 80052f8:	f009 fb20 	bl	800e93c <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2273      	movs	r2, #115	; 0x73
 8005300:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2274      	movs	r2, #116	; 0x74
 8005308:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	4a09      	ldr	r2, [pc, #36]	; (8005334 <ethernetif_init+0x54>)
 8005310:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	4a08      	ldr	r2, [pc, #32]	; (8005338 <ethernetif_init+0x58>)
 8005316:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8005318:	6878      	ldr	r0, [r7, #4]
 800531a:	f7ff fe9d 	bl	8005058 <low_level_init>

  return ERR_OK;
 800531e:	2300      	movs	r3, #0
}
 8005320:	4618      	mov	r0, r3
 8005322:	3708      	adds	r7, #8
 8005324:	46bd      	mov	sp, r7
 8005326:	bd80      	pop	{r7, pc}
 8005328:	0800f7c4 	.word	0x0800f7c4
 800532c:	0800f7e0 	.word	0x0800f7e0
 8005330:	0800f7f0 	.word	0x0800f7f0
 8005334:	0800cbe5 	.word	0x0800cbe5
 8005338:	080051a5 	.word	0x080051a5

0800533c <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 800533c:	b580      	push	{r7, lr}
 800533e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8005340:	f7fb fd52 	bl	8000de8 <HAL_GetTick>
 8005344:	4603      	mov	r3, r0
}
 8005346:	4618      	mov	r0, r3
 8005348:	bd80      	pop	{r7, pc}
	...

0800534c <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 800534c:	b580      	push	{r7, lr}
 800534e:	b084      	sub	sp, #16
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 8005354:	2300      	movs	r3, #0
 8005356:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 8005358:	2300      	movs	r3, #0
 800535a:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005362:	089b      	lsrs	r3, r3, #2
 8005364:	f003 0301 	and.w	r3, r3, #1
 8005368:	b2db      	uxtb	r3, r3
 800536a:	2b00      	cmp	r3, #0
 800536c:	d05d      	beq.n	800542a <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 800536e:	4b34      	ldr	r3, [pc, #208]	; (8005440 <ethernetif_update_config+0xf4>)
 8005370:	685b      	ldr	r3, [r3, #4]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d03f      	beq.n	80053f6 <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 8005376:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800537a:	2100      	movs	r1, #0
 800537c:	4830      	ldr	r0, [pc, #192]	; (8005440 <ethernetif_update_config+0xf4>)
 800537e:	f7fc fd14 	bl	8001daa <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 8005382:	f7fb fd31 	bl	8000de8 <HAL_GetTick>
 8005386:	4603      	mov	r3, r0
 8005388:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 800538a:	f107 0308 	add.w	r3, r7, #8
 800538e:	461a      	mov	r2, r3
 8005390:	2101      	movs	r1, #1
 8005392:	482b      	ldr	r0, [pc, #172]	; (8005440 <ethernetif_update_config+0xf4>)
 8005394:	f7fc fca1 	bl	8001cda <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 8005398:	f7fb fd26 	bl	8000de8 <HAL_GetTick>
 800539c:	4602      	mov	r2, r0
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	1ad3      	subs	r3, r2, r3
 80053a2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80053a6:	d828      	bhi.n	80053fa <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 80053a8:	68bb      	ldr	r3, [r7, #8]
 80053aa:	f003 0320 	and.w	r3, r3, #32
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d0eb      	beq.n	800538a <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 80053b2:	f107 0308 	add.w	r3, r7, #8
 80053b6:	461a      	mov	r2, r3
 80053b8:	211f      	movs	r1, #31
 80053ba:	4821      	ldr	r0, [pc, #132]	; (8005440 <ethernetif_update_config+0xf4>)
 80053bc:	f7fc fc8d 	bl	8001cda <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	f003 0310 	and.w	r3, r3, #16
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d004      	beq.n	80053d4 <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 80053ca:	4b1d      	ldr	r3, [pc, #116]	; (8005440 <ethernetif_update_config+0xf4>)
 80053cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80053d0:	60da      	str	r2, [r3, #12]
 80053d2:	e002      	b.n	80053da <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 80053d4:	4b1a      	ldr	r3, [pc, #104]	; (8005440 <ethernetif_update_config+0xf4>)
 80053d6:	2200      	movs	r2, #0
 80053d8:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 80053da:	68bb      	ldr	r3, [r7, #8]
 80053dc:	f003 0304 	and.w	r3, r3, #4
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d003      	beq.n	80053ec <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 80053e4:	4b16      	ldr	r3, [pc, #88]	; (8005440 <ethernetif_update_config+0xf4>)
 80053e6:	2200      	movs	r2, #0
 80053e8:	609a      	str	r2, [r3, #8]
 80053ea:	e016      	b.n	800541a <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 80053ec:	4b14      	ldr	r3, [pc, #80]	; (8005440 <ethernetif_update_config+0xf4>)
 80053ee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80053f2:	609a      	str	r2, [r3, #8]
 80053f4:	e011      	b.n	800541a <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 80053f6:	bf00      	nop
 80053f8:	e000      	b.n	80053fc <ethernetif_update_config+0xb0>
          goto error;
 80053fa:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 80053fc:	4b10      	ldr	r3, [pc, #64]	; (8005440 <ethernetif_update_config+0xf4>)
 80053fe:	68db      	ldr	r3, [r3, #12]
 8005400:	08db      	lsrs	r3, r3, #3
 8005402:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 8005404:	4b0e      	ldr	r3, [pc, #56]	; (8005440 <ethernetif_update_config+0xf4>)
 8005406:	689b      	ldr	r3, [r3, #8]
 8005408:	085b      	lsrs	r3, r3, #1
 800540a:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 800540c:	4313      	orrs	r3, r2
 800540e:	b29b      	uxth	r3, r3
 8005410:	461a      	mov	r2, r3
 8005412:	2100      	movs	r1, #0
 8005414:	480a      	ldr	r0, [pc, #40]	; (8005440 <ethernetif_update_config+0xf4>)
 8005416:	f7fc fcc8 	bl	8001daa <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 800541a:	2100      	movs	r1, #0
 800541c:	4808      	ldr	r0, [pc, #32]	; (8005440 <ethernetif_update_config+0xf4>)
 800541e:	f7fc fd89 	bl	8001f34 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 8005422:	4807      	ldr	r0, [pc, #28]	; (8005440 <ethernetif_update_config+0xf4>)
 8005424:	f7fc fd27 	bl	8001e76 <HAL_ETH_Start>
 8005428:	e002      	b.n	8005430 <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 800542a:	4805      	ldr	r0, [pc, #20]	; (8005440 <ethernetif_update_config+0xf4>)
 800542c:	f7fc fd52 	bl	8001ed4 <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 8005430:	6878      	ldr	r0, [r7, #4]
 8005432:	f000 f807 	bl	8005444 <ethernetif_notify_conn_changed>
}
 8005436:	bf00      	nop
 8005438:	3710      	adds	r7, #16
 800543a:	46bd      	mov	sp, r7
 800543c:	bd80      	pop	{r7, pc}
 800543e:	bf00      	nop
 8005440:	20001c48 	.word	0x20001c48

08005444 <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 8005444:	b480      	push	{r7}
 8005446:	b083      	sub	sp, #12
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 800544c:	bf00      	nop
 800544e:	370c      	adds	r7, #12
 8005450:	46bd      	mov	sp, r7
 8005452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005456:	4770      	bx	lr

08005458 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8005458:	b480      	push	{r7}
 800545a:	b083      	sub	sp, #12
 800545c:	af00      	add	r7, sp, #0
 800545e:	4603      	mov	r3, r0
 8005460:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8005462:	88fb      	ldrh	r3, [r7, #6]
 8005464:	021b      	lsls	r3, r3, #8
 8005466:	b21a      	sxth	r2, r3
 8005468:	88fb      	ldrh	r3, [r7, #6]
 800546a:	0a1b      	lsrs	r3, r3, #8
 800546c:	b29b      	uxth	r3, r3
 800546e:	b21b      	sxth	r3, r3
 8005470:	4313      	orrs	r3, r2
 8005472:	b21b      	sxth	r3, r3
 8005474:	b29b      	uxth	r3, r3
}
 8005476:	4618      	mov	r0, r3
 8005478:	370c      	adds	r7, #12
 800547a:	46bd      	mov	sp, r7
 800547c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005480:	4770      	bx	lr

08005482 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8005482:	b480      	push	{r7}
 8005484:	b083      	sub	sp, #12
 8005486:	af00      	add	r7, sp, #0
 8005488:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	061a      	lsls	r2, r3, #24
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	021b      	lsls	r3, r3, #8
 8005492:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005496:	431a      	orrs	r2, r3
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	0a1b      	lsrs	r3, r3, #8
 800549c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80054a0:	431a      	orrs	r2, r3
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	0e1b      	lsrs	r3, r3, #24
 80054a6:	4313      	orrs	r3, r2
}
 80054a8:	4618      	mov	r0, r3
 80054aa:	370c      	adds	r7, #12
 80054ac:	46bd      	mov	sp, r7
 80054ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b2:	4770      	bx	lr

080054b4 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b082      	sub	sp, #8
 80054b8:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 80054ba:	2300      	movs	r3, #0
 80054bc:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 80054be:	f000 f8d3 	bl	8005668 <mem_init>
  memp_init();
 80054c2:	f000 fbd9 	bl	8005c78 <memp_init>
  pbuf_init();
  netif_init();
 80054c6:	f000 fc91 	bl	8005dec <netif_init>
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 80054ca:	f001 fcdd 	bl	8006e88 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 80054ce:	f006 fef7 	bl	800c2c0 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 80054d2:	bf00      	nop
 80054d4:	3708      	adds	r7, #8
 80054d6:	46bd      	mov	sp, r7
 80054d8:	bd80      	pop	{r7, pc}
	...

080054dc <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 80054dc:	b480      	push	{r7}
 80054de:	b083      	sub	sp, #12
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	4603      	mov	r3, r0
 80054e4:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 80054e6:	4b05      	ldr	r3, [pc, #20]	; (80054fc <ptr_to_mem+0x20>)
 80054e8:	681a      	ldr	r2, [r3, #0]
 80054ea:	88fb      	ldrh	r3, [r7, #6]
 80054ec:	4413      	add	r3, r2
}
 80054ee:	4618      	mov	r0, r3
 80054f0:	370c      	adds	r7, #12
 80054f2:	46bd      	mov	sp, r7
 80054f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f8:	4770      	bx	lr
 80054fa:	bf00      	nop
 80054fc:	20000094 	.word	0x20000094

08005500 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8005500:	b480      	push	{r7}
 8005502:	b083      	sub	sp, #12
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	4a05      	ldr	r2, [pc, #20]	; (8005520 <mem_to_ptr+0x20>)
 800550c:	6812      	ldr	r2, [r2, #0]
 800550e:	1a9b      	subs	r3, r3, r2
 8005510:	b29b      	uxth	r3, r3
}
 8005512:	4618      	mov	r0, r3
 8005514:	370c      	adds	r7, #12
 8005516:	46bd      	mov	sp, r7
 8005518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551c:	4770      	bx	lr
 800551e:	bf00      	nop
 8005520:	20000094 	.word	0x20000094

08005524 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8005524:	b590      	push	{r4, r7, lr}
 8005526:	b085      	sub	sp, #20
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800552c:	4b45      	ldr	r3, [pc, #276]	; (8005644 <plug_holes+0x120>)
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	687a      	ldr	r2, [r7, #4]
 8005532:	429a      	cmp	r2, r3
 8005534:	d206      	bcs.n	8005544 <plug_holes+0x20>
 8005536:	4b44      	ldr	r3, [pc, #272]	; (8005648 <plug_holes+0x124>)
 8005538:	f240 12df 	movw	r2, #479	; 0x1df
 800553c:	4943      	ldr	r1, [pc, #268]	; (800564c <plug_holes+0x128>)
 800553e:	4844      	ldr	r0, [pc, #272]	; (8005650 <plug_holes+0x12c>)
 8005540:	f009 f9fc 	bl	800e93c <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8005544:	4b43      	ldr	r3, [pc, #268]	; (8005654 <plug_holes+0x130>)
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	687a      	ldr	r2, [r7, #4]
 800554a:	429a      	cmp	r2, r3
 800554c:	d306      	bcc.n	800555c <plug_holes+0x38>
 800554e:	4b3e      	ldr	r3, [pc, #248]	; (8005648 <plug_holes+0x124>)
 8005550:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8005554:	4940      	ldr	r1, [pc, #256]	; (8005658 <plug_holes+0x134>)
 8005556:	483e      	ldr	r0, [pc, #248]	; (8005650 <plug_holes+0x12c>)
 8005558:	f009 f9f0 	bl	800e93c <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	791b      	ldrb	r3, [r3, #4]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d006      	beq.n	8005572 <plug_holes+0x4e>
 8005564:	4b38      	ldr	r3, [pc, #224]	; (8005648 <plug_holes+0x124>)
 8005566:	f240 12e1 	movw	r2, #481	; 0x1e1
 800556a:	493c      	ldr	r1, [pc, #240]	; (800565c <plug_holes+0x138>)
 800556c:	4838      	ldr	r0, [pc, #224]	; (8005650 <plug_holes+0x12c>)
 800556e:	f009 f9e5 	bl	800e93c <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	881b      	ldrh	r3, [r3, #0]
 8005576:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800557a:	d906      	bls.n	800558a <plug_holes+0x66>
 800557c:	4b32      	ldr	r3, [pc, #200]	; (8005648 <plug_holes+0x124>)
 800557e:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8005582:	4937      	ldr	r1, [pc, #220]	; (8005660 <plug_holes+0x13c>)
 8005584:	4832      	ldr	r0, [pc, #200]	; (8005650 <plug_holes+0x12c>)
 8005586:	f009 f9d9 	bl	800e93c <iprintf>

  nmem = ptr_to_mem(mem->next);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	881b      	ldrh	r3, [r3, #0]
 800558e:	4618      	mov	r0, r3
 8005590:	f7ff ffa4 	bl	80054dc <ptr_to_mem>
 8005594:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8005596:	687a      	ldr	r2, [r7, #4]
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	429a      	cmp	r2, r3
 800559c:	d024      	beq.n	80055e8 <plug_holes+0xc4>
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	791b      	ldrb	r3, [r3, #4]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d120      	bne.n	80055e8 <plug_holes+0xc4>
 80055a6:	4b2b      	ldr	r3, [pc, #172]	; (8005654 <plug_holes+0x130>)
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	68fa      	ldr	r2, [r7, #12]
 80055ac:	429a      	cmp	r2, r3
 80055ae:	d01b      	beq.n	80055e8 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 80055b0:	4b2c      	ldr	r3, [pc, #176]	; (8005664 <plug_holes+0x140>)
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	68fa      	ldr	r2, [r7, #12]
 80055b6:	429a      	cmp	r2, r3
 80055b8:	d102      	bne.n	80055c0 <plug_holes+0x9c>
      lfree = mem;
 80055ba:	4a2a      	ldr	r2, [pc, #168]	; (8005664 <plug_holes+0x140>)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	881a      	ldrh	r2, [r3, #0]
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	881b      	ldrh	r3, [r3, #0]
 80055cc:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80055d0:	d00a      	beq.n	80055e8 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	881b      	ldrh	r3, [r3, #0]
 80055d6:	4618      	mov	r0, r3
 80055d8:	f7ff ff80 	bl	80054dc <ptr_to_mem>
 80055dc:	4604      	mov	r4, r0
 80055de:	6878      	ldr	r0, [r7, #4]
 80055e0:	f7ff ff8e 	bl	8005500 <mem_to_ptr>
 80055e4:	4603      	mov	r3, r0
 80055e6:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	885b      	ldrh	r3, [r3, #2]
 80055ec:	4618      	mov	r0, r3
 80055ee:	f7ff ff75 	bl	80054dc <ptr_to_mem>
 80055f2:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 80055f4:	68ba      	ldr	r2, [r7, #8]
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	429a      	cmp	r2, r3
 80055fa:	d01f      	beq.n	800563c <plug_holes+0x118>
 80055fc:	68bb      	ldr	r3, [r7, #8]
 80055fe:	791b      	ldrb	r3, [r3, #4]
 8005600:	2b00      	cmp	r3, #0
 8005602:	d11b      	bne.n	800563c <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8005604:	4b17      	ldr	r3, [pc, #92]	; (8005664 <plug_holes+0x140>)
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	687a      	ldr	r2, [r7, #4]
 800560a:	429a      	cmp	r2, r3
 800560c:	d102      	bne.n	8005614 <plug_holes+0xf0>
      lfree = pmem;
 800560e:	4a15      	ldr	r2, [pc, #84]	; (8005664 <plug_holes+0x140>)
 8005610:	68bb      	ldr	r3, [r7, #8]
 8005612:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	881a      	ldrh	r2, [r3, #0]
 8005618:	68bb      	ldr	r3, [r7, #8]
 800561a:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	881b      	ldrh	r3, [r3, #0]
 8005620:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8005624:	d00a      	beq.n	800563c <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	881b      	ldrh	r3, [r3, #0]
 800562a:	4618      	mov	r0, r3
 800562c:	f7ff ff56 	bl	80054dc <ptr_to_mem>
 8005630:	4604      	mov	r4, r0
 8005632:	68b8      	ldr	r0, [r7, #8]
 8005634:	f7ff ff64 	bl	8005500 <mem_to_ptr>
 8005638:	4603      	mov	r3, r0
 800563a:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800563c:	bf00      	nop
 800563e:	3714      	adds	r7, #20
 8005640:	46bd      	mov	sp, r7
 8005642:	bd90      	pop	{r4, r7, pc}
 8005644:	20000094 	.word	0x20000094
 8005648:	0800f818 	.word	0x0800f818
 800564c:	0800f848 	.word	0x0800f848
 8005650:	0800f860 	.word	0x0800f860
 8005654:	20000098 	.word	0x20000098
 8005658:	0800f888 	.word	0x0800f888
 800565c:	0800f8a4 	.word	0x0800f8a4
 8005660:	0800f8c0 	.word	0x0800f8c0
 8005664:	2000009c 	.word	0x2000009c

08005668 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8005668:	b580      	push	{r7, lr}
 800566a:	b082      	sub	sp, #8
 800566c:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800566e:	4b18      	ldr	r3, [pc, #96]	; (80056d0 <mem_init+0x68>)
 8005670:	3303      	adds	r3, #3
 8005672:	f023 0303 	bic.w	r3, r3, #3
 8005676:	461a      	mov	r2, r3
 8005678:	4b16      	ldr	r3, [pc, #88]	; (80056d4 <mem_init+0x6c>)
 800567a:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800567c:	4b15      	ldr	r3, [pc, #84]	; (80056d4 <mem_init+0x6c>)
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8005688:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2200      	movs	r2, #0
 800568e:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2200      	movs	r2, #0
 8005694:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8005696:	f44f 5020 	mov.w	r0, #10240	; 0x2800
 800569a:	f7ff ff1f 	bl	80054dc <ptr_to_mem>
 800569e:	4602      	mov	r2, r0
 80056a0:	4b0d      	ldr	r3, [pc, #52]	; (80056d8 <mem_init+0x70>)
 80056a2:	601a      	str	r2, [r3, #0]
  ram_end->used = 1;
 80056a4:	4b0c      	ldr	r3, [pc, #48]	; (80056d8 <mem_init+0x70>)
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	2201      	movs	r2, #1
 80056aa:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 80056ac:	4b0a      	ldr	r3, [pc, #40]	; (80056d8 <mem_init+0x70>)
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 80056b4:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 80056b6:	4b08      	ldr	r3, [pc, #32]	; (80056d8 <mem_init+0x70>)
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 80056be:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 80056c0:	4b04      	ldr	r3, [pc, #16]	; (80056d4 <mem_init+0x6c>)
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	4a05      	ldr	r2, [pc, #20]	; (80056dc <mem_init+0x74>)
 80056c6:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 80056c8:	bf00      	nop
 80056ca:	3708      	adds	r7, #8
 80056cc:	46bd      	mov	sp, r7
 80056ce:	bd80      	pop	{r7, pc}
 80056d0:	20003478 	.word	0x20003478
 80056d4:	20000094 	.word	0x20000094
 80056d8:	20000098 	.word	0x20000098
 80056dc:	2000009c 	.word	0x2000009c

080056e0 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b086      	sub	sp, #24
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 80056e8:	6878      	ldr	r0, [r7, #4]
 80056ea:	f7ff ff09 	bl	8005500 <mem_to_ptr>
 80056ee:	4603      	mov	r3, r0
 80056f0:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	881b      	ldrh	r3, [r3, #0]
 80056f6:	4618      	mov	r0, r3
 80056f8:	f7ff fef0 	bl	80054dc <ptr_to_mem>
 80056fc:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	885b      	ldrh	r3, [r3, #2]
 8005702:	4618      	mov	r0, r3
 8005704:	f7ff feea 	bl	80054dc <ptr_to_mem>
 8005708:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	881b      	ldrh	r3, [r3, #0]
 800570e:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8005712:	d818      	bhi.n	8005746 <mem_link_valid+0x66>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	885b      	ldrh	r3, [r3, #2]
 8005718:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800571c:	d813      	bhi.n	8005746 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8005722:	8afa      	ldrh	r2, [r7, #22]
 8005724:	429a      	cmp	r2, r3
 8005726:	d004      	beq.n	8005732 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	881b      	ldrh	r3, [r3, #0]
 800572c:	8afa      	ldrh	r2, [r7, #22]
 800572e:	429a      	cmp	r2, r3
 8005730:	d109      	bne.n	8005746 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8005732:	4b08      	ldr	r3, [pc, #32]	; (8005754 <mem_link_valid+0x74>)
 8005734:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8005736:	693a      	ldr	r2, [r7, #16]
 8005738:	429a      	cmp	r2, r3
 800573a:	d006      	beq.n	800574a <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800573c:	693b      	ldr	r3, [r7, #16]
 800573e:	885b      	ldrh	r3, [r3, #2]
 8005740:	8afa      	ldrh	r2, [r7, #22]
 8005742:	429a      	cmp	r2, r3
 8005744:	d001      	beq.n	800574a <mem_link_valid+0x6a>
    return 0;
 8005746:	2300      	movs	r3, #0
 8005748:	e000      	b.n	800574c <mem_link_valid+0x6c>
  }
  return 1;
 800574a:	2301      	movs	r3, #1
}
 800574c:	4618      	mov	r0, r3
 800574e:	3718      	adds	r7, #24
 8005750:	46bd      	mov	sp, r7
 8005752:	bd80      	pop	{r7, pc}
 8005754:	20000098 	.word	0x20000098

08005758 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b084      	sub	sp, #16
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d04c      	beq.n	8005800 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	f003 0303 	and.w	r3, r3, #3
 800576c:	2b00      	cmp	r3, #0
 800576e:	d007      	beq.n	8005780 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8005770:	4b25      	ldr	r3, [pc, #148]	; (8005808 <mem_free+0xb0>)
 8005772:	f240 2273 	movw	r2, #627	; 0x273
 8005776:	4925      	ldr	r1, [pc, #148]	; (800580c <mem_free+0xb4>)
 8005778:	4825      	ldr	r0, [pc, #148]	; (8005810 <mem_free+0xb8>)
 800577a:	f009 f8df 	bl	800e93c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800577e:	e040      	b.n	8005802 <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	3b08      	subs	r3, #8
 8005784:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8005786:	4b23      	ldr	r3, [pc, #140]	; (8005814 <mem_free+0xbc>)
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	68fa      	ldr	r2, [r7, #12]
 800578c:	429a      	cmp	r2, r3
 800578e:	d306      	bcc.n	800579e <mem_free+0x46>
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	f103 020c 	add.w	r2, r3, #12
 8005796:	4b20      	ldr	r3, [pc, #128]	; (8005818 <mem_free+0xc0>)
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	429a      	cmp	r2, r3
 800579c:	d907      	bls.n	80057ae <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800579e:	4b1a      	ldr	r3, [pc, #104]	; (8005808 <mem_free+0xb0>)
 80057a0:	f240 227f 	movw	r2, #639	; 0x27f
 80057a4:	491d      	ldr	r1, [pc, #116]	; (800581c <mem_free+0xc4>)
 80057a6:	481a      	ldr	r0, [pc, #104]	; (8005810 <mem_free+0xb8>)
 80057a8:	f009 f8c8 	bl	800e93c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80057ac:	e029      	b.n	8005802 <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	791b      	ldrb	r3, [r3, #4]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d107      	bne.n	80057c6 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 80057b6:	4b14      	ldr	r3, [pc, #80]	; (8005808 <mem_free+0xb0>)
 80057b8:	f44f 7223 	mov.w	r2, #652	; 0x28c
 80057bc:	4918      	ldr	r1, [pc, #96]	; (8005820 <mem_free+0xc8>)
 80057be:	4814      	ldr	r0, [pc, #80]	; (8005810 <mem_free+0xb8>)
 80057c0:	f009 f8bc 	bl	800e93c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80057c4:	e01d      	b.n	8005802 <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 80057c6:	68f8      	ldr	r0, [r7, #12]
 80057c8:	f7ff ff8a 	bl	80056e0 <mem_link_valid>
 80057cc:	4603      	mov	r3, r0
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d107      	bne.n	80057e2 <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 80057d2:	4b0d      	ldr	r3, [pc, #52]	; (8005808 <mem_free+0xb0>)
 80057d4:	f240 2295 	movw	r2, #661	; 0x295
 80057d8:	4912      	ldr	r1, [pc, #72]	; (8005824 <mem_free+0xcc>)
 80057da:	480d      	ldr	r0, [pc, #52]	; (8005810 <mem_free+0xb8>)
 80057dc:	f009 f8ae 	bl	800e93c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80057e0:	e00f      	b.n	8005802 <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	2200      	movs	r2, #0
 80057e6:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 80057e8:	4b0f      	ldr	r3, [pc, #60]	; (8005828 <mem_free+0xd0>)
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	68fa      	ldr	r2, [r7, #12]
 80057ee:	429a      	cmp	r2, r3
 80057f0:	d202      	bcs.n	80057f8 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 80057f2:	4a0d      	ldr	r2, [pc, #52]	; (8005828 <mem_free+0xd0>)
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 80057f8:	68f8      	ldr	r0, [r7, #12]
 80057fa:	f7ff fe93 	bl	8005524 <plug_holes>
 80057fe:	e000      	b.n	8005802 <mem_free+0xaa>
    return;
 8005800:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8005802:	3710      	adds	r7, #16
 8005804:	46bd      	mov	sp, r7
 8005806:	bd80      	pop	{r7, pc}
 8005808:	0800f818 	.word	0x0800f818
 800580c:	0800f8ec 	.word	0x0800f8ec
 8005810:	0800f860 	.word	0x0800f860
 8005814:	20000094 	.word	0x20000094
 8005818:	20000098 	.word	0x20000098
 800581c:	0800f910 	.word	0x0800f910
 8005820:	0800f92c 	.word	0x0800f92c
 8005824:	0800f954 	.word	0x0800f954
 8005828:	2000009c 	.word	0x2000009c

0800582c <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800582c:	b580      	push	{r7, lr}
 800582e:	b088      	sub	sp, #32
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
 8005834:	460b      	mov	r3, r1
 8005836:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8005838:	887b      	ldrh	r3, [r7, #2]
 800583a:	3303      	adds	r3, #3
 800583c:	b29b      	uxth	r3, r3
 800583e:	f023 0303 	bic.w	r3, r3, #3
 8005842:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8005844:	8bfb      	ldrh	r3, [r7, #30]
 8005846:	2b0b      	cmp	r3, #11
 8005848:	d801      	bhi.n	800584e <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800584a:	230c      	movs	r3, #12
 800584c:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800584e:	8bfb      	ldrh	r3, [r7, #30]
 8005850:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8005854:	d803      	bhi.n	800585e <mem_trim+0x32>
 8005856:	8bfa      	ldrh	r2, [r7, #30]
 8005858:	887b      	ldrh	r3, [r7, #2]
 800585a:	429a      	cmp	r2, r3
 800585c:	d201      	bcs.n	8005862 <mem_trim+0x36>
    return NULL;
 800585e:	2300      	movs	r3, #0
 8005860:	e0cc      	b.n	80059fc <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8005862:	4b68      	ldr	r3, [pc, #416]	; (8005a04 <mem_trim+0x1d8>)
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	687a      	ldr	r2, [r7, #4]
 8005868:	429a      	cmp	r2, r3
 800586a:	d304      	bcc.n	8005876 <mem_trim+0x4a>
 800586c:	4b66      	ldr	r3, [pc, #408]	; (8005a08 <mem_trim+0x1dc>)
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	687a      	ldr	r2, [r7, #4]
 8005872:	429a      	cmp	r2, r3
 8005874:	d306      	bcc.n	8005884 <mem_trim+0x58>
 8005876:	4b65      	ldr	r3, [pc, #404]	; (8005a0c <mem_trim+0x1e0>)
 8005878:	f240 22d2 	movw	r2, #722	; 0x2d2
 800587c:	4964      	ldr	r1, [pc, #400]	; (8005a10 <mem_trim+0x1e4>)
 800587e:	4865      	ldr	r0, [pc, #404]	; (8005a14 <mem_trim+0x1e8>)
 8005880:	f009 f85c 	bl	800e93c <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8005884:	4b5f      	ldr	r3, [pc, #380]	; (8005a04 <mem_trim+0x1d8>)
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	687a      	ldr	r2, [r7, #4]
 800588a:	429a      	cmp	r2, r3
 800588c:	d304      	bcc.n	8005898 <mem_trim+0x6c>
 800588e:	4b5e      	ldr	r3, [pc, #376]	; (8005a08 <mem_trim+0x1dc>)
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	687a      	ldr	r2, [r7, #4]
 8005894:	429a      	cmp	r2, r3
 8005896:	d301      	bcc.n	800589c <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	e0af      	b.n	80059fc <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	3b08      	subs	r3, #8
 80058a0:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 80058a2:	69b8      	ldr	r0, [r7, #24]
 80058a4:	f7ff fe2c 	bl	8005500 <mem_to_ptr>
 80058a8:	4603      	mov	r3, r0
 80058aa:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 80058ac:	69bb      	ldr	r3, [r7, #24]
 80058ae:	881a      	ldrh	r2, [r3, #0]
 80058b0:	8afb      	ldrh	r3, [r7, #22]
 80058b2:	1ad3      	subs	r3, r2, r3
 80058b4:	b29b      	uxth	r3, r3
 80058b6:	3b08      	subs	r3, #8
 80058b8:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 80058ba:	8bfa      	ldrh	r2, [r7, #30]
 80058bc:	8abb      	ldrh	r3, [r7, #20]
 80058be:	429a      	cmp	r2, r3
 80058c0:	d906      	bls.n	80058d0 <mem_trim+0xa4>
 80058c2:	4b52      	ldr	r3, [pc, #328]	; (8005a0c <mem_trim+0x1e0>)
 80058c4:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 80058c8:	4953      	ldr	r1, [pc, #332]	; (8005a18 <mem_trim+0x1ec>)
 80058ca:	4852      	ldr	r0, [pc, #328]	; (8005a14 <mem_trim+0x1e8>)
 80058cc:	f009 f836 	bl	800e93c <iprintf>
  if (newsize > size) {
 80058d0:	8bfa      	ldrh	r2, [r7, #30]
 80058d2:	8abb      	ldrh	r3, [r7, #20]
 80058d4:	429a      	cmp	r2, r3
 80058d6:	d901      	bls.n	80058dc <mem_trim+0xb0>
    /* not supported */
    return NULL;
 80058d8:	2300      	movs	r3, #0
 80058da:	e08f      	b.n	80059fc <mem_trim+0x1d0>
  }
  if (newsize == size) {
 80058dc:	8bfa      	ldrh	r2, [r7, #30]
 80058de:	8abb      	ldrh	r3, [r7, #20]
 80058e0:	429a      	cmp	r2, r3
 80058e2:	d101      	bne.n	80058e8 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	e089      	b.n	80059fc <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 80058e8:	69bb      	ldr	r3, [r7, #24]
 80058ea:	881b      	ldrh	r3, [r3, #0]
 80058ec:	4618      	mov	r0, r3
 80058ee:	f7ff fdf5 	bl	80054dc <ptr_to_mem>
 80058f2:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 80058f4:	693b      	ldr	r3, [r7, #16]
 80058f6:	791b      	ldrb	r3, [r3, #4]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d13f      	bne.n	800597c <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80058fc:	69bb      	ldr	r3, [r7, #24]
 80058fe:	881b      	ldrh	r3, [r3, #0]
 8005900:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8005904:	d106      	bne.n	8005914 <mem_trim+0xe8>
 8005906:	4b41      	ldr	r3, [pc, #260]	; (8005a0c <mem_trim+0x1e0>)
 8005908:	f240 22f5 	movw	r2, #757	; 0x2f5
 800590c:	4943      	ldr	r1, [pc, #268]	; (8005a1c <mem_trim+0x1f0>)
 800590e:	4841      	ldr	r0, [pc, #260]	; (8005a14 <mem_trim+0x1e8>)
 8005910:	f009 f814 	bl	800e93c <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8005914:	693b      	ldr	r3, [r7, #16]
 8005916:	881b      	ldrh	r3, [r3, #0]
 8005918:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800591a:	8afa      	ldrh	r2, [r7, #22]
 800591c:	8bfb      	ldrh	r3, [r7, #30]
 800591e:	4413      	add	r3, r2
 8005920:	b29b      	uxth	r3, r3
 8005922:	3308      	adds	r3, #8
 8005924:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8005926:	4b3e      	ldr	r3, [pc, #248]	; (8005a20 <mem_trim+0x1f4>)
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	693a      	ldr	r2, [r7, #16]
 800592c:	429a      	cmp	r2, r3
 800592e:	d106      	bne.n	800593e <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 8005930:	89fb      	ldrh	r3, [r7, #14]
 8005932:	4618      	mov	r0, r3
 8005934:	f7ff fdd2 	bl	80054dc <ptr_to_mem>
 8005938:	4602      	mov	r2, r0
 800593a:	4b39      	ldr	r3, [pc, #228]	; (8005a20 <mem_trim+0x1f4>)
 800593c:	601a      	str	r2, [r3, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800593e:	89fb      	ldrh	r3, [r7, #14]
 8005940:	4618      	mov	r0, r3
 8005942:	f7ff fdcb 	bl	80054dc <ptr_to_mem>
 8005946:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8005948:	693b      	ldr	r3, [r7, #16]
 800594a:	2200      	movs	r2, #0
 800594c:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800594e:	693b      	ldr	r3, [r7, #16]
 8005950:	89ba      	ldrh	r2, [r7, #12]
 8005952:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8005954:	693b      	ldr	r3, [r7, #16]
 8005956:	8afa      	ldrh	r2, [r7, #22]
 8005958:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800595a:	69bb      	ldr	r3, [r7, #24]
 800595c:	89fa      	ldrh	r2, [r7, #14]
 800595e:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8005960:	693b      	ldr	r3, [r7, #16]
 8005962:	881b      	ldrh	r3, [r3, #0]
 8005964:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8005968:	d047      	beq.n	80059fa <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800596a:	693b      	ldr	r3, [r7, #16]
 800596c:	881b      	ldrh	r3, [r3, #0]
 800596e:	4618      	mov	r0, r3
 8005970:	f7ff fdb4 	bl	80054dc <ptr_to_mem>
 8005974:	4602      	mov	r2, r0
 8005976:	89fb      	ldrh	r3, [r7, #14]
 8005978:	8053      	strh	r3, [r2, #2]
 800597a:	e03e      	b.n	80059fa <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800597c:	8bfb      	ldrh	r3, [r7, #30]
 800597e:	f103 0214 	add.w	r2, r3, #20
 8005982:	8abb      	ldrh	r3, [r7, #20]
 8005984:	429a      	cmp	r2, r3
 8005986:	d838      	bhi.n	80059fa <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8005988:	8afa      	ldrh	r2, [r7, #22]
 800598a:	8bfb      	ldrh	r3, [r7, #30]
 800598c:	4413      	add	r3, r2
 800598e:	b29b      	uxth	r3, r3
 8005990:	3308      	adds	r3, #8
 8005992:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8005994:	69bb      	ldr	r3, [r7, #24]
 8005996:	881b      	ldrh	r3, [r3, #0]
 8005998:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800599c:	d106      	bne.n	80059ac <mem_trim+0x180>
 800599e:	4b1b      	ldr	r3, [pc, #108]	; (8005a0c <mem_trim+0x1e0>)
 80059a0:	f240 3216 	movw	r2, #790	; 0x316
 80059a4:	491d      	ldr	r1, [pc, #116]	; (8005a1c <mem_trim+0x1f0>)
 80059a6:	481b      	ldr	r0, [pc, #108]	; (8005a14 <mem_trim+0x1e8>)
 80059a8:	f008 ffc8 	bl	800e93c <iprintf>
    mem2 = ptr_to_mem(ptr2);
 80059ac:	89fb      	ldrh	r3, [r7, #14]
 80059ae:	4618      	mov	r0, r3
 80059b0:	f7ff fd94 	bl	80054dc <ptr_to_mem>
 80059b4:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 80059b6:	4b1a      	ldr	r3, [pc, #104]	; (8005a20 <mem_trim+0x1f4>)
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	693a      	ldr	r2, [r7, #16]
 80059bc:	429a      	cmp	r2, r3
 80059be:	d202      	bcs.n	80059c6 <mem_trim+0x19a>
      lfree = mem2;
 80059c0:	4a17      	ldr	r2, [pc, #92]	; (8005a20 <mem_trim+0x1f4>)
 80059c2:	693b      	ldr	r3, [r7, #16]
 80059c4:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 80059c6:	693b      	ldr	r3, [r7, #16]
 80059c8:	2200      	movs	r2, #0
 80059ca:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 80059cc:	69bb      	ldr	r3, [r7, #24]
 80059ce:	881a      	ldrh	r2, [r3, #0]
 80059d0:	693b      	ldr	r3, [r7, #16]
 80059d2:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 80059d4:	693b      	ldr	r3, [r7, #16]
 80059d6:	8afa      	ldrh	r2, [r7, #22]
 80059d8:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 80059da:	69bb      	ldr	r3, [r7, #24]
 80059dc:	89fa      	ldrh	r2, [r7, #14]
 80059de:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80059e0:	693b      	ldr	r3, [r7, #16]
 80059e2:	881b      	ldrh	r3, [r3, #0]
 80059e4:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80059e8:	d007      	beq.n	80059fa <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80059ea:	693b      	ldr	r3, [r7, #16]
 80059ec:	881b      	ldrh	r3, [r3, #0]
 80059ee:	4618      	mov	r0, r3
 80059f0:	f7ff fd74 	bl	80054dc <ptr_to_mem>
 80059f4:	4602      	mov	r2, r0
 80059f6:	89fb      	ldrh	r3, [r7, #14]
 80059f8:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 80059fa:	687b      	ldr	r3, [r7, #4]
}
 80059fc:	4618      	mov	r0, r3
 80059fe:	3720      	adds	r7, #32
 8005a00:	46bd      	mov	sp, r7
 8005a02:	bd80      	pop	{r7, pc}
 8005a04:	20000094 	.word	0x20000094
 8005a08:	20000098 	.word	0x20000098
 8005a0c:	0800f818 	.word	0x0800f818
 8005a10:	0800f988 	.word	0x0800f988
 8005a14:	0800f860 	.word	0x0800f860
 8005a18:	0800f9a0 	.word	0x0800f9a0
 8005a1c:	0800f9c0 	.word	0x0800f9c0
 8005a20:	2000009c 	.word	0x2000009c

08005a24 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b088      	sub	sp, #32
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	4603      	mov	r3, r0
 8005a2c:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8005a2e:	88fb      	ldrh	r3, [r7, #6]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d101      	bne.n	8005a38 <mem_malloc+0x14>
    return NULL;
 8005a34:	2300      	movs	r3, #0
 8005a36:	e0d9      	b.n	8005bec <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8005a38:	88fb      	ldrh	r3, [r7, #6]
 8005a3a:	3303      	adds	r3, #3
 8005a3c:	b29b      	uxth	r3, r3
 8005a3e:	f023 0303 	bic.w	r3, r3, #3
 8005a42:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8005a44:	8bbb      	ldrh	r3, [r7, #28]
 8005a46:	2b0b      	cmp	r3, #11
 8005a48:	d801      	bhi.n	8005a4e <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8005a4a:	230c      	movs	r3, #12
 8005a4c:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8005a4e:	8bbb      	ldrh	r3, [r7, #28]
 8005a50:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8005a54:	d803      	bhi.n	8005a5e <mem_malloc+0x3a>
 8005a56:	8bba      	ldrh	r2, [r7, #28]
 8005a58:	88fb      	ldrh	r3, [r7, #6]
 8005a5a:	429a      	cmp	r2, r3
 8005a5c:	d201      	bcs.n	8005a62 <mem_malloc+0x3e>
    return NULL;
 8005a5e:	2300      	movs	r3, #0
 8005a60:	e0c4      	b.n	8005bec <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8005a62:	4b64      	ldr	r3, [pc, #400]	; (8005bf4 <mem_malloc+0x1d0>)
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	4618      	mov	r0, r3
 8005a68:	f7ff fd4a 	bl	8005500 <mem_to_ptr>
 8005a6c:	4603      	mov	r3, r0
 8005a6e:	83fb      	strh	r3, [r7, #30]
 8005a70:	e0b4      	b.n	8005bdc <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8005a72:	8bfb      	ldrh	r3, [r7, #30]
 8005a74:	4618      	mov	r0, r3
 8005a76:	f7ff fd31 	bl	80054dc <ptr_to_mem>
 8005a7a:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8005a7c:	697b      	ldr	r3, [r7, #20]
 8005a7e:	791b      	ldrb	r3, [r3, #4]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	f040 80a4 	bne.w	8005bce <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8005a86:	697b      	ldr	r3, [r7, #20]
 8005a88:	881b      	ldrh	r3, [r3, #0]
 8005a8a:	461a      	mov	r2, r3
 8005a8c:	8bfb      	ldrh	r3, [r7, #30]
 8005a8e:	1ad3      	subs	r3, r2, r3
 8005a90:	f1a3 0208 	sub.w	r2, r3, #8
 8005a94:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8005a96:	429a      	cmp	r2, r3
 8005a98:	f0c0 8099 	bcc.w	8005bce <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8005a9c:	697b      	ldr	r3, [r7, #20]
 8005a9e:	881b      	ldrh	r3, [r3, #0]
 8005aa0:	461a      	mov	r2, r3
 8005aa2:	8bfb      	ldrh	r3, [r7, #30]
 8005aa4:	1ad3      	subs	r3, r2, r3
 8005aa6:	f1a3 0208 	sub.w	r2, r3, #8
 8005aaa:	8bbb      	ldrh	r3, [r7, #28]
 8005aac:	3314      	adds	r3, #20
 8005aae:	429a      	cmp	r2, r3
 8005ab0:	d333      	bcc.n	8005b1a <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8005ab2:	8bfa      	ldrh	r2, [r7, #30]
 8005ab4:	8bbb      	ldrh	r3, [r7, #28]
 8005ab6:	4413      	add	r3, r2
 8005ab8:	b29b      	uxth	r3, r3
 8005aba:	3308      	adds	r3, #8
 8005abc:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8005abe:	8a7b      	ldrh	r3, [r7, #18]
 8005ac0:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8005ac4:	d106      	bne.n	8005ad4 <mem_malloc+0xb0>
 8005ac6:	4b4c      	ldr	r3, [pc, #304]	; (8005bf8 <mem_malloc+0x1d4>)
 8005ac8:	f240 3287 	movw	r2, #903	; 0x387
 8005acc:	494b      	ldr	r1, [pc, #300]	; (8005bfc <mem_malloc+0x1d8>)
 8005ace:	484c      	ldr	r0, [pc, #304]	; (8005c00 <mem_malloc+0x1dc>)
 8005ad0:	f008 ff34 	bl	800e93c <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8005ad4:	8a7b      	ldrh	r3, [r7, #18]
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	f7ff fd00 	bl	80054dc <ptr_to_mem>
 8005adc:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8005ae4:	697b      	ldr	r3, [r7, #20]
 8005ae6:	881a      	ldrh	r2, [r3, #0]
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	8bfa      	ldrh	r2, [r7, #30]
 8005af0:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8005af2:	697b      	ldr	r3, [r7, #20]
 8005af4:	8a7a      	ldrh	r2, [r7, #18]
 8005af6:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8005af8:	697b      	ldr	r3, [r7, #20]
 8005afa:	2201      	movs	r2, #1
 8005afc:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	881b      	ldrh	r3, [r3, #0]
 8005b02:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8005b06:	d00b      	beq.n	8005b20 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	881b      	ldrh	r3, [r3, #0]
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	f7ff fce5 	bl	80054dc <ptr_to_mem>
 8005b12:	4602      	mov	r2, r0
 8005b14:	8a7b      	ldrh	r3, [r7, #18]
 8005b16:	8053      	strh	r3, [r2, #2]
 8005b18:	e002      	b.n	8005b20 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8005b1a:	697b      	ldr	r3, [r7, #20]
 8005b1c:	2201      	movs	r2, #1
 8005b1e:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8005b20:	4b34      	ldr	r3, [pc, #208]	; (8005bf4 <mem_malloc+0x1d0>)
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	697a      	ldr	r2, [r7, #20]
 8005b26:	429a      	cmp	r2, r3
 8005b28:	d127      	bne.n	8005b7a <mem_malloc+0x156>
          struct mem *cur = lfree;
 8005b2a:	4b32      	ldr	r3, [pc, #200]	; (8005bf4 <mem_malloc+0x1d0>)
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8005b30:	e005      	b.n	8005b3e <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8005b32:	69bb      	ldr	r3, [r7, #24]
 8005b34:	881b      	ldrh	r3, [r3, #0]
 8005b36:	4618      	mov	r0, r3
 8005b38:	f7ff fcd0 	bl	80054dc <ptr_to_mem>
 8005b3c:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8005b3e:	69bb      	ldr	r3, [r7, #24]
 8005b40:	791b      	ldrb	r3, [r3, #4]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d004      	beq.n	8005b50 <mem_malloc+0x12c>
 8005b46:	4b2f      	ldr	r3, [pc, #188]	; (8005c04 <mem_malloc+0x1e0>)
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	69ba      	ldr	r2, [r7, #24]
 8005b4c:	429a      	cmp	r2, r3
 8005b4e:	d1f0      	bne.n	8005b32 <mem_malloc+0x10e>
          }
          lfree = cur;
 8005b50:	4a28      	ldr	r2, [pc, #160]	; (8005bf4 <mem_malloc+0x1d0>)
 8005b52:	69bb      	ldr	r3, [r7, #24]
 8005b54:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8005b56:	4b27      	ldr	r3, [pc, #156]	; (8005bf4 <mem_malloc+0x1d0>)
 8005b58:	681a      	ldr	r2, [r3, #0]
 8005b5a:	4b2a      	ldr	r3, [pc, #168]	; (8005c04 <mem_malloc+0x1e0>)
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	429a      	cmp	r2, r3
 8005b60:	d00b      	beq.n	8005b7a <mem_malloc+0x156>
 8005b62:	4b24      	ldr	r3, [pc, #144]	; (8005bf4 <mem_malloc+0x1d0>)
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	791b      	ldrb	r3, [r3, #4]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d006      	beq.n	8005b7a <mem_malloc+0x156>
 8005b6c:	4b22      	ldr	r3, [pc, #136]	; (8005bf8 <mem_malloc+0x1d4>)
 8005b6e:	f240 32b5 	movw	r2, #949	; 0x3b5
 8005b72:	4925      	ldr	r1, [pc, #148]	; (8005c08 <mem_malloc+0x1e4>)
 8005b74:	4822      	ldr	r0, [pc, #136]	; (8005c00 <mem_malloc+0x1dc>)
 8005b76:	f008 fee1 	bl	800e93c <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8005b7a:	8bba      	ldrh	r2, [r7, #28]
 8005b7c:	697b      	ldr	r3, [r7, #20]
 8005b7e:	4413      	add	r3, r2
 8005b80:	3308      	adds	r3, #8
 8005b82:	4a20      	ldr	r2, [pc, #128]	; (8005c04 <mem_malloc+0x1e0>)
 8005b84:	6812      	ldr	r2, [r2, #0]
 8005b86:	4293      	cmp	r3, r2
 8005b88:	d906      	bls.n	8005b98 <mem_malloc+0x174>
 8005b8a:	4b1b      	ldr	r3, [pc, #108]	; (8005bf8 <mem_malloc+0x1d4>)
 8005b8c:	f240 32ba 	movw	r2, #954	; 0x3ba
 8005b90:	491e      	ldr	r1, [pc, #120]	; (8005c0c <mem_malloc+0x1e8>)
 8005b92:	481b      	ldr	r0, [pc, #108]	; (8005c00 <mem_malloc+0x1dc>)
 8005b94:	f008 fed2 	bl	800e93c <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8005b98:	697b      	ldr	r3, [r7, #20]
 8005b9a:	f003 0303 	and.w	r3, r3, #3
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d006      	beq.n	8005bb0 <mem_malloc+0x18c>
 8005ba2:	4b15      	ldr	r3, [pc, #84]	; (8005bf8 <mem_malloc+0x1d4>)
 8005ba4:	f44f 726f 	mov.w	r2, #956	; 0x3bc
 8005ba8:	4919      	ldr	r1, [pc, #100]	; (8005c10 <mem_malloc+0x1ec>)
 8005baa:	4815      	ldr	r0, [pc, #84]	; (8005c00 <mem_malloc+0x1dc>)
 8005bac:	f008 fec6 	bl	800e93c <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8005bb0:	697b      	ldr	r3, [r7, #20]
 8005bb2:	f003 0303 	and.w	r3, r3, #3
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d006      	beq.n	8005bc8 <mem_malloc+0x1a4>
 8005bba:	4b0f      	ldr	r3, [pc, #60]	; (8005bf8 <mem_malloc+0x1d4>)
 8005bbc:	f240 32be 	movw	r2, #958	; 0x3be
 8005bc0:	4914      	ldr	r1, [pc, #80]	; (8005c14 <mem_malloc+0x1f0>)
 8005bc2:	480f      	ldr	r0, [pc, #60]	; (8005c00 <mem_malloc+0x1dc>)
 8005bc4:	f008 feba 	bl	800e93c <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8005bc8:	697b      	ldr	r3, [r7, #20]
 8005bca:	3308      	adds	r3, #8
 8005bcc:	e00e      	b.n	8005bec <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 8005bce:	8bfb      	ldrh	r3, [r7, #30]
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	f7ff fc83 	bl	80054dc <ptr_to_mem>
 8005bd6:	4603      	mov	r3, r0
 8005bd8:	881b      	ldrh	r3, [r3, #0]
 8005bda:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8005bdc:	8bfa      	ldrh	r2, [r7, #30]
 8005bde:	8bbb      	ldrh	r3, [r7, #28]
 8005be0:	f5c3 5320 	rsb	r3, r3, #10240	; 0x2800
 8005be4:	429a      	cmp	r2, r3
 8005be6:	f4ff af44 	bcc.w	8005a72 <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8005bea:	2300      	movs	r3, #0
}
 8005bec:	4618      	mov	r0, r3
 8005bee:	3720      	adds	r7, #32
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	bd80      	pop	{r7, pc}
 8005bf4:	2000009c 	.word	0x2000009c
 8005bf8:	0800f818 	.word	0x0800f818
 8005bfc:	0800f9c0 	.word	0x0800f9c0
 8005c00:	0800f860 	.word	0x0800f860
 8005c04:	20000098 	.word	0x20000098
 8005c08:	0800f9d4 	.word	0x0800f9d4
 8005c0c:	0800f9f0 	.word	0x0800f9f0
 8005c10:	0800fa20 	.word	0x0800fa20
 8005c14:	0800fa50 	.word	0x0800fa50

08005c18 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8005c18:	b480      	push	{r7}
 8005c1a:	b085      	sub	sp, #20
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	689b      	ldr	r3, [r3, #8]
 8005c24:	2200      	movs	r2, #0
 8005c26:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	685b      	ldr	r3, [r3, #4]
 8005c2c:	3303      	adds	r3, #3
 8005c2e:	f023 0303 	bic.w	r3, r3, #3
 8005c32:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8005c34:	2300      	movs	r3, #0
 8005c36:	60fb      	str	r3, [r7, #12]
 8005c38:	e011      	b.n	8005c5e <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	689b      	ldr	r3, [r3, #8]
 8005c3e:	681a      	ldr	r2, [r3, #0]
 8005c40:	68bb      	ldr	r3, [r7, #8]
 8005c42:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	689b      	ldr	r3, [r3, #8]
 8005c48:	68ba      	ldr	r2, [r7, #8]
 8005c4a:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	881b      	ldrh	r3, [r3, #0]
 8005c50:	461a      	mov	r2, r3
 8005c52:	68bb      	ldr	r3, [r7, #8]
 8005c54:	4413      	add	r3, r2
 8005c56:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	3301      	adds	r3, #1
 8005c5c:	60fb      	str	r3, [r7, #12]
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	885b      	ldrh	r3, [r3, #2]
 8005c62:	461a      	mov	r2, r3
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	4293      	cmp	r3, r2
 8005c68:	dbe7      	blt.n	8005c3a <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8005c6a:	bf00      	nop
 8005c6c:	3714      	adds	r7, #20
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c74:	4770      	bx	lr
	...

08005c78 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b082      	sub	sp, #8
 8005c7c:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8005c7e:	2300      	movs	r3, #0
 8005c80:	80fb      	strh	r3, [r7, #6]
 8005c82:	e009      	b.n	8005c98 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8005c84:	88fb      	ldrh	r3, [r7, #6]
 8005c86:	4a08      	ldr	r2, [pc, #32]	; (8005ca8 <memp_init+0x30>)
 8005c88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	f7ff ffc3 	bl	8005c18 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8005c92:	88fb      	ldrh	r3, [r7, #6]
 8005c94:	3301      	adds	r3, #1
 8005c96:	80fb      	strh	r3, [r7, #6]
 8005c98:	88fb      	ldrh	r3, [r7, #6]
 8005c9a:	2b07      	cmp	r3, #7
 8005c9c:	d9f2      	bls.n	8005c84 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8005c9e:	bf00      	nop
 8005ca0:	3708      	adds	r7, #8
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	bd80      	pop	{r7, pc}
 8005ca6:	bf00      	nop
 8005ca8:	08011eb8 	.word	0x08011eb8

08005cac <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8005cac:	b580      	push	{r7, lr}
 8005cae:	b084      	sub	sp, #16
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	689b      	ldr	r3, [r3, #8]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d012      	beq.n	8005ce8 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	689b      	ldr	r3, [r3, #8]
 8005cc6:	68fa      	ldr	r2, [r7, #12]
 8005cc8:	6812      	ldr	r2, [r2, #0]
 8005cca:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	f003 0303 	and.w	r3, r3, #3
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d006      	beq.n	8005ce4 <do_memp_malloc_pool+0x38>
 8005cd6:	4b07      	ldr	r3, [pc, #28]	; (8005cf4 <do_memp_malloc_pool+0x48>)
 8005cd8:	f240 1219 	movw	r2, #281	; 0x119
 8005cdc:	4906      	ldr	r1, [pc, #24]	; (8005cf8 <do_memp_malloc_pool+0x4c>)
 8005cde:	4807      	ldr	r0, [pc, #28]	; (8005cfc <do_memp_malloc_pool+0x50>)
 8005ce0:	f008 fe2c 	bl	800e93c <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	e000      	b.n	8005cea <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8005ce8:	2300      	movs	r3, #0
}
 8005cea:	4618      	mov	r0, r3
 8005cec:	3710      	adds	r7, #16
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	bd80      	pop	{r7, pc}
 8005cf2:	bf00      	nop
 8005cf4:	0800fa74 	.word	0x0800fa74
 8005cf8:	0800faa4 	.word	0x0800faa4
 8005cfc:	0800fac8 	.word	0x0800fac8

08005d00 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b084      	sub	sp, #16
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	4603      	mov	r3, r0
 8005d08:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8005d0a:	79fb      	ldrb	r3, [r7, #7]
 8005d0c:	2b07      	cmp	r3, #7
 8005d0e:	d908      	bls.n	8005d22 <memp_malloc+0x22>
 8005d10:	4b0a      	ldr	r3, [pc, #40]	; (8005d3c <memp_malloc+0x3c>)
 8005d12:	f240 1257 	movw	r2, #343	; 0x157
 8005d16:	490a      	ldr	r1, [pc, #40]	; (8005d40 <memp_malloc+0x40>)
 8005d18:	480a      	ldr	r0, [pc, #40]	; (8005d44 <memp_malloc+0x44>)
 8005d1a:	f008 fe0f 	bl	800e93c <iprintf>
 8005d1e:	2300      	movs	r3, #0
 8005d20:	e008      	b.n	8005d34 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8005d22:	79fb      	ldrb	r3, [r7, #7]
 8005d24:	4a08      	ldr	r2, [pc, #32]	; (8005d48 <memp_malloc+0x48>)
 8005d26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	f7ff ffbe 	bl	8005cac <do_memp_malloc_pool>
 8005d30:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8005d32:	68fb      	ldr	r3, [r7, #12]
}
 8005d34:	4618      	mov	r0, r3
 8005d36:	3710      	adds	r7, #16
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	bd80      	pop	{r7, pc}
 8005d3c:	0800fa74 	.word	0x0800fa74
 8005d40:	0800fb04 	.word	0x0800fb04
 8005d44:	0800fac8 	.word	0x0800fac8
 8005d48:	08011eb8 	.word	0x08011eb8

08005d4c <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b084      	sub	sp, #16
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
 8005d54:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8005d56:	683b      	ldr	r3, [r7, #0]
 8005d58:	f003 0303 	and.w	r3, r3, #3
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d006      	beq.n	8005d6e <do_memp_free_pool+0x22>
 8005d60:	4b0a      	ldr	r3, [pc, #40]	; (8005d8c <do_memp_free_pool+0x40>)
 8005d62:	f240 126d 	movw	r2, #365	; 0x16d
 8005d66:	490a      	ldr	r1, [pc, #40]	; (8005d90 <do_memp_free_pool+0x44>)
 8005d68:	480a      	ldr	r0, [pc, #40]	; (8005d94 <do_memp_free_pool+0x48>)
 8005d6a:	f008 fde7 	bl	800e93c <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	689b      	ldr	r3, [r3, #8]
 8005d76:	681a      	ldr	r2, [r3, #0]
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	689b      	ldr	r3, [r3, #8]
 8005d80:	68fa      	ldr	r2, [r7, #12]
 8005d82:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8005d84:	bf00      	nop
 8005d86:	3710      	adds	r7, #16
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	bd80      	pop	{r7, pc}
 8005d8c:	0800fa74 	.word	0x0800fa74
 8005d90:	0800fb24 	.word	0x0800fb24
 8005d94:	0800fac8 	.word	0x0800fac8

08005d98 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b082      	sub	sp, #8
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	4603      	mov	r3, r0
 8005da0:	6039      	str	r1, [r7, #0]
 8005da2:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8005da4:	79fb      	ldrb	r3, [r7, #7]
 8005da6:	2b07      	cmp	r3, #7
 8005da8:	d907      	bls.n	8005dba <memp_free+0x22>
 8005daa:	4b0c      	ldr	r3, [pc, #48]	; (8005ddc <memp_free+0x44>)
 8005dac:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8005db0:	490b      	ldr	r1, [pc, #44]	; (8005de0 <memp_free+0x48>)
 8005db2:	480c      	ldr	r0, [pc, #48]	; (8005de4 <memp_free+0x4c>)
 8005db4:	f008 fdc2 	bl	800e93c <iprintf>
 8005db8:	e00c      	b.n	8005dd4 <memp_free+0x3c>

  if (mem == NULL) {
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d008      	beq.n	8005dd2 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8005dc0:	79fb      	ldrb	r3, [r7, #7]
 8005dc2:	4a09      	ldr	r2, [pc, #36]	; (8005de8 <memp_free+0x50>)
 8005dc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005dc8:	6839      	ldr	r1, [r7, #0]
 8005dca:	4618      	mov	r0, r3
 8005dcc:	f7ff ffbe 	bl	8005d4c <do_memp_free_pool>
 8005dd0:	e000      	b.n	8005dd4 <memp_free+0x3c>
    return;
 8005dd2:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8005dd4:	3708      	adds	r7, #8
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	bd80      	pop	{r7, pc}
 8005dda:	bf00      	nop
 8005ddc:	0800fa74 	.word	0x0800fa74
 8005de0:	0800fb44 	.word	0x0800fb44
 8005de4:	0800fac8 	.word	0x0800fac8
 8005de8:	08011eb8 	.word	0x08011eb8

08005dec <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8005dec:	b480      	push	{r7}
 8005dee:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8005df0:	bf00      	nop
 8005df2:	46bd      	mov	sp, r7
 8005df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df8:	4770      	bx	lr
	...

08005dfc <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	b086      	sub	sp, #24
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	60f8      	str	r0, [r7, #12]
 8005e04:	60b9      	str	r1, [r7, #8]
 8005e06:	607a      	str	r2, [r7, #4]
 8005e08:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d108      	bne.n	8005e22 <netif_add+0x26>
 8005e10:	4b57      	ldr	r3, [pc, #348]	; (8005f70 <netif_add+0x174>)
 8005e12:	f240 1227 	movw	r2, #295	; 0x127
 8005e16:	4957      	ldr	r1, [pc, #348]	; (8005f74 <netif_add+0x178>)
 8005e18:	4857      	ldr	r0, [pc, #348]	; (8005f78 <netif_add+0x17c>)
 8005e1a:	f008 fd8f 	bl	800e93c <iprintf>
 8005e1e:	2300      	movs	r3, #0
 8005e20:	e0a2      	b.n	8005f68 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8005e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d108      	bne.n	8005e3a <netif_add+0x3e>
 8005e28:	4b51      	ldr	r3, [pc, #324]	; (8005f70 <netif_add+0x174>)
 8005e2a:	f44f 7294 	mov.w	r2, #296	; 0x128
 8005e2e:	4953      	ldr	r1, [pc, #332]	; (8005f7c <netif_add+0x180>)
 8005e30:	4851      	ldr	r0, [pc, #324]	; (8005f78 <netif_add+0x17c>)
 8005e32:	f008 fd83 	bl	800e93c <iprintf>
 8005e36:	2300      	movs	r3, #0
 8005e38:	e096      	b.n	8005f68 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8005e3a:	68bb      	ldr	r3, [r7, #8]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d101      	bne.n	8005e44 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8005e40:	4b4f      	ldr	r3, [pc, #316]	; (8005f80 <netif_add+0x184>)
 8005e42:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d101      	bne.n	8005e4e <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8005e4a:	4b4d      	ldr	r3, [pc, #308]	; (8005f80 <netif_add+0x184>)
 8005e4c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d101      	bne.n	8005e58 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8005e54:	4b4a      	ldr	r3, [pc, #296]	; (8005f80 <netif_add+0x184>)
 8005e56:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	2200      	movs	r2, #0
 8005e62:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	2200      	movs	r2, #0
 8005e68:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	4a45      	ldr	r2, [pc, #276]	; (8005f84 <netif_add+0x188>)
 8005e6e:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	2200      	movs	r2, #0
 8005e74:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	2200      	movs	r2, #0
 8005e7a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	2200      	movs	r2, #0
 8005e82:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	6a3a      	ldr	r2, [r7, #32]
 8005e88:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8005e8a:	4b3f      	ldr	r3, [pc, #252]	; (8005f88 <netif_add+0x18c>)
 8005e8c:	781a      	ldrb	r2, [r3, #0]
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005e98:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	687a      	ldr	r2, [r7, #4]
 8005e9e:	68b9      	ldr	r1, [r7, #8]
 8005ea0:	68f8      	ldr	r0, [r7, #12]
 8005ea2:	f000 f90f 	bl	80060c4 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8005ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ea8:	68f8      	ldr	r0, [r7, #12]
 8005eaa:	4798      	blx	r3
 8005eac:	4603      	mov	r3, r0
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d001      	beq.n	8005eb6 <netif_add+0xba>
    return NULL;
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	e058      	b.n	8005f68 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005ebc:	2bff      	cmp	r3, #255	; 0xff
 8005ebe:	d103      	bne.n	8005ec8 <netif_add+0xcc>
        netif->num = 0;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 8005ec8:	2300      	movs	r3, #0
 8005eca:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8005ecc:	4b2f      	ldr	r3, [pc, #188]	; (8005f8c <netif_add+0x190>)
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	617b      	str	r3, [r7, #20]
 8005ed2:	e02b      	b.n	8005f2c <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8005ed4:	697a      	ldr	r2, [r7, #20]
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	429a      	cmp	r2, r3
 8005eda:	d106      	bne.n	8005eea <netif_add+0xee>
 8005edc:	4b24      	ldr	r3, [pc, #144]	; (8005f70 <netif_add+0x174>)
 8005ede:	f240 128b 	movw	r2, #395	; 0x18b
 8005ee2:	492b      	ldr	r1, [pc, #172]	; (8005f90 <netif_add+0x194>)
 8005ee4:	4824      	ldr	r0, [pc, #144]	; (8005f78 <netif_add+0x17c>)
 8005ee6:	f008 fd29 	bl	800e93c <iprintf>
        num_netifs++;
 8005eea:	693b      	ldr	r3, [r7, #16]
 8005eec:	3301      	adds	r3, #1
 8005eee:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8005ef0:	693b      	ldr	r3, [r7, #16]
 8005ef2:	2bff      	cmp	r3, #255	; 0xff
 8005ef4:	dd06      	ble.n	8005f04 <netif_add+0x108>
 8005ef6:	4b1e      	ldr	r3, [pc, #120]	; (8005f70 <netif_add+0x174>)
 8005ef8:	f240 128d 	movw	r2, #397	; 0x18d
 8005efc:	4925      	ldr	r1, [pc, #148]	; (8005f94 <netif_add+0x198>)
 8005efe:	481e      	ldr	r0, [pc, #120]	; (8005f78 <netif_add+0x17c>)
 8005f00:	f008 fd1c 	bl	800e93c <iprintf>
        if (netif2->num == netif->num) {
 8005f04:	697b      	ldr	r3, [r7, #20]
 8005f06:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005f10:	429a      	cmp	r2, r3
 8005f12:	d108      	bne.n	8005f26 <netif_add+0x12a>
          netif->num++;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005f1a:	3301      	adds	r3, #1
 8005f1c:	b2da      	uxtb	r2, r3
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 8005f24:	e005      	b.n	8005f32 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8005f26:	697b      	ldr	r3, [r7, #20]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	617b      	str	r3, [r7, #20]
 8005f2c:	697b      	ldr	r3, [r7, #20]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d1d0      	bne.n	8005ed4 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 8005f32:	697b      	ldr	r3, [r7, #20]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d1be      	bne.n	8005eb6 <netif_add+0xba>
  }
  if (netif->num == 254) {
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005f3e:	2bfe      	cmp	r3, #254	; 0xfe
 8005f40:	d103      	bne.n	8005f4a <netif_add+0x14e>
    netif_num = 0;
 8005f42:	4b11      	ldr	r3, [pc, #68]	; (8005f88 <netif_add+0x18c>)
 8005f44:	2200      	movs	r2, #0
 8005f46:	701a      	strb	r2, [r3, #0]
 8005f48:	e006      	b.n	8005f58 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005f50:	3301      	adds	r3, #1
 8005f52:	b2da      	uxtb	r2, r3
 8005f54:	4b0c      	ldr	r3, [pc, #48]	; (8005f88 <netif_add+0x18c>)
 8005f56:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8005f58:	4b0c      	ldr	r3, [pc, #48]	; (8005f8c <netif_add+0x190>)
 8005f5a:	681a      	ldr	r2, [r3, #0]
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8005f60:	4a0a      	ldr	r2, [pc, #40]	; (8005f8c <netif_add+0x190>)
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8005f66:	68fb      	ldr	r3, [r7, #12]
}
 8005f68:	4618      	mov	r0, r3
 8005f6a:	3718      	adds	r7, #24
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	bd80      	pop	{r7, pc}
 8005f70:	0800fb60 	.word	0x0800fb60
 8005f74:	0800fbf4 	.word	0x0800fbf4
 8005f78:	0800fbb0 	.word	0x0800fbb0
 8005f7c:	0800fc10 	.word	0x0800fc10
 8005f80:	08011f18 	.word	0x08011f18
 8005f84:	080062d7 	.word	0x080062d7
 8005f88:	200000c0 	.word	0x200000c0
 8005f8c:	20008ad0 	.word	0x20008ad0
 8005f90:	0800fc34 	.word	0x0800fc34
 8005f94:	0800fc48 	.word	0x0800fc48

08005f98 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b082      	sub	sp, #8
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
 8005fa0:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8005fa2:	6839      	ldr	r1, [r7, #0]
 8005fa4:	6878      	ldr	r0, [r7, #4]
 8005fa6:	f002 faab 	bl	8008500 <tcp_netif_ip_addr_changed>
  udp_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8005faa:	bf00      	nop
 8005fac:	3708      	adds	r7, #8
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	bd80      	pop	{r7, pc}
	...

08005fb4 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b086      	sub	sp, #24
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	60f8      	str	r0, [r7, #12]
 8005fbc:	60b9      	str	r1, [r7, #8]
 8005fbe:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8005fc0:	68bb      	ldr	r3, [r7, #8]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d106      	bne.n	8005fd4 <netif_do_set_ipaddr+0x20>
 8005fc6:	4b1d      	ldr	r3, [pc, #116]	; (800603c <netif_do_set_ipaddr+0x88>)
 8005fc8:	f240 12cb 	movw	r2, #459	; 0x1cb
 8005fcc:	491c      	ldr	r1, [pc, #112]	; (8006040 <netif_do_set_ipaddr+0x8c>)
 8005fce:	481d      	ldr	r0, [pc, #116]	; (8006044 <netif_do_set_ipaddr+0x90>)
 8005fd0:	f008 fcb4 	bl	800e93c <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d106      	bne.n	8005fe8 <netif_do_set_ipaddr+0x34>
 8005fda:	4b18      	ldr	r3, [pc, #96]	; (800603c <netif_do_set_ipaddr+0x88>)
 8005fdc:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8005fe0:	4917      	ldr	r1, [pc, #92]	; (8006040 <netif_do_set_ipaddr+0x8c>)
 8005fe2:	4818      	ldr	r0, [pc, #96]	; (8006044 <netif_do_set_ipaddr+0x90>)
 8005fe4:	f008 fcaa 	bl	800e93c <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8005fe8:	68bb      	ldr	r3, [r7, #8]
 8005fea:	681a      	ldr	r2, [r3, #0]
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	3304      	adds	r3, #4
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	429a      	cmp	r2, r3
 8005ff4:	d01c      	beq.n	8006030 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8005ff6:	68bb      	ldr	r3, [r7, #8]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	3304      	adds	r3, #4
 8006000:	681a      	ldr	r2, [r3, #0]
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8006006:	f107 0314 	add.w	r3, r7, #20
 800600a:	4619      	mov	r1, r3
 800600c:	6878      	ldr	r0, [r7, #4]
 800600e:	f7ff ffc3 	bl	8005f98 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8006012:	68bb      	ldr	r3, [r7, #8]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d002      	beq.n	800601e <netif_do_set_ipaddr+0x6a>
 8006018:	68bb      	ldr	r3, [r7, #8]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	e000      	b.n	8006020 <netif_do_set_ipaddr+0x6c>
 800601e:	2300      	movs	r3, #0
 8006020:	68fa      	ldr	r2, [r7, #12]
 8006022:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8006024:	2101      	movs	r1, #1
 8006026:	68f8      	ldr	r0, [r7, #12]
 8006028:	f000 f8d2 	bl	80061d0 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800602c:	2301      	movs	r3, #1
 800602e:	e000      	b.n	8006032 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8006030:	2300      	movs	r3, #0
}
 8006032:	4618      	mov	r0, r3
 8006034:	3718      	adds	r7, #24
 8006036:	46bd      	mov	sp, r7
 8006038:	bd80      	pop	{r7, pc}
 800603a:	bf00      	nop
 800603c:	0800fb60 	.word	0x0800fb60
 8006040:	0800fc78 	.word	0x0800fc78
 8006044:	0800fbb0 	.word	0x0800fbb0

08006048 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8006048:	b480      	push	{r7}
 800604a:	b085      	sub	sp, #20
 800604c:	af00      	add	r7, sp, #0
 800604e:	60f8      	str	r0, [r7, #12]
 8006050:	60b9      	str	r1, [r7, #8]
 8006052:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8006054:	68bb      	ldr	r3, [r7, #8]
 8006056:	681a      	ldr	r2, [r3, #0]
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	3308      	adds	r3, #8
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	429a      	cmp	r2, r3
 8006060:	d00a      	beq.n	8006078 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8006062:	68bb      	ldr	r3, [r7, #8]
 8006064:	2b00      	cmp	r3, #0
 8006066:	d002      	beq.n	800606e <netif_do_set_netmask+0x26>
 8006068:	68bb      	ldr	r3, [r7, #8]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	e000      	b.n	8006070 <netif_do_set_netmask+0x28>
 800606e:	2300      	movs	r3, #0
 8006070:	68fa      	ldr	r2, [r7, #12]
 8006072:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8006074:	2301      	movs	r3, #1
 8006076:	e000      	b.n	800607a <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8006078:	2300      	movs	r3, #0
}
 800607a:	4618      	mov	r0, r3
 800607c:	3714      	adds	r7, #20
 800607e:	46bd      	mov	sp, r7
 8006080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006084:	4770      	bx	lr

08006086 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8006086:	b480      	push	{r7}
 8006088:	b085      	sub	sp, #20
 800608a:	af00      	add	r7, sp, #0
 800608c:	60f8      	str	r0, [r7, #12]
 800608e:	60b9      	str	r1, [r7, #8]
 8006090:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8006092:	68bb      	ldr	r3, [r7, #8]
 8006094:	681a      	ldr	r2, [r3, #0]
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	330c      	adds	r3, #12
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	429a      	cmp	r2, r3
 800609e:	d00a      	beq.n	80060b6 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 80060a0:	68bb      	ldr	r3, [r7, #8]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d002      	beq.n	80060ac <netif_do_set_gw+0x26>
 80060a6:	68bb      	ldr	r3, [r7, #8]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	e000      	b.n	80060ae <netif_do_set_gw+0x28>
 80060ac:	2300      	movs	r3, #0
 80060ae:	68fa      	ldr	r2, [r7, #12]
 80060b0:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 80060b2:	2301      	movs	r3, #1
 80060b4:	e000      	b.n	80060b8 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 80060b6:	2300      	movs	r3, #0
}
 80060b8:	4618      	mov	r0, r3
 80060ba:	3714      	adds	r7, #20
 80060bc:	46bd      	mov	sp, r7
 80060be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c2:	4770      	bx	lr

080060c4 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 80060c4:	b580      	push	{r7, lr}
 80060c6:	b088      	sub	sp, #32
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	60f8      	str	r0, [r7, #12]
 80060cc:	60b9      	str	r1, [r7, #8]
 80060ce:	607a      	str	r2, [r7, #4]
 80060d0:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 80060d2:	2300      	movs	r3, #0
 80060d4:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 80060d6:	2300      	movs	r3, #0
 80060d8:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80060da:	68bb      	ldr	r3, [r7, #8]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d101      	bne.n	80060e4 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 80060e0:	4b1c      	ldr	r3, [pc, #112]	; (8006154 <netif_set_addr+0x90>)
 80060e2:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d101      	bne.n	80060ee <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 80060ea:	4b1a      	ldr	r3, [pc, #104]	; (8006154 <netif_set_addr+0x90>)
 80060ec:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d101      	bne.n	80060f8 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 80060f4:	4b17      	ldr	r3, [pc, #92]	; (8006154 <netif_set_addr+0x90>)
 80060f6:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 80060f8:	68bb      	ldr	r3, [r7, #8]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d003      	beq.n	8006106 <netif_set_addr+0x42>
 80060fe:	68bb      	ldr	r3, [r7, #8]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d101      	bne.n	800610a <netif_set_addr+0x46>
 8006106:	2301      	movs	r3, #1
 8006108:	e000      	b.n	800610c <netif_set_addr+0x48>
 800610a:	2300      	movs	r3, #0
 800610c:	617b      	str	r3, [r7, #20]
  if (remove) {
 800610e:	697b      	ldr	r3, [r7, #20]
 8006110:	2b00      	cmp	r3, #0
 8006112:	d006      	beq.n	8006122 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8006114:	f107 0310 	add.w	r3, r7, #16
 8006118:	461a      	mov	r2, r3
 800611a:	68b9      	ldr	r1, [r7, #8]
 800611c:	68f8      	ldr	r0, [r7, #12]
 800611e:	f7ff ff49 	bl	8005fb4 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8006122:	69fa      	ldr	r2, [r7, #28]
 8006124:	6879      	ldr	r1, [r7, #4]
 8006126:	68f8      	ldr	r0, [r7, #12]
 8006128:	f7ff ff8e 	bl	8006048 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800612c:	69ba      	ldr	r2, [r7, #24]
 800612e:	6839      	ldr	r1, [r7, #0]
 8006130:	68f8      	ldr	r0, [r7, #12]
 8006132:	f7ff ffa8 	bl	8006086 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8006136:	697b      	ldr	r3, [r7, #20]
 8006138:	2b00      	cmp	r3, #0
 800613a:	d106      	bne.n	800614a <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800613c:	f107 0310 	add.w	r3, r7, #16
 8006140:	461a      	mov	r2, r3
 8006142:	68b9      	ldr	r1, [r7, #8]
 8006144:	68f8      	ldr	r0, [r7, #12]
 8006146:	f7ff ff35 	bl	8005fb4 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800614a:	bf00      	nop
 800614c:	3720      	adds	r7, #32
 800614e:	46bd      	mov	sp, r7
 8006150:	bd80      	pop	{r7, pc}
 8006152:	bf00      	nop
 8006154:	08011f18 	.word	0x08011f18

08006158 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8006158:	b480      	push	{r7}
 800615a:	b083      	sub	sp, #12
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8006160:	4a04      	ldr	r2, [pc, #16]	; (8006174 <netif_set_default+0x1c>)
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8006166:	bf00      	nop
 8006168:	370c      	adds	r7, #12
 800616a:	46bd      	mov	sp, r7
 800616c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006170:	4770      	bx	lr
 8006172:	bf00      	nop
 8006174:	20008ad4 	.word	0x20008ad4

08006178 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8006178:	b580      	push	{r7, lr}
 800617a:	b082      	sub	sp, #8
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d107      	bne.n	8006196 <netif_set_up+0x1e>
 8006186:	4b0f      	ldr	r3, [pc, #60]	; (80061c4 <netif_set_up+0x4c>)
 8006188:	f44f 7254 	mov.w	r2, #848	; 0x350
 800618c:	490e      	ldr	r1, [pc, #56]	; (80061c8 <netif_set_up+0x50>)
 800618e:	480f      	ldr	r0, [pc, #60]	; (80061cc <netif_set_up+0x54>)
 8006190:	f008 fbd4 	bl	800e93c <iprintf>
 8006194:	e013      	b.n	80061be <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800619c:	f003 0301 	and.w	r3, r3, #1
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d10c      	bne.n	80061be <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80061aa:	f043 0301 	orr.w	r3, r3, #1
 80061ae:	b2da      	uxtb	r2, r3
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80061b6:	2103      	movs	r1, #3
 80061b8:	6878      	ldr	r0, [r7, #4]
 80061ba:	f000 f809 	bl	80061d0 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 80061be:	3708      	adds	r7, #8
 80061c0:	46bd      	mov	sp, r7
 80061c2:	bd80      	pop	{r7, pc}
 80061c4:	0800fb60 	.word	0x0800fb60
 80061c8:	0800fce8 	.word	0x0800fce8
 80061cc:	0800fbb0 	.word	0x0800fbb0

080061d0 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b082      	sub	sp, #8
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
 80061d8:	460b      	mov	r3, r1
 80061da:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d106      	bne.n	80061f0 <netif_issue_reports+0x20>
 80061e2:	4b18      	ldr	r3, [pc, #96]	; (8006244 <netif_issue_reports+0x74>)
 80061e4:	f240 326d 	movw	r2, #877	; 0x36d
 80061e8:	4917      	ldr	r1, [pc, #92]	; (8006248 <netif_issue_reports+0x78>)
 80061ea:	4818      	ldr	r0, [pc, #96]	; (800624c <netif_issue_reports+0x7c>)
 80061ec:	f008 fba6 	bl	800e93c <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80061f6:	f003 0304 	and.w	r3, r3, #4
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d01e      	beq.n	800623c <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006204:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8006208:	2b00      	cmp	r3, #0
 800620a:	d017      	beq.n	800623c <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800620c:	78fb      	ldrb	r3, [r7, #3]
 800620e:	f003 0301 	and.w	r3, r3, #1
 8006212:	2b00      	cmp	r3, #0
 8006214:	d013      	beq.n	800623e <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	3304      	adds	r3, #4
 800621a:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800621c:	2b00      	cmp	r3, #0
 800621e:	d00e      	beq.n	800623e <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006226:	f003 0308 	and.w	r3, r3, #8
 800622a:	2b00      	cmp	r3, #0
 800622c:	d007      	beq.n	800623e <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	3304      	adds	r3, #4
 8006232:	4619      	mov	r1, r3
 8006234:	6878      	ldr	r0, [r7, #4]
 8006236:	f006 ffc3 	bl	800d1c0 <etharp_request>
 800623a:	e000      	b.n	800623e <netif_issue_reports+0x6e>
    return;
 800623c:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800623e:	3708      	adds	r7, #8
 8006240:	46bd      	mov	sp, r7
 8006242:	bd80      	pop	{r7, pc}
 8006244:	0800fb60 	.word	0x0800fb60
 8006248:	0800fd04 	.word	0x0800fd04
 800624c:	0800fbb0 	.word	0x0800fbb0

08006250 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8006250:	b580      	push	{r7, lr}
 8006252:	b082      	sub	sp, #8
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d107      	bne.n	800626e <netif_set_down+0x1e>
 800625e:	4b12      	ldr	r3, [pc, #72]	; (80062a8 <netif_set_down+0x58>)
 8006260:	f240 329b 	movw	r2, #923	; 0x39b
 8006264:	4911      	ldr	r1, [pc, #68]	; (80062ac <netif_set_down+0x5c>)
 8006266:	4812      	ldr	r0, [pc, #72]	; (80062b0 <netif_set_down+0x60>)
 8006268:	f008 fb68 	bl	800e93c <iprintf>
 800626c:	e019      	b.n	80062a2 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006274:	f003 0301 	and.w	r3, r3, #1
 8006278:	2b00      	cmp	r3, #0
 800627a:	d012      	beq.n	80062a2 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006282:	f023 0301 	bic.w	r3, r3, #1
 8006286:	b2da      	uxtb	r2, r3
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006294:	f003 0308 	and.w	r3, r3, #8
 8006298:	2b00      	cmp	r3, #0
 800629a:	d002      	beq.n	80062a2 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800629c:	6878      	ldr	r0, [r7, #4]
 800629e:	f006 fb4d 	bl	800c93c <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 80062a2:	3708      	adds	r7, #8
 80062a4:	46bd      	mov	sp, r7
 80062a6:	bd80      	pop	{r7, pc}
 80062a8:	0800fb60 	.word	0x0800fb60
 80062ac:	0800fd28 	.word	0x0800fd28
 80062b0:	0800fbb0 	.word	0x0800fbb0

080062b4 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 80062b4:	b480      	push	{r7}
 80062b6:	b083      	sub	sp, #12
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
 80062bc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d002      	beq.n	80062ca <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	683a      	ldr	r2, [r7, #0]
 80062c8:	61da      	str	r2, [r3, #28]
  }
}
 80062ca:	bf00      	nop
 80062cc:	370c      	adds	r7, #12
 80062ce:	46bd      	mov	sp, r7
 80062d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d4:	4770      	bx	lr

080062d6 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 80062d6:	b480      	push	{r7}
 80062d8:	b085      	sub	sp, #20
 80062da:	af00      	add	r7, sp, #0
 80062dc:	60f8      	str	r0, [r7, #12]
 80062de:	60b9      	str	r1, [r7, #8]
 80062e0:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 80062e2:	f06f 030b 	mvn.w	r3, #11
}
 80062e6:	4618      	mov	r0, r3
 80062e8:	3714      	adds	r7, #20
 80062ea:	46bd      	mov	sp, r7
 80062ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f0:	4770      	bx	lr
	...

080062f4 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 80062f4:	b480      	push	{r7}
 80062f6:	b085      	sub	sp, #20
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	4603      	mov	r3, r0
 80062fc:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 80062fe:	79fb      	ldrb	r3, [r7, #7]
 8006300:	2b00      	cmp	r3, #0
 8006302:	d013      	beq.n	800632c <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8006304:	4b0d      	ldr	r3, [pc, #52]	; (800633c <netif_get_by_index+0x48>)
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	60fb      	str	r3, [r7, #12]
 800630a:	e00c      	b.n	8006326 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006312:	3301      	adds	r3, #1
 8006314:	b2db      	uxtb	r3, r3
 8006316:	79fa      	ldrb	r2, [r7, #7]
 8006318:	429a      	cmp	r2, r3
 800631a:	d101      	bne.n	8006320 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	e006      	b.n	800632e <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	60fb      	str	r3, [r7, #12]
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d1ef      	bne.n	800630c <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800632c:	2300      	movs	r3, #0
}
 800632e:	4618      	mov	r0, r3
 8006330:	3714      	adds	r7, #20
 8006332:	46bd      	mov	sp, r7
 8006334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006338:	4770      	bx	lr
 800633a:	bf00      	nop
 800633c:	20008ad0 	.word	0x20008ad0

08006340 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8006340:	b480      	push	{r7}
 8006342:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8006344:	4b03      	ldr	r3, [pc, #12]	; (8006354 <pbuf_pool_is_empty+0x14>)
 8006346:	2201      	movs	r2, #1
 8006348:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800634a:	bf00      	nop
 800634c:	46bd      	mov	sp, r7
 800634e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006352:	4770      	bx	lr
 8006354:	20008ad8 	.word	0x20008ad8

08006358 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8006358:	b480      	push	{r7}
 800635a:	b085      	sub	sp, #20
 800635c:	af00      	add	r7, sp, #0
 800635e:	60f8      	str	r0, [r7, #12]
 8006360:	60b9      	str	r1, [r7, #8]
 8006362:	4611      	mov	r1, r2
 8006364:	461a      	mov	r2, r3
 8006366:	460b      	mov	r3, r1
 8006368:	80fb      	strh	r3, [r7, #6]
 800636a:	4613      	mov	r3, r2
 800636c:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	2200      	movs	r2, #0
 8006372:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	68ba      	ldr	r2, [r7, #8]
 8006378:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	88fa      	ldrh	r2, [r7, #6]
 800637e:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	88ba      	ldrh	r2, [r7, #4]
 8006384:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8006386:	8b3b      	ldrh	r3, [r7, #24]
 8006388:	b2da      	uxtb	r2, r3
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	7f3a      	ldrb	r2, [r7, #28]
 8006392:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	2201      	movs	r2, #1
 8006398:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	2200      	movs	r2, #0
 800639e:	73da      	strb	r2, [r3, #15]
}
 80063a0:	bf00      	nop
 80063a2:	3714      	adds	r7, #20
 80063a4:	46bd      	mov	sp, r7
 80063a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063aa:	4770      	bx	lr

080063ac <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 80063ac:	b580      	push	{r7, lr}
 80063ae:	b08c      	sub	sp, #48	; 0x30
 80063b0:	af02      	add	r7, sp, #8
 80063b2:	4603      	mov	r3, r0
 80063b4:	71fb      	strb	r3, [r7, #7]
 80063b6:	460b      	mov	r3, r1
 80063b8:	80bb      	strh	r3, [r7, #4]
 80063ba:	4613      	mov	r3, r2
 80063bc:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 80063be:	79fb      	ldrb	r3, [r7, #7]
 80063c0:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 80063c2:	887b      	ldrh	r3, [r7, #2]
 80063c4:	2b41      	cmp	r3, #65	; 0x41
 80063c6:	d00b      	beq.n	80063e0 <pbuf_alloc+0x34>
 80063c8:	2b41      	cmp	r3, #65	; 0x41
 80063ca:	dc02      	bgt.n	80063d2 <pbuf_alloc+0x26>
 80063cc:	2b01      	cmp	r3, #1
 80063ce:	d007      	beq.n	80063e0 <pbuf_alloc+0x34>
 80063d0:	e0c2      	b.n	8006558 <pbuf_alloc+0x1ac>
 80063d2:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 80063d6:	d00b      	beq.n	80063f0 <pbuf_alloc+0x44>
 80063d8:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 80063dc:	d070      	beq.n	80064c0 <pbuf_alloc+0x114>
 80063de:	e0bb      	b.n	8006558 <pbuf_alloc+0x1ac>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 80063e0:	887a      	ldrh	r2, [r7, #2]
 80063e2:	88bb      	ldrh	r3, [r7, #4]
 80063e4:	4619      	mov	r1, r3
 80063e6:	2000      	movs	r0, #0
 80063e8:	f000 f8d2 	bl	8006590 <pbuf_alloc_reference>
 80063ec:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 80063ee:	e0bd      	b.n	800656c <pbuf_alloc+0x1c0>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 80063f0:	2300      	movs	r3, #0
 80063f2:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 80063f4:	2300      	movs	r3, #0
 80063f6:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 80063f8:	88bb      	ldrh	r3, [r7, #4]
 80063fa:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 80063fc:	2007      	movs	r0, #7
 80063fe:	f7ff fc7f 	bl	8005d00 <memp_malloc>
 8006402:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8006404:	693b      	ldr	r3, [r7, #16]
 8006406:	2b00      	cmp	r3, #0
 8006408:	d109      	bne.n	800641e <pbuf_alloc+0x72>
          PBUF_POOL_IS_EMPTY();
 800640a:	f7ff ff99 	bl	8006340 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800640e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006410:	2b00      	cmp	r3, #0
 8006412:	d002      	beq.n	800641a <pbuf_alloc+0x6e>
            pbuf_free(p);
 8006414:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006416:	f000 faa9 	bl	800696c <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800641a:	2300      	movs	r3, #0
 800641c:	e0a7      	b.n	800656e <pbuf_alloc+0x1c2>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800641e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006420:	3303      	adds	r3, #3
 8006422:	b29b      	uxth	r3, r3
 8006424:	f023 0303 	bic.w	r3, r3, #3
 8006428:	b29b      	uxth	r3, r3
 800642a:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800642e:	b29b      	uxth	r3, r3
 8006430:	8b7a      	ldrh	r2, [r7, #26]
 8006432:	4293      	cmp	r3, r2
 8006434:	bf28      	it	cs
 8006436:	4613      	movcs	r3, r2
 8006438:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800643a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800643c:	3310      	adds	r3, #16
 800643e:	693a      	ldr	r2, [r7, #16]
 8006440:	4413      	add	r3, r2
 8006442:	3303      	adds	r3, #3
 8006444:	f023 0303 	bic.w	r3, r3, #3
 8006448:	4618      	mov	r0, r3
 800644a:	89f9      	ldrh	r1, [r7, #14]
 800644c:	8b7a      	ldrh	r2, [r7, #26]
 800644e:	2300      	movs	r3, #0
 8006450:	9301      	str	r3, [sp, #4]
 8006452:	887b      	ldrh	r3, [r7, #2]
 8006454:	9300      	str	r3, [sp, #0]
 8006456:	460b      	mov	r3, r1
 8006458:	4601      	mov	r1, r0
 800645a:	6938      	ldr	r0, [r7, #16]
 800645c:	f7ff ff7c 	bl	8006358 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8006460:	693b      	ldr	r3, [r7, #16]
 8006462:	685b      	ldr	r3, [r3, #4]
 8006464:	f003 0303 	and.w	r3, r3, #3
 8006468:	2b00      	cmp	r3, #0
 800646a:	d006      	beq.n	800647a <pbuf_alloc+0xce>
 800646c:	4b42      	ldr	r3, [pc, #264]	; (8006578 <pbuf_alloc+0x1cc>)
 800646e:	f240 1201 	movw	r2, #257	; 0x101
 8006472:	4942      	ldr	r1, [pc, #264]	; (800657c <pbuf_alloc+0x1d0>)
 8006474:	4842      	ldr	r0, [pc, #264]	; (8006580 <pbuf_alloc+0x1d4>)
 8006476:	f008 fa61 	bl	800e93c <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800647a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800647c:	3303      	adds	r3, #3
 800647e:	f023 0303 	bic.w	r3, r3, #3
 8006482:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8006486:	d106      	bne.n	8006496 <pbuf_alloc+0xea>
 8006488:	4b3b      	ldr	r3, [pc, #236]	; (8006578 <pbuf_alloc+0x1cc>)
 800648a:	f240 1203 	movw	r2, #259	; 0x103
 800648e:	493d      	ldr	r1, [pc, #244]	; (8006584 <pbuf_alloc+0x1d8>)
 8006490:	483b      	ldr	r0, [pc, #236]	; (8006580 <pbuf_alloc+0x1d4>)
 8006492:	f008 fa53 	bl	800e93c <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8006496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006498:	2b00      	cmp	r3, #0
 800649a:	d102      	bne.n	80064a2 <pbuf_alloc+0xf6>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800649c:	693b      	ldr	r3, [r7, #16]
 800649e:	627b      	str	r3, [r7, #36]	; 0x24
 80064a0:	e002      	b.n	80064a8 <pbuf_alloc+0xfc>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 80064a2:	69fb      	ldr	r3, [r7, #28]
 80064a4:	693a      	ldr	r2, [r7, #16]
 80064a6:	601a      	str	r2, [r3, #0]
        }
        last = q;
 80064a8:	693b      	ldr	r3, [r7, #16]
 80064aa:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 80064ac:	8b7a      	ldrh	r2, [r7, #26]
 80064ae:	89fb      	ldrh	r3, [r7, #14]
 80064b0:	1ad3      	subs	r3, r2, r3
 80064b2:	837b      	strh	r3, [r7, #26]
        offset = 0;
 80064b4:	2300      	movs	r3, #0
 80064b6:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 80064b8:	8b7b      	ldrh	r3, [r7, #26]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d19e      	bne.n	80063fc <pbuf_alloc+0x50>
      break;
 80064be:	e055      	b.n	800656c <pbuf_alloc+0x1c0>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 80064c0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80064c2:	3303      	adds	r3, #3
 80064c4:	b29b      	uxth	r3, r3
 80064c6:	f023 0303 	bic.w	r3, r3, #3
 80064ca:	b29a      	uxth	r2, r3
 80064cc:	88bb      	ldrh	r3, [r7, #4]
 80064ce:	3303      	adds	r3, #3
 80064d0:	b29b      	uxth	r3, r3
 80064d2:	f023 0303 	bic.w	r3, r3, #3
 80064d6:	b29b      	uxth	r3, r3
 80064d8:	4413      	add	r3, r2
 80064da:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 80064dc:	8b3b      	ldrh	r3, [r7, #24]
 80064de:	3310      	adds	r3, #16
 80064e0:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80064e2:	8b3a      	ldrh	r2, [r7, #24]
 80064e4:	88bb      	ldrh	r3, [r7, #4]
 80064e6:	3303      	adds	r3, #3
 80064e8:	f023 0303 	bic.w	r3, r3, #3
 80064ec:	429a      	cmp	r2, r3
 80064ee:	d306      	bcc.n	80064fe <pbuf_alloc+0x152>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 80064f0:	8afa      	ldrh	r2, [r7, #22]
 80064f2:	88bb      	ldrh	r3, [r7, #4]
 80064f4:	3303      	adds	r3, #3
 80064f6:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80064fa:	429a      	cmp	r2, r3
 80064fc:	d201      	bcs.n	8006502 <pbuf_alloc+0x156>
        return NULL;
 80064fe:	2300      	movs	r3, #0
 8006500:	e035      	b.n	800656e <pbuf_alloc+0x1c2>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8006502:	8afb      	ldrh	r3, [r7, #22]
 8006504:	4618      	mov	r0, r3
 8006506:	f7ff fa8d 	bl	8005a24 <mem_malloc>
 800650a:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800650c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800650e:	2b00      	cmp	r3, #0
 8006510:	d101      	bne.n	8006516 <pbuf_alloc+0x16a>
        return NULL;
 8006512:	2300      	movs	r3, #0
 8006514:	e02b      	b.n	800656e <pbuf_alloc+0x1c2>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8006516:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006518:	3310      	adds	r3, #16
 800651a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800651c:	4413      	add	r3, r2
 800651e:	3303      	adds	r3, #3
 8006520:	f023 0303 	bic.w	r3, r3, #3
 8006524:	4618      	mov	r0, r3
 8006526:	88b9      	ldrh	r1, [r7, #4]
 8006528:	88ba      	ldrh	r2, [r7, #4]
 800652a:	2300      	movs	r3, #0
 800652c:	9301      	str	r3, [sp, #4]
 800652e:	887b      	ldrh	r3, [r7, #2]
 8006530:	9300      	str	r3, [sp, #0]
 8006532:	460b      	mov	r3, r1
 8006534:	4601      	mov	r1, r0
 8006536:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006538:	f7ff ff0e 	bl	8006358 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800653c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800653e:	685b      	ldr	r3, [r3, #4]
 8006540:	f003 0303 	and.w	r3, r3, #3
 8006544:	2b00      	cmp	r3, #0
 8006546:	d010      	beq.n	800656a <pbuf_alloc+0x1be>
 8006548:	4b0b      	ldr	r3, [pc, #44]	; (8006578 <pbuf_alloc+0x1cc>)
 800654a:	f240 1223 	movw	r2, #291	; 0x123
 800654e:	490e      	ldr	r1, [pc, #56]	; (8006588 <pbuf_alloc+0x1dc>)
 8006550:	480b      	ldr	r0, [pc, #44]	; (8006580 <pbuf_alloc+0x1d4>)
 8006552:	f008 f9f3 	bl	800e93c <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8006556:	e008      	b.n	800656a <pbuf_alloc+0x1be>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8006558:	4b07      	ldr	r3, [pc, #28]	; (8006578 <pbuf_alloc+0x1cc>)
 800655a:	f240 1227 	movw	r2, #295	; 0x127
 800655e:	490b      	ldr	r1, [pc, #44]	; (800658c <pbuf_alloc+0x1e0>)
 8006560:	4807      	ldr	r0, [pc, #28]	; (8006580 <pbuf_alloc+0x1d4>)
 8006562:	f008 f9eb 	bl	800e93c <iprintf>
      return NULL;
 8006566:	2300      	movs	r3, #0
 8006568:	e001      	b.n	800656e <pbuf_alloc+0x1c2>
      break;
 800656a:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800656c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800656e:	4618      	mov	r0, r3
 8006570:	3728      	adds	r7, #40	; 0x28
 8006572:	46bd      	mov	sp, r7
 8006574:	bd80      	pop	{r7, pc}
 8006576:	bf00      	nop
 8006578:	0800fd90 	.word	0x0800fd90
 800657c:	0800fdc0 	.word	0x0800fdc0
 8006580:	0800fdf0 	.word	0x0800fdf0
 8006584:	0800fe18 	.word	0x0800fe18
 8006588:	0800fe4c 	.word	0x0800fe4c
 800658c:	0800fe78 	.word	0x0800fe78

08006590 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8006590:	b580      	push	{r7, lr}
 8006592:	b086      	sub	sp, #24
 8006594:	af02      	add	r7, sp, #8
 8006596:	6078      	str	r0, [r7, #4]
 8006598:	460b      	mov	r3, r1
 800659a:	807b      	strh	r3, [r7, #2]
 800659c:	4613      	mov	r3, r2
 800659e:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 80065a0:	883b      	ldrh	r3, [r7, #0]
 80065a2:	2b41      	cmp	r3, #65	; 0x41
 80065a4:	d009      	beq.n	80065ba <pbuf_alloc_reference+0x2a>
 80065a6:	883b      	ldrh	r3, [r7, #0]
 80065a8:	2b01      	cmp	r3, #1
 80065aa:	d006      	beq.n	80065ba <pbuf_alloc_reference+0x2a>
 80065ac:	4b0f      	ldr	r3, [pc, #60]	; (80065ec <pbuf_alloc_reference+0x5c>)
 80065ae:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 80065b2:	490f      	ldr	r1, [pc, #60]	; (80065f0 <pbuf_alloc_reference+0x60>)
 80065b4:	480f      	ldr	r0, [pc, #60]	; (80065f4 <pbuf_alloc_reference+0x64>)
 80065b6:	f008 f9c1 	bl	800e93c <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 80065ba:	2006      	movs	r0, #6
 80065bc:	f7ff fba0 	bl	8005d00 <memp_malloc>
 80065c0:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d101      	bne.n	80065cc <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 80065c8:	2300      	movs	r3, #0
 80065ca:	e00b      	b.n	80065e4 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 80065cc:	8879      	ldrh	r1, [r7, #2]
 80065ce:	887a      	ldrh	r2, [r7, #2]
 80065d0:	2300      	movs	r3, #0
 80065d2:	9301      	str	r3, [sp, #4]
 80065d4:	883b      	ldrh	r3, [r7, #0]
 80065d6:	9300      	str	r3, [sp, #0]
 80065d8:	460b      	mov	r3, r1
 80065da:	6879      	ldr	r1, [r7, #4]
 80065dc:	68f8      	ldr	r0, [r7, #12]
 80065de:	f7ff febb 	bl	8006358 <pbuf_init_alloced_pbuf>
  return p;
 80065e2:	68fb      	ldr	r3, [r7, #12]
}
 80065e4:	4618      	mov	r0, r3
 80065e6:	3710      	adds	r7, #16
 80065e8:	46bd      	mov	sp, r7
 80065ea:	bd80      	pop	{r7, pc}
 80065ec:	0800fd90 	.word	0x0800fd90
 80065f0:	0800fe94 	.word	0x0800fe94
 80065f4:	0800fdf0 	.word	0x0800fdf0

080065f8 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 80065f8:	b580      	push	{r7, lr}
 80065fa:	b088      	sub	sp, #32
 80065fc:	af02      	add	r7, sp, #8
 80065fe:	607b      	str	r3, [r7, #4]
 8006600:	4603      	mov	r3, r0
 8006602:	73fb      	strb	r3, [r7, #15]
 8006604:	460b      	mov	r3, r1
 8006606:	81bb      	strh	r3, [r7, #12]
 8006608:	4613      	mov	r3, r2
 800660a:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800660c:	7bfb      	ldrb	r3, [r7, #15]
 800660e:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8006610:	8a7b      	ldrh	r3, [r7, #18]
 8006612:	3303      	adds	r3, #3
 8006614:	f023 0203 	bic.w	r2, r3, #3
 8006618:	89bb      	ldrh	r3, [r7, #12]
 800661a:	441a      	add	r2, r3
 800661c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800661e:	429a      	cmp	r2, r3
 8006620:	d901      	bls.n	8006626 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8006622:	2300      	movs	r3, #0
 8006624:	e018      	b.n	8006658 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8006626:	6a3b      	ldr	r3, [r7, #32]
 8006628:	2b00      	cmp	r3, #0
 800662a:	d007      	beq.n	800663c <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800662c:	8a7b      	ldrh	r3, [r7, #18]
 800662e:	3303      	adds	r3, #3
 8006630:	f023 0303 	bic.w	r3, r3, #3
 8006634:	6a3a      	ldr	r2, [r7, #32]
 8006636:	4413      	add	r3, r2
 8006638:	617b      	str	r3, [r7, #20]
 800663a:	e001      	b.n	8006640 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800663c:	2300      	movs	r3, #0
 800663e:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8006640:	6878      	ldr	r0, [r7, #4]
 8006642:	89b9      	ldrh	r1, [r7, #12]
 8006644:	89ba      	ldrh	r2, [r7, #12]
 8006646:	2302      	movs	r3, #2
 8006648:	9301      	str	r3, [sp, #4]
 800664a:	897b      	ldrh	r3, [r7, #10]
 800664c:	9300      	str	r3, [sp, #0]
 800664e:	460b      	mov	r3, r1
 8006650:	6979      	ldr	r1, [r7, #20]
 8006652:	f7ff fe81 	bl	8006358 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8006656:	687b      	ldr	r3, [r7, #4]
}
 8006658:	4618      	mov	r0, r3
 800665a:	3718      	adds	r7, #24
 800665c:	46bd      	mov	sp, r7
 800665e:	bd80      	pop	{r7, pc}

08006660 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8006660:	b580      	push	{r7, lr}
 8006662:	b084      	sub	sp, #16
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
 8006668:	460b      	mov	r3, r1
 800666a:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2b00      	cmp	r3, #0
 8006670:	d106      	bne.n	8006680 <pbuf_realloc+0x20>
 8006672:	4b3a      	ldr	r3, [pc, #232]	; (800675c <pbuf_realloc+0xfc>)
 8006674:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8006678:	4939      	ldr	r1, [pc, #228]	; (8006760 <pbuf_realloc+0x100>)
 800667a:	483a      	ldr	r0, [pc, #232]	; (8006764 <pbuf_realloc+0x104>)
 800667c:	f008 f95e 	bl	800e93c <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	891b      	ldrh	r3, [r3, #8]
 8006684:	887a      	ldrh	r2, [r7, #2]
 8006686:	429a      	cmp	r2, r3
 8006688:	d264      	bcs.n	8006754 <pbuf_realloc+0xf4>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	891a      	ldrh	r2, [r3, #8]
 800668e:	887b      	ldrh	r3, [r7, #2]
 8006690:	1ad3      	subs	r3, r2, r3
 8006692:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8006694:	887b      	ldrh	r3, [r7, #2]
 8006696:	817b      	strh	r3, [r7, #10]
  q = p;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800669c:	e018      	b.n	80066d0 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	895b      	ldrh	r3, [r3, #10]
 80066a2:	897a      	ldrh	r2, [r7, #10]
 80066a4:	1ad3      	subs	r3, r2, r3
 80066a6:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	891a      	ldrh	r2, [r3, #8]
 80066ac:	893b      	ldrh	r3, [r7, #8]
 80066ae:	1ad3      	subs	r3, r2, r3
 80066b0:	b29a      	uxth	r2, r3
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d106      	bne.n	80066d0 <pbuf_realloc+0x70>
 80066c2:	4b26      	ldr	r3, [pc, #152]	; (800675c <pbuf_realloc+0xfc>)
 80066c4:	f240 12af 	movw	r2, #431	; 0x1af
 80066c8:	4927      	ldr	r1, [pc, #156]	; (8006768 <pbuf_realloc+0x108>)
 80066ca:	4826      	ldr	r0, [pc, #152]	; (8006764 <pbuf_realloc+0x104>)
 80066cc:	f008 f936 	bl	800e93c <iprintf>
  while (rem_len > q->len) {
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	895b      	ldrh	r3, [r3, #10]
 80066d4:	897a      	ldrh	r2, [r7, #10]
 80066d6:	429a      	cmp	r2, r3
 80066d8:	d8e1      	bhi.n	800669e <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	7b1b      	ldrb	r3, [r3, #12]
 80066de:	f003 030f 	and.w	r3, r3, #15
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d122      	bne.n	800672c <pbuf_realloc+0xcc>
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	895b      	ldrh	r3, [r3, #10]
 80066ea:	897a      	ldrh	r2, [r7, #10]
 80066ec:	429a      	cmp	r2, r3
 80066ee:	d01d      	beq.n	800672c <pbuf_realloc+0xcc>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	7b5b      	ldrb	r3, [r3, #13]
 80066f4:	f003 0302 	and.w	r3, r3, #2
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d117      	bne.n	800672c <pbuf_realloc+0xcc>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	685b      	ldr	r3, [r3, #4]
 8006700:	461a      	mov	r2, r3
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	1ad3      	subs	r3, r2, r3
 8006706:	b29a      	uxth	r2, r3
 8006708:	897b      	ldrh	r3, [r7, #10]
 800670a:	4413      	add	r3, r2
 800670c:	b29b      	uxth	r3, r3
 800670e:	4619      	mov	r1, r3
 8006710:	68f8      	ldr	r0, [r7, #12]
 8006712:	f7ff f88b 	bl	800582c <mem_trim>
 8006716:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	2b00      	cmp	r3, #0
 800671c:	d106      	bne.n	800672c <pbuf_realloc+0xcc>
 800671e:	4b0f      	ldr	r3, [pc, #60]	; (800675c <pbuf_realloc+0xfc>)
 8006720:	f240 12bd 	movw	r2, #445	; 0x1bd
 8006724:	4911      	ldr	r1, [pc, #68]	; (800676c <pbuf_realloc+0x10c>)
 8006726:	480f      	ldr	r0, [pc, #60]	; (8006764 <pbuf_realloc+0x104>)
 8006728:	f008 f908 	bl	800e93c <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	897a      	ldrh	r2, [r7, #10]
 8006730:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	895a      	ldrh	r2, [r3, #10]
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d004      	beq.n	800674c <pbuf_realloc+0xec>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	4618      	mov	r0, r3
 8006748:	f000 f910 	bl	800696c <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	2200      	movs	r2, #0
 8006750:	601a      	str	r2, [r3, #0]
 8006752:	e000      	b.n	8006756 <pbuf_realloc+0xf6>
    return;
 8006754:	bf00      	nop

}
 8006756:	3710      	adds	r7, #16
 8006758:	46bd      	mov	sp, r7
 800675a:	bd80      	pop	{r7, pc}
 800675c:	0800fd90 	.word	0x0800fd90
 8006760:	0800fea8 	.word	0x0800fea8
 8006764:	0800fdf0 	.word	0x0800fdf0
 8006768:	0800fec0 	.word	0x0800fec0
 800676c:	0800fed8 	.word	0x0800fed8

08006770 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8006770:	b580      	push	{r7, lr}
 8006772:	b086      	sub	sp, #24
 8006774:	af00      	add	r7, sp, #0
 8006776:	60f8      	str	r0, [r7, #12]
 8006778:	60b9      	str	r1, [r7, #8]
 800677a:	4613      	mov	r3, r2
 800677c:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	2b00      	cmp	r3, #0
 8006782:	d106      	bne.n	8006792 <pbuf_add_header_impl+0x22>
 8006784:	4b2b      	ldr	r3, [pc, #172]	; (8006834 <pbuf_add_header_impl+0xc4>)
 8006786:	f240 12df 	movw	r2, #479	; 0x1df
 800678a:	492b      	ldr	r1, [pc, #172]	; (8006838 <pbuf_add_header_impl+0xc8>)
 800678c:	482b      	ldr	r0, [pc, #172]	; (800683c <pbuf_add_header_impl+0xcc>)
 800678e:	f008 f8d5 	bl	800e93c <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d003      	beq.n	80067a0 <pbuf_add_header_impl+0x30>
 8006798:	68bb      	ldr	r3, [r7, #8]
 800679a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800679e:	d301      	bcc.n	80067a4 <pbuf_add_header_impl+0x34>
    return 1;
 80067a0:	2301      	movs	r3, #1
 80067a2:	e043      	b.n	800682c <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 80067a4:	68bb      	ldr	r3, [r7, #8]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d101      	bne.n	80067ae <pbuf_add_header_impl+0x3e>
    return 0;
 80067aa:	2300      	movs	r3, #0
 80067ac:	e03e      	b.n	800682c <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 80067ae:	68bb      	ldr	r3, [r7, #8]
 80067b0:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	891a      	ldrh	r2, [r3, #8]
 80067b6:	8a7b      	ldrh	r3, [r7, #18]
 80067b8:	4413      	add	r3, r2
 80067ba:	b29b      	uxth	r3, r3
 80067bc:	8a7a      	ldrh	r2, [r7, #18]
 80067be:	429a      	cmp	r2, r3
 80067c0:	d901      	bls.n	80067c6 <pbuf_add_header_impl+0x56>
    return 1;
 80067c2:	2301      	movs	r3, #1
 80067c4:	e032      	b.n	800682c <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	7b1b      	ldrb	r3, [r3, #12]
 80067ca:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 80067cc:	8a3b      	ldrh	r3, [r7, #16]
 80067ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d00c      	beq.n	80067f0 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	685a      	ldr	r2, [r3, #4]
 80067da:	68bb      	ldr	r3, [r7, #8]
 80067dc:	425b      	negs	r3, r3
 80067de:	4413      	add	r3, r2
 80067e0:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	3310      	adds	r3, #16
 80067e6:	697a      	ldr	r2, [r7, #20]
 80067e8:	429a      	cmp	r2, r3
 80067ea:	d20d      	bcs.n	8006808 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 80067ec:	2301      	movs	r3, #1
 80067ee:	e01d      	b.n	800682c <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 80067f0:	79fb      	ldrb	r3, [r7, #7]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d006      	beq.n	8006804 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	685a      	ldr	r2, [r3, #4]
 80067fa:	68bb      	ldr	r3, [r7, #8]
 80067fc:	425b      	negs	r3, r3
 80067fe:	4413      	add	r3, r2
 8006800:	617b      	str	r3, [r7, #20]
 8006802:	e001      	b.n	8006808 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8006804:	2301      	movs	r3, #1
 8006806:	e011      	b.n	800682c <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	697a      	ldr	r2, [r7, #20]
 800680c:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	895a      	ldrh	r2, [r3, #10]
 8006812:	8a7b      	ldrh	r3, [r7, #18]
 8006814:	4413      	add	r3, r2
 8006816:	b29a      	uxth	r2, r3
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	891a      	ldrh	r2, [r3, #8]
 8006820:	8a7b      	ldrh	r3, [r7, #18]
 8006822:	4413      	add	r3, r2
 8006824:	b29a      	uxth	r2, r3
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	811a      	strh	r2, [r3, #8]


  return 0;
 800682a:	2300      	movs	r3, #0
}
 800682c:	4618      	mov	r0, r3
 800682e:	3718      	adds	r7, #24
 8006830:	46bd      	mov	sp, r7
 8006832:	bd80      	pop	{r7, pc}
 8006834:	0800fd90 	.word	0x0800fd90
 8006838:	0800fef4 	.word	0x0800fef4
 800683c:	0800fdf0 	.word	0x0800fdf0

08006840 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8006840:	b580      	push	{r7, lr}
 8006842:	b082      	sub	sp, #8
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
 8006848:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800684a:	2200      	movs	r2, #0
 800684c:	6839      	ldr	r1, [r7, #0]
 800684e:	6878      	ldr	r0, [r7, #4]
 8006850:	f7ff ff8e 	bl	8006770 <pbuf_add_header_impl>
 8006854:	4603      	mov	r3, r0
}
 8006856:	4618      	mov	r0, r3
 8006858:	3708      	adds	r7, #8
 800685a:	46bd      	mov	sp, r7
 800685c:	bd80      	pop	{r7, pc}
	...

08006860 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8006860:	b580      	push	{r7, lr}
 8006862:	b084      	sub	sp, #16
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]
 8006868:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2b00      	cmp	r3, #0
 800686e:	d106      	bne.n	800687e <pbuf_remove_header+0x1e>
 8006870:	4b20      	ldr	r3, [pc, #128]	; (80068f4 <pbuf_remove_header+0x94>)
 8006872:	f240 224b 	movw	r2, #587	; 0x24b
 8006876:	4920      	ldr	r1, [pc, #128]	; (80068f8 <pbuf_remove_header+0x98>)
 8006878:	4820      	ldr	r0, [pc, #128]	; (80068fc <pbuf_remove_header+0x9c>)
 800687a:	f008 f85f 	bl	800e93c <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	2b00      	cmp	r3, #0
 8006882:	d003      	beq.n	800688c <pbuf_remove_header+0x2c>
 8006884:	683b      	ldr	r3, [r7, #0]
 8006886:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800688a:	d301      	bcc.n	8006890 <pbuf_remove_header+0x30>
    return 1;
 800688c:	2301      	movs	r3, #1
 800688e:	e02c      	b.n	80068ea <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8006890:	683b      	ldr	r3, [r7, #0]
 8006892:	2b00      	cmp	r3, #0
 8006894:	d101      	bne.n	800689a <pbuf_remove_header+0x3a>
    return 0;
 8006896:	2300      	movs	r3, #0
 8006898:	e027      	b.n	80068ea <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800689a:	683b      	ldr	r3, [r7, #0]
 800689c:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	895b      	ldrh	r3, [r3, #10]
 80068a2:	89fa      	ldrh	r2, [r7, #14]
 80068a4:	429a      	cmp	r2, r3
 80068a6:	d908      	bls.n	80068ba <pbuf_remove_header+0x5a>
 80068a8:	4b12      	ldr	r3, [pc, #72]	; (80068f4 <pbuf_remove_header+0x94>)
 80068aa:	f240 2255 	movw	r2, #597	; 0x255
 80068ae:	4914      	ldr	r1, [pc, #80]	; (8006900 <pbuf_remove_header+0xa0>)
 80068b0:	4812      	ldr	r0, [pc, #72]	; (80068fc <pbuf_remove_header+0x9c>)
 80068b2:	f008 f843 	bl	800e93c <iprintf>
 80068b6:	2301      	movs	r3, #1
 80068b8:	e017      	b.n	80068ea <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	685b      	ldr	r3, [r3, #4]
 80068be:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	685a      	ldr	r2, [r3, #4]
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	441a      	add	r2, r3
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	895a      	ldrh	r2, [r3, #10]
 80068d0:	89fb      	ldrh	r3, [r7, #14]
 80068d2:	1ad3      	subs	r3, r2, r3
 80068d4:	b29a      	uxth	r2, r3
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	891a      	ldrh	r2, [r3, #8]
 80068de:	89fb      	ldrh	r3, [r7, #14]
 80068e0:	1ad3      	subs	r3, r2, r3
 80068e2:	b29a      	uxth	r2, r3
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 80068e8:	2300      	movs	r3, #0
}
 80068ea:	4618      	mov	r0, r3
 80068ec:	3710      	adds	r7, #16
 80068ee:	46bd      	mov	sp, r7
 80068f0:	bd80      	pop	{r7, pc}
 80068f2:	bf00      	nop
 80068f4:	0800fd90 	.word	0x0800fd90
 80068f8:	0800fef4 	.word	0x0800fef4
 80068fc:	0800fdf0 	.word	0x0800fdf0
 8006900:	0800ff00 	.word	0x0800ff00

08006904 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8006904:	b580      	push	{r7, lr}
 8006906:	b082      	sub	sp, #8
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]
 800690c:	460b      	mov	r3, r1
 800690e:	807b      	strh	r3, [r7, #2]
 8006910:	4613      	mov	r3, r2
 8006912:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8006914:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006918:	2b00      	cmp	r3, #0
 800691a:	da08      	bge.n	800692e <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800691c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006920:	425b      	negs	r3, r3
 8006922:	4619      	mov	r1, r3
 8006924:	6878      	ldr	r0, [r7, #4]
 8006926:	f7ff ff9b 	bl	8006860 <pbuf_remove_header>
 800692a:	4603      	mov	r3, r0
 800692c:	e007      	b.n	800693e <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800692e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006932:	787a      	ldrb	r2, [r7, #1]
 8006934:	4619      	mov	r1, r3
 8006936:	6878      	ldr	r0, [r7, #4]
 8006938:	f7ff ff1a 	bl	8006770 <pbuf_add_header_impl>
 800693c:	4603      	mov	r3, r0
  }
}
 800693e:	4618      	mov	r0, r3
 8006940:	3708      	adds	r7, #8
 8006942:	46bd      	mov	sp, r7
 8006944:	bd80      	pop	{r7, pc}

08006946 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8006946:	b580      	push	{r7, lr}
 8006948:	b082      	sub	sp, #8
 800694a:	af00      	add	r7, sp, #0
 800694c:	6078      	str	r0, [r7, #4]
 800694e:	460b      	mov	r3, r1
 8006950:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8006952:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006956:	2201      	movs	r2, #1
 8006958:	4619      	mov	r1, r3
 800695a:	6878      	ldr	r0, [r7, #4]
 800695c:	f7ff ffd2 	bl	8006904 <pbuf_header_impl>
 8006960:	4603      	mov	r3, r0
}
 8006962:	4618      	mov	r0, r3
 8006964:	3708      	adds	r7, #8
 8006966:	46bd      	mov	sp, r7
 8006968:	bd80      	pop	{r7, pc}
	...

0800696c <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800696c:	b580      	push	{r7, lr}
 800696e:	b086      	sub	sp, #24
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2b00      	cmp	r3, #0
 8006978:	d10b      	bne.n	8006992 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	2b00      	cmp	r3, #0
 800697e:	d106      	bne.n	800698e <pbuf_free+0x22>
 8006980:	4b38      	ldr	r3, [pc, #224]	; (8006a64 <pbuf_free+0xf8>)
 8006982:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8006986:	4938      	ldr	r1, [pc, #224]	; (8006a68 <pbuf_free+0xfc>)
 8006988:	4838      	ldr	r0, [pc, #224]	; (8006a6c <pbuf_free+0x100>)
 800698a:	f007 ffd7 	bl	800e93c <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800698e:	2300      	movs	r3, #0
 8006990:	e063      	b.n	8006a5a <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8006992:	2300      	movs	r3, #0
 8006994:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8006996:	e05c      	b.n	8006a52 <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	7b9b      	ldrb	r3, [r3, #14]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d106      	bne.n	80069ae <pbuf_free+0x42>
 80069a0:	4b30      	ldr	r3, [pc, #192]	; (8006a64 <pbuf_free+0xf8>)
 80069a2:	f240 22f1 	movw	r2, #753	; 0x2f1
 80069a6:	4932      	ldr	r1, [pc, #200]	; (8006a70 <pbuf_free+0x104>)
 80069a8:	4830      	ldr	r0, [pc, #192]	; (8006a6c <pbuf_free+0x100>)
 80069aa:	f007 ffc7 	bl	800e93c <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	7b9b      	ldrb	r3, [r3, #14]
 80069b2:	3b01      	subs	r3, #1
 80069b4:	b2da      	uxtb	r2, r3
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	739a      	strb	r2, [r3, #14]
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	7b9b      	ldrb	r3, [r3, #14]
 80069be:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 80069c0:	7dbb      	ldrb	r3, [r7, #22]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d143      	bne.n	8006a4e <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	7b1b      	ldrb	r3, [r3, #12]
 80069d0:	f003 030f 	and.w	r3, r3, #15
 80069d4:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	7b5b      	ldrb	r3, [r3, #13]
 80069da:	f003 0302 	and.w	r3, r3, #2
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d011      	beq.n	8006a06 <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 80069e6:	68bb      	ldr	r3, [r7, #8]
 80069e8:	691b      	ldr	r3, [r3, #16]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d106      	bne.n	80069fc <pbuf_free+0x90>
 80069ee:	4b1d      	ldr	r3, [pc, #116]	; (8006a64 <pbuf_free+0xf8>)
 80069f0:	f240 22ff 	movw	r2, #767	; 0x2ff
 80069f4:	491f      	ldr	r1, [pc, #124]	; (8006a74 <pbuf_free+0x108>)
 80069f6:	481d      	ldr	r0, [pc, #116]	; (8006a6c <pbuf_free+0x100>)
 80069f8:	f007 ffa0 	bl	800e93c <iprintf>
        pc->custom_free_function(p);
 80069fc:	68bb      	ldr	r3, [r7, #8]
 80069fe:	691b      	ldr	r3, [r3, #16]
 8006a00:	6878      	ldr	r0, [r7, #4]
 8006a02:	4798      	blx	r3
 8006a04:	e01d      	b.n	8006a42 <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8006a06:	7bfb      	ldrb	r3, [r7, #15]
 8006a08:	2b02      	cmp	r3, #2
 8006a0a:	d104      	bne.n	8006a16 <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 8006a0c:	6879      	ldr	r1, [r7, #4]
 8006a0e:	2007      	movs	r0, #7
 8006a10:	f7ff f9c2 	bl	8005d98 <memp_free>
 8006a14:	e015      	b.n	8006a42 <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8006a16:	7bfb      	ldrb	r3, [r7, #15]
 8006a18:	2b01      	cmp	r3, #1
 8006a1a:	d104      	bne.n	8006a26 <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 8006a1c:	6879      	ldr	r1, [r7, #4]
 8006a1e:	2006      	movs	r0, #6
 8006a20:	f7ff f9ba 	bl	8005d98 <memp_free>
 8006a24:	e00d      	b.n	8006a42 <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8006a26:	7bfb      	ldrb	r3, [r7, #15]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d103      	bne.n	8006a34 <pbuf_free+0xc8>
          mem_free(p);
 8006a2c:	6878      	ldr	r0, [r7, #4]
 8006a2e:	f7fe fe93 	bl	8005758 <mem_free>
 8006a32:	e006      	b.n	8006a42 <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8006a34:	4b0b      	ldr	r3, [pc, #44]	; (8006a64 <pbuf_free+0xf8>)
 8006a36:	f240 320f 	movw	r2, #783	; 0x30f
 8006a3a:	490f      	ldr	r1, [pc, #60]	; (8006a78 <pbuf_free+0x10c>)
 8006a3c:	480b      	ldr	r0, [pc, #44]	; (8006a6c <pbuf_free+0x100>)
 8006a3e:	f007 ff7d 	bl	800e93c <iprintf>
        }
      }
      count++;
 8006a42:	7dfb      	ldrb	r3, [r7, #23]
 8006a44:	3301      	adds	r3, #1
 8006a46:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 8006a48:	693b      	ldr	r3, [r7, #16]
 8006a4a:	607b      	str	r3, [r7, #4]
 8006a4c:	e001      	b.n	8006a52 <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8006a4e:	2300      	movs	r3, #0
 8006a50:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d19f      	bne.n	8006998 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8006a58:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	3718      	adds	r7, #24
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	bd80      	pop	{r7, pc}
 8006a62:	bf00      	nop
 8006a64:	0800fd90 	.word	0x0800fd90
 8006a68:	0800fef4 	.word	0x0800fef4
 8006a6c:	0800fdf0 	.word	0x0800fdf0
 8006a70:	0800ff20 	.word	0x0800ff20
 8006a74:	0800ff38 	.word	0x0800ff38
 8006a78:	0800ff5c 	.word	0x0800ff5c

08006a7c <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8006a7c:	b480      	push	{r7}
 8006a7e:	b085      	sub	sp, #20
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8006a84:	2300      	movs	r3, #0
 8006a86:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8006a88:	e005      	b.n	8006a96 <pbuf_clen+0x1a>
    ++len;
 8006a8a:	89fb      	ldrh	r3, [r7, #14]
 8006a8c:	3301      	adds	r3, #1
 8006a8e:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d1f6      	bne.n	8006a8a <pbuf_clen+0xe>
  }
  return len;
 8006a9c:	89fb      	ldrh	r3, [r7, #14]
}
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	3714      	adds	r7, #20
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa8:	4770      	bx	lr
	...

08006aac <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8006aac:	b580      	push	{r7, lr}
 8006aae:	b082      	sub	sp, #8
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d010      	beq.n	8006adc <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	7b9b      	ldrb	r3, [r3, #14]
 8006abe:	3301      	adds	r3, #1
 8006ac0:	b2da      	uxtb	r2, r3
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	7b9b      	ldrb	r3, [r3, #14]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d106      	bne.n	8006adc <pbuf_ref+0x30>
 8006ace:	4b05      	ldr	r3, [pc, #20]	; (8006ae4 <pbuf_ref+0x38>)
 8006ad0:	f240 3242 	movw	r2, #834	; 0x342
 8006ad4:	4904      	ldr	r1, [pc, #16]	; (8006ae8 <pbuf_ref+0x3c>)
 8006ad6:	4805      	ldr	r0, [pc, #20]	; (8006aec <pbuf_ref+0x40>)
 8006ad8:	f007 ff30 	bl	800e93c <iprintf>
  }
}
 8006adc:	bf00      	nop
 8006ade:	3708      	adds	r7, #8
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	bd80      	pop	{r7, pc}
 8006ae4:	0800fd90 	.word	0x0800fd90
 8006ae8:	0800ff70 	.word	0x0800ff70
 8006aec:	0800fdf0 	.word	0x0800fdf0

08006af0 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8006af0:	b580      	push	{r7, lr}
 8006af2:	b084      	sub	sp, #16
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
 8006af8:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d002      	beq.n	8006b06 <pbuf_cat+0x16>
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d107      	bne.n	8006b16 <pbuf_cat+0x26>
 8006b06:	4b20      	ldr	r3, [pc, #128]	; (8006b88 <pbuf_cat+0x98>)
 8006b08:	f240 325a 	movw	r2, #858	; 0x35a
 8006b0c:	491f      	ldr	r1, [pc, #124]	; (8006b8c <pbuf_cat+0x9c>)
 8006b0e:	4820      	ldr	r0, [pc, #128]	; (8006b90 <pbuf_cat+0xa0>)
 8006b10:	f007 ff14 	bl	800e93c <iprintf>
 8006b14:	e034      	b.n	8006b80 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	60fb      	str	r3, [r7, #12]
 8006b1a:	e00a      	b.n	8006b32 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	891a      	ldrh	r2, [r3, #8]
 8006b20:	683b      	ldr	r3, [r7, #0]
 8006b22:	891b      	ldrh	r3, [r3, #8]
 8006b24:	4413      	add	r3, r2
 8006b26:	b29a      	uxth	r2, r3
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	60fb      	str	r3, [r7, #12]
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d1f0      	bne.n	8006b1c <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	891a      	ldrh	r2, [r3, #8]
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	895b      	ldrh	r3, [r3, #10]
 8006b42:	429a      	cmp	r2, r3
 8006b44:	d006      	beq.n	8006b54 <pbuf_cat+0x64>
 8006b46:	4b10      	ldr	r3, [pc, #64]	; (8006b88 <pbuf_cat+0x98>)
 8006b48:	f240 3262 	movw	r2, #866	; 0x362
 8006b4c:	4911      	ldr	r1, [pc, #68]	; (8006b94 <pbuf_cat+0xa4>)
 8006b4e:	4810      	ldr	r0, [pc, #64]	; (8006b90 <pbuf_cat+0xa0>)
 8006b50:	f007 fef4 	bl	800e93c <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d006      	beq.n	8006b6a <pbuf_cat+0x7a>
 8006b5c:	4b0a      	ldr	r3, [pc, #40]	; (8006b88 <pbuf_cat+0x98>)
 8006b5e:	f240 3263 	movw	r2, #867	; 0x363
 8006b62:	490d      	ldr	r1, [pc, #52]	; (8006b98 <pbuf_cat+0xa8>)
 8006b64:	480a      	ldr	r0, [pc, #40]	; (8006b90 <pbuf_cat+0xa0>)
 8006b66:	f007 fee9 	bl	800e93c <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	891a      	ldrh	r2, [r3, #8]
 8006b6e:	683b      	ldr	r3, [r7, #0]
 8006b70:	891b      	ldrh	r3, [r3, #8]
 8006b72:	4413      	add	r3, r2
 8006b74:	b29a      	uxth	r2, r3
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	683a      	ldr	r2, [r7, #0]
 8006b7e:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8006b80:	3710      	adds	r7, #16
 8006b82:	46bd      	mov	sp, r7
 8006b84:	bd80      	pop	{r7, pc}
 8006b86:	bf00      	nop
 8006b88:	0800fd90 	.word	0x0800fd90
 8006b8c:	0800ff84 	.word	0x0800ff84
 8006b90:	0800fdf0 	.word	0x0800fdf0
 8006b94:	0800ffbc 	.word	0x0800ffbc
 8006b98:	0800ffec 	.word	0x0800ffec

08006b9c <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8006b9c:	b580      	push	{r7, lr}
 8006b9e:	b086      	sub	sp, #24
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]
 8006ba4:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	617b      	str	r3, [r7, #20]
 8006baa:	2300      	movs	r3, #0
 8006bac:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d008      	beq.n	8006bc6 <pbuf_copy+0x2a>
 8006bb4:	683b      	ldr	r3, [r7, #0]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d005      	beq.n	8006bc6 <pbuf_copy+0x2a>
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	891a      	ldrh	r2, [r3, #8]
 8006bbe:	683b      	ldr	r3, [r7, #0]
 8006bc0:	891b      	ldrh	r3, [r3, #8]
 8006bc2:	429a      	cmp	r2, r3
 8006bc4:	d209      	bcs.n	8006bda <pbuf_copy+0x3e>
 8006bc6:	4b57      	ldr	r3, [pc, #348]	; (8006d24 <pbuf_copy+0x188>)
 8006bc8:	f240 32ca 	movw	r2, #970	; 0x3ca
 8006bcc:	4956      	ldr	r1, [pc, #344]	; (8006d28 <pbuf_copy+0x18c>)
 8006bce:	4857      	ldr	r0, [pc, #348]	; (8006d2c <pbuf_copy+0x190>)
 8006bd0:	f007 feb4 	bl	800e93c <iprintf>
 8006bd4:	f06f 030f 	mvn.w	r3, #15
 8006bd8:	e09f      	b.n	8006d1a <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	895b      	ldrh	r3, [r3, #10]
 8006bde:	461a      	mov	r2, r3
 8006be0:	697b      	ldr	r3, [r7, #20]
 8006be2:	1ad2      	subs	r2, r2, r3
 8006be4:	683b      	ldr	r3, [r7, #0]
 8006be6:	895b      	ldrh	r3, [r3, #10]
 8006be8:	4619      	mov	r1, r3
 8006bea:	693b      	ldr	r3, [r7, #16]
 8006bec:	1acb      	subs	r3, r1, r3
 8006bee:	429a      	cmp	r2, r3
 8006bf0:	d306      	bcc.n	8006c00 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	895b      	ldrh	r3, [r3, #10]
 8006bf6:	461a      	mov	r2, r3
 8006bf8:	693b      	ldr	r3, [r7, #16]
 8006bfa:	1ad3      	subs	r3, r2, r3
 8006bfc:	60fb      	str	r3, [r7, #12]
 8006bfe:	e005      	b.n	8006c0c <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	895b      	ldrh	r3, [r3, #10]
 8006c04:	461a      	mov	r2, r3
 8006c06:	697b      	ldr	r3, [r7, #20]
 8006c08:	1ad3      	subs	r3, r2, r3
 8006c0a:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	685a      	ldr	r2, [r3, #4]
 8006c10:	697b      	ldr	r3, [r7, #20]
 8006c12:	18d0      	adds	r0, r2, r3
 8006c14:	683b      	ldr	r3, [r7, #0]
 8006c16:	685a      	ldr	r2, [r3, #4]
 8006c18:	693b      	ldr	r3, [r7, #16]
 8006c1a:	4413      	add	r3, r2
 8006c1c:	68fa      	ldr	r2, [r7, #12]
 8006c1e:	4619      	mov	r1, r3
 8006c20:	f007 fe79 	bl	800e916 <memcpy>
    offset_to += len;
 8006c24:	697a      	ldr	r2, [r7, #20]
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	4413      	add	r3, r2
 8006c2a:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8006c2c:	693a      	ldr	r2, [r7, #16]
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	4413      	add	r3, r2
 8006c32:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	895b      	ldrh	r3, [r3, #10]
 8006c38:	461a      	mov	r2, r3
 8006c3a:	697b      	ldr	r3, [r7, #20]
 8006c3c:	4293      	cmp	r3, r2
 8006c3e:	d906      	bls.n	8006c4e <pbuf_copy+0xb2>
 8006c40:	4b38      	ldr	r3, [pc, #224]	; (8006d24 <pbuf_copy+0x188>)
 8006c42:	f240 32d9 	movw	r2, #985	; 0x3d9
 8006c46:	493a      	ldr	r1, [pc, #232]	; (8006d30 <pbuf_copy+0x194>)
 8006c48:	4838      	ldr	r0, [pc, #224]	; (8006d2c <pbuf_copy+0x190>)
 8006c4a:	f007 fe77 	bl	800e93c <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8006c4e:	683b      	ldr	r3, [r7, #0]
 8006c50:	895b      	ldrh	r3, [r3, #10]
 8006c52:	461a      	mov	r2, r3
 8006c54:	693b      	ldr	r3, [r7, #16]
 8006c56:	4293      	cmp	r3, r2
 8006c58:	d906      	bls.n	8006c68 <pbuf_copy+0xcc>
 8006c5a:	4b32      	ldr	r3, [pc, #200]	; (8006d24 <pbuf_copy+0x188>)
 8006c5c:	f240 32da 	movw	r2, #986	; 0x3da
 8006c60:	4934      	ldr	r1, [pc, #208]	; (8006d34 <pbuf_copy+0x198>)
 8006c62:	4832      	ldr	r0, [pc, #200]	; (8006d2c <pbuf_copy+0x190>)
 8006c64:	f007 fe6a 	bl	800e93c <iprintf>
    if (offset_from >= p_from->len) {
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	895b      	ldrh	r3, [r3, #10]
 8006c6c:	461a      	mov	r2, r3
 8006c6e:	693b      	ldr	r3, [r7, #16]
 8006c70:	4293      	cmp	r3, r2
 8006c72:	d304      	bcc.n	8006c7e <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8006c74:	2300      	movs	r3, #0
 8006c76:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	895b      	ldrh	r3, [r3, #10]
 8006c82:	461a      	mov	r2, r3
 8006c84:	697b      	ldr	r3, [r7, #20]
 8006c86:	4293      	cmp	r3, r2
 8006c88:	d114      	bne.n	8006cb4 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d10c      	bne.n	8006cb4 <pbuf_copy+0x118>
 8006c9a:	683b      	ldr	r3, [r7, #0]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d009      	beq.n	8006cb4 <pbuf_copy+0x118>
 8006ca0:	4b20      	ldr	r3, [pc, #128]	; (8006d24 <pbuf_copy+0x188>)
 8006ca2:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8006ca6:	4924      	ldr	r1, [pc, #144]	; (8006d38 <pbuf_copy+0x19c>)
 8006ca8:	4820      	ldr	r0, [pc, #128]	; (8006d2c <pbuf_copy+0x190>)
 8006caa:	f007 fe47 	bl	800e93c <iprintf>
 8006cae:	f06f 030f 	mvn.w	r3, #15
 8006cb2:	e032      	b.n	8006d1a <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8006cb4:	683b      	ldr	r3, [r7, #0]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d013      	beq.n	8006ce2 <pbuf_copy+0x146>
 8006cba:	683b      	ldr	r3, [r7, #0]
 8006cbc:	895a      	ldrh	r2, [r3, #10]
 8006cbe:	683b      	ldr	r3, [r7, #0]
 8006cc0:	891b      	ldrh	r3, [r3, #8]
 8006cc2:	429a      	cmp	r2, r3
 8006cc4:	d10d      	bne.n	8006ce2 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8006cc6:	683b      	ldr	r3, [r7, #0]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d009      	beq.n	8006ce2 <pbuf_copy+0x146>
 8006cce:	4b15      	ldr	r3, [pc, #84]	; (8006d24 <pbuf_copy+0x188>)
 8006cd0:	f240 32ea 	movw	r2, #1002	; 0x3ea
 8006cd4:	4919      	ldr	r1, [pc, #100]	; (8006d3c <pbuf_copy+0x1a0>)
 8006cd6:	4815      	ldr	r0, [pc, #84]	; (8006d2c <pbuf_copy+0x190>)
 8006cd8:	f007 fe30 	bl	800e93c <iprintf>
 8006cdc:	f06f 0305 	mvn.w	r3, #5
 8006ce0:	e01b      	b.n	8006d1a <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d013      	beq.n	8006d10 <pbuf_copy+0x174>
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	895a      	ldrh	r2, [r3, #10]
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	891b      	ldrh	r3, [r3, #8]
 8006cf0:	429a      	cmp	r2, r3
 8006cf2:	d10d      	bne.n	8006d10 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d009      	beq.n	8006d10 <pbuf_copy+0x174>
 8006cfc:	4b09      	ldr	r3, [pc, #36]	; (8006d24 <pbuf_copy+0x188>)
 8006cfe:	f240 32ef 	movw	r2, #1007	; 0x3ef
 8006d02:	490e      	ldr	r1, [pc, #56]	; (8006d3c <pbuf_copy+0x1a0>)
 8006d04:	4809      	ldr	r0, [pc, #36]	; (8006d2c <pbuf_copy+0x190>)
 8006d06:	f007 fe19 	bl	800e93c <iprintf>
 8006d0a:	f06f 0305 	mvn.w	r3, #5
 8006d0e:	e004      	b.n	8006d1a <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8006d10:	683b      	ldr	r3, [r7, #0]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	f47f af61 	bne.w	8006bda <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8006d18:	2300      	movs	r3, #0
}
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	3718      	adds	r7, #24
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	bd80      	pop	{r7, pc}
 8006d22:	bf00      	nop
 8006d24:	0800fd90 	.word	0x0800fd90
 8006d28:	08010038 	.word	0x08010038
 8006d2c:	0800fdf0 	.word	0x0800fdf0
 8006d30:	08010068 	.word	0x08010068
 8006d34:	08010080 	.word	0x08010080
 8006d38:	0801009c 	.word	0x0801009c
 8006d3c:	080100ac 	.word	0x080100ac

08006d40 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8006d40:	b580      	push	{r7, lr}
 8006d42:	b088      	sub	sp, #32
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	60f8      	str	r0, [r7, #12]
 8006d48:	60b9      	str	r1, [r7, #8]
 8006d4a:	4611      	mov	r1, r2
 8006d4c:	461a      	mov	r2, r3
 8006d4e:	460b      	mov	r3, r1
 8006d50:	80fb      	strh	r3, [r7, #6]
 8006d52:	4613      	mov	r3, r2
 8006d54:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8006d56:	2300      	movs	r3, #0
 8006d58:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d108      	bne.n	8006d76 <pbuf_copy_partial+0x36>
 8006d64:	4b2b      	ldr	r3, [pc, #172]	; (8006e14 <pbuf_copy_partial+0xd4>)
 8006d66:	f240 420a 	movw	r2, #1034	; 0x40a
 8006d6a:	492b      	ldr	r1, [pc, #172]	; (8006e18 <pbuf_copy_partial+0xd8>)
 8006d6c:	482b      	ldr	r0, [pc, #172]	; (8006e1c <pbuf_copy_partial+0xdc>)
 8006d6e:	f007 fde5 	bl	800e93c <iprintf>
 8006d72:	2300      	movs	r3, #0
 8006d74:	e04a      	b.n	8006e0c <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8006d76:	68bb      	ldr	r3, [r7, #8]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d108      	bne.n	8006d8e <pbuf_copy_partial+0x4e>
 8006d7c:	4b25      	ldr	r3, [pc, #148]	; (8006e14 <pbuf_copy_partial+0xd4>)
 8006d7e:	f240 420b 	movw	r2, #1035	; 0x40b
 8006d82:	4927      	ldr	r1, [pc, #156]	; (8006e20 <pbuf_copy_partial+0xe0>)
 8006d84:	4825      	ldr	r0, [pc, #148]	; (8006e1c <pbuf_copy_partial+0xdc>)
 8006d86:	f007 fdd9 	bl	800e93c <iprintf>
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	e03e      	b.n	8006e0c <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	61fb      	str	r3, [r7, #28]
 8006d92:	e034      	b.n	8006dfe <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8006d94:	88bb      	ldrh	r3, [r7, #4]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d00a      	beq.n	8006db0 <pbuf_copy_partial+0x70>
 8006d9a:	69fb      	ldr	r3, [r7, #28]
 8006d9c:	895b      	ldrh	r3, [r3, #10]
 8006d9e:	88ba      	ldrh	r2, [r7, #4]
 8006da0:	429a      	cmp	r2, r3
 8006da2:	d305      	bcc.n	8006db0 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8006da4:	69fb      	ldr	r3, [r7, #28]
 8006da6:	895b      	ldrh	r3, [r3, #10]
 8006da8:	88ba      	ldrh	r2, [r7, #4]
 8006daa:	1ad3      	subs	r3, r2, r3
 8006dac:	80bb      	strh	r3, [r7, #4]
 8006dae:	e023      	b.n	8006df8 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8006db0:	69fb      	ldr	r3, [r7, #28]
 8006db2:	895a      	ldrh	r2, [r3, #10]
 8006db4:	88bb      	ldrh	r3, [r7, #4]
 8006db6:	1ad3      	subs	r3, r2, r3
 8006db8:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8006dba:	8b3a      	ldrh	r2, [r7, #24]
 8006dbc:	88fb      	ldrh	r3, [r7, #6]
 8006dbe:	429a      	cmp	r2, r3
 8006dc0:	d901      	bls.n	8006dc6 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8006dc2:	88fb      	ldrh	r3, [r7, #6]
 8006dc4:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8006dc6:	8b7b      	ldrh	r3, [r7, #26]
 8006dc8:	68ba      	ldr	r2, [r7, #8]
 8006dca:	18d0      	adds	r0, r2, r3
 8006dcc:	69fb      	ldr	r3, [r7, #28]
 8006dce:	685a      	ldr	r2, [r3, #4]
 8006dd0:	88bb      	ldrh	r3, [r7, #4]
 8006dd2:	4413      	add	r3, r2
 8006dd4:	8b3a      	ldrh	r2, [r7, #24]
 8006dd6:	4619      	mov	r1, r3
 8006dd8:	f007 fd9d 	bl	800e916 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8006ddc:	8afa      	ldrh	r2, [r7, #22]
 8006dde:	8b3b      	ldrh	r3, [r7, #24]
 8006de0:	4413      	add	r3, r2
 8006de2:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8006de4:	8b7a      	ldrh	r2, [r7, #26]
 8006de6:	8b3b      	ldrh	r3, [r7, #24]
 8006de8:	4413      	add	r3, r2
 8006dea:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8006dec:	88fa      	ldrh	r2, [r7, #6]
 8006dee:	8b3b      	ldrh	r3, [r7, #24]
 8006df0:	1ad3      	subs	r3, r2, r3
 8006df2:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8006df4:	2300      	movs	r3, #0
 8006df6:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8006df8:	69fb      	ldr	r3, [r7, #28]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	61fb      	str	r3, [r7, #28]
 8006dfe:	88fb      	ldrh	r3, [r7, #6]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d002      	beq.n	8006e0a <pbuf_copy_partial+0xca>
 8006e04:	69fb      	ldr	r3, [r7, #28]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d1c4      	bne.n	8006d94 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8006e0a:	8afb      	ldrh	r3, [r7, #22]
}
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	3720      	adds	r7, #32
 8006e10:	46bd      	mov	sp, r7
 8006e12:	bd80      	pop	{r7, pc}
 8006e14:	0800fd90 	.word	0x0800fd90
 8006e18:	080100d8 	.word	0x080100d8
 8006e1c:	0800fdf0 	.word	0x0800fdf0
 8006e20:	080100f8 	.word	0x080100f8

08006e24 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8006e24:	b580      	push	{r7, lr}
 8006e26:	b084      	sub	sp, #16
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	4603      	mov	r3, r0
 8006e2c:	603a      	str	r2, [r7, #0]
 8006e2e:	71fb      	strb	r3, [r7, #7]
 8006e30:	460b      	mov	r3, r1
 8006e32:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8006e34:	683b      	ldr	r3, [r7, #0]
 8006e36:	8919      	ldrh	r1, [r3, #8]
 8006e38:	88ba      	ldrh	r2, [r7, #4]
 8006e3a:	79fb      	ldrb	r3, [r7, #7]
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	f7ff fab5 	bl	80063ac <pbuf_alloc>
 8006e42:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d101      	bne.n	8006e4e <pbuf_clone+0x2a>
    return NULL;
 8006e4a:	2300      	movs	r3, #0
 8006e4c:	e011      	b.n	8006e72 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8006e4e:	6839      	ldr	r1, [r7, #0]
 8006e50:	68f8      	ldr	r0, [r7, #12]
 8006e52:	f7ff fea3 	bl	8006b9c <pbuf_copy>
 8006e56:	4603      	mov	r3, r0
 8006e58:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8006e5a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d006      	beq.n	8006e70 <pbuf_clone+0x4c>
 8006e62:	4b06      	ldr	r3, [pc, #24]	; (8006e7c <pbuf_clone+0x58>)
 8006e64:	f240 5224 	movw	r2, #1316	; 0x524
 8006e68:	4905      	ldr	r1, [pc, #20]	; (8006e80 <pbuf_clone+0x5c>)
 8006e6a:	4806      	ldr	r0, [pc, #24]	; (8006e84 <pbuf_clone+0x60>)
 8006e6c:	f007 fd66 	bl	800e93c <iprintf>
  return q;
 8006e70:	68fb      	ldr	r3, [r7, #12]
}
 8006e72:	4618      	mov	r0, r3
 8006e74:	3710      	adds	r7, #16
 8006e76:	46bd      	mov	sp, r7
 8006e78:	bd80      	pop	{r7, pc}
 8006e7a:	bf00      	nop
 8006e7c:	0800fd90 	.word	0x0800fd90
 8006e80:	08010204 	.word	0x08010204
 8006e84:	0800fdf0 	.word	0x0800fdf0

08006e88 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8006e8c:	f007 fd6e 	bl	800e96c <rand>
 8006e90:	4603      	mov	r3, r0
 8006e92:	b29b      	uxth	r3, r3
 8006e94:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8006e98:	b29b      	uxth	r3, r3
 8006e9a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8006e9e:	b29a      	uxth	r2, r3
 8006ea0:	4b01      	ldr	r3, [pc, #4]	; (8006ea8 <tcp_init+0x20>)
 8006ea2:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8006ea4:	bf00      	nop
 8006ea6:	bd80      	pop	{r7, pc}
 8006ea8:	2000000a 	.word	0x2000000a

08006eac <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b082      	sub	sp, #8
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	7d1b      	ldrb	r3, [r3, #20]
 8006eb8:	2b01      	cmp	r3, #1
 8006eba:	d105      	bne.n	8006ec8 <tcp_free+0x1c>
 8006ebc:	4b06      	ldr	r3, [pc, #24]	; (8006ed8 <tcp_free+0x2c>)
 8006ebe:	22d4      	movs	r2, #212	; 0xd4
 8006ec0:	4906      	ldr	r1, [pc, #24]	; (8006edc <tcp_free+0x30>)
 8006ec2:	4807      	ldr	r0, [pc, #28]	; (8006ee0 <tcp_free+0x34>)
 8006ec4:	f007 fd3a 	bl	800e93c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8006ec8:	6879      	ldr	r1, [r7, #4]
 8006eca:	2000      	movs	r0, #0
 8006ecc:	f7fe ff64 	bl	8005d98 <memp_free>
}
 8006ed0:	bf00      	nop
 8006ed2:	3708      	adds	r7, #8
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	bd80      	pop	{r7, pc}
 8006ed8:	08010290 	.word	0x08010290
 8006edc:	080102c0 	.word	0x080102c0
 8006ee0:	080102d4 	.word	0x080102d4

08006ee4 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	b082      	sub	sp, #8
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	7d1b      	ldrb	r3, [r3, #20]
 8006ef0:	2b01      	cmp	r3, #1
 8006ef2:	d105      	bne.n	8006f00 <tcp_free_listen+0x1c>
 8006ef4:	4b06      	ldr	r3, [pc, #24]	; (8006f10 <tcp_free_listen+0x2c>)
 8006ef6:	22df      	movs	r2, #223	; 0xdf
 8006ef8:	4906      	ldr	r1, [pc, #24]	; (8006f14 <tcp_free_listen+0x30>)
 8006efa:	4807      	ldr	r0, [pc, #28]	; (8006f18 <tcp_free_listen+0x34>)
 8006efc:	f007 fd1e 	bl	800e93c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8006f00:	6879      	ldr	r1, [r7, #4]
 8006f02:	2001      	movs	r0, #1
 8006f04:	f7fe ff48 	bl	8005d98 <memp_free>
}
 8006f08:	bf00      	nop
 8006f0a:	3708      	adds	r7, #8
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	bd80      	pop	{r7, pc}
 8006f10:	08010290 	.word	0x08010290
 8006f14:	080102fc 	.word	0x080102fc
 8006f18:	080102d4 	.word	0x080102d4

08006f1c <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8006f1c:	b580      	push	{r7, lr}
 8006f1e:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8006f20:	f000 fe98 	bl	8007c54 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8006f24:	4b07      	ldr	r3, [pc, #28]	; (8006f44 <tcp_tmr+0x28>)
 8006f26:	781b      	ldrb	r3, [r3, #0]
 8006f28:	3301      	adds	r3, #1
 8006f2a:	b2da      	uxtb	r2, r3
 8006f2c:	4b05      	ldr	r3, [pc, #20]	; (8006f44 <tcp_tmr+0x28>)
 8006f2e:	701a      	strb	r2, [r3, #0]
 8006f30:	4b04      	ldr	r3, [pc, #16]	; (8006f44 <tcp_tmr+0x28>)
 8006f32:	781b      	ldrb	r3, [r3, #0]
 8006f34:	f003 0301 	and.w	r3, r3, #1
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d001      	beq.n	8006f40 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8006f3c:	f000 fb4c 	bl	80075d8 <tcp_slowtmr>
  }
}
 8006f40:	bf00      	nop
 8006f42:	bd80      	pop	{r7, pc}
 8006f44:	200000c1 	.word	0x200000c1

08006f48 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	b084      	sub	sp, #16
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
 8006f50:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8006f52:	683b      	ldr	r3, [r7, #0]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d105      	bne.n	8006f64 <tcp_remove_listener+0x1c>
 8006f58:	4b0d      	ldr	r3, [pc, #52]	; (8006f90 <tcp_remove_listener+0x48>)
 8006f5a:	22ff      	movs	r2, #255	; 0xff
 8006f5c:	490d      	ldr	r1, [pc, #52]	; (8006f94 <tcp_remove_listener+0x4c>)
 8006f5e:	480e      	ldr	r0, [pc, #56]	; (8006f98 <tcp_remove_listener+0x50>)
 8006f60:	f007 fcec 	bl	800e93c <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	60fb      	str	r3, [r7, #12]
 8006f68:	e00a      	b.n	8006f80 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006f6e:	683a      	ldr	r2, [r7, #0]
 8006f70:	429a      	cmp	r2, r3
 8006f72:	d102      	bne.n	8006f7a <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	2200      	movs	r2, #0
 8006f78:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	68db      	ldr	r3, [r3, #12]
 8006f7e:	60fb      	str	r3, [r7, #12]
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d1f1      	bne.n	8006f6a <tcp_remove_listener+0x22>
    }
  }
}
 8006f86:	bf00      	nop
 8006f88:	3710      	adds	r7, #16
 8006f8a:	46bd      	mov	sp, r7
 8006f8c:	bd80      	pop	{r7, pc}
 8006f8e:	bf00      	nop
 8006f90:	08010290 	.word	0x08010290
 8006f94:	08010318 	.word	0x08010318
 8006f98:	080102d4 	.word	0x080102d4

08006f9c <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	b084      	sub	sp, #16
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d106      	bne.n	8006fb8 <tcp_listen_closed+0x1c>
 8006faa:	4b14      	ldr	r3, [pc, #80]	; (8006ffc <tcp_listen_closed+0x60>)
 8006fac:	f240 1211 	movw	r2, #273	; 0x111
 8006fb0:	4913      	ldr	r1, [pc, #76]	; (8007000 <tcp_listen_closed+0x64>)
 8006fb2:	4814      	ldr	r0, [pc, #80]	; (8007004 <tcp_listen_closed+0x68>)
 8006fb4:	f007 fcc2 	bl	800e93c <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	7d1b      	ldrb	r3, [r3, #20]
 8006fbc:	2b01      	cmp	r3, #1
 8006fbe:	d006      	beq.n	8006fce <tcp_listen_closed+0x32>
 8006fc0:	4b0e      	ldr	r3, [pc, #56]	; (8006ffc <tcp_listen_closed+0x60>)
 8006fc2:	f44f 7289 	mov.w	r2, #274	; 0x112
 8006fc6:	4910      	ldr	r1, [pc, #64]	; (8007008 <tcp_listen_closed+0x6c>)
 8006fc8:	480e      	ldr	r0, [pc, #56]	; (8007004 <tcp_listen_closed+0x68>)
 8006fca:	f007 fcb7 	bl	800e93c <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8006fce:	2301      	movs	r3, #1
 8006fd0:	60fb      	str	r3, [r7, #12]
 8006fd2:	e00b      	b.n	8006fec <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8006fd4:	4a0d      	ldr	r2, [pc, #52]	; (800700c <tcp_listen_closed+0x70>)
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	6879      	ldr	r1, [r7, #4]
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	f7ff ffb1 	bl	8006f48 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	3301      	adds	r3, #1
 8006fea:	60fb      	str	r3, [r7, #12]
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	2b03      	cmp	r3, #3
 8006ff0:	d9f0      	bls.n	8006fd4 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8006ff2:	bf00      	nop
 8006ff4:	3710      	adds	r7, #16
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	bd80      	pop	{r7, pc}
 8006ffa:	bf00      	nop
 8006ffc:	08010290 	.word	0x08010290
 8007000:	08010340 	.word	0x08010340
 8007004:	080102d4 	.word	0x080102d4
 8007008:	0801034c 	.word	0x0801034c
 800700c:	08011ef0 	.word	0x08011ef0

08007010 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8007010:	b5b0      	push	{r4, r5, r7, lr}
 8007012:	b088      	sub	sp, #32
 8007014:	af04      	add	r7, sp, #16
 8007016:	6078      	str	r0, [r7, #4]
 8007018:	460b      	mov	r3, r1
 800701a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2b00      	cmp	r3, #0
 8007020:	d106      	bne.n	8007030 <tcp_close_shutdown+0x20>
 8007022:	4b61      	ldr	r3, [pc, #388]	; (80071a8 <tcp_close_shutdown+0x198>)
 8007024:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8007028:	4960      	ldr	r1, [pc, #384]	; (80071ac <tcp_close_shutdown+0x19c>)
 800702a:	4861      	ldr	r0, [pc, #388]	; (80071b0 <tcp_close_shutdown+0x1a0>)
 800702c:	f007 fc86 	bl	800e93c <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8007030:	78fb      	ldrb	r3, [r7, #3]
 8007032:	2b00      	cmp	r3, #0
 8007034:	d066      	beq.n	8007104 <tcp_close_shutdown+0xf4>
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	7d1b      	ldrb	r3, [r3, #20]
 800703a:	2b04      	cmp	r3, #4
 800703c:	d003      	beq.n	8007046 <tcp_close_shutdown+0x36>
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	7d1b      	ldrb	r3, [r3, #20]
 8007042:	2b07      	cmp	r3, #7
 8007044:	d15e      	bne.n	8007104 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800704a:	2b00      	cmp	r3, #0
 800704c:	d104      	bne.n	8007058 <tcp_close_shutdown+0x48>
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007052:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8007056:	d055      	beq.n	8007104 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	8b5b      	ldrh	r3, [r3, #26]
 800705c:	f003 0310 	and.w	r3, r3, #16
 8007060:	2b00      	cmp	r3, #0
 8007062:	d106      	bne.n	8007072 <tcp_close_shutdown+0x62>
 8007064:	4b50      	ldr	r3, [pc, #320]	; (80071a8 <tcp_close_shutdown+0x198>)
 8007066:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800706a:	4952      	ldr	r1, [pc, #328]	; (80071b4 <tcp_close_shutdown+0x1a4>)
 800706c:	4850      	ldr	r0, [pc, #320]	; (80071b0 <tcp_close_shutdown+0x1a0>)
 800706e:	f007 fc65 	bl	800e93c <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800707a:	687d      	ldr	r5, [r7, #4]
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	3304      	adds	r3, #4
 8007080:	687a      	ldr	r2, [r7, #4]
 8007082:	8ad2      	ldrh	r2, [r2, #22]
 8007084:	6879      	ldr	r1, [r7, #4]
 8007086:	8b09      	ldrh	r1, [r1, #24]
 8007088:	9102      	str	r1, [sp, #8]
 800708a:	9201      	str	r2, [sp, #4]
 800708c:	9300      	str	r3, [sp, #0]
 800708e:	462b      	mov	r3, r5
 8007090:	4622      	mov	r2, r4
 8007092:	4601      	mov	r1, r0
 8007094:	6878      	ldr	r0, [r7, #4]
 8007096:	f004 fe91 	bl	800bdbc <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800709a:	6878      	ldr	r0, [r7, #4]
 800709c:	f001 f8ba 	bl	8008214 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 80070a0:	4b45      	ldr	r3, [pc, #276]	; (80071b8 <tcp_close_shutdown+0x1a8>)
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	687a      	ldr	r2, [r7, #4]
 80070a6:	429a      	cmp	r2, r3
 80070a8:	d105      	bne.n	80070b6 <tcp_close_shutdown+0xa6>
 80070aa:	4b43      	ldr	r3, [pc, #268]	; (80071b8 <tcp_close_shutdown+0x1a8>)
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	68db      	ldr	r3, [r3, #12]
 80070b0:	4a41      	ldr	r2, [pc, #260]	; (80071b8 <tcp_close_shutdown+0x1a8>)
 80070b2:	6013      	str	r3, [r2, #0]
 80070b4:	e013      	b.n	80070de <tcp_close_shutdown+0xce>
 80070b6:	4b40      	ldr	r3, [pc, #256]	; (80071b8 <tcp_close_shutdown+0x1a8>)
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	60fb      	str	r3, [r7, #12]
 80070bc:	e00c      	b.n	80070d8 <tcp_close_shutdown+0xc8>
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	68db      	ldr	r3, [r3, #12]
 80070c2:	687a      	ldr	r2, [r7, #4]
 80070c4:	429a      	cmp	r2, r3
 80070c6:	d104      	bne.n	80070d2 <tcp_close_shutdown+0xc2>
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	68da      	ldr	r2, [r3, #12]
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	60da      	str	r2, [r3, #12]
 80070d0:	e005      	b.n	80070de <tcp_close_shutdown+0xce>
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	68db      	ldr	r3, [r3, #12]
 80070d6:	60fb      	str	r3, [r7, #12]
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d1ef      	bne.n	80070be <tcp_close_shutdown+0xae>
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	2200      	movs	r2, #0
 80070e2:	60da      	str	r2, [r3, #12]
 80070e4:	4b35      	ldr	r3, [pc, #212]	; (80071bc <tcp_close_shutdown+0x1ac>)
 80070e6:	2201      	movs	r2, #1
 80070e8:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 80070ea:	4b35      	ldr	r3, [pc, #212]	; (80071c0 <tcp_close_shutdown+0x1b0>)
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	687a      	ldr	r2, [r7, #4]
 80070f0:	429a      	cmp	r2, r3
 80070f2:	d102      	bne.n	80070fa <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 80070f4:	f003 fd4c 	bl	800ab90 <tcp_trigger_input_pcb_close>
 80070f8:	e002      	b.n	8007100 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 80070fa:	6878      	ldr	r0, [r7, #4]
 80070fc:	f7ff fed6 	bl	8006eac <tcp_free>
      }
      return ERR_OK;
 8007100:	2300      	movs	r3, #0
 8007102:	e04d      	b.n	80071a0 <tcp_close_shutdown+0x190>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	7d1b      	ldrb	r3, [r3, #20]
 8007108:	2b01      	cmp	r3, #1
 800710a:	d02d      	beq.n	8007168 <tcp_close_shutdown+0x158>
 800710c:	2b02      	cmp	r3, #2
 800710e:	d036      	beq.n	800717e <tcp_close_shutdown+0x16e>
 8007110:	2b00      	cmp	r3, #0
 8007112:	d13f      	bne.n	8007194 <tcp_close_shutdown+0x184>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	8adb      	ldrh	r3, [r3, #22]
 8007118:	2b00      	cmp	r3, #0
 800711a:	d021      	beq.n	8007160 <tcp_close_shutdown+0x150>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800711c:	4b29      	ldr	r3, [pc, #164]	; (80071c4 <tcp_close_shutdown+0x1b4>)
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	687a      	ldr	r2, [r7, #4]
 8007122:	429a      	cmp	r2, r3
 8007124:	d105      	bne.n	8007132 <tcp_close_shutdown+0x122>
 8007126:	4b27      	ldr	r3, [pc, #156]	; (80071c4 <tcp_close_shutdown+0x1b4>)
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	68db      	ldr	r3, [r3, #12]
 800712c:	4a25      	ldr	r2, [pc, #148]	; (80071c4 <tcp_close_shutdown+0x1b4>)
 800712e:	6013      	str	r3, [r2, #0]
 8007130:	e013      	b.n	800715a <tcp_close_shutdown+0x14a>
 8007132:	4b24      	ldr	r3, [pc, #144]	; (80071c4 <tcp_close_shutdown+0x1b4>)
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	60bb      	str	r3, [r7, #8]
 8007138:	e00c      	b.n	8007154 <tcp_close_shutdown+0x144>
 800713a:	68bb      	ldr	r3, [r7, #8]
 800713c:	68db      	ldr	r3, [r3, #12]
 800713e:	687a      	ldr	r2, [r7, #4]
 8007140:	429a      	cmp	r2, r3
 8007142:	d104      	bne.n	800714e <tcp_close_shutdown+0x13e>
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	68da      	ldr	r2, [r3, #12]
 8007148:	68bb      	ldr	r3, [r7, #8]
 800714a:	60da      	str	r2, [r3, #12]
 800714c:	e005      	b.n	800715a <tcp_close_shutdown+0x14a>
 800714e:	68bb      	ldr	r3, [r7, #8]
 8007150:	68db      	ldr	r3, [r3, #12]
 8007152:	60bb      	str	r3, [r7, #8]
 8007154:	68bb      	ldr	r3, [r7, #8]
 8007156:	2b00      	cmp	r3, #0
 8007158:	d1ef      	bne.n	800713a <tcp_close_shutdown+0x12a>
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	2200      	movs	r2, #0
 800715e:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8007160:	6878      	ldr	r0, [r7, #4]
 8007162:	f7ff fea3 	bl	8006eac <tcp_free>
      break;
 8007166:	e01a      	b.n	800719e <tcp_close_shutdown+0x18e>
    case LISTEN:
      tcp_listen_closed(pcb);
 8007168:	6878      	ldr	r0, [r7, #4]
 800716a:	f7ff ff17 	bl	8006f9c <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800716e:	6879      	ldr	r1, [r7, #4]
 8007170:	4815      	ldr	r0, [pc, #84]	; (80071c8 <tcp_close_shutdown+0x1b8>)
 8007172:	f001 f89f 	bl	80082b4 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8007176:	6878      	ldr	r0, [r7, #4]
 8007178:	f7ff feb4 	bl	8006ee4 <tcp_free_listen>
      break;
 800717c:	e00f      	b.n	800719e <tcp_close_shutdown+0x18e>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800717e:	6879      	ldr	r1, [r7, #4]
 8007180:	480d      	ldr	r0, [pc, #52]	; (80071b8 <tcp_close_shutdown+0x1a8>)
 8007182:	f001 f897 	bl	80082b4 <tcp_pcb_remove>
 8007186:	4b0d      	ldr	r3, [pc, #52]	; (80071bc <tcp_close_shutdown+0x1ac>)
 8007188:	2201      	movs	r2, #1
 800718a:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800718c:	6878      	ldr	r0, [r7, #4]
 800718e:	f7ff fe8d 	bl	8006eac <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8007192:	e004      	b.n	800719e <tcp_close_shutdown+0x18e>
    default:
      return tcp_close_shutdown_fin(pcb);
 8007194:	6878      	ldr	r0, [r7, #4]
 8007196:	f000 f819 	bl	80071cc <tcp_close_shutdown_fin>
 800719a:	4603      	mov	r3, r0
 800719c:	e000      	b.n	80071a0 <tcp_close_shutdown+0x190>
  }
  return ERR_OK;
 800719e:	2300      	movs	r3, #0
}
 80071a0:	4618      	mov	r0, r3
 80071a2:	3710      	adds	r7, #16
 80071a4:	46bd      	mov	sp, r7
 80071a6:	bdb0      	pop	{r4, r5, r7, pc}
 80071a8:	08010290 	.word	0x08010290
 80071ac:	08010364 	.word	0x08010364
 80071b0:	080102d4 	.word	0x080102d4
 80071b4:	08010384 	.word	0x08010384
 80071b8:	20008ae0 	.word	0x20008ae0
 80071bc:	20008adc 	.word	0x20008adc
 80071c0:	20008af4 	.word	0x20008af4
 80071c4:	20008aec 	.word	0x20008aec
 80071c8:	20008ae8 	.word	0x20008ae8

080071cc <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 80071cc:	b580      	push	{r7, lr}
 80071ce:	b084      	sub	sp, #16
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d106      	bne.n	80071e8 <tcp_close_shutdown_fin+0x1c>
 80071da:	4b2c      	ldr	r3, [pc, #176]	; (800728c <tcp_close_shutdown_fin+0xc0>)
 80071dc:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 80071e0:	492b      	ldr	r1, [pc, #172]	; (8007290 <tcp_close_shutdown_fin+0xc4>)
 80071e2:	482c      	ldr	r0, [pc, #176]	; (8007294 <tcp_close_shutdown_fin+0xc8>)
 80071e4:	f007 fbaa 	bl	800e93c <iprintf>

  switch (pcb->state) {
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	7d1b      	ldrb	r3, [r3, #20]
 80071ec:	2b04      	cmp	r3, #4
 80071ee:	d010      	beq.n	8007212 <tcp_close_shutdown_fin+0x46>
 80071f0:	2b07      	cmp	r3, #7
 80071f2:	d01b      	beq.n	800722c <tcp_close_shutdown_fin+0x60>
 80071f4:	2b03      	cmp	r3, #3
 80071f6:	d126      	bne.n	8007246 <tcp_close_shutdown_fin+0x7a>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 80071f8:	6878      	ldr	r0, [r7, #4]
 80071fa:	f003 fedb 	bl	800afb4 <tcp_send_fin>
 80071fe:	4603      	mov	r3, r0
 8007200:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8007202:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007206:	2b00      	cmp	r3, #0
 8007208:	d11f      	bne.n	800724a <tcp_close_shutdown_fin+0x7e>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	2205      	movs	r2, #5
 800720e:	751a      	strb	r2, [r3, #20]
      }
      break;
 8007210:	e01b      	b.n	800724a <tcp_close_shutdown_fin+0x7e>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8007212:	6878      	ldr	r0, [r7, #4]
 8007214:	f003 fece 	bl	800afb4 <tcp_send_fin>
 8007218:	4603      	mov	r3, r0
 800721a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800721c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007220:	2b00      	cmp	r3, #0
 8007222:	d114      	bne.n	800724e <tcp_close_shutdown_fin+0x82>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	2205      	movs	r2, #5
 8007228:	751a      	strb	r2, [r3, #20]
      }
      break;
 800722a:	e010      	b.n	800724e <tcp_close_shutdown_fin+0x82>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800722c:	6878      	ldr	r0, [r7, #4]
 800722e:	f003 fec1 	bl	800afb4 <tcp_send_fin>
 8007232:	4603      	mov	r3, r0
 8007234:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8007236:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800723a:	2b00      	cmp	r3, #0
 800723c:	d109      	bne.n	8007252 <tcp_close_shutdown_fin+0x86>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	2209      	movs	r2, #9
 8007242:	751a      	strb	r2, [r3, #20]
      }
      break;
 8007244:	e005      	b.n	8007252 <tcp_close_shutdown_fin+0x86>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8007246:	2300      	movs	r3, #0
 8007248:	e01c      	b.n	8007284 <tcp_close_shutdown_fin+0xb8>
      break;
 800724a:	bf00      	nop
 800724c:	e002      	b.n	8007254 <tcp_close_shutdown_fin+0x88>
      break;
 800724e:	bf00      	nop
 8007250:	e000      	b.n	8007254 <tcp_close_shutdown_fin+0x88>
      break;
 8007252:	bf00      	nop
  }

  if (err == ERR_OK) {
 8007254:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d103      	bne.n	8007264 <tcp_close_shutdown_fin+0x98>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800725c:	6878      	ldr	r0, [r7, #4]
 800725e:	f003 ffe7 	bl	800b230 <tcp_output>
 8007262:	e00d      	b.n	8007280 <tcp_close_shutdown_fin+0xb4>
  } else if (err == ERR_MEM) {
 8007264:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007268:	f1b3 3fff 	cmp.w	r3, #4294967295
 800726c:	d108      	bne.n	8007280 <tcp_close_shutdown_fin+0xb4>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	8b5b      	ldrh	r3, [r3, #26]
 8007272:	f043 0308 	orr.w	r3, r3, #8
 8007276:	b29a      	uxth	r2, r3
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800727c:	2300      	movs	r3, #0
 800727e:	e001      	b.n	8007284 <tcp_close_shutdown_fin+0xb8>
  }
  return err;
 8007280:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007284:	4618      	mov	r0, r3
 8007286:	3710      	adds	r7, #16
 8007288:	46bd      	mov	sp, r7
 800728a:	bd80      	pop	{r7, pc}
 800728c:	08010290 	.word	0x08010290
 8007290:	08010340 	.word	0x08010340
 8007294:	080102d4 	.word	0x080102d4

08007298 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8007298:	b580      	push	{r7, lr}
 800729a:	b082      	sub	sp, #8
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d109      	bne.n	80072ba <tcp_close+0x22>
 80072a6:	4b0f      	ldr	r3, [pc, #60]	; (80072e4 <tcp_close+0x4c>)
 80072a8:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 80072ac:	490e      	ldr	r1, [pc, #56]	; (80072e8 <tcp_close+0x50>)
 80072ae:	480f      	ldr	r0, [pc, #60]	; (80072ec <tcp_close+0x54>)
 80072b0:	f007 fb44 	bl	800e93c <iprintf>
 80072b4:	f06f 030f 	mvn.w	r3, #15
 80072b8:	e00f      	b.n	80072da <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	7d1b      	ldrb	r3, [r3, #20]
 80072be:	2b01      	cmp	r3, #1
 80072c0:	d006      	beq.n	80072d0 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	8b5b      	ldrh	r3, [r3, #26]
 80072c6:	f043 0310 	orr.w	r3, r3, #16
 80072ca:	b29a      	uxth	r2, r3
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 80072d0:	2101      	movs	r1, #1
 80072d2:	6878      	ldr	r0, [r7, #4]
 80072d4:	f7ff fe9c 	bl	8007010 <tcp_close_shutdown>
 80072d8:	4603      	mov	r3, r0
}
 80072da:	4618      	mov	r0, r3
 80072dc:	3708      	adds	r7, #8
 80072de:	46bd      	mov	sp, r7
 80072e0:	bd80      	pop	{r7, pc}
 80072e2:	bf00      	nop
 80072e4:	08010290 	.word	0x08010290
 80072e8:	080103a0 	.word	0x080103a0
 80072ec:	080102d4 	.word	0x080102d4

080072f0 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 80072f0:	b580      	push	{r7, lr}
 80072f2:	b08e      	sub	sp, #56	; 0x38
 80072f4:	af04      	add	r7, sp, #16
 80072f6:	6078      	str	r0, [r7, #4]
 80072f8:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d107      	bne.n	8007310 <tcp_abandon+0x20>
 8007300:	4b52      	ldr	r3, [pc, #328]	; (800744c <tcp_abandon+0x15c>)
 8007302:	f240 223d 	movw	r2, #573	; 0x23d
 8007306:	4952      	ldr	r1, [pc, #328]	; (8007450 <tcp_abandon+0x160>)
 8007308:	4852      	ldr	r0, [pc, #328]	; (8007454 <tcp_abandon+0x164>)
 800730a:	f007 fb17 	bl	800e93c <iprintf>
 800730e:	e099      	b.n	8007444 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	7d1b      	ldrb	r3, [r3, #20]
 8007314:	2b01      	cmp	r3, #1
 8007316:	d106      	bne.n	8007326 <tcp_abandon+0x36>
 8007318:	4b4c      	ldr	r3, [pc, #304]	; (800744c <tcp_abandon+0x15c>)
 800731a:	f240 2241 	movw	r2, #577	; 0x241
 800731e:	494e      	ldr	r1, [pc, #312]	; (8007458 <tcp_abandon+0x168>)
 8007320:	484c      	ldr	r0, [pc, #304]	; (8007454 <tcp_abandon+0x164>)
 8007322:	f007 fb0b 	bl	800e93c <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	7d1b      	ldrb	r3, [r3, #20]
 800732a:	2b0a      	cmp	r3, #10
 800732c:	d107      	bne.n	800733e <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800732e:	6879      	ldr	r1, [r7, #4]
 8007330:	484a      	ldr	r0, [pc, #296]	; (800745c <tcp_abandon+0x16c>)
 8007332:	f000 ffbf 	bl	80082b4 <tcp_pcb_remove>
    tcp_free(pcb);
 8007336:	6878      	ldr	r0, [r7, #4]
 8007338:	f7ff fdb8 	bl	8006eac <tcp_free>
 800733c:	e082      	b.n	8007444 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800733e:	2300      	movs	r3, #0
 8007340:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8007342:	2300      	movs	r3, #0
 8007344:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800734a:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007350:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007358:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	691b      	ldr	r3, [r3, #16]
 800735e:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	7d1b      	ldrb	r3, [r3, #20]
 8007364:	2b00      	cmp	r3, #0
 8007366:	d126      	bne.n	80073b6 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	8adb      	ldrh	r3, [r3, #22]
 800736c:	2b00      	cmp	r3, #0
 800736e:	d02e      	beq.n	80073ce <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8007370:	4b3b      	ldr	r3, [pc, #236]	; (8007460 <tcp_abandon+0x170>)
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	687a      	ldr	r2, [r7, #4]
 8007376:	429a      	cmp	r2, r3
 8007378:	d105      	bne.n	8007386 <tcp_abandon+0x96>
 800737a:	4b39      	ldr	r3, [pc, #228]	; (8007460 <tcp_abandon+0x170>)
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	68db      	ldr	r3, [r3, #12]
 8007380:	4a37      	ldr	r2, [pc, #220]	; (8007460 <tcp_abandon+0x170>)
 8007382:	6013      	str	r3, [r2, #0]
 8007384:	e013      	b.n	80073ae <tcp_abandon+0xbe>
 8007386:	4b36      	ldr	r3, [pc, #216]	; (8007460 <tcp_abandon+0x170>)
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	61fb      	str	r3, [r7, #28]
 800738c:	e00c      	b.n	80073a8 <tcp_abandon+0xb8>
 800738e:	69fb      	ldr	r3, [r7, #28]
 8007390:	68db      	ldr	r3, [r3, #12]
 8007392:	687a      	ldr	r2, [r7, #4]
 8007394:	429a      	cmp	r2, r3
 8007396:	d104      	bne.n	80073a2 <tcp_abandon+0xb2>
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	68da      	ldr	r2, [r3, #12]
 800739c:	69fb      	ldr	r3, [r7, #28]
 800739e:	60da      	str	r2, [r3, #12]
 80073a0:	e005      	b.n	80073ae <tcp_abandon+0xbe>
 80073a2:	69fb      	ldr	r3, [r7, #28]
 80073a4:	68db      	ldr	r3, [r3, #12]
 80073a6:	61fb      	str	r3, [r7, #28]
 80073a8:	69fb      	ldr	r3, [r7, #28]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d1ef      	bne.n	800738e <tcp_abandon+0x9e>
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	2200      	movs	r2, #0
 80073b2:	60da      	str	r2, [r3, #12]
 80073b4:	e00b      	b.n	80073ce <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 80073b6:	683b      	ldr	r3, [r7, #0]
 80073b8:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	8adb      	ldrh	r3, [r3, #22]
 80073be:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80073c0:	6879      	ldr	r1, [r7, #4]
 80073c2:	4828      	ldr	r0, [pc, #160]	; (8007464 <tcp_abandon+0x174>)
 80073c4:	f000 ff76 	bl	80082b4 <tcp_pcb_remove>
 80073c8:	4b27      	ldr	r3, [pc, #156]	; (8007468 <tcp_abandon+0x178>)
 80073ca:	2201      	movs	r2, #1
 80073cc:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d004      	beq.n	80073e0 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073da:	4618      	mov	r0, r3
 80073dc:	f000 fd1a 	bl	8007e14 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d004      	beq.n	80073f2 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80073ec:	4618      	mov	r0, r3
 80073ee:	f000 fd11 	bl	8007e14 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d004      	beq.n	8007404 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80073fe:	4618      	mov	r0, r3
 8007400:	f000 fd08 	bl	8007e14 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8007404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007406:	2b00      	cmp	r3, #0
 8007408:	d00e      	beq.n	8007428 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800740a:	6879      	ldr	r1, [r7, #4]
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	3304      	adds	r3, #4
 8007410:	687a      	ldr	r2, [r7, #4]
 8007412:	8b12      	ldrh	r2, [r2, #24]
 8007414:	9202      	str	r2, [sp, #8]
 8007416:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8007418:	9201      	str	r2, [sp, #4]
 800741a:	9300      	str	r3, [sp, #0]
 800741c:	460b      	mov	r3, r1
 800741e:	697a      	ldr	r2, [r7, #20]
 8007420:	69b9      	ldr	r1, [r7, #24]
 8007422:	6878      	ldr	r0, [r7, #4]
 8007424:	f004 fcca 	bl	800bdbc <tcp_rst>
    }
    last_state = pcb->state;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	7d1b      	ldrb	r3, [r3, #20]
 800742c:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800742e:	6878      	ldr	r0, [r7, #4]
 8007430:	f7ff fd3c 	bl	8006eac <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8007434:	693b      	ldr	r3, [r7, #16]
 8007436:	2b00      	cmp	r3, #0
 8007438:	d004      	beq.n	8007444 <tcp_abandon+0x154>
 800743a:	693b      	ldr	r3, [r7, #16]
 800743c:	f06f 010c 	mvn.w	r1, #12
 8007440:	68f8      	ldr	r0, [r7, #12]
 8007442:	4798      	blx	r3
  }
}
 8007444:	3728      	adds	r7, #40	; 0x28
 8007446:	46bd      	mov	sp, r7
 8007448:	bd80      	pop	{r7, pc}
 800744a:	bf00      	nop
 800744c:	08010290 	.word	0x08010290
 8007450:	080103d4 	.word	0x080103d4
 8007454:	080102d4 	.word	0x080102d4
 8007458:	080103f0 	.word	0x080103f0
 800745c:	20008af0 	.word	0x20008af0
 8007460:	20008aec 	.word	0x20008aec
 8007464:	20008ae0 	.word	0x20008ae0
 8007468:	20008adc 	.word	0x20008adc

0800746c <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800746c:	b580      	push	{r7, lr}
 800746e:	b082      	sub	sp, #8
 8007470:	af00      	add	r7, sp, #0
 8007472:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8007474:	2101      	movs	r1, #1
 8007476:	6878      	ldr	r0, [r7, #4]
 8007478:	f7ff ff3a 	bl	80072f0 <tcp_abandon>
}
 800747c:	bf00      	nop
 800747e:	3708      	adds	r7, #8
 8007480:	46bd      	mov	sp, r7
 8007482:	bd80      	pop	{r7, pc}

08007484 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8007484:	b580      	push	{r7, lr}
 8007486:	b084      	sub	sp, #16
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	2b00      	cmp	r3, #0
 8007490:	d106      	bne.n	80074a0 <tcp_update_rcv_ann_wnd+0x1c>
 8007492:	4b25      	ldr	r3, [pc, #148]	; (8007528 <tcp_update_rcv_ann_wnd+0xa4>)
 8007494:	f240 32a6 	movw	r2, #934	; 0x3a6
 8007498:	4924      	ldr	r1, [pc, #144]	; (800752c <tcp_update_rcv_ann_wnd+0xa8>)
 800749a:	4825      	ldr	r0, [pc, #148]	; (8007530 <tcp_update_rcv_ann_wnd+0xac>)
 800749c:	f007 fa4e 	bl	800e93c <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074a4:	687a      	ldr	r2, [r7, #4]
 80074a6:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 80074a8:	4413      	add	r3, r2
 80074aa:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074b0:	687a      	ldr	r2, [r7, #4]
 80074b2:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 80074b4:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 80074b8:	bf28      	it	cs
 80074ba:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 80074be:	b292      	uxth	r2, r2
 80074c0:	4413      	add	r3, r2
 80074c2:	68fa      	ldr	r2, [r7, #12]
 80074c4:	1ad3      	subs	r3, r2, r3
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	db08      	blt.n	80074dc <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074d6:	68fa      	ldr	r2, [r7, #12]
 80074d8:	1ad3      	subs	r3, r2, r3
 80074da:	e020      	b.n	800751e <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074e4:	1ad3      	subs	r3, r2, r3
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	dd03      	ble.n	80074f2 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	2200      	movs	r2, #0
 80074ee:	855a      	strh	r2, [r3, #42]	; 0x2a
 80074f0:	e014      	b.n	800751c <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074fa:	1ad3      	subs	r3, r2, r3
 80074fc:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 80074fe:	68bb      	ldr	r3, [r7, #8]
 8007500:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007504:	d306      	bcc.n	8007514 <tcp_update_rcv_ann_wnd+0x90>
 8007506:	4b08      	ldr	r3, [pc, #32]	; (8007528 <tcp_update_rcv_ann_wnd+0xa4>)
 8007508:	f240 32b6 	movw	r2, #950	; 0x3b6
 800750c:	4909      	ldr	r1, [pc, #36]	; (8007534 <tcp_update_rcv_ann_wnd+0xb0>)
 800750e:	4808      	ldr	r0, [pc, #32]	; (8007530 <tcp_update_rcv_ann_wnd+0xac>)
 8007510:	f007 fa14 	bl	800e93c <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8007514:	68bb      	ldr	r3, [r7, #8]
 8007516:	b29a      	uxth	r2, r3
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800751c:	2300      	movs	r3, #0
  }
}
 800751e:	4618      	mov	r0, r3
 8007520:	3710      	adds	r7, #16
 8007522:	46bd      	mov	sp, r7
 8007524:	bd80      	pop	{r7, pc}
 8007526:	bf00      	nop
 8007528:	08010290 	.word	0x08010290
 800752c:	080104ec 	.word	0x080104ec
 8007530:	080102d4 	.word	0x080102d4
 8007534:	08010510 	.word	0x08010510

08007538 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8007538:	b580      	push	{r7, lr}
 800753a:	b084      	sub	sp, #16
 800753c:	af00      	add	r7, sp, #0
 800753e:	6078      	str	r0, [r7, #4]
 8007540:	460b      	mov	r3, r1
 8007542:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	2b00      	cmp	r3, #0
 8007548:	d107      	bne.n	800755a <tcp_recved+0x22>
 800754a:	4b1f      	ldr	r3, [pc, #124]	; (80075c8 <tcp_recved+0x90>)
 800754c:	f240 32cf 	movw	r2, #975	; 0x3cf
 8007550:	491e      	ldr	r1, [pc, #120]	; (80075cc <tcp_recved+0x94>)
 8007552:	481f      	ldr	r0, [pc, #124]	; (80075d0 <tcp_recved+0x98>)
 8007554:	f007 f9f2 	bl	800e93c <iprintf>
 8007558:	e032      	b.n	80075c0 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	7d1b      	ldrb	r3, [r3, #20]
 800755e:	2b01      	cmp	r3, #1
 8007560:	d106      	bne.n	8007570 <tcp_recved+0x38>
 8007562:	4b19      	ldr	r3, [pc, #100]	; (80075c8 <tcp_recved+0x90>)
 8007564:	f240 32d3 	movw	r2, #979	; 0x3d3
 8007568:	491a      	ldr	r1, [pc, #104]	; (80075d4 <tcp_recved+0x9c>)
 800756a:	4819      	ldr	r0, [pc, #100]	; (80075d0 <tcp_recved+0x98>)
 800756c:	f007 f9e6 	bl	800e93c <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8007574:	887b      	ldrh	r3, [r7, #2]
 8007576:	4413      	add	r3, r2
 8007578:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800757a:	89fb      	ldrh	r3, [r7, #14]
 800757c:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8007580:	d804      	bhi.n	800758c <tcp_recved+0x54>
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007586:	89fa      	ldrh	r2, [r7, #14]
 8007588:	429a      	cmp	r2, r3
 800758a:	d204      	bcs.n	8007596 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8007592:	851a      	strh	r2, [r3, #40]	; 0x28
 8007594:	e002      	b.n	800759c <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	89fa      	ldrh	r2, [r7, #14]
 800759a:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800759c:	6878      	ldr	r0, [r7, #4]
 800759e:	f7ff ff71 	bl	8007484 <tcp_update_rcv_ann_wnd>
 80075a2:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 80075a4:	68bb      	ldr	r3, [r7, #8]
 80075a6:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 80075aa:	d309      	bcc.n	80075c0 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	8b5b      	ldrh	r3, [r3, #26]
 80075b0:	f043 0302 	orr.w	r3, r3, #2
 80075b4:	b29a      	uxth	r2, r3
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80075ba:	6878      	ldr	r0, [r7, #4]
 80075bc:	f003 fe38 	bl	800b230 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 80075c0:	3710      	adds	r7, #16
 80075c2:	46bd      	mov	sp, r7
 80075c4:	bd80      	pop	{r7, pc}
 80075c6:	bf00      	nop
 80075c8:	08010290 	.word	0x08010290
 80075cc:	0801052c 	.word	0x0801052c
 80075d0:	080102d4 	.word	0x080102d4
 80075d4:	08010544 	.word	0x08010544

080075d8 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 80075d8:	b5b0      	push	{r4, r5, r7, lr}
 80075da:	b090      	sub	sp, #64	; 0x40
 80075dc:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 80075de:	2300      	movs	r3, #0
 80075e0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 80075e4:	4b94      	ldr	r3, [pc, #592]	; (8007838 <tcp_slowtmr+0x260>)
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	3301      	adds	r3, #1
 80075ea:	4a93      	ldr	r2, [pc, #588]	; (8007838 <tcp_slowtmr+0x260>)
 80075ec:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 80075ee:	4b93      	ldr	r3, [pc, #588]	; (800783c <tcp_slowtmr+0x264>)
 80075f0:	781b      	ldrb	r3, [r3, #0]
 80075f2:	3301      	adds	r3, #1
 80075f4:	b2da      	uxtb	r2, r3
 80075f6:	4b91      	ldr	r3, [pc, #580]	; (800783c <tcp_slowtmr+0x264>)
 80075f8:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 80075fa:	2300      	movs	r3, #0
 80075fc:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 80075fe:	4b90      	ldr	r3, [pc, #576]	; (8007840 <tcp_slowtmr+0x268>)
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8007604:	e29d      	b.n	8007b42 <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8007606:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007608:	7d1b      	ldrb	r3, [r3, #20]
 800760a:	2b00      	cmp	r3, #0
 800760c:	d106      	bne.n	800761c <tcp_slowtmr+0x44>
 800760e:	4b8d      	ldr	r3, [pc, #564]	; (8007844 <tcp_slowtmr+0x26c>)
 8007610:	f240 42be 	movw	r2, #1214	; 0x4be
 8007614:	498c      	ldr	r1, [pc, #560]	; (8007848 <tcp_slowtmr+0x270>)
 8007616:	488d      	ldr	r0, [pc, #564]	; (800784c <tcp_slowtmr+0x274>)
 8007618:	f007 f990 	bl	800e93c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800761c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800761e:	7d1b      	ldrb	r3, [r3, #20]
 8007620:	2b01      	cmp	r3, #1
 8007622:	d106      	bne.n	8007632 <tcp_slowtmr+0x5a>
 8007624:	4b87      	ldr	r3, [pc, #540]	; (8007844 <tcp_slowtmr+0x26c>)
 8007626:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800762a:	4989      	ldr	r1, [pc, #548]	; (8007850 <tcp_slowtmr+0x278>)
 800762c:	4887      	ldr	r0, [pc, #540]	; (800784c <tcp_slowtmr+0x274>)
 800762e:	f007 f985 	bl	800e93c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8007632:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007634:	7d1b      	ldrb	r3, [r3, #20]
 8007636:	2b0a      	cmp	r3, #10
 8007638:	d106      	bne.n	8007648 <tcp_slowtmr+0x70>
 800763a:	4b82      	ldr	r3, [pc, #520]	; (8007844 <tcp_slowtmr+0x26c>)
 800763c:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8007640:	4984      	ldr	r1, [pc, #528]	; (8007854 <tcp_slowtmr+0x27c>)
 8007642:	4882      	ldr	r0, [pc, #520]	; (800784c <tcp_slowtmr+0x274>)
 8007644:	f007 f97a 	bl	800e93c <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8007648:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800764a:	7f9a      	ldrb	r2, [r3, #30]
 800764c:	4b7b      	ldr	r3, [pc, #492]	; (800783c <tcp_slowtmr+0x264>)
 800764e:	781b      	ldrb	r3, [r3, #0]
 8007650:	429a      	cmp	r2, r3
 8007652:	d105      	bne.n	8007660 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 8007654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007656:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8007658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800765a:	68db      	ldr	r3, [r3, #12]
 800765c:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800765e:	e270      	b.n	8007b42 <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 8007660:	4b76      	ldr	r3, [pc, #472]	; (800783c <tcp_slowtmr+0x264>)
 8007662:	781a      	ldrb	r2, [r3, #0]
 8007664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007666:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8007668:	2300      	movs	r3, #0
 800766a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800766e:	2300      	movs	r3, #0
 8007670:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8007674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007676:	7d1b      	ldrb	r3, [r3, #20]
 8007678:	2b02      	cmp	r3, #2
 800767a:	d10a      	bne.n	8007692 <tcp_slowtmr+0xba>
 800767c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800767e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007682:	2b05      	cmp	r3, #5
 8007684:	d905      	bls.n	8007692 <tcp_slowtmr+0xba>
      ++pcb_remove;
 8007686:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800768a:	3301      	adds	r3, #1
 800768c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007690:	e11e      	b.n	80078d0 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8007692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007694:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007698:	2b0b      	cmp	r3, #11
 800769a:	d905      	bls.n	80076a8 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800769c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80076a0:	3301      	adds	r3, #1
 80076a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80076a6:	e113      	b.n	80078d0 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 80076a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076aa:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d075      	beq.n	800779e <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 80076b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d006      	beq.n	80076c8 <tcp_slowtmr+0xf0>
 80076ba:	4b62      	ldr	r3, [pc, #392]	; (8007844 <tcp_slowtmr+0x26c>)
 80076bc:	f240 42d4 	movw	r2, #1236	; 0x4d4
 80076c0:	4965      	ldr	r1, [pc, #404]	; (8007858 <tcp_slowtmr+0x280>)
 80076c2:	4862      	ldr	r0, [pc, #392]	; (800784c <tcp_slowtmr+0x274>)
 80076c4:	f007 f93a 	bl	800e93c <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 80076c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d106      	bne.n	80076de <tcp_slowtmr+0x106>
 80076d0:	4b5c      	ldr	r3, [pc, #368]	; (8007844 <tcp_slowtmr+0x26c>)
 80076d2:	f240 42d5 	movw	r2, #1237	; 0x4d5
 80076d6:	4961      	ldr	r1, [pc, #388]	; (800785c <tcp_slowtmr+0x284>)
 80076d8:	485c      	ldr	r0, [pc, #368]	; (800784c <tcp_slowtmr+0x274>)
 80076da:	f007 f92f 	bl	800e93c <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 80076de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076e0:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80076e4:	2b0b      	cmp	r3, #11
 80076e6:	d905      	bls.n	80076f4 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 80076e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80076ec:	3301      	adds	r3, #1
 80076ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80076f2:	e0ed      	b.n	80078d0 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 80076f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076f6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80076fa:	3b01      	subs	r3, #1
 80076fc:	4a58      	ldr	r2, [pc, #352]	; (8007860 <tcp_slowtmr+0x288>)
 80076fe:	5cd3      	ldrb	r3, [r2, r3]
 8007700:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8007702:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007704:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8007708:	7c7a      	ldrb	r2, [r7, #17]
 800770a:	429a      	cmp	r2, r3
 800770c:	d907      	bls.n	800771e <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800770e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007710:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8007714:	3301      	adds	r3, #1
 8007716:	b2da      	uxtb	r2, r3
 8007718:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800771a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800771e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007720:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8007724:	7c7a      	ldrb	r2, [r7, #17]
 8007726:	429a      	cmp	r2, r3
 8007728:	f200 80d2 	bhi.w	80078d0 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800772c:	2301      	movs	r3, #1
 800772e:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8007730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007732:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007736:	2b00      	cmp	r3, #0
 8007738:	d108      	bne.n	800774c <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800773a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800773c:	f004 fc32 	bl	800bfa4 <tcp_zero_window_probe>
 8007740:	4603      	mov	r3, r0
 8007742:	2b00      	cmp	r3, #0
 8007744:	d014      	beq.n	8007770 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 8007746:	2300      	movs	r3, #0
 8007748:	623b      	str	r3, [r7, #32]
 800774a:	e011      	b.n	8007770 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800774c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800774e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007752:	4619      	mov	r1, r3
 8007754:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007756:	f003 fae5 	bl	800ad24 <tcp_split_unsent_seg>
 800775a:	4603      	mov	r3, r0
 800775c:	2b00      	cmp	r3, #0
 800775e:	d107      	bne.n	8007770 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 8007760:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007762:	f003 fd65 	bl	800b230 <tcp_output>
 8007766:	4603      	mov	r3, r0
 8007768:	2b00      	cmp	r3, #0
 800776a:	d101      	bne.n	8007770 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800776c:	2300      	movs	r3, #0
 800776e:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8007770:	6a3b      	ldr	r3, [r7, #32]
 8007772:	2b00      	cmp	r3, #0
 8007774:	f000 80ac 	beq.w	80078d0 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 8007778:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800777a:	2200      	movs	r2, #0
 800777c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8007780:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007782:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8007786:	2b06      	cmp	r3, #6
 8007788:	f200 80a2 	bhi.w	80078d0 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800778c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800778e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8007792:	3301      	adds	r3, #1
 8007794:	b2da      	uxtb	r2, r3
 8007796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007798:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800779c:	e098      	b.n	80078d0 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800779e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077a0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	db0f      	blt.n	80077c8 <tcp_slowtmr+0x1f0>
 80077a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077aa:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80077ae:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80077b2:	4293      	cmp	r3, r2
 80077b4:	d008      	beq.n	80077c8 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 80077b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077b8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80077bc:	b29b      	uxth	r3, r3
 80077be:	3301      	adds	r3, #1
 80077c0:	b29b      	uxth	r3, r3
 80077c2:	b21a      	sxth	r2, r3
 80077c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077c6:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 80077c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077ca:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 80077ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077d0:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 80077d4:	429a      	cmp	r2, r3
 80077d6:	db7b      	blt.n	80078d0 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 80077d8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80077da:	f004 f821 	bl	800b820 <tcp_rexmit_rto_prepare>
 80077de:	4603      	mov	r3, r0
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d007      	beq.n	80077f4 <tcp_slowtmr+0x21c>
 80077e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d171      	bne.n	80078d0 <tcp_slowtmr+0x2f8>
 80077ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d06d      	beq.n	80078d0 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 80077f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077f6:	7d1b      	ldrb	r3, [r3, #20]
 80077f8:	2b02      	cmp	r3, #2
 80077fa:	d03a      	beq.n	8007872 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 80077fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077fe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007802:	2b0c      	cmp	r3, #12
 8007804:	bf28      	it	cs
 8007806:	230c      	movcs	r3, #12
 8007808:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800780a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800780c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8007810:	10db      	asrs	r3, r3, #3
 8007812:	b21b      	sxth	r3, r3
 8007814:	461a      	mov	r2, r3
 8007816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007818:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800781c:	4413      	add	r3, r2
 800781e:	7efa      	ldrb	r2, [r7, #27]
 8007820:	4910      	ldr	r1, [pc, #64]	; (8007864 <tcp_slowtmr+0x28c>)
 8007822:	5c8a      	ldrb	r2, [r1, r2]
 8007824:	4093      	lsls	r3, r2
 8007826:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8007828:	697b      	ldr	r3, [r7, #20]
 800782a:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800782e:	4293      	cmp	r3, r2
 8007830:	dc1a      	bgt.n	8007868 <tcp_slowtmr+0x290>
 8007832:	697b      	ldr	r3, [r7, #20]
 8007834:	b21a      	sxth	r2, r3
 8007836:	e019      	b.n	800786c <tcp_slowtmr+0x294>
 8007838:	20008ae4 	.word	0x20008ae4
 800783c:	200000c2 	.word	0x200000c2
 8007840:	20008ae0 	.word	0x20008ae0
 8007844:	08010290 	.word	0x08010290
 8007848:	080105d4 	.word	0x080105d4
 800784c:	080102d4 	.word	0x080102d4
 8007850:	08010600 	.word	0x08010600
 8007854:	0801062c 	.word	0x0801062c
 8007858:	0801065c 	.word	0x0801065c
 800785c:	08010690 	.word	0x08010690
 8007860:	08011ee8 	.word	0x08011ee8
 8007864:	08011ed8 	.word	0x08011ed8
 8007868:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800786c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800786e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 8007872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007874:	2200      	movs	r2, #0
 8007876:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8007878:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800787a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800787e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007880:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8007884:	4293      	cmp	r3, r2
 8007886:	bf28      	it	cs
 8007888:	4613      	movcs	r3, r2
 800788a:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800788c:	8a7b      	ldrh	r3, [r7, #18]
 800788e:	085b      	lsrs	r3, r3, #1
 8007890:	b29a      	uxth	r2, r3
 8007892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007894:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8007898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800789a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800789e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078a0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80078a2:	005b      	lsls	r3, r3, #1
 80078a4:	b29b      	uxth	r3, r3
 80078a6:	429a      	cmp	r2, r3
 80078a8:	d206      	bcs.n	80078b8 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 80078aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078ac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80078ae:	005b      	lsls	r3, r3, #1
 80078b0:	b29a      	uxth	r2, r3
 80078b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078b4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 80078b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078ba:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 80078bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078be:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 80078c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078c4:	2200      	movs	r2, #0
 80078c6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 80078ca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80078cc:	f004 f818 	bl	800b900 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 80078d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078d2:	7d1b      	ldrb	r3, [r3, #20]
 80078d4:	2b06      	cmp	r3, #6
 80078d6:	d111      	bne.n	80078fc <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 80078d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078da:	8b5b      	ldrh	r3, [r3, #26]
 80078dc:	f003 0310 	and.w	r3, r3, #16
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d00b      	beq.n	80078fc <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 80078e4:	4b9c      	ldr	r3, [pc, #624]	; (8007b58 <tcp_slowtmr+0x580>)
 80078e6:	681a      	ldr	r2, [r3, #0]
 80078e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078ea:	6a1b      	ldr	r3, [r3, #32]
 80078ec:	1ad3      	subs	r3, r2, r3
 80078ee:	2b28      	cmp	r3, #40	; 0x28
 80078f0:	d904      	bls.n	80078fc <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 80078f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80078f6:	3301      	adds	r3, #1
 80078f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80078fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078fe:	7a5b      	ldrb	r3, [r3, #9]
 8007900:	f003 0308 	and.w	r3, r3, #8
 8007904:	2b00      	cmp	r3, #0
 8007906:	d04a      	beq.n	800799e <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 8007908:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800790a:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800790c:	2b04      	cmp	r3, #4
 800790e:	d003      	beq.n	8007918 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8007910:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007912:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8007914:	2b07      	cmp	r3, #7
 8007916:	d142      	bne.n	800799e <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007918:	4b8f      	ldr	r3, [pc, #572]	; (8007b58 <tcp_slowtmr+0x580>)
 800791a:	681a      	ldr	r2, [r3, #0]
 800791c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800791e:	6a1b      	ldr	r3, [r3, #32]
 8007920:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8007922:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007924:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8007928:	4b8c      	ldr	r3, [pc, #560]	; (8007b5c <tcp_slowtmr+0x584>)
 800792a:	440b      	add	r3, r1
 800792c:	498c      	ldr	r1, [pc, #560]	; (8007b60 <tcp_slowtmr+0x588>)
 800792e:	fba1 1303 	umull	r1, r3, r1, r3
 8007932:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007934:	429a      	cmp	r2, r3
 8007936:	d90a      	bls.n	800794e <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8007938:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800793c:	3301      	adds	r3, #1
 800793e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 8007942:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007946:	3301      	adds	r3, #1
 8007948:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800794c:	e027      	b.n	800799e <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800794e:	4b82      	ldr	r3, [pc, #520]	; (8007b58 <tcp_slowtmr+0x580>)
 8007950:	681a      	ldr	r2, [r3, #0]
 8007952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007954:	6a1b      	ldr	r3, [r3, #32]
 8007956:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8007958:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800795a:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800795e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007960:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8007964:	4618      	mov	r0, r3
 8007966:	4b7f      	ldr	r3, [pc, #508]	; (8007b64 <tcp_slowtmr+0x58c>)
 8007968:	fb03 f300 	mul.w	r3, r3, r0
 800796c:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800796e:	497c      	ldr	r1, [pc, #496]	; (8007b60 <tcp_slowtmr+0x588>)
 8007970:	fba1 1303 	umull	r1, r3, r1, r3
 8007974:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007976:	429a      	cmp	r2, r3
 8007978:	d911      	bls.n	800799e <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 800797a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800797c:	f004 fad2 	bl	800bf24 <tcp_keepalive>
 8007980:	4603      	mov	r3, r0
 8007982:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 8007986:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800798a:	2b00      	cmp	r3, #0
 800798c:	d107      	bne.n	800799e <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 800798e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007990:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8007994:	3301      	adds	r3, #1
 8007996:	b2da      	uxtb	r2, r3
 8007998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800799a:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800799e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d011      	beq.n	80079ca <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 80079a6:	4b6c      	ldr	r3, [pc, #432]	; (8007b58 <tcp_slowtmr+0x580>)
 80079a8:	681a      	ldr	r2, [r3, #0]
 80079aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079ac:	6a1b      	ldr	r3, [r3, #32]
 80079ae:	1ad2      	subs	r2, r2, r3
 80079b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079b2:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 80079b6:	4619      	mov	r1, r3
 80079b8:	460b      	mov	r3, r1
 80079ba:	005b      	lsls	r3, r3, #1
 80079bc:	440b      	add	r3, r1
 80079be:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 80079c0:	429a      	cmp	r2, r3
 80079c2:	d302      	bcc.n	80079ca <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 80079c4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80079c6:	f000 fdd9 	bl	800857c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 80079ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079cc:	7d1b      	ldrb	r3, [r3, #20]
 80079ce:	2b03      	cmp	r3, #3
 80079d0:	d10b      	bne.n	80079ea <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80079d2:	4b61      	ldr	r3, [pc, #388]	; (8007b58 <tcp_slowtmr+0x580>)
 80079d4:	681a      	ldr	r2, [r3, #0]
 80079d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079d8:	6a1b      	ldr	r3, [r3, #32]
 80079da:	1ad3      	subs	r3, r2, r3
 80079dc:	2b28      	cmp	r3, #40	; 0x28
 80079de:	d904      	bls.n	80079ea <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 80079e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80079e4:	3301      	adds	r3, #1
 80079e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 80079ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079ec:	7d1b      	ldrb	r3, [r3, #20]
 80079ee:	2b09      	cmp	r3, #9
 80079f0:	d10b      	bne.n	8007a0a <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80079f2:	4b59      	ldr	r3, [pc, #356]	; (8007b58 <tcp_slowtmr+0x580>)
 80079f4:	681a      	ldr	r2, [r3, #0]
 80079f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079f8:	6a1b      	ldr	r3, [r3, #32]
 80079fa:	1ad3      	subs	r3, r2, r3
 80079fc:	2bf0      	cmp	r3, #240	; 0xf0
 80079fe:	d904      	bls.n	8007a0a <tcp_slowtmr+0x432>
        ++pcb_remove;
 8007a00:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007a04:	3301      	adds	r3, #1
 8007a06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8007a0a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d060      	beq.n	8007ad4 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 8007a12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a18:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8007a1a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007a1c:	f000 fbfa 	bl	8008214 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8007a20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d010      	beq.n	8007a48 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8007a26:	4b50      	ldr	r3, [pc, #320]	; (8007b68 <tcp_slowtmr+0x590>)
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007a2c:	429a      	cmp	r2, r3
 8007a2e:	d106      	bne.n	8007a3e <tcp_slowtmr+0x466>
 8007a30:	4b4e      	ldr	r3, [pc, #312]	; (8007b6c <tcp_slowtmr+0x594>)
 8007a32:	f240 526d 	movw	r2, #1389	; 0x56d
 8007a36:	494e      	ldr	r1, [pc, #312]	; (8007b70 <tcp_slowtmr+0x598>)
 8007a38:	484e      	ldr	r0, [pc, #312]	; (8007b74 <tcp_slowtmr+0x59c>)
 8007a3a:	f006 ff7f 	bl	800e93c <iprintf>
        prev->next = pcb->next;
 8007a3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a40:	68da      	ldr	r2, [r3, #12]
 8007a42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a44:	60da      	str	r2, [r3, #12]
 8007a46:	e00f      	b.n	8007a68 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8007a48:	4b47      	ldr	r3, [pc, #284]	; (8007b68 <tcp_slowtmr+0x590>)
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007a4e:	429a      	cmp	r2, r3
 8007a50:	d006      	beq.n	8007a60 <tcp_slowtmr+0x488>
 8007a52:	4b46      	ldr	r3, [pc, #280]	; (8007b6c <tcp_slowtmr+0x594>)
 8007a54:	f240 5271 	movw	r2, #1393	; 0x571
 8007a58:	4947      	ldr	r1, [pc, #284]	; (8007b78 <tcp_slowtmr+0x5a0>)
 8007a5a:	4846      	ldr	r0, [pc, #280]	; (8007b74 <tcp_slowtmr+0x59c>)
 8007a5c:	f006 ff6e 	bl	800e93c <iprintf>
        tcp_active_pcbs = pcb->next;
 8007a60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a62:	68db      	ldr	r3, [r3, #12]
 8007a64:	4a40      	ldr	r2, [pc, #256]	; (8007b68 <tcp_slowtmr+0x590>)
 8007a66:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8007a68:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d013      	beq.n	8007a98 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8007a70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a72:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8007a74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a76:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8007a78:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 8007a7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a7c:	3304      	adds	r3, #4
 8007a7e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007a80:	8ad2      	ldrh	r2, [r2, #22]
 8007a82:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007a84:	8b09      	ldrh	r1, [r1, #24]
 8007a86:	9102      	str	r1, [sp, #8]
 8007a88:	9201      	str	r2, [sp, #4]
 8007a8a:	9300      	str	r3, [sp, #0]
 8007a8c:	462b      	mov	r3, r5
 8007a8e:	4622      	mov	r2, r4
 8007a90:	4601      	mov	r1, r0
 8007a92:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007a94:	f004 f992 	bl	800bdbc <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8007a98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a9a:	691b      	ldr	r3, [r3, #16]
 8007a9c:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8007a9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007aa0:	7d1b      	ldrb	r3, [r3, #20]
 8007aa2:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8007aa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007aa6:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8007aa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007aaa:	68db      	ldr	r3, [r3, #12]
 8007aac:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8007aae:	6838      	ldr	r0, [r7, #0]
 8007ab0:	f7ff f9fc 	bl	8006eac <tcp_free>

      tcp_active_pcbs_changed = 0;
 8007ab4:	4b31      	ldr	r3, [pc, #196]	; (8007b7c <tcp_slowtmr+0x5a4>)
 8007ab6:	2200      	movs	r2, #0
 8007ab8:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d004      	beq.n	8007aca <tcp_slowtmr+0x4f2>
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	f06f 010c 	mvn.w	r1, #12
 8007ac6:	68b8      	ldr	r0, [r7, #8]
 8007ac8:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8007aca:	4b2c      	ldr	r3, [pc, #176]	; (8007b7c <tcp_slowtmr+0x5a4>)
 8007acc:	781b      	ldrb	r3, [r3, #0]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d037      	beq.n	8007b42 <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 8007ad2:	e592      	b.n	80075fa <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8007ad4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ad6:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8007ad8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ada:	68db      	ldr	r3, [r3, #12]
 8007adc:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8007ade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ae0:	7f1b      	ldrb	r3, [r3, #28]
 8007ae2:	3301      	adds	r3, #1
 8007ae4:	b2da      	uxtb	r2, r3
 8007ae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ae8:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8007aea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007aec:	7f1a      	ldrb	r2, [r3, #28]
 8007aee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007af0:	7f5b      	ldrb	r3, [r3, #29]
 8007af2:	429a      	cmp	r2, r3
 8007af4:	d325      	bcc.n	8007b42 <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 8007af6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007af8:	2200      	movs	r2, #0
 8007afa:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8007afc:	4b1f      	ldr	r3, [pc, #124]	; (8007b7c <tcp_slowtmr+0x5a4>)
 8007afe:	2200      	movs	r2, #0
 8007b00:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8007b02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b04:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d00b      	beq.n	8007b24 <tcp_slowtmr+0x54c>
 8007b0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b0e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007b12:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007b14:	6912      	ldr	r2, [r2, #16]
 8007b16:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007b18:	4610      	mov	r0, r2
 8007b1a:	4798      	blx	r3
 8007b1c:	4603      	mov	r3, r0
 8007b1e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8007b22:	e002      	b.n	8007b2a <tcp_slowtmr+0x552>
 8007b24:	2300      	movs	r3, #0
 8007b26:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 8007b2a:	4b14      	ldr	r3, [pc, #80]	; (8007b7c <tcp_slowtmr+0x5a4>)
 8007b2c:	781b      	ldrb	r3, [r3, #0]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d000      	beq.n	8007b34 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 8007b32:	e562      	b.n	80075fa <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8007b34:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d102      	bne.n	8007b42 <tcp_slowtmr+0x56a>
          tcp_output(prev);
 8007b3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007b3e:	f003 fb77 	bl	800b230 <tcp_output>
  while (pcb != NULL) {
 8007b42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	f47f ad5e 	bne.w	8007606 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8007b4a:	2300      	movs	r3, #0
 8007b4c:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 8007b4e:	4b0c      	ldr	r3, [pc, #48]	; (8007b80 <tcp_slowtmr+0x5a8>)
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8007b54:	e069      	b.n	8007c2a <tcp_slowtmr+0x652>
 8007b56:	bf00      	nop
 8007b58:	20008ae4 	.word	0x20008ae4
 8007b5c:	000a4cb8 	.word	0x000a4cb8
 8007b60:	10624dd3 	.word	0x10624dd3
 8007b64:	000124f8 	.word	0x000124f8
 8007b68:	20008ae0 	.word	0x20008ae0
 8007b6c:	08010290 	.word	0x08010290
 8007b70:	080106c8 	.word	0x080106c8
 8007b74:	080102d4 	.word	0x080102d4
 8007b78:	080106f4 	.word	0x080106f4
 8007b7c:	20008adc 	.word	0x20008adc
 8007b80:	20008af0 	.word	0x20008af0
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8007b84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b86:	7d1b      	ldrb	r3, [r3, #20]
 8007b88:	2b0a      	cmp	r3, #10
 8007b8a:	d006      	beq.n	8007b9a <tcp_slowtmr+0x5c2>
 8007b8c:	4b2a      	ldr	r3, [pc, #168]	; (8007c38 <tcp_slowtmr+0x660>)
 8007b8e:	f240 52a1 	movw	r2, #1441	; 0x5a1
 8007b92:	492a      	ldr	r1, [pc, #168]	; (8007c3c <tcp_slowtmr+0x664>)
 8007b94:	482a      	ldr	r0, [pc, #168]	; (8007c40 <tcp_slowtmr+0x668>)
 8007b96:	f006 fed1 	bl	800e93c <iprintf>
    pcb_remove = 0;
 8007b9a:	2300      	movs	r3, #0
 8007b9c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8007ba0:	4b28      	ldr	r3, [pc, #160]	; (8007c44 <tcp_slowtmr+0x66c>)
 8007ba2:	681a      	ldr	r2, [r3, #0]
 8007ba4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ba6:	6a1b      	ldr	r3, [r3, #32]
 8007ba8:	1ad3      	subs	r3, r2, r3
 8007baa:	2bf0      	cmp	r3, #240	; 0xf0
 8007bac:	d904      	bls.n	8007bb8 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 8007bae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007bb2:	3301      	adds	r3, #1
 8007bb4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8007bb8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d02f      	beq.n	8007c20 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8007bc0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007bc2:	f000 fb27 	bl	8008214 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8007bc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d010      	beq.n	8007bee <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8007bcc:	4b1e      	ldr	r3, [pc, #120]	; (8007c48 <tcp_slowtmr+0x670>)
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007bd2:	429a      	cmp	r2, r3
 8007bd4:	d106      	bne.n	8007be4 <tcp_slowtmr+0x60c>
 8007bd6:	4b18      	ldr	r3, [pc, #96]	; (8007c38 <tcp_slowtmr+0x660>)
 8007bd8:	f240 52af 	movw	r2, #1455	; 0x5af
 8007bdc:	491b      	ldr	r1, [pc, #108]	; (8007c4c <tcp_slowtmr+0x674>)
 8007bde:	4818      	ldr	r0, [pc, #96]	; (8007c40 <tcp_slowtmr+0x668>)
 8007be0:	f006 feac 	bl	800e93c <iprintf>
        prev->next = pcb->next;
 8007be4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007be6:	68da      	ldr	r2, [r3, #12]
 8007be8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bea:	60da      	str	r2, [r3, #12]
 8007bec:	e00f      	b.n	8007c0e <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8007bee:	4b16      	ldr	r3, [pc, #88]	; (8007c48 <tcp_slowtmr+0x670>)
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007bf4:	429a      	cmp	r2, r3
 8007bf6:	d006      	beq.n	8007c06 <tcp_slowtmr+0x62e>
 8007bf8:	4b0f      	ldr	r3, [pc, #60]	; (8007c38 <tcp_slowtmr+0x660>)
 8007bfa:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8007bfe:	4914      	ldr	r1, [pc, #80]	; (8007c50 <tcp_slowtmr+0x678>)
 8007c00:	480f      	ldr	r0, [pc, #60]	; (8007c40 <tcp_slowtmr+0x668>)
 8007c02:	f006 fe9b 	bl	800e93c <iprintf>
        tcp_tw_pcbs = pcb->next;
 8007c06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c08:	68db      	ldr	r3, [r3, #12]
 8007c0a:	4a0f      	ldr	r2, [pc, #60]	; (8007c48 <tcp_slowtmr+0x670>)
 8007c0c:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8007c0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c10:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8007c12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c14:	68db      	ldr	r3, [r3, #12]
 8007c16:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8007c18:	69f8      	ldr	r0, [r7, #28]
 8007c1a:	f7ff f947 	bl	8006eac <tcp_free>
 8007c1e:	e004      	b.n	8007c2a <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 8007c20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c22:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8007c24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c26:	68db      	ldr	r3, [r3, #12]
 8007c28:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8007c2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d1a9      	bne.n	8007b84 <tcp_slowtmr+0x5ac>
    }
  }
}
 8007c30:	bf00      	nop
 8007c32:	3730      	adds	r7, #48	; 0x30
 8007c34:	46bd      	mov	sp, r7
 8007c36:	bdb0      	pop	{r4, r5, r7, pc}
 8007c38:	08010290 	.word	0x08010290
 8007c3c:	08010720 	.word	0x08010720
 8007c40:	080102d4 	.word	0x080102d4
 8007c44:	20008ae4 	.word	0x20008ae4
 8007c48:	20008af0 	.word	0x20008af0
 8007c4c:	08010750 	.word	0x08010750
 8007c50:	08010778 	.word	0x08010778

08007c54 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8007c54:	b580      	push	{r7, lr}
 8007c56:	b082      	sub	sp, #8
 8007c58:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8007c5a:	4b2d      	ldr	r3, [pc, #180]	; (8007d10 <tcp_fasttmr+0xbc>)
 8007c5c:	781b      	ldrb	r3, [r3, #0]
 8007c5e:	3301      	adds	r3, #1
 8007c60:	b2da      	uxtb	r2, r3
 8007c62:	4b2b      	ldr	r3, [pc, #172]	; (8007d10 <tcp_fasttmr+0xbc>)
 8007c64:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8007c66:	4b2b      	ldr	r3, [pc, #172]	; (8007d14 <tcp_fasttmr+0xc0>)
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8007c6c:	e048      	b.n	8007d00 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	7f9a      	ldrb	r2, [r3, #30]
 8007c72:	4b27      	ldr	r3, [pc, #156]	; (8007d10 <tcp_fasttmr+0xbc>)
 8007c74:	781b      	ldrb	r3, [r3, #0]
 8007c76:	429a      	cmp	r2, r3
 8007c78:	d03f      	beq.n	8007cfa <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8007c7a:	4b25      	ldr	r3, [pc, #148]	; (8007d10 <tcp_fasttmr+0xbc>)
 8007c7c:	781a      	ldrb	r2, [r3, #0]
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	8b5b      	ldrh	r3, [r3, #26]
 8007c86:	f003 0301 	and.w	r3, r3, #1
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d010      	beq.n	8007cb0 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	8b5b      	ldrh	r3, [r3, #26]
 8007c92:	f043 0302 	orr.w	r3, r3, #2
 8007c96:	b29a      	uxth	r2, r3
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8007c9c:	6878      	ldr	r0, [r7, #4]
 8007c9e:	f003 fac7 	bl	800b230 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	8b5b      	ldrh	r3, [r3, #26]
 8007ca6:	f023 0303 	bic.w	r3, r3, #3
 8007caa:	b29a      	uxth	r2, r3
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	8b5b      	ldrh	r3, [r3, #26]
 8007cb4:	f003 0308 	and.w	r3, r3, #8
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d009      	beq.n	8007cd0 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	8b5b      	ldrh	r3, [r3, #26]
 8007cc0:	f023 0308 	bic.w	r3, r3, #8
 8007cc4:	b29a      	uxth	r2, r3
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8007cca:	6878      	ldr	r0, [r7, #4]
 8007ccc:	f7ff fa7e 	bl	80071cc <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	68db      	ldr	r3, [r3, #12]
 8007cd4:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d00a      	beq.n	8007cf4 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8007cde:	4b0e      	ldr	r3, [pc, #56]	; (8007d18 <tcp_fasttmr+0xc4>)
 8007ce0:	2200      	movs	r2, #0
 8007ce2:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8007ce4:	6878      	ldr	r0, [r7, #4]
 8007ce6:	f000 f819 	bl	8007d1c <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8007cea:	4b0b      	ldr	r3, [pc, #44]	; (8007d18 <tcp_fasttmr+0xc4>)
 8007cec:	781b      	ldrb	r3, [r3, #0]
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d000      	beq.n	8007cf4 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8007cf2:	e7b8      	b.n	8007c66 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8007cf4:	683b      	ldr	r3, [r7, #0]
 8007cf6:	607b      	str	r3, [r7, #4]
 8007cf8:	e002      	b.n	8007d00 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	68db      	ldr	r3, [r3, #12]
 8007cfe:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d1b3      	bne.n	8007c6e <tcp_fasttmr+0x1a>
    }
  }
}
 8007d06:	bf00      	nop
 8007d08:	3708      	adds	r7, #8
 8007d0a:	46bd      	mov	sp, r7
 8007d0c:	bd80      	pop	{r7, pc}
 8007d0e:	bf00      	nop
 8007d10:	200000c2 	.word	0x200000c2
 8007d14:	20008ae0 	.word	0x20008ae0
 8007d18:	20008adc 	.word	0x20008adc

08007d1c <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8007d1c:	b590      	push	{r4, r7, lr}
 8007d1e:	b085      	sub	sp, #20
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d109      	bne.n	8007d3e <tcp_process_refused_data+0x22>
 8007d2a:	4b37      	ldr	r3, [pc, #220]	; (8007e08 <tcp_process_refused_data+0xec>)
 8007d2c:	f240 6209 	movw	r2, #1545	; 0x609
 8007d30:	4936      	ldr	r1, [pc, #216]	; (8007e0c <tcp_process_refused_data+0xf0>)
 8007d32:	4837      	ldr	r0, [pc, #220]	; (8007e10 <tcp_process_refused_data+0xf4>)
 8007d34:	f006 fe02 	bl	800e93c <iprintf>
 8007d38:	f06f 030f 	mvn.w	r3, #15
 8007d3c:	e060      	b.n	8007e00 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007d42:	7b5b      	ldrb	r3, [r3, #13]
 8007d44:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007d4a:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	2200      	movs	r2, #0
 8007d50:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d00b      	beq.n	8007d74 <tcp_process_refused_data+0x58>
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	6918      	ldr	r0, [r3, #16]
 8007d66:	2300      	movs	r3, #0
 8007d68:	68ba      	ldr	r2, [r7, #8]
 8007d6a:	6879      	ldr	r1, [r7, #4]
 8007d6c:	47a0      	blx	r4
 8007d6e:	4603      	mov	r3, r0
 8007d70:	73fb      	strb	r3, [r7, #15]
 8007d72:	e007      	b.n	8007d84 <tcp_process_refused_data+0x68>
 8007d74:	2300      	movs	r3, #0
 8007d76:	68ba      	ldr	r2, [r7, #8]
 8007d78:	6879      	ldr	r1, [r7, #4]
 8007d7a:	2000      	movs	r0, #0
 8007d7c:	f000 f8a2 	bl	8007ec4 <tcp_recv_null>
 8007d80:	4603      	mov	r3, r0
 8007d82:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8007d84:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d12a      	bne.n	8007de2 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8007d8c:	7bbb      	ldrb	r3, [r7, #14]
 8007d8e:	f003 0320 	and.w	r3, r3, #32
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d033      	beq.n	8007dfe <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d9a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8007d9e:	d005      	beq.n	8007dac <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007da4:	3301      	adds	r3, #1
 8007da6:	b29a      	uxth	r2, r3
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d00b      	beq.n	8007dce <tcp_process_refused_data+0xb2>
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	6918      	ldr	r0, [r3, #16]
 8007dc0:	2300      	movs	r3, #0
 8007dc2:	2200      	movs	r2, #0
 8007dc4:	6879      	ldr	r1, [r7, #4]
 8007dc6:	47a0      	blx	r4
 8007dc8:	4603      	mov	r3, r0
 8007dca:	73fb      	strb	r3, [r7, #15]
 8007dcc:	e001      	b.n	8007dd2 <tcp_process_refused_data+0xb6>
 8007dce:	2300      	movs	r3, #0
 8007dd0:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8007dd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007dd6:	f113 0f0d 	cmn.w	r3, #13
 8007dda:	d110      	bne.n	8007dfe <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8007ddc:	f06f 030c 	mvn.w	r3, #12
 8007de0:	e00e      	b.n	8007e00 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8007de2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007de6:	f113 0f0d 	cmn.w	r3, #13
 8007dea:	d102      	bne.n	8007df2 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8007dec:	f06f 030c 	mvn.w	r3, #12
 8007df0:	e006      	b.n	8007e00 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	68ba      	ldr	r2, [r7, #8]
 8007df6:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 8007df8:	f06f 0304 	mvn.w	r3, #4
 8007dfc:	e000      	b.n	8007e00 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8007dfe:	2300      	movs	r3, #0
}
 8007e00:	4618      	mov	r0, r3
 8007e02:	3714      	adds	r7, #20
 8007e04:	46bd      	mov	sp, r7
 8007e06:	bd90      	pop	{r4, r7, pc}
 8007e08:	08010290 	.word	0x08010290
 8007e0c:	080107a0 	.word	0x080107a0
 8007e10:	080102d4 	.word	0x080102d4

08007e14 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8007e14:	b580      	push	{r7, lr}
 8007e16:	b084      	sub	sp, #16
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8007e1c:	e007      	b.n	8007e2e <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8007e24:	6878      	ldr	r0, [r7, #4]
 8007e26:	f000 f809 	bl	8007e3c <tcp_seg_free>
    seg = next;
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d1f4      	bne.n	8007e1e <tcp_segs_free+0xa>
  }
}
 8007e34:	bf00      	nop
 8007e36:	3710      	adds	r7, #16
 8007e38:	46bd      	mov	sp, r7
 8007e3a:	bd80      	pop	{r7, pc}

08007e3c <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8007e3c:	b580      	push	{r7, lr}
 8007e3e:	b082      	sub	sp, #8
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d00c      	beq.n	8007e64 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	685b      	ldr	r3, [r3, #4]
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d004      	beq.n	8007e5c <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	685b      	ldr	r3, [r3, #4]
 8007e56:	4618      	mov	r0, r3
 8007e58:	f7fe fd88 	bl	800696c <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8007e5c:	6879      	ldr	r1, [r7, #4]
 8007e5e:	2002      	movs	r0, #2
 8007e60:	f7fd ff9a 	bl	8005d98 <memp_free>
  }
}
 8007e64:	bf00      	nop
 8007e66:	3708      	adds	r7, #8
 8007e68:	46bd      	mov	sp, r7
 8007e6a:	bd80      	pop	{r7, pc}

08007e6c <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8007e6c:	b580      	push	{r7, lr}
 8007e6e:	b084      	sub	sp, #16
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d106      	bne.n	8007e88 <tcp_seg_copy+0x1c>
 8007e7a:	4b0f      	ldr	r3, [pc, #60]	; (8007eb8 <tcp_seg_copy+0x4c>)
 8007e7c:	f240 6282 	movw	r2, #1666	; 0x682
 8007e80:	490e      	ldr	r1, [pc, #56]	; (8007ebc <tcp_seg_copy+0x50>)
 8007e82:	480f      	ldr	r0, [pc, #60]	; (8007ec0 <tcp_seg_copy+0x54>)
 8007e84:	f006 fd5a 	bl	800e93c <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8007e88:	2002      	movs	r0, #2
 8007e8a:	f7fd ff39 	bl	8005d00 <memp_malloc>
 8007e8e:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d101      	bne.n	8007e9a <tcp_seg_copy+0x2e>
    return NULL;
 8007e96:	2300      	movs	r3, #0
 8007e98:	e00a      	b.n	8007eb0 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8007e9a:	2210      	movs	r2, #16
 8007e9c:	6879      	ldr	r1, [r7, #4]
 8007e9e:	68f8      	ldr	r0, [r7, #12]
 8007ea0:	f006 fd39 	bl	800e916 <memcpy>
  pbuf_ref(cseg->p);
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	685b      	ldr	r3, [r3, #4]
 8007ea8:	4618      	mov	r0, r3
 8007eaa:	f7fe fdff 	bl	8006aac <pbuf_ref>
  return cseg;
 8007eae:	68fb      	ldr	r3, [r7, #12]
}
 8007eb0:	4618      	mov	r0, r3
 8007eb2:	3710      	adds	r7, #16
 8007eb4:	46bd      	mov	sp, r7
 8007eb6:	bd80      	pop	{r7, pc}
 8007eb8:	08010290 	.word	0x08010290
 8007ebc:	080107e4 	.word	0x080107e4
 8007ec0:	080102d4 	.word	0x080102d4

08007ec4 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8007ec4:	b580      	push	{r7, lr}
 8007ec6:	b084      	sub	sp, #16
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	60f8      	str	r0, [r7, #12]
 8007ecc:	60b9      	str	r1, [r7, #8]
 8007ece:	607a      	str	r2, [r7, #4]
 8007ed0:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8007ed2:	68bb      	ldr	r3, [r7, #8]
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d109      	bne.n	8007eec <tcp_recv_null+0x28>
 8007ed8:	4b12      	ldr	r3, [pc, #72]	; (8007f24 <tcp_recv_null+0x60>)
 8007eda:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8007ede:	4912      	ldr	r1, [pc, #72]	; (8007f28 <tcp_recv_null+0x64>)
 8007ee0:	4812      	ldr	r0, [pc, #72]	; (8007f2c <tcp_recv_null+0x68>)
 8007ee2:	f006 fd2b 	bl	800e93c <iprintf>
 8007ee6:	f06f 030f 	mvn.w	r3, #15
 8007eea:	e016      	b.n	8007f1a <tcp_recv_null+0x56>

  if (p != NULL) {
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d009      	beq.n	8007f06 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	891b      	ldrh	r3, [r3, #8]
 8007ef6:	4619      	mov	r1, r3
 8007ef8:	68b8      	ldr	r0, [r7, #8]
 8007efa:	f7ff fb1d 	bl	8007538 <tcp_recved>
    pbuf_free(p);
 8007efe:	6878      	ldr	r0, [r7, #4]
 8007f00:	f7fe fd34 	bl	800696c <pbuf_free>
 8007f04:	e008      	b.n	8007f18 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8007f06:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d104      	bne.n	8007f18 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8007f0e:	68b8      	ldr	r0, [r7, #8]
 8007f10:	f7ff f9c2 	bl	8007298 <tcp_close>
 8007f14:	4603      	mov	r3, r0
 8007f16:	e000      	b.n	8007f1a <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8007f18:	2300      	movs	r3, #0
}
 8007f1a:	4618      	mov	r0, r3
 8007f1c:	3710      	adds	r7, #16
 8007f1e:	46bd      	mov	sp, r7
 8007f20:	bd80      	pop	{r7, pc}
 8007f22:	bf00      	nop
 8007f24:	08010290 	.word	0x08010290
 8007f28:	08010800 	.word	0x08010800
 8007f2c:	080102d4 	.word	0x080102d4

08007f30 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8007f30:	b580      	push	{r7, lr}
 8007f32:	b086      	sub	sp, #24
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	4603      	mov	r3, r0
 8007f38:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8007f3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	db01      	blt.n	8007f46 <tcp_kill_prio+0x16>
 8007f42:	79fb      	ldrb	r3, [r7, #7]
 8007f44:	e000      	b.n	8007f48 <tcp_kill_prio+0x18>
 8007f46:	237f      	movs	r3, #127	; 0x7f
 8007f48:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8007f4a:	7afb      	ldrb	r3, [r7, #11]
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d034      	beq.n	8007fba <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8007f50:	7afb      	ldrb	r3, [r7, #11]
 8007f52:	3b01      	subs	r3, #1
 8007f54:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8007f56:	2300      	movs	r3, #0
 8007f58:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8007f5a:	2300      	movs	r3, #0
 8007f5c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007f5e:	4b19      	ldr	r3, [pc, #100]	; (8007fc4 <tcp_kill_prio+0x94>)
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	617b      	str	r3, [r7, #20]
 8007f64:	e01f      	b.n	8007fa6 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8007f66:	697b      	ldr	r3, [r7, #20]
 8007f68:	7d5b      	ldrb	r3, [r3, #21]
 8007f6a:	7afa      	ldrb	r2, [r7, #11]
 8007f6c:	429a      	cmp	r2, r3
 8007f6e:	d80c      	bhi.n	8007f8a <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8007f70:	697b      	ldr	r3, [r7, #20]
 8007f72:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8007f74:	7afa      	ldrb	r2, [r7, #11]
 8007f76:	429a      	cmp	r2, r3
 8007f78:	d112      	bne.n	8007fa0 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8007f7a:	4b13      	ldr	r3, [pc, #76]	; (8007fc8 <tcp_kill_prio+0x98>)
 8007f7c:	681a      	ldr	r2, [r3, #0]
 8007f7e:	697b      	ldr	r3, [r7, #20]
 8007f80:	6a1b      	ldr	r3, [r3, #32]
 8007f82:	1ad3      	subs	r3, r2, r3
 8007f84:	68fa      	ldr	r2, [r7, #12]
 8007f86:	429a      	cmp	r2, r3
 8007f88:	d80a      	bhi.n	8007fa0 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8007f8a:	4b0f      	ldr	r3, [pc, #60]	; (8007fc8 <tcp_kill_prio+0x98>)
 8007f8c:	681a      	ldr	r2, [r3, #0]
 8007f8e:	697b      	ldr	r3, [r7, #20]
 8007f90:	6a1b      	ldr	r3, [r3, #32]
 8007f92:	1ad3      	subs	r3, r2, r3
 8007f94:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8007f96:	697b      	ldr	r3, [r7, #20]
 8007f98:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8007f9a:	697b      	ldr	r3, [r7, #20]
 8007f9c:	7d5b      	ldrb	r3, [r3, #21]
 8007f9e:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007fa0:	697b      	ldr	r3, [r7, #20]
 8007fa2:	68db      	ldr	r3, [r3, #12]
 8007fa4:	617b      	str	r3, [r7, #20]
 8007fa6:	697b      	ldr	r3, [r7, #20]
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d1dc      	bne.n	8007f66 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8007fac:	693b      	ldr	r3, [r7, #16]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d004      	beq.n	8007fbc <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8007fb2:	6938      	ldr	r0, [r7, #16]
 8007fb4:	f7ff fa5a 	bl	800746c <tcp_abort>
 8007fb8:	e000      	b.n	8007fbc <tcp_kill_prio+0x8c>
    return;
 8007fba:	bf00      	nop
  }
}
 8007fbc:	3718      	adds	r7, #24
 8007fbe:	46bd      	mov	sp, r7
 8007fc0:	bd80      	pop	{r7, pc}
 8007fc2:	bf00      	nop
 8007fc4:	20008ae0 	.word	0x20008ae0
 8007fc8:	20008ae4 	.word	0x20008ae4

08007fcc <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8007fcc:	b580      	push	{r7, lr}
 8007fce:	b086      	sub	sp, #24
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	4603      	mov	r3, r0
 8007fd4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8007fd6:	79fb      	ldrb	r3, [r7, #7]
 8007fd8:	2b08      	cmp	r3, #8
 8007fda:	d009      	beq.n	8007ff0 <tcp_kill_state+0x24>
 8007fdc:	79fb      	ldrb	r3, [r7, #7]
 8007fde:	2b09      	cmp	r3, #9
 8007fe0:	d006      	beq.n	8007ff0 <tcp_kill_state+0x24>
 8007fe2:	4b1a      	ldr	r3, [pc, #104]	; (800804c <tcp_kill_state+0x80>)
 8007fe4:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8007fe8:	4919      	ldr	r1, [pc, #100]	; (8008050 <tcp_kill_state+0x84>)
 8007fea:	481a      	ldr	r0, [pc, #104]	; (8008054 <tcp_kill_state+0x88>)
 8007fec:	f006 fca6 	bl	800e93c <iprintf>

  inactivity = 0;
 8007ff0:	2300      	movs	r3, #0
 8007ff2:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8007ff4:	2300      	movs	r3, #0
 8007ff6:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007ff8:	4b17      	ldr	r3, [pc, #92]	; (8008058 <tcp_kill_state+0x8c>)
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	617b      	str	r3, [r7, #20]
 8007ffe:	e017      	b.n	8008030 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8008000:	697b      	ldr	r3, [r7, #20]
 8008002:	7d1b      	ldrb	r3, [r3, #20]
 8008004:	79fa      	ldrb	r2, [r7, #7]
 8008006:	429a      	cmp	r2, r3
 8008008:	d10f      	bne.n	800802a <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800800a:	4b14      	ldr	r3, [pc, #80]	; (800805c <tcp_kill_state+0x90>)
 800800c:	681a      	ldr	r2, [r3, #0]
 800800e:	697b      	ldr	r3, [r7, #20]
 8008010:	6a1b      	ldr	r3, [r3, #32]
 8008012:	1ad3      	subs	r3, r2, r3
 8008014:	68fa      	ldr	r2, [r7, #12]
 8008016:	429a      	cmp	r2, r3
 8008018:	d807      	bhi.n	800802a <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800801a:	4b10      	ldr	r3, [pc, #64]	; (800805c <tcp_kill_state+0x90>)
 800801c:	681a      	ldr	r2, [r3, #0]
 800801e:	697b      	ldr	r3, [r7, #20]
 8008020:	6a1b      	ldr	r3, [r3, #32]
 8008022:	1ad3      	subs	r3, r2, r3
 8008024:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8008026:	697b      	ldr	r3, [r7, #20]
 8008028:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800802a:	697b      	ldr	r3, [r7, #20]
 800802c:	68db      	ldr	r3, [r3, #12]
 800802e:	617b      	str	r3, [r7, #20]
 8008030:	697b      	ldr	r3, [r7, #20]
 8008032:	2b00      	cmp	r3, #0
 8008034:	d1e4      	bne.n	8008000 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8008036:	693b      	ldr	r3, [r7, #16]
 8008038:	2b00      	cmp	r3, #0
 800803a:	d003      	beq.n	8008044 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800803c:	2100      	movs	r1, #0
 800803e:	6938      	ldr	r0, [r7, #16]
 8008040:	f7ff f956 	bl	80072f0 <tcp_abandon>
  }
}
 8008044:	bf00      	nop
 8008046:	3718      	adds	r7, #24
 8008048:	46bd      	mov	sp, r7
 800804a:	bd80      	pop	{r7, pc}
 800804c:	08010290 	.word	0x08010290
 8008050:	0801081c 	.word	0x0801081c
 8008054:	080102d4 	.word	0x080102d4
 8008058:	20008ae0 	.word	0x20008ae0
 800805c:	20008ae4 	.word	0x20008ae4

08008060 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8008060:	b580      	push	{r7, lr}
 8008062:	b084      	sub	sp, #16
 8008064:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8008066:	2300      	movs	r3, #0
 8008068:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800806a:	2300      	movs	r3, #0
 800806c:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800806e:	4b12      	ldr	r3, [pc, #72]	; (80080b8 <tcp_kill_timewait+0x58>)
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	60fb      	str	r3, [r7, #12]
 8008074:	e012      	b.n	800809c <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8008076:	4b11      	ldr	r3, [pc, #68]	; (80080bc <tcp_kill_timewait+0x5c>)
 8008078:	681a      	ldr	r2, [r3, #0]
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	6a1b      	ldr	r3, [r3, #32]
 800807e:	1ad3      	subs	r3, r2, r3
 8008080:	687a      	ldr	r2, [r7, #4]
 8008082:	429a      	cmp	r2, r3
 8008084:	d807      	bhi.n	8008096 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8008086:	4b0d      	ldr	r3, [pc, #52]	; (80080bc <tcp_kill_timewait+0x5c>)
 8008088:	681a      	ldr	r2, [r3, #0]
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	6a1b      	ldr	r3, [r3, #32]
 800808e:	1ad3      	subs	r3, r2, r3
 8008090:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	68db      	ldr	r3, [r3, #12]
 800809a:	60fb      	str	r3, [r7, #12]
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d1e9      	bne.n	8008076 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 80080a2:	68bb      	ldr	r3, [r7, #8]
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d002      	beq.n	80080ae <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80080a8:	68b8      	ldr	r0, [r7, #8]
 80080aa:	f7ff f9df 	bl	800746c <tcp_abort>
  }
}
 80080ae:	bf00      	nop
 80080b0:	3710      	adds	r7, #16
 80080b2:	46bd      	mov	sp, r7
 80080b4:	bd80      	pop	{r7, pc}
 80080b6:	bf00      	nop
 80080b8:	20008af0 	.word	0x20008af0
 80080bc:	20008ae4 	.word	0x20008ae4

080080c0 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 80080c0:	b580      	push	{r7, lr}
 80080c2:	b082      	sub	sp, #8
 80080c4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 80080c6:	4b10      	ldr	r3, [pc, #64]	; (8008108 <tcp_handle_closepend+0x48>)
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80080cc:	e014      	b.n	80080f8 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	68db      	ldr	r3, [r3, #12]
 80080d2:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	8b5b      	ldrh	r3, [r3, #26]
 80080d8:	f003 0308 	and.w	r3, r3, #8
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d009      	beq.n	80080f4 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	8b5b      	ldrh	r3, [r3, #26]
 80080e4:	f023 0308 	bic.w	r3, r3, #8
 80080e8:	b29a      	uxth	r2, r3
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 80080ee:	6878      	ldr	r0, [r7, #4]
 80080f0:	f7ff f86c 	bl	80071cc <tcp_close_shutdown_fin>
    }
    pcb = next;
 80080f4:	683b      	ldr	r3, [r7, #0]
 80080f6:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d1e7      	bne.n	80080ce <tcp_handle_closepend+0xe>
  }
}
 80080fe:	bf00      	nop
 8008100:	3708      	adds	r7, #8
 8008102:	46bd      	mov	sp, r7
 8008104:	bd80      	pop	{r7, pc}
 8008106:	bf00      	nop
 8008108:	20008ae0 	.word	0x20008ae0

0800810c <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800810c:	b580      	push	{r7, lr}
 800810e:	b084      	sub	sp, #16
 8008110:	af00      	add	r7, sp, #0
 8008112:	4603      	mov	r3, r0
 8008114:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8008116:	2000      	movs	r0, #0
 8008118:	f7fd fdf2 	bl	8005d00 <memp_malloc>
 800811c:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	2b00      	cmp	r3, #0
 8008122:	d126      	bne.n	8008172 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8008124:	f7ff ffcc 	bl	80080c0 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8008128:	f7ff ff9a 	bl	8008060 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800812c:	2000      	movs	r0, #0
 800812e:	f7fd fde7 	bl	8005d00 <memp_malloc>
 8008132:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	2b00      	cmp	r3, #0
 8008138:	d11b      	bne.n	8008172 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800813a:	2009      	movs	r0, #9
 800813c:	f7ff ff46 	bl	8007fcc <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8008140:	2000      	movs	r0, #0
 8008142:	f7fd fddd 	bl	8005d00 <memp_malloc>
 8008146:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	2b00      	cmp	r3, #0
 800814c:	d111      	bne.n	8008172 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800814e:	2008      	movs	r0, #8
 8008150:	f7ff ff3c 	bl	8007fcc <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8008154:	2000      	movs	r0, #0
 8008156:	f7fd fdd3 	bl	8005d00 <memp_malloc>
 800815a:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	2b00      	cmp	r3, #0
 8008160:	d107      	bne.n	8008172 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8008162:	79fb      	ldrb	r3, [r7, #7]
 8008164:	4618      	mov	r0, r3
 8008166:	f7ff fee3 	bl	8007f30 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800816a:	2000      	movs	r0, #0
 800816c:	f7fd fdc8 	bl	8005d00 <memp_malloc>
 8008170:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	2b00      	cmp	r3, #0
 8008176:	d03f      	beq.n	80081f8 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8008178:	229c      	movs	r2, #156	; 0x9c
 800817a:	2100      	movs	r1, #0
 800817c:	68f8      	ldr	r0, [r7, #12]
 800817e:	f006 fbd5 	bl	800e92c <memset>
    pcb->prio = prio;
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	79fa      	ldrb	r2, [r7, #7]
 8008186:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800818e:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8008198:	855a      	strh	r2, [r3, #42]	; 0x2a
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	22ff      	movs	r2, #255	; 0xff
 80081a6:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	f44f 7206 	mov.w	r2, #536	; 0x218
 80081ae:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	2206      	movs	r2, #6
 80081b4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	2206      	movs	r2, #6
 80081bc:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80081c4:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	2201      	movs	r2, #1
 80081ca:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 80081ce:	4b0d      	ldr	r3, [pc, #52]	; (8008204 <tcp_alloc+0xf8>)
 80081d0:	681a      	ldr	r2, [r3, #0]
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 80081d6:	4b0c      	ldr	r3, [pc, #48]	; (8008208 <tcp_alloc+0xfc>)
 80081d8:	781a      	ldrb	r2, [r3, #0]
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	f44f 6286 	mov.w	r2, #1072	; 0x430
 80081e4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	4a08      	ldr	r2, [pc, #32]	; (800820c <tcp_alloc+0x100>)
 80081ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	4a07      	ldr	r2, [pc, #28]	; (8008210 <tcp_alloc+0x104>)
 80081f4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 80081f8:	68fb      	ldr	r3, [r7, #12]
}
 80081fa:	4618      	mov	r0, r3
 80081fc:	3710      	adds	r7, #16
 80081fe:	46bd      	mov	sp, r7
 8008200:	bd80      	pop	{r7, pc}
 8008202:	bf00      	nop
 8008204:	20008ae4 	.word	0x20008ae4
 8008208:	200000c2 	.word	0x200000c2
 800820c:	08007ec5 	.word	0x08007ec5
 8008210:	006ddd00 	.word	0x006ddd00

08008214 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8008214:	b580      	push	{r7, lr}
 8008216:	b082      	sub	sp, #8
 8008218:	af00      	add	r7, sp, #0
 800821a:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	2b00      	cmp	r3, #0
 8008220:	d107      	bne.n	8008232 <tcp_pcb_purge+0x1e>
 8008222:	4b21      	ldr	r3, [pc, #132]	; (80082a8 <tcp_pcb_purge+0x94>)
 8008224:	f640 0251 	movw	r2, #2129	; 0x851
 8008228:	4920      	ldr	r1, [pc, #128]	; (80082ac <tcp_pcb_purge+0x98>)
 800822a:	4821      	ldr	r0, [pc, #132]	; (80082b0 <tcp_pcb_purge+0x9c>)
 800822c:	f006 fb86 	bl	800e93c <iprintf>
 8008230:	e037      	b.n	80082a2 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	7d1b      	ldrb	r3, [r3, #20]
 8008236:	2b00      	cmp	r3, #0
 8008238:	d033      	beq.n	80082a2 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800823e:	2b0a      	cmp	r3, #10
 8008240:	d02f      	beq.n	80082a2 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8008246:	2b01      	cmp	r3, #1
 8008248:	d02b      	beq.n	80082a2 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800824e:	2b00      	cmp	r3, #0
 8008250:	d007      	beq.n	8008262 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008256:	4618      	mov	r0, r3
 8008258:	f7fe fb88 	bl	800696c <pbuf_free>
      pcb->refused_data = NULL;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	2200      	movs	r2, #0
 8008260:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008266:	2b00      	cmp	r3, #0
 8008268:	d002      	beq.n	8008270 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800826a:	6878      	ldr	r0, [r7, #4]
 800826c:	f000 f986 	bl	800857c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008276:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800827c:	4618      	mov	r0, r3
 800827e:	f7ff fdc9 	bl	8007e14 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008286:	4618      	mov	r0, r3
 8008288:	f7ff fdc4 	bl	8007e14 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	2200      	movs	r2, #0
 8008290:	66da      	str	r2, [r3, #108]	; 0x6c
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	2200      	movs	r2, #0
 800829e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 80082a2:	3708      	adds	r7, #8
 80082a4:	46bd      	mov	sp, r7
 80082a6:	bd80      	pop	{r7, pc}
 80082a8:	08010290 	.word	0x08010290
 80082ac:	080108dc 	.word	0x080108dc
 80082b0:	080102d4 	.word	0x080102d4

080082b4 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 80082b4:	b580      	push	{r7, lr}
 80082b6:	b084      	sub	sp, #16
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	6078      	str	r0, [r7, #4]
 80082bc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 80082be:	683b      	ldr	r3, [r7, #0]
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d106      	bne.n	80082d2 <tcp_pcb_remove+0x1e>
 80082c4:	4b3e      	ldr	r3, [pc, #248]	; (80083c0 <tcp_pcb_remove+0x10c>)
 80082c6:	f640 0283 	movw	r2, #2179	; 0x883
 80082ca:	493e      	ldr	r1, [pc, #248]	; (80083c4 <tcp_pcb_remove+0x110>)
 80082cc:	483e      	ldr	r0, [pc, #248]	; (80083c8 <tcp_pcb_remove+0x114>)
 80082ce:	f006 fb35 	bl	800e93c <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d106      	bne.n	80082e6 <tcp_pcb_remove+0x32>
 80082d8:	4b39      	ldr	r3, [pc, #228]	; (80083c0 <tcp_pcb_remove+0x10c>)
 80082da:	f640 0284 	movw	r2, #2180	; 0x884
 80082de:	493b      	ldr	r1, [pc, #236]	; (80083cc <tcp_pcb_remove+0x118>)
 80082e0:	4839      	ldr	r0, [pc, #228]	; (80083c8 <tcp_pcb_remove+0x114>)
 80082e2:	f006 fb2b 	bl	800e93c <iprintf>

  TCP_RMV(pcblist, pcb);
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	683a      	ldr	r2, [r7, #0]
 80082ec:	429a      	cmp	r2, r3
 80082ee:	d105      	bne.n	80082fc <tcp_pcb_remove+0x48>
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	68da      	ldr	r2, [r3, #12]
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	601a      	str	r2, [r3, #0]
 80082fa:	e013      	b.n	8008324 <tcp_pcb_remove+0x70>
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	60fb      	str	r3, [r7, #12]
 8008302:	e00c      	b.n	800831e <tcp_pcb_remove+0x6a>
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	68db      	ldr	r3, [r3, #12]
 8008308:	683a      	ldr	r2, [r7, #0]
 800830a:	429a      	cmp	r2, r3
 800830c:	d104      	bne.n	8008318 <tcp_pcb_remove+0x64>
 800830e:	683b      	ldr	r3, [r7, #0]
 8008310:	68da      	ldr	r2, [r3, #12]
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	60da      	str	r2, [r3, #12]
 8008316:	e005      	b.n	8008324 <tcp_pcb_remove+0x70>
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	68db      	ldr	r3, [r3, #12]
 800831c:	60fb      	str	r3, [r7, #12]
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	2b00      	cmp	r3, #0
 8008322:	d1ef      	bne.n	8008304 <tcp_pcb_remove+0x50>
 8008324:	683b      	ldr	r3, [r7, #0]
 8008326:	2200      	movs	r2, #0
 8008328:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800832a:	6838      	ldr	r0, [r7, #0]
 800832c:	f7ff ff72 	bl	8008214 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8008330:	683b      	ldr	r3, [r7, #0]
 8008332:	7d1b      	ldrb	r3, [r3, #20]
 8008334:	2b0a      	cmp	r3, #10
 8008336:	d013      	beq.n	8008360 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8008338:	683b      	ldr	r3, [r7, #0]
 800833a:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800833c:	2b01      	cmp	r3, #1
 800833e:	d00f      	beq.n	8008360 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8008340:	683b      	ldr	r3, [r7, #0]
 8008342:	8b5b      	ldrh	r3, [r3, #26]
 8008344:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8008348:	2b00      	cmp	r3, #0
 800834a:	d009      	beq.n	8008360 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800834c:	683b      	ldr	r3, [r7, #0]
 800834e:	8b5b      	ldrh	r3, [r3, #26]
 8008350:	f043 0302 	orr.w	r3, r3, #2
 8008354:	b29a      	uxth	r2, r3
 8008356:	683b      	ldr	r3, [r7, #0]
 8008358:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800835a:	6838      	ldr	r0, [r7, #0]
 800835c:	f002 ff68 	bl	800b230 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8008360:	683b      	ldr	r3, [r7, #0]
 8008362:	7d1b      	ldrb	r3, [r3, #20]
 8008364:	2b01      	cmp	r3, #1
 8008366:	d020      	beq.n	80083aa <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8008368:	683b      	ldr	r3, [r7, #0]
 800836a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800836c:	2b00      	cmp	r3, #0
 800836e:	d006      	beq.n	800837e <tcp_pcb_remove+0xca>
 8008370:	4b13      	ldr	r3, [pc, #76]	; (80083c0 <tcp_pcb_remove+0x10c>)
 8008372:	f640 0293 	movw	r2, #2195	; 0x893
 8008376:	4916      	ldr	r1, [pc, #88]	; (80083d0 <tcp_pcb_remove+0x11c>)
 8008378:	4813      	ldr	r0, [pc, #76]	; (80083c8 <tcp_pcb_remove+0x114>)
 800837a:	f006 fadf 	bl	800e93c <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800837e:	683b      	ldr	r3, [r7, #0]
 8008380:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008382:	2b00      	cmp	r3, #0
 8008384:	d006      	beq.n	8008394 <tcp_pcb_remove+0xe0>
 8008386:	4b0e      	ldr	r3, [pc, #56]	; (80083c0 <tcp_pcb_remove+0x10c>)
 8008388:	f640 0294 	movw	r2, #2196	; 0x894
 800838c:	4911      	ldr	r1, [pc, #68]	; (80083d4 <tcp_pcb_remove+0x120>)
 800838e:	480e      	ldr	r0, [pc, #56]	; (80083c8 <tcp_pcb_remove+0x114>)
 8008390:	f006 fad4 	bl	800e93c <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8008394:	683b      	ldr	r3, [r7, #0]
 8008396:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008398:	2b00      	cmp	r3, #0
 800839a:	d006      	beq.n	80083aa <tcp_pcb_remove+0xf6>
 800839c:	4b08      	ldr	r3, [pc, #32]	; (80083c0 <tcp_pcb_remove+0x10c>)
 800839e:	f640 0296 	movw	r2, #2198	; 0x896
 80083a2:	490d      	ldr	r1, [pc, #52]	; (80083d8 <tcp_pcb_remove+0x124>)
 80083a4:	4808      	ldr	r0, [pc, #32]	; (80083c8 <tcp_pcb_remove+0x114>)
 80083a6:	f006 fac9 	bl	800e93c <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 80083aa:	683b      	ldr	r3, [r7, #0]
 80083ac:	2200      	movs	r2, #0
 80083ae:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 80083b0:	683b      	ldr	r3, [r7, #0]
 80083b2:	2200      	movs	r2, #0
 80083b4:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 80083b6:	bf00      	nop
 80083b8:	3710      	adds	r7, #16
 80083ba:	46bd      	mov	sp, r7
 80083bc:	bd80      	pop	{r7, pc}
 80083be:	bf00      	nop
 80083c0:	08010290 	.word	0x08010290
 80083c4:	080108f8 	.word	0x080108f8
 80083c8:	080102d4 	.word	0x080102d4
 80083cc:	08010914 	.word	0x08010914
 80083d0:	08010934 	.word	0x08010934
 80083d4:	0801094c 	.word	0x0801094c
 80083d8:	08010968 	.word	0x08010968

080083dc <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 80083dc:	b580      	push	{r7, lr}
 80083de:	b082      	sub	sp, #8
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d106      	bne.n	80083f8 <tcp_next_iss+0x1c>
 80083ea:	4b0a      	ldr	r3, [pc, #40]	; (8008414 <tcp_next_iss+0x38>)
 80083ec:	f640 02af 	movw	r2, #2223	; 0x8af
 80083f0:	4909      	ldr	r1, [pc, #36]	; (8008418 <tcp_next_iss+0x3c>)
 80083f2:	480a      	ldr	r0, [pc, #40]	; (800841c <tcp_next_iss+0x40>)
 80083f4:	f006 faa2 	bl	800e93c <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 80083f8:	4b09      	ldr	r3, [pc, #36]	; (8008420 <tcp_next_iss+0x44>)
 80083fa:	681a      	ldr	r2, [r3, #0]
 80083fc:	4b09      	ldr	r3, [pc, #36]	; (8008424 <tcp_next_iss+0x48>)
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	4413      	add	r3, r2
 8008402:	4a07      	ldr	r2, [pc, #28]	; (8008420 <tcp_next_iss+0x44>)
 8008404:	6013      	str	r3, [r2, #0]
  return iss;
 8008406:	4b06      	ldr	r3, [pc, #24]	; (8008420 <tcp_next_iss+0x44>)
 8008408:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800840a:	4618      	mov	r0, r3
 800840c:	3708      	adds	r7, #8
 800840e:	46bd      	mov	sp, r7
 8008410:	bd80      	pop	{r7, pc}
 8008412:	bf00      	nop
 8008414:	08010290 	.word	0x08010290
 8008418:	08010980 	.word	0x08010980
 800841c:	080102d4 	.word	0x080102d4
 8008420:	2000000c 	.word	0x2000000c
 8008424:	20008ae4 	.word	0x20008ae4

08008428 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8008428:	b580      	push	{r7, lr}
 800842a:	b086      	sub	sp, #24
 800842c:	af00      	add	r7, sp, #0
 800842e:	4603      	mov	r3, r0
 8008430:	60b9      	str	r1, [r7, #8]
 8008432:	607a      	str	r2, [r7, #4]
 8008434:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	2b00      	cmp	r3, #0
 800843a:	d106      	bne.n	800844a <tcp_eff_send_mss_netif+0x22>
 800843c:	4b14      	ldr	r3, [pc, #80]	; (8008490 <tcp_eff_send_mss_netif+0x68>)
 800843e:	f640 02c5 	movw	r2, #2245	; 0x8c5
 8008442:	4914      	ldr	r1, [pc, #80]	; (8008494 <tcp_eff_send_mss_netif+0x6c>)
 8008444:	4814      	ldr	r0, [pc, #80]	; (8008498 <tcp_eff_send_mss_netif+0x70>)
 8008446:	f006 fa79 	bl	800e93c <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800844a:	68bb      	ldr	r3, [r7, #8]
 800844c:	2b00      	cmp	r3, #0
 800844e:	d101      	bne.n	8008454 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8008450:	89fb      	ldrh	r3, [r7, #14]
 8008452:	e019      	b.n	8008488 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8008454:	68bb      	ldr	r3, [r7, #8]
 8008456:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008458:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800845a:	8afb      	ldrh	r3, [r7, #22]
 800845c:	2b00      	cmp	r3, #0
 800845e:	d012      	beq.n	8008486 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8008460:	2328      	movs	r3, #40	; 0x28
 8008462:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8008464:	8afa      	ldrh	r2, [r7, #22]
 8008466:	8abb      	ldrh	r3, [r7, #20]
 8008468:	429a      	cmp	r2, r3
 800846a:	d904      	bls.n	8008476 <tcp_eff_send_mss_netif+0x4e>
 800846c:	8afa      	ldrh	r2, [r7, #22]
 800846e:	8abb      	ldrh	r3, [r7, #20]
 8008470:	1ad3      	subs	r3, r2, r3
 8008472:	b29b      	uxth	r3, r3
 8008474:	e000      	b.n	8008478 <tcp_eff_send_mss_netif+0x50>
 8008476:	2300      	movs	r3, #0
 8008478:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800847a:	8a7a      	ldrh	r2, [r7, #18]
 800847c:	89fb      	ldrh	r3, [r7, #14]
 800847e:	4293      	cmp	r3, r2
 8008480:	bf28      	it	cs
 8008482:	4613      	movcs	r3, r2
 8008484:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8008486:	89fb      	ldrh	r3, [r7, #14]
}
 8008488:	4618      	mov	r0, r3
 800848a:	3718      	adds	r7, #24
 800848c:	46bd      	mov	sp, r7
 800848e:	bd80      	pop	{r7, pc}
 8008490:	08010290 	.word	0x08010290
 8008494:	0801099c 	.word	0x0801099c
 8008498:	080102d4 	.word	0x080102d4

0800849c <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800849c:	b580      	push	{r7, lr}
 800849e:	b084      	sub	sp, #16
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	6078      	str	r0, [r7, #4]
 80084a4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 80084a6:	683b      	ldr	r3, [r7, #0]
 80084a8:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d119      	bne.n	80084e4 <tcp_netif_ip_addr_changed_pcblist+0x48>
 80084b0:	4b10      	ldr	r3, [pc, #64]	; (80084f4 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 80084b2:	f44f 6210 	mov.w	r2, #2304	; 0x900
 80084b6:	4910      	ldr	r1, [pc, #64]	; (80084f8 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 80084b8:	4810      	ldr	r0, [pc, #64]	; (80084fc <tcp_netif_ip_addr_changed_pcblist+0x60>)
 80084ba:	f006 fa3f 	bl	800e93c <iprintf>

  while (pcb != NULL) {
 80084be:	e011      	b.n	80084e4 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	681a      	ldr	r2, [r3, #0]
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	429a      	cmp	r2, r3
 80084ca:	d108      	bne.n	80084de <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	68db      	ldr	r3, [r3, #12]
 80084d0:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 80084d2:	68f8      	ldr	r0, [r7, #12]
 80084d4:	f7fe ffca 	bl	800746c <tcp_abort>
      pcb = next;
 80084d8:	68bb      	ldr	r3, [r7, #8]
 80084da:	60fb      	str	r3, [r7, #12]
 80084dc:	e002      	b.n	80084e4 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	68db      	ldr	r3, [r3, #12]
 80084e2:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d1ea      	bne.n	80084c0 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 80084ea:	bf00      	nop
 80084ec:	3710      	adds	r7, #16
 80084ee:	46bd      	mov	sp, r7
 80084f0:	bd80      	pop	{r7, pc}
 80084f2:	bf00      	nop
 80084f4:	08010290 	.word	0x08010290
 80084f8:	080109c4 	.word	0x080109c4
 80084fc:	080102d4 	.word	0x080102d4

08008500 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8008500:	b580      	push	{r7, lr}
 8008502:	b084      	sub	sp, #16
 8008504:	af00      	add	r7, sp, #0
 8008506:	6078      	str	r0, [r7, #4]
 8008508:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	2b00      	cmp	r3, #0
 800850e:	d02a      	beq.n	8008566 <tcp_netif_ip_addr_changed+0x66>
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	2b00      	cmp	r3, #0
 8008516:	d026      	beq.n	8008566 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8008518:	4b15      	ldr	r3, [pc, #84]	; (8008570 <tcp_netif_ip_addr_changed+0x70>)
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	4619      	mov	r1, r3
 800851e:	6878      	ldr	r0, [r7, #4]
 8008520:	f7ff ffbc 	bl	800849c <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8008524:	4b13      	ldr	r3, [pc, #76]	; (8008574 <tcp_netif_ip_addr_changed+0x74>)
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	4619      	mov	r1, r3
 800852a:	6878      	ldr	r0, [r7, #4]
 800852c:	f7ff ffb6 	bl	800849c <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8008530:	683b      	ldr	r3, [r7, #0]
 8008532:	2b00      	cmp	r3, #0
 8008534:	d017      	beq.n	8008566 <tcp_netif_ip_addr_changed+0x66>
 8008536:	683b      	ldr	r3, [r7, #0]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	2b00      	cmp	r3, #0
 800853c:	d013      	beq.n	8008566 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800853e:	4b0e      	ldr	r3, [pc, #56]	; (8008578 <tcp_netif_ip_addr_changed+0x78>)
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	60fb      	str	r3, [r7, #12]
 8008544:	e00c      	b.n	8008560 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	681a      	ldr	r2, [r3, #0]
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	429a      	cmp	r2, r3
 8008550:	d103      	bne.n	800855a <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8008552:	683b      	ldr	r3, [r7, #0]
 8008554:	681a      	ldr	r2, [r3, #0]
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	68db      	ldr	r3, [r3, #12]
 800855e:	60fb      	str	r3, [r7, #12]
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	2b00      	cmp	r3, #0
 8008564:	d1ef      	bne.n	8008546 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8008566:	bf00      	nop
 8008568:	3710      	adds	r7, #16
 800856a:	46bd      	mov	sp, r7
 800856c:	bd80      	pop	{r7, pc}
 800856e:	bf00      	nop
 8008570:	20008ae0 	.word	0x20008ae0
 8008574:	20008aec 	.word	0x20008aec
 8008578:	20008ae8 	.word	0x20008ae8

0800857c <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800857c:	b580      	push	{r7, lr}
 800857e:	b082      	sub	sp, #8
 8008580:	af00      	add	r7, sp, #0
 8008582:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008588:	2b00      	cmp	r3, #0
 800858a:	d007      	beq.n	800859c <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008590:	4618      	mov	r0, r3
 8008592:	f7ff fc3f 	bl	8007e14 <tcp_segs_free>
    pcb->ooseq = NULL;
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	2200      	movs	r2, #0
 800859a:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800859c:	bf00      	nop
 800859e:	3708      	adds	r7, #8
 80085a0:	46bd      	mov	sp, r7
 80085a2:	bd80      	pop	{r7, pc}

080085a4 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 80085a4:	b590      	push	{r4, r7, lr}
 80085a6:	b08d      	sub	sp, #52	; 0x34
 80085a8:	af04      	add	r7, sp, #16
 80085aa:	6078      	str	r0, [r7, #4]
 80085ac:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d105      	bne.n	80085c0 <tcp_input+0x1c>
 80085b4:	4b9b      	ldr	r3, [pc, #620]	; (8008824 <tcp_input+0x280>)
 80085b6:	2283      	movs	r2, #131	; 0x83
 80085b8:	499b      	ldr	r1, [pc, #620]	; (8008828 <tcp_input+0x284>)
 80085ba:	489c      	ldr	r0, [pc, #624]	; (800882c <tcp_input+0x288>)
 80085bc:	f006 f9be 	bl	800e93c <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	685b      	ldr	r3, [r3, #4]
 80085c4:	4a9a      	ldr	r2, [pc, #616]	; (8008830 <tcp_input+0x28c>)
 80085c6:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	895b      	ldrh	r3, [r3, #10]
 80085cc:	2b13      	cmp	r3, #19
 80085ce:	f240 83c4 	bls.w	8008d5a <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80085d2:	4b98      	ldr	r3, [pc, #608]	; (8008834 <tcp_input+0x290>)
 80085d4:	695a      	ldr	r2, [r3, #20]
 80085d6:	4b97      	ldr	r3, [pc, #604]	; (8008834 <tcp_input+0x290>)
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	4619      	mov	r1, r3
 80085dc:	4610      	mov	r0, r2
 80085de:	f005 fa1b 	bl	800da18 <ip4_addr_isbroadcast_u32>
 80085e2:	4603      	mov	r3, r0
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	f040 83ba 	bne.w	8008d5e <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 80085ea:	4b92      	ldr	r3, [pc, #584]	; (8008834 <tcp_input+0x290>)
 80085ec:	695b      	ldr	r3, [r3, #20]
 80085ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80085f2:	2be0      	cmp	r3, #224	; 0xe0
 80085f4:	f000 83b3 	beq.w	8008d5e <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 80085f8:	4b8d      	ldr	r3, [pc, #564]	; (8008830 <tcp_input+0x28c>)
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	899b      	ldrh	r3, [r3, #12]
 80085fe:	b29b      	uxth	r3, r3
 8008600:	4618      	mov	r0, r3
 8008602:	f7fc ff29 	bl	8005458 <lwip_htons>
 8008606:	4603      	mov	r3, r0
 8008608:	0b1b      	lsrs	r3, r3, #12
 800860a:	b29b      	uxth	r3, r3
 800860c:	b2db      	uxtb	r3, r3
 800860e:	009b      	lsls	r3, r3, #2
 8008610:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8008612:	7cbb      	ldrb	r3, [r7, #18]
 8008614:	2b13      	cmp	r3, #19
 8008616:	f240 83a2 	bls.w	8008d5e <tcp_input+0x7ba>
 800861a:	7cbb      	ldrb	r3, [r7, #18]
 800861c:	b29a      	uxth	r2, r3
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	891b      	ldrh	r3, [r3, #8]
 8008622:	429a      	cmp	r2, r3
 8008624:	f200 839b 	bhi.w	8008d5e <tcp_input+0x7ba>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8008628:	7cbb      	ldrb	r3, [r7, #18]
 800862a:	b29b      	uxth	r3, r3
 800862c:	3b14      	subs	r3, #20
 800862e:	b29a      	uxth	r2, r3
 8008630:	4b81      	ldr	r3, [pc, #516]	; (8008838 <tcp_input+0x294>)
 8008632:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8008634:	4b81      	ldr	r3, [pc, #516]	; (800883c <tcp_input+0x298>)
 8008636:	2200      	movs	r2, #0
 8008638:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	895a      	ldrh	r2, [r3, #10]
 800863e:	7cbb      	ldrb	r3, [r7, #18]
 8008640:	b29b      	uxth	r3, r3
 8008642:	429a      	cmp	r2, r3
 8008644:	d309      	bcc.n	800865a <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8008646:	4b7c      	ldr	r3, [pc, #496]	; (8008838 <tcp_input+0x294>)
 8008648:	881a      	ldrh	r2, [r3, #0]
 800864a:	4b7d      	ldr	r3, [pc, #500]	; (8008840 <tcp_input+0x29c>)
 800864c:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800864e:	7cbb      	ldrb	r3, [r7, #18]
 8008650:	4619      	mov	r1, r3
 8008652:	6878      	ldr	r0, [r7, #4]
 8008654:	f7fe f904 	bl	8006860 <pbuf_remove_header>
 8008658:	e04e      	b.n	80086f8 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	2b00      	cmp	r3, #0
 8008660:	d105      	bne.n	800866e <tcp_input+0xca>
 8008662:	4b70      	ldr	r3, [pc, #448]	; (8008824 <tcp_input+0x280>)
 8008664:	22c2      	movs	r2, #194	; 0xc2
 8008666:	4977      	ldr	r1, [pc, #476]	; (8008844 <tcp_input+0x2a0>)
 8008668:	4870      	ldr	r0, [pc, #448]	; (800882c <tcp_input+0x288>)
 800866a:	f006 f967 	bl	800e93c <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800866e:	2114      	movs	r1, #20
 8008670:	6878      	ldr	r0, [r7, #4]
 8008672:	f7fe f8f5 	bl	8006860 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	895a      	ldrh	r2, [r3, #10]
 800867a:	4b71      	ldr	r3, [pc, #452]	; (8008840 <tcp_input+0x29c>)
 800867c:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800867e:	4b6e      	ldr	r3, [pc, #440]	; (8008838 <tcp_input+0x294>)
 8008680:	881a      	ldrh	r2, [r3, #0]
 8008682:	4b6f      	ldr	r3, [pc, #444]	; (8008840 <tcp_input+0x29c>)
 8008684:	881b      	ldrh	r3, [r3, #0]
 8008686:	1ad3      	subs	r3, r2, r3
 8008688:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800868a:	4b6d      	ldr	r3, [pc, #436]	; (8008840 <tcp_input+0x29c>)
 800868c:	881b      	ldrh	r3, [r3, #0]
 800868e:	4619      	mov	r1, r3
 8008690:	6878      	ldr	r0, [r7, #4]
 8008692:	f7fe f8e5 	bl	8006860 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	895b      	ldrh	r3, [r3, #10]
 800869c:	8a3a      	ldrh	r2, [r7, #16]
 800869e:	429a      	cmp	r2, r3
 80086a0:	f200 835f 	bhi.w	8008d62 <tcp_input+0x7be>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	685b      	ldr	r3, [r3, #4]
 80086aa:	4a64      	ldr	r2, [pc, #400]	; (800883c <tcp_input+0x298>)
 80086ac:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	8a3a      	ldrh	r2, [r7, #16]
 80086b4:	4611      	mov	r1, r2
 80086b6:	4618      	mov	r0, r3
 80086b8:	f7fe f8d2 	bl	8006860 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	891a      	ldrh	r2, [r3, #8]
 80086c0:	8a3b      	ldrh	r3, [r7, #16]
 80086c2:	1ad3      	subs	r3, r2, r3
 80086c4:	b29a      	uxth	r2, r3
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	895b      	ldrh	r3, [r3, #10]
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d005      	beq.n	80086de <tcp_input+0x13a>
 80086d2:	4b54      	ldr	r3, [pc, #336]	; (8008824 <tcp_input+0x280>)
 80086d4:	22df      	movs	r2, #223	; 0xdf
 80086d6:	495c      	ldr	r1, [pc, #368]	; (8008848 <tcp_input+0x2a4>)
 80086d8:	4854      	ldr	r0, [pc, #336]	; (800882c <tcp_input+0x288>)
 80086da:	f006 f92f 	bl	800e93c <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	891a      	ldrh	r2, [r3, #8]
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	891b      	ldrh	r3, [r3, #8]
 80086e8:	429a      	cmp	r2, r3
 80086ea:	d005      	beq.n	80086f8 <tcp_input+0x154>
 80086ec:	4b4d      	ldr	r3, [pc, #308]	; (8008824 <tcp_input+0x280>)
 80086ee:	22e0      	movs	r2, #224	; 0xe0
 80086f0:	4956      	ldr	r1, [pc, #344]	; (800884c <tcp_input+0x2a8>)
 80086f2:	484e      	ldr	r0, [pc, #312]	; (800882c <tcp_input+0x288>)
 80086f4:	f006 f922 	bl	800e93c <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 80086f8:	4b4d      	ldr	r3, [pc, #308]	; (8008830 <tcp_input+0x28c>)
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	881b      	ldrh	r3, [r3, #0]
 80086fe:	b29a      	uxth	r2, r3
 8008700:	4b4b      	ldr	r3, [pc, #300]	; (8008830 <tcp_input+0x28c>)
 8008702:	681c      	ldr	r4, [r3, #0]
 8008704:	4610      	mov	r0, r2
 8008706:	f7fc fea7 	bl	8005458 <lwip_htons>
 800870a:	4603      	mov	r3, r0
 800870c:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800870e:	4b48      	ldr	r3, [pc, #288]	; (8008830 <tcp_input+0x28c>)
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	885b      	ldrh	r3, [r3, #2]
 8008714:	b29a      	uxth	r2, r3
 8008716:	4b46      	ldr	r3, [pc, #280]	; (8008830 <tcp_input+0x28c>)
 8008718:	681c      	ldr	r4, [r3, #0]
 800871a:	4610      	mov	r0, r2
 800871c:	f7fc fe9c 	bl	8005458 <lwip_htons>
 8008720:	4603      	mov	r3, r0
 8008722:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8008724:	4b42      	ldr	r3, [pc, #264]	; (8008830 <tcp_input+0x28c>)
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	685a      	ldr	r2, [r3, #4]
 800872a:	4b41      	ldr	r3, [pc, #260]	; (8008830 <tcp_input+0x28c>)
 800872c:	681c      	ldr	r4, [r3, #0]
 800872e:	4610      	mov	r0, r2
 8008730:	f7fc fea7 	bl	8005482 <lwip_htonl>
 8008734:	4603      	mov	r3, r0
 8008736:	6063      	str	r3, [r4, #4]
 8008738:	6863      	ldr	r3, [r4, #4]
 800873a:	4a45      	ldr	r2, [pc, #276]	; (8008850 <tcp_input+0x2ac>)
 800873c:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800873e:	4b3c      	ldr	r3, [pc, #240]	; (8008830 <tcp_input+0x28c>)
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	689a      	ldr	r2, [r3, #8]
 8008744:	4b3a      	ldr	r3, [pc, #232]	; (8008830 <tcp_input+0x28c>)
 8008746:	681c      	ldr	r4, [r3, #0]
 8008748:	4610      	mov	r0, r2
 800874a:	f7fc fe9a 	bl	8005482 <lwip_htonl>
 800874e:	4603      	mov	r3, r0
 8008750:	60a3      	str	r3, [r4, #8]
 8008752:	68a3      	ldr	r3, [r4, #8]
 8008754:	4a3f      	ldr	r2, [pc, #252]	; (8008854 <tcp_input+0x2b0>)
 8008756:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8008758:	4b35      	ldr	r3, [pc, #212]	; (8008830 <tcp_input+0x28c>)
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	89db      	ldrh	r3, [r3, #14]
 800875e:	b29a      	uxth	r2, r3
 8008760:	4b33      	ldr	r3, [pc, #204]	; (8008830 <tcp_input+0x28c>)
 8008762:	681c      	ldr	r4, [r3, #0]
 8008764:	4610      	mov	r0, r2
 8008766:	f7fc fe77 	bl	8005458 <lwip_htons>
 800876a:	4603      	mov	r3, r0
 800876c:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800876e:	4b30      	ldr	r3, [pc, #192]	; (8008830 <tcp_input+0x28c>)
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	899b      	ldrh	r3, [r3, #12]
 8008774:	b29b      	uxth	r3, r3
 8008776:	4618      	mov	r0, r3
 8008778:	f7fc fe6e 	bl	8005458 <lwip_htons>
 800877c:	4603      	mov	r3, r0
 800877e:	b2db      	uxtb	r3, r3
 8008780:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008784:	b2da      	uxtb	r2, r3
 8008786:	4b34      	ldr	r3, [pc, #208]	; (8008858 <tcp_input+0x2b4>)
 8008788:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	891a      	ldrh	r2, [r3, #8]
 800878e:	4b33      	ldr	r3, [pc, #204]	; (800885c <tcp_input+0x2b8>)
 8008790:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8008792:	4b31      	ldr	r3, [pc, #196]	; (8008858 <tcp_input+0x2b4>)
 8008794:	781b      	ldrb	r3, [r3, #0]
 8008796:	f003 0303 	and.w	r3, r3, #3
 800879a:	2b00      	cmp	r3, #0
 800879c:	d00c      	beq.n	80087b8 <tcp_input+0x214>
    tcplen++;
 800879e:	4b2f      	ldr	r3, [pc, #188]	; (800885c <tcp_input+0x2b8>)
 80087a0:	881b      	ldrh	r3, [r3, #0]
 80087a2:	3301      	adds	r3, #1
 80087a4:	b29a      	uxth	r2, r3
 80087a6:	4b2d      	ldr	r3, [pc, #180]	; (800885c <tcp_input+0x2b8>)
 80087a8:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	891a      	ldrh	r2, [r3, #8]
 80087ae:	4b2b      	ldr	r3, [pc, #172]	; (800885c <tcp_input+0x2b8>)
 80087b0:	881b      	ldrh	r3, [r3, #0]
 80087b2:	429a      	cmp	r2, r3
 80087b4:	f200 82d7 	bhi.w	8008d66 <tcp_input+0x7c2>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 80087b8:	2300      	movs	r3, #0
 80087ba:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80087bc:	4b28      	ldr	r3, [pc, #160]	; (8008860 <tcp_input+0x2bc>)
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	61fb      	str	r3, [r7, #28]
 80087c2:	e09d      	b.n	8008900 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 80087c4:	69fb      	ldr	r3, [r7, #28]
 80087c6:	7d1b      	ldrb	r3, [r3, #20]
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d105      	bne.n	80087d8 <tcp_input+0x234>
 80087cc:	4b15      	ldr	r3, [pc, #84]	; (8008824 <tcp_input+0x280>)
 80087ce:	22fb      	movs	r2, #251	; 0xfb
 80087d0:	4924      	ldr	r1, [pc, #144]	; (8008864 <tcp_input+0x2c0>)
 80087d2:	4816      	ldr	r0, [pc, #88]	; (800882c <tcp_input+0x288>)
 80087d4:	f006 f8b2 	bl	800e93c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 80087d8:	69fb      	ldr	r3, [r7, #28]
 80087da:	7d1b      	ldrb	r3, [r3, #20]
 80087dc:	2b0a      	cmp	r3, #10
 80087de:	d105      	bne.n	80087ec <tcp_input+0x248>
 80087e0:	4b10      	ldr	r3, [pc, #64]	; (8008824 <tcp_input+0x280>)
 80087e2:	22fc      	movs	r2, #252	; 0xfc
 80087e4:	4920      	ldr	r1, [pc, #128]	; (8008868 <tcp_input+0x2c4>)
 80087e6:	4811      	ldr	r0, [pc, #68]	; (800882c <tcp_input+0x288>)
 80087e8:	f006 f8a8 	bl	800e93c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 80087ec:	69fb      	ldr	r3, [r7, #28]
 80087ee:	7d1b      	ldrb	r3, [r3, #20]
 80087f0:	2b01      	cmp	r3, #1
 80087f2:	d105      	bne.n	8008800 <tcp_input+0x25c>
 80087f4:	4b0b      	ldr	r3, [pc, #44]	; (8008824 <tcp_input+0x280>)
 80087f6:	22fd      	movs	r2, #253	; 0xfd
 80087f8:	491c      	ldr	r1, [pc, #112]	; (800886c <tcp_input+0x2c8>)
 80087fa:	480c      	ldr	r0, [pc, #48]	; (800882c <tcp_input+0x288>)
 80087fc:	f006 f89e 	bl	800e93c <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8008800:	69fb      	ldr	r3, [r7, #28]
 8008802:	7a1b      	ldrb	r3, [r3, #8]
 8008804:	2b00      	cmp	r3, #0
 8008806:	d033      	beq.n	8008870 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8008808:	69fb      	ldr	r3, [r7, #28]
 800880a:	7a1a      	ldrb	r2, [r3, #8]
 800880c:	4b09      	ldr	r3, [pc, #36]	; (8008834 <tcp_input+0x290>)
 800880e:	685b      	ldr	r3, [r3, #4]
 8008810:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008814:	3301      	adds	r3, #1
 8008816:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8008818:	429a      	cmp	r2, r3
 800881a:	d029      	beq.n	8008870 <tcp_input+0x2cc>
      prev = pcb;
 800881c:	69fb      	ldr	r3, [r7, #28]
 800881e:	61bb      	str	r3, [r7, #24]
      continue;
 8008820:	e06b      	b.n	80088fa <tcp_input+0x356>
 8008822:	bf00      	nop
 8008824:	080109f8 	.word	0x080109f8
 8008828:	08010a2c 	.word	0x08010a2c
 800882c:	08010a44 	.word	0x08010a44
 8008830:	200000d4 	.word	0x200000d4
 8008834:	20003460 	.word	0x20003460
 8008838:	200000d8 	.word	0x200000d8
 800883c:	200000dc 	.word	0x200000dc
 8008840:	200000da 	.word	0x200000da
 8008844:	08010a6c 	.word	0x08010a6c
 8008848:	08010a7c 	.word	0x08010a7c
 800884c:	08010a88 	.word	0x08010a88
 8008850:	200000e4 	.word	0x200000e4
 8008854:	200000e8 	.word	0x200000e8
 8008858:	200000f0 	.word	0x200000f0
 800885c:	200000ee 	.word	0x200000ee
 8008860:	20008ae0 	.word	0x20008ae0
 8008864:	08010aa8 	.word	0x08010aa8
 8008868:	08010ad0 	.word	0x08010ad0
 800886c:	08010afc 	.word	0x08010afc
    }

    if (pcb->remote_port == tcphdr->src &&
 8008870:	69fb      	ldr	r3, [r7, #28]
 8008872:	8b1a      	ldrh	r2, [r3, #24]
 8008874:	4b94      	ldr	r3, [pc, #592]	; (8008ac8 <tcp_input+0x524>)
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	881b      	ldrh	r3, [r3, #0]
 800887a:	b29b      	uxth	r3, r3
 800887c:	429a      	cmp	r2, r3
 800887e:	d13a      	bne.n	80088f6 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8008880:	69fb      	ldr	r3, [r7, #28]
 8008882:	8ada      	ldrh	r2, [r3, #22]
 8008884:	4b90      	ldr	r3, [pc, #576]	; (8008ac8 <tcp_input+0x524>)
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	885b      	ldrh	r3, [r3, #2]
 800888a:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800888c:	429a      	cmp	r2, r3
 800888e:	d132      	bne.n	80088f6 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8008890:	69fb      	ldr	r3, [r7, #28]
 8008892:	685a      	ldr	r2, [r3, #4]
 8008894:	4b8d      	ldr	r3, [pc, #564]	; (8008acc <tcp_input+0x528>)
 8008896:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8008898:	429a      	cmp	r2, r3
 800889a:	d12c      	bne.n	80088f6 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800889c:	69fb      	ldr	r3, [r7, #28]
 800889e:	681a      	ldr	r2, [r3, #0]
 80088a0:	4b8a      	ldr	r3, [pc, #552]	; (8008acc <tcp_input+0x528>)
 80088a2:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80088a4:	429a      	cmp	r2, r3
 80088a6:	d126      	bne.n	80088f6 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 80088a8:	69fb      	ldr	r3, [r7, #28]
 80088aa:	68db      	ldr	r3, [r3, #12]
 80088ac:	69fa      	ldr	r2, [r7, #28]
 80088ae:	429a      	cmp	r2, r3
 80088b0:	d106      	bne.n	80088c0 <tcp_input+0x31c>
 80088b2:	4b87      	ldr	r3, [pc, #540]	; (8008ad0 <tcp_input+0x52c>)
 80088b4:	f240 120d 	movw	r2, #269	; 0x10d
 80088b8:	4986      	ldr	r1, [pc, #536]	; (8008ad4 <tcp_input+0x530>)
 80088ba:	4887      	ldr	r0, [pc, #540]	; (8008ad8 <tcp_input+0x534>)
 80088bc:	f006 f83e 	bl	800e93c <iprintf>
      if (prev != NULL) {
 80088c0:	69bb      	ldr	r3, [r7, #24]
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d00a      	beq.n	80088dc <tcp_input+0x338>
        prev->next = pcb->next;
 80088c6:	69fb      	ldr	r3, [r7, #28]
 80088c8:	68da      	ldr	r2, [r3, #12]
 80088ca:	69bb      	ldr	r3, [r7, #24]
 80088cc:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 80088ce:	4b83      	ldr	r3, [pc, #524]	; (8008adc <tcp_input+0x538>)
 80088d0:	681a      	ldr	r2, [r3, #0]
 80088d2:	69fb      	ldr	r3, [r7, #28]
 80088d4:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 80088d6:	4a81      	ldr	r2, [pc, #516]	; (8008adc <tcp_input+0x538>)
 80088d8:	69fb      	ldr	r3, [r7, #28]
 80088da:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 80088dc:	69fb      	ldr	r3, [r7, #28]
 80088de:	68db      	ldr	r3, [r3, #12]
 80088e0:	69fa      	ldr	r2, [r7, #28]
 80088e2:	429a      	cmp	r2, r3
 80088e4:	d111      	bne.n	800890a <tcp_input+0x366>
 80088e6:	4b7a      	ldr	r3, [pc, #488]	; (8008ad0 <tcp_input+0x52c>)
 80088e8:	f240 1215 	movw	r2, #277	; 0x115
 80088ec:	497c      	ldr	r1, [pc, #496]	; (8008ae0 <tcp_input+0x53c>)
 80088ee:	487a      	ldr	r0, [pc, #488]	; (8008ad8 <tcp_input+0x534>)
 80088f0:	f006 f824 	bl	800e93c <iprintf>
      break;
 80088f4:	e009      	b.n	800890a <tcp_input+0x366>
    }
    prev = pcb;
 80088f6:	69fb      	ldr	r3, [r7, #28]
 80088f8:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80088fa:	69fb      	ldr	r3, [r7, #28]
 80088fc:	68db      	ldr	r3, [r3, #12]
 80088fe:	61fb      	str	r3, [r7, #28]
 8008900:	69fb      	ldr	r3, [r7, #28]
 8008902:	2b00      	cmp	r3, #0
 8008904:	f47f af5e 	bne.w	80087c4 <tcp_input+0x220>
 8008908:	e000      	b.n	800890c <tcp_input+0x368>
      break;
 800890a:	bf00      	nop
  }

  if (pcb == NULL) {
 800890c:	69fb      	ldr	r3, [r7, #28]
 800890e:	2b00      	cmp	r3, #0
 8008910:	f040 8095 	bne.w	8008a3e <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8008914:	4b73      	ldr	r3, [pc, #460]	; (8008ae4 <tcp_input+0x540>)
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	61fb      	str	r3, [r7, #28]
 800891a:	e03f      	b.n	800899c <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800891c:	69fb      	ldr	r3, [r7, #28]
 800891e:	7d1b      	ldrb	r3, [r3, #20]
 8008920:	2b0a      	cmp	r3, #10
 8008922:	d006      	beq.n	8008932 <tcp_input+0x38e>
 8008924:	4b6a      	ldr	r3, [pc, #424]	; (8008ad0 <tcp_input+0x52c>)
 8008926:	f240 121f 	movw	r2, #287	; 0x11f
 800892a:	496f      	ldr	r1, [pc, #444]	; (8008ae8 <tcp_input+0x544>)
 800892c:	486a      	ldr	r0, [pc, #424]	; (8008ad8 <tcp_input+0x534>)
 800892e:	f006 f805 	bl	800e93c <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8008932:	69fb      	ldr	r3, [r7, #28]
 8008934:	7a1b      	ldrb	r3, [r3, #8]
 8008936:	2b00      	cmp	r3, #0
 8008938:	d009      	beq.n	800894e <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800893a:	69fb      	ldr	r3, [r7, #28]
 800893c:	7a1a      	ldrb	r2, [r3, #8]
 800893e:	4b63      	ldr	r3, [pc, #396]	; (8008acc <tcp_input+0x528>)
 8008940:	685b      	ldr	r3, [r3, #4]
 8008942:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008946:	3301      	adds	r3, #1
 8008948:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800894a:	429a      	cmp	r2, r3
 800894c:	d122      	bne.n	8008994 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800894e:	69fb      	ldr	r3, [r7, #28]
 8008950:	8b1a      	ldrh	r2, [r3, #24]
 8008952:	4b5d      	ldr	r3, [pc, #372]	; (8008ac8 <tcp_input+0x524>)
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	881b      	ldrh	r3, [r3, #0]
 8008958:	b29b      	uxth	r3, r3
 800895a:	429a      	cmp	r2, r3
 800895c:	d11b      	bne.n	8008996 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800895e:	69fb      	ldr	r3, [r7, #28]
 8008960:	8ada      	ldrh	r2, [r3, #22]
 8008962:	4b59      	ldr	r3, [pc, #356]	; (8008ac8 <tcp_input+0x524>)
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	885b      	ldrh	r3, [r3, #2]
 8008968:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800896a:	429a      	cmp	r2, r3
 800896c:	d113      	bne.n	8008996 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800896e:	69fb      	ldr	r3, [r7, #28]
 8008970:	685a      	ldr	r2, [r3, #4]
 8008972:	4b56      	ldr	r3, [pc, #344]	; (8008acc <tcp_input+0x528>)
 8008974:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8008976:	429a      	cmp	r2, r3
 8008978:	d10d      	bne.n	8008996 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800897a:	69fb      	ldr	r3, [r7, #28]
 800897c:	681a      	ldr	r2, [r3, #0]
 800897e:	4b53      	ldr	r3, [pc, #332]	; (8008acc <tcp_input+0x528>)
 8008980:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8008982:	429a      	cmp	r2, r3
 8008984:	d107      	bne.n	8008996 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8008986:	69f8      	ldr	r0, [r7, #28]
 8008988:	f000 fb52 	bl	8009030 <tcp_timewait_input>
        }
        pbuf_free(p);
 800898c:	6878      	ldr	r0, [r7, #4]
 800898e:	f7fd ffed 	bl	800696c <pbuf_free>
        return;
 8008992:	e1ee      	b.n	8008d72 <tcp_input+0x7ce>
        continue;
 8008994:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8008996:	69fb      	ldr	r3, [r7, #28]
 8008998:	68db      	ldr	r3, [r3, #12]
 800899a:	61fb      	str	r3, [r7, #28]
 800899c:	69fb      	ldr	r3, [r7, #28]
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d1bc      	bne.n	800891c <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 80089a2:	2300      	movs	r3, #0
 80089a4:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80089a6:	4b51      	ldr	r3, [pc, #324]	; (8008aec <tcp_input+0x548>)
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	617b      	str	r3, [r7, #20]
 80089ac:	e02a      	b.n	8008a04 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 80089ae:	697b      	ldr	r3, [r7, #20]
 80089b0:	7a1b      	ldrb	r3, [r3, #8]
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d00c      	beq.n	80089d0 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80089b6:	697b      	ldr	r3, [r7, #20]
 80089b8:	7a1a      	ldrb	r2, [r3, #8]
 80089ba:	4b44      	ldr	r3, [pc, #272]	; (8008acc <tcp_input+0x528>)
 80089bc:	685b      	ldr	r3, [r3, #4]
 80089be:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80089c2:	3301      	adds	r3, #1
 80089c4:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 80089c6:	429a      	cmp	r2, r3
 80089c8:	d002      	beq.n	80089d0 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 80089ca:	697b      	ldr	r3, [r7, #20]
 80089cc:	61bb      	str	r3, [r7, #24]
        continue;
 80089ce:	e016      	b.n	80089fe <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 80089d0:	697b      	ldr	r3, [r7, #20]
 80089d2:	8ada      	ldrh	r2, [r3, #22]
 80089d4:	4b3c      	ldr	r3, [pc, #240]	; (8008ac8 <tcp_input+0x524>)
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	885b      	ldrh	r3, [r3, #2]
 80089da:	b29b      	uxth	r3, r3
 80089dc:	429a      	cmp	r2, r3
 80089de:	d10c      	bne.n	80089fa <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 80089e0:	697b      	ldr	r3, [r7, #20]
 80089e2:	681a      	ldr	r2, [r3, #0]
 80089e4:	4b39      	ldr	r3, [pc, #228]	; (8008acc <tcp_input+0x528>)
 80089e6:	695b      	ldr	r3, [r3, #20]
 80089e8:	429a      	cmp	r2, r3
 80089ea:	d00f      	beq.n	8008a0c <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 80089ec:	697b      	ldr	r3, [r7, #20]
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d00d      	beq.n	8008a0e <tcp_input+0x46a>
 80089f2:	697b      	ldr	r3, [r7, #20]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d009      	beq.n	8008a0e <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 80089fa:	697b      	ldr	r3, [r7, #20]
 80089fc:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80089fe:	697b      	ldr	r3, [r7, #20]
 8008a00:	68db      	ldr	r3, [r3, #12]
 8008a02:	617b      	str	r3, [r7, #20]
 8008a04:	697b      	ldr	r3, [r7, #20]
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d1d1      	bne.n	80089ae <tcp_input+0x40a>
 8008a0a:	e000      	b.n	8008a0e <tcp_input+0x46a>
            break;
 8008a0c:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8008a0e:	697b      	ldr	r3, [r7, #20]
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d014      	beq.n	8008a3e <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8008a14:	69bb      	ldr	r3, [r7, #24]
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d00a      	beq.n	8008a30 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8008a1a:	697b      	ldr	r3, [r7, #20]
 8008a1c:	68da      	ldr	r2, [r3, #12]
 8008a1e:	69bb      	ldr	r3, [r7, #24]
 8008a20:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8008a22:	4b32      	ldr	r3, [pc, #200]	; (8008aec <tcp_input+0x548>)
 8008a24:	681a      	ldr	r2, [r3, #0]
 8008a26:	697b      	ldr	r3, [r7, #20]
 8008a28:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8008a2a:	4a30      	ldr	r2, [pc, #192]	; (8008aec <tcp_input+0x548>)
 8008a2c:	697b      	ldr	r3, [r7, #20]
 8008a2e:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8008a30:	6978      	ldr	r0, [r7, #20]
 8008a32:	f000 f9ff 	bl	8008e34 <tcp_listen_input>
      }
      pbuf_free(p);
 8008a36:	6878      	ldr	r0, [r7, #4]
 8008a38:	f7fd ff98 	bl	800696c <pbuf_free>
      return;
 8008a3c:	e199      	b.n	8008d72 <tcp_input+0x7ce>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8008a3e:	69fb      	ldr	r3, [r7, #28]
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	f000 8160 	beq.w	8008d06 <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8008a46:	4b2a      	ldr	r3, [pc, #168]	; (8008af0 <tcp_input+0x54c>)
 8008a48:	2200      	movs	r2, #0
 8008a4a:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	891a      	ldrh	r2, [r3, #8]
 8008a50:	4b27      	ldr	r3, [pc, #156]	; (8008af0 <tcp_input+0x54c>)
 8008a52:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8008a54:	4a26      	ldr	r2, [pc, #152]	; (8008af0 <tcp_input+0x54c>)
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8008a5a:	4b1b      	ldr	r3, [pc, #108]	; (8008ac8 <tcp_input+0x524>)
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	4a24      	ldr	r2, [pc, #144]	; (8008af0 <tcp_input+0x54c>)
 8008a60:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8008a62:	4b24      	ldr	r3, [pc, #144]	; (8008af4 <tcp_input+0x550>)
 8008a64:	2200      	movs	r2, #0
 8008a66:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8008a68:	4b23      	ldr	r3, [pc, #140]	; (8008af8 <tcp_input+0x554>)
 8008a6a:	2200      	movs	r2, #0
 8008a6c:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8008a6e:	4b23      	ldr	r3, [pc, #140]	; (8008afc <tcp_input+0x558>)
 8008a70:	2200      	movs	r2, #0
 8008a72:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8008a74:	4b22      	ldr	r3, [pc, #136]	; (8008b00 <tcp_input+0x55c>)
 8008a76:	781b      	ldrb	r3, [r3, #0]
 8008a78:	f003 0308 	and.w	r3, r3, #8
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d006      	beq.n	8008a8e <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	7b5b      	ldrb	r3, [r3, #13]
 8008a84:	f043 0301 	orr.w	r3, r3, #1
 8008a88:	b2da      	uxtb	r2, r3
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8008a8e:	69fb      	ldr	r3, [r7, #28]
 8008a90:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d038      	beq.n	8008b08 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8008a96:	69f8      	ldr	r0, [r7, #28]
 8008a98:	f7ff f940 	bl	8007d1c <tcp_process_refused_data>
 8008a9c:	4603      	mov	r3, r0
 8008a9e:	f113 0f0d 	cmn.w	r3, #13
 8008aa2:	d007      	beq.n	8008ab4 <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8008aa4:	69fb      	ldr	r3, [r7, #28]
 8008aa6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d02d      	beq.n	8008b08 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8008aac:	4b15      	ldr	r3, [pc, #84]	; (8008b04 <tcp_input+0x560>)
 8008aae:	881b      	ldrh	r3, [r3, #0]
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d029      	beq.n	8008b08 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8008ab4:	69fb      	ldr	r3, [r7, #28]
 8008ab6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	f040 8104 	bne.w	8008cc6 <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8008abe:	69f8      	ldr	r0, [r7, #28]
 8008ac0:	f003 f9ce 	bl	800be60 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8008ac4:	e0ff      	b.n	8008cc6 <tcp_input+0x722>
 8008ac6:	bf00      	nop
 8008ac8:	200000d4 	.word	0x200000d4
 8008acc:	20003460 	.word	0x20003460
 8008ad0:	080109f8 	.word	0x080109f8
 8008ad4:	08010b24 	.word	0x08010b24
 8008ad8:	08010a44 	.word	0x08010a44
 8008adc:	20008ae0 	.word	0x20008ae0
 8008ae0:	08010b50 	.word	0x08010b50
 8008ae4:	20008af0 	.word	0x20008af0
 8008ae8:	08010b7c 	.word	0x08010b7c
 8008aec:	20008ae8 	.word	0x20008ae8
 8008af0:	200000c4 	.word	0x200000c4
 8008af4:	200000f4 	.word	0x200000f4
 8008af8:	200000f1 	.word	0x200000f1
 8008afc:	200000ec 	.word	0x200000ec
 8008b00:	200000f0 	.word	0x200000f0
 8008b04:	200000ee 	.word	0x200000ee
      }
    }
    tcp_input_pcb = pcb;
 8008b08:	4a9b      	ldr	r2, [pc, #620]	; (8008d78 <tcp_input+0x7d4>)
 8008b0a:	69fb      	ldr	r3, [r7, #28]
 8008b0c:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8008b0e:	69f8      	ldr	r0, [r7, #28]
 8008b10:	f000 fb0a 	bl	8009128 <tcp_process>
 8008b14:	4603      	mov	r3, r0
 8008b16:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8008b18:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008b1c:	f113 0f0d 	cmn.w	r3, #13
 8008b20:	f000 80d3 	beq.w	8008cca <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 8008b24:	4b95      	ldr	r3, [pc, #596]	; (8008d7c <tcp_input+0x7d8>)
 8008b26:	781b      	ldrb	r3, [r3, #0]
 8008b28:	f003 0308 	and.w	r3, r3, #8
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d015      	beq.n	8008b5c <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8008b30:	69fb      	ldr	r3, [r7, #28]
 8008b32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d008      	beq.n	8008b4c <tcp_input+0x5a8>
 8008b3a:	69fb      	ldr	r3, [r7, #28]
 8008b3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008b40:	69fa      	ldr	r2, [r7, #28]
 8008b42:	6912      	ldr	r2, [r2, #16]
 8008b44:	f06f 010d 	mvn.w	r1, #13
 8008b48:	4610      	mov	r0, r2
 8008b4a:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8008b4c:	69f9      	ldr	r1, [r7, #28]
 8008b4e:	488c      	ldr	r0, [pc, #560]	; (8008d80 <tcp_input+0x7dc>)
 8008b50:	f7ff fbb0 	bl	80082b4 <tcp_pcb_remove>
        tcp_free(pcb);
 8008b54:	69f8      	ldr	r0, [r7, #28]
 8008b56:	f7fe f9a9 	bl	8006eac <tcp_free>
 8008b5a:	e0c1      	b.n	8008ce0 <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 8008b5c:	2300      	movs	r3, #0
 8008b5e:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8008b60:	4b88      	ldr	r3, [pc, #544]	; (8008d84 <tcp_input+0x7e0>)
 8008b62:	881b      	ldrh	r3, [r3, #0]
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d01d      	beq.n	8008ba4 <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8008b68:	4b86      	ldr	r3, [pc, #536]	; (8008d84 <tcp_input+0x7e0>)
 8008b6a:	881b      	ldrh	r3, [r3, #0]
 8008b6c:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8008b6e:	69fb      	ldr	r3, [r7, #28]
 8008b70:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d00a      	beq.n	8008b8e <tcp_input+0x5ea>
 8008b78:	69fb      	ldr	r3, [r7, #28]
 8008b7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008b7e:	69fa      	ldr	r2, [r7, #28]
 8008b80:	6910      	ldr	r0, [r2, #16]
 8008b82:	89fa      	ldrh	r2, [r7, #14]
 8008b84:	69f9      	ldr	r1, [r7, #28]
 8008b86:	4798      	blx	r3
 8008b88:	4603      	mov	r3, r0
 8008b8a:	74fb      	strb	r3, [r7, #19]
 8008b8c:	e001      	b.n	8008b92 <tcp_input+0x5ee>
 8008b8e:	2300      	movs	r3, #0
 8008b90:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8008b92:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008b96:	f113 0f0d 	cmn.w	r3, #13
 8008b9a:	f000 8098 	beq.w	8008cce <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 8008b9e:	4b79      	ldr	r3, [pc, #484]	; (8008d84 <tcp_input+0x7e0>)
 8008ba0:	2200      	movs	r2, #0
 8008ba2:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8008ba4:	69f8      	ldr	r0, [r7, #28]
 8008ba6:	f000 f905 	bl	8008db4 <tcp_input_delayed_close>
 8008baa:	4603      	mov	r3, r0
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	f040 8090 	bne.w	8008cd2 <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8008bb2:	4b75      	ldr	r3, [pc, #468]	; (8008d88 <tcp_input+0x7e4>)
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d041      	beq.n	8008c3e <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8008bba:	69fb      	ldr	r3, [r7, #28]
 8008bbc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d006      	beq.n	8008bd0 <tcp_input+0x62c>
 8008bc2:	4b72      	ldr	r3, [pc, #456]	; (8008d8c <tcp_input+0x7e8>)
 8008bc4:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8008bc8:	4971      	ldr	r1, [pc, #452]	; (8008d90 <tcp_input+0x7ec>)
 8008bca:	4872      	ldr	r0, [pc, #456]	; (8008d94 <tcp_input+0x7f0>)
 8008bcc:	f005 feb6 	bl	800e93c <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8008bd0:	69fb      	ldr	r3, [r7, #28]
 8008bd2:	8b5b      	ldrh	r3, [r3, #26]
 8008bd4:	f003 0310 	and.w	r3, r3, #16
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d008      	beq.n	8008bee <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8008bdc:	4b6a      	ldr	r3, [pc, #424]	; (8008d88 <tcp_input+0x7e4>)
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	4618      	mov	r0, r3
 8008be2:	f7fd fec3 	bl	800696c <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8008be6:	69f8      	ldr	r0, [r7, #28]
 8008be8:	f7fe fc40 	bl	800746c <tcp_abort>
            goto aborted;
 8008bec:	e078      	b.n	8008ce0 <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8008bee:	69fb      	ldr	r3, [r7, #28]
 8008bf0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d00c      	beq.n	8008c12 <tcp_input+0x66e>
 8008bf8:	69fb      	ldr	r3, [r7, #28]
 8008bfa:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8008bfe:	69fb      	ldr	r3, [r7, #28]
 8008c00:	6918      	ldr	r0, [r3, #16]
 8008c02:	4b61      	ldr	r3, [pc, #388]	; (8008d88 <tcp_input+0x7e4>)
 8008c04:	681a      	ldr	r2, [r3, #0]
 8008c06:	2300      	movs	r3, #0
 8008c08:	69f9      	ldr	r1, [r7, #28]
 8008c0a:	47a0      	blx	r4
 8008c0c:	4603      	mov	r3, r0
 8008c0e:	74fb      	strb	r3, [r7, #19]
 8008c10:	e008      	b.n	8008c24 <tcp_input+0x680>
 8008c12:	4b5d      	ldr	r3, [pc, #372]	; (8008d88 <tcp_input+0x7e4>)
 8008c14:	681a      	ldr	r2, [r3, #0]
 8008c16:	2300      	movs	r3, #0
 8008c18:	69f9      	ldr	r1, [r7, #28]
 8008c1a:	2000      	movs	r0, #0
 8008c1c:	f7ff f952 	bl	8007ec4 <tcp_recv_null>
 8008c20:	4603      	mov	r3, r0
 8008c22:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8008c24:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008c28:	f113 0f0d 	cmn.w	r3, #13
 8008c2c:	d053      	beq.n	8008cd6 <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8008c2e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d003      	beq.n	8008c3e <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8008c36:	4b54      	ldr	r3, [pc, #336]	; (8008d88 <tcp_input+0x7e4>)
 8008c38:	681a      	ldr	r2, [r3, #0]
 8008c3a:	69fb      	ldr	r3, [r7, #28]
 8008c3c:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8008c3e:	4b4f      	ldr	r3, [pc, #316]	; (8008d7c <tcp_input+0x7d8>)
 8008c40:	781b      	ldrb	r3, [r3, #0]
 8008c42:	f003 0320 	and.w	r3, r3, #32
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d030      	beq.n	8008cac <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 8008c4a:	69fb      	ldr	r3, [r7, #28]
 8008c4c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d009      	beq.n	8008c66 <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8008c52:	69fb      	ldr	r3, [r7, #28]
 8008c54:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008c56:	7b5a      	ldrb	r2, [r3, #13]
 8008c58:	69fb      	ldr	r3, [r7, #28]
 8008c5a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008c5c:	f042 0220 	orr.w	r2, r2, #32
 8008c60:	b2d2      	uxtb	r2, r2
 8008c62:	735a      	strb	r2, [r3, #13]
 8008c64:	e022      	b.n	8008cac <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8008c66:	69fb      	ldr	r3, [r7, #28]
 8008c68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008c6a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8008c6e:	d005      	beq.n	8008c7c <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 8008c70:	69fb      	ldr	r3, [r7, #28]
 8008c72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008c74:	3301      	adds	r3, #1
 8008c76:	b29a      	uxth	r2, r3
 8008c78:	69fb      	ldr	r3, [r7, #28]
 8008c7a:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8008c7c:	69fb      	ldr	r3, [r7, #28]
 8008c7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d00b      	beq.n	8008c9e <tcp_input+0x6fa>
 8008c86:	69fb      	ldr	r3, [r7, #28]
 8008c88:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8008c8c:	69fb      	ldr	r3, [r7, #28]
 8008c8e:	6918      	ldr	r0, [r3, #16]
 8008c90:	2300      	movs	r3, #0
 8008c92:	2200      	movs	r2, #0
 8008c94:	69f9      	ldr	r1, [r7, #28]
 8008c96:	47a0      	blx	r4
 8008c98:	4603      	mov	r3, r0
 8008c9a:	74fb      	strb	r3, [r7, #19]
 8008c9c:	e001      	b.n	8008ca2 <tcp_input+0x6fe>
 8008c9e:	2300      	movs	r3, #0
 8008ca0:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8008ca2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008ca6:	f113 0f0d 	cmn.w	r3, #13
 8008caa:	d016      	beq.n	8008cda <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8008cac:	4b32      	ldr	r3, [pc, #200]	; (8008d78 <tcp_input+0x7d4>)
 8008cae:	2200      	movs	r2, #0
 8008cb0:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8008cb2:	69f8      	ldr	r0, [r7, #28]
 8008cb4:	f000 f87e 	bl	8008db4 <tcp_input_delayed_close>
 8008cb8:	4603      	mov	r3, r0
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d10f      	bne.n	8008cde <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8008cbe:	69f8      	ldr	r0, [r7, #28]
 8008cc0:	f002 fab6 	bl	800b230 <tcp_output>
 8008cc4:	e00c      	b.n	8008ce0 <tcp_input+0x73c>
        goto aborted;
 8008cc6:	bf00      	nop
 8008cc8:	e00a      	b.n	8008ce0 <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8008cca:	bf00      	nop
 8008ccc:	e008      	b.n	8008ce0 <tcp_input+0x73c>
              goto aborted;
 8008cce:	bf00      	nop
 8008cd0:	e006      	b.n	8008ce0 <tcp_input+0x73c>
          goto aborted;
 8008cd2:	bf00      	nop
 8008cd4:	e004      	b.n	8008ce0 <tcp_input+0x73c>
            goto aborted;
 8008cd6:	bf00      	nop
 8008cd8:	e002      	b.n	8008ce0 <tcp_input+0x73c>
              goto aborted;
 8008cda:	bf00      	nop
 8008cdc:	e000      	b.n	8008ce0 <tcp_input+0x73c>
          goto aborted;
 8008cde:	bf00      	nop
    tcp_input_pcb = NULL;
 8008ce0:	4b25      	ldr	r3, [pc, #148]	; (8008d78 <tcp_input+0x7d4>)
 8008ce2:	2200      	movs	r2, #0
 8008ce4:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8008ce6:	4b28      	ldr	r3, [pc, #160]	; (8008d88 <tcp_input+0x7e4>)
 8008ce8:	2200      	movs	r2, #0
 8008cea:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8008cec:	4b2a      	ldr	r3, [pc, #168]	; (8008d98 <tcp_input+0x7f4>)
 8008cee:	685b      	ldr	r3, [r3, #4]
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d03d      	beq.n	8008d70 <tcp_input+0x7cc>
      pbuf_free(inseg.p);
 8008cf4:	4b28      	ldr	r3, [pc, #160]	; (8008d98 <tcp_input+0x7f4>)
 8008cf6:	685b      	ldr	r3, [r3, #4]
 8008cf8:	4618      	mov	r0, r3
 8008cfa:	f7fd fe37 	bl	800696c <pbuf_free>
      inseg.p = NULL;
 8008cfe:	4b26      	ldr	r3, [pc, #152]	; (8008d98 <tcp_input+0x7f4>)
 8008d00:	2200      	movs	r2, #0
 8008d02:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8008d04:	e034      	b.n	8008d70 <tcp_input+0x7cc>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8008d06:	4b25      	ldr	r3, [pc, #148]	; (8008d9c <tcp_input+0x7f8>)
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	899b      	ldrh	r3, [r3, #12]
 8008d0c:	b29b      	uxth	r3, r3
 8008d0e:	4618      	mov	r0, r3
 8008d10:	f7fc fba2 	bl	8005458 <lwip_htons>
 8008d14:	4603      	mov	r3, r0
 8008d16:	b2db      	uxtb	r3, r3
 8008d18:	f003 0304 	and.w	r3, r3, #4
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d118      	bne.n	8008d52 <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008d20:	4b1f      	ldr	r3, [pc, #124]	; (8008da0 <tcp_input+0x7fc>)
 8008d22:	6819      	ldr	r1, [r3, #0]
 8008d24:	4b1f      	ldr	r3, [pc, #124]	; (8008da4 <tcp_input+0x800>)
 8008d26:	881b      	ldrh	r3, [r3, #0]
 8008d28:	461a      	mov	r2, r3
 8008d2a:	4b1f      	ldr	r3, [pc, #124]	; (8008da8 <tcp_input+0x804>)
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008d30:	4b1a      	ldr	r3, [pc, #104]	; (8008d9c <tcp_input+0x7f8>)
 8008d32:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008d34:	885b      	ldrh	r3, [r3, #2]
 8008d36:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008d38:	4a18      	ldr	r2, [pc, #96]	; (8008d9c <tcp_input+0x7f8>)
 8008d3a:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008d3c:	8812      	ldrh	r2, [r2, #0]
 8008d3e:	b292      	uxth	r2, r2
 8008d40:	9202      	str	r2, [sp, #8]
 8008d42:	9301      	str	r3, [sp, #4]
 8008d44:	4b19      	ldr	r3, [pc, #100]	; (8008dac <tcp_input+0x808>)
 8008d46:	9300      	str	r3, [sp, #0]
 8008d48:	4b19      	ldr	r3, [pc, #100]	; (8008db0 <tcp_input+0x80c>)
 8008d4a:	4602      	mov	r2, r0
 8008d4c:	2000      	movs	r0, #0
 8008d4e:	f003 f835 	bl	800bdbc <tcp_rst>
    pbuf_free(p);
 8008d52:	6878      	ldr	r0, [r7, #4]
 8008d54:	f7fd fe0a 	bl	800696c <pbuf_free>
  return;
 8008d58:	e00a      	b.n	8008d70 <tcp_input+0x7cc>
    goto dropped;
 8008d5a:	bf00      	nop
 8008d5c:	e004      	b.n	8008d68 <tcp_input+0x7c4>
dropped:
 8008d5e:	bf00      	nop
 8008d60:	e002      	b.n	8008d68 <tcp_input+0x7c4>
      goto dropped;
 8008d62:	bf00      	nop
 8008d64:	e000      	b.n	8008d68 <tcp_input+0x7c4>
      goto dropped;
 8008d66:	bf00      	nop
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8008d68:	6878      	ldr	r0, [r7, #4]
 8008d6a:	f7fd fdff 	bl	800696c <pbuf_free>
 8008d6e:	e000      	b.n	8008d72 <tcp_input+0x7ce>
  return;
 8008d70:	bf00      	nop
}
 8008d72:	3724      	adds	r7, #36	; 0x24
 8008d74:	46bd      	mov	sp, r7
 8008d76:	bd90      	pop	{r4, r7, pc}
 8008d78:	20008af4 	.word	0x20008af4
 8008d7c:	200000f1 	.word	0x200000f1
 8008d80:	20008ae0 	.word	0x20008ae0
 8008d84:	200000ec 	.word	0x200000ec
 8008d88:	200000f4 	.word	0x200000f4
 8008d8c:	080109f8 	.word	0x080109f8
 8008d90:	08010bac 	.word	0x08010bac
 8008d94:	08010a44 	.word	0x08010a44
 8008d98:	200000c4 	.word	0x200000c4
 8008d9c:	200000d4 	.word	0x200000d4
 8008da0:	200000e8 	.word	0x200000e8
 8008da4:	200000ee 	.word	0x200000ee
 8008da8:	200000e4 	.word	0x200000e4
 8008dac:	20003470 	.word	0x20003470
 8008db0:	20003474 	.word	0x20003474

08008db4 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8008db4:	b580      	push	{r7, lr}
 8008db6:	b082      	sub	sp, #8
 8008db8:	af00      	add	r7, sp, #0
 8008dba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d106      	bne.n	8008dd0 <tcp_input_delayed_close+0x1c>
 8008dc2:	4b17      	ldr	r3, [pc, #92]	; (8008e20 <tcp_input_delayed_close+0x6c>)
 8008dc4:	f240 225a 	movw	r2, #602	; 0x25a
 8008dc8:	4916      	ldr	r1, [pc, #88]	; (8008e24 <tcp_input_delayed_close+0x70>)
 8008dca:	4817      	ldr	r0, [pc, #92]	; (8008e28 <tcp_input_delayed_close+0x74>)
 8008dcc:	f005 fdb6 	bl	800e93c <iprintf>

  if (recv_flags & TF_CLOSED) {
 8008dd0:	4b16      	ldr	r3, [pc, #88]	; (8008e2c <tcp_input_delayed_close+0x78>)
 8008dd2:	781b      	ldrb	r3, [r3, #0]
 8008dd4:	f003 0310 	and.w	r3, r3, #16
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d01c      	beq.n	8008e16 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	8b5b      	ldrh	r3, [r3, #26]
 8008de0:	f003 0310 	and.w	r3, r3, #16
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d10d      	bne.n	8008e04 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d008      	beq.n	8008e04 <tcp_input_delayed_close+0x50>
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008df8:	687a      	ldr	r2, [r7, #4]
 8008dfa:	6912      	ldr	r2, [r2, #16]
 8008dfc:	f06f 010e 	mvn.w	r1, #14
 8008e00:	4610      	mov	r0, r2
 8008e02:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8008e04:	6879      	ldr	r1, [r7, #4]
 8008e06:	480a      	ldr	r0, [pc, #40]	; (8008e30 <tcp_input_delayed_close+0x7c>)
 8008e08:	f7ff fa54 	bl	80082b4 <tcp_pcb_remove>
    tcp_free(pcb);
 8008e0c:	6878      	ldr	r0, [r7, #4]
 8008e0e:	f7fe f84d 	bl	8006eac <tcp_free>
    return 1;
 8008e12:	2301      	movs	r3, #1
 8008e14:	e000      	b.n	8008e18 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8008e16:	2300      	movs	r3, #0
}
 8008e18:	4618      	mov	r0, r3
 8008e1a:	3708      	adds	r7, #8
 8008e1c:	46bd      	mov	sp, r7
 8008e1e:	bd80      	pop	{r7, pc}
 8008e20:	080109f8 	.word	0x080109f8
 8008e24:	08010bc8 	.word	0x08010bc8
 8008e28:	08010a44 	.word	0x08010a44
 8008e2c:	200000f1 	.word	0x200000f1
 8008e30:	20008ae0 	.word	0x20008ae0

08008e34 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8008e34:	b590      	push	{r4, r7, lr}
 8008e36:	b08b      	sub	sp, #44	; 0x2c
 8008e38:	af04      	add	r7, sp, #16
 8008e3a:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8008e3c:	4b6f      	ldr	r3, [pc, #444]	; (8008ffc <tcp_listen_input+0x1c8>)
 8008e3e:	781b      	ldrb	r3, [r3, #0]
 8008e40:	f003 0304 	and.w	r3, r3, #4
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	f040 80d3 	bne.w	8008ff0 <tcp_listen_input+0x1bc>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d106      	bne.n	8008e5e <tcp_listen_input+0x2a>
 8008e50:	4b6b      	ldr	r3, [pc, #428]	; (8009000 <tcp_listen_input+0x1cc>)
 8008e52:	f240 2281 	movw	r2, #641	; 0x281
 8008e56:	496b      	ldr	r1, [pc, #428]	; (8009004 <tcp_listen_input+0x1d0>)
 8008e58:	486b      	ldr	r0, [pc, #428]	; (8009008 <tcp_listen_input+0x1d4>)
 8008e5a:	f005 fd6f 	bl	800e93c <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8008e5e:	4b67      	ldr	r3, [pc, #412]	; (8008ffc <tcp_listen_input+0x1c8>)
 8008e60:	781b      	ldrb	r3, [r3, #0]
 8008e62:	f003 0310 	and.w	r3, r3, #16
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d019      	beq.n	8008e9e <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008e6a:	4b68      	ldr	r3, [pc, #416]	; (800900c <tcp_listen_input+0x1d8>)
 8008e6c:	6819      	ldr	r1, [r3, #0]
 8008e6e:	4b68      	ldr	r3, [pc, #416]	; (8009010 <tcp_listen_input+0x1dc>)
 8008e70:	881b      	ldrh	r3, [r3, #0]
 8008e72:	461a      	mov	r2, r3
 8008e74:	4b67      	ldr	r3, [pc, #412]	; (8009014 <tcp_listen_input+0x1e0>)
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008e7a:	4b67      	ldr	r3, [pc, #412]	; (8009018 <tcp_listen_input+0x1e4>)
 8008e7c:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008e7e:	885b      	ldrh	r3, [r3, #2]
 8008e80:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008e82:	4a65      	ldr	r2, [pc, #404]	; (8009018 <tcp_listen_input+0x1e4>)
 8008e84:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008e86:	8812      	ldrh	r2, [r2, #0]
 8008e88:	b292      	uxth	r2, r2
 8008e8a:	9202      	str	r2, [sp, #8]
 8008e8c:	9301      	str	r3, [sp, #4]
 8008e8e:	4b63      	ldr	r3, [pc, #396]	; (800901c <tcp_listen_input+0x1e8>)
 8008e90:	9300      	str	r3, [sp, #0]
 8008e92:	4b63      	ldr	r3, [pc, #396]	; (8009020 <tcp_listen_input+0x1ec>)
 8008e94:	4602      	mov	r2, r0
 8008e96:	6878      	ldr	r0, [r7, #4]
 8008e98:	f002 ff90 	bl	800bdbc <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8008e9c:	e0aa      	b.n	8008ff4 <tcp_listen_input+0x1c0>
  } else if (flags & TCP_SYN) {
 8008e9e:	4b57      	ldr	r3, [pc, #348]	; (8008ffc <tcp_listen_input+0x1c8>)
 8008ea0:	781b      	ldrb	r3, [r3, #0]
 8008ea2:	f003 0302 	and.w	r3, r3, #2
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	f000 80a4 	beq.w	8008ff4 <tcp_listen_input+0x1c0>
    npcb = tcp_alloc(pcb->prio);
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	7d5b      	ldrb	r3, [r3, #21]
 8008eb0:	4618      	mov	r0, r3
 8008eb2:	f7ff f92b 	bl	800810c <tcp_alloc>
 8008eb6:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8008eb8:	697b      	ldr	r3, [r7, #20]
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d111      	bne.n	8008ee2 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	699b      	ldr	r3, [r3, #24]
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d00a      	beq.n	8008edc <tcp_listen_input+0xa8>
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	699b      	ldr	r3, [r3, #24]
 8008eca:	687a      	ldr	r2, [r7, #4]
 8008ecc:	6910      	ldr	r0, [r2, #16]
 8008ece:	f04f 32ff 	mov.w	r2, #4294967295
 8008ed2:	2100      	movs	r1, #0
 8008ed4:	4798      	blx	r3
 8008ed6:	4603      	mov	r3, r0
 8008ed8:	73bb      	strb	r3, [r7, #14]
      return;
 8008eda:	e08c      	b.n	8008ff6 <tcp_listen_input+0x1c2>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8008edc:	23f0      	movs	r3, #240	; 0xf0
 8008ede:	73bb      	strb	r3, [r7, #14]
      return;
 8008ee0:	e089      	b.n	8008ff6 <tcp_listen_input+0x1c2>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8008ee2:	4b50      	ldr	r3, [pc, #320]	; (8009024 <tcp_listen_input+0x1f0>)
 8008ee4:	695a      	ldr	r2, [r3, #20]
 8008ee6:	697b      	ldr	r3, [r7, #20]
 8008ee8:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8008eea:	4b4e      	ldr	r3, [pc, #312]	; (8009024 <tcp_listen_input+0x1f0>)
 8008eec:	691a      	ldr	r2, [r3, #16]
 8008eee:	697b      	ldr	r3, [r7, #20]
 8008ef0:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	8ada      	ldrh	r2, [r3, #22]
 8008ef6:	697b      	ldr	r3, [r7, #20]
 8008ef8:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8008efa:	4b47      	ldr	r3, [pc, #284]	; (8009018 <tcp_listen_input+0x1e4>)
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	881b      	ldrh	r3, [r3, #0]
 8008f00:	b29a      	uxth	r2, r3
 8008f02:	697b      	ldr	r3, [r7, #20]
 8008f04:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8008f06:	697b      	ldr	r3, [r7, #20]
 8008f08:	2203      	movs	r2, #3
 8008f0a:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8008f0c:	4b41      	ldr	r3, [pc, #260]	; (8009014 <tcp_listen_input+0x1e0>)
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	1c5a      	adds	r2, r3, #1
 8008f12:	697b      	ldr	r3, [r7, #20]
 8008f14:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8008f16:	697b      	ldr	r3, [r7, #20]
 8008f18:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008f1a:	697b      	ldr	r3, [r7, #20]
 8008f1c:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8008f1e:	6978      	ldr	r0, [r7, #20]
 8008f20:	f7ff fa5c 	bl	80083dc <tcp_next_iss>
 8008f24:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8008f26:	697b      	ldr	r3, [r7, #20]
 8008f28:	693a      	ldr	r2, [r7, #16]
 8008f2a:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8008f2c:	697b      	ldr	r3, [r7, #20]
 8008f2e:	693a      	ldr	r2, [r7, #16]
 8008f30:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 8008f32:	697b      	ldr	r3, [r7, #20]
 8008f34:	693a      	ldr	r2, [r7, #16]
 8008f36:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8008f38:	697b      	ldr	r3, [r7, #20]
 8008f3a:	693a      	ldr	r2, [r7, #16]
 8008f3c:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8008f3e:	4b35      	ldr	r3, [pc, #212]	; (8009014 <tcp_listen_input+0x1e0>)
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	1e5a      	subs	r2, r3, #1
 8008f44:	697b      	ldr	r3, [r7, #20]
 8008f46:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	691a      	ldr	r2, [r3, #16]
 8008f4c:	697b      	ldr	r3, [r7, #20]
 8008f4e:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8008f50:	697b      	ldr	r3, [r7, #20]
 8008f52:	687a      	ldr	r2, [r7, #4]
 8008f54:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	7a5b      	ldrb	r3, [r3, #9]
 8008f5a:	f003 030c 	and.w	r3, r3, #12
 8008f5e:	b2da      	uxtb	r2, r3
 8008f60:	697b      	ldr	r3, [r7, #20]
 8008f62:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	7a1a      	ldrb	r2, [r3, #8]
 8008f68:	697b      	ldr	r3, [r7, #20]
 8008f6a:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8008f6c:	4b2e      	ldr	r3, [pc, #184]	; (8009028 <tcp_listen_input+0x1f4>)
 8008f6e:	681a      	ldr	r2, [r3, #0]
 8008f70:	697b      	ldr	r3, [r7, #20]
 8008f72:	60da      	str	r2, [r3, #12]
 8008f74:	4a2c      	ldr	r2, [pc, #176]	; (8009028 <tcp_listen_input+0x1f4>)
 8008f76:	697b      	ldr	r3, [r7, #20]
 8008f78:	6013      	str	r3, [r2, #0]
 8008f7a:	f003 f8e1 	bl	800c140 <tcp_timer_needed>
 8008f7e:	4b2b      	ldr	r3, [pc, #172]	; (800902c <tcp_listen_input+0x1f8>)
 8008f80:	2201      	movs	r2, #1
 8008f82:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8008f84:	6978      	ldr	r0, [r7, #20]
 8008f86:	f001 fd8f 	bl	800aaa8 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8008f8a:	4b23      	ldr	r3, [pc, #140]	; (8009018 <tcp_listen_input+0x1e4>)
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	89db      	ldrh	r3, [r3, #14]
 8008f90:	b29a      	uxth	r2, r3
 8008f92:	697b      	ldr	r3, [r7, #20]
 8008f94:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8008f98:	697b      	ldr	r3, [r7, #20]
 8008f9a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8008f9e:	697b      	ldr	r3, [r7, #20]
 8008fa0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8008fa4:	697b      	ldr	r3, [r7, #20]
 8008fa6:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8008fa8:	697b      	ldr	r3, [r7, #20]
 8008faa:	3304      	adds	r3, #4
 8008fac:	4618      	mov	r0, r3
 8008fae:	f004 faa7 	bl	800d500 <ip4_route>
 8008fb2:	4601      	mov	r1, r0
 8008fb4:	697b      	ldr	r3, [r7, #20]
 8008fb6:	3304      	adds	r3, #4
 8008fb8:	461a      	mov	r2, r3
 8008fba:	4620      	mov	r0, r4
 8008fbc:	f7ff fa34 	bl	8008428 <tcp_eff_send_mss_netif>
 8008fc0:	4603      	mov	r3, r0
 8008fc2:	461a      	mov	r2, r3
 8008fc4:	697b      	ldr	r3, [r7, #20]
 8008fc6:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8008fc8:	2112      	movs	r1, #18
 8008fca:	6978      	ldr	r0, [r7, #20]
 8008fcc:	f002 f842 	bl	800b054 <tcp_enqueue_flags>
 8008fd0:	4603      	mov	r3, r0
 8008fd2:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8008fd4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d004      	beq.n	8008fe6 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8008fdc:	2100      	movs	r1, #0
 8008fde:	6978      	ldr	r0, [r7, #20]
 8008fe0:	f7fe f986 	bl	80072f0 <tcp_abandon>
      return;
 8008fe4:	e007      	b.n	8008ff6 <tcp_listen_input+0x1c2>
    tcp_output(npcb);
 8008fe6:	6978      	ldr	r0, [r7, #20]
 8008fe8:	f002 f922 	bl	800b230 <tcp_output>
  return;
 8008fec:	bf00      	nop
 8008fee:	e001      	b.n	8008ff4 <tcp_listen_input+0x1c0>
    return;
 8008ff0:	bf00      	nop
 8008ff2:	e000      	b.n	8008ff6 <tcp_listen_input+0x1c2>
  return;
 8008ff4:	bf00      	nop
}
 8008ff6:	371c      	adds	r7, #28
 8008ff8:	46bd      	mov	sp, r7
 8008ffa:	bd90      	pop	{r4, r7, pc}
 8008ffc:	200000f0 	.word	0x200000f0
 8009000:	080109f8 	.word	0x080109f8
 8009004:	08010bf0 	.word	0x08010bf0
 8009008:	08010a44 	.word	0x08010a44
 800900c:	200000e8 	.word	0x200000e8
 8009010:	200000ee 	.word	0x200000ee
 8009014:	200000e4 	.word	0x200000e4
 8009018:	200000d4 	.word	0x200000d4
 800901c:	20003470 	.word	0x20003470
 8009020:	20003474 	.word	0x20003474
 8009024:	20003460 	.word	0x20003460
 8009028:	20008ae0 	.word	0x20008ae0
 800902c:	20008adc 	.word	0x20008adc

08009030 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8009030:	b580      	push	{r7, lr}
 8009032:	b086      	sub	sp, #24
 8009034:	af04      	add	r7, sp, #16
 8009036:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8009038:	4b30      	ldr	r3, [pc, #192]	; (80090fc <tcp_timewait_input+0xcc>)
 800903a:	781b      	ldrb	r3, [r3, #0]
 800903c:	f003 0304 	and.w	r3, r3, #4
 8009040:	2b00      	cmp	r3, #0
 8009042:	d154      	bne.n	80090ee <tcp_timewait_input+0xbe>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	2b00      	cmp	r3, #0
 8009048:	d106      	bne.n	8009058 <tcp_timewait_input+0x28>
 800904a:	4b2d      	ldr	r3, [pc, #180]	; (8009100 <tcp_timewait_input+0xd0>)
 800904c:	f240 22ee 	movw	r2, #750	; 0x2ee
 8009050:	492c      	ldr	r1, [pc, #176]	; (8009104 <tcp_timewait_input+0xd4>)
 8009052:	482d      	ldr	r0, [pc, #180]	; (8009108 <tcp_timewait_input+0xd8>)
 8009054:	f005 fc72 	bl	800e93c <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8009058:	4b28      	ldr	r3, [pc, #160]	; (80090fc <tcp_timewait_input+0xcc>)
 800905a:	781b      	ldrb	r3, [r3, #0]
 800905c:	f003 0302 	and.w	r3, r3, #2
 8009060:	2b00      	cmp	r3, #0
 8009062:	d02a      	beq.n	80090ba <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8009064:	4b29      	ldr	r3, [pc, #164]	; (800910c <tcp_timewait_input+0xdc>)
 8009066:	681a      	ldr	r2, [r3, #0]
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800906c:	1ad3      	subs	r3, r2, r3
 800906e:	2b00      	cmp	r3, #0
 8009070:	db2d      	blt.n	80090ce <tcp_timewait_input+0x9e>
 8009072:	4b26      	ldr	r3, [pc, #152]	; (800910c <tcp_timewait_input+0xdc>)
 8009074:	681a      	ldr	r2, [r3, #0]
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800907a:	6879      	ldr	r1, [r7, #4]
 800907c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800907e:	440b      	add	r3, r1
 8009080:	1ad3      	subs	r3, r2, r3
 8009082:	2b00      	cmp	r3, #0
 8009084:	dc23      	bgt.n	80090ce <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009086:	4b22      	ldr	r3, [pc, #136]	; (8009110 <tcp_timewait_input+0xe0>)
 8009088:	6819      	ldr	r1, [r3, #0]
 800908a:	4b22      	ldr	r3, [pc, #136]	; (8009114 <tcp_timewait_input+0xe4>)
 800908c:	881b      	ldrh	r3, [r3, #0]
 800908e:	461a      	mov	r2, r3
 8009090:	4b1e      	ldr	r3, [pc, #120]	; (800910c <tcp_timewait_input+0xdc>)
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009096:	4b20      	ldr	r3, [pc, #128]	; (8009118 <tcp_timewait_input+0xe8>)
 8009098:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800909a:	885b      	ldrh	r3, [r3, #2]
 800909c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800909e:	4a1e      	ldr	r2, [pc, #120]	; (8009118 <tcp_timewait_input+0xe8>)
 80090a0:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80090a2:	8812      	ldrh	r2, [r2, #0]
 80090a4:	b292      	uxth	r2, r2
 80090a6:	9202      	str	r2, [sp, #8]
 80090a8:	9301      	str	r3, [sp, #4]
 80090aa:	4b1c      	ldr	r3, [pc, #112]	; (800911c <tcp_timewait_input+0xec>)
 80090ac:	9300      	str	r3, [sp, #0]
 80090ae:	4b1c      	ldr	r3, [pc, #112]	; (8009120 <tcp_timewait_input+0xf0>)
 80090b0:	4602      	mov	r2, r0
 80090b2:	6878      	ldr	r0, [r7, #4]
 80090b4:	f002 fe82 	bl	800bdbc <tcp_rst>
      return;
 80090b8:	e01c      	b.n	80090f4 <tcp_timewait_input+0xc4>
    }
  } else if (flags & TCP_FIN) {
 80090ba:	4b10      	ldr	r3, [pc, #64]	; (80090fc <tcp_timewait_input+0xcc>)
 80090bc:	781b      	ldrb	r3, [r3, #0]
 80090be:	f003 0301 	and.w	r3, r3, #1
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d003      	beq.n	80090ce <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 80090c6:	4b17      	ldr	r3, [pc, #92]	; (8009124 <tcp_timewait_input+0xf4>)
 80090c8:	681a      	ldr	r2, [r3, #0]
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 80090ce:	4b11      	ldr	r3, [pc, #68]	; (8009114 <tcp_timewait_input+0xe4>)
 80090d0:	881b      	ldrh	r3, [r3, #0]
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d00d      	beq.n	80090f2 <tcp_timewait_input+0xc2>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	8b5b      	ldrh	r3, [r3, #26]
 80090da:	f043 0302 	orr.w	r3, r3, #2
 80090de:	b29a      	uxth	r2, r3
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80090e4:	6878      	ldr	r0, [r7, #4]
 80090e6:	f002 f8a3 	bl	800b230 <tcp_output>
  }
  return;
 80090ea:	bf00      	nop
 80090ec:	e001      	b.n	80090f2 <tcp_timewait_input+0xc2>
    return;
 80090ee:	bf00      	nop
 80090f0:	e000      	b.n	80090f4 <tcp_timewait_input+0xc4>
  return;
 80090f2:	bf00      	nop
}
 80090f4:	3708      	adds	r7, #8
 80090f6:	46bd      	mov	sp, r7
 80090f8:	bd80      	pop	{r7, pc}
 80090fa:	bf00      	nop
 80090fc:	200000f0 	.word	0x200000f0
 8009100:	080109f8 	.word	0x080109f8
 8009104:	08010c10 	.word	0x08010c10
 8009108:	08010a44 	.word	0x08010a44
 800910c:	200000e4 	.word	0x200000e4
 8009110:	200000e8 	.word	0x200000e8
 8009114:	200000ee 	.word	0x200000ee
 8009118:	200000d4 	.word	0x200000d4
 800911c:	20003470 	.word	0x20003470
 8009120:	20003474 	.word	0x20003474
 8009124:	20008ae4 	.word	0x20008ae4

08009128 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8009128:	b590      	push	{r4, r7, lr}
 800912a:	b08d      	sub	sp, #52	; 0x34
 800912c:	af04      	add	r7, sp, #16
 800912e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8009130:	2300      	movs	r3, #0
 8009132:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8009134:	2300      	movs	r3, #0
 8009136:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	2b00      	cmp	r3, #0
 800913c:	d106      	bne.n	800914c <tcp_process+0x24>
 800913e:	4ba5      	ldr	r3, [pc, #660]	; (80093d4 <tcp_process+0x2ac>)
 8009140:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8009144:	49a4      	ldr	r1, [pc, #656]	; (80093d8 <tcp_process+0x2b0>)
 8009146:	48a5      	ldr	r0, [pc, #660]	; (80093dc <tcp_process+0x2b4>)
 8009148:	f005 fbf8 	bl	800e93c <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800914c:	4ba4      	ldr	r3, [pc, #656]	; (80093e0 <tcp_process+0x2b8>)
 800914e:	781b      	ldrb	r3, [r3, #0]
 8009150:	f003 0304 	and.w	r3, r3, #4
 8009154:	2b00      	cmp	r3, #0
 8009156:	d04e      	beq.n	80091f6 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	7d1b      	ldrb	r3, [r3, #20]
 800915c:	2b02      	cmp	r3, #2
 800915e:	d108      	bne.n	8009172 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009164:	4b9f      	ldr	r3, [pc, #636]	; (80093e4 <tcp_process+0x2bc>)
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	429a      	cmp	r2, r3
 800916a:	d123      	bne.n	80091b4 <tcp_process+0x8c>
        acceptable = 1;
 800916c:	2301      	movs	r3, #1
 800916e:	76fb      	strb	r3, [r7, #27]
 8009170:	e020      	b.n	80091b4 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009176:	4b9c      	ldr	r3, [pc, #624]	; (80093e8 <tcp_process+0x2c0>)
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	429a      	cmp	r2, r3
 800917c:	d102      	bne.n	8009184 <tcp_process+0x5c>
        acceptable = 1;
 800917e:	2301      	movs	r3, #1
 8009180:	76fb      	strb	r3, [r7, #27]
 8009182:	e017      	b.n	80091b4 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8009184:	4b98      	ldr	r3, [pc, #608]	; (80093e8 <tcp_process+0x2c0>)
 8009186:	681a      	ldr	r2, [r3, #0]
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800918c:	1ad3      	subs	r3, r2, r3
 800918e:	2b00      	cmp	r3, #0
 8009190:	db10      	blt.n	80091b4 <tcp_process+0x8c>
 8009192:	4b95      	ldr	r3, [pc, #596]	; (80093e8 <tcp_process+0x2c0>)
 8009194:	681a      	ldr	r2, [r3, #0]
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800919a:	6879      	ldr	r1, [r7, #4]
 800919c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800919e:	440b      	add	r3, r1
 80091a0:	1ad3      	subs	r3, r2, r3
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	dc06      	bgt.n	80091b4 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	8b5b      	ldrh	r3, [r3, #26]
 80091aa:	f043 0302 	orr.w	r3, r3, #2
 80091ae:	b29a      	uxth	r2, r3
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 80091b4:	7efb      	ldrb	r3, [r7, #27]
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d01b      	beq.n	80091f2 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	7d1b      	ldrb	r3, [r3, #20]
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d106      	bne.n	80091d0 <tcp_process+0xa8>
 80091c2:	4b84      	ldr	r3, [pc, #528]	; (80093d4 <tcp_process+0x2ac>)
 80091c4:	f44f 724e 	mov.w	r2, #824	; 0x338
 80091c8:	4988      	ldr	r1, [pc, #544]	; (80093ec <tcp_process+0x2c4>)
 80091ca:	4884      	ldr	r0, [pc, #528]	; (80093dc <tcp_process+0x2b4>)
 80091cc:	f005 fbb6 	bl	800e93c <iprintf>
      recv_flags |= TF_RESET;
 80091d0:	4b87      	ldr	r3, [pc, #540]	; (80093f0 <tcp_process+0x2c8>)
 80091d2:	781b      	ldrb	r3, [r3, #0]
 80091d4:	f043 0308 	orr.w	r3, r3, #8
 80091d8:	b2da      	uxtb	r2, r3
 80091da:	4b85      	ldr	r3, [pc, #532]	; (80093f0 <tcp_process+0x2c8>)
 80091dc:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	8b5b      	ldrh	r3, [r3, #26]
 80091e2:	f023 0301 	bic.w	r3, r3, #1
 80091e6:	b29a      	uxth	r2, r3
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 80091ec:	f06f 030d 	mvn.w	r3, #13
 80091f0:	e37a      	b.n	80098e8 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 80091f2:	2300      	movs	r3, #0
 80091f4:	e378      	b.n	80098e8 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 80091f6:	4b7a      	ldr	r3, [pc, #488]	; (80093e0 <tcp_process+0x2b8>)
 80091f8:	781b      	ldrb	r3, [r3, #0]
 80091fa:	f003 0302 	and.w	r3, r3, #2
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d010      	beq.n	8009224 <tcp_process+0xfc>
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	7d1b      	ldrb	r3, [r3, #20]
 8009206:	2b02      	cmp	r3, #2
 8009208:	d00c      	beq.n	8009224 <tcp_process+0xfc>
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	7d1b      	ldrb	r3, [r3, #20]
 800920e:	2b03      	cmp	r3, #3
 8009210:	d008      	beq.n	8009224 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	8b5b      	ldrh	r3, [r3, #26]
 8009216:	f043 0302 	orr.w	r3, r3, #2
 800921a:	b29a      	uxth	r2, r3
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8009220:	2300      	movs	r3, #0
 8009222:	e361      	b.n	80098e8 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	8b5b      	ldrh	r3, [r3, #26]
 8009228:	f003 0310 	and.w	r3, r3, #16
 800922c:	2b00      	cmp	r3, #0
 800922e:	d103      	bne.n	8009238 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8009230:	4b70      	ldr	r3, [pc, #448]	; (80093f4 <tcp_process+0x2cc>)
 8009232:	681a      	ldr	r2, [r3, #0]
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	2200      	movs	r2, #0
 800923c:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	2200      	movs	r2, #0
 8009244:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8009248:	6878      	ldr	r0, [r7, #4]
 800924a:	f001 fc2d 	bl	800aaa8 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	7d1b      	ldrb	r3, [r3, #20]
 8009252:	3b02      	subs	r3, #2
 8009254:	2b07      	cmp	r3, #7
 8009256:	f200 8337 	bhi.w	80098c8 <tcp_process+0x7a0>
 800925a:	a201      	add	r2, pc, #4	; (adr r2, 8009260 <tcp_process+0x138>)
 800925c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009260:	08009281 	.word	0x08009281
 8009264:	080094b1 	.word	0x080094b1
 8009268:	08009629 	.word	0x08009629
 800926c:	08009653 	.word	0x08009653
 8009270:	08009777 	.word	0x08009777
 8009274:	08009629 	.word	0x08009629
 8009278:	08009803 	.word	0x08009803
 800927c:	08009893 	.word	0x08009893
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8009280:	4b57      	ldr	r3, [pc, #348]	; (80093e0 <tcp_process+0x2b8>)
 8009282:	781b      	ldrb	r3, [r3, #0]
 8009284:	f003 0310 	and.w	r3, r3, #16
 8009288:	2b00      	cmp	r3, #0
 800928a:	f000 80e4 	beq.w	8009456 <tcp_process+0x32e>
 800928e:	4b54      	ldr	r3, [pc, #336]	; (80093e0 <tcp_process+0x2b8>)
 8009290:	781b      	ldrb	r3, [r3, #0]
 8009292:	f003 0302 	and.w	r3, r3, #2
 8009296:	2b00      	cmp	r3, #0
 8009298:	f000 80dd 	beq.w	8009456 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80092a0:	1c5a      	adds	r2, r3, #1
 80092a2:	4b50      	ldr	r3, [pc, #320]	; (80093e4 <tcp_process+0x2bc>)
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	429a      	cmp	r2, r3
 80092a8:	f040 80d5 	bne.w	8009456 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 80092ac:	4b4e      	ldr	r3, [pc, #312]	; (80093e8 <tcp_process+0x2c0>)
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	1c5a      	adds	r2, r3, #1
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 80092be:	4b49      	ldr	r3, [pc, #292]	; (80093e4 <tcp_process+0x2bc>)
 80092c0:	681a      	ldr	r2, [r3, #0]
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 80092c6:	4b4c      	ldr	r3, [pc, #304]	; (80093f8 <tcp_process+0x2d0>)
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	89db      	ldrh	r3, [r3, #14]
 80092cc:	b29a      	uxth	r2, r3
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 80092e0:	4b41      	ldr	r3, [pc, #260]	; (80093e8 <tcp_process+0x2c0>)
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	1e5a      	subs	r2, r3, #1
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	2204      	movs	r2, #4
 80092ee:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	3304      	adds	r3, #4
 80092f8:	4618      	mov	r0, r3
 80092fa:	f004 f901 	bl	800d500 <ip4_route>
 80092fe:	4601      	mov	r1, r0
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	3304      	adds	r3, #4
 8009304:	461a      	mov	r2, r3
 8009306:	4620      	mov	r0, r4
 8009308:	f7ff f88e 	bl	8008428 <tcp_eff_send_mss_netif>
 800930c:	4603      	mov	r3, r0
 800930e:	461a      	mov	r2, r3
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009318:	009a      	lsls	r2, r3, #2
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800931e:	005b      	lsls	r3, r3, #1
 8009320:	f241 111c 	movw	r1, #4380	; 0x111c
 8009324:	428b      	cmp	r3, r1
 8009326:	bf38      	it	cc
 8009328:	460b      	movcc	r3, r1
 800932a:	429a      	cmp	r2, r3
 800932c:	d204      	bcs.n	8009338 <tcp_process+0x210>
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009332:	009b      	lsls	r3, r3, #2
 8009334:	b29b      	uxth	r3, r3
 8009336:	e00d      	b.n	8009354 <tcp_process+0x22c>
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800933c:	005b      	lsls	r3, r3, #1
 800933e:	f241 121c 	movw	r2, #4380	; 0x111c
 8009342:	4293      	cmp	r3, r2
 8009344:	d904      	bls.n	8009350 <tcp_process+0x228>
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800934a:	005b      	lsls	r3, r3, #1
 800934c:	b29b      	uxth	r3, r3
 800934e:	e001      	b.n	8009354 <tcp_process+0x22c>
 8009350:	f241 131c 	movw	r3, #4380	; 0x111c
 8009354:	687a      	ldr	r2, [r7, #4]
 8009356:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009360:	2b00      	cmp	r3, #0
 8009362:	d106      	bne.n	8009372 <tcp_process+0x24a>
 8009364:	4b1b      	ldr	r3, [pc, #108]	; (80093d4 <tcp_process+0x2ac>)
 8009366:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800936a:	4924      	ldr	r1, [pc, #144]	; (80093fc <tcp_process+0x2d4>)
 800936c:	481b      	ldr	r0, [pc, #108]	; (80093dc <tcp_process+0x2b4>)
 800936e:	f005 fae5 	bl	800e93c <iprintf>
        --pcb->snd_queuelen;
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009378:	3b01      	subs	r3, #1
 800937a:	b29a      	uxth	r2, r3
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009386:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8009388:	69fb      	ldr	r3, [r7, #28]
 800938a:	2b00      	cmp	r3, #0
 800938c:	d111      	bne.n	80093b2 <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009392:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8009394:	69fb      	ldr	r3, [r7, #28]
 8009396:	2b00      	cmp	r3, #0
 8009398:	d106      	bne.n	80093a8 <tcp_process+0x280>
 800939a:	4b0e      	ldr	r3, [pc, #56]	; (80093d4 <tcp_process+0x2ac>)
 800939c:	f44f 725d 	mov.w	r2, #884	; 0x374
 80093a0:	4917      	ldr	r1, [pc, #92]	; (8009400 <tcp_process+0x2d8>)
 80093a2:	480e      	ldr	r0, [pc, #56]	; (80093dc <tcp_process+0x2b4>)
 80093a4:	f005 faca 	bl	800e93c <iprintf>
          pcb->unsent = rseg->next;
 80093a8:	69fb      	ldr	r3, [r7, #28]
 80093aa:	681a      	ldr	r2, [r3, #0]
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	66da      	str	r2, [r3, #108]	; 0x6c
 80093b0:	e003      	b.n	80093ba <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 80093b2:	69fb      	ldr	r3, [r7, #28]
 80093b4:	681a      	ldr	r2, [r3, #0]
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 80093ba:	69f8      	ldr	r0, [r7, #28]
 80093bc:	f7fe fd3e 	bl	8007e3c <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d11d      	bne.n	8009404 <tcp_process+0x2dc>
          pcb->rtime = -1;
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80093ce:	861a      	strh	r2, [r3, #48]	; 0x30
 80093d0:	e01f      	b.n	8009412 <tcp_process+0x2ea>
 80093d2:	bf00      	nop
 80093d4:	080109f8 	.word	0x080109f8
 80093d8:	08010c30 	.word	0x08010c30
 80093dc:	08010a44 	.word	0x08010a44
 80093e0:	200000f0 	.word	0x200000f0
 80093e4:	200000e8 	.word	0x200000e8
 80093e8:	200000e4 	.word	0x200000e4
 80093ec:	08010c4c 	.word	0x08010c4c
 80093f0:	200000f1 	.word	0x200000f1
 80093f4:	20008ae4 	.word	0x20008ae4
 80093f8:	200000d4 	.word	0x200000d4
 80093fc:	08010c6c 	.word	0x08010c6c
 8009400:	08010c84 	.word	0x08010c84
        } else {
          pcb->rtime = 0;
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	2200      	movs	r2, #0
 8009408:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	2200      	movs	r2, #0
 800940e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009418:	2b00      	cmp	r3, #0
 800941a:	d00a      	beq.n	8009432 <tcp_process+0x30a>
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009422:	687a      	ldr	r2, [r7, #4]
 8009424:	6910      	ldr	r0, [r2, #16]
 8009426:	2200      	movs	r2, #0
 8009428:	6879      	ldr	r1, [r7, #4]
 800942a:	4798      	blx	r3
 800942c:	4603      	mov	r3, r0
 800942e:	76bb      	strb	r3, [r7, #26]
 8009430:	e001      	b.n	8009436 <tcp_process+0x30e>
 8009432:	2300      	movs	r3, #0
 8009434:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8009436:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800943a:	f113 0f0d 	cmn.w	r3, #13
 800943e:	d102      	bne.n	8009446 <tcp_process+0x31e>
          return ERR_ABRT;
 8009440:	f06f 030c 	mvn.w	r3, #12
 8009444:	e250      	b.n	80098e8 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	8b5b      	ldrh	r3, [r3, #26]
 800944a:	f043 0302 	orr.w	r3, r3, #2
 800944e:	b29a      	uxth	r2, r3
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8009454:	e23a      	b.n	80098cc <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8009456:	4b9d      	ldr	r3, [pc, #628]	; (80096cc <tcp_process+0x5a4>)
 8009458:	781b      	ldrb	r3, [r3, #0]
 800945a:	f003 0310 	and.w	r3, r3, #16
 800945e:	2b00      	cmp	r3, #0
 8009460:	f000 8234 	beq.w	80098cc <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009464:	4b9a      	ldr	r3, [pc, #616]	; (80096d0 <tcp_process+0x5a8>)
 8009466:	6819      	ldr	r1, [r3, #0]
 8009468:	4b9a      	ldr	r3, [pc, #616]	; (80096d4 <tcp_process+0x5ac>)
 800946a:	881b      	ldrh	r3, [r3, #0]
 800946c:	461a      	mov	r2, r3
 800946e:	4b9a      	ldr	r3, [pc, #616]	; (80096d8 <tcp_process+0x5b0>)
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009474:	4b99      	ldr	r3, [pc, #612]	; (80096dc <tcp_process+0x5b4>)
 8009476:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009478:	885b      	ldrh	r3, [r3, #2]
 800947a:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800947c:	4a97      	ldr	r2, [pc, #604]	; (80096dc <tcp_process+0x5b4>)
 800947e:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009480:	8812      	ldrh	r2, [r2, #0]
 8009482:	b292      	uxth	r2, r2
 8009484:	9202      	str	r2, [sp, #8]
 8009486:	9301      	str	r3, [sp, #4]
 8009488:	4b95      	ldr	r3, [pc, #596]	; (80096e0 <tcp_process+0x5b8>)
 800948a:	9300      	str	r3, [sp, #0]
 800948c:	4b95      	ldr	r3, [pc, #596]	; (80096e4 <tcp_process+0x5bc>)
 800948e:	4602      	mov	r2, r0
 8009490:	6878      	ldr	r0, [r7, #4]
 8009492:	f002 fc93 	bl	800bdbc <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800949c:	2b05      	cmp	r3, #5
 800949e:	f200 8215 	bhi.w	80098cc <tcp_process+0x7a4>
          pcb->rtime = 0;
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	2200      	movs	r2, #0
 80094a6:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 80094a8:	6878      	ldr	r0, [r7, #4]
 80094aa:	f002 fa51 	bl	800b950 <tcp_rexmit_rto>
      break;
 80094ae:	e20d      	b.n	80098cc <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 80094b0:	4b86      	ldr	r3, [pc, #536]	; (80096cc <tcp_process+0x5a4>)
 80094b2:	781b      	ldrb	r3, [r3, #0]
 80094b4:	f003 0310 	and.w	r3, r3, #16
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	f000 80a1 	beq.w	8009600 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80094be:	4b84      	ldr	r3, [pc, #528]	; (80096d0 <tcp_process+0x5a8>)
 80094c0:	681a      	ldr	r2, [r3, #0]
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80094c6:	1ad3      	subs	r3, r2, r3
 80094c8:	3b01      	subs	r3, #1
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	db7e      	blt.n	80095cc <tcp_process+0x4a4>
 80094ce:	4b80      	ldr	r3, [pc, #512]	; (80096d0 <tcp_process+0x5a8>)
 80094d0:	681a      	ldr	r2, [r3, #0]
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80094d6:	1ad3      	subs	r3, r2, r3
 80094d8:	2b00      	cmp	r3, #0
 80094da:	dc77      	bgt.n	80095cc <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	2204      	movs	r2, #4
 80094e0:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d102      	bne.n	80094f0 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 80094ea:	23fa      	movs	r3, #250	; 0xfa
 80094ec:	76bb      	strb	r3, [r7, #26]
 80094ee:	e01d      	b.n	800952c <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80094f4:	699b      	ldr	r3, [r3, #24]
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d106      	bne.n	8009508 <tcp_process+0x3e0>
 80094fa:	4b7b      	ldr	r3, [pc, #492]	; (80096e8 <tcp_process+0x5c0>)
 80094fc:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8009500:	497a      	ldr	r1, [pc, #488]	; (80096ec <tcp_process+0x5c4>)
 8009502:	487b      	ldr	r0, [pc, #492]	; (80096f0 <tcp_process+0x5c8>)
 8009504:	f005 fa1a 	bl	800e93c <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800950c:	699b      	ldr	r3, [r3, #24]
 800950e:	2b00      	cmp	r3, #0
 8009510:	d00a      	beq.n	8009528 <tcp_process+0x400>
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009516:	699b      	ldr	r3, [r3, #24]
 8009518:	687a      	ldr	r2, [r7, #4]
 800951a:	6910      	ldr	r0, [r2, #16]
 800951c:	2200      	movs	r2, #0
 800951e:	6879      	ldr	r1, [r7, #4]
 8009520:	4798      	blx	r3
 8009522:	4603      	mov	r3, r0
 8009524:	76bb      	strb	r3, [r7, #26]
 8009526:	e001      	b.n	800952c <tcp_process+0x404>
 8009528:	23f0      	movs	r3, #240	; 0xf0
 800952a:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800952c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8009530:	2b00      	cmp	r3, #0
 8009532:	d00a      	beq.n	800954a <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8009534:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8009538:	f113 0f0d 	cmn.w	r3, #13
 800953c:	d002      	beq.n	8009544 <tcp_process+0x41c>
              tcp_abort(pcb);
 800953e:	6878      	ldr	r0, [r7, #4]
 8009540:	f7fd ff94 	bl	800746c <tcp_abort>
            }
            return ERR_ABRT;
 8009544:	f06f 030c 	mvn.w	r3, #12
 8009548:	e1ce      	b.n	80098e8 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800954a:	6878      	ldr	r0, [r7, #4]
 800954c:	f000 fae0 	bl	8009b10 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8009550:	4b68      	ldr	r3, [pc, #416]	; (80096f4 <tcp_process+0x5cc>)
 8009552:	881b      	ldrh	r3, [r3, #0]
 8009554:	2b00      	cmp	r3, #0
 8009556:	d005      	beq.n	8009564 <tcp_process+0x43c>
            recv_acked--;
 8009558:	4b66      	ldr	r3, [pc, #408]	; (80096f4 <tcp_process+0x5cc>)
 800955a:	881b      	ldrh	r3, [r3, #0]
 800955c:	3b01      	subs	r3, #1
 800955e:	b29a      	uxth	r2, r3
 8009560:	4b64      	ldr	r3, [pc, #400]	; (80096f4 <tcp_process+0x5cc>)
 8009562:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009568:	009a      	lsls	r2, r3, #2
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800956e:	005b      	lsls	r3, r3, #1
 8009570:	f241 111c 	movw	r1, #4380	; 0x111c
 8009574:	428b      	cmp	r3, r1
 8009576:	bf38      	it	cc
 8009578:	460b      	movcc	r3, r1
 800957a:	429a      	cmp	r2, r3
 800957c:	d204      	bcs.n	8009588 <tcp_process+0x460>
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009582:	009b      	lsls	r3, r3, #2
 8009584:	b29b      	uxth	r3, r3
 8009586:	e00d      	b.n	80095a4 <tcp_process+0x47c>
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800958c:	005b      	lsls	r3, r3, #1
 800958e:	f241 121c 	movw	r2, #4380	; 0x111c
 8009592:	4293      	cmp	r3, r2
 8009594:	d904      	bls.n	80095a0 <tcp_process+0x478>
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800959a:	005b      	lsls	r3, r3, #1
 800959c:	b29b      	uxth	r3, r3
 800959e:	e001      	b.n	80095a4 <tcp_process+0x47c>
 80095a0:	f241 131c 	movw	r3, #4380	; 0x111c
 80095a4:	687a      	ldr	r2, [r7, #4]
 80095a6:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 80095aa:	4b53      	ldr	r3, [pc, #332]	; (80096f8 <tcp_process+0x5d0>)
 80095ac:	781b      	ldrb	r3, [r3, #0]
 80095ae:	f003 0320 	and.w	r3, r3, #32
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d037      	beq.n	8009626 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	8b5b      	ldrh	r3, [r3, #26]
 80095ba:	f043 0302 	orr.w	r3, r3, #2
 80095be:	b29a      	uxth	r2, r3
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	2207      	movs	r2, #7
 80095c8:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 80095ca:	e02c      	b.n	8009626 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80095cc:	4b40      	ldr	r3, [pc, #256]	; (80096d0 <tcp_process+0x5a8>)
 80095ce:	6819      	ldr	r1, [r3, #0]
 80095d0:	4b40      	ldr	r3, [pc, #256]	; (80096d4 <tcp_process+0x5ac>)
 80095d2:	881b      	ldrh	r3, [r3, #0]
 80095d4:	461a      	mov	r2, r3
 80095d6:	4b40      	ldr	r3, [pc, #256]	; (80096d8 <tcp_process+0x5b0>)
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80095dc:	4b3f      	ldr	r3, [pc, #252]	; (80096dc <tcp_process+0x5b4>)
 80095de:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80095e0:	885b      	ldrh	r3, [r3, #2]
 80095e2:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80095e4:	4a3d      	ldr	r2, [pc, #244]	; (80096dc <tcp_process+0x5b4>)
 80095e6:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80095e8:	8812      	ldrh	r2, [r2, #0]
 80095ea:	b292      	uxth	r2, r2
 80095ec:	9202      	str	r2, [sp, #8]
 80095ee:	9301      	str	r3, [sp, #4]
 80095f0:	4b3b      	ldr	r3, [pc, #236]	; (80096e0 <tcp_process+0x5b8>)
 80095f2:	9300      	str	r3, [sp, #0]
 80095f4:	4b3b      	ldr	r3, [pc, #236]	; (80096e4 <tcp_process+0x5bc>)
 80095f6:	4602      	mov	r2, r0
 80095f8:	6878      	ldr	r0, [r7, #4]
 80095fa:	f002 fbdf 	bl	800bdbc <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 80095fe:	e167      	b.n	80098d0 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8009600:	4b32      	ldr	r3, [pc, #200]	; (80096cc <tcp_process+0x5a4>)
 8009602:	781b      	ldrb	r3, [r3, #0]
 8009604:	f003 0302 	and.w	r3, r3, #2
 8009608:	2b00      	cmp	r3, #0
 800960a:	f000 8161 	beq.w	80098d0 <tcp_process+0x7a8>
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009612:	1e5a      	subs	r2, r3, #1
 8009614:	4b30      	ldr	r3, [pc, #192]	; (80096d8 <tcp_process+0x5b0>)
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	429a      	cmp	r2, r3
 800961a:	f040 8159 	bne.w	80098d0 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800961e:	6878      	ldr	r0, [r7, #4]
 8009620:	f002 f9b8 	bl	800b994 <tcp_rexmit>
      break;
 8009624:	e154      	b.n	80098d0 <tcp_process+0x7a8>
 8009626:	e153      	b.n	80098d0 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8009628:	6878      	ldr	r0, [r7, #4]
 800962a:	f000 fa71 	bl	8009b10 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800962e:	4b32      	ldr	r3, [pc, #200]	; (80096f8 <tcp_process+0x5d0>)
 8009630:	781b      	ldrb	r3, [r3, #0]
 8009632:	f003 0320 	and.w	r3, r3, #32
 8009636:	2b00      	cmp	r3, #0
 8009638:	f000 814c 	beq.w	80098d4 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	8b5b      	ldrh	r3, [r3, #26]
 8009640:	f043 0302 	orr.w	r3, r3, #2
 8009644:	b29a      	uxth	r2, r3
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	2207      	movs	r2, #7
 800964e:	751a      	strb	r2, [r3, #20]
      }
      break;
 8009650:	e140      	b.n	80098d4 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8009652:	6878      	ldr	r0, [r7, #4]
 8009654:	f000 fa5c 	bl	8009b10 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8009658:	4b27      	ldr	r3, [pc, #156]	; (80096f8 <tcp_process+0x5d0>)
 800965a:	781b      	ldrb	r3, [r3, #0]
 800965c:	f003 0320 	and.w	r3, r3, #32
 8009660:	2b00      	cmp	r3, #0
 8009662:	d071      	beq.n	8009748 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009664:	4b19      	ldr	r3, [pc, #100]	; (80096cc <tcp_process+0x5a4>)
 8009666:	781b      	ldrb	r3, [r3, #0]
 8009668:	f003 0310 	and.w	r3, r3, #16
 800966c:	2b00      	cmp	r3, #0
 800966e:	d060      	beq.n	8009732 <tcp_process+0x60a>
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009674:	4b16      	ldr	r3, [pc, #88]	; (80096d0 <tcp_process+0x5a8>)
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	429a      	cmp	r2, r3
 800967a:	d15a      	bne.n	8009732 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009680:	2b00      	cmp	r3, #0
 8009682:	d156      	bne.n	8009732 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	8b5b      	ldrh	r3, [r3, #26]
 8009688:	f043 0302 	orr.w	r3, r3, #2
 800968c:	b29a      	uxth	r2, r3
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8009692:	6878      	ldr	r0, [r7, #4]
 8009694:	f7fe fdbe 	bl	8008214 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8009698:	4b18      	ldr	r3, [pc, #96]	; (80096fc <tcp_process+0x5d4>)
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	687a      	ldr	r2, [r7, #4]
 800969e:	429a      	cmp	r2, r3
 80096a0:	d105      	bne.n	80096ae <tcp_process+0x586>
 80096a2:	4b16      	ldr	r3, [pc, #88]	; (80096fc <tcp_process+0x5d4>)
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	68db      	ldr	r3, [r3, #12]
 80096a8:	4a14      	ldr	r2, [pc, #80]	; (80096fc <tcp_process+0x5d4>)
 80096aa:	6013      	str	r3, [r2, #0]
 80096ac:	e02e      	b.n	800970c <tcp_process+0x5e4>
 80096ae:	4b13      	ldr	r3, [pc, #76]	; (80096fc <tcp_process+0x5d4>)
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	617b      	str	r3, [r7, #20]
 80096b4:	e027      	b.n	8009706 <tcp_process+0x5de>
 80096b6:	697b      	ldr	r3, [r7, #20]
 80096b8:	68db      	ldr	r3, [r3, #12]
 80096ba:	687a      	ldr	r2, [r7, #4]
 80096bc:	429a      	cmp	r2, r3
 80096be:	d11f      	bne.n	8009700 <tcp_process+0x5d8>
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	68da      	ldr	r2, [r3, #12]
 80096c4:	697b      	ldr	r3, [r7, #20]
 80096c6:	60da      	str	r2, [r3, #12]
 80096c8:	e020      	b.n	800970c <tcp_process+0x5e4>
 80096ca:	bf00      	nop
 80096cc:	200000f0 	.word	0x200000f0
 80096d0:	200000e8 	.word	0x200000e8
 80096d4:	200000ee 	.word	0x200000ee
 80096d8:	200000e4 	.word	0x200000e4
 80096dc:	200000d4 	.word	0x200000d4
 80096e0:	20003470 	.word	0x20003470
 80096e4:	20003474 	.word	0x20003474
 80096e8:	080109f8 	.word	0x080109f8
 80096ec:	08010c98 	.word	0x08010c98
 80096f0:	08010a44 	.word	0x08010a44
 80096f4:	200000ec 	.word	0x200000ec
 80096f8:	200000f1 	.word	0x200000f1
 80096fc:	20008ae0 	.word	0x20008ae0
 8009700:	697b      	ldr	r3, [r7, #20]
 8009702:	68db      	ldr	r3, [r3, #12]
 8009704:	617b      	str	r3, [r7, #20]
 8009706:	697b      	ldr	r3, [r7, #20]
 8009708:	2b00      	cmp	r3, #0
 800970a:	d1d4      	bne.n	80096b6 <tcp_process+0x58e>
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	2200      	movs	r2, #0
 8009710:	60da      	str	r2, [r3, #12]
 8009712:	4b77      	ldr	r3, [pc, #476]	; (80098f0 <tcp_process+0x7c8>)
 8009714:	2201      	movs	r2, #1
 8009716:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	220a      	movs	r2, #10
 800971c:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800971e:	4b75      	ldr	r3, [pc, #468]	; (80098f4 <tcp_process+0x7cc>)
 8009720:	681a      	ldr	r2, [r3, #0]
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	60da      	str	r2, [r3, #12]
 8009726:	4a73      	ldr	r2, [pc, #460]	; (80098f4 <tcp_process+0x7cc>)
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	6013      	str	r3, [r2, #0]
 800972c:	f002 fd08 	bl	800c140 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8009730:	e0d2      	b.n	80098d8 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	8b5b      	ldrh	r3, [r3, #26]
 8009736:	f043 0302 	orr.w	r3, r3, #2
 800973a:	b29a      	uxth	r2, r3
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	2208      	movs	r2, #8
 8009744:	751a      	strb	r2, [r3, #20]
      break;
 8009746:	e0c7      	b.n	80098d8 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009748:	4b6b      	ldr	r3, [pc, #428]	; (80098f8 <tcp_process+0x7d0>)
 800974a:	781b      	ldrb	r3, [r3, #0]
 800974c:	f003 0310 	and.w	r3, r3, #16
 8009750:	2b00      	cmp	r3, #0
 8009752:	f000 80c1 	beq.w	80098d8 <tcp_process+0x7b0>
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800975a:	4b68      	ldr	r3, [pc, #416]	; (80098fc <tcp_process+0x7d4>)
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	429a      	cmp	r2, r3
 8009760:	f040 80ba 	bne.w	80098d8 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009768:	2b00      	cmp	r3, #0
 800976a:	f040 80b5 	bne.w	80098d8 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	2206      	movs	r2, #6
 8009772:	751a      	strb	r2, [r3, #20]
      break;
 8009774:	e0b0      	b.n	80098d8 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8009776:	6878      	ldr	r0, [r7, #4]
 8009778:	f000 f9ca 	bl	8009b10 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800977c:	4b60      	ldr	r3, [pc, #384]	; (8009900 <tcp_process+0x7d8>)
 800977e:	781b      	ldrb	r3, [r3, #0]
 8009780:	f003 0320 	and.w	r3, r3, #32
 8009784:	2b00      	cmp	r3, #0
 8009786:	f000 80a9 	beq.w	80098dc <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	8b5b      	ldrh	r3, [r3, #26]
 800978e:	f043 0302 	orr.w	r3, r3, #2
 8009792:	b29a      	uxth	r2, r3
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8009798:	6878      	ldr	r0, [r7, #4]
 800979a:	f7fe fd3b 	bl	8008214 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800979e:	4b59      	ldr	r3, [pc, #356]	; (8009904 <tcp_process+0x7dc>)
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	687a      	ldr	r2, [r7, #4]
 80097a4:	429a      	cmp	r2, r3
 80097a6:	d105      	bne.n	80097b4 <tcp_process+0x68c>
 80097a8:	4b56      	ldr	r3, [pc, #344]	; (8009904 <tcp_process+0x7dc>)
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	68db      	ldr	r3, [r3, #12]
 80097ae:	4a55      	ldr	r2, [pc, #340]	; (8009904 <tcp_process+0x7dc>)
 80097b0:	6013      	str	r3, [r2, #0]
 80097b2:	e013      	b.n	80097dc <tcp_process+0x6b4>
 80097b4:	4b53      	ldr	r3, [pc, #332]	; (8009904 <tcp_process+0x7dc>)
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	613b      	str	r3, [r7, #16]
 80097ba:	e00c      	b.n	80097d6 <tcp_process+0x6ae>
 80097bc:	693b      	ldr	r3, [r7, #16]
 80097be:	68db      	ldr	r3, [r3, #12]
 80097c0:	687a      	ldr	r2, [r7, #4]
 80097c2:	429a      	cmp	r2, r3
 80097c4:	d104      	bne.n	80097d0 <tcp_process+0x6a8>
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	68da      	ldr	r2, [r3, #12]
 80097ca:	693b      	ldr	r3, [r7, #16]
 80097cc:	60da      	str	r2, [r3, #12]
 80097ce:	e005      	b.n	80097dc <tcp_process+0x6b4>
 80097d0:	693b      	ldr	r3, [r7, #16]
 80097d2:	68db      	ldr	r3, [r3, #12]
 80097d4:	613b      	str	r3, [r7, #16]
 80097d6:	693b      	ldr	r3, [r7, #16]
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d1ef      	bne.n	80097bc <tcp_process+0x694>
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	2200      	movs	r2, #0
 80097e0:	60da      	str	r2, [r3, #12]
 80097e2:	4b43      	ldr	r3, [pc, #268]	; (80098f0 <tcp_process+0x7c8>)
 80097e4:	2201      	movs	r2, #1
 80097e6:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	220a      	movs	r2, #10
 80097ec:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80097ee:	4b41      	ldr	r3, [pc, #260]	; (80098f4 <tcp_process+0x7cc>)
 80097f0:	681a      	ldr	r2, [r3, #0]
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	60da      	str	r2, [r3, #12]
 80097f6:	4a3f      	ldr	r2, [pc, #252]	; (80098f4 <tcp_process+0x7cc>)
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	6013      	str	r3, [r2, #0]
 80097fc:	f002 fca0 	bl	800c140 <tcp_timer_needed>
      }
      break;
 8009800:	e06c      	b.n	80098dc <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8009802:	6878      	ldr	r0, [r7, #4]
 8009804:	f000 f984 	bl	8009b10 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8009808:	4b3b      	ldr	r3, [pc, #236]	; (80098f8 <tcp_process+0x7d0>)
 800980a:	781b      	ldrb	r3, [r3, #0]
 800980c:	f003 0310 	and.w	r3, r3, #16
 8009810:	2b00      	cmp	r3, #0
 8009812:	d065      	beq.n	80098e0 <tcp_process+0x7b8>
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009818:	4b38      	ldr	r3, [pc, #224]	; (80098fc <tcp_process+0x7d4>)
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	429a      	cmp	r2, r3
 800981e:	d15f      	bne.n	80098e0 <tcp_process+0x7b8>
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009824:	2b00      	cmp	r3, #0
 8009826:	d15b      	bne.n	80098e0 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8009828:	6878      	ldr	r0, [r7, #4]
 800982a:	f7fe fcf3 	bl	8008214 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800982e:	4b35      	ldr	r3, [pc, #212]	; (8009904 <tcp_process+0x7dc>)
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	687a      	ldr	r2, [r7, #4]
 8009834:	429a      	cmp	r2, r3
 8009836:	d105      	bne.n	8009844 <tcp_process+0x71c>
 8009838:	4b32      	ldr	r3, [pc, #200]	; (8009904 <tcp_process+0x7dc>)
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	68db      	ldr	r3, [r3, #12]
 800983e:	4a31      	ldr	r2, [pc, #196]	; (8009904 <tcp_process+0x7dc>)
 8009840:	6013      	str	r3, [r2, #0]
 8009842:	e013      	b.n	800986c <tcp_process+0x744>
 8009844:	4b2f      	ldr	r3, [pc, #188]	; (8009904 <tcp_process+0x7dc>)
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	60fb      	str	r3, [r7, #12]
 800984a:	e00c      	b.n	8009866 <tcp_process+0x73e>
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	68db      	ldr	r3, [r3, #12]
 8009850:	687a      	ldr	r2, [r7, #4]
 8009852:	429a      	cmp	r2, r3
 8009854:	d104      	bne.n	8009860 <tcp_process+0x738>
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	68da      	ldr	r2, [r3, #12]
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	60da      	str	r2, [r3, #12]
 800985e:	e005      	b.n	800986c <tcp_process+0x744>
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	68db      	ldr	r3, [r3, #12]
 8009864:	60fb      	str	r3, [r7, #12]
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	2b00      	cmp	r3, #0
 800986a:	d1ef      	bne.n	800984c <tcp_process+0x724>
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	2200      	movs	r2, #0
 8009870:	60da      	str	r2, [r3, #12]
 8009872:	4b1f      	ldr	r3, [pc, #124]	; (80098f0 <tcp_process+0x7c8>)
 8009874:	2201      	movs	r2, #1
 8009876:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	220a      	movs	r2, #10
 800987c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800987e:	4b1d      	ldr	r3, [pc, #116]	; (80098f4 <tcp_process+0x7cc>)
 8009880:	681a      	ldr	r2, [r3, #0]
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	60da      	str	r2, [r3, #12]
 8009886:	4a1b      	ldr	r2, [pc, #108]	; (80098f4 <tcp_process+0x7cc>)
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	6013      	str	r3, [r2, #0]
 800988c:	f002 fc58 	bl	800c140 <tcp_timer_needed>
      }
      break;
 8009890:	e026      	b.n	80098e0 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8009892:	6878      	ldr	r0, [r7, #4]
 8009894:	f000 f93c 	bl	8009b10 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8009898:	4b17      	ldr	r3, [pc, #92]	; (80098f8 <tcp_process+0x7d0>)
 800989a:	781b      	ldrb	r3, [r3, #0]
 800989c:	f003 0310 	and.w	r3, r3, #16
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d01f      	beq.n	80098e4 <tcp_process+0x7bc>
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80098a8:	4b14      	ldr	r3, [pc, #80]	; (80098fc <tcp_process+0x7d4>)
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	429a      	cmp	r2, r3
 80098ae:	d119      	bne.n	80098e4 <tcp_process+0x7bc>
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d115      	bne.n	80098e4 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 80098b8:	4b11      	ldr	r3, [pc, #68]	; (8009900 <tcp_process+0x7d8>)
 80098ba:	781b      	ldrb	r3, [r3, #0]
 80098bc:	f043 0310 	orr.w	r3, r3, #16
 80098c0:	b2da      	uxtb	r2, r3
 80098c2:	4b0f      	ldr	r3, [pc, #60]	; (8009900 <tcp_process+0x7d8>)
 80098c4:	701a      	strb	r2, [r3, #0]
      }
      break;
 80098c6:	e00d      	b.n	80098e4 <tcp_process+0x7bc>
    default:
      break;
 80098c8:	bf00      	nop
 80098ca:	e00c      	b.n	80098e6 <tcp_process+0x7be>
      break;
 80098cc:	bf00      	nop
 80098ce:	e00a      	b.n	80098e6 <tcp_process+0x7be>
      break;
 80098d0:	bf00      	nop
 80098d2:	e008      	b.n	80098e6 <tcp_process+0x7be>
      break;
 80098d4:	bf00      	nop
 80098d6:	e006      	b.n	80098e6 <tcp_process+0x7be>
      break;
 80098d8:	bf00      	nop
 80098da:	e004      	b.n	80098e6 <tcp_process+0x7be>
      break;
 80098dc:	bf00      	nop
 80098de:	e002      	b.n	80098e6 <tcp_process+0x7be>
      break;
 80098e0:	bf00      	nop
 80098e2:	e000      	b.n	80098e6 <tcp_process+0x7be>
      break;
 80098e4:	bf00      	nop
  }
  return ERR_OK;
 80098e6:	2300      	movs	r3, #0
}
 80098e8:	4618      	mov	r0, r3
 80098ea:	3724      	adds	r7, #36	; 0x24
 80098ec:	46bd      	mov	sp, r7
 80098ee:	bd90      	pop	{r4, r7, pc}
 80098f0:	20008adc 	.word	0x20008adc
 80098f4:	20008af0 	.word	0x20008af0
 80098f8:	200000f0 	.word	0x200000f0
 80098fc:	200000e8 	.word	0x200000e8
 8009900:	200000f1 	.word	0x200000f1
 8009904:	20008ae0 	.word	0x20008ae0

08009908 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8009908:	b590      	push	{r4, r7, lr}
 800990a:	b085      	sub	sp, #20
 800990c:	af00      	add	r7, sp, #0
 800990e:	6078      	str	r0, [r7, #4]
 8009910:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	2b00      	cmp	r3, #0
 8009916:	d106      	bne.n	8009926 <tcp_oos_insert_segment+0x1e>
 8009918:	4b3b      	ldr	r3, [pc, #236]	; (8009a08 <tcp_oos_insert_segment+0x100>)
 800991a:	f240 421f 	movw	r2, #1055	; 0x41f
 800991e:	493b      	ldr	r1, [pc, #236]	; (8009a0c <tcp_oos_insert_segment+0x104>)
 8009920:	483b      	ldr	r0, [pc, #236]	; (8009a10 <tcp_oos_insert_segment+0x108>)
 8009922:	f005 f80b 	bl	800e93c <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	68db      	ldr	r3, [r3, #12]
 800992a:	899b      	ldrh	r3, [r3, #12]
 800992c:	b29b      	uxth	r3, r3
 800992e:	4618      	mov	r0, r3
 8009930:	f7fb fd92 	bl	8005458 <lwip_htons>
 8009934:	4603      	mov	r3, r0
 8009936:	b2db      	uxtb	r3, r3
 8009938:	f003 0301 	and.w	r3, r3, #1
 800993c:	2b00      	cmp	r3, #0
 800993e:	d028      	beq.n	8009992 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8009940:	6838      	ldr	r0, [r7, #0]
 8009942:	f7fe fa67 	bl	8007e14 <tcp_segs_free>
    next = NULL;
 8009946:	2300      	movs	r3, #0
 8009948:	603b      	str	r3, [r7, #0]
 800994a:	e056      	b.n	80099fa <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800994c:	683b      	ldr	r3, [r7, #0]
 800994e:	68db      	ldr	r3, [r3, #12]
 8009950:	899b      	ldrh	r3, [r3, #12]
 8009952:	b29b      	uxth	r3, r3
 8009954:	4618      	mov	r0, r3
 8009956:	f7fb fd7f 	bl	8005458 <lwip_htons>
 800995a:	4603      	mov	r3, r0
 800995c:	b2db      	uxtb	r3, r3
 800995e:	f003 0301 	and.w	r3, r3, #1
 8009962:	2b00      	cmp	r3, #0
 8009964:	d00d      	beq.n	8009982 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	68db      	ldr	r3, [r3, #12]
 800996a:	899b      	ldrh	r3, [r3, #12]
 800996c:	b29c      	uxth	r4, r3
 800996e:	2001      	movs	r0, #1
 8009970:	f7fb fd72 	bl	8005458 <lwip_htons>
 8009974:	4603      	mov	r3, r0
 8009976:	461a      	mov	r2, r3
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	68db      	ldr	r3, [r3, #12]
 800997c:	4322      	orrs	r2, r4
 800997e:	b292      	uxth	r2, r2
 8009980:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8009982:	683b      	ldr	r3, [r7, #0]
 8009984:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8009986:	683b      	ldr	r3, [r7, #0]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800998c:	68f8      	ldr	r0, [r7, #12]
 800998e:	f7fe fa55 	bl	8007e3c <tcp_seg_free>
    while (next &&
 8009992:	683b      	ldr	r3, [r7, #0]
 8009994:	2b00      	cmp	r3, #0
 8009996:	d00e      	beq.n	80099b6 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	891b      	ldrh	r3, [r3, #8]
 800999c:	461a      	mov	r2, r3
 800999e:	4b1d      	ldr	r3, [pc, #116]	; (8009a14 <tcp_oos_insert_segment+0x10c>)
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	441a      	add	r2, r3
 80099a4:	683b      	ldr	r3, [r7, #0]
 80099a6:	68db      	ldr	r3, [r3, #12]
 80099a8:	685b      	ldr	r3, [r3, #4]
 80099aa:	6839      	ldr	r1, [r7, #0]
 80099ac:	8909      	ldrh	r1, [r1, #8]
 80099ae:	440b      	add	r3, r1
 80099b0:	1ad3      	subs	r3, r2, r3
    while (next &&
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	daca      	bge.n	800994c <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 80099b6:	683b      	ldr	r3, [r7, #0]
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d01e      	beq.n	80099fa <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	891b      	ldrh	r3, [r3, #8]
 80099c0:	461a      	mov	r2, r3
 80099c2:	4b14      	ldr	r3, [pc, #80]	; (8009a14 <tcp_oos_insert_segment+0x10c>)
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	441a      	add	r2, r3
 80099c8:	683b      	ldr	r3, [r7, #0]
 80099ca:	68db      	ldr	r3, [r3, #12]
 80099cc:	685b      	ldr	r3, [r3, #4]
 80099ce:	1ad3      	subs	r3, r2, r3
    if (next &&
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	dd12      	ble.n	80099fa <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 80099d4:	683b      	ldr	r3, [r7, #0]
 80099d6:	68db      	ldr	r3, [r3, #12]
 80099d8:	685b      	ldr	r3, [r3, #4]
 80099da:	b29a      	uxth	r2, r3
 80099dc:	4b0d      	ldr	r3, [pc, #52]	; (8009a14 <tcp_oos_insert_segment+0x10c>)
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	b29b      	uxth	r3, r3
 80099e2:	1ad3      	subs	r3, r2, r3
 80099e4:	b29a      	uxth	r2, r3
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	685a      	ldr	r2, [r3, #4]
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	891b      	ldrh	r3, [r3, #8]
 80099f2:	4619      	mov	r1, r3
 80099f4:	4610      	mov	r0, r2
 80099f6:	f7fc fe33 	bl	8006660 <pbuf_realloc>
    }
  }
  cseg->next = next;
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	683a      	ldr	r2, [r7, #0]
 80099fe:	601a      	str	r2, [r3, #0]
}
 8009a00:	bf00      	nop
 8009a02:	3714      	adds	r7, #20
 8009a04:	46bd      	mov	sp, r7
 8009a06:	bd90      	pop	{r4, r7, pc}
 8009a08:	080109f8 	.word	0x080109f8
 8009a0c:	08010cb8 	.word	0x08010cb8
 8009a10:	08010a44 	.word	0x08010a44
 8009a14:	200000e4 	.word	0x200000e4

08009a18 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8009a18:	b5b0      	push	{r4, r5, r7, lr}
 8009a1a:	b086      	sub	sp, #24
 8009a1c:	af00      	add	r7, sp, #0
 8009a1e:	60f8      	str	r0, [r7, #12]
 8009a20:	60b9      	str	r1, [r7, #8]
 8009a22:	607a      	str	r2, [r7, #4]
 8009a24:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8009a26:	e03e      	b.n	8009aa6 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8009a28:	68bb      	ldr	r3, [r7, #8]
 8009a2a:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8009a2c:	68bb      	ldr	r3, [r7, #8]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8009a32:	697b      	ldr	r3, [r7, #20]
 8009a34:	685b      	ldr	r3, [r3, #4]
 8009a36:	4618      	mov	r0, r3
 8009a38:	f7fd f820 	bl	8006a7c <pbuf_clen>
 8009a3c:	4603      	mov	r3, r0
 8009a3e:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009a46:	8a7a      	ldrh	r2, [r7, #18]
 8009a48:	429a      	cmp	r2, r3
 8009a4a:	d906      	bls.n	8009a5a <tcp_free_acked_segments+0x42>
 8009a4c:	4b2a      	ldr	r3, [pc, #168]	; (8009af8 <tcp_free_acked_segments+0xe0>)
 8009a4e:	f240 4257 	movw	r2, #1111	; 0x457
 8009a52:	492a      	ldr	r1, [pc, #168]	; (8009afc <tcp_free_acked_segments+0xe4>)
 8009a54:	482a      	ldr	r0, [pc, #168]	; (8009b00 <tcp_free_acked_segments+0xe8>)
 8009a56:	f004 ff71 	bl	800e93c <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8009a60:	8a7b      	ldrh	r3, [r7, #18]
 8009a62:	1ad3      	subs	r3, r2, r3
 8009a64:	b29a      	uxth	r2, r3
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8009a6c:	697b      	ldr	r3, [r7, #20]
 8009a6e:	891a      	ldrh	r2, [r3, #8]
 8009a70:	4b24      	ldr	r3, [pc, #144]	; (8009b04 <tcp_free_acked_segments+0xec>)
 8009a72:	881b      	ldrh	r3, [r3, #0]
 8009a74:	4413      	add	r3, r2
 8009a76:	b29a      	uxth	r2, r3
 8009a78:	4b22      	ldr	r3, [pc, #136]	; (8009b04 <tcp_free_acked_segments+0xec>)
 8009a7a:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8009a7c:	6978      	ldr	r0, [r7, #20]
 8009a7e:	f7fe f9dd 	bl	8007e3c <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d00c      	beq.n	8009aa6 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8009a8c:	68bb      	ldr	r3, [r7, #8]
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d109      	bne.n	8009aa6 <tcp_free_acked_segments+0x8e>
 8009a92:	683b      	ldr	r3, [r7, #0]
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d106      	bne.n	8009aa6 <tcp_free_acked_segments+0x8e>
 8009a98:	4b17      	ldr	r3, [pc, #92]	; (8009af8 <tcp_free_acked_segments+0xe0>)
 8009a9a:	f240 4262 	movw	r2, #1122	; 0x462
 8009a9e:	491a      	ldr	r1, [pc, #104]	; (8009b08 <tcp_free_acked_segments+0xf0>)
 8009aa0:	4817      	ldr	r0, [pc, #92]	; (8009b00 <tcp_free_acked_segments+0xe8>)
 8009aa2:	f004 ff4b 	bl	800e93c <iprintf>
  while (seg_list != NULL &&
 8009aa6:	68bb      	ldr	r3, [r7, #8]
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d020      	beq.n	8009aee <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8009aac:	68bb      	ldr	r3, [r7, #8]
 8009aae:	68db      	ldr	r3, [r3, #12]
 8009ab0:	685b      	ldr	r3, [r3, #4]
 8009ab2:	4618      	mov	r0, r3
 8009ab4:	f7fb fce5 	bl	8005482 <lwip_htonl>
 8009ab8:	4604      	mov	r4, r0
 8009aba:	68bb      	ldr	r3, [r7, #8]
 8009abc:	891b      	ldrh	r3, [r3, #8]
 8009abe:	461d      	mov	r5, r3
 8009ac0:	68bb      	ldr	r3, [r7, #8]
 8009ac2:	68db      	ldr	r3, [r3, #12]
 8009ac4:	899b      	ldrh	r3, [r3, #12]
 8009ac6:	b29b      	uxth	r3, r3
 8009ac8:	4618      	mov	r0, r3
 8009aca:	f7fb fcc5 	bl	8005458 <lwip_htons>
 8009ace:	4603      	mov	r3, r0
 8009ad0:	b2db      	uxtb	r3, r3
 8009ad2:	f003 0303 	and.w	r3, r3, #3
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d001      	beq.n	8009ade <tcp_free_acked_segments+0xc6>
 8009ada:	2301      	movs	r3, #1
 8009adc:	e000      	b.n	8009ae0 <tcp_free_acked_segments+0xc8>
 8009ade:	2300      	movs	r3, #0
 8009ae0:	442b      	add	r3, r5
 8009ae2:	18e2      	adds	r2, r4, r3
 8009ae4:	4b09      	ldr	r3, [pc, #36]	; (8009b0c <tcp_free_acked_segments+0xf4>)
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	dd9c      	ble.n	8009a28 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8009aee:	68bb      	ldr	r3, [r7, #8]
}
 8009af0:	4618      	mov	r0, r3
 8009af2:	3718      	adds	r7, #24
 8009af4:	46bd      	mov	sp, r7
 8009af6:	bdb0      	pop	{r4, r5, r7, pc}
 8009af8:	080109f8 	.word	0x080109f8
 8009afc:	08010ce0 	.word	0x08010ce0
 8009b00:	08010a44 	.word	0x08010a44
 8009b04:	200000ec 	.word	0x200000ec
 8009b08:	08010d08 	.word	0x08010d08
 8009b0c:	200000e8 	.word	0x200000e8

08009b10 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8009b10:	b5b0      	push	{r4, r5, r7, lr}
 8009b12:	b094      	sub	sp, #80	; 0x50
 8009b14:	af00      	add	r7, sp, #0
 8009b16:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8009b18:	2300      	movs	r3, #0
 8009b1a:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d106      	bne.n	8009b30 <tcp_receive+0x20>
 8009b22:	4ba6      	ldr	r3, [pc, #664]	; (8009dbc <tcp_receive+0x2ac>)
 8009b24:	f240 427b 	movw	r2, #1147	; 0x47b
 8009b28:	49a5      	ldr	r1, [pc, #660]	; (8009dc0 <tcp_receive+0x2b0>)
 8009b2a:	48a6      	ldr	r0, [pc, #664]	; (8009dc4 <tcp_receive+0x2b4>)
 8009b2c:	f004 ff06 	bl	800e93c <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	7d1b      	ldrb	r3, [r3, #20]
 8009b34:	2b03      	cmp	r3, #3
 8009b36:	d806      	bhi.n	8009b46 <tcp_receive+0x36>
 8009b38:	4ba0      	ldr	r3, [pc, #640]	; (8009dbc <tcp_receive+0x2ac>)
 8009b3a:	f240 427c 	movw	r2, #1148	; 0x47c
 8009b3e:	49a2      	ldr	r1, [pc, #648]	; (8009dc8 <tcp_receive+0x2b8>)
 8009b40:	48a0      	ldr	r0, [pc, #640]	; (8009dc4 <tcp_receive+0x2b4>)
 8009b42:	f004 fefb 	bl	800e93c <iprintf>

  if (flags & TCP_ACK) {
 8009b46:	4ba1      	ldr	r3, [pc, #644]	; (8009dcc <tcp_receive+0x2bc>)
 8009b48:	781b      	ldrb	r3, [r3, #0]
 8009b4a:	f003 0310 	and.w	r3, r3, #16
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	f000 8263 	beq.w	800a01a <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009b5a:	461a      	mov	r2, r3
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009b60:	4413      	add	r3, r2
 8009b62:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009b68:	4b99      	ldr	r3, [pc, #612]	; (8009dd0 <tcp_receive+0x2c0>)
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	1ad3      	subs	r3, r2, r3
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	db1b      	blt.n	8009baa <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009b76:	4b96      	ldr	r3, [pc, #600]	; (8009dd0 <tcp_receive+0x2c0>)
 8009b78:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8009b7a:	429a      	cmp	r2, r3
 8009b7c:	d106      	bne.n	8009b8c <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009b82:	4b94      	ldr	r3, [pc, #592]	; (8009dd4 <tcp_receive+0x2c4>)
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	1ad3      	subs	r3, r2, r3
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	db0e      	blt.n	8009baa <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009b90:	4b90      	ldr	r3, [pc, #576]	; (8009dd4 <tcp_receive+0x2c4>)
 8009b92:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8009b94:	429a      	cmp	r2, r3
 8009b96:	d125      	bne.n	8009be4 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8009b98:	4b8f      	ldr	r3, [pc, #572]	; (8009dd8 <tcp_receive+0x2c8>)
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	89db      	ldrh	r3, [r3, #14]
 8009b9e:	b29a      	uxth	r2, r3
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009ba6:	429a      	cmp	r2, r3
 8009ba8:	d91c      	bls.n	8009be4 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8009baa:	4b8b      	ldr	r3, [pc, #556]	; (8009dd8 <tcp_receive+0x2c8>)
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	89db      	ldrh	r3, [r3, #14]
 8009bb0:	b29a      	uxth	r2, r3
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009bc4:	429a      	cmp	r2, r3
 8009bc6:	d205      	bcs.n	8009bd4 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8009bd4:	4b7e      	ldr	r3, [pc, #504]	; (8009dd0 <tcp_receive+0x2c0>)
 8009bd6:	681a      	ldr	r2, [r3, #0]
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8009bdc:	4b7d      	ldr	r3, [pc, #500]	; (8009dd4 <tcp_receive+0x2c4>)
 8009bde:	681a      	ldr	r2, [r3, #0]
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8009be4:	4b7b      	ldr	r3, [pc, #492]	; (8009dd4 <tcp_receive+0x2c4>)
 8009be6:	681a      	ldr	r2, [r3, #0]
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009bec:	1ad3      	subs	r3, r2, r3
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	dc58      	bgt.n	8009ca4 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8009bf2:	4b7a      	ldr	r3, [pc, #488]	; (8009ddc <tcp_receive+0x2cc>)
 8009bf4:	881b      	ldrh	r3, [r3, #0]
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d14b      	bne.n	8009c92 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009bfe:	687a      	ldr	r2, [r7, #4]
 8009c00:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8009c04:	4413      	add	r3, r2
 8009c06:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009c08:	429a      	cmp	r2, r3
 8009c0a:	d142      	bne.n	8009c92 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	db3d      	blt.n	8009c92 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009c1a:	4b6e      	ldr	r3, [pc, #440]	; (8009dd4 <tcp_receive+0x2c4>)
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	429a      	cmp	r2, r3
 8009c20:	d137      	bne.n	8009c92 <tcp_receive+0x182>
              found_dupack = 1;
 8009c22:	2301      	movs	r3, #1
 8009c24:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009c2c:	2bff      	cmp	r3, #255	; 0xff
 8009c2e:	d007      	beq.n	8009c40 <tcp_receive+0x130>
                ++pcb->dupacks;
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009c36:	3301      	adds	r3, #1
 8009c38:	b2da      	uxtb	r2, r3
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009c46:	2b03      	cmp	r3, #3
 8009c48:	d91b      	bls.n	8009c82 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009c54:	4413      	add	r3, r2
 8009c56:	b29a      	uxth	r2, r3
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8009c5e:	429a      	cmp	r2, r3
 8009c60:	d30a      	bcc.n	8009c78 <tcp_receive+0x168>
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009c6c:	4413      	add	r3, r2
 8009c6e:	b29a      	uxth	r2, r3
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8009c76:	e004      	b.n	8009c82 <tcp_receive+0x172>
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009c7e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009c88:	2b02      	cmp	r3, #2
 8009c8a:	d902      	bls.n	8009c92 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8009c8c:	6878      	ldr	r0, [r7, #4]
 8009c8e:	f001 feed 	bl	800ba6c <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8009c92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	f040 8160 	bne.w	8009f5a <tcp_receive+0x44a>
        pcb->dupacks = 0;
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	2200      	movs	r2, #0
 8009c9e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009ca2:	e15a      	b.n	8009f5a <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8009ca4:	4b4b      	ldr	r3, [pc, #300]	; (8009dd4 <tcp_receive+0x2c4>)
 8009ca6:	681a      	ldr	r2, [r3, #0]
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009cac:	1ad3      	subs	r3, r2, r3
 8009cae:	3b01      	subs	r3, #1
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	f2c0 814d 	blt.w	8009f50 <tcp_receive+0x440>
 8009cb6:	4b47      	ldr	r3, [pc, #284]	; (8009dd4 <tcp_receive+0x2c4>)
 8009cb8:	681a      	ldr	r2, [r3, #0]
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009cbe:	1ad3      	subs	r3, r2, r3
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	f300 8145 	bgt.w	8009f50 <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	8b5b      	ldrh	r3, [r3, #26]
 8009cca:	f003 0304 	and.w	r3, r3, #4
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d010      	beq.n	8009cf4 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	8b5b      	ldrh	r3, [r3, #26]
 8009cd6:	f023 0304 	bic.w	r3, r3, #4
 8009cda:	b29a      	uxth	r2, r3
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	2200      	movs	r2, #0
 8009cf0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	2200      	movs	r2, #0
 8009cf8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8009d02:	10db      	asrs	r3, r3, #3
 8009d04:	b21b      	sxth	r3, r3
 8009d06:	b29a      	uxth	r2, r3
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8009d0e:	b29b      	uxth	r3, r3
 8009d10:	4413      	add	r3, r2
 8009d12:	b29b      	uxth	r3, r3
 8009d14:	b21a      	sxth	r2, r3
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8009d1c:	4b2d      	ldr	r3, [pc, #180]	; (8009dd4 <tcp_receive+0x2c4>)
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	b29a      	uxth	r2, r3
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d26:	b29b      	uxth	r3, r3
 8009d28:	1ad3      	subs	r3, r2, r3
 8009d2a:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	2200      	movs	r2, #0
 8009d30:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8009d34:	4b27      	ldr	r3, [pc, #156]	; (8009dd4 <tcp_receive+0x2c4>)
 8009d36:	681a      	ldr	r2, [r3, #0]
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	7d1b      	ldrb	r3, [r3, #20]
 8009d40:	2b03      	cmp	r3, #3
 8009d42:	f240 8096 	bls.w	8009e72 <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8009d52:	429a      	cmp	r2, r3
 8009d54:	d244      	bcs.n	8009de0 <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	8b5b      	ldrh	r3, [r3, #26]
 8009d5a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d001      	beq.n	8009d66 <tcp_receive+0x256>
 8009d62:	2301      	movs	r3, #1
 8009d64:	e000      	b.n	8009d68 <tcp_receive+0x258>
 8009d66:	2302      	movs	r3, #2
 8009d68:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8009d6c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8009d70:	b29a      	uxth	r2, r3
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009d76:	fb12 f303 	smulbb	r3, r2, r3
 8009d7a:	b29b      	uxth	r3, r3
 8009d7c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8009d7e:	4293      	cmp	r3, r2
 8009d80:	bf28      	it	cs
 8009d82:	4613      	movcs	r3, r2
 8009d84:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8009d8c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8009d8e:	4413      	add	r3, r2
 8009d90:	b29a      	uxth	r2, r3
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8009d98:	429a      	cmp	r2, r3
 8009d9a:	d309      	bcc.n	8009db0 <tcp_receive+0x2a0>
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8009da2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8009da4:	4413      	add	r3, r2
 8009da6:	b29a      	uxth	r2, r3
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8009dae:	e060      	b.n	8009e72 <tcp_receive+0x362>
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009db6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8009dba:	e05a      	b.n	8009e72 <tcp_receive+0x362>
 8009dbc:	080109f8 	.word	0x080109f8
 8009dc0:	08010d28 	.word	0x08010d28
 8009dc4:	08010a44 	.word	0x08010a44
 8009dc8:	08010d44 	.word	0x08010d44
 8009dcc:	200000f0 	.word	0x200000f0
 8009dd0:	200000e4 	.word	0x200000e4
 8009dd4:	200000e8 	.word	0x200000e8
 8009dd8:	200000d4 	.word	0x200000d4
 8009ddc:	200000ee 	.word	0x200000ee
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8009de6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009de8:	4413      	add	r3, r2
 8009dea:	b29a      	uxth	r2, r3
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009df2:	429a      	cmp	r2, r3
 8009df4:	d309      	bcc.n	8009e0a <tcp_receive+0x2fa>
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8009dfc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009dfe:	4413      	add	r3, r2
 8009e00:	b29a      	uxth	r2, r3
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8009e08:	e004      	b.n	8009e14 <tcp_receive+0x304>
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009e10:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8009e20:	429a      	cmp	r2, r3
 8009e22:	d326      	bcc.n	8009e72 <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8009e30:	1ad3      	subs	r3, r2, r3
 8009e32:	b29a      	uxth	r2, r3
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009e44:	4413      	add	r3, r2
 8009e46:	b29a      	uxth	r2, r3
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8009e4e:	429a      	cmp	r2, r3
 8009e50:	d30a      	bcc.n	8009e68 <tcp_receive+0x358>
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009e5c:	4413      	add	r3, r2
 8009e5e:	b29a      	uxth	r2, r3
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8009e66:	e004      	b.n	8009e72 <tcp_receive+0x362>
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009e6e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009e7a:	4a98      	ldr	r2, [pc, #608]	; (800a0dc <tcp_receive+0x5cc>)
 8009e7c:	6878      	ldr	r0, [r7, #4]
 8009e7e:	f7ff fdcb 	bl	8009a18 <tcp_free_acked_segments>
 8009e82:	4602      	mov	r2, r0
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e90:	4a93      	ldr	r2, [pc, #588]	; (800a0e0 <tcp_receive+0x5d0>)
 8009e92:	6878      	ldr	r0, [r7, #4]
 8009e94:	f7ff fdc0 	bl	8009a18 <tcp_free_acked_segments>
 8009e98:	4602      	mov	r2, r0
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d104      	bne.n	8009eb0 <tcp_receive+0x3a0>
        pcb->rtime = -1;
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009eac:	861a      	strh	r2, [r3, #48]	; 0x30
 8009eae:	e002      	b.n	8009eb6 <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	2200      	movs	r2, #0
 8009eb4:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	2200      	movs	r2, #0
 8009eba:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d103      	bne.n	8009ecc <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	2200      	movs	r2, #0
 8009ec8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8009ed2:	4b84      	ldr	r3, [pc, #528]	; (800a0e4 <tcp_receive+0x5d4>)
 8009ed4:	881b      	ldrh	r3, [r3, #0]
 8009ed6:	4413      	add	r3, r2
 8009ed8:	b29a      	uxth	r2, r3
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	8b5b      	ldrh	r3, [r3, #26]
 8009ee4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d035      	beq.n	8009f58 <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d118      	bne.n	8009f26 <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d00c      	beq.n	8009f16 <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009f04:	68db      	ldr	r3, [r3, #12]
 8009f06:	685b      	ldr	r3, [r3, #4]
 8009f08:	4618      	mov	r0, r3
 8009f0a:	f7fb faba 	bl	8005482 <lwip_htonl>
 8009f0e:	4603      	mov	r3, r0
 8009f10:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	dc20      	bgt.n	8009f58 <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	8b5b      	ldrh	r3, [r3, #26]
 8009f1a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009f1e:	b29a      	uxth	r2, r3
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8009f24:	e018      	b.n	8009f58 <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f2e:	68db      	ldr	r3, [r3, #12]
 8009f30:	685b      	ldr	r3, [r3, #4]
 8009f32:	4618      	mov	r0, r3
 8009f34:	f7fb faa5 	bl	8005482 <lwip_htonl>
 8009f38:	4603      	mov	r3, r0
 8009f3a:	1ae3      	subs	r3, r4, r3
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	dc0b      	bgt.n	8009f58 <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	8b5b      	ldrh	r3, [r3, #26]
 8009f44:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009f48:	b29a      	uxth	r2, r3
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8009f4e:	e003      	b.n	8009f58 <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8009f50:	6878      	ldr	r0, [r7, #4]
 8009f52:	f001 ff85 	bl	800be60 <tcp_send_empty_ack>
 8009f56:	e000      	b.n	8009f5a <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8009f58:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d05b      	beq.n	800a01a <tcp_receive+0x50a>
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009f66:	4b60      	ldr	r3, [pc, #384]	; (800a0e8 <tcp_receive+0x5d8>)
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	1ad3      	subs	r3, r2, r3
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	da54      	bge.n	800a01a <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8009f70:	4b5e      	ldr	r3, [pc, #376]	; (800a0ec <tcp_receive+0x5dc>)
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	b29a      	uxth	r2, r3
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f7a:	b29b      	uxth	r3, r3
 8009f7c:	1ad3      	subs	r3, r2, r3
 8009f7e:	b29b      	uxth	r3, r3
 8009f80:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8009f84:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8009f8e:	10db      	asrs	r3, r3, #3
 8009f90:	b21b      	sxth	r3, r3
 8009f92:	b29b      	uxth	r3, r3
 8009f94:	1ad3      	subs	r3, r2, r3
 8009f96:	b29b      	uxth	r3, r3
 8009f98:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8009fa2:	b29a      	uxth	r2, r3
 8009fa4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8009fa8:	4413      	add	r3, r2
 8009faa:	b29b      	uxth	r3, r3
 8009fac:	b21a      	sxth	r2, r3
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8009fb2:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	da05      	bge.n	8009fc6 <tcp_receive+0x4b6>
        m = (s16_t) - m;
 8009fba:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8009fbe:	425b      	negs	r3, r3
 8009fc0:	b29b      	uxth	r3, r3
 8009fc2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8009fc6:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8009fd0:	109b      	asrs	r3, r3, #2
 8009fd2:	b21b      	sxth	r3, r3
 8009fd4:	b29b      	uxth	r3, r3
 8009fd6:	1ad3      	subs	r3, r2, r3
 8009fd8:	b29b      	uxth	r3, r3
 8009fda:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8009fe4:	b29a      	uxth	r2, r3
 8009fe6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8009fea:	4413      	add	r3, r2
 8009fec:	b29b      	uxth	r3, r3
 8009fee:	b21a      	sxth	r2, r3
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8009ffa:	10db      	asrs	r3, r3, #3
 8009ffc:	b21b      	sxth	r3, r3
 8009ffe:	b29a      	uxth	r2, r3
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800a006:	b29b      	uxth	r3, r3
 800a008:	4413      	add	r3, r2
 800a00a:	b29b      	uxth	r3, r3
 800a00c:	b21a      	sxth	r2, r3
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	2200      	movs	r2, #0
 800a018:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800a01a:	4b35      	ldr	r3, [pc, #212]	; (800a0f0 <tcp_receive+0x5e0>)
 800a01c:	881b      	ldrh	r3, [r3, #0]
 800a01e:	2b00      	cmp	r3, #0
 800a020:	f000 84e1 	beq.w	800a9e6 <tcp_receive+0xed6>
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	7d1b      	ldrb	r3, [r3, #20]
 800a028:	2b06      	cmp	r3, #6
 800a02a:	f200 84dc 	bhi.w	800a9e6 <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a032:	4b30      	ldr	r3, [pc, #192]	; (800a0f4 <tcp_receive+0x5e4>)
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	1ad3      	subs	r3, r2, r3
 800a038:	3b01      	subs	r3, #1
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	f2c0 808e 	blt.w	800a15c <tcp_receive+0x64c>
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a044:	4b2a      	ldr	r3, [pc, #168]	; (800a0f0 <tcp_receive+0x5e0>)
 800a046:	881b      	ldrh	r3, [r3, #0]
 800a048:	4619      	mov	r1, r3
 800a04a:	4b2a      	ldr	r3, [pc, #168]	; (800a0f4 <tcp_receive+0x5e4>)
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	440b      	add	r3, r1
 800a050:	1ad3      	subs	r3, r2, r3
 800a052:	3301      	adds	r3, #1
 800a054:	2b00      	cmp	r3, #0
 800a056:	f300 8081 	bgt.w	800a15c <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800a05a:	4b27      	ldr	r3, [pc, #156]	; (800a0f8 <tcp_receive+0x5e8>)
 800a05c:	685b      	ldr	r3, [r3, #4]
 800a05e:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a064:	4b23      	ldr	r3, [pc, #140]	; (800a0f4 <tcp_receive+0x5e4>)
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	1ad3      	subs	r3, r2, r3
 800a06a:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800a06c:	4b22      	ldr	r3, [pc, #136]	; (800a0f8 <tcp_receive+0x5e8>)
 800a06e:	685b      	ldr	r3, [r3, #4]
 800a070:	2b00      	cmp	r3, #0
 800a072:	d106      	bne.n	800a082 <tcp_receive+0x572>
 800a074:	4b21      	ldr	r3, [pc, #132]	; (800a0fc <tcp_receive+0x5ec>)
 800a076:	f240 5294 	movw	r2, #1428	; 0x594
 800a07a:	4921      	ldr	r1, [pc, #132]	; (800a100 <tcp_receive+0x5f0>)
 800a07c:	4821      	ldr	r0, [pc, #132]	; (800a104 <tcp_receive+0x5f4>)
 800a07e:	f004 fc5d 	bl	800e93c <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800a082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a084:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800a088:	4293      	cmp	r3, r2
 800a08a:	d906      	bls.n	800a09a <tcp_receive+0x58a>
 800a08c:	4b1b      	ldr	r3, [pc, #108]	; (800a0fc <tcp_receive+0x5ec>)
 800a08e:	f240 5295 	movw	r2, #1429	; 0x595
 800a092:	491d      	ldr	r1, [pc, #116]	; (800a108 <tcp_receive+0x5f8>)
 800a094:	481b      	ldr	r0, [pc, #108]	; (800a104 <tcp_receive+0x5f4>)
 800a096:	f004 fc51 	bl	800e93c <iprintf>
      off = (u16_t)off32;
 800a09a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a09c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800a0a0:	4b15      	ldr	r3, [pc, #84]	; (800a0f8 <tcp_receive+0x5e8>)
 800a0a2:	685b      	ldr	r3, [r3, #4]
 800a0a4:	891b      	ldrh	r3, [r3, #8]
 800a0a6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800a0aa:	429a      	cmp	r2, r3
 800a0ac:	d906      	bls.n	800a0bc <tcp_receive+0x5ac>
 800a0ae:	4b13      	ldr	r3, [pc, #76]	; (800a0fc <tcp_receive+0x5ec>)
 800a0b0:	f240 5297 	movw	r2, #1431	; 0x597
 800a0b4:	4915      	ldr	r1, [pc, #84]	; (800a10c <tcp_receive+0x5fc>)
 800a0b6:	4813      	ldr	r0, [pc, #76]	; (800a104 <tcp_receive+0x5f4>)
 800a0b8:	f004 fc40 	bl	800e93c <iprintf>
      inseg.len -= off;
 800a0bc:	4b0e      	ldr	r3, [pc, #56]	; (800a0f8 <tcp_receive+0x5e8>)
 800a0be:	891a      	ldrh	r2, [r3, #8]
 800a0c0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800a0c4:	1ad3      	subs	r3, r2, r3
 800a0c6:	b29a      	uxth	r2, r3
 800a0c8:	4b0b      	ldr	r3, [pc, #44]	; (800a0f8 <tcp_receive+0x5e8>)
 800a0ca:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800a0cc:	4b0a      	ldr	r3, [pc, #40]	; (800a0f8 <tcp_receive+0x5e8>)
 800a0ce:	685b      	ldr	r3, [r3, #4]
 800a0d0:	891a      	ldrh	r2, [r3, #8]
 800a0d2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800a0d6:	1ad3      	subs	r3, r2, r3
 800a0d8:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800a0da:	e029      	b.n	800a130 <tcp_receive+0x620>
 800a0dc:	08010d60 	.word	0x08010d60
 800a0e0:	08010d68 	.word	0x08010d68
 800a0e4:	200000ec 	.word	0x200000ec
 800a0e8:	200000e8 	.word	0x200000e8
 800a0ec:	20008ae4 	.word	0x20008ae4
 800a0f0:	200000ee 	.word	0x200000ee
 800a0f4:	200000e4 	.word	0x200000e4
 800a0f8:	200000c4 	.word	0x200000c4
 800a0fc:	080109f8 	.word	0x080109f8
 800a100:	08010d70 	.word	0x08010d70
 800a104:	08010a44 	.word	0x08010a44
 800a108:	08010d80 	.word	0x08010d80
 800a10c:	08010d90 	.word	0x08010d90
        off -= p->len;
 800a110:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a112:	895b      	ldrh	r3, [r3, #10]
 800a114:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800a118:	1ad3      	subs	r3, r2, r3
 800a11a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800a11e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a120:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800a122:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800a124:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a126:	2200      	movs	r2, #0
 800a128:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800a12a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800a130:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a132:	895b      	ldrh	r3, [r3, #10]
 800a134:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800a138:	429a      	cmp	r2, r3
 800a13a:	d8e9      	bhi.n	800a110 <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800a13c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800a140:	4619      	mov	r1, r3
 800a142:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800a144:	f7fc fb8c 	bl	8006860 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a14c:	4a91      	ldr	r2, [pc, #580]	; (800a394 <tcp_receive+0x884>)
 800a14e:	6013      	str	r3, [r2, #0]
 800a150:	4b91      	ldr	r3, [pc, #580]	; (800a398 <tcp_receive+0x888>)
 800a152:	68db      	ldr	r3, [r3, #12]
 800a154:	4a8f      	ldr	r2, [pc, #572]	; (800a394 <tcp_receive+0x884>)
 800a156:	6812      	ldr	r2, [r2, #0]
 800a158:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800a15a:	e00d      	b.n	800a178 <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800a15c:	4b8d      	ldr	r3, [pc, #564]	; (800a394 <tcp_receive+0x884>)
 800a15e:	681a      	ldr	r2, [r3, #0]
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a164:	1ad3      	subs	r3, r2, r3
 800a166:	2b00      	cmp	r3, #0
 800a168:	da06      	bge.n	800a178 <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	8b5b      	ldrh	r3, [r3, #26]
 800a16e:	f043 0302 	orr.w	r3, r3, #2
 800a172:	b29a      	uxth	r2, r3
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800a178:	4b86      	ldr	r3, [pc, #536]	; (800a394 <tcp_receive+0x884>)
 800a17a:	681a      	ldr	r2, [r3, #0]
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a180:	1ad3      	subs	r3, r2, r3
 800a182:	2b00      	cmp	r3, #0
 800a184:	f2c0 842a 	blt.w	800a9dc <tcp_receive+0xecc>
 800a188:	4b82      	ldr	r3, [pc, #520]	; (800a394 <tcp_receive+0x884>)
 800a18a:	681a      	ldr	r2, [r3, #0]
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a190:	6879      	ldr	r1, [r7, #4]
 800a192:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800a194:	440b      	add	r3, r1
 800a196:	1ad3      	subs	r3, r2, r3
 800a198:	3301      	adds	r3, #1
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	f300 841e 	bgt.w	800a9dc <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a1a4:	4b7b      	ldr	r3, [pc, #492]	; (800a394 <tcp_receive+0x884>)
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	429a      	cmp	r2, r3
 800a1aa:	f040 829a 	bne.w	800a6e2 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800a1ae:	4b7a      	ldr	r3, [pc, #488]	; (800a398 <tcp_receive+0x888>)
 800a1b0:	891c      	ldrh	r4, [r3, #8]
 800a1b2:	4b79      	ldr	r3, [pc, #484]	; (800a398 <tcp_receive+0x888>)
 800a1b4:	68db      	ldr	r3, [r3, #12]
 800a1b6:	899b      	ldrh	r3, [r3, #12]
 800a1b8:	b29b      	uxth	r3, r3
 800a1ba:	4618      	mov	r0, r3
 800a1bc:	f7fb f94c 	bl	8005458 <lwip_htons>
 800a1c0:	4603      	mov	r3, r0
 800a1c2:	b2db      	uxtb	r3, r3
 800a1c4:	f003 0303 	and.w	r3, r3, #3
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d001      	beq.n	800a1d0 <tcp_receive+0x6c0>
 800a1cc:	2301      	movs	r3, #1
 800a1ce:	e000      	b.n	800a1d2 <tcp_receive+0x6c2>
 800a1d0:	2300      	movs	r3, #0
 800a1d2:	4423      	add	r3, r4
 800a1d4:	b29a      	uxth	r2, r3
 800a1d6:	4b71      	ldr	r3, [pc, #452]	; (800a39c <tcp_receive+0x88c>)
 800a1d8:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800a1de:	4b6f      	ldr	r3, [pc, #444]	; (800a39c <tcp_receive+0x88c>)
 800a1e0:	881b      	ldrh	r3, [r3, #0]
 800a1e2:	429a      	cmp	r2, r3
 800a1e4:	d275      	bcs.n	800a2d2 <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800a1e6:	4b6c      	ldr	r3, [pc, #432]	; (800a398 <tcp_receive+0x888>)
 800a1e8:	68db      	ldr	r3, [r3, #12]
 800a1ea:	899b      	ldrh	r3, [r3, #12]
 800a1ec:	b29b      	uxth	r3, r3
 800a1ee:	4618      	mov	r0, r3
 800a1f0:	f7fb f932 	bl	8005458 <lwip_htons>
 800a1f4:	4603      	mov	r3, r0
 800a1f6:	b2db      	uxtb	r3, r3
 800a1f8:	f003 0301 	and.w	r3, r3, #1
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d01f      	beq.n	800a240 <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800a200:	4b65      	ldr	r3, [pc, #404]	; (800a398 <tcp_receive+0x888>)
 800a202:	68db      	ldr	r3, [r3, #12]
 800a204:	899b      	ldrh	r3, [r3, #12]
 800a206:	b29b      	uxth	r3, r3
 800a208:	b21b      	sxth	r3, r3
 800a20a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800a20e:	b21c      	sxth	r4, r3
 800a210:	4b61      	ldr	r3, [pc, #388]	; (800a398 <tcp_receive+0x888>)
 800a212:	68db      	ldr	r3, [r3, #12]
 800a214:	899b      	ldrh	r3, [r3, #12]
 800a216:	b29b      	uxth	r3, r3
 800a218:	4618      	mov	r0, r3
 800a21a:	f7fb f91d 	bl	8005458 <lwip_htons>
 800a21e:	4603      	mov	r3, r0
 800a220:	b2db      	uxtb	r3, r3
 800a222:	b29b      	uxth	r3, r3
 800a224:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800a228:	b29b      	uxth	r3, r3
 800a22a:	4618      	mov	r0, r3
 800a22c:	f7fb f914 	bl	8005458 <lwip_htons>
 800a230:	4603      	mov	r3, r0
 800a232:	b21b      	sxth	r3, r3
 800a234:	4323      	orrs	r3, r4
 800a236:	b21a      	sxth	r2, r3
 800a238:	4b57      	ldr	r3, [pc, #348]	; (800a398 <tcp_receive+0x888>)
 800a23a:	68db      	ldr	r3, [r3, #12]
 800a23c:	b292      	uxth	r2, r2
 800a23e:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800a244:	4b54      	ldr	r3, [pc, #336]	; (800a398 <tcp_receive+0x888>)
 800a246:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800a248:	4b53      	ldr	r3, [pc, #332]	; (800a398 <tcp_receive+0x888>)
 800a24a:	68db      	ldr	r3, [r3, #12]
 800a24c:	899b      	ldrh	r3, [r3, #12]
 800a24e:	b29b      	uxth	r3, r3
 800a250:	4618      	mov	r0, r3
 800a252:	f7fb f901 	bl	8005458 <lwip_htons>
 800a256:	4603      	mov	r3, r0
 800a258:	b2db      	uxtb	r3, r3
 800a25a:	f003 0302 	and.w	r3, r3, #2
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d005      	beq.n	800a26e <tcp_receive+0x75e>
            inseg.len -= 1;
 800a262:	4b4d      	ldr	r3, [pc, #308]	; (800a398 <tcp_receive+0x888>)
 800a264:	891b      	ldrh	r3, [r3, #8]
 800a266:	3b01      	subs	r3, #1
 800a268:	b29a      	uxth	r2, r3
 800a26a:	4b4b      	ldr	r3, [pc, #300]	; (800a398 <tcp_receive+0x888>)
 800a26c:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800a26e:	4b4a      	ldr	r3, [pc, #296]	; (800a398 <tcp_receive+0x888>)
 800a270:	685a      	ldr	r2, [r3, #4]
 800a272:	4b49      	ldr	r3, [pc, #292]	; (800a398 <tcp_receive+0x888>)
 800a274:	891b      	ldrh	r3, [r3, #8]
 800a276:	4619      	mov	r1, r3
 800a278:	4610      	mov	r0, r2
 800a27a:	f7fc f9f1 	bl	8006660 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800a27e:	4b46      	ldr	r3, [pc, #280]	; (800a398 <tcp_receive+0x888>)
 800a280:	891c      	ldrh	r4, [r3, #8]
 800a282:	4b45      	ldr	r3, [pc, #276]	; (800a398 <tcp_receive+0x888>)
 800a284:	68db      	ldr	r3, [r3, #12]
 800a286:	899b      	ldrh	r3, [r3, #12]
 800a288:	b29b      	uxth	r3, r3
 800a28a:	4618      	mov	r0, r3
 800a28c:	f7fb f8e4 	bl	8005458 <lwip_htons>
 800a290:	4603      	mov	r3, r0
 800a292:	b2db      	uxtb	r3, r3
 800a294:	f003 0303 	and.w	r3, r3, #3
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d001      	beq.n	800a2a0 <tcp_receive+0x790>
 800a29c:	2301      	movs	r3, #1
 800a29e:	e000      	b.n	800a2a2 <tcp_receive+0x792>
 800a2a0:	2300      	movs	r3, #0
 800a2a2:	4423      	add	r3, r4
 800a2a4:	b29a      	uxth	r2, r3
 800a2a6:	4b3d      	ldr	r3, [pc, #244]	; (800a39c <tcp_receive+0x88c>)
 800a2a8:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800a2aa:	4b3c      	ldr	r3, [pc, #240]	; (800a39c <tcp_receive+0x88c>)
 800a2ac:	881b      	ldrh	r3, [r3, #0]
 800a2ae:	461a      	mov	r2, r3
 800a2b0:	4b38      	ldr	r3, [pc, #224]	; (800a394 <tcp_receive+0x884>)
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	441a      	add	r2, r3
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2ba:	6879      	ldr	r1, [r7, #4]
 800a2bc:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800a2be:	440b      	add	r3, r1
 800a2c0:	429a      	cmp	r2, r3
 800a2c2:	d006      	beq.n	800a2d2 <tcp_receive+0x7c2>
 800a2c4:	4b36      	ldr	r3, [pc, #216]	; (800a3a0 <tcp_receive+0x890>)
 800a2c6:	f240 52cc 	movw	r2, #1484	; 0x5cc
 800a2ca:	4936      	ldr	r1, [pc, #216]	; (800a3a4 <tcp_receive+0x894>)
 800a2cc:	4836      	ldr	r0, [pc, #216]	; (800a3a8 <tcp_receive+0x898>)
 800a2ce:	f004 fb35 	bl	800e93c <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	f000 80e7 	beq.w	800a4aa <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800a2dc:	4b2e      	ldr	r3, [pc, #184]	; (800a398 <tcp_receive+0x888>)
 800a2de:	68db      	ldr	r3, [r3, #12]
 800a2e0:	899b      	ldrh	r3, [r3, #12]
 800a2e2:	b29b      	uxth	r3, r3
 800a2e4:	4618      	mov	r0, r3
 800a2e6:	f7fb f8b7 	bl	8005458 <lwip_htons>
 800a2ea:	4603      	mov	r3, r0
 800a2ec:	b2db      	uxtb	r3, r3
 800a2ee:	f003 0301 	and.w	r3, r3, #1
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d010      	beq.n	800a318 <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800a2f6:	e00a      	b.n	800a30e <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a2fc:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a302:	681a      	ldr	r2, [r3, #0]
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800a308:	68f8      	ldr	r0, [r7, #12]
 800a30a:	f7fd fd97 	bl	8007e3c <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a312:	2b00      	cmp	r3, #0
 800a314:	d1f0      	bne.n	800a2f8 <tcp_receive+0x7e8>
 800a316:	e0c8      	b.n	800a4aa <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a31c:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800a31e:	e052      	b.n	800a3c6 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800a320:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a322:	68db      	ldr	r3, [r3, #12]
 800a324:	899b      	ldrh	r3, [r3, #12]
 800a326:	b29b      	uxth	r3, r3
 800a328:	4618      	mov	r0, r3
 800a32a:	f7fb f895 	bl	8005458 <lwip_htons>
 800a32e:	4603      	mov	r3, r0
 800a330:	b2db      	uxtb	r3, r3
 800a332:	f003 0301 	and.w	r3, r3, #1
 800a336:	2b00      	cmp	r3, #0
 800a338:	d03d      	beq.n	800a3b6 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800a33a:	4b17      	ldr	r3, [pc, #92]	; (800a398 <tcp_receive+0x888>)
 800a33c:	68db      	ldr	r3, [r3, #12]
 800a33e:	899b      	ldrh	r3, [r3, #12]
 800a340:	b29b      	uxth	r3, r3
 800a342:	4618      	mov	r0, r3
 800a344:	f7fb f888 	bl	8005458 <lwip_htons>
 800a348:	4603      	mov	r3, r0
 800a34a:	b2db      	uxtb	r3, r3
 800a34c:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800a350:	2b00      	cmp	r3, #0
 800a352:	d130      	bne.n	800a3b6 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800a354:	4b10      	ldr	r3, [pc, #64]	; (800a398 <tcp_receive+0x888>)
 800a356:	68db      	ldr	r3, [r3, #12]
 800a358:	899b      	ldrh	r3, [r3, #12]
 800a35a:	b29c      	uxth	r4, r3
 800a35c:	2001      	movs	r0, #1
 800a35e:	f7fb f87b 	bl	8005458 <lwip_htons>
 800a362:	4603      	mov	r3, r0
 800a364:	461a      	mov	r2, r3
 800a366:	4b0c      	ldr	r3, [pc, #48]	; (800a398 <tcp_receive+0x888>)
 800a368:	68db      	ldr	r3, [r3, #12]
 800a36a:	4322      	orrs	r2, r4
 800a36c:	b292      	uxth	r2, r2
 800a36e:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800a370:	4b09      	ldr	r3, [pc, #36]	; (800a398 <tcp_receive+0x888>)
 800a372:	891c      	ldrh	r4, [r3, #8]
 800a374:	4b08      	ldr	r3, [pc, #32]	; (800a398 <tcp_receive+0x888>)
 800a376:	68db      	ldr	r3, [r3, #12]
 800a378:	899b      	ldrh	r3, [r3, #12]
 800a37a:	b29b      	uxth	r3, r3
 800a37c:	4618      	mov	r0, r3
 800a37e:	f7fb f86b 	bl	8005458 <lwip_htons>
 800a382:	4603      	mov	r3, r0
 800a384:	b2db      	uxtb	r3, r3
 800a386:	f003 0303 	and.w	r3, r3, #3
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d00e      	beq.n	800a3ac <tcp_receive+0x89c>
 800a38e:	2301      	movs	r3, #1
 800a390:	e00d      	b.n	800a3ae <tcp_receive+0x89e>
 800a392:	bf00      	nop
 800a394:	200000e4 	.word	0x200000e4
 800a398:	200000c4 	.word	0x200000c4
 800a39c:	200000ee 	.word	0x200000ee
 800a3a0:	080109f8 	.word	0x080109f8
 800a3a4:	08010da0 	.word	0x08010da0
 800a3a8:	08010a44 	.word	0x08010a44
 800a3ac:	2300      	movs	r3, #0
 800a3ae:	4423      	add	r3, r4
 800a3b0:	b29a      	uxth	r2, r3
 800a3b2:	4b98      	ldr	r3, [pc, #608]	; (800a614 <tcp_receive+0xb04>)
 800a3b4:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800a3b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a3b8:	613b      	str	r3, [r7, #16]
              next = next->next;
 800a3ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800a3c0:	6938      	ldr	r0, [r7, #16]
 800a3c2:	f7fd fd3b 	bl	8007e3c <tcp_seg_free>
            while (next &&
 800a3c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d00e      	beq.n	800a3ea <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800a3cc:	4b91      	ldr	r3, [pc, #580]	; (800a614 <tcp_receive+0xb04>)
 800a3ce:	881b      	ldrh	r3, [r3, #0]
 800a3d0:	461a      	mov	r2, r3
 800a3d2:	4b91      	ldr	r3, [pc, #580]	; (800a618 <tcp_receive+0xb08>)
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	441a      	add	r2, r3
 800a3d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a3da:	68db      	ldr	r3, [r3, #12]
 800a3dc:	685b      	ldr	r3, [r3, #4]
 800a3de:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a3e0:	8909      	ldrh	r1, [r1, #8]
 800a3e2:	440b      	add	r3, r1
 800a3e4:	1ad3      	subs	r3, r2, r3
            while (next &&
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	da9a      	bge.n	800a320 <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800a3ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d059      	beq.n	800a4a4 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 800a3f0:	4b88      	ldr	r3, [pc, #544]	; (800a614 <tcp_receive+0xb04>)
 800a3f2:	881b      	ldrh	r3, [r3, #0]
 800a3f4:	461a      	mov	r2, r3
 800a3f6:	4b88      	ldr	r3, [pc, #544]	; (800a618 <tcp_receive+0xb08>)
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	441a      	add	r2, r3
 800a3fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a3fe:	68db      	ldr	r3, [r3, #12]
 800a400:	685b      	ldr	r3, [r3, #4]
 800a402:	1ad3      	subs	r3, r2, r3
            if (next &&
 800a404:	2b00      	cmp	r3, #0
 800a406:	dd4d      	ble.n	800a4a4 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800a408:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a40a:	68db      	ldr	r3, [r3, #12]
 800a40c:	685b      	ldr	r3, [r3, #4]
 800a40e:	b29a      	uxth	r2, r3
 800a410:	4b81      	ldr	r3, [pc, #516]	; (800a618 <tcp_receive+0xb08>)
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	b29b      	uxth	r3, r3
 800a416:	1ad3      	subs	r3, r2, r3
 800a418:	b29a      	uxth	r2, r3
 800a41a:	4b80      	ldr	r3, [pc, #512]	; (800a61c <tcp_receive+0xb0c>)
 800a41c:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800a41e:	4b7f      	ldr	r3, [pc, #508]	; (800a61c <tcp_receive+0xb0c>)
 800a420:	68db      	ldr	r3, [r3, #12]
 800a422:	899b      	ldrh	r3, [r3, #12]
 800a424:	b29b      	uxth	r3, r3
 800a426:	4618      	mov	r0, r3
 800a428:	f7fb f816 	bl	8005458 <lwip_htons>
 800a42c:	4603      	mov	r3, r0
 800a42e:	b2db      	uxtb	r3, r3
 800a430:	f003 0302 	and.w	r3, r3, #2
 800a434:	2b00      	cmp	r3, #0
 800a436:	d005      	beq.n	800a444 <tcp_receive+0x934>
                inseg.len -= 1;
 800a438:	4b78      	ldr	r3, [pc, #480]	; (800a61c <tcp_receive+0xb0c>)
 800a43a:	891b      	ldrh	r3, [r3, #8]
 800a43c:	3b01      	subs	r3, #1
 800a43e:	b29a      	uxth	r2, r3
 800a440:	4b76      	ldr	r3, [pc, #472]	; (800a61c <tcp_receive+0xb0c>)
 800a442:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800a444:	4b75      	ldr	r3, [pc, #468]	; (800a61c <tcp_receive+0xb0c>)
 800a446:	685a      	ldr	r2, [r3, #4]
 800a448:	4b74      	ldr	r3, [pc, #464]	; (800a61c <tcp_receive+0xb0c>)
 800a44a:	891b      	ldrh	r3, [r3, #8]
 800a44c:	4619      	mov	r1, r3
 800a44e:	4610      	mov	r0, r2
 800a450:	f7fc f906 	bl	8006660 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800a454:	4b71      	ldr	r3, [pc, #452]	; (800a61c <tcp_receive+0xb0c>)
 800a456:	891c      	ldrh	r4, [r3, #8]
 800a458:	4b70      	ldr	r3, [pc, #448]	; (800a61c <tcp_receive+0xb0c>)
 800a45a:	68db      	ldr	r3, [r3, #12]
 800a45c:	899b      	ldrh	r3, [r3, #12]
 800a45e:	b29b      	uxth	r3, r3
 800a460:	4618      	mov	r0, r3
 800a462:	f7fa fff9 	bl	8005458 <lwip_htons>
 800a466:	4603      	mov	r3, r0
 800a468:	b2db      	uxtb	r3, r3
 800a46a:	f003 0303 	and.w	r3, r3, #3
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d001      	beq.n	800a476 <tcp_receive+0x966>
 800a472:	2301      	movs	r3, #1
 800a474:	e000      	b.n	800a478 <tcp_receive+0x968>
 800a476:	2300      	movs	r3, #0
 800a478:	4423      	add	r3, r4
 800a47a:	b29a      	uxth	r2, r3
 800a47c:	4b65      	ldr	r3, [pc, #404]	; (800a614 <tcp_receive+0xb04>)
 800a47e:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800a480:	4b64      	ldr	r3, [pc, #400]	; (800a614 <tcp_receive+0xb04>)
 800a482:	881b      	ldrh	r3, [r3, #0]
 800a484:	461a      	mov	r2, r3
 800a486:	4b64      	ldr	r3, [pc, #400]	; (800a618 <tcp_receive+0xb08>)
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	441a      	add	r2, r3
 800a48c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a48e:	68db      	ldr	r3, [r3, #12]
 800a490:	685b      	ldr	r3, [r3, #4]
 800a492:	429a      	cmp	r2, r3
 800a494:	d006      	beq.n	800a4a4 <tcp_receive+0x994>
 800a496:	4b62      	ldr	r3, [pc, #392]	; (800a620 <tcp_receive+0xb10>)
 800a498:	f240 52fd 	movw	r2, #1533	; 0x5fd
 800a49c:	4961      	ldr	r1, [pc, #388]	; (800a624 <tcp_receive+0xb14>)
 800a49e:	4862      	ldr	r0, [pc, #392]	; (800a628 <tcp_receive+0xb18>)
 800a4a0:	f004 fa4c 	bl	800e93c <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a4a8:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800a4aa:	4b5a      	ldr	r3, [pc, #360]	; (800a614 <tcp_receive+0xb04>)
 800a4ac:	881b      	ldrh	r3, [r3, #0]
 800a4ae:	461a      	mov	r2, r3
 800a4b0:	4b59      	ldr	r3, [pc, #356]	; (800a618 <tcp_receive+0xb08>)
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	441a      	add	r2, r3
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800a4be:	4b55      	ldr	r3, [pc, #340]	; (800a614 <tcp_receive+0xb04>)
 800a4c0:	881b      	ldrh	r3, [r3, #0]
 800a4c2:	429a      	cmp	r2, r3
 800a4c4:	d206      	bcs.n	800a4d4 <tcp_receive+0x9c4>
 800a4c6:	4b56      	ldr	r3, [pc, #344]	; (800a620 <tcp_receive+0xb10>)
 800a4c8:	f240 6207 	movw	r2, #1543	; 0x607
 800a4cc:	4957      	ldr	r1, [pc, #348]	; (800a62c <tcp_receive+0xb1c>)
 800a4ce:	4856      	ldr	r0, [pc, #344]	; (800a628 <tcp_receive+0xb18>)
 800a4d0:	f004 fa34 	bl	800e93c <iprintf>
        pcb->rcv_wnd -= tcplen;
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800a4d8:	4b4e      	ldr	r3, [pc, #312]	; (800a614 <tcp_receive+0xb04>)
 800a4da:	881b      	ldrh	r3, [r3, #0]
 800a4dc:	1ad3      	subs	r3, r2, r3
 800a4de:	b29a      	uxth	r2, r3
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800a4e4:	6878      	ldr	r0, [r7, #4]
 800a4e6:	f7fc ffcd 	bl	8007484 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800a4ea:	4b4c      	ldr	r3, [pc, #304]	; (800a61c <tcp_receive+0xb0c>)
 800a4ec:	685b      	ldr	r3, [r3, #4]
 800a4ee:	891b      	ldrh	r3, [r3, #8]
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d006      	beq.n	800a502 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 800a4f4:	4b49      	ldr	r3, [pc, #292]	; (800a61c <tcp_receive+0xb0c>)
 800a4f6:	685b      	ldr	r3, [r3, #4]
 800a4f8:	4a4d      	ldr	r2, [pc, #308]	; (800a630 <tcp_receive+0xb20>)
 800a4fa:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800a4fc:	4b47      	ldr	r3, [pc, #284]	; (800a61c <tcp_receive+0xb0c>)
 800a4fe:	2200      	movs	r2, #0
 800a500:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800a502:	4b46      	ldr	r3, [pc, #280]	; (800a61c <tcp_receive+0xb0c>)
 800a504:	68db      	ldr	r3, [r3, #12]
 800a506:	899b      	ldrh	r3, [r3, #12]
 800a508:	b29b      	uxth	r3, r3
 800a50a:	4618      	mov	r0, r3
 800a50c:	f7fa ffa4 	bl	8005458 <lwip_htons>
 800a510:	4603      	mov	r3, r0
 800a512:	b2db      	uxtb	r3, r3
 800a514:	f003 0301 	and.w	r3, r3, #1
 800a518:	2b00      	cmp	r3, #0
 800a51a:	f000 80b8 	beq.w	800a68e <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800a51e:	4b45      	ldr	r3, [pc, #276]	; (800a634 <tcp_receive+0xb24>)
 800a520:	781b      	ldrb	r3, [r3, #0]
 800a522:	f043 0320 	orr.w	r3, r3, #32
 800a526:	b2da      	uxtb	r2, r3
 800a528:	4b42      	ldr	r3, [pc, #264]	; (800a634 <tcp_receive+0xb24>)
 800a52a:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800a52c:	e0af      	b.n	800a68e <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a532:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a538:	68db      	ldr	r3, [r3, #12]
 800a53a:	685b      	ldr	r3, [r3, #4]
 800a53c:	4a36      	ldr	r2, [pc, #216]	; (800a618 <tcp_receive+0xb08>)
 800a53e:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800a540:	68bb      	ldr	r3, [r7, #8]
 800a542:	891b      	ldrh	r3, [r3, #8]
 800a544:	461c      	mov	r4, r3
 800a546:	68bb      	ldr	r3, [r7, #8]
 800a548:	68db      	ldr	r3, [r3, #12]
 800a54a:	899b      	ldrh	r3, [r3, #12]
 800a54c:	b29b      	uxth	r3, r3
 800a54e:	4618      	mov	r0, r3
 800a550:	f7fa ff82 	bl	8005458 <lwip_htons>
 800a554:	4603      	mov	r3, r0
 800a556:	b2db      	uxtb	r3, r3
 800a558:	f003 0303 	and.w	r3, r3, #3
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d001      	beq.n	800a564 <tcp_receive+0xa54>
 800a560:	2301      	movs	r3, #1
 800a562:	e000      	b.n	800a566 <tcp_receive+0xa56>
 800a564:	2300      	movs	r3, #0
 800a566:	191a      	adds	r2, r3, r4
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a56c:	441a      	add	r2, r3
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a576:	461c      	mov	r4, r3
 800a578:	68bb      	ldr	r3, [r7, #8]
 800a57a:	891b      	ldrh	r3, [r3, #8]
 800a57c:	461d      	mov	r5, r3
 800a57e:	68bb      	ldr	r3, [r7, #8]
 800a580:	68db      	ldr	r3, [r3, #12]
 800a582:	899b      	ldrh	r3, [r3, #12]
 800a584:	b29b      	uxth	r3, r3
 800a586:	4618      	mov	r0, r3
 800a588:	f7fa ff66 	bl	8005458 <lwip_htons>
 800a58c:	4603      	mov	r3, r0
 800a58e:	b2db      	uxtb	r3, r3
 800a590:	f003 0303 	and.w	r3, r3, #3
 800a594:	2b00      	cmp	r3, #0
 800a596:	d001      	beq.n	800a59c <tcp_receive+0xa8c>
 800a598:	2301      	movs	r3, #1
 800a59a:	e000      	b.n	800a59e <tcp_receive+0xa8e>
 800a59c:	2300      	movs	r3, #0
 800a59e:	442b      	add	r3, r5
 800a5a0:	429c      	cmp	r4, r3
 800a5a2:	d206      	bcs.n	800a5b2 <tcp_receive+0xaa2>
 800a5a4:	4b1e      	ldr	r3, [pc, #120]	; (800a620 <tcp_receive+0xb10>)
 800a5a6:	f240 622c 	movw	r2, #1580	; 0x62c
 800a5aa:	4923      	ldr	r1, [pc, #140]	; (800a638 <tcp_receive+0xb28>)
 800a5ac:	481e      	ldr	r0, [pc, #120]	; (800a628 <tcp_receive+0xb18>)
 800a5ae:	f004 f9c5 	bl	800e93c <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800a5b2:	68bb      	ldr	r3, [r7, #8]
 800a5b4:	891b      	ldrh	r3, [r3, #8]
 800a5b6:	461c      	mov	r4, r3
 800a5b8:	68bb      	ldr	r3, [r7, #8]
 800a5ba:	68db      	ldr	r3, [r3, #12]
 800a5bc:	899b      	ldrh	r3, [r3, #12]
 800a5be:	b29b      	uxth	r3, r3
 800a5c0:	4618      	mov	r0, r3
 800a5c2:	f7fa ff49 	bl	8005458 <lwip_htons>
 800a5c6:	4603      	mov	r3, r0
 800a5c8:	b2db      	uxtb	r3, r3
 800a5ca:	f003 0303 	and.w	r3, r3, #3
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d001      	beq.n	800a5d6 <tcp_receive+0xac6>
 800a5d2:	2301      	movs	r3, #1
 800a5d4:	e000      	b.n	800a5d8 <tcp_receive+0xac8>
 800a5d6:	2300      	movs	r3, #0
 800a5d8:	1919      	adds	r1, r3, r4
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800a5de:	b28b      	uxth	r3, r1
 800a5e0:	1ad3      	subs	r3, r2, r3
 800a5e2:	b29a      	uxth	r2, r3
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800a5e8:	6878      	ldr	r0, [r7, #4]
 800a5ea:	f7fc ff4b 	bl	8007484 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800a5ee:	68bb      	ldr	r3, [r7, #8]
 800a5f0:	685b      	ldr	r3, [r3, #4]
 800a5f2:	891b      	ldrh	r3, [r3, #8]
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d028      	beq.n	800a64a <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800a5f8:	4b0d      	ldr	r3, [pc, #52]	; (800a630 <tcp_receive+0xb20>)
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d01d      	beq.n	800a63c <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 800a600:	4b0b      	ldr	r3, [pc, #44]	; (800a630 <tcp_receive+0xb20>)
 800a602:	681a      	ldr	r2, [r3, #0]
 800a604:	68bb      	ldr	r3, [r7, #8]
 800a606:	685b      	ldr	r3, [r3, #4]
 800a608:	4619      	mov	r1, r3
 800a60a:	4610      	mov	r0, r2
 800a60c:	f7fc fa70 	bl	8006af0 <pbuf_cat>
 800a610:	e018      	b.n	800a644 <tcp_receive+0xb34>
 800a612:	bf00      	nop
 800a614:	200000ee 	.word	0x200000ee
 800a618:	200000e4 	.word	0x200000e4
 800a61c:	200000c4 	.word	0x200000c4
 800a620:	080109f8 	.word	0x080109f8
 800a624:	08010dd8 	.word	0x08010dd8
 800a628:	08010a44 	.word	0x08010a44
 800a62c:	08010e14 	.word	0x08010e14
 800a630:	200000f4 	.word	0x200000f4
 800a634:	200000f1 	.word	0x200000f1
 800a638:	08010e34 	.word	0x08010e34
            } else {
              recv_data = cseg->p;
 800a63c:	68bb      	ldr	r3, [r7, #8]
 800a63e:	685b      	ldr	r3, [r3, #4]
 800a640:	4a70      	ldr	r2, [pc, #448]	; (800a804 <tcp_receive+0xcf4>)
 800a642:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800a644:	68bb      	ldr	r3, [r7, #8]
 800a646:	2200      	movs	r2, #0
 800a648:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800a64a:	68bb      	ldr	r3, [r7, #8]
 800a64c:	68db      	ldr	r3, [r3, #12]
 800a64e:	899b      	ldrh	r3, [r3, #12]
 800a650:	b29b      	uxth	r3, r3
 800a652:	4618      	mov	r0, r3
 800a654:	f7fa ff00 	bl	8005458 <lwip_htons>
 800a658:	4603      	mov	r3, r0
 800a65a:	b2db      	uxtb	r3, r3
 800a65c:	f003 0301 	and.w	r3, r3, #1
 800a660:	2b00      	cmp	r3, #0
 800a662:	d00d      	beq.n	800a680 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800a664:	4b68      	ldr	r3, [pc, #416]	; (800a808 <tcp_receive+0xcf8>)
 800a666:	781b      	ldrb	r3, [r3, #0]
 800a668:	f043 0320 	orr.w	r3, r3, #32
 800a66c:	b2da      	uxtb	r2, r3
 800a66e:	4b66      	ldr	r3, [pc, #408]	; (800a808 <tcp_receive+0xcf8>)
 800a670:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	7d1b      	ldrb	r3, [r3, #20]
 800a676:	2b04      	cmp	r3, #4
 800a678:	d102      	bne.n	800a680 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	2207      	movs	r2, #7
 800a67e:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800a680:	68bb      	ldr	r3, [r7, #8]
 800a682:	681a      	ldr	r2, [r3, #0]
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800a688:	68b8      	ldr	r0, [r7, #8]
 800a68a:	f7fd fbd7 	bl	8007e3c <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a692:	2b00      	cmp	r3, #0
 800a694:	d008      	beq.n	800a6a8 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a69a:	68db      	ldr	r3, [r3, #12]
 800a69c:	685a      	ldr	r2, [r3, #4]
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800a6a2:	429a      	cmp	r2, r3
 800a6a4:	f43f af43 	beq.w	800a52e <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	8b5b      	ldrh	r3, [r3, #26]
 800a6ac:	f003 0301 	and.w	r3, r3, #1
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d00e      	beq.n	800a6d2 <tcp_receive+0xbc2>
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	8b5b      	ldrh	r3, [r3, #26]
 800a6b8:	f023 0301 	bic.w	r3, r3, #1
 800a6bc:	b29a      	uxth	r2, r3
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	835a      	strh	r2, [r3, #26]
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	8b5b      	ldrh	r3, [r3, #26]
 800a6c6:	f043 0302 	orr.w	r3, r3, #2
 800a6ca:	b29a      	uxth	r2, r3
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800a6d0:	e188      	b.n	800a9e4 <tcp_receive+0xed4>
        tcp_ack(pcb);
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	8b5b      	ldrh	r3, [r3, #26]
 800a6d6:	f043 0301 	orr.w	r3, r3, #1
 800a6da:	b29a      	uxth	r2, r3
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800a6e0:	e180      	b.n	800a9e4 <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d106      	bne.n	800a6f8 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800a6ea:	4848      	ldr	r0, [pc, #288]	; (800a80c <tcp_receive+0xcfc>)
 800a6ec:	f7fd fbbe 	bl	8007e6c <tcp_seg_copy>
 800a6f0:	4602      	mov	r2, r0
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	675a      	str	r2, [r3, #116]	; 0x74
 800a6f6:	e16d      	b.n	800a9d4 <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800a6f8:	2300      	movs	r3, #0
 800a6fa:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a700:	63bb      	str	r3, [r7, #56]	; 0x38
 800a702:	e157      	b.n	800a9b4 <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 800a704:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a706:	68db      	ldr	r3, [r3, #12]
 800a708:	685a      	ldr	r2, [r3, #4]
 800a70a:	4b41      	ldr	r3, [pc, #260]	; (800a810 <tcp_receive+0xd00>)
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	429a      	cmp	r2, r3
 800a710:	d11d      	bne.n	800a74e <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800a712:	4b3e      	ldr	r3, [pc, #248]	; (800a80c <tcp_receive+0xcfc>)
 800a714:	891a      	ldrh	r2, [r3, #8]
 800a716:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a718:	891b      	ldrh	r3, [r3, #8]
 800a71a:	429a      	cmp	r2, r3
 800a71c:	f240 814f 	bls.w	800a9be <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800a720:	483a      	ldr	r0, [pc, #232]	; (800a80c <tcp_receive+0xcfc>)
 800a722:	f7fd fba3 	bl	8007e6c <tcp_seg_copy>
 800a726:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800a728:	697b      	ldr	r3, [r7, #20]
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	f000 8149 	beq.w	800a9c2 <tcp_receive+0xeb2>
                  if (prev != NULL) {
 800a730:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a732:	2b00      	cmp	r3, #0
 800a734:	d003      	beq.n	800a73e <tcp_receive+0xc2e>
                    prev->next = cseg;
 800a736:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a738:	697a      	ldr	r2, [r7, #20]
 800a73a:	601a      	str	r2, [r3, #0]
 800a73c:	e002      	b.n	800a744 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	697a      	ldr	r2, [r7, #20]
 800a742:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800a744:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a746:	6978      	ldr	r0, [r7, #20]
 800a748:	f7ff f8de 	bl	8009908 <tcp_oos_insert_segment>
                }
                break;
 800a74c:	e139      	b.n	800a9c2 <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800a74e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a750:	2b00      	cmp	r3, #0
 800a752:	d117      	bne.n	800a784 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800a754:	4b2e      	ldr	r3, [pc, #184]	; (800a810 <tcp_receive+0xd00>)
 800a756:	681a      	ldr	r2, [r3, #0]
 800a758:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a75a:	68db      	ldr	r3, [r3, #12]
 800a75c:	685b      	ldr	r3, [r3, #4]
 800a75e:	1ad3      	subs	r3, r2, r3
 800a760:	2b00      	cmp	r3, #0
 800a762:	da57      	bge.n	800a814 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800a764:	4829      	ldr	r0, [pc, #164]	; (800a80c <tcp_receive+0xcfc>)
 800a766:	f7fd fb81 	bl	8007e6c <tcp_seg_copy>
 800a76a:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800a76c:	69bb      	ldr	r3, [r7, #24]
 800a76e:	2b00      	cmp	r3, #0
 800a770:	f000 8129 	beq.w	800a9c6 <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	69ba      	ldr	r2, [r7, #24]
 800a778:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800a77a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a77c:	69b8      	ldr	r0, [r7, #24]
 800a77e:	f7ff f8c3 	bl	8009908 <tcp_oos_insert_segment>
                  }
                  break;
 800a782:	e120      	b.n	800a9c6 <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800a784:	4b22      	ldr	r3, [pc, #136]	; (800a810 <tcp_receive+0xd00>)
 800a786:	681a      	ldr	r2, [r3, #0]
 800a788:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a78a:	68db      	ldr	r3, [r3, #12]
 800a78c:	685b      	ldr	r3, [r3, #4]
 800a78e:	1ad3      	subs	r3, r2, r3
 800a790:	3b01      	subs	r3, #1
 800a792:	2b00      	cmp	r3, #0
 800a794:	db3e      	blt.n	800a814 <tcp_receive+0xd04>
 800a796:	4b1e      	ldr	r3, [pc, #120]	; (800a810 <tcp_receive+0xd00>)
 800a798:	681a      	ldr	r2, [r3, #0]
 800a79a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a79c:	68db      	ldr	r3, [r3, #12]
 800a79e:	685b      	ldr	r3, [r3, #4]
 800a7a0:	1ad3      	subs	r3, r2, r3
 800a7a2:	3301      	adds	r3, #1
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	dc35      	bgt.n	800a814 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800a7a8:	4818      	ldr	r0, [pc, #96]	; (800a80c <tcp_receive+0xcfc>)
 800a7aa:	f7fd fb5f 	bl	8007e6c <tcp_seg_copy>
 800a7ae:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800a7b0:	69fb      	ldr	r3, [r7, #28]
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	f000 8109 	beq.w	800a9ca <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800a7b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a7ba:	68db      	ldr	r3, [r3, #12]
 800a7bc:	685b      	ldr	r3, [r3, #4]
 800a7be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a7c0:	8912      	ldrh	r2, [r2, #8]
 800a7c2:	441a      	add	r2, r3
 800a7c4:	4b12      	ldr	r3, [pc, #72]	; (800a810 <tcp_receive+0xd00>)
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	1ad3      	subs	r3, r2, r3
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	dd12      	ble.n	800a7f4 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800a7ce:	4b10      	ldr	r3, [pc, #64]	; (800a810 <tcp_receive+0xd00>)
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	b29a      	uxth	r2, r3
 800a7d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a7d6:	68db      	ldr	r3, [r3, #12]
 800a7d8:	685b      	ldr	r3, [r3, #4]
 800a7da:	b29b      	uxth	r3, r3
 800a7dc:	1ad3      	subs	r3, r2, r3
 800a7de:	b29a      	uxth	r2, r3
 800a7e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a7e2:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800a7e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a7e6:	685a      	ldr	r2, [r3, #4]
 800a7e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a7ea:	891b      	ldrh	r3, [r3, #8]
 800a7ec:	4619      	mov	r1, r3
 800a7ee:	4610      	mov	r0, r2
 800a7f0:	f7fb ff36 	bl	8006660 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800a7f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a7f6:	69fa      	ldr	r2, [r7, #28]
 800a7f8:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800a7fa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a7fc:	69f8      	ldr	r0, [r7, #28]
 800a7fe:	f7ff f883 	bl	8009908 <tcp_oos_insert_segment>
                  }
                  break;
 800a802:	e0e2      	b.n	800a9ca <tcp_receive+0xeba>
 800a804:	200000f4 	.word	0x200000f4
 800a808:	200000f1 	.word	0x200000f1
 800a80c:	200000c4 	.word	0x200000c4
 800a810:	200000e4 	.word	0x200000e4
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800a814:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a816:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800a818:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	f040 80c6 	bne.w	800a9ae <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800a822:	4b80      	ldr	r3, [pc, #512]	; (800aa24 <tcp_receive+0xf14>)
 800a824:	681a      	ldr	r2, [r3, #0]
 800a826:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a828:	68db      	ldr	r3, [r3, #12]
 800a82a:	685b      	ldr	r3, [r3, #4]
 800a82c:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800a82e:	2b00      	cmp	r3, #0
 800a830:	f340 80bd 	ble.w	800a9ae <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800a834:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a836:	68db      	ldr	r3, [r3, #12]
 800a838:	899b      	ldrh	r3, [r3, #12]
 800a83a:	b29b      	uxth	r3, r3
 800a83c:	4618      	mov	r0, r3
 800a83e:	f7fa fe0b 	bl	8005458 <lwip_htons>
 800a842:	4603      	mov	r3, r0
 800a844:	b2db      	uxtb	r3, r3
 800a846:	f003 0301 	and.w	r3, r3, #1
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	f040 80bf 	bne.w	800a9ce <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800a850:	4875      	ldr	r0, [pc, #468]	; (800aa28 <tcp_receive+0xf18>)
 800a852:	f7fd fb0b 	bl	8007e6c <tcp_seg_copy>
 800a856:	4602      	mov	r2, r0
 800a858:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a85a:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800a85c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	2b00      	cmp	r3, #0
 800a862:	f000 80b6 	beq.w	800a9d2 <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800a866:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a868:	68db      	ldr	r3, [r3, #12]
 800a86a:	685b      	ldr	r3, [r3, #4]
 800a86c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a86e:	8912      	ldrh	r2, [r2, #8]
 800a870:	441a      	add	r2, r3
 800a872:	4b6c      	ldr	r3, [pc, #432]	; (800aa24 <tcp_receive+0xf14>)
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	1ad3      	subs	r3, r2, r3
 800a878:	2b00      	cmp	r3, #0
 800a87a:	dd12      	ble.n	800a8a2 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800a87c:	4b69      	ldr	r3, [pc, #420]	; (800aa24 <tcp_receive+0xf14>)
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	b29a      	uxth	r2, r3
 800a882:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a884:	68db      	ldr	r3, [r3, #12]
 800a886:	685b      	ldr	r3, [r3, #4]
 800a888:	b29b      	uxth	r3, r3
 800a88a:	1ad3      	subs	r3, r2, r3
 800a88c:	b29a      	uxth	r2, r3
 800a88e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a890:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800a892:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a894:	685a      	ldr	r2, [r3, #4]
 800a896:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a898:	891b      	ldrh	r3, [r3, #8]
 800a89a:	4619      	mov	r1, r3
 800a89c:	4610      	mov	r0, r2
 800a89e:	f7fb fedf 	bl	8006660 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800a8a2:	4b62      	ldr	r3, [pc, #392]	; (800aa2c <tcp_receive+0xf1c>)
 800a8a4:	881b      	ldrh	r3, [r3, #0]
 800a8a6:	461a      	mov	r2, r3
 800a8a8:	4b5e      	ldr	r3, [pc, #376]	; (800aa24 <tcp_receive+0xf14>)
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	441a      	add	r2, r3
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8b2:	6879      	ldr	r1, [r7, #4]
 800a8b4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800a8b6:	440b      	add	r3, r1
 800a8b8:	1ad3      	subs	r3, r2, r3
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	f340 8089 	ble.w	800a9d2 <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800a8c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	68db      	ldr	r3, [r3, #12]
 800a8c6:	899b      	ldrh	r3, [r3, #12]
 800a8c8:	b29b      	uxth	r3, r3
 800a8ca:	4618      	mov	r0, r3
 800a8cc:	f7fa fdc4 	bl	8005458 <lwip_htons>
 800a8d0:	4603      	mov	r3, r0
 800a8d2:	b2db      	uxtb	r3, r3
 800a8d4:	f003 0301 	and.w	r3, r3, #1
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d022      	beq.n	800a922 <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800a8dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	68db      	ldr	r3, [r3, #12]
 800a8e2:	899b      	ldrh	r3, [r3, #12]
 800a8e4:	b29b      	uxth	r3, r3
 800a8e6:	b21b      	sxth	r3, r3
 800a8e8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800a8ec:	b21c      	sxth	r4, r3
 800a8ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	68db      	ldr	r3, [r3, #12]
 800a8f4:	899b      	ldrh	r3, [r3, #12]
 800a8f6:	b29b      	uxth	r3, r3
 800a8f8:	4618      	mov	r0, r3
 800a8fa:	f7fa fdad 	bl	8005458 <lwip_htons>
 800a8fe:	4603      	mov	r3, r0
 800a900:	b2db      	uxtb	r3, r3
 800a902:	b29b      	uxth	r3, r3
 800a904:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800a908:	b29b      	uxth	r3, r3
 800a90a:	4618      	mov	r0, r3
 800a90c:	f7fa fda4 	bl	8005458 <lwip_htons>
 800a910:	4603      	mov	r3, r0
 800a912:	b21b      	sxth	r3, r3
 800a914:	4323      	orrs	r3, r4
 800a916:	b21a      	sxth	r2, r3
 800a918:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	68db      	ldr	r3, [r3, #12]
 800a91e:	b292      	uxth	r2, r2
 800a920:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a926:	b29a      	uxth	r2, r3
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a92c:	4413      	add	r3, r2
 800a92e:	b299      	uxth	r1, r3
 800a930:	4b3c      	ldr	r3, [pc, #240]	; (800aa24 <tcp_receive+0xf14>)
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	b29a      	uxth	r2, r3
 800a936:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	1a8a      	subs	r2, r1, r2
 800a93c:	b292      	uxth	r2, r2
 800a93e:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800a940:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	685a      	ldr	r2, [r3, #4]
 800a946:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	891b      	ldrh	r3, [r3, #8]
 800a94c:	4619      	mov	r1, r3
 800a94e:	4610      	mov	r0, r2
 800a950:	f7fb fe86 	bl	8006660 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800a954:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	891c      	ldrh	r4, [r3, #8]
 800a95a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	68db      	ldr	r3, [r3, #12]
 800a960:	899b      	ldrh	r3, [r3, #12]
 800a962:	b29b      	uxth	r3, r3
 800a964:	4618      	mov	r0, r3
 800a966:	f7fa fd77 	bl	8005458 <lwip_htons>
 800a96a:	4603      	mov	r3, r0
 800a96c:	b2db      	uxtb	r3, r3
 800a96e:	f003 0303 	and.w	r3, r3, #3
 800a972:	2b00      	cmp	r3, #0
 800a974:	d001      	beq.n	800a97a <tcp_receive+0xe6a>
 800a976:	2301      	movs	r3, #1
 800a978:	e000      	b.n	800a97c <tcp_receive+0xe6c>
 800a97a:	2300      	movs	r3, #0
 800a97c:	4423      	add	r3, r4
 800a97e:	b29a      	uxth	r2, r3
 800a980:	4b2a      	ldr	r3, [pc, #168]	; (800aa2c <tcp_receive+0xf1c>)
 800a982:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800a984:	4b29      	ldr	r3, [pc, #164]	; (800aa2c <tcp_receive+0xf1c>)
 800a986:	881b      	ldrh	r3, [r3, #0]
 800a988:	461a      	mov	r2, r3
 800a98a:	4b26      	ldr	r3, [pc, #152]	; (800aa24 <tcp_receive+0xf14>)
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	441a      	add	r2, r3
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a994:	6879      	ldr	r1, [r7, #4]
 800a996:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800a998:	440b      	add	r3, r1
 800a99a:	429a      	cmp	r2, r3
 800a99c:	d019      	beq.n	800a9d2 <tcp_receive+0xec2>
 800a99e:	4b24      	ldr	r3, [pc, #144]	; (800aa30 <tcp_receive+0xf20>)
 800a9a0:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800a9a4:	4923      	ldr	r1, [pc, #140]	; (800aa34 <tcp_receive+0xf24>)
 800a9a6:	4824      	ldr	r0, [pc, #144]	; (800aa38 <tcp_receive+0xf28>)
 800a9a8:	f003 ffc8 	bl	800e93c <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800a9ac:	e011      	b.n	800a9d2 <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800a9ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	63bb      	str	r3, [r7, #56]	; 0x38
 800a9b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	f47f aea4 	bne.w	800a704 <tcp_receive+0xbf4>
 800a9bc:	e00a      	b.n	800a9d4 <tcp_receive+0xec4>
                break;
 800a9be:	bf00      	nop
 800a9c0:	e008      	b.n	800a9d4 <tcp_receive+0xec4>
                break;
 800a9c2:	bf00      	nop
 800a9c4:	e006      	b.n	800a9d4 <tcp_receive+0xec4>
                  break;
 800a9c6:	bf00      	nop
 800a9c8:	e004      	b.n	800a9d4 <tcp_receive+0xec4>
                  break;
 800a9ca:	bf00      	nop
 800a9cc:	e002      	b.n	800a9d4 <tcp_receive+0xec4>
                  break;
 800a9ce:	bf00      	nop
 800a9d0:	e000      	b.n	800a9d4 <tcp_receive+0xec4>
                break;
 800a9d2:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800a9d4:	6878      	ldr	r0, [r7, #4]
 800a9d6:	f001 fa43 	bl	800be60 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800a9da:	e003      	b.n	800a9e4 <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800a9dc:	6878      	ldr	r0, [r7, #4]
 800a9de:	f001 fa3f 	bl	800be60 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800a9e2:	e01a      	b.n	800aa1a <tcp_receive+0xf0a>
 800a9e4:	e019      	b.n	800aa1a <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800a9e6:	4b0f      	ldr	r3, [pc, #60]	; (800aa24 <tcp_receive+0xf14>)
 800a9e8:	681a      	ldr	r2, [r3, #0]
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9ee:	1ad3      	subs	r3, r2, r3
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	db0a      	blt.n	800aa0a <tcp_receive+0xefa>
 800a9f4:	4b0b      	ldr	r3, [pc, #44]	; (800aa24 <tcp_receive+0xf14>)
 800a9f6:	681a      	ldr	r2, [r3, #0]
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9fc:	6879      	ldr	r1, [r7, #4]
 800a9fe:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800aa00:	440b      	add	r3, r1
 800aa02:	1ad3      	subs	r3, r2, r3
 800aa04:	3301      	adds	r3, #1
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	dd07      	ble.n	800aa1a <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	8b5b      	ldrh	r3, [r3, #26]
 800aa0e:	f043 0302 	orr.w	r3, r3, #2
 800aa12:	b29a      	uxth	r2, r3
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800aa18:	e7ff      	b.n	800aa1a <tcp_receive+0xf0a>
 800aa1a:	bf00      	nop
 800aa1c:	3750      	adds	r7, #80	; 0x50
 800aa1e:	46bd      	mov	sp, r7
 800aa20:	bdb0      	pop	{r4, r5, r7, pc}
 800aa22:	bf00      	nop
 800aa24:	200000e4 	.word	0x200000e4
 800aa28:	200000c4 	.word	0x200000c4
 800aa2c:	200000ee 	.word	0x200000ee
 800aa30:	080109f8 	.word	0x080109f8
 800aa34:	08010da0 	.word	0x08010da0
 800aa38:	08010a44 	.word	0x08010a44

0800aa3c <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800aa3c:	b480      	push	{r7}
 800aa3e:	b083      	sub	sp, #12
 800aa40:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800aa42:	4b15      	ldr	r3, [pc, #84]	; (800aa98 <tcp_get_next_optbyte+0x5c>)
 800aa44:	881b      	ldrh	r3, [r3, #0]
 800aa46:	1c5a      	adds	r2, r3, #1
 800aa48:	b291      	uxth	r1, r2
 800aa4a:	4a13      	ldr	r2, [pc, #76]	; (800aa98 <tcp_get_next_optbyte+0x5c>)
 800aa4c:	8011      	strh	r1, [r2, #0]
 800aa4e:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800aa50:	4b12      	ldr	r3, [pc, #72]	; (800aa9c <tcp_get_next_optbyte+0x60>)
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d004      	beq.n	800aa62 <tcp_get_next_optbyte+0x26>
 800aa58:	4b11      	ldr	r3, [pc, #68]	; (800aaa0 <tcp_get_next_optbyte+0x64>)
 800aa5a:	881b      	ldrh	r3, [r3, #0]
 800aa5c:	88fa      	ldrh	r2, [r7, #6]
 800aa5e:	429a      	cmp	r2, r3
 800aa60:	d208      	bcs.n	800aa74 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800aa62:	4b10      	ldr	r3, [pc, #64]	; (800aaa4 <tcp_get_next_optbyte+0x68>)
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	3314      	adds	r3, #20
 800aa68:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800aa6a:	88fb      	ldrh	r3, [r7, #6]
 800aa6c:	683a      	ldr	r2, [r7, #0]
 800aa6e:	4413      	add	r3, r2
 800aa70:	781b      	ldrb	r3, [r3, #0]
 800aa72:	e00b      	b.n	800aa8c <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800aa74:	88fb      	ldrh	r3, [r7, #6]
 800aa76:	b2da      	uxtb	r2, r3
 800aa78:	4b09      	ldr	r3, [pc, #36]	; (800aaa0 <tcp_get_next_optbyte+0x64>)
 800aa7a:	881b      	ldrh	r3, [r3, #0]
 800aa7c:	b2db      	uxtb	r3, r3
 800aa7e:	1ad3      	subs	r3, r2, r3
 800aa80:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800aa82:	4b06      	ldr	r3, [pc, #24]	; (800aa9c <tcp_get_next_optbyte+0x60>)
 800aa84:	681a      	ldr	r2, [r3, #0]
 800aa86:	797b      	ldrb	r3, [r7, #5]
 800aa88:	4413      	add	r3, r2
 800aa8a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800aa8c:	4618      	mov	r0, r3
 800aa8e:	370c      	adds	r7, #12
 800aa90:	46bd      	mov	sp, r7
 800aa92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa96:	4770      	bx	lr
 800aa98:	200000e0 	.word	0x200000e0
 800aa9c:	200000dc 	.word	0x200000dc
 800aaa0:	200000da 	.word	0x200000da
 800aaa4:	200000d4 	.word	0x200000d4

0800aaa8 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800aaa8:	b580      	push	{r7, lr}
 800aaaa:	b084      	sub	sp, #16
 800aaac:	af00      	add	r7, sp, #0
 800aaae:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d106      	bne.n	800aac4 <tcp_parseopt+0x1c>
 800aab6:	4b31      	ldr	r3, [pc, #196]	; (800ab7c <tcp_parseopt+0xd4>)
 800aab8:	f240 727d 	movw	r2, #1917	; 0x77d
 800aabc:	4930      	ldr	r1, [pc, #192]	; (800ab80 <tcp_parseopt+0xd8>)
 800aabe:	4831      	ldr	r0, [pc, #196]	; (800ab84 <tcp_parseopt+0xdc>)
 800aac0:	f003 ff3c 	bl	800e93c <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800aac4:	4b30      	ldr	r3, [pc, #192]	; (800ab88 <tcp_parseopt+0xe0>)
 800aac6:	881b      	ldrh	r3, [r3, #0]
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d053      	beq.n	800ab74 <tcp_parseopt+0xcc>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800aacc:	4b2f      	ldr	r3, [pc, #188]	; (800ab8c <tcp_parseopt+0xe4>)
 800aace:	2200      	movs	r2, #0
 800aad0:	801a      	strh	r2, [r3, #0]
 800aad2:	e043      	b.n	800ab5c <tcp_parseopt+0xb4>
      u8_t opt = tcp_get_next_optbyte();
 800aad4:	f7ff ffb2 	bl	800aa3c <tcp_get_next_optbyte>
 800aad8:	4603      	mov	r3, r0
 800aada:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800aadc:	7bfb      	ldrb	r3, [r7, #15]
 800aade:	2b01      	cmp	r3, #1
 800aae0:	d03c      	beq.n	800ab5c <tcp_parseopt+0xb4>
 800aae2:	2b02      	cmp	r3, #2
 800aae4:	d002      	beq.n	800aaec <tcp_parseopt+0x44>
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d03f      	beq.n	800ab6a <tcp_parseopt+0xc2>
 800aaea:	e026      	b.n	800ab3a <tcp_parseopt+0x92>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800aaec:	f7ff ffa6 	bl	800aa3c <tcp_get_next_optbyte>
 800aaf0:	4603      	mov	r3, r0
 800aaf2:	2b04      	cmp	r3, #4
 800aaf4:	d13b      	bne.n	800ab6e <tcp_parseopt+0xc6>
 800aaf6:	4b25      	ldr	r3, [pc, #148]	; (800ab8c <tcp_parseopt+0xe4>)
 800aaf8:	881b      	ldrh	r3, [r3, #0]
 800aafa:	3302      	adds	r3, #2
 800aafc:	4a22      	ldr	r2, [pc, #136]	; (800ab88 <tcp_parseopt+0xe0>)
 800aafe:	8812      	ldrh	r2, [r2, #0]
 800ab00:	4293      	cmp	r3, r2
 800ab02:	dc34      	bgt.n	800ab6e <tcp_parseopt+0xc6>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800ab04:	f7ff ff9a 	bl	800aa3c <tcp_get_next_optbyte>
 800ab08:	4603      	mov	r3, r0
 800ab0a:	b29b      	uxth	r3, r3
 800ab0c:	021b      	lsls	r3, r3, #8
 800ab0e:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800ab10:	f7ff ff94 	bl	800aa3c <tcp_get_next_optbyte>
 800ab14:	4603      	mov	r3, r0
 800ab16:	b29a      	uxth	r2, r3
 800ab18:	89bb      	ldrh	r3, [r7, #12]
 800ab1a:	4313      	orrs	r3, r2
 800ab1c:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800ab1e:	89bb      	ldrh	r3, [r7, #12]
 800ab20:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800ab24:	d804      	bhi.n	800ab30 <tcp_parseopt+0x88>
 800ab26:	89bb      	ldrh	r3, [r7, #12]
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d001      	beq.n	800ab30 <tcp_parseopt+0x88>
 800ab2c:	89ba      	ldrh	r2, [r7, #12]
 800ab2e:	e001      	b.n	800ab34 <tcp_parseopt+0x8c>
 800ab30:	f44f 7206 	mov.w	r2, #536	; 0x218
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800ab38:	e010      	b.n	800ab5c <tcp_parseopt+0xb4>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800ab3a:	f7ff ff7f 	bl	800aa3c <tcp_get_next_optbyte>
 800ab3e:	4603      	mov	r3, r0
 800ab40:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800ab42:	7afb      	ldrb	r3, [r7, #11]
 800ab44:	2b01      	cmp	r3, #1
 800ab46:	d914      	bls.n	800ab72 <tcp_parseopt+0xca>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800ab48:	7afb      	ldrb	r3, [r7, #11]
 800ab4a:	b29a      	uxth	r2, r3
 800ab4c:	4b0f      	ldr	r3, [pc, #60]	; (800ab8c <tcp_parseopt+0xe4>)
 800ab4e:	881b      	ldrh	r3, [r3, #0]
 800ab50:	4413      	add	r3, r2
 800ab52:	b29b      	uxth	r3, r3
 800ab54:	3b02      	subs	r3, #2
 800ab56:	b29a      	uxth	r2, r3
 800ab58:	4b0c      	ldr	r3, [pc, #48]	; (800ab8c <tcp_parseopt+0xe4>)
 800ab5a:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800ab5c:	4b0b      	ldr	r3, [pc, #44]	; (800ab8c <tcp_parseopt+0xe4>)
 800ab5e:	881a      	ldrh	r2, [r3, #0]
 800ab60:	4b09      	ldr	r3, [pc, #36]	; (800ab88 <tcp_parseopt+0xe0>)
 800ab62:	881b      	ldrh	r3, [r3, #0]
 800ab64:	429a      	cmp	r2, r3
 800ab66:	d3b5      	bcc.n	800aad4 <tcp_parseopt+0x2c>
 800ab68:	e004      	b.n	800ab74 <tcp_parseopt+0xcc>
          return;
 800ab6a:	bf00      	nop
 800ab6c:	e002      	b.n	800ab74 <tcp_parseopt+0xcc>
            return;
 800ab6e:	bf00      	nop
 800ab70:	e000      	b.n	800ab74 <tcp_parseopt+0xcc>
            return;
 800ab72:	bf00      	nop
      }
    }
  }
}
 800ab74:	3710      	adds	r7, #16
 800ab76:	46bd      	mov	sp, r7
 800ab78:	bd80      	pop	{r7, pc}
 800ab7a:	bf00      	nop
 800ab7c:	080109f8 	.word	0x080109f8
 800ab80:	08010e5c 	.word	0x08010e5c
 800ab84:	08010a44 	.word	0x08010a44
 800ab88:	200000d8 	.word	0x200000d8
 800ab8c:	200000e0 	.word	0x200000e0

0800ab90 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800ab90:	b480      	push	{r7}
 800ab92:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800ab94:	4b05      	ldr	r3, [pc, #20]	; (800abac <tcp_trigger_input_pcb_close+0x1c>)
 800ab96:	781b      	ldrb	r3, [r3, #0]
 800ab98:	f043 0310 	orr.w	r3, r3, #16
 800ab9c:	b2da      	uxtb	r2, r3
 800ab9e:	4b03      	ldr	r3, [pc, #12]	; (800abac <tcp_trigger_input_pcb_close+0x1c>)
 800aba0:	701a      	strb	r2, [r3, #0]
}
 800aba2:	bf00      	nop
 800aba4:	46bd      	mov	sp, r7
 800aba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abaa:	4770      	bx	lr
 800abac:	200000f1 	.word	0x200000f1

0800abb0 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800abb0:	b580      	push	{r7, lr}
 800abb2:	b084      	sub	sp, #16
 800abb4:	af00      	add	r7, sp, #0
 800abb6:	60f8      	str	r0, [r7, #12]
 800abb8:	60b9      	str	r1, [r7, #8]
 800abba:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d00a      	beq.n	800abd8 <tcp_route+0x28>
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	7a1b      	ldrb	r3, [r3, #8]
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d006      	beq.n	800abd8 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	7a1b      	ldrb	r3, [r3, #8]
 800abce:	4618      	mov	r0, r3
 800abd0:	f7fb fb90 	bl	80062f4 <netif_get_by_index>
 800abd4:	4603      	mov	r3, r0
 800abd6:	e003      	b.n	800abe0 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800abd8:	6878      	ldr	r0, [r7, #4]
 800abda:	f002 fc91 	bl	800d500 <ip4_route>
 800abde:	4603      	mov	r3, r0
  }
}
 800abe0:	4618      	mov	r0, r3
 800abe2:	3710      	adds	r7, #16
 800abe4:	46bd      	mov	sp, r7
 800abe6:	bd80      	pop	{r7, pc}

0800abe8 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800abe8:	b590      	push	{r4, r7, lr}
 800abea:	b087      	sub	sp, #28
 800abec:	af00      	add	r7, sp, #0
 800abee:	60f8      	str	r0, [r7, #12]
 800abf0:	60b9      	str	r1, [r7, #8]
 800abf2:	603b      	str	r3, [r7, #0]
 800abf4:	4613      	mov	r3, r2
 800abf6:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d105      	bne.n	800ac0a <tcp_create_segment+0x22>
 800abfe:	4b44      	ldr	r3, [pc, #272]	; (800ad10 <tcp_create_segment+0x128>)
 800ac00:	22a3      	movs	r2, #163	; 0xa3
 800ac02:	4944      	ldr	r1, [pc, #272]	; (800ad14 <tcp_create_segment+0x12c>)
 800ac04:	4844      	ldr	r0, [pc, #272]	; (800ad18 <tcp_create_segment+0x130>)
 800ac06:	f003 fe99 	bl	800e93c <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800ac0a:	68bb      	ldr	r3, [r7, #8]
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d105      	bne.n	800ac1c <tcp_create_segment+0x34>
 800ac10:	4b3f      	ldr	r3, [pc, #252]	; (800ad10 <tcp_create_segment+0x128>)
 800ac12:	22a4      	movs	r2, #164	; 0xa4
 800ac14:	4941      	ldr	r1, [pc, #260]	; (800ad1c <tcp_create_segment+0x134>)
 800ac16:	4840      	ldr	r0, [pc, #256]	; (800ad18 <tcp_create_segment+0x130>)
 800ac18:	f003 fe90 	bl	800e93c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800ac1c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800ac20:	009b      	lsls	r3, r3, #2
 800ac22:	b2db      	uxtb	r3, r3
 800ac24:	f003 0304 	and.w	r3, r3, #4
 800ac28:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800ac2a:	2002      	movs	r0, #2
 800ac2c:	f7fb f868 	bl	8005d00 <memp_malloc>
 800ac30:	6138      	str	r0, [r7, #16]
 800ac32:	693b      	ldr	r3, [r7, #16]
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d104      	bne.n	800ac42 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800ac38:	68b8      	ldr	r0, [r7, #8]
 800ac3a:	f7fb fe97 	bl	800696c <pbuf_free>
    return NULL;
 800ac3e:	2300      	movs	r3, #0
 800ac40:	e061      	b.n	800ad06 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 800ac42:	693b      	ldr	r3, [r7, #16]
 800ac44:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800ac48:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800ac4a:	693b      	ldr	r3, [r7, #16]
 800ac4c:	2200      	movs	r2, #0
 800ac4e:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800ac50:	693b      	ldr	r3, [r7, #16]
 800ac52:	68ba      	ldr	r2, [r7, #8]
 800ac54:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800ac56:	68bb      	ldr	r3, [r7, #8]
 800ac58:	891a      	ldrh	r2, [r3, #8]
 800ac5a:	7dfb      	ldrb	r3, [r7, #23]
 800ac5c:	b29b      	uxth	r3, r3
 800ac5e:	429a      	cmp	r2, r3
 800ac60:	d205      	bcs.n	800ac6e <tcp_create_segment+0x86>
 800ac62:	4b2b      	ldr	r3, [pc, #172]	; (800ad10 <tcp_create_segment+0x128>)
 800ac64:	22b0      	movs	r2, #176	; 0xb0
 800ac66:	492e      	ldr	r1, [pc, #184]	; (800ad20 <tcp_create_segment+0x138>)
 800ac68:	482b      	ldr	r0, [pc, #172]	; (800ad18 <tcp_create_segment+0x130>)
 800ac6a:	f003 fe67 	bl	800e93c <iprintf>
  seg->len = p->tot_len - optlen;
 800ac6e:	68bb      	ldr	r3, [r7, #8]
 800ac70:	891a      	ldrh	r2, [r3, #8]
 800ac72:	7dfb      	ldrb	r3, [r7, #23]
 800ac74:	b29b      	uxth	r3, r3
 800ac76:	1ad3      	subs	r3, r2, r3
 800ac78:	b29a      	uxth	r2, r3
 800ac7a:	693b      	ldr	r3, [r7, #16]
 800ac7c:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800ac7e:	2114      	movs	r1, #20
 800ac80:	68b8      	ldr	r0, [r7, #8]
 800ac82:	f7fb fddd 	bl	8006840 <pbuf_add_header>
 800ac86:	4603      	mov	r3, r0
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d004      	beq.n	800ac96 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800ac8c:	6938      	ldr	r0, [r7, #16]
 800ac8e:	f7fd f8d5 	bl	8007e3c <tcp_seg_free>
    return NULL;
 800ac92:	2300      	movs	r3, #0
 800ac94:	e037      	b.n	800ad06 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800ac96:	693b      	ldr	r3, [r7, #16]
 800ac98:	685b      	ldr	r3, [r3, #4]
 800ac9a:	685a      	ldr	r2, [r3, #4]
 800ac9c:	693b      	ldr	r3, [r7, #16]
 800ac9e:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	8ada      	ldrh	r2, [r3, #22]
 800aca4:	693b      	ldr	r3, [r7, #16]
 800aca6:	68dc      	ldr	r4, [r3, #12]
 800aca8:	4610      	mov	r0, r2
 800acaa:	f7fa fbd5 	bl	8005458 <lwip_htons>
 800acae:	4603      	mov	r3, r0
 800acb0:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	8b1a      	ldrh	r2, [r3, #24]
 800acb6:	693b      	ldr	r3, [r7, #16]
 800acb8:	68dc      	ldr	r4, [r3, #12]
 800acba:	4610      	mov	r0, r2
 800acbc:	f7fa fbcc 	bl	8005458 <lwip_htons>
 800acc0:	4603      	mov	r3, r0
 800acc2:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800acc4:	693b      	ldr	r3, [r7, #16]
 800acc6:	68dc      	ldr	r4, [r3, #12]
 800acc8:	6838      	ldr	r0, [r7, #0]
 800acca:	f7fa fbda 	bl	8005482 <lwip_htonl>
 800acce:	4603      	mov	r3, r0
 800acd0:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800acd2:	7dfb      	ldrb	r3, [r7, #23]
 800acd4:	089b      	lsrs	r3, r3, #2
 800acd6:	b2db      	uxtb	r3, r3
 800acd8:	b29b      	uxth	r3, r3
 800acda:	3305      	adds	r3, #5
 800acdc:	b29b      	uxth	r3, r3
 800acde:	031b      	lsls	r3, r3, #12
 800ace0:	b29a      	uxth	r2, r3
 800ace2:	79fb      	ldrb	r3, [r7, #7]
 800ace4:	b29b      	uxth	r3, r3
 800ace6:	4313      	orrs	r3, r2
 800ace8:	b29a      	uxth	r2, r3
 800acea:	693b      	ldr	r3, [r7, #16]
 800acec:	68dc      	ldr	r4, [r3, #12]
 800acee:	4610      	mov	r0, r2
 800acf0:	f7fa fbb2 	bl	8005458 <lwip_htons>
 800acf4:	4603      	mov	r3, r0
 800acf6:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800acf8:	693b      	ldr	r3, [r7, #16]
 800acfa:	68db      	ldr	r3, [r3, #12]
 800acfc:	2200      	movs	r2, #0
 800acfe:	749a      	strb	r2, [r3, #18]
 800ad00:	2200      	movs	r2, #0
 800ad02:	74da      	strb	r2, [r3, #19]
  return seg;
 800ad04:	693b      	ldr	r3, [r7, #16]
}
 800ad06:	4618      	mov	r0, r3
 800ad08:	371c      	adds	r7, #28
 800ad0a:	46bd      	mov	sp, r7
 800ad0c:	bd90      	pop	{r4, r7, pc}
 800ad0e:	bf00      	nop
 800ad10:	08010e78 	.word	0x08010e78
 800ad14:	08010eac 	.word	0x08010eac
 800ad18:	08010ecc 	.word	0x08010ecc
 800ad1c:	08010ef4 	.word	0x08010ef4
 800ad20:	08010f18 	.word	0x08010f18

0800ad24 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800ad24:	b590      	push	{r4, r7, lr}
 800ad26:	b08b      	sub	sp, #44	; 0x2c
 800ad28:	af02      	add	r7, sp, #8
 800ad2a:	6078      	str	r0, [r7, #4]
 800ad2c:	460b      	mov	r3, r1
 800ad2e:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800ad30:	2300      	movs	r3, #0
 800ad32:	61fb      	str	r3, [r7, #28]
 800ad34:	2300      	movs	r3, #0
 800ad36:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800ad38:	2300      	movs	r3, #0
 800ad3a:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d106      	bne.n	800ad50 <tcp_split_unsent_seg+0x2c>
 800ad42:	4b95      	ldr	r3, [pc, #596]	; (800af98 <tcp_split_unsent_seg+0x274>)
 800ad44:	f240 324b 	movw	r2, #843	; 0x34b
 800ad48:	4994      	ldr	r1, [pc, #592]	; (800af9c <tcp_split_unsent_seg+0x278>)
 800ad4a:	4895      	ldr	r0, [pc, #596]	; (800afa0 <tcp_split_unsent_seg+0x27c>)
 800ad4c:	f003 fdf6 	bl	800e93c <iprintf>

  useg = pcb->unsent;
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ad54:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800ad56:	697b      	ldr	r3, [r7, #20]
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d102      	bne.n	800ad62 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800ad5c:	f04f 33ff 	mov.w	r3, #4294967295
 800ad60:	e116      	b.n	800af90 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800ad62:	887b      	ldrh	r3, [r7, #2]
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d109      	bne.n	800ad7c <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800ad68:	4b8b      	ldr	r3, [pc, #556]	; (800af98 <tcp_split_unsent_seg+0x274>)
 800ad6a:	f240 3253 	movw	r2, #851	; 0x353
 800ad6e:	498d      	ldr	r1, [pc, #564]	; (800afa4 <tcp_split_unsent_seg+0x280>)
 800ad70:	488b      	ldr	r0, [pc, #556]	; (800afa0 <tcp_split_unsent_seg+0x27c>)
 800ad72:	f003 fde3 	bl	800e93c <iprintf>
    return ERR_VAL;
 800ad76:	f06f 0305 	mvn.w	r3, #5
 800ad7a:	e109      	b.n	800af90 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800ad7c:	697b      	ldr	r3, [r7, #20]
 800ad7e:	891b      	ldrh	r3, [r3, #8]
 800ad80:	887a      	ldrh	r2, [r7, #2]
 800ad82:	429a      	cmp	r2, r3
 800ad84:	d301      	bcc.n	800ad8a <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800ad86:	2300      	movs	r3, #0
 800ad88:	e102      	b.n	800af90 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ad8e:	887a      	ldrh	r2, [r7, #2]
 800ad90:	429a      	cmp	r2, r3
 800ad92:	d906      	bls.n	800ada2 <tcp_split_unsent_seg+0x7e>
 800ad94:	4b80      	ldr	r3, [pc, #512]	; (800af98 <tcp_split_unsent_seg+0x274>)
 800ad96:	f240 325b 	movw	r2, #859	; 0x35b
 800ad9a:	4983      	ldr	r1, [pc, #524]	; (800afa8 <tcp_split_unsent_seg+0x284>)
 800ad9c:	4880      	ldr	r0, [pc, #512]	; (800afa0 <tcp_split_unsent_seg+0x27c>)
 800ad9e:	f003 fdcd 	bl	800e93c <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800ada2:	697b      	ldr	r3, [r7, #20]
 800ada4:	891b      	ldrh	r3, [r3, #8]
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d106      	bne.n	800adb8 <tcp_split_unsent_seg+0x94>
 800adaa:	4b7b      	ldr	r3, [pc, #492]	; (800af98 <tcp_split_unsent_seg+0x274>)
 800adac:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800adb0:	497e      	ldr	r1, [pc, #504]	; (800afac <tcp_split_unsent_seg+0x288>)
 800adb2:	487b      	ldr	r0, [pc, #492]	; (800afa0 <tcp_split_unsent_seg+0x27c>)
 800adb4:	f003 fdc2 	bl	800e93c <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800adb8:	697b      	ldr	r3, [r7, #20]
 800adba:	7a9b      	ldrb	r3, [r3, #10]
 800adbc:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800adbe:	7bfb      	ldrb	r3, [r7, #15]
 800adc0:	009b      	lsls	r3, r3, #2
 800adc2:	b2db      	uxtb	r3, r3
 800adc4:	f003 0304 	and.w	r3, r3, #4
 800adc8:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800adca:	697b      	ldr	r3, [r7, #20]
 800adcc:	891a      	ldrh	r2, [r3, #8]
 800adce:	887b      	ldrh	r3, [r7, #2]
 800add0:	1ad3      	subs	r3, r2, r3
 800add2:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800add4:	7bbb      	ldrb	r3, [r7, #14]
 800add6:	b29a      	uxth	r2, r3
 800add8:	89bb      	ldrh	r3, [r7, #12]
 800adda:	4413      	add	r3, r2
 800addc:	b29b      	uxth	r3, r3
 800adde:	f44f 7220 	mov.w	r2, #640	; 0x280
 800ade2:	4619      	mov	r1, r3
 800ade4:	2036      	movs	r0, #54	; 0x36
 800ade6:	f7fb fae1 	bl	80063ac <pbuf_alloc>
 800adea:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800adec:	693b      	ldr	r3, [r7, #16]
 800adee:	2b00      	cmp	r3, #0
 800adf0:	f000 80b7 	beq.w	800af62 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800adf4:	697b      	ldr	r3, [r7, #20]
 800adf6:	685b      	ldr	r3, [r3, #4]
 800adf8:	891a      	ldrh	r2, [r3, #8]
 800adfa:	697b      	ldr	r3, [r7, #20]
 800adfc:	891b      	ldrh	r3, [r3, #8]
 800adfe:	1ad3      	subs	r3, r2, r3
 800ae00:	b29a      	uxth	r2, r3
 800ae02:	887b      	ldrh	r3, [r7, #2]
 800ae04:	4413      	add	r3, r2
 800ae06:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800ae08:	697b      	ldr	r3, [r7, #20]
 800ae0a:	6858      	ldr	r0, [r3, #4]
 800ae0c:	693b      	ldr	r3, [r7, #16]
 800ae0e:	685a      	ldr	r2, [r3, #4]
 800ae10:	7bbb      	ldrb	r3, [r7, #14]
 800ae12:	18d1      	adds	r1, r2, r3
 800ae14:	897b      	ldrh	r3, [r7, #10]
 800ae16:	89ba      	ldrh	r2, [r7, #12]
 800ae18:	f7fb ff92 	bl	8006d40 <pbuf_copy_partial>
 800ae1c:	4603      	mov	r3, r0
 800ae1e:	461a      	mov	r2, r3
 800ae20:	89bb      	ldrh	r3, [r7, #12]
 800ae22:	4293      	cmp	r3, r2
 800ae24:	f040 809f 	bne.w	800af66 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800ae28:	697b      	ldr	r3, [r7, #20]
 800ae2a:	68db      	ldr	r3, [r3, #12]
 800ae2c:	899b      	ldrh	r3, [r3, #12]
 800ae2e:	b29b      	uxth	r3, r3
 800ae30:	4618      	mov	r0, r3
 800ae32:	f7fa fb11 	bl	8005458 <lwip_htons>
 800ae36:	4603      	mov	r3, r0
 800ae38:	b2db      	uxtb	r3, r3
 800ae3a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ae3e:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800ae40:	2300      	movs	r3, #0
 800ae42:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800ae44:	7efb      	ldrb	r3, [r7, #27]
 800ae46:	f003 0308 	and.w	r3, r3, #8
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d007      	beq.n	800ae5e <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800ae4e:	7efb      	ldrb	r3, [r7, #27]
 800ae50:	f023 0308 	bic.w	r3, r3, #8
 800ae54:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800ae56:	7ebb      	ldrb	r3, [r7, #26]
 800ae58:	f043 0308 	orr.w	r3, r3, #8
 800ae5c:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800ae5e:	7efb      	ldrb	r3, [r7, #27]
 800ae60:	f003 0301 	and.w	r3, r3, #1
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d007      	beq.n	800ae78 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800ae68:	7efb      	ldrb	r3, [r7, #27]
 800ae6a:	f023 0301 	bic.w	r3, r3, #1
 800ae6e:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800ae70:	7ebb      	ldrb	r3, [r7, #26]
 800ae72:	f043 0301 	orr.w	r3, r3, #1
 800ae76:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800ae78:	697b      	ldr	r3, [r7, #20]
 800ae7a:	68db      	ldr	r3, [r3, #12]
 800ae7c:	685b      	ldr	r3, [r3, #4]
 800ae7e:	4618      	mov	r0, r3
 800ae80:	f7fa faff 	bl	8005482 <lwip_htonl>
 800ae84:	4602      	mov	r2, r0
 800ae86:	887b      	ldrh	r3, [r7, #2]
 800ae88:	18d1      	adds	r1, r2, r3
 800ae8a:	7eba      	ldrb	r2, [r7, #26]
 800ae8c:	7bfb      	ldrb	r3, [r7, #15]
 800ae8e:	9300      	str	r3, [sp, #0]
 800ae90:	460b      	mov	r3, r1
 800ae92:	6939      	ldr	r1, [r7, #16]
 800ae94:	6878      	ldr	r0, [r7, #4]
 800ae96:	f7ff fea7 	bl	800abe8 <tcp_create_segment>
 800ae9a:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800ae9c:	69fb      	ldr	r3, [r7, #28]
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d063      	beq.n	800af6a <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800aea2:	697b      	ldr	r3, [r7, #20]
 800aea4:	685b      	ldr	r3, [r3, #4]
 800aea6:	4618      	mov	r0, r3
 800aea8:	f7fb fde8 	bl	8006a7c <pbuf_clen>
 800aeac:	4603      	mov	r3, r0
 800aeae:	461a      	mov	r2, r3
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800aeb6:	1a9b      	subs	r3, r3, r2
 800aeb8:	b29a      	uxth	r2, r3
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800aec0:	697b      	ldr	r3, [r7, #20]
 800aec2:	6858      	ldr	r0, [r3, #4]
 800aec4:	697b      	ldr	r3, [r7, #20]
 800aec6:	685b      	ldr	r3, [r3, #4]
 800aec8:	891a      	ldrh	r2, [r3, #8]
 800aeca:	89bb      	ldrh	r3, [r7, #12]
 800aecc:	1ad3      	subs	r3, r2, r3
 800aece:	b29b      	uxth	r3, r3
 800aed0:	4619      	mov	r1, r3
 800aed2:	f7fb fbc5 	bl	8006660 <pbuf_realloc>
  useg->len -= remainder;
 800aed6:	697b      	ldr	r3, [r7, #20]
 800aed8:	891a      	ldrh	r2, [r3, #8]
 800aeda:	89bb      	ldrh	r3, [r7, #12]
 800aedc:	1ad3      	subs	r3, r2, r3
 800aede:	b29a      	uxth	r2, r3
 800aee0:	697b      	ldr	r3, [r7, #20]
 800aee2:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800aee4:	697b      	ldr	r3, [r7, #20]
 800aee6:	68db      	ldr	r3, [r3, #12]
 800aee8:	899b      	ldrh	r3, [r3, #12]
 800aeea:	b29c      	uxth	r4, r3
 800aeec:	7efb      	ldrb	r3, [r7, #27]
 800aeee:	b29b      	uxth	r3, r3
 800aef0:	4618      	mov	r0, r3
 800aef2:	f7fa fab1 	bl	8005458 <lwip_htons>
 800aef6:	4603      	mov	r3, r0
 800aef8:	461a      	mov	r2, r3
 800aefa:	697b      	ldr	r3, [r7, #20]
 800aefc:	68db      	ldr	r3, [r3, #12]
 800aefe:	4322      	orrs	r2, r4
 800af00:	b292      	uxth	r2, r2
 800af02:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800af04:	697b      	ldr	r3, [r7, #20]
 800af06:	685b      	ldr	r3, [r3, #4]
 800af08:	4618      	mov	r0, r3
 800af0a:	f7fb fdb7 	bl	8006a7c <pbuf_clen>
 800af0e:	4603      	mov	r3, r0
 800af10:	461a      	mov	r2, r3
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800af18:	4413      	add	r3, r2
 800af1a:	b29a      	uxth	r2, r3
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800af22:	69fb      	ldr	r3, [r7, #28]
 800af24:	685b      	ldr	r3, [r3, #4]
 800af26:	4618      	mov	r0, r3
 800af28:	f7fb fda8 	bl	8006a7c <pbuf_clen>
 800af2c:	4603      	mov	r3, r0
 800af2e:	461a      	mov	r2, r3
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800af36:	4413      	add	r3, r2
 800af38:	b29a      	uxth	r2, r3
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800af40:	697b      	ldr	r3, [r7, #20]
 800af42:	681a      	ldr	r2, [r3, #0]
 800af44:	69fb      	ldr	r3, [r7, #28]
 800af46:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800af48:	697b      	ldr	r3, [r7, #20]
 800af4a:	69fa      	ldr	r2, [r7, #28]
 800af4c:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800af4e:	69fb      	ldr	r3, [r7, #28]
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	2b00      	cmp	r3, #0
 800af54:	d103      	bne.n	800af5e <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	2200      	movs	r2, #0
 800af5a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800af5e:	2300      	movs	r3, #0
 800af60:	e016      	b.n	800af90 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800af62:	bf00      	nop
 800af64:	e002      	b.n	800af6c <tcp_split_unsent_seg+0x248>
    goto memerr;
 800af66:	bf00      	nop
 800af68:	e000      	b.n	800af6c <tcp_split_unsent_seg+0x248>
    goto memerr;
 800af6a:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800af6c:	69fb      	ldr	r3, [r7, #28]
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d006      	beq.n	800af80 <tcp_split_unsent_seg+0x25c>
 800af72:	4b09      	ldr	r3, [pc, #36]	; (800af98 <tcp_split_unsent_seg+0x274>)
 800af74:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800af78:	490d      	ldr	r1, [pc, #52]	; (800afb0 <tcp_split_unsent_seg+0x28c>)
 800af7a:	4809      	ldr	r0, [pc, #36]	; (800afa0 <tcp_split_unsent_seg+0x27c>)
 800af7c:	f003 fcde 	bl	800e93c <iprintf>
  if (p != NULL) {
 800af80:	693b      	ldr	r3, [r7, #16]
 800af82:	2b00      	cmp	r3, #0
 800af84:	d002      	beq.n	800af8c <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800af86:	6938      	ldr	r0, [r7, #16]
 800af88:	f7fb fcf0 	bl	800696c <pbuf_free>
  }

  return ERR_MEM;
 800af8c:	f04f 33ff 	mov.w	r3, #4294967295
}
 800af90:	4618      	mov	r0, r3
 800af92:	3724      	adds	r7, #36	; 0x24
 800af94:	46bd      	mov	sp, r7
 800af96:	bd90      	pop	{r4, r7, pc}
 800af98:	08010e78 	.word	0x08010e78
 800af9c:	0801120c 	.word	0x0801120c
 800afa0:	08010ecc 	.word	0x08010ecc
 800afa4:	08011230 	.word	0x08011230
 800afa8:	08011254 	.word	0x08011254
 800afac:	08011264 	.word	0x08011264
 800afb0:	08011274 	.word	0x08011274

0800afb4 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800afb4:	b590      	push	{r4, r7, lr}
 800afb6:	b085      	sub	sp, #20
 800afb8:	af00      	add	r7, sp, #0
 800afba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d106      	bne.n	800afd0 <tcp_send_fin+0x1c>
 800afc2:	4b21      	ldr	r3, [pc, #132]	; (800b048 <tcp_send_fin+0x94>)
 800afc4:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800afc8:	4920      	ldr	r1, [pc, #128]	; (800b04c <tcp_send_fin+0x98>)
 800afca:	4821      	ldr	r0, [pc, #132]	; (800b050 <tcp_send_fin+0x9c>)
 800afcc:	f003 fcb6 	bl	800e93c <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	d02e      	beq.n	800b036 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800afdc:	60fb      	str	r3, [r7, #12]
 800afde:	e002      	b.n	800afe6 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	2b00      	cmp	r3, #0
 800afec:	d1f8      	bne.n	800afe0 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	68db      	ldr	r3, [r3, #12]
 800aff2:	899b      	ldrh	r3, [r3, #12]
 800aff4:	b29b      	uxth	r3, r3
 800aff6:	4618      	mov	r0, r3
 800aff8:	f7fa fa2e 	bl	8005458 <lwip_htons>
 800affc:	4603      	mov	r3, r0
 800affe:	b2db      	uxtb	r3, r3
 800b000:	f003 0307 	and.w	r3, r3, #7
 800b004:	2b00      	cmp	r3, #0
 800b006:	d116      	bne.n	800b036 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	68db      	ldr	r3, [r3, #12]
 800b00c:	899b      	ldrh	r3, [r3, #12]
 800b00e:	b29c      	uxth	r4, r3
 800b010:	2001      	movs	r0, #1
 800b012:	f7fa fa21 	bl	8005458 <lwip_htons>
 800b016:	4603      	mov	r3, r0
 800b018:	461a      	mov	r2, r3
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	68db      	ldr	r3, [r3, #12]
 800b01e:	4322      	orrs	r2, r4
 800b020:	b292      	uxth	r2, r2
 800b022:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	8b5b      	ldrh	r3, [r3, #26]
 800b028:	f043 0320 	orr.w	r3, r3, #32
 800b02c:	b29a      	uxth	r2, r3
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800b032:	2300      	movs	r3, #0
 800b034:	e004      	b.n	800b040 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800b036:	2101      	movs	r1, #1
 800b038:	6878      	ldr	r0, [r7, #4]
 800b03a:	f000 f80b 	bl	800b054 <tcp_enqueue_flags>
 800b03e:	4603      	mov	r3, r0
}
 800b040:	4618      	mov	r0, r3
 800b042:	3714      	adds	r7, #20
 800b044:	46bd      	mov	sp, r7
 800b046:	bd90      	pop	{r4, r7, pc}
 800b048:	08010e78 	.word	0x08010e78
 800b04c:	08011280 	.word	0x08011280
 800b050:	08010ecc 	.word	0x08010ecc

0800b054 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800b054:	b580      	push	{r7, lr}
 800b056:	b08a      	sub	sp, #40	; 0x28
 800b058:	af02      	add	r7, sp, #8
 800b05a:	6078      	str	r0, [r7, #4]
 800b05c:	460b      	mov	r3, r1
 800b05e:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800b060:	2300      	movs	r3, #0
 800b062:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800b064:	2300      	movs	r3, #0
 800b066:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800b068:	78fb      	ldrb	r3, [r7, #3]
 800b06a:	f003 0303 	and.w	r3, r3, #3
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d106      	bne.n	800b080 <tcp_enqueue_flags+0x2c>
 800b072:	4b67      	ldr	r3, [pc, #412]	; (800b210 <tcp_enqueue_flags+0x1bc>)
 800b074:	f240 4212 	movw	r2, #1042	; 0x412
 800b078:	4966      	ldr	r1, [pc, #408]	; (800b214 <tcp_enqueue_flags+0x1c0>)
 800b07a:	4867      	ldr	r0, [pc, #412]	; (800b218 <tcp_enqueue_flags+0x1c4>)
 800b07c:	f003 fc5e 	bl	800e93c <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	2b00      	cmp	r3, #0
 800b084:	d106      	bne.n	800b094 <tcp_enqueue_flags+0x40>
 800b086:	4b62      	ldr	r3, [pc, #392]	; (800b210 <tcp_enqueue_flags+0x1bc>)
 800b088:	f240 4213 	movw	r2, #1043	; 0x413
 800b08c:	4963      	ldr	r1, [pc, #396]	; (800b21c <tcp_enqueue_flags+0x1c8>)
 800b08e:	4862      	ldr	r0, [pc, #392]	; (800b218 <tcp_enqueue_flags+0x1c4>)
 800b090:	f003 fc54 	bl	800e93c <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800b094:	78fb      	ldrb	r3, [r7, #3]
 800b096:	f003 0302 	and.w	r3, r3, #2
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d001      	beq.n	800b0a2 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800b09e:	2301      	movs	r3, #1
 800b0a0:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800b0a2:	7ffb      	ldrb	r3, [r7, #31]
 800b0a4:	009b      	lsls	r3, r3, #2
 800b0a6:	b2db      	uxtb	r3, r3
 800b0a8:	f003 0304 	and.w	r3, r3, #4
 800b0ac:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800b0ae:	7dfb      	ldrb	r3, [r7, #23]
 800b0b0:	b29b      	uxth	r3, r3
 800b0b2:	f44f 7220 	mov.w	r2, #640	; 0x280
 800b0b6:	4619      	mov	r1, r3
 800b0b8:	2036      	movs	r0, #54	; 0x36
 800b0ba:	f7fb f977 	bl	80063ac <pbuf_alloc>
 800b0be:	6138      	str	r0, [r7, #16]
 800b0c0:	693b      	ldr	r3, [r7, #16]
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d109      	bne.n	800b0da <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	8b5b      	ldrh	r3, [r3, #26]
 800b0ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b0ce:	b29a      	uxth	r2, r3
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800b0d4:	f04f 33ff 	mov.w	r3, #4294967295
 800b0d8:	e095      	b.n	800b206 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800b0da:	693b      	ldr	r3, [r7, #16]
 800b0dc:	895a      	ldrh	r2, [r3, #10]
 800b0de:	7dfb      	ldrb	r3, [r7, #23]
 800b0e0:	b29b      	uxth	r3, r3
 800b0e2:	429a      	cmp	r2, r3
 800b0e4:	d206      	bcs.n	800b0f4 <tcp_enqueue_flags+0xa0>
 800b0e6:	4b4a      	ldr	r3, [pc, #296]	; (800b210 <tcp_enqueue_flags+0x1bc>)
 800b0e8:	f240 423a 	movw	r2, #1082	; 0x43a
 800b0ec:	494c      	ldr	r1, [pc, #304]	; (800b220 <tcp_enqueue_flags+0x1cc>)
 800b0ee:	484a      	ldr	r0, [pc, #296]	; (800b218 <tcp_enqueue_flags+0x1c4>)
 800b0f0:	f003 fc24 	bl	800e93c <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800b0f8:	78fa      	ldrb	r2, [r7, #3]
 800b0fa:	7ffb      	ldrb	r3, [r7, #31]
 800b0fc:	9300      	str	r3, [sp, #0]
 800b0fe:	460b      	mov	r3, r1
 800b100:	6939      	ldr	r1, [r7, #16]
 800b102:	6878      	ldr	r0, [r7, #4]
 800b104:	f7ff fd70 	bl	800abe8 <tcp_create_segment>
 800b108:	60f8      	str	r0, [r7, #12]
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d109      	bne.n	800b124 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	8b5b      	ldrh	r3, [r3, #26]
 800b114:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b118:	b29a      	uxth	r2, r3
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800b11e:	f04f 33ff 	mov.w	r3, #4294967295
 800b122:	e070      	b.n	800b206 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800b124:	68fb      	ldr	r3, [r7, #12]
 800b126:	68db      	ldr	r3, [r3, #12]
 800b128:	f003 0303 	and.w	r3, r3, #3
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d006      	beq.n	800b13e <tcp_enqueue_flags+0xea>
 800b130:	4b37      	ldr	r3, [pc, #220]	; (800b210 <tcp_enqueue_flags+0x1bc>)
 800b132:	f240 4242 	movw	r2, #1090	; 0x442
 800b136:	493b      	ldr	r1, [pc, #236]	; (800b224 <tcp_enqueue_flags+0x1d0>)
 800b138:	4837      	ldr	r0, [pc, #220]	; (800b218 <tcp_enqueue_flags+0x1c4>)
 800b13a:	f003 fbff 	bl	800e93c <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	891b      	ldrh	r3, [r3, #8]
 800b142:	2b00      	cmp	r3, #0
 800b144:	d006      	beq.n	800b154 <tcp_enqueue_flags+0x100>
 800b146:	4b32      	ldr	r3, [pc, #200]	; (800b210 <tcp_enqueue_flags+0x1bc>)
 800b148:	f240 4243 	movw	r2, #1091	; 0x443
 800b14c:	4936      	ldr	r1, [pc, #216]	; (800b228 <tcp_enqueue_flags+0x1d4>)
 800b14e:	4832      	ldr	r0, [pc, #200]	; (800b218 <tcp_enqueue_flags+0x1c4>)
 800b150:	f003 fbf4 	bl	800e93c <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d103      	bne.n	800b164 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	68fa      	ldr	r2, [r7, #12]
 800b160:	66da      	str	r2, [r3, #108]	; 0x6c
 800b162:	e00d      	b.n	800b180 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b168:	61bb      	str	r3, [r7, #24]
 800b16a:	e002      	b.n	800b172 <tcp_enqueue_flags+0x11e>
 800b16c:	69bb      	ldr	r3, [r7, #24]
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	61bb      	str	r3, [r7, #24]
 800b172:	69bb      	ldr	r3, [r7, #24]
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	2b00      	cmp	r3, #0
 800b178:	d1f8      	bne.n	800b16c <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800b17a:	69bb      	ldr	r3, [r7, #24]
 800b17c:	68fa      	ldr	r2, [r7, #12]
 800b17e:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	2200      	movs	r2, #0
 800b184:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800b188:	78fb      	ldrb	r3, [r7, #3]
 800b18a:	f003 0302 	and.w	r3, r3, #2
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d104      	bne.n	800b19c <tcp_enqueue_flags+0x148>
 800b192:	78fb      	ldrb	r3, [r7, #3]
 800b194:	f003 0301 	and.w	r3, r3, #1
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d004      	beq.n	800b1a6 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b1a0:	1c5a      	adds	r2, r3, #1
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800b1a6:	78fb      	ldrb	r3, [r7, #3]
 800b1a8:	f003 0301 	and.w	r3, r3, #1
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d006      	beq.n	800b1be <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	8b5b      	ldrh	r3, [r3, #26]
 800b1b4:	f043 0320 	orr.w	r3, r3, #32
 800b1b8:	b29a      	uxth	r2, r3
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	685b      	ldr	r3, [r3, #4]
 800b1c2:	4618      	mov	r0, r3
 800b1c4:	f7fb fc5a 	bl	8006a7c <pbuf_clen>
 800b1c8:	4603      	mov	r3, r0
 800b1ca:	461a      	mov	r2, r3
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b1d2:	4413      	add	r3, r2
 800b1d4:	b29a      	uxth	r2, r3
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d00e      	beq.n	800b204 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d10a      	bne.n	800b204 <tcp_enqueue_flags+0x1b0>
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d106      	bne.n	800b204 <tcp_enqueue_flags+0x1b0>
 800b1f6:	4b06      	ldr	r3, [pc, #24]	; (800b210 <tcp_enqueue_flags+0x1bc>)
 800b1f8:	f240 4266 	movw	r2, #1126	; 0x466
 800b1fc:	490b      	ldr	r1, [pc, #44]	; (800b22c <tcp_enqueue_flags+0x1d8>)
 800b1fe:	4806      	ldr	r0, [pc, #24]	; (800b218 <tcp_enqueue_flags+0x1c4>)
 800b200:	f003 fb9c 	bl	800e93c <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800b204:	2300      	movs	r3, #0
}
 800b206:	4618      	mov	r0, r3
 800b208:	3720      	adds	r7, #32
 800b20a:	46bd      	mov	sp, r7
 800b20c:	bd80      	pop	{r7, pc}
 800b20e:	bf00      	nop
 800b210:	08010e78 	.word	0x08010e78
 800b214:	0801129c 	.word	0x0801129c
 800b218:	08010ecc 	.word	0x08010ecc
 800b21c:	080112f4 	.word	0x080112f4
 800b220:	08011314 	.word	0x08011314
 800b224:	08011350 	.word	0x08011350
 800b228:	08011368 	.word	0x08011368
 800b22c:	08011394 	.word	0x08011394

0800b230 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800b230:	b5b0      	push	{r4, r5, r7, lr}
 800b232:	b08a      	sub	sp, #40	; 0x28
 800b234:	af00      	add	r7, sp, #0
 800b236:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d106      	bne.n	800b24c <tcp_output+0x1c>
 800b23e:	4ba0      	ldr	r3, [pc, #640]	; (800b4c0 <tcp_output+0x290>)
 800b240:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800b244:	499f      	ldr	r1, [pc, #636]	; (800b4c4 <tcp_output+0x294>)
 800b246:	48a0      	ldr	r0, [pc, #640]	; (800b4c8 <tcp_output+0x298>)
 800b248:	f003 fb78 	bl	800e93c <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	7d1b      	ldrb	r3, [r3, #20]
 800b250:	2b01      	cmp	r3, #1
 800b252:	d106      	bne.n	800b262 <tcp_output+0x32>
 800b254:	4b9a      	ldr	r3, [pc, #616]	; (800b4c0 <tcp_output+0x290>)
 800b256:	f240 42e4 	movw	r2, #1252	; 0x4e4
 800b25a:	499c      	ldr	r1, [pc, #624]	; (800b4cc <tcp_output+0x29c>)
 800b25c:	489a      	ldr	r0, [pc, #616]	; (800b4c8 <tcp_output+0x298>)
 800b25e:	f003 fb6d 	bl	800e93c <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800b262:	4b9b      	ldr	r3, [pc, #620]	; (800b4d0 <tcp_output+0x2a0>)
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	687a      	ldr	r2, [r7, #4]
 800b268:	429a      	cmp	r2, r3
 800b26a:	d101      	bne.n	800b270 <tcp_output+0x40>
    return ERR_OK;
 800b26c:	2300      	movs	r3, #0
 800b26e:	e1d2      	b.n	800b616 <tcp_output+0x3e6>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800b27c:	429a      	cmp	r2, r3
 800b27e:	d203      	bcs.n	800b288 <tcp_output+0x58>
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b286:	e002      	b.n	800b28e <tcp_output+0x5e>
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800b28e:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b294:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 800b296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d10b      	bne.n	800b2b4 <tcp_output+0x84>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	8b5b      	ldrh	r3, [r3, #26]
 800b2a0:	f003 0302 	and.w	r3, r3, #2
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	f000 81a9 	beq.w	800b5fc <tcp_output+0x3cc>
      return tcp_send_empty_ack(pcb);
 800b2aa:	6878      	ldr	r0, [r7, #4]
 800b2ac:	f000 fdd8 	bl	800be60 <tcp_send_empty_ack>
 800b2b0:	4603      	mov	r3, r0
 800b2b2:	e1b0      	b.n	800b616 <tcp_output+0x3e6>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800b2b4:	6879      	ldr	r1, [r7, #4]
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	3304      	adds	r3, #4
 800b2ba:	461a      	mov	r2, r3
 800b2bc:	6878      	ldr	r0, [r7, #4]
 800b2be:	f7ff fc77 	bl	800abb0 <tcp_route>
 800b2c2:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800b2c4:	697b      	ldr	r3, [r7, #20]
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d102      	bne.n	800b2d0 <tcp_output+0xa0>
    return ERR_RTE;
 800b2ca:	f06f 0303 	mvn.w	r3, #3
 800b2ce:	e1a2      	b.n	800b616 <tcp_output+0x3e6>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d003      	beq.n	800b2de <tcp_output+0xae>
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d111      	bne.n	800b302 <tcp_output+0xd2>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800b2de:	697b      	ldr	r3, [r7, #20]
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d002      	beq.n	800b2ea <tcp_output+0xba>
 800b2e4:	697b      	ldr	r3, [r7, #20]
 800b2e6:	3304      	adds	r3, #4
 800b2e8:	e000      	b.n	800b2ec <tcp_output+0xbc>
 800b2ea:	2300      	movs	r3, #0
 800b2ec:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800b2ee:	693b      	ldr	r3, [r7, #16]
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d102      	bne.n	800b2fa <tcp_output+0xca>
      return ERR_RTE;
 800b2f4:	f06f 0303 	mvn.w	r3, #3
 800b2f8:	e18d      	b.n	800b616 <tcp_output+0x3e6>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800b2fa:	693b      	ldr	r3, [r7, #16]
 800b2fc:	681a      	ldr	r2, [r3, #0]
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800b302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b304:	68db      	ldr	r3, [r3, #12]
 800b306:	685b      	ldr	r3, [r3, #4]
 800b308:	4618      	mov	r0, r3
 800b30a:	f7fa f8ba 	bl	8005482 <lwip_htonl>
 800b30e:	4602      	mov	r2, r0
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b314:	1ad3      	subs	r3, r2, r3
 800b316:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b318:	8912      	ldrh	r2, [r2, #8]
 800b31a:	4413      	add	r3, r2
 800b31c:	69ba      	ldr	r2, [r7, #24]
 800b31e:	429a      	cmp	r2, r3
 800b320:	d227      	bcs.n	800b372 <tcp_output+0x142>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b328:	461a      	mov	r2, r3
 800b32a:	69bb      	ldr	r3, [r7, #24]
 800b32c:	4293      	cmp	r3, r2
 800b32e:	d114      	bne.n	800b35a <tcp_output+0x12a>
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b334:	2b00      	cmp	r3, #0
 800b336:	d110      	bne.n	800b35a <tcp_output+0x12a>
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d10b      	bne.n	800b35a <tcp_output+0x12a>
      pcb->persist_cnt = 0;
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	2200      	movs	r2, #0
 800b346:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	2201      	movs	r2, #1
 800b34e:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	2200      	movs	r2, #0
 800b356:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	8b5b      	ldrh	r3, [r3, #26]
 800b35e:	f003 0302 	and.w	r3, r3, #2
 800b362:	2b00      	cmp	r3, #0
 800b364:	f000 814c 	beq.w	800b600 <tcp_output+0x3d0>
      return tcp_send_empty_ack(pcb);
 800b368:	6878      	ldr	r0, [r7, #4]
 800b36a:	f000 fd79 	bl	800be60 <tcp_send_empty_ack>
 800b36e:	4603      	mov	r3, r0
 800b370:	e151      	b.n	800b616 <tcp_output+0x3e6>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	2200      	movs	r2, #0
 800b376:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b37e:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800b380:	6a3b      	ldr	r3, [r7, #32]
 800b382:	2b00      	cmp	r3, #0
 800b384:	f000 811b 	beq.w	800b5be <tcp_output+0x38e>
    for (; useg->next != NULL; useg = useg->next);
 800b388:	e002      	b.n	800b390 <tcp_output+0x160>
 800b38a:	6a3b      	ldr	r3, [r7, #32]
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	623b      	str	r3, [r7, #32]
 800b390:	6a3b      	ldr	r3, [r7, #32]
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	2b00      	cmp	r3, #0
 800b396:	d1f8      	bne.n	800b38a <tcp_output+0x15a>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800b398:	e111      	b.n	800b5be <tcp_output+0x38e>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800b39a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b39c:	68db      	ldr	r3, [r3, #12]
 800b39e:	899b      	ldrh	r3, [r3, #12]
 800b3a0:	b29b      	uxth	r3, r3
 800b3a2:	4618      	mov	r0, r3
 800b3a4:	f7fa f858 	bl	8005458 <lwip_htons>
 800b3a8:	4603      	mov	r3, r0
 800b3aa:	b2db      	uxtb	r3, r3
 800b3ac:	f003 0304 	and.w	r3, r3, #4
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	d006      	beq.n	800b3c2 <tcp_output+0x192>
 800b3b4:	4b42      	ldr	r3, [pc, #264]	; (800b4c0 <tcp_output+0x290>)
 800b3b6:	f240 5237 	movw	r2, #1335	; 0x537
 800b3ba:	4946      	ldr	r1, [pc, #280]	; (800b4d4 <tcp_output+0x2a4>)
 800b3bc:	4842      	ldr	r0, [pc, #264]	; (800b4c8 <tcp_output+0x298>)
 800b3be:	f003 fabd 	bl	800e93c <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d01f      	beq.n	800b40a <tcp_output+0x1da>
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	8b5b      	ldrh	r3, [r3, #26]
 800b3ce:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d119      	bne.n	800b40a <tcp_output+0x1da>
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d00b      	beq.n	800b3f6 <tcp_output+0x1c6>
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	d110      	bne.n	800b40a <tcp_output+0x1da>
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b3ec:	891a      	ldrh	r2, [r3, #8]
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b3f2:	429a      	cmp	r2, r3
 800b3f4:	d209      	bcs.n	800b40a <tcp_output+0x1da>
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d004      	beq.n	800b40a <tcp_output+0x1da>
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b406:	2b08      	cmp	r3, #8
 800b408:	d901      	bls.n	800b40e <tcp_output+0x1de>
 800b40a:	2301      	movs	r3, #1
 800b40c:	e000      	b.n	800b410 <tcp_output+0x1e0>
 800b40e:	2300      	movs	r3, #0
 800b410:	2b00      	cmp	r3, #0
 800b412:	d106      	bne.n	800b422 <tcp_output+0x1f2>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	8b5b      	ldrh	r3, [r3, #26]
 800b418:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	f000 80e3 	beq.w	800b5e8 <tcp_output+0x3b8>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	7d1b      	ldrb	r3, [r3, #20]
 800b426:	2b02      	cmp	r3, #2
 800b428:	d00d      	beq.n	800b446 <tcp_output+0x216>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800b42a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b42c:	68db      	ldr	r3, [r3, #12]
 800b42e:	899b      	ldrh	r3, [r3, #12]
 800b430:	b29c      	uxth	r4, r3
 800b432:	2010      	movs	r0, #16
 800b434:	f7fa f810 	bl	8005458 <lwip_htons>
 800b438:	4603      	mov	r3, r0
 800b43a:	461a      	mov	r2, r3
 800b43c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b43e:	68db      	ldr	r3, [r3, #12]
 800b440:	4322      	orrs	r2, r4
 800b442:	b292      	uxth	r2, r2
 800b444:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800b446:	697a      	ldr	r2, [r7, #20]
 800b448:	6879      	ldr	r1, [r7, #4]
 800b44a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b44c:	f000 f908 	bl	800b660 <tcp_output_segment>
 800b450:	4603      	mov	r3, r0
 800b452:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800b454:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d009      	beq.n	800b470 <tcp_output+0x240>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	8b5b      	ldrh	r3, [r3, #26]
 800b460:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b464:	b29a      	uxth	r2, r3
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	835a      	strh	r2, [r3, #26]
      return err;
 800b46a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b46e:	e0d2      	b.n	800b616 <tcp_output+0x3e6>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800b470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b472:	681a      	ldr	r2, [r3, #0]
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	7d1b      	ldrb	r3, [r3, #20]
 800b47c:	2b02      	cmp	r3, #2
 800b47e:	d006      	beq.n	800b48e <tcp_output+0x25e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	8b5b      	ldrh	r3, [r3, #26]
 800b484:	f023 0303 	bic.w	r3, r3, #3
 800b488:	b29a      	uxth	r2, r3
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800b48e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b490:	68db      	ldr	r3, [r3, #12]
 800b492:	685b      	ldr	r3, [r3, #4]
 800b494:	4618      	mov	r0, r3
 800b496:	f7f9 fff4 	bl	8005482 <lwip_htonl>
 800b49a:	4604      	mov	r4, r0
 800b49c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b49e:	891b      	ldrh	r3, [r3, #8]
 800b4a0:	461d      	mov	r5, r3
 800b4a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4a4:	68db      	ldr	r3, [r3, #12]
 800b4a6:	899b      	ldrh	r3, [r3, #12]
 800b4a8:	b29b      	uxth	r3, r3
 800b4aa:	4618      	mov	r0, r3
 800b4ac:	f7f9 ffd4 	bl	8005458 <lwip_htons>
 800b4b0:	4603      	mov	r3, r0
 800b4b2:	b2db      	uxtb	r3, r3
 800b4b4:	f003 0303 	and.w	r3, r3, #3
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d00d      	beq.n	800b4d8 <tcp_output+0x2a8>
 800b4bc:	2301      	movs	r3, #1
 800b4be:	e00c      	b.n	800b4da <tcp_output+0x2aa>
 800b4c0:	08010e78 	.word	0x08010e78
 800b4c4:	080113bc 	.word	0x080113bc
 800b4c8:	08010ecc 	.word	0x08010ecc
 800b4cc:	080113d4 	.word	0x080113d4
 800b4d0:	20008af4 	.word	0x20008af4
 800b4d4:	080113fc 	.word	0x080113fc
 800b4d8:	2300      	movs	r3, #0
 800b4da:	442b      	add	r3, r5
 800b4dc:	4423      	add	r3, r4
 800b4de:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b4e4:	68bb      	ldr	r3, [r7, #8]
 800b4e6:	1ad3      	subs	r3, r2, r3
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	da02      	bge.n	800b4f2 <tcp_output+0x2c2>
      pcb->snd_nxt = snd_nxt;
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	68ba      	ldr	r2, [r7, #8]
 800b4f0:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800b4f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4f4:	891b      	ldrh	r3, [r3, #8]
 800b4f6:	461c      	mov	r4, r3
 800b4f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4fa:	68db      	ldr	r3, [r3, #12]
 800b4fc:	899b      	ldrh	r3, [r3, #12]
 800b4fe:	b29b      	uxth	r3, r3
 800b500:	4618      	mov	r0, r3
 800b502:	f7f9 ffa9 	bl	8005458 <lwip_htons>
 800b506:	4603      	mov	r3, r0
 800b508:	b2db      	uxtb	r3, r3
 800b50a:	f003 0303 	and.w	r3, r3, #3
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d001      	beq.n	800b516 <tcp_output+0x2e6>
 800b512:	2301      	movs	r3, #1
 800b514:	e000      	b.n	800b518 <tcp_output+0x2e8>
 800b516:	2300      	movs	r3, #0
 800b518:	4423      	add	r3, r4
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d049      	beq.n	800b5b2 <tcp_output+0x382>
      seg->next = NULL;
 800b51e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b520:	2200      	movs	r2, #0
 800b522:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d105      	bne.n	800b538 <tcp_output+0x308>
        pcb->unacked = seg;
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b530:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 800b532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b534:	623b      	str	r3, [r7, #32]
 800b536:	e03f      	b.n	800b5b8 <tcp_output+0x388>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800b538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b53a:	68db      	ldr	r3, [r3, #12]
 800b53c:	685b      	ldr	r3, [r3, #4]
 800b53e:	4618      	mov	r0, r3
 800b540:	f7f9 ff9f 	bl	8005482 <lwip_htonl>
 800b544:	4604      	mov	r4, r0
 800b546:	6a3b      	ldr	r3, [r7, #32]
 800b548:	68db      	ldr	r3, [r3, #12]
 800b54a:	685b      	ldr	r3, [r3, #4]
 800b54c:	4618      	mov	r0, r3
 800b54e:	f7f9 ff98 	bl	8005482 <lwip_htonl>
 800b552:	4603      	mov	r3, r0
 800b554:	1ae3      	subs	r3, r4, r3
 800b556:	2b00      	cmp	r3, #0
 800b558:	da24      	bge.n	800b5a4 <tcp_output+0x374>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	3370      	adds	r3, #112	; 0x70
 800b55e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800b560:	e002      	b.n	800b568 <tcp_output+0x338>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800b562:	69fb      	ldr	r3, [r7, #28]
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800b568:	69fb      	ldr	r3, [r7, #28]
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d011      	beq.n	800b594 <tcp_output+0x364>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800b570:	69fb      	ldr	r3, [r7, #28]
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	68db      	ldr	r3, [r3, #12]
 800b576:	685b      	ldr	r3, [r3, #4]
 800b578:	4618      	mov	r0, r3
 800b57a:	f7f9 ff82 	bl	8005482 <lwip_htonl>
 800b57e:	4604      	mov	r4, r0
 800b580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b582:	68db      	ldr	r3, [r3, #12]
 800b584:	685b      	ldr	r3, [r3, #4]
 800b586:	4618      	mov	r0, r3
 800b588:	f7f9 ff7b 	bl	8005482 <lwip_htonl>
 800b58c:	4603      	mov	r3, r0
 800b58e:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800b590:	2b00      	cmp	r3, #0
 800b592:	dbe6      	blt.n	800b562 <tcp_output+0x332>
          }
          seg->next = (*cur_seg);
 800b594:	69fb      	ldr	r3, [r7, #28]
 800b596:	681a      	ldr	r2, [r3, #0]
 800b598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b59a:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800b59c:	69fb      	ldr	r3, [r7, #28]
 800b59e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b5a0:	601a      	str	r2, [r3, #0]
 800b5a2:	e009      	b.n	800b5b8 <tcp_output+0x388>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800b5a4:	6a3b      	ldr	r3, [r7, #32]
 800b5a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b5a8:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800b5aa:	6a3b      	ldr	r3, [r7, #32]
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	623b      	str	r3, [r7, #32]
 800b5b0:	e002      	b.n	800b5b8 <tcp_output+0x388>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800b5b2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b5b4:	f7fc fc42 	bl	8007e3c <tcp_seg_free>
    }
    seg = pcb->unsent;
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b5bc:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800b5be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d012      	beq.n	800b5ea <tcp_output+0x3ba>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800b5c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5c6:	68db      	ldr	r3, [r3, #12]
 800b5c8:	685b      	ldr	r3, [r3, #4]
 800b5ca:	4618      	mov	r0, r3
 800b5cc:	f7f9 ff59 	bl	8005482 <lwip_htonl>
 800b5d0:	4602      	mov	r2, r0
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b5d6:	1ad3      	subs	r3, r2, r3
 800b5d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b5da:	8912      	ldrh	r2, [r2, #8]
 800b5dc:	4413      	add	r3, r2
  while (seg != NULL &&
 800b5de:	69ba      	ldr	r2, [r7, #24]
 800b5e0:	429a      	cmp	r2, r3
 800b5e2:	f4bf aeda 	bcs.w	800b39a <tcp_output+0x16a>
 800b5e6:	e000      	b.n	800b5ea <tcp_output+0x3ba>
      break;
 800b5e8:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d108      	bne.n	800b604 <tcp_output+0x3d4>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	2200      	movs	r2, #0
 800b5f6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800b5fa:	e004      	b.n	800b606 <tcp_output+0x3d6>
    goto output_done;
 800b5fc:	bf00      	nop
 800b5fe:	e002      	b.n	800b606 <tcp_output+0x3d6>
    goto output_done;
 800b600:	bf00      	nop
 800b602:	e000      	b.n	800b606 <tcp_output+0x3d6>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800b604:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	8b5b      	ldrh	r3, [r3, #26]
 800b60a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b60e:	b29a      	uxth	r2, r3
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800b614:	2300      	movs	r3, #0
}
 800b616:	4618      	mov	r0, r3
 800b618:	3728      	adds	r7, #40	; 0x28
 800b61a:	46bd      	mov	sp, r7
 800b61c:	bdb0      	pop	{r4, r5, r7, pc}
 800b61e:	bf00      	nop

0800b620 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800b620:	b580      	push	{r7, lr}
 800b622:	b082      	sub	sp, #8
 800b624:	af00      	add	r7, sp, #0
 800b626:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d106      	bne.n	800b63c <tcp_output_segment_busy+0x1c>
 800b62e:	4b09      	ldr	r3, [pc, #36]	; (800b654 <tcp_output_segment_busy+0x34>)
 800b630:	f240 529a 	movw	r2, #1434	; 0x59a
 800b634:	4908      	ldr	r1, [pc, #32]	; (800b658 <tcp_output_segment_busy+0x38>)
 800b636:	4809      	ldr	r0, [pc, #36]	; (800b65c <tcp_output_segment_busy+0x3c>)
 800b638:	f003 f980 	bl	800e93c <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	685b      	ldr	r3, [r3, #4]
 800b640:	7b9b      	ldrb	r3, [r3, #14]
 800b642:	2b01      	cmp	r3, #1
 800b644:	d001      	beq.n	800b64a <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800b646:	2301      	movs	r3, #1
 800b648:	e000      	b.n	800b64c <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800b64a:	2300      	movs	r3, #0
}
 800b64c:	4618      	mov	r0, r3
 800b64e:	3708      	adds	r7, #8
 800b650:	46bd      	mov	sp, r7
 800b652:	bd80      	pop	{r7, pc}
 800b654:	08010e78 	.word	0x08010e78
 800b658:	08011414 	.word	0x08011414
 800b65c:	08010ecc 	.word	0x08010ecc

0800b660 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800b660:	b5b0      	push	{r4, r5, r7, lr}
 800b662:	b08c      	sub	sp, #48	; 0x30
 800b664:	af04      	add	r7, sp, #16
 800b666:	60f8      	str	r0, [r7, #12]
 800b668:	60b9      	str	r1, [r7, #8]
 800b66a:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d106      	bne.n	800b680 <tcp_output_segment+0x20>
 800b672:	4b64      	ldr	r3, [pc, #400]	; (800b804 <tcp_output_segment+0x1a4>)
 800b674:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 800b678:	4963      	ldr	r1, [pc, #396]	; (800b808 <tcp_output_segment+0x1a8>)
 800b67a:	4864      	ldr	r0, [pc, #400]	; (800b80c <tcp_output_segment+0x1ac>)
 800b67c:	f003 f95e 	bl	800e93c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800b680:	68bb      	ldr	r3, [r7, #8]
 800b682:	2b00      	cmp	r3, #0
 800b684:	d106      	bne.n	800b694 <tcp_output_segment+0x34>
 800b686:	4b5f      	ldr	r3, [pc, #380]	; (800b804 <tcp_output_segment+0x1a4>)
 800b688:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800b68c:	4960      	ldr	r1, [pc, #384]	; (800b810 <tcp_output_segment+0x1b0>)
 800b68e:	485f      	ldr	r0, [pc, #380]	; (800b80c <tcp_output_segment+0x1ac>)
 800b690:	f003 f954 	bl	800e93c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	2b00      	cmp	r3, #0
 800b698:	d106      	bne.n	800b6a8 <tcp_output_segment+0x48>
 800b69a:	4b5a      	ldr	r3, [pc, #360]	; (800b804 <tcp_output_segment+0x1a4>)
 800b69c:	f240 52ba 	movw	r2, #1466	; 0x5ba
 800b6a0:	495c      	ldr	r1, [pc, #368]	; (800b814 <tcp_output_segment+0x1b4>)
 800b6a2:	485a      	ldr	r0, [pc, #360]	; (800b80c <tcp_output_segment+0x1ac>)
 800b6a4:	f003 f94a 	bl	800e93c <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800b6a8:	68f8      	ldr	r0, [r7, #12]
 800b6aa:	f7ff ffb9 	bl	800b620 <tcp_output_segment_busy>
 800b6ae:	4603      	mov	r3, r0
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	d001      	beq.n	800b6b8 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800b6b4:	2300      	movs	r3, #0
 800b6b6:	e0a0      	b.n	800b7fa <tcp_output_segment+0x19a>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800b6b8:	68bb      	ldr	r3, [r7, #8]
 800b6ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	68dc      	ldr	r4, [r3, #12]
 800b6c0:	4610      	mov	r0, r2
 800b6c2:	f7f9 fede 	bl	8005482 <lwip_htonl>
 800b6c6:	4603      	mov	r3, r0
 800b6c8:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800b6ca:	68bb      	ldr	r3, [r7, #8]
 800b6cc:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800b6ce:	68fb      	ldr	r3, [r7, #12]
 800b6d0:	68dc      	ldr	r4, [r3, #12]
 800b6d2:	4610      	mov	r0, r2
 800b6d4:	f7f9 fec0 	bl	8005458 <lwip_htons>
 800b6d8:	4603      	mov	r3, r0
 800b6da:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800b6dc:	68bb      	ldr	r3, [r7, #8]
 800b6de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6e0:	68ba      	ldr	r2, [r7, #8]
 800b6e2:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800b6e4:	441a      	add	r2, r3
 800b6e6:	68bb      	ldr	r3, [r7, #8]
 800b6e8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800b6ea:	68fb      	ldr	r3, [r7, #12]
 800b6ec:	68db      	ldr	r3, [r3, #12]
 800b6ee:	3314      	adds	r3, #20
 800b6f0:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800b6f2:	68fb      	ldr	r3, [r7, #12]
 800b6f4:	7a9b      	ldrb	r3, [r3, #10]
 800b6f6:	f003 0301 	and.w	r3, r3, #1
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d015      	beq.n	800b72a <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800b6fe:	68bb      	ldr	r3, [r7, #8]
 800b700:	3304      	adds	r3, #4
 800b702:	461a      	mov	r2, r3
 800b704:	6879      	ldr	r1, [r7, #4]
 800b706:	f44f 7006 	mov.w	r0, #536	; 0x218
 800b70a:	f7fc fe8d 	bl	8008428 <tcp_eff_send_mss_netif>
 800b70e:	4603      	mov	r3, r0
 800b710:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800b712:	8b7b      	ldrh	r3, [r7, #26]
 800b714:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800b718:	4618      	mov	r0, r3
 800b71a:	f7f9 feb2 	bl	8005482 <lwip_htonl>
 800b71e:	4602      	mov	r2, r0
 800b720:	69fb      	ldr	r3, [r7, #28]
 800b722:	601a      	str	r2, [r3, #0]
    opts += 1;
 800b724:	69fb      	ldr	r3, [r7, #28]
 800b726:	3304      	adds	r3, #4
 800b728:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800b72a:	68bb      	ldr	r3, [r7, #8]
 800b72c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800b730:	2b00      	cmp	r3, #0
 800b732:	da02      	bge.n	800b73a <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800b734:	68bb      	ldr	r3, [r7, #8]
 800b736:	2200      	movs	r2, #0
 800b738:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800b73a:	68bb      	ldr	r3, [r7, #8]
 800b73c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d10c      	bne.n	800b75c <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800b742:	4b35      	ldr	r3, [pc, #212]	; (800b818 <tcp_output_segment+0x1b8>)
 800b744:	681a      	ldr	r2, [r3, #0]
 800b746:	68bb      	ldr	r3, [r7, #8]
 800b748:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	68db      	ldr	r3, [r3, #12]
 800b74e:	685b      	ldr	r3, [r3, #4]
 800b750:	4618      	mov	r0, r3
 800b752:	f7f9 fe96 	bl	8005482 <lwip_htonl>
 800b756:	4602      	mov	r2, r0
 800b758:	68bb      	ldr	r3, [r7, #8]
 800b75a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	68db      	ldr	r3, [r3, #12]
 800b760:	461a      	mov	r2, r3
 800b762:	68fb      	ldr	r3, [r7, #12]
 800b764:	685b      	ldr	r3, [r3, #4]
 800b766:	685b      	ldr	r3, [r3, #4]
 800b768:	1ad3      	subs	r3, r2, r3
 800b76a:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	685b      	ldr	r3, [r3, #4]
 800b770:	8959      	ldrh	r1, [r3, #10]
 800b772:	68fb      	ldr	r3, [r7, #12]
 800b774:	685b      	ldr	r3, [r3, #4]
 800b776:	8b3a      	ldrh	r2, [r7, #24]
 800b778:	1a8a      	subs	r2, r1, r2
 800b77a:	b292      	uxth	r2, r2
 800b77c:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	685b      	ldr	r3, [r3, #4]
 800b782:	8919      	ldrh	r1, [r3, #8]
 800b784:	68fb      	ldr	r3, [r7, #12]
 800b786:	685b      	ldr	r3, [r3, #4]
 800b788:	8b3a      	ldrh	r2, [r7, #24]
 800b78a:	1a8a      	subs	r2, r1, r2
 800b78c:	b292      	uxth	r2, r2
 800b78e:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	685b      	ldr	r3, [r3, #4]
 800b794:	68fa      	ldr	r2, [r7, #12]
 800b796:	68d2      	ldr	r2, [r2, #12]
 800b798:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	68db      	ldr	r3, [r3, #12]
 800b79e:	2200      	movs	r2, #0
 800b7a0:	741a      	strb	r2, [r3, #16]
 800b7a2:	2200      	movs	r2, #0
 800b7a4:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	68db      	ldr	r3, [r3, #12]
 800b7aa:	f103 0214 	add.w	r2, r3, #20
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	7a9b      	ldrb	r3, [r3, #10]
 800b7b2:	009b      	lsls	r3, r3, #2
 800b7b4:	f003 0304 	and.w	r3, r3, #4
 800b7b8:	4413      	add	r3, r2
 800b7ba:	69fa      	ldr	r2, [r7, #28]
 800b7bc:	429a      	cmp	r2, r3
 800b7be:	d006      	beq.n	800b7ce <tcp_output_segment+0x16e>
 800b7c0:	4b10      	ldr	r3, [pc, #64]	; (800b804 <tcp_output_segment+0x1a4>)
 800b7c2:	f240 621c 	movw	r2, #1564	; 0x61c
 800b7c6:	4915      	ldr	r1, [pc, #84]	; (800b81c <tcp_output_segment+0x1bc>)
 800b7c8:	4810      	ldr	r0, [pc, #64]	; (800b80c <tcp_output_segment+0x1ac>)
 800b7ca:	f003 f8b7 	bl	800e93c <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800b7ce:	68fb      	ldr	r3, [r7, #12]
 800b7d0:	6858      	ldr	r0, [r3, #4]
 800b7d2:	68b9      	ldr	r1, [r7, #8]
 800b7d4:	68bb      	ldr	r3, [r7, #8]
 800b7d6:	1d1c      	adds	r4, r3, #4
 800b7d8:	68bb      	ldr	r3, [r7, #8]
 800b7da:	7add      	ldrb	r5, [r3, #11]
 800b7dc:	68bb      	ldr	r3, [r7, #8]
 800b7de:	7a9b      	ldrb	r3, [r3, #10]
 800b7e0:	687a      	ldr	r2, [r7, #4]
 800b7e2:	9202      	str	r2, [sp, #8]
 800b7e4:	2206      	movs	r2, #6
 800b7e6:	9201      	str	r2, [sp, #4]
 800b7e8:	9300      	str	r3, [sp, #0]
 800b7ea:	462b      	mov	r3, r5
 800b7ec:	4622      	mov	r2, r4
 800b7ee:	f002 f83b 	bl	800d868 <ip4_output_if>
 800b7f2:	4603      	mov	r3, r0
 800b7f4:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800b7f6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b7fa:	4618      	mov	r0, r3
 800b7fc:	3720      	adds	r7, #32
 800b7fe:	46bd      	mov	sp, r7
 800b800:	bdb0      	pop	{r4, r5, r7, pc}
 800b802:	bf00      	nop
 800b804:	08010e78 	.word	0x08010e78
 800b808:	0801143c 	.word	0x0801143c
 800b80c:	08010ecc 	.word	0x08010ecc
 800b810:	0801145c 	.word	0x0801145c
 800b814:	0801147c 	.word	0x0801147c
 800b818:	20008ae4 	.word	0x20008ae4
 800b81c:	080114a0 	.word	0x080114a0

0800b820 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800b820:	b5b0      	push	{r4, r5, r7, lr}
 800b822:	b084      	sub	sp, #16
 800b824:	af00      	add	r7, sp, #0
 800b826:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d106      	bne.n	800b83c <tcp_rexmit_rto_prepare+0x1c>
 800b82e:	4b31      	ldr	r3, [pc, #196]	; (800b8f4 <tcp_rexmit_rto_prepare+0xd4>)
 800b830:	f240 6263 	movw	r2, #1635	; 0x663
 800b834:	4930      	ldr	r1, [pc, #192]	; (800b8f8 <tcp_rexmit_rto_prepare+0xd8>)
 800b836:	4831      	ldr	r0, [pc, #196]	; (800b8fc <tcp_rexmit_rto_prepare+0xdc>)
 800b838:	f003 f880 	bl	800e93c <iprintf>

  if (pcb->unacked == NULL) {
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b840:	2b00      	cmp	r3, #0
 800b842:	d102      	bne.n	800b84a <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800b844:	f06f 0305 	mvn.w	r3, #5
 800b848:	e050      	b.n	800b8ec <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b84e:	60fb      	str	r3, [r7, #12]
 800b850:	e00b      	b.n	800b86a <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800b852:	68f8      	ldr	r0, [r7, #12]
 800b854:	f7ff fee4 	bl	800b620 <tcp_output_segment_busy>
 800b858:	4603      	mov	r3, r0
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d002      	beq.n	800b864 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800b85e:	f06f 0305 	mvn.w	r3, #5
 800b862:	e043      	b.n	800b8ec <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	60fb      	str	r3, [r7, #12]
 800b86a:	68fb      	ldr	r3, [r7, #12]
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	2b00      	cmp	r3, #0
 800b870:	d1ef      	bne.n	800b852 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800b872:	68f8      	ldr	r0, [r7, #12]
 800b874:	f7ff fed4 	bl	800b620 <tcp_output_segment_busy>
 800b878:	4603      	mov	r3, r0
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d002      	beq.n	800b884 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800b87e:	f06f 0305 	mvn.w	r3, #5
 800b882:	e033      	b.n	800b8ec <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	2200      	movs	r2, #0
 800b898:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	8b5b      	ldrh	r3, [r3, #26]
 800b89e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800b8a2:	b29a      	uxth	r2, r3
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	68db      	ldr	r3, [r3, #12]
 800b8ac:	685b      	ldr	r3, [r3, #4]
 800b8ae:	4618      	mov	r0, r3
 800b8b0:	f7f9 fde7 	bl	8005482 <lwip_htonl>
 800b8b4:	4604      	mov	r4, r0
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	891b      	ldrh	r3, [r3, #8]
 800b8ba:	461d      	mov	r5, r3
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	68db      	ldr	r3, [r3, #12]
 800b8c0:	899b      	ldrh	r3, [r3, #12]
 800b8c2:	b29b      	uxth	r3, r3
 800b8c4:	4618      	mov	r0, r3
 800b8c6:	f7f9 fdc7 	bl	8005458 <lwip_htons>
 800b8ca:	4603      	mov	r3, r0
 800b8cc:	b2db      	uxtb	r3, r3
 800b8ce:	f003 0303 	and.w	r3, r3, #3
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d001      	beq.n	800b8da <tcp_rexmit_rto_prepare+0xba>
 800b8d6:	2301      	movs	r3, #1
 800b8d8:	e000      	b.n	800b8dc <tcp_rexmit_rto_prepare+0xbc>
 800b8da:	2300      	movs	r3, #0
 800b8dc:	442b      	add	r3, r5
 800b8de:	18e2      	adds	r2, r4, r3
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	2200      	movs	r2, #0
 800b8e8:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 800b8ea:	2300      	movs	r3, #0
}
 800b8ec:	4618      	mov	r0, r3
 800b8ee:	3710      	adds	r7, #16
 800b8f0:	46bd      	mov	sp, r7
 800b8f2:	bdb0      	pop	{r4, r5, r7, pc}
 800b8f4:	08010e78 	.word	0x08010e78
 800b8f8:	080114b4 	.word	0x080114b4
 800b8fc:	08010ecc 	.word	0x08010ecc

0800b900 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800b900:	b580      	push	{r7, lr}
 800b902:	b082      	sub	sp, #8
 800b904:	af00      	add	r7, sp, #0
 800b906:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	d106      	bne.n	800b91c <tcp_rexmit_rto_commit+0x1c>
 800b90e:	4b0d      	ldr	r3, [pc, #52]	; (800b944 <tcp_rexmit_rto_commit+0x44>)
 800b910:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800b914:	490c      	ldr	r1, [pc, #48]	; (800b948 <tcp_rexmit_rto_commit+0x48>)
 800b916:	480d      	ldr	r0, [pc, #52]	; (800b94c <tcp_rexmit_rto_commit+0x4c>)
 800b918:	f003 f810 	bl	800e93c <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b922:	2bff      	cmp	r3, #255	; 0xff
 800b924:	d007      	beq.n	800b936 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b92c:	3301      	adds	r3, #1
 800b92e:	b2da      	uxtb	r2, r3
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800b936:	6878      	ldr	r0, [r7, #4]
 800b938:	f7ff fc7a 	bl	800b230 <tcp_output>
}
 800b93c:	bf00      	nop
 800b93e:	3708      	adds	r7, #8
 800b940:	46bd      	mov	sp, r7
 800b942:	bd80      	pop	{r7, pc}
 800b944:	08010e78 	.word	0x08010e78
 800b948:	080114d8 	.word	0x080114d8
 800b94c:	08010ecc 	.word	0x08010ecc

0800b950 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800b950:	b580      	push	{r7, lr}
 800b952:	b082      	sub	sp, #8
 800b954:	af00      	add	r7, sp, #0
 800b956:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	d106      	bne.n	800b96c <tcp_rexmit_rto+0x1c>
 800b95e:	4b0a      	ldr	r3, [pc, #40]	; (800b988 <tcp_rexmit_rto+0x38>)
 800b960:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800b964:	4909      	ldr	r1, [pc, #36]	; (800b98c <tcp_rexmit_rto+0x3c>)
 800b966:	480a      	ldr	r0, [pc, #40]	; (800b990 <tcp_rexmit_rto+0x40>)
 800b968:	f002 ffe8 	bl	800e93c <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800b96c:	6878      	ldr	r0, [r7, #4]
 800b96e:	f7ff ff57 	bl	800b820 <tcp_rexmit_rto_prepare>
 800b972:	4603      	mov	r3, r0
 800b974:	2b00      	cmp	r3, #0
 800b976:	d102      	bne.n	800b97e <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800b978:	6878      	ldr	r0, [r7, #4]
 800b97a:	f7ff ffc1 	bl	800b900 <tcp_rexmit_rto_commit>
  }
}
 800b97e:	bf00      	nop
 800b980:	3708      	adds	r7, #8
 800b982:	46bd      	mov	sp, r7
 800b984:	bd80      	pop	{r7, pc}
 800b986:	bf00      	nop
 800b988:	08010e78 	.word	0x08010e78
 800b98c:	080114fc 	.word	0x080114fc
 800b990:	08010ecc 	.word	0x08010ecc

0800b994 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800b994:	b590      	push	{r4, r7, lr}
 800b996:	b085      	sub	sp, #20
 800b998:	af00      	add	r7, sp, #0
 800b99a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	d106      	bne.n	800b9b0 <tcp_rexmit+0x1c>
 800b9a2:	4b2f      	ldr	r3, [pc, #188]	; (800ba60 <tcp_rexmit+0xcc>)
 800b9a4:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800b9a8:	492e      	ldr	r1, [pc, #184]	; (800ba64 <tcp_rexmit+0xd0>)
 800b9aa:	482f      	ldr	r0, [pc, #188]	; (800ba68 <tcp_rexmit+0xd4>)
 800b9ac:	f002 ffc6 	bl	800e93c <iprintf>

  if (pcb->unacked == NULL) {
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d102      	bne.n	800b9be <tcp_rexmit+0x2a>
    return ERR_VAL;
 800b9b8:	f06f 0305 	mvn.w	r3, #5
 800b9bc:	e04c      	b.n	800ba58 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b9c2:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800b9c4:	68b8      	ldr	r0, [r7, #8]
 800b9c6:	f7ff fe2b 	bl	800b620 <tcp_output_segment_busy>
 800b9ca:	4603      	mov	r3, r0
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d002      	beq.n	800b9d6 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800b9d0:	f06f 0305 	mvn.w	r3, #5
 800b9d4:	e040      	b.n	800ba58 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800b9d6:	68bb      	ldr	r3, [r7, #8]
 800b9d8:	681a      	ldr	r2, [r3, #0]
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	336c      	adds	r3, #108	; 0x6c
 800b9e2:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800b9e4:	e002      	b.n	800b9ec <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d011      	beq.n	800ba18 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	68db      	ldr	r3, [r3, #12]
 800b9fa:	685b      	ldr	r3, [r3, #4]
 800b9fc:	4618      	mov	r0, r3
 800b9fe:	f7f9 fd40 	bl	8005482 <lwip_htonl>
 800ba02:	4604      	mov	r4, r0
 800ba04:	68bb      	ldr	r3, [r7, #8]
 800ba06:	68db      	ldr	r3, [r3, #12]
 800ba08:	685b      	ldr	r3, [r3, #4]
 800ba0a:	4618      	mov	r0, r3
 800ba0c:	f7f9 fd39 	bl	8005482 <lwip_htonl>
 800ba10:	4603      	mov	r3, r0
 800ba12:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	dbe6      	blt.n	800b9e6 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800ba18:	68fb      	ldr	r3, [r7, #12]
 800ba1a:	681a      	ldr	r2, [r3, #0]
 800ba1c:	68bb      	ldr	r3, [r7, #8]
 800ba1e:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	68ba      	ldr	r2, [r7, #8]
 800ba24:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800ba26:	68bb      	ldr	r3, [r7, #8]
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d103      	bne.n	800ba36 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	2200      	movs	r2, #0
 800ba32:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ba3c:	2bff      	cmp	r3, #255	; 0xff
 800ba3e:	d007      	beq.n	800ba50 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ba46:	3301      	adds	r3, #1
 800ba48:	b2da      	uxtb	r2, r3
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	2200      	movs	r2, #0
 800ba54:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800ba56:	2300      	movs	r3, #0
}
 800ba58:	4618      	mov	r0, r3
 800ba5a:	3714      	adds	r7, #20
 800ba5c:	46bd      	mov	sp, r7
 800ba5e:	bd90      	pop	{r4, r7, pc}
 800ba60:	08010e78 	.word	0x08010e78
 800ba64:	08011518 	.word	0x08011518
 800ba68:	08010ecc 	.word	0x08010ecc

0800ba6c <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800ba6c:	b580      	push	{r7, lr}
 800ba6e:	b082      	sub	sp, #8
 800ba70:	af00      	add	r7, sp, #0
 800ba72:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d106      	bne.n	800ba88 <tcp_rexmit_fast+0x1c>
 800ba7a:	4b2f      	ldr	r3, [pc, #188]	; (800bb38 <tcp_rexmit_fast+0xcc>)
 800ba7c:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800ba80:	492e      	ldr	r1, [pc, #184]	; (800bb3c <tcp_rexmit_fast+0xd0>)
 800ba82:	482f      	ldr	r0, [pc, #188]	; (800bb40 <tcp_rexmit_fast+0xd4>)
 800ba84:	f002 ff5a 	bl	800e93c <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	d04f      	beq.n	800bb30 <tcp_rexmit_fast+0xc4>
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	8b5b      	ldrh	r3, [r3, #26]
 800ba94:	f003 0304 	and.w	r3, r3, #4
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d149      	bne.n	800bb30 <tcp_rexmit_fast+0xc4>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800ba9c:	6878      	ldr	r0, [r7, #4]
 800ba9e:	f7ff ff79 	bl	800b994 <tcp_rexmit>
 800baa2:	4603      	mov	r3, r0
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	d143      	bne.n	800bb30 <tcp_rexmit_fast+0xc4>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800bab4:	429a      	cmp	r2, r3
 800bab6:	d208      	bcs.n	800baca <tcp_rexmit_fast+0x5e>
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800babe:	2b00      	cmp	r3, #0
 800bac0:	da00      	bge.n	800bac4 <tcp_rexmit_fast+0x58>
 800bac2:	3301      	adds	r3, #1
 800bac4:	105b      	asrs	r3, r3, #1
 800bac6:	b29b      	uxth	r3, r3
 800bac8:	e007      	b.n	800bada <tcp_rexmit_fast+0x6e>
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	da00      	bge.n	800bad6 <tcp_rexmit_fast+0x6a>
 800bad4:	3301      	adds	r3, #1
 800bad6:	105b      	asrs	r3, r3, #1
 800bad8:	b29b      	uxth	r3, r3
 800bada:	687a      	ldr	r2, [r7, #4]
 800badc:	f8a2 304a 	strh.w	r3, [r2, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800bae6:	461a      	mov	r2, r3
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800baec:	005b      	lsls	r3, r3, #1
 800baee:	429a      	cmp	r2, r3
 800baf0:	d206      	bcs.n	800bb00 <tcp_rexmit_fast+0x94>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800baf6:	005b      	lsls	r3, r3, #1
 800baf8:	b29a      	uxth	r2, r3
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bb0a:	4619      	mov	r1, r3
 800bb0c:	0049      	lsls	r1, r1, #1
 800bb0e:	440b      	add	r3, r1
 800bb10:	b29b      	uxth	r3, r3
 800bb12:	4413      	add	r3, r2
 800bb14:	b29a      	uxth	r2, r3
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	8b5b      	ldrh	r3, [r3, #26]
 800bb20:	f043 0304 	orr.w	r3, r3, #4
 800bb24:	b29a      	uxth	r2, r3
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	2200      	movs	r2, #0
 800bb2e:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 800bb30:	bf00      	nop
 800bb32:	3708      	adds	r7, #8
 800bb34:	46bd      	mov	sp, r7
 800bb36:	bd80      	pop	{r7, pc}
 800bb38:	08010e78 	.word	0x08010e78
 800bb3c:	08011530 	.word	0x08011530
 800bb40:	08010ecc 	.word	0x08010ecc

0800bb44 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800bb44:	b580      	push	{r7, lr}
 800bb46:	b086      	sub	sp, #24
 800bb48:	af00      	add	r7, sp, #0
 800bb4a:	60f8      	str	r0, [r7, #12]
 800bb4c:	607b      	str	r3, [r7, #4]
 800bb4e:	460b      	mov	r3, r1
 800bb50:	817b      	strh	r3, [r7, #10]
 800bb52:	4613      	mov	r3, r2
 800bb54:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800bb56:	897a      	ldrh	r2, [r7, #10]
 800bb58:	893b      	ldrh	r3, [r7, #8]
 800bb5a:	4413      	add	r3, r2
 800bb5c:	b29b      	uxth	r3, r3
 800bb5e:	3314      	adds	r3, #20
 800bb60:	b29b      	uxth	r3, r3
 800bb62:	f44f 7220 	mov.w	r2, #640	; 0x280
 800bb66:	4619      	mov	r1, r3
 800bb68:	2022      	movs	r0, #34	; 0x22
 800bb6a:	f7fa fc1f 	bl	80063ac <pbuf_alloc>
 800bb6e:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800bb70:	697b      	ldr	r3, [r7, #20]
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d04e      	beq.n	800bc14 <tcp_output_alloc_header_common+0xd0>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800bb76:	697b      	ldr	r3, [r7, #20]
 800bb78:	895b      	ldrh	r3, [r3, #10]
 800bb7a:	461a      	mov	r2, r3
 800bb7c:	897b      	ldrh	r3, [r7, #10]
 800bb7e:	3314      	adds	r3, #20
 800bb80:	429a      	cmp	r2, r3
 800bb82:	da06      	bge.n	800bb92 <tcp_output_alloc_header_common+0x4e>
 800bb84:	4b26      	ldr	r3, [pc, #152]	; (800bc20 <tcp_output_alloc_header_common+0xdc>)
 800bb86:	f240 7224 	movw	r2, #1828	; 0x724
 800bb8a:	4926      	ldr	r1, [pc, #152]	; (800bc24 <tcp_output_alloc_header_common+0xe0>)
 800bb8c:	4826      	ldr	r0, [pc, #152]	; (800bc28 <tcp_output_alloc_header_common+0xe4>)
 800bb8e:	f002 fed5 	bl	800e93c <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800bb92:	697b      	ldr	r3, [r7, #20]
 800bb94:	685b      	ldr	r3, [r3, #4]
 800bb96:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800bb98:	8c3b      	ldrh	r3, [r7, #32]
 800bb9a:	4618      	mov	r0, r3
 800bb9c:	f7f9 fc5c 	bl	8005458 <lwip_htons>
 800bba0:	4603      	mov	r3, r0
 800bba2:	461a      	mov	r2, r3
 800bba4:	693b      	ldr	r3, [r7, #16]
 800bba6:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800bba8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bbaa:	4618      	mov	r0, r3
 800bbac:	f7f9 fc54 	bl	8005458 <lwip_htons>
 800bbb0:	4603      	mov	r3, r0
 800bbb2:	461a      	mov	r2, r3
 800bbb4:	693b      	ldr	r3, [r7, #16]
 800bbb6:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800bbb8:	693b      	ldr	r3, [r7, #16]
 800bbba:	687a      	ldr	r2, [r7, #4]
 800bbbc:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800bbbe:	68f8      	ldr	r0, [r7, #12]
 800bbc0:	f7f9 fc5f 	bl	8005482 <lwip_htonl>
 800bbc4:	4602      	mov	r2, r0
 800bbc6:	693b      	ldr	r3, [r7, #16]
 800bbc8:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800bbca:	897b      	ldrh	r3, [r7, #10]
 800bbcc:	089b      	lsrs	r3, r3, #2
 800bbce:	b29b      	uxth	r3, r3
 800bbd0:	3305      	adds	r3, #5
 800bbd2:	b29b      	uxth	r3, r3
 800bbd4:	031b      	lsls	r3, r3, #12
 800bbd6:	b29a      	uxth	r2, r3
 800bbd8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800bbdc:	b29b      	uxth	r3, r3
 800bbde:	4313      	orrs	r3, r2
 800bbe0:	b29b      	uxth	r3, r3
 800bbe2:	4618      	mov	r0, r3
 800bbe4:	f7f9 fc38 	bl	8005458 <lwip_htons>
 800bbe8:	4603      	mov	r3, r0
 800bbea:	461a      	mov	r2, r3
 800bbec:	693b      	ldr	r3, [r7, #16]
 800bbee:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800bbf0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800bbf2:	4618      	mov	r0, r3
 800bbf4:	f7f9 fc30 	bl	8005458 <lwip_htons>
 800bbf8:	4603      	mov	r3, r0
 800bbfa:	461a      	mov	r2, r3
 800bbfc:	693b      	ldr	r3, [r7, #16]
 800bbfe:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800bc00:	693b      	ldr	r3, [r7, #16]
 800bc02:	2200      	movs	r2, #0
 800bc04:	741a      	strb	r2, [r3, #16]
 800bc06:	2200      	movs	r2, #0
 800bc08:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800bc0a:	693b      	ldr	r3, [r7, #16]
 800bc0c:	2200      	movs	r2, #0
 800bc0e:	749a      	strb	r2, [r3, #18]
 800bc10:	2200      	movs	r2, #0
 800bc12:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800bc14:	697b      	ldr	r3, [r7, #20]
}
 800bc16:	4618      	mov	r0, r3
 800bc18:	3718      	adds	r7, #24
 800bc1a:	46bd      	mov	sp, r7
 800bc1c:	bd80      	pop	{r7, pc}
 800bc1e:	bf00      	nop
 800bc20:	08010e78 	.word	0x08010e78
 800bc24:	08011550 	.word	0x08011550
 800bc28:	08010ecc 	.word	0x08010ecc

0800bc2c <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800bc2c:	b5b0      	push	{r4, r5, r7, lr}
 800bc2e:	b08a      	sub	sp, #40	; 0x28
 800bc30:	af04      	add	r7, sp, #16
 800bc32:	60f8      	str	r0, [r7, #12]
 800bc34:	607b      	str	r3, [r7, #4]
 800bc36:	460b      	mov	r3, r1
 800bc38:	817b      	strh	r3, [r7, #10]
 800bc3a:	4613      	mov	r3, r2
 800bc3c:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800bc3e:	68fb      	ldr	r3, [r7, #12]
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	d106      	bne.n	800bc52 <tcp_output_alloc_header+0x26>
 800bc44:	4b15      	ldr	r3, [pc, #84]	; (800bc9c <tcp_output_alloc_header+0x70>)
 800bc46:	f240 7242 	movw	r2, #1858	; 0x742
 800bc4a:	4915      	ldr	r1, [pc, #84]	; (800bca0 <tcp_output_alloc_header+0x74>)
 800bc4c:	4815      	ldr	r0, [pc, #84]	; (800bca4 <tcp_output_alloc_header+0x78>)
 800bc4e:	f002 fe75 	bl	800e93c <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800bc52:	68fb      	ldr	r3, [r7, #12]
 800bc54:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	8adb      	ldrh	r3, [r3, #22]
 800bc5a:	68fa      	ldr	r2, [r7, #12]
 800bc5c:	8b12      	ldrh	r2, [r2, #24]
 800bc5e:	68f9      	ldr	r1, [r7, #12]
 800bc60:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 800bc62:	893d      	ldrh	r5, [r7, #8]
 800bc64:	897c      	ldrh	r4, [r7, #10]
 800bc66:	9103      	str	r1, [sp, #12]
 800bc68:	2110      	movs	r1, #16
 800bc6a:	9102      	str	r1, [sp, #8]
 800bc6c:	9201      	str	r2, [sp, #4]
 800bc6e:	9300      	str	r3, [sp, #0]
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	462a      	mov	r2, r5
 800bc74:	4621      	mov	r1, r4
 800bc76:	f7ff ff65 	bl	800bb44 <tcp_output_alloc_header_common>
 800bc7a:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800bc7c:	697b      	ldr	r3, [r7, #20]
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	d006      	beq.n	800bc90 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800bc82:	68fb      	ldr	r3, [r7, #12]
 800bc84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc86:	68fa      	ldr	r2, [r7, #12]
 800bc88:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800bc8a:	441a      	add	r2, r3
 800bc8c:	68fb      	ldr	r3, [r7, #12]
 800bc8e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800bc90:	697b      	ldr	r3, [r7, #20]
}
 800bc92:	4618      	mov	r0, r3
 800bc94:	3718      	adds	r7, #24
 800bc96:	46bd      	mov	sp, r7
 800bc98:	bdb0      	pop	{r4, r5, r7, pc}
 800bc9a:	bf00      	nop
 800bc9c:	08010e78 	.word	0x08010e78
 800bca0:	08011580 	.word	0x08011580
 800bca4:	08010ecc 	.word	0x08010ecc

0800bca8 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800bca8:	b580      	push	{r7, lr}
 800bcaa:	b088      	sub	sp, #32
 800bcac:	af00      	add	r7, sp, #0
 800bcae:	60f8      	str	r0, [r7, #12]
 800bcb0:	60b9      	str	r1, [r7, #8]
 800bcb2:	4611      	mov	r1, r2
 800bcb4:	461a      	mov	r2, r3
 800bcb6:	460b      	mov	r3, r1
 800bcb8:	71fb      	strb	r3, [r7, #7]
 800bcba:	4613      	mov	r3, r2
 800bcbc:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800bcbe:	2300      	movs	r3, #0
 800bcc0:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800bcc2:	68bb      	ldr	r3, [r7, #8]
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d106      	bne.n	800bcd6 <tcp_output_fill_options+0x2e>
 800bcc8:	4b13      	ldr	r3, [pc, #76]	; (800bd18 <tcp_output_fill_options+0x70>)
 800bcca:	f240 7256 	movw	r2, #1878	; 0x756
 800bcce:	4913      	ldr	r1, [pc, #76]	; (800bd1c <tcp_output_fill_options+0x74>)
 800bcd0:	4813      	ldr	r0, [pc, #76]	; (800bd20 <tcp_output_fill_options+0x78>)
 800bcd2:	f002 fe33 	bl	800e93c <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800bcd6:	68bb      	ldr	r3, [r7, #8]
 800bcd8:	685b      	ldr	r3, [r3, #4]
 800bcda:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800bcdc:	69bb      	ldr	r3, [r7, #24]
 800bcde:	3314      	adds	r3, #20
 800bce0:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800bce2:	69bb      	ldr	r3, [r7, #24]
 800bce4:	f103 0214 	add.w	r2, r3, #20
 800bce8:	8bfb      	ldrh	r3, [r7, #30]
 800bcea:	009b      	lsls	r3, r3, #2
 800bcec:	4619      	mov	r1, r3
 800bcee:	79fb      	ldrb	r3, [r7, #7]
 800bcf0:	009b      	lsls	r3, r3, #2
 800bcf2:	f003 0304 	and.w	r3, r3, #4
 800bcf6:	440b      	add	r3, r1
 800bcf8:	4413      	add	r3, r2
 800bcfa:	697a      	ldr	r2, [r7, #20]
 800bcfc:	429a      	cmp	r2, r3
 800bcfe:	d006      	beq.n	800bd0e <tcp_output_fill_options+0x66>
 800bd00:	4b05      	ldr	r3, [pc, #20]	; (800bd18 <tcp_output_fill_options+0x70>)
 800bd02:	f240 7275 	movw	r2, #1909	; 0x775
 800bd06:	4907      	ldr	r1, [pc, #28]	; (800bd24 <tcp_output_fill_options+0x7c>)
 800bd08:	4805      	ldr	r0, [pc, #20]	; (800bd20 <tcp_output_fill_options+0x78>)
 800bd0a:	f002 fe17 	bl	800e93c <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800bd0e:	bf00      	nop
 800bd10:	3720      	adds	r7, #32
 800bd12:	46bd      	mov	sp, r7
 800bd14:	bd80      	pop	{r7, pc}
 800bd16:	bf00      	nop
 800bd18:	08010e78 	.word	0x08010e78
 800bd1c:	080115a8 	.word	0x080115a8
 800bd20:	08010ecc 	.word	0x08010ecc
 800bd24:	080114a0 	.word	0x080114a0

0800bd28 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800bd28:	b580      	push	{r7, lr}
 800bd2a:	b08a      	sub	sp, #40	; 0x28
 800bd2c:	af04      	add	r7, sp, #16
 800bd2e:	60f8      	str	r0, [r7, #12]
 800bd30:	60b9      	str	r1, [r7, #8]
 800bd32:	607a      	str	r2, [r7, #4]
 800bd34:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800bd36:	68bb      	ldr	r3, [r7, #8]
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d106      	bne.n	800bd4a <tcp_output_control_segment+0x22>
 800bd3c:	4b1c      	ldr	r3, [pc, #112]	; (800bdb0 <tcp_output_control_segment+0x88>)
 800bd3e:	f240 7287 	movw	r2, #1927	; 0x787
 800bd42:	491c      	ldr	r1, [pc, #112]	; (800bdb4 <tcp_output_control_segment+0x8c>)
 800bd44:	481c      	ldr	r0, [pc, #112]	; (800bdb8 <tcp_output_control_segment+0x90>)
 800bd46:	f002 fdf9 	bl	800e93c <iprintf>

  netif = tcp_route(pcb, src, dst);
 800bd4a:	683a      	ldr	r2, [r7, #0]
 800bd4c:	6879      	ldr	r1, [r7, #4]
 800bd4e:	68f8      	ldr	r0, [r7, #12]
 800bd50:	f7fe ff2e 	bl	800abb0 <tcp_route>
 800bd54:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800bd56:	693b      	ldr	r3, [r7, #16]
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d102      	bne.n	800bd62 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800bd5c:	23fc      	movs	r3, #252	; 0xfc
 800bd5e:	75fb      	strb	r3, [r7, #23]
 800bd60:	e01c      	b.n	800bd9c <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800bd62:	68fb      	ldr	r3, [r7, #12]
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	d006      	beq.n	800bd76 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800bd68:	68fb      	ldr	r3, [r7, #12]
 800bd6a:	7adb      	ldrb	r3, [r3, #11]
 800bd6c:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800bd6e:	68fb      	ldr	r3, [r7, #12]
 800bd70:	7a9b      	ldrb	r3, [r3, #10]
 800bd72:	757b      	strb	r3, [r7, #21]
 800bd74:	e003      	b.n	800bd7e <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800bd76:	23ff      	movs	r3, #255	; 0xff
 800bd78:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800bd7a:	2300      	movs	r3, #0
 800bd7c:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800bd7e:	7dba      	ldrb	r2, [r7, #22]
 800bd80:	693b      	ldr	r3, [r7, #16]
 800bd82:	9302      	str	r3, [sp, #8]
 800bd84:	2306      	movs	r3, #6
 800bd86:	9301      	str	r3, [sp, #4]
 800bd88:	7d7b      	ldrb	r3, [r7, #21]
 800bd8a:	9300      	str	r3, [sp, #0]
 800bd8c:	4613      	mov	r3, r2
 800bd8e:	683a      	ldr	r2, [r7, #0]
 800bd90:	6879      	ldr	r1, [r7, #4]
 800bd92:	68b8      	ldr	r0, [r7, #8]
 800bd94:	f001 fd68 	bl	800d868 <ip4_output_if>
 800bd98:	4603      	mov	r3, r0
 800bd9a:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800bd9c:	68b8      	ldr	r0, [r7, #8]
 800bd9e:	f7fa fde5 	bl	800696c <pbuf_free>
  return err;
 800bda2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bda6:	4618      	mov	r0, r3
 800bda8:	3718      	adds	r7, #24
 800bdaa:	46bd      	mov	sp, r7
 800bdac:	bd80      	pop	{r7, pc}
 800bdae:	bf00      	nop
 800bdb0:	08010e78 	.word	0x08010e78
 800bdb4:	080115d0 	.word	0x080115d0
 800bdb8:	08010ecc 	.word	0x08010ecc

0800bdbc <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800bdbc:	b590      	push	{r4, r7, lr}
 800bdbe:	b08b      	sub	sp, #44	; 0x2c
 800bdc0:	af04      	add	r7, sp, #16
 800bdc2:	60f8      	str	r0, [r7, #12]
 800bdc4:	60b9      	str	r1, [r7, #8]
 800bdc6:	607a      	str	r2, [r7, #4]
 800bdc8:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800bdca:	683b      	ldr	r3, [r7, #0]
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	d106      	bne.n	800bdde <tcp_rst+0x22>
 800bdd0:	4b1f      	ldr	r3, [pc, #124]	; (800be50 <tcp_rst+0x94>)
 800bdd2:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800bdd6:	491f      	ldr	r1, [pc, #124]	; (800be54 <tcp_rst+0x98>)
 800bdd8:	481f      	ldr	r0, [pc, #124]	; (800be58 <tcp_rst+0x9c>)
 800bdda:	f002 fdaf 	bl	800e93c <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800bdde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	d106      	bne.n	800bdf2 <tcp_rst+0x36>
 800bde4:	4b1a      	ldr	r3, [pc, #104]	; (800be50 <tcp_rst+0x94>)
 800bde6:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800bdea:	491c      	ldr	r1, [pc, #112]	; (800be5c <tcp_rst+0xa0>)
 800bdec:	481a      	ldr	r0, [pc, #104]	; (800be58 <tcp_rst+0x9c>)
 800bdee:	f002 fda5 	bl	800e93c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800bdf2:	2300      	movs	r3, #0
 800bdf4:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800bdf6:	f246 0308 	movw	r3, #24584	; 0x6008
 800bdfa:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800bdfc:	7dfb      	ldrb	r3, [r7, #23]
 800bdfe:	b29c      	uxth	r4, r3
 800be00:	68b8      	ldr	r0, [r7, #8]
 800be02:	f7f9 fb3e 	bl	8005482 <lwip_htonl>
 800be06:	4602      	mov	r2, r0
 800be08:	8abb      	ldrh	r3, [r7, #20]
 800be0a:	9303      	str	r3, [sp, #12]
 800be0c:	2314      	movs	r3, #20
 800be0e:	9302      	str	r3, [sp, #8]
 800be10:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800be12:	9301      	str	r3, [sp, #4]
 800be14:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800be16:	9300      	str	r3, [sp, #0]
 800be18:	4613      	mov	r3, r2
 800be1a:	2200      	movs	r2, #0
 800be1c:	4621      	mov	r1, r4
 800be1e:	6878      	ldr	r0, [r7, #4]
 800be20:	f7ff fe90 	bl	800bb44 <tcp_output_alloc_header_common>
 800be24:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800be26:	693b      	ldr	r3, [r7, #16]
 800be28:	2b00      	cmp	r3, #0
 800be2a:	d00c      	beq.n	800be46 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800be2c:	7dfb      	ldrb	r3, [r7, #23]
 800be2e:	2200      	movs	r2, #0
 800be30:	6939      	ldr	r1, [r7, #16]
 800be32:	68f8      	ldr	r0, [r7, #12]
 800be34:	f7ff ff38 	bl	800bca8 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800be38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be3a:	683a      	ldr	r2, [r7, #0]
 800be3c:	6939      	ldr	r1, [r7, #16]
 800be3e:	68f8      	ldr	r0, [r7, #12]
 800be40:	f7ff ff72 	bl	800bd28 <tcp_output_control_segment>
 800be44:	e000      	b.n	800be48 <tcp_rst+0x8c>
    return;
 800be46:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800be48:	371c      	adds	r7, #28
 800be4a:	46bd      	mov	sp, r7
 800be4c:	bd90      	pop	{r4, r7, pc}
 800be4e:	bf00      	nop
 800be50:	08010e78 	.word	0x08010e78
 800be54:	080115fc 	.word	0x080115fc
 800be58:	08010ecc 	.word	0x08010ecc
 800be5c:	08011618 	.word	0x08011618

0800be60 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800be60:	b590      	push	{r4, r7, lr}
 800be62:	b087      	sub	sp, #28
 800be64:	af00      	add	r7, sp, #0
 800be66:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800be68:	2300      	movs	r3, #0
 800be6a:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800be6c:	2300      	movs	r3, #0
 800be6e:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	2b00      	cmp	r3, #0
 800be74:	d106      	bne.n	800be84 <tcp_send_empty_ack+0x24>
 800be76:	4b28      	ldr	r3, [pc, #160]	; (800bf18 <tcp_send_empty_ack+0xb8>)
 800be78:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800be7c:	4927      	ldr	r1, [pc, #156]	; (800bf1c <tcp_send_empty_ack+0xbc>)
 800be7e:	4828      	ldr	r0, [pc, #160]	; (800bf20 <tcp_send_empty_ack+0xc0>)
 800be80:	f002 fd5c 	bl	800e93c <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800be84:	7dfb      	ldrb	r3, [r7, #23]
 800be86:	009b      	lsls	r3, r3, #2
 800be88:	b2db      	uxtb	r3, r3
 800be8a:	f003 0304 	and.w	r3, r3, #4
 800be8e:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800be90:	7d7b      	ldrb	r3, [r7, #21]
 800be92:	b29c      	uxth	r4, r3
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800be98:	4618      	mov	r0, r3
 800be9a:	f7f9 faf2 	bl	8005482 <lwip_htonl>
 800be9e:	4603      	mov	r3, r0
 800bea0:	2200      	movs	r2, #0
 800bea2:	4621      	mov	r1, r4
 800bea4:	6878      	ldr	r0, [r7, #4]
 800bea6:	f7ff fec1 	bl	800bc2c <tcp_output_alloc_header>
 800beaa:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800beac:	693b      	ldr	r3, [r7, #16]
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d109      	bne.n	800bec6 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	8b5b      	ldrh	r3, [r3, #26]
 800beb6:	f043 0303 	orr.w	r3, r3, #3
 800beba:	b29a      	uxth	r2, r3
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800bec0:	f06f 0301 	mvn.w	r3, #1
 800bec4:	e023      	b.n	800bf0e <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800bec6:	7dbb      	ldrb	r3, [r7, #22]
 800bec8:	7dfa      	ldrb	r2, [r7, #23]
 800beca:	6939      	ldr	r1, [r7, #16]
 800becc:	6878      	ldr	r0, [r7, #4]
 800bece:	f7ff feeb 	bl	800bca8 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800bed2:	687a      	ldr	r2, [r7, #4]
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	3304      	adds	r3, #4
 800bed8:	6939      	ldr	r1, [r7, #16]
 800beda:	6878      	ldr	r0, [r7, #4]
 800bedc:	f7ff ff24 	bl	800bd28 <tcp_output_control_segment>
 800bee0:	4603      	mov	r3, r0
 800bee2:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800bee4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d007      	beq.n	800befc <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	8b5b      	ldrh	r3, [r3, #26]
 800bef0:	f043 0303 	orr.w	r3, r3, #3
 800bef4:	b29a      	uxth	r2, r3
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	835a      	strh	r2, [r3, #26]
 800befa:	e006      	b.n	800bf0a <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	8b5b      	ldrh	r3, [r3, #26]
 800bf00:	f023 0303 	bic.w	r3, r3, #3
 800bf04:	b29a      	uxth	r2, r3
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800bf0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bf0e:	4618      	mov	r0, r3
 800bf10:	371c      	adds	r7, #28
 800bf12:	46bd      	mov	sp, r7
 800bf14:	bd90      	pop	{r4, r7, pc}
 800bf16:	bf00      	nop
 800bf18:	08010e78 	.word	0x08010e78
 800bf1c:	08011634 	.word	0x08011634
 800bf20:	08010ecc 	.word	0x08010ecc

0800bf24 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800bf24:	b590      	push	{r4, r7, lr}
 800bf26:	b087      	sub	sp, #28
 800bf28:	af00      	add	r7, sp, #0
 800bf2a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800bf2c:	2300      	movs	r3, #0
 800bf2e:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	d106      	bne.n	800bf44 <tcp_keepalive+0x20>
 800bf36:	4b18      	ldr	r3, [pc, #96]	; (800bf98 <tcp_keepalive+0x74>)
 800bf38:	f640 0224 	movw	r2, #2084	; 0x824
 800bf3c:	4917      	ldr	r1, [pc, #92]	; (800bf9c <tcp_keepalive+0x78>)
 800bf3e:	4818      	ldr	r0, [pc, #96]	; (800bfa0 <tcp_keepalive+0x7c>)
 800bf40:	f002 fcfc 	bl	800e93c <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800bf44:	7dfb      	ldrb	r3, [r7, #23]
 800bf46:	b29c      	uxth	r4, r3
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bf4c:	3b01      	subs	r3, #1
 800bf4e:	4618      	mov	r0, r3
 800bf50:	f7f9 fa97 	bl	8005482 <lwip_htonl>
 800bf54:	4603      	mov	r3, r0
 800bf56:	2200      	movs	r2, #0
 800bf58:	4621      	mov	r1, r4
 800bf5a:	6878      	ldr	r0, [r7, #4]
 800bf5c:	f7ff fe66 	bl	800bc2c <tcp_output_alloc_header>
 800bf60:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800bf62:	693b      	ldr	r3, [r7, #16]
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	d102      	bne.n	800bf6e <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800bf68:	f04f 33ff 	mov.w	r3, #4294967295
 800bf6c:	e010      	b.n	800bf90 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800bf6e:	7dfb      	ldrb	r3, [r7, #23]
 800bf70:	2200      	movs	r2, #0
 800bf72:	6939      	ldr	r1, [r7, #16]
 800bf74:	6878      	ldr	r0, [r7, #4]
 800bf76:	f7ff fe97 	bl	800bca8 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800bf7a:	687a      	ldr	r2, [r7, #4]
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	3304      	adds	r3, #4
 800bf80:	6939      	ldr	r1, [r7, #16]
 800bf82:	6878      	ldr	r0, [r7, #4]
 800bf84:	f7ff fed0 	bl	800bd28 <tcp_output_control_segment>
 800bf88:	4603      	mov	r3, r0
 800bf8a:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800bf8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bf90:	4618      	mov	r0, r3
 800bf92:	371c      	adds	r7, #28
 800bf94:	46bd      	mov	sp, r7
 800bf96:	bd90      	pop	{r4, r7, pc}
 800bf98:	08010e78 	.word	0x08010e78
 800bf9c:	08011654 	.word	0x08011654
 800bfa0:	08010ecc 	.word	0x08010ecc

0800bfa4 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800bfa4:	b590      	push	{r4, r7, lr}
 800bfa6:	b08b      	sub	sp, #44	; 0x2c
 800bfa8:	af00      	add	r7, sp, #0
 800bfaa:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800bfac:	2300      	movs	r3, #0
 800bfae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d106      	bne.n	800bfc6 <tcp_zero_window_probe+0x22>
 800bfb8:	4b4c      	ldr	r3, [pc, #304]	; (800c0ec <tcp_zero_window_probe+0x148>)
 800bfba:	f640 024f 	movw	r2, #2127	; 0x84f
 800bfbe:	494c      	ldr	r1, [pc, #304]	; (800c0f0 <tcp_zero_window_probe+0x14c>)
 800bfc0:	484c      	ldr	r0, [pc, #304]	; (800c0f4 <tcp_zero_window_probe+0x150>)
 800bfc2:	f002 fcbb 	bl	800e93c <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bfca:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800bfcc:	6a3b      	ldr	r3, [r7, #32]
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	d101      	bne.n	800bfd6 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800bfd2:	2300      	movs	r3, #0
 800bfd4:	e086      	b.n	800c0e4 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800bfdc:	2bff      	cmp	r3, #255	; 0xff
 800bfde:	d007      	beq.n	800bff0 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800bfe6:	3301      	adds	r3, #1
 800bfe8:	b2da      	uxtb	r2, r3
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800bff0:	6a3b      	ldr	r3, [r7, #32]
 800bff2:	68db      	ldr	r3, [r3, #12]
 800bff4:	899b      	ldrh	r3, [r3, #12]
 800bff6:	b29b      	uxth	r3, r3
 800bff8:	4618      	mov	r0, r3
 800bffa:	f7f9 fa2d 	bl	8005458 <lwip_htons>
 800bffe:	4603      	mov	r3, r0
 800c000:	b2db      	uxtb	r3, r3
 800c002:	f003 0301 	and.w	r3, r3, #1
 800c006:	2b00      	cmp	r3, #0
 800c008:	d005      	beq.n	800c016 <tcp_zero_window_probe+0x72>
 800c00a:	6a3b      	ldr	r3, [r7, #32]
 800c00c:	891b      	ldrh	r3, [r3, #8]
 800c00e:	2b00      	cmp	r3, #0
 800c010:	d101      	bne.n	800c016 <tcp_zero_window_probe+0x72>
 800c012:	2301      	movs	r3, #1
 800c014:	e000      	b.n	800c018 <tcp_zero_window_probe+0x74>
 800c016:	2300      	movs	r3, #0
 800c018:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800c01a:	7ffb      	ldrb	r3, [r7, #31]
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	bf0c      	ite	eq
 800c020:	2301      	moveq	r3, #1
 800c022:	2300      	movne	r3, #0
 800c024:	b2db      	uxtb	r3, r3
 800c026:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800c028:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c02c:	b299      	uxth	r1, r3
 800c02e:	6a3b      	ldr	r3, [r7, #32]
 800c030:	68db      	ldr	r3, [r3, #12]
 800c032:	685b      	ldr	r3, [r3, #4]
 800c034:	8bba      	ldrh	r2, [r7, #28]
 800c036:	6878      	ldr	r0, [r7, #4]
 800c038:	f7ff fdf8 	bl	800bc2c <tcp_output_alloc_header>
 800c03c:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800c03e:	69bb      	ldr	r3, [r7, #24]
 800c040:	2b00      	cmp	r3, #0
 800c042:	d102      	bne.n	800c04a <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800c044:	f04f 33ff 	mov.w	r3, #4294967295
 800c048:	e04c      	b.n	800c0e4 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800c04a:	69bb      	ldr	r3, [r7, #24]
 800c04c:	685b      	ldr	r3, [r3, #4]
 800c04e:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800c050:	7ffb      	ldrb	r3, [r7, #31]
 800c052:	2b00      	cmp	r3, #0
 800c054:	d011      	beq.n	800c07a <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800c056:	697b      	ldr	r3, [r7, #20]
 800c058:	899b      	ldrh	r3, [r3, #12]
 800c05a:	b29b      	uxth	r3, r3
 800c05c:	b21b      	sxth	r3, r3
 800c05e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800c062:	b21c      	sxth	r4, r3
 800c064:	2011      	movs	r0, #17
 800c066:	f7f9 f9f7 	bl	8005458 <lwip_htons>
 800c06a:	4603      	mov	r3, r0
 800c06c:	b21b      	sxth	r3, r3
 800c06e:	4323      	orrs	r3, r4
 800c070:	b21b      	sxth	r3, r3
 800c072:	b29a      	uxth	r2, r3
 800c074:	697b      	ldr	r3, [r7, #20]
 800c076:	819a      	strh	r2, [r3, #12]
 800c078:	e010      	b.n	800c09c <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800c07a:	69bb      	ldr	r3, [r7, #24]
 800c07c:	685b      	ldr	r3, [r3, #4]
 800c07e:	3314      	adds	r3, #20
 800c080:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800c082:	6a3b      	ldr	r3, [r7, #32]
 800c084:	6858      	ldr	r0, [r3, #4]
 800c086:	6a3b      	ldr	r3, [r7, #32]
 800c088:	685b      	ldr	r3, [r3, #4]
 800c08a:	891a      	ldrh	r2, [r3, #8]
 800c08c:	6a3b      	ldr	r3, [r7, #32]
 800c08e:	891b      	ldrh	r3, [r3, #8]
 800c090:	1ad3      	subs	r3, r2, r3
 800c092:	b29b      	uxth	r3, r3
 800c094:	2201      	movs	r2, #1
 800c096:	6939      	ldr	r1, [r7, #16]
 800c098:	f7fa fe52 	bl	8006d40 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800c09c:	6a3b      	ldr	r3, [r7, #32]
 800c09e:	68db      	ldr	r3, [r3, #12]
 800c0a0:	685b      	ldr	r3, [r3, #4]
 800c0a2:	4618      	mov	r0, r3
 800c0a4:	f7f9 f9ed 	bl	8005482 <lwip_htonl>
 800c0a8:	4603      	mov	r3, r0
 800c0aa:	3301      	adds	r3, #1
 800c0ac:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c0b2:	68fb      	ldr	r3, [r7, #12]
 800c0b4:	1ad3      	subs	r3, r2, r3
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	da02      	bge.n	800c0c0 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	68fa      	ldr	r2, [r7, #12]
 800c0be:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800c0c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c0c4:	2200      	movs	r2, #0
 800c0c6:	69b9      	ldr	r1, [r7, #24]
 800c0c8:	6878      	ldr	r0, [r7, #4]
 800c0ca:	f7ff fded 	bl	800bca8 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800c0ce:	687a      	ldr	r2, [r7, #4]
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	3304      	adds	r3, #4
 800c0d4:	69b9      	ldr	r1, [r7, #24]
 800c0d6:	6878      	ldr	r0, [r7, #4]
 800c0d8:	f7ff fe26 	bl	800bd28 <tcp_output_control_segment>
 800c0dc:	4603      	mov	r3, r0
 800c0de:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800c0e0:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800c0e4:	4618      	mov	r0, r3
 800c0e6:	372c      	adds	r7, #44	; 0x2c
 800c0e8:	46bd      	mov	sp, r7
 800c0ea:	bd90      	pop	{r4, r7, pc}
 800c0ec:	08010e78 	.word	0x08010e78
 800c0f0:	08011670 	.word	0x08011670
 800c0f4:	08010ecc 	.word	0x08010ecc

0800c0f8 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800c0f8:	b580      	push	{r7, lr}
 800c0fa:	b082      	sub	sp, #8
 800c0fc:	af00      	add	r7, sp, #0
 800c0fe:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800c100:	f7fa ff0c 	bl	8006f1c <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800c104:	4b0a      	ldr	r3, [pc, #40]	; (800c130 <tcpip_tcp_timer+0x38>)
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	2b00      	cmp	r3, #0
 800c10a:	d103      	bne.n	800c114 <tcpip_tcp_timer+0x1c>
 800c10c:	4b09      	ldr	r3, [pc, #36]	; (800c134 <tcpip_tcp_timer+0x3c>)
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	2b00      	cmp	r3, #0
 800c112:	d005      	beq.n	800c120 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800c114:	2200      	movs	r2, #0
 800c116:	4908      	ldr	r1, [pc, #32]	; (800c138 <tcpip_tcp_timer+0x40>)
 800c118:	20fa      	movs	r0, #250	; 0xfa
 800c11a:	f000 f8f1 	bl	800c300 <sys_timeout>
 800c11e:	e002      	b.n	800c126 <tcpip_tcp_timer+0x2e>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800c120:	4b06      	ldr	r3, [pc, #24]	; (800c13c <tcpip_tcp_timer+0x44>)
 800c122:	2200      	movs	r2, #0
 800c124:	601a      	str	r2, [r3, #0]
  }
}
 800c126:	bf00      	nop
 800c128:	3708      	adds	r7, #8
 800c12a:	46bd      	mov	sp, r7
 800c12c:	bd80      	pop	{r7, pc}
 800c12e:	bf00      	nop
 800c130:	20008ae0 	.word	0x20008ae0
 800c134:	20008af0 	.word	0x20008af0
 800c138:	0800c0f9 	.word	0x0800c0f9
 800c13c:	20000100 	.word	0x20000100

0800c140 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800c140:	b580      	push	{r7, lr}
 800c142:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800c144:	4b0a      	ldr	r3, [pc, #40]	; (800c170 <tcp_timer_needed+0x30>)
 800c146:	681b      	ldr	r3, [r3, #0]
 800c148:	2b00      	cmp	r3, #0
 800c14a:	d10f      	bne.n	800c16c <tcp_timer_needed+0x2c>
 800c14c:	4b09      	ldr	r3, [pc, #36]	; (800c174 <tcp_timer_needed+0x34>)
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	2b00      	cmp	r3, #0
 800c152:	d103      	bne.n	800c15c <tcp_timer_needed+0x1c>
 800c154:	4b08      	ldr	r3, [pc, #32]	; (800c178 <tcp_timer_needed+0x38>)
 800c156:	681b      	ldr	r3, [r3, #0]
 800c158:	2b00      	cmp	r3, #0
 800c15a:	d007      	beq.n	800c16c <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800c15c:	4b04      	ldr	r3, [pc, #16]	; (800c170 <tcp_timer_needed+0x30>)
 800c15e:	2201      	movs	r2, #1
 800c160:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800c162:	2200      	movs	r2, #0
 800c164:	4905      	ldr	r1, [pc, #20]	; (800c17c <tcp_timer_needed+0x3c>)
 800c166:	20fa      	movs	r0, #250	; 0xfa
 800c168:	f000 f8ca 	bl	800c300 <sys_timeout>
  }
}
 800c16c:	bf00      	nop
 800c16e:	bd80      	pop	{r7, pc}
 800c170:	20000100 	.word	0x20000100
 800c174:	20008ae0 	.word	0x20008ae0
 800c178:	20008af0 	.word	0x20008af0
 800c17c:	0800c0f9 	.word	0x0800c0f9

0800c180 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800c180:	b580      	push	{r7, lr}
 800c182:	b086      	sub	sp, #24
 800c184:	af00      	add	r7, sp, #0
 800c186:	60f8      	str	r0, [r7, #12]
 800c188:	60b9      	str	r1, [r7, #8]
 800c18a:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800c18c:	2005      	movs	r0, #5
 800c18e:	f7f9 fdb7 	bl	8005d00 <memp_malloc>
 800c192:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800c194:	693b      	ldr	r3, [r7, #16]
 800c196:	2b00      	cmp	r3, #0
 800c198:	d109      	bne.n	800c1ae <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800c19a:	693b      	ldr	r3, [r7, #16]
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	d151      	bne.n	800c244 <sys_timeout_abs+0xc4>
 800c1a0:	4b2a      	ldr	r3, [pc, #168]	; (800c24c <sys_timeout_abs+0xcc>)
 800c1a2:	22be      	movs	r2, #190	; 0xbe
 800c1a4:	492a      	ldr	r1, [pc, #168]	; (800c250 <sys_timeout_abs+0xd0>)
 800c1a6:	482b      	ldr	r0, [pc, #172]	; (800c254 <sys_timeout_abs+0xd4>)
 800c1a8:	f002 fbc8 	bl	800e93c <iprintf>
    return;
 800c1ac:	e04a      	b.n	800c244 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800c1ae:	693b      	ldr	r3, [r7, #16]
 800c1b0:	2200      	movs	r2, #0
 800c1b2:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800c1b4:	693b      	ldr	r3, [r7, #16]
 800c1b6:	68ba      	ldr	r2, [r7, #8]
 800c1b8:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800c1ba:	693b      	ldr	r3, [r7, #16]
 800c1bc:	687a      	ldr	r2, [r7, #4]
 800c1be:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800c1c0:	693b      	ldr	r3, [r7, #16]
 800c1c2:	68fa      	ldr	r2, [r7, #12]
 800c1c4:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800c1c6:	4b24      	ldr	r3, [pc, #144]	; (800c258 <sys_timeout_abs+0xd8>)
 800c1c8:	681b      	ldr	r3, [r3, #0]
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	d103      	bne.n	800c1d6 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800c1ce:	4a22      	ldr	r2, [pc, #136]	; (800c258 <sys_timeout_abs+0xd8>)
 800c1d0:	693b      	ldr	r3, [r7, #16]
 800c1d2:	6013      	str	r3, [r2, #0]
    return;
 800c1d4:	e037      	b.n	800c246 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800c1d6:	693b      	ldr	r3, [r7, #16]
 800c1d8:	685a      	ldr	r2, [r3, #4]
 800c1da:	4b1f      	ldr	r3, [pc, #124]	; (800c258 <sys_timeout_abs+0xd8>)
 800c1dc:	681b      	ldr	r3, [r3, #0]
 800c1de:	685b      	ldr	r3, [r3, #4]
 800c1e0:	1ad3      	subs	r3, r2, r3
 800c1e2:	0fdb      	lsrs	r3, r3, #31
 800c1e4:	f003 0301 	and.w	r3, r3, #1
 800c1e8:	b2db      	uxtb	r3, r3
 800c1ea:	2b00      	cmp	r3, #0
 800c1ec:	d007      	beq.n	800c1fe <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800c1ee:	4b1a      	ldr	r3, [pc, #104]	; (800c258 <sys_timeout_abs+0xd8>)
 800c1f0:	681a      	ldr	r2, [r3, #0]
 800c1f2:	693b      	ldr	r3, [r7, #16]
 800c1f4:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800c1f6:	4a18      	ldr	r2, [pc, #96]	; (800c258 <sys_timeout_abs+0xd8>)
 800c1f8:	693b      	ldr	r3, [r7, #16]
 800c1fa:	6013      	str	r3, [r2, #0]
 800c1fc:	e023      	b.n	800c246 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800c1fe:	4b16      	ldr	r3, [pc, #88]	; (800c258 <sys_timeout_abs+0xd8>)
 800c200:	681b      	ldr	r3, [r3, #0]
 800c202:	617b      	str	r3, [r7, #20]
 800c204:	e01a      	b.n	800c23c <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800c206:	697b      	ldr	r3, [r7, #20]
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	d00b      	beq.n	800c226 <sys_timeout_abs+0xa6>
 800c20e:	693b      	ldr	r3, [r7, #16]
 800c210:	685a      	ldr	r2, [r3, #4]
 800c212:	697b      	ldr	r3, [r7, #20]
 800c214:	681b      	ldr	r3, [r3, #0]
 800c216:	685b      	ldr	r3, [r3, #4]
 800c218:	1ad3      	subs	r3, r2, r3
 800c21a:	0fdb      	lsrs	r3, r3, #31
 800c21c:	f003 0301 	and.w	r3, r3, #1
 800c220:	b2db      	uxtb	r3, r3
 800c222:	2b00      	cmp	r3, #0
 800c224:	d007      	beq.n	800c236 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800c226:	697b      	ldr	r3, [r7, #20]
 800c228:	681a      	ldr	r2, [r3, #0]
 800c22a:	693b      	ldr	r3, [r7, #16]
 800c22c:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800c22e:	697b      	ldr	r3, [r7, #20]
 800c230:	693a      	ldr	r2, [r7, #16]
 800c232:	601a      	str	r2, [r3, #0]
        break;
 800c234:	e007      	b.n	800c246 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800c236:	697b      	ldr	r3, [r7, #20]
 800c238:	681b      	ldr	r3, [r3, #0]
 800c23a:	617b      	str	r3, [r7, #20]
 800c23c:	697b      	ldr	r3, [r7, #20]
 800c23e:	2b00      	cmp	r3, #0
 800c240:	d1e1      	bne.n	800c206 <sys_timeout_abs+0x86>
 800c242:	e000      	b.n	800c246 <sys_timeout_abs+0xc6>
    return;
 800c244:	bf00      	nop
      }
    }
  }
}
 800c246:	3718      	adds	r7, #24
 800c248:	46bd      	mov	sp, r7
 800c24a:	bd80      	pop	{r7, pc}
 800c24c:	08011694 	.word	0x08011694
 800c250:	080116c8 	.word	0x080116c8
 800c254:	08011708 	.word	0x08011708
 800c258:	200000f8 	.word	0x200000f8

0800c25c <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800c25c:	b580      	push	{r7, lr}
 800c25e:	b086      	sub	sp, #24
 800c260:	af00      	add	r7, sp, #0
 800c262:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800c268:	697b      	ldr	r3, [r7, #20]
 800c26a:	685b      	ldr	r3, [r3, #4]
 800c26c:	4798      	blx	r3

  now = sys_now();
 800c26e:	f7f9 f865 	bl	800533c <sys_now>
 800c272:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800c274:	697b      	ldr	r3, [r7, #20]
 800c276:	681a      	ldr	r2, [r3, #0]
 800c278:	4b0f      	ldr	r3, [pc, #60]	; (800c2b8 <lwip_cyclic_timer+0x5c>)
 800c27a:	681b      	ldr	r3, [r3, #0]
 800c27c:	4413      	add	r3, r2
 800c27e:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800c280:	68fa      	ldr	r2, [r7, #12]
 800c282:	693b      	ldr	r3, [r7, #16]
 800c284:	1ad3      	subs	r3, r2, r3
 800c286:	0fdb      	lsrs	r3, r3, #31
 800c288:	f003 0301 	and.w	r3, r3, #1
 800c28c:	b2db      	uxtb	r3, r3
 800c28e:	2b00      	cmp	r3, #0
 800c290:	d009      	beq.n	800c2a6 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800c292:	697b      	ldr	r3, [r7, #20]
 800c294:	681a      	ldr	r2, [r3, #0]
 800c296:	693b      	ldr	r3, [r7, #16]
 800c298:	4413      	add	r3, r2
 800c29a:	687a      	ldr	r2, [r7, #4]
 800c29c:	4907      	ldr	r1, [pc, #28]	; (800c2bc <lwip_cyclic_timer+0x60>)
 800c29e:	4618      	mov	r0, r3
 800c2a0:	f7ff ff6e 	bl	800c180 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800c2a4:	e004      	b.n	800c2b0 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800c2a6:	687a      	ldr	r2, [r7, #4]
 800c2a8:	4904      	ldr	r1, [pc, #16]	; (800c2bc <lwip_cyclic_timer+0x60>)
 800c2aa:	68f8      	ldr	r0, [r7, #12]
 800c2ac:	f7ff ff68 	bl	800c180 <sys_timeout_abs>
}
 800c2b0:	bf00      	nop
 800c2b2:	3718      	adds	r7, #24
 800c2b4:	46bd      	mov	sp, r7
 800c2b6:	bd80      	pop	{r7, pc}
 800c2b8:	200000fc 	.word	0x200000fc
 800c2bc:	0800c25d 	.word	0x0800c25d

0800c2c0 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800c2c0:	b580      	push	{r7, lr}
 800c2c2:	b082      	sub	sp, #8
 800c2c4:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800c2c6:	2301      	movs	r3, #1
 800c2c8:	607b      	str	r3, [r7, #4]
 800c2ca:	e00e      	b.n	800c2ea <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800c2cc:	4a0a      	ldr	r2, [pc, #40]	; (800c2f8 <sys_timeouts_init+0x38>)
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	00db      	lsls	r3, r3, #3
 800c2d8:	4a07      	ldr	r2, [pc, #28]	; (800c2f8 <sys_timeouts_init+0x38>)
 800c2da:	4413      	add	r3, r2
 800c2dc:	461a      	mov	r2, r3
 800c2de:	4907      	ldr	r1, [pc, #28]	; (800c2fc <sys_timeouts_init+0x3c>)
 800c2e0:	f000 f80e 	bl	800c300 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	3301      	adds	r3, #1
 800c2e8:	607b      	str	r3, [r7, #4]
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	2b02      	cmp	r3, #2
 800c2ee:	d9ed      	bls.n	800c2cc <sys_timeouts_init+0xc>
  }
}
 800c2f0:	bf00      	nop
 800c2f2:	3708      	adds	r7, #8
 800c2f4:	46bd      	mov	sp, r7
 800c2f6:	bd80      	pop	{r7, pc}
 800c2f8:	08011f00 	.word	0x08011f00
 800c2fc:	0800c25d 	.word	0x0800c25d

0800c300 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800c300:	b580      	push	{r7, lr}
 800c302:	b086      	sub	sp, #24
 800c304:	af00      	add	r7, sp, #0
 800c306:	60f8      	str	r0, [r7, #12]
 800c308:	60b9      	str	r1, [r7, #8]
 800c30a:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800c30c:	68fb      	ldr	r3, [r7, #12]
 800c30e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c312:	d306      	bcc.n	800c322 <sys_timeout+0x22>
 800c314:	4b0a      	ldr	r3, [pc, #40]	; (800c340 <sys_timeout+0x40>)
 800c316:	f240 1229 	movw	r2, #297	; 0x129
 800c31a:	490a      	ldr	r1, [pc, #40]	; (800c344 <sys_timeout+0x44>)
 800c31c:	480a      	ldr	r0, [pc, #40]	; (800c348 <sys_timeout+0x48>)
 800c31e:	f002 fb0d 	bl	800e93c <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800c322:	f7f9 f80b 	bl	800533c <sys_now>
 800c326:	4602      	mov	r2, r0
 800c328:	68fb      	ldr	r3, [r7, #12]
 800c32a:	4413      	add	r3, r2
 800c32c:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800c32e:	687a      	ldr	r2, [r7, #4]
 800c330:	68b9      	ldr	r1, [r7, #8]
 800c332:	6978      	ldr	r0, [r7, #20]
 800c334:	f7ff ff24 	bl	800c180 <sys_timeout_abs>
#endif
}
 800c338:	bf00      	nop
 800c33a:	3718      	adds	r7, #24
 800c33c:	46bd      	mov	sp, r7
 800c33e:	bd80      	pop	{r7, pc}
 800c340:	08011694 	.word	0x08011694
 800c344:	08011730 	.word	0x08011730
 800c348:	08011708 	.word	0x08011708

0800c34c <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800c34c:	b580      	push	{r7, lr}
 800c34e:	b082      	sub	sp, #8
 800c350:	af00      	add	r7, sp, #0
 800c352:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800c354:	4915      	ldr	r1, [pc, #84]	; (800c3ac <etharp_free_entry+0x60>)
 800c356:	687a      	ldr	r2, [r7, #4]
 800c358:	4613      	mov	r3, r2
 800c35a:	005b      	lsls	r3, r3, #1
 800c35c:	4413      	add	r3, r2
 800c35e:	00db      	lsls	r3, r3, #3
 800c360:	440b      	add	r3, r1
 800c362:	681b      	ldr	r3, [r3, #0]
 800c364:	2b00      	cmp	r3, #0
 800c366:	d013      	beq.n	800c390 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800c368:	4910      	ldr	r1, [pc, #64]	; (800c3ac <etharp_free_entry+0x60>)
 800c36a:	687a      	ldr	r2, [r7, #4]
 800c36c:	4613      	mov	r3, r2
 800c36e:	005b      	lsls	r3, r3, #1
 800c370:	4413      	add	r3, r2
 800c372:	00db      	lsls	r3, r3, #3
 800c374:	440b      	add	r3, r1
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	4618      	mov	r0, r3
 800c37a:	f7fa faf7 	bl	800696c <pbuf_free>
    arp_table[i].q = NULL;
 800c37e:	490b      	ldr	r1, [pc, #44]	; (800c3ac <etharp_free_entry+0x60>)
 800c380:	687a      	ldr	r2, [r7, #4]
 800c382:	4613      	mov	r3, r2
 800c384:	005b      	lsls	r3, r3, #1
 800c386:	4413      	add	r3, r2
 800c388:	00db      	lsls	r3, r3, #3
 800c38a:	440b      	add	r3, r1
 800c38c:	2200      	movs	r2, #0
 800c38e:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800c390:	4906      	ldr	r1, [pc, #24]	; (800c3ac <etharp_free_entry+0x60>)
 800c392:	687a      	ldr	r2, [r7, #4]
 800c394:	4613      	mov	r3, r2
 800c396:	005b      	lsls	r3, r3, #1
 800c398:	4413      	add	r3, r2
 800c39a:	00db      	lsls	r3, r3, #3
 800c39c:	440b      	add	r3, r1
 800c39e:	3314      	adds	r3, #20
 800c3a0:	2200      	movs	r2, #0
 800c3a2:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800c3a4:	bf00      	nop
 800c3a6:	3708      	adds	r7, #8
 800c3a8:	46bd      	mov	sp, r7
 800c3aa:	bd80      	pop	{r7, pc}
 800c3ac:	20000104 	.word	0x20000104

0800c3b0 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800c3b0:	b580      	push	{r7, lr}
 800c3b2:	b082      	sub	sp, #8
 800c3b4:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c3b6:	2300      	movs	r3, #0
 800c3b8:	607b      	str	r3, [r7, #4]
 800c3ba:	e096      	b.n	800c4ea <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800c3bc:	494f      	ldr	r1, [pc, #316]	; (800c4fc <etharp_tmr+0x14c>)
 800c3be:	687a      	ldr	r2, [r7, #4]
 800c3c0:	4613      	mov	r3, r2
 800c3c2:	005b      	lsls	r3, r3, #1
 800c3c4:	4413      	add	r3, r2
 800c3c6:	00db      	lsls	r3, r3, #3
 800c3c8:	440b      	add	r3, r1
 800c3ca:	3314      	adds	r3, #20
 800c3cc:	781b      	ldrb	r3, [r3, #0]
 800c3ce:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800c3d0:	78fb      	ldrb	r3, [r7, #3]
 800c3d2:	2b00      	cmp	r3, #0
 800c3d4:	f000 8086 	beq.w	800c4e4 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800c3d8:	4948      	ldr	r1, [pc, #288]	; (800c4fc <etharp_tmr+0x14c>)
 800c3da:	687a      	ldr	r2, [r7, #4]
 800c3dc:	4613      	mov	r3, r2
 800c3de:	005b      	lsls	r3, r3, #1
 800c3e0:	4413      	add	r3, r2
 800c3e2:	00db      	lsls	r3, r3, #3
 800c3e4:	440b      	add	r3, r1
 800c3e6:	3312      	adds	r3, #18
 800c3e8:	881b      	ldrh	r3, [r3, #0]
 800c3ea:	3301      	adds	r3, #1
 800c3ec:	b298      	uxth	r0, r3
 800c3ee:	4943      	ldr	r1, [pc, #268]	; (800c4fc <etharp_tmr+0x14c>)
 800c3f0:	687a      	ldr	r2, [r7, #4]
 800c3f2:	4613      	mov	r3, r2
 800c3f4:	005b      	lsls	r3, r3, #1
 800c3f6:	4413      	add	r3, r2
 800c3f8:	00db      	lsls	r3, r3, #3
 800c3fa:	440b      	add	r3, r1
 800c3fc:	3312      	adds	r3, #18
 800c3fe:	4602      	mov	r2, r0
 800c400:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800c402:	493e      	ldr	r1, [pc, #248]	; (800c4fc <etharp_tmr+0x14c>)
 800c404:	687a      	ldr	r2, [r7, #4]
 800c406:	4613      	mov	r3, r2
 800c408:	005b      	lsls	r3, r3, #1
 800c40a:	4413      	add	r3, r2
 800c40c:	00db      	lsls	r3, r3, #3
 800c40e:	440b      	add	r3, r1
 800c410:	3312      	adds	r3, #18
 800c412:	881b      	ldrh	r3, [r3, #0]
 800c414:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800c418:	d215      	bcs.n	800c446 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800c41a:	4938      	ldr	r1, [pc, #224]	; (800c4fc <etharp_tmr+0x14c>)
 800c41c:	687a      	ldr	r2, [r7, #4]
 800c41e:	4613      	mov	r3, r2
 800c420:	005b      	lsls	r3, r3, #1
 800c422:	4413      	add	r3, r2
 800c424:	00db      	lsls	r3, r3, #3
 800c426:	440b      	add	r3, r1
 800c428:	3314      	adds	r3, #20
 800c42a:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800c42c:	2b01      	cmp	r3, #1
 800c42e:	d10e      	bne.n	800c44e <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800c430:	4932      	ldr	r1, [pc, #200]	; (800c4fc <etharp_tmr+0x14c>)
 800c432:	687a      	ldr	r2, [r7, #4]
 800c434:	4613      	mov	r3, r2
 800c436:	005b      	lsls	r3, r3, #1
 800c438:	4413      	add	r3, r2
 800c43a:	00db      	lsls	r3, r3, #3
 800c43c:	440b      	add	r3, r1
 800c43e:	3312      	adds	r3, #18
 800c440:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800c442:	2b04      	cmp	r3, #4
 800c444:	d903      	bls.n	800c44e <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800c446:	6878      	ldr	r0, [r7, #4]
 800c448:	f7ff ff80 	bl	800c34c <etharp_free_entry>
 800c44c:	e04a      	b.n	800c4e4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800c44e:	492b      	ldr	r1, [pc, #172]	; (800c4fc <etharp_tmr+0x14c>)
 800c450:	687a      	ldr	r2, [r7, #4]
 800c452:	4613      	mov	r3, r2
 800c454:	005b      	lsls	r3, r3, #1
 800c456:	4413      	add	r3, r2
 800c458:	00db      	lsls	r3, r3, #3
 800c45a:	440b      	add	r3, r1
 800c45c:	3314      	adds	r3, #20
 800c45e:	781b      	ldrb	r3, [r3, #0]
 800c460:	2b03      	cmp	r3, #3
 800c462:	d10a      	bne.n	800c47a <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800c464:	4925      	ldr	r1, [pc, #148]	; (800c4fc <etharp_tmr+0x14c>)
 800c466:	687a      	ldr	r2, [r7, #4]
 800c468:	4613      	mov	r3, r2
 800c46a:	005b      	lsls	r3, r3, #1
 800c46c:	4413      	add	r3, r2
 800c46e:	00db      	lsls	r3, r3, #3
 800c470:	440b      	add	r3, r1
 800c472:	3314      	adds	r3, #20
 800c474:	2204      	movs	r2, #4
 800c476:	701a      	strb	r2, [r3, #0]
 800c478:	e034      	b.n	800c4e4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800c47a:	4920      	ldr	r1, [pc, #128]	; (800c4fc <etharp_tmr+0x14c>)
 800c47c:	687a      	ldr	r2, [r7, #4]
 800c47e:	4613      	mov	r3, r2
 800c480:	005b      	lsls	r3, r3, #1
 800c482:	4413      	add	r3, r2
 800c484:	00db      	lsls	r3, r3, #3
 800c486:	440b      	add	r3, r1
 800c488:	3314      	adds	r3, #20
 800c48a:	781b      	ldrb	r3, [r3, #0]
 800c48c:	2b04      	cmp	r3, #4
 800c48e:	d10a      	bne.n	800c4a6 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800c490:	491a      	ldr	r1, [pc, #104]	; (800c4fc <etharp_tmr+0x14c>)
 800c492:	687a      	ldr	r2, [r7, #4]
 800c494:	4613      	mov	r3, r2
 800c496:	005b      	lsls	r3, r3, #1
 800c498:	4413      	add	r3, r2
 800c49a:	00db      	lsls	r3, r3, #3
 800c49c:	440b      	add	r3, r1
 800c49e:	3314      	adds	r3, #20
 800c4a0:	2202      	movs	r2, #2
 800c4a2:	701a      	strb	r2, [r3, #0]
 800c4a4:	e01e      	b.n	800c4e4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800c4a6:	4915      	ldr	r1, [pc, #84]	; (800c4fc <etharp_tmr+0x14c>)
 800c4a8:	687a      	ldr	r2, [r7, #4]
 800c4aa:	4613      	mov	r3, r2
 800c4ac:	005b      	lsls	r3, r3, #1
 800c4ae:	4413      	add	r3, r2
 800c4b0:	00db      	lsls	r3, r3, #3
 800c4b2:	440b      	add	r3, r1
 800c4b4:	3314      	adds	r3, #20
 800c4b6:	781b      	ldrb	r3, [r3, #0]
 800c4b8:	2b01      	cmp	r3, #1
 800c4ba:	d113      	bne.n	800c4e4 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800c4bc:	490f      	ldr	r1, [pc, #60]	; (800c4fc <etharp_tmr+0x14c>)
 800c4be:	687a      	ldr	r2, [r7, #4]
 800c4c0:	4613      	mov	r3, r2
 800c4c2:	005b      	lsls	r3, r3, #1
 800c4c4:	4413      	add	r3, r2
 800c4c6:	00db      	lsls	r3, r3, #3
 800c4c8:	440b      	add	r3, r1
 800c4ca:	3308      	adds	r3, #8
 800c4cc:	6818      	ldr	r0, [r3, #0]
 800c4ce:	687a      	ldr	r2, [r7, #4]
 800c4d0:	4613      	mov	r3, r2
 800c4d2:	005b      	lsls	r3, r3, #1
 800c4d4:	4413      	add	r3, r2
 800c4d6:	00db      	lsls	r3, r3, #3
 800c4d8:	4a08      	ldr	r2, [pc, #32]	; (800c4fc <etharp_tmr+0x14c>)
 800c4da:	4413      	add	r3, r2
 800c4dc:	3304      	adds	r3, #4
 800c4de:	4619      	mov	r1, r3
 800c4e0:	f000 fe6e 	bl	800d1c0 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	3301      	adds	r3, #1
 800c4e8:	607b      	str	r3, [r7, #4]
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	2b09      	cmp	r3, #9
 800c4ee:	f77f af65 	ble.w	800c3bc <etharp_tmr+0xc>
      }
    }
  }
}
 800c4f2:	bf00      	nop
 800c4f4:	3708      	adds	r7, #8
 800c4f6:	46bd      	mov	sp, r7
 800c4f8:	bd80      	pop	{r7, pc}
 800c4fa:	bf00      	nop
 800c4fc:	20000104 	.word	0x20000104

0800c500 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800c500:	b580      	push	{r7, lr}
 800c502:	b08a      	sub	sp, #40	; 0x28
 800c504:	af00      	add	r7, sp, #0
 800c506:	60f8      	str	r0, [r7, #12]
 800c508:	460b      	mov	r3, r1
 800c50a:	607a      	str	r2, [r7, #4]
 800c50c:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800c50e:	230a      	movs	r3, #10
 800c510:	84fb      	strh	r3, [r7, #38]	; 0x26
 800c512:	230a      	movs	r3, #10
 800c514:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800c516:	230a      	movs	r3, #10
 800c518:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 800c51a:	2300      	movs	r3, #0
 800c51c:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800c51e:	230a      	movs	r3, #10
 800c520:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800c522:	2300      	movs	r3, #0
 800c524:	83bb      	strh	r3, [r7, #28]
 800c526:	2300      	movs	r3, #0
 800c528:	837b      	strh	r3, [r7, #26]
 800c52a:	2300      	movs	r3, #0
 800c52c:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c52e:	2300      	movs	r3, #0
 800c530:	843b      	strh	r3, [r7, #32]
 800c532:	e0ae      	b.n	800c692 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800c534:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c538:	49a6      	ldr	r1, [pc, #664]	; (800c7d4 <etharp_find_entry+0x2d4>)
 800c53a:	4613      	mov	r3, r2
 800c53c:	005b      	lsls	r3, r3, #1
 800c53e:	4413      	add	r3, r2
 800c540:	00db      	lsls	r3, r3, #3
 800c542:	440b      	add	r3, r1
 800c544:	3314      	adds	r3, #20
 800c546:	781b      	ldrb	r3, [r3, #0]
 800c548:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800c54a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800c54e:	2b0a      	cmp	r3, #10
 800c550:	d105      	bne.n	800c55e <etharp_find_entry+0x5e>
 800c552:	7dfb      	ldrb	r3, [r7, #23]
 800c554:	2b00      	cmp	r3, #0
 800c556:	d102      	bne.n	800c55e <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800c558:	8c3b      	ldrh	r3, [r7, #32]
 800c55a:	847b      	strh	r3, [r7, #34]	; 0x22
 800c55c:	e095      	b.n	800c68a <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800c55e:	7dfb      	ldrb	r3, [r7, #23]
 800c560:	2b00      	cmp	r3, #0
 800c562:	f000 8092 	beq.w	800c68a <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800c566:	7dfb      	ldrb	r3, [r7, #23]
 800c568:	2b01      	cmp	r3, #1
 800c56a:	d009      	beq.n	800c580 <etharp_find_entry+0x80>
 800c56c:	7dfb      	ldrb	r3, [r7, #23]
 800c56e:	2b01      	cmp	r3, #1
 800c570:	d806      	bhi.n	800c580 <etharp_find_entry+0x80>
 800c572:	4b99      	ldr	r3, [pc, #612]	; (800c7d8 <etharp_find_entry+0x2d8>)
 800c574:	f44f 7292 	mov.w	r2, #292	; 0x124
 800c578:	4998      	ldr	r1, [pc, #608]	; (800c7dc <etharp_find_entry+0x2dc>)
 800c57a:	4899      	ldr	r0, [pc, #612]	; (800c7e0 <etharp_find_entry+0x2e0>)
 800c57c:	f002 f9de 	bl	800e93c <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800c580:	68fb      	ldr	r3, [r7, #12]
 800c582:	2b00      	cmp	r3, #0
 800c584:	d020      	beq.n	800c5c8 <etharp_find_entry+0xc8>
 800c586:	68fb      	ldr	r3, [r7, #12]
 800c588:	6819      	ldr	r1, [r3, #0]
 800c58a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c58e:	4891      	ldr	r0, [pc, #580]	; (800c7d4 <etharp_find_entry+0x2d4>)
 800c590:	4613      	mov	r3, r2
 800c592:	005b      	lsls	r3, r3, #1
 800c594:	4413      	add	r3, r2
 800c596:	00db      	lsls	r3, r3, #3
 800c598:	4403      	add	r3, r0
 800c59a:	3304      	adds	r3, #4
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	4299      	cmp	r1, r3
 800c5a0:	d112      	bne.n	800c5c8 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	d00c      	beq.n	800c5c2 <etharp_find_entry+0xc2>
 800c5a8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c5ac:	4989      	ldr	r1, [pc, #548]	; (800c7d4 <etharp_find_entry+0x2d4>)
 800c5ae:	4613      	mov	r3, r2
 800c5b0:	005b      	lsls	r3, r3, #1
 800c5b2:	4413      	add	r3, r2
 800c5b4:	00db      	lsls	r3, r3, #3
 800c5b6:	440b      	add	r3, r1
 800c5b8:	3308      	adds	r3, #8
 800c5ba:	681b      	ldr	r3, [r3, #0]
 800c5bc:	687a      	ldr	r2, [r7, #4]
 800c5be:	429a      	cmp	r2, r3
 800c5c0:	d102      	bne.n	800c5c8 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800c5c2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800c5c6:	e100      	b.n	800c7ca <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800c5c8:	7dfb      	ldrb	r3, [r7, #23]
 800c5ca:	2b01      	cmp	r3, #1
 800c5cc:	d140      	bne.n	800c650 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800c5ce:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c5d2:	4980      	ldr	r1, [pc, #512]	; (800c7d4 <etharp_find_entry+0x2d4>)
 800c5d4:	4613      	mov	r3, r2
 800c5d6:	005b      	lsls	r3, r3, #1
 800c5d8:	4413      	add	r3, r2
 800c5da:	00db      	lsls	r3, r3, #3
 800c5dc:	440b      	add	r3, r1
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	d01a      	beq.n	800c61a <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800c5e4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c5e8:	497a      	ldr	r1, [pc, #488]	; (800c7d4 <etharp_find_entry+0x2d4>)
 800c5ea:	4613      	mov	r3, r2
 800c5ec:	005b      	lsls	r3, r3, #1
 800c5ee:	4413      	add	r3, r2
 800c5f0:	00db      	lsls	r3, r3, #3
 800c5f2:	440b      	add	r3, r1
 800c5f4:	3312      	adds	r3, #18
 800c5f6:	881b      	ldrh	r3, [r3, #0]
 800c5f8:	8bba      	ldrh	r2, [r7, #28]
 800c5fa:	429a      	cmp	r2, r3
 800c5fc:	d845      	bhi.n	800c68a <etharp_find_entry+0x18a>
            old_queue = i;
 800c5fe:	8c3b      	ldrh	r3, [r7, #32]
 800c600:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800c602:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c606:	4973      	ldr	r1, [pc, #460]	; (800c7d4 <etharp_find_entry+0x2d4>)
 800c608:	4613      	mov	r3, r2
 800c60a:	005b      	lsls	r3, r3, #1
 800c60c:	4413      	add	r3, r2
 800c60e:	00db      	lsls	r3, r3, #3
 800c610:	440b      	add	r3, r1
 800c612:	3312      	adds	r3, #18
 800c614:	881b      	ldrh	r3, [r3, #0]
 800c616:	83bb      	strh	r3, [r7, #28]
 800c618:	e037      	b.n	800c68a <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800c61a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c61e:	496d      	ldr	r1, [pc, #436]	; (800c7d4 <etharp_find_entry+0x2d4>)
 800c620:	4613      	mov	r3, r2
 800c622:	005b      	lsls	r3, r3, #1
 800c624:	4413      	add	r3, r2
 800c626:	00db      	lsls	r3, r3, #3
 800c628:	440b      	add	r3, r1
 800c62a:	3312      	adds	r3, #18
 800c62c:	881b      	ldrh	r3, [r3, #0]
 800c62e:	8b7a      	ldrh	r2, [r7, #26]
 800c630:	429a      	cmp	r2, r3
 800c632:	d82a      	bhi.n	800c68a <etharp_find_entry+0x18a>
            old_pending = i;
 800c634:	8c3b      	ldrh	r3, [r7, #32]
 800c636:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 800c638:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c63c:	4965      	ldr	r1, [pc, #404]	; (800c7d4 <etharp_find_entry+0x2d4>)
 800c63e:	4613      	mov	r3, r2
 800c640:	005b      	lsls	r3, r3, #1
 800c642:	4413      	add	r3, r2
 800c644:	00db      	lsls	r3, r3, #3
 800c646:	440b      	add	r3, r1
 800c648:	3312      	adds	r3, #18
 800c64a:	881b      	ldrh	r3, [r3, #0]
 800c64c:	837b      	strh	r3, [r7, #26]
 800c64e:	e01c      	b.n	800c68a <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800c650:	7dfb      	ldrb	r3, [r7, #23]
 800c652:	2b01      	cmp	r3, #1
 800c654:	d919      	bls.n	800c68a <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800c656:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c65a:	495e      	ldr	r1, [pc, #376]	; (800c7d4 <etharp_find_entry+0x2d4>)
 800c65c:	4613      	mov	r3, r2
 800c65e:	005b      	lsls	r3, r3, #1
 800c660:	4413      	add	r3, r2
 800c662:	00db      	lsls	r3, r3, #3
 800c664:	440b      	add	r3, r1
 800c666:	3312      	adds	r3, #18
 800c668:	881b      	ldrh	r3, [r3, #0]
 800c66a:	8b3a      	ldrh	r2, [r7, #24]
 800c66c:	429a      	cmp	r2, r3
 800c66e:	d80c      	bhi.n	800c68a <etharp_find_entry+0x18a>
            old_stable = i;
 800c670:	8c3b      	ldrh	r3, [r7, #32]
 800c672:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 800c674:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c678:	4956      	ldr	r1, [pc, #344]	; (800c7d4 <etharp_find_entry+0x2d4>)
 800c67a:	4613      	mov	r3, r2
 800c67c:	005b      	lsls	r3, r3, #1
 800c67e:	4413      	add	r3, r2
 800c680:	00db      	lsls	r3, r3, #3
 800c682:	440b      	add	r3, r1
 800c684:	3312      	adds	r3, #18
 800c686:	881b      	ldrh	r3, [r3, #0]
 800c688:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c68a:	8c3b      	ldrh	r3, [r7, #32]
 800c68c:	3301      	adds	r3, #1
 800c68e:	b29b      	uxth	r3, r3
 800c690:	843b      	strh	r3, [r7, #32]
 800c692:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800c696:	2b09      	cmp	r3, #9
 800c698:	f77f af4c 	ble.w	800c534 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800c69c:	7afb      	ldrb	r3, [r7, #11]
 800c69e:	f003 0302 	and.w	r3, r3, #2
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	d108      	bne.n	800c6b8 <etharp_find_entry+0x1b8>
 800c6a6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800c6aa:	2b0a      	cmp	r3, #10
 800c6ac:	d107      	bne.n	800c6be <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800c6ae:	7afb      	ldrb	r3, [r7, #11]
 800c6b0:	f003 0301 	and.w	r3, r3, #1
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	d102      	bne.n	800c6be <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800c6b8:	f04f 33ff 	mov.w	r3, #4294967295
 800c6bc:	e085      	b.n	800c7ca <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800c6be:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800c6c2:	2b09      	cmp	r3, #9
 800c6c4:	dc02      	bgt.n	800c6cc <etharp_find_entry+0x1cc>
    i = empty;
 800c6c6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c6c8:	843b      	strh	r3, [r7, #32]
 800c6ca:	e039      	b.n	800c740 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800c6cc:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800c6d0:	2b09      	cmp	r3, #9
 800c6d2:	dc14      	bgt.n	800c6fe <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800c6d4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c6d6:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800c6d8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c6dc:	493d      	ldr	r1, [pc, #244]	; (800c7d4 <etharp_find_entry+0x2d4>)
 800c6de:	4613      	mov	r3, r2
 800c6e0:	005b      	lsls	r3, r3, #1
 800c6e2:	4413      	add	r3, r2
 800c6e4:	00db      	lsls	r3, r3, #3
 800c6e6:	440b      	add	r3, r1
 800c6e8:	681b      	ldr	r3, [r3, #0]
 800c6ea:	2b00      	cmp	r3, #0
 800c6ec:	d018      	beq.n	800c720 <etharp_find_entry+0x220>
 800c6ee:	4b3a      	ldr	r3, [pc, #232]	; (800c7d8 <etharp_find_entry+0x2d8>)
 800c6f0:	f240 126d 	movw	r2, #365	; 0x16d
 800c6f4:	493b      	ldr	r1, [pc, #236]	; (800c7e4 <etharp_find_entry+0x2e4>)
 800c6f6:	483a      	ldr	r0, [pc, #232]	; (800c7e0 <etharp_find_entry+0x2e0>)
 800c6f8:	f002 f920 	bl	800e93c <iprintf>
 800c6fc:	e010      	b.n	800c720 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800c6fe:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800c702:	2b09      	cmp	r3, #9
 800c704:	dc02      	bgt.n	800c70c <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800c706:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c708:	843b      	strh	r3, [r7, #32]
 800c70a:	e009      	b.n	800c720 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800c70c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800c710:	2b09      	cmp	r3, #9
 800c712:	dc02      	bgt.n	800c71a <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800c714:	8bfb      	ldrh	r3, [r7, #30]
 800c716:	843b      	strh	r3, [r7, #32]
 800c718:	e002      	b.n	800c720 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800c71a:	f04f 33ff 	mov.w	r3, #4294967295
 800c71e:	e054      	b.n	800c7ca <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800c720:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800c724:	2b09      	cmp	r3, #9
 800c726:	dd06      	ble.n	800c736 <etharp_find_entry+0x236>
 800c728:	4b2b      	ldr	r3, [pc, #172]	; (800c7d8 <etharp_find_entry+0x2d8>)
 800c72a:	f240 127f 	movw	r2, #383	; 0x17f
 800c72e:	492e      	ldr	r1, [pc, #184]	; (800c7e8 <etharp_find_entry+0x2e8>)
 800c730:	482b      	ldr	r0, [pc, #172]	; (800c7e0 <etharp_find_entry+0x2e0>)
 800c732:	f002 f903 	bl	800e93c <iprintf>
    etharp_free_entry(i);
 800c736:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800c73a:	4618      	mov	r0, r3
 800c73c:	f7ff fe06 	bl	800c34c <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800c740:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800c744:	2b09      	cmp	r3, #9
 800c746:	dd06      	ble.n	800c756 <etharp_find_entry+0x256>
 800c748:	4b23      	ldr	r3, [pc, #140]	; (800c7d8 <etharp_find_entry+0x2d8>)
 800c74a:	f240 1283 	movw	r2, #387	; 0x183
 800c74e:	4926      	ldr	r1, [pc, #152]	; (800c7e8 <etharp_find_entry+0x2e8>)
 800c750:	4823      	ldr	r0, [pc, #140]	; (800c7e0 <etharp_find_entry+0x2e0>)
 800c752:	f002 f8f3 	bl	800e93c <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800c756:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c75a:	491e      	ldr	r1, [pc, #120]	; (800c7d4 <etharp_find_entry+0x2d4>)
 800c75c:	4613      	mov	r3, r2
 800c75e:	005b      	lsls	r3, r3, #1
 800c760:	4413      	add	r3, r2
 800c762:	00db      	lsls	r3, r3, #3
 800c764:	440b      	add	r3, r1
 800c766:	3314      	adds	r3, #20
 800c768:	781b      	ldrb	r3, [r3, #0]
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	d006      	beq.n	800c77c <etharp_find_entry+0x27c>
 800c76e:	4b1a      	ldr	r3, [pc, #104]	; (800c7d8 <etharp_find_entry+0x2d8>)
 800c770:	f240 1285 	movw	r2, #389	; 0x185
 800c774:	491d      	ldr	r1, [pc, #116]	; (800c7ec <etharp_find_entry+0x2ec>)
 800c776:	481a      	ldr	r0, [pc, #104]	; (800c7e0 <etharp_find_entry+0x2e0>)
 800c778:	f002 f8e0 	bl	800e93c <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800c77c:	68fb      	ldr	r3, [r7, #12]
 800c77e:	2b00      	cmp	r3, #0
 800c780:	d00b      	beq.n	800c79a <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800c782:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c786:	68fb      	ldr	r3, [r7, #12]
 800c788:	6819      	ldr	r1, [r3, #0]
 800c78a:	4812      	ldr	r0, [pc, #72]	; (800c7d4 <etharp_find_entry+0x2d4>)
 800c78c:	4613      	mov	r3, r2
 800c78e:	005b      	lsls	r3, r3, #1
 800c790:	4413      	add	r3, r2
 800c792:	00db      	lsls	r3, r3, #3
 800c794:	4403      	add	r3, r0
 800c796:	3304      	adds	r3, #4
 800c798:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800c79a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c79e:	490d      	ldr	r1, [pc, #52]	; (800c7d4 <etharp_find_entry+0x2d4>)
 800c7a0:	4613      	mov	r3, r2
 800c7a2:	005b      	lsls	r3, r3, #1
 800c7a4:	4413      	add	r3, r2
 800c7a6:	00db      	lsls	r3, r3, #3
 800c7a8:	440b      	add	r3, r1
 800c7aa:	3312      	adds	r3, #18
 800c7ac:	2200      	movs	r2, #0
 800c7ae:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800c7b0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c7b4:	4907      	ldr	r1, [pc, #28]	; (800c7d4 <etharp_find_entry+0x2d4>)
 800c7b6:	4613      	mov	r3, r2
 800c7b8:	005b      	lsls	r3, r3, #1
 800c7ba:	4413      	add	r3, r2
 800c7bc:	00db      	lsls	r3, r3, #3
 800c7be:	440b      	add	r3, r1
 800c7c0:	3308      	adds	r3, #8
 800c7c2:	687a      	ldr	r2, [r7, #4]
 800c7c4:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800c7c6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 800c7ca:	4618      	mov	r0, r3
 800c7cc:	3728      	adds	r7, #40	; 0x28
 800c7ce:	46bd      	mov	sp, r7
 800c7d0:	bd80      	pop	{r7, pc}
 800c7d2:	bf00      	nop
 800c7d4:	20000104 	.word	0x20000104
 800c7d8:	0801177c 	.word	0x0801177c
 800c7dc:	080117b4 	.word	0x080117b4
 800c7e0:	080117f4 	.word	0x080117f4
 800c7e4:	0801181c 	.word	0x0801181c
 800c7e8:	08011834 	.word	0x08011834
 800c7ec:	08011848 	.word	0x08011848

0800c7f0 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800c7f0:	b580      	push	{r7, lr}
 800c7f2:	b088      	sub	sp, #32
 800c7f4:	af02      	add	r7, sp, #8
 800c7f6:	60f8      	str	r0, [r7, #12]
 800c7f8:	60b9      	str	r1, [r7, #8]
 800c7fa:	607a      	str	r2, [r7, #4]
 800c7fc:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800c7fe:	68fb      	ldr	r3, [r7, #12]
 800c800:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800c804:	2b06      	cmp	r3, #6
 800c806:	d006      	beq.n	800c816 <etharp_update_arp_entry+0x26>
 800c808:	4b48      	ldr	r3, [pc, #288]	; (800c92c <etharp_update_arp_entry+0x13c>)
 800c80a:	f240 12a9 	movw	r2, #425	; 0x1a9
 800c80e:	4948      	ldr	r1, [pc, #288]	; (800c930 <etharp_update_arp_entry+0x140>)
 800c810:	4848      	ldr	r0, [pc, #288]	; (800c934 <etharp_update_arp_entry+0x144>)
 800c812:	f002 f893 	bl	800e93c <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800c816:	68bb      	ldr	r3, [r7, #8]
 800c818:	2b00      	cmp	r3, #0
 800c81a:	d012      	beq.n	800c842 <etharp_update_arp_entry+0x52>
 800c81c:	68bb      	ldr	r3, [r7, #8]
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	2b00      	cmp	r3, #0
 800c822:	d00e      	beq.n	800c842 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800c824:	68bb      	ldr	r3, [r7, #8]
 800c826:	681b      	ldr	r3, [r3, #0]
 800c828:	68f9      	ldr	r1, [r7, #12]
 800c82a:	4618      	mov	r0, r3
 800c82c:	f001 f8f4 	bl	800da18 <ip4_addr_isbroadcast_u32>
 800c830:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800c832:	2b00      	cmp	r3, #0
 800c834:	d105      	bne.n	800c842 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800c836:	68bb      	ldr	r3, [r7, #8]
 800c838:	681b      	ldr	r3, [r3, #0]
 800c83a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800c83e:	2be0      	cmp	r3, #224	; 0xe0
 800c840:	d102      	bne.n	800c848 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800c842:	f06f 030f 	mvn.w	r3, #15
 800c846:	e06c      	b.n	800c922 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800c848:	78fb      	ldrb	r3, [r7, #3]
 800c84a:	68fa      	ldr	r2, [r7, #12]
 800c84c:	4619      	mov	r1, r3
 800c84e:	68b8      	ldr	r0, [r7, #8]
 800c850:	f7ff fe56 	bl	800c500 <etharp_find_entry>
 800c854:	4603      	mov	r3, r0
 800c856:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800c858:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	da02      	bge.n	800c866 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800c860:	8afb      	ldrh	r3, [r7, #22]
 800c862:	b25b      	sxtb	r3, r3
 800c864:	e05d      	b.n	800c922 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800c866:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c86a:	4933      	ldr	r1, [pc, #204]	; (800c938 <etharp_update_arp_entry+0x148>)
 800c86c:	4613      	mov	r3, r2
 800c86e:	005b      	lsls	r3, r3, #1
 800c870:	4413      	add	r3, r2
 800c872:	00db      	lsls	r3, r3, #3
 800c874:	440b      	add	r3, r1
 800c876:	3314      	adds	r3, #20
 800c878:	2202      	movs	r2, #2
 800c87a:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800c87c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c880:	492d      	ldr	r1, [pc, #180]	; (800c938 <etharp_update_arp_entry+0x148>)
 800c882:	4613      	mov	r3, r2
 800c884:	005b      	lsls	r3, r3, #1
 800c886:	4413      	add	r3, r2
 800c888:	00db      	lsls	r3, r3, #3
 800c88a:	440b      	add	r3, r1
 800c88c:	3308      	adds	r3, #8
 800c88e:	68fa      	ldr	r2, [r7, #12]
 800c890:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800c892:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c896:	4613      	mov	r3, r2
 800c898:	005b      	lsls	r3, r3, #1
 800c89a:	4413      	add	r3, r2
 800c89c:	00db      	lsls	r3, r3, #3
 800c89e:	3308      	adds	r3, #8
 800c8a0:	4a25      	ldr	r2, [pc, #148]	; (800c938 <etharp_update_arp_entry+0x148>)
 800c8a2:	4413      	add	r3, r2
 800c8a4:	3304      	adds	r3, #4
 800c8a6:	2206      	movs	r2, #6
 800c8a8:	6879      	ldr	r1, [r7, #4]
 800c8aa:	4618      	mov	r0, r3
 800c8ac:	f002 f833 	bl	800e916 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800c8b0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c8b4:	4920      	ldr	r1, [pc, #128]	; (800c938 <etharp_update_arp_entry+0x148>)
 800c8b6:	4613      	mov	r3, r2
 800c8b8:	005b      	lsls	r3, r3, #1
 800c8ba:	4413      	add	r3, r2
 800c8bc:	00db      	lsls	r3, r3, #3
 800c8be:	440b      	add	r3, r1
 800c8c0:	3312      	adds	r3, #18
 800c8c2:	2200      	movs	r2, #0
 800c8c4:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800c8c6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c8ca:	491b      	ldr	r1, [pc, #108]	; (800c938 <etharp_update_arp_entry+0x148>)
 800c8cc:	4613      	mov	r3, r2
 800c8ce:	005b      	lsls	r3, r3, #1
 800c8d0:	4413      	add	r3, r2
 800c8d2:	00db      	lsls	r3, r3, #3
 800c8d4:	440b      	add	r3, r1
 800c8d6:	681b      	ldr	r3, [r3, #0]
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	d021      	beq.n	800c920 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800c8dc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c8e0:	4915      	ldr	r1, [pc, #84]	; (800c938 <etharp_update_arp_entry+0x148>)
 800c8e2:	4613      	mov	r3, r2
 800c8e4:	005b      	lsls	r3, r3, #1
 800c8e6:	4413      	add	r3, r2
 800c8e8:	00db      	lsls	r3, r3, #3
 800c8ea:	440b      	add	r3, r1
 800c8ec:	681b      	ldr	r3, [r3, #0]
 800c8ee:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800c8f0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c8f4:	4910      	ldr	r1, [pc, #64]	; (800c938 <etharp_update_arp_entry+0x148>)
 800c8f6:	4613      	mov	r3, r2
 800c8f8:	005b      	lsls	r3, r3, #1
 800c8fa:	4413      	add	r3, r2
 800c8fc:	00db      	lsls	r3, r3, #3
 800c8fe:	440b      	add	r3, r1
 800c900:	2200      	movs	r2, #0
 800c902:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800c904:	68fb      	ldr	r3, [r7, #12]
 800c906:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800c90a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c90e:	9300      	str	r3, [sp, #0]
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	6939      	ldr	r1, [r7, #16]
 800c914:	68f8      	ldr	r0, [r7, #12]
 800c916:	f001 ff83 	bl	800e820 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800c91a:	6938      	ldr	r0, [r7, #16]
 800c91c:	f7fa f826 	bl	800696c <pbuf_free>
  }
  return ERR_OK;
 800c920:	2300      	movs	r3, #0
}
 800c922:	4618      	mov	r0, r3
 800c924:	3718      	adds	r7, #24
 800c926:	46bd      	mov	sp, r7
 800c928:	bd80      	pop	{r7, pc}
 800c92a:	bf00      	nop
 800c92c:	0801177c 	.word	0x0801177c
 800c930:	08011874 	.word	0x08011874
 800c934:	080117f4 	.word	0x080117f4
 800c938:	20000104 	.word	0x20000104

0800c93c <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800c93c:	b580      	push	{r7, lr}
 800c93e:	b084      	sub	sp, #16
 800c940:	af00      	add	r7, sp, #0
 800c942:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c944:	2300      	movs	r3, #0
 800c946:	60fb      	str	r3, [r7, #12]
 800c948:	e01e      	b.n	800c988 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800c94a:	4913      	ldr	r1, [pc, #76]	; (800c998 <etharp_cleanup_netif+0x5c>)
 800c94c:	68fa      	ldr	r2, [r7, #12]
 800c94e:	4613      	mov	r3, r2
 800c950:	005b      	lsls	r3, r3, #1
 800c952:	4413      	add	r3, r2
 800c954:	00db      	lsls	r3, r3, #3
 800c956:	440b      	add	r3, r1
 800c958:	3314      	adds	r3, #20
 800c95a:	781b      	ldrb	r3, [r3, #0]
 800c95c:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800c95e:	7afb      	ldrb	r3, [r7, #11]
 800c960:	2b00      	cmp	r3, #0
 800c962:	d00e      	beq.n	800c982 <etharp_cleanup_netif+0x46>
 800c964:	490c      	ldr	r1, [pc, #48]	; (800c998 <etharp_cleanup_netif+0x5c>)
 800c966:	68fa      	ldr	r2, [r7, #12]
 800c968:	4613      	mov	r3, r2
 800c96a:	005b      	lsls	r3, r3, #1
 800c96c:	4413      	add	r3, r2
 800c96e:	00db      	lsls	r3, r3, #3
 800c970:	440b      	add	r3, r1
 800c972:	3308      	adds	r3, #8
 800c974:	681b      	ldr	r3, [r3, #0]
 800c976:	687a      	ldr	r2, [r7, #4]
 800c978:	429a      	cmp	r2, r3
 800c97a:	d102      	bne.n	800c982 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 800c97c:	68f8      	ldr	r0, [r7, #12]
 800c97e:	f7ff fce5 	bl	800c34c <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c982:	68fb      	ldr	r3, [r7, #12]
 800c984:	3301      	adds	r3, #1
 800c986:	60fb      	str	r3, [r7, #12]
 800c988:	68fb      	ldr	r3, [r7, #12]
 800c98a:	2b09      	cmp	r3, #9
 800c98c:	dddd      	ble.n	800c94a <etharp_cleanup_netif+0xe>
    }
  }
}
 800c98e:	bf00      	nop
 800c990:	3710      	adds	r7, #16
 800c992:	46bd      	mov	sp, r7
 800c994:	bd80      	pop	{r7, pc}
 800c996:	bf00      	nop
 800c998:	20000104 	.word	0x20000104

0800c99c <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800c99c:	b5b0      	push	{r4, r5, r7, lr}
 800c99e:	b08a      	sub	sp, #40	; 0x28
 800c9a0:	af04      	add	r7, sp, #16
 800c9a2:	6078      	str	r0, [r7, #4]
 800c9a4:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800c9a6:	683b      	ldr	r3, [r7, #0]
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	d107      	bne.n	800c9bc <etharp_input+0x20>
 800c9ac:	4b3d      	ldr	r3, [pc, #244]	; (800caa4 <etharp_input+0x108>)
 800c9ae:	f240 228a 	movw	r2, #650	; 0x28a
 800c9b2:	493d      	ldr	r1, [pc, #244]	; (800caa8 <etharp_input+0x10c>)
 800c9b4:	483d      	ldr	r0, [pc, #244]	; (800caac <etharp_input+0x110>)
 800c9b6:	f001 ffc1 	bl	800e93c <iprintf>
 800c9ba:	e06f      	b.n	800ca9c <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	685b      	ldr	r3, [r3, #4]
 800c9c0:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800c9c2:	693b      	ldr	r3, [r7, #16]
 800c9c4:	881b      	ldrh	r3, [r3, #0]
 800c9c6:	b29b      	uxth	r3, r3
 800c9c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c9cc:	d10c      	bne.n	800c9e8 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800c9ce:	693b      	ldr	r3, [r7, #16]
 800c9d0:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800c9d2:	2b06      	cmp	r3, #6
 800c9d4:	d108      	bne.n	800c9e8 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800c9d6:	693b      	ldr	r3, [r7, #16]
 800c9d8:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800c9da:	2b04      	cmp	r3, #4
 800c9dc:	d104      	bne.n	800c9e8 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800c9de:	693b      	ldr	r3, [r7, #16]
 800c9e0:	885b      	ldrh	r3, [r3, #2]
 800c9e2:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800c9e4:	2b08      	cmp	r3, #8
 800c9e6:	d003      	beq.n	800c9f0 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800c9e8:	6878      	ldr	r0, [r7, #4]
 800c9ea:	f7f9 ffbf 	bl	800696c <pbuf_free>
    return;
 800c9ee:	e055      	b.n	800ca9c <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800c9f0:	693b      	ldr	r3, [r7, #16]
 800c9f2:	330e      	adds	r3, #14
 800c9f4:	681b      	ldr	r3, [r3, #0]
 800c9f6:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800c9f8:	693b      	ldr	r3, [r7, #16]
 800c9fa:	3318      	adds	r3, #24
 800c9fc:	681b      	ldr	r3, [r3, #0]
 800c9fe:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800ca00:	683b      	ldr	r3, [r7, #0]
 800ca02:	3304      	adds	r3, #4
 800ca04:	681b      	ldr	r3, [r3, #0]
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	d102      	bne.n	800ca10 <etharp_input+0x74>
    for_us = 0;
 800ca0a:	2300      	movs	r3, #0
 800ca0c:	75fb      	strb	r3, [r7, #23]
 800ca0e:	e009      	b.n	800ca24 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800ca10:	68ba      	ldr	r2, [r7, #8]
 800ca12:	683b      	ldr	r3, [r7, #0]
 800ca14:	3304      	adds	r3, #4
 800ca16:	681b      	ldr	r3, [r3, #0]
 800ca18:	429a      	cmp	r2, r3
 800ca1a:	bf0c      	ite	eq
 800ca1c:	2301      	moveq	r3, #1
 800ca1e:	2300      	movne	r3, #0
 800ca20:	b2db      	uxtb	r3, r3
 800ca22:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800ca24:	693b      	ldr	r3, [r7, #16]
 800ca26:	f103 0208 	add.w	r2, r3, #8
 800ca2a:	7dfb      	ldrb	r3, [r7, #23]
 800ca2c:	2b00      	cmp	r3, #0
 800ca2e:	d001      	beq.n	800ca34 <etharp_input+0x98>
 800ca30:	2301      	movs	r3, #1
 800ca32:	e000      	b.n	800ca36 <etharp_input+0x9a>
 800ca34:	2302      	movs	r3, #2
 800ca36:	f107 010c 	add.w	r1, r7, #12
 800ca3a:	6838      	ldr	r0, [r7, #0]
 800ca3c:	f7ff fed8 	bl	800c7f0 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800ca40:	693b      	ldr	r3, [r7, #16]
 800ca42:	88db      	ldrh	r3, [r3, #6]
 800ca44:	b29b      	uxth	r3, r3
 800ca46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ca4a:	d003      	beq.n	800ca54 <etharp_input+0xb8>
 800ca4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ca50:	d01e      	beq.n	800ca90 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800ca52:	e020      	b.n	800ca96 <etharp_input+0xfa>
      if (for_us) {
 800ca54:	7dfb      	ldrb	r3, [r7, #23]
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	d01c      	beq.n	800ca94 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800ca5a:	683b      	ldr	r3, [r7, #0]
 800ca5c:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800ca60:	693b      	ldr	r3, [r7, #16]
 800ca62:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800ca66:	683b      	ldr	r3, [r7, #0]
 800ca68:	f103 0526 	add.w	r5, r3, #38	; 0x26
 800ca6c:	683b      	ldr	r3, [r7, #0]
 800ca6e:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 800ca70:	693a      	ldr	r2, [r7, #16]
 800ca72:	3208      	adds	r2, #8
        etharp_raw(netif,
 800ca74:	2102      	movs	r1, #2
 800ca76:	9103      	str	r1, [sp, #12]
 800ca78:	f107 010c 	add.w	r1, r7, #12
 800ca7c:	9102      	str	r1, [sp, #8]
 800ca7e:	9201      	str	r2, [sp, #4]
 800ca80:	9300      	str	r3, [sp, #0]
 800ca82:	462b      	mov	r3, r5
 800ca84:	4622      	mov	r2, r4
 800ca86:	4601      	mov	r1, r0
 800ca88:	6838      	ldr	r0, [r7, #0]
 800ca8a:	f000 faeb 	bl	800d064 <etharp_raw>
      break;
 800ca8e:	e001      	b.n	800ca94 <etharp_input+0xf8>
      break;
 800ca90:	bf00      	nop
 800ca92:	e000      	b.n	800ca96 <etharp_input+0xfa>
      break;
 800ca94:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800ca96:	6878      	ldr	r0, [r7, #4]
 800ca98:	f7f9 ff68 	bl	800696c <pbuf_free>
}
 800ca9c:	3718      	adds	r7, #24
 800ca9e:	46bd      	mov	sp, r7
 800caa0:	bdb0      	pop	{r4, r5, r7, pc}
 800caa2:	bf00      	nop
 800caa4:	0801177c 	.word	0x0801177c
 800caa8:	080118cc 	.word	0x080118cc
 800caac:	080117f4 	.word	0x080117f4

0800cab0 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 800cab0:	b580      	push	{r7, lr}
 800cab2:	b086      	sub	sp, #24
 800cab4:	af02      	add	r7, sp, #8
 800cab6:	60f8      	str	r0, [r7, #12]
 800cab8:	60b9      	str	r1, [r7, #8]
 800caba:	4613      	mov	r3, r2
 800cabc:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800cabe:	79fa      	ldrb	r2, [r7, #7]
 800cac0:	4944      	ldr	r1, [pc, #272]	; (800cbd4 <etharp_output_to_arp_index+0x124>)
 800cac2:	4613      	mov	r3, r2
 800cac4:	005b      	lsls	r3, r3, #1
 800cac6:	4413      	add	r3, r2
 800cac8:	00db      	lsls	r3, r3, #3
 800caca:	440b      	add	r3, r1
 800cacc:	3314      	adds	r3, #20
 800cace:	781b      	ldrb	r3, [r3, #0]
 800cad0:	2b01      	cmp	r3, #1
 800cad2:	d806      	bhi.n	800cae2 <etharp_output_to_arp_index+0x32>
 800cad4:	4b40      	ldr	r3, [pc, #256]	; (800cbd8 <etharp_output_to_arp_index+0x128>)
 800cad6:	f240 22ef 	movw	r2, #751	; 0x2ef
 800cada:	4940      	ldr	r1, [pc, #256]	; (800cbdc <etharp_output_to_arp_index+0x12c>)
 800cadc:	4840      	ldr	r0, [pc, #256]	; (800cbe0 <etharp_output_to_arp_index+0x130>)
 800cade:	f001 ff2d 	bl	800e93c <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800cae2:	79fa      	ldrb	r2, [r7, #7]
 800cae4:	493b      	ldr	r1, [pc, #236]	; (800cbd4 <etharp_output_to_arp_index+0x124>)
 800cae6:	4613      	mov	r3, r2
 800cae8:	005b      	lsls	r3, r3, #1
 800caea:	4413      	add	r3, r2
 800caec:	00db      	lsls	r3, r3, #3
 800caee:	440b      	add	r3, r1
 800caf0:	3314      	adds	r3, #20
 800caf2:	781b      	ldrb	r3, [r3, #0]
 800caf4:	2b02      	cmp	r3, #2
 800caf6:	d153      	bne.n	800cba0 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800caf8:	79fa      	ldrb	r2, [r7, #7]
 800cafa:	4936      	ldr	r1, [pc, #216]	; (800cbd4 <etharp_output_to_arp_index+0x124>)
 800cafc:	4613      	mov	r3, r2
 800cafe:	005b      	lsls	r3, r3, #1
 800cb00:	4413      	add	r3, r2
 800cb02:	00db      	lsls	r3, r3, #3
 800cb04:	440b      	add	r3, r1
 800cb06:	3312      	adds	r3, #18
 800cb08:	881b      	ldrh	r3, [r3, #0]
 800cb0a:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800cb0e:	d919      	bls.n	800cb44 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800cb10:	79fa      	ldrb	r2, [r7, #7]
 800cb12:	4613      	mov	r3, r2
 800cb14:	005b      	lsls	r3, r3, #1
 800cb16:	4413      	add	r3, r2
 800cb18:	00db      	lsls	r3, r3, #3
 800cb1a:	4a2e      	ldr	r2, [pc, #184]	; (800cbd4 <etharp_output_to_arp_index+0x124>)
 800cb1c:	4413      	add	r3, r2
 800cb1e:	3304      	adds	r3, #4
 800cb20:	4619      	mov	r1, r3
 800cb22:	68f8      	ldr	r0, [r7, #12]
 800cb24:	f000 fb4c 	bl	800d1c0 <etharp_request>
 800cb28:	4603      	mov	r3, r0
 800cb2a:	2b00      	cmp	r3, #0
 800cb2c:	d138      	bne.n	800cba0 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800cb2e:	79fa      	ldrb	r2, [r7, #7]
 800cb30:	4928      	ldr	r1, [pc, #160]	; (800cbd4 <etharp_output_to_arp_index+0x124>)
 800cb32:	4613      	mov	r3, r2
 800cb34:	005b      	lsls	r3, r3, #1
 800cb36:	4413      	add	r3, r2
 800cb38:	00db      	lsls	r3, r3, #3
 800cb3a:	440b      	add	r3, r1
 800cb3c:	3314      	adds	r3, #20
 800cb3e:	2203      	movs	r2, #3
 800cb40:	701a      	strb	r2, [r3, #0]
 800cb42:	e02d      	b.n	800cba0 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800cb44:	79fa      	ldrb	r2, [r7, #7]
 800cb46:	4923      	ldr	r1, [pc, #140]	; (800cbd4 <etharp_output_to_arp_index+0x124>)
 800cb48:	4613      	mov	r3, r2
 800cb4a:	005b      	lsls	r3, r3, #1
 800cb4c:	4413      	add	r3, r2
 800cb4e:	00db      	lsls	r3, r3, #3
 800cb50:	440b      	add	r3, r1
 800cb52:	3312      	adds	r3, #18
 800cb54:	881b      	ldrh	r3, [r3, #0]
 800cb56:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800cb5a:	d321      	bcc.n	800cba0 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800cb5c:	79fa      	ldrb	r2, [r7, #7]
 800cb5e:	4613      	mov	r3, r2
 800cb60:	005b      	lsls	r3, r3, #1
 800cb62:	4413      	add	r3, r2
 800cb64:	00db      	lsls	r3, r3, #3
 800cb66:	4a1b      	ldr	r2, [pc, #108]	; (800cbd4 <etharp_output_to_arp_index+0x124>)
 800cb68:	4413      	add	r3, r2
 800cb6a:	1d19      	adds	r1, r3, #4
 800cb6c:	79fa      	ldrb	r2, [r7, #7]
 800cb6e:	4613      	mov	r3, r2
 800cb70:	005b      	lsls	r3, r3, #1
 800cb72:	4413      	add	r3, r2
 800cb74:	00db      	lsls	r3, r3, #3
 800cb76:	3308      	adds	r3, #8
 800cb78:	4a16      	ldr	r2, [pc, #88]	; (800cbd4 <etharp_output_to_arp_index+0x124>)
 800cb7a:	4413      	add	r3, r2
 800cb7c:	3304      	adds	r3, #4
 800cb7e:	461a      	mov	r2, r3
 800cb80:	68f8      	ldr	r0, [r7, #12]
 800cb82:	f000 fafb 	bl	800d17c <etharp_request_dst>
 800cb86:	4603      	mov	r3, r0
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	d109      	bne.n	800cba0 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800cb8c:	79fa      	ldrb	r2, [r7, #7]
 800cb8e:	4911      	ldr	r1, [pc, #68]	; (800cbd4 <etharp_output_to_arp_index+0x124>)
 800cb90:	4613      	mov	r3, r2
 800cb92:	005b      	lsls	r3, r3, #1
 800cb94:	4413      	add	r3, r2
 800cb96:	00db      	lsls	r3, r3, #3
 800cb98:	440b      	add	r3, r1
 800cb9a:	3314      	adds	r3, #20
 800cb9c:	2203      	movs	r2, #3
 800cb9e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800cba0:	68fb      	ldr	r3, [r7, #12]
 800cba2:	f103 0126 	add.w	r1, r3, #38	; 0x26
 800cba6:	79fa      	ldrb	r2, [r7, #7]
 800cba8:	4613      	mov	r3, r2
 800cbaa:	005b      	lsls	r3, r3, #1
 800cbac:	4413      	add	r3, r2
 800cbae:	00db      	lsls	r3, r3, #3
 800cbb0:	3308      	adds	r3, #8
 800cbb2:	4a08      	ldr	r2, [pc, #32]	; (800cbd4 <etharp_output_to_arp_index+0x124>)
 800cbb4:	4413      	add	r3, r2
 800cbb6:	1d1a      	adds	r2, r3, #4
 800cbb8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800cbbc:	9300      	str	r3, [sp, #0]
 800cbbe:	4613      	mov	r3, r2
 800cbc0:	460a      	mov	r2, r1
 800cbc2:	68b9      	ldr	r1, [r7, #8]
 800cbc4:	68f8      	ldr	r0, [r7, #12]
 800cbc6:	f001 fe2b 	bl	800e820 <ethernet_output>
 800cbca:	4603      	mov	r3, r0
}
 800cbcc:	4618      	mov	r0, r3
 800cbce:	3710      	adds	r7, #16
 800cbd0:	46bd      	mov	sp, r7
 800cbd2:	bd80      	pop	{r7, pc}
 800cbd4:	20000104 	.word	0x20000104
 800cbd8:	0801177c 	.word	0x0801177c
 800cbdc:	080118ec 	.word	0x080118ec
 800cbe0:	080117f4 	.word	0x080117f4

0800cbe4 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800cbe4:	b580      	push	{r7, lr}
 800cbe6:	b08a      	sub	sp, #40	; 0x28
 800cbe8:	af02      	add	r7, sp, #8
 800cbea:	60f8      	str	r0, [r7, #12]
 800cbec:	60b9      	str	r1, [r7, #8]
 800cbee:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800cbf4:	68fb      	ldr	r3, [r7, #12]
 800cbf6:	2b00      	cmp	r3, #0
 800cbf8:	d106      	bne.n	800cc08 <etharp_output+0x24>
 800cbfa:	4b73      	ldr	r3, [pc, #460]	; (800cdc8 <etharp_output+0x1e4>)
 800cbfc:	f240 321e 	movw	r2, #798	; 0x31e
 800cc00:	4972      	ldr	r1, [pc, #456]	; (800cdcc <etharp_output+0x1e8>)
 800cc02:	4873      	ldr	r0, [pc, #460]	; (800cdd0 <etharp_output+0x1ec>)
 800cc04:	f001 fe9a 	bl	800e93c <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800cc08:	68bb      	ldr	r3, [r7, #8]
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	d106      	bne.n	800cc1c <etharp_output+0x38>
 800cc0e:	4b6e      	ldr	r3, [pc, #440]	; (800cdc8 <etharp_output+0x1e4>)
 800cc10:	f240 321f 	movw	r2, #799	; 0x31f
 800cc14:	496f      	ldr	r1, [pc, #444]	; (800cdd4 <etharp_output+0x1f0>)
 800cc16:	486e      	ldr	r0, [pc, #440]	; (800cdd0 <etharp_output+0x1ec>)
 800cc18:	f001 fe90 	bl	800e93c <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	d106      	bne.n	800cc30 <etharp_output+0x4c>
 800cc22:	4b69      	ldr	r3, [pc, #420]	; (800cdc8 <etharp_output+0x1e4>)
 800cc24:	f44f 7248 	mov.w	r2, #800	; 0x320
 800cc28:	496b      	ldr	r1, [pc, #428]	; (800cdd8 <etharp_output+0x1f4>)
 800cc2a:	4869      	ldr	r0, [pc, #420]	; (800cdd0 <etharp_output+0x1ec>)
 800cc2c:	f001 fe86 	bl	800e93c <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	681b      	ldr	r3, [r3, #0]
 800cc34:	68f9      	ldr	r1, [r7, #12]
 800cc36:	4618      	mov	r0, r3
 800cc38:	f000 feee 	bl	800da18 <ip4_addr_isbroadcast_u32>
 800cc3c:	4603      	mov	r3, r0
 800cc3e:	2b00      	cmp	r3, #0
 800cc40:	d002      	beq.n	800cc48 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800cc42:	4b66      	ldr	r3, [pc, #408]	; (800cddc <etharp_output+0x1f8>)
 800cc44:	61fb      	str	r3, [r7, #28]
 800cc46:	e0af      	b.n	800cda8 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	681b      	ldr	r3, [r3, #0]
 800cc4c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cc50:	2be0      	cmp	r3, #224	; 0xe0
 800cc52:	d118      	bne.n	800cc86 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800cc54:	2301      	movs	r3, #1
 800cc56:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800cc58:	2300      	movs	r3, #0
 800cc5a:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800cc5c:	235e      	movs	r3, #94	; 0x5e
 800cc5e:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	3301      	adds	r3, #1
 800cc64:	781b      	ldrb	r3, [r3, #0]
 800cc66:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cc6a:	b2db      	uxtb	r3, r3
 800cc6c:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	3302      	adds	r3, #2
 800cc72:	781b      	ldrb	r3, [r3, #0]
 800cc74:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	3303      	adds	r3, #3
 800cc7a:	781b      	ldrb	r3, [r3, #0]
 800cc7c:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800cc7e:	f107 0310 	add.w	r3, r7, #16
 800cc82:	61fb      	str	r3, [r7, #28]
 800cc84:	e090      	b.n	800cda8 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	681a      	ldr	r2, [r3, #0]
 800cc8a:	68fb      	ldr	r3, [r7, #12]
 800cc8c:	3304      	adds	r3, #4
 800cc8e:	681b      	ldr	r3, [r3, #0]
 800cc90:	405a      	eors	r2, r3
 800cc92:	68fb      	ldr	r3, [r7, #12]
 800cc94:	3308      	adds	r3, #8
 800cc96:	681b      	ldr	r3, [r3, #0]
 800cc98:	4013      	ands	r3, r2
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	d012      	beq.n	800ccc4 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	681b      	ldr	r3, [r3, #0]
 800cca2:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800cca4:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800cca8:	4293      	cmp	r3, r2
 800ccaa:	d00b      	beq.n	800ccc4 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800ccac:	68fb      	ldr	r3, [r7, #12]
 800ccae:	330c      	adds	r3, #12
 800ccb0:	681b      	ldr	r3, [r3, #0]
 800ccb2:	2b00      	cmp	r3, #0
 800ccb4:	d003      	beq.n	800ccbe <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800ccb6:	68fb      	ldr	r3, [r7, #12]
 800ccb8:	330c      	adds	r3, #12
 800ccba:	61bb      	str	r3, [r7, #24]
 800ccbc:	e002      	b.n	800ccc4 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800ccbe:	f06f 0303 	mvn.w	r3, #3
 800ccc2:	e07d      	b.n	800cdc0 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800ccc4:	4b46      	ldr	r3, [pc, #280]	; (800cde0 <etharp_output+0x1fc>)
 800ccc6:	781b      	ldrb	r3, [r3, #0]
 800ccc8:	4619      	mov	r1, r3
 800ccca:	4a46      	ldr	r2, [pc, #280]	; (800cde4 <etharp_output+0x200>)
 800cccc:	460b      	mov	r3, r1
 800ccce:	005b      	lsls	r3, r3, #1
 800ccd0:	440b      	add	r3, r1
 800ccd2:	00db      	lsls	r3, r3, #3
 800ccd4:	4413      	add	r3, r2
 800ccd6:	3314      	adds	r3, #20
 800ccd8:	781b      	ldrb	r3, [r3, #0]
 800ccda:	2b01      	cmp	r3, #1
 800ccdc:	d925      	bls.n	800cd2a <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 800ccde:	4b40      	ldr	r3, [pc, #256]	; (800cde0 <etharp_output+0x1fc>)
 800cce0:	781b      	ldrb	r3, [r3, #0]
 800cce2:	4619      	mov	r1, r3
 800cce4:	4a3f      	ldr	r2, [pc, #252]	; (800cde4 <etharp_output+0x200>)
 800cce6:	460b      	mov	r3, r1
 800cce8:	005b      	lsls	r3, r3, #1
 800ccea:	440b      	add	r3, r1
 800ccec:	00db      	lsls	r3, r3, #3
 800ccee:	4413      	add	r3, r2
 800ccf0:	3308      	adds	r3, #8
 800ccf2:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800ccf4:	68fa      	ldr	r2, [r7, #12]
 800ccf6:	429a      	cmp	r2, r3
 800ccf8:	d117      	bne.n	800cd2a <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800ccfa:	69bb      	ldr	r3, [r7, #24]
 800ccfc:	681a      	ldr	r2, [r3, #0]
 800ccfe:	4b38      	ldr	r3, [pc, #224]	; (800cde0 <etharp_output+0x1fc>)
 800cd00:	781b      	ldrb	r3, [r3, #0]
 800cd02:	4618      	mov	r0, r3
 800cd04:	4937      	ldr	r1, [pc, #220]	; (800cde4 <etharp_output+0x200>)
 800cd06:	4603      	mov	r3, r0
 800cd08:	005b      	lsls	r3, r3, #1
 800cd0a:	4403      	add	r3, r0
 800cd0c:	00db      	lsls	r3, r3, #3
 800cd0e:	440b      	add	r3, r1
 800cd10:	3304      	adds	r3, #4
 800cd12:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800cd14:	429a      	cmp	r2, r3
 800cd16:	d108      	bne.n	800cd2a <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800cd18:	4b31      	ldr	r3, [pc, #196]	; (800cde0 <etharp_output+0x1fc>)
 800cd1a:	781b      	ldrb	r3, [r3, #0]
 800cd1c:	461a      	mov	r2, r3
 800cd1e:	68b9      	ldr	r1, [r7, #8]
 800cd20:	68f8      	ldr	r0, [r7, #12]
 800cd22:	f7ff fec5 	bl	800cab0 <etharp_output_to_arp_index>
 800cd26:	4603      	mov	r3, r0
 800cd28:	e04a      	b.n	800cdc0 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800cd2a:	2300      	movs	r3, #0
 800cd2c:	75fb      	strb	r3, [r7, #23]
 800cd2e:	e031      	b.n	800cd94 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800cd30:	7dfa      	ldrb	r2, [r7, #23]
 800cd32:	492c      	ldr	r1, [pc, #176]	; (800cde4 <etharp_output+0x200>)
 800cd34:	4613      	mov	r3, r2
 800cd36:	005b      	lsls	r3, r3, #1
 800cd38:	4413      	add	r3, r2
 800cd3a:	00db      	lsls	r3, r3, #3
 800cd3c:	440b      	add	r3, r1
 800cd3e:	3314      	adds	r3, #20
 800cd40:	781b      	ldrb	r3, [r3, #0]
 800cd42:	2b01      	cmp	r3, #1
 800cd44:	d923      	bls.n	800cd8e <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800cd46:	7dfa      	ldrb	r2, [r7, #23]
 800cd48:	4926      	ldr	r1, [pc, #152]	; (800cde4 <etharp_output+0x200>)
 800cd4a:	4613      	mov	r3, r2
 800cd4c:	005b      	lsls	r3, r3, #1
 800cd4e:	4413      	add	r3, r2
 800cd50:	00db      	lsls	r3, r3, #3
 800cd52:	440b      	add	r3, r1
 800cd54:	3308      	adds	r3, #8
 800cd56:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800cd58:	68fa      	ldr	r2, [r7, #12]
 800cd5a:	429a      	cmp	r2, r3
 800cd5c:	d117      	bne.n	800cd8e <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800cd5e:	69bb      	ldr	r3, [r7, #24]
 800cd60:	6819      	ldr	r1, [r3, #0]
 800cd62:	7dfa      	ldrb	r2, [r7, #23]
 800cd64:	481f      	ldr	r0, [pc, #124]	; (800cde4 <etharp_output+0x200>)
 800cd66:	4613      	mov	r3, r2
 800cd68:	005b      	lsls	r3, r3, #1
 800cd6a:	4413      	add	r3, r2
 800cd6c:	00db      	lsls	r3, r3, #3
 800cd6e:	4403      	add	r3, r0
 800cd70:	3304      	adds	r3, #4
 800cd72:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 800cd74:	4299      	cmp	r1, r3
 800cd76:	d10a      	bne.n	800cd8e <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 800cd78:	4a19      	ldr	r2, [pc, #100]	; (800cde0 <etharp_output+0x1fc>)
 800cd7a:	7dfb      	ldrb	r3, [r7, #23]
 800cd7c:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800cd7e:	7dfb      	ldrb	r3, [r7, #23]
 800cd80:	461a      	mov	r2, r3
 800cd82:	68b9      	ldr	r1, [r7, #8]
 800cd84:	68f8      	ldr	r0, [r7, #12]
 800cd86:	f7ff fe93 	bl	800cab0 <etharp_output_to_arp_index>
 800cd8a:	4603      	mov	r3, r0
 800cd8c:	e018      	b.n	800cdc0 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800cd8e:	7dfb      	ldrb	r3, [r7, #23]
 800cd90:	3301      	adds	r3, #1
 800cd92:	75fb      	strb	r3, [r7, #23]
 800cd94:	7dfb      	ldrb	r3, [r7, #23]
 800cd96:	2b09      	cmp	r3, #9
 800cd98:	d9ca      	bls.n	800cd30 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800cd9a:	68ba      	ldr	r2, [r7, #8]
 800cd9c:	69b9      	ldr	r1, [r7, #24]
 800cd9e:	68f8      	ldr	r0, [r7, #12]
 800cda0:	f000 f822 	bl	800cde8 <etharp_query>
 800cda4:	4603      	mov	r3, r0
 800cda6:	e00b      	b.n	800cdc0 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800cda8:	68fb      	ldr	r3, [r7, #12]
 800cdaa:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800cdae:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800cdb2:	9300      	str	r3, [sp, #0]
 800cdb4:	69fb      	ldr	r3, [r7, #28]
 800cdb6:	68b9      	ldr	r1, [r7, #8]
 800cdb8:	68f8      	ldr	r0, [r7, #12]
 800cdba:	f001 fd31 	bl	800e820 <ethernet_output>
 800cdbe:	4603      	mov	r3, r0
}
 800cdc0:	4618      	mov	r0, r3
 800cdc2:	3720      	adds	r7, #32
 800cdc4:	46bd      	mov	sp, r7
 800cdc6:	bd80      	pop	{r7, pc}
 800cdc8:	0801177c 	.word	0x0801177c
 800cdcc:	080118cc 	.word	0x080118cc
 800cdd0:	080117f4 	.word	0x080117f4
 800cdd4:	0801191c 	.word	0x0801191c
 800cdd8:	080118bc 	.word	0x080118bc
 800cddc:	08011f1c 	.word	0x08011f1c
 800cde0:	200001f4 	.word	0x200001f4
 800cde4:	20000104 	.word	0x20000104

0800cde8 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800cde8:	b580      	push	{r7, lr}
 800cdea:	b08c      	sub	sp, #48	; 0x30
 800cdec:	af02      	add	r7, sp, #8
 800cdee:	60f8      	str	r0, [r7, #12]
 800cdf0:	60b9      	str	r1, [r7, #8]
 800cdf2:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800cdf4:	68fb      	ldr	r3, [r7, #12]
 800cdf6:	3326      	adds	r3, #38	; 0x26
 800cdf8:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800cdfa:	23ff      	movs	r3, #255	; 0xff
 800cdfc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 800ce00:	2300      	movs	r3, #0
 800ce02:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800ce04:	68bb      	ldr	r3, [r7, #8]
 800ce06:	681b      	ldr	r3, [r3, #0]
 800ce08:	68f9      	ldr	r1, [r7, #12]
 800ce0a:	4618      	mov	r0, r3
 800ce0c:	f000 fe04 	bl	800da18 <ip4_addr_isbroadcast_u32>
 800ce10:	4603      	mov	r3, r0
 800ce12:	2b00      	cmp	r3, #0
 800ce14:	d10c      	bne.n	800ce30 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800ce16:	68bb      	ldr	r3, [r7, #8]
 800ce18:	681b      	ldr	r3, [r3, #0]
 800ce1a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800ce1e:	2be0      	cmp	r3, #224	; 0xe0
 800ce20:	d006      	beq.n	800ce30 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800ce22:	68bb      	ldr	r3, [r7, #8]
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	d003      	beq.n	800ce30 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800ce28:	68bb      	ldr	r3, [r7, #8]
 800ce2a:	681b      	ldr	r3, [r3, #0]
 800ce2c:	2b00      	cmp	r3, #0
 800ce2e:	d102      	bne.n	800ce36 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800ce30:	f06f 030f 	mvn.w	r3, #15
 800ce34:	e102      	b.n	800d03c <etharp_query+0x254>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800ce36:	68fa      	ldr	r2, [r7, #12]
 800ce38:	2101      	movs	r1, #1
 800ce3a:	68b8      	ldr	r0, [r7, #8]
 800ce3c:	f7ff fb60 	bl	800c500 <etharp_find_entry>
 800ce40:	4603      	mov	r3, r0
 800ce42:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800ce44:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ce48:	2b00      	cmp	r3, #0
 800ce4a:	da02      	bge.n	800ce52 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 800ce4c:	8a7b      	ldrh	r3, [r7, #18]
 800ce4e:	b25b      	sxtb	r3, r3
 800ce50:	e0f4      	b.n	800d03c <etharp_query+0x254>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800ce52:	8a7b      	ldrh	r3, [r7, #18]
 800ce54:	2b7e      	cmp	r3, #126	; 0x7e
 800ce56:	d906      	bls.n	800ce66 <etharp_query+0x7e>
 800ce58:	4b7a      	ldr	r3, [pc, #488]	; (800d044 <etharp_query+0x25c>)
 800ce5a:	f240 32c1 	movw	r2, #961	; 0x3c1
 800ce5e:	497a      	ldr	r1, [pc, #488]	; (800d048 <etharp_query+0x260>)
 800ce60:	487a      	ldr	r0, [pc, #488]	; (800d04c <etharp_query+0x264>)
 800ce62:	f001 fd6b 	bl	800e93c <iprintf>
  i = (netif_addr_idx_t)i_err;
 800ce66:	8a7b      	ldrh	r3, [r7, #18]
 800ce68:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800ce6a:	7c7a      	ldrb	r2, [r7, #17]
 800ce6c:	4978      	ldr	r1, [pc, #480]	; (800d050 <etharp_query+0x268>)
 800ce6e:	4613      	mov	r3, r2
 800ce70:	005b      	lsls	r3, r3, #1
 800ce72:	4413      	add	r3, r2
 800ce74:	00db      	lsls	r3, r3, #3
 800ce76:	440b      	add	r3, r1
 800ce78:	3314      	adds	r3, #20
 800ce7a:	781b      	ldrb	r3, [r3, #0]
 800ce7c:	2b00      	cmp	r3, #0
 800ce7e:	d115      	bne.n	800ceac <etharp_query+0xc4>
    is_new_entry = 1;
 800ce80:	2301      	movs	r3, #1
 800ce82:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800ce84:	7c7a      	ldrb	r2, [r7, #17]
 800ce86:	4972      	ldr	r1, [pc, #456]	; (800d050 <etharp_query+0x268>)
 800ce88:	4613      	mov	r3, r2
 800ce8a:	005b      	lsls	r3, r3, #1
 800ce8c:	4413      	add	r3, r2
 800ce8e:	00db      	lsls	r3, r3, #3
 800ce90:	440b      	add	r3, r1
 800ce92:	3314      	adds	r3, #20
 800ce94:	2201      	movs	r2, #1
 800ce96:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800ce98:	7c7a      	ldrb	r2, [r7, #17]
 800ce9a:	496d      	ldr	r1, [pc, #436]	; (800d050 <etharp_query+0x268>)
 800ce9c:	4613      	mov	r3, r2
 800ce9e:	005b      	lsls	r3, r3, #1
 800cea0:	4413      	add	r3, r2
 800cea2:	00db      	lsls	r3, r3, #3
 800cea4:	440b      	add	r3, r1
 800cea6:	3308      	adds	r3, #8
 800cea8:	68fa      	ldr	r2, [r7, #12]
 800ceaa:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800ceac:	7c7a      	ldrb	r2, [r7, #17]
 800ceae:	4968      	ldr	r1, [pc, #416]	; (800d050 <etharp_query+0x268>)
 800ceb0:	4613      	mov	r3, r2
 800ceb2:	005b      	lsls	r3, r3, #1
 800ceb4:	4413      	add	r3, r2
 800ceb6:	00db      	lsls	r3, r3, #3
 800ceb8:	440b      	add	r3, r1
 800ceba:	3314      	adds	r3, #20
 800cebc:	781b      	ldrb	r3, [r3, #0]
 800cebe:	2b01      	cmp	r3, #1
 800cec0:	d011      	beq.n	800cee6 <etharp_query+0xfe>
 800cec2:	7c7a      	ldrb	r2, [r7, #17]
 800cec4:	4962      	ldr	r1, [pc, #392]	; (800d050 <etharp_query+0x268>)
 800cec6:	4613      	mov	r3, r2
 800cec8:	005b      	lsls	r3, r3, #1
 800ceca:	4413      	add	r3, r2
 800cecc:	00db      	lsls	r3, r3, #3
 800cece:	440b      	add	r3, r1
 800ced0:	3314      	adds	r3, #20
 800ced2:	781b      	ldrb	r3, [r3, #0]
 800ced4:	2b01      	cmp	r3, #1
 800ced6:	d806      	bhi.n	800cee6 <etharp_query+0xfe>
 800ced8:	4b5a      	ldr	r3, [pc, #360]	; (800d044 <etharp_query+0x25c>)
 800ceda:	f240 32cf 	movw	r2, #975	; 0x3cf
 800cede:	495d      	ldr	r1, [pc, #372]	; (800d054 <etharp_query+0x26c>)
 800cee0:	485a      	ldr	r0, [pc, #360]	; (800d04c <etharp_query+0x264>)
 800cee2:	f001 fd2b 	bl	800e93c <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800cee6:	6a3b      	ldr	r3, [r7, #32]
 800cee8:	2b00      	cmp	r3, #0
 800ceea:	d102      	bne.n	800cef2 <etharp_query+0x10a>
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	2b00      	cmp	r3, #0
 800cef0:	d10c      	bne.n	800cf0c <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800cef2:	68b9      	ldr	r1, [r7, #8]
 800cef4:	68f8      	ldr	r0, [r7, #12]
 800cef6:	f000 f963 	bl	800d1c0 <etharp_request>
 800cefa:	4603      	mov	r3, r0
 800cefc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	2b00      	cmp	r3, #0
 800cf04:	d102      	bne.n	800cf0c <etharp_query+0x124>
      return result;
 800cf06:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800cf0a:	e097      	b.n	800d03c <etharp_query+0x254>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	2b00      	cmp	r3, #0
 800cf10:	d106      	bne.n	800cf20 <etharp_query+0x138>
 800cf12:	4b4c      	ldr	r3, [pc, #304]	; (800d044 <etharp_query+0x25c>)
 800cf14:	f240 32e1 	movw	r2, #993	; 0x3e1
 800cf18:	494f      	ldr	r1, [pc, #316]	; (800d058 <etharp_query+0x270>)
 800cf1a:	484c      	ldr	r0, [pc, #304]	; (800d04c <etharp_query+0x264>)
 800cf1c:	f001 fd0e 	bl	800e93c <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800cf20:	7c7a      	ldrb	r2, [r7, #17]
 800cf22:	494b      	ldr	r1, [pc, #300]	; (800d050 <etharp_query+0x268>)
 800cf24:	4613      	mov	r3, r2
 800cf26:	005b      	lsls	r3, r3, #1
 800cf28:	4413      	add	r3, r2
 800cf2a:	00db      	lsls	r3, r3, #3
 800cf2c:	440b      	add	r3, r1
 800cf2e:	3314      	adds	r3, #20
 800cf30:	781b      	ldrb	r3, [r3, #0]
 800cf32:	2b01      	cmp	r3, #1
 800cf34:	d918      	bls.n	800cf68 <etharp_query+0x180>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 800cf36:	4a49      	ldr	r2, [pc, #292]	; (800d05c <etharp_query+0x274>)
 800cf38:	7c7b      	ldrb	r3, [r7, #17]
 800cf3a:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800cf3c:	7c7a      	ldrb	r2, [r7, #17]
 800cf3e:	4613      	mov	r3, r2
 800cf40:	005b      	lsls	r3, r3, #1
 800cf42:	4413      	add	r3, r2
 800cf44:	00db      	lsls	r3, r3, #3
 800cf46:	3308      	adds	r3, #8
 800cf48:	4a41      	ldr	r2, [pc, #260]	; (800d050 <etharp_query+0x268>)
 800cf4a:	4413      	add	r3, r2
 800cf4c:	1d1a      	adds	r2, r3, #4
 800cf4e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800cf52:	9300      	str	r3, [sp, #0]
 800cf54:	4613      	mov	r3, r2
 800cf56:	697a      	ldr	r2, [r7, #20]
 800cf58:	6879      	ldr	r1, [r7, #4]
 800cf5a:	68f8      	ldr	r0, [r7, #12]
 800cf5c:	f001 fc60 	bl	800e820 <ethernet_output>
 800cf60:	4603      	mov	r3, r0
 800cf62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800cf66:	e067      	b.n	800d038 <etharp_query+0x250>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800cf68:	7c7a      	ldrb	r2, [r7, #17]
 800cf6a:	4939      	ldr	r1, [pc, #228]	; (800d050 <etharp_query+0x268>)
 800cf6c:	4613      	mov	r3, r2
 800cf6e:	005b      	lsls	r3, r3, #1
 800cf70:	4413      	add	r3, r2
 800cf72:	00db      	lsls	r3, r3, #3
 800cf74:	440b      	add	r3, r1
 800cf76:	3314      	adds	r3, #20
 800cf78:	781b      	ldrb	r3, [r3, #0]
 800cf7a:	2b01      	cmp	r3, #1
 800cf7c:	d15c      	bne.n	800d038 <etharp_query+0x250>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800cf7e:	2300      	movs	r3, #0
 800cf80:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	61fb      	str	r3, [r7, #28]
    while (p) {
 800cf86:	e01c      	b.n	800cfc2 <etharp_query+0x1da>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800cf88:	69fb      	ldr	r3, [r7, #28]
 800cf8a:	895a      	ldrh	r2, [r3, #10]
 800cf8c:	69fb      	ldr	r3, [r7, #28]
 800cf8e:	891b      	ldrh	r3, [r3, #8]
 800cf90:	429a      	cmp	r2, r3
 800cf92:	d10a      	bne.n	800cfaa <etharp_query+0x1c2>
 800cf94:	69fb      	ldr	r3, [r7, #28]
 800cf96:	681b      	ldr	r3, [r3, #0]
 800cf98:	2b00      	cmp	r3, #0
 800cf9a:	d006      	beq.n	800cfaa <etharp_query+0x1c2>
 800cf9c:	4b29      	ldr	r3, [pc, #164]	; (800d044 <etharp_query+0x25c>)
 800cf9e:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800cfa2:	492f      	ldr	r1, [pc, #188]	; (800d060 <etharp_query+0x278>)
 800cfa4:	4829      	ldr	r0, [pc, #164]	; (800d04c <etharp_query+0x264>)
 800cfa6:	f001 fcc9 	bl	800e93c <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 800cfaa:	69fb      	ldr	r3, [r7, #28]
 800cfac:	7b1b      	ldrb	r3, [r3, #12]
 800cfae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cfb2:	2b00      	cmp	r3, #0
 800cfb4:	d002      	beq.n	800cfbc <etharp_query+0x1d4>
        copy_needed = 1;
 800cfb6:	2301      	movs	r3, #1
 800cfb8:	61bb      	str	r3, [r7, #24]
        break;
 800cfba:	e005      	b.n	800cfc8 <etharp_query+0x1e0>
      }
      p = p->next;
 800cfbc:	69fb      	ldr	r3, [r7, #28]
 800cfbe:	681b      	ldr	r3, [r3, #0]
 800cfc0:	61fb      	str	r3, [r7, #28]
    while (p) {
 800cfc2:	69fb      	ldr	r3, [r7, #28]
 800cfc4:	2b00      	cmp	r3, #0
 800cfc6:	d1df      	bne.n	800cf88 <etharp_query+0x1a0>
    }
    if (copy_needed) {
 800cfc8:	69bb      	ldr	r3, [r7, #24]
 800cfca:	2b00      	cmp	r3, #0
 800cfcc:	d007      	beq.n	800cfde <etharp_query+0x1f6>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800cfce:	687a      	ldr	r2, [r7, #4]
 800cfd0:	f44f 7120 	mov.w	r1, #640	; 0x280
 800cfd4:	200e      	movs	r0, #14
 800cfd6:	f7f9 ff25 	bl	8006e24 <pbuf_clone>
 800cfda:	61f8      	str	r0, [r7, #28]
 800cfdc:	e004      	b.n	800cfe8 <etharp_query+0x200>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800cfe2:	69f8      	ldr	r0, [r7, #28]
 800cfe4:	f7f9 fd62 	bl	8006aac <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800cfe8:	69fb      	ldr	r3, [r7, #28]
 800cfea:	2b00      	cmp	r3, #0
 800cfec:	d021      	beq.n	800d032 <etharp_query+0x24a>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800cfee:	7c7a      	ldrb	r2, [r7, #17]
 800cff0:	4917      	ldr	r1, [pc, #92]	; (800d050 <etharp_query+0x268>)
 800cff2:	4613      	mov	r3, r2
 800cff4:	005b      	lsls	r3, r3, #1
 800cff6:	4413      	add	r3, r2
 800cff8:	00db      	lsls	r3, r3, #3
 800cffa:	440b      	add	r3, r1
 800cffc:	681b      	ldr	r3, [r3, #0]
 800cffe:	2b00      	cmp	r3, #0
 800d000:	d00a      	beq.n	800d018 <etharp_query+0x230>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 800d002:	7c7a      	ldrb	r2, [r7, #17]
 800d004:	4912      	ldr	r1, [pc, #72]	; (800d050 <etharp_query+0x268>)
 800d006:	4613      	mov	r3, r2
 800d008:	005b      	lsls	r3, r3, #1
 800d00a:	4413      	add	r3, r2
 800d00c:	00db      	lsls	r3, r3, #3
 800d00e:	440b      	add	r3, r1
 800d010:	681b      	ldr	r3, [r3, #0]
 800d012:	4618      	mov	r0, r3
 800d014:	f7f9 fcaa 	bl	800696c <pbuf_free>
      }
      arp_table[i].q = p;
 800d018:	7c7a      	ldrb	r2, [r7, #17]
 800d01a:	490d      	ldr	r1, [pc, #52]	; (800d050 <etharp_query+0x268>)
 800d01c:	4613      	mov	r3, r2
 800d01e:	005b      	lsls	r3, r3, #1
 800d020:	4413      	add	r3, r2
 800d022:	00db      	lsls	r3, r3, #3
 800d024:	440b      	add	r3, r1
 800d026:	69fa      	ldr	r2, [r7, #28]
 800d028:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800d02a:	2300      	movs	r3, #0
 800d02c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d030:	e002      	b.n	800d038 <etharp_query+0x250>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800d032:	23ff      	movs	r3, #255	; 0xff
 800d034:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 800d038:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800d03c:	4618      	mov	r0, r3
 800d03e:	3728      	adds	r7, #40	; 0x28
 800d040:	46bd      	mov	sp, r7
 800d042:	bd80      	pop	{r7, pc}
 800d044:	0801177c 	.word	0x0801177c
 800d048:	08011928 	.word	0x08011928
 800d04c:	080117f4 	.word	0x080117f4
 800d050:	20000104 	.word	0x20000104
 800d054:	08011938 	.word	0x08011938
 800d058:	0801191c 	.word	0x0801191c
 800d05c:	200001f4 	.word	0x200001f4
 800d060:	08011960 	.word	0x08011960

0800d064 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800d064:	b580      	push	{r7, lr}
 800d066:	b08a      	sub	sp, #40	; 0x28
 800d068:	af02      	add	r7, sp, #8
 800d06a:	60f8      	str	r0, [r7, #12]
 800d06c:	60b9      	str	r1, [r7, #8]
 800d06e:	607a      	str	r2, [r7, #4]
 800d070:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800d072:	2300      	movs	r3, #0
 800d074:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800d076:	68fb      	ldr	r3, [r7, #12]
 800d078:	2b00      	cmp	r3, #0
 800d07a:	d106      	bne.n	800d08a <etharp_raw+0x26>
 800d07c:	4b3a      	ldr	r3, [pc, #232]	; (800d168 <etharp_raw+0x104>)
 800d07e:	f240 4257 	movw	r2, #1111	; 0x457
 800d082:	493a      	ldr	r1, [pc, #232]	; (800d16c <etharp_raw+0x108>)
 800d084:	483a      	ldr	r0, [pc, #232]	; (800d170 <etharp_raw+0x10c>)
 800d086:	f001 fc59 	bl	800e93c <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800d08a:	f44f 7220 	mov.w	r2, #640	; 0x280
 800d08e:	211c      	movs	r1, #28
 800d090:	200e      	movs	r0, #14
 800d092:	f7f9 f98b 	bl	80063ac <pbuf_alloc>
 800d096:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800d098:	69bb      	ldr	r3, [r7, #24]
 800d09a:	2b00      	cmp	r3, #0
 800d09c:	d102      	bne.n	800d0a4 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800d09e:	f04f 33ff 	mov.w	r3, #4294967295
 800d0a2:	e05d      	b.n	800d160 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800d0a4:	69bb      	ldr	r3, [r7, #24]
 800d0a6:	895b      	ldrh	r3, [r3, #10]
 800d0a8:	2b1b      	cmp	r3, #27
 800d0aa:	d806      	bhi.n	800d0ba <etharp_raw+0x56>
 800d0ac:	4b2e      	ldr	r3, [pc, #184]	; (800d168 <etharp_raw+0x104>)
 800d0ae:	f240 4263 	movw	r2, #1123	; 0x463
 800d0b2:	4930      	ldr	r1, [pc, #192]	; (800d174 <etharp_raw+0x110>)
 800d0b4:	482e      	ldr	r0, [pc, #184]	; (800d170 <etharp_raw+0x10c>)
 800d0b6:	f001 fc41 	bl	800e93c <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800d0ba:	69bb      	ldr	r3, [r7, #24]
 800d0bc:	685b      	ldr	r3, [r3, #4]
 800d0be:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800d0c0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800d0c2:	4618      	mov	r0, r3
 800d0c4:	f7f8 f9c8 	bl	8005458 <lwip_htons>
 800d0c8:	4603      	mov	r3, r0
 800d0ca:	461a      	mov	r2, r3
 800d0cc:	697b      	ldr	r3, [r7, #20]
 800d0ce:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800d0d0:	68fb      	ldr	r3, [r7, #12]
 800d0d2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800d0d6:	2b06      	cmp	r3, #6
 800d0d8:	d006      	beq.n	800d0e8 <etharp_raw+0x84>
 800d0da:	4b23      	ldr	r3, [pc, #140]	; (800d168 <etharp_raw+0x104>)
 800d0dc:	f240 426a 	movw	r2, #1130	; 0x46a
 800d0e0:	4925      	ldr	r1, [pc, #148]	; (800d178 <etharp_raw+0x114>)
 800d0e2:	4823      	ldr	r0, [pc, #140]	; (800d170 <etharp_raw+0x10c>)
 800d0e4:	f001 fc2a 	bl	800e93c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800d0e8:	697b      	ldr	r3, [r7, #20]
 800d0ea:	3308      	adds	r3, #8
 800d0ec:	2206      	movs	r2, #6
 800d0ee:	6839      	ldr	r1, [r7, #0]
 800d0f0:	4618      	mov	r0, r3
 800d0f2:	f001 fc10 	bl	800e916 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800d0f6:	697b      	ldr	r3, [r7, #20]
 800d0f8:	3312      	adds	r3, #18
 800d0fa:	2206      	movs	r2, #6
 800d0fc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d0fe:	4618      	mov	r0, r3
 800d100:	f001 fc09 	bl	800e916 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800d104:	697b      	ldr	r3, [r7, #20]
 800d106:	330e      	adds	r3, #14
 800d108:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d10a:	6812      	ldr	r2, [r2, #0]
 800d10c:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800d10e:	697b      	ldr	r3, [r7, #20]
 800d110:	3318      	adds	r3, #24
 800d112:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d114:	6812      	ldr	r2, [r2, #0]
 800d116:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800d118:	697b      	ldr	r3, [r7, #20]
 800d11a:	2200      	movs	r2, #0
 800d11c:	701a      	strb	r2, [r3, #0]
 800d11e:	2200      	movs	r2, #0
 800d120:	f042 0201 	orr.w	r2, r2, #1
 800d124:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800d126:	697b      	ldr	r3, [r7, #20]
 800d128:	2200      	movs	r2, #0
 800d12a:	f042 0208 	orr.w	r2, r2, #8
 800d12e:	709a      	strb	r2, [r3, #2]
 800d130:	2200      	movs	r2, #0
 800d132:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800d134:	697b      	ldr	r3, [r7, #20]
 800d136:	2206      	movs	r2, #6
 800d138:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800d13a:	697b      	ldr	r3, [r7, #20]
 800d13c:	2204      	movs	r2, #4
 800d13e:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800d140:	f640 0306 	movw	r3, #2054	; 0x806
 800d144:	9300      	str	r3, [sp, #0]
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	68ba      	ldr	r2, [r7, #8]
 800d14a:	69b9      	ldr	r1, [r7, #24]
 800d14c:	68f8      	ldr	r0, [r7, #12]
 800d14e:	f001 fb67 	bl	800e820 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800d152:	69b8      	ldr	r0, [r7, #24]
 800d154:	f7f9 fc0a 	bl	800696c <pbuf_free>
  p = NULL;
 800d158:	2300      	movs	r3, #0
 800d15a:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800d15c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800d160:	4618      	mov	r0, r3
 800d162:	3720      	adds	r7, #32
 800d164:	46bd      	mov	sp, r7
 800d166:	bd80      	pop	{r7, pc}
 800d168:	0801177c 	.word	0x0801177c
 800d16c:	080118cc 	.word	0x080118cc
 800d170:	080117f4 	.word	0x080117f4
 800d174:	0801197c 	.word	0x0801197c
 800d178:	080119b0 	.word	0x080119b0

0800d17c <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 800d17c:	b580      	push	{r7, lr}
 800d17e:	b088      	sub	sp, #32
 800d180:	af04      	add	r7, sp, #16
 800d182:	60f8      	str	r0, [r7, #12]
 800d184:	60b9      	str	r1, [r7, #8]
 800d186:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800d188:	68fb      	ldr	r3, [r7, #12]
 800d18a:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800d18e:	68fb      	ldr	r3, [r7, #12]
 800d190:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800d194:	68fb      	ldr	r3, [r7, #12]
 800d196:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800d198:	2201      	movs	r2, #1
 800d19a:	9203      	str	r2, [sp, #12]
 800d19c:	68ba      	ldr	r2, [r7, #8]
 800d19e:	9202      	str	r2, [sp, #8]
 800d1a0:	4a06      	ldr	r2, [pc, #24]	; (800d1bc <etharp_request_dst+0x40>)
 800d1a2:	9201      	str	r2, [sp, #4]
 800d1a4:	9300      	str	r3, [sp, #0]
 800d1a6:	4603      	mov	r3, r0
 800d1a8:	687a      	ldr	r2, [r7, #4]
 800d1aa:	68f8      	ldr	r0, [r7, #12]
 800d1ac:	f7ff ff5a 	bl	800d064 <etharp_raw>
 800d1b0:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800d1b2:	4618      	mov	r0, r3
 800d1b4:	3710      	adds	r7, #16
 800d1b6:	46bd      	mov	sp, r7
 800d1b8:	bd80      	pop	{r7, pc}
 800d1ba:	bf00      	nop
 800d1bc:	08011f24 	.word	0x08011f24

0800d1c0 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800d1c0:	b580      	push	{r7, lr}
 800d1c2:	b082      	sub	sp, #8
 800d1c4:	af00      	add	r7, sp, #0
 800d1c6:	6078      	str	r0, [r7, #4]
 800d1c8:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800d1ca:	4a05      	ldr	r2, [pc, #20]	; (800d1e0 <etharp_request+0x20>)
 800d1cc:	6839      	ldr	r1, [r7, #0]
 800d1ce:	6878      	ldr	r0, [r7, #4]
 800d1d0:	f7ff ffd4 	bl	800d17c <etharp_request_dst>
 800d1d4:	4603      	mov	r3, r0
}
 800d1d6:	4618      	mov	r0, r3
 800d1d8:	3708      	adds	r7, #8
 800d1da:	46bd      	mov	sp, r7
 800d1dc:	bd80      	pop	{r7, pc}
 800d1de:	bf00      	nop
 800d1e0:	08011f1c 	.word	0x08011f1c

0800d1e4 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800d1e4:	b580      	push	{r7, lr}
 800d1e6:	b08e      	sub	sp, #56	; 0x38
 800d1e8:	af04      	add	r7, sp, #16
 800d1ea:	6078      	str	r0, [r7, #4]
 800d1ec:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800d1ee:	4b79      	ldr	r3, [pc, #484]	; (800d3d4 <icmp_input+0x1f0>)
 800d1f0:	689b      	ldr	r3, [r3, #8]
 800d1f2:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 800d1f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1f6:	781b      	ldrb	r3, [r3, #0]
 800d1f8:	f003 030f 	and.w	r3, r3, #15
 800d1fc:	b2db      	uxtb	r3, r3
 800d1fe:	009b      	lsls	r3, r3, #2
 800d200:	b2db      	uxtb	r3, r3
 800d202:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 800d204:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d206:	2b13      	cmp	r3, #19
 800d208:	f240 80cd 	bls.w	800d3a6 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	895b      	ldrh	r3, [r3, #10]
 800d210:	2b03      	cmp	r3, #3
 800d212:	f240 80ca 	bls.w	800d3aa <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	685b      	ldr	r3, [r3, #4]
 800d21a:	781b      	ldrb	r3, [r3, #0]
 800d21c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 800d220:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800d224:	2b00      	cmp	r3, #0
 800d226:	f000 80b7 	beq.w	800d398 <icmp_input+0x1b4>
 800d22a:	2b08      	cmp	r3, #8
 800d22c:	f040 80b7 	bne.w	800d39e <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 800d230:	4b69      	ldr	r3, [pc, #420]	; (800d3d8 <icmp_input+0x1f4>)
 800d232:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800d234:	4b67      	ldr	r3, [pc, #412]	; (800d3d4 <icmp_input+0x1f0>)
 800d236:	695b      	ldr	r3, [r3, #20]
 800d238:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d23c:	2be0      	cmp	r3, #224	; 0xe0
 800d23e:	f000 80bb 	beq.w	800d3b8 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800d242:	4b64      	ldr	r3, [pc, #400]	; (800d3d4 <icmp_input+0x1f0>)
 800d244:	695a      	ldr	r2, [r3, #20]
 800d246:	4b63      	ldr	r3, [pc, #396]	; (800d3d4 <icmp_input+0x1f0>)
 800d248:	681b      	ldr	r3, [r3, #0]
 800d24a:	4619      	mov	r1, r3
 800d24c:	4610      	mov	r0, r2
 800d24e:	f000 fbe3 	bl	800da18 <ip4_addr_isbroadcast_u32>
 800d252:	4603      	mov	r3, r0
 800d254:	2b00      	cmp	r3, #0
 800d256:	f040 80b1 	bne.w	800d3bc <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	891b      	ldrh	r3, [r3, #8]
 800d25e:	2b07      	cmp	r3, #7
 800d260:	f240 80a5 	bls.w	800d3ae <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800d264:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d266:	330e      	adds	r3, #14
 800d268:	4619      	mov	r1, r3
 800d26a:	6878      	ldr	r0, [r7, #4]
 800d26c:	f7f9 fae8 	bl	8006840 <pbuf_add_header>
 800d270:	4603      	mov	r3, r0
 800d272:	2b00      	cmp	r3, #0
 800d274:	d04b      	beq.n	800d30e <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	891a      	ldrh	r2, [r3, #8]
 800d27a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d27c:	4413      	add	r3, r2
 800d27e:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	891b      	ldrh	r3, [r3, #8]
 800d284:	8b7a      	ldrh	r2, [r7, #26]
 800d286:	429a      	cmp	r2, r3
 800d288:	f0c0 809a 	bcc.w	800d3c0 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800d28c:	8b7b      	ldrh	r3, [r7, #26]
 800d28e:	f44f 7220 	mov.w	r2, #640	; 0x280
 800d292:	4619      	mov	r1, r3
 800d294:	200e      	movs	r0, #14
 800d296:	f7f9 f889 	bl	80063ac <pbuf_alloc>
 800d29a:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 800d29c:	697b      	ldr	r3, [r7, #20]
 800d29e:	2b00      	cmp	r3, #0
 800d2a0:	f000 8090 	beq.w	800d3c4 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800d2a4:	697b      	ldr	r3, [r7, #20]
 800d2a6:	895b      	ldrh	r3, [r3, #10]
 800d2a8:	461a      	mov	r2, r3
 800d2aa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d2ac:	3308      	adds	r3, #8
 800d2ae:	429a      	cmp	r2, r3
 800d2b0:	d203      	bcs.n	800d2ba <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 800d2b2:	6978      	ldr	r0, [r7, #20]
 800d2b4:	f7f9 fb5a 	bl	800696c <pbuf_free>
          goto icmperr;
 800d2b8:	e085      	b.n	800d3c6 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 800d2ba:	697b      	ldr	r3, [r7, #20]
 800d2bc:	685b      	ldr	r3, [r3, #4]
 800d2be:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800d2c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d2c2:	4618      	mov	r0, r3
 800d2c4:	f001 fb27 	bl	800e916 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 800d2c8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d2ca:	4619      	mov	r1, r3
 800d2cc:	6978      	ldr	r0, [r7, #20]
 800d2ce:	f7f9 fac7 	bl	8006860 <pbuf_remove_header>
 800d2d2:	4603      	mov	r3, r0
 800d2d4:	2b00      	cmp	r3, #0
 800d2d6:	d009      	beq.n	800d2ec <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800d2d8:	4b40      	ldr	r3, [pc, #256]	; (800d3dc <icmp_input+0x1f8>)
 800d2da:	22b6      	movs	r2, #182	; 0xb6
 800d2dc:	4940      	ldr	r1, [pc, #256]	; (800d3e0 <icmp_input+0x1fc>)
 800d2de:	4841      	ldr	r0, [pc, #260]	; (800d3e4 <icmp_input+0x200>)
 800d2e0:	f001 fb2c 	bl	800e93c <iprintf>
          pbuf_free(r);
 800d2e4:	6978      	ldr	r0, [r7, #20]
 800d2e6:	f7f9 fb41 	bl	800696c <pbuf_free>
          goto icmperr;
 800d2ea:	e06c      	b.n	800d3c6 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 800d2ec:	6879      	ldr	r1, [r7, #4]
 800d2ee:	6978      	ldr	r0, [r7, #20]
 800d2f0:	f7f9 fc54 	bl	8006b9c <pbuf_copy>
 800d2f4:	4603      	mov	r3, r0
 800d2f6:	2b00      	cmp	r3, #0
 800d2f8:	d003      	beq.n	800d302 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 800d2fa:	6978      	ldr	r0, [r7, #20]
 800d2fc:	f7f9 fb36 	bl	800696c <pbuf_free>
          goto icmperr;
 800d300:	e061      	b.n	800d3c6 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 800d302:	6878      	ldr	r0, [r7, #4]
 800d304:	f7f9 fb32 	bl	800696c <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 800d308:	697b      	ldr	r3, [r7, #20]
 800d30a:	607b      	str	r3, [r7, #4]
 800d30c:	e00f      	b.n	800d32e <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800d30e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d310:	330e      	adds	r3, #14
 800d312:	4619      	mov	r1, r3
 800d314:	6878      	ldr	r0, [r7, #4]
 800d316:	f7f9 faa3 	bl	8006860 <pbuf_remove_header>
 800d31a:	4603      	mov	r3, r0
 800d31c:	2b00      	cmp	r3, #0
 800d31e:	d006      	beq.n	800d32e <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800d320:	4b2e      	ldr	r3, [pc, #184]	; (800d3dc <icmp_input+0x1f8>)
 800d322:	22c7      	movs	r2, #199	; 0xc7
 800d324:	4930      	ldr	r1, [pc, #192]	; (800d3e8 <icmp_input+0x204>)
 800d326:	482f      	ldr	r0, [pc, #188]	; (800d3e4 <icmp_input+0x200>)
 800d328:	f001 fb08 	bl	800e93c <iprintf>
          goto icmperr;
 800d32c:	e04b      	b.n	800d3c6 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	685b      	ldr	r3, [r3, #4]
 800d332:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 800d334:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d336:	4619      	mov	r1, r3
 800d338:	6878      	ldr	r0, [r7, #4]
 800d33a:	f7f9 fa81 	bl	8006840 <pbuf_add_header>
 800d33e:	4603      	mov	r3, r0
 800d340:	2b00      	cmp	r3, #0
 800d342:	d12b      	bne.n	800d39c <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	685b      	ldr	r3, [r3, #4]
 800d348:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 800d34a:	69fb      	ldr	r3, [r7, #28]
 800d34c:	681a      	ldr	r2, [r3, #0]
 800d34e:	68fb      	ldr	r3, [r7, #12]
 800d350:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800d352:	4b20      	ldr	r3, [pc, #128]	; (800d3d4 <icmp_input+0x1f0>)
 800d354:	691a      	ldr	r2, [r3, #16]
 800d356:	68fb      	ldr	r3, [r7, #12]
 800d358:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800d35a:	693b      	ldr	r3, [r7, #16]
 800d35c:	2200      	movs	r2, #0
 800d35e:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 800d360:	693b      	ldr	r3, [r7, #16]
 800d362:	2200      	movs	r2, #0
 800d364:	709a      	strb	r2, [r3, #2]
 800d366:	2200      	movs	r2, #0
 800d368:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800d36a:	68fb      	ldr	r3, [r7, #12]
 800d36c:	22ff      	movs	r2, #255	; 0xff
 800d36e:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800d370:	68fb      	ldr	r3, [r7, #12]
 800d372:	2200      	movs	r2, #0
 800d374:	729a      	strb	r2, [r3, #10]
 800d376:	2200      	movs	r2, #0
 800d378:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800d37a:	683b      	ldr	r3, [r7, #0]
 800d37c:	9302      	str	r3, [sp, #8]
 800d37e:	2301      	movs	r3, #1
 800d380:	9301      	str	r3, [sp, #4]
 800d382:	2300      	movs	r3, #0
 800d384:	9300      	str	r3, [sp, #0]
 800d386:	23ff      	movs	r3, #255	; 0xff
 800d388:	2200      	movs	r2, #0
 800d38a:	69f9      	ldr	r1, [r7, #28]
 800d38c:	6878      	ldr	r0, [r7, #4]
 800d38e:	f000 fa6b 	bl	800d868 <ip4_output_if>
 800d392:	4603      	mov	r3, r0
 800d394:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 800d396:	e001      	b.n	800d39c <icmp_input+0x1b8>
      break;
 800d398:	bf00      	nop
 800d39a:	e000      	b.n	800d39e <icmp_input+0x1ba>
      break;
 800d39c:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800d39e:	6878      	ldr	r0, [r7, #4]
 800d3a0:	f7f9 fae4 	bl	800696c <pbuf_free>
  return;
 800d3a4:	e013      	b.n	800d3ce <icmp_input+0x1ea>
    goto lenerr;
 800d3a6:	bf00      	nop
 800d3a8:	e002      	b.n	800d3b0 <icmp_input+0x1cc>
    goto lenerr;
 800d3aa:	bf00      	nop
 800d3ac:	e000      	b.n	800d3b0 <icmp_input+0x1cc>
        goto lenerr;
 800d3ae:	bf00      	nop
lenerr:
  pbuf_free(p);
 800d3b0:	6878      	ldr	r0, [r7, #4]
 800d3b2:	f7f9 fadb 	bl	800696c <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800d3b6:	e00a      	b.n	800d3ce <icmp_input+0x1ea>
        goto icmperr;
 800d3b8:	bf00      	nop
 800d3ba:	e004      	b.n	800d3c6 <icmp_input+0x1e2>
        goto icmperr;
 800d3bc:	bf00      	nop
 800d3be:	e002      	b.n	800d3c6 <icmp_input+0x1e2>
          goto icmperr;
 800d3c0:	bf00      	nop
 800d3c2:	e000      	b.n	800d3c6 <icmp_input+0x1e2>
          goto icmperr;
 800d3c4:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800d3c6:	6878      	ldr	r0, [r7, #4]
 800d3c8:	f7f9 fad0 	bl	800696c <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800d3cc:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800d3ce:	3728      	adds	r7, #40	; 0x28
 800d3d0:	46bd      	mov	sp, r7
 800d3d2:	bd80      	pop	{r7, pc}
 800d3d4:	20003460 	.word	0x20003460
 800d3d8:	20003474 	.word	0x20003474
 800d3dc:	080119f4 	.word	0x080119f4
 800d3e0:	08011a2c 	.word	0x08011a2c
 800d3e4:	08011a64 	.word	0x08011a64
 800d3e8:	08011a8c 	.word	0x08011a8c

0800d3ec <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800d3ec:	b580      	push	{r7, lr}
 800d3ee:	b082      	sub	sp, #8
 800d3f0:	af00      	add	r7, sp, #0
 800d3f2:	6078      	str	r0, [r7, #4]
 800d3f4:	460b      	mov	r3, r1
 800d3f6:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800d3f8:	78fb      	ldrb	r3, [r7, #3]
 800d3fa:	461a      	mov	r2, r3
 800d3fc:	2103      	movs	r1, #3
 800d3fe:	6878      	ldr	r0, [r7, #4]
 800d400:	f000 f814 	bl	800d42c <icmp_send_response>
}
 800d404:	bf00      	nop
 800d406:	3708      	adds	r7, #8
 800d408:	46bd      	mov	sp, r7
 800d40a:	bd80      	pop	{r7, pc}

0800d40c <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800d40c:	b580      	push	{r7, lr}
 800d40e:	b082      	sub	sp, #8
 800d410:	af00      	add	r7, sp, #0
 800d412:	6078      	str	r0, [r7, #4]
 800d414:	460b      	mov	r3, r1
 800d416:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800d418:	78fb      	ldrb	r3, [r7, #3]
 800d41a:	461a      	mov	r2, r3
 800d41c:	210b      	movs	r1, #11
 800d41e:	6878      	ldr	r0, [r7, #4]
 800d420:	f000 f804 	bl	800d42c <icmp_send_response>
}
 800d424:	bf00      	nop
 800d426:	3708      	adds	r7, #8
 800d428:	46bd      	mov	sp, r7
 800d42a:	bd80      	pop	{r7, pc}

0800d42c <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800d42c:	b580      	push	{r7, lr}
 800d42e:	b08c      	sub	sp, #48	; 0x30
 800d430:	af04      	add	r7, sp, #16
 800d432:	6078      	str	r0, [r7, #4]
 800d434:	460b      	mov	r3, r1
 800d436:	70fb      	strb	r3, [r7, #3]
 800d438:	4613      	mov	r3, r2
 800d43a:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800d43c:	f44f 7220 	mov.w	r2, #640	; 0x280
 800d440:	2124      	movs	r1, #36	; 0x24
 800d442:	2022      	movs	r0, #34	; 0x22
 800d444:	f7f8 ffb2 	bl	80063ac <pbuf_alloc>
 800d448:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800d44a:	69fb      	ldr	r3, [r7, #28]
 800d44c:	2b00      	cmp	r3, #0
 800d44e:	d04c      	beq.n	800d4ea <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800d450:	69fb      	ldr	r3, [r7, #28]
 800d452:	895b      	ldrh	r3, [r3, #10]
 800d454:	2b23      	cmp	r3, #35	; 0x23
 800d456:	d806      	bhi.n	800d466 <icmp_send_response+0x3a>
 800d458:	4b26      	ldr	r3, [pc, #152]	; (800d4f4 <icmp_send_response+0xc8>)
 800d45a:	f240 1269 	movw	r2, #361	; 0x169
 800d45e:	4926      	ldr	r1, [pc, #152]	; (800d4f8 <icmp_send_response+0xcc>)
 800d460:	4826      	ldr	r0, [pc, #152]	; (800d4fc <icmp_send_response+0xd0>)
 800d462:	f001 fa6b 	bl	800e93c <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	685b      	ldr	r3, [r3, #4]
 800d46a:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800d46c:	69fb      	ldr	r3, [r7, #28]
 800d46e:	685b      	ldr	r3, [r3, #4]
 800d470:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800d472:	697b      	ldr	r3, [r7, #20]
 800d474:	78fa      	ldrb	r2, [r7, #3]
 800d476:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800d478:	697b      	ldr	r3, [r7, #20]
 800d47a:	78ba      	ldrb	r2, [r7, #2]
 800d47c:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800d47e:	697b      	ldr	r3, [r7, #20]
 800d480:	2200      	movs	r2, #0
 800d482:	711a      	strb	r2, [r3, #4]
 800d484:	2200      	movs	r2, #0
 800d486:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800d488:	697b      	ldr	r3, [r7, #20]
 800d48a:	2200      	movs	r2, #0
 800d48c:	719a      	strb	r2, [r3, #6]
 800d48e:	2200      	movs	r2, #0
 800d490:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800d492:	69fb      	ldr	r3, [r7, #28]
 800d494:	685b      	ldr	r3, [r3, #4]
 800d496:	f103 0008 	add.w	r0, r3, #8
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	685b      	ldr	r3, [r3, #4]
 800d49e:	221c      	movs	r2, #28
 800d4a0:	4619      	mov	r1, r3
 800d4a2:	f001 fa38 	bl	800e916 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800d4a6:	69bb      	ldr	r3, [r7, #24]
 800d4a8:	68db      	ldr	r3, [r3, #12]
 800d4aa:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800d4ac:	f107 030c 	add.w	r3, r7, #12
 800d4b0:	4618      	mov	r0, r3
 800d4b2:	f000 f825 	bl	800d500 <ip4_route>
 800d4b6:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800d4b8:	693b      	ldr	r3, [r7, #16]
 800d4ba:	2b00      	cmp	r3, #0
 800d4bc:	d011      	beq.n	800d4e2 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800d4be:	697b      	ldr	r3, [r7, #20]
 800d4c0:	2200      	movs	r2, #0
 800d4c2:	709a      	strb	r2, [r3, #2]
 800d4c4:	2200      	movs	r2, #0
 800d4c6:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800d4c8:	f107 020c 	add.w	r2, r7, #12
 800d4cc:	693b      	ldr	r3, [r7, #16]
 800d4ce:	9302      	str	r3, [sp, #8]
 800d4d0:	2301      	movs	r3, #1
 800d4d2:	9301      	str	r3, [sp, #4]
 800d4d4:	2300      	movs	r3, #0
 800d4d6:	9300      	str	r3, [sp, #0]
 800d4d8:	23ff      	movs	r3, #255	; 0xff
 800d4da:	2100      	movs	r1, #0
 800d4dc:	69f8      	ldr	r0, [r7, #28]
 800d4de:	f000 f9c3 	bl	800d868 <ip4_output_if>
  }
  pbuf_free(q);
 800d4e2:	69f8      	ldr	r0, [r7, #28]
 800d4e4:	f7f9 fa42 	bl	800696c <pbuf_free>
 800d4e8:	e000      	b.n	800d4ec <icmp_send_response+0xc0>
    return;
 800d4ea:	bf00      	nop
}
 800d4ec:	3720      	adds	r7, #32
 800d4ee:	46bd      	mov	sp, r7
 800d4f0:	bd80      	pop	{r7, pc}
 800d4f2:	bf00      	nop
 800d4f4:	080119f4 	.word	0x080119f4
 800d4f8:	08011ac0 	.word	0x08011ac0
 800d4fc:	08011a64 	.word	0x08011a64

0800d500 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800d500:	b480      	push	{r7}
 800d502:	b085      	sub	sp, #20
 800d504:	af00      	add	r7, sp, #0
 800d506:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 800d508:	4b33      	ldr	r3, [pc, #204]	; (800d5d8 <ip4_route+0xd8>)
 800d50a:	681b      	ldr	r3, [r3, #0]
 800d50c:	60fb      	str	r3, [r7, #12]
 800d50e:	e036      	b.n	800d57e <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800d510:	68fb      	ldr	r3, [r7, #12]
 800d512:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d516:	f003 0301 	and.w	r3, r3, #1
 800d51a:	b2db      	uxtb	r3, r3
 800d51c:	2b00      	cmp	r3, #0
 800d51e:	d02b      	beq.n	800d578 <ip4_route+0x78>
 800d520:	68fb      	ldr	r3, [r7, #12]
 800d522:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d526:	089b      	lsrs	r3, r3, #2
 800d528:	f003 0301 	and.w	r3, r3, #1
 800d52c:	b2db      	uxtb	r3, r3
 800d52e:	2b00      	cmp	r3, #0
 800d530:	d022      	beq.n	800d578 <ip4_route+0x78>
 800d532:	68fb      	ldr	r3, [r7, #12]
 800d534:	3304      	adds	r3, #4
 800d536:	681b      	ldr	r3, [r3, #0]
 800d538:	2b00      	cmp	r3, #0
 800d53a:	d01d      	beq.n	800d578 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	681a      	ldr	r2, [r3, #0]
 800d540:	68fb      	ldr	r3, [r7, #12]
 800d542:	3304      	adds	r3, #4
 800d544:	681b      	ldr	r3, [r3, #0]
 800d546:	405a      	eors	r2, r3
 800d548:	68fb      	ldr	r3, [r7, #12]
 800d54a:	3308      	adds	r3, #8
 800d54c:	681b      	ldr	r3, [r3, #0]
 800d54e:	4013      	ands	r3, r2
 800d550:	2b00      	cmp	r3, #0
 800d552:	d101      	bne.n	800d558 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800d554:	68fb      	ldr	r3, [r7, #12]
 800d556:	e038      	b.n	800d5ca <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800d558:	68fb      	ldr	r3, [r7, #12]
 800d55a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d55e:	f003 0302 	and.w	r3, r3, #2
 800d562:	2b00      	cmp	r3, #0
 800d564:	d108      	bne.n	800d578 <ip4_route+0x78>
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	681a      	ldr	r2, [r3, #0]
 800d56a:	68fb      	ldr	r3, [r7, #12]
 800d56c:	330c      	adds	r3, #12
 800d56e:	681b      	ldr	r3, [r3, #0]
 800d570:	429a      	cmp	r2, r3
 800d572:	d101      	bne.n	800d578 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800d574:	68fb      	ldr	r3, [r7, #12]
 800d576:	e028      	b.n	800d5ca <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 800d578:	68fb      	ldr	r3, [r7, #12]
 800d57a:	681b      	ldr	r3, [r3, #0]
 800d57c:	60fb      	str	r3, [r7, #12]
 800d57e:	68fb      	ldr	r3, [r7, #12]
 800d580:	2b00      	cmp	r3, #0
 800d582:	d1c5      	bne.n	800d510 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800d584:	4b15      	ldr	r3, [pc, #84]	; (800d5dc <ip4_route+0xdc>)
 800d586:	681b      	ldr	r3, [r3, #0]
 800d588:	2b00      	cmp	r3, #0
 800d58a:	d01a      	beq.n	800d5c2 <ip4_route+0xc2>
 800d58c:	4b13      	ldr	r3, [pc, #76]	; (800d5dc <ip4_route+0xdc>)
 800d58e:	681b      	ldr	r3, [r3, #0]
 800d590:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d594:	f003 0301 	and.w	r3, r3, #1
 800d598:	2b00      	cmp	r3, #0
 800d59a:	d012      	beq.n	800d5c2 <ip4_route+0xc2>
 800d59c:	4b0f      	ldr	r3, [pc, #60]	; (800d5dc <ip4_route+0xdc>)
 800d59e:	681b      	ldr	r3, [r3, #0]
 800d5a0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d5a4:	f003 0304 	and.w	r3, r3, #4
 800d5a8:	2b00      	cmp	r3, #0
 800d5aa:	d00a      	beq.n	800d5c2 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800d5ac:	4b0b      	ldr	r3, [pc, #44]	; (800d5dc <ip4_route+0xdc>)
 800d5ae:	681b      	ldr	r3, [r3, #0]
 800d5b0:	3304      	adds	r3, #4
 800d5b2:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	d004      	beq.n	800d5c2 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	681b      	ldr	r3, [r3, #0]
 800d5bc:	b2db      	uxtb	r3, r3
 800d5be:	2b7f      	cmp	r3, #127	; 0x7f
 800d5c0:	d101      	bne.n	800d5c6 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800d5c2:	2300      	movs	r3, #0
 800d5c4:	e001      	b.n	800d5ca <ip4_route+0xca>
  }

  return netif_default;
 800d5c6:	4b05      	ldr	r3, [pc, #20]	; (800d5dc <ip4_route+0xdc>)
 800d5c8:	681b      	ldr	r3, [r3, #0]
}
 800d5ca:	4618      	mov	r0, r3
 800d5cc:	3714      	adds	r7, #20
 800d5ce:	46bd      	mov	sp, r7
 800d5d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5d4:	4770      	bx	lr
 800d5d6:	bf00      	nop
 800d5d8:	20008ad0 	.word	0x20008ad0
 800d5dc:	20008ad4 	.word	0x20008ad4

0800d5e0 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 800d5e0:	b580      	push	{r7, lr}
 800d5e2:	b082      	sub	sp, #8
 800d5e4:	af00      	add	r7, sp, #0
 800d5e6:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d5ee:	f003 0301 	and.w	r3, r3, #1
 800d5f2:	b2db      	uxtb	r3, r3
 800d5f4:	2b00      	cmp	r3, #0
 800d5f6:	d016      	beq.n	800d626 <ip4_input_accept+0x46>
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	3304      	adds	r3, #4
 800d5fc:	681b      	ldr	r3, [r3, #0]
 800d5fe:	2b00      	cmp	r3, #0
 800d600:	d011      	beq.n	800d626 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800d602:	4b0b      	ldr	r3, [pc, #44]	; (800d630 <ip4_input_accept+0x50>)
 800d604:	695a      	ldr	r2, [r3, #20]
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	3304      	adds	r3, #4
 800d60a:	681b      	ldr	r3, [r3, #0]
 800d60c:	429a      	cmp	r2, r3
 800d60e:	d008      	beq.n	800d622 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800d610:	4b07      	ldr	r3, [pc, #28]	; (800d630 <ip4_input_accept+0x50>)
 800d612:	695b      	ldr	r3, [r3, #20]
 800d614:	6879      	ldr	r1, [r7, #4]
 800d616:	4618      	mov	r0, r3
 800d618:	f000 f9fe 	bl	800da18 <ip4_addr_isbroadcast_u32>
 800d61c:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800d61e:	2b00      	cmp	r3, #0
 800d620:	d001      	beq.n	800d626 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 800d622:	2301      	movs	r3, #1
 800d624:	e000      	b.n	800d628 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 800d626:	2300      	movs	r3, #0
}
 800d628:	4618      	mov	r0, r3
 800d62a:	3708      	adds	r7, #8
 800d62c:	46bd      	mov	sp, r7
 800d62e:	bd80      	pop	{r7, pc}
 800d630:	20003460 	.word	0x20003460

0800d634 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800d634:	b580      	push	{r7, lr}
 800d636:	b086      	sub	sp, #24
 800d638:	af00      	add	r7, sp, #0
 800d63a:	6078      	str	r0, [r7, #4]
 800d63c:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	685b      	ldr	r3, [r3, #4]
 800d642:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 800d644:	697b      	ldr	r3, [r7, #20]
 800d646:	781b      	ldrb	r3, [r3, #0]
 800d648:	091b      	lsrs	r3, r3, #4
 800d64a:	b2db      	uxtb	r3, r3
 800d64c:	2b04      	cmp	r3, #4
 800d64e:	d004      	beq.n	800d65a <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800d650:	6878      	ldr	r0, [r7, #4]
 800d652:	f7f9 f98b 	bl	800696c <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800d656:	2300      	movs	r3, #0
 800d658:	e0fd      	b.n	800d856 <ip4_input+0x222>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800d65a:	697b      	ldr	r3, [r7, #20]
 800d65c:	781b      	ldrb	r3, [r3, #0]
 800d65e:	f003 030f 	and.w	r3, r3, #15
 800d662:	b2db      	uxtb	r3, r3
 800d664:	009b      	lsls	r3, r3, #2
 800d666:	b2db      	uxtb	r3, r3
 800d668:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800d66a:	697b      	ldr	r3, [r7, #20]
 800d66c:	885b      	ldrh	r3, [r3, #2]
 800d66e:	b29b      	uxth	r3, r3
 800d670:	4618      	mov	r0, r3
 800d672:	f7f7 fef1 	bl	8005458 <lwip_htons>
 800d676:	4603      	mov	r3, r0
 800d678:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	891b      	ldrh	r3, [r3, #8]
 800d67e:	89ba      	ldrh	r2, [r7, #12]
 800d680:	429a      	cmp	r2, r3
 800d682:	d204      	bcs.n	800d68e <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 800d684:	89bb      	ldrh	r3, [r7, #12]
 800d686:	4619      	mov	r1, r3
 800d688:	6878      	ldr	r0, [r7, #4]
 800d68a:	f7f8 ffe9 	bl	8006660 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	895b      	ldrh	r3, [r3, #10]
 800d692:	89fa      	ldrh	r2, [r7, #14]
 800d694:	429a      	cmp	r2, r3
 800d696:	d807      	bhi.n	800d6a8 <ip4_input+0x74>
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	891b      	ldrh	r3, [r3, #8]
 800d69c:	89ba      	ldrh	r2, [r7, #12]
 800d69e:	429a      	cmp	r2, r3
 800d6a0:	d802      	bhi.n	800d6a8 <ip4_input+0x74>
 800d6a2:	89fb      	ldrh	r3, [r7, #14]
 800d6a4:	2b13      	cmp	r3, #19
 800d6a6:	d804      	bhi.n	800d6b2 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800d6a8:	6878      	ldr	r0, [r7, #4]
 800d6aa:	f7f9 f95f 	bl	800696c <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800d6ae:	2300      	movs	r3, #0
 800d6b0:	e0d1      	b.n	800d856 <ip4_input+0x222>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800d6b2:	697b      	ldr	r3, [r7, #20]
 800d6b4:	691b      	ldr	r3, [r3, #16]
 800d6b6:	4a6a      	ldr	r2, [pc, #424]	; (800d860 <ip4_input+0x22c>)
 800d6b8:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800d6ba:	697b      	ldr	r3, [r7, #20]
 800d6bc:	68db      	ldr	r3, [r3, #12]
 800d6be:	4a68      	ldr	r2, [pc, #416]	; (800d860 <ip4_input+0x22c>)
 800d6c0:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800d6c2:	4b67      	ldr	r3, [pc, #412]	; (800d860 <ip4_input+0x22c>)
 800d6c4:	695b      	ldr	r3, [r3, #20]
 800d6c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d6ca:	2be0      	cmp	r3, #224	; 0xe0
 800d6cc:	d112      	bne.n	800d6f4 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800d6ce:	683b      	ldr	r3, [r7, #0]
 800d6d0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d6d4:	f003 0301 	and.w	r3, r3, #1
 800d6d8:	b2db      	uxtb	r3, r3
 800d6da:	2b00      	cmp	r3, #0
 800d6dc:	d007      	beq.n	800d6ee <ip4_input+0xba>
 800d6de:	683b      	ldr	r3, [r7, #0]
 800d6e0:	3304      	adds	r3, #4
 800d6e2:	681b      	ldr	r3, [r3, #0]
 800d6e4:	2b00      	cmp	r3, #0
 800d6e6:	d002      	beq.n	800d6ee <ip4_input+0xba>
      netif = inp;
 800d6e8:	683b      	ldr	r3, [r7, #0]
 800d6ea:	613b      	str	r3, [r7, #16]
 800d6ec:	e02a      	b.n	800d744 <ip4_input+0x110>
    } else {
      netif = NULL;
 800d6ee:	2300      	movs	r3, #0
 800d6f0:	613b      	str	r3, [r7, #16]
 800d6f2:	e027      	b.n	800d744 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 800d6f4:	6838      	ldr	r0, [r7, #0]
 800d6f6:	f7ff ff73 	bl	800d5e0 <ip4_input_accept>
 800d6fa:	4603      	mov	r3, r0
 800d6fc:	2b00      	cmp	r3, #0
 800d6fe:	d002      	beq.n	800d706 <ip4_input+0xd2>
      netif = inp;
 800d700:	683b      	ldr	r3, [r7, #0]
 800d702:	613b      	str	r3, [r7, #16]
 800d704:	e01e      	b.n	800d744 <ip4_input+0x110>
    } else {
      netif = NULL;
 800d706:	2300      	movs	r3, #0
 800d708:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800d70a:	4b55      	ldr	r3, [pc, #340]	; (800d860 <ip4_input+0x22c>)
 800d70c:	695b      	ldr	r3, [r3, #20]
 800d70e:	b2db      	uxtb	r3, r3
 800d710:	2b7f      	cmp	r3, #127	; 0x7f
 800d712:	d017      	beq.n	800d744 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 800d714:	4b53      	ldr	r3, [pc, #332]	; (800d864 <ip4_input+0x230>)
 800d716:	681b      	ldr	r3, [r3, #0]
 800d718:	613b      	str	r3, [r7, #16]
 800d71a:	e00e      	b.n	800d73a <ip4_input+0x106>
          if (netif == inp) {
 800d71c:	693a      	ldr	r2, [r7, #16]
 800d71e:	683b      	ldr	r3, [r7, #0]
 800d720:	429a      	cmp	r2, r3
 800d722:	d006      	beq.n	800d732 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 800d724:	6938      	ldr	r0, [r7, #16]
 800d726:	f7ff ff5b 	bl	800d5e0 <ip4_input_accept>
 800d72a:	4603      	mov	r3, r0
 800d72c:	2b00      	cmp	r3, #0
 800d72e:	d108      	bne.n	800d742 <ip4_input+0x10e>
 800d730:	e000      	b.n	800d734 <ip4_input+0x100>
            continue;
 800d732:	bf00      	nop
        NETIF_FOREACH(netif) {
 800d734:	693b      	ldr	r3, [r7, #16]
 800d736:	681b      	ldr	r3, [r3, #0]
 800d738:	613b      	str	r3, [r7, #16]
 800d73a:	693b      	ldr	r3, [r7, #16]
 800d73c:	2b00      	cmp	r3, #0
 800d73e:	d1ed      	bne.n	800d71c <ip4_input+0xe8>
 800d740:	e000      	b.n	800d744 <ip4_input+0x110>
            break;
 800d742:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800d744:	4b46      	ldr	r3, [pc, #280]	; (800d860 <ip4_input+0x22c>)
 800d746:	691b      	ldr	r3, [r3, #16]
 800d748:	6839      	ldr	r1, [r7, #0]
 800d74a:	4618      	mov	r0, r3
 800d74c:	f000 f964 	bl	800da18 <ip4_addr_isbroadcast_u32>
 800d750:	4603      	mov	r3, r0
 800d752:	2b00      	cmp	r3, #0
 800d754:	d105      	bne.n	800d762 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800d756:	4b42      	ldr	r3, [pc, #264]	; (800d860 <ip4_input+0x22c>)
 800d758:	691b      	ldr	r3, [r3, #16]
 800d75a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800d75e:	2be0      	cmp	r3, #224	; 0xe0
 800d760:	d104      	bne.n	800d76c <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800d762:	6878      	ldr	r0, [r7, #4]
 800d764:	f7f9 f902 	bl	800696c <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800d768:	2300      	movs	r3, #0
 800d76a:	e074      	b.n	800d856 <ip4_input+0x222>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800d76c:	693b      	ldr	r3, [r7, #16]
 800d76e:	2b00      	cmp	r3, #0
 800d770:	d104      	bne.n	800d77c <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800d772:	6878      	ldr	r0, [r7, #4]
 800d774:	f7f9 f8fa 	bl	800696c <pbuf_free>
    return ERR_OK;
 800d778:	2300      	movs	r3, #0
 800d77a:	e06c      	b.n	800d856 <ip4_input+0x222>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800d77c:	697b      	ldr	r3, [r7, #20]
 800d77e:	88db      	ldrh	r3, [r3, #6]
 800d780:	b29b      	uxth	r3, r3
 800d782:	461a      	mov	r2, r3
 800d784:	f64f 733f 	movw	r3, #65343	; 0xff3f
 800d788:	4013      	ands	r3, r2
 800d78a:	2b00      	cmp	r3, #0
 800d78c:	d00b      	beq.n	800d7a6 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800d78e:	6878      	ldr	r0, [r7, #4]
 800d790:	f000 fc88 	bl	800e0a4 <ip4_reass>
 800d794:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	2b00      	cmp	r3, #0
 800d79a:	d101      	bne.n	800d7a0 <ip4_input+0x16c>
      return ERR_OK;
 800d79c:	2300      	movs	r3, #0
 800d79e:	e05a      	b.n	800d856 <ip4_input+0x222>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	685b      	ldr	r3, [r3, #4]
 800d7a4:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800d7a6:	4a2e      	ldr	r2, [pc, #184]	; (800d860 <ip4_input+0x22c>)
 800d7a8:	693b      	ldr	r3, [r7, #16]
 800d7aa:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800d7ac:	4a2c      	ldr	r2, [pc, #176]	; (800d860 <ip4_input+0x22c>)
 800d7ae:	683b      	ldr	r3, [r7, #0]
 800d7b0:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800d7b2:	4a2b      	ldr	r2, [pc, #172]	; (800d860 <ip4_input+0x22c>)
 800d7b4:	697b      	ldr	r3, [r7, #20]
 800d7b6:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800d7b8:	697b      	ldr	r3, [r7, #20]
 800d7ba:	781b      	ldrb	r3, [r3, #0]
 800d7bc:	f003 030f 	and.w	r3, r3, #15
 800d7c0:	b2db      	uxtb	r3, r3
 800d7c2:	009b      	lsls	r3, r3, #2
 800d7c4:	b2db      	uxtb	r3, r3
 800d7c6:	b29a      	uxth	r2, r3
 800d7c8:	4b25      	ldr	r3, [pc, #148]	; (800d860 <ip4_input+0x22c>)
 800d7ca:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800d7cc:	89fb      	ldrh	r3, [r7, #14]
 800d7ce:	4619      	mov	r1, r3
 800d7d0:	6878      	ldr	r0, [r7, #4]
 800d7d2:	f7f9 f845 	bl	8006860 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 800d7d6:	697b      	ldr	r3, [r7, #20]
 800d7d8:	7a5b      	ldrb	r3, [r3, #9]
 800d7da:	2b01      	cmp	r3, #1
 800d7dc:	d006      	beq.n	800d7ec <ip4_input+0x1b8>
 800d7de:	2b06      	cmp	r3, #6
 800d7e0:	d109      	bne.n	800d7f6 <ip4_input+0x1c2>
        break;
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 800d7e2:	6839      	ldr	r1, [r7, #0]
 800d7e4:	6878      	ldr	r0, [r7, #4]
 800d7e6:	f7fa fedd 	bl	80085a4 <tcp_input>
        break;
 800d7ea:	e021      	b.n	800d830 <ip4_input+0x1fc>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 800d7ec:	6839      	ldr	r1, [r7, #0]
 800d7ee:	6878      	ldr	r0, [r7, #4]
 800d7f0:	f7ff fcf8 	bl	800d1e4 <icmp_input>
        break;
 800d7f4:	e01c      	b.n	800d830 <ip4_input+0x1fc>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800d7f6:	4b1a      	ldr	r3, [pc, #104]	; (800d860 <ip4_input+0x22c>)
 800d7f8:	695b      	ldr	r3, [r3, #20]
 800d7fa:	6939      	ldr	r1, [r7, #16]
 800d7fc:	4618      	mov	r0, r3
 800d7fe:	f000 f90b 	bl	800da18 <ip4_addr_isbroadcast_u32>
 800d802:	4603      	mov	r3, r0
 800d804:	2b00      	cmp	r3, #0
 800d806:	d10f      	bne.n	800d828 <ip4_input+0x1f4>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800d808:	4b15      	ldr	r3, [pc, #84]	; (800d860 <ip4_input+0x22c>)
 800d80a:	695b      	ldr	r3, [r3, #20]
 800d80c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800d810:	2be0      	cmp	r3, #224	; 0xe0
 800d812:	d009      	beq.n	800d828 <ip4_input+0x1f4>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 800d814:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800d818:	4619      	mov	r1, r3
 800d81a:	6878      	ldr	r0, [r7, #4]
 800d81c:	f7f9 f893 	bl	8006946 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800d820:	2102      	movs	r1, #2
 800d822:	6878      	ldr	r0, [r7, #4]
 800d824:	f7ff fde2 	bl	800d3ec <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 800d828:	6878      	ldr	r0, [r7, #4]
 800d82a:	f7f9 f89f 	bl	800696c <pbuf_free>
        break;
 800d82e:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800d830:	4b0b      	ldr	r3, [pc, #44]	; (800d860 <ip4_input+0x22c>)
 800d832:	2200      	movs	r2, #0
 800d834:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800d836:	4b0a      	ldr	r3, [pc, #40]	; (800d860 <ip4_input+0x22c>)
 800d838:	2200      	movs	r2, #0
 800d83a:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800d83c:	4b08      	ldr	r3, [pc, #32]	; (800d860 <ip4_input+0x22c>)
 800d83e:	2200      	movs	r2, #0
 800d840:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800d842:	4b07      	ldr	r3, [pc, #28]	; (800d860 <ip4_input+0x22c>)
 800d844:	2200      	movs	r2, #0
 800d846:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800d848:	4b05      	ldr	r3, [pc, #20]	; (800d860 <ip4_input+0x22c>)
 800d84a:	2200      	movs	r2, #0
 800d84c:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800d84e:	4b04      	ldr	r3, [pc, #16]	; (800d860 <ip4_input+0x22c>)
 800d850:	2200      	movs	r2, #0
 800d852:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800d854:	2300      	movs	r3, #0
}
 800d856:	4618      	mov	r0, r3
 800d858:	3718      	adds	r7, #24
 800d85a:	46bd      	mov	sp, r7
 800d85c:	bd80      	pop	{r7, pc}
 800d85e:	bf00      	nop
 800d860:	20003460 	.word	0x20003460
 800d864:	20008ad0 	.word	0x20008ad0

0800d868 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 800d868:	b580      	push	{r7, lr}
 800d86a:	b08a      	sub	sp, #40	; 0x28
 800d86c:	af04      	add	r7, sp, #16
 800d86e:	60f8      	str	r0, [r7, #12]
 800d870:	60b9      	str	r1, [r7, #8]
 800d872:	607a      	str	r2, [r7, #4]
 800d874:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800d876:	68bb      	ldr	r3, [r7, #8]
 800d878:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	2b00      	cmp	r3, #0
 800d87e:	d009      	beq.n	800d894 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800d880:	68bb      	ldr	r3, [r7, #8]
 800d882:	2b00      	cmp	r3, #0
 800d884:	d003      	beq.n	800d88e <ip4_output_if+0x26>
 800d886:	68bb      	ldr	r3, [r7, #8]
 800d888:	681b      	ldr	r3, [r3, #0]
 800d88a:	2b00      	cmp	r3, #0
 800d88c:	d102      	bne.n	800d894 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800d88e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d890:	3304      	adds	r3, #4
 800d892:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800d894:	78fa      	ldrb	r2, [r7, #3]
 800d896:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d898:	9302      	str	r3, [sp, #8]
 800d89a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d89e:	9301      	str	r3, [sp, #4]
 800d8a0:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d8a4:	9300      	str	r3, [sp, #0]
 800d8a6:	4613      	mov	r3, r2
 800d8a8:	687a      	ldr	r2, [r7, #4]
 800d8aa:	6979      	ldr	r1, [r7, #20]
 800d8ac:	68f8      	ldr	r0, [r7, #12]
 800d8ae:	f000 f805 	bl	800d8bc <ip4_output_if_src>
 800d8b2:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800d8b4:	4618      	mov	r0, r3
 800d8b6:	3718      	adds	r7, #24
 800d8b8:	46bd      	mov	sp, r7
 800d8ba:	bd80      	pop	{r7, pc}

0800d8bc <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 800d8bc:	b580      	push	{r7, lr}
 800d8be:	b088      	sub	sp, #32
 800d8c0:	af00      	add	r7, sp, #0
 800d8c2:	60f8      	str	r0, [r7, #12]
 800d8c4:	60b9      	str	r1, [r7, #8]
 800d8c6:	607a      	str	r2, [r7, #4]
 800d8c8:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800d8ca:	68fb      	ldr	r3, [r7, #12]
 800d8cc:	7b9b      	ldrb	r3, [r3, #14]
 800d8ce:	2b01      	cmp	r3, #1
 800d8d0:	d006      	beq.n	800d8e0 <ip4_output_if_src+0x24>
 800d8d2:	4b4b      	ldr	r3, [pc, #300]	; (800da00 <ip4_output_if_src+0x144>)
 800d8d4:	f44f 7255 	mov.w	r2, #852	; 0x354
 800d8d8:	494a      	ldr	r1, [pc, #296]	; (800da04 <ip4_output_if_src+0x148>)
 800d8da:	484b      	ldr	r0, [pc, #300]	; (800da08 <ip4_output_if_src+0x14c>)
 800d8dc:	f001 f82e 	bl	800e93c <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	2b00      	cmp	r3, #0
 800d8e4:	d060      	beq.n	800d9a8 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800d8e6:	2314      	movs	r3, #20
 800d8e8:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800d8ea:	2114      	movs	r1, #20
 800d8ec:	68f8      	ldr	r0, [r7, #12]
 800d8ee:	f7f8 ffa7 	bl	8006840 <pbuf_add_header>
 800d8f2:	4603      	mov	r3, r0
 800d8f4:	2b00      	cmp	r3, #0
 800d8f6:	d002      	beq.n	800d8fe <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800d8f8:	f06f 0301 	mvn.w	r3, #1
 800d8fc:	e07c      	b.n	800d9f8 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800d8fe:	68fb      	ldr	r3, [r7, #12]
 800d900:	685b      	ldr	r3, [r3, #4]
 800d902:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800d904:	68fb      	ldr	r3, [r7, #12]
 800d906:	895b      	ldrh	r3, [r3, #10]
 800d908:	2b13      	cmp	r3, #19
 800d90a:	d806      	bhi.n	800d91a <ip4_output_if_src+0x5e>
 800d90c:	4b3c      	ldr	r3, [pc, #240]	; (800da00 <ip4_output_if_src+0x144>)
 800d90e:	f240 3289 	movw	r2, #905	; 0x389
 800d912:	493e      	ldr	r1, [pc, #248]	; (800da0c <ip4_output_if_src+0x150>)
 800d914:	483c      	ldr	r0, [pc, #240]	; (800da08 <ip4_output_if_src+0x14c>)
 800d916:	f001 f811 	bl	800e93c <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800d91a:	69fb      	ldr	r3, [r7, #28]
 800d91c:	78fa      	ldrb	r2, [r7, #3]
 800d91e:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800d920:	69fb      	ldr	r3, [r7, #28]
 800d922:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800d926:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	681a      	ldr	r2, [r3, #0]
 800d92c:	69fb      	ldr	r3, [r7, #28]
 800d92e:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800d930:	8b7b      	ldrh	r3, [r7, #26]
 800d932:	089b      	lsrs	r3, r3, #2
 800d934:	b29b      	uxth	r3, r3
 800d936:	b2db      	uxtb	r3, r3
 800d938:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d93c:	b2da      	uxtb	r2, r3
 800d93e:	69fb      	ldr	r3, [r7, #28]
 800d940:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800d942:	69fb      	ldr	r3, [r7, #28]
 800d944:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800d948:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800d94a:	68fb      	ldr	r3, [r7, #12]
 800d94c:	891b      	ldrh	r3, [r3, #8]
 800d94e:	4618      	mov	r0, r3
 800d950:	f7f7 fd82 	bl	8005458 <lwip_htons>
 800d954:	4603      	mov	r3, r0
 800d956:	461a      	mov	r2, r3
 800d958:	69fb      	ldr	r3, [r7, #28]
 800d95a:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800d95c:	69fb      	ldr	r3, [r7, #28]
 800d95e:	2200      	movs	r2, #0
 800d960:	719a      	strb	r2, [r3, #6]
 800d962:	2200      	movs	r2, #0
 800d964:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800d966:	4b2a      	ldr	r3, [pc, #168]	; (800da10 <ip4_output_if_src+0x154>)
 800d968:	881b      	ldrh	r3, [r3, #0]
 800d96a:	4618      	mov	r0, r3
 800d96c:	f7f7 fd74 	bl	8005458 <lwip_htons>
 800d970:	4603      	mov	r3, r0
 800d972:	461a      	mov	r2, r3
 800d974:	69fb      	ldr	r3, [r7, #28]
 800d976:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800d978:	4b25      	ldr	r3, [pc, #148]	; (800da10 <ip4_output_if_src+0x154>)
 800d97a:	881b      	ldrh	r3, [r3, #0]
 800d97c:	3301      	adds	r3, #1
 800d97e:	b29a      	uxth	r2, r3
 800d980:	4b23      	ldr	r3, [pc, #140]	; (800da10 <ip4_output_if_src+0x154>)
 800d982:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800d984:	68bb      	ldr	r3, [r7, #8]
 800d986:	2b00      	cmp	r3, #0
 800d988:	d104      	bne.n	800d994 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800d98a:	4b22      	ldr	r3, [pc, #136]	; (800da14 <ip4_output_if_src+0x158>)
 800d98c:	681a      	ldr	r2, [r3, #0]
 800d98e:	69fb      	ldr	r3, [r7, #28]
 800d990:	60da      	str	r2, [r3, #12]
 800d992:	e003      	b.n	800d99c <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800d994:	68bb      	ldr	r3, [r7, #8]
 800d996:	681a      	ldr	r2, [r3, #0]
 800d998:	69fb      	ldr	r3, [r7, #28]
 800d99a:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800d99c:	69fb      	ldr	r3, [r7, #28]
 800d99e:	2200      	movs	r2, #0
 800d9a0:	729a      	strb	r2, [r3, #10]
 800d9a2:	2200      	movs	r2, #0
 800d9a4:	72da      	strb	r2, [r3, #11]
 800d9a6:	e00f      	b.n	800d9c8 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 800d9a8:	68fb      	ldr	r3, [r7, #12]
 800d9aa:	895b      	ldrh	r3, [r3, #10]
 800d9ac:	2b13      	cmp	r3, #19
 800d9ae:	d802      	bhi.n	800d9b6 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800d9b0:	f06f 0301 	mvn.w	r3, #1
 800d9b4:	e020      	b.n	800d9f8 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800d9b6:	68fb      	ldr	r3, [r7, #12]
 800d9b8:	685b      	ldr	r3, [r3, #4]
 800d9ba:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800d9bc:	69fb      	ldr	r3, [r7, #28]
 800d9be:	691b      	ldr	r3, [r3, #16]
 800d9c0:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800d9c2:	f107 0314 	add.w	r3, r7, #20
 800d9c6:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800d9c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9ca:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800d9cc:	2b00      	cmp	r3, #0
 800d9ce:	d00c      	beq.n	800d9ea <ip4_output_if_src+0x12e>
 800d9d0:	68fb      	ldr	r3, [r7, #12]
 800d9d2:	891a      	ldrh	r2, [r3, #8]
 800d9d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9d6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800d9d8:	429a      	cmp	r2, r3
 800d9da:	d906      	bls.n	800d9ea <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 800d9dc:	687a      	ldr	r2, [r7, #4]
 800d9de:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d9e0:	68f8      	ldr	r0, [r7, #12]
 800d9e2:	f000 fd4b 	bl	800e47c <ip4_frag>
 800d9e6:	4603      	mov	r3, r0
 800d9e8:	e006      	b.n	800d9f8 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800d9ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9ec:	695b      	ldr	r3, [r3, #20]
 800d9ee:	687a      	ldr	r2, [r7, #4]
 800d9f0:	68f9      	ldr	r1, [r7, #12]
 800d9f2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d9f4:	4798      	blx	r3
 800d9f6:	4603      	mov	r3, r0
}
 800d9f8:	4618      	mov	r0, r3
 800d9fa:	3720      	adds	r7, #32
 800d9fc:	46bd      	mov	sp, r7
 800d9fe:	bd80      	pop	{r7, pc}
 800da00:	08011aec 	.word	0x08011aec
 800da04:	08011b20 	.word	0x08011b20
 800da08:	08011b2c 	.word	0x08011b2c
 800da0c:	08011b54 	.word	0x08011b54
 800da10:	200001f6 	.word	0x200001f6
 800da14:	08011f18 	.word	0x08011f18

0800da18 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800da18:	b480      	push	{r7}
 800da1a:	b085      	sub	sp, #20
 800da1c:	af00      	add	r7, sp, #0
 800da1e:	6078      	str	r0, [r7, #4]
 800da20:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da2c:	d002      	beq.n	800da34 <ip4_addr_isbroadcast_u32+0x1c>
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	2b00      	cmp	r3, #0
 800da32:	d101      	bne.n	800da38 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800da34:	2301      	movs	r3, #1
 800da36:	e02a      	b.n	800da8e <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800da38:	683b      	ldr	r3, [r7, #0]
 800da3a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800da3e:	f003 0302 	and.w	r3, r3, #2
 800da42:	2b00      	cmp	r3, #0
 800da44:	d101      	bne.n	800da4a <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800da46:	2300      	movs	r3, #0
 800da48:	e021      	b.n	800da8e <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800da4a:	683b      	ldr	r3, [r7, #0]
 800da4c:	3304      	adds	r3, #4
 800da4e:	681b      	ldr	r3, [r3, #0]
 800da50:	687a      	ldr	r2, [r7, #4]
 800da52:	429a      	cmp	r2, r3
 800da54:	d101      	bne.n	800da5a <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800da56:	2300      	movs	r3, #0
 800da58:	e019      	b.n	800da8e <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800da5a:	68fa      	ldr	r2, [r7, #12]
 800da5c:	683b      	ldr	r3, [r7, #0]
 800da5e:	3304      	adds	r3, #4
 800da60:	681b      	ldr	r3, [r3, #0]
 800da62:	405a      	eors	r2, r3
 800da64:	683b      	ldr	r3, [r7, #0]
 800da66:	3308      	adds	r3, #8
 800da68:	681b      	ldr	r3, [r3, #0]
 800da6a:	4013      	ands	r3, r2
 800da6c:	2b00      	cmp	r3, #0
 800da6e:	d10d      	bne.n	800da8c <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800da70:	683b      	ldr	r3, [r7, #0]
 800da72:	3308      	adds	r3, #8
 800da74:	681b      	ldr	r3, [r3, #0]
 800da76:	43da      	mvns	r2, r3
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800da7c:	683b      	ldr	r3, [r7, #0]
 800da7e:	3308      	adds	r3, #8
 800da80:	681b      	ldr	r3, [r3, #0]
 800da82:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800da84:	429a      	cmp	r2, r3
 800da86:	d101      	bne.n	800da8c <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800da88:	2301      	movs	r3, #1
 800da8a:	e000      	b.n	800da8e <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800da8c:	2300      	movs	r3, #0
  }
}
 800da8e:	4618      	mov	r0, r3
 800da90:	3714      	adds	r7, #20
 800da92:	46bd      	mov	sp, r7
 800da94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da98:	4770      	bx	lr
	...

0800da9c <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800da9c:	b580      	push	{r7, lr}
 800da9e:	b084      	sub	sp, #16
 800daa0:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800daa2:	2300      	movs	r3, #0
 800daa4:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800daa6:	4b12      	ldr	r3, [pc, #72]	; (800daf0 <ip_reass_tmr+0x54>)
 800daa8:	681b      	ldr	r3, [r3, #0]
 800daaa:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800daac:	e018      	b.n	800dae0 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800daae:	68fb      	ldr	r3, [r7, #12]
 800dab0:	7fdb      	ldrb	r3, [r3, #31]
 800dab2:	2b00      	cmp	r3, #0
 800dab4:	d00b      	beq.n	800dace <ip_reass_tmr+0x32>
      r->timer--;
 800dab6:	68fb      	ldr	r3, [r7, #12]
 800dab8:	7fdb      	ldrb	r3, [r3, #31]
 800daba:	3b01      	subs	r3, #1
 800dabc:	b2da      	uxtb	r2, r3
 800dabe:	68fb      	ldr	r3, [r7, #12]
 800dac0:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 800dac2:	68fb      	ldr	r3, [r7, #12]
 800dac4:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800dac6:	68fb      	ldr	r3, [r7, #12]
 800dac8:	681b      	ldr	r3, [r3, #0]
 800daca:	60fb      	str	r3, [r7, #12]
 800dacc:	e008      	b.n	800dae0 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800dace:	68fb      	ldr	r3, [r7, #12]
 800dad0:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800dad2:	68fb      	ldr	r3, [r7, #12]
 800dad4:	681b      	ldr	r3, [r3, #0]
 800dad6:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800dad8:	68b9      	ldr	r1, [r7, #8]
 800dada:	6878      	ldr	r0, [r7, #4]
 800dadc:	f000 f80a 	bl	800daf4 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800dae0:	68fb      	ldr	r3, [r7, #12]
 800dae2:	2b00      	cmp	r3, #0
 800dae4:	d1e3      	bne.n	800daae <ip_reass_tmr+0x12>
    }
  }
}
 800dae6:	bf00      	nop
 800dae8:	3710      	adds	r7, #16
 800daea:	46bd      	mov	sp, r7
 800daec:	bd80      	pop	{r7, pc}
 800daee:	bf00      	nop
 800daf0:	200001f8 	.word	0x200001f8

0800daf4 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800daf4:	b580      	push	{r7, lr}
 800daf6:	b088      	sub	sp, #32
 800daf8:	af00      	add	r7, sp, #0
 800dafa:	6078      	str	r0, [r7, #4]
 800dafc:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800dafe:	2300      	movs	r3, #0
 800db00:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800db02:	683a      	ldr	r2, [r7, #0]
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	429a      	cmp	r2, r3
 800db08:	d105      	bne.n	800db16 <ip_reass_free_complete_datagram+0x22>
 800db0a:	4b45      	ldr	r3, [pc, #276]	; (800dc20 <ip_reass_free_complete_datagram+0x12c>)
 800db0c:	22ab      	movs	r2, #171	; 0xab
 800db0e:	4945      	ldr	r1, [pc, #276]	; (800dc24 <ip_reass_free_complete_datagram+0x130>)
 800db10:	4845      	ldr	r0, [pc, #276]	; (800dc28 <ip_reass_free_complete_datagram+0x134>)
 800db12:	f000 ff13 	bl	800e93c <iprintf>
  if (prev != NULL) {
 800db16:	683b      	ldr	r3, [r7, #0]
 800db18:	2b00      	cmp	r3, #0
 800db1a:	d00a      	beq.n	800db32 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800db1c:	683b      	ldr	r3, [r7, #0]
 800db1e:	681b      	ldr	r3, [r3, #0]
 800db20:	687a      	ldr	r2, [r7, #4]
 800db22:	429a      	cmp	r2, r3
 800db24:	d005      	beq.n	800db32 <ip_reass_free_complete_datagram+0x3e>
 800db26:	4b3e      	ldr	r3, [pc, #248]	; (800dc20 <ip_reass_free_complete_datagram+0x12c>)
 800db28:	22ad      	movs	r2, #173	; 0xad
 800db2a:	4940      	ldr	r1, [pc, #256]	; (800dc2c <ip_reass_free_complete_datagram+0x138>)
 800db2c:	483e      	ldr	r0, [pc, #248]	; (800dc28 <ip_reass_free_complete_datagram+0x134>)
 800db2e:	f000 ff05 	bl	800e93c <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	685b      	ldr	r3, [r3, #4]
 800db36:	685b      	ldr	r3, [r3, #4]
 800db38:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800db3a:	697b      	ldr	r3, [r7, #20]
 800db3c:	889b      	ldrh	r3, [r3, #4]
 800db3e:	b29b      	uxth	r3, r3
 800db40:	2b00      	cmp	r3, #0
 800db42:	d12a      	bne.n	800db9a <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	685b      	ldr	r3, [r3, #4]
 800db48:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800db4a:	697b      	ldr	r3, [r7, #20]
 800db4c:	681a      	ldr	r2, [r3, #0]
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800db52:	69bb      	ldr	r3, [r7, #24]
 800db54:	6858      	ldr	r0, [r3, #4]
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	3308      	adds	r3, #8
 800db5a:	2214      	movs	r2, #20
 800db5c:	4619      	mov	r1, r3
 800db5e:	f000 feda 	bl	800e916 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800db62:	2101      	movs	r1, #1
 800db64:	69b8      	ldr	r0, [r7, #24]
 800db66:	f7ff fc51 	bl	800d40c <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800db6a:	69b8      	ldr	r0, [r7, #24]
 800db6c:	f7f8 ff86 	bl	8006a7c <pbuf_clen>
 800db70:	4603      	mov	r3, r0
 800db72:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800db74:	8bfa      	ldrh	r2, [r7, #30]
 800db76:	8a7b      	ldrh	r3, [r7, #18]
 800db78:	4413      	add	r3, r2
 800db7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800db7e:	db05      	blt.n	800db8c <ip_reass_free_complete_datagram+0x98>
 800db80:	4b27      	ldr	r3, [pc, #156]	; (800dc20 <ip_reass_free_complete_datagram+0x12c>)
 800db82:	22bc      	movs	r2, #188	; 0xbc
 800db84:	492a      	ldr	r1, [pc, #168]	; (800dc30 <ip_reass_free_complete_datagram+0x13c>)
 800db86:	4828      	ldr	r0, [pc, #160]	; (800dc28 <ip_reass_free_complete_datagram+0x134>)
 800db88:	f000 fed8 	bl	800e93c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800db8c:	8bfa      	ldrh	r2, [r7, #30]
 800db8e:	8a7b      	ldrh	r3, [r7, #18]
 800db90:	4413      	add	r3, r2
 800db92:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800db94:	69b8      	ldr	r0, [r7, #24]
 800db96:	f7f8 fee9 	bl	800696c <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	685b      	ldr	r3, [r3, #4]
 800db9e:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800dba0:	e01f      	b.n	800dbe2 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800dba2:	69bb      	ldr	r3, [r7, #24]
 800dba4:	685b      	ldr	r3, [r3, #4]
 800dba6:	617b      	str	r3, [r7, #20]
    pcur = p;
 800dba8:	69bb      	ldr	r3, [r7, #24]
 800dbaa:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800dbac:	697b      	ldr	r3, [r7, #20]
 800dbae:	681b      	ldr	r3, [r3, #0]
 800dbb0:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800dbb2:	68f8      	ldr	r0, [r7, #12]
 800dbb4:	f7f8 ff62 	bl	8006a7c <pbuf_clen>
 800dbb8:	4603      	mov	r3, r0
 800dbba:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800dbbc:	8bfa      	ldrh	r2, [r7, #30]
 800dbbe:	8a7b      	ldrh	r3, [r7, #18]
 800dbc0:	4413      	add	r3, r2
 800dbc2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dbc6:	db05      	blt.n	800dbd4 <ip_reass_free_complete_datagram+0xe0>
 800dbc8:	4b15      	ldr	r3, [pc, #84]	; (800dc20 <ip_reass_free_complete_datagram+0x12c>)
 800dbca:	22cc      	movs	r2, #204	; 0xcc
 800dbcc:	4918      	ldr	r1, [pc, #96]	; (800dc30 <ip_reass_free_complete_datagram+0x13c>)
 800dbce:	4816      	ldr	r0, [pc, #88]	; (800dc28 <ip_reass_free_complete_datagram+0x134>)
 800dbd0:	f000 feb4 	bl	800e93c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800dbd4:	8bfa      	ldrh	r2, [r7, #30]
 800dbd6:	8a7b      	ldrh	r3, [r7, #18]
 800dbd8:	4413      	add	r3, r2
 800dbda:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800dbdc:	68f8      	ldr	r0, [r7, #12]
 800dbde:	f7f8 fec5 	bl	800696c <pbuf_free>
  while (p != NULL) {
 800dbe2:	69bb      	ldr	r3, [r7, #24]
 800dbe4:	2b00      	cmp	r3, #0
 800dbe6:	d1dc      	bne.n	800dba2 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800dbe8:	6839      	ldr	r1, [r7, #0]
 800dbea:	6878      	ldr	r0, [r7, #4]
 800dbec:	f000 f8c2 	bl	800dd74 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800dbf0:	4b10      	ldr	r3, [pc, #64]	; (800dc34 <ip_reass_free_complete_datagram+0x140>)
 800dbf2:	881b      	ldrh	r3, [r3, #0]
 800dbf4:	8bfa      	ldrh	r2, [r7, #30]
 800dbf6:	429a      	cmp	r2, r3
 800dbf8:	d905      	bls.n	800dc06 <ip_reass_free_complete_datagram+0x112>
 800dbfa:	4b09      	ldr	r3, [pc, #36]	; (800dc20 <ip_reass_free_complete_datagram+0x12c>)
 800dbfc:	22d2      	movs	r2, #210	; 0xd2
 800dbfe:	490e      	ldr	r1, [pc, #56]	; (800dc38 <ip_reass_free_complete_datagram+0x144>)
 800dc00:	4809      	ldr	r0, [pc, #36]	; (800dc28 <ip_reass_free_complete_datagram+0x134>)
 800dc02:	f000 fe9b 	bl	800e93c <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800dc06:	4b0b      	ldr	r3, [pc, #44]	; (800dc34 <ip_reass_free_complete_datagram+0x140>)
 800dc08:	881a      	ldrh	r2, [r3, #0]
 800dc0a:	8bfb      	ldrh	r3, [r7, #30]
 800dc0c:	1ad3      	subs	r3, r2, r3
 800dc0e:	b29a      	uxth	r2, r3
 800dc10:	4b08      	ldr	r3, [pc, #32]	; (800dc34 <ip_reass_free_complete_datagram+0x140>)
 800dc12:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800dc14:	8bfb      	ldrh	r3, [r7, #30]
}
 800dc16:	4618      	mov	r0, r3
 800dc18:	3720      	adds	r7, #32
 800dc1a:	46bd      	mov	sp, r7
 800dc1c:	bd80      	pop	{r7, pc}
 800dc1e:	bf00      	nop
 800dc20:	08011b84 	.word	0x08011b84
 800dc24:	08011bc0 	.word	0x08011bc0
 800dc28:	08011bcc 	.word	0x08011bcc
 800dc2c:	08011bf4 	.word	0x08011bf4
 800dc30:	08011c08 	.word	0x08011c08
 800dc34:	200001fc 	.word	0x200001fc
 800dc38:	08011c28 	.word	0x08011c28

0800dc3c <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800dc3c:	b580      	push	{r7, lr}
 800dc3e:	b08a      	sub	sp, #40	; 0x28
 800dc40:	af00      	add	r7, sp, #0
 800dc42:	6078      	str	r0, [r7, #4]
 800dc44:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800dc46:	2300      	movs	r3, #0
 800dc48:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800dc4a:	2300      	movs	r3, #0
 800dc4c:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800dc4e:	2300      	movs	r3, #0
 800dc50:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800dc52:	2300      	movs	r3, #0
 800dc54:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800dc56:	2300      	movs	r3, #0
 800dc58:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800dc5a:	4b28      	ldr	r3, [pc, #160]	; (800dcfc <ip_reass_remove_oldest_datagram+0xc0>)
 800dc5c:	681b      	ldr	r3, [r3, #0]
 800dc5e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800dc60:	e030      	b.n	800dcc4 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800dc62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc64:	695a      	ldr	r2, [r3, #20]
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	68db      	ldr	r3, [r3, #12]
 800dc6a:	429a      	cmp	r2, r3
 800dc6c:	d10c      	bne.n	800dc88 <ip_reass_remove_oldest_datagram+0x4c>
 800dc6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc70:	699a      	ldr	r2, [r3, #24]
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	691b      	ldr	r3, [r3, #16]
 800dc76:	429a      	cmp	r2, r3
 800dc78:	d106      	bne.n	800dc88 <ip_reass_remove_oldest_datagram+0x4c>
 800dc7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc7c:	899a      	ldrh	r2, [r3, #12]
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	889b      	ldrh	r3, [r3, #4]
 800dc82:	b29b      	uxth	r3, r3
 800dc84:	429a      	cmp	r2, r3
 800dc86:	d014      	beq.n	800dcb2 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800dc88:	693b      	ldr	r3, [r7, #16]
 800dc8a:	3301      	adds	r3, #1
 800dc8c:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800dc8e:	6a3b      	ldr	r3, [r7, #32]
 800dc90:	2b00      	cmp	r3, #0
 800dc92:	d104      	bne.n	800dc9e <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800dc94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc96:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800dc98:	69fb      	ldr	r3, [r7, #28]
 800dc9a:	61bb      	str	r3, [r7, #24]
 800dc9c:	e009      	b.n	800dcb2 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800dc9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dca0:	7fda      	ldrb	r2, [r3, #31]
 800dca2:	6a3b      	ldr	r3, [r7, #32]
 800dca4:	7fdb      	ldrb	r3, [r3, #31]
 800dca6:	429a      	cmp	r2, r3
 800dca8:	d803      	bhi.n	800dcb2 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800dcaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcac:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800dcae:	69fb      	ldr	r3, [r7, #28]
 800dcb0:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800dcb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcb4:	681b      	ldr	r3, [r3, #0]
 800dcb6:	2b00      	cmp	r3, #0
 800dcb8:	d001      	beq.n	800dcbe <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800dcba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcbc:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800dcbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcc0:	681b      	ldr	r3, [r3, #0]
 800dcc2:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800dcc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcc6:	2b00      	cmp	r3, #0
 800dcc8:	d1cb      	bne.n	800dc62 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800dcca:	6a3b      	ldr	r3, [r7, #32]
 800dccc:	2b00      	cmp	r3, #0
 800dcce:	d008      	beq.n	800dce2 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800dcd0:	69b9      	ldr	r1, [r7, #24]
 800dcd2:	6a38      	ldr	r0, [r7, #32]
 800dcd4:	f7ff ff0e 	bl	800daf4 <ip_reass_free_complete_datagram>
 800dcd8:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800dcda:	697a      	ldr	r2, [r7, #20]
 800dcdc:	68fb      	ldr	r3, [r7, #12]
 800dcde:	4413      	add	r3, r2
 800dce0:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800dce2:	697a      	ldr	r2, [r7, #20]
 800dce4:	683b      	ldr	r3, [r7, #0]
 800dce6:	429a      	cmp	r2, r3
 800dce8:	da02      	bge.n	800dcf0 <ip_reass_remove_oldest_datagram+0xb4>
 800dcea:	693b      	ldr	r3, [r7, #16]
 800dcec:	2b01      	cmp	r3, #1
 800dcee:	dcac      	bgt.n	800dc4a <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800dcf0:	697b      	ldr	r3, [r7, #20]
}
 800dcf2:	4618      	mov	r0, r3
 800dcf4:	3728      	adds	r7, #40	; 0x28
 800dcf6:	46bd      	mov	sp, r7
 800dcf8:	bd80      	pop	{r7, pc}
 800dcfa:	bf00      	nop
 800dcfc:	200001f8 	.word	0x200001f8

0800dd00 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800dd00:	b580      	push	{r7, lr}
 800dd02:	b084      	sub	sp, #16
 800dd04:	af00      	add	r7, sp, #0
 800dd06:	6078      	str	r0, [r7, #4]
 800dd08:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800dd0a:	2003      	movs	r0, #3
 800dd0c:	f7f7 fff8 	bl	8005d00 <memp_malloc>
 800dd10:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800dd12:	68fb      	ldr	r3, [r7, #12]
 800dd14:	2b00      	cmp	r3, #0
 800dd16:	d110      	bne.n	800dd3a <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800dd18:	6839      	ldr	r1, [r7, #0]
 800dd1a:	6878      	ldr	r0, [r7, #4]
 800dd1c:	f7ff ff8e 	bl	800dc3c <ip_reass_remove_oldest_datagram>
 800dd20:	4602      	mov	r2, r0
 800dd22:	683b      	ldr	r3, [r7, #0]
 800dd24:	4293      	cmp	r3, r2
 800dd26:	dc03      	bgt.n	800dd30 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800dd28:	2003      	movs	r0, #3
 800dd2a:	f7f7 ffe9 	bl	8005d00 <memp_malloc>
 800dd2e:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800dd30:	68fb      	ldr	r3, [r7, #12]
 800dd32:	2b00      	cmp	r3, #0
 800dd34:	d101      	bne.n	800dd3a <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 800dd36:	2300      	movs	r3, #0
 800dd38:	e016      	b.n	800dd68 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800dd3a:	2220      	movs	r2, #32
 800dd3c:	2100      	movs	r1, #0
 800dd3e:	68f8      	ldr	r0, [r7, #12]
 800dd40:	f000 fdf4 	bl	800e92c <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800dd44:	68fb      	ldr	r3, [r7, #12]
 800dd46:	220f      	movs	r2, #15
 800dd48:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800dd4a:	4b09      	ldr	r3, [pc, #36]	; (800dd70 <ip_reass_enqueue_new_datagram+0x70>)
 800dd4c:	681a      	ldr	r2, [r3, #0]
 800dd4e:	68fb      	ldr	r3, [r7, #12]
 800dd50:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800dd52:	4a07      	ldr	r2, [pc, #28]	; (800dd70 <ip_reass_enqueue_new_datagram+0x70>)
 800dd54:	68fb      	ldr	r3, [r7, #12]
 800dd56:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800dd58:	68fb      	ldr	r3, [r7, #12]
 800dd5a:	3308      	adds	r3, #8
 800dd5c:	2214      	movs	r2, #20
 800dd5e:	6879      	ldr	r1, [r7, #4]
 800dd60:	4618      	mov	r0, r3
 800dd62:	f000 fdd8 	bl	800e916 <memcpy>
  return ipr;
 800dd66:	68fb      	ldr	r3, [r7, #12]
}
 800dd68:	4618      	mov	r0, r3
 800dd6a:	3710      	adds	r7, #16
 800dd6c:	46bd      	mov	sp, r7
 800dd6e:	bd80      	pop	{r7, pc}
 800dd70:	200001f8 	.word	0x200001f8

0800dd74 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800dd74:	b580      	push	{r7, lr}
 800dd76:	b082      	sub	sp, #8
 800dd78:	af00      	add	r7, sp, #0
 800dd7a:	6078      	str	r0, [r7, #4]
 800dd7c:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800dd7e:	4b10      	ldr	r3, [pc, #64]	; (800ddc0 <ip_reass_dequeue_datagram+0x4c>)
 800dd80:	681b      	ldr	r3, [r3, #0]
 800dd82:	687a      	ldr	r2, [r7, #4]
 800dd84:	429a      	cmp	r2, r3
 800dd86:	d104      	bne.n	800dd92 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	681b      	ldr	r3, [r3, #0]
 800dd8c:	4a0c      	ldr	r2, [pc, #48]	; (800ddc0 <ip_reass_dequeue_datagram+0x4c>)
 800dd8e:	6013      	str	r3, [r2, #0]
 800dd90:	e00d      	b.n	800ddae <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800dd92:	683b      	ldr	r3, [r7, #0]
 800dd94:	2b00      	cmp	r3, #0
 800dd96:	d106      	bne.n	800dda6 <ip_reass_dequeue_datagram+0x32>
 800dd98:	4b0a      	ldr	r3, [pc, #40]	; (800ddc4 <ip_reass_dequeue_datagram+0x50>)
 800dd9a:	f240 1245 	movw	r2, #325	; 0x145
 800dd9e:	490a      	ldr	r1, [pc, #40]	; (800ddc8 <ip_reass_dequeue_datagram+0x54>)
 800dda0:	480a      	ldr	r0, [pc, #40]	; (800ddcc <ip_reass_dequeue_datagram+0x58>)
 800dda2:	f000 fdcb 	bl	800e93c <iprintf>
    prev->next = ipr->next;
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	681a      	ldr	r2, [r3, #0]
 800ddaa:	683b      	ldr	r3, [r7, #0]
 800ddac:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800ddae:	6879      	ldr	r1, [r7, #4]
 800ddb0:	2003      	movs	r0, #3
 800ddb2:	f7f7 fff1 	bl	8005d98 <memp_free>
}
 800ddb6:	bf00      	nop
 800ddb8:	3708      	adds	r7, #8
 800ddba:	46bd      	mov	sp, r7
 800ddbc:	bd80      	pop	{r7, pc}
 800ddbe:	bf00      	nop
 800ddc0:	200001f8 	.word	0x200001f8
 800ddc4:	08011b84 	.word	0x08011b84
 800ddc8:	08011c4c 	.word	0x08011c4c
 800ddcc:	08011bcc 	.word	0x08011bcc

0800ddd0 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800ddd0:	b580      	push	{r7, lr}
 800ddd2:	b08c      	sub	sp, #48	; 0x30
 800ddd4:	af00      	add	r7, sp, #0
 800ddd6:	60f8      	str	r0, [r7, #12]
 800ddd8:	60b9      	str	r1, [r7, #8]
 800ddda:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 800dddc:	2300      	movs	r3, #0
 800ddde:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800dde0:	2301      	movs	r3, #1
 800dde2:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 800dde4:	68bb      	ldr	r3, [r7, #8]
 800dde6:	685b      	ldr	r3, [r3, #4]
 800dde8:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800ddea:	69fb      	ldr	r3, [r7, #28]
 800ddec:	885b      	ldrh	r3, [r3, #2]
 800ddee:	b29b      	uxth	r3, r3
 800ddf0:	4618      	mov	r0, r3
 800ddf2:	f7f7 fb31 	bl	8005458 <lwip_htons>
 800ddf6:	4603      	mov	r3, r0
 800ddf8:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 800ddfa:	69fb      	ldr	r3, [r7, #28]
 800ddfc:	781b      	ldrb	r3, [r3, #0]
 800ddfe:	f003 030f 	and.w	r3, r3, #15
 800de02:	b2db      	uxtb	r3, r3
 800de04:	009b      	lsls	r3, r3, #2
 800de06:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 800de08:	7e7b      	ldrb	r3, [r7, #25]
 800de0a:	b29b      	uxth	r3, r3
 800de0c:	8b7a      	ldrh	r2, [r7, #26]
 800de0e:	429a      	cmp	r2, r3
 800de10:	d202      	bcs.n	800de18 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800de12:	f04f 33ff 	mov.w	r3, #4294967295
 800de16:	e135      	b.n	800e084 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 800de18:	7e7b      	ldrb	r3, [r7, #25]
 800de1a:	b29b      	uxth	r3, r3
 800de1c:	8b7a      	ldrh	r2, [r7, #26]
 800de1e:	1ad3      	subs	r3, r2, r3
 800de20:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 800de22:	69fb      	ldr	r3, [r7, #28]
 800de24:	88db      	ldrh	r3, [r3, #6]
 800de26:	b29b      	uxth	r3, r3
 800de28:	4618      	mov	r0, r3
 800de2a:	f7f7 fb15 	bl	8005458 <lwip_htons>
 800de2e:	4603      	mov	r3, r0
 800de30:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800de34:	b29b      	uxth	r3, r3
 800de36:	00db      	lsls	r3, r3, #3
 800de38:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 800de3a:	68bb      	ldr	r3, [r7, #8]
 800de3c:	685b      	ldr	r3, [r3, #4]
 800de3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 800de40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de42:	2200      	movs	r2, #0
 800de44:	701a      	strb	r2, [r3, #0]
 800de46:	2200      	movs	r2, #0
 800de48:	705a      	strb	r2, [r3, #1]
 800de4a:	2200      	movs	r2, #0
 800de4c:	709a      	strb	r2, [r3, #2]
 800de4e:	2200      	movs	r2, #0
 800de50:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800de52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de54:	8afa      	ldrh	r2, [r7, #22]
 800de56:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 800de58:	8afa      	ldrh	r2, [r7, #22]
 800de5a:	8b7b      	ldrh	r3, [r7, #26]
 800de5c:	4413      	add	r3, r2
 800de5e:	b29a      	uxth	r2, r3
 800de60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de62:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 800de64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de66:	88db      	ldrh	r3, [r3, #6]
 800de68:	b29b      	uxth	r3, r3
 800de6a:	8afa      	ldrh	r2, [r7, #22]
 800de6c:	429a      	cmp	r2, r3
 800de6e:	d902      	bls.n	800de76 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800de70:	f04f 33ff 	mov.w	r3, #4294967295
 800de74:	e106      	b.n	800e084 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800de76:	68fb      	ldr	r3, [r7, #12]
 800de78:	685b      	ldr	r3, [r3, #4]
 800de7a:	627b      	str	r3, [r7, #36]	; 0x24
 800de7c:	e068      	b.n	800df50 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 800de7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de80:	685b      	ldr	r3, [r3, #4]
 800de82:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 800de84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de86:	889b      	ldrh	r3, [r3, #4]
 800de88:	b29a      	uxth	r2, r3
 800de8a:	693b      	ldr	r3, [r7, #16]
 800de8c:	889b      	ldrh	r3, [r3, #4]
 800de8e:	b29b      	uxth	r3, r3
 800de90:	429a      	cmp	r2, r3
 800de92:	d235      	bcs.n	800df00 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800de94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800de98:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800de9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de9c:	2b00      	cmp	r3, #0
 800de9e:	d020      	beq.n	800dee2 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800dea0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dea2:	889b      	ldrh	r3, [r3, #4]
 800dea4:	b29a      	uxth	r2, r3
 800dea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dea8:	88db      	ldrh	r3, [r3, #6]
 800deaa:	b29b      	uxth	r3, r3
 800deac:	429a      	cmp	r2, r3
 800deae:	d307      	bcc.n	800dec0 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 800deb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800deb2:	88db      	ldrh	r3, [r3, #6]
 800deb4:	b29a      	uxth	r2, r3
 800deb6:	693b      	ldr	r3, [r7, #16]
 800deb8:	889b      	ldrh	r3, [r3, #4]
 800deba:	b29b      	uxth	r3, r3
 800debc:	429a      	cmp	r2, r3
 800debe:	d902      	bls.n	800dec6 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800dec0:	f04f 33ff 	mov.w	r3, #4294967295
 800dec4:	e0de      	b.n	800e084 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800dec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dec8:	68ba      	ldr	r2, [r7, #8]
 800deca:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800decc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dece:	88db      	ldrh	r3, [r3, #6]
 800ded0:	b29a      	uxth	r2, r3
 800ded2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ded4:	889b      	ldrh	r3, [r3, #4]
 800ded6:	b29b      	uxth	r3, r3
 800ded8:	429a      	cmp	r2, r3
 800deda:	d03d      	beq.n	800df58 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800dedc:	2300      	movs	r3, #0
 800dede:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800dee0:	e03a      	b.n	800df58 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 800dee2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dee4:	88db      	ldrh	r3, [r3, #6]
 800dee6:	b29a      	uxth	r2, r3
 800dee8:	693b      	ldr	r3, [r7, #16]
 800deea:	889b      	ldrh	r3, [r3, #4]
 800deec:	b29b      	uxth	r3, r3
 800deee:	429a      	cmp	r2, r3
 800def0:	d902      	bls.n	800def8 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800def2:	f04f 33ff 	mov.w	r3, #4294967295
 800def6:	e0c5      	b.n	800e084 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 800def8:	68fb      	ldr	r3, [r7, #12]
 800defa:	68ba      	ldr	r2, [r7, #8]
 800defc:	605a      	str	r2, [r3, #4]
      break;
 800defe:	e02b      	b.n	800df58 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 800df00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df02:	889b      	ldrh	r3, [r3, #4]
 800df04:	b29a      	uxth	r2, r3
 800df06:	693b      	ldr	r3, [r7, #16]
 800df08:	889b      	ldrh	r3, [r3, #4]
 800df0a:	b29b      	uxth	r3, r3
 800df0c:	429a      	cmp	r2, r3
 800df0e:	d102      	bne.n	800df16 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800df10:	f04f 33ff 	mov.w	r3, #4294967295
 800df14:	e0b6      	b.n	800e084 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800df16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df18:	889b      	ldrh	r3, [r3, #4]
 800df1a:	b29a      	uxth	r2, r3
 800df1c:	693b      	ldr	r3, [r7, #16]
 800df1e:	88db      	ldrh	r3, [r3, #6]
 800df20:	b29b      	uxth	r3, r3
 800df22:	429a      	cmp	r2, r3
 800df24:	d202      	bcs.n	800df2c <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800df26:	f04f 33ff 	mov.w	r3, #4294967295
 800df2a:	e0ab      	b.n	800e084 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800df2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df2e:	2b00      	cmp	r3, #0
 800df30:	d009      	beq.n	800df46 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 800df32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df34:	88db      	ldrh	r3, [r3, #6]
 800df36:	b29a      	uxth	r2, r3
 800df38:	693b      	ldr	r3, [r7, #16]
 800df3a:	889b      	ldrh	r3, [r3, #4]
 800df3c:	b29b      	uxth	r3, r3
 800df3e:	429a      	cmp	r2, r3
 800df40:	d001      	beq.n	800df46 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800df42:	2300      	movs	r3, #0
 800df44:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800df46:	693b      	ldr	r3, [r7, #16]
 800df48:	681b      	ldr	r3, [r3, #0]
 800df4a:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 800df4c:	693b      	ldr	r3, [r7, #16]
 800df4e:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 800df50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df52:	2b00      	cmp	r3, #0
 800df54:	d193      	bne.n	800de7e <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 800df56:	e000      	b.n	800df5a <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 800df58:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800df5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df5c:	2b00      	cmp	r3, #0
 800df5e:	d12d      	bne.n	800dfbc <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 800df60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df62:	2b00      	cmp	r3, #0
 800df64:	d01c      	beq.n	800dfa0 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800df66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df68:	88db      	ldrh	r3, [r3, #6]
 800df6a:	b29a      	uxth	r2, r3
 800df6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df6e:	889b      	ldrh	r3, [r3, #4]
 800df70:	b29b      	uxth	r3, r3
 800df72:	429a      	cmp	r2, r3
 800df74:	d906      	bls.n	800df84 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 800df76:	4b45      	ldr	r3, [pc, #276]	; (800e08c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800df78:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 800df7c:	4944      	ldr	r1, [pc, #272]	; (800e090 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800df7e:	4845      	ldr	r0, [pc, #276]	; (800e094 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800df80:	f000 fcdc 	bl	800e93c <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800df84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df86:	68ba      	ldr	r2, [r7, #8]
 800df88:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800df8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df8c:	88db      	ldrh	r3, [r3, #6]
 800df8e:	b29a      	uxth	r2, r3
 800df90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df92:	889b      	ldrh	r3, [r3, #4]
 800df94:	b29b      	uxth	r3, r3
 800df96:	429a      	cmp	r2, r3
 800df98:	d010      	beq.n	800dfbc <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 800df9a:	2300      	movs	r3, #0
 800df9c:	623b      	str	r3, [r7, #32]
 800df9e:	e00d      	b.n	800dfbc <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800dfa0:	68fb      	ldr	r3, [r7, #12]
 800dfa2:	685b      	ldr	r3, [r3, #4]
 800dfa4:	2b00      	cmp	r3, #0
 800dfa6:	d006      	beq.n	800dfb6 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 800dfa8:	4b38      	ldr	r3, [pc, #224]	; (800e08c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800dfaa:	f240 12bf 	movw	r2, #447	; 0x1bf
 800dfae:	493a      	ldr	r1, [pc, #232]	; (800e098 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800dfb0:	4838      	ldr	r0, [pc, #224]	; (800e094 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800dfb2:	f000 fcc3 	bl	800e93c <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800dfb6:	68fb      	ldr	r3, [r7, #12]
 800dfb8:	68ba      	ldr	r2, [r7, #8]
 800dfba:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	2b00      	cmp	r3, #0
 800dfc0:	d105      	bne.n	800dfce <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 800dfc2:	68fb      	ldr	r3, [r7, #12]
 800dfc4:	7f9b      	ldrb	r3, [r3, #30]
 800dfc6:	f003 0301 	and.w	r3, r3, #1
 800dfca:	2b00      	cmp	r3, #0
 800dfcc:	d059      	beq.n	800e082 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 800dfce:	6a3b      	ldr	r3, [r7, #32]
 800dfd0:	2b00      	cmp	r3, #0
 800dfd2:	d04f      	beq.n	800e074 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 800dfd4:	68fb      	ldr	r3, [r7, #12]
 800dfd6:	685b      	ldr	r3, [r3, #4]
 800dfd8:	2b00      	cmp	r3, #0
 800dfda:	d006      	beq.n	800dfea <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 800dfdc:	68fb      	ldr	r3, [r7, #12]
 800dfde:	685b      	ldr	r3, [r3, #4]
 800dfe0:	685b      	ldr	r3, [r3, #4]
 800dfe2:	889b      	ldrh	r3, [r3, #4]
 800dfe4:	b29b      	uxth	r3, r3
 800dfe6:	2b00      	cmp	r3, #0
 800dfe8:	d002      	beq.n	800dff0 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 800dfea:	2300      	movs	r3, #0
 800dfec:	623b      	str	r3, [r7, #32]
 800dfee:	e041      	b.n	800e074 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800dff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dff2:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 800dff4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dff6:	681b      	ldr	r3, [r3, #0]
 800dff8:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800dffa:	e012      	b.n	800e022 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 800dffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dffe:	685b      	ldr	r3, [r3, #4]
 800e000:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 800e002:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e004:	88db      	ldrh	r3, [r3, #6]
 800e006:	b29a      	uxth	r2, r3
 800e008:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e00a:	889b      	ldrh	r3, [r3, #4]
 800e00c:	b29b      	uxth	r3, r3
 800e00e:	429a      	cmp	r2, r3
 800e010:	d002      	beq.n	800e018 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 800e012:	2300      	movs	r3, #0
 800e014:	623b      	str	r3, [r7, #32]
            break;
 800e016:	e007      	b.n	800e028 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 800e018:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e01a:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 800e01c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e01e:	681b      	ldr	r3, [r3, #0]
 800e020:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800e022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e024:	2b00      	cmp	r3, #0
 800e026:	d1e9      	bne.n	800dffc <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 800e028:	6a3b      	ldr	r3, [r7, #32]
 800e02a:	2b00      	cmp	r3, #0
 800e02c:	d022      	beq.n	800e074 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800e02e:	68fb      	ldr	r3, [r7, #12]
 800e030:	685b      	ldr	r3, [r3, #4]
 800e032:	2b00      	cmp	r3, #0
 800e034:	d106      	bne.n	800e044 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 800e036:	4b15      	ldr	r3, [pc, #84]	; (800e08c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800e038:	f240 12df 	movw	r2, #479	; 0x1df
 800e03c:	4917      	ldr	r1, [pc, #92]	; (800e09c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800e03e:	4815      	ldr	r0, [pc, #84]	; (800e094 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800e040:	f000 fc7c 	bl	800e93c <iprintf>
          LWIP_ASSERT("sanity check",
 800e044:	68fb      	ldr	r3, [r7, #12]
 800e046:	685b      	ldr	r3, [r3, #4]
 800e048:	685b      	ldr	r3, [r3, #4]
 800e04a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e04c:	429a      	cmp	r2, r3
 800e04e:	d106      	bne.n	800e05e <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 800e050:	4b0e      	ldr	r3, [pc, #56]	; (800e08c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800e052:	f240 12e1 	movw	r2, #481	; 0x1e1
 800e056:	4911      	ldr	r1, [pc, #68]	; (800e09c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800e058:	480e      	ldr	r0, [pc, #56]	; (800e094 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800e05a:	f000 fc6f 	bl	800e93c <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800e05e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e060:	681b      	ldr	r3, [r3, #0]
 800e062:	2b00      	cmp	r3, #0
 800e064:	d006      	beq.n	800e074 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 800e066:	4b09      	ldr	r3, [pc, #36]	; (800e08c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800e068:	f240 12e3 	movw	r2, #483	; 0x1e3
 800e06c:	490c      	ldr	r1, [pc, #48]	; (800e0a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800e06e:	4809      	ldr	r0, [pc, #36]	; (800e094 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800e070:	f000 fc64 	bl	800e93c <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800e074:	6a3b      	ldr	r3, [r7, #32]
 800e076:	2b00      	cmp	r3, #0
 800e078:	bf14      	ite	ne
 800e07a:	2301      	movne	r3, #1
 800e07c:	2300      	moveq	r3, #0
 800e07e:	b2db      	uxtb	r3, r3
 800e080:	e000      	b.n	800e084 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800e082:	2300      	movs	r3, #0
}
 800e084:	4618      	mov	r0, r3
 800e086:	3730      	adds	r7, #48	; 0x30
 800e088:	46bd      	mov	sp, r7
 800e08a:	bd80      	pop	{r7, pc}
 800e08c:	08011b84 	.word	0x08011b84
 800e090:	08011c68 	.word	0x08011c68
 800e094:	08011bcc 	.word	0x08011bcc
 800e098:	08011c88 	.word	0x08011c88
 800e09c:	08011cc0 	.word	0x08011cc0
 800e0a0:	08011cd0 	.word	0x08011cd0

0800e0a4 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 800e0a4:	b580      	push	{r7, lr}
 800e0a6:	b08e      	sub	sp, #56	; 0x38
 800e0a8:	af00      	add	r7, sp, #0
 800e0aa:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	685b      	ldr	r3, [r3, #4]
 800e0b0:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 800e0b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0b4:	781b      	ldrb	r3, [r3, #0]
 800e0b6:	f003 030f 	and.w	r3, r3, #15
 800e0ba:	b2db      	uxtb	r3, r3
 800e0bc:	009b      	lsls	r3, r3, #2
 800e0be:	b2db      	uxtb	r3, r3
 800e0c0:	2b14      	cmp	r3, #20
 800e0c2:	f040 8167 	bne.w	800e394 <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 800e0c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0c8:	88db      	ldrh	r3, [r3, #6]
 800e0ca:	b29b      	uxth	r3, r3
 800e0cc:	4618      	mov	r0, r3
 800e0ce:	f7f7 f9c3 	bl	8005458 <lwip_htons>
 800e0d2:	4603      	mov	r3, r0
 800e0d4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e0d8:	b29b      	uxth	r3, r3
 800e0da:	00db      	lsls	r3, r3, #3
 800e0dc:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800e0de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0e0:	885b      	ldrh	r3, [r3, #2]
 800e0e2:	b29b      	uxth	r3, r3
 800e0e4:	4618      	mov	r0, r3
 800e0e6:	f7f7 f9b7 	bl	8005458 <lwip_htons>
 800e0ea:	4603      	mov	r3, r0
 800e0ec:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 800e0ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0f0:	781b      	ldrb	r3, [r3, #0]
 800e0f2:	f003 030f 	and.w	r3, r3, #15
 800e0f6:	b2db      	uxtb	r3, r3
 800e0f8:	009b      	lsls	r3, r3, #2
 800e0fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 800e0fe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e102:	b29b      	uxth	r3, r3
 800e104:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e106:	429a      	cmp	r2, r3
 800e108:	f0c0 8146 	bcc.w	800e398 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 800e10c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e110:	b29b      	uxth	r3, r3
 800e112:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e114:	1ad3      	subs	r3, r2, r3
 800e116:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800e118:	6878      	ldr	r0, [r7, #4]
 800e11a:	f7f8 fcaf 	bl	8006a7c <pbuf_clen>
 800e11e:	4603      	mov	r3, r0
 800e120:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800e122:	4ba3      	ldr	r3, [pc, #652]	; (800e3b0 <ip4_reass+0x30c>)
 800e124:	881b      	ldrh	r3, [r3, #0]
 800e126:	461a      	mov	r2, r3
 800e128:	8c3b      	ldrh	r3, [r7, #32]
 800e12a:	4413      	add	r3, r2
 800e12c:	2b0a      	cmp	r3, #10
 800e12e:	dd10      	ble.n	800e152 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800e130:	8c3b      	ldrh	r3, [r7, #32]
 800e132:	4619      	mov	r1, r3
 800e134:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e136:	f7ff fd81 	bl	800dc3c <ip_reass_remove_oldest_datagram>
 800e13a:	4603      	mov	r3, r0
 800e13c:	2b00      	cmp	r3, #0
 800e13e:	f000 812d 	beq.w	800e39c <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800e142:	4b9b      	ldr	r3, [pc, #620]	; (800e3b0 <ip4_reass+0x30c>)
 800e144:	881b      	ldrh	r3, [r3, #0]
 800e146:	461a      	mov	r2, r3
 800e148:	8c3b      	ldrh	r3, [r7, #32]
 800e14a:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800e14c:	2b0a      	cmp	r3, #10
 800e14e:	f300 8125 	bgt.w	800e39c <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800e152:	4b98      	ldr	r3, [pc, #608]	; (800e3b4 <ip4_reass+0x310>)
 800e154:	681b      	ldr	r3, [r3, #0]
 800e156:	633b      	str	r3, [r7, #48]	; 0x30
 800e158:	e015      	b.n	800e186 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800e15a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e15c:	695a      	ldr	r2, [r3, #20]
 800e15e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e160:	68db      	ldr	r3, [r3, #12]
 800e162:	429a      	cmp	r2, r3
 800e164:	d10c      	bne.n	800e180 <ip4_reass+0xdc>
 800e166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e168:	699a      	ldr	r2, [r3, #24]
 800e16a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e16c:	691b      	ldr	r3, [r3, #16]
 800e16e:	429a      	cmp	r2, r3
 800e170:	d106      	bne.n	800e180 <ip4_reass+0xdc>
 800e172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e174:	899a      	ldrh	r2, [r3, #12]
 800e176:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e178:	889b      	ldrh	r3, [r3, #4]
 800e17a:	b29b      	uxth	r3, r3
 800e17c:	429a      	cmp	r2, r3
 800e17e:	d006      	beq.n	800e18e <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800e180:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e182:	681b      	ldr	r3, [r3, #0]
 800e184:	633b      	str	r3, [r7, #48]	; 0x30
 800e186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e188:	2b00      	cmp	r3, #0
 800e18a:	d1e6      	bne.n	800e15a <ip4_reass+0xb6>
 800e18c:	e000      	b.n	800e190 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 800e18e:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 800e190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e192:	2b00      	cmp	r3, #0
 800e194:	d109      	bne.n	800e1aa <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800e196:	8c3b      	ldrh	r3, [r7, #32]
 800e198:	4619      	mov	r1, r3
 800e19a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e19c:	f7ff fdb0 	bl	800dd00 <ip_reass_enqueue_new_datagram>
 800e1a0:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 800e1a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1a4:	2b00      	cmp	r3, #0
 800e1a6:	d11c      	bne.n	800e1e2 <ip4_reass+0x13e>
      goto nullreturn;
 800e1a8:	e0f9      	b.n	800e39e <ip4_reass+0x2fa>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800e1aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1ac:	88db      	ldrh	r3, [r3, #6]
 800e1ae:	b29b      	uxth	r3, r3
 800e1b0:	4618      	mov	r0, r3
 800e1b2:	f7f7 f951 	bl	8005458 <lwip_htons>
 800e1b6:	4603      	mov	r3, r0
 800e1b8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e1bc:	2b00      	cmp	r3, #0
 800e1be:	d110      	bne.n	800e1e2 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800e1c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1c2:	89db      	ldrh	r3, [r3, #14]
 800e1c4:	4618      	mov	r0, r3
 800e1c6:	f7f7 f947 	bl	8005458 <lwip_htons>
 800e1ca:	4603      	mov	r3, r0
 800e1cc:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800e1d0:	2b00      	cmp	r3, #0
 800e1d2:	d006      	beq.n	800e1e2 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800e1d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1d6:	3308      	adds	r3, #8
 800e1d8:	2214      	movs	r2, #20
 800e1da:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e1dc:	4618      	mov	r0, r3
 800e1de:	f000 fb9a 	bl	800e916 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800e1e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1e4:	88db      	ldrh	r3, [r3, #6]
 800e1e6:	b29b      	uxth	r3, r3
 800e1e8:	f003 0320 	and.w	r3, r3, #32
 800e1ec:	2b00      	cmp	r3, #0
 800e1ee:	bf0c      	ite	eq
 800e1f0:	2301      	moveq	r3, #1
 800e1f2:	2300      	movne	r3, #0
 800e1f4:	b2db      	uxtb	r3, r3
 800e1f6:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 800e1f8:	69fb      	ldr	r3, [r7, #28]
 800e1fa:	2b00      	cmp	r3, #0
 800e1fc:	d00e      	beq.n	800e21c <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 800e1fe:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800e200:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e202:	4413      	add	r3, r2
 800e204:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800e206:	8b7a      	ldrh	r2, [r7, #26]
 800e208:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e20a:	429a      	cmp	r2, r3
 800e20c:	f0c0 80a0 	bcc.w	800e350 <ip4_reass+0x2ac>
 800e210:	8b7b      	ldrh	r3, [r7, #26]
 800e212:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 800e216:	4293      	cmp	r3, r2
 800e218:	f200 809a 	bhi.w	800e350 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800e21c:	69fa      	ldr	r2, [r7, #28]
 800e21e:	6879      	ldr	r1, [r7, #4]
 800e220:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e222:	f7ff fdd5 	bl	800ddd0 <ip_reass_chain_frag_into_datagram_and_validate>
 800e226:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800e228:	697b      	ldr	r3, [r7, #20]
 800e22a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e22e:	f000 8091 	beq.w	800e354 <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800e232:	4b5f      	ldr	r3, [pc, #380]	; (800e3b0 <ip4_reass+0x30c>)
 800e234:	881a      	ldrh	r2, [r3, #0]
 800e236:	8c3b      	ldrh	r3, [r7, #32]
 800e238:	4413      	add	r3, r2
 800e23a:	b29a      	uxth	r2, r3
 800e23c:	4b5c      	ldr	r3, [pc, #368]	; (800e3b0 <ip4_reass+0x30c>)
 800e23e:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 800e240:	69fb      	ldr	r3, [r7, #28]
 800e242:	2b00      	cmp	r3, #0
 800e244:	d00d      	beq.n	800e262 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 800e246:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800e248:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e24a:	4413      	add	r3, r2
 800e24c:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 800e24e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e250:	8a7a      	ldrh	r2, [r7, #18]
 800e252:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800e254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e256:	7f9b      	ldrb	r3, [r3, #30]
 800e258:	f043 0301 	orr.w	r3, r3, #1
 800e25c:	b2da      	uxtb	r2, r3
 800e25e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e260:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800e262:	697b      	ldr	r3, [r7, #20]
 800e264:	2b01      	cmp	r3, #1
 800e266:	d171      	bne.n	800e34c <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 800e268:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e26a:	8b9b      	ldrh	r3, [r3, #28]
 800e26c:	3314      	adds	r3, #20
 800e26e:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800e270:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e272:	685b      	ldr	r3, [r3, #4]
 800e274:	685b      	ldr	r3, [r3, #4]
 800e276:	681b      	ldr	r3, [r3, #0]
 800e278:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 800e27a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e27c:	685b      	ldr	r3, [r3, #4]
 800e27e:	685b      	ldr	r3, [r3, #4]
 800e280:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800e282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e284:	3308      	adds	r3, #8
 800e286:	2214      	movs	r2, #20
 800e288:	4619      	mov	r1, r3
 800e28a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e28c:	f000 fb43 	bl	800e916 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 800e290:	8a3b      	ldrh	r3, [r7, #16]
 800e292:	4618      	mov	r0, r3
 800e294:	f7f7 f8e0 	bl	8005458 <lwip_htons>
 800e298:	4603      	mov	r3, r0
 800e29a:	461a      	mov	r2, r3
 800e29c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e29e:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800e2a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2a2:	2200      	movs	r2, #0
 800e2a4:	719a      	strb	r2, [r3, #6]
 800e2a6:	2200      	movs	r2, #0
 800e2a8:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800e2aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2ac:	2200      	movs	r2, #0
 800e2ae:	729a      	strb	r2, [r3, #10]
 800e2b0:	2200      	movs	r2, #0
 800e2b2:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 800e2b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2b6:	685b      	ldr	r3, [r3, #4]
 800e2b8:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 800e2ba:	e00d      	b.n	800e2d8 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 800e2bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e2be:	685b      	ldr	r3, [r3, #4]
 800e2c0:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 800e2c2:	2114      	movs	r1, #20
 800e2c4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e2c6:	f7f8 facb 	bl	8006860 <pbuf_remove_header>
      pbuf_cat(p, r);
 800e2ca:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800e2cc:	6878      	ldr	r0, [r7, #4]
 800e2ce:	f7f8 fc0f 	bl	8006af0 <pbuf_cat>
      r = iprh->next_pbuf;
 800e2d2:	68fb      	ldr	r3, [r7, #12]
 800e2d4:	681b      	ldr	r3, [r3, #0]
 800e2d6:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 800e2d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e2da:	2b00      	cmp	r3, #0
 800e2dc:	d1ee      	bne.n	800e2bc <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 800e2de:	4b35      	ldr	r3, [pc, #212]	; (800e3b4 <ip4_reass+0x310>)
 800e2e0:	681b      	ldr	r3, [r3, #0]
 800e2e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e2e4:	429a      	cmp	r2, r3
 800e2e6:	d102      	bne.n	800e2ee <ip4_reass+0x24a>
      ipr_prev = NULL;
 800e2e8:	2300      	movs	r3, #0
 800e2ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e2ec:	e010      	b.n	800e310 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800e2ee:	4b31      	ldr	r3, [pc, #196]	; (800e3b4 <ip4_reass+0x310>)
 800e2f0:	681b      	ldr	r3, [r3, #0]
 800e2f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e2f4:	e007      	b.n	800e306 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 800e2f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2f8:	681b      	ldr	r3, [r3, #0]
 800e2fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e2fc:	429a      	cmp	r2, r3
 800e2fe:	d006      	beq.n	800e30e <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800e300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e302:	681b      	ldr	r3, [r3, #0]
 800e304:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e306:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e308:	2b00      	cmp	r3, #0
 800e30a:	d1f4      	bne.n	800e2f6 <ip4_reass+0x252>
 800e30c:	e000      	b.n	800e310 <ip4_reass+0x26c>
          break;
 800e30e:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800e310:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e312:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e314:	f7ff fd2e 	bl	800dd74 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 800e318:	6878      	ldr	r0, [r7, #4]
 800e31a:	f7f8 fbaf 	bl	8006a7c <pbuf_clen>
 800e31e:	4603      	mov	r3, r0
 800e320:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800e322:	4b23      	ldr	r3, [pc, #140]	; (800e3b0 <ip4_reass+0x30c>)
 800e324:	881b      	ldrh	r3, [r3, #0]
 800e326:	8c3a      	ldrh	r2, [r7, #32]
 800e328:	429a      	cmp	r2, r3
 800e32a:	d906      	bls.n	800e33a <ip4_reass+0x296>
 800e32c:	4b22      	ldr	r3, [pc, #136]	; (800e3b8 <ip4_reass+0x314>)
 800e32e:	f240 229b 	movw	r2, #667	; 0x29b
 800e332:	4922      	ldr	r1, [pc, #136]	; (800e3bc <ip4_reass+0x318>)
 800e334:	4822      	ldr	r0, [pc, #136]	; (800e3c0 <ip4_reass+0x31c>)
 800e336:	f000 fb01 	bl	800e93c <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 800e33a:	4b1d      	ldr	r3, [pc, #116]	; (800e3b0 <ip4_reass+0x30c>)
 800e33c:	881a      	ldrh	r2, [r3, #0]
 800e33e:	8c3b      	ldrh	r3, [r7, #32]
 800e340:	1ad3      	subs	r3, r2, r3
 800e342:	b29a      	uxth	r2, r3
 800e344:	4b1a      	ldr	r3, [pc, #104]	; (800e3b0 <ip4_reass+0x30c>)
 800e346:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	e02c      	b.n	800e3a6 <ip4_reass+0x302>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 800e34c:	2300      	movs	r3, #0
 800e34e:	e02a      	b.n	800e3a6 <ip4_reass+0x302>

nullreturn_ipr:
 800e350:	bf00      	nop
 800e352:	e000      	b.n	800e356 <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 800e354:	bf00      	nop
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 800e356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e358:	2b00      	cmp	r3, #0
 800e35a:	d106      	bne.n	800e36a <ip4_reass+0x2c6>
 800e35c:	4b16      	ldr	r3, [pc, #88]	; (800e3b8 <ip4_reass+0x314>)
 800e35e:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 800e362:	4918      	ldr	r1, [pc, #96]	; (800e3c4 <ip4_reass+0x320>)
 800e364:	4816      	ldr	r0, [pc, #88]	; (800e3c0 <ip4_reass+0x31c>)
 800e366:	f000 fae9 	bl	800e93c <iprintf>
  if (ipr->p == NULL) {
 800e36a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e36c:	685b      	ldr	r3, [r3, #4]
 800e36e:	2b00      	cmp	r3, #0
 800e370:	d114      	bne.n	800e39c <ip4_reass+0x2f8>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 800e372:	4b10      	ldr	r3, [pc, #64]	; (800e3b4 <ip4_reass+0x310>)
 800e374:	681b      	ldr	r3, [r3, #0]
 800e376:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e378:	429a      	cmp	r2, r3
 800e37a:	d006      	beq.n	800e38a <ip4_reass+0x2e6>
 800e37c:	4b0e      	ldr	r3, [pc, #56]	; (800e3b8 <ip4_reass+0x314>)
 800e37e:	f240 22ab 	movw	r2, #683	; 0x2ab
 800e382:	4911      	ldr	r1, [pc, #68]	; (800e3c8 <ip4_reass+0x324>)
 800e384:	480e      	ldr	r0, [pc, #56]	; (800e3c0 <ip4_reass+0x31c>)
 800e386:	f000 fad9 	bl	800e93c <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 800e38a:	2100      	movs	r1, #0
 800e38c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e38e:	f7ff fcf1 	bl	800dd74 <ip_reass_dequeue_datagram>
 800e392:	e004      	b.n	800e39e <ip4_reass+0x2fa>
    goto nullreturn;
 800e394:	bf00      	nop
 800e396:	e002      	b.n	800e39e <ip4_reass+0x2fa>
    goto nullreturn;
 800e398:	bf00      	nop
 800e39a:	e000      	b.n	800e39e <ip4_reass+0x2fa>
  }

nullreturn:
 800e39c:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 800e39e:	6878      	ldr	r0, [r7, #4]
 800e3a0:	f7f8 fae4 	bl	800696c <pbuf_free>
  return NULL;
 800e3a4:	2300      	movs	r3, #0
}
 800e3a6:	4618      	mov	r0, r3
 800e3a8:	3738      	adds	r7, #56	; 0x38
 800e3aa:	46bd      	mov	sp, r7
 800e3ac:	bd80      	pop	{r7, pc}
 800e3ae:	bf00      	nop
 800e3b0:	200001fc 	.word	0x200001fc
 800e3b4:	200001f8 	.word	0x200001f8
 800e3b8:	08011b84 	.word	0x08011b84
 800e3bc:	08011cf4 	.word	0x08011cf4
 800e3c0:	08011bcc 	.word	0x08011bcc
 800e3c4:	08011d10 	.word	0x08011d10
 800e3c8:	08011d1c 	.word	0x08011d1c

0800e3cc <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 800e3cc:	b580      	push	{r7, lr}
 800e3ce:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 800e3d0:	2004      	movs	r0, #4
 800e3d2:	f7f7 fc95 	bl	8005d00 <memp_malloc>
 800e3d6:	4603      	mov	r3, r0
}
 800e3d8:	4618      	mov	r0, r3
 800e3da:	bd80      	pop	{r7, pc}

0800e3dc <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 800e3dc:	b580      	push	{r7, lr}
 800e3de:	b082      	sub	sp, #8
 800e3e0:	af00      	add	r7, sp, #0
 800e3e2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	2b00      	cmp	r3, #0
 800e3e8:	d106      	bne.n	800e3f8 <ip_frag_free_pbuf_custom_ref+0x1c>
 800e3ea:	4b07      	ldr	r3, [pc, #28]	; (800e408 <ip_frag_free_pbuf_custom_ref+0x2c>)
 800e3ec:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 800e3f0:	4906      	ldr	r1, [pc, #24]	; (800e40c <ip_frag_free_pbuf_custom_ref+0x30>)
 800e3f2:	4807      	ldr	r0, [pc, #28]	; (800e410 <ip_frag_free_pbuf_custom_ref+0x34>)
 800e3f4:	f000 faa2 	bl	800e93c <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 800e3f8:	6879      	ldr	r1, [r7, #4]
 800e3fa:	2004      	movs	r0, #4
 800e3fc:	f7f7 fccc 	bl	8005d98 <memp_free>
}
 800e400:	bf00      	nop
 800e402:	3708      	adds	r7, #8
 800e404:	46bd      	mov	sp, r7
 800e406:	bd80      	pop	{r7, pc}
 800e408:	08011b84 	.word	0x08011b84
 800e40c:	08011d3c 	.word	0x08011d3c
 800e410:	08011bcc 	.word	0x08011bcc

0800e414 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800e414:	b580      	push	{r7, lr}
 800e416:	b084      	sub	sp, #16
 800e418:	af00      	add	r7, sp, #0
 800e41a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800e420:	68fb      	ldr	r3, [r7, #12]
 800e422:	2b00      	cmp	r3, #0
 800e424:	d106      	bne.n	800e434 <ipfrag_free_pbuf_custom+0x20>
 800e426:	4b11      	ldr	r3, [pc, #68]	; (800e46c <ipfrag_free_pbuf_custom+0x58>)
 800e428:	f240 22ce 	movw	r2, #718	; 0x2ce
 800e42c:	4910      	ldr	r1, [pc, #64]	; (800e470 <ipfrag_free_pbuf_custom+0x5c>)
 800e42e:	4811      	ldr	r0, [pc, #68]	; (800e474 <ipfrag_free_pbuf_custom+0x60>)
 800e430:	f000 fa84 	bl	800e93c <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 800e434:	68fa      	ldr	r2, [r7, #12]
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	429a      	cmp	r2, r3
 800e43a:	d006      	beq.n	800e44a <ipfrag_free_pbuf_custom+0x36>
 800e43c:	4b0b      	ldr	r3, [pc, #44]	; (800e46c <ipfrag_free_pbuf_custom+0x58>)
 800e43e:	f240 22cf 	movw	r2, #719	; 0x2cf
 800e442:	490d      	ldr	r1, [pc, #52]	; (800e478 <ipfrag_free_pbuf_custom+0x64>)
 800e444:	480b      	ldr	r0, [pc, #44]	; (800e474 <ipfrag_free_pbuf_custom+0x60>)
 800e446:	f000 fa79 	bl	800e93c <iprintf>
  if (pcr->original != NULL) {
 800e44a:	68fb      	ldr	r3, [r7, #12]
 800e44c:	695b      	ldr	r3, [r3, #20]
 800e44e:	2b00      	cmp	r3, #0
 800e450:	d004      	beq.n	800e45c <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 800e452:	68fb      	ldr	r3, [r7, #12]
 800e454:	695b      	ldr	r3, [r3, #20]
 800e456:	4618      	mov	r0, r3
 800e458:	f7f8 fa88 	bl	800696c <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800e45c:	68f8      	ldr	r0, [r7, #12]
 800e45e:	f7ff ffbd 	bl	800e3dc <ip_frag_free_pbuf_custom_ref>
}
 800e462:	bf00      	nop
 800e464:	3710      	adds	r7, #16
 800e466:	46bd      	mov	sp, r7
 800e468:	bd80      	pop	{r7, pc}
 800e46a:	bf00      	nop
 800e46c:	08011b84 	.word	0x08011b84
 800e470:	08011d48 	.word	0x08011d48
 800e474:	08011bcc 	.word	0x08011bcc
 800e478:	08011d54 	.word	0x08011d54

0800e47c <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800e47c:	b580      	push	{r7, lr}
 800e47e:	b094      	sub	sp, #80	; 0x50
 800e480:	af02      	add	r7, sp, #8
 800e482:	60f8      	str	r0, [r7, #12]
 800e484:	60b9      	str	r1, [r7, #8]
 800e486:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 800e488:	2300      	movs	r3, #0
 800e48a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800e48e:	68bb      	ldr	r3, [r7, #8]
 800e490:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800e492:	3b14      	subs	r3, #20
 800e494:	2b00      	cmp	r3, #0
 800e496:	da00      	bge.n	800e49a <ip4_frag+0x1e>
 800e498:	3307      	adds	r3, #7
 800e49a:	10db      	asrs	r3, r3, #3
 800e49c:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 800e49e:	2314      	movs	r3, #20
 800e4a0:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 800e4a2:	68fb      	ldr	r3, [r7, #12]
 800e4a4:	685b      	ldr	r3, [r3, #4]
 800e4a6:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 800e4a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e4aa:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 800e4ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4ae:	781b      	ldrb	r3, [r3, #0]
 800e4b0:	f003 030f 	and.w	r3, r3, #15
 800e4b4:	b2db      	uxtb	r3, r3
 800e4b6:	009b      	lsls	r3, r3, #2
 800e4b8:	b2db      	uxtb	r3, r3
 800e4ba:	2b14      	cmp	r3, #20
 800e4bc:	d002      	beq.n	800e4c4 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 800e4be:	f06f 0305 	mvn.w	r3, #5
 800e4c2:	e10f      	b.n	800e6e4 <ip4_frag+0x268>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 800e4c4:	68fb      	ldr	r3, [r7, #12]
 800e4c6:	895b      	ldrh	r3, [r3, #10]
 800e4c8:	2b13      	cmp	r3, #19
 800e4ca:	d809      	bhi.n	800e4e0 <ip4_frag+0x64>
 800e4cc:	4b87      	ldr	r3, [pc, #540]	; (800e6ec <ip4_frag+0x270>)
 800e4ce:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 800e4d2:	4987      	ldr	r1, [pc, #540]	; (800e6f0 <ip4_frag+0x274>)
 800e4d4:	4887      	ldr	r0, [pc, #540]	; (800e6f4 <ip4_frag+0x278>)
 800e4d6:	f000 fa31 	bl	800e93c <iprintf>
 800e4da:	f06f 0305 	mvn.w	r3, #5
 800e4de:	e101      	b.n	800e6e4 <ip4_frag+0x268>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800e4e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4e2:	88db      	ldrh	r3, [r3, #6]
 800e4e4:	b29b      	uxth	r3, r3
 800e4e6:	4618      	mov	r0, r3
 800e4e8:	f7f6 ffb6 	bl	8005458 <lwip_htons>
 800e4ec:	4603      	mov	r3, r0
 800e4ee:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 800e4f0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800e4f2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e4f6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 800e4fa:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800e4fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e500:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 800e502:	68fb      	ldr	r3, [r7, #12]
 800e504:	891b      	ldrh	r3, [r3, #8]
 800e506:	3b14      	subs	r3, #20
 800e508:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 800e50c:	e0e0      	b.n	800e6d0 <ip4_frag+0x254>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800e50e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800e510:	00db      	lsls	r3, r3, #3
 800e512:	b29b      	uxth	r3, r3
 800e514:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800e518:	4293      	cmp	r3, r2
 800e51a:	bf28      	it	cs
 800e51c:	4613      	movcs	r3, r2
 800e51e:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800e520:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e524:	2114      	movs	r1, #20
 800e526:	200e      	movs	r0, #14
 800e528:	f7f7 ff40 	bl	80063ac <pbuf_alloc>
 800e52c:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 800e52e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e530:	2b00      	cmp	r3, #0
 800e532:	f000 80d4 	beq.w	800e6de <ip4_frag+0x262>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800e536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e538:	895b      	ldrh	r3, [r3, #10]
 800e53a:	2b13      	cmp	r3, #19
 800e53c:	d806      	bhi.n	800e54c <ip4_frag+0xd0>
 800e53e:	4b6b      	ldr	r3, [pc, #428]	; (800e6ec <ip4_frag+0x270>)
 800e540:	f240 3225 	movw	r2, #805	; 0x325
 800e544:	496c      	ldr	r1, [pc, #432]	; (800e6f8 <ip4_frag+0x27c>)
 800e546:	486b      	ldr	r0, [pc, #428]	; (800e6f4 <ip4_frag+0x278>)
 800e548:	f000 f9f8 	bl	800e93c <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800e54c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e54e:	685b      	ldr	r3, [r3, #4]
 800e550:	2214      	movs	r2, #20
 800e552:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800e554:	4618      	mov	r0, r3
 800e556:	f000 f9de 	bl	800e916 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800e55a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e55c:	685b      	ldr	r3, [r3, #4]
 800e55e:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 800e560:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e562:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 800e566:	e064      	b.n	800e632 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 800e568:	68fb      	ldr	r3, [r7, #12]
 800e56a:	895a      	ldrh	r2, [r3, #10]
 800e56c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800e56e:	1ad3      	subs	r3, r2, r3
 800e570:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800e572:	68fb      	ldr	r3, [r7, #12]
 800e574:	895b      	ldrh	r3, [r3, #10]
 800e576:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800e578:	429a      	cmp	r2, r3
 800e57a:	d906      	bls.n	800e58a <ip4_frag+0x10e>
 800e57c:	4b5b      	ldr	r3, [pc, #364]	; (800e6ec <ip4_frag+0x270>)
 800e57e:	f240 322d 	movw	r2, #813	; 0x32d
 800e582:	495e      	ldr	r1, [pc, #376]	; (800e6fc <ip4_frag+0x280>)
 800e584:	485b      	ldr	r0, [pc, #364]	; (800e6f4 <ip4_frag+0x278>)
 800e586:	f000 f9d9 	bl	800e93c <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800e58a:	8bfa      	ldrh	r2, [r7, #30]
 800e58c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800e590:	4293      	cmp	r3, r2
 800e592:	bf28      	it	cs
 800e594:	4613      	movcs	r3, r2
 800e596:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 800e59a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800e59e:	2b00      	cmp	r3, #0
 800e5a0:	d105      	bne.n	800e5ae <ip4_frag+0x132>
        poff = 0;
 800e5a2:	2300      	movs	r3, #0
 800e5a4:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800e5a6:	68fb      	ldr	r3, [r7, #12]
 800e5a8:	681b      	ldr	r3, [r3, #0]
 800e5aa:	60fb      	str	r3, [r7, #12]
        continue;
 800e5ac:	e041      	b.n	800e632 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 800e5ae:	f7ff ff0d 	bl	800e3cc <ip_frag_alloc_pbuf_custom_ref>
 800e5b2:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 800e5b4:	69bb      	ldr	r3, [r7, #24]
 800e5b6:	2b00      	cmp	r3, #0
 800e5b8:	d103      	bne.n	800e5c2 <ip4_frag+0x146>
        pbuf_free(rambuf);
 800e5ba:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e5bc:	f7f8 f9d6 	bl	800696c <pbuf_free>
        goto memerr;
 800e5c0:	e08e      	b.n	800e6e0 <ip4_frag+0x264>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800e5c2:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 800e5c4:	68fb      	ldr	r3, [r7, #12]
 800e5c6:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800e5c8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800e5ca:	4413      	add	r3, r2
 800e5cc:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 800e5d0:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800e5d4:	9201      	str	r2, [sp, #4]
 800e5d6:	9300      	str	r3, [sp, #0]
 800e5d8:	4603      	mov	r3, r0
 800e5da:	2241      	movs	r2, #65	; 0x41
 800e5dc:	2000      	movs	r0, #0
 800e5de:	f7f8 f80b 	bl	80065f8 <pbuf_alloced_custom>
 800e5e2:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 800e5e4:	697b      	ldr	r3, [r7, #20]
 800e5e6:	2b00      	cmp	r3, #0
 800e5e8:	d106      	bne.n	800e5f8 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 800e5ea:	69b8      	ldr	r0, [r7, #24]
 800e5ec:	f7ff fef6 	bl	800e3dc <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800e5f0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e5f2:	f7f8 f9bb 	bl	800696c <pbuf_free>
        goto memerr;
 800e5f6:	e073      	b.n	800e6e0 <ip4_frag+0x264>
      }
      pbuf_ref(p);
 800e5f8:	68f8      	ldr	r0, [r7, #12]
 800e5fa:	f7f8 fa57 	bl	8006aac <pbuf_ref>
      pcr->original = p;
 800e5fe:	69bb      	ldr	r3, [r7, #24]
 800e600:	68fa      	ldr	r2, [r7, #12]
 800e602:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800e604:	69bb      	ldr	r3, [r7, #24]
 800e606:	4a3e      	ldr	r2, [pc, #248]	; (800e700 <ip4_frag+0x284>)
 800e608:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800e60a:	6979      	ldr	r1, [r7, #20]
 800e60c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e60e:	f7f8 fa6f 	bl	8006af0 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 800e612:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 800e616:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800e61a:	1ad3      	subs	r3, r2, r3
 800e61c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 800e620:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800e624:	2b00      	cmp	r3, #0
 800e626:	d004      	beq.n	800e632 <ip4_frag+0x1b6>
        poff = 0;
 800e628:	2300      	movs	r3, #0
 800e62a:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800e62c:	68fb      	ldr	r3, [r7, #12]
 800e62e:	681b      	ldr	r3, [r3, #0]
 800e630:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 800e632:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800e636:	2b00      	cmp	r3, #0
 800e638:	d196      	bne.n	800e568 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 800e63a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800e63c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800e640:	4413      	add	r3, r2
 800e642:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 800e644:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800e648:	68bb      	ldr	r3, [r7, #8]
 800e64a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800e64c:	3b14      	subs	r3, #20
 800e64e:	429a      	cmp	r2, r3
 800e650:	bfd4      	ite	le
 800e652:	2301      	movle	r3, #1
 800e654:	2300      	movgt	r3, #0
 800e656:	b2db      	uxtb	r3, r3
 800e658:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 800e65a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800e65e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e662:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 800e664:	6a3b      	ldr	r3, [r7, #32]
 800e666:	2b00      	cmp	r3, #0
 800e668:	d002      	beq.n	800e670 <ip4_frag+0x1f4>
 800e66a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e66c:	2b00      	cmp	r3, #0
 800e66e:	d003      	beq.n	800e678 <ip4_frag+0x1fc>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 800e670:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800e672:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800e676:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800e678:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800e67a:	4618      	mov	r0, r3
 800e67c:	f7f6 feec 	bl	8005458 <lwip_htons>
 800e680:	4603      	mov	r3, r0
 800e682:	461a      	mov	r2, r3
 800e684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e686:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 800e688:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e68a:	3314      	adds	r3, #20
 800e68c:	b29b      	uxth	r3, r3
 800e68e:	4618      	mov	r0, r3
 800e690:	f7f6 fee2 	bl	8005458 <lwip_htons>
 800e694:	4603      	mov	r3, r0
 800e696:	461a      	mov	r2, r3
 800e698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e69a:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800e69c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e69e:	2200      	movs	r2, #0
 800e6a0:	729a      	strb	r2, [r3, #10]
 800e6a2:	2200      	movs	r2, #0
 800e6a4:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 800e6a6:	68bb      	ldr	r3, [r7, #8]
 800e6a8:	695b      	ldr	r3, [r3, #20]
 800e6aa:	687a      	ldr	r2, [r7, #4]
 800e6ac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e6ae:	68b8      	ldr	r0, [r7, #8]
 800e6b0:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 800e6b2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e6b4:	f7f8 f95a 	bl	800696c <pbuf_free>
    left = (u16_t)(left - fragsize);
 800e6b8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800e6bc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e6be:	1ad3      	subs	r3, r2, r3
 800e6c0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 800e6c4:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800e6c8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800e6ca:	4413      	add	r3, r2
 800e6cc:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 800e6d0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800e6d4:	2b00      	cmp	r3, #0
 800e6d6:	f47f af1a 	bne.w	800e50e <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800e6da:	2300      	movs	r3, #0
 800e6dc:	e002      	b.n	800e6e4 <ip4_frag+0x268>
      goto memerr;
 800e6de:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800e6e0:	f04f 33ff 	mov.w	r3, #4294967295
}
 800e6e4:	4618      	mov	r0, r3
 800e6e6:	3748      	adds	r7, #72	; 0x48
 800e6e8:	46bd      	mov	sp, r7
 800e6ea:	bd80      	pop	{r7, pc}
 800e6ec:	08011b84 	.word	0x08011b84
 800e6f0:	08011d60 	.word	0x08011d60
 800e6f4:	08011bcc 	.word	0x08011bcc
 800e6f8:	08011d7c 	.word	0x08011d7c
 800e6fc:	08011d9c 	.word	0x08011d9c
 800e700:	0800e415 	.word	0x0800e415

0800e704 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 800e704:	b580      	push	{r7, lr}
 800e706:	b086      	sub	sp, #24
 800e708:	af00      	add	r7, sp, #0
 800e70a:	6078      	str	r0, [r7, #4]
 800e70c:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 800e70e:	230e      	movs	r3, #14
 800e710:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	895b      	ldrh	r3, [r3, #10]
 800e716:	2b0e      	cmp	r3, #14
 800e718:	d96e      	bls.n	800e7f8 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	7bdb      	ldrb	r3, [r3, #15]
 800e71e:	2b00      	cmp	r3, #0
 800e720:	d106      	bne.n	800e730 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 800e722:	683b      	ldr	r3, [r7, #0]
 800e724:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e728:	3301      	adds	r3, #1
 800e72a:	b2da      	uxtb	r2, r3
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	685b      	ldr	r3, [r3, #4]
 800e734:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 800e736:	693b      	ldr	r3, [r7, #16]
 800e738:	7b1a      	ldrb	r2, [r3, #12]
 800e73a:	7b5b      	ldrb	r3, [r3, #13]
 800e73c:	021b      	lsls	r3, r3, #8
 800e73e:	4313      	orrs	r3, r2
 800e740:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800e742:	693b      	ldr	r3, [r7, #16]
 800e744:	781b      	ldrb	r3, [r3, #0]
 800e746:	f003 0301 	and.w	r3, r3, #1
 800e74a:	2b00      	cmp	r3, #0
 800e74c:	d023      	beq.n	800e796 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800e74e:	693b      	ldr	r3, [r7, #16]
 800e750:	781b      	ldrb	r3, [r3, #0]
 800e752:	2b01      	cmp	r3, #1
 800e754:	d10f      	bne.n	800e776 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800e756:	693b      	ldr	r3, [r7, #16]
 800e758:	785b      	ldrb	r3, [r3, #1]
 800e75a:	2b00      	cmp	r3, #0
 800e75c:	d11b      	bne.n	800e796 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 800e75e:	693b      	ldr	r3, [r7, #16]
 800e760:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800e762:	2b5e      	cmp	r3, #94	; 0x5e
 800e764:	d117      	bne.n	800e796 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	7b5b      	ldrb	r3, [r3, #13]
 800e76a:	f043 0310 	orr.w	r3, r3, #16
 800e76e:	b2da      	uxtb	r2, r3
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	735a      	strb	r2, [r3, #13]
 800e774:	e00f      	b.n	800e796 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800e776:	693b      	ldr	r3, [r7, #16]
 800e778:	2206      	movs	r2, #6
 800e77a:	4928      	ldr	r1, [pc, #160]	; (800e81c <ethernet_input+0x118>)
 800e77c:	4618      	mov	r0, r3
 800e77e:	f000 f8bb 	bl	800e8f8 <memcmp>
 800e782:	4603      	mov	r3, r0
 800e784:	2b00      	cmp	r3, #0
 800e786:	d106      	bne.n	800e796 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	7b5b      	ldrb	r3, [r3, #13]
 800e78c:	f043 0308 	orr.w	r3, r3, #8
 800e790:	b2da      	uxtb	r2, r3
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 800e796:	89fb      	ldrh	r3, [r7, #14]
 800e798:	2b08      	cmp	r3, #8
 800e79a:	d003      	beq.n	800e7a4 <ethernet_input+0xa0>
 800e79c:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 800e7a0:	d014      	beq.n	800e7cc <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 800e7a2:	e032      	b.n	800e80a <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800e7a4:	683b      	ldr	r3, [r7, #0]
 800e7a6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e7aa:	f003 0308 	and.w	r3, r3, #8
 800e7ae:	2b00      	cmp	r3, #0
 800e7b0:	d024      	beq.n	800e7fc <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800e7b2:	8afb      	ldrh	r3, [r7, #22]
 800e7b4:	4619      	mov	r1, r3
 800e7b6:	6878      	ldr	r0, [r7, #4]
 800e7b8:	f7f8 f852 	bl	8006860 <pbuf_remove_header>
 800e7bc:	4603      	mov	r3, r0
 800e7be:	2b00      	cmp	r3, #0
 800e7c0:	d11e      	bne.n	800e800 <ethernet_input+0xfc>
        ip4_input(p, netif);
 800e7c2:	6839      	ldr	r1, [r7, #0]
 800e7c4:	6878      	ldr	r0, [r7, #4]
 800e7c6:	f7fe ff35 	bl	800d634 <ip4_input>
      break;
 800e7ca:	e013      	b.n	800e7f4 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800e7cc:	683b      	ldr	r3, [r7, #0]
 800e7ce:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e7d2:	f003 0308 	and.w	r3, r3, #8
 800e7d6:	2b00      	cmp	r3, #0
 800e7d8:	d014      	beq.n	800e804 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800e7da:	8afb      	ldrh	r3, [r7, #22]
 800e7dc:	4619      	mov	r1, r3
 800e7de:	6878      	ldr	r0, [r7, #4]
 800e7e0:	f7f8 f83e 	bl	8006860 <pbuf_remove_header>
 800e7e4:	4603      	mov	r3, r0
 800e7e6:	2b00      	cmp	r3, #0
 800e7e8:	d10e      	bne.n	800e808 <ethernet_input+0x104>
        etharp_input(p, netif);
 800e7ea:	6839      	ldr	r1, [r7, #0]
 800e7ec:	6878      	ldr	r0, [r7, #4]
 800e7ee:	f7fe f8d5 	bl	800c99c <etharp_input>
      break;
 800e7f2:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 800e7f4:	2300      	movs	r3, #0
 800e7f6:	e00c      	b.n	800e812 <ethernet_input+0x10e>
    goto free_and_return;
 800e7f8:	bf00      	nop
 800e7fa:	e006      	b.n	800e80a <ethernet_input+0x106>
        goto free_and_return;
 800e7fc:	bf00      	nop
 800e7fe:	e004      	b.n	800e80a <ethernet_input+0x106>
        goto free_and_return;
 800e800:	bf00      	nop
 800e802:	e002      	b.n	800e80a <ethernet_input+0x106>
        goto free_and_return;
 800e804:	bf00      	nop
 800e806:	e000      	b.n	800e80a <ethernet_input+0x106>
        goto free_and_return;
 800e808:	bf00      	nop

free_and_return:
  pbuf_free(p);
 800e80a:	6878      	ldr	r0, [r7, #4]
 800e80c:	f7f8 f8ae 	bl	800696c <pbuf_free>
  return ERR_OK;
 800e810:	2300      	movs	r3, #0
}
 800e812:	4618      	mov	r0, r3
 800e814:	3718      	adds	r7, #24
 800e816:	46bd      	mov	sp, r7
 800e818:	bd80      	pop	{r7, pc}
 800e81a:	bf00      	nop
 800e81c:	08011f1c 	.word	0x08011f1c

0800e820 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 800e820:	b580      	push	{r7, lr}
 800e822:	b086      	sub	sp, #24
 800e824:	af00      	add	r7, sp, #0
 800e826:	60f8      	str	r0, [r7, #12]
 800e828:	60b9      	str	r1, [r7, #8]
 800e82a:	607a      	str	r2, [r7, #4]
 800e82c:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800e82e:	8c3b      	ldrh	r3, [r7, #32]
 800e830:	4618      	mov	r0, r3
 800e832:	f7f6 fe11 	bl	8005458 <lwip_htons>
 800e836:	4603      	mov	r3, r0
 800e838:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 800e83a:	210e      	movs	r1, #14
 800e83c:	68b8      	ldr	r0, [r7, #8]
 800e83e:	f7f7 ffff 	bl	8006840 <pbuf_add_header>
 800e842:	4603      	mov	r3, r0
 800e844:	2b00      	cmp	r3, #0
 800e846:	d125      	bne.n	800e894 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 800e848:	68bb      	ldr	r3, [r7, #8]
 800e84a:	685b      	ldr	r3, [r3, #4]
 800e84c:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 800e84e:	693b      	ldr	r3, [r7, #16]
 800e850:	8afa      	ldrh	r2, [r7, #22]
 800e852:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 800e854:	693b      	ldr	r3, [r7, #16]
 800e856:	2206      	movs	r2, #6
 800e858:	6839      	ldr	r1, [r7, #0]
 800e85a:	4618      	mov	r0, r3
 800e85c:	f000 f85b 	bl	800e916 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 800e860:	693b      	ldr	r3, [r7, #16]
 800e862:	3306      	adds	r3, #6
 800e864:	2206      	movs	r2, #6
 800e866:	6879      	ldr	r1, [r7, #4]
 800e868:	4618      	mov	r0, r3
 800e86a:	f000 f854 	bl	800e916 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800e86e:	68fb      	ldr	r3, [r7, #12]
 800e870:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800e874:	2b06      	cmp	r3, #6
 800e876:	d006      	beq.n	800e886 <ethernet_output+0x66>
 800e878:	4b0a      	ldr	r3, [pc, #40]	; (800e8a4 <ethernet_output+0x84>)
 800e87a:	f240 1233 	movw	r2, #307	; 0x133
 800e87e:	490a      	ldr	r1, [pc, #40]	; (800e8a8 <ethernet_output+0x88>)
 800e880:	480a      	ldr	r0, [pc, #40]	; (800e8ac <ethernet_output+0x8c>)
 800e882:	f000 f85b 	bl	800e93c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800e886:	68fb      	ldr	r3, [r7, #12]
 800e888:	699b      	ldr	r3, [r3, #24]
 800e88a:	68b9      	ldr	r1, [r7, #8]
 800e88c:	68f8      	ldr	r0, [r7, #12]
 800e88e:	4798      	blx	r3
 800e890:	4603      	mov	r3, r0
 800e892:	e002      	b.n	800e89a <ethernet_output+0x7a>
      goto pbuf_header_failed;
 800e894:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 800e896:	f06f 0301 	mvn.w	r3, #1
}
 800e89a:	4618      	mov	r0, r3
 800e89c:	3718      	adds	r7, #24
 800e89e:	46bd      	mov	sp, r7
 800e8a0:	bd80      	pop	{r7, pc}
 800e8a2:	bf00      	nop
 800e8a4:	08011dac 	.word	0x08011dac
 800e8a8:	08011de4 	.word	0x08011de4
 800e8ac:	08011e18 	.word	0x08011e18

0800e8b0 <__libc_init_array>:
 800e8b0:	b570      	push	{r4, r5, r6, lr}
 800e8b2:	4e0d      	ldr	r6, [pc, #52]	; (800e8e8 <__libc_init_array+0x38>)
 800e8b4:	4c0d      	ldr	r4, [pc, #52]	; (800e8ec <__libc_init_array+0x3c>)
 800e8b6:	1ba4      	subs	r4, r4, r6
 800e8b8:	10a4      	asrs	r4, r4, #2
 800e8ba:	2500      	movs	r5, #0
 800e8bc:	42a5      	cmp	r5, r4
 800e8be:	d109      	bne.n	800e8d4 <__libc_init_array+0x24>
 800e8c0:	4e0b      	ldr	r6, [pc, #44]	; (800e8f0 <__libc_init_array+0x40>)
 800e8c2:	4c0c      	ldr	r4, [pc, #48]	; (800e8f4 <__libc_init_array+0x44>)
 800e8c4:	f000 ff5a 	bl	800f77c <_init>
 800e8c8:	1ba4      	subs	r4, r4, r6
 800e8ca:	10a4      	asrs	r4, r4, #2
 800e8cc:	2500      	movs	r5, #0
 800e8ce:	42a5      	cmp	r5, r4
 800e8d0:	d105      	bne.n	800e8de <__libc_init_array+0x2e>
 800e8d2:	bd70      	pop	{r4, r5, r6, pc}
 800e8d4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800e8d8:	4798      	blx	r3
 800e8da:	3501      	adds	r5, #1
 800e8dc:	e7ee      	b.n	800e8bc <__libc_init_array+0xc>
 800e8de:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800e8e2:	4798      	blx	r3
 800e8e4:	3501      	adds	r5, #1
 800e8e6:	e7f2      	b.n	800e8ce <__libc_init_array+0x1e>
 800e8e8:	08011fcc 	.word	0x08011fcc
 800e8ec:	08011fcc 	.word	0x08011fcc
 800e8f0:	08011fcc 	.word	0x08011fcc
 800e8f4:	08011fd0 	.word	0x08011fd0

0800e8f8 <memcmp>:
 800e8f8:	b530      	push	{r4, r5, lr}
 800e8fa:	2400      	movs	r4, #0
 800e8fc:	42a2      	cmp	r2, r4
 800e8fe:	d101      	bne.n	800e904 <memcmp+0xc>
 800e900:	2000      	movs	r0, #0
 800e902:	e007      	b.n	800e914 <memcmp+0x1c>
 800e904:	5d03      	ldrb	r3, [r0, r4]
 800e906:	3401      	adds	r4, #1
 800e908:	190d      	adds	r5, r1, r4
 800e90a:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 800e90e:	42ab      	cmp	r3, r5
 800e910:	d0f4      	beq.n	800e8fc <memcmp+0x4>
 800e912:	1b58      	subs	r0, r3, r5
 800e914:	bd30      	pop	{r4, r5, pc}

0800e916 <memcpy>:
 800e916:	b510      	push	{r4, lr}
 800e918:	1e43      	subs	r3, r0, #1
 800e91a:	440a      	add	r2, r1
 800e91c:	4291      	cmp	r1, r2
 800e91e:	d100      	bne.n	800e922 <memcpy+0xc>
 800e920:	bd10      	pop	{r4, pc}
 800e922:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e926:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e92a:	e7f7      	b.n	800e91c <memcpy+0x6>

0800e92c <memset>:
 800e92c:	4402      	add	r2, r0
 800e92e:	4603      	mov	r3, r0
 800e930:	4293      	cmp	r3, r2
 800e932:	d100      	bne.n	800e936 <memset+0xa>
 800e934:	4770      	bx	lr
 800e936:	f803 1b01 	strb.w	r1, [r3], #1
 800e93a:	e7f9      	b.n	800e930 <memset+0x4>

0800e93c <iprintf>:
 800e93c:	b40f      	push	{r0, r1, r2, r3}
 800e93e:	4b0a      	ldr	r3, [pc, #40]	; (800e968 <iprintf+0x2c>)
 800e940:	b513      	push	{r0, r1, r4, lr}
 800e942:	681c      	ldr	r4, [r3, #0]
 800e944:	b124      	cbz	r4, 800e950 <iprintf+0x14>
 800e946:	69a3      	ldr	r3, [r4, #24]
 800e948:	b913      	cbnz	r3, 800e950 <iprintf+0x14>
 800e94a:	4620      	mov	r0, r4
 800e94c:	f000 f882 	bl	800ea54 <__sinit>
 800e950:	ab05      	add	r3, sp, #20
 800e952:	9a04      	ldr	r2, [sp, #16]
 800e954:	68a1      	ldr	r1, [r4, #8]
 800e956:	9301      	str	r3, [sp, #4]
 800e958:	4620      	mov	r0, r4
 800e95a:	f000 f9df 	bl	800ed1c <_vfiprintf_r>
 800e95e:	b002      	add	sp, #8
 800e960:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e964:	b004      	add	sp, #16
 800e966:	4770      	bx	lr
 800e968:	20000010 	.word	0x20000010

0800e96c <rand>:
 800e96c:	b538      	push	{r3, r4, r5, lr}
 800e96e:	4b13      	ldr	r3, [pc, #76]	; (800e9bc <rand+0x50>)
 800e970:	681c      	ldr	r4, [r3, #0]
 800e972:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e974:	b97b      	cbnz	r3, 800e996 <rand+0x2a>
 800e976:	2018      	movs	r0, #24
 800e978:	f000 f8f6 	bl	800eb68 <malloc>
 800e97c:	4a10      	ldr	r2, [pc, #64]	; (800e9c0 <rand+0x54>)
 800e97e:	4b11      	ldr	r3, [pc, #68]	; (800e9c4 <rand+0x58>)
 800e980:	63a0      	str	r0, [r4, #56]	; 0x38
 800e982:	e9c0 2300 	strd	r2, r3, [r0]
 800e986:	4b10      	ldr	r3, [pc, #64]	; (800e9c8 <rand+0x5c>)
 800e988:	6083      	str	r3, [r0, #8]
 800e98a:	230b      	movs	r3, #11
 800e98c:	8183      	strh	r3, [r0, #12]
 800e98e:	2201      	movs	r2, #1
 800e990:	2300      	movs	r3, #0
 800e992:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800e996:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800e998:	480c      	ldr	r0, [pc, #48]	; (800e9cc <rand+0x60>)
 800e99a:	690a      	ldr	r2, [r1, #16]
 800e99c:	694b      	ldr	r3, [r1, #20]
 800e99e:	4c0c      	ldr	r4, [pc, #48]	; (800e9d0 <rand+0x64>)
 800e9a0:	4350      	muls	r0, r2
 800e9a2:	fb04 0003 	mla	r0, r4, r3, r0
 800e9a6:	fba2 2304 	umull	r2, r3, r2, r4
 800e9aa:	4403      	add	r3, r0
 800e9ac:	1c54      	adds	r4, r2, #1
 800e9ae:	f143 0500 	adc.w	r5, r3, #0
 800e9b2:	e9c1 4504 	strd	r4, r5, [r1, #16]
 800e9b6:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 800e9ba:	bd38      	pop	{r3, r4, r5, pc}
 800e9bc:	20000010 	.word	0x20000010
 800e9c0:	abcd330e 	.word	0xabcd330e
 800e9c4:	e66d1234 	.word	0xe66d1234
 800e9c8:	0005deec 	.word	0x0005deec
 800e9cc:	5851f42d 	.word	0x5851f42d
 800e9d0:	4c957f2d 	.word	0x4c957f2d

0800e9d4 <std>:
 800e9d4:	2300      	movs	r3, #0
 800e9d6:	b510      	push	{r4, lr}
 800e9d8:	4604      	mov	r4, r0
 800e9da:	e9c0 3300 	strd	r3, r3, [r0]
 800e9de:	6083      	str	r3, [r0, #8]
 800e9e0:	8181      	strh	r1, [r0, #12]
 800e9e2:	6643      	str	r3, [r0, #100]	; 0x64
 800e9e4:	81c2      	strh	r2, [r0, #14]
 800e9e6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e9ea:	6183      	str	r3, [r0, #24]
 800e9ec:	4619      	mov	r1, r3
 800e9ee:	2208      	movs	r2, #8
 800e9f0:	305c      	adds	r0, #92	; 0x5c
 800e9f2:	f7ff ff9b 	bl	800e92c <memset>
 800e9f6:	4b05      	ldr	r3, [pc, #20]	; (800ea0c <std+0x38>)
 800e9f8:	6263      	str	r3, [r4, #36]	; 0x24
 800e9fa:	4b05      	ldr	r3, [pc, #20]	; (800ea10 <std+0x3c>)
 800e9fc:	62a3      	str	r3, [r4, #40]	; 0x28
 800e9fe:	4b05      	ldr	r3, [pc, #20]	; (800ea14 <std+0x40>)
 800ea00:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ea02:	4b05      	ldr	r3, [pc, #20]	; (800ea18 <std+0x44>)
 800ea04:	6224      	str	r4, [r4, #32]
 800ea06:	6323      	str	r3, [r4, #48]	; 0x30
 800ea08:	bd10      	pop	{r4, pc}
 800ea0a:	bf00      	nop
 800ea0c:	0800f279 	.word	0x0800f279
 800ea10:	0800f29b 	.word	0x0800f29b
 800ea14:	0800f2d3 	.word	0x0800f2d3
 800ea18:	0800f2f7 	.word	0x0800f2f7

0800ea1c <_cleanup_r>:
 800ea1c:	4901      	ldr	r1, [pc, #4]	; (800ea24 <_cleanup_r+0x8>)
 800ea1e:	f000 b885 	b.w	800eb2c <_fwalk_reent>
 800ea22:	bf00      	nop
 800ea24:	0800f5d1 	.word	0x0800f5d1

0800ea28 <__sfmoreglue>:
 800ea28:	b570      	push	{r4, r5, r6, lr}
 800ea2a:	1e4a      	subs	r2, r1, #1
 800ea2c:	2568      	movs	r5, #104	; 0x68
 800ea2e:	4355      	muls	r5, r2
 800ea30:	460e      	mov	r6, r1
 800ea32:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ea36:	f000 f8ed 	bl	800ec14 <_malloc_r>
 800ea3a:	4604      	mov	r4, r0
 800ea3c:	b140      	cbz	r0, 800ea50 <__sfmoreglue+0x28>
 800ea3e:	2100      	movs	r1, #0
 800ea40:	e9c0 1600 	strd	r1, r6, [r0]
 800ea44:	300c      	adds	r0, #12
 800ea46:	60a0      	str	r0, [r4, #8]
 800ea48:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ea4c:	f7ff ff6e 	bl	800e92c <memset>
 800ea50:	4620      	mov	r0, r4
 800ea52:	bd70      	pop	{r4, r5, r6, pc}

0800ea54 <__sinit>:
 800ea54:	6983      	ldr	r3, [r0, #24]
 800ea56:	b510      	push	{r4, lr}
 800ea58:	4604      	mov	r4, r0
 800ea5a:	bb33      	cbnz	r3, 800eaaa <__sinit+0x56>
 800ea5c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800ea60:	6503      	str	r3, [r0, #80]	; 0x50
 800ea62:	4b12      	ldr	r3, [pc, #72]	; (800eaac <__sinit+0x58>)
 800ea64:	4a12      	ldr	r2, [pc, #72]	; (800eab0 <__sinit+0x5c>)
 800ea66:	681b      	ldr	r3, [r3, #0]
 800ea68:	6282      	str	r2, [r0, #40]	; 0x28
 800ea6a:	4298      	cmp	r0, r3
 800ea6c:	bf04      	itt	eq
 800ea6e:	2301      	moveq	r3, #1
 800ea70:	6183      	streq	r3, [r0, #24]
 800ea72:	f000 f81f 	bl	800eab4 <__sfp>
 800ea76:	6060      	str	r0, [r4, #4]
 800ea78:	4620      	mov	r0, r4
 800ea7a:	f000 f81b 	bl	800eab4 <__sfp>
 800ea7e:	60a0      	str	r0, [r4, #8]
 800ea80:	4620      	mov	r0, r4
 800ea82:	f000 f817 	bl	800eab4 <__sfp>
 800ea86:	2200      	movs	r2, #0
 800ea88:	60e0      	str	r0, [r4, #12]
 800ea8a:	2104      	movs	r1, #4
 800ea8c:	6860      	ldr	r0, [r4, #4]
 800ea8e:	f7ff ffa1 	bl	800e9d4 <std>
 800ea92:	2201      	movs	r2, #1
 800ea94:	2109      	movs	r1, #9
 800ea96:	68a0      	ldr	r0, [r4, #8]
 800ea98:	f7ff ff9c 	bl	800e9d4 <std>
 800ea9c:	2202      	movs	r2, #2
 800ea9e:	2112      	movs	r1, #18
 800eaa0:	68e0      	ldr	r0, [r4, #12]
 800eaa2:	f7ff ff97 	bl	800e9d4 <std>
 800eaa6:	2301      	movs	r3, #1
 800eaa8:	61a3      	str	r3, [r4, #24]
 800eaaa:	bd10      	pop	{r4, pc}
 800eaac:	08011f2c 	.word	0x08011f2c
 800eab0:	0800ea1d 	.word	0x0800ea1d

0800eab4 <__sfp>:
 800eab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eab6:	4b1b      	ldr	r3, [pc, #108]	; (800eb24 <__sfp+0x70>)
 800eab8:	681e      	ldr	r6, [r3, #0]
 800eaba:	69b3      	ldr	r3, [r6, #24]
 800eabc:	4607      	mov	r7, r0
 800eabe:	b913      	cbnz	r3, 800eac6 <__sfp+0x12>
 800eac0:	4630      	mov	r0, r6
 800eac2:	f7ff ffc7 	bl	800ea54 <__sinit>
 800eac6:	3648      	adds	r6, #72	; 0x48
 800eac8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800eacc:	3b01      	subs	r3, #1
 800eace:	d503      	bpl.n	800ead8 <__sfp+0x24>
 800ead0:	6833      	ldr	r3, [r6, #0]
 800ead2:	b133      	cbz	r3, 800eae2 <__sfp+0x2e>
 800ead4:	6836      	ldr	r6, [r6, #0]
 800ead6:	e7f7      	b.n	800eac8 <__sfp+0x14>
 800ead8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800eadc:	b16d      	cbz	r5, 800eafa <__sfp+0x46>
 800eade:	3468      	adds	r4, #104	; 0x68
 800eae0:	e7f4      	b.n	800eacc <__sfp+0x18>
 800eae2:	2104      	movs	r1, #4
 800eae4:	4638      	mov	r0, r7
 800eae6:	f7ff ff9f 	bl	800ea28 <__sfmoreglue>
 800eaea:	6030      	str	r0, [r6, #0]
 800eaec:	2800      	cmp	r0, #0
 800eaee:	d1f1      	bne.n	800ead4 <__sfp+0x20>
 800eaf0:	230c      	movs	r3, #12
 800eaf2:	603b      	str	r3, [r7, #0]
 800eaf4:	4604      	mov	r4, r0
 800eaf6:	4620      	mov	r0, r4
 800eaf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eafa:	4b0b      	ldr	r3, [pc, #44]	; (800eb28 <__sfp+0x74>)
 800eafc:	6665      	str	r5, [r4, #100]	; 0x64
 800eafe:	e9c4 5500 	strd	r5, r5, [r4]
 800eb02:	60a5      	str	r5, [r4, #8]
 800eb04:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800eb08:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800eb0c:	2208      	movs	r2, #8
 800eb0e:	4629      	mov	r1, r5
 800eb10:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800eb14:	f7ff ff0a 	bl	800e92c <memset>
 800eb18:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800eb1c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800eb20:	e7e9      	b.n	800eaf6 <__sfp+0x42>
 800eb22:	bf00      	nop
 800eb24:	08011f2c 	.word	0x08011f2c
 800eb28:	ffff0001 	.word	0xffff0001

0800eb2c <_fwalk_reent>:
 800eb2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eb30:	4680      	mov	r8, r0
 800eb32:	4689      	mov	r9, r1
 800eb34:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800eb38:	2600      	movs	r6, #0
 800eb3a:	b914      	cbnz	r4, 800eb42 <_fwalk_reent+0x16>
 800eb3c:	4630      	mov	r0, r6
 800eb3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800eb42:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800eb46:	3f01      	subs	r7, #1
 800eb48:	d501      	bpl.n	800eb4e <_fwalk_reent+0x22>
 800eb4a:	6824      	ldr	r4, [r4, #0]
 800eb4c:	e7f5      	b.n	800eb3a <_fwalk_reent+0xe>
 800eb4e:	89ab      	ldrh	r3, [r5, #12]
 800eb50:	2b01      	cmp	r3, #1
 800eb52:	d907      	bls.n	800eb64 <_fwalk_reent+0x38>
 800eb54:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800eb58:	3301      	adds	r3, #1
 800eb5a:	d003      	beq.n	800eb64 <_fwalk_reent+0x38>
 800eb5c:	4629      	mov	r1, r5
 800eb5e:	4640      	mov	r0, r8
 800eb60:	47c8      	blx	r9
 800eb62:	4306      	orrs	r6, r0
 800eb64:	3568      	adds	r5, #104	; 0x68
 800eb66:	e7ee      	b.n	800eb46 <_fwalk_reent+0x1a>

0800eb68 <malloc>:
 800eb68:	4b02      	ldr	r3, [pc, #8]	; (800eb74 <malloc+0xc>)
 800eb6a:	4601      	mov	r1, r0
 800eb6c:	6818      	ldr	r0, [r3, #0]
 800eb6e:	f000 b851 	b.w	800ec14 <_malloc_r>
 800eb72:	bf00      	nop
 800eb74:	20000010 	.word	0x20000010

0800eb78 <_free_r>:
 800eb78:	b538      	push	{r3, r4, r5, lr}
 800eb7a:	4605      	mov	r5, r0
 800eb7c:	2900      	cmp	r1, #0
 800eb7e:	d045      	beq.n	800ec0c <_free_r+0x94>
 800eb80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800eb84:	1f0c      	subs	r4, r1, #4
 800eb86:	2b00      	cmp	r3, #0
 800eb88:	bfb8      	it	lt
 800eb8a:	18e4      	addlt	r4, r4, r3
 800eb8c:	f000 fdc0 	bl	800f710 <__malloc_lock>
 800eb90:	4a1f      	ldr	r2, [pc, #124]	; (800ec10 <_free_r+0x98>)
 800eb92:	6813      	ldr	r3, [r2, #0]
 800eb94:	4610      	mov	r0, r2
 800eb96:	b933      	cbnz	r3, 800eba6 <_free_r+0x2e>
 800eb98:	6063      	str	r3, [r4, #4]
 800eb9a:	6014      	str	r4, [r2, #0]
 800eb9c:	4628      	mov	r0, r5
 800eb9e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800eba2:	f000 bdb6 	b.w	800f712 <__malloc_unlock>
 800eba6:	42a3      	cmp	r3, r4
 800eba8:	d90c      	bls.n	800ebc4 <_free_r+0x4c>
 800ebaa:	6821      	ldr	r1, [r4, #0]
 800ebac:	1862      	adds	r2, r4, r1
 800ebae:	4293      	cmp	r3, r2
 800ebb0:	bf04      	itt	eq
 800ebb2:	681a      	ldreq	r2, [r3, #0]
 800ebb4:	685b      	ldreq	r3, [r3, #4]
 800ebb6:	6063      	str	r3, [r4, #4]
 800ebb8:	bf04      	itt	eq
 800ebba:	1852      	addeq	r2, r2, r1
 800ebbc:	6022      	streq	r2, [r4, #0]
 800ebbe:	6004      	str	r4, [r0, #0]
 800ebc0:	e7ec      	b.n	800eb9c <_free_r+0x24>
 800ebc2:	4613      	mov	r3, r2
 800ebc4:	685a      	ldr	r2, [r3, #4]
 800ebc6:	b10a      	cbz	r2, 800ebcc <_free_r+0x54>
 800ebc8:	42a2      	cmp	r2, r4
 800ebca:	d9fa      	bls.n	800ebc2 <_free_r+0x4a>
 800ebcc:	6819      	ldr	r1, [r3, #0]
 800ebce:	1858      	adds	r0, r3, r1
 800ebd0:	42a0      	cmp	r0, r4
 800ebd2:	d10b      	bne.n	800ebec <_free_r+0x74>
 800ebd4:	6820      	ldr	r0, [r4, #0]
 800ebd6:	4401      	add	r1, r0
 800ebd8:	1858      	adds	r0, r3, r1
 800ebda:	4282      	cmp	r2, r0
 800ebdc:	6019      	str	r1, [r3, #0]
 800ebde:	d1dd      	bne.n	800eb9c <_free_r+0x24>
 800ebe0:	6810      	ldr	r0, [r2, #0]
 800ebe2:	6852      	ldr	r2, [r2, #4]
 800ebe4:	605a      	str	r2, [r3, #4]
 800ebe6:	4401      	add	r1, r0
 800ebe8:	6019      	str	r1, [r3, #0]
 800ebea:	e7d7      	b.n	800eb9c <_free_r+0x24>
 800ebec:	d902      	bls.n	800ebf4 <_free_r+0x7c>
 800ebee:	230c      	movs	r3, #12
 800ebf0:	602b      	str	r3, [r5, #0]
 800ebf2:	e7d3      	b.n	800eb9c <_free_r+0x24>
 800ebf4:	6820      	ldr	r0, [r4, #0]
 800ebf6:	1821      	adds	r1, r4, r0
 800ebf8:	428a      	cmp	r2, r1
 800ebfa:	bf04      	itt	eq
 800ebfc:	6811      	ldreq	r1, [r2, #0]
 800ebfe:	6852      	ldreq	r2, [r2, #4]
 800ec00:	6062      	str	r2, [r4, #4]
 800ec02:	bf04      	itt	eq
 800ec04:	1809      	addeq	r1, r1, r0
 800ec06:	6021      	streq	r1, [r4, #0]
 800ec08:	605c      	str	r4, [r3, #4]
 800ec0a:	e7c7      	b.n	800eb9c <_free_r+0x24>
 800ec0c:	bd38      	pop	{r3, r4, r5, pc}
 800ec0e:	bf00      	nop
 800ec10:	20000200 	.word	0x20000200

0800ec14 <_malloc_r>:
 800ec14:	b570      	push	{r4, r5, r6, lr}
 800ec16:	1ccd      	adds	r5, r1, #3
 800ec18:	f025 0503 	bic.w	r5, r5, #3
 800ec1c:	3508      	adds	r5, #8
 800ec1e:	2d0c      	cmp	r5, #12
 800ec20:	bf38      	it	cc
 800ec22:	250c      	movcc	r5, #12
 800ec24:	2d00      	cmp	r5, #0
 800ec26:	4606      	mov	r6, r0
 800ec28:	db01      	blt.n	800ec2e <_malloc_r+0x1a>
 800ec2a:	42a9      	cmp	r1, r5
 800ec2c:	d903      	bls.n	800ec36 <_malloc_r+0x22>
 800ec2e:	230c      	movs	r3, #12
 800ec30:	6033      	str	r3, [r6, #0]
 800ec32:	2000      	movs	r0, #0
 800ec34:	bd70      	pop	{r4, r5, r6, pc}
 800ec36:	f000 fd6b 	bl	800f710 <__malloc_lock>
 800ec3a:	4a21      	ldr	r2, [pc, #132]	; (800ecc0 <_malloc_r+0xac>)
 800ec3c:	6814      	ldr	r4, [r2, #0]
 800ec3e:	4621      	mov	r1, r4
 800ec40:	b991      	cbnz	r1, 800ec68 <_malloc_r+0x54>
 800ec42:	4c20      	ldr	r4, [pc, #128]	; (800ecc4 <_malloc_r+0xb0>)
 800ec44:	6823      	ldr	r3, [r4, #0]
 800ec46:	b91b      	cbnz	r3, 800ec50 <_malloc_r+0x3c>
 800ec48:	4630      	mov	r0, r6
 800ec4a:	f000 fb05 	bl	800f258 <_sbrk_r>
 800ec4e:	6020      	str	r0, [r4, #0]
 800ec50:	4629      	mov	r1, r5
 800ec52:	4630      	mov	r0, r6
 800ec54:	f000 fb00 	bl	800f258 <_sbrk_r>
 800ec58:	1c43      	adds	r3, r0, #1
 800ec5a:	d124      	bne.n	800eca6 <_malloc_r+0x92>
 800ec5c:	230c      	movs	r3, #12
 800ec5e:	6033      	str	r3, [r6, #0]
 800ec60:	4630      	mov	r0, r6
 800ec62:	f000 fd56 	bl	800f712 <__malloc_unlock>
 800ec66:	e7e4      	b.n	800ec32 <_malloc_r+0x1e>
 800ec68:	680b      	ldr	r3, [r1, #0]
 800ec6a:	1b5b      	subs	r3, r3, r5
 800ec6c:	d418      	bmi.n	800eca0 <_malloc_r+0x8c>
 800ec6e:	2b0b      	cmp	r3, #11
 800ec70:	d90f      	bls.n	800ec92 <_malloc_r+0x7e>
 800ec72:	600b      	str	r3, [r1, #0]
 800ec74:	50cd      	str	r5, [r1, r3]
 800ec76:	18cc      	adds	r4, r1, r3
 800ec78:	4630      	mov	r0, r6
 800ec7a:	f000 fd4a 	bl	800f712 <__malloc_unlock>
 800ec7e:	f104 000b 	add.w	r0, r4, #11
 800ec82:	1d23      	adds	r3, r4, #4
 800ec84:	f020 0007 	bic.w	r0, r0, #7
 800ec88:	1ac3      	subs	r3, r0, r3
 800ec8a:	d0d3      	beq.n	800ec34 <_malloc_r+0x20>
 800ec8c:	425a      	negs	r2, r3
 800ec8e:	50e2      	str	r2, [r4, r3]
 800ec90:	e7d0      	b.n	800ec34 <_malloc_r+0x20>
 800ec92:	428c      	cmp	r4, r1
 800ec94:	684b      	ldr	r3, [r1, #4]
 800ec96:	bf16      	itet	ne
 800ec98:	6063      	strne	r3, [r4, #4]
 800ec9a:	6013      	streq	r3, [r2, #0]
 800ec9c:	460c      	movne	r4, r1
 800ec9e:	e7eb      	b.n	800ec78 <_malloc_r+0x64>
 800eca0:	460c      	mov	r4, r1
 800eca2:	6849      	ldr	r1, [r1, #4]
 800eca4:	e7cc      	b.n	800ec40 <_malloc_r+0x2c>
 800eca6:	1cc4      	adds	r4, r0, #3
 800eca8:	f024 0403 	bic.w	r4, r4, #3
 800ecac:	42a0      	cmp	r0, r4
 800ecae:	d005      	beq.n	800ecbc <_malloc_r+0xa8>
 800ecb0:	1a21      	subs	r1, r4, r0
 800ecb2:	4630      	mov	r0, r6
 800ecb4:	f000 fad0 	bl	800f258 <_sbrk_r>
 800ecb8:	3001      	adds	r0, #1
 800ecba:	d0cf      	beq.n	800ec5c <_malloc_r+0x48>
 800ecbc:	6025      	str	r5, [r4, #0]
 800ecbe:	e7db      	b.n	800ec78 <_malloc_r+0x64>
 800ecc0:	20000200 	.word	0x20000200
 800ecc4:	20000204 	.word	0x20000204

0800ecc8 <__sfputc_r>:
 800ecc8:	6893      	ldr	r3, [r2, #8]
 800ecca:	3b01      	subs	r3, #1
 800eccc:	2b00      	cmp	r3, #0
 800ecce:	b410      	push	{r4}
 800ecd0:	6093      	str	r3, [r2, #8]
 800ecd2:	da08      	bge.n	800ece6 <__sfputc_r+0x1e>
 800ecd4:	6994      	ldr	r4, [r2, #24]
 800ecd6:	42a3      	cmp	r3, r4
 800ecd8:	db01      	blt.n	800ecde <__sfputc_r+0x16>
 800ecda:	290a      	cmp	r1, #10
 800ecdc:	d103      	bne.n	800ece6 <__sfputc_r+0x1e>
 800ecde:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ece2:	f000 bb0d 	b.w	800f300 <__swbuf_r>
 800ece6:	6813      	ldr	r3, [r2, #0]
 800ece8:	1c58      	adds	r0, r3, #1
 800ecea:	6010      	str	r0, [r2, #0]
 800ecec:	7019      	strb	r1, [r3, #0]
 800ecee:	4608      	mov	r0, r1
 800ecf0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ecf4:	4770      	bx	lr

0800ecf6 <__sfputs_r>:
 800ecf6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ecf8:	4606      	mov	r6, r0
 800ecfa:	460f      	mov	r7, r1
 800ecfc:	4614      	mov	r4, r2
 800ecfe:	18d5      	adds	r5, r2, r3
 800ed00:	42ac      	cmp	r4, r5
 800ed02:	d101      	bne.n	800ed08 <__sfputs_r+0x12>
 800ed04:	2000      	movs	r0, #0
 800ed06:	e007      	b.n	800ed18 <__sfputs_r+0x22>
 800ed08:	463a      	mov	r2, r7
 800ed0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ed0e:	4630      	mov	r0, r6
 800ed10:	f7ff ffda 	bl	800ecc8 <__sfputc_r>
 800ed14:	1c43      	adds	r3, r0, #1
 800ed16:	d1f3      	bne.n	800ed00 <__sfputs_r+0xa>
 800ed18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ed1c <_vfiprintf_r>:
 800ed1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed20:	460c      	mov	r4, r1
 800ed22:	b09d      	sub	sp, #116	; 0x74
 800ed24:	4617      	mov	r7, r2
 800ed26:	461d      	mov	r5, r3
 800ed28:	4606      	mov	r6, r0
 800ed2a:	b118      	cbz	r0, 800ed34 <_vfiprintf_r+0x18>
 800ed2c:	6983      	ldr	r3, [r0, #24]
 800ed2e:	b90b      	cbnz	r3, 800ed34 <_vfiprintf_r+0x18>
 800ed30:	f7ff fe90 	bl	800ea54 <__sinit>
 800ed34:	4b7c      	ldr	r3, [pc, #496]	; (800ef28 <_vfiprintf_r+0x20c>)
 800ed36:	429c      	cmp	r4, r3
 800ed38:	d158      	bne.n	800edec <_vfiprintf_r+0xd0>
 800ed3a:	6874      	ldr	r4, [r6, #4]
 800ed3c:	89a3      	ldrh	r3, [r4, #12]
 800ed3e:	0718      	lsls	r0, r3, #28
 800ed40:	d55e      	bpl.n	800ee00 <_vfiprintf_r+0xe4>
 800ed42:	6923      	ldr	r3, [r4, #16]
 800ed44:	2b00      	cmp	r3, #0
 800ed46:	d05b      	beq.n	800ee00 <_vfiprintf_r+0xe4>
 800ed48:	2300      	movs	r3, #0
 800ed4a:	9309      	str	r3, [sp, #36]	; 0x24
 800ed4c:	2320      	movs	r3, #32
 800ed4e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ed52:	2330      	movs	r3, #48	; 0x30
 800ed54:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ed58:	9503      	str	r5, [sp, #12]
 800ed5a:	f04f 0b01 	mov.w	fp, #1
 800ed5e:	46b8      	mov	r8, r7
 800ed60:	4645      	mov	r5, r8
 800ed62:	f815 3b01 	ldrb.w	r3, [r5], #1
 800ed66:	b10b      	cbz	r3, 800ed6c <_vfiprintf_r+0x50>
 800ed68:	2b25      	cmp	r3, #37	; 0x25
 800ed6a:	d154      	bne.n	800ee16 <_vfiprintf_r+0xfa>
 800ed6c:	ebb8 0a07 	subs.w	sl, r8, r7
 800ed70:	d00b      	beq.n	800ed8a <_vfiprintf_r+0x6e>
 800ed72:	4653      	mov	r3, sl
 800ed74:	463a      	mov	r2, r7
 800ed76:	4621      	mov	r1, r4
 800ed78:	4630      	mov	r0, r6
 800ed7a:	f7ff ffbc 	bl	800ecf6 <__sfputs_r>
 800ed7e:	3001      	adds	r0, #1
 800ed80:	f000 80c2 	beq.w	800ef08 <_vfiprintf_r+0x1ec>
 800ed84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ed86:	4453      	add	r3, sl
 800ed88:	9309      	str	r3, [sp, #36]	; 0x24
 800ed8a:	f898 3000 	ldrb.w	r3, [r8]
 800ed8e:	2b00      	cmp	r3, #0
 800ed90:	f000 80ba 	beq.w	800ef08 <_vfiprintf_r+0x1ec>
 800ed94:	2300      	movs	r3, #0
 800ed96:	f04f 32ff 	mov.w	r2, #4294967295
 800ed9a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ed9e:	9304      	str	r3, [sp, #16]
 800eda0:	9307      	str	r3, [sp, #28]
 800eda2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800eda6:	931a      	str	r3, [sp, #104]	; 0x68
 800eda8:	46a8      	mov	r8, r5
 800edaa:	2205      	movs	r2, #5
 800edac:	f818 1b01 	ldrb.w	r1, [r8], #1
 800edb0:	485e      	ldr	r0, [pc, #376]	; (800ef2c <_vfiprintf_r+0x210>)
 800edb2:	f7f1 fa4d 	bl	8000250 <memchr>
 800edb6:	9b04      	ldr	r3, [sp, #16]
 800edb8:	bb78      	cbnz	r0, 800ee1a <_vfiprintf_r+0xfe>
 800edba:	06d9      	lsls	r1, r3, #27
 800edbc:	bf44      	itt	mi
 800edbe:	2220      	movmi	r2, #32
 800edc0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800edc4:	071a      	lsls	r2, r3, #28
 800edc6:	bf44      	itt	mi
 800edc8:	222b      	movmi	r2, #43	; 0x2b
 800edca:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800edce:	782a      	ldrb	r2, [r5, #0]
 800edd0:	2a2a      	cmp	r2, #42	; 0x2a
 800edd2:	d02a      	beq.n	800ee2a <_vfiprintf_r+0x10e>
 800edd4:	9a07      	ldr	r2, [sp, #28]
 800edd6:	46a8      	mov	r8, r5
 800edd8:	2000      	movs	r0, #0
 800edda:	250a      	movs	r5, #10
 800eddc:	4641      	mov	r1, r8
 800edde:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ede2:	3b30      	subs	r3, #48	; 0x30
 800ede4:	2b09      	cmp	r3, #9
 800ede6:	d969      	bls.n	800eebc <_vfiprintf_r+0x1a0>
 800ede8:	b360      	cbz	r0, 800ee44 <_vfiprintf_r+0x128>
 800edea:	e024      	b.n	800ee36 <_vfiprintf_r+0x11a>
 800edec:	4b50      	ldr	r3, [pc, #320]	; (800ef30 <_vfiprintf_r+0x214>)
 800edee:	429c      	cmp	r4, r3
 800edf0:	d101      	bne.n	800edf6 <_vfiprintf_r+0xda>
 800edf2:	68b4      	ldr	r4, [r6, #8]
 800edf4:	e7a2      	b.n	800ed3c <_vfiprintf_r+0x20>
 800edf6:	4b4f      	ldr	r3, [pc, #316]	; (800ef34 <_vfiprintf_r+0x218>)
 800edf8:	429c      	cmp	r4, r3
 800edfa:	bf08      	it	eq
 800edfc:	68f4      	ldreq	r4, [r6, #12]
 800edfe:	e79d      	b.n	800ed3c <_vfiprintf_r+0x20>
 800ee00:	4621      	mov	r1, r4
 800ee02:	4630      	mov	r0, r6
 800ee04:	f000 fae0 	bl	800f3c8 <__swsetup_r>
 800ee08:	2800      	cmp	r0, #0
 800ee0a:	d09d      	beq.n	800ed48 <_vfiprintf_r+0x2c>
 800ee0c:	f04f 30ff 	mov.w	r0, #4294967295
 800ee10:	b01d      	add	sp, #116	; 0x74
 800ee12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ee16:	46a8      	mov	r8, r5
 800ee18:	e7a2      	b.n	800ed60 <_vfiprintf_r+0x44>
 800ee1a:	4a44      	ldr	r2, [pc, #272]	; (800ef2c <_vfiprintf_r+0x210>)
 800ee1c:	1a80      	subs	r0, r0, r2
 800ee1e:	fa0b f000 	lsl.w	r0, fp, r0
 800ee22:	4318      	orrs	r0, r3
 800ee24:	9004      	str	r0, [sp, #16]
 800ee26:	4645      	mov	r5, r8
 800ee28:	e7be      	b.n	800eda8 <_vfiprintf_r+0x8c>
 800ee2a:	9a03      	ldr	r2, [sp, #12]
 800ee2c:	1d11      	adds	r1, r2, #4
 800ee2e:	6812      	ldr	r2, [r2, #0]
 800ee30:	9103      	str	r1, [sp, #12]
 800ee32:	2a00      	cmp	r2, #0
 800ee34:	db01      	blt.n	800ee3a <_vfiprintf_r+0x11e>
 800ee36:	9207      	str	r2, [sp, #28]
 800ee38:	e004      	b.n	800ee44 <_vfiprintf_r+0x128>
 800ee3a:	4252      	negs	r2, r2
 800ee3c:	f043 0302 	orr.w	r3, r3, #2
 800ee40:	9207      	str	r2, [sp, #28]
 800ee42:	9304      	str	r3, [sp, #16]
 800ee44:	f898 3000 	ldrb.w	r3, [r8]
 800ee48:	2b2e      	cmp	r3, #46	; 0x2e
 800ee4a:	d10e      	bne.n	800ee6a <_vfiprintf_r+0x14e>
 800ee4c:	f898 3001 	ldrb.w	r3, [r8, #1]
 800ee50:	2b2a      	cmp	r3, #42	; 0x2a
 800ee52:	d138      	bne.n	800eec6 <_vfiprintf_r+0x1aa>
 800ee54:	9b03      	ldr	r3, [sp, #12]
 800ee56:	1d1a      	adds	r2, r3, #4
 800ee58:	681b      	ldr	r3, [r3, #0]
 800ee5a:	9203      	str	r2, [sp, #12]
 800ee5c:	2b00      	cmp	r3, #0
 800ee5e:	bfb8      	it	lt
 800ee60:	f04f 33ff 	movlt.w	r3, #4294967295
 800ee64:	f108 0802 	add.w	r8, r8, #2
 800ee68:	9305      	str	r3, [sp, #20]
 800ee6a:	4d33      	ldr	r5, [pc, #204]	; (800ef38 <_vfiprintf_r+0x21c>)
 800ee6c:	f898 1000 	ldrb.w	r1, [r8]
 800ee70:	2203      	movs	r2, #3
 800ee72:	4628      	mov	r0, r5
 800ee74:	f7f1 f9ec 	bl	8000250 <memchr>
 800ee78:	b140      	cbz	r0, 800ee8c <_vfiprintf_r+0x170>
 800ee7a:	2340      	movs	r3, #64	; 0x40
 800ee7c:	1b40      	subs	r0, r0, r5
 800ee7e:	fa03 f000 	lsl.w	r0, r3, r0
 800ee82:	9b04      	ldr	r3, [sp, #16]
 800ee84:	4303      	orrs	r3, r0
 800ee86:	f108 0801 	add.w	r8, r8, #1
 800ee8a:	9304      	str	r3, [sp, #16]
 800ee8c:	f898 1000 	ldrb.w	r1, [r8]
 800ee90:	482a      	ldr	r0, [pc, #168]	; (800ef3c <_vfiprintf_r+0x220>)
 800ee92:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ee96:	2206      	movs	r2, #6
 800ee98:	f108 0701 	add.w	r7, r8, #1
 800ee9c:	f7f1 f9d8 	bl	8000250 <memchr>
 800eea0:	2800      	cmp	r0, #0
 800eea2:	d037      	beq.n	800ef14 <_vfiprintf_r+0x1f8>
 800eea4:	4b26      	ldr	r3, [pc, #152]	; (800ef40 <_vfiprintf_r+0x224>)
 800eea6:	bb1b      	cbnz	r3, 800eef0 <_vfiprintf_r+0x1d4>
 800eea8:	9b03      	ldr	r3, [sp, #12]
 800eeaa:	3307      	adds	r3, #7
 800eeac:	f023 0307 	bic.w	r3, r3, #7
 800eeb0:	3308      	adds	r3, #8
 800eeb2:	9303      	str	r3, [sp, #12]
 800eeb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eeb6:	444b      	add	r3, r9
 800eeb8:	9309      	str	r3, [sp, #36]	; 0x24
 800eeba:	e750      	b.n	800ed5e <_vfiprintf_r+0x42>
 800eebc:	fb05 3202 	mla	r2, r5, r2, r3
 800eec0:	2001      	movs	r0, #1
 800eec2:	4688      	mov	r8, r1
 800eec4:	e78a      	b.n	800eddc <_vfiprintf_r+0xc0>
 800eec6:	2300      	movs	r3, #0
 800eec8:	f108 0801 	add.w	r8, r8, #1
 800eecc:	9305      	str	r3, [sp, #20]
 800eece:	4619      	mov	r1, r3
 800eed0:	250a      	movs	r5, #10
 800eed2:	4640      	mov	r0, r8
 800eed4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800eed8:	3a30      	subs	r2, #48	; 0x30
 800eeda:	2a09      	cmp	r2, #9
 800eedc:	d903      	bls.n	800eee6 <_vfiprintf_r+0x1ca>
 800eede:	2b00      	cmp	r3, #0
 800eee0:	d0c3      	beq.n	800ee6a <_vfiprintf_r+0x14e>
 800eee2:	9105      	str	r1, [sp, #20]
 800eee4:	e7c1      	b.n	800ee6a <_vfiprintf_r+0x14e>
 800eee6:	fb05 2101 	mla	r1, r5, r1, r2
 800eeea:	2301      	movs	r3, #1
 800eeec:	4680      	mov	r8, r0
 800eeee:	e7f0      	b.n	800eed2 <_vfiprintf_r+0x1b6>
 800eef0:	ab03      	add	r3, sp, #12
 800eef2:	9300      	str	r3, [sp, #0]
 800eef4:	4622      	mov	r2, r4
 800eef6:	4b13      	ldr	r3, [pc, #76]	; (800ef44 <_vfiprintf_r+0x228>)
 800eef8:	a904      	add	r1, sp, #16
 800eefa:	4630      	mov	r0, r6
 800eefc:	f3af 8000 	nop.w
 800ef00:	f1b0 3fff 	cmp.w	r0, #4294967295
 800ef04:	4681      	mov	r9, r0
 800ef06:	d1d5      	bne.n	800eeb4 <_vfiprintf_r+0x198>
 800ef08:	89a3      	ldrh	r3, [r4, #12]
 800ef0a:	065b      	lsls	r3, r3, #25
 800ef0c:	f53f af7e 	bmi.w	800ee0c <_vfiprintf_r+0xf0>
 800ef10:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ef12:	e77d      	b.n	800ee10 <_vfiprintf_r+0xf4>
 800ef14:	ab03      	add	r3, sp, #12
 800ef16:	9300      	str	r3, [sp, #0]
 800ef18:	4622      	mov	r2, r4
 800ef1a:	4b0a      	ldr	r3, [pc, #40]	; (800ef44 <_vfiprintf_r+0x228>)
 800ef1c:	a904      	add	r1, sp, #16
 800ef1e:	4630      	mov	r0, r6
 800ef20:	f000 f888 	bl	800f034 <_printf_i>
 800ef24:	e7ec      	b.n	800ef00 <_vfiprintf_r+0x1e4>
 800ef26:	bf00      	nop
 800ef28:	08011f50 	.word	0x08011f50
 800ef2c:	08011f90 	.word	0x08011f90
 800ef30:	08011f70 	.word	0x08011f70
 800ef34:	08011f30 	.word	0x08011f30
 800ef38:	08011f96 	.word	0x08011f96
 800ef3c:	08011f9a 	.word	0x08011f9a
 800ef40:	00000000 	.word	0x00000000
 800ef44:	0800ecf7 	.word	0x0800ecf7

0800ef48 <_printf_common>:
 800ef48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ef4c:	4691      	mov	r9, r2
 800ef4e:	461f      	mov	r7, r3
 800ef50:	688a      	ldr	r2, [r1, #8]
 800ef52:	690b      	ldr	r3, [r1, #16]
 800ef54:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ef58:	4293      	cmp	r3, r2
 800ef5a:	bfb8      	it	lt
 800ef5c:	4613      	movlt	r3, r2
 800ef5e:	f8c9 3000 	str.w	r3, [r9]
 800ef62:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ef66:	4606      	mov	r6, r0
 800ef68:	460c      	mov	r4, r1
 800ef6a:	b112      	cbz	r2, 800ef72 <_printf_common+0x2a>
 800ef6c:	3301      	adds	r3, #1
 800ef6e:	f8c9 3000 	str.w	r3, [r9]
 800ef72:	6823      	ldr	r3, [r4, #0]
 800ef74:	0699      	lsls	r1, r3, #26
 800ef76:	bf42      	ittt	mi
 800ef78:	f8d9 3000 	ldrmi.w	r3, [r9]
 800ef7c:	3302      	addmi	r3, #2
 800ef7e:	f8c9 3000 	strmi.w	r3, [r9]
 800ef82:	6825      	ldr	r5, [r4, #0]
 800ef84:	f015 0506 	ands.w	r5, r5, #6
 800ef88:	d107      	bne.n	800ef9a <_printf_common+0x52>
 800ef8a:	f104 0a19 	add.w	sl, r4, #25
 800ef8e:	68e3      	ldr	r3, [r4, #12]
 800ef90:	f8d9 2000 	ldr.w	r2, [r9]
 800ef94:	1a9b      	subs	r3, r3, r2
 800ef96:	42ab      	cmp	r3, r5
 800ef98:	dc28      	bgt.n	800efec <_printf_common+0xa4>
 800ef9a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800ef9e:	6822      	ldr	r2, [r4, #0]
 800efa0:	3300      	adds	r3, #0
 800efa2:	bf18      	it	ne
 800efa4:	2301      	movne	r3, #1
 800efa6:	0692      	lsls	r2, r2, #26
 800efa8:	d42d      	bmi.n	800f006 <_printf_common+0xbe>
 800efaa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800efae:	4639      	mov	r1, r7
 800efb0:	4630      	mov	r0, r6
 800efb2:	47c0      	blx	r8
 800efb4:	3001      	adds	r0, #1
 800efb6:	d020      	beq.n	800effa <_printf_common+0xb2>
 800efb8:	6823      	ldr	r3, [r4, #0]
 800efba:	68e5      	ldr	r5, [r4, #12]
 800efbc:	f8d9 2000 	ldr.w	r2, [r9]
 800efc0:	f003 0306 	and.w	r3, r3, #6
 800efc4:	2b04      	cmp	r3, #4
 800efc6:	bf08      	it	eq
 800efc8:	1aad      	subeq	r5, r5, r2
 800efca:	68a3      	ldr	r3, [r4, #8]
 800efcc:	6922      	ldr	r2, [r4, #16]
 800efce:	bf0c      	ite	eq
 800efd0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800efd4:	2500      	movne	r5, #0
 800efd6:	4293      	cmp	r3, r2
 800efd8:	bfc4      	itt	gt
 800efda:	1a9b      	subgt	r3, r3, r2
 800efdc:	18ed      	addgt	r5, r5, r3
 800efde:	f04f 0900 	mov.w	r9, #0
 800efe2:	341a      	adds	r4, #26
 800efe4:	454d      	cmp	r5, r9
 800efe6:	d11a      	bne.n	800f01e <_printf_common+0xd6>
 800efe8:	2000      	movs	r0, #0
 800efea:	e008      	b.n	800effe <_printf_common+0xb6>
 800efec:	2301      	movs	r3, #1
 800efee:	4652      	mov	r2, sl
 800eff0:	4639      	mov	r1, r7
 800eff2:	4630      	mov	r0, r6
 800eff4:	47c0      	blx	r8
 800eff6:	3001      	adds	r0, #1
 800eff8:	d103      	bne.n	800f002 <_printf_common+0xba>
 800effa:	f04f 30ff 	mov.w	r0, #4294967295
 800effe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f002:	3501      	adds	r5, #1
 800f004:	e7c3      	b.n	800ef8e <_printf_common+0x46>
 800f006:	18e1      	adds	r1, r4, r3
 800f008:	1c5a      	adds	r2, r3, #1
 800f00a:	2030      	movs	r0, #48	; 0x30
 800f00c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f010:	4422      	add	r2, r4
 800f012:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f016:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f01a:	3302      	adds	r3, #2
 800f01c:	e7c5      	b.n	800efaa <_printf_common+0x62>
 800f01e:	2301      	movs	r3, #1
 800f020:	4622      	mov	r2, r4
 800f022:	4639      	mov	r1, r7
 800f024:	4630      	mov	r0, r6
 800f026:	47c0      	blx	r8
 800f028:	3001      	adds	r0, #1
 800f02a:	d0e6      	beq.n	800effa <_printf_common+0xb2>
 800f02c:	f109 0901 	add.w	r9, r9, #1
 800f030:	e7d8      	b.n	800efe4 <_printf_common+0x9c>
	...

0800f034 <_printf_i>:
 800f034:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f038:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800f03c:	460c      	mov	r4, r1
 800f03e:	7e09      	ldrb	r1, [r1, #24]
 800f040:	b085      	sub	sp, #20
 800f042:	296e      	cmp	r1, #110	; 0x6e
 800f044:	4617      	mov	r7, r2
 800f046:	4606      	mov	r6, r0
 800f048:	4698      	mov	r8, r3
 800f04a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f04c:	f000 80b3 	beq.w	800f1b6 <_printf_i+0x182>
 800f050:	d822      	bhi.n	800f098 <_printf_i+0x64>
 800f052:	2963      	cmp	r1, #99	; 0x63
 800f054:	d036      	beq.n	800f0c4 <_printf_i+0x90>
 800f056:	d80a      	bhi.n	800f06e <_printf_i+0x3a>
 800f058:	2900      	cmp	r1, #0
 800f05a:	f000 80b9 	beq.w	800f1d0 <_printf_i+0x19c>
 800f05e:	2958      	cmp	r1, #88	; 0x58
 800f060:	f000 8083 	beq.w	800f16a <_printf_i+0x136>
 800f064:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f068:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800f06c:	e032      	b.n	800f0d4 <_printf_i+0xa0>
 800f06e:	2964      	cmp	r1, #100	; 0x64
 800f070:	d001      	beq.n	800f076 <_printf_i+0x42>
 800f072:	2969      	cmp	r1, #105	; 0x69
 800f074:	d1f6      	bne.n	800f064 <_printf_i+0x30>
 800f076:	6820      	ldr	r0, [r4, #0]
 800f078:	6813      	ldr	r3, [r2, #0]
 800f07a:	0605      	lsls	r5, r0, #24
 800f07c:	f103 0104 	add.w	r1, r3, #4
 800f080:	d52a      	bpl.n	800f0d8 <_printf_i+0xa4>
 800f082:	681b      	ldr	r3, [r3, #0]
 800f084:	6011      	str	r1, [r2, #0]
 800f086:	2b00      	cmp	r3, #0
 800f088:	da03      	bge.n	800f092 <_printf_i+0x5e>
 800f08a:	222d      	movs	r2, #45	; 0x2d
 800f08c:	425b      	negs	r3, r3
 800f08e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800f092:	486f      	ldr	r0, [pc, #444]	; (800f250 <_printf_i+0x21c>)
 800f094:	220a      	movs	r2, #10
 800f096:	e039      	b.n	800f10c <_printf_i+0xd8>
 800f098:	2973      	cmp	r1, #115	; 0x73
 800f09a:	f000 809d 	beq.w	800f1d8 <_printf_i+0x1a4>
 800f09e:	d808      	bhi.n	800f0b2 <_printf_i+0x7e>
 800f0a0:	296f      	cmp	r1, #111	; 0x6f
 800f0a2:	d020      	beq.n	800f0e6 <_printf_i+0xb2>
 800f0a4:	2970      	cmp	r1, #112	; 0x70
 800f0a6:	d1dd      	bne.n	800f064 <_printf_i+0x30>
 800f0a8:	6823      	ldr	r3, [r4, #0]
 800f0aa:	f043 0320 	orr.w	r3, r3, #32
 800f0ae:	6023      	str	r3, [r4, #0]
 800f0b0:	e003      	b.n	800f0ba <_printf_i+0x86>
 800f0b2:	2975      	cmp	r1, #117	; 0x75
 800f0b4:	d017      	beq.n	800f0e6 <_printf_i+0xb2>
 800f0b6:	2978      	cmp	r1, #120	; 0x78
 800f0b8:	d1d4      	bne.n	800f064 <_printf_i+0x30>
 800f0ba:	2378      	movs	r3, #120	; 0x78
 800f0bc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f0c0:	4864      	ldr	r0, [pc, #400]	; (800f254 <_printf_i+0x220>)
 800f0c2:	e055      	b.n	800f170 <_printf_i+0x13c>
 800f0c4:	6813      	ldr	r3, [r2, #0]
 800f0c6:	1d19      	adds	r1, r3, #4
 800f0c8:	681b      	ldr	r3, [r3, #0]
 800f0ca:	6011      	str	r1, [r2, #0]
 800f0cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f0d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f0d4:	2301      	movs	r3, #1
 800f0d6:	e08c      	b.n	800f1f2 <_printf_i+0x1be>
 800f0d8:	681b      	ldr	r3, [r3, #0]
 800f0da:	6011      	str	r1, [r2, #0]
 800f0dc:	f010 0f40 	tst.w	r0, #64	; 0x40
 800f0e0:	bf18      	it	ne
 800f0e2:	b21b      	sxthne	r3, r3
 800f0e4:	e7cf      	b.n	800f086 <_printf_i+0x52>
 800f0e6:	6813      	ldr	r3, [r2, #0]
 800f0e8:	6825      	ldr	r5, [r4, #0]
 800f0ea:	1d18      	adds	r0, r3, #4
 800f0ec:	6010      	str	r0, [r2, #0]
 800f0ee:	0628      	lsls	r0, r5, #24
 800f0f0:	d501      	bpl.n	800f0f6 <_printf_i+0xc2>
 800f0f2:	681b      	ldr	r3, [r3, #0]
 800f0f4:	e002      	b.n	800f0fc <_printf_i+0xc8>
 800f0f6:	0668      	lsls	r0, r5, #25
 800f0f8:	d5fb      	bpl.n	800f0f2 <_printf_i+0xbe>
 800f0fa:	881b      	ldrh	r3, [r3, #0]
 800f0fc:	4854      	ldr	r0, [pc, #336]	; (800f250 <_printf_i+0x21c>)
 800f0fe:	296f      	cmp	r1, #111	; 0x6f
 800f100:	bf14      	ite	ne
 800f102:	220a      	movne	r2, #10
 800f104:	2208      	moveq	r2, #8
 800f106:	2100      	movs	r1, #0
 800f108:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f10c:	6865      	ldr	r5, [r4, #4]
 800f10e:	60a5      	str	r5, [r4, #8]
 800f110:	2d00      	cmp	r5, #0
 800f112:	f2c0 8095 	blt.w	800f240 <_printf_i+0x20c>
 800f116:	6821      	ldr	r1, [r4, #0]
 800f118:	f021 0104 	bic.w	r1, r1, #4
 800f11c:	6021      	str	r1, [r4, #0]
 800f11e:	2b00      	cmp	r3, #0
 800f120:	d13d      	bne.n	800f19e <_printf_i+0x16a>
 800f122:	2d00      	cmp	r5, #0
 800f124:	f040 808e 	bne.w	800f244 <_printf_i+0x210>
 800f128:	4665      	mov	r5, ip
 800f12a:	2a08      	cmp	r2, #8
 800f12c:	d10b      	bne.n	800f146 <_printf_i+0x112>
 800f12e:	6823      	ldr	r3, [r4, #0]
 800f130:	07db      	lsls	r3, r3, #31
 800f132:	d508      	bpl.n	800f146 <_printf_i+0x112>
 800f134:	6923      	ldr	r3, [r4, #16]
 800f136:	6862      	ldr	r2, [r4, #4]
 800f138:	429a      	cmp	r2, r3
 800f13a:	bfde      	ittt	le
 800f13c:	2330      	movle	r3, #48	; 0x30
 800f13e:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f142:	f105 35ff 	addle.w	r5, r5, #4294967295
 800f146:	ebac 0305 	sub.w	r3, ip, r5
 800f14a:	6123      	str	r3, [r4, #16]
 800f14c:	f8cd 8000 	str.w	r8, [sp]
 800f150:	463b      	mov	r3, r7
 800f152:	aa03      	add	r2, sp, #12
 800f154:	4621      	mov	r1, r4
 800f156:	4630      	mov	r0, r6
 800f158:	f7ff fef6 	bl	800ef48 <_printf_common>
 800f15c:	3001      	adds	r0, #1
 800f15e:	d14d      	bne.n	800f1fc <_printf_i+0x1c8>
 800f160:	f04f 30ff 	mov.w	r0, #4294967295
 800f164:	b005      	add	sp, #20
 800f166:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f16a:	4839      	ldr	r0, [pc, #228]	; (800f250 <_printf_i+0x21c>)
 800f16c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800f170:	6813      	ldr	r3, [r2, #0]
 800f172:	6821      	ldr	r1, [r4, #0]
 800f174:	1d1d      	adds	r5, r3, #4
 800f176:	681b      	ldr	r3, [r3, #0]
 800f178:	6015      	str	r5, [r2, #0]
 800f17a:	060a      	lsls	r2, r1, #24
 800f17c:	d50b      	bpl.n	800f196 <_printf_i+0x162>
 800f17e:	07ca      	lsls	r2, r1, #31
 800f180:	bf44      	itt	mi
 800f182:	f041 0120 	orrmi.w	r1, r1, #32
 800f186:	6021      	strmi	r1, [r4, #0]
 800f188:	b91b      	cbnz	r3, 800f192 <_printf_i+0x15e>
 800f18a:	6822      	ldr	r2, [r4, #0]
 800f18c:	f022 0220 	bic.w	r2, r2, #32
 800f190:	6022      	str	r2, [r4, #0]
 800f192:	2210      	movs	r2, #16
 800f194:	e7b7      	b.n	800f106 <_printf_i+0xd2>
 800f196:	064d      	lsls	r5, r1, #25
 800f198:	bf48      	it	mi
 800f19a:	b29b      	uxthmi	r3, r3
 800f19c:	e7ef      	b.n	800f17e <_printf_i+0x14a>
 800f19e:	4665      	mov	r5, ip
 800f1a0:	fbb3 f1f2 	udiv	r1, r3, r2
 800f1a4:	fb02 3311 	mls	r3, r2, r1, r3
 800f1a8:	5cc3      	ldrb	r3, [r0, r3]
 800f1aa:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800f1ae:	460b      	mov	r3, r1
 800f1b0:	2900      	cmp	r1, #0
 800f1b2:	d1f5      	bne.n	800f1a0 <_printf_i+0x16c>
 800f1b4:	e7b9      	b.n	800f12a <_printf_i+0xf6>
 800f1b6:	6813      	ldr	r3, [r2, #0]
 800f1b8:	6825      	ldr	r5, [r4, #0]
 800f1ba:	6961      	ldr	r1, [r4, #20]
 800f1bc:	1d18      	adds	r0, r3, #4
 800f1be:	6010      	str	r0, [r2, #0]
 800f1c0:	0628      	lsls	r0, r5, #24
 800f1c2:	681b      	ldr	r3, [r3, #0]
 800f1c4:	d501      	bpl.n	800f1ca <_printf_i+0x196>
 800f1c6:	6019      	str	r1, [r3, #0]
 800f1c8:	e002      	b.n	800f1d0 <_printf_i+0x19c>
 800f1ca:	066a      	lsls	r2, r5, #25
 800f1cc:	d5fb      	bpl.n	800f1c6 <_printf_i+0x192>
 800f1ce:	8019      	strh	r1, [r3, #0]
 800f1d0:	2300      	movs	r3, #0
 800f1d2:	6123      	str	r3, [r4, #16]
 800f1d4:	4665      	mov	r5, ip
 800f1d6:	e7b9      	b.n	800f14c <_printf_i+0x118>
 800f1d8:	6813      	ldr	r3, [r2, #0]
 800f1da:	1d19      	adds	r1, r3, #4
 800f1dc:	6011      	str	r1, [r2, #0]
 800f1de:	681d      	ldr	r5, [r3, #0]
 800f1e0:	6862      	ldr	r2, [r4, #4]
 800f1e2:	2100      	movs	r1, #0
 800f1e4:	4628      	mov	r0, r5
 800f1e6:	f7f1 f833 	bl	8000250 <memchr>
 800f1ea:	b108      	cbz	r0, 800f1f0 <_printf_i+0x1bc>
 800f1ec:	1b40      	subs	r0, r0, r5
 800f1ee:	6060      	str	r0, [r4, #4]
 800f1f0:	6863      	ldr	r3, [r4, #4]
 800f1f2:	6123      	str	r3, [r4, #16]
 800f1f4:	2300      	movs	r3, #0
 800f1f6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f1fa:	e7a7      	b.n	800f14c <_printf_i+0x118>
 800f1fc:	6923      	ldr	r3, [r4, #16]
 800f1fe:	462a      	mov	r2, r5
 800f200:	4639      	mov	r1, r7
 800f202:	4630      	mov	r0, r6
 800f204:	47c0      	blx	r8
 800f206:	3001      	adds	r0, #1
 800f208:	d0aa      	beq.n	800f160 <_printf_i+0x12c>
 800f20a:	6823      	ldr	r3, [r4, #0]
 800f20c:	079b      	lsls	r3, r3, #30
 800f20e:	d413      	bmi.n	800f238 <_printf_i+0x204>
 800f210:	68e0      	ldr	r0, [r4, #12]
 800f212:	9b03      	ldr	r3, [sp, #12]
 800f214:	4298      	cmp	r0, r3
 800f216:	bfb8      	it	lt
 800f218:	4618      	movlt	r0, r3
 800f21a:	e7a3      	b.n	800f164 <_printf_i+0x130>
 800f21c:	2301      	movs	r3, #1
 800f21e:	464a      	mov	r2, r9
 800f220:	4639      	mov	r1, r7
 800f222:	4630      	mov	r0, r6
 800f224:	47c0      	blx	r8
 800f226:	3001      	adds	r0, #1
 800f228:	d09a      	beq.n	800f160 <_printf_i+0x12c>
 800f22a:	3501      	adds	r5, #1
 800f22c:	68e3      	ldr	r3, [r4, #12]
 800f22e:	9a03      	ldr	r2, [sp, #12]
 800f230:	1a9b      	subs	r3, r3, r2
 800f232:	42ab      	cmp	r3, r5
 800f234:	dcf2      	bgt.n	800f21c <_printf_i+0x1e8>
 800f236:	e7eb      	b.n	800f210 <_printf_i+0x1dc>
 800f238:	2500      	movs	r5, #0
 800f23a:	f104 0919 	add.w	r9, r4, #25
 800f23e:	e7f5      	b.n	800f22c <_printf_i+0x1f8>
 800f240:	2b00      	cmp	r3, #0
 800f242:	d1ac      	bne.n	800f19e <_printf_i+0x16a>
 800f244:	7803      	ldrb	r3, [r0, #0]
 800f246:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f24a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f24e:	e76c      	b.n	800f12a <_printf_i+0xf6>
 800f250:	08011fa1 	.word	0x08011fa1
 800f254:	08011fb2 	.word	0x08011fb2

0800f258 <_sbrk_r>:
 800f258:	b538      	push	{r3, r4, r5, lr}
 800f25a:	4c06      	ldr	r4, [pc, #24]	; (800f274 <_sbrk_r+0x1c>)
 800f25c:	2300      	movs	r3, #0
 800f25e:	4605      	mov	r5, r0
 800f260:	4608      	mov	r0, r1
 800f262:	6023      	str	r3, [r4, #0]
 800f264:	f7f1 fd2c 	bl	8000cc0 <_sbrk>
 800f268:	1c43      	adds	r3, r0, #1
 800f26a:	d102      	bne.n	800f272 <_sbrk_r+0x1a>
 800f26c:	6823      	ldr	r3, [r4, #0]
 800f26e:	b103      	cbz	r3, 800f272 <_sbrk_r+0x1a>
 800f270:	602b      	str	r3, [r5, #0]
 800f272:	bd38      	pop	{r3, r4, r5, pc}
 800f274:	20008af8 	.word	0x20008af8

0800f278 <__sread>:
 800f278:	b510      	push	{r4, lr}
 800f27a:	460c      	mov	r4, r1
 800f27c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f280:	f000 fa48 	bl	800f714 <_read_r>
 800f284:	2800      	cmp	r0, #0
 800f286:	bfab      	itete	ge
 800f288:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f28a:	89a3      	ldrhlt	r3, [r4, #12]
 800f28c:	181b      	addge	r3, r3, r0
 800f28e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f292:	bfac      	ite	ge
 800f294:	6563      	strge	r3, [r4, #84]	; 0x54
 800f296:	81a3      	strhlt	r3, [r4, #12]
 800f298:	bd10      	pop	{r4, pc}

0800f29a <__swrite>:
 800f29a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f29e:	461f      	mov	r7, r3
 800f2a0:	898b      	ldrh	r3, [r1, #12]
 800f2a2:	05db      	lsls	r3, r3, #23
 800f2a4:	4605      	mov	r5, r0
 800f2a6:	460c      	mov	r4, r1
 800f2a8:	4616      	mov	r6, r2
 800f2aa:	d505      	bpl.n	800f2b8 <__swrite+0x1e>
 800f2ac:	2302      	movs	r3, #2
 800f2ae:	2200      	movs	r2, #0
 800f2b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f2b4:	f000 f9b6 	bl	800f624 <_lseek_r>
 800f2b8:	89a3      	ldrh	r3, [r4, #12]
 800f2ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f2be:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f2c2:	81a3      	strh	r3, [r4, #12]
 800f2c4:	4632      	mov	r2, r6
 800f2c6:	463b      	mov	r3, r7
 800f2c8:	4628      	mov	r0, r5
 800f2ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f2ce:	f000 b869 	b.w	800f3a4 <_write_r>

0800f2d2 <__sseek>:
 800f2d2:	b510      	push	{r4, lr}
 800f2d4:	460c      	mov	r4, r1
 800f2d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f2da:	f000 f9a3 	bl	800f624 <_lseek_r>
 800f2de:	1c43      	adds	r3, r0, #1
 800f2e0:	89a3      	ldrh	r3, [r4, #12]
 800f2e2:	bf15      	itete	ne
 800f2e4:	6560      	strne	r0, [r4, #84]	; 0x54
 800f2e6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f2ea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f2ee:	81a3      	strheq	r3, [r4, #12]
 800f2f0:	bf18      	it	ne
 800f2f2:	81a3      	strhne	r3, [r4, #12]
 800f2f4:	bd10      	pop	{r4, pc}

0800f2f6 <__sclose>:
 800f2f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f2fa:	f000 b8d3 	b.w	800f4a4 <_close_r>
	...

0800f300 <__swbuf_r>:
 800f300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f302:	460e      	mov	r6, r1
 800f304:	4614      	mov	r4, r2
 800f306:	4605      	mov	r5, r0
 800f308:	b118      	cbz	r0, 800f312 <__swbuf_r+0x12>
 800f30a:	6983      	ldr	r3, [r0, #24]
 800f30c:	b90b      	cbnz	r3, 800f312 <__swbuf_r+0x12>
 800f30e:	f7ff fba1 	bl	800ea54 <__sinit>
 800f312:	4b21      	ldr	r3, [pc, #132]	; (800f398 <__swbuf_r+0x98>)
 800f314:	429c      	cmp	r4, r3
 800f316:	d12a      	bne.n	800f36e <__swbuf_r+0x6e>
 800f318:	686c      	ldr	r4, [r5, #4]
 800f31a:	69a3      	ldr	r3, [r4, #24]
 800f31c:	60a3      	str	r3, [r4, #8]
 800f31e:	89a3      	ldrh	r3, [r4, #12]
 800f320:	071a      	lsls	r2, r3, #28
 800f322:	d52e      	bpl.n	800f382 <__swbuf_r+0x82>
 800f324:	6923      	ldr	r3, [r4, #16]
 800f326:	b363      	cbz	r3, 800f382 <__swbuf_r+0x82>
 800f328:	6923      	ldr	r3, [r4, #16]
 800f32a:	6820      	ldr	r0, [r4, #0]
 800f32c:	1ac0      	subs	r0, r0, r3
 800f32e:	6963      	ldr	r3, [r4, #20]
 800f330:	b2f6      	uxtb	r6, r6
 800f332:	4283      	cmp	r3, r0
 800f334:	4637      	mov	r7, r6
 800f336:	dc04      	bgt.n	800f342 <__swbuf_r+0x42>
 800f338:	4621      	mov	r1, r4
 800f33a:	4628      	mov	r0, r5
 800f33c:	f000 f948 	bl	800f5d0 <_fflush_r>
 800f340:	bb28      	cbnz	r0, 800f38e <__swbuf_r+0x8e>
 800f342:	68a3      	ldr	r3, [r4, #8]
 800f344:	3b01      	subs	r3, #1
 800f346:	60a3      	str	r3, [r4, #8]
 800f348:	6823      	ldr	r3, [r4, #0]
 800f34a:	1c5a      	adds	r2, r3, #1
 800f34c:	6022      	str	r2, [r4, #0]
 800f34e:	701e      	strb	r6, [r3, #0]
 800f350:	6963      	ldr	r3, [r4, #20]
 800f352:	3001      	adds	r0, #1
 800f354:	4283      	cmp	r3, r0
 800f356:	d004      	beq.n	800f362 <__swbuf_r+0x62>
 800f358:	89a3      	ldrh	r3, [r4, #12]
 800f35a:	07db      	lsls	r3, r3, #31
 800f35c:	d519      	bpl.n	800f392 <__swbuf_r+0x92>
 800f35e:	2e0a      	cmp	r6, #10
 800f360:	d117      	bne.n	800f392 <__swbuf_r+0x92>
 800f362:	4621      	mov	r1, r4
 800f364:	4628      	mov	r0, r5
 800f366:	f000 f933 	bl	800f5d0 <_fflush_r>
 800f36a:	b190      	cbz	r0, 800f392 <__swbuf_r+0x92>
 800f36c:	e00f      	b.n	800f38e <__swbuf_r+0x8e>
 800f36e:	4b0b      	ldr	r3, [pc, #44]	; (800f39c <__swbuf_r+0x9c>)
 800f370:	429c      	cmp	r4, r3
 800f372:	d101      	bne.n	800f378 <__swbuf_r+0x78>
 800f374:	68ac      	ldr	r4, [r5, #8]
 800f376:	e7d0      	b.n	800f31a <__swbuf_r+0x1a>
 800f378:	4b09      	ldr	r3, [pc, #36]	; (800f3a0 <__swbuf_r+0xa0>)
 800f37a:	429c      	cmp	r4, r3
 800f37c:	bf08      	it	eq
 800f37e:	68ec      	ldreq	r4, [r5, #12]
 800f380:	e7cb      	b.n	800f31a <__swbuf_r+0x1a>
 800f382:	4621      	mov	r1, r4
 800f384:	4628      	mov	r0, r5
 800f386:	f000 f81f 	bl	800f3c8 <__swsetup_r>
 800f38a:	2800      	cmp	r0, #0
 800f38c:	d0cc      	beq.n	800f328 <__swbuf_r+0x28>
 800f38e:	f04f 37ff 	mov.w	r7, #4294967295
 800f392:	4638      	mov	r0, r7
 800f394:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f396:	bf00      	nop
 800f398:	08011f50 	.word	0x08011f50
 800f39c:	08011f70 	.word	0x08011f70
 800f3a0:	08011f30 	.word	0x08011f30

0800f3a4 <_write_r>:
 800f3a4:	b538      	push	{r3, r4, r5, lr}
 800f3a6:	4c07      	ldr	r4, [pc, #28]	; (800f3c4 <_write_r+0x20>)
 800f3a8:	4605      	mov	r5, r0
 800f3aa:	4608      	mov	r0, r1
 800f3ac:	4611      	mov	r1, r2
 800f3ae:	2200      	movs	r2, #0
 800f3b0:	6022      	str	r2, [r4, #0]
 800f3b2:	461a      	mov	r2, r3
 800f3b4:	f7f1 fc33 	bl	8000c1e <_write>
 800f3b8:	1c43      	adds	r3, r0, #1
 800f3ba:	d102      	bne.n	800f3c2 <_write_r+0x1e>
 800f3bc:	6823      	ldr	r3, [r4, #0]
 800f3be:	b103      	cbz	r3, 800f3c2 <_write_r+0x1e>
 800f3c0:	602b      	str	r3, [r5, #0]
 800f3c2:	bd38      	pop	{r3, r4, r5, pc}
 800f3c4:	20008af8 	.word	0x20008af8

0800f3c8 <__swsetup_r>:
 800f3c8:	4b32      	ldr	r3, [pc, #200]	; (800f494 <__swsetup_r+0xcc>)
 800f3ca:	b570      	push	{r4, r5, r6, lr}
 800f3cc:	681d      	ldr	r5, [r3, #0]
 800f3ce:	4606      	mov	r6, r0
 800f3d0:	460c      	mov	r4, r1
 800f3d2:	b125      	cbz	r5, 800f3de <__swsetup_r+0x16>
 800f3d4:	69ab      	ldr	r3, [r5, #24]
 800f3d6:	b913      	cbnz	r3, 800f3de <__swsetup_r+0x16>
 800f3d8:	4628      	mov	r0, r5
 800f3da:	f7ff fb3b 	bl	800ea54 <__sinit>
 800f3de:	4b2e      	ldr	r3, [pc, #184]	; (800f498 <__swsetup_r+0xd0>)
 800f3e0:	429c      	cmp	r4, r3
 800f3e2:	d10f      	bne.n	800f404 <__swsetup_r+0x3c>
 800f3e4:	686c      	ldr	r4, [r5, #4]
 800f3e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f3ea:	b29a      	uxth	r2, r3
 800f3ec:	0715      	lsls	r5, r2, #28
 800f3ee:	d42c      	bmi.n	800f44a <__swsetup_r+0x82>
 800f3f0:	06d0      	lsls	r0, r2, #27
 800f3f2:	d411      	bmi.n	800f418 <__swsetup_r+0x50>
 800f3f4:	2209      	movs	r2, #9
 800f3f6:	6032      	str	r2, [r6, #0]
 800f3f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f3fc:	81a3      	strh	r3, [r4, #12]
 800f3fe:	f04f 30ff 	mov.w	r0, #4294967295
 800f402:	e03e      	b.n	800f482 <__swsetup_r+0xba>
 800f404:	4b25      	ldr	r3, [pc, #148]	; (800f49c <__swsetup_r+0xd4>)
 800f406:	429c      	cmp	r4, r3
 800f408:	d101      	bne.n	800f40e <__swsetup_r+0x46>
 800f40a:	68ac      	ldr	r4, [r5, #8]
 800f40c:	e7eb      	b.n	800f3e6 <__swsetup_r+0x1e>
 800f40e:	4b24      	ldr	r3, [pc, #144]	; (800f4a0 <__swsetup_r+0xd8>)
 800f410:	429c      	cmp	r4, r3
 800f412:	bf08      	it	eq
 800f414:	68ec      	ldreq	r4, [r5, #12]
 800f416:	e7e6      	b.n	800f3e6 <__swsetup_r+0x1e>
 800f418:	0751      	lsls	r1, r2, #29
 800f41a:	d512      	bpl.n	800f442 <__swsetup_r+0x7a>
 800f41c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f41e:	b141      	cbz	r1, 800f432 <__swsetup_r+0x6a>
 800f420:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f424:	4299      	cmp	r1, r3
 800f426:	d002      	beq.n	800f42e <__swsetup_r+0x66>
 800f428:	4630      	mov	r0, r6
 800f42a:	f7ff fba5 	bl	800eb78 <_free_r>
 800f42e:	2300      	movs	r3, #0
 800f430:	6363      	str	r3, [r4, #52]	; 0x34
 800f432:	89a3      	ldrh	r3, [r4, #12]
 800f434:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f438:	81a3      	strh	r3, [r4, #12]
 800f43a:	2300      	movs	r3, #0
 800f43c:	6063      	str	r3, [r4, #4]
 800f43e:	6923      	ldr	r3, [r4, #16]
 800f440:	6023      	str	r3, [r4, #0]
 800f442:	89a3      	ldrh	r3, [r4, #12]
 800f444:	f043 0308 	orr.w	r3, r3, #8
 800f448:	81a3      	strh	r3, [r4, #12]
 800f44a:	6923      	ldr	r3, [r4, #16]
 800f44c:	b94b      	cbnz	r3, 800f462 <__swsetup_r+0x9a>
 800f44e:	89a3      	ldrh	r3, [r4, #12]
 800f450:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f454:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f458:	d003      	beq.n	800f462 <__swsetup_r+0x9a>
 800f45a:	4621      	mov	r1, r4
 800f45c:	4630      	mov	r0, r6
 800f45e:	f000 f917 	bl	800f690 <__smakebuf_r>
 800f462:	89a2      	ldrh	r2, [r4, #12]
 800f464:	f012 0301 	ands.w	r3, r2, #1
 800f468:	d00c      	beq.n	800f484 <__swsetup_r+0xbc>
 800f46a:	2300      	movs	r3, #0
 800f46c:	60a3      	str	r3, [r4, #8]
 800f46e:	6963      	ldr	r3, [r4, #20]
 800f470:	425b      	negs	r3, r3
 800f472:	61a3      	str	r3, [r4, #24]
 800f474:	6923      	ldr	r3, [r4, #16]
 800f476:	b953      	cbnz	r3, 800f48e <__swsetup_r+0xc6>
 800f478:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f47c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800f480:	d1ba      	bne.n	800f3f8 <__swsetup_r+0x30>
 800f482:	bd70      	pop	{r4, r5, r6, pc}
 800f484:	0792      	lsls	r2, r2, #30
 800f486:	bf58      	it	pl
 800f488:	6963      	ldrpl	r3, [r4, #20]
 800f48a:	60a3      	str	r3, [r4, #8]
 800f48c:	e7f2      	b.n	800f474 <__swsetup_r+0xac>
 800f48e:	2000      	movs	r0, #0
 800f490:	e7f7      	b.n	800f482 <__swsetup_r+0xba>
 800f492:	bf00      	nop
 800f494:	20000010 	.word	0x20000010
 800f498:	08011f50 	.word	0x08011f50
 800f49c:	08011f70 	.word	0x08011f70
 800f4a0:	08011f30 	.word	0x08011f30

0800f4a4 <_close_r>:
 800f4a4:	b538      	push	{r3, r4, r5, lr}
 800f4a6:	4c06      	ldr	r4, [pc, #24]	; (800f4c0 <_close_r+0x1c>)
 800f4a8:	2300      	movs	r3, #0
 800f4aa:	4605      	mov	r5, r0
 800f4ac:	4608      	mov	r0, r1
 800f4ae:	6023      	str	r3, [r4, #0]
 800f4b0:	f7f1 fbd1 	bl	8000c56 <_close>
 800f4b4:	1c43      	adds	r3, r0, #1
 800f4b6:	d102      	bne.n	800f4be <_close_r+0x1a>
 800f4b8:	6823      	ldr	r3, [r4, #0]
 800f4ba:	b103      	cbz	r3, 800f4be <_close_r+0x1a>
 800f4bc:	602b      	str	r3, [r5, #0]
 800f4be:	bd38      	pop	{r3, r4, r5, pc}
 800f4c0:	20008af8 	.word	0x20008af8

0800f4c4 <__sflush_r>:
 800f4c4:	898a      	ldrh	r2, [r1, #12]
 800f4c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f4ca:	4605      	mov	r5, r0
 800f4cc:	0710      	lsls	r0, r2, #28
 800f4ce:	460c      	mov	r4, r1
 800f4d0:	d458      	bmi.n	800f584 <__sflush_r+0xc0>
 800f4d2:	684b      	ldr	r3, [r1, #4]
 800f4d4:	2b00      	cmp	r3, #0
 800f4d6:	dc05      	bgt.n	800f4e4 <__sflush_r+0x20>
 800f4d8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f4da:	2b00      	cmp	r3, #0
 800f4dc:	dc02      	bgt.n	800f4e4 <__sflush_r+0x20>
 800f4de:	2000      	movs	r0, #0
 800f4e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f4e4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f4e6:	2e00      	cmp	r6, #0
 800f4e8:	d0f9      	beq.n	800f4de <__sflush_r+0x1a>
 800f4ea:	2300      	movs	r3, #0
 800f4ec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f4f0:	682f      	ldr	r7, [r5, #0]
 800f4f2:	6a21      	ldr	r1, [r4, #32]
 800f4f4:	602b      	str	r3, [r5, #0]
 800f4f6:	d032      	beq.n	800f55e <__sflush_r+0x9a>
 800f4f8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f4fa:	89a3      	ldrh	r3, [r4, #12]
 800f4fc:	075a      	lsls	r2, r3, #29
 800f4fe:	d505      	bpl.n	800f50c <__sflush_r+0x48>
 800f500:	6863      	ldr	r3, [r4, #4]
 800f502:	1ac0      	subs	r0, r0, r3
 800f504:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f506:	b10b      	cbz	r3, 800f50c <__sflush_r+0x48>
 800f508:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f50a:	1ac0      	subs	r0, r0, r3
 800f50c:	2300      	movs	r3, #0
 800f50e:	4602      	mov	r2, r0
 800f510:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f512:	6a21      	ldr	r1, [r4, #32]
 800f514:	4628      	mov	r0, r5
 800f516:	47b0      	blx	r6
 800f518:	1c43      	adds	r3, r0, #1
 800f51a:	89a3      	ldrh	r3, [r4, #12]
 800f51c:	d106      	bne.n	800f52c <__sflush_r+0x68>
 800f51e:	6829      	ldr	r1, [r5, #0]
 800f520:	291d      	cmp	r1, #29
 800f522:	d848      	bhi.n	800f5b6 <__sflush_r+0xf2>
 800f524:	4a29      	ldr	r2, [pc, #164]	; (800f5cc <__sflush_r+0x108>)
 800f526:	40ca      	lsrs	r2, r1
 800f528:	07d6      	lsls	r6, r2, #31
 800f52a:	d544      	bpl.n	800f5b6 <__sflush_r+0xf2>
 800f52c:	2200      	movs	r2, #0
 800f52e:	6062      	str	r2, [r4, #4]
 800f530:	04d9      	lsls	r1, r3, #19
 800f532:	6922      	ldr	r2, [r4, #16]
 800f534:	6022      	str	r2, [r4, #0]
 800f536:	d504      	bpl.n	800f542 <__sflush_r+0x7e>
 800f538:	1c42      	adds	r2, r0, #1
 800f53a:	d101      	bne.n	800f540 <__sflush_r+0x7c>
 800f53c:	682b      	ldr	r3, [r5, #0]
 800f53e:	b903      	cbnz	r3, 800f542 <__sflush_r+0x7e>
 800f540:	6560      	str	r0, [r4, #84]	; 0x54
 800f542:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f544:	602f      	str	r7, [r5, #0]
 800f546:	2900      	cmp	r1, #0
 800f548:	d0c9      	beq.n	800f4de <__sflush_r+0x1a>
 800f54a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f54e:	4299      	cmp	r1, r3
 800f550:	d002      	beq.n	800f558 <__sflush_r+0x94>
 800f552:	4628      	mov	r0, r5
 800f554:	f7ff fb10 	bl	800eb78 <_free_r>
 800f558:	2000      	movs	r0, #0
 800f55a:	6360      	str	r0, [r4, #52]	; 0x34
 800f55c:	e7c0      	b.n	800f4e0 <__sflush_r+0x1c>
 800f55e:	2301      	movs	r3, #1
 800f560:	4628      	mov	r0, r5
 800f562:	47b0      	blx	r6
 800f564:	1c41      	adds	r1, r0, #1
 800f566:	d1c8      	bne.n	800f4fa <__sflush_r+0x36>
 800f568:	682b      	ldr	r3, [r5, #0]
 800f56a:	2b00      	cmp	r3, #0
 800f56c:	d0c5      	beq.n	800f4fa <__sflush_r+0x36>
 800f56e:	2b1d      	cmp	r3, #29
 800f570:	d001      	beq.n	800f576 <__sflush_r+0xb2>
 800f572:	2b16      	cmp	r3, #22
 800f574:	d101      	bne.n	800f57a <__sflush_r+0xb6>
 800f576:	602f      	str	r7, [r5, #0]
 800f578:	e7b1      	b.n	800f4de <__sflush_r+0x1a>
 800f57a:	89a3      	ldrh	r3, [r4, #12]
 800f57c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f580:	81a3      	strh	r3, [r4, #12]
 800f582:	e7ad      	b.n	800f4e0 <__sflush_r+0x1c>
 800f584:	690f      	ldr	r7, [r1, #16]
 800f586:	2f00      	cmp	r7, #0
 800f588:	d0a9      	beq.n	800f4de <__sflush_r+0x1a>
 800f58a:	0793      	lsls	r3, r2, #30
 800f58c:	680e      	ldr	r6, [r1, #0]
 800f58e:	bf08      	it	eq
 800f590:	694b      	ldreq	r3, [r1, #20]
 800f592:	600f      	str	r7, [r1, #0]
 800f594:	bf18      	it	ne
 800f596:	2300      	movne	r3, #0
 800f598:	eba6 0807 	sub.w	r8, r6, r7
 800f59c:	608b      	str	r3, [r1, #8]
 800f59e:	f1b8 0f00 	cmp.w	r8, #0
 800f5a2:	dd9c      	ble.n	800f4de <__sflush_r+0x1a>
 800f5a4:	4643      	mov	r3, r8
 800f5a6:	463a      	mov	r2, r7
 800f5a8:	6a21      	ldr	r1, [r4, #32]
 800f5aa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f5ac:	4628      	mov	r0, r5
 800f5ae:	47b0      	blx	r6
 800f5b0:	2800      	cmp	r0, #0
 800f5b2:	dc06      	bgt.n	800f5c2 <__sflush_r+0xfe>
 800f5b4:	89a3      	ldrh	r3, [r4, #12]
 800f5b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f5ba:	81a3      	strh	r3, [r4, #12]
 800f5bc:	f04f 30ff 	mov.w	r0, #4294967295
 800f5c0:	e78e      	b.n	800f4e0 <__sflush_r+0x1c>
 800f5c2:	4407      	add	r7, r0
 800f5c4:	eba8 0800 	sub.w	r8, r8, r0
 800f5c8:	e7e9      	b.n	800f59e <__sflush_r+0xda>
 800f5ca:	bf00      	nop
 800f5cc:	20400001 	.word	0x20400001

0800f5d0 <_fflush_r>:
 800f5d0:	b538      	push	{r3, r4, r5, lr}
 800f5d2:	690b      	ldr	r3, [r1, #16]
 800f5d4:	4605      	mov	r5, r0
 800f5d6:	460c      	mov	r4, r1
 800f5d8:	b1db      	cbz	r3, 800f612 <_fflush_r+0x42>
 800f5da:	b118      	cbz	r0, 800f5e4 <_fflush_r+0x14>
 800f5dc:	6983      	ldr	r3, [r0, #24]
 800f5de:	b90b      	cbnz	r3, 800f5e4 <_fflush_r+0x14>
 800f5e0:	f7ff fa38 	bl	800ea54 <__sinit>
 800f5e4:	4b0c      	ldr	r3, [pc, #48]	; (800f618 <_fflush_r+0x48>)
 800f5e6:	429c      	cmp	r4, r3
 800f5e8:	d109      	bne.n	800f5fe <_fflush_r+0x2e>
 800f5ea:	686c      	ldr	r4, [r5, #4]
 800f5ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f5f0:	b17b      	cbz	r3, 800f612 <_fflush_r+0x42>
 800f5f2:	4621      	mov	r1, r4
 800f5f4:	4628      	mov	r0, r5
 800f5f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f5fa:	f7ff bf63 	b.w	800f4c4 <__sflush_r>
 800f5fe:	4b07      	ldr	r3, [pc, #28]	; (800f61c <_fflush_r+0x4c>)
 800f600:	429c      	cmp	r4, r3
 800f602:	d101      	bne.n	800f608 <_fflush_r+0x38>
 800f604:	68ac      	ldr	r4, [r5, #8]
 800f606:	e7f1      	b.n	800f5ec <_fflush_r+0x1c>
 800f608:	4b05      	ldr	r3, [pc, #20]	; (800f620 <_fflush_r+0x50>)
 800f60a:	429c      	cmp	r4, r3
 800f60c:	bf08      	it	eq
 800f60e:	68ec      	ldreq	r4, [r5, #12]
 800f610:	e7ec      	b.n	800f5ec <_fflush_r+0x1c>
 800f612:	2000      	movs	r0, #0
 800f614:	bd38      	pop	{r3, r4, r5, pc}
 800f616:	bf00      	nop
 800f618:	08011f50 	.word	0x08011f50
 800f61c:	08011f70 	.word	0x08011f70
 800f620:	08011f30 	.word	0x08011f30

0800f624 <_lseek_r>:
 800f624:	b538      	push	{r3, r4, r5, lr}
 800f626:	4c07      	ldr	r4, [pc, #28]	; (800f644 <_lseek_r+0x20>)
 800f628:	4605      	mov	r5, r0
 800f62a:	4608      	mov	r0, r1
 800f62c:	4611      	mov	r1, r2
 800f62e:	2200      	movs	r2, #0
 800f630:	6022      	str	r2, [r4, #0]
 800f632:	461a      	mov	r2, r3
 800f634:	f7f1 fb36 	bl	8000ca4 <_lseek>
 800f638:	1c43      	adds	r3, r0, #1
 800f63a:	d102      	bne.n	800f642 <_lseek_r+0x1e>
 800f63c:	6823      	ldr	r3, [r4, #0]
 800f63e:	b103      	cbz	r3, 800f642 <_lseek_r+0x1e>
 800f640:	602b      	str	r3, [r5, #0]
 800f642:	bd38      	pop	{r3, r4, r5, pc}
 800f644:	20008af8 	.word	0x20008af8

0800f648 <__swhatbuf_r>:
 800f648:	b570      	push	{r4, r5, r6, lr}
 800f64a:	460e      	mov	r6, r1
 800f64c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f650:	2900      	cmp	r1, #0
 800f652:	b096      	sub	sp, #88	; 0x58
 800f654:	4614      	mov	r4, r2
 800f656:	461d      	mov	r5, r3
 800f658:	da07      	bge.n	800f66a <__swhatbuf_r+0x22>
 800f65a:	2300      	movs	r3, #0
 800f65c:	602b      	str	r3, [r5, #0]
 800f65e:	89b3      	ldrh	r3, [r6, #12]
 800f660:	061a      	lsls	r2, r3, #24
 800f662:	d410      	bmi.n	800f686 <__swhatbuf_r+0x3e>
 800f664:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f668:	e00e      	b.n	800f688 <__swhatbuf_r+0x40>
 800f66a:	466a      	mov	r2, sp
 800f66c:	f000 f864 	bl	800f738 <_fstat_r>
 800f670:	2800      	cmp	r0, #0
 800f672:	dbf2      	blt.n	800f65a <__swhatbuf_r+0x12>
 800f674:	9a01      	ldr	r2, [sp, #4]
 800f676:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800f67a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800f67e:	425a      	negs	r2, r3
 800f680:	415a      	adcs	r2, r3
 800f682:	602a      	str	r2, [r5, #0]
 800f684:	e7ee      	b.n	800f664 <__swhatbuf_r+0x1c>
 800f686:	2340      	movs	r3, #64	; 0x40
 800f688:	2000      	movs	r0, #0
 800f68a:	6023      	str	r3, [r4, #0]
 800f68c:	b016      	add	sp, #88	; 0x58
 800f68e:	bd70      	pop	{r4, r5, r6, pc}

0800f690 <__smakebuf_r>:
 800f690:	898b      	ldrh	r3, [r1, #12]
 800f692:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f694:	079d      	lsls	r5, r3, #30
 800f696:	4606      	mov	r6, r0
 800f698:	460c      	mov	r4, r1
 800f69a:	d507      	bpl.n	800f6ac <__smakebuf_r+0x1c>
 800f69c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f6a0:	6023      	str	r3, [r4, #0]
 800f6a2:	6123      	str	r3, [r4, #16]
 800f6a4:	2301      	movs	r3, #1
 800f6a6:	6163      	str	r3, [r4, #20]
 800f6a8:	b002      	add	sp, #8
 800f6aa:	bd70      	pop	{r4, r5, r6, pc}
 800f6ac:	ab01      	add	r3, sp, #4
 800f6ae:	466a      	mov	r2, sp
 800f6b0:	f7ff ffca 	bl	800f648 <__swhatbuf_r>
 800f6b4:	9900      	ldr	r1, [sp, #0]
 800f6b6:	4605      	mov	r5, r0
 800f6b8:	4630      	mov	r0, r6
 800f6ba:	f7ff faab 	bl	800ec14 <_malloc_r>
 800f6be:	b948      	cbnz	r0, 800f6d4 <__smakebuf_r+0x44>
 800f6c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f6c4:	059a      	lsls	r2, r3, #22
 800f6c6:	d4ef      	bmi.n	800f6a8 <__smakebuf_r+0x18>
 800f6c8:	f023 0303 	bic.w	r3, r3, #3
 800f6cc:	f043 0302 	orr.w	r3, r3, #2
 800f6d0:	81a3      	strh	r3, [r4, #12]
 800f6d2:	e7e3      	b.n	800f69c <__smakebuf_r+0xc>
 800f6d4:	4b0d      	ldr	r3, [pc, #52]	; (800f70c <__smakebuf_r+0x7c>)
 800f6d6:	62b3      	str	r3, [r6, #40]	; 0x28
 800f6d8:	89a3      	ldrh	r3, [r4, #12]
 800f6da:	6020      	str	r0, [r4, #0]
 800f6dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f6e0:	81a3      	strh	r3, [r4, #12]
 800f6e2:	9b00      	ldr	r3, [sp, #0]
 800f6e4:	6163      	str	r3, [r4, #20]
 800f6e6:	9b01      	ldr	r3, [sp, #4]
 800f6e8:	6120      	str	r0, [r4, #16]
 800f6ea:	b15b      	cbz	r3, 800f704 <__smakebuf_r+0x74>
 800f6ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f6f0:	4630      	mov	r0, r6
 800f6f2:	f000 f833 	bl	800f75c <_isatty_r>
 800f6f6:	b128      	cbz	r0, 800f704 <__smakebuf_r+0x74>
 800f6f8:	89a3      	ldrh	r3, [r4, #12]
 800f6fa:	f023 0303 	bic.w	r3, r3, #3
 800f6fe:	f043 0301 	orr.w	r3, r3, #1
 800f702:	81a3      	strh	r3, [r4, #12]
 800f704:	89a3      	ldrh	r3, [r4, #12]
 800f706:	431d      	orrs	r5, r3
 800f708:	81a5      	strh	r5, [r4, #12]
 800f70a:	e7cd      	b.n	800f6a8 <__smakebuf_r+0x18>
 800f70c:	0800ea1d 	.word	0x0800ea1d

0800f710 <__malloc_lock>:
 800f710:	4770      	bx	lr

0800f712 <__malloc_unlock>:
 800f712:	4770      	bx	lr

0800f714 <_read_r>:
 800f714:	b538      	push	{r3, r4, r5, lr}
 800f716:	4c07      	ldr	r4, [pc, #28]	; (800f734 <_read_r+0x20>)
 800f718:	4605      	mov	r5, r0
 800f71a:	4608      	mov	r0, r1
 800f71c:	4611      	mov	r1, r2
 800f71e:	2200      	movs	r2, #0
 800f720:	6022      	str	r2, [r4, #0]
 800f722:	461a      	mov	r2, r3
 800f724:	f7f1 fa5e 	bl	8000be4 <_read>
 800f728:	1c43      	adds	r3, r0, #1
 800f72a:	d102      	bne.n	800f732 <_read_r+0x1e>
 800f72c:	6823      	ldr	r3, [r4, #0]
 800f72e:	b103      	cbz	r3, 800f732 <_read_r+0x1e>
 800f730:	602b      	str	r3, [r5, #0]
 800f732:	bd38      	pop	{r3, r4, r5, pc}
 800f734:	20008af8 	.word	0x20008af8

0800f738 <_fstat_r>:
 800f738:	b538      	push	{r3, r4, r5, lr}
 800f73a:	4c07      	ldr	r4, [pc, #28]	; (800f758 <_fstat_r+0x20>)
 800f73c:	2300      	movs	r3, #0
 800f73e:	4605      	mov	r5, r0
 800f740:	4608      	mov	r0, r1
 800f742:	4611      	mov	r1, r2
 800f744:	6023      	str	r3, [r4, #0]
 800f746:	f7f1 fa92 	bl	8000c6e <_fstat>
 800f74a:	1c43      	adds	r3, r0, #1
 800f74c:	d102      	bne.n	800f754 <_fstat_r+0x1c>
 800f74e:	6823      	ldr	r3, [r4, #0]
 800f750:	b103      	cbz	r3, 800f754 <_fstat_r+0x1c>
 800f752:	602b      	str	r3, [r5, #0]
 800f754:	bd38      	pop	{r3, r4, r5, pc}
 800f756:	bf00      	nop
 800f758:	20008af8 	.word	0x20008af8

0800f75c <_isatty_r>:
 800f75c:	b538      	push	{r3, r4, r5, lr}
 800f75e:	4c06      	ldr	r4, [pc, #24]	; (800f778 <_isatty_r+0x1c>)
 800f760:	2300      	movs	r3, #0
 800f762:	4605      	mov	r5, r0
 800f764:	4608      	mov	r0, r1
 800f766:	6023      	str	r3, [r4, #0]
 800f768:	f7f1 fa91 	bl	8000c8e <_isatty>
 800f76c:	1c43      	adds	r3, r0, #1
 800f76e:	d102      	bne.n	800f776 <_isatty_r+0x1a>
 800f770:	6823      	ldr	r3, [r4, #0]
 800f772:	b103      	cbz	r3, 800f776 <_isatty_r+0x1a>
 800f774:	602b      	str	r3, [r5, #0]
 800f776:	bd38      	pop	{r3, r4, r5, pc}
 800f778:	20008af8 	.word	0x20008af8

0800f77c <_init>:
 800f77c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f77e:	bf00      	nop
 800f780:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f782:	bc08      	pop	{r3}
 800f784:	469e      	mov	lr, r3
 800f786:	4770      	bx	lr

0800f788 <_fini>:
 800f788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f78a:	bf00      	nop
 800f78c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f78e:	bc08      	pop	{r3}
 800f790:	469e      	mov	lr, r3
 800f792:	4770      	bx	lr
