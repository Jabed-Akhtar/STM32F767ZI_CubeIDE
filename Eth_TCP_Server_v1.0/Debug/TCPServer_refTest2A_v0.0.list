
TCPServer_refTest2A_v0.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00018244  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000036ac  08018444  08018444  00028444  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801baf0  0801baf0  0003007c  2**0
                  CONTENTS
  4 .ARM          00000008  0801baf0  0801baf0  0002baf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801baf8  0801baf8  0003007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801baf8  0801baf8  0002baf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801bafc  0801bafc  0002bafc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  0801bb00  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000d22c  2000007c  0801bb7c  0003007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000d2a8  0801bb7c  0003d2a8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0003007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004673a  00000000  00000000  000300aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00007d56  00000000  00000000  000767e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002558  00000000  00000000  0007e540  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002420  00000000  00000000  00080a98  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0003a5f4  00000000  00000000  00082eb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0002f46a  00000000  00000000  000bd4ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0012784a  00000000  00000000  000ec916  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00214160  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a054  00000000  00000000  002141dc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	2000007c 	.word	0x2000007c
 800021c:	00000000 	.word	0x00000000
 8000220:	0801842c 	.word	0x0801842c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000080 	.word	0x20000080
 800023c:	0801842c 	.word	0x0801842c

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr

08000254 <strlen>:
 8000254:	4603      	mov	r3, r0
 8000256:	f813 2b01 	ldrb.w	r2, [r3], #1
 800025a:	2a00      	cmp	r2, #0
 800025c:	d1fb      	bne.n	8000256 <strlen+0x2>
 800025e:	1a18      	subs	r0, r3, r0
 8000260:	3801      	subs	r0, #1
 8000262:	4770      	bx	lr
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295
 8000320:	f04f 30ff 	movne.w	r0, #4294967295
 8000324:	f000 b972 	b.w	800060c <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9e08      	ldr	r6, [sp, #32]
 8000346:	4604      	mov	r4, r0
 8000348:	4688      	mov	r8, r1
 800034a:	2b00      	cmp	r3, #0
 800034c:	d14b      	bne.n	80003e6 <__udivmoddi4+0xa6>
 800034e:	428a      	cmp	r2, r1
 8000350:	4615      	mov	r5, r2
 8000352:	d967      	bls.n	8000424 <__udivmoddi4+0xe4>
 8000354:	fab2 f282 	clz	r2, r2
 8000358:	b14a      	cbz	r2, 800036e <__udivmoddi4+0x2e>
 800035a:	f1c2 0720 	rsb	r7, r2, #32
 800035e:	fa01 f302 	lsl.w	r3, r1, r2
 8000362:	fa20 f707 	lsr.w	r7, r0, r7
 8000366:	4095      	lsls	r5, r2
 8000368:	ea47 0803 	orr.w	r8, r7, r3
 800036c:	4094      	lsls	r4, r2
 800036e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000372:	0c23      	lsrs	r3, r4, #16
 8000374:	fbb8 f7fe 	udiv	r7, r8, lr
 8000378:	fa1f fc85 	uxth.w	ip, r5
 800037c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000380:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000384:	fb07 f10c 	mul.w	r1, r7, ip
 8000388:	4299      	cmp	r1, r3
 800038a:	d909      	bls.n	80003a0 <__udivmoddi4+0x60>
 800038c:	18eb      	adds	r3, r5, r3
 800038e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000392:	f080 811b 	bcs.w	80005cc <__udivmoddi4+0x28c>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 8118 	bls.w	80005cc <__udivmoddi4+0x28c>
 800039c:	3f02      	subs	r7, #2
 800039e:	442b      	add	r3, r5
 80003a0:	1a5b      	subs	r3, r3, r1
 80003a2:	b2a4      	uxth	r4, r4
 80003a4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003b0:	fb00 fc0c 	mul.w	ip, r0, ip
 80003b4:	45a4      	cmp	ip, r4
 80003b6:	d909      	bls.n	80003cc <__udivmoddi4+0x8c>
 80003b8:	192c      	adds	r4, r5, r4
 80003ba:	f100 33ff 	add.w	r3, r0, #4294967295
 80003be:	f080 8107 	bcs.w	80005d0 <__udivmoddi4+0x290>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	f240 8104 	bls.w	80005d0 <__udivmoddi4+0x290>
 80003c8:	3802      	subs	r0, #2
 80003ca:	442c      	add	r4, r5
 80003cc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003d0:	eba4 040c 	sub.w	r4, r4, ip
 80003d4:	2700      	movs	r7, #0
 80003d6:	b11e      	cbz	r6, 80003e0 <__udivmoddi4+0xa0>
 80003d8:	40d4      	lsrs	r4, r2
 80003da:	2300      	movs	r3, #0
 80003dc:	e9c6 4300 	strd	r4, r3, [r6]
 80003e0:	4639      	mov	r1, r7
 80003e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d909      	bls.n	80003fe <__udivmoddi4+0xbe>
 80003ea:	2e00      	cmp	r6, #0
 80003ec:	f000 80eb 	beq.w	80005c6 <__udivmoddi4+0x286>
 80003f0:	2700      	movs	r7, #0
 80003f2:	e9c6 0100 	strd	r0, r1, [r6]
 80003f6:	4638      	mov	r0, r7
 80003f8:	4639      	mov	r1, r7
 80003fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fe:	fab3 f783 	clz	r7, r3
 8000402:	2f00      	cmp	r7, #0
 8000404:	d147      	bne.n	8000496 <__udivmoddi4+0x156>
 8000406:	428b      	cmp	r3, r1
 8000408:	d302      	bcc.n	8000410 <__udivmoddi4+0xd0>
 800040a:	4282      	cmp	r2, r0
 800040c:	f200 80fa 	bhi.w	8000604 <__udivmoddi4+0x2c4>
 8000410:	1a84      	subs	r4, r0, r2
 8000412:	eb61 0303 	sbc.w	r3, r1, r3
 8000416:	2001      	movs	r0, #1
 8000418:	4698      	mov	r8, r3
 800041a:	2e00      	cmp	r6, #0
 800041c:	d0e0      	beq.n	80003e0 <__udivmoddi4+0xa0>
 800041e:	e9c6 4800 	strd	r4, r8, [r6]
 8000422:	e7dd      	b.n	80003e0 <__udivmoddi4+0xa0>
 8000424:	b902      	cbnz	r2, 8000428 <__udivmoddi4+0xe8>
 8000426:	deff      	udf	#255	; 0xff
 8000428:	fab2 f282 	clz	r2, r2
 800042c:	2a00      	cmp	r2, #0
 800042e:	f040 808f 	bne.w	8000550 <__udivmoddi4+0x210>
 8000432:	1b49      	subs	r1, r1, r5
 8000434:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000438:	fa1f f885 	uxth.w	r8, r5
 800043c:	2701      	movs	r7, #1
 800043e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000442:	0c23      	lsrs	r3, r4, #16
 8000444:	fb0e 111c 	mls	r1, lr, ip, r1
 8000448:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044c:	fb08 f10c 	mul.w	r1, r8, ip
 8000450:	4299      	cmp	r1, r3
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x124>
 8000454:	18eb      	adds	r3, r5, r3
 8000456:	f10c 30ff 	add.w	r0, ip, #4294967295
 800045a:	d202      	bcs.n	8000462 <__udivmoddi4+0x122>
 800045c:	4299      	cmp	r1, r3
 800045e:	f200 80cd 	bhi.w	80005fc <__udivmoddi4+0x2bc>
 8000462:	4684      	mov	ip, r0
 8000464:	1a59      	subs	r1, r3, r1
 8000466:	b2a3      	uxth	r3, r4
 8000468:	fbb1 f0fe 	udiv	r0, r1, lr
 800046c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000470:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000474:	fb08 f800 	mul.w	r8, r8, r0
 8000478:	45a0      	cmp	r8, r4
 800047a:	d907      	bls.n	800048c <__udivmoddi4+0x14c>
 800047c:	192c      	adds	r4, r5, r4
 800047e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000482:	d202      	bcs.n	800048a <__udivmoddi4+0x14a>
 8000484:	45a0      	cmp	r8, r4
 8000486:	f200 80b6 	bhi.w	80005f6 <__udivmoddi4+0x2b6>
 800048a:	4618      	mov	r0, r3
 800048c:	eba4 0408 	sub.w	r4, r4, r8
 8000490:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000494:	e79f      	b.n	80003d6 <__udivmoddi4+0x96>
 8000496:	f1c7 0c20 	rsb	ip, r7, #32
 800049a:	40bb      	lsls	r3, r7
 800049c:	fa22 fe0c 	lsr.w	lr, r2, ip
 80004a0:	ea4e 0e03 	orr.w	lr, lr, r3
 80004a4:	fa01 f407 	lsl.w	r4, r1, r7
 80004a8:	fa20 f50c 	lsr.w	r5, r0, ip
 80004ac:	fa21 f30c 	lsr.w	r3, r1, ip
 80004b0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80004b4:	4325      	orrs	r5, r4
 80004b6:	fbb3 f9f8 	udiv	r9, r3, r8
 80004ba:	0c2c      	lsrs	r4, r5, #16
 80004bc:	fb08 3319 	mls	r3, r8, r9, r3
 80004c0:	fa1f fa8e 	uxth.w	sl, lr
 80004c4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80004c8:	fb09 f40a 	mul.w	r4, r9, sl
 80004cc:	429c      	cmp	r4, r3
 80004ce:	fa02 f207 	lsl.w	r2, r2, r7
 80004d2:	fa00 f107 	lsl.w	r1, r0, r7
 80004d6:	d90b      	bls.n	80004f0 <__udivmoddi4+0x1b0>
 80004d8:	eb1e 0303 	adds.w	r3, lr, r3
 80004dc:	f109 30ff 	add.w	r0, r9, #4294967295
 80004e0:	f080 8087 	bcs.w	80005f2 <__udivmoddi4+0x2b2>
 80004e4:	429c      	cmp	r4, r3
 80004e6:	f240 8084 	bls.w	80005f2 <__udivmoddi4+0x2b2>
 80004ea:	f1a9 0902 	sub.w	r9, r9, #2
 80004ee:	4473      	add	r3, lr
 80004f0:	1b1b      	subs	r3, r3, r4
 80004f2:	b2ad      	uxth	r5, r5
 80004f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004f8:	fb08 3310 	mls	r3, r8, r0, r3
 80004fc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000500:	fb00 fa0a 	mul.w	sl, r0, sl
 8000504:	45a2      	cmp	sl, r4
 8000506:	d908      	bls.n	800051a <__udivmoddi4+0x1da>
 8000508:	eb1e 0404 	adds.w	r4, lr, r4
 800050c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000510:	d26b      	bcs.n	80005ea <__udivmoddi4+0x2aa>
 8000512:	45a2      	cmp	sl, r4
 8000514:	d969      	bls.n	80005ea <__udivmoddi4+0x2aa>
 8000516:	3802      	subs	r0, #2
 8000518:	4474      	add	r4, lr
 800051a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800051e:	fba0 8902 	umull	r8, r9, r0, r2
 8000522:	eba4 040a 	sub.w	r4, r4, sl
 8000526:	454c      	cmp	r4, r9
 8000528:	46c2      	mov	sl, r8
 800052a:	464b      	mov	r3, r9
 800052c:	d354      	bcc.n	80005d8 <__udivmoddi4+0x298>
 800052e:	d051      	beq.n	80005d4 <__udivmoddi4+0x294>
 8000530:	2e00      	cmp	r6, #0
 8000532:	d069      	beq.n	8000608 <__udivmoddi4+0x2c8>
 8000534:	ebb1 050a 	subs.w	r5, r1, sl
 8000538:	eb64 0403 	sbc.w	r4, r4, r3
 800053c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000540:	40fd      	lsrs	r5, r7
 8000542:	40fc      	lsrs	r4, r7
 8000544:	ea4c 0505 	orr.w	r5, ip, r5
 8000548:	e9c6 5400 	strd	r5, r4, [r6]
 800054c:	2700      	movs	r7, #0
 800054e:	e747      	b.n	80003e0 <__udivmoddi4+0xa0>
 8000550:	f1c2 0320 	rsb	r3, r2, #32
 8000554:	fa20 f703 	lsr.w	r7, r0, r3
 8000558:	4095      	lsls	r5, r2
 800055a:	fa01 f002 	lsl.w	r0, r1, r2
 800055e:	fa21 f303 	lsr.w	r3, r1, r3
 8000562:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000566:	4338      	orrs	r0, r7
 8000568:	0c01      	lsrs	r1, r0, #16
 800056a:	fbb3 f7fe 	udiv	r7, r3, lr
 800056e:	fa1f f885 	uxth.w	r8, r5
 8000572:	fb0e 3317 	mls	r3, lr, r7, r3
 8000576:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800057a:	fb07 f308 	mul.w	r3, r7, r8
 800057e:	428b      	cmp	r3, r1
 8000580:	fa04 f402 	lsl.w	r4, r4, r2
 8000584:	d907      	bls.n	8000596 <__udivmoddi4+0x256>
 8000586:	1869      	adds	r1, r5, r1
 8000588:	f107 3cff 	add.w	ip, r7, #4294967295
 800058c:	d22f      	bcs.n	80005ee <__udivmoddi4+0x2ae>
 800058e:	428b      	cmp	r3, r1
 8000590:	d92d      	bls.n	80005ee <__udivmoddi4+0x2ae>
 8000592:	3f02      	subs	r7, #2
 8000594:	4429      	add	r1, r5
 8000596:	1acb      	subs	r3, r1, r3
 8000598:	b281      	uxth	r1, r0
 800059a:	fbb3 f0fe 	udiv	r0, r3, lr
 800059e:	fb0e 3310 	mls	r3, lr, r0, r3
 80005a2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005a6:	fb00 f308 	mul.w	r3, r0, r8
 80005aa:	428b      	cmp	r3, r1
 80005ac:	d907      	bls.n	80005be <__udivmoddi4+0x27e>
 80005ae:	1869      	adds	r1, r5, r1
 80005b0:	f100 3cff 	add.w	ip, r0, #4294967295
 80005b4:	d217      	bcs.n	80005e6 <__udivmoddi4+0x2a6>
 80005b6:	428b      	cmp	r3, r1
 80005b8:	d915      	bls.n	80005e6 <__udivmoddi4+0x2a6>
 80005ba:	3802      	subs	r0, #2
 80005bc:	4429      	add	r1, r5
 80005be:	1ac9      	subs	r1, r1, r3
 80005c0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80005c4:	e73b      	b.n	800043e <__udivmoddi4+0xfe>
 80005c6:	4637      	mov	r7, r6
 80005c8:	4630      	mov	r0, r6
 80005ca:	e709      	b.n	80003e0 <__udivmoddi4+0xa0>
 80005cc:	4607      	mov	r7, r0
 80005ce:	e6e7      	b.n	80003a0 <__udivmoddi4+0x60>
 80005d0:	4618      	mov	r0, r3
 80005d2:	e6fb      	b.n	80003cc <__udivmoddi4+0x8c>
 80005d4:	4541      	cmp	r1, r8
 80005d6:	d2ab      	bcs.n	8000530 <__udivmoddi4+0x1f0>
 80005d8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005dc:	eb69 020e 	sbc.w	r2, r9, lr
 80005e0:	3801      	subs	r0, #1
 80005e2:	4613      	mov	r3, r2
 80005e4:	e7a4      	b.n	8000530 <__udivmoddi4+0x1f0>
 80005e6:	4660      	mov	r0, ip
 80005e8:	e7e9      	b.n	80005be <__udivmoddi4+0x27e>
 80005ea:	4618      	mov	r0, r3
 80005ec:	e795      	b.n	800051a <__udivmoddi4+0x1da>
 80005ee:	4667      	mov	r7, ip
 80005f0:	e7d1      	b.n	8000596 <__udivmoddi4+0x256>
 80005f2:	4681      	mov	r9, r0
 80005f4:	e77c      	b.n	80004f0 <__udivmoddi4+0x1b0>
 80005f6:	3802      	subs	r0, #2
 80005f8:	442c      	add	r4, r5
 80005fa:	e747      	b.n	800048c <__udivmoddi4+0x14c>
 80005fc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000600:	442b      	add	r3, r5
 8000602:	e72f      	b.n	8000464 <__udivmoddi4+0x124>
 8000604:	4638      	mov	r0, r7
 8000606:	e708      	b.n	800041a <__udivmoddi4+0xda>
 8000608:	4637      	mov	r7, r6
 800060a:	e6e9      	b.n	80003e0 <__udivmoddi4+0xa0>

0800060c <__aeabi_idiv0>:
 800060c:	4770      	bx	lr
 800060e:	bf00      	nop

08000610 <vApplicationIdleHook>:
/* Hook prototypes */
void vApplicationIdleHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 8000610:	b480      	push	{r7}
 8000612:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 8000614:	bf00      	nop
 8000616:	46bd      	mov	sp, r7
 8000618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061c:	4770      	bx	lr
	...

08000620 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000620:	b480      	push	{r7}
 8000622:	b085      	sub	sp, #20
 8000624:	af00      	add	r7, sp, #0
 8000626:	60f8      	str	r0, [r7, #12]
 8000628:	60b9      	str	r1, [r7, #8]
 800062a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800062c:	68fb      	ldr	r3, [r7, #12]
 800062e:	4a07      	ldr	r2, [pc, #28]	; (800064c <vApplicationGetIdleTaskMemory+0x2c>)
 8000630:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000632:	68bb      	ldr	r3, [r7, #8]
 8000634:	4a06      	ldr	r2, [pc, #24]	; (8000650 <vApplicationGetIdleTaskMemory+0x30>)
 8000636:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	2280      	movs	r2, #128	; 0x80
 800063c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800063e:	bf00      	nop
 8000640:	3714      	adds	r7, #20
 8000642:	46bd      	mov	sp, r7
 8000644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000648:	4770      	bx	lr
 800064a:	bf00      	nop
 800064c:	20000098 	.word	0x20000098
 8000650:	200000fc 	.word	0x200000fc

08000654 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 8000654:	b480      	push	{r7}
 8000656:	b085      	sub	sp, #20
 8000658:	af00      	add	r7, sp, #0
 800065a:	60f8      	str	r0, [r7, #12]
 800065c:	60b9      	str	r1, [r7, #8]
 800065e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8000660:	68fb      	ldr	r3, [r7, #12]
 8000662:	4a07      	ldr	r2, [pc, #28]	; (8000680 <vApplicationGetTimerTaskMemory+0x2c>)
 8000664:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 8000666:	68bb      	ldr	r3, [r7, #8]
 8000668:	4a06      	ldr	r2, [pc, #24]	; (8000684 <vApplicationGetTimerTaskMemory+0x30>)
 800066a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000672:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000674:	bf00      	nop
 8000676:	3714      	adds	r7, #20
 8000678:	46bd      	mov	sp, r7
 800067a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067e:	4770      	bx	lr
 8000680:	200002fc 	.word	0x200002fc
 8000684:	20000360 	.word	0x20000360

08000688 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000688:	b5b0      	push	{r4, r5, r7, lr}
 800068a:	b092      	sub	sp, #72	; 0x48
 800068c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800068e:	f000 fd6a 	bl	8001166 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000692:	f000 f885 	bl	80007a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000696:	f000 f997 	bl	80009c8 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800069a:	f000 f965 	bl	8000968 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 800069e:	f000 f90f 	bl	80008c0 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  MX_LWIP_Init();
 80006a2:	f004 fd57 	bl	8005154 <MX_LWIP_Init>

  TimerHandle_t timer_TemperRead;

  char stri[] = "\n---------- Programm started!!! ----------\n\n\r";
 80006a6:	4b32      	ldr	r3, [pc, #200]	; (8000770 <main+0xe8>)
 80006a8:	1d3c      	adds	r4, r7, #4
 80006aa:	461d      	mov	r5, r3
 80006ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006b4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80006b8:	c407      	stmia	r4!, {r0, r1, r2}
 80006ba:	8023      	strh	r3, [r4, #0]
  HAL_UART_Transmit(&huart3, (uint8_t*)stri, strlen(stri), HAL_MAX_DELAY);
 80006bc:	1d3b      	adds	r3, r7, #4
 80006be:	4618      	mov	r0, r3
 80006c0:	f7ff fdc8 	bl	8000254 <strlen>
 80006c4:	4603      	mov	r3, r0
 80006c6:	b29a      	uxth	r2, r3
 80006c8:	1d39      	adds	r1, r7, #4
 80006ca:	f04f 33ff 	mov.w	r3, #4294967295
 80006ce:	4829      	ldr	r0, [pc, #164]	; (8000774 <main+0xec>)
 80006d0:	f004 f8e4 	bl	800489c <HAL_UART_Transmit>

  /* USER CODE END 2 */

  /* USER CODE BEGIN RTOS_MUTEX */
  /* add mutexes, ... */
  queue_RxMsg = xQueueCreate(5, sizeof(struct queue_struct));
 80006d4:	2200      	movs	r2, #0
 80006d6:	2130      	movs	r1, #48	; 0x30
 80006d8:	2005      	movs	r0, #5
 80006da:	f005 ff5e 	bl	800659a <xQueueGenericCreate>
 80006de:	4602      	mov	r2, r0
 80006e0:	4b25      	ldr	r3, [pc, #148]	; (8000778 <main+0xf0>)
 80006e2:	601a      	str	r2, [r3, #0]
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */
  sema_EthSend = xSemaphoreCreateBinary();
 80006e4:	2203      	movs	r2, #3
 80006e6:	2100      	movs	r1, #0
 80006e8:	2001      	movs	r0, #1
 80006ea:	f005 ff56 	bl	800659a <xQueueGenericCreate>
 80006ee:	4602      	mov	r2, r0
 80006f0:	4b22      	ldr	r3, [pc, #136]	; (800077c <main+0xf4>)
 80006f2:	601a      	str	r2, [r3, #0]
  /* USER CODE END RTOS_SEMAPHORES */

  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  HeartBeat_Timer = xTimerCreate("LEDToggle", pdMS_TO_TICKS(LED_TOGGLE_FREQ), pdTRUE, 0, callback_LEDToggle);
 80006f4:	4b22      	ldr	r3, [pc, #136]	; (8000780 <main+0xf8>)
 80006f6:	9300      	str	r3, [sp, #0]
 80006f8:	2300      	movs	r3, #0
 80006fa:	2201      	movs	r2, #1
 80006fc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000700:	4820      	ldr	r0, [pc, #128]	; (8000784 <main+0xfc>)
 8000702:	f007 ff5f 	bl	80085c4 <xTimerCreate>
 8000706:	63f8      	str	r0, [r7, #60]	; 0x3c
  timer_TemperRead = xTimerCreate("ReadTemper", pdMS_TO_TICKS(ADC_SEND_RATE), pdTRUE, 0, callback_TemperRead);
 8000708:	4b1f      	ldr	r3, [pc, #124]	; (8000788 <main+0x100>)
 800070a:	9300      	str	r3, [sp, #0]
 800070c:	2300      	movs	r3, #0
 800070e:	2201      	movs	r2, #1
 8000710:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8000714:	481d      	ldr	r0, [pc, #116]	; (800078c <main+0x104>)
 8000716:	f007 ff55 	bl	80085c4 <xTimerCreate>
 800071a:	63b8      	str	r0, [r7, #56]	; 0x38
//  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
//  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  xTaskCreate(task_Ethernet, "task_EthTCP", configMINIMAL_STACK_SIZE*4, NULL, 4, NULL);			// Stacksize 4*128kB
 800071c:	2300      	movs	r3, #0
 800071e:	9301      	str	r3, [sp, #4]
 8000720:	2304      	movs	r3, #4
 8000722:	9300      	str	r3, [sp, #0]
 8000724:	2300      	movs	r3, #0
 8000726:	f44f 7200 	mov.w	r2, #512	; 0x200
 800072a:	4919      	ldr	r1, [pc, #100]	; (8000790 <main+0x108>)
 800072c:	4819      	ldr	r0, [pc, #100]	; (8000794 <main+0x10c>)
 800072e:	f006 fef7 	bl	8007520 <xTaskCreate>
  xTaskCreate(task_Gatekeeper, "task_Gatekeeper", configMINIMAL_STACK_SIZE*4, NULL, 1, NULL);	// Stacksize 4*128kB
 8000732:	2300      	movs	r3, #0
 8000734:	9301      	str	r3, [sp, #4]
 8000736:	2301      	movs	r3, #1
 8000738:	9300      	str	r3, [sp, #0]
 800073a:	2300      	movs	r3, #0
 800073c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000740:	4915      	ldr	r1, [pc, #84]	; (8000798 <main+0x110>)
 8000742:	4816      	ldr	r0, [pc, #88]	; (800079c <main+0x114>)
 8000744:	f006 feec 	bl	8007520 <xTaskCreate>

  if(HeartBeat_Timer != NULL){
 8000748:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800074a:	2b00      	cmp	r3, #0
 800074c:	d00f      	beq.n	800076e <main+0xe6>
	  Timer_State = xTimerStart(HeartBeat_Timer,0);
 800074e:	f007 f969 	bl	8007a24 <xTaskGetTickCount>
 8000752:	4602      	mov	r2, r0
 8000754:	2300      	movs	r3, #0
 8000756:	9300      	str	r3, [sp, #0]
 8000758:	2300      	movs	r3, #0
 800075a:	2101      	movs	r1, #1
 800075c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800075e:	f007 ff8f 	bl	8008680 <xTimerGenericCommand>
 8000762:	6378      	str	r0, [r7, #52]	; 0x34
	  if(Timer_State == pdPASS){
 8000764:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000766:	2b01      	cmp	r3, #1
 8000768:	d101      	bne.n	800076e <main+0xe6>
		  vTaskStartScheduler();
 800076a:	f007 f847 	bl	80077fc <vTaskStartScheduler>
//  osKernelStart();

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800076e:	e7fe      	b.n	800076e <main+0xe6>
 8000770:	08018478 	.word	0x08018478
 8000774:	20004790 	.word	0x20004790
 8000778:	2000485c 	.word	0x2000485c
 800077c:	2000478c 	.word	0x2000478c
 8000780:	08000aa9 	.word	0x08000aa9
 8000784:	08018444 	.word	0x08018444
 8000788:	08000ac5 	.word	0x08000ac5
 800078c:	08018450 	.word	0x08018450
 8000790:	0801845c 	.word	0x0801845c
 8000794:	08000ae5 	.word	0x08000ae5
 8000798:	08018468 	.word	0x08018468
 800079c:	08000cc1 	.word	0x08000cc1

080007a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b0b8      	sub	sp, #224	; 0xe0
 80007a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007a6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80007aa:	2234      	movs	r2, #52	; 0x34
 80007ac:	2100      	movs	r1, #0
 80007ae:	4618      	mov	r0, r3
 80007b0:	f016 fefa 	bl	80175a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007b4:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80007b8:	2200      	movs	r2, #0
 80007ba:	601a      	str	r2, [r3, #0]
 80007bc:	605a      	str	r2, [r3, #4]
 80007be:	609a      	str	r2, [r3, #8]
 80007c0:	60da      	str	r2, [r3, #12]
 80007c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80007c4:	f107 0308 	add.w	r3, r7, #8
 80007c8:	2290      	movs	r2, #144	; 0x90
 80007ca:	2100      	movs	r1, #0
 80007cc:	4618      	mov	r0, r3
 80007ce:	f016 feeb 	bl	80175a8 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007d2:	4b39      	ldr	r3, [pc, #228]	; (80008b8 <SystemClock_Config+0x118>)
 80007d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007d6:	4a38      	ldr	r2, [pc, #224]	; (80008b8 <SystemClock_Config+0x118>)
 80007d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007dc:	6413      	str	r3, [r2, #64]	; 0x40
 80007de:	4b36      	ldr	r3, [pc, #216]	; (80008b8 <SystemClock_Config+0x118>)
 80007e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007e6:	607b      	str	r3, [r7, #4]
 80007e8:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007ea:	4b34      	ldr	r3, [pc, #208]	; (80008bc <SystemClock_Config+0x11c>)
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	4a33      	ldr	r2, [pc, #204]	; (80008bc <SystemClock_Config+0x11c>)
 80007f0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80007f4:	6013      	str	r3, [r2, #0]
 80007f6:	4b31      	ldr	r3, [pc, #196]	; (80008bc <SystemClock_Config+0x11c>)
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007fe:	603b      	str	r3, [r7, #0]
 8000800:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000802:	2301      	movs	r3, #1
 8000804:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000808:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800080c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000810:	2302      	movs	r3, #2
 8000812:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000816:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800081a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 4;
 800081e:	2304      	movs	r3, #4
 8000820:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000824:	23d8      	movs	r3, #216	; 0xd8
 8000826:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800082a:	2302      	movs	r3, #2
 800082c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000830:	2302      	movs	r3, #2
 8000832:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000836:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800083a:	4618      	mov	r0, r3
 800083c:	f002 fc00 	bl	8003040 <HAL_RCC_OscConfig>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000846:	f000 fa71 	bl	8000d2c <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800084a:	f002 fba9 	bl	8002fa0 <HAL_PWREx_EnableOverDrive>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	d001      	beq.n	8000858 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8000854:	f000 fa6a 	bl	8000d2c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000858:	230f      	movs	r3, #15
 800085a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800085e:	2302      	movs	r3, #2
 8000860:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000864:	2300      	movs	r3, #0
 8000866:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800086a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800086e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000872:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000876:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800087a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800087e:	2107      	movs	r1, #7
 8000880:	4618      	mov	r0, r3
 8000882:	f002 fe8b 	bl	800359c <HAL_RCC_ClockConfig>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d001      	beq.n	8000890 <SystemClock_Config+0xf0>
  {
    Error_Handler();
 800088c:	f000 fa4e 	bl	8000d2c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000890:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000894:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000896:	2300      	movs	r3, #0
 8000898:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800089a:	f107 0308 	add.w	r3, r7, #8
 800089e:	4618      	mov	r0, r3
 80008a0:	f003 f8a6 	bl	80039f0 <HAL_RCCEx_PeriphCLKConfig>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <SystemClock_Config+0x10e>
  {
    Error_Handler();
 80008aa:	f000 fa3f 	bl	8000d2c <Error_Handler>
  }
}
 80008ae:	bf00      	nop
 80008b0:	37e0      	adds	r7, #224	; 0xe0
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	40023800 	.word	0x40023800
 80008bc:	40007000 	.word	0x40007000

080008c0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b084      	sub	sp, #16
 80008c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80008c6:	463b      	mov	r3, r7
 80008c8:	2200      	movs	r2, #0
 80008ca:	601a      	str	r2, [r3, #0]
 80008cc:	605a      	str	r2, [r3, #4]
 80008ce:	609a      	str	r2, [r3, #8]
 80008d0:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80008d2:	4b21      	ldr	r3, [pc, #132]	; (8000958 <MX_ADC1_Init+0x98>)
 80008d4:	4a21      	ldr	r2, [pc, #132]	; (800095c <MX_ADC1_Init+0x9c>)
 80008d6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 80008d8:	4b1f      	ldr	r3, [pc, #124]	; (8000958 <MX_ADC1_Init+0x98>)
 80008da:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80008de:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80008e0:	4b1d      	ldr	r3, [pc, #116]	; (8000958 <MX_ADC1_Init+0x98>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80008e6:	4b1c      	ldr	r3, [pc, #112]	; (8000958 <MX_ADC1_Init+0x98>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80008ec:	4b1a      	ldr	r3, [pc, #104]	; (8000958 <MX_ADC1_Init+0x98>)
 80008ee:	2201      	movs	r2, #1
 80008f0:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80008f2:	4b19      	ldr	r3, [pc, #100]	; (8000958 <MX_ADC1_Init+0x98>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008fa:	4b17      	ldr	r3, [pc, #92]	; (8000958 <MX_ADC1_Init+0x98>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000900:	4b15      	ldr	r3, [pc, #84]	; (8000958 <MX_ADC1_Init+0x98>)
 8000902:	4a17      	ldr	r2, [pc, #92]	; (8000960 <MX_ADC1_Init+0xa0>)
 8000904:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000906:	4b14      	ldr	r3, [pc, #80]	; (8000958 <MX_ADC1_Init+0x98>)
 8000908:	2200      	movs	r2, #0
 800090a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800090c:	4b12      	ldr	r3, [pc, #72]	; (8000958 <MX_ADC1_Init+0x98>)
 800090e:	2201      	movs	r2, #1
 8000910:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000912:	4b11      	ldr	r3, [pc, #68]	; (8000958 <MX_ADC1_Init+0x98>)
 8000914:	2200      	movs	r2, #0
 8000916:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800091a:	4b0f      	ldr	r3, [pc, #60]	; (8000958 <MX_ADC1_Init+0x98>)
 800091c:	2201      	movs	r2, #1
 800091e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000920:	480d      	ldr	r0, [pc, #52]	; (8000958 <MX_ADC1_Init+0x98>)
 8000922:	f000 fc6f 	bl	8001204 <HAL_ADC_Init>
 8000926:	4603      	mov	r3, r0
 8000928:	2b00      	cmp	r3, #0
 800092a:	d001      	beq.n	8000930 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800092c:	f000 f9fe 	bl	8000d2c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000930:	4b0c      	ldr	r3, [pc, #48]	; (8000964 <MX_ADC1_Init+0xa4>)
 8000932:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000934:	2301      	movs	r3, #1
 8000936:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000938:	2300      	movs	r3, #0
 800093a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800093c:	463b      	mov	r3, r7
 800093e:	4619      	mov	r1, r3
 8000940:	4805      	ldr	r0, [pc, #20]	; (8000958 <MX_ADC1_Init+0x98>)
 8000942:	f000 fca3 	bl	800128c <HAL_ADC_ConfigChannel>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d001      	beq.n	8000950 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800094c:	f000 f9ee 	bl	8000d2c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000950:	bf00      	nop
 8000952:	3710      	adds	r7, #16
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}
 8000958:	20004814 	.word	0x20004814
 800095c:	40012000 	.word	0x40012000
 8000960:	0f000001 	.word	0x0f000001
 8000964:	10000012 	.word	0x10000012

08000968 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800096c:	4b14      	ldr	r3, [pc, #80]	; (80009c0 <MX_USART3_UART_Init+0x58>)
 800096e:	4a15      	ldr	r2, [pc, #84]	; (80009c4 <MX_USART3_UART_Init+0x5c>)
 8000970:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000972:	4b13      	ldr	r3, [pc, #76]	; (80009c0 <MX_USART3_UART_Init+0x58>)
 8000974:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000978:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800097a:	4b11      	ldr	r3, [pc, #68]	; (80009c0 <MX_USART3_UART_Init+0x58>)
 800097c:	2200      	movs	r2, #0
 800097e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000980:	4b0f      	ldr	r3, [pc, #60]	; (80009c0 <MX_USART3_UART_Init+0x58>)
 8000982:	2200      	movs	r2, #0
 8000984:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000986:	4b0e      	ldr	r3, [pc, #56]	; (80009c0 <MX_USART3_UART_Init+0x58>)
 8000988:	2200      	movs	r2, #0
 800098a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800098c:	4b0c      	ldr	r3, [pc, #48]	; (80009c0 <MX_USART3_UART_Init+0x58>)
 800098e:	220c      	movs	r2, #12
 8000990:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000992:	4b0b      	ldr	r3, [pc, #44]	; (80009c0 <MX_USART3_UART_Init+0x58>)
 8000994:	2200      	movs	r2, #0
 8000996:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000998:	4b09      	ldr	r3, [pc, #36]	; (80009c0 <MX_USART3_UART_Init+0x58>)
 800099a:	2200      	movs	r2, #0
 800099c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800099e:	4b08      	ldr	r3, [pc, #32]	; (80009c0 <MX_USART3_UART_Init+0x58>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009a4:	4b06      	ldr	r3, [pc, #24]	; (80009c0 <MX_USART3_UART_Init+0x58>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80009aa:	4805      	ldr	r0, [pc, #20]	; (80009c0 <MX_USART3_UART_Init+0x58>)
 80009ac:	f003 ff28 	bl	8004800 <HAL_UART_Init>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d001      	beq.n	80009ba <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80009b6:	f000 f9b9 	bl	8000d2c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80009ba:	bf00      	nop
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	20004790 	.word	0x20004790
 80009c4:	40004800 	.word	0x40004800

080009c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b08c      	sub	sp, #48	; 0x30
 80009cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ce:	f107 031c 	add.w	r3, r7, #28
 80009d2:	2200      	movs	r2, #0
 80009d4:	601a      	str	r2, [r3, #0]
 80009d6:	605a      	str	r2, [r3, #4]
 80009d8:	609a      	str	r2, [r3, #8]
 80009da:	60da      	str	r2, [r3, #12]
 80009dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009de:	4b30      	ldr	r3, [pc, #192]	; (8000aa0 <MX_GPIO_Init+0xd8>)
 80009e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e2:	4a2f      	ldr	r2, [pc, #188]	; (8000aa0 <MX_GPIO_Init+0xd8>)
 80009e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009e8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ea:	4b2d      	ldr	r3, [pc, #180]	; (8000aa0 <MX_GPIO_Init+0xd8>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009f2:	61bb      	str	r3, [r7, #24]
 80009f4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009f6:	4b2a      	ldr	r3, [pc, #168]	; (8000aa0 <MX_GPIO_Init+0xd8>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fa:	4a29      	ldr	r2, [pc, #164]	; (8000aa0 <MX_GPIO_Init+0xd8>)
 80009fc:	f043 0304 	orr.w	r3, r3, #4
 8000a00:	6313      	str	r3, [r2, #48]	; 0x30
 8000a02:	4b27      	ldr	r3, [pc, #156]	; (8000aa0 <MX_GPIO_Init+0xd8>)
 8000a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a06:	f003 0304 	and.w	r3, r3, #4
 8000a0a:	617b      	str	r3, [r7, #20]
 8000a0c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a0e:	4b24      	ldr	r3, [pc, #144]	; (8000aa0 <MX_GPIO_Init+0xd8>)
 8000a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a12:	4a23      	ldr	r2, [pc, #140]	; (8000aa0 <MX_GPIO_Init+0xd8>)
 8000a14:	f043 0301 	orr.w	r3, r3, #1
 8000a18:	6313      	str	r3, [r2, #48]	; 0x30
 8000a1a:	4b21      	ldr	r3, [pc, #132]	; (8000aa0 <MX_GPIO_Init+0xd8>)
 8000a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1e:	f003 0301 	and.w	r3, r3, #1
 8000a22:	613b      	str	r3, [r7, #16]
 8000a24:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a26:	4b1e      	ldr	r3, [pc, #120]	; (8000aa0 <MX_GPIO_Init+0xd8>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2a:	4a1d      	ldr	r2, [pc, #116]	; (8000aa0 <MX_GPIO_Init+0xd8>)
 8000a2c:	f043 0302 	orr.w	r3, r3, #2
 8000a30:	6313      	str	r3, [r2, #48]	; 0x30
 8000a32:	4b1b      	ldr	r3, [pc, #108]	; (8000aa0 <MX_GPIO_Init+0xd8>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a36:	f003 0302 	and.w	r3, r3, #2
 8000a3a:	60fb      	str	r3, [r7, #12]
 8000a3c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a3e:	4b18      	ldr	r3, [pc, #96]	; (8000aa0 <MX_GPIO_Init+0xd8>)
 8000a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a42:	4a17      	ldr	r2, [pc, #92]	; (8000aa0 <MX_GPIO_Init+0xd8>)
 8000a44:	f043 0308 	orr.w	r3, r3, #8
 8000a48:	6313      	str	r3, [r2, #48]	; 0x30
 8000a4a:	4b15      	ldr	r3, [pc, #84]	; (8000aa0 <MX_GPIO_Init+0xd8>)
 8000a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4e:	f003 0308 	and.w	r3, r3, #8
 8000a52:	60bb      	str	r3, [r7, #8]
 8000a54:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a56:	4b12      	ldr	r3, [pc, #72]	; (8000aa0 <MX_GPIO_Init+0xd8>)
 8000a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5a:	4a11      	ldr	r2, [pc, #68]	; (8000aa0 <MX_GPIO_Init+0xd8>)
 8000a5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a60:	6313      	str	r3, [r2, #48]	; 0x30
 8000a62:	4b0f      	ldr	r3, [pc, #60]	; (8000aa0 <MX_GPIO_Init+0xd8>)
 8000a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a6a:	607b      	str	r3, [r7, #4]
 8000a6c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_14|GPIO_PIN_7, GPIO_PIN_RESET);
 8000a6e:	2200      	movs	r2, #0
 8000a70:	f244 0181 	movw	r1, #16513	; 0x4081
 8000a74:	480b      	ldr	r0, [pc, #44]	; (8000aa4 <MX_GPIO_Init+0xdc>)
 8000a76:	f002 fa5f 	bl	8002f38 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB0 PB14 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_14|GPIO_PIN_7;
 8000a7a:	f244 0381 	movw	r3, #16513	; 0x4081
 8000a7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a80:	2301      	movs	r3, #1
 8000a82:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a84:	2300      	movs	r3, #0
 8000a86:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a8c:	f107 031c 	add.w	r3, r7, #28
 8000a90:	4619      	mov	r1, r3
 8000a92:	4804      	ldr	r0, [pc, #16]	; (8000aa4 <MX_GPIO_Init+0xdc>)
 8000a94:	f002 f8a6 	bl	8002be4 <HAL_GPIO_Init>

}
 8000a98:	bf00      	nop
 8000a9a:	3730      	adds	r7, #48	; 0x30
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	40023800 	.word	0x40023800
 8000aa4:	40020400 	.word	0x40020400

08000aa8 <callback_LEDToggle>:
void vAplicationIdleHook(void){
	__WFI();
}

// Timer callback function
void callback_LEDToggle(TimerHandle_t xTimer){
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b082      	sub	sp, #8
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0); // Green LED
 8000ab0:	2101      	movs	r1, #1
 8000ab2:	4803      	ldr	r0, [pc, #12]	; (8000ac0 <callback_LEDToggle+0x18>)
 8000ab4:	f002 fa59 	bl	8002f6a <HAL_GPIO_TogglePin>
}
 8000ab8:	bf00      	nop
 8000aba:	3708      	adds	r7, #8
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	40020400 	.word	0x40020400

08000ac4 <callback_TemperRead>:

// Timer callback function for reading temperature
void callback_TemperRead(TimerHandle_t xTimer)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b082      	sub	sp, #8
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14); // Red LED
 8000acc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ad0:	4803      	ldr	r0, [pc, #12]	; (8000ae0 <callback_TemperRead+0x1c>)
 8000ad2:	f002 fa4a 	bl	8002f6a <HAL_GPIO_TogglePin>
}
 8000ad6:	bf00      	nop
 8000ad8:	3708      	adds	r7, #8
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	40020400 	.word	0x40020400

08000ae4 <task_Ethernet>:
/*
 * - for creating port and to wait for connection from cleint
 * - When message is to be send to Client -> message to be send is put into Queue, which will then be send from Queue from 'task_Gatekeeper'
 */
void task_Ethernet(void *pvParameters)
{
 8000ae4:	b5b0      	push	{r4, r5, r7, lr}
 8000ae6:	b0b8      	sub	sp, #224	; 0xe0
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
	char stri1[] = "{task_Ethernet} [info]	Entered task_ethernet.\n\r";
 8000aec:	4b6b      	ldr	r3, [pc, #428]	; (8000c9c <task_Ethernet+0x1b8>)
 8000aee:	f107 04a0 	add.w	r4, r7, #160	; 0xa0
 8000af2:	461d      	mov	r5, r3
 8000af4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000af6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000af8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000afa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000afc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000b00:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	HAL_UART_Transmit(&huart3, (uint8_t*)stri1, strlen(stri1), HAL_MAX_DELAY);
 8000b04:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f7ff fba3 	bl	8000254 <strlen>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	b29a      	uxth	r2, r3
 8000b12:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 8000b16:	f04f 33ff 	mov.w	r3, #4294967295
 8000b1a:	4861      	ldr	r0, [pc, #388]	; (8000ca0 <task_Ethernet+0x1bc>)
 8000b1c:	f003 febe 	bl	800489c <HAL_UART_Transmit>

	bool echo_status = 0;
 8000b20:	2300      	movs	r3, #0
 8000b22:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
	uint32_t bytesReceived;
	int sockfd, len;
	struct sockaddr_in servaddr, cli;

	/***** 1. Create TCP Socket *****/
	sockfd = socket(AF_INET, SOCK_STREAM, 0);
 8000b26:	2200      	movs	r2, #0
 8000b28:	2101      	movs	r1, #1
 8000b2a:	2002      	movs	r0, #2
 8000b2c:	f00b fc5a 	bl	800c3e4 <lwip_socket>
 8000b30:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
	if(sockfd == -1)
 8000b34:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8000b38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b3c:	d102      	bne.n	8000b44 <task_Ethernet+0x60>
	{
		exit(0);
 8000b3e:	2000      	movs	r0, #0
 8000b40:	f016 fce0 	bl	8017504 <exit>
	}
	memset(&servaddr, 0, BUFFER_LENGTH);
 8000b44:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000b48:	2228      	movs	r2, #40	; 0x28
 8000b4a:	2100      	movs	r1, #0
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	f016 fd2b 	bl	80175a8 <memset>

	// Assign IP, Port
	servaddr.sin_family = AF_INET;
 8000b52:	2302      	movs	r3, #2
 8000b54:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	servaddr.sin_addr.s_addr = htonl(INADDR_ANY);
 8000b58:	2000      	movs	r0, #0
 8000b5a:	f00b ffe8 	bl	800cb2e <lwip_htonl>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	643b      	str	r3, [r7, #64]	; 0x40
	servaddr.sin_port = htons(SERVER_PORT);
 8000b62:	f641 2084 	movw	r0, #6788	; 0x1a84
 8000b66:	f00b ffcd 	bl	800cb04 <lwip_htons>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	87fb      	strh	r3, [r7, #62]	; 0x3e

	/***** 2. Bind the Socket to server address *****/
	if ((bind(sockfd, (struct sockaddr *)&servaddr, sizeof(servaddr))) != 0)
 8000b6e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000b72:	2210      	movs	r2, #16
 8000b74:	4619      	mov	r1, r3
 8000b76:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 8000b7a:	f00a ff89 	bl	800ba90 <lwip_bind>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d002      	beq.n	8000b8a <task_Ethernet+0xa6>
	{
		exit(0);
 8000b84:	2000      	movs	r0, #0
 8000b86:	f016 fcbd 	bl	8017504 <exit>
	}
//	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);

	/***** 3. Listen to Clients *****/
	if ((listen(sockfd, 5)) != 0)
 8000b8a:	2105      	movs	r1, #5
 8000b8c:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 8000b90:	f00b f842 	bl	800bc18 <lwip_listen>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d002      	beq.n	8000ba0 <task_Ethernet+0xbc>
	{
		exit(0);
 8000b9a:	2000      	movs	r0, #0
 8000b9c:	f016 fcb2 	bl	8017504 <exit>
	}
	len = sizeof(cli);
 8000ba0:	2310      	movs	r3, #16
 8000ba2:	64fb      	str	r3, [r7, #76]	; 0x4c

	/***** 4. Accept connections from the Clients *****/
	sockCli = accept(sockfd, (struct sockaddr *)&cli, &len);
 8000ba4:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8000ba8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000bac:	4619      	mov	r1, r3
 8000bae:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 8000bb2:	f00a fe4f 	bl	800b854 <lwip_accept>
 8000bb6:	4602      	mov	r2, r0
 8000bb8:	4b3a      	ldr	r3, [pc, #232]	; (8000ca4 <task_Ethernet+0x1c0>)
 8000bba:	601a      	str	r2, [r3, #0]
	if(sockCli < 0)
 8000bbc:	4b39      	ldr	r3, [pc, #228]	; (8000ca4 <task_Ethernet+0x1c0>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	da02      	bge.n	8000bca <task_Ethernet+0xe6>
	{
		exit(0);
 8000bc4:	2000      	movs	r0, #0
 8000bc6:	f016 fc9d 	bl	8017504 <exit>
	}

	// Sending message at the beginning to the Client
	char *msgBeg = "Hello message from Server.\n";
 8000bca:	4b37      	ldr	r3, [pc, #220]	; (8000ca8 <task_Ethernet+0x1c4>)
 8000bcc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
	char buffer_msgBeg[30];
	strcpy(buffer_msgBeg, msgBeg);
 8000bd0:	f107 030c 	add.w	r3, r7, #12
 8000bd4:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f016 fd39 	bl	8017650 <strcpy>
	send(sockCli, buffer_msgBeg, strlen(buffer_msgBeg), 0);
 8000bde:	4b31      	ldr	r3, [pc, #196]	; (8000ca4 <task_Ethernet+0x1c0>)
 8000be0:	681c      	ldr	r4, [r3, #0]
 8000be2:	f107 030c 	add.w	r3, r7, #12
 8000be6:	4618      	mov	r0, r3
 8000be8:	f7ff fb34 	bl	8000254 <strlen>
 8000bec:	4602      	mov	r2, r0
 8000bee:	f107 010c 	add.w	r1, r7, #12
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	4620      	mov	r0, r4
 8000bf6:	f00b fb91 	bl	800c31c <lwip_send>

	/***** Endlos loop *****/
	while(1)
	{
		memset(buff, 0, sizeof(buff));
 8000bfa:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000bfe:	2250      	movs	r2, #80	; 0x50
 8000c00:	2100      	movs	r1, #0
 8000c02:	4618      	mov	r0, r3
 8000c04:	f016 fcd0 	bl	80175a8 <memset>

		/***** REad message from Client *****/
//		read(connfd, buff, sizeof(buff));
		bytesReceived = recv(sockCli, buff, sizeof(buff), 0); // recv(s,mem,len,flags)
 8000c08:	4b26      	ldr	r3, [pc, #152]	; (8000ca4 <task_Ethernet+0x1c0>)
 8000c0a:	6818      	ldr	r0, [r3, #0]
 8000c0c:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8000c10:	2300      	movs	r3, #0
 8000c12:	2250      	movs	r2, #80	; 0x50
 8000c14:	f00b fb6c 	bl	800c2f0 <lwip_recv>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
		if(bytesReceived<=0)
 8000c1e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d104      	bne.n	8000c30 <task_Ethernet+0x14c>
		{
			close(sockCli);
 8000c26:	4b1f      	ldr	r3, [pc, #124]	; (8000ca4 <task_Ethernet+0x1c0>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	f00a ff9e 	bl	800bb6c <lwip_close>
		}

		// Adding Rx-Messages to queue when echo_status=1 and Rx-Msg is not 'ECHO_ON'
		if(strcmp(RX_BUFFER_MITTELWERT, buff) == 0)
 8000c30:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000c34:	4619      	mov	r1, r3
 8000c36:	481d      	ldr	r0, [pc, #116]	; (8000cac <task_Ethernet+0x1c8>)
 8000c38:	f7ff fb02 	bl	8000240 <strcmp>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d103      	bne.n	8000c4a <task_Ethernet+0x166>
		{
			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8000c42:	2180      	movs	r1, #128	; 0x80
 8000c44:	481a      	ldr	r0, [pc, #104]	; (8000cb0 <task_Ethernet+0x1cc>)
 8000c46:	f002 f990 	bl	8002f6a <HAL_GPIO_TogglePin>
//			// Send data to Queue -> to Gatekeeper-Task
//			xQueueSend(queue_RxMsg, &buff, portMAX_DELAY);
		}

		// if msg contains 'exit', 'Exit' or 'EXIT', then server exit/close
		if (strncmp("exit", buff, 4)==0 || strncmp("Exit", buff, 4)==0 || strncmp("EXIT", buff, 4)==0)
 8000c4a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000c4e:	2204      	movs	r2, #4
 8000c50:	4619      	mov	r1, r3
 8000c52:	4818      	ldr	r0, [pc, #96]	; (8000cb4 <task_Ethernet+0x1d0>)
 8000c54:	f016 fd04 	bl	8017660 <strncmp>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d013      	beq.n	8000c86 <task_Ethernet+0x1a2>
 8000c5e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000c62:	2204      	movs	r2, #4
 8000c64:	4619      	mov	r1, r3
 8000c66:	4814      	ldr	r0, [pc, #80]	; (8000cb8 <task_Ethernet+0x1d4>)
 8000c68:	f016 fcfa 	bl	8017660 <strncmp>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d009      	beq.n	8000c86 <task_Ethernet+0x1a2>
 8000c72:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000c76:	2204      	movs	r2, #4
 8000c78:	4619      	mov	r1, r3
 8000c7a:	4810      	ldr	r0, [pc, #64]	; (8000cbc <task_Ethernet+0x1d8>)
 8000c7c:	f016 fcf0 	bl	8017660 <strncmp>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d1b9      	bne.n	8000bfa <task_Ethernet+0x116>
		{
//			printf("Server Exit...\n");
			close(sockCli);
 8000c86:	4b07      	ldr	r3, [pc, #28]	; (8000ca4 <task_Ethernet+0x1c0>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f00a ff6e 	bl	800bb6c <lwip_close>
			break;
 8000c90:	bf00      	nop
//		}

		// Copy server message in the buffer
//		while((buff[n++] = getchar()) != '\n');
	}
}
 8000c92:	bf00      	nop
 8000c94:	37e0      	adds	r7, #224	; 0xe0
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bdb0      	pop	{r4, r5, r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	080184e8 	.word	0x080184e8
 8000ca0:	20004790 	.word	0x20004790
 8000ca4:	20004864 	.word	0x20004864
 8000ca8:	080184a8 	.word	0x080184a8
 8000cac:	080184c4 	.word	0x080184c4
 8000cb0:	40020400 	.word	0x40020400
 8000cb4:	080184d0 	.word	0x080184d0
 8000cb8:	080184d8 	.word	0x080184d8
 8000cbc:	080184e0 	.word	0x080184e0

08000cc0 <task_Gatekeeper>:
/*
 * - this task wait for value in Queue
 * - once when there is sth in Queue, it is send out to Client
 */
void task_Gatekeeper(void *pvParameters)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b096      	sub	sp, #88	; 0x58
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
	char buff[MAX_BUFFER];
//	xQueuemessage Message_can;

	while(1){
		memset(&buff,0,sizeof(buff)); // reset the struct variable
 8000cc8:	f107 0308 	add.w	r3, r7, #8
 8000ccc:	2250      	movs	r2, #80	; 0x50
 8000cce:	2100      	movs	r1, #0
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f016 fc69 	bl	80175a8 <memset>
		if(xQueueReceive(queue_RxMsg, &buff, portMAX_DELAY)==pdTRUE) // receive message
 8000cd6:	4b0a      	ldr	r3, [pc, #40]	; (8000d00 <task_Gatekeeper+0x40>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	f107 0108 	add.w	r1, r7, #8
 8000cde:	f04f 32ff 	mov.w	r2, #4294967295
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f005 ff36 	bl	8006b54 <xQueueReceive>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b01      	cmp	r3, #1
 8000cec:	d1ec      	bne.n	8000cc8 <task_Gatekeeper+0x8>
		{
//			char stri1[] = "{task_Gatekeeper} [info]	Entered task_Gatekeeper>afterXQueueReceive.\n\r";
//			HAL_UART_Transmit(&huart3, (uint8_t*)stri1, strlen(stri1), HAL_MAX_DELAY);

			send(sockCli, buff, sizeof(buff)+1, 0);
 8000cee:	4b05      	ldr	r3, [pc, #20]	; (8000d04 <task_Gatekeeper+0x44>)
 8000cf0:	6818      	ldr	r0, [r3, #0]
 8000cf2:	f107 0108 	add.w	r1, r7, #8
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	2251      	movs	r2, #81	; 0x51
 8000cfa:	f00b fb0f 	bl	800c31c <lwip_send>
		memset(&buff,0,sizeof(buff)); // reset the struct variable
 8000cfe:	e7e3      	b.n	8000cc8 <task_Gatekeeper+0x8>
 8000d00:	2000485c 	.word	0x2000485c
 8000d04:	20004864 	.word	0x20004864

08000d08 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b082      	sub	sp, #8
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM10) {
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	4a04      	ldr	r2, [pc, #16]	; (8000d28 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000d16:	4293      	cmp	r3, r2
 8000d18:	d101      	bne.n	8000d1e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000d1a:	f000 fa31 	bl	8001180 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000d1e:	bf00      	nop
 8000d20:	3708      	adds	r7, #8
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	40014400 	.word	0x40014400

08000d2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000d30:	bf00      	nop
 8000d32:	46bd      	mov	sp, r7
 8000d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d38:	4770      	bx	lr
	...

08000d3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	b083      	sub	sp, #12
 8000d40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000d42:	4b0f      	ldr	r3, [pc, #60]	; (8000d80 <HAL_MspInit+0x44>)
 8000d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d46:	4a0e      	ldr	r2, [pc, #56]	; (8000d80 <HAL_MspInit+0x44>)
 8000d48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d4c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d4e:	4b0c      	ldr	r3, [pc, #48]	; (8000d80 <HAL_MspInit+0x44>)
 8000d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d56:	607b      	str	r3, [r7, #4]
 8000d58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d5a:	4b09      	ldr	r3, [pc, #36]	; (8000d80 <HAL_MspInit+0x44>)
 8000d5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d5e:	4a08      	ldr	r2, [pc, #32]	; (8000d80 <HAL_MspInit+0x44>)
 8000d60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d64:	6453      	str	r3, [r2, #68]	; 0x44
 8000d66:	4b06      	ldr	r3, [pc, #24]	; (8000d80 <HAL_MspInit+0x44>)
 8000d68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d6e:	603b      	str	r3, [r7, #0]
 8000d70:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d72:	bf00      	nop
 8000d74:	370c      	adds	r7, #12
 8000d76:	46bd      	mov	sp, r7
 8000d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7c:	4770      	bx	lr
 8000d7e:	bf00      	nop
 8000d80:	40023800 	.word	0x40023800

08000d84 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d84:	b480      	push	{r7}
 8000d86:	b085      	sub	sp, #20
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	4a0a      	ldr	r2, [pc, #40]	; (8000dbc <HAL_ADC_MspInit+0x38>)
 8000d92:	4293      	cmp	r3, r2
 8000d94:	d10b      	bne.n	8000dae <HAL_ADC_MspInit+0x2a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000d96:	4b0a      	ldr	r3, [pc, #40]	; (8000dc0 <HAL_ADC_MspInit+0x3c>)
 8000d98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d9a:	4a09      	ldr	r2, [pc, #36]	; (8000dc0 <HAL_ADC_MspInit+0x3c>)
 8000d9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000da0:	6453      	str	r3, [r2, #68]	; 0x44
 8000da2:	4b07      	ldr	r3, [pc, #28]	; (8000dc0 <HAL_ADC_MspInit+0x3c>)
 8000da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000da6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000daa:	60fb      	str	r3, [r7, #12]
 8000dac:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000dae:	bf00      	nop
 8000db0:	3714      	adds	r7, #20
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr
 8000dba:	bf00      	nop
 8000dbc:	40012000 	.word	0x40012000
 8000dc0:	40023800 	.word	0x40023800

08000dc4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b08a      	sub	sp, #40	; 0x28
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dcc:	f107 0314 	add.w	r3, r7, #20
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	601a      	str	r2, [r3, #0]
 8000dd4:	605a      	str	r2, [r3, #4]
 8000dd6:	609a      	str	r2, [r3, #8]
 8000dd8:	60da      	str	r2, [r3, #12]
 8000dda:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	4a17      	ldr	r2, [pc, #92]	; (8000e40 <HAL_UART_MspInit+0x7c>)
 8000de2:	4293      	cmp	r3, r2
 8000de4:	d128      	bne.n	8000e38 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000de6:	4b17      	ldr	r3, [pc, #92]	; (8000e44 <HAL_UART_MspInit+0x80>)
 8000de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dea:	4a16      	ldr	r2, [pc, #88]	; (8000e44 <HAL_UART_MspInit+0x80>)
 8000dec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000df0:	6413      	str	r3, [r2, #64]	; 0x40
 8000df2:	4b14      	ldr	r3, [pc, #80]	; (8000e44 <HAL_UART_MspInit+0x80>)
 8000df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000df6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000dfa:	613b      	str	r3, [r7, #16]
 8000dfc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dfe:	4b11      	ldr	r3, [pc, #68]	; (8000e44 <HAL_UART_MspInit+0x80>)
 8000e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e02:	4a10      	ldr	r2, [pc, #64]	; (8000e44 <HAL_UART_MspInit+0x80>)
 8000e04:	f043 0308 	orr.w	r3, r3, #8
 8000e08:	6313      	str	r3, [r2, #48]	; 0x30
 8000e0a:	4b0e      	ldr	r3, [pc, #56]	; (8000e44 <HAL_UART_MspInit+0x80>)
 8000e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0e:	f003 0308 	and.w	r3, r3, #8
 8000e12:	60fb      	str	r3, [r7, #12]
 8000e14:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000e16:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e1c:	2302      	movs	r3, #2
 8000e1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e20:	2300      	movs	r3, #0
 8000e22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e24:	2303      	movs	r3, #3
 8000e26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000e28:	2307      	movs	r3, #7
 8000e2a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e2c:	f107 0314 	add.w	r3, r7, #20
 8000e30:	4619      	mov	r1, r3
 8000e32:	4805      	ldr	r0, [pc, #20]	; (8000e48 <HAL_UART_MspInit+0x84>)
 8000e34:	f001 fed6 	bl	8002be4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000e38:	bf00      	nop
 8000e3a:	3728      	adds	r7, #40	; 0x28
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}
 8000e40:	40004800 	.word	0x40004800
 8000e44:	40023800 	.word	0x40023800
 8000e48:	40020c00 	.word	0x40020c00

08000e4c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b08c      	sub	sp, #48	; 0x30
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000e54:	2300      	movs	r3, #0
 8000e56:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM10 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	6879      	ldr	r1, [r7, #4]
 8000e60:	2019      	movs	r0, #25
 8000e62:	f000 fd0f 	bl	8001884 <HAL_NVIC_SetPriority>

  /* Enable the TIM10 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000e66:	2019      	movs	r0, #25
 8000e68:	f000 fd28 	bl	80018bc <HAL_NVIC_EnableIRQ>
  /* Enable TIM10 clock */
  __HAL_RCC_TIM10_CLK_ENABLE();
 8000e6c:	4b1f      	ldr	r3, [pc, #124]	; (8000eec <HAL_InitTick+0xa0>)
 8000e6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e70:	4a1e      	ldr	r2, [pc, #120]	; (8000eec <HAL_InitTick+0xa0>)
 8000e72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e76:	6453      	str	r3, [r2, #68]	; 0x44
 8000e78:	4b1c      	ldr	r3, [pc, #112]	; (8000eec <HAL_InitTick+0xa0>)
 8000e7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e80:	60fb      	str	r3, [r7, #12]
 8000e82:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000e84:	f107 0210 	add.w	r2, r7, #16
 8000e88:	f107 0314 	add.w	r3, r7, #20
 8000e8c:	4611      	mov	r1, r2
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f002 fd7c 	bl	800398c <HAL_RCC_GetClockConfig>

  /* Compute TIM10 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000e94:	f002 fd66 	bl	8003964 <HAL_RCC_GetPCLK2Freq>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	005b      	lsls	r3, r3, #1
 8000e9c:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM10 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000e9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ea0:	4a13      	ldr	r2, [pc, #76]	; (8000ef0 <HAL_InitTick+0xa4>)
 8000ea2:	fba2 2303 	umull	r2, r3, r2, r3
 8000ea6:	0c9b      	lsrs	r3, r3, #18
 8000ea8:	3b01      	subs	r3, #1
 8000eaa:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM10 */
  htim10.Instance = TIM10;
 8000eac:	4b11      	ldr	r3, [pc, #68]	; (8000ef4 <HAL_InitTick+0xa8>)
 8000eae:	4a12      	ldr	r2, [pc, #72]	; (8000ef8 <HAL_InitTick+0xac>)
 8000eb0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM10CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim10.Init.Period = (1000000 / 1000) - 1;
 8000eb2:	4b10      	ldr	r3, [pc, #64]	; (8000ef4 <HAL_InitTick+0xa8>)
 8000eb4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000eb8:	60da      	str	r2, [r3, #12]
  htim10.Init.Prescaler = uwPrescalerValue;
 8000eba:	4a0e      	ldr	r2, [pc, #56]	; (8000ef4 <HAL_InitTick+0xa8>)
 8000ebc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ebe:	6053      	str	r3, [r2, #4]
  htim10.Init.ClockDivision = 0;
 8000ec0:	4b0c      	ldr	r3, [pc, #48]	; (8000ef4 <HAL_InitTick+0xa8>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	611a      	str	r2, [r3, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ec6:	4b0b      	ldr	r3, [pc, #44]	; (8000ef4 <HAL_InitTick+0xa8>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim10) == HAL_OK)
 8000ecc:	4809      	ldr	r0, [pc, #36]	; (8000ef4 <HAL_InitTick+0xa8>)
 8000ece:	f003 f9b7 	bl	8004240 <HAL_TIM_Base_Init>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d104      	bne.n	8000ee2 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim10);
 8000ed8:	4806      	ldr	r0, [pc, #24]	; (8000ef4 <HAL_InitTick+0xa8>)
 8000eda:	f003 fa13 	bl	8004304 <HAL_TIM_Base_Start_IT>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	e000      	b.n	8000ee4 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8000ee2:	2301      	movs	r3, #1
}
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	3730      	adds	r7, #48	; 0x30
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	40023800 	.word	0x40023800
 8000ef0:	431bde83 	.word	0x431bde83
 8000ef4:	20004868 	.word	0x20004868
 8000ef8:	40014400 	.word	0x40014400

08000efc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000f00:	bf00      	nop
 8000f02:	46bd      	mov	sp, r7
 8000f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f08:	4770      	bx	lr

08000f0a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f0a:	b480      	push	{r7}
 8000f0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f0e:	e7fe      	b.n	8000f0e <HardFault_Handler+0x4>

08000f10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f14:	e7fe      	b.n	8000f14 <MemManage_Handler+0x4>

08000f16 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f16:	b480      	push	{r7}
 8000f18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f1a:	e7fe      	b.n	8000f1a <BusFault_Handler+0x4>

08000f1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f20:	e7fe      	b.n	8000f20 <UsageFault_Handler+0x4>

08000f22 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f22:	b480      	push	{r7}
 8000f24:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f26:	bf00      	nop
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2e:	4770      	bx	lr

08000f30 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8000f34:	4802      	ldr	r0, [pc, #8]	; (8000f40 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000f36:	f003 fa5d 	bl	80043f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000f3a:	bf00      	nop
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	20004868 	.word	0x20004868

08000f44 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000f48:	4802      	ldr	r0, [pc, #8]	; (8000f54 <ETH_IRQHandler+0x10>)
 8000f4a:	f001 f8a9 	bl	80020a0 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8000f4e:	bf00      	nop
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	200061dc 	.word	0x200061dc

08000f58 <ETH_WKUP_IRQHandler>:

/**
  * @brief This function handles Ethernet wake-up interrupt through EXTI line 19.
  */
void ETH_WKUP_IRQHandler(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_WKUP_IRQn 0 */

  /* USER CODE END ETH_WKUP_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000f5c:	4802      	ldr	r0, [pc, #8]	; (8000f68 <ETH_WKUP_IRQHandler+0x10>)
 8000f5e:	f001 f89f 	bl	80020a0 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_WKUP_IRQn 1 */

  /* USER CODE END ETH_WKUP_IRQn 1 */
}
 8000f62:	bf00      	nop
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	200061dc 	.word	0x200061dc

08000f6c <_kill>:
{
	return 1;
}

int _kill(int pid, int sig)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b083      	sub	sp, #12
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
 8000f74:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000f76:	4b05      	ldr	r3, [pc, #20]	; (8000f8c <_kill+0x20>)
 8000f78:	2216      	movs	r2, #22
 8000f7a:	601a      	str	r2, [r3, #0]
	return -1;
 8000f7c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f80:	4618      	mov	r0, r3
 8000f82:	370c      	adds	r7, #12
 8000f84:	46bd      	mov	sp, r7
 8000f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8a:	4770      	bx	lr
 8000f8c:	2000d2a0 	.word	0x2000d2a0

08000f90 <_exit>:

void _exit (int status)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000f98:	f04f 31ff 	mov.w	r1, #4294967295
 8000f9c:	6878      	ldr	r0, [r7, #4]
 8000f9e:	f7ff ffe5 	bl	8000f6c <_kill>
	while (1) {}		/* Make sure we hang here */
 8000fa2:	e7fe      	b.n	8000fa2 <_exit+0x12>

08000fa4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b086      	sub	sp, #24
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	60f8      	str	r0, [r7, #12]
 8000fac:	60b9      	str	r1, [r7, #8]
 8000fae:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	617b      	str	r3, [r7, #20]
 8000fb4:	e00a      	b.n	8000fcc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000fb6:	f3af 8000 	nop.w
 8000fba:	4601      	mov	r1, r0
 8000fbc:	68bb      	ldr	r3, [r7, #8]
 8000fbe:	1c5a      	adds	r2, r3, #1
 8000fc0:	60ba      	str	r2, [r7, #8]
 8000fc2:	b2ca      	uxtb	r2, r1
 8000fc4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fc6:	697b      	ldr	r3, [r7, #20]
 8000fc8:	3301      	adds	r3, #1
 8000fca:	617b      	str	r3, [r7, #20]
 8000fcc:	697a      	ldr	r2, [r7, #20]
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	429a      	cmp	r2, r3
 8000fd2:	dbf0      	blt.n	8000fb6 <_read+0x12>
	}

return len;
 8000fd4:	687b      	ldr	r3, [r7, #4]
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	3718      	adds	r7, #24
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}

08000fde <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000fde:	b580      	push	{r7, lr}
 8000fe0:	b086      	sub	sp, #24
 8000fe2:	af00      	add	r7, sp, #0
 8000fe4:	60f8      	str	r0, [r7, #12]
 8000fe6:	60b9      	str	r1, [r7, #8]
 8000fe8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fea:	2300      	movs	r3, #0
 8000fec:	617b      	str	r3, [r7, #20]
 8000fee:	e009      	b.n	8001004 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000ff0:	68bb      	ldr	r3, [r7, #8]
 8000ff2:	1c5a      	adds	r2, r3, #1
 8000ff4:	60ba      	str	r2, [r7, #8]
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ffe:	697b      	ldr	r3, [r7, #20]
 8001000:	3301      	adds	r3, #1
 8001002:	617b      	str	r3, [r7, #20]
 8001004:	697a      	ldr	r2, [r7, #20]
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	429a      	cmp	r2, r3
 800100a:	dbf1      	blt.n	8000ff0 <_write+0x12>
	}
	return len;
 800100c:	687b      	ldr	r3, [r7, #4]
}
 800100e:	4618      	mov	r0, r3
 8001010:	3718      	adds	r7, #24
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}

08001016 <_close>:

int _close(int file)
{
 8001016:	b480      	push	{r7}
 8001018:	b083      	sub	sp, #12
 800101a:	af00      	add	r7, sp, #0
 800101c:	6078      	str	r0, [r7, #4]
	return -1;
 800101e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001022:	4618      	mov	r0, r3
 8001024:	370c      	adds	r7, #12
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr

0800102e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800102e:	b480      	push	{r7}
 8001030:	b083      	sub	sp, #12
 8001032:	af00      	add	r7, sp, #0
 8001034:	6078      	str	r0, [r7, #4]
 8001036:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800103e:	605a      	str	r2, [r3, #4]
	return 0;
 8001040:	2300      	movs	r3, #0
}
 8001042:	4618      	mov	r0, r3
 8001044:	370c      	adds	r7, #12
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr

0800104e <_isatty>:

int _isatty(int file)
{
 800104e:	b480      	push	{r7}
 8001050:	b083      	sub	sp, #12
 8001052:	af00      	add	r7, sp, #0
 8001054:	6078      	str	r0, [r7, #4]
	return 1;
 8001056:	2301      	movs	r3, #1
}
 8001058:	4618      	mov	r0, r3
 800105a:	370c      	adds	r7, #12
 800105c:	46bd      	mov	sp, r7
 800105e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001062:	4770      	bx	lr

08001064 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001064:	b480      	push	{r7}
 8001066:	b085      	sub	sp, #20
 8001068:	af00      	add	r7, sp, #0
 800106a:	60f8      	str	r0, [r7, #12]
 800106c:	60b9      	str	r1, [r7, #8]
 800106e:	607a      	str	r2, [r7, #4]
	return 0;
 8001070:	2300      	movs	r3, #0
}
 8001072:	4618      	mov	r0, r3
 8001074:	3714      	adds	r7, #20
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr
	...

08001080 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001080:	b480      	push	{r7}
 8001082:	b087      	sub	sp, #28
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001088:	4a14      	ldr	r2, [pc, #80]	; (80010dc <_sbrk+0x5c>)
 800108a:	4b15      	ldr	r3, [pc, #84]	; (80010e0 <_sbrk+0x60>)
 800108c:	1ad3      	subs	r3, r2, r3
 800108e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001090:	697b      	ldr	r3, [r7, #20]
 8001092:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001094:	4b13      	ldr	r3, [pc, #76]	; (80010e4 <_sbrk+0x64>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	2b00      	cmp	r3, #0
 800109a:	d102      	bne.n	80010a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800109c:	4b11      	ldr	r3, [pc, #68]	; (80010e4 <_sbrk+0x64>)
 800109e:	4a12      	ldr	r2, [pc, #72]	; (80010e8 <_sbrk+0x68>)
 80010a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010a2:	4b10      	ldr	r3, [pc, #64]	; (80010e4 <_sbrk+0x64>)
 80010a4:	681a      	ldr	r2, [r3, #0]
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	4413      	add	r3, r2
 80010aa:	693a      	ldr	r2, [r7, #16]
 80010ac:	429a      	cmp	r2, r3
 80010ae:	d205      	bcs.n	80010bc <_sbrk+0x3c>
  {
    errno = ENOMEM;
 80010b0:	4b0e      	ldr	r3, [pc, #56]	; (80010ec <_sbrk+0x6c>)
 80010b2:	220c      	movs	r2, #12
 80010b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010b6:	f04f 33ff 	mov.w	r3, #4294967295
 80010ba:	e009      	b.n	80010d0 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 80010bc:	4b09      	ldr	r3, [pc, #36]	; (80010e4 <_sbrk+0x64>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010c2:	4b08      	ldr	r3, [pc, #32]	; (80010e4 <_sbrk+0x64>)
 80010c4:	681a      	ldr	r2, [r3, #0]
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	4413      	add	r3, r2
 80010ca:	4a06      	ldr	r2, [pc, #24]	; (80010e4 <_sbrk+0x64>)
 80010cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010ce:	68fb      	ldr	r3, [r7, #12]
}
 80010d0:	4618      	mov	r0, r3
 80010d2:	371c      	adds	r7, #28
 80010d4:	46bd      	mov	sp, r7
 80010d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010da:	4770      	bx	lr
 80010dc:	20080000 	.word	0x20080000
 80010e0:	00000400 	.word	0x00000400
 80010e4:	20000760 	.word	0x20000760
 80010e8:	2000d2a8 	.word	0x2000d2a8
 80010ec:	2000d2a0 	.word	0x2000d2a0

080010f0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010f4:	4b06      	ldr	r3, [pc, #24]	; (8001110 <SystemInit+0x20>)
 80010f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010fa:	4a05      	ldr	r2, [pc, #20]	; (8001110 <SystemInit+0x20>)
 80010fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001100:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001104:	bf00      	nop
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr
 800110e:	bf00      	nop
 8001110:	e000ed00 	.word	0xe000ed00

08001114 <Reset_Handler>:
 8001114:	f8df d034 	ldr.w	sp, [pc, #52]	; 800114c <LoopFillZerobss+0x12>
 8001118:	480d      	ldr	r0, [pc, #52]	; (8001150 <LoopFillZerobss+0x16>)
 800111a:	490e      	ldr	r1, [pc, #56]	; (8001154 <LoopFillZerobss+0x1a>)
 800111c:	4a0e      	ldr	r2, [pc, #56]	; (8001158 <LoopFillZerobss+0x1e>)
 800111e:	2300      	movs	r3, #0
 8001120:	e002      	b.n	8001128 <LoopCopyDataInit>

08001122 <CopyDataInit>:
 8001122:	58d4      	ldr	r4, [r2, r3]
 8001124:	50c4      	str	r4, [r0, r3]
 8001126:	3304      	adds	r3, #4

08001128 <LoopCopyDataInit>:
 8001128:	18c4      	adds	r4, r0, r3
 800112a:	428c      	cmp	r4, r1
 800112c:	d3f9      	bcc.n	8001122 <CopyDataInit>
 800112e:	4a0b      	ldr	r2, [pc, #44]	; (800115c <LoopFillZerobss+0x22>)
 8001130:	4c0b      	ldr	r4, [pc, #44]	; (8001160 <LoopFillZerobss+0x26>)
 8001132:	2300      	movs	r3, #0
 8001134:	e001      	b.n	800113a <LoopFillZerobss>

08001136 <FillZerobss>:
 8001136:	6013      	str	r3, [r2, #0]
 8001138:	3204      	adds	r2, #4

0800113a <LoopFillZerobss>:
 800113a:	42a2      	cmp	r2, r4
 800113c:	d3fb      	bcc.n	8001136 <FillZerobss>
 800113e:	f7ff ffd7 	bl	80010f0 <SystemInit>
 8001142:	f016 f9f3 	bl	801752c <__libc_init_array>
 8001146:	f7ff fa9f 	bl	8000688 <main>
 800114a:	4770      	bx	lr
 800114c:	20080000 	.word	0x20080000
 8001150:	20000000 	.word	0x20000000
 8001154:	2000007c 	.word	0x2000007c
 8001158:	0801bb00 	.word	0x0801bb00
 800115c:	2000007c 	.word	0x2000007c
 8001160:	2000d2a8 	.word	0x2000d2a8

08001164 <ADC_IRQHandler>:
 8001164:	e7fe      	b.n	8001164 <ADC_IRQHandler>

08001166 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001166:	b580      	push	{r7, lr}
 8001168:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800116a:	2003      	movs	r0, #3
 800116c:	f000 fb7f 	bl	800186e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001170:	2000      	movs	r0, #0
 8001172:	f7ff fe6b 	bl	8000e4c <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8001176:	f7ff fde1 	bl	8000d3c <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800117a:	2300      	movs	r3, #0
}
 800117c:	4618      	mov	r0, r3
 800117e:	bd80      	pop	{r7, pc}

08001180 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001184:	4b06      	ldr	r3, [pc, #24]	; (80011a0 <HAL_IncTick+0x20>)
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	461a      	mov	r2, r3
 800118a:	4b06      	ldr	r3, [pc, #24]	; (80011a4 <HAL_IncTick+0x24>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	4413      	add	r3, r2
 8001190:	4a04      	ldr	r2, [pc, #16]	; (80011a4 <HAL_IncTick+0x24>)
 8001192:	6013      	str	r3, [r2, #0]
}
 8001194:	bf00      	nop
 8001196:	46bd      	mov	sp, r7
 8001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119c:	4770      	bx	lr
 800119e:	bf00      	nop
 80011a0:	20000008 	.word	0x20000008
 80011a4:	200048b4 	.word	0x200048b4

080011a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0
  return uwTick;
 80011ac:	4b03      	ldr	r3, [pc, #12]	; (80011bc <HAL_GetTick+0x14>)
 80011ae:	681b      	ldr	r3, [r3, #0]
}
 80011b0:	4618      	mov	r0, r3
 80011b2:	46bd      	mov	sp, r7
 80011b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b8:	4770      	bx	lr
 80011ba:	bf00      	nop
 80011bc:	200048b4 	.word	0x200048b4

080011c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b084      	sub	sp, #16
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011c8:	f7ff ffee 	bl	80011a8 <HAL_GetTick>
 80011cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011d8:	d005      	beq.n	80011e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011da:	4b09      	ldr	r3, [pc, #36]	; (8001200 <HAL_Delay+0x40>)
 80011dc:	781b      	ldrb	r3, [r3, #0]
 80011de:	461a      	mov	r2, r3
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	4413      	add	r3, r2
 80011e4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80011e6:	bf00      	nop
 80011e8:	f7ff ffde 	bl	80011a8 <HAL_GetTick>
 80011ec:	4602      	mov	r2, r0
 80011ee:	68bb      	ldr	r3, [r7, #8]
 80011f0:	1ad3      	subs	r3, r2, r3
 80011f2:	68fa      	ldr	r2, [r7, #12]
 80011f4:	429a      	cmp	r2, r3
 80011f6:	d8f7      	bhi.n	80011e8 <HAL_Delay+0x28>
  {
  }
}
 80011f8:	bf00      	nop
 80011fa:	3710      	adds	r7, #16
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	20000008 	.word	0x20000008

08001204 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b084      	sub	sp, #16
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800120c:	2300      	movs	r3, #0
 800120e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	2b00      	cmp	r3, #0
 8001214:	d101      	bne.n	800121a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001216:	2301      	movs	r3, #1
 8001218:	e031      	b.n	800127e <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800121e:	2b00      	cmp	r3, #0
 8001220:	d109      	bne.n	8001236 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001222:	6878      	ldr	r0, [r7, #4]
 8001224:	f7ff fdae 	bl	8000d84 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	2200      	movs	r2, #0
 800122c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	2200      	movs	r2, #0
 8001232:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800123a:	f003 0310 	and.w	r3, r3, #16
 800123e:	2b00      	cmp	r3, #0
 8001240:	d116      	bne.n	8001270 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001246:	4b10      	ldr	r3, [pc, #64]	; (8001288 <HAL_ADC_Init+0x84>)
 8001248:	4013      	ands	r3, r2
 800124a:	f043 0202 	orr.w	r2, r3, #2
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001252:	6878      	ldr	r0, [r7, #4]
 8001254:	f000 f964 	bl	8001520 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	2200      	movs	r2, #0
 800125c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001262:	f023 0303 	bic.w	r3, r3, #3
 8001266:	f043 0201 	orr.w	r2, r3, #1
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	641a      	str	r2, [r3, #64]	; 0x40
 800126e:	e001      	b.n	8001274 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001270:	2301      	movs	r3, #1
 8001272:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	2200      	movs	r2, #0
 8001278:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800127c:	7bfb      	ldrb	r3, [r7, #15]
}
 800127e:	4618      	mov	r0, r3
 8001280:	3710      	adds	r7, #16
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	ffffeefd 	.word	0xffffeefd

0800128c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800128c:	b480      	push	{r7}
 800128e:	b085      	sub	sp, #20
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
 8001294:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8001296:	2300      	movs	r3, #0
 8001298:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80012a0:	2b01      	cmp	r3, #1
 80012a2:	d101      	bne.n	80012a8 <HAL_ADC_ConfigChannel+0x1c>
 80012a4:	2302      	movs	r3, #2
 80012a6:	e12a      	b.n	80014fe <HAL_ADC_ConfigChannel+0x272>
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	2201      	movs	r2, #1
 80012ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	2b09      	cmp	r3, #9
 80012b6:	d93a      	bls.n	800132e <HAL_ADC_ConfigChannel+0xa2>
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80012c0:	d035      	beq.n	800132e <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	68d9      	ldr	r1, [r3, #12]
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	b29b      	uxth	r3, r3
 80012ce:	461a      	mov	r2, r3
 80012d0:	4613      	mov	r3, r2
 80012d2:	005b      	lsls	r3, r3, #1
 80012d4:	4413      	add	r3, r2
 80012d6:	3b1e      	subs	r3, #30
 80012d8:	2207      	movs	r2, #7
 80012da:	fa02 f303 	lsl.w	r3, r2, r3
 80012de:	43da      	mvns	r2, r3
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	400a      	ands	r2, r1
 80012e6:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4a87      	ldr	r2, [pc, #540]	; (800150c <HAL_ADC_ConfigChannel+0x280>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d10a      	bne.n	8001308 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	68d9      	ldr	r1, [r3, #12]
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	689b      	ldr	r3, [r3, #8]
 80012fc:	061a      	lsls	r2, r3, #24
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	430a      	orrs	r2, r1
 8001304:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001306:	e035      	b.n	8001374 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	68d9      	ldr	r1, [r3, #12]
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	689a      	ldr	r2, [r3, #8]
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	b29b      	uxth	r3, r3
 8001318:	4618      	mov	r0, r3
 800131a:	4603      	mov	r3, r0
 800131c:	005b      	lsls	r3, r3, #1
 800131e:	4403      	add	r3, r0
 8001320:	3b1e      	subs	r3, #30
 8001322:	409a      	lsls	r2, r3
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	430a      	orrs	r2, r1
 800132a:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800132c:	e022      	b.n	8001374 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	6919      	ldr	r1, [r3, #16]
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	b29b      	uxth	r3, r3
 800133a:	461a      	mov	r2, r3
 800133c:	4613      	mov	r3, r2
 800133e:	005b      	lsls	r3, r3, #1
 8001340:	4413      	add	r3, r2
 8001342:	2207      	movs	r2, #7
 8001344:	fa02 f303 	lsl.w	r3, r2, r3
 8001348:	43da      	mvns	r2, r3
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	400a      	ands	r2, r1
 8001350:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	6919      	ldr	r1, [r3, #16]
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	689a      	ldr	r2, [r3, #8]
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	b29b      	uxth	r3, r3
 8001362:	4618      	mov	r0, r3
 8001364:	4603      	mov	r3, r0
 8001366:	005b      	lsls	r3, r3, #1
 8001368:	4403      	add	r3, r0
 800136a:	409a      	lsls	r2, r3
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	430a      	orrs	r2, r1
 8001372:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	2b06      	cmp	r3, #6
 800137a:	d824      	bhi.n	80013c6 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	685a      	ldr	r2, [r3, #4]
 8001386:	4613      	mov	r3, r2
 8001388:	009b      	lsls	r3, r3, #2
 800138a:	4413      	add	r3, r2
 800138c:	3b05      	subs	r3, #5
 800138e:	221f      	movs	r2, #31
 8001390:	fa02 f303 	lsl.w	r3, r2, r3
 8001394:	43da      	mvns	r2, r3
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	400a      	ands	r2, r1
 800139c:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	b29b      	uxth	r3, r3
 80013aa:	4618      	mov	r0, r3
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	685a      	ldr	r2, [r3, #4]
 80013b0:	4613      	mov	r3, r2
 80013b2:	009b      	lsls	r3, r3, #2
 80013b4:	4413      	add	r3, r2
 80013b6:	3b05      	subs	r3, #5
 80013b8:	fa00 f203 	lsl.w	r2, r0, r3
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	430a      	orrs	r2, r1
 80013c2:	635a      	str	r2, [r3, #52]	; 0x34
 80013c4:	e04c      	b.n	8001460 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	2b0c      	cmp	r3, #12
 80013cc:	d824      	bhi.n	8001418 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	685a      	ldr	r2, [r3, #4]
 80013d8:	4613      	mov	r3, r2
 80013da:	009b      	lsls	r3, r3, #2
 80013dc:	4413      	add	r3, r2
 80013de:	3b23      	subs	r3, #35	; 0x23
 80013e0:	221f      	movs	r2, #31
 80013e2:	fa02 f303 	lsl.w	r3, r2, r3
 80013e6:	43da      	mvns	r2, r3
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	400a      	ands	r2, r1
 80013ee:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	b29b      	uxth	r3, r3
 80013fc:	4618      	mov	r0, r3
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	685a      	ldr	r2, [r3, #4]
 8001402:	4613      	mov	r3, r2
 8001404:	009b      	lsls	r3, r3, #2
 8001406:	4413      	add	r3, r2
 8001408:	3b23      	subs	r3, #35	; 0x23
 800140a:	fa00 f203 	lsl.w	r2, r0, r3
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	430a      	orrs	r2, r1
 8001414:	631a      	str	r2, [r3, #48]	; 0x30
 8001416:	e023      	b.n	8001460 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	685a      	ldr	r2, [r3, #4]
 8001422:	4613      	mov	r3, r2
 8001424:	009b      	lsls	r3, r3, #2
 8001426:	4413      	add	r3, r2
 8001428:	3b41      	subs	r3, #65	; 0x41
 800142a:	221f      	movs	r2, #31
 800142c:	fa02 f303 	lsl.w	r3, r2, r3
 8001430:	43da      	mvns	r2, r3
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	400a      	ands	r2, r1
 8001438:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	b29b      	uxth	r3, r3
 8001446:	4618      	mov	r0, r3
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	685a      	ldr	r2, [r3, #4]
 800144c:	4613      	mov	r3, r2
 800144e:	009b      	lsls	r3, r3, #2
 8001450:	4413      	add	r3, r2
 8001452:	3b41      	subs	r3, #65	; 0x41
 8001454:	fa00 f203 	lsl.w	r2, r0, r3
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	430a      	orrs	r2, r1
 800145e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4a2a      	ldr	r2, [pc, #168]	; (8001510 <HAL_ADC_ConfigChannel+0x284>)
 8001466:	4293      	cmp	r3, r2
 8001468:	d10a      	bne.n	8001480 <HAL_ADC_ConfigChannel+0x1f4>
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001472:	d105      	bne.n	8001480 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8001474:	4b27      	ldr	r3, [pc, #156]	; (8001514 <HAL_ADC_ConfigChannel+0x288>)
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	4a26      	ldr	r2, [pc, #152]	; (8001514 <HAL_ADC_ConfigChannel+0x288>)
 800147a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800147e:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4a22      	ldr	r2, [pc, #136]	; (8001510 <HAL_ADC_ConfigChannel+0x284>)
 8001486:	4293      	cmp	r3, r2
 8001488:	d109      	bne.n	800149e <HAL_ADC_ConfigChannel+0x212>
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	2b12      	cmp	r3, #18
 8001490:	d105      	bne.n	800149e <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8001492:	4b20      	ldr	r3, [pc, #128]	; (8001514 <HAL_ADC_ConfigChannel+0x288>)
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	4a1f      	ldr	r2, [pc, #124]	; (8001514 <HAL_ADC_ConfigChannel+0x288>)
 8001498:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800149c:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	4a1b      	ldr	r2, [pc, #108]	; (8001510 <HAL_ADC_ConfigChannel+0x284>)
 80014a4:	4293      	cmp	r3, r2
 80014a6:	d125      	bne.n	80014f4 <HAL_ADC_ConfigChannel+0x268>
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a17      	ldr	r2, [pc, #92]	; (800150c <HAL_ADC_ConfigChannel+0x280>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d003      	beq.n	80014ba <HAL_ADC_ConfigChannel+0x22e>
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	2b11      	cmp	r3, #17
 80014b8:	d11c      	bne.n	80014f4 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80014ba:	4b16      	ldr	r3, [pc, #88]	; (8001514 <HAL_ADC_ConfigChannel+0x288>)
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	4a15      	ldr	r2, [pc, #84]	; (8001514 <HAL_ADC_ConfigChannel+0x288>)
 80014c0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80014c4:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	4a10      	ldr	r2, [pc, #64]	; (800150c <HAL_ADC_ConfigChannel+0x280>)
 80014cc:	4293      	cmp	r3, r2
 80014ce:	d111      	bne.n	80014f4 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80014d0:	4b11      	ldr	r3, [pc, #68]	; (8001518 <HAL_ADC_ConfigChannel+0x28c>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4a11      	ldr	r2, [pc, #68]	; (800151c <HAL_ADC_ConfigChannel+0x290>)
 80014d6:	fba2 2303 	umull	r2, r3, r2, r3
 80014da:	0c9a      	lsrs	r2, r3, #18
 80014dc:	4613      	mov	r3, r2
 80014de:	009b      	lsls	r3, r3, #2
 80014e0:	4413      	add	r3, r2
 80014e2:	005b      	lsls	r3, r3, #1
 80014e4:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80014e6:	e002      	b.n	80014ee <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	3b01      	subs	r3, #1
 80014ec:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d1f9      	bne.n	80014e8 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	2200      	movs	r2, #0
 80014f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80014fc:	2300      	movs	r3, #0
}
 80014fe:	4618      	mov	r0, r3
 8001500:	3714      	adds	r7, #20
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr
 800150a:	bf00      	nop
 800150c:	10000012 	.word	0x10000012
 8001510:	40012000 	.word	0x40012000
 8001514:	40012300 	.word	0x40012300
 8001518:	20000000 	.word	0x20000000
 800151c:	431bde83 	.word	0x431bde83

08001520 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001520:	b480      	push	{r7}
 8001522:	b083      	sub	sp, #12
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001528:	4b78      	ldr	r3, [pc, #480]	; (800170c <ADC_Init+0x1ec>)
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	4a77      	ldr	r2, [pc, #476]	; (800170c <ADC_Init+0x1ec>)
 800152e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001532:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8001534:	4b75      	ldr	r3, [pc, #468]	; (800170c <ADC_Init+0x1ec>)
 8001536:	685a      	ldr	r2, [r3, #4]
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	4973      	ldr	r1, [pc, #460]	; (800170c <ADC_Init+0x1ec>)
 800153e:	4313      	orrs	r3, r2
 8001540:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	685a      	ldr	r2, [r3, #4]
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001550:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	6859      	ldr	r1, [r3, #4]
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	691b      	ldr	r3, [r3, #16]
 800155c:	021a      	lsls	r2, r3, #8
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	430a      	orrs	r2, r1
 8001564:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	685a      	ldr	r2, [r3, #4]
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001574:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	6859      	ldr	r1, [r3, #4]
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	689a      	ldr	r2, [r3, #8]
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	430a      	orrs	r2, r1
 8001586:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	689a      	ldr	r2, [r3, #8]
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001596:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	6899      	ldr	r1, [r3, #8]
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	68da      	ldr	r2, [r3, #12]
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	430a      	orrs	r2, r1
 80015a8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015ae:	4a58      	ldr	r2, [pc, #352]	; (8001710 <ADC_Init+0x1f0>)
 80015b0:	4293      	cmp	r3, r2
 80015b2:	d022      	beq.n	80015fa <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	689a      	ldr	r2, [r3, #8]
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80015c2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	6899      	ldr	r1, [r3, #8]
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	430a      	orrs	r2, r1
 80015d4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	689a      	ldr	r2, [r3, #8]
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80015e4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	6899      	ldr	r1, [r3, #8]
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	430a      	orrs	r2, r1
 80015f6:	609a      	str	r2, [r3, #8]
 80015f8:	e00f      	b.n	800161a <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	689a      	ldr	r2, [r3, #8]
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001608:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	689a      	ldr	r2, [r3, #8]
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001618:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	689a      	ldr	r2, [r3, #8]
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f022 0202 	bic.w	r2, r2, #2
 8001628:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	6899      	ldr	r1, [r3, #8]
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	699b      	ldr	r3, [r3, #24]
 8001634:	005a      	lsls	r2, r3, #1
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	430a      	orrs	r2, r1
 800163c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d01b      	beq.n	8001680 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	685a      	ldr	r2, [r3, #4]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001656:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	685a      	ldr	r2, [r3, #4]
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001666:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	6859      	ldr	r1, [r3, #4]
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001672:	3b01      	subs	r3, #1
 8001674:	035a      	lsls	r2, r3, #13
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	430a      	orrs	r2, r1
 800167c:	605a      	str	r2, [r3, #4]
 800167e:	e007      	b.n	8001690 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	685a      	ldr	r2, [r3, #4]
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800168e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800169e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	69db      	ldr	r3, [r3, #28]
 80016aa:	3b01      	subs	r3, #1
 80016ac:	051a      	lsls	r2, r3, #20
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	430a      	orrs	r2, r1
 80016b4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	689a      	ldr	r2, [r3, #8]
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80016c4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	6899      	ldr	r1, [r3, #8]
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80016d2:	025a      	lsls	r2, r3, #9
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	430a      	orrs	r2, r1
 80016da:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	689a      	ldr	r2, [r3, #8]
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80016ea:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	6899      	ldr	r1, [r3, #8]
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	695b      	ldr	r3, [r3, #20]
 80016f6:	029a      	lsls	r2, r3, #10
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	430a      	orrs	r2, r1
 80016fe:	609a      	str	r2, [r3, #8]
}
 8001700:	bf00      	nop
 8001702:	370c      	adds	r7, #12
 8001704:	46bd      	mov	sp, r7
 8001706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170a:	4770      	bx	lr
 800170c:	40012300 	.word	0x40012300
 8001710:	0f000001 	.word	0x0f000001

08001714 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001714:	b480      	push	{r7}
 8001716:	b085      	sub	sp, #20
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	f003 0307 	and.w	r3, r3, #7
 8001722:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001724:	4b0b      	ldr	r3, [pc, #44]	; (8001754 <__NVIC_SetPriorityGrouping+0x40>)
 8001726:	68db      	ldr	r3, [r3, #12]
 8001728:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800172a:	68ba      	ldr	r2, [r7, #8]
 800172c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001730:	4013      	ands	r3, r2
 8001732:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001738:	68bb      	ldr	r3, [r7, #8]
 800173a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800173c:	4b06      	ldr	r3, [pc, #24]	; (8001758 <__NVIC_SetPriorityGrouping+0x44>)
 800173e:	4313      	orrs	r3, r2
 8001740:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001742:	4a04      	ldr	r2, [pc, #16]	; (8001754 <__NVIC_SetPriorityGrouping+0x40>)
 8001744:	68bb      	ldr	r3, [r7, #8]
 8001746:	60d3      	str	r3, [r2, #12]
}
 8001748:	bf00      	nop
 800174a:	3714      	adds	r7, #20
 800174c:	46bd      	mov	sp, r7
 800174e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001752:	4770      	bx	lr
 8001754:	e000ed00 	.word	0xe000ed00
 8001758:	05fa0000 	.word	0x05fa0000

0800175c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001760:	4b04      	ldr	r3, [pc, #16]	; (8001774 <__NVIC_GetPriorityGrouping+0x18>)
 8001762:	68db      	ldr	r3, [r3, #12]
 8001764:	0a1b      	lsrs	r3, r3, #8
 8001766:	f003 0307 	and.w	r3, r3, #7
}
 800176a:	4618      	mov	r0, r3
 800176c:	46bd      	mov	sp, r7
 800176e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001772:	4770      	bx	lr
 8001774:	e000ed00 	.word	0xe000ed00

08001778 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001778:	b480      	push	{r7}
 800177a:	b083      	sub	sp, #12
 800177c:	af00      	add	r7, sp, #0
 800177e:	4603      	mov	r3, r0
 8001780:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001782:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001786:	2b00      	cmp	r3, #0
 8001788:	db0b      	blt.n	80017a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800178a:	79fb      	ldrb	r3, [r7, #7]
 800178c:	f003 021f 	and.w	r2, r3, #31
 8001790:	4907      	ldr	r1, [pc, #28]	; (80017b0 <__NVIC_EnableIRQ+0x38>)
 8001792:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001796:	095b      	lsrs	r3, r3, #5
 8001798:	2001      	movs	r0, #1
 800179a:	fa00 f202 	lsl.w	r2, r0, r2
 800179e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80017a2:	bf00      	nop
 80017a4:	370c      	adds	r7, #12
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr
 80017ae:	bf00      	nop
 80017b0:	e000e100 	.word	0xe000e100

080017b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b083      	sub	sp, #12
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	4603      	mov	r3, r0
 80017bc:	6039      	str	r1, [r7, #0]
 80017be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	db0a      	blt.n	80017de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	b2da      	uxtb	r2, r3
 80017cc:	490c      	ldr	r1, [pc, #48]	; (8001800 <__NVIC_SetPriority+0x4c>)
 80017ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017d2:	0112      	lsls	r2, r2, #4
 80017d4:	b2d2      	uxtb	r2, r2
 80017d6:	440b      	add	r3, r1
 80017d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017dc:	e00a      	b.n	80017f4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	b2da      	uxtb	r2, r3
 80017e2:	4908      	ldr	r1, [pc, #32]	; (8001804 <__NVIC_SetPriority+0x50>)
 80017e4:	79fb      	ldrb	r3, [r7, #7]
 80017e6:	f003 030f 	and.w	r3, r3, #15
 80017ea:	3b04      	subs	r3, #4
 80017ec:	0112      	lsls	r2, r2, #4
 80017ee:	b2d2      	uxtb	r2, r2
 80017f0:	440b      	add	r3, r1
 80017f2:	761a      	strb	r2, [r3, #24]
}
 80017f4:	bf00      	nop
 80017f6:	370c      	adds	r7, #12
 80017f8:	46bd      	mov	sp, r7
 80017fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fe:	4770      	bx	lr
 8001800:	e000e100 	.word	0xe000e100
 8001804:	e000ed00 	.word	0xe000ed00

08001808 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001808:	b480      	push	{r7}
 800180a:	b089      	sub	sp, #36	; 0x24
 800180c:	af00      	add	r7, sp, #0
 800180e:	60f8      	str	r0, [r7, #12]
 8001810:	60b9      	str	r1, [r7, #8]
 8001812:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	f003 0307 	and.w	r3, r3, #7
 800181a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800181c:	69fb      	ldr	r3, [r7, #28]
 800181e:	f1c3 0307 	rsb	r3, r3, #7
 8001822:	2b04      	cmp	r3, #4
 8001824:	bf28      	it	cs
 8001826:	2304      	movcs	r3, #4
 8001828:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800182a:	69fb      	ldr	r3, [r7, #28]
 800182c:	3304      	adds	r3, #4
 800182e:	2b06      	cmp	r3, #6
 8001830:	d902      	bls.n	8001838 <NVIC_EncodePriority+0x30>
 8001832:	69fb      	ldr	r3, [r7, #28]
 8001834:	3b03      	subs	r3, #3
 8001836:	e000      	b.n	800183a <NVIC_EncodePriority+0x32>
 8001838:	2300      	movs	r3, #0
 800183a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800183c:	f04f 32ff 	mov.w	r2, #4294967295
 8001840:	69bb      	ldr	r3, [r7, #24]
 8001842:	fa02 f303 	lsl.w	r3, r2, r3
 8001846:	43da      	mvns	r2, r3
 8001848:	68bb      	ldr	r3, [r7, #8]
 800184a:	401a      	ands	r2, r3
 800184c:	697b      	ldr	r3, [r7, #20]
 800184e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001850:	f04f 31ff 	mov.w	r1, #4294967295
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	fa01 f303 	lsl.w	r3, r1, r3
 800185a:	43d9      	mvns	r1, r3
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001860:	4313      	orrs	r3, r2
         );
}
 8001862:	4618      	mov	r0, r3
 8001864:	3724      	adds	r7, #36	; 0x24
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr

0800186e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800186e:	b580      	push	{r7, lr}
 8001870:	b082      	sub	sp, #8
 8001872:	af00      	add	r7, sp, #0
 8001874:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001876:	6878      	ldr	r0, [r7, #4]
 8001878:	f7ff ff4c 	bl	8001714 <__NVIC_SetPriorityGrouping>
}
 800187c:	bf00      	nop
 800187e:	3708      	adds	r7, #8
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}

08001884 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001884:	b580      	push	{r7, lr}
 8001886:	b086      	sub	sp, #24
 8001888:	af00      	add	r7, sp, #0
 800188a:	4603      	mov	r3, r0
 800188c:	60b9      	str	r1, [r7, #8]
 800188e:	607a      	str	r2, [r7, #4]
 8001890:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001892:	2300      	movs	r3, #0
 8001894:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001896:	f7ff ff61 	bl	800175c <__NVIC_GetPriorityGrouping>
 800189a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800189c:	687a      	ldr	r2, [r7, #4]
 800189e:	68b9      	ldr	r1, [r7, #8]
 80018a0:	6978      	ldr	r0, [r7, #20]
 80018a2:	f7ff ffb1 	bl	8001808 <NVIC_EncodePriority>
 80018a6:	4602      	mov	r2, r0
 80018a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018ac:	4611      	mov	r1, r2
 80018ae:	4618      	mov	r0, r3
 80018b0:	f7ff ff80 	bl	80017b4 <__NVIC_SetPriority>
}
 80018b4:	bf00      	nop
 80018b6:	3718      	adds	r7, #24
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}

080018bc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	4603      	mov	r3, r0
 80018c4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ca:	4618      	mov	r0, r3
 80018cc:	f7ff ff54 	bl	8001778 <__NVIC_EnableIRQ>
}
 80018d0:	bf00      	nop
 80018d2:	3708      	adds	r7, #8
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}

080018d8 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b088      	sub	sp, #32
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 80018e0:	2300      	movs	r3, #0
 80018e2:	61fb      	str	r3, [r7, #28]
 80018e4:	2300      	movs	r3, #0
 80018e6:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 80018e8:	4ba9      	ldr	r3, [pc, #676]	; (8001b90 <HAL_ETH_Init+0x2b8>)
 80018ea:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 80018ec:	2300      	movs	r3, #0
 80018ee:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 80018f0:	2300      	movs	r3, #0
 80018f2:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d101      	bne.n	80018fe <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 80018fa:	2301      	movs	r3, #1
 80018fc:	e183      	b.n	8001c06 <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001904:	b2db      	uxtb	r3, r3
 8001906:	2b00      	cmp	r3, #0
 8001908:	d106      	bne.n	8001918 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	2200      	movs	r2, #0
 800190e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001912:	6878      	ldr	r0, [r7, #4]
 8001914:	f003 fd7c 	bl	8005410 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001918:	4b9e      	ldr	r3, [pc, #632]	; (8001b94 <HAL_ETH_Init+0x2bc>)
 800191a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800191c:	4a9d      	ldr	r2, [pc, #628]	; (8001b94 <HAL_ETH_Init+0x2bc>)
 800191e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001922:	6453      	str	r3, [r2, #68]	; 0x44
 8001924:	4b9b      	ldr	r3, [pc, #620]	; (8001b94 <HAL_ETH_Init+0x2bc>)
 8001926:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001928:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800192c:	60bb      	str	r3, [r7, #8]
 800192e:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001930:	4b99      	ldr	r3, [pc, #612]	; (8001b98 <HAL_ETH_Init+0x2c0>)
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	4a98      	ldr	r2, [pc, #608]	; (8001b98 <HAL_ETH_Init+0x2c0>)
 8001936:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800193a:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800193c:	4b96      	ldr	r3, [pc, #600]	; (8001b98 <HAL_ETH_Init+0x2c0>)
 800193e:	685a      	ldr	r2, [r3, #4]
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6a1b      	ldr	r3, [r3, #32]
 8001944:	4994      	ldr	r1, [pc, #592]	; (8001b98 <HAL_ETH_Init+0x2c0>)
 8001946:	4313      	orrs	r3, r2
 8001948:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001952:	681a      	ldr	r2, [r3, #0]
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f042 0201 	orr.w	r2, r2, #1
 800195c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001960:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001962:	f7ff fc21 	bl	80011a8 <HAL_GetTick>
 8001966:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001968:	e011      	b.n	800198e <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 800196a:	f7ff fc1d 	bl	80011a8 <HAL_GetTick>
 800196e:	4602      	mov	r2, r0
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	1ad3      	subs	r3, r2, r3
 8001974:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001978:	d909      	bls.n	800198e <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2203      	movs	r2, #3
 800197e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	2200      	movs	r2, #0
 8001986:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 800198a:	2303      	movs	r3, #3
 800198c:	e13b      	b.n	8001c06 <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f003 0301 	and.w	r3, r3, #1
 800199c:	2b00      	cmp	r3, #0
 800199e:	d1e4      	bne.n	800196a <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	691b      	ldr	r3, [r3, #16]
 80019a6:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 80019a8:	69fb      	ldr	r3, [r7, #28]
 80019aa:	f023 031c 	bic.w	r3, r3, #28
 80019ae:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80019b0:	f001 ffb8 	bl	8003924 <HAL_RCC_GetHCLKFreq>
 80019b4:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 80019b6:	69bb      	ldr	r3, [r7, #24]
 80019b8:	4a78      	ldr	r2, [pc, #480]	; (8001b9c <HAL_ETH_Init+0x2c4>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d908      	bls.n	80019d0 <HAL_ETH_Init+0xf8>
 80019be:	69bb      	ldr	r3, [r7, #24]
 80019c0:	4a77      	ldr	r2, [pc, #476]	; (8001ba0 <HAL_ETH_Init+0x2c8>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d804      	bhi.n	80019d0 <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 80019c6:	69fb      	ldr	r3, [r7, #28]
 80019c8:	f043 0308 	orr.w	r3, r3, #8
 80019cc:	61fb      	str	r3, [r7, #28]
 80019ce:	e027      	b.n	8001a20 <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 80019d0:	69bb      	ldr	r3, [r7, #24]
 80019d2:	4a73      	ldr	r2, [pc, #460]	; (8001ba0 <HAL_ETH_Init+0x2c8>)
 80019d4:	4293      	cmp	r3, r2
 80019d6:	d908      	bls.n	80019ea <HAL_ETH_Init+0x112>
 80019d8:	69bb      	ldr	r3, [r7, #24]
 80019da:	4a72      	ldr	r2, [pc, #456]	; (8001ba4 <HAL_ETH_Init+0x2cc>)
 80019dc:	4293      	cmp	r3, r2
 80019de:	d804      	bhi.n	80019ea <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80019e0:	69fb      	ldr	r3, [r7, #28]
 80019e2:	f043 030c 	orr.w	r3, r3, #12
 80019e6:	61fb      	str	r3, [r7, #28]
 80019e8:	e01a      	b.n	8001a20 <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 80019ea:	69bb      	ldr	r3, [r7, #24]
 80019ec:	4a6d      	ldr	r2, [pc, #436]	; (8001ba4 <HAL_ETH_Init+0x2cc>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d903      	bls.n	80019fa <HAL_ETH_Init+0x122>
 80019f2:	69bb      	ldr	r3, [r7, #24]
 80019f4:	4a6c      	ldr	r2, [pc, #432]	; (8001ba8 <HAL_ETH_Init+0x2d0>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d911      	bls.n	8001a1e <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 80019fa:	69bb      	ldr	r3, [r7, #24]
 80019fc:	4a6a      	ldr	r2, [pc, #424]	; (8001ba8 <HAL_ETH_Init+0x2d0>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d908      	bls.n	8001a14 <HAL_ETH_Init+0x13c>
 8001a02:	69bb      	ldr	r3, [r7, #24]
 8001a04:	4a69      	ldr	r2, [pc, #420]	; (8001bac <HAL_ETH_Init+0x2d4>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d804      	bhi.n	8001a14 <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8001a0a:	69fb      	ldr	r3, [r7, #28]
 8001a0c:	f043 0304 	orr.w	r3, r3, #4
 8001a10:	61fb      	str	r3, [r7, #28]
 8001a12:	e005      	b.n	8001a20 <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8001a14:	69fb      	ldr	r3, [r7, #28]
 8001a16:	f043 0310 	orr.w	r3, r3, #16
 8001a1a:	61fb      	str	r3, [r7, #28]
 8001a1c:	e000      	b.n	8001a20 <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8001a1e:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	69fa      	ldr	r2, [r7, #28]
 8001a26:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8001a28:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001a2c:	2100      	movs	r1, #0
 8001a2e:	6878      	ldr	r0, [r7, #4]
 8001a30:	f000 fc19 	bl	8002266 <HAL_ETH_WritePHYRegister>
 8001a34:	4603      	mov	r3, r0
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d00b      	beq.n	8001a52 <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8001a3e:	6939      	ldr	r1, [r7, #16]
 8001a40:	6878      	ldr	r0, [r7, #4]
 8001a42:	f000 fdcf 	bl	80025e4 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2201      	movs	r2, #1
 8001a4a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	e0d9      	b.n	8001c06 <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8001a52:	20ff      	movs	r0, #255	; 0xff
 8001a54:	f7ff fbb4 	bl	80011c0 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	f000 80a7 	beq.w	8001bb0 <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8001a62:	f7ff fba1 	bl	80011a8 <HAL_GetTick>
 8001a66:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001a68:	f107 030c 	add.w	r3, r7, #12
 8001a6c:	461a      	mov	r2, r3
 8001a6e:	2101      	movs	r1, #1
 8001a70:	6878      	ldr	r0, [r7, #4]
 8001a72:	f000 fb90 	bl	8002196 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8001a76:	f7ff fb97 	bl	80011a8 <HAL_GetTick>
 8001a7a:	4602      	mov	r2, r0
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	1ad3      	subs	r3, r2, r3
 8001a80:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a84:	4293      	cmp	r3, r2
 8001a86:	d90f      	bls.n	8001aa8 <HAL_ETH_Init+0x1d0>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001a8c:	6939      	ldr	r1, [r7, #16]
 8001a8e:	6878      	ldr	r0, [r7, #4]
 8001a90:	f000 fda8 	bl	80025e4 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2201      	movs	r2, #1
 8001a98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8001aa4:	2303      	movs	r3, #3
 8001aa6:	e0ae      	b.n	8001c06 <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	f003 0304 	and.w	r3, r3, #4
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d0da      	beq.n	8001a68 <HAL_ETH_Init+0x190>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8001ab2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001ab6:	2100      	movs	r1, #0
 8001ab8:	6878      	ldr	r0, [r7, #4]
 8001aba:	f000 fbd4 	bl	8002266 <HAL_ETH_WritePHYRegister>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d00b      	beq.n	8001adc <HAL_ETH_Init+0x204>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001ac8:	6939      	ldr	r1, [r7, #16]
 8001aca:	6878      	ldr	r0, [r7, #4]
 8001acc:	f000 fd8a 	bl	80025e4 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001ad8:	2301      	movs	r3, #1
 8001ada:	e094      	b.n	8001c06 <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8001adc:	f7ff fb64 	bl	80011a8 <HAL_GetTick>
 8001ae0:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001ae2:	f107 030c 	add.w	r3, r7, #12
 8001ae6:	461a      	mov	r2, r3
 8001ae8:	2101      	movs	r1, #1
 8001aea:	6878      	ldr	r0, [r7, #4]
 8001aec:	f000 fb53 	bl	8002196 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8001af0:	f7ff fb5a 	bl	80011a8 <HAL_GetTick>
 8001af4:	4602      	mov	r2, r0
 8001af6:	697b      	ldr	r3, [r7, #20]
 8001af8:	1ad3      	subs	r3, r2, r3
 8001afa:	f241 3288 	movw	r2, #5000	; 0x1388
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d90f      	bls.n	8001b22 <HAL_ETH_Init+0x24a>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001b02:	2301      	movs	r3, #1
 8001b04:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001b06:	6939      	ldr	r1, [r7, #16]
 8001b08:	6878      	ldr	r0, [r7, #4]
 8001b0a:	f000 fd6b 	bl	80025e4 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2201      	movs	r2, #1
 8001b12:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2200      	movs	r2, #0
 8001b1a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8001b1e:	2303      	movs	r3, #3
 8001b20:	e071      	b.n	8001c06 <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	f003 0320 	and.w	r3, r3, #32
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d0da      	beq.n	8001ae2 <HAL_ETH_Init+0x20a>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8001b2c:	f107 030c 	add.w	r3, r7, #12
 8001b30:	461a      	mov	r2, r3
 8001b32:	211f      	movs	r1, #31
 8001b34:	6878      	ldr	r0, [r7, #4]
 8001b36:	f000 fb2e 	bl	8002196 <HAL_ETH_ReadPHYRegister>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d00b      	beq.n	8001b58 <HAL_ETH_Init+0x280>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001b40:	2301      	movs	r3, #1
 8001b42:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001b44:	6939      	ldr	r1, [r7, #16]
 8001b46:	6878      	ldr	r0, [r7, #4]
 8001b48:	f000 fd4c 	bl	80025e4 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2201      	movs	r2, #1
 8001b50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001b54:	2301      	movs	r3, #1
 8001b56:	e056      	b.n	8001c06 <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	f003 0310 	and.w	r3, r3, #16
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d004      	beq.n	8001b6c <HAL_ETH_Init+0x294>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001b68:	60da      	str	r2, [r3, #12]
 8001b6a:	e002      	b.n	8001b72 <HAL_ETH_Init+0x29a>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2200      	movs	r2, #0
 8001b70:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	f003 0304 	and.w	r3, r3, #4
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d003      	beq.n	8001b84 <HAL_ETH_Init+0x2ac>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2200      	movs	r2, #0
 8001b80:	609a      	str	r2, [r3, #8]
 8001b82:	e037      	b.n	8001bf4 <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b8a:	609a      	str	r2, [r3, #8]
 8001b8c:	e032      	b.n	8001bf4 <HAL_ETH_Init+0x31c>
 8001b8e:	bf00      	nop
 8001b90:	03938700 	.word	0x03938700
 8001b94:	40023800 	.word	0x40023800
 8001b98:	40013800 	.word	0x40013800
 8001b9c:	01312cff 	.word	0x01312cff
 8001ba0:	02160ebf 	.word	0x02160ebf
 8001ba4:	039386ff 	.word	0x039386ff
 8001ba8:	05f5e0ff 	.word	0x05f5e0ff
 8001bac:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	68db      	ldr	r3, [r3, #12]
 8001bb4:	08db      	lsrs	r3, r3, #3
 8001bb6:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	689b      	ldr	r3, [r3, #8]
 8001bbc:	085b      	lsrs	r3, r3, #1
 8001bbe:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8001bc0:	4313      	orrs	r3, r2
 8001bc2:	b29b      	uxth	r3, r3
 8001bc4:	461a      	mov	r2, r3
 8001bc6:	2100      	movs	r1, #0
 8001bc8:	6878      	ldr	r0, [r7, #4]
 8001bca:	f000 fb4c 	bl	8002266 <HAL_ETH_WritePHYRegister>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d00b      	beq.n	8001bec <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001bd8:	6939      	ldr	r1, [r7, #16]
 8001bda:	6878      	ldr	r0, [r7, #4]
 8001bdc:	f000 fd02 	bl	80025e4 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2201      	movs	r2, #1
 8001be4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8001be8:	2301      	movs	r3, #1
 8001bea:	e00c      	b.n	8001c06 <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8001bec:	f640 70ff 	movw	r0, #4095	; 0xfff
 8001bf0:	f7ff fae6 	bl	80011c0 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8001bf4:	6939      	ldr	r1, [r7, #16]
 8001bf6:	6878      	ldr	r0, [r7, #4]
 8001bf8:	f000 fcf4 	bl	80025e4 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2201      	movs	r2, #1
 8001c00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001c04:	2300      	movs	r3, #0
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	3720      	adds	r7, #32
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop

08001c10 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b087      	sub	sp, #28
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	60f8      	str	r0, [r7, #12]
 8001c18:	60b9      	str	r1, [r7, #8]
 8001c1a:	607a      	str	r2, [r7, #4]
 8001c1c:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001c28:	2b01      	cmp	r3, #1
 8001c2a:	d101      	bne.n	8001c30 <HAL_ETH_DMATxDescListInit+0x20>
 8001c2c:	2302      	movs	r3, #2
 8001c2e:	e052      	b.n	8001cd6 <HAL_ETH_DMATxDescListInit+0xc6>
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	2201      	movs	r2, #1
 8001c34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	2202      	movs	r2, #2
 8001c3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	68ba      	ldr	r2, [r7, #8]
 8001c44:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0; i < TxBuffCount; i++)
 8001c46:	2300      	movs	r3, #0
 8001c48:	617b      	str	r3, [r7, #20]
 8001c4a:	e030      	b.n	8001cae <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the member (i) of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	015b      	lsls	r3, r3, #5
 8001c50:	68ba      	ldr	r2, [r7, #8]
 8001c52:	4413      	add	r3, r2
 8001c54:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8001c56:	693b      	ldr	r3, [r7, #16]
 8001c58:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001c5c:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8001c5e:	697b      	ldr	r3, [r7, #20]
 8001c60:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001c64:	fb02 f303 	mul.w	r3, r2, r3
 8001c68:	687a      	ldr	r2, [r7, #4]
 8001c6a:	4413      	add	r3, r2
 8001c6c:	461a      	mov	r2, r3
 8001c6e:	693b      	ldr	r3, [r7, #16]
 8001c70:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	69db      	ldr	r3, [r3, #28]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d105      	bne.n	8001c86 <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 8001c7a:	693b      	ldr	r3, [r7, #16]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8001c82:	693b      	ldr	r3, [r7, #16]
 8001c84:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1))
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	3b01      	subs	r3, #1
 8001c8a:	697a      	ldr	r2, [r7, #20]
 8001c8c:	429a      	cmp	r2, r3
 8001c8e:	d208      	bcs.n	8001ca2 <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1);
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	3301      	adds	r3, #1
 8001c94:	015b      	lsls	r3, r3, #5
 8001c96:	68ba      	ldr	r2, [r7, #8]
 8001c98:	4413      	add	r3, r2
 8001c9a:	461a      	mov	r2, r3
 8001c9c:	693b      	ldr	r3, [r7, #16]
 8001c9e:	60da      	str	r2, [r3, #12]
 8001ca0:	e002      	b.n	8001ca8 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 8001ca2:	68ba      	ldr	r2, [r7, #8]
 8001ca4:	693b      	ldr	r3, [r7, #16]
 8001ca6:	60da      	str	r2, [r3, #12]
  for(i=0; i < TxBuffCount; i++)
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	3301      	adds	r3, #1
 8001cac:	617b      	str	r3, [r7, #20]
 8001cae:	697a      	ldr	r2, [r7, #20]
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	429a      	cmp	r2, r3
 8001cb4:	d3ca      	bcc.n	8001c4c <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	6819      	ldr	r1, [r3, #0]
 8001cba:	68ba      	ldr	r2, [r7, #8]
 8001cbc:	f241 0310 	movw	r3, #4112	; 0x1010
 8001cc0:	440b      	add	r3, r1
 8001cc2:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	2201      	movs	r2, #1
 8001cc8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	2200      	movs	r2, #0
 8001cd0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001cd4:	2300      	movs	r3, #0
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	371c      	adds	r7, #28
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce0:	4770      	bx	lr

08001ce2 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 8001ce2:	b480      	push	{r7}
 8001ce4:	b087      	sub	sp, #28
 8001ce6:	af00      	add	r7, sp, #0
 8001ce8:	60f8      	str	r0, [r7, #12]
 8001cea:	60b9      	str	r1, [r7, #8]
 8001cec:	607a      	str	r2, [r7, #4]
 8001cee:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001cfa:	2b01      	cmp	r3, #1
 8001cfc:	d101      	bne.n	8001d02 <HAL_ETH_DMARxDescListInit+0x20>
 8001cfe:	2302      	movs	r3, #2
 8001d00:	e056      	b.n	8001db0 <HAL_ETH_DMARxDescListInit+0xce>
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	2201      	movs	r2, #1
 8001d06:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	2202      	movs	r2, #2
 8001d0e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	68ba      	ldr	r2, [r7, #8]
 8001d16:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0; i < RxBuffCount; i++)
 8001d18:	2300      	movs	r3, #0
 8001d1a:	617b      	str	r3, [r7, #20]
 8001d1c:	e034      	b.n	8001d88 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the member (i) of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 8001d1e:	697b      	ldr	r3, [r7, #20]
 8001d20:	015b      	lsls	r3, r3, #5
 8001d22:	68ba      	ldr	r2, [r7, #8]
 8001d24:	4413      	add	r3, r2
 8001d26:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8001d28:	693b      	ldr	r3, [r7, #16]
 8001d2a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001d2e:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8001d30:	693b      	ldr	r3, [r7, #16]
 8001d32:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8001d36:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001d3e:	fb02 f303 	mul.w	r3, r2, r3
 8001d42:	687a      	ldr	r2, [r7, #4]
 8001d44:	4413      	add	r3, r2
 8001d46:	461a      	mov	r2, r3
 8001d48:	693b      	ldr	r3, [r7, #16]
 8001d4a:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	699b      	ldr	r3, [r3, #24]
 8001d50:	2b01      	cmp	r3, #1
 8001d52:	d105      	bne.n	8001d60 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8001d54:	693b      	ldr	r3, [r7, #16]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001d5c:	693b      	ldr	r3, [r7, #16]
 8001d5e:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1))
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	3b01      	subs	r3, #1
 8001d64:	697a      	ldr	r2, [r7, #20]
 8001d66:	429a      	cmp	r2, r3
 8001d68:	d208      	bcs.n	8001d7c <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1); 
 8001d6a:	697b      	ldr	r3, [r7, #20]
 8001d6c:	3301      	adds	r3, #1
 8001d6e:	015b      	lsls	r3, r3, #5
 8001d70:	68ba      	ldr	r2, [r7, #8]
 8001d72:	4413      	add	r3, r2
 8001d74:	461a      	mov	r2, r3
 8001d76:	693b      	ldr	r3, [r7, #16]
 8001d78:	60da      	str	r2, [r3, #12]
 8001d7a:	e002      	b.n	8001d82 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 8001d7c:	68ba      	ldr	r2, [r7, #8]
 8001d7e:	693b      	ldr	r3, [r7, #16]
 8001d80:	60da      	str	r2, [r3, #12]
  for(i=0; i < RxBuffCount; i++)
 8001d82:	697b      	ldr	r3, [r7, #20]
 8001d84:	3301      	adds	r3, #1
 8001d86:	617b      	str	r3, [r7, #20]
 8001d88:	697a      	ldr	r2, [r7, #20]
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	429a      	cmp	r2, r3
 8001d8e:	d3c6      	bcc.n	8001d1e <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	6819      	ldr	r1, [r3, #0]
 8001d94:	68ba      	ldr	r2, [r7, #8]
 8001d96:	f241 030c 	movw	r3, #4108	; 0x100c
 8001d9a:	440b      	add	r3, r1
 8001d9c:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	2201      	movs	r2, #1
 8001da2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	2200      	movs	r2, #0
 8001daa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001dae:	2300      	movs	r3, #0
}
 8001db0:	4618      	mov	r0, r3
 8001db2:	371c      	adds	r7, #28
 8001db4:	46bd      	mov	sp, r7
 8001db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dba:	4770      	bx	lr

08001dbc <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b087      	sub	sp, #28
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
 8001dc4:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0, size = 0, i = 0;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	617b      	str	r3, [r7, #20]
 8001dca:	2300      	movs	r3, #0
 8001dcc:	60fb      	str	r3, [r7, #12]
 8001dce:	2300      	movs	r3, #0
 8001dd0:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001dd8:	2b01      	cmp	r3, #1
 8001dda:	d101      	bne.n	8001de0 <HAL_ETH_TransmitFrame+0x24>
 8001ddc:	2302      	movs	r3, #2
 8001dde:	e0cd      	b.n	8001f7c <HAL_ETH_TransmitFrame+0x1c0>
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2201      	movs	r2, #1
 8001de4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2202      	movs	r2, #2
 8001dec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0) 
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d109      	bne.n	8001e0a <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2201      	movs	r2, #1
 8001dfa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2200      	movs	r2, #0
 8001e02:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 8001e06:	2301      	movs	r3, #1
 8001e08:	e0b8      	b.n	8001f7c <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	da09      	bge.n	8001e28 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2212      	movs	r2, #18
 8001e18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2200      	movs	r2, #0
 8001e20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 8001e24:	2301      	movs	r3, #1
 8001e26:	e0a9      	b.n	8001f7c <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d915      	bls.n	8001e5e <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	4a54      	ldr	r2, [pc, #336]	; (8001f88 <HAL_ETH_TransmitFrame+0x1cc>)
 8001e36:	fba2 2303 	umull	r2, r3, r2, r3
 8001e3a:	0a9b      	lsrs	r3, r3, #10
 8001e3c:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8001e3e:	683a      	ldr	r2, [r7, #0]
 8001e40:	4b51      	ldr	r3, [pc, #324]	; (8001f88 <HAL_ETH_TransmitFrame+0x1cc>)
 8001e42:	fba3 1302 	umull	r1, r3, r3, r2
 8001e46:	0a9b      	lsrs	r3, r3, #10
 8001e48:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8001e4c:	fb01 f303 	mul.w	r3, r1, r3
 8001e50:	1ad3      	subs	r3, r2, r3
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d005      	beq.n	8001e62 <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 8001e56:	697b      	ldr	r3, [r7, #20]
 8001e58:	3301      	adds	r3, #1
 8001e5a:	617b      	str	r3, [r7, #20]
 8001e5c:	e001      	b.n	8001e62 <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1)
 8001e62:	697b      	ldr	r3, [r7, #20]
 8001e64:	2b01      	cmp	r3, #1
 8001e66:	d11c      	bne.n	8001ea2 <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e6c:	681a      	ldr	r2, [r3, #0]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e72:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 8001e76:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e7c:	683a      	ldr	r2, [r7, #0]
 8001e7e:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8001e82:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e88:	681a      	ldr	r2, [r3, #0]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e8e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001e92:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e98:	68db      	ldr	r3, [r3, #12]
 8001e9a:	461a      	mov	r2, r3
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	62da      	str	r2, [r3, #44]	; 0x2c
 8001ea0:	e04b      	b.n	8001f3a <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0; i< bufcount; i++)
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	613b      	str	r3, [r7, #16]
 8001ea6:	e044      	b.n	8001f32 <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eac:	681a      	ldr	r2, [r3, #0]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eb2:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001eb6:	601a      	str	r2, [r3, #0]
      
      if (i == 0) 
 8001eb8:	693b      	ldr	r3, [r7, #16]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d107      	bne.n	8001ece <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ec2:	681a      	ldr	r2, [r3, #0]
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ec8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001ecc:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ed2:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001ed6:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1))
 8001ed8:	697b      	ldr	r3, [r7, #20]
 8001eda:	3b01      	subs	r3, #1
 8001edc:	693a      	ldr	r2, [r7, #16]
 8001ede:	429a      	cmp	r2, r3
 8001ee0:	d116      	bne.n	8001f10 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ee6:	681a      	ldr	r2, [r3, #0]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eec:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8001ef0:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
 8001ef2:	697b      	ldr	r3, [r7, #20]
 8001ef4:	4a25      	ldr	r2, [pc, #148]	; (8001f8c <HAL_ETH_TransmitFrame+0x1d0>)
 8001ef6:	fb02 f203 	mul.w	r2, r2, r3
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	4413      	add	r3, r2
 8001efe:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8001f02:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f08:	68fa      	ldr	r2, [r7, #12]
 8001f0a:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8001f0e:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f14:	681a      	ldr	r2, [r3, #0]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f1a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001f1e:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f24:	68db      	ldr	r3, [r3, #12]
 8001f26:	461a      	mov	r2, r3
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0; i< bufcount; i++)
 8001f2c:	693b      	ldr	r3, [r7, #16]
 8001f2e:	3301      	adds	r3, #1
 8001f30:	613b      	str	r3, [r7, #16]
 8001f32:	693a      	ldr	r2, [r7, #16]
 8001f34:	697b      	ldr	r3, [r7, #20]
 8001f36:	429a      	cmp	r2, r3
 8001f38:	d3b6      	bcc.n	8001ea8 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681a      	ldr	r2, [r3, #0]
 8001f3e:	f241 0314 	movw	r3, #4116	; 0x1014
 8001f42:	4413      	add	r3, r2
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f003 0304 	and.w	r3, r3, #4
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d00d      	beq.n	8001f6a <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681a      	ldr	r2, [r3, #0]
 8001f52:	f241 0314 	movw	r3, #4116	; 0x1014
 8001f56:	4413      	add	r3, r2
 8001f58:	2204      	movs	r2, #4
 8001f5a:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681a      	ldr	r2, [r3, #0]
 8001f60:	f241 0304 	movw	r3, #4100	; 0x1004
 8001f64:	4413      	add	r3, r2
 8001f66:	2200      	movs	r2, #0
 8001f68:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2201      	movs	r2, #1
 8001f6e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2200      	movs	r2, #0
 8001f76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001f7a:	2300      	movs	r3, #0
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	371c      	adds	r7, #28
 8001f80:	46bd      	mov	sp, r7
 8001f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f86:	4770      	bx	lr
 8001f88:	ac02b00b 	.word	0xac02b00b
 8001f8c:	fffffa0c 	.word	0xfffffa0c

08001f90 <HAL_ETH_GetReceivedFrame_IT>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame_IT(ETH_HandleTypeDef *heth)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b085      	sub	sp, #20
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  uint32_t descriptorscancounter = 0;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001fa2:	2b01      	cmp	r3, #1
 8001fa4:	d101      	bne.n	8001faa <HAL_ETH_GetReceivedFrame_IT+0x1a>
 8001fa6:	2302      	movs	r3, #2
 8001fa8:	e074      	b.n	8002094 <HAL_ETH_GetReceivedFrame_IT+0x104>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2201      	movs	r2, #1
 8001fae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set ETH HAL State to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2202      	movs	r2, #2
 8001fb6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Scan descriptors owned by CPU */
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8001fba:	e05a      	b.n	8002072 <HAL_ETH_GetReceivedFrame_IT+0xe2>
  {
    /* Just for security */
    descriptorscancounter++;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	3301      	adds	r3, #1
 8001fc0:	60fb      	str	r3, [r7, #12]
    
    /* Check if first segment in frame */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)) */  
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001fcc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001fd0:	d10d      	bne.n	8001fee <HAL_ETH_GetReceivedFrame_IT+0x5e>
    { 
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	631a      	str	r2, [r3, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1;   
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2201      	movs	r2, #1
 8001fde:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fe4:	68db      	ldr	r3, [r3, #12]
 8001fe6:	461a      	mov	r2, r3
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	629a      	str	r2, [r3, #40]	; 0x28
 8001fec:	e041      	b.n	8002072 <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Check if intermediate segment */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)&& ((heth->RxDesc->Status & ETH_DMARXDESC_FS) == (uint32_t)RESET)) */
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d10b      	bne.n	8002014 <HAL_ETH_GetReceivedFrame_IT+0x84>
    {
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002000:	1c5a      	adds	r2, r3, #1
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800200a:	68db      	ldr	r3, [r3, #12]
 800200c:	461a      	mov	r2, r3
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	629a      	str	r2, [r3, #40]	; 0x28
 8002012:	e02e      	b.n	8002072 <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Should be last segment */
    else
    { 
      /* Last segment */
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002020:	1c5a      	adds	r2, r3, #1
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos.SegCount) == 1)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800202a:	2b01      	cmp	r3, #1
 800202c:	d103      	bne.n	8002036 <HAL_ETH_GetReceivedFrame_IT+0xa6>
      {
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	0c1b      	lsrs	r3, r3, #16
 800203e:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8002042:	1f1a      	subs	r2, r3, #4
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */ 
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800204c:	689a      	ldr	r2, [r3, #8]
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Point to next descriptor */      
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002056:	68db      	ldr	r3, [r3, #12]
 8002058:	461a      	mov	r2, r3
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2201      	movs	r2, #1
 8002062:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2200      	movs	r2, #0
 800206a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
      /* Return function status */
      return HAL_OK;
 800206e:	2300      	movs	r3, #0
 8002070:	e010      	b.n	8002094 <HAL_ETH_GetReceivedFrame_IT+0x104>
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	2b00      	cmp	r3, #0
 800207a:	db02      	blt.n	8002082 <HAL_ETH_GetReceivedFrame_IT+0xf2>
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	2b03      	cmp	r3, #3
 8002080:	d99c      	bls.n	8001fbc <HAL_ETH_GetReceivedFrame_IT+0x2c>
    }
  }

  /* Set HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2201      	movs	r2, #1
 8002086:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2200      	movs	r2, #0
 800208e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 8002092:	2301      	movs	r3, #1
}
 8002094:	4618      	mov	r0, r3
 8002096:	3714      	adds	r7, #20
 8002098:	46bd      	mov	sp, r7
 800209a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209e:	4770      	bx	lr

080020a0 <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b082      	sub	sp, #8
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681a      	ldr	r2, [r3, #0]
 80020ac:	f241 0314 	movw	r3, #4116	; 0x1014
 80020b0:	4413      	add	r3, r2
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020b8:	2b40      	cmp	r3, #64	; 0x40
 80020ba:	d112      	bne.n	80020e2 <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 80020bc:	6878      	ldr	r0, [r7, #4]
 80020be:	f003 fa6f 	bl	80055a0 <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    
     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681a      	ldr	r2, [r3, #0]
 80020c6:	f241 0314 	movw	r3, #4116	; 0x1014
 80020ca:	4413      	add	r3, r2
 80020cc:	2240      	movs	r2, #64	; 0x40
 80020ce:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2201      	movs	r2, #1
 80020d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2200      	movs	r2, #0
 80020dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80020e0:	e01b      	b.n	800211a <HAL_ETH_IRQHandler+0x7a>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681a      	ldr	r2, [r3, #0]
 80020e6:	f241 0314 	movw	r3, #4116	; 0x1014
 80020ea:	4413      	add	r3, r2
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f003 0301 	and.w	r3, r3, #1
 80020f2:	2b01      	cmp	r3, #1
 80020f4:	d111      	bne.n	800211a <HAL_ETH_IRQHandler+0x7a>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 80020f6:	6878      	ldr	r0, [r7, #4]
 80020f8:	f000 f839 	bl	800216e <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681a      	ldr	r2, [r3, #0]
 8002100:	f241 0314 	movw	r3, #4116	; 0x1014
 8002104:	4413      	add	r3, r2
 8002106:	2201      	movs	r2, #1
 8002108:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2201      	movs	r2, #1
 800210e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2200      	movs	r2, #0
 8002116:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681a      	ldr	r2, [r3, #0]
 800211e:	f241 0314 	movw	r3, #4116	; 0x1014
 8002122:	4413      	add	r3, r2
 8002124:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002128:	601a      	str	r2, [r3, #0]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681a      	ldr	r2, [r3, #0]
 800212e:	f241 0314 	movw	r3, #4116	; 0x1014
 8002132:	4413      	add	r3, r2
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800213a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800213e:	d112      	bne.n	8002166 <HAL_ETH_IRQHandler+0xc6>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8002140:	6878      	ldr	r0, [r7, #4]
 8002142:	f000 f81e 	bl	8002182 <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681a      	ldr	r2, [r3, #0]
 800214a:	f241 0314 	movw	r3, #4116	; 0x1014
 800214e:	4413      	add	r3, r2
 8002150:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002154:	601a      	str	r2, [r3, #0]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2201      	movs	r2, #1
 800215a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2200      	movs	r2, #0
 8002162:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 8002166:	bf00      	nop
 8002168:	3708      	adds	r7, #8
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}

0800216e <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 800216e:	b480      	push	{r7}
 8002170:	b083      	sub	sp, #12
 8002172:	af00      	add	r7, sp, #0
 8002174:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8002176:	bf00      	nop
 8002178:	370c      	adds	r7, #12
 800217a:	46bd      	mov	sp, r7
 800217c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002180:	4770      	bx	lr

08002182 <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8002182:	b480      	push	{r7}
 8002184:	b083      	sub	sp, #12
 8002186:	af00      	add	r7, sp, #0
 8002188:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */ 
}
 800218a:	bf00      	nop
 800218c:	370c      	adds	r7, #12
 800218e:	46bd      	mov	sp, r7
 8002190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002194:	4770      	bx	lr

08002196 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8002196:	b580      	push	{r7, lr}
 8002198:	b086      	sub	sp, #24
 800219a:	af00      	add	r7, sp, #0
 800219c:	60f8      	str	r0, [r7, #12]
 800219e:	460b      	mov	r3, r1
 80021a0:	607a      	str	r2, [r7, #4]
 80021a2:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 80021a4:	2300      	movs	r3, #0
 80021a6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 80021a8:	2300      	movs	r3, #0
 80021aa:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80021b2:	b2db      	uxtb	r3, r3
 80021b4:	2b82      	cmp	r3, #130	; 0x82
 80021b6:	d101      	bne.n	80021bc <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 80021b8:	2302      	movs	r3, #2
 80021ba:	e050      	b.n	800225e <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	2282      	movs	r2, #130	; 0x82
 80021c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	691b      	ldr	r3, [r3, #16]
 80021ca:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 80021cc:	697b      	ldr	r3, [r7, #20]
 80021ce:	f003 031c 	and.w	r3, r3, #28
 80021d2:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	8a1b      	ldrh	r3, [r3, #16]
 80021d8:	02db      	lsls	r3, r3, #11
 80021da:	b29b      	uxth	r3, r3
 80021dc:	697a      	ldr	r2, [r7, #20]
 80021de:	4313      	orrs	r3, r2
 80021e0:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 80021e2:	897b      	ldrh	r3, [r7, #10]
 80021e4:	019b      	lsls	r3, r3, #6
 80021e6:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80021ea:	697a      	ldr	r2, [r7, #20]
 80021ec:	4313      	orrs	r3, r2
 80021ee:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 80021f0:	697b      	ldr	r3, [r7, #20]
 80021f2:	f023 0302 	bic.w	r3, r3, #2
 80021f6:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 80021f8:	697b      	ldr	r3, [r7, #20]
 80021fa:	f043 0301 	orr.w	r3, r3, #1
 80021fe:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	697a      	ldr	r2, [r7, #20]
 8002206:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8002208:	f7fe ffce 	bl	80011a8 <HAL_GetTick>
 800220c:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800220e:	e015      	b.n	800223c <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8002210:	f7fe ffca 	bl	80011a8 <HAL_GetTick>
 8002214:	4602      	mov	r2, r0
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	1ad3      	subs	r3, r2, r3
 800221a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800221e:	d309      	bcc.n	8002234 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	2201      	movs	r2, #1
 8002224:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	2200      	movs	r2, #0
 800222c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8002230:	2303      	movs	r3, #3
 8002232:	e014      	b.n	800225e <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	691b      	ldr	r3, [r3, #16]
 800223a:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800223c:	697b      	ldr	r3, [r7, #20]
 800223e:	f003 0301 	and.w	r3, r3, #1
 8002242:	2b00      	cmp	r3, #0
 8002244:	d1e4      	bne.n	8002210 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	695b      	ldr	r3, [r3, #20]
 800224c:	b29b      	uxth	r3, r3
 800224e:	461a      	mov	r2, r3
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	2201      	movs	r2, #1
 8002258:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 800225c:	2300      	movs	r3, #0
}
 800225e:	4618      	mov	r0, r3
 8002260:	3718      	adds	r7, #24
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}

08002266 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8002266:	b580      	push	{r7, lr}
 8002268:	b086      	sub	sp, #24
 800226a:	af00      	add	r7, sp, #0
 800226c:	60f8      	str	r0, [r7, #12]
 800226e:	460b      	mov	r3, r1
 8002270:	607a      	str	r2, [r7, #4]
 8002272:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 8002274:	2300      	movs	r3, #0
 8002276:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8002278:	2300      	movs	r3, #0
 800227a:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002282:	b2db      	uxtb	r3, r3
 8002284:	2b42      	cmp	r3, #66	; 0x42
 8002286:	d101      	bne.n	800228c <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8002288:	2302      	movs	r3, #2
 800228a:	e04e      	b.n	800232a <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	2242      	movs	r2, #66	; 0x42
 8002290:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	691b      	ldr	r3, [r3, #16]
 800229a:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 800229c:	697b      	ldr	r3, [r7, #20]
 800229e:	f003 031c 	and.w	r3, r3, #28
 80022a2:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	8a1b      	ldrh	r3, [r3, #16]
 80022a8:	02db      	lsls	r3, r3, #11
 80022aa:	b29b      	uxth	r3, r3
 80022ac:	697a      	ldr	r2, [r7, #20]
 80022ae:	4313      	orrs	r3, r2
 80022b0:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 80022b2:	897b      	ldrh	r3, [r7, #10]
 80022b4:	019b      	lsls	r3, r3, #6
 80022b6:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80022ba:	697a      	ldr	r2, [r7, #20]
 80022bc:	4313      	orrs	r3, r2
 80022be:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	f043 0302 	orr.w	r3, r3, #2
 80022c6:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 80022c8:	697b      	ldr	r3, [r7, #20]
 80022ca:	f043 0301 	orr.w	r3, r3, #1
 80022ce:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	b29a      	uxth	r2, r3
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	697a      	ldr	r2, [r7, #20]
 80022e0:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80022e2:	f7fe ff61 	bl	80011a8 <HAL_GetTick>
 80022e6:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80022e8:	e015      	b.n	8002316 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 80022ea:	f7fe ff5d 	bl	80011a8 <HAL_GetTick>
 80022ee:	4602      	mov	r2, r0
 80022f0:	693b      	ldr	r3, [r7, #16]
 80022f2:	1ad3      	subs	r3, r2, r3
 80022f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022f8:	d309      	bcc.n	800230e <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	2201      	movs	r2, #1
 80022fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	2200      	movs	r2, #0
 8002306:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 800230a:	2303      	movs	r3, #3
 800230c:	e00d      	b.n	800232a <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	691b      	ldr	r3, [r3, #16]
 8002314:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002316:	697b      	ldr	r3, [r7, #20]
 8002318:	f003 0301 	and.w	r3, r3, #1
 800231c:	2b00      	cmp	r3, #0
 800231e:	d1e4      	bne.n	80022ea <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	2201      	movs	r2, #1
 8002324:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8002328:	2300      	movs	r3, #0
}
 800232a:	4618      	mov	r0, r3
 800232c:	3718      	adds	r7, #24
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}

08002332 <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8002332:	b580      	push	{r7, lr}
 8002334:	b082      	sub	sp, #8
 8002336:	af00      	add	r7, sp, #0
 8002338:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002340:	2b01      	cmp	r3, #1
 8002342:	d101      	bne.n	8002348 <HAL_ETH_Start+0x16>
 8002344:	2302      	movs	r3, #2
 8002346:	e01f      	b.n	8002388 <HAL_ETH_Start+0x56>
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2201      	movs	r2, #1
 800234c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2202      	movs	r2, #2
 8002354:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8002358:	6878      	ldr	r0, [r7, #4]
 800235a:	f000 fb45 	bl	80029e8 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 800235e:	6878      	ldr	r0, [r7, #4]
 8002360:	f000 fb7c 	bl	8002a5c <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8002364:	6878      	ldr	r0, [r7, #4]
 8002366:	f000 fc13 	bl	8002b90 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 800236a:	6878      	ldr	r0, [r7, #4]
 800236c:	f000 fbb0 	bl	8002ad0 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8002370:	6878      	ldr	r0, [r7, #4]
 8002372:	f000 fbdd 	bl	8002b30 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2201      	movs	r2, #1
 800237a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2200      	movs	r2, #0
 8002382:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8002386:	2300      	movs	r3, #0
}
 8002388:	4618      	mov	r0, r3
 800238a:	3708      	adds	r7, #8
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}

08002390 <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 8002390:	b580      	push	{r7, lr}
 8002392:	b082      	sub	sp, #8
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800239e:	2b01      	cmp	r3, #1
 80023a0:	d101      	bne.n	80023a6 <HAL_ETH_Stop+0x16>
 80023a2:	2302      	movs	r3, #2
 80023a4:	e01f      	b.n	80023e6 <HAL_ETH_Stop+0x56>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2201      	movs	r2, #1
 80023aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2202      	movs	r2, #2
 80023b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 80023b6:	6878      	ldr	r0, [r7, #4]
 80023b8:	f000 fba2 	bl	8002b00 <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 80023bc:	6878      	ldr	r0, [r7, #4]
 80023be:	f000 fbcf 	bl	8002b60 <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 80023c2:	6878      	ldr	r0, [r7, #4]
 80023c4:	f000 fb67 	bl	8002a96 <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 80023c8:	6878      	ldr	r0, [r7, #4]
 80023ca:	f000 fbe1 	bl	8002b90 <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 80023ce:	6878      	ldr	r0, [r7, #4]
 80023d0:	f000 fb27 	bl	8002a22 <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2201      	movs	r2, #1
 80023d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2200      	movs	r2, #0
 80023e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80023e4:	2300      	movs	r3, #0
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	3708      	adds	r7, #8
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}
	...

080023f0 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b084      	sub	sp, #16
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
 80023f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80023fa:	2300      	movs	r3, #0
 80023fc:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002404:	2b01      	cmp	r3, #1
 8002406:	d101      	bne.n	800240c <HAL_ETH_ConfigMAC+0x1c>
 8002408:	2302      	movs	r3, #2
 800240a:	e0e4      	b.n	80025d6 <HAL_ETH_ConfigMAC+0x1e6>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2201      	movs	r2, #1
 8002410:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2202      	movs	r2, #2
 8002418:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	2b00      	cmp	r3, #0
 8002420:	f000 80b1 	beq.w	8002586 <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg = (heth->Instance)->MACCR;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg &= ETH_MACCR_CLEAR_MASK;
 800242c:	68fa      	ldr	r2, [r7, #12]
 800242e:	4b6c      	ldr	r3, [pc, #432]	; (80025e0 <HAL_ETH_ConfigMAC+0x1f0>)
 8002430:	4013      	ands	r3, r2
 8002432:	60fb      	str	r3, [r7, #12]
    
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	685b      	ldr	r3, [r3, #4]
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 800243c:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 8002442:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 8002448:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 800244e:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 8002454:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 800245a:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 8002460:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 8002466:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 800246c:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 8002472:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 8002478:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 800247e:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8002480:	68fa      	ldr	r2, [r7, #12]
 8002482:	4313      	orrs	r3, r2
 8002484:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	68fa      	ldr	r2, [r7, #12]
 800248c:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACCR;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002496:	2001      	movs	r0, #1
 8002498:	f7fe fe92 	bl	80011c0 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg; 
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	68fa      	ldr	r2, [r7, #12]
 80024a2:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80024ac:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 80024b2:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 80024b8:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 80024be:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 80024c4:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 80024ca:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 80024d6:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80024d8:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->MACFFR;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80024e2:	2001      	movs	r0, #1
 80024e4:	f7fe fe6c 	bl	80011c0 <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	68fa      	ldr	r2, [r7, #12]
 80024ee:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	683a      	ldr	r2, [r7, #0]
 80024f6:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80024f8:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	683a      	ldr	r2, [r7, #0]
 8002500:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002502:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg = (heth->Instance)->MACFCR;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	699b      	ldr	r3, [r3, #24]
 800250a:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg &= ETH_MACFCR_CLEAR_MASK;
 800250c:	68fa      	ldr	r2, [r7, #12]
 800250e:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002512:	4013      	ands	r3, r2
 8002514:	60fb      	str	r3, [r7, #12]
     
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800251a:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8002520:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 8002526:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 800252c:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 8002532:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 8002538:	4313      	orrs	r3, r2
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 800253a:	68fa      	ldr	r2, [r7, #12]
 800253c:	4313      	orrs	r3, r2
 800253e:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	68fa      	ldr	r2, [r7, #12]
 8002546:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->MACFCR;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	699b      	ldr	r3, [r3, #24]
 800254e:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8002550:	2001      	movs	r0, #1
 8002552:	f7fe fe35 	bl	80011c0 <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	68fa      	ldr	r2, [r7, #12]
 800255c:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	430a      	orrs	r2, r1
 800256c:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg = (heth->Instance)->MACVLANTR;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	69db      	ldr	r3, [r3, #28]
 8002574:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 8002576:	2001      	movs	r0, #1
 8002578:	f7fe fe22 	bl	80011c0 <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	68fa      	ldr	r2, [r7, #12]
 8002582:	61da      	str	r2, [r3, #28]
 8002584:	e01e      	b.n	80025c4 <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg = (heth->Instance)->MACCR;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg &= ~((uint32_t)0x00004800);
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8002594:	60fb      	str	r3, [r7, #12]
    
    tmpreg |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	689a      	ldr	r2, [r3, #8]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	68db      	ldr	r3, [r3, #12]
 800259e:	4313      	orrs	r3, r2
 80025a0:	68fa      	ldr	r2, [r7, #12]
 80025a2:	4313      	orrs	r3, r2
 80025a4:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	68fa      	ldr	r2, [r7, #12]
 80025ac:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACCR;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80025b6:	2001      	movs	r0, #1
 80025b8:	f7fe fe02 	bl	80011c0 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	68fa      	ldr	r2, [r7, #12]
 80025c2:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2201      	movs	r2, #1
 80025c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2200      	movs	r2, #0
 80025d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 80025d4:	2300      	movs	r3, #0
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	3710      	adds	r7, #16
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}
 80025de:	bf00      	nop
 80025e0:	ff20810f 	.word	0xff20810f

080025e4 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b0b0      	sub	sp, #192	; 0xc0
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
 80025ec:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 80025ee:	2300      	movs	r3, #0
 80025f0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d007      	beq.n	800260a <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002600:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002608:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 800260a:	2300      	movs	r3, #0
 800260c:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 800260e:	2300      	movs	r3, #0
 8002610:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8002612:	2300      	movs	r3, #0
 8002614:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8002616:	2300      	movs	r3, #0
 8002618:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 800261a:	2300      	movs	r3, #0
 800261c:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 800261e:	2300      	movs	r3, #0
 8002620:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	69db      	ldr	r3, [r3, #28]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d103      	bne.n	8002632 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 800262a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800262e:	663b      	str	r3, [r7, #96]	; 0x60
 8002630:	e001      	b.n	8002636 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8002632:	2300      	movs	r3, #0
 8002634:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8002636:	f44f 7300 	mov.w	r3, #512	; 0x200
 800263a:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 800263c:	2300      	movs	r3, #0
 800263e:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002640:	2300      	movs	r3, #0
 8002642:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8002644:	2300      	movs	r3, #0
 8002646:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8002648:	2300      	movs	r3, #0
 800264a:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 800264c:	2300      	movs	r3, #0
 800264e:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8002650:	2340      	movs	r3, #64	; 0x40
 8002652:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8002654:	2300      	movs	r3, #0
 8002656:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 800265a:	2300      	movs	r3, #0
 800265c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8002660:	2300      	movs	r3, #0
 8002662:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8002666:	2300      	movs	r3, #0
 8002668:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 800266c:	2300      	movs	r3, #0
 800266e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 8002672:	2300      	movs	r3, #0
 8002674:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 8002678:	2300      	movs	r3, #0
 800267a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 800267e:	2300      	movs	r3, #0
 8002680:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8002684:	2380      	movs	r3, #128	; 0x80
 8002686:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800268a:	2300      	movs	r3, #0
 800268c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8002690:	2300      	movs	r3, #0
 8002692:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8002696:	2300      	movs	r3, #0
 8002698:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 800269c:	2300      	movs	r3, #0
 800269e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 80026a2:	2300      	movs	r3, #0
 80026a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 80026a8:	2300      	movs	r3, #0
 80026aa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 80026b8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80026bc:	4bab      	ldr	r3, [pc, #684]	; (800296c <ETH_MACDMAConfig+0x388>)
 80026be:	4013      	ands	r3, r2
 80026c0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 80026c4:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 80026c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 80026c8:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 80026ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 80026cc:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 80026ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 80026d0:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 80026d6:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 80026d8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 80026da:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 80026dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 80026de:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 80026e4:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 80026e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 80026e8:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 80026ea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 80026ec:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 80026ee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 80026f0:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 80026f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 80026f4:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 80026f6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 80026f8:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 80026fa:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80026fe:	4313      	orrs	r3, r2
 8002700:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800270c:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002718:	2001      	movs	r0, #1
 800271a:	f7fe fd51 	bl	80011c0 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002726:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002728:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 800272a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800272c:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 800272e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8002730:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8002732:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8002736:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8002738:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 800273c:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 800273e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8002742:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8002744:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8002748:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 800274c:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8002754:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002756:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8002762:	2001      	movs	r0, #1
 8002764:	f7fe fd2c 	bl	80011c0 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002770:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800277a:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8002784:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	699b      	ldr	r3, [r3, #24]
 800278c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8002790:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002794:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002798:	4013      	ands	r3, r2
 800279a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 800279e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80027a2:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 80027a4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 80027a8:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 80027aa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 80027ae:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 80027b0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 80027b4:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 80027b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 80027ba:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 80027bc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 80027c0:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 80027c2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80027c6:	4313      	orrs	r3, r2
 80027c8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80027d4:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	699b      	ldr	r3, [r3, #24]
 80027dc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80027e0:	2001      	movs	r0, #1
 80027e2:	f7fe fced 	bl	80011c0 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80027ee:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80027f0:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 80027f4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	430a      	orrs	r2, r1
 80027fe:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	69db      	ldr	r3, [r3, #28]
 8002806:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800280a:	2001      	movs	r0, #1
 800280c:	f7fe fcd8 	bl	80011c0 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002818:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 800281a:	2300      	movs	r3, #0
 800281c:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 800281e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002822:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8002824:	2300      	movs	r3, #0
 8002826:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8002828:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800282c:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800282e:	2300      	movs	r3, #0
 8002830:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8002832:	2300      	movs	r3, #0
 8002834:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8002836:	2300      	movs	r3, #0
 8002838:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800283a:	2300      	movs	r3, #0
 800283c:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 800283e:	2304      	movs	r3, #4
 8002840:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8002842:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002846:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8002848:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800284c:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800284e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002852:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002854:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002858:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 800285a:	2380      	movs	r3, #128	; 0x80
 800285c:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 800285e:	2300      	movs	r3, #0
 8002860:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002862:	2300      	movs	r3, #0
 8002864:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681a      	ldr	r2, [r3, #0]
 800286a:	f241 0318 	movw	r3, #4120	; 0x1018
 800286e:	4413      	add	r3, r2
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 8002876:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800287a:	4b3d      	ldr	r3, [pc, #244]	; (8002970 <ETH_MACDMAConfig+0x38c>)
 800287c:	4013      	ands	r3, r2
 800287e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002882:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8002884:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002886:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8002888:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 800288a:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 800288c:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 800288e:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8002890:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8002892:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8002894:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8002896:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8002898:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 800289a:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 800289c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 800289e:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 80028a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 80028a2:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80028a4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80028a8:	4313      	orrs	r3, r2
 80028aa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681a      	ldr	r2, [r3, #0]
 80028b2:	f241 0318 	movw	r3, #4120	; 0x1018
 80028b6:	4413      	add	r3, r2
 80028b8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80028bc:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681a      	ldr	r2, [r3, #0]
 80028c2:	f241 0318 	movw	r3, #4120	; 0x1018
 80028c6:	4413      	add	r3, r2
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80028ce:	2001      	movs	r0, #1
 80028d0:	f7fe fc76 	bl	80011c0 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681a      	ldr	r2, [r3, #0]
 80028d8:	f241 0318 	movw	r3, #4120	; 0x1018
 80028dc:	4413      	add	r3, r2
 80028de:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80028e2:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80028e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 80028e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80028e8:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80028ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 80028ec:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 80028ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80028f0:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 80028f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 80028f4:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 80028f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80028f8:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 80028fa:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 80028fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 80028fe:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002908:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800290c:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 800291c:	2001      	movs	r0, #1
 800291e:	f7fe fc4f 	bl	80011c0 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800292a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800292e:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	699b      	ldr	r3, [r3, #24]
 8002934:	2b01      	cmp	r3, #1
 8002936:	d10d      	bne.n	8002954 <ETH_MACDMAConfig+0x370>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681a      	ldr	r2, [r3, #0]
 800293c:	f241 031c 	movw	r3, #4124	; 0x101c
 8002940:	4413      	add	r3, r2
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	687a      	ldr	r2, [r7, #4]
 8002946:	6811      	ldr	r1, [r2, #0]
 8002948:	4a0a      	ldr	r2, [pc, #40]	; (8002974 <ETH_MACDMAConfig+0x390>)
 800294a:	431a      	orrs	r2, r3
 800294c:	f241 031c 	movw	r3, #4124	; 0x101c
 8002950:	440b      	add	r3, r1
 8002952:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	695b      	ldr	r3, [r3, #20]
 8002958:	461a      	mov	r2, r3
 800295a:	2100      	movs	r1, #0
 800295c:	6878      	ldr	r0, [r7, #4]
 800295e:	f000 f80b 	bl	8002978 <ETH_MACAddressConfig>
}
 8002962:	bf00      	nop
 8002964:	37c0      	adds	r7, #192	; 0xc0
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}
 800296a:	bf00      	nop
 800296c:	ff20810f 	.word	0xff20810f
 8002970:	f8de3f23 	.word	0xf8de3f23
 8002974:	00010040 	.word	0x00010040

08002978 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002978:	b480      	push	{r7}
 800297a:	b087      	sub	sp, #28
 800297c:	af00      	add	r7, sp, #0
 800297e:	60f8      	str	r0, [r7, #12]
 8002980:	60b9      	str	r1, [r7, #8]
 8002982:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	3305      	adds	r3, #5
 8002988:	781b      	ldrb	r3, [r3, #0]
 800298a:	021b      	lsls	r3, r3, #8
 800298c:	687a      	ldr	r2, [r7, #4]
 800298e:	3204      	adds	r2, #4
 8002990:	7812      	ldrb	r2, [r2, #0]
 8002992:	4313      	orrs	r3, r2
 8002994:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 8002996:	68ba      	ldr	r2, [r7, #8]
 8002998:	4b11      	ldr	r3, [pc, #68]	; (80029e0 <ETH_MACAddressConfig+0x68>)
 800299a:	4413      	add	r3, r2
 800299c:	461a      	mov	r2, r3
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	3303      	adds	r3, #3
 80029a6:	781b      	ldrb	r3, [r3, #0]
 80029a8:	061a      	lsls	r2, r3, #24
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	3302      	adds	r3, #2
 80029ae:	781b      	ldrb	r3, [r3, #0]
 80029b0:	041b      	lsls	r3, r3, #16
 80029b2:	431a      	orrs	r2, r3
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	3301      	adds	r3, #1
 80029b8:	781b      	ldrb	r3, [r3, #0]
 80029ba:	021b      	lsls	r3, r3, #8
 80029bc:	4313      	orrs	r3, r2
 80029be:	687a      	ldr	r2, [r7, #4]
 80029c0:	7812      	ldrb	r2, [r2, #0]
 80029c2:	4313      	orrs	r3, r2
 80029c4:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 80029c6:	68ba      	ldr	r2, [r7, #8]
 80029c8:	4b06      	ldr	r3, [pc, #24]	; (80029e4 <ETH_MACAddressConfig+0x6c>)
 80029ca:	4413      	add	r3, r2
 80029cc:	461a      	mov	r2, r3
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	6013      	str	r3, [r2, #0]
}
 80029d2:	bf00      	nop
 80029d4:	371c      	adds	r7, #28
 80029d6:	46bd      	mov	sp, r7
 80029d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029dc:	4770      	bx	lr
 80029de:	bf00      	nop
 80029e0:	40028040 	.word	0x40028040
 80029e4:	40028044 	.word	0x40028044

080029e8 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b084      	sub	sp, #16
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80029f0:	2300      	movs	r3, #0
 80029f2:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	681a      	ldr	r2, [r3, #0]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f042 0208 	orr.w	r2, r2, #8
 8002a02:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002a0c:	2001      	movs	r0, #1
 8002a0e:	f7fe fbd7 	bl	80011c0 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	68fa      	ldr	r2, [r7, #12]
 8002a18:	601a      	str	r2, [r3, #0]
}
 8002a1a:	bf00      	nop
 8002a1c:	3710      	adds	r7, #16
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}

08002a22 <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8002a22:	b580      	push	{r7, lr}
 8002a24:	b084      	sub	sp, #16
 8002a26:	af00      	add	r7, sp, #0
 8002a28:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	681a      	ldr	r2, [r3, #0]
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f022 0208 	bic.w	r2, r2, #8
 8002a3c:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002a46:	2001      	movs	r0, #1
 8002a48:	f7fe fbba 	bl	80011c0 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	68fa      	ldr	r2, [r7, #12]
 8002a52:	601a      	str	r2, [r3, #0]
}
 8002a54:	bf00      	nop
 8002a56:	3710      	adds	r7, #16
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bd80      	pop	{r7, pc}

08002a5c <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b084      	sub	sp, #16
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002a64:	2300      	movs	r3, #0
 8002a66:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	681a      	ldr	r2, [r3, #0]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f042 0204 	orr.w	r2, r2, #4
 8002a76:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002a80:	2001      	movs	r0, #1
 8002a82:	f7fe fb9d 	bl	80011c0 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	68fa      	ldr	r2, [r7, #12]
 8002a8c:	601a      	str	r2, [r3, #0]
}
 8002a8e:	bf00      	nop
 8002a90:	3710      	adds	r7, #16
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}

08002a96 <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8002a96:	b580      	push	{r7, lr}
 8002a98:	b084      	sub	sp, #16
 8002a9a:	af00      	add	r7, sp, #0
 8002a9c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	681a      	ldr	r2, [r3, #0]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f022 0204 	bic.w	r2, r2, #4
 8002ab0:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002aba:	2001      	movs	r0, #1
 8002abc:	f7fe fb80 	bl	80011c0 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	68fa      	ldr	r2, [r7, #12]
 8002ac6:	601a      	str	r2, [r3, #0]
}
 8002ac8:	bf00      	nop
 8002aca:	3710      	adds	r7, #16
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bd80      	pop	{r7, pc}

08002ad0 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b083      	sub	sp, #12
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681a      	ldr	r2, [r3, #0]
 8002adc:	f241 0318 	movw	r3, #4120	; 0x1018
 8002ae0:	4413      	add	r3, r2
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	687a      	ldr	r2, [r7, #4]
 8002ae6:	6811      	ldr	r1, [r2, #0]
 8002ae8:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002aec:	f241 0318 	movw	r3, #4120	; 0x1018
 8002af0:	440b      	add	r3, r1
 8002af2:	601a      	str	r2, [r3, #0]
}
 8002af4:	bf00      	nop
 8002af6:	370c      	adds	r7, #12
 8002af8:	46bd      	mov	sp, r7
 8002afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afe:	4770      	bx	lr

08002b00 <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8002b00:	b480      	push	{r7}
 8002b02:	b083      	sub	sp, #12
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681a      	ldr	r2, [r3, #0]
 8002b0c:	f241 0318 	movw	r3, #4120	; 0x1018
 8002b10:	4413      	add	r3, r2
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	687a      	ldr	r2, [r7, #4]
 8002b16:	6811      	ldr	r1, [r2, #0]
 8002b18:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002b1c:	f241 0318 	movw	r3, #4120	; 0x1018
 8002b20:	440b      	add	r3, r1
 8002b22:	601a      	str	r2, [r3, #0]
}
 8002b24:	bf00      	nop
 8002b26:	370c      	adds	r7, #12
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2e:	4770      	bx	lr

08002b30 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8002b30:	b480      	push	{r7}
 8002b32:	b083      	sub	sp, #12
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681a      	ldr	r2, [r3, #0]
 8002b3c:	f241 0318 	movw	r3, #4120	; 0x1018
 8002b40:	4413      	add	r3, r2
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	687a      	ldr	r2, [r7, #4]
 8002b46:	6811      	ldr	r1, [r2, #0]
 8002b48:	f043 0202 	orr.w	r2, r3, #2
 8002b4c:	f241 0318 	movw	r3, #4120	; 0x1018
 8002b50:	440b      	add	r3, r1
 8002b52:	601a      	str	r2, [r3, #0]
}
 8002b54:	bf00      	nop
 8002b56:	370c      	adds	r7, #12
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5e:	4770      	bx	lr

08002b60 <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8002b60:	b480      	push	{r7}
 8002b62:	b083      	sub	sp, #12
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681a      	ldr	r2, [r3, #0]
 8002b6c:	f241 0318 	movw	r3, #4120	; 0x1018
 8002b70:	4413      	add	r3, r2
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	687a      	ldr	r2, [r7, #4]
 8002b76:	6811      	ldr	r1, [r2, #0]
 8002b78:	f023 0202 	bic.w	r2, r3, #2
 8002b7c:	f241 0318 	movw	r3, #4120	; 0x1018
 8002b80:	440b      	add	r3, r1
 8002b82:	601a      	str	r2, [r3, #0]
}
 8002b84:	bf00      	nop
 8002b86:	370c      	adds	r7, #12
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8e:	4770      	bx	lr

08002b90 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b084      	sub	sp, #16
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681a      	ldr	r2, [r3, #0]
 8002ba0:	f241 0318 	movw	r3, #4120	; 0x1018
 8002ba4:	4413      	add	r3, r2
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	687a      	ldr	r2, [r7, #4]
 8002baa:	6811      	ldr	r1, [r2, #0]
 8002bac:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002bb0:	f241 0318 	movw	r3, #4120	; 0x1018
 8002bb4:	440b      	add	r3, r1
 8002bb6:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681a      	ldr	r2, [r3, #0]
 8002bbc:	f241 0318 	movw	r3, #4120	; 0x1018
 8002bc0:	4413      	add	r3, r2
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002bc6:	2001      	movs	r0, #1
 8002bc8:	f7fe fafa 	bl	80011c0 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6819      	ldr	r1, [r3, #0]
 8002bd0:	68fa      	ldr	r2, [r7, #12]
 8002bd2:	f241 0318 	movw	r3, #4120	; 0x1018
 8002bd6:	440b      	add	r3, r1
 8002bd8:	601a      	str	r2, [r3, #0]
}
 8002bda:	bf00      	nop
 8002bdc:	3710      	adds	r7, #16
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}
	...

08002be4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002be4:	b480      	push	{r7}
 8002be6:	b089      	sub	sp, #36	; 0x24
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
 8002bec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002bfe:	2300      	movs	r3, #0
 8002c00:	61fb      	str	r3, [r7, #28]
 8002c02:	e175      	b.n	8002ef0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002c04:	2201      	movs	r2, #1
 8002c06:	69fb      	ldr	r3, [r7, #28]
 8002c08:	fa02 f303 	lsl.w	r3, r2, r3
 8002c0c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	697a      	ldr	r2, [r7, #20]
 8002c14:	4013      	ands	r3, r2
 8002c16:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002c18:	693a      	ldr	r2, [r7, #16]
 8002c1a:	697b      	ldr	r3, [r7, #20]
 8002c1c:	429a      	cmp	r2, r3
 8002c1e:	f040 8164 	bne.w	8002eea <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	2b01      	cmp	r3, #1
 8002c28:	d00b      	beq.n	8002c42 <HAL_GPIO_Init+0x5e>
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	2b02      	cmp	r3, #2
 8002c30:	d007      	beq.n	8002c42 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002c36:	2b11      	cmp	r3, #17
 8002c38:	d003      	beq.n	8002c42 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	2b12      	cmp	r3, #18
 8002c40:	d130      	bne.n	8002ca4 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	689b      	ldr	r3, [r3, #8]
 8002c46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002c48:	69fb      	ldr	r3, [r7, #28]
 8002c4a:	005b      	lsls	r3, r3, #1
 8002c4c:	2203      	movs	r2, #3
 8002c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c52:	43db      	mvns	r3, r3
 8002c54:	69ba      	ldr	r2, [r7, #24]
 8002c56:	4013      	ands	r3, r2
 8002c58:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	68da      	ldr	r2, [r3, #12]
 8002c5e:	69fb      	ldr	r3, [r7, #28]
 8002c60:	005b      	lsls	r3, r3, #1
 8002c62:	fa02 f303 	lsl.w	r3, r2, r3
 8002c66:	69ba      	ldr	r2, [r7, #24]
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	69ba      	ldr	r2, [r7, #24]
 8002c70:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c78:	2201      	movs	r2, #1
 8002c7a:	69fb      	ldr	r3, [r7, #28]
 8002c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c80:	43db      	mvns	r3, r3
 8002c82:	69ba      	ldr	r2, [r7, #24]
 8002c84:	4013      	ands	r3, r2
 8002c86:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	091b      	lsrs	r3, r3, #4
 8002c8e:	f003 0201 	and.w	r2, r3, #1
 8002c92:	69fb      	ldr	r3, [r7, #28]
 8002c94:	fa02 f303 	lsl.w	r3, r2, r3
 8002c98:	69ba      	ldr	r2, [r7, #24]
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	69ba      	ldr	r2, [r7, #24]
 8002ca2:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	68db      	ldr	r3, [r3, #12]
 8002ca8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002caa:	69fb      	ldr	r3, [r7, #28]
 8002cac:	005b      	lsls	r3, r3, #1
 8002cae:	2203      	movs	r2, #3
 8002cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb4:	43db      	mvns	r3, r3
 8002cb6:	69ba      	ldr	r2, [r7, #24]
 8002cb8:	4013      	ands	r3, r2
 8002cba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	689a      	ldr	r2, [r3, #8]
 8002cc0:	69fb      	ldr	r3, [r7, #28]
 8002cc2:	005b      	lsls	r3, r3, #1
 8002cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc8:	69ba      	ldr	r2, [r7, #24]
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	69ba      	ldr	r2, [r7, #24]
 8002cd2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	2b02      	cmp	r3, #2
 8002cda:	d003      	beq.n	8002ce4 <HAL_GPIO_Init+0x100>
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	2b12      	cmp	r3, #18
 8002ce2:	d123      	bne.n	8002d2c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002ce4:	69fb      	ldr	r3, [r7, #28]
 8002ce6:	08da      	lsrs	r2, r3, #3
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	3208      	adds	r2, #8
 8002cec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002cf0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002cf2:	69fb      	ldr	r3, [r7, #28]
 8002cf4:	f003 0307 	and.w	r3, r3, #7
 8002cf8:	009b      	lsls	r3, r3, #2
 8002cfa:	220f      	movs	r2, #15
 8002cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002d00:	43db      	mvns	r3, r3
 8002d02:	69ba      	ldr	r2, [r7, #24]
 8002d04:	4013      	ands	r3, r2
 8002d06:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	691a      	ldr	r2, [r3, #16]
 8002d0c:	69fb      	ldr	r3, [r7, #28]
 8002d0e:	f003 0307 	and.w	r3, r3, #7
 8002d12:	009b      	lsls	r3, r3, #2
 8002d14:	fa02 f303 	lsl.w	r3, r2, r3
 8002d18:	69ba      	ldr	r2, [r7, #24]
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002d1e:	69fb      	ldr	r3, [r7, #28]
 8002d20:	08da      	lsrs	r2, r3, #3
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	3208      	adds	r2, #8
 8002d26:	69b9      	ldr	r1, [r7, #24]
 8002d28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002d32:	69fb      	ldr	r3, [r7, #28]
 8002d34:	005b      	lsls	r3, r3, #1
 8002d36:	2203      	movs	r2, #3
 8002d38:	fa02 f303 	lsl.w	r3, r2, r3
 8002d3c:	43db      	mvns	r3, r3
 8002d3e:	69ba      	ldr	r2, [r7, #24]
 8002d40:	4013      	ands	r3, r2
 8002d42:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	f003 0203 	and.w	r2, r3, #3
 8002d4c:	69fb      	ldr	r3, [r7, #28]
 8002d4e:	005b      	lsls	r3, r3, #1
 8002d50:	fa02 f303 	lsl.w	r3, r2, r3
 8002d54:	69ba      	ldr	r2, [r7, #24]
 8002d56:	4313      	orrs	r3, r2
 8002d58:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	69ba      	ldr	r2, [r7, #24]
 8002d5e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	f000 80be 	beq.w	8002eea <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d6e:	4b65      	ldr	r3, [pc, #404]	; (8002f04 <HAL_GPIO_Init+0x320>)
 8002d70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d72:	4a64      	ldr	r2, [pc, #400]	; (8002f04 <HAL_GPIO_Init+0x320>)
 8002d74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d78:	6453      	str	r3, [r2, #68]	; 0x44
 8002d7a:	4b62      	ldr	r3, [pc, #392]	; (8002f04 <HAL_GPIO_Init+0x320>)
 8002d7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d82:	60fb      	str	r3, [r7, #12]
 8002d84:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002d86:	4a60      	ldr	r2, [pc, #384]	; (8002f08 <HAL_GPIO_Init+0x324>)
 8002d88:	69fb      	ldr	r3, [r7, #28]
 8002d8a:	089b      	lsrs	r3, r3, #2
 8002d8c:	3302      	adds	r3, #2
 8002d8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d92:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002d94:	69fb      	ldr	r3, [r7, #28]
 8002d96:	f003 0303 	and.w	r3, r3, #3
 8002d9a:	009b      	lsls	r3, r3, #2
 8002d9c:	220f      	movs	r2, #15
 8002d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002da2:	43db      	mvns	r3, r3
 8002da4:	69ba      	ldr	r2, [r7, #24]
 8002da6:	4013      	ands	r3, r2
 8002da8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	4a57      	ldr	r2, [pc, #348]	; (8002f0c <HAL_GPIO_Init+0x328>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d037      	beq.n	8002e22 <HAL_GPIO_Init+0x23e>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	4a56      	ldr	r2, [pc, #344]	; (8002f10 <HAL_GPIO_Init+0x32c>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d031      	beq.n	8002e1e <HAL_GPIO_Init+0x23a>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	4a55      	ldr	r2, [pc, #340]	; (8002f14 <HAL_GPIO_Init+0x330>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d02b      	beq.n	8002e1a <HAL_GPIO_Init+0x236>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	4a54      	ldr	r2, [pc, #336]	; (8002f18 <HAL_GPIO_Init+0x334>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d025      	beq.n	8002e16 <HAL_GPIO_Init+0x232>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	4a53      	ldr	r2, [pc, #332]	; (8002f1c <HAL_GPIO_Init+0x338>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d01f      	beq.n	8002e12 <HAL_GPIO_Init+0x22e>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	4a52      	ldr	r2, [pc, #328]	; (8002f20 <HAL_GPIO_Init+0x33c>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d019      	beq.n	8002e0e <HAL_GPIO_Init+0x22a>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	4a51      	ldr	r2, [pc, #324]	; (8002f24 <HAL_GPIO_Init+0x340>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d013      	beq.n	8002e0a <HAL_GPIO_Init+0x226>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	4a50      	ldr	r2, [pc, #320]	; (8002f28 <HAL_GPIO_Init+0x344>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d00d      	beq.n	8002e06 <HAL_GPIO_Init+0x222>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	4a4f      	ldr	r2, [pc, #316]	; (8002f2c <HAL_GPIO_Init+0x348>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d007      	beq.n	8002e02 <HAL_GPIO_Init+0x21e>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	4a4e      	ldr	r2, [pc, #312]	; (8002f30 <HAL_GPIO_Init+0x34c>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d101      	bne.n	8002dfe <HAL_GPIO_Init+0x21a>
 8002dfa:	2309      	movs	r3, #9
 8002dfc:	e012      	b.n	8002e24 <HAL_GPIO_Init+0x240>
 8002dfe:	230a      	movs	r3, #10
 8002e00:	e010      	b.n	8002e24 <HAL_GPIO_Init+0x240>
 8002e02:	2308      	movs	r3, #8
 8002e04:	e00e      	b.n	8002e24 <HAL_GPIO_Init+0x240>
 8002e06:	2307      	movs	r3, #7
 8002e08:	e00c      	b.n	8002e24 <HAL_GPIO_Init+0x240>
 8002e0a:	2306      	movs	r3, #6
 8002e0c:	e00a      	b.n	8002e24 <HAL_GPIO_Init+0x240>
 8002e0e:	2305      	movs	r3, #5
 8002e10:	e008      	b.n	8002e24 <HAL_GPIO_Init+0x240>
 8002e12:	2304      	movs	r3, #4
 8002e14:	e006      	b.n	8002e24 <HAL_GPIO_Init+0x240>
 8002e16:	2303      	movs	r3, #3
 8002e18:	e004      	b.n	8002e24 <HAL_GPIO_Init+0x240>
 8002e1a:	2302      	movs	r3, #2
 8002e1c:	e002      	b.n	8002e24 <HAL_GPIO_Init+0x240>
 8002e1e:	2301      	movs	r3, #1
 8002e20:	e000      	b.n	8002e24 <HAL_GPIO_Init+0x240>
 8002e22:	2300      	movs	r3, #0
 8002e24:	69fa      	ldr	r2, [r7, #28]
 8002e26:	f002 0203 	and.w	r2, r2, #3
 8002e2a:	0092      	lsls	r2, r2, #2
 8002e2c:	4093      	lsls	r3, r2
 8002e2e:	69ba      	ldr	r2, [r7, #24]
 8002e30:	4313      	orrs	r3, r2
 8002e32:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002e34:	4934      	ldr	r1, [pc, #208]	; (8002f08 <HAL_GPIO_Init+0x324>)
 8002e36:	69fb      	ldr	r3, [r7, #28]
 8002e38:	089b      	lsrs	r3, r3, #2
 8002e3a:	3302      	adds	r3, #2
 8002e3c:	69ba      	ldr	r2, [r7, #24]
 8002e3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e42:	4b3c      	ldr	r3, [pc, #240]	; (8002f34 <HAL_GPIO_Init+0x350>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e48:	693b      	ldr	r3, [r7, #16]
 8002e4a:	43db      	mvns	r3, r3
 8002e4c:	69ba      	ldr	r2, [r7, #24]
 8002e4e:	4013      	ands	r3, r2
 8002e50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d003      	beq.n	8002e66 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002e5e:	69ba      	ldr	r2, [r7, #24]
 8002e60:	693b      	ldr	r3, [r7, #16]
 8002e62:	4313      	orrs	r3, r2
 8002e64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002e66:	4a33      	ldr	r2, [pc, #204]	; (8002f34 <HAL_GPIO_Init+0x350>)
 8002e68:	69bb      	ldr	r3, [r7, #24]
 8002e6a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002e6c:	4b31      	ldr	r3, [pc, #196]	; (8002f34 <HAL_GPIO_Init+0x350>)
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	43db      	mvns	r3, r3
 8002e76:	69ba      	ldr	r2, [r7, #24]
 8002e78:	4013      	ands	r3, r2
 8002e7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d003      	beq.n	8002e90 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002e88:	69ba      	ldr	r2, [r7, #24]
 8002e8a:	693b      	ldr	r3, [r7, #16]
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002e90:	4a28      	ldr	r2, [pc, #160]	; (8002f34 <HAL_GPIO_Init+0x350>)
 8002e92:	69bb      	ldr	r3, [r7, #24]
 8002e94:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002e96:	4b27      	ldr	r3, [pc, #156]	; (8002f34 <HAL_GPIO_Init+0x350>)
 8002e98:	689b      	ldr	r3, [r3, #8]
 8002e9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e9c:	693b      	ldr	r3, [r7, #16]
 8002e9e:	43db      	mvns	r3, r3
 8002ea0:	69ba      	ldr	r2, [r7, #24]
 8002ea2:	4013      	ands	r3, r2
 8002ea4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d003      	beq.n	8002eba <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002eb2:	69ba      	ldr	r2, [r7, #24]
 8002eb4:	693b      	ldr	r3, [r7, #16]
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002eba:	4a1e      	ldr	r2, [pc, #120]	; (8002f34 <HAL_GPIO_Init+0x350>)
 8002ebc:	69bb      	ldr	r3, [r7, #24]
 8002ebe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ec0:	4b1c      	ldr	r3, [pc, #112]	; (8002f34 <HAL_GPIO_Init+0x350>)
 8002ec2:	68db      	ldr	r3, [r3, #12]
 8002ec4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ec6:	693b      	ldr	r3, [r7, #16]
 8002ec8:	43db      	mvns	r3, r3
 8002eca:	69ba      	ldr	r2, [r7, #24]
 8002ecc:	4013      	ands	r3, r2
 8002ece:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d003      	beq.n	8002ee4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002edc:	69ba      	ldr	r2, [r7, #24]
 8002ede:	693b      	ldr	r3, [r7, #16]
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ee4:	4a13      	ldr	r2, [pc, #76]	; (8002f34 <HAL_GPIO_Init+0x350>)
 8002ee6:	69bb      	ldr	r3, [r7, #24]
 8002ee8:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002eea:	69fb      	ldr	r3, [r7, #28]
 8002eec:	3301      	adds	r3, #1
 8002eee:	61fb      	str	r3, [r7, #28]
 8002ef0:	69fb      	ldr	r3, [r7, #28]
 8002ef2:	2b0f      	cmp	r3, #15
 8002ef4:	f67f ae86 	bls.w	8002c04 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002ef8:	bf00      	nop
 8002efa:	3724      	adds	r7, #36	; 0x24
 8002efc:	46bd      	mov	sp, r7
 8002efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f02:	4770      	bx	lr
 8002f04:	40023800 	.word	0x40023800
 8002f08:	40013800 	.word	0x40013800
 8002f0c:	40020000 	.word	0x40020000
 8002f10:	40020400 	.word	0x40020400
 8002f14:	40020800 	.word	0x40020800
 8002f18:	40020c00 	.word	0x40020c00
 8002f1c:	40021000 	.word	0x40021000
 8002f20:	40021400 	.word	0x40021400
 8002f24:	40021800 	.word	0x40021800
 8002f28:	40021c00 	.word	0x40021c00
 8002f2c:	40022000 	.word	0x40022000
 8002f30:	40022400 	.word	0x40022400
 8002f34:	40013c00 	.word	0x40013c00

08002f38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	b083      	sub	sp, #12
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
 8002f40:	460b      	mov	r3, r1
 8002f42:	807b      	strh	r3, [r7, #2]
 8002f44:	4613      	mov	r3, r2
 8002f46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f48:	787b      	ldrb	r3, [r7, #1]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d003      	beq.n	8002f56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f4e:	887a      	ldrh	r2, [r7, #2]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002f54:	e003      	b.n	8002f5e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002f56:	887b      	ldrh	r3, [r7, #2]
 8002f58:	041a      	lsls	r2, r3, #16
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	619a      	str	r2, [r3, #24]
}
 8002f5e:	bf00      	nop
 8002f60:	370c      	adds	r7, #12
 8002f62:	46bd      	mov	sp, r7
 8002f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f68:	4770      	bx	lr

08002f6a <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002f6a:	b480      	push	{r7}
 8002f6c:	b085      	sub	sp, #20
 8002f6e:	af00      	add	r7, sp, #0
 8002f70:	6078      	str	r0, [r7, #4]
 8002f72:	460b      	mov	r3, r1
 8002f74:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	695b      	ldr	r3, [r3, #20]
 8002f7a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002f7c:	887a      	ldrh	r2, [r7, #2]
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	4013      	ands	r3, r2
 8002f82:	041a      	lsls	r2, r3, #16
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	43d9      	mvns	r1, r3
 8002f88:	887b      	ldrh	r3, [r7, #2]
 8002f8a:	400b      	ands	r3, r1
 8002f8c:	431a      	orrs	r2, r3
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	619a      	str	r2, [r3, #24]
}
 8002f92:	bf00      	nop
 8002f94:	3714      	adds	r7, #20
 8002f96:	46bd      	mov	sp, r7
 8002f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9c:	4770      	bx	lr
	...

08002fa0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b082      	sub	sp, #8
 8002fa4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002faa:	4b23      	ldr	r3, [pc, #140]	; (8003038 <HAL_PWREx_EnableOverDrive+0x98>)
 8002fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fae:	4a22      	ldr	r2, [pc, #136]	; (8003038 <HAL_PWREx_EnableOverDrive+0x98>)
 8002fb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fb4:	6413      	str	r3, [r2, #64]	; 0x40
 8002fb6:	4b20      	ldr	r3, [pc, #128]	; (8003038 <HAL_PWREx_EnableOverDrive+0x98>)
 8002fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fbe:	603b      	str	r3, [r7, #0]
 8002fc0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002fc2:	4b1e      	ldr	r3, [pc, #120]	; (800303c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a1d      	ldr	r2, [pc, #116]	; (800303c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002fc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fcc:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002fce:	f7fe f8eb 	bl	80011a8 <HAL_GetTick>
 8002fd2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002fd4:	e009      	b.n	8002fea <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002fd6:	f7fe f8e7 	bl	80011a8 <HAL_GetTick>
 8002fda:	4602      	mov	r2, r0
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	1ad3      	subs	r3, r2, r3
 8002fe0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002fe4:	d901      	bls.n	8002fea <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002fe6:	2303      	movs	r3, #3
 8002fe8:	e022      	b.n	8003030 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002fea:	4b14      	ldr	r3, [pc, #80]	; (800303c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ff2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ff6:	d1ee      	bne.n	8002fd6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002ff8:	4b10      	ldr	r3, [pc, #64]	; (800303c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a0f      	ldr	r2, [pc, #60]	; (800303c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002ffe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003002:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003004:	f7fe f8d0 	bl	80011a8 <HAL_GetTick>
 8003008:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800300a:	e009      	b.n	8003020 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800300c:	f7fe f8cc 	bl	80011a8 <HAL_GetTick>
 8003010:	4602      	mov	r2, r0
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	1ad3      	subs	r3, r2, r3
 8003016:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800301a:	d901      	bls.n	8003020 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800301c:	2303      	movs	r3, #3
 800301e:	e007      	b.n	8003030 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003020:	4b06      	ldr	r3, [pc, #24]	; (800303c <HAL_PWREx_EnableOverDrive+0x9c>)
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003028:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800302c:	d1ee      	bne.n	800300c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800302e:	2300      	movs	r3, #0
}
 8003030:	4618      	mov	r0, r3
 8003032:	3708      	adds	r7, #8
 8003034:	46bd      	mov	sp, r7
 8003036:	bd80      	pop	{r7, pc}
 8003038:	40023800 	.word	0x40023800
 800303c:	40007000 	.word	0x40007000

08003040 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b086      	sub	sp, #24
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003048:	2300      	movs	r3, #0
 800304a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d101      	bne.n	8003056 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003052:	2301      	movs	r3, #1
 8003054:	e29b      	b.n	800358e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f003 0301 	and.w	r3, r3, #1
 800305e:	2b00      	cmp	r3, #0
 8003060:	f000 8087 	beq.w	8003172 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003064:	4b96      	ldr	r3, [pc, #600]	; (80032c0 <HAL_RCC_OscConfig+0x280>)
 8003066:	689b      	ldr	r3, [r3, #8]
 8003068:	f003 030c 	and.w	r3, r3, #12
 800306c:	2b04      	cmp	r3, #4
 800306e:	d00c      	beq.n	800308a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003070:	4b93      	ldr	r3, [pc, #588]	; (80032c0 <HAL_RCC_OscConfig+0x280>)
 8003072:	689b      	ldr	r3, [r3, #8]
 8003074:	f003 030c 	and.w	r3, r3, #12
 8003078:	2b08      	cmp	r3, #8
 800307a:	d112      	bne.n	80030a2 <HAL_RCC_OscConfig+0x62>
 800307c:	4b90      	ldr	r3, [pc, #576]	; (80032c0 <HAL_RCC_OscConfig+0x280>)
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003084:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003088:	d10b      	bne.n	80030a2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800308a:	4b8d      	ldr	r3, [pc, #564]	; (80032c0 <HAL_RCC_OscConfig+0x280>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003092:	2b00      	cmp	r3, #0
 8003094:	d06c      	beq.n	8003170 <HAL_RCC_OscConfig+0x130>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d168      	bne.n	8003170 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800309e:	2301      	movs	r3, #1
 80030a0:	e275      	b.n	800358e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030aa:	d106      	bne.n	80030ba <HAL_RCC_OscConfig+0x7a>
 80030ac:	4b84      	ldr	r3, [pc, #528]	; (80032c0 <HAL_RCC_OscConfig+0x280>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4a83      	ldr	r2, [pc, #524]	; (80032c0 <HAL_RCC_OscConfig+0x280>)
 80030b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030b6:	6013      	str	r3, [r2, #0]
 80030b8:	e02e      	b.n	8003118 <HAL_RCC_OscConfig+0xd8>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d10c      	bne.n	80030dc <HAL_RCC_OscConfig+0x9c>
 80030c2:	4b7f      	ldr	r3, [pc, #508]	; (80032c0 <HAL_RCC_OscConfig+0x280>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a7e      	ldr	r2, [pc, #504]	; (80032c0 <HAL_RCC_OscConfig+0x280>)
 80030c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030cc:	6013      	str	r3, [r2, #0]
 80030ce:	4b7c      	ldr	r3, [pc, #496]	; (80032c0 <HAL_RCC_OscConfig+0x280>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a7b      	ldr	r2, [pc, #492]	; (80032c0 <HAL_RCC_OscConfig+0x280>)
 80030d4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030d8:	6013      	str	r3, [r2, #0]
 80030da:	e01d      	b.n	8003118 <HAL_RCC_OscConfig+0xd8>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80030e4:	d10c      	bne.n	8003100 <HAL_RCC_OscConfig+0xc0>
 80030e6:	4b76      	ldr	r3, [pc, #472]	; (80032c0 <HAL_RCC_OscConfig+0x280>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a75      	ldr	r2, [pc, #468]	; (80032c0 <HAL_RCC_OscConfig+0x280>)
 80030ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80030f0:	6013      	str	r3, [r2, #0]
 80030f2:	4b73      	ldr	r3, [pc, #460]	; (80032c0 <HAL_RCC_OscConfig+0x280>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4a72      	ldr	r2, [pc, #456]	; (80032c0 <HAL_RCC_OscConfig+0x280>)
 80030f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030fc:	6013      	str	r3, [r2, #0]
 80030fe:	e00b      	b.n	8003118 <HAL_RCC_OscConfig+0xd8>
 8003100:	4b6f      	ldr	r3, [pc, #444]	; (80032c0 <HAL_RCC_OscConfig+0x280>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a6e      	ldr	r2, [pc, #440]	; (80032c0 <HAL_RCC_OscConfig+0x280>)
 8003106:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800310a:	6013      	str	r3, [r2, #0]
 800310c:	4b6c      	ldr	r3, [pc, #432]	; (80032c0 <HAL_RCC_OscConfig+0x280>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a6b      	ldr	r2, [pc, #428]	; (80032c0 <HAL_RCC_OscConfig+0x280>)
 8003112:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003116:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d013      	beq.n	8003148 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003120:	f7fe f842 	bl	80011a8 <HAL_GetTick>
 8003124:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003126:	e008      	b.n	800313a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003128:	f7fe f83e 	bl	80011a8 <HAL_GetTick>
 800312c:	4602      	mov	r2, r0
 800312e:	693b      	ldr	r3, [r7, #16]
 8003130:	1ad3      	subs	r3, r2, r3
 8003132:	2b64      	cmp	r3, #100	; 0x64
 8003134:	d901      	bls.n	800313a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003136:	2303      	movs	r3, #3
 8003138:	e229      	b.n	800358e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800313a:	4b61      	ldr	r3, [pc, #388]	; (80032c0 <HAL_RCC_OscConfig+0x280>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003142:	2b00      	cmp	r3, #0
 8003144:	d0f0      	beq.n	8003128 <HAL_RCC_OscConfig+0xe8>
 8003146:	e014      	b.n	8003172 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003148:	f7fe f82e 	bl	80011a8 <HAL_GetTick>
 800314c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800314e:	e008      	b.n	8003162 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003150:	f7fe f82a 	bl	80011a8 <HAL_GetTick>
 8003154:	4602      	mov	r2, r0
 8003156:	693b      	ldr	r3, [r7, #16]
 8003158:	1ad3      	subs	r3, r2, r3
 800315a:	2b64      	cmp	r3, #100	; 0x64
 800315c:	d901      	bls.n	8003162 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800315e:	2303      	movs	r3, #3
 8003160:	e215      	b.n	800358e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003162:	4b57      	ldr	r3, [pc, #348]	; (80032c0 <HAL_RCC_OscConfig+0x280>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800316a:	2b00      	cmp	r3, #0
 800316c:	d1f0      	bne.n	8003150 <HAL_RCC_OscConfig+0x110>
 800316e:	e000      	b.n	8003172 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003170:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f003 0302 	and.w	r3, r3, #2
 800317a:	2b00      	cmp	r3, #0
 800317c:	d069      	beq.n	8003252 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800317e:	4b50      	ldr	r3, [pc, #320]	; (80032c0 <HAL_RCC_OscConfig+0x280>)
 8003180:	689b      	ldr	r3, [r3, #8]
 8003182:	f003 030c 	and.w	r3, r3, #12
 8003186:	2b00      	cmp	r3, #0
 8003188:	d00b      	beq.n	80031a2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800318a:	4b4d      	ldr	r3, [pc, #308]	; (80032c0 <HAL_RCC_OscConfig+0x280>)
 800318c:	689b      	ldr	r3, [r3, #8]
 800318e:	f003 030c 	and.w	r3, r3, #12
 8003192:	2b08      	cmp	r3, #8
 8003194:	d11c      	bne.n	80031d0 <HAL_RCC_OscConfig+0x190>
 8003196:	4b4a      	ldr	r3, [pc, #296]	; (80032c0 <HAL_RCC_OscConfig+0x280>)
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d116      	bne.n	80031d0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031a2:	4b47      	ldr	r3, [pc, #284]	; (80032c0 <HAL_RCC_OscConfig+0x280>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f003 0302 	and.w	r3, r3, #2
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d005      	beq.n	80031ba <HAL_RCC_OscConfig+0x17a>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	68db      	ldr	r3, [r3, #12]
 80031b2:	2b01      	cmp	r3, #1
 80031b4:	d001      	beq.n	80031ba <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80031b6:	2301      	movs	r3, #1
 80031b8:	e1e9      	b.n	800358e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031ba:	4b41      	ldr	r3, [pc, #260]	; (80032c0 <HAL_RCC_OscConfig+0x280>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	691b      	ldr	r3, [r3, #16]
 80031c6:	00db      	lsls	r3, r3, #3
 80031c8:	493d      	ldr	r1, [pc, #244]	; (80032c0 <HAL_RCC_OscConfig+0x280>)
 80031ca:	4313      	orrs	r3, r2
 80031cc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031ce:	e040      	b.n	8003252 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	68db      	ldr	r3, [r3, #12]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d023      	beq.n	8003220 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80031d8:	4b39      	ldr	r3, [pc, #228]	; (80032c0 <HAL_RCC_OscConfig+0x280>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a38      	ldr	r2, [pc, #224]	; (80032c0 <HAL_RCC_OscConfig+0x280>)
 80031de:	f043 0301 	orr.w	r3, r3, #1
 80031e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031e4:	f7fd ffe0 	bl	80011a8 <HAL_GetTick>
 80031e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031ea:	e008      	b.n	80031fe <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031ec:	f7fd ffdc 	bl	80011a8 <HAL_GetTick>
 80031f0:	4602      	mov	r2, r0
 80031f2:	693b      	ldr	r3, [r7, #16]
 80031f4:	1ad3      	subs	r3, r2, r3
 80031f6:	2b02      	cmp	r3, #2
 80031f8:	d901      	bls.n	80031fe <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80031fa:	2303      	movs	r3, #3
 80031fc:	e1c7      	b.n	800358e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031fe:	4b30      	ldr	r3, [pc, #192]	; (80032c0 <HAL_RCC_OscConfig+0x280>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f003 0302 	and.w	r3, r3, #2
 8003206:	2b00      	cmp	r3, #0
 8003208:	d0f0      	beq.n	80031ec <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800320a:	4b2d      	ldr	r3, [pc, #180]	; (80032c0 <HAL_RCC_OscConfig+0x280>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	691b      	ldr	r3, [r3, #16]
 8003216:	00db      	lsls	r3, r3, #3
 8003218:	4929      	ldr	r1, [pc, #164]	; (80032c0 <HAL_RCC_OscConfig+0x280>)
 800321a:	4313      	orrs	r3, r2
 800321c:	600b      	str	r3, [r1, #0]
 800321e:	e018      	b.n	8003252 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003220:	4b27      	ldr	r3, [pc, #156]	; (80032c0 <HAL_RCC_OscConfig+0x280>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a26      	ldr	r2, [pc, #152]	; (80032c0 <HAL_RCC_OscConfig+0x280>)
 8003226:	f023 0301 	bic.w	r3, r3, #1
 800322a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800322c:	f7fd ffbc 	bl	80011a8 <HAL_GetTick>
 8003230:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003232:	e008      	b.n	8003246 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003234:	f7fd ffb8 	bl	80011a8 <HAL_GetTick>
 8003238:	4602      	mov	r2, r0
 800323a:	693b      	ldr	r3, [r7, #16]
 800323c:	1ad3      	subs	r3, r2, r3
 800323e:	2b02      	cmp	r3, #2
 8003240:	d901      	bls.n	8003246 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003242:	2303      	movs	r3, #3
 8003244:	e1a3      	b.n	800358e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003246:	4b1e      	ldr	r3, [pc, #120]	; (80032c0 <HAL_RCC_OscConfig+0x280>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f003 0302 	and.w	r3, r3, #2
 800324e:	2b00      	cmp	r3, #0
 8003250:	d1f0      	bne.n	8003234 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f003 0308 	and.w	r3, r3, #8
 800325a:	2b00      	cmp	r3, #0
 800325c:	d038      	beq.n	80032d0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	695b      	ldr	r3, [r3, #20]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d019      	beq.n	800329a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003266:	4b16      	ldr	r3, [pc, #88]	; (80032c0 <HAL_RCC_OscConfig+0x280>)
 8003268:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800326a:	4a15      	ldr	r2, [pc, #84]	; (80032c0 <HAL_RCC_OscConfig+0x280>)
 800326c:	f043 0301 	orr.w	r3, r3, #1
 8003270:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003272:	f7fd ff99 	bl	80011a8 <HAL_GetTick>
 8003276:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003278:	e008      	b.n	800328c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800327a:	f7fd ff95 	bl	80011a8 <HAL_GetTick>
 800327e:	4602      	mov	r2, r0
 8003280:	693b      	ldr	r3, [r7, #16]
 8003282:	1ad3      	subs	r3, r2, r3
 8003284:	2b02      	cmp	r3, #2
 8003286:	d901      	bls.n	800328c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003288:	2303      	movs	r3, #3
 800328a:	e180      	b.n	800358e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800328c:	4b0c      	ldr	r3, [pc, #48]	; (80032c0 <HAL_RCC_OscConfig+0x280>)
 800328e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003290:	f003 0302 	and.w	r3, r3, #2
 8003294:	2b00      	cmp	r3, #0
 8003296:	d0f0      	beq.n	800327a <HAL_RCC_OscConfig+0x23a>
 8003298:	e01a      	b.n	80032d0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800329a:	4b09      	ldr	r3, [pc, #36]	; (80032c0 <HAL_RCC_OscConfig+0x280>)
 800329c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800329e:	4a08      	ldr	r2, [pc, #32]	; (80032c0 <HAL_RCC_OscConfig+0x280>)
 80032a0:	f023 0301 	bic.w	r3, r3, #1
 80032a4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032a6:	f7fd ff7f 	bl	80011a8 <HAL_GetTick>
 80032aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032ac:	e00a      	b.n	80032c4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032ae:	f7fd ff7b 	bl	80011a8 <HAL_GetTick>
 80032b2:	4602      	mov	r2, r0
 80032b4:	693b      	ldr	r3, [r7, #16]
 80032b6:	1ad3      	subs	r3, r2, r3
 80032b8:	2b02      	cmp	r3, #2
 80032ba:	d903      	bls.n	80032c4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80032bc:	2303      	movs	r3, #3
 80032be:	e166      	b.n	800358e <HAL_RCC_OscConfig+0x54e>
 80032c0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032c4:	4b92      	ldr	r3, [pc, #584]	; (8003510 <HAL_RCC_OscConfig+0x4d0>)
 80032c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032c8:	f003 0302 	and.w	r3, r3, #2
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d1ee      	bne.n	80032ae <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f003 0304 	and.w	r3, r3, #4
 80032d8:	2b00      	cmp	r3, #0
 80032da:	f000 80a4 	beq.w	8003426 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032de:	4b8c      	ldr	r3, [pc, #560]	; (8003510 <HAL_RCC_OscConfig+0x4d0>)
 80032e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d10d      	bne.n	8003306 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80032ea:	4b89      	ldr	r3, [pc, #548]	; (8003510 <HAL_RCC_OscConfig+0x4d0>)
 80032ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ee:	4a88      	ldr	r2, [pc, #544]	; (8003510 <HAL_RCC_OscConfig+0x4d0>)
 80032f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032f4:	6413      	str	r3, [r2, #64]	; 0x40
 80032f6:	4b86      	ldr	r3, [pc, #536]	; (8003510 <HAL_RCC_OscConfig+0x4d0>)
 80032f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032fe:	60bb      	str	r3, [r7, #8]
 8003300:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003302:	2301      	movs	r3, #1
 8003304:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003306:	4b83      	ldr	r3, [pc, #524]	; (8003514 <HAL_RCC_OscConfig+0x4d4>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800330e:	2b00      	cmp	r3, #0
 8003310:	d118      	bne.n	8003344 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003312:	4b80      	ldr	r3, [pc, #512]	; (8003514 <HAL_RCC_OscConfig+0x4d4>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4a7f      	ldr	r2, [pc, #508]	; (8003514 <HAL_RCC_OscConfig+0x4d4>)
 8003318:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800331c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800331e:	f7fd ff43 	bl	80011a8 <HAL_GetTick>
 8003322:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003324:	e008      	b.n	8003338 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003326:	f7fd ff3f 	bl	80011a8 <HAL_GetTick>
 800332a:	4602      	mov	r2, r0
 800332c:	693b      	ldr	r3, [r7, #16]
 800332e:	1ad3      	subs	r3, r2, r3
 8003330:	2b64      	cmp	r3, #100	; 0x64
 8003332:	d901      	bls.n	8003338 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003334:	2303      	movs	r3, #3
 8003336:	e12a      	b.n	800358e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003338:	4b76      	ldr	r3, [pc, #472]	; (8003514 <HAL_RCC_OscConfig+0x4d4>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003340:	2b00      	cmp	r3, #0
 8003342:	d0f0      	beq.n	8003326 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	689b      	ldr	r3, [r3, #8]
 8003348:	2b01      	cmp	r3, #1
 800334a:	d106      	bne.n	800335a <HAL_RCC_OscConfig+0x31a>
 800334c:	4b70      	ldr	r3, [pc, #448]	; (8003510 <HAL_RCC_OscConfig+0x4d0>)
 800334e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003350:	4a6f      	ldr	r2, [pc, #444]	; (8003510 <HAL_RCC_OscConfig+0x4d0>)
 8003352:	f043 0301 	orr.w	r3, r3, #1
 8003356:	6713      	str	r3, [r2, #112]	; 0x70
 8003358:	e02d      	b.n	80033b6 <HAL_RCC_OscConfig+0x376>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	689b      	ldr	r3, [r3, #8]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d10c      	bne.n	800337c <HAL_RCC_OscConfig+0x33c>
 8003362:	4b6b      	ldr	r3, [pc, #428]	; (8003510 <HAL_RCC_OscConfig+0x4d0>)
 8003364:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003366:	4a6a      	ldr	r2, [pc, #424]	; (8003510 <HAL_RCC_OscConfig+0x4d0>)
 8003368:	f023 0301 	bic.w	r3, r3, #1
 800336c:	6713      	str	r3, [r2, #112]	; 0x70
 800336e:	4b68      	ldr	r3, [pc, #416]	; (8003510 <HAL_RCC_OscConfig+0x4d0>)
 8003370:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003372:	4a67      	ldr	r2, [pc, #412]	; (8003510 <HAL_RCC_OscConfig+0x4d0>)
 8003374:	f023 0304 	bic.w	r3, r3, #4
 8003378:	6713      	str	r3, [r2, #112]	; 0x70
 800337a:	e01c      	b.n	80033b6 <HAL_RCC_OscConfig+0x376>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	689b      	ldr	r3, [r3, #8]
 8003380:	2b05      	cmp	r3, #5
 8003382:	d10c      	bne.n	800339e <HAL_RCC_OscConfig+0x35e>
 8003384:	4b62      	ldr	r3, [pc, #392]	; (8003510 <HAL_RCC_OscConfig+0x4d0>)
 8003386:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003388:	4a61      	ldr	r2, [pc, #388]	; (8003510 <HAL_RCC_OscConfig+0x4d0>)
 800338a:	f043 0304 	orr.w	r3, r3, #4
 800338e:	6713      	str	r3, [r2, #112]	; 0x70
 8003390:	4b5f      	ldr	r3, [pc, #380]	; (8003510 <HAL_RCC_OscConfig+0x4d0>)
 8003392:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003394:	4a5e      	ldr	r2, [pc, #376]	; (8003510 <HAL_RCC_OscConfig+0x4d0>)
 8003396:	f043 0301 	orr.w	r3, r3, #1
 800339a:	6713      	str	r3, [r2, #112]	; 0x70
 800339c:	e00b      	b.n	80033b6 <HAL_RCC_OscConfig+0x376>
 800339e:	4b5c      	ldr	r3, [pc, #368]	; (8003510 <HAL_RCC_OscConfig+0x4d0>)
 80033a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033a2:	4a5b      	ldr	r2, [pc, #364]	; (8003510 <HAL_RCC_OscConfig+0x4d0>)
 80033a4:	f023 0301 	bic.w	r3, r3, #1
 80033a8:	6713      	str	r3, [r2, #112]	; 0x70
 80033aa:	4b59      	ldr	r3, [pc, #356]	; (8003510 <HAL_RCC_OscConfig+0x4d0>)
 80033ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033ae:	4a58      	ldr	r2, [pc, #352]	; (8003510 <HAL_RCC_OscConfig+0x4d0>)
 80033b0:	f023 0304 	bic.w	r3, r3, #4
 80033b4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	689b      	ldr	r3, [r3, #8]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d015      	beq.n	80033ea <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033be:	f7fd fef3 	bl	80011a8 <HAL_GetTick>
 80033c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033c4:	e00a      	b.n	80033dc <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033c6:	f7fd feef 	bl	80011a8 <HAL_GetTick>
 80033ca:	4602      	mov	r2, r0
 80033cc:	693b      	ldr	r3, [r7, #16]
 80033ce:	1ad3      	subs	r3, r2, r3
 80033d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d901      	bls.n	80033dc <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80033d8:	2303      	movs	r3, #3
 80033da:	e0d8      	b.n	800358e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033dc:	4b4c      	ldr	r3, [pc, #304]	; (8003510 <HAL_RCC_OscConfig+0x4d0>)
 80033de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033e0:	f003 0302 	and.w	r3, r3, #2
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d0ee      	beq.n	80033c6 <HAL_RCC_OscConfig+0x386>
 80033e8:	e014      	b.n	8003414 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033ea:	f7fd fedd 	bl	80011a8 <HAL_GetTick>
 80033ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033f0:	e00a      	b.n	8003408 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033f2:	f7fd fed9 	bl	80011a8 <HAL_GetTick>
 80033f6:	4602      	mov	r2, r0
 80033f8:	693b      	ldr	r3, [r7, #16]
 80033fa:	1ad3      	subs	r3, r2, r3
 80033fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003400:	4293      	cmp	r3, r2
 8003402:	d901      	bls.n	8003408 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003404:	2303      	movs	r3, #3
 8003406:	e0c2      	b.n	800358e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003408:	4b41      	ldr	r3, [pc, #260]	; (8003510 <HAL_RCC_OscConfig+0x4d0>)
 800340a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800340c:	f003 0302 	and.w	r3, r3, #2
 8003410:	2b00      	cmp	r3, #0
 8003412:	d1ee      	bne.n	80033f2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003414:	7dfb      	ldrb	r3, [r7, #23]
 8003416:	2b01      	cmp	r3, #1
 8003418:	d105      	bne.n	8003426 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800341a:	4b3d      	ldr	r3, [pc, #244]	; (8003510 <HAL_RCC_OscConfig+0x4d0>)
 800341c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800341e:	4a3c      	ldr	r2, [pc, #240]	; (8003510 <HAL_RCC_OscConfig+0x4d0>)
 8003420:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003424:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	699b      	ldr	r3, [r3, #24]
 800342a:	2b00      	cmp	r3, #0
 800342c:	f000 80ae 	beq.w	800358c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003430:	4b37      	ldr	r3, [pc, #220]	; (8003510 <HAL_RCC_OscConfig+0x4d0>)
 8003432:	689b      	ldr	r3, [r3, #8]
 8003434:	f003 030c 	and.w	r3, r3, #12
 8003438:	2b08      	cmp	r3, #8
 800343a:	d06d      	beq.n	8003518 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	699b      	ldr	r3, [r3, #24]
 8003440:	2b02      	cmp	r3, #2
 8003442:	d14b      	bne.n	80034dc <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003444:	4b32      	ldr	r3, [pc, #200]	; (8003510 <HAL_RCC_OscConfig+0x4d0>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a31      	ldr	r2, [pc, #196]	; (8003510 <HAL_RCC_OscConfig+0x4d0>)
 800344a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800344e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003450:	f7fd feaa 	bl	80011a8 <HAL_GetTick>
 8003454:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003456:	e008      	b.n	800346a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003458:	f7fd fea6 	bl	80011a8 <HAL_GetTick>
 800345c:	4602      	mov	r2, r0
 800345e:	693b      	ldr	r3, [r7, #16]
 8003460:	1ad3      	subs	r3, r2, r3
 8003462:	2b02      	cmp	r3, #2
 8003464:	d901      	bls.n	800346a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003466:	2303      	movs	r3, #3
 8003468:	e091      	b.n	800358e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800346a:	4b29      	ldr	r3, [pc, #164]	; (8003510 <HAL_RCC_OscConfig+0x4d0>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003472:	2b00      	cmp	r3, #0
 8003474:	d1f0      	bne.n	8003458 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	69da      	ldr	r2, [r3, #28]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6a1b      	ldr	r3, [r3, #32]
 800347e:	431a      	orrs	r2, r3
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003484:	019b      	lsls	r3, r3, #6
 8003486:	431a      	orrs	r2, r3
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800348c:	085b      	lsrs	r3, r3, #1
 800348e:	3b01      	subs	r3, #1
 8003490:	041b      	lsls	r3, r3, #16
 8003492:	431a      	orrs	r2, r3
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003498:	061b      	lsls	r3, r3, #24
 800349a:	431a      	orrs	r2, r3
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034a0:	071b      	lsls	r3, r3, #28
 80034a2:	491b      	ldr	r1, [pc, #108]	; (8003510 <HAL_RCC_OscConfig+0x4d0>)
 80034a4:	4313      	orrs	r3, r2
 80034a6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034a8:	4b19      	ldr	r3, [pc, #100]	; (8003510 <HAL_RCC_OscConfig+0x4d0>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a18      	ldr	r2, [pc, #96]	; (8003510 <HAL_RCC_OscConfig+0x4d0>)
 80034ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80034b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034b4:	f7fd fe78 	bl	80011a8 <HAL_GetTick>
 80034b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034ba:	e008      	b.n	80034ce <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034bc:	f7fd fe74 	bl	80011a8 <HAL_GetTick>
 80034c0:	4602      	mov	r2, r0
 80034c2:	693b      	ldr	r3, [r7, #16]
 80034c4:	1ad3      	subs	r3, r2, r3
 80034c6:	2b02      	cmp	r3, #2
 80034c8:	d901      	bls.n	80034ce <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80034ca:	2303      	movs	r3, #3
 80034cc:	e05f      	b.n	800358e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034ce:	4b10      	ldr	r3, [pc, #64]	; (8003510 <HAL_RCC_OscConfig+0x4d0>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d0f0      	beq.n	80034bc <HAL_RCC_OscConfig+0x47c>
 80034da:	e057      	b.n	800358c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034dc:	4b0c      	ldr	r3, [pc, #48]	; (8003510 <HAL_RCC_OscConfig+0x4d0>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a0b      	ldr	r2, [pc, #44]	; (8003510 <HAL_RCC_OscConfig+0x4d0>)
 80034e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80034e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034e8:	f7fd fe5e 	bl	80011a8 <HAL_GetTick>
 80034ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034ee:	e008      	b.n	8003502 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034f0:	f7fd fe5a 	bl	80011a8 <HAL_GetTick>
 80034f4:	4602      	mov	r2, r0
 80034f6:	693b      	ldr	r3, [r7, #16]
 80034f8:	1ad3      	subs	r3, r2, r3
 80034fa:	2b02      	cmp	r3, #2
 80034fc:	d901      	bls.n	8003502 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80034fe:	2303      	movs	r3, #3
 8003500:	e045      	b.n	800358e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003502:	4b03      	ldr	r3, [pc, #12]	; (8003510 <HAL_RCC_OscConfig+0x4d0>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800350a:	2b00      	cmp	r3, #0
 800350c:	d1f0      	bne.n	80034f0 <HAL_RCC_OscConfig+0x4b0>
 800350e:	e03d      	b.n	800358c <HAL_RCC_OscConfig+0x54c>
 8003510:	40023800 	.word	0x40023800
 8003514:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003518:	4b1f      	ldr	r3, [pc, #124]	; (8003598 <HAL_RCC_OscConfig+0x558>)
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	699b      	ldr	r3, [r3, #24]
 8003522:	2b01      	cmp	r3, #1
 8003524:	d030      	beq.n	8003588 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003530:	429a      	cmp	r2, r3
 8003532:	d129      	bne.n	8003588 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800353e:	429a      	cmp	r2, r3
 8003540:	d122      	bne.n	8003588 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003542:	68fa      	ldr	r2, [r7, #12]
 8003544:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003548:	4013      	ands	r3, r2
 800354a:	687a      	ldr	r2, [r7, #4]
 800354c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800354e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003550:	4293      	cmp	r3, r2
 8003552:	d119      	bne.n	8003588 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800355e:	085b      	lsrs	r3, r3, #1
 8003560:	3b01      	subs	r3, #1
 8003562:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003564:	429a      	cmp	r2, r3
 8003566:	d10f      	bne.n	8003588 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003572:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003574:	429a      	cmp	r2, r3
 8003576:	d107      	bne.n	8003588 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003582:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003584:	429a      	cmp	r2, r3
 8003586:	d001      	beq.n	800358c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003588:	2301      	movs	r3, #1
 800358a:	e000      	b.n	800358e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 800358c:	2300      	movs	r3, #0
}
 800358e:	4618      	mov	r0, r3
 8003590:	3718      	adds	r7, #24
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}
 8003596:	bf00      	nop
 8003598:	40023800 	.word	0x40023800

0800359c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b084      	sub	sp, #16
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
 80035a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80035a6:	2300      	movs	r3, #0
 80035a8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d101      	bne.n	80035b4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80035b0:	2301      	movs	r3, #1
 80035b2:	e0d0      	b.n	8003756 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80035b4:	4b6a      	ldr	r3, [pc, #424]	; (8003760 <HAL_RCC_ClockConfig+0x1c4>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f003 030f 	and.w	r3, r3, #15
 80035bc:	683a      	ldr	r2, [r7, #0]
 80035be:	429a      	cmp	r2, r3
 80035c0:	d910      	bls.n	80035e4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035c2:	4b67      	ldr	r3, [pc, #412]	; (8003760 <HAL_RCC_ClockConfig+0x1c4>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f023 020f 	bic.w	r2, r3, #15
 80035ca:	4965      	ldr	r1, [pc, #404]	; (8003760 <HAL_RCC_ClockConfig+0x1c4>)
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	4313      	orrs	r3, r2
 80035d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035d2:	4b63      	ldr	r3, [pc, #396]	; (8003760 <HAL_RCC_ClockConfig+0x1c4>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f003 030f 	and.w	r3, r3, #15
 80035da:	683a      	ldr	r2, [r7, #0]
 80035dc:	429a      	cmp	r2, r3
 80035de:	d001      	beq.n	80035e4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80035e0:	2301      	movs	r3, #1
 80035e2:	e0b8      	b.n	8003756 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f003 0302 	and.w	r3, r3, #2
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d020      	beq.n	8003632 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f003 0304 	and.w	r3, r3, #4
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d005      	beq.n	8003608 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80035fc:	4b59      	ldr	r3, [pc, #356]	; (8003764 <HAL_RCC_ClockConfig+0x1c8>)
 80035fe:	689b      	ldr	r3, [r3, #8]
 8003600:	4a58      	ldr	r2, [pc, #352]	; (8003764 <HAL_RCC_ClockConfig+0x1c8>)
 8003602:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003606:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f003 0308 	and.w	r3, r3, #8
 8003610:	2b00      	cmp	r3, #0
 8003612:	d005      	beq.n	8003620 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003614:	4b53      	ldr	r3, [pc, #332]	; (8003764 <HAL_RCC_ClockConfig+0x1c8>)
 8003616:	689b      	ldr	r3, [r3, #8]
 8003618:	4a52      	ldr	r2, [pc, #328]	; (8003764 <HAL_RCC_ClockConfig+0x1c8>)
 800361a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800361e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003620:	4b50      	ldr	r3, [pc, #320]	; (8003764 <HAL_RCC_ClockConfig+0x1c8>)
 8003622:	689b      	ldr	r3, [r3, #8]
 8003624:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	689b      	ldr	r3, [r3, #8]
 800362c:	494d      	ldr	r1, [pc, #308]	; (8003764 <HAL_RCC_ClockConfig+0x1c8>)
 800362e:	4313      	orrs	r3, r2
 8003630:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f003 0301 	and.w	r3, r3, #1
 800363a:	2b00      	cmp	r3, #0
 800363c:	d040      	beq.n	80036c0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	2b01      	cmp	r3, #1
 8003644:	d107      	bne.n	8003656 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003646:	4b47      	ldr	r3, [pc, #284]	; (8003764 <HAL_RCC_ClockConfig+0x1c8>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800364e:	2b00      	cmp	r3, #0
 8003650:	d115      	bne.n	800367e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003652:	2301      	movs	r3, #1
 8003654:	e07f      	b.n	8003756 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	2b02      	cmp	r3, #2
 800365c:	d107      	bne.n	800366e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800365e:	4b41      	ldr	r3, [pc, #260]	; (8003764 <HAL_RCC_ClockConfig+0x1c8>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003666:	2b00      	cmp	r3, #0
 8003668:	d109      	bne.n	800367e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800366a:	2301      	movs	r3, #1
 800366c:	e073      	b.n	8003756 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800366e:	4b3d      	ldr	r3, [pc, #244]	; (8003764 <HAL_RCC_ClockConfig+0x1c8>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f003 0302 	and.w	r3, r3, #2
 8003676:	2b00      	cmp	r3, #0
 8003678:	d101      	bne.n	800367e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800367a:	2301      	movs	r3, #1
 800367c:	e06b      	b.n	8003756 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800367e:	4b39      	ldr	r3, [pc, #228]	; (8003764 <HAL_RCC_ClockConfig+0x1c8>)
 8003680:	689b      	ldr	r3, [r3, #8]
 8003682:	f023 0203 	bic.w	r2, r3, #3
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	4936      	ldr	r1, [pc, #216]	; (8003764 <HAL_RCC_ClockConfig+0x1c8>)
 800368c:	4313      	orrs	r3, r2
 800368e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003690:	f7fd fd8a 	bl	80011a8 <HAL_GetTick>
 8003694:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003696:	e00a      	b.n	80036ae <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003698:	f7fd fd86 	bl	80011a8 <HAL_GetTick>
 800369c:	4602      	mov	r2, r0
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	1ad3      	subs	r3, r2, r3
 80036a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d901      	bls.n	80036ae <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80036aa:	2303      	movs	r3, #3
 80036ac:	e053      	b.n	8003756 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036ae:	4b2d      	ldr	r3, [pc, #180]	; (8003764 <HAL_RCC_ClockConfig+0x1c8>)
 80036b0:	689b      	ldr	r3, [r3, #8]
 80036b2:	f003 020c 	and.w	r2, r3, #12
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	009b      	lsls	r3, r3, #2
 80036bc:	429a      	cmp	r2, r3
 80036be:	d1eb      	bne.n	8003698 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80036c0:	4b27      	ldr	r3, [pc, #156]	; (8003760 <HAL_RCC_ClockConfig+0x1c4>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f003 030f 	and.w	r3, r3, #15
 80036c8:	683a      	ldr	r2, [r7, #0]
 80036ca:	429a      	cmp	r2, r3
 80036cc:	d210      	bcs.n	80036f0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036ce:	4b24      	ldr	r3, [pc, #144]	; (8003760 <HAL_RCC_ClockConfig+0x1c4>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f023 020f 	bic.w	r2, r3, #15
 80036d6:	4922      	ldr	r1, [pc, #136]	; (8003760 <HAL_RCC_ClockConfig+0x1c4>)
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	4313      	orrs	r3, r2
 80036dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036de:	4b20      	ldr	r3, [pc, #128]	; (8003760 <HAL_RCC_ClockConfig+0x1c4>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f003 030f 	and.w	r3, r3, #15
 80036e6:	683a      	ldr	r2, [r7, #0]
 80036e8:	429a      	cmp	r2, r3
 80036ea:	d001      	beq.n	80036f0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80036ec:	2301      	movs	r3, #1
 80036ee:	e032      	b.n	8003756 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f003 0304 	and.w	r3, r3, #4
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d008      	beq.n	800370e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036fc:	4b19      	ldr	r3, [pc, #100]	; (8003764 <HAL_RCC_ClockConfig+0x1c8>)
 80036fe:	689b      	ldr	r3, [r3, #8]
 8003700:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	68db      	ldr	r3, [r3, #12]
 8003708:	4916      	ldr	r1, [pc, #88]	; (8003764 <HAL_RCC_ClockConfig+0x1c8>)
 800370a:	4313      	orrs	r3, r2
 800370c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f003 0308 	and.w	r3, r3, #8
 8003716:	2b00      	cmp	r3, #0
 8003718:	d009      	beq.n	800372e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800371a:	4b12      	ldr	r3, [pc, #72]	; (8003764 <HAL_RCC_ClockConfig+0x1c8>)
 800371c:	689b      	ldr	r3, [r3, #8]
 800371e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	691b      	ldr	r3, [r3, #16]
 8003726:	00db      	lsls	r3, r3, #3
 8003728:	490e      	ldr	r1, [pc, #56]	; (8003764 <HAL_RCC_ClockConfig+0x1c8>)
 800372a:	4313      	orrs	r3, r2
 800372c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800372e:	f000 f821 	bl	8003774 <HAL_RCC_GetSysClockFreq>
 8003732:	4601      	mov	r1, r0
 8003734:	4b0b      	ldr	r3, [pc, #44]	; (8003764 <HAL_RCC_ClockConfig+0x1c8>)
 8003736:	689b      	ldr	r3, [r3, #8]
 8003738:	091b      	lsrs	r3, r3, #4
 800373a:	f003 030f 	and.w	r3, r3, #15
 800373e:	4a0a      	ldr	r2, [pc, #40]	; (8003768 <HAL_RCC_ClockConfig+0x1cc>)
 8003740:	5cd3      	ldrb	r3, [r2, r3]
 8003742:	fa21 f303 	lsr.w	r3, r1, r3
 8003746:	4a09      	ldr	r2, [pc, #36]	; (800376c <HAL_RCC_ClockConfig+0x1d0>)
 8003748:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800374a:	4b09      	ldr	r3, [pc, #36]	; (8003770 <HAL_RCC_ClockConfig+0x1d4>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4618      	mov	r0, r3
 8003750:	f7fd fb7c 	bl	8000e4c <HAL_InitTick>

  return HAL_OK;
 8003754:	2300      	movs	r3, #0
}
 8003756:	4618      	mov	r0, r3
 8003758:	3710      	adds	r7, #16
 800375a:	46bd      	mov	sp, r7
 800375c:	bd80      	pop	{r7, pc}
 800375e:	bf00      	nop
 8003760:	40023c00 	.word	0x40023c00
 8003764:	40023800 	.word	0x40023800
 8003768:	0801b8dc 	.word	0x0801b8dc
 800376c:	20000000 	.word	0x20000000
 8003770:	20000004 	.word	0x20000004

08003774 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003774:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003776:	b085      	sub	sp, #20
 8003778:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800377a:	2300      	movs	r3, #0
 800377c:	607b      	str	r3, [r7, #4]
 800377e:	2300      	movs	r3, #0
 8003780:	60fb      	str	r3, [r7, #12]
 8003782:	2300      	movs	r3, #0
 8003784:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8003786:	2300      	movs	r3, #0
 8003788:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800378a:	4b63      	ldr	r3, [pc, #396]	; (8003918 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800378c:	689b      	ldr	r3, [r3, #8]
 800378e:	f003 030c 	and.w	r3, r3, #12
 8003792:	2b04      	cmp	r3, #4
 8003794:	d007      	beq.n	80037a6 <HAL_RCC_GetSysClockFreq+0x32>
 8003796:	2b08      	cmp	r3, #8
 8003798:	d008      	beq.n	80037ac <HAL_RCC_GetSysClockFreq+0x38>
 800379a:	2b00      	cmp	r3, #0
 800379c:	f040 80b4 	bne.w	8003908 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80037a0:	4b5e      	ldr	r3, [pc, #376]	; (800391c <HAL_RCC_GetSysClockFreq+0x1a8>)
 80037a2:	60bb      	str	r3, [r7, #8]
      break;
 80037a4:	e0b3      	b.n	800390e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80037a6:	4b5e      	ldr	r3, [pc, #376]	; (8003920 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80037a8:	60bb      	str	r3, [r7, #8]
      break;
 80037aa:	e0b0      	b.n	800390e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80037ac:	4b5a      	ldr	r3, [pc, #360]	; (8003918 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80037b4:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80037b6:	4b58      	ldr	r3, [pc, #352]	; (8003918 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d04a      	beq.n	8003858 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037c2:	4b55      	ldr	r3, [pc, #340]	; (8003918 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	099b      	lsrs	r3, r3, #6
 80037c8:	f04f 0400 	mov.w	r4, #0
 80037cc:	f240 11ff 	movw	r1, #511	; 0x1ff
 80037d0:	f04f 0200 	mov.w	r2, #0
 80037d4:	ea03 0501 	and.w	r5, r3, r1
 80037d8:	ea04 0602 	and.w	r6, r4, r2
 80037dc:	4629      	mov	r1, r5
 80037de:	4632      	mov	r2, r6
 80037e0:	f04f 0300 	mov.w	r3, #0
 80037e4:	f04f 0400 	mov.w	r4, #0
 80037e8:	0154      	lsls	r4, r2, #5
 80037ea:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80037ee:	014b      	lsls	r3, r1, #5
 80037f0:	4619      	mov	r1, r3
 80037f2:	4622      	mov	r2, r4
 80037f4:	1b49      	subs	r1, r1, r5
 80037f6:	eb62 0206 	sbc.w	r2, r2, r6
 80037fa:	f04f 0300 	mov.w	r3, #0
 80037fe:	f04f 0400 	mov.w	r4, #0
 8003802:	0194      	lsls	r4, r2, #6
 8003804:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003808:	018b      	lsls	r3, r1, #6
 800380a:	1a5b      	subs	r3, r3, r1
 800380c:	eb64 0402 	sbc.w	r4, r4, r2
 8003810:	f04f 0100 	mov.w	r1, #0
 8003814:	f04f 0200 	mov.w	r2, #0
 8003818:	00e2      	lsls	r2, r4, #3
 800381a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800381e:	00d9      	lsls	r1, r3, #3
 8003820:	460b      	mov	r3, r1
 8003822:	4614      	mov	r4, r2
 8003824:	195b      	adds	r3, r3, r5
 8003826:	eb44 0406 	adc.w	r4, r4, r6
 800382a:	f04f 0100 	mov.w	r1, #0
 800382e:	f04f 0200 	mov.w	r2, #0
 8003832:	0262      	lsls	r2, r4, #9
 8003834:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003838:	0259      	lsls	r1, r3, #9
 800383a:	460b      	mov	r3, r1
 800383c:	4614      	mov	r4, r2
 800383e:	4618      	mov	r0, r3
 8003840:	4621      	mov	r1, r4
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	f04f 0400 	mov.w	r4, #0
 8003848:	461a      	mov	r2, r3
 800384a:	4623      	mov	r3, r4
 800384c:	f7fc fd60 	bl	8000310 <__aeabi_uldivmod>
 8003850:	4603      	mov	r3, r0
 8003852:	460c      	mov	r4, r1
 8003854:	60fb      	str	r3, [r7, #12]
 8003856:	e049      	b.n	80038ec <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003858:	4b2f      	ldr	r3, [pc, #188]	; (8003918 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	099b      	lsrs	r3, r3, #6
 800385e:	f04f 0400 	mov.w	r4, #0
 8003862:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003866:	f04f 0200 	mov.w	r2, #0
 800386a:	ea03 0501 	and.w	r5, r3, r1
 800386e:	ea04 0602 	and.w	r6, r4, r2
 8003872:	4629      	mov	r1, r5
 8003874:	4632      	mov	r2, r6
 8003876:	f04f 0300 	mov.w	r3, #0
 800387a:	f04f 0400 	mov.w	r4, #0
 800387e:	0154      	lsls	r4, r2, #5
 8003880:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003884:	014b      	lsls	r3, r1, #5
 8003886:	4619      	mov	r1, r3
 8003888:	4622      	mov	r2, r4
 800388a:	1b49      	subs	r1, r1, r5
 800388c:	eb62 0206 	sbc.w	r2, r2, r6
 8003890:	f04f 0300 	mov.w	r3, #0
 8003894:	f04f 0400 	mov.w	r4, #0
 8003898:	0194      	lsls	r4, r2, #6
 800389a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800389e:	018b      	lsls	r3, r1, #6
 80038a0:	1a5b      	subs	r3, r3, r1
 80038a2:	eb64 0402 	sbc.w	r4, r4, r2
 80038a6:	f04f 0100 	mov.w	r1, #0
 80038aa:	f04f 0200 	mov.w	r2, #0
 80038ae:	00e2      	lsls	r2, r4, #3
 80038b0:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80038b4:	00d9      	lsls	r1, r3, #3
 80038b6:	460b      	mov	r3, r1
 80038b8:	4614      	mov	r4, r2
 80038ba:	195b      	adds	r3, r3, r5
 80038bc:	eb44 0406 	adc.w	r4, r4, r6
 80038c0:	f04f 0100 	mov.w	r1, #0
 80038c4:	f04f 0200 	mov.w	r2, #0
 80038c8:	02a2      	lsls	r2, r4, #10
 80038ca:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80038ce:	0299      	lsls	r1, r3, #10
 80038d0:	460b      	mov	r3, r1
 80038d2:	4614      	mov	r4, r2
 80038d4:	4618      	mov	r0, r3
 80038d6:	4621      	mov	r1, r4
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	f04f 0400 	mov.w	r4, #0
 80038de:	461a      	mov	r2, r3
 80038e0:	4623      	mov	r3, r4
 80038e2:	f7fc fd15 	bl	8000310 <__aeabi_uldivmod>
 80038e6:	4603      	mov	r3, r0
 80038e8:	460c      	mov	r4, r1
 80038ea:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80038ec:	4b0a      	ldr	r3, [pc, #40]	; (8003918 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	0c1b      	lsrs	r3, r3, #16
 80038f2:	f003 0303 	and.w	r3, r3, #3
 80038f6:	3301      	adds	r3, #1
 80038f8:	005b      	lsls	r3, r3, #1
 80038fa:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 80038fc:	68fa      	ldr	r2, [r7, #12]
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	fbb2 f3f3 	udiv	r3, r2, r3
 8003904:	60bb      	str	r3, [r7, #8]
      break;
 8003906:	e002      	b.n	800390e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003908:	4b04      	ldr	r3, [pc, #16]	; (800391c <HAL_RCC_GetSysClockFreq+0x1a8>)
 800390a:	60bb      	str	r3, [r7, #8]
      break;
 800390c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800390e:	68bb      	ldr	r3, [r7, #8]
}
 8003910:	4618      	mov	r0, r3
 8003912:	3714      	adds	r7, #20
 8003914:	46bd      	mov	sp, r7
 8003916:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003918:	40023800 	.word	0x40023800
 800391c:	00f42400 	.word	0x00f42400
 8003920:	007a1200 	.word	0x007a1200

08003924 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003924:	b480      	push	{r7}
 8003926:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003928:	4b03      	ldr	r3, [pc, #12]	; (8003938 <HAL_RCC_GetHCLKFreq+0x14>)
 800392a:	681b      	ldr	r3, [r3, #0]
}
 800392c:	4618      	mov	r0, r3
 800392e:	46bd      	mov	sp, r7
 8003930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003934:	4770      	bx	lr
 8003936:	bf00      	nop
 8003938:	20000000 	.word	0x20000000

0800393c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003940:	f7ff fff0 	bl	8003924 <HAL_RCC_GetHCLKFreq>
 8003944:	4601      	mov	r1, r0
 8003946:	4b05      	ldr	r3, [pc, #20]	; (800395c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003948:	689b      	ldr	r3, [r3, #8]
 800394a:	0a9b      	lsrs	r3, r3, #10
 800394c:	f003 0307 	and.w	r3, r3, #7
 8003950:	4a03      	ldr	r2, [pc, #12]	; (8003960 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003952:	5cd3      	ldrb	r3, [r2, r3]
 8003954:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003958:	4618      	mov	r0, r3
 800395a:	bd80      	pop	{r7, pc}
 800395c:	40023800 	.word	0x40023800
 8003960:	0801b8ec 	.word	0x0801b8ec

08003964 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003968:	f7ff ffdc 	bl	8003924 <HAL_RCC_GetHCLKFreq>
 800396c:	4601      	mov	r1, r0
 800396e:	4b05      	ldr	r3, [pc, #20]	; (8003984 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003970:	689b      	ldr	r3, [r3, #8]
 8003972:	0b5b      	lsrs	r3, r3, #13
 8003974:	f003 0307 	and.w	r3, r3, #7
 8003978:	4a03      	ldr	r2, [pc, #12]	; (8003988 <HAL_RCC_GetPCLK2Freq+0x24>)
 800397a:	5cd3      	ldrb	r3, [r2, r3]
 800397c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003980:	4618      	mov	r0, r3
 8003982:	bd80      	pop	{r7, pc}
 8003984:	40023800 	.word	0x40023800
 8003988:	0801b8ec 	.word	0x0801b8ec

0800398c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800398c:	b480      	push	{r7}
 800398e:	b083      	sub	sp, #12
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
 8003994:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	220f      	movs	r2, #15
 800399a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800399c:	4b12      	ldr	r3, [pc, #72]	; (80039e8 <HAL_RCC_GetClockConfig+0x5c>)
 800399e:	689b      	ldr	r3, [r3, #8]
 80039a0:	f003 0203 	and.w	r2, r3, #3
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80039a8:	4b0f      	ldr	r3, [pc, #60]	; (80039e8 <HAL_RCC_GetClockConfig+0x5c>)
 80039aa:	689b      	ldr	r3, [r3, #8]
 80039ac:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80039b4:	4b0c      	ldr	r3, [pc, #48]	; (80039e8 <HAL_RCC_GetClockConfig+0x5c>)
 80039b6:	689b      	ldr	r3, [r3, #8]
 80039b8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80039c0:	4b09      	ldr	r3, [pc, #36]	; (80039e8 <HAL_RCC_GetClockConfig+0x5c>)
 80039c2:	689b      	ldr	r3, [r3, #8]
 80039c4:	08db      	lsrs	r3, r3, #3
 80039c6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80039ce:	4b07      	ldr	r3, [pc, #28]	; (80039ec <HAL_RCC_GetClockConfig+0x60>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f003 020f 	and.w	r2, r3, #15
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	601a      	str	r2, [r3, #0]
}
 80039da:	bf00      	nop
 80039dc:	370c      	adds	r7, #12
 80039de:	46bd      	mov	sp, r7
 80039e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e4:	4770      	bx	lr
 80039e6:	bf00      	nop
 80039e8:	40023800 	.word	0x40023800
 80039ec:	40023c00 	.word	0x40023c00

080039f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b088      	sub	sp, #32
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80039f8:	2300      	movs	r3, #0
 80039fa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80039fc:	2300      	movs	r3, #0
 80039fe:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003a00:	2300      	movs	r3, #0
 8003a02:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003a04:	2300      	movs	r3, #0
 8003a06:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003a08:	2300      	movs	r3, #0
 8003a0a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f003 0301 	and.w	r3, r3, #1
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d012      	beq.n	8003a3e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003a18:	4b69      	ldr	r3, [pc, #420]	; (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a1a:	689b      	ldr	r3, [r3, #8]
 8003a1c:	4a68      	ldr	r2, [pc, #416]	; (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a1e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003a22:	6093      	str	r3, [r2, #8]
 8003a24:	4b66      	ldr	r3, [pc, #408]	; (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a26:	689a      	ldr	r2, [r3, #8]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a2c:	4964      	ldr	r1, [pc, #400]	; (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d101      	bne.n	8003a3e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d017      	beq.n	8003a7a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003a4a:	4b5d      	ldr	r3, [pc, #372]	; (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a50:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a58:	4959      	ldr	r1, [pc, #356]	; (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a64:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a68:	d101      	bne.n	8003a6e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d101      	bne.n	8003a7a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003a76:	2301      	movs	r3, #1
 8003a78:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d017      	beq.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003a86:	4b4e      	ldr	r3, [pc, #312]	; (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a88:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a8c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a94:	494a      	ldr	r1, [pc, #296]	; (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a96:	4313      	orrs	r3, r2
 8003a98:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aa0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003aa4:	d101      	bne.n	8003aaa <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d101      	bne.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d001      	beq.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f003 0320 	and.w	r3, r3, #32
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	f000 808b 	beq.w	8003bea <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003ad4:	4b3a      	ldr	r3, [pc, #232]	; (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ad8:	4a39      	ldr	r2, [pc, #228]	; (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ada:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ade:	6413      	str	r3, [r2, #64]	; 0x40
 8003ae0:	4b37      	ldr	r3, [pc, #220]	; (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ae4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ae8:	60bb      	str	r3, [r7, #8]
 8003aea:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003aec:	4b35      	ldr	r3, [pc, #212]	; (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a34      	ldr	r2, [pc, #208]	; (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003af2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003af6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003af8:	f7fd fb56 	bl	80011a8 <HAL_GetTick>
 8003afc:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003afe:	e008      	b.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b00:	f7fd fb52 	bl	80011a8 <HAL_GetTick>
 8003b04:	4602      	mov	r2, r0
 8003b06:	697b      	ldr	r3, [r7, #20]
 8003b08:	1ad3      	subs	r3, r2, r3
 8003b0a:	2b64      	cmp	r3, #100	; 0x64
 8003b0c:	d901      	bls.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003b0e:	2303      	movs	r3, #3
 8003b10:	e38f      	b.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003b12:	4b2c      	ldr	r3, [pc, #176]	; (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d0f0      	beq.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003b1e:	4b28      	ldr	r3, [pc, #160]	; (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b26:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003b28:	693b      	ldr	r3, [r7, #16]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d035      	beq.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b36:	693a      	ldr	r2, [r7, #16]
 8003b38:	429a      	cmp	r2, r3
 8003b3a:	d02e      	beq.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003b3c:	4b20      	ldr	r3, [pc, #128]	; (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b44:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003b46:	4b1e      	ldr	r3, [pc, #120]	; (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b4a:	4a1d      	ldr	r2, [pc, #116]	; (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b50:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003b52:	4b1b      	ldr	r3, [pc, #108]	; (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b56:	4a1a      	ldr	r2, [pc, #104]	; (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b5c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003b5e:	4a18      	ldr	r2, [pc, #96]	; (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b60:	693b      	ldr	r3, [r7, #16]
 8003b62:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003b64:	4b16      	ldr	r3, [pc, #88]	; (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b68:	f003 0301 	and.w	r3, r3, #1
 8003b6c:	2b01      	cmp	r3, #1
 8003b6e:	d114      	bne.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b70:	f7fd fb1a 	bl	80011a8 <HAL_GetTick>
 8003b74:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b76:	e00a      	b.n	8003b8e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b78:	f7fd fb16 	bl	80011a8 <HAL_GetTick>
 8003b7c:	4602      	mov	r2, r0
 8003b7e:	697b      	ldr	r3, [r7, #20]
 8003b80:	1ad3      	subs	r3, r2, r3
 8003b82:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d901      	bls.n	8003b8e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003b8a:	2303      	movs	r3, #3
 8003b8c:	e351      	b.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b8e:	4b0c      	ldr	r3, [pc, #48]	; (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b92:	f003 0302 	and.w	r3, r3, #2
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d0ee      	beq.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ba2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ba6:	d111      	bne.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003ba8:	4b05      	ldr	r3, [pc, #20]	; (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003baa:	689b      	ldr	r3, [r3, #8]
 8003bac:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003bb4:	4b04      	ldr	r3, [pc, #16]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003bb6:	400b      	ands	r3, r1
 8003bb8:	4901      	ldr	r1, [pc, #4]	; (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	608b      	str	r3, [r1, #8]
 8003bbe:	e00b      	b.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003bc0:	40023800 	.word	0x40023800
 8003bc4:	40007000 	.word	0x40007000
 8003bc8:	0ffffcff 	.word	0x0ffffcff
 8003bcc:	4bb3      	ldr	r3, [pc, #716]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003bce:	689b      	ldr	r3, [r3, #8]
 8003bd0:	4ab2      	ldr	r2, [pc, #712]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003bd2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003bd6:	6093      	str	r3, [r2, #8]
 8003bd8:	4bb0      	ldr	r3, [pc, #704]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003bda:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003be0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003be4:	49ad      	ldr	r1, [pc, #692]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003be6:	4313      	orrs	r3, r2
 8003be8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f003 0310 	and.w	r3, r3, #16
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d010      	beq.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003bf6:	4ba9      	ldr	r3, [pc, #676]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003bf8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003bfc:	4aa7      	ldr	r2, [pc, #668]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003bfe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c02:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003c06:	4ba5      	ldr	r3, [pc, #660]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003c08:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c10:	49a2      	ldr	r1, [pc, #648]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003c12:	4313      	orrs	r3, r2
 8003c14:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d00a      	beq.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003c24:	4b9d      	ldr	r3, [pc, #628]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003c26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c2a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c32:	499a      	ldr	r1, [pc, #616]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003c34:	4313      	orrs	r3, r2
 8003c36:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d00a      	beq.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003c46:	4b95      	ldr	r3, [pc, #596]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003c48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c4c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003c54:	4991      	ldr	r1, [pc, #580]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003c56:	4313      	orrs	r3, r2
 8003c58:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d00a      	beq.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003c68:	4b8c      	ldr	r3, [pc, #560]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003c6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c6e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c76:	4989      	ldr	r1, [pc, #548]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d00a      	beq.n	8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003c8a:	4b84      	ldr	r3, [pc, #528]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003c8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c90:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c98:	4980      	ldr	r1, [pc, #512]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d00a      	beq.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003cac:	4b7b      	ldr	r3, [pc, #492]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003cae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cb2:	f023 0203 	bic.w	r2, r3, #3
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cba:	4978      	ldr	r1, [pc, #480]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003cbc:	4313      	orrs	r3, r2
 8003cbe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d00a      	beq.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003cce:	4b73      	ldr	r3, [pc, #460]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003cd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cd4:	f023 020c 	bic.w	r2, r3, #12
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cdc:	496f      	ldr	r1, [pc, #444]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d00a      	beq.n	8003d06 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003cf0:	4b6a      	ldr	r3, [pc, #424]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003cf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cf6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cfe:	4967      	ldr	r1, [pc, #412]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d00:	4313      	orrs	r3, r2
 8003d02:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d00a      	beq.n	8003d28 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003d12:	4b62      	ldr	r3, [pc, #392]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d18:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d20:	495e      	ldr	r1, [pc, #376]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d22:	4313      	orrs	r3, r2
 8003d24:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d00a      	beq.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003d34:	4b59      	ldr	r3, [pc, #356]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d3a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d42:	4956      	ldr	r1, [pc, #344]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d44:	4313      	orrs	r3, r2
 8003d46:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d00a      	beq.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003d56:	4b51      	ldr	r3, [pc, #324]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d5c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d64:	494d      	ldr	r1, [pc, #308]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d66:	4313      	orrs	r3, r2
 8003d68:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d00a      	beq.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003d78:	4b48      	ldr	r3, [pc, #288]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d7e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d86:	4945      	ldr	r1, [pc, #276]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d00a      	beq.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003d9a:	4b40      	ldr	r3, [pc, #256]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003da0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003da8:	493c      	ldr	r1, [pc, #240]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003daa:	4313      	orrs	r3, r2
 8003dac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d00a      	beq.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003dbc:	4b37      	ldr	r3, [pc, #220]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003dbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dc2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003dca:	4934      	ldr	r1, [pc, #208]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003dcc:	4313      	orrs	r3, r2
 8003dce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d011      	beq.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003dde:	4b2f      	ldr	r3, [pc, #188]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003de0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003de4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003dec:	492b      	ldr	r1, [pc, #172]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003dee:	4313      	orrs	r3, r2
 8003df0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003df8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003dfc:	d101      	bne.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f003 0308 	and.w	r3, r3, #8
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d001      	beq.n	8003e12 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d00a      	beq.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003e1e:	4b1f      	ldr	r3, [pc, #124]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e24:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e2c:	491b      	ldr	r1, [pc, #108]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d00b      	beq.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003e40:	4b16      	ldr	r3, [pc, #88]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e46:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e50:	4912      	ldr	r1, [pc, #72]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e52:	4313      	orrs	r3, r2
 8003e54:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d00b      	beq.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003e64:	4b0d      	ldr	r3, [pc, #52]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e6a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e74:	4909      	ldr	r1, [pc, #36]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e76:	4313      	orrs	r3, r2
 8003e78:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d00f      	beq.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003e88:	4b04      	ldr	r3, [pc, #16]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e8e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e98:	e002      	b.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8003e9a:	bf00      	nop
 8003e9c:	40023800 	.word	0x40023800
 8003ea0:	4986      	ldr	r1, [pc, #536]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d00b      	beq.n	8003ecc <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003eb4:	4b81      	ldr	r3, [pc, #516]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003eb6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003eba:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ec4:	497d      	ldr	r1, [pc, #500]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003ecc:	69fb      	ldr	r3, [r7, #28]
 8003ece:	2b01      	cmp	r3, #1
 8003ed0:	d006      	beq.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	f000 80d6 	beq.w	800408c <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003ee0:	4b76      	ldr	r3, [pc, #472]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4a75      	ldr	r2, [pc, #468]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ee6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003eea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003eec:	f7fd f95c 	bl	80011a8 <HAL_GetTick>
 8003ef0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003ef2:	e008      	b.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003ef4:	f7fd f958 	bl	80011a8 <HAL_GetTick>
 8003ef8:	4602      	mov	r2, r0
 8003efa:	697b      	ldr	r3, [r7, #20]
 8003efc:	1ad3      	subs	r3, r2, r3
 8003efe:	2b64      	cmp	r3, #100	; 0x64
 8003f00:	d901      	bls.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003f02:	2303      	movs	r3, #3
 8003f04:	e195      	b.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003f06:	4b6d      	ldr	r3, [pc, #436]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d1f0      	bne.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f003 0301 	and.w	r3, r3, #1
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d021      	beq.n	8003f62 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d11d      	bne.n	8003f62 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003f26:	4b65      	ldr	r3, [pc, #404]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f28:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f2c:	0c1b      	lsrs	r3, r3, #16
 8003f2e:	f003 0303 	and.w	r3, r3, #3
 8003f32:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003f34:	4b61      	ldr	r3, [pc, #388]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f36:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f3a:	0e1b      	lsrs	r3, r3, #24
 8003f3c:	f003 030f 	and.w	r3, r3, #15
 8003f40:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	019a      	lsls	r2, r3, #6
 8003f48:	693b      	ldr	r3, [r7, #16]
 8003f4a:	041b      	lsls	r3, r3, #16
 8003f4c:	431a      	orrs	r2, r3
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	061b      	lsls	r3, r3, #24
 8003f52:	431a      	orrs	r2, r3
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	689b      	ldr	r3, [r3, #8]
 8003f58:	071b      	lsls	r3, r3, #28
 8003f5a:	4958      	ldr	r1, [pc, #352]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d004      	beq.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f72:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f76:	d00a      	beq.n	8003f8e <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d02e      	beq.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f88:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f8c:	d129      	bne.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003f8e:	4b4b      	ldr	r3, [pc, #300]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f90:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f94:	0c1b      	lsrs	r3, r3, #16
 8003f96:	f003 0303 	and.w	r3, r3, #3
 8003f9a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003f9c:	4b47      	ldr	r3, [pc, #284]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003fa2:	0f1b      	lsrs	r3, r3, #28
 8003fa4:	f003 0307 	and.w	r3, r3, #7
 8003fa8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	019a      	lsls	r2, r3, #6
 8003fb0:	693b      	ldr	r3, [r7, #16]
 8003fb2:	041b      	lsls	r3, r3, #16
 8003fb4:	431a      	orrs	r2, r3
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	68db      	ldr	r3, [r3, #12]
 8003fba:	061b      	lsls	r3, r3, #24
 8003fbc:	431a      	orrs	r2, r3
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	071b      	lsls	r3, r3, #28
 8003fc2:	493e      	ldr	r1, [pc, #248]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003fca:	4b3c      	ldr	r3, [pc, #240]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003fcc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003fd0:	f023 021f 	bic.w	r2, r3, #31
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fd8:	3b01      	subs	r3, #1
 8003fda:	4938      	ldr	r1, [pc, #224]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003fdc:	4313      	orrs	r3, r2
 8003fde:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d01d      	beq.n	800402a <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003fee:	4b33      	ldr	r3, [pc, #204]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ff0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ff4:	0e1b      	lsrs	r3, r3, #24
 8003ff6:	f003 030f 	and.w	r3, r3, #15
 8003ffa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003ffc:	4b2f      	ldr	r3, [pc, #188]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ffe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004002:	0f1b      	lsrs	r3, r3, #28
 8004004:	f003 0307 	and.w	r3, r3, #7
 8004008:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	019a      	lsls	r2, r3, #6
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	691b      	ldr	r3, [r3, #16]
 8004014:	041b      	lsls	r3, r3, #16
 8004016:	431a      	orrs	r2, r3
 8004018:	693b      	ldr	r3, [r7, #16]
 800401a:	061b      	lsls	r3, r3, #24
 800401c:	431a      	orrs	r2, r3
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	071b      	lsls	r3, r3, #28
 8004022:	4926      	ldr	r1, [pc, #152]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004024:	4313      	orrs	r3, r2
 8004026:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004032:	2b00      	cmp	r3, #0
 8004034:	d011      	beq.n	800405a <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	019a      	lsls	r2, r3, #6
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	691b      	ldr	r3, [r3, #16]
 8004040:	041b      	lsls	r3, r3, #16
 8004042:	431a      	orrs	r2, r3
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	68db      	ldr	r3, [r3, #12]
 8004048:	061b      	lsls	r3, r3, #24
 800404a:	431a      	orrs	r2, r3
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	689b      	ldr	r3, [r3, #8]
 8004050:	071b      	lsls	r3, r3, #28
 8004052:	491a      	ldr	r1, [pc, #104]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004054:	4313      	orrs	r3, r2
 8004056:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800405a:	4b18      	ldr	r3, [pc, #96]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4a17      	ldr	r2, [pc, #92]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004060:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004064:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004066:	f7fd f89f 	bl	80011a8 <HAL_GetTick>
 800406a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800406c:	e008      	b.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800406e:	f7fd f89b 	bl	80011a8 <HAL_GetTick>
 8004072:	4602      	mov	r2, r0
 8004074:	697b      	ldr	r3, [r7, #20]
 8004076:	1ad3      	subs	r3, r2, r3
 8004078:	2b64      	cmp	r3, #100	; 0x64
 800407a:	d901      	bls.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800407c:	2303      	movs	r3, #3
 800407e:	e0d8      	b.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004080:	4b0e      	ldr	r3, [pc, #56]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004088:	2b00      	cmp	r3, #0
 800408a:	d0f0      	beq.n	800406e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800408c:	69bb      	ldr	r3, [r7, #24]
 800408e:	2b01      	cmp	r3, #1
 8004090:	f040 80ce 	bne.w	8004230 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004094:	4b09      	ldr	r3, [pc, #36]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4a08      	ldr	r2, [pc, #32]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800409a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800409e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040a0:	f7fd f882 	bl	80011a8 <HAL_GetTick>
 80040a4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80040a6:	e00b      	b.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80040a8:	f7fd f87e 	bl	80011a8 <HAL_GetTick>
 80040ac:	4602      	mov	r2, r0
 80040ae:	697b      	ldr	r3, [r7, #20]
 80040b0:	1ad3      	subs	r3, r2, r3
 80040b2:	2b64      	cmp	r3, #100	; 0x64
 80040b4:	d904      	bls.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80040b6:	2303      	movs	r3, #3
 80040b8:	e0bb      	b.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0x842>
 80040ba:	bf00      	nop
 80040bc:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80040c0:	4b5e      	ldr	r3, [pc, #376]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80040c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80040cc:	d0ec      	beq.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d003      	beq.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d009      	beq.n	80040f6 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d02e      	beq.n	800414c <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d12a      	bne.n	800414c <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80040f6:	4b51      	ldr	r3, [pc, #324]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80040f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040fc:	0c1b      	lsrs	r3, r3, #16
 80040fe:	f003 0303 	and.w	r3, r3, #3
 8004102:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004104:	4b4d      	ldr	r3, [pc, #308]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004106:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800410a:	0f1b      	lsrs	r3, r3, #28
 800410c:	f003 0307 	and.w	r3, r3, #7
 8004110:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	695b      	ldr	r3, [r3, #20]
 8004116:	019a      	lsls	r2, r3, #6
 8004118:	693b      	ldr	r3, [r7, #16]
 800411a:	041b      	lsls	r3, r3, #16
 800411c:	431a      	orrs	r2, r3
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	699b      	ldr	r3, [r3, #24]
 8004122:	061b      	lsls	r3, r3, #24
 8004124:	431a      	orrs	r2, r3
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	071b      	lsls	r3, r3, #28
 800412a:	4944      	ldr	r1, [pc, #272]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800412c:	4313      	orrs	r3, r2
 800412e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004132:	4b42      	ldr	r3, [pc, #264]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004134:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004138:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004140:	3b01      	subs	r3, #1
 8004142:	021b      	lsls	r3, r3, #8
 8004144:	493d      	ldr	r1, [pc, #244]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004146:	4313      	orrs	r3, r2
 8004148:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004154:	2b00      	cmp	r3, #0
 8004156:	d022      	beq.n	800419e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800415c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004160:	d11d      	bne.n	800419e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004162:	4b36      	ldr	r3, [pc, #216]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004164:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004168:	0e1b      	lsrs	r3, r3, #24
 800416a:	f003 030f 	and.w	r3, r3, #15
 800416e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004170:	4b32      	ldr	r3, [pc, #200]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004172:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004176:	0f1b      	lsrs	r3, r3, #28
 8004178:	f003 0307 	and.w	r3, r3, #7
 800417c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	695b      	ldr	r3, [r3, #20]
 8004182:	019a      	lsls	r2, r3, #6
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6a1b      	ldr	r3, [r3, #32]
 8004188:	041b      	lsls	r3, r3, #16
 800418a:	431a      	orrs	r2, r3
 800418c:	693b      	ldr	r3, [r7, #16]
 800418e:	061b      	lsls	r3, r3, #24
 8004190:	431a      	orrs	r2, r3
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	071b      	lsls	r3, r3, #28
 8004196:	4929      	ldr	r1, [pc, #164]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004198:	4313      	orrs	r3, r2
 800419a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f003 0308 	and.w	r3, r3, #8
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d028      	beq.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80041aa:	4b24      	ldr	r3, [pc, #144]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80041ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041b0:	0e1b      	lsrs	r3, r3, #24
 80041b2:	f003 030f 	and.w	r3, r3, #15
 80041b6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80041b8:	4b20      	ldr	r3, [pc, #128]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80041ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041be:	0c1b      	lsrs	r3, r3, #16
 80041c0:	f003 0303 	and.w	r3, r3, #3
 80041c4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	695b      	ldr	r3, [r3, #20]
 80041ca:	019a      	lsls	r2, r3, #6
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	041b      	lsls	r3, r3, #16
 80041d0:	431a      	orrs	r2, r3
 80041d2:	693b      	ldr	r3, [r7, #16]
 80041d4:	061b      	lsls	r3, r3, #24
 80041d6:	431a      	orrs	r2, r3
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	69db      	ldr	r3, [r3, #28]
 80041dc:	071b      	lsls	r3, r3, #28
 80041de:	4917      	ldr	r1, [pc, #92]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80041e0:	4313      	orrs	r3, r2
 80041e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80041e6:	4b15      	ldr	r3, [pc, #84]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80041e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80041ec:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041f4:	4911      	ldr	r1, [pc, #68]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80041f6:	4313      	orrs	r3, r2
 80041f8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80041fc:	4b0f      	ldr	r3, [pc, #60]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a0e      	ldr	r2, [pc, #56]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004202:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004206:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004208:	f7fc ffce 	bl	80011a8 <HAL_GetTick>
 800420c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800420e:	e008      	b.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004210:	f7fc ffca 	bl	80011a8 <HAL_GetTick>
 8004214:	4602      	mov	r2, r0
 8004216:	697b      	ldr	r3, [r7, #20]
 8004218:	1ad3      	subs	r3, r2, r3
 800421a:	2b64      	cmp	r3, #100	; 0x64
 800421c:	d901      	bls.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800421e:	2303      	movs	r3, #3
 8004220:	e007      	b.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004222:	4b06      	ldr	r3, [pc, #24]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800422a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800422e:	d1ef      	bne.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004230:	2300      	movs	r3, #0
}
 8004232:	4618      	mov	r0, r3
 8004234:	3720      	adds	r7, #32
 8004236:	46bd      	mov	sp, r7
 8004238:	bd80      	pop	{r7, pc}
 800423a:	bf00      	nop
 800423c:	40023800 	.word	0x40023800

08004240 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b082      	sub	sp, #8
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d101      	bne.n	8004252 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800424e:	2301      	movs	r3, #1
 8004250:	e049      	b.n	80042e6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004258:	b2db      	uxtb	r3, r3
 800425a:	2b00      	cmp	r3, #0
 800425c:	d106      	bne.n	800426c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2200      	movs	r2, #0
 8004262:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004266:	6878      	ldr	r0, [r7, #4]
 8004268:	f000 f841 	bl	80042ee <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2202      	movs	r2, #2
 8004270:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681a      	ldr	r2, [r3, #0]
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	3304      	adds	r3, #4
 800427c:	4619      	mov	r1, r3
 800427e:	4610      	mov	r0, r2
 8004280:	f000 fa00 	bl	8004684 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2201      	movs	r2, #1
 8004288:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2201      	movs	r2, #1
 8004290:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2201      	movs	r2, #1
 8004298:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2201      	movs	r2, #1
 80042a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2201      	movs	r2, #1
 80042a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2201      	movs	r2, #1
 80042b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2201      	movs	r2, #1
 80042b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2201      	movs	r2, #1
 80042c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2201      	movs	r2, #1
 80042c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2201      	movs	r2, #1
 80042d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2201      	movs	r2, #1
 80042d8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2201      	movs	r2, #1
 80042e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80042e4:	2300      	movs	r3, #0
}
 80042e6:	4618      	mov	r0, r3
 80042e8:	3708      	adds	r7, #8
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bd80      	pop	{r7, pc}

080042ee <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80042ee:	b480      	push	{r7}
 80042f0:	b083      	sub	sp, #12
 80042f2:	af00      	add	r7, sp, #0
 80042f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80042f6:	bf00      	nop
 80042f8:	370c      	adds	r7, #12
 80042fa:	46bd      	mov	sp, r7
 80042fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004300:	4770      	bx	lr
	...

08004304 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004304:	b480      	push	{r7}
 8004306:	b085      	sub	sp, #20
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004312:	b2db      	uxtb	r3, r3
 8004314:	2b01      	cmp	r3, #1
 8004316:	d001      	beq.n	800431c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004318:	2301      	movs	r3, #1
 800431a:	e054      	b.n	80043c6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2202      	movs	r2, #2
 8004320:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	68da      	ldr	r2, [r3, #12]
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f042 0201 	orr.w	r2, r2, #1
 8004332:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4a26      	ldr	r2, [pc, #152]	; (80043d4 <HAL_TIM_Base_Start_IT+0xd0>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d022      	beq.n	8004384 <HAL_TIM_Base_Start_IT+0x80>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004346:	d01d      	beq.n	8004384 <HAL_TIM_Base_Start_IT+0x80>
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4a22      	ldr	r2, [pc, #136]	; (80043d8 <HAL_TIM_Base_Start_IT+0xd4>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d018      	beq.n	8004384 <HAL_TIM_Base_Start_IT+0x80>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4a21      	ldr	r2, [pc, #132]	; (80043dc <HAL_TIM_Base_Start_IT+0xd8>)
 8004358:	4293      	cmp	r3, r2
 800435a:	d013      	beq.n	8004384 <HAL_TIM_Base_Start_IT+0x80>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4a1f      	ldr	r2, [pc, #124]	; (80043e0 <HAL_TIM_Base_Start_IT+0xdc>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d00e      	beq.n	8004384 <HAL_TIM_Base_Start_IT+0x80>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	4a1e      	ldr	r2, [pc, #120]	; (80043e4 <HAL_TIM_Base_Start_IT+0xe0>)
 800436c:	4293      	cmp	r3, r2
 800436e:	d009      	beq.n	8004384 <HAL_TIM_Base_Start_IT+0x80>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4a1c      	ldr	r2, [pc, #112]	; (80043e8 <HAL_TIM_Base_Start_IT+0xe4>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d004      	beq.n	8004384 <HAL_TIM_Base_Start_IT+0x80>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4a1b      	ldr	r2, [pc, #108]	; (80043ec <HAL_TIM_Base_Start_IT+0xe8>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d115      	bne.n	80043b0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	689a      	ldr	r2, [r3, #8]
 800438a:	4b19      	ldr	r3, [pc, #100]	; (80043f0 <HAL_TIM_Base_Start_IT+0xec>)
 800438c:	4013      	ands	r3, r2
 800438e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	2b06      	cmp	r3, #6
 8004394:	d015      	beq.n	80043c2 <HAL_TIM_Base_Start_IT+0xbe>
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800439c:	d011      	beq.n	80043c2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	681a      	ldr	r2, [r3, #0]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f042 0201 	orr.w	r2, r2, #1
 80043ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043ae:	e008      	b.n	80043c2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	681a      	ldr	r2, [r3, #0]
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f042 0201 	orr.w	r2, r2, #1
 80043be:	601a      	str	r2, [r3, #0]
 80043c0:	e000      	b.n	80043c4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043c2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80043c4:	2300      	movs	r3, #0
}
 80043c6:	4618      	mov	r0, r3
 80043c8:	3714      	adds	r7, #20
 80043ca:	46bd      	mov	sp, r7
 80043cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d0:	4770      	bx	lr
 80043d2:	bf00      	nop
 80043d4:	40010000 	.word	0x40010000
 80043d8:	40000400 	.word	0x40000400
 80043dc:	40000800 	.word	0x40000800
 80043e0:	40000c00 	.word	0x40000c00
 80043e4:	40010400 	.word	0x40010400
 80043e8:	40014000 	.word	0x40014000
 80043ec:	40001800 	.word	0x40001800
 80043f0:	00010007 	.word	0x00010007

080043f4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b082      	sub	sp, #8
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	691b      	ldr	r3, [r3, #16]
 8004402:	f003 0302 	and.w	r3, r3, #2
 8004406:	2b02      	cmp	r3, #2
 8004408:	d122      	bne.n	8004450 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	68db      	ldr	r3, [r3, #12]
 8004410:	f003 0302 	and.w	r3, r3, #2
 8004414:	2b02      	cmp	r3, #2
 8004416:	d11b      	bne.n	8004450 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f06f 0202 	mvn.w	r2, #2
 8004420:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2201      	movs	r2, #1
 8004426:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	699b      	ldr	r3, [r3, #24]
 800442e:	f003 0303 	and.w	r3, r3, #3
 8004432:	2b00      	cmp	r3, #0
 8004434:	d003      	beq.n	800443e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004436:	6878      	ldr	r0, [r7, #4]
 8004438:	f000 f905 	bl	8004646 <HAL_TIM_IC_CaptureCallback>
 800443c:	e005      	b.n	800444a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800443e:	6878      	ldr	r0, [r7, #4]
 8004440:	f000 f8f7 	bl	8004632 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004444:	6878      	ldr	r0, [r7, #4]
 8004446:	f000 f908 	bl	800465a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2200      	movs	r2, #0
 800444e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	691b      	ldr	r3, [r3, #16]
 8004456:	f003 0304 	and.w	r3, r3, #4
 800445a:	2b04      	cmp	r3, #4
 800445c:	d122      	bne.n	80044a4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	68db      	ldr	r3, [r3, #12]
 8004464:	f003 0304 	and.w	r3, r3, #4
 8004468:	2b04      	cmp	r3, #4
 800446a:	d11b      	bne.n	80044a4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f06f 0204 	mvn.w	r2, #4
 8004474:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2202      	movs	r2, #2
 800447a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	699b      	ldr	r3, [r3, #24]
 8004482:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004486:	2b00      	cmp	r3, #0
 8004488:	d003      	beq.n	8004492 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800448a:	6878      	ldr	r0, [r7, #4]
 800448c:	f000 f8db 	bl	8004646 <HAL_TIM_IC_CaptureCallback>
 8004490:	e005      	b.n	800449e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004492:	6878      	ldr	r0, [r7, #4]
 8004494:	f000 f8cd 	bl	8004632 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004498:	6878      	ldr	r0, [r7, #4]
 800449a:	f000 f8de 	bl	800465a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2200      	movs	r2, #0
 80044a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	691b      	ldr	r3, [r3, #16]
 80044aa:	f003 0308 	and.w	r3, r3, #8
 80044ae:	2b08      	cmp	r3, #8
 80044b0:	d122      	bne.n	80044f8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	68db      	ldr	r3, [r3, #12]
 80044b8:	f003 0308 	and.w	r3, r3, #8
 80044bc:	2b08      	cmp	r3, #8
 80044be:	d11b      	bne.n	80044f8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f06f 0208 	mvn.w	r2, #8
 80044c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2204      	movs	r2, #4
 80044ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	69db      	ldr	r3, [r3, #28]
 80044d6:	f003 0303 	and.w	r3, r3, #3
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d003      	beq.n	80044e6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044de:	6878      	ldr	r0, [r7, #4]
 80044e0:	f000 f8b1 	bl	8004646 <HAL_TIM_IC_CaptureCallback>
 80044e4:	e005      	b.n	80044f2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044e6:	6878      	ldr	r0, [r7, #4]
 80044e8:	f000 f8a3 	bl	8004632 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044ec:	6878      	ldr	r0, [r7, #4]
 80044ee:	f000 f8b4 	bl	800465a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2200      	movs	r2, #0
 80044f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	691b      	ldr	r3, [r3, #16]
 80044fe:	f003 0310 	and.w	r3, r3, #16
 8004502:	2b10      	cmp	r3, #16
 8004504:	d122      	bne.n	800454c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	68db      	ldr	r3, [r3, #12]
 800450c:	f003 0310 	and.w	r3, r3, #16
 8004510:	2b10      	cmp	r3, #16
 8004512:	d11b      	bne.n	800454c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f06f 0210 	mvn.w	r2, #16
 800451c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2208      	movs	r2, #8
 8004522:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	69db      	ldr	r3, [r3, #28]
 800452a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800452e:	2b00      	cmp	r3, #0
 8004530:	d003      	beq.n	800453a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004532:	6878      	ldr	r0, [r7, #4]
 8004534:	f000 f887 	bl	8004646 <HAL_TIM_IC_CaptureCallback>
 8004538:	e005      	b.n	8004546 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800453a:	6878      	ldr	r0, [r7, #4]
 800453c:	f000 f879 	bl	8004632 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004540:	6878      	ldr	r0, [r7, #4]
 8004542:	f000 f88a 	bl	800465a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2200      	movs	r2, #0
 800454a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	691b      	ldr	r3, [r3, #16]
 8004552:	f003 0301 	and.w	r3, r3, #1
 8004556:	2b01      	cmp	r3, #1
 8004558:	d10e      	bne.n	8004578 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	68db      	ldr	r3, [r3, #12]
 8004560:	f003 0301 	and.w	r3, r3, #1
 8004564:	2b01      	cmp	r3, #1
 8004566:	d107      	bne.n	8004578 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f06f 0201 	mvn.w	r2, #1
 8004570:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004572:	6878      	ldr	r0, [r7, #4]
 8004574:	f7fc fbc8 	bl	8000d08 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	691b      	ldr	r3, [r3, #16]
 800457e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004582:	2b80      	cmp	r3, #128	; 0x80
 8004584:	d10e      	bne.n	80045a4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	68db      	ldr	r3, [r3, #12]
 800458c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004590:	2b80      	cmp	r3, #128	; 0x80
 8004592:	d107      	bne.n	80045a4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800459c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800459e:	6878      	ldr	r0, [r7, #4]
 80045a0:	f000 f91a 	bl	80047d8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	691b      	ldr	r3, [r3, #16]
 80045aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045b2:	d10e      	bne.n	80045d2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	68db      	ldr	r3, [r3, #12]
 80045ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045be:	2b80      	cmp	r3, #128	; 0x80
 80045c0:	d107      	bne.n	80045d2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80045ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80045cc:	6878      	ldr	r0, [r7, #4]
 80045ce:	f000 f90d 	bl	80047ec <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	691b      	ldr	r3, [r3, #16]
 80045d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045dc:	2b40      	cmp	r3, #64	; 0x40
 80045de:	d10e      	bne.n	80045fe <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	68db      	ldr	r3, [r3, #12]
 80045e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045ea:	2b40      	cmp	r3, #64	; 0x40
 80045ec:	d107      	bne.n	80045fe <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80045f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80045f8:	6878      	ldr	r0, [r7, #4]
 80045fa:	f000 f838 	bl	800466e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	691b      	ldr	r3, [r3, #16]
 8004604:	f003 0320 	and.w	r3, r3, #32
 8004608:	2b20      	cmp	r3, #32
 800460a:	d10e      	bne.n	800462a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	68db      	ldr	r3, [r3, #12]
 8004612:	f003 0320 	and.w	r3, r3, #32
 8004616:	2b20      	cmp	r3, #32
 8004618:	d107      	bne.n	800462a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f06f 0220 	mvn.w	r2, #32
 8004622:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004624:	6878      	ldr	r0, [r7, #4]
 8004626:	f000 f8cd 	bl	80047c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800462a:	bf00      	nop
 800462c:	3708      	adds	r7, #8
 800462e:	46bd      	mov	sp, r7
 8004630:	bd80      	pop	{r7, pc}

08004632 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004632:	b480      	push	{r7}
 8004634:	b083      	sub	sp, #12
 8004636:	af00      	add	r7, sp, #0
 8004638:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800463a:	bf00      	nop
 800463c:	370c      	adds	r7, #12
 800463e:	46bd      	mov	sp, r7
 8004640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004644:	4770      	bx	lr

08004646 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004646:	b480      	push	{r7}
 8004648:	b083      	sub	sp, #12
 800464a:	af00      	add	r7, sp, #0
 800464c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800464e:	bf00      	nop
 8004650:	370c      	adds	r7, #12
 8004652:	46bd      	mov	sp, r7
 8004654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004658:	4770      	bx	lr

0800465a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800465a:	b480      	push	{r7}
 800465c:	b083      	sub	sp, #12
 800465e:	af00      	add	r7, sp, #0
 8004660:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004662:	bf00      	nop
 8004664:	370c      	adds	r7, #12
 8004666:	46bd      	mov	sp, r7
 8004668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466c:	4770      	bx	lr

0800466e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800466e:	b480      	push	{r7}
 8004670:	b083      	sub	sp, #12
 8004672:	af00      	add	r7, sp, #0
 8004674:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004676:	bf00      	nop
 8004678:	370c      	adds	r7, #12
 800467a:	46bd      	mov	sp, r7
 800467c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004680:	4770      	bx	lr
	...

08004684 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004684:	b480      	push	{r7}
 8004686:	b085      	sub	sp, #20
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
 800468c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	4a40      	ldr	r2, [pc, #256]	; (8004798 <TIM_Base_SetConfig+0x114>)
 8004698:	4293      	cmp	r3, r2
 800469a:	d013      	beq.n	80046c4 <TIM_Base_SetConfig+0x40>
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046a2:	d00f      	beq.n	80046c4 <TIM_Base_SetConfig+0x40>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	4a3d      	ldr	r2, [pc, #244]	; (800479c <TIM_Base_SetConfig+0x118>)
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d00b      	beq.n	80046c4 <TIM_Base_SetConfig+0x40>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	4a3c      	ldr	r2, [pc, #240]	; (80047a0 <TIM_Base_SetConfig+0x11c>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d007      	beq.n	80046c4 <TIM_Base_SetConfig+0x40>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	4a3b      	ldr	r2, [pc, #236]	; (80047a4 <TIM_Base_SetConfig+0x120>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d003      	beq.n	80046c4 <TIM_Base_SetConfig+0x40>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	4a3a      	ldr	r2, [pc, #232]	; (80047a8 <TIM_Base_SetConfig+0x124>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d108      	bne.n	80046d6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	68fa      	ldr	r2, [r7, #12]
 80046d2:	4313      	orrs	r3, r2
 80046d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	4a2f      	ldr	r2, [pc, #188]	; (8004798 <TIM_Base_SetConfig+0x114>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d02b      	beq.n	8004736 <TIM_Base_SetConfig+0xb2>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046e4:	d027      	beq.n	8004736 <TIM_Base_SetConfig+0xb2>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	4a2c      	ldr	r2, [pc, #176]	; (800479c <TIM_Base_SetConfig+0x118>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d023      	beq.n	8004736 <TIM_Base_SetConfig+0xb2>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	4a2b      	ldr	r2, [pc, #172]	; (80047a0 <TIM_Base_SetConfig+0x11c>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d01f      	beq.n	8004736 <TIM_Base_SetConfig+0xb2>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	4a2a      	ldr	r2, [pc, #168]	; (80047a4 <TIM_Base_SetConfig+0x120>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d01b      	beq.n	8004736 <TIM_Base_SetConfig+0xb2>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	4a29      	ldr	r2, [pc, #164]	; (80047a8 <TIM_Base_SetConfig+0x124>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d017      	beq.n	8004736 <TIM_Base_SetConfig+0xb2>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	4a28      	ldr	r2, [pc, #160]	; (80047ac <TIM_Base_SetConfig+0x128>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d013      	beq.n	8004736 <TIM_Base_SetConfig+0xb2>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	4a27      	ldr	r2, [pc, #156]	; (80047b0 <TIM_Base_SetConfig+0x12c>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d00f      	beq.n	8004736 <TIM_Base_SetConfig+0xb2>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	4a26      	ldr	r2, [pc, #152]	; (80047b4 <TIM_Base_SetConfig+0x130>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d00b      	beq.n	8004736 <TIM_Base_SetConfig+0xb2>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	4a25      	ldr	r2, [pc, #148]	; (80047b8 <TIM_Base_SetConfig+0x134>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d007      	beq.n	8004736 <TIM_Base_SetConfig+0xb2>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	4a24      	ldr	r2, [pc, #144]	; (80047bc <TIM_Base_SetConfig+0x138>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d003      	beq.n	8004736 <TIM_Base_SetConfig+0xb2>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	4a23      	ldr	r2, [pc, #140]	; (80047c0 <TIM_Base_SetConfig+0x13c>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d108      	bne.n	8004748 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800473c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	68db      	ldr	r3, [r3, #12]
 8004742:	68fa      	ldr	r2, [r7, #12]
 8004744:	4313      	orrs	r3, r2
 8004746:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	695b      	ldr	r3, [r3, #20]
 8004752:	4313      	orrs	r3, r2
 8004754:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	68fa      	ldr	r2, [r7, #12]
 800475a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	689a      	ldr	r2, [r3, #8]
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	681a      	ldr	r2, [r3, #0]
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	4a0a      	ldr	r2, [pc, #40]	; (8004798 <TIM_Base_SetConfig+0x114>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d003      	beq.n	800477c <TIM_Base_SetConfig+0xf8>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	4a0c      	ldr	r2, [pc, #48]	; (80047a8 <TIM_Base_SetConfig+0x124>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d103      	bne.n	8004784 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	691a      	ldr	r2, [r3, #16]
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2201      	movs	r2, #1
 8004788:	615a      	str	r2, [r3, #20]
}
 800478a:	bf00      	nop
 800478c:	3714      	adds	r7, #20
 800478e:	46bd      	mov	sp, r7
 8004790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004794:	4770      	bx	lr
 8004796:	bf00      	nop
 8004798:	40010000 	.word	0x40010000
 800479c:	40000400 	.word	0x40000400
 80047a0:	40000800 	.word	0x40000800
 80047a4:	40000c00 	.word	0x40000c00
 80047a8:	40010400 	.word	0x40010400
 80047ac:	40014000 	.word	0x40014000
 80047b0:	40014400 	.word	0x40014400
 80047b4:	40014800 	.word	0x40014800
 80047b8:	40001800 	.word	0x40001800
 80047bc:	40001c00 	.word	0x40001c00
 80047c0:	40002000 	.word	0x40002000

080047c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80047c4:	b480      	push	{r7}
 80047c6:	b083      	sub	sp, #12
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80047cc:	bf00      	nop
 80047ce:	370c      	adds	r7, #12
 80047d0:	46bd      	mov	sp, r7
 80047d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d6:	4770      	bx	lr

080047d8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80047d8:	b480      	push	{r7}
 80047da:	b083      	sub	sp, #12
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80047e0:	bf00      	nop
 80047e2:	370c      	adds	r7, #12
 80047e4:	46bd      	mov	sp, r7
 80047e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ea:	4770      	bx	lr

080047ec <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80047ec:	b480      	push	{r7}
 80047ee:	b083      	sub	sp, #12
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80047f4:	bf00      	nop
 80047f6:	370c      	adds	r7, #12
 80047f8:	46bd      	mov	sp, r7
 80047fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fe:	4770      	bx	lr

08004800 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b082      	sub	sp, #8
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d101      	bne.n	8004812 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800480e:	2301      	movs	r3, #1
 8004810:	e040      	b.n	8004894 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004816:	2b00      	cmp	r3, #0
 8004818:	d106      	bne.n	8004828 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2200      	movs	r2, #0
 800481e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004822:	6878      	ldr	r0, [r7, #4]
 8004824:	f7fc face 	bl	8000dc4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2224      	movs	r2, #36	; 0x24
 800482c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	681a      	ldr	r2, [r3, #0]
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f022 0201 	bic.w	r2, r2, #1
 800483c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800483e:	6878      	ldr	r0, [r7, #4]
 8004840:	f000 f8c0 	bl	80049c4 <UART_SetConfig>
 8004844:	4603      	mov	r3, r0
 8004846:	2b01      	cmp	r3, #1
 8004848:	d101      	bne.n	800484e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800484a:	2301      	movs	r3, #1
 800484c:	e022      	b.n	8004894 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004852:	2b00      	cmp	r3, #0
 8004854:	d002      	beq.n	800485c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004856:	6878      	ldr	r0, [r7, #4]
 8004858:	f000 fb14 	bl	8004e84 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	685a      	ldr	r2, [r3, #4]
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800486a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	689a      	ldr	r2, [r3, #8]
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800487a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	681a      	ldr	r2, [r3, #0]
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f042 0201 	orr.w	r2, r2, #1
 800488a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800488c:	6878      	ldr	r0, [r7, #4]
 800488e:	f000 fb9b 	bl	8004fc8 <UART_CheckIdleState>
 8004892:	4603      	mov	r3, r0
}
 8004894:	4618      	mov	r0, r3
 8004896:	3708      	adds	r7, #8
 8004898:	46bd      	mov	sp, r7
 800489a:	bd80      	pop	{r7, pc}

0800489c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	b08a      	sub	sp, #40	; 0x28
 80048a0:	af02      	add	r7, sp, #8
 80048a2:	60f8      	str	r0, [r7, #12]
 80048a4:	60b9      	str	r1, [r7, #8]
 80048a6:	603b      	str	r3, [r7, #0]
 80048a8:	4613      	mov	r3, r2
 80048aa:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80048b0:	2b20      	cmp	r3, #32
 80048b2:	f040 8081 	bne.w	80049b8 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 80048b6:	68bb      	ldr	r3, [r7, #8]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d002      	beq.n	80048c2 <HAL_UART_Transmit+0x26>
 80048bc:	88fb      	ldrh	r3, [r7, #6]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d101      	bne.n	80048c6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80048c2:	2301      	movs	r3, #1
 80048c4:	e079      	b.n	80049ba <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80048cc:	2b01      	cmp	r3, #1
 80048ce:	d101      	bne.n	80048d4 <HAL_UART_Transmit+0x38>
 80048d0:	2302      	movs	r3, #2
 80048d2:	e072      	b.n	80049ba <HAL_UART_Transmit+0x11e>
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	2201      	movs	r2, #1
 80048d8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	2200      	movs	r2, #0
 80048e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	2221      	movs	r2, #33	; 0x21
 80048e8:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80048ea:	f7fc fc5d 	bl	80011a8 <HAL_GetTick>
 80048ee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	88fa      	ldrh	r2, [r7, #6]
 80048f4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	88fa      	ldrh	r2, [r7, #6]
 80048fc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	689b      	ldr	r3, [r3, #8]
 8004904:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004908:	d108      	bne.n	800491c <HAL_UART_Transmit+0x80>
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	691b      	ldr	r3, [r3, #16]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d104      	bne.n	800491c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8004912:	2300      	movs	r3, #0
 8004914:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004916:	68bb      	ldr	r3, [r7, #8]
 8004918:	61bb      	str	r3, [r7, #24]
 800491a:	e003      	b.n	8004924 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004920:	2300      	movs	r3, #0
 8004922:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	2200      	movs	r2, #0
 8004928:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800492c:	e02c      	b.n	8004988 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	9300      	str	r3, [sp, #0]
 8004932:	697b      	ldr	r3, [r7, #20]
 8004934:	2200      	movs	r2, #0
 8004936:	2180      	movs	r1, #128	; 0x80
 8004938:	68f8      	ldr	r0, [r7, #12]
 800493a:	f000 fb8e 	bl	800505a <UART_WaitOnFlagUntilTimeout>
 800493e:	4603      	mov	r3, r0
 8004940:	2b00      	cmp	r3, #0
 8004942:	d001      	beq.n	8004948 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004944:	2303      	movs	r3, #3
 8004946:	e038      	b.n	80049ba <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8004948:	69fb      	ldr	r3, [r7, #28]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d10b      	bne.n	8004966 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800494e:	69bb      	ldr	r3, [r7, #24]
 8004950:	881b      	ldrh	r3, [r3, #0]
 8004952:	461a      	mov	r2, r3
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800495c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800495e:	69bb      	ldr	r3, [r7, #24]
 8004960:	3302      	adds	r3, #2
 8004962:	61bb      	str	r3, [r7, #24]
 8004964:	e007      	b.n	8004976 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004966:	69fb      	ldr	r3, [r7, #28]
 8004968:	781a      	ldrb	r2, [r3, #0]
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004970:	69fb      	ldr	r3, [r7, #28]
 8004972:	3301      	adds	r3, #1
 8004974:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800497c:	b29b      	uxth	r3, r3
 800497e:	3b01      	subs	r3, #1
 8004980:	b29a      	uxth	r2, r3
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800498e:	b29b      	uxth	r3, r3
 8004990:	2b00      	cmp	r3, #0
 8004992:	d1cc      	bne.n	800492e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	9300      	str	r3, [sp, #0]
 8004998:	697b      	ldr	r3, [r7, #20]
 800499a:	2200      	movs	r2, #0
 800499c:	2140      	movs	r1, #64	; 0x40
 800499e:	68f8      	ldr	r0, [r7, #12]
 80049a0:	f000 fb5b 	bl	800505a <UART_WaitOnFlagUntilTimeout>
 80049a4:	4603      	mov	r3, r0
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d001      	beq.n	80049ae <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 80049aa:	2303      	movs	r3, #3
 80049ac:	e005      	b.n	80049ba <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	2220      	movs	r2, #32
 80049b2:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80049b4:	2300      	movs	r3, #0
 80049b6:	e000      	b.n	80049ba <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 80049b8:	2302      	movs	r3, #2
  }
}
 80049ba:	4618      	mov	r0, r3
 80049bc:	3720      	adds	r7, #32
 80049be:	46bd      	mov	sp, r7
 80049c0:	bd80      	pop	{r7, pc}
	...

080049c4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b088      	sub	sp, #32
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80049cc:	2300      	movs	r3, #0
 80049ce:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	689a      	ldr	r2, [r3, #8]
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	691b      	ldr	r3, [r3, #16]
 80049d8:	431a      	orrs	r2, r3
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	695b      	ldr	r3, [r3, #20]
 80049de:	431a      	orrs	r2, r3
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	69db      	ldr	r3, [r3, #28]
 80049e4:	4313      	orrs	r3, r2
 80049e6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	681a      	ldr	r2, [r3, #0]
 80049ee:	4bb1      	ldr	r3, [pc, #708]	; (8004cb4 <UART_SetConfig+0x2f0>)
 80049f0:	4013      	ands	r3, r2
 80049f2:	687a      	ldr	r2, [r7, #4]
 80049f4:	6812      	ldr	r2, [r2, #0]
 80049f6:	6979      	ldr	r1, [r7, #20]
 80049f8:	430b      	orrs	r3, r1
 80049fa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	685b      	ldr	r3, [r3, #4]
 8004a02:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	68da      	ldr	r2, [r3, #12]
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	430a      	orrs	r2, r1
 8004a10:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	699b      	ldr	r3, [r3, #24]
 8004a16:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6a1b      	ldr	r3, [r3, #32]
 8004a1c:	697a      	ldr	r2, [r7, #20]
 8004a1e:	4313      	orrs	r3, r2
 8004a20:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	689b      	ldr	r3, [r3, #8]
 8004a28:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	697a      	ldr	r2, [r7, #20]
 8004a32:	430a      	orrs	r2, r1
 8004a34:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4a9f      	ldr	r2, [pc, #636]	; (8004cb8 <UART_SetConfig+0x2f4>)
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d121      	bne.n	8004a84 <UART_SetConfig+0xc0>
 8004a40:	4b9e      	ldr	r3, [pc, #632]	; (8004cbc <UART_SetConfig+0x2f8>)
 8004a42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a46:	f003 0303 	and.w	r3, r3, #3
 8004a4a:	2b03      	cmp	r3, #3
 8004a4c:	d816      	bhi.n	8004a7c <UART_SetConfig+0xb8>
 8004a4e:	a201      	add	r2, pc, #4	; (adr r2, 8004a54 <UART_SetConfig+0x90>)
 8004a50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a54:	08004a65 	.word	0x08004a65
 8004a58:	08004a71 	.word	0x08004a71
 8004a5c:	08004a6b 	.word	0x08004a6b
 8004a60:	08004a77 	.word	0x08004a77
 8004a64:	2301      	movs	r3, #1
 8004a66:	77fb      	strb	r3, [r7, #31]
 8004a68:	e151      	b.n	8004d0e <UART_SetConfig+0x34a>
 8004a6a:	2302      	movs	r3, #2
 8004a6c:	77fb      	strb	r3, [r7, #31]
 8004a6e:	e14e      	b.n	8004d0e <UART_SetConfig+0x34a>
 8004a70:	2304      	movs	r3, #4
 8004a72:	77fb      	strb	r3, [r7, #31]
 8004a74:	e14b      	b.n	8004d0e <UART_SetConfig+0x34a>
 8004a76:	2308      	movs	r3, #8
 8004a78:	77fb      	strb	r3, [r7, #31]
 8004a7a:	e148      	b.n	8004d0e <UART_SetConfig+0x34a>
 8004a7c:	2310      	movs	r3, #16
 8004a7e:	77fb      	strb	r3, [r7, #31]
 8004a80:	bf00      	nop
 8004a82:	e144      	b.n	8004d0e <UART_SetConfig+0x34a>
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4a8d      	ldr	r2, [pc, #564]	; (8004cc0 <UART_SetConfig+0x2fc>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d134      	bne.n	8004af8 <UART_SetConfig+0x134>
 8004a8e:	4b8b      	ldr	r3, [pc, #556]	; (8004cbc <UART_SetConfig+0x2f8>)
 8004a90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a94:	f003 030c 	and.w	r3, r3, #12
 8004a98:	2b0c      	cmp	r3, #12
 8004a9a:	d829      	bhi.n	8004af0 <UART_SetConfig+0x12c>
 8004a9c:	a201      	add	r2, pc, #4	; (adr r2, 8004aa4 <UART_SetConfig+0xe0>)
 8004a9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004aa2:	bf00      	nop
 8004aa4:	08004ad9 	.word	0x08004ad9
 8004aa8:	08004af1 	.word	0x08004af1
 8004aac:	08004af1 	.word	0x08004af1
 8004ab0:	08004af1 	.word	0x08004af1
 8004ab4:	08004ae5 	.word	0x08004ae5
 8004ab8:	08004af1 	.word	0x08004af1
 8004abc:	08004af1 	.word	0x08004af1
 8004ac0:	08004af1 	.word	0x08004af1
 8004ac4:	08004adf 	.word	0x08004adf
 8004ac8:	08004af1 	.word	0x08004af1
 8004acc:	08004af1 	.word	0x08004af1
 8004ad0:	08004af1 	.word	0x08004af1
 8004ad4:	08004aeb 	.word	0x08004aeb
 8004ad8:	2300      	movs	r3, #0
 8004ada:	77fb      	strb	r3, [r7, #31]
 8004adc:	e117      	b.n	8004d0e <UART_SetConfig+0x34a>
 8004ade:	2302      	movs	r3, #2
 8004ae0:	77fb      	strb	r3, [r7, #31]
 8004ae2:	e114      	b.n	8004d0e <UART_SetConfig+0x34a>
 8004ae4:	2304      	movs	r3, #4
 8004ae6:	77fb      	strb	r3, [r7, #31]
 8004ae8:	e111      	b.n	8004d0e <UART_SetConfig+0x34a>
 8004aea:	2308      	movs	r3, #8
 8004aec:	77fb      	strb	r3, [r7, #31]
 8004aee:	e10e      	b.n	8004d0e <UART_SetConfig+0x34a>
 8004af0:	2310      	movs	r3, #16
 8004af2:	77fb      	strb	r3, [r7, #31]
 8004af4:	bf00      	nop
 8004af6:	e10a      	b.n	8004d0e <UART_SetConfig+0x34a>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	4a71      	ldr	r2, [pc, #452]	; (8004cc4 <UART_SetConfig+0x300>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d120      	bne.n	8004b44 <UART_SetConfig+0x180>
 8004b02:	4b6e      	ldr	r3, [pc, #440]	; (8004cbc <UART_SetConfig+0x2f8>)
 8004b04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b08:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004b0c:	2b10      	cmp	r3, #16
 8004b0e:	d00f      	beq.n	8004b30 <UART_SetConfig+0x16c>
 8004b10:	2b10      	cmp	r3, #16
 8004b12:	d802      	bhi.n	8004b1a <UART_SetConfig+0x156>
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d005      	beq.n	8004b24 <UART_SetConfig+0x160>
 8004b18:	e010      	b.n	8004b3c <UART_SetConfig+0x178>
 8004b1a:	2b20      	cmp	r3, #32
 8004b1c:	d005      	beq.n	8004b2a <UART_SetConfig+0x166>
 8004b1e:	2b30      	cmp	r3, #48	; 0x30
 8004b20:	d009      	beq.n	8004b36 <UART_SetConfig+0x172>
 8004b22:	e00b      	b.n	8004b3c <UART_SetConfig+0x178>
 8004b24:	2300      	movs	r3, #0
 8004b26:	77fb      	strb	r3, [r7, #31]
 8004b28:	e0f1      	b.n	8004d0e <UART_SetConfig+0x34a>
 8004b2a:	2302      	movs	r3, #2
 8004b2c:	77fb      	strb	r3, [r7, #31]
 8004b2e:	e0ee      	b.n	8004d0e <UART_SetConfig+0x34a>
 8004b30:	2304      	movs	r3, #4
 8004b32:	77fb      	strb	r3, [r7, #31]
 8004b34:	e0eb      	b.n	8004d0e <UART_SetConfig+0x34a>
 8004b36:	2308      	movs	r3, #8
 8004b38:	77fb      	strb	r3, [r7, #31]
 8004b3a:	e0e8      	b.n	8004d0e <UART_SetConfig+0x34a>
 8004b3c:	2310      	movs	r3, #16
 8004b3e:	77fb      	strb	r3, [r7, #31]
 8004b40:	bf00      	nop
 8004b42:	e0e4      	b.n	8004d0e <UART_SetConfig+0x34a>
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	4a5f      	ldr	r2, [pc, #380]	; (8004cc8 <UART_SetConfig+0x304>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d120      	bne.n	8004b90 <UART_SetConfig+0x1cc>
 8004b4e:	4b5b      	ldr	r3, [pc, #364]	; (8004cbc <UART_SetConfig+0x2f8>)
 8004b50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b54:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004b58:	2b40      	cmp	r3, #64	; 0x40
 8004b5a:	d00f      	beq.n	8004b7c <UART_SetConfig+0x1b8>
 8004b5c:	2b40      	cmp	r3, #64	; 0x40
 8004b5e:	d802      	bhi.n	8004b66 <UART_SetConfig+0x1a2>
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d005      	beq.n	8004b70 <UART_SetConfig+0x1ac>
 8004b64:	e010      	b.n	8004b88 <UART_SetConfig+0x1c4>
 8004b66:	2b80      	cmp	r3, #128	; 0x80
 8004b68:	d005      	beq.n	8004b76 <UART_SetConfig+0x1b2>
 8004b6a:	2bc0      	cmp	r3, #192	; 0xc0
 8004b6c:	d009      	beq.n	8004b82 <UART_SetConfig+0x1be>
 8004b6e:	e00b      	b.n	8004b88 <UART_SetConfig+0x1c4>
 8004b70:	2300      	movs	r3, #0
 8004b72:	77fb      	strb	r3, [r7, #31]
 8004b74:	e0cb      	b.n	8004d0e <UART_SetConfig+0x34a>
 8004b76:	2302      	movs	r3, #2
 8004b78:	77fb      	strb	r3, [r7, #31]
 8004b7a:	e0c8      	b.n	8004d0e <UART_SetConfig+0x34a>
 8004b7c:	2304      	movs	r3, #4
 8004b7e:	77fb      	strb	r3, [r7, #31]
 8004b80:	e0c5      	b.n	8004d0e <UART_SetConfig+0x34a>
 8004b82:	2308      	movs	r3, #8
 8004b84:	77fb      	strb	r3, [r7, #31]
 8004b86:	e0c2      	b.n	8004d0e <UART_SetConfig+0x34a>
 8004b88:	2310      	movs	r3, #16
 8004b8a:	77fb      	strb	r3, [r7, #31]
 8004b8c:	bf00      	nop
 8004b8e:	e0be      	b.n	8004d0e <UART_SetConfig+0x34a>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4a4d      	ldr	r2, [pc, #308]	; (8004ccc <UART_SetConfig+0x308>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d124      	bne.n	8004be4 <UART_SetConfig+0x220>
 8004b9a:	4b48      	ldr	r3, [pc, #288]	; (8004cbc <UART_SetConfig+0x2f8>)
 8004b9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ba0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ba4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ba8:	d012      	beq.n	8004bd0 <UART_SetConfig+0x20c>
 8004baa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004bae:	d802      	bhi.n	8004bb6 <UART_SetConfig+0x1f2>
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d007      	beq.n	8004bc4 <UART_SetConfig+0x200>
 8004bb4:	e012      	b.n	8004bdc <UART_SetConfig+0x218>
 8004bb6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004bba:	d006      	beq.n	8004bca <UART_SetConfig+0x206>
 8004bbc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004bc0:	d009      	beq.n	8004bd6 <UART_SetConfig+0x212>
 8004bc2:	e00b      	b.n	8004bdc <UART_SetConfig+0x218>
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	77fb      	strb	r3, [r7, #31]
 8004bc8:	e0a1      	b.n	8004d0e <UART_SetConfig+0x34a>
 8004bca:	2302      	movs	r3, #2
 8004bcc:	77fb      	strb	r3, [r7, #31]
 8004bce:	e09e      	b.n	8004d0e <UART_SetConfig+0x34a>
 8004bd0:	2304      	movs	r3, #4
 8004bd2:	77fb      	strb	r3, [r7, #31]
 8004bd4:	e09b      	b.n	8004d0e <UART_SetConfig+0x34a>
 8004bd6:	2308      	movs	r3, #8
 8004bd8:	77fb      	strb	r3, [r7, #31]
 8004bda:	e098      	b.n	8004d0e <UART_SetConfig+0x34a>
 8004bdc:	2310      	movs	r3, #16
 8004bde:	77fb      	strb	r3, [r7, #31]
 8004be0:	bf00      	nop
 8004be2:	e094      	b.n	8004d0e <UART_SetConfig+0x34a>
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	4a39      	ldr	r2, [pc, #228]	; (8004cd0 <UART_SetConfig+0x30c>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d124      	bne.n	8004c38 <UART_SetConfig+0x274>
 8004bee:	4b33      	ldr	r3, [pc, #204]	; (8004cbc <UART_SetConfig+0x2f8>)
 8004bf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bf4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004bf8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bfc:	d012      	beq.n	8004c24 <UART_SetConfig+0x260>
 8004bfe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c02:	d802      	bhi.n	8004c0a <UART_SetConfig+0x246>
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d007      	beq.n	8004c18 <UART_SetConfig+0x254>
 8004c08:	e012      	b.n	8004c30 <UART_SetConfig+0x26c>
 8004c0a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c0e:	d006      	beq.n	8004c1e <UART_SetConfig+0x25a>
 8004c10:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004c14:	d009      	beq.n	8004c2a <UART_SetConfig+0x266>
 8004c16:	e00b      	b.n	8004c30 <UART_SetConfig+0x26c>
 8004c18:	2301      	movs	r3, #1
 8004c1a:	77fb      	strb	r3, [r7, #31]
 8004c1c:	e077      	b.n	8004d0e <UART_SetConfig+0x34a>
 8004c1e:	2302      	movs	r3, #2
 8004c20:	77fb      	strb	r3, [r7, #31]
 8004c22:	e074      	b.n	8004d0e <UART_SetConfig+0x34a>
 8004c24:	2304      	movs	r3, #4
 8004c26:	77fb      	strb	r3, [r7, #31]
 8004c28:	e071      	b.n	8004d0e <UART_SetConfig+0x34a>
 8004c2a:	2308      	movs	r3, #8
 8004c2c:	77fb      	strb	r3, [r7, #31]
 8004c2e:	e06e      	b.n	8004d0e <UART_SetConfig+0x34a>
 8004c30:	2310      	movs	r3, #16
 8004c32:	77fb      	strb	r3, [r7, #31]
 8004c34:	bf00      	nop
 8004c36:	e06a      	b.n	8004d0e <UART_SetConfig+0x34a>
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4a25      	ldr	r2, [pc, #148]	; (8004cd4 <UART_SetConfig+0x310>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d124      	bne.n	8004c8c <UART_SetConfig+0x2c8>
 8004c42:	4b1e      	ldr	r3, [pc, #120]	; (8004cbc <UART_SetConfig+0x2f8>)
 8004c44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c48:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004c4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c50:	d012      	beq.n	8004c78 <UART_SetConfig+0x2b4>
 8004c52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c56:	d802      	bhi.n	8004c5e <UART_SetConfig+0x29a>
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d007      	beq.n	8004c6c <UART_SetConfig+0x2a8>
 8004c5c:	e012      	b.n	8004c84 <UART_SetConfig+0x2c0>
 8004c5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c62:	d006      	beq.n	8004c72 <UART_SetConfig+0x2ae>
 8004c64:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004c68:	d009      	beq.n	8004c7e <UART_SetConfig+0x2ba>
 8004c6a:	e00b      	b.n	8004c84 <UART_SetConfig+0x2c0>
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	77fb      	strb	r3, [r7, #31]
 8004c70:	e04d      	b.n	8004d0e <UART_SetConfig+0x34a>
 8004c72:	2302      	movs	r3, #2
 8004c74:	77fb      	strb	r3, [r7, #31]
 8004c76:	e04a      	b.n	8004d0e <UART_SetConfig+0x34a>
 8004c78:	2304      	movs	r3, #4
 8004c7a:	77fb      	strb	r3, [r7, #31]
 8004c7c:	e047      	b.n	8004d0e <UART_SetConfig+0x34a>
 8004c7e:	2308      	movs	r3, #8
 8004c80:	77fb      	strb	r3, [r7, #31]
 8004c82:	e044      	b.n	8004d0e <UART_SetConfig+0x34a>
 8004c84:	2310      	movs	r3, #16
 8004c86:	77fb      	strb	r3, [r7, #31]
 8004c88:	bf00      	nop
 8004c8a:	e040      	b.n	8004d0e <UART_SetConfig+0x34a>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4a11      	ldr	r2, [pc, #68]	; (8004cd8 <UART_SetConfig+0x314>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d139      	bne.n	8004d0a <UART_SetConfig+0x346>
 8004c96:	4b09      	ldr	r3, [pc, #36]	; (8004cbc <UART_SetConfig+0x2f8>)
 8004c98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c9c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004ca0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004ca4:	d027      	beq.n	8004cf6 <UART_SetConfig+0x332>
 8004ca6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004caa:	d817      	bhi.n	8004cdc <UART_SetConfig+0x318>
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d01c      	beq.n	8004cea <UART_SetConfig+0x326>
 8004cb0:	e027      	b.n	8004d02 <UART_SetConfig+0x33e>
 8004cb2:	bf00      	nop
 8004cb4:	efff69f3 	.word	0xefff69f3
 8004cb8:	40011000 	.word	0x40011000
 8004cbc:	40023800 	.word	0x40023800
 8004cc0:	40004400 	.word	0x40004400
 8004cc4:	40004800 	.word	0x40004800
 8004cc8:	40004c00 	.word	0x40004c00
 8004ccc:	40005000 	.word	0x40005000
 8004cd0:	40011400 	.word	0x40011400
 8004cd4:	40007800 	.word	0x40007800
 8004cd8:	40007c00 	.word	0x40007c00
 8004cdc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ce0:	d006      	beq.n	8004cf0 <UART_SetConfig+0x32c>
 8004ce2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004ce6:	d009      	beq.n	8004cfc <UART_SetConfig+0x338>
 8004ce8:	e00b      	b.n	8004d02 <UART_SetConfig+0x33e>
 8004cea:	2300      	movs	r3, #0
 8004cec:	77fb      	strb	r3, [r7, #31]
 8004cee:	e00e      	b.n	8004d0e <UART_SetConfig+0x34a>
 8004cf0:	2302      	movs	r3, #2
 8004cf2:	77fb      	strb	r3, [r7, #31]
 8004cf4:	e00b      	b.n	8004d0e <UART_SetConfig+0x34a>
 8004cf6:	2304      	movs	r3, #4
 8004cf8:	77fb      	strb	r3, [r7, #31]
 8004cfa:	e008      	b.n	8004d0e <UART_SetConfig+0x34a>
 8004cfc:	2308      	movs	r3, #8
 8004cfe:	77fb      	strb	r3, [r7, #31]
 8004d00:	e005      	b.n	8004d0e <UART_SetConfig+0x34a>
 8004d02:	2310      	movs	r3, #16
 8004d04:	77fb      	strb	r3, [r7, #31]
 8004d06:	bf00      	nop
 8004d08:	e001      	b.n	8004d0e <UART_SetConfig+0x34a>
 8004d0a:	2310      	movs	r3, #16
 8004d0c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	69db      	ldr	r3, [r3, #28]
 8004d12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d16:	d15b      	bne.n	8004dd0 <UART_SetConfig+0x40c>
  {
    switch (clocksource)
 8004d18:	7ffb      	ldrb	r3, [r7, #31]
 8004d1a:	2b08      	cmp	r3, #8
 8004d1c:	d827      	bhi.n	8004d6e <UART_SetConfig+0x3aa>
 8004d1e:	a201      	add	r2, pc, #4	; (adr r2, 8004d24 <UART_SetConfig+0x360>)
 8004d20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d24:	08004d49 	.word	0x08004d49
 8004d28:	08004d51 	.word	0x08004d51
 8004d2c:	08004d59 	.word	0x08004d59
 8004d30:	08004d6f 	.word	0x08004d6f
 8004d34:	08004d5f 	.word	0x08004d5f
 8004d38:	08004d6f 	.word	0x08004d6f
 8004d3c:	08004d6f 	.word	0x08004d6f
 8004d40:	08004d6f 	.word	0x08004d6f
 8004d44:	08004d67 	.word	0x08004d67
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d48:	f7fe fdf8 	bl	800393c <HAL_RCC_GetPCLK1Freq>
 8004d4c:	61b8      	str	r0, [r7, #24]
        break;
 8004d4e:	e013      	b.n	8004d78 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004d50:	f7fe fe08 	bl	8003964 <HAL_RCC_GetPCLK2Freq>
 8004d54:	61b8      	str	r0, [r7, #24]
        break;
 8004d56:	e00f      	b.n	8004d78 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d58:	4b49      	ldr	r3, [pc, #292]	; (8004e80 <UART_SetConfig+0x4bc>)
 8004d5a:	61bb      	str	r3, [r7, #24]
        break;
 8004d5c:	e00c      	b.n	8004d78 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d5e:	f7fe fd09 	bl	8003774 <HAL_RCC_GetSysClockFreq>
 8004d62:	61b8      	str	r0, [r7, #24]
        break;
 8004d64:	e008      	b.n	8004d78 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d6a:	61bb      	str	r3, [r7, #24]
        break;
 8004d6c:	e004      	b.n	8004d78 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8004d6e:	2300      	movs	r3, #0
 8004d70:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004d72:	2301      	movs	r3, #1
 8004d74:	77bb      	strb	r3, [r7, #30]
        break;
 8004d76:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004d78:	69bb      	ldr	r3, [r7, #24]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d074      	beq.n	8004e68 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004d7e:	69bb      	ldr	r3, [r7, #24]
 8004d80:	005a      	lsls	r2, r3, #1
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	685b      	ldr	r3, [r3, #4]
 8004d86:	085b      	lsrs	r3, r3, #1
 8004d88:	441a      	add	r2, r3
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	685b      	ldr	r3, [r3, #4]
 8004d8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d92:	b29b      	uxth	r3, r3
 8004d94:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d96:	693b      	ldr	r3, [r7, #16]
 8004d98:	2b0f      	cmp	r3, #15
 8004d9a:	d916      	bls.n	8004dca <UART_SetConfig+0x406>
 8004d9c:	693b      	ldr	r3, [r7, #16]
 8004d9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004da2:	d212      	bcs.n	8004dca <UART_SetConfig+0x406>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004da4:	693b      	ldr	r3, [r7, #16]
 8004da6:	b29b      	uxth	r3, r3
 8004da8:	f023 030f 	bic.w	r3, r3, #15
 8004dac:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004dae:	693b      	ldr	r3, [r7, #16]
 8004db0:	085b      	lsrs	r3, r3, #1
 8004db2:	b29b      	uxth	r3, r3
 8004db4:	f003 0307 	and.w	r3, r3, #7
 8004db8:	b29a      	uxth	r2, r3
 8004dba:	89fb      	ldrh	r3, [r7, #14]
 8004dbc:	4313      	orrs	r3, r2
 8004dbe:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	89fa      	ldrh	r2, [r7, #14]
 8004dc6:	60da      	str	r2, [r3, #12]
 8004dc8:	e04e      	b.n	8004e68 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004dca:	2301      	movs	r3, #1
 8004dcc:	77bb      	strb	r3, [r7, #30]
 8004dce:	e04b      	b.n	8004e68 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004dd0:	7ffb      	ldrb	r3, [r7, #31]
 8004dd2:	2b08      	cmp	r3, #8
 8004dd4:	d827      	bhi.n	8004e26 <UART_SetConfig+0x462>
 8004dd6:	a201      	add	r2, pc, #4	; (adr r2, 8004ddc <UART_SetConfig+0x418>)
 8004dd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ddc:	08004e01 	.word	0x08004e01
 8004de0:	08004e09 	.word	0x08004e09
 8004de4:	08004e11 	.word	0x08004e11
 8004de8:	08004e27 	.word	0x08004e27
 8004dec:	08004e17 	.word	0x08004e17
 8004df0:	08004e27 	.word	0x08004e27
 8004df4:	08004e27 	.word	0x08004e27
 8004df8:	08004e27 	.word	0x08004e27
 8004dfc:	08004e1f 	.word	0x08004e1f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e00:	f7fe fd9c 	bl	800393c <HAL_RCC_GetPCLK1Freq>
 8004e04:	61b8      	str	r0, [r7, #24]
        break;
 8004e06:	e013      	b.n	8004e30 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004e08:	f7fe fdac 	bl	8003964 <HAL_RCC_GetPCLK2Freq>
 8004e0c:	61b8      	str	r0, [r7, #24]
        break;
 8004e0e:	e00f      	b.n	8004e30 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e10:	4b1b      	ldr	r3, [pc, #108]	; (8004e80 <UART_SetConfig+0x4bc>)
 8004e12:	61bb      	str	r3, [r7, #24]
        break;
 8004e14:	e00c      	b.n	8004e30 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e16:	f7fe fcad 	bl	8003774 <HAL_RCC_GetSysClockFreq>
 8004e1a:	61b8      	str	r0, [r7, #24]
        break;
 8004e1c:	e008      	b.n	8004e30 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e22:	61bb      	str	r3, [r7, #24]
        break;
 8004e24:	e004      	b.n	8004e30 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8004e26:	2300      	movs	r3, #0
 8004e28:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	77bb      	strb	r3, [r7, #30]
        break;
 8004e2e:	bf00      	nop
    }

    if (pclk != 0U)
 8004e30:	69bb      	ldr	r3, [r7, #24]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d018      	beq.n	8004e68 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	685b      	ldr	r3, [r3, #4]
 8004e3a:	085a      	lsrs	r2, r3, #1
 8004e3c:	69bb      	ldr	r3, [r7, #24]
 8004e3e:	441a      	add	r2, r3
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	685b      	ldr	r3, [r3, #4]
 8004e44:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e48:	b29b      	uxth	r3, r3
 8004e4a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e4c:	693b      	ldr	r3, [r7, #16]
 8004e4e:	2b0f      	cmp	r3, #15
 8004e50:	d908      	bls.n	8004e64 <UART_SetConfig+0x4a0>
 8004e52:	693b      	ldr	r3, [r7, #16]
 8004e54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e58:	d204      	bcs.n	8004e64 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = usartdiv;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	693a      	ldr	r2, [r7, #16]
 8004e60:	60da      	str	r2, [r3, #12]
 8004e62:	e001      	b.n	8004e68 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004e64:	2301      	movs	r3, #1
 8004e66:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2200      	movs	r2, #0
 8004e72:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004e74:	7fbb      	ldrb	r3, [r7, #30]
}
 8004e76:	4618      	mov	r0, r3
 8004e78:	3720      	adds	r7, #32
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	bd80      	pop	{r7, pc}
 8004e7e:	bf00      	nop
 8004e80:	00f42400 	.word	0x00f42400

08004e84 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004e84:	b480      	push	{r7}
 8004e86:	b083      	sub	sp, #12
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e90:	f003 0301 	and.w	r3, r3, #1
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d00a      	beq.n	8004eae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	685b      	ldr	r3, [r3, #4]
 8004e9e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	430a      	orrs	r2, r1
 8004eac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eb2:	f003 0302 	and.w	r3, r3, #2
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d00a      	beq.n	8004ed0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	685b      	ldr	r3, [r3, #4]
 8004ec0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	430a      	orrs	r2, r1
 8004ece:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ed4:	f003 0304 	and.w	r3, r3, #4
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d00a      	beq.n	8004ef2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	685b      	ldr	r3, [r3, #4]
 8004ee2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	430a      	orrs	r2, r1
 8004ef0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ef6:	f003 0308 	and.w	r3, r3, #8
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d00a      	beq.n	8004f14 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	685b      	ldr	r3, [r3, #4]
 8004f04:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	430a      	orrs	r2, r1
 8004f12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f18:	f003 0310 	and.w	r3, r3, #16
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d00a      	beq.n	8004f36 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	689b      	ldr	r3, [r3, #8]
 8004f26:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	430a      	orrs	r2, r1
 8004f34:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f3a:	f003 0320 	and.w	r3, r3, #32
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d00a      	beq.n	8004f58 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	689b      	ldr	r3, [r3, #8]
 8004f48:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	430a      	orrs	r2, r1
 8004f56:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d01a      	beq.n	8004f9a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	685b      	ldr	r3, [r3, #4]
 8004f6a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	430a      	orrs	r2, r1
 8004f78:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f7e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f82:	d10a      	bne.n	8004f9a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	685b      	ldr	r3, [r3, #4]
 8004f8a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	430a      	orrs	r2, r1
 8004f98:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d00a      	beq.n	8004fbc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	685b      	ldr	r3, [r3, #4]
 8004fac:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	430a      	orrs	r2, r1
 8004fba:	605a      	str	r2, [r3, #4]
  }
}
 8004fbc:	bf00      	nop
 8004fbe:	370c      	adds	r7, #12
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc6:	4770      	bx	lr

08004fc8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b086      	sub	sp, #24
 8004fcc:	af02      	add	r7, sp, #8
 8004fce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004fd8:	f7fc f8e6 	bl	80011a8 <HAL_GetTick>
 8004fdc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f003 0308 	and.w	r3, r3, #8
 8004fe8:	2b08      	cmp	r3, #8
 8004fea:	d10e      	bne.n	800500a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004fec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004ff0:	9300      	str	r3, [sp, #0]
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004ffa:	6878      	ldr	r0, [r7, #4]
 8004ffc:	f000 f82d 	bl	800505a <UART_WaitOnFlagUntilTimeout>
 8005000:	4603      	mov	r3, r0
 8005002:	2b00      	cmp	r3, #0
 8005004:	d001      	beq.n	800500a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005006:	2303      	movs	r3, #3
 8005008:	e023      	b.n	8005052 <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f003 0304 	and.w	r3, r3, #4
 8005014:	2b04      	cmp	r3, #4
 8005016:	d10e      	bne.n	8005036 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005018:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800501c:	9300      	str	r3, [sp, #0]
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	2200      	movs	r2, #0
 8005022:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005026:	6878      	ldr	r0, [r7, #4]
 8005028:	f000 f817 	bl	800505a <UART_WaitOnFlagUntilTimeout>
 800502c:	4603      	mov	r3, r0
 800502e:	2b00      	cmp	r3, #0
 8005030:	d001      	beq.n	8005036 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005032:	2303      	movs	r3, #3
 8005034:	e00d      	b.n	8005052 <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2220      	movs	r2, #32
 800503a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2220      	movs	r2, #32
 8005040:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2200      	movs	r2, #0
 8005046:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2200      	movs	r2, #0
 800504c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005050:	2300      	movs	r3, #0
}
 8005052:	4618      	mov	r0, r3
 8005054:	3710      	adds	r7, #16
 8005056:	46bd      	mov	sp, r7
 8005058:	bd80      	pop	{r7, pc}

0800505a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800505a:	b580      	push	{r7, lr}
 800505c:	b084      	sub	sp, #16
 800505e:	af00      	add	r7, sp, #0
 8005060:	60f8      	str	r0, [r7, #12]
 8005062:	60b9      	str	r1, [r7, #8]
 8005064:	603b      	str	r3, [r7, #0]
 8005066:	4613      	mov	r3, r2
 8005068:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800506a:	e05e      	b.n	800512a <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800506c:	69bb      	ldr	r3, [r7, #24]
 800506e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005072:	d05a      	beq.n	800512a <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005074:	f7fc f898 	bl	80011a8 <HAL_GetTick>
 8005078:	4602      	mov	r2, r0
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	1ad3      	subs	r3, r2, r3
 800507e:	69ba      	ldr	r2, [r7, #24]
 8005080:	429a      	cmp	r2, r3
 8005082:	d302      	bcc.n	800508a <UART_WaitOnFlagUntilTimeout+0x30>
 8005084:	69bb      	ldr	r3, [r7, #24]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d11b      	bne.n	80050c2 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	681a      	ldr	r2, [r3, #0]
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005098:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	689a      	ldr	r2, [r3, #8]
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f022 0201 	bic.w	r2, r2, #1
 80050a8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	2220      	movs	r2, #32
 80050ae:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	2220      	movs	r2, #32
 80050b4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	2200      	movs	r2, #0
 80050ba:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80050be:	2303      	movs	r3, #3
 80050c0:	e043      	b.n	800514a <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f003 0304 	and.w	r3, r3, #4
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d02c      	beq.n	800512a <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	69db      	ldr	r3, [r3, #28]
 80050d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80050da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80050de:	d124      	bne.n	800512a <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80050e8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	681a      	ldr	r2, [r3, #0]
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80050f8:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	689a      	ldr	r2, [r3, #8]
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f022 0201 	bic.w	r2, r2, #1
 8005108:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	2220      	movs	r2, #32
 800510e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	2220      	movs	r2, #32
 8005114:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	2220      	movs	r2, #32
 800511a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	2200      	movs	r2, #0
 8005122:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005126:	2303      	movs	r3, #3
 8005128:	e00f      	b.n	800514a <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	69da      	ldr	r2, [r3, #28]
 8005130:	68bb      	ldr	r3, [r7, #8]
 8005132:	4013      	ands	r3, r2
 8005134:	68ba      	ldr	r2, [r7, #8]
 8005136:	429a      	cmp	r2, r3
 8005138:	bf0c      	ite	eq
 800513a:	2301      	moveq	r3, #1
 800513c:	2300      	movne	r3, #0
 800513e:	b2db      	uxtb	r3, r3
 8005140:	461a      	mov	r2, r3
 8005142:	79fb      	ldrb	r3, [r7, #7]
 8005144:	429a      	cmp	r2, r3
 8005146:	d091      	beq.n	800506c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005148:	2300      	movs	r3, #0
}
 800514a:	4618      	mov	r0, r3
 800514c:	3710      	adds	r7, #16
 800514e:	46bd      	mov	sp, r7
 8005150:	bd80      	pop	{r7, pc}
	...

08005154 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8005154:	b5b0      	push	{r4, r5, r7, lr}
 8005156:	b08e      	sub	sp, #56	; 0x38
 8005158:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 800515a:	4ba0      	ldr	r3, [pc, #640]	; (80053dc <MX_LWIP_Init+0x288>)
 800515c:	22c0      	movs	r2, #192	; 0xc0
 800515e:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8005160:	4b9e      	ldr	r3, [pc, #632]	; (80053dc <MX_LWIP_Init+0x288>)
 8005162:	22a8      	movs	r2, #168	; 0xa8
 8005164:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 178;
 8005166:	4b9d      	ldr	r3, [pc, #628]	; (80053dc <MX_LWIP_Init+0x288>)
 8005168:	22b2      	movs	r2, #178	; 0xb2
 800516a:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 104;
 800516c:	4b9b      	ldr	r3, [pc, #620]	; (80053dc <MX_LWIP_Init+0x288>)
 800516e:	2268      	movs	r2, #104	; 0x68
 8005170:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8005172:	4b9b      	ldr	r3, [pc, #620]	; (80053e0 <MX_LWIP_Init+0x28c>)
 8005174:	22ff      	movs	r2, #255	; 0xff
 8005176:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8005178:	4b99      	ldr	r3, [pc, #612]	; (80053e0 <MX_LWIP_Init+0x28c>)
 800517a:	22ff      	movs	r2, #255	; 0xff
 800517c:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 800517e:	4b98      	ldr	r3, [pc, #608]	; (80053e0 <MX_LWIP_Init+0x28c>)
 8005180:	22ff      	movs	r2, #255	; 0xff
 8005182:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8005184:	4b96      	ldr	r3, [pc, #600]	; (80053e0 <MX_LWIP_Init+0x28c>)
 8005186:	2200      	movs	r2, #0
 8005188:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 800518a:	4b96      	ldr	r3, [pc, #600]	; (80053e4 <MX_LWIP_Init+0x290>)
 800518c:	22c0      	movs	r2, #192	; 0xc0
 800518e:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8005190:	4b94      	ldr	r3, [pc, #592]	; (80053e4 <MX_LWIP_Init+0x290>)
 8005192:	22a8      	movs	r2, #168	; 0xa8
 8005194:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 178;
 8005196:	4b93      	ldr	r3, [pc, #588]	; (80053e4 <MX_LWIP_Init+0x290>)
 8005198:	22b2      	movs	r2, #178	; 0xb2
 800519a:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 800519c:	4b91      	ldr	r3, [pc, #580]	; (80053e4 <MX_LWIP_Init+0x290>)
 800519e:	2201      	movs	r2, #1
 80051a0:	70da      	strb	r2, [r3, #3]

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 80051a2:	2100      	movs	r1, #0
 80051a4:	2000      	movs	r0, #0
 80051a6:	f007 fc63 	bl	800ca70 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 80051aa:	4b8c      	ldr	r3, [pc, #560]	; (80053dc <MX_LWIP_Init+0x288>)
 80051ac:	781b      	ldrb	r3, [r3, #0]
 80051ae:	061a      	lsls	r2, r3, #24
 80051b0:	4b8a      	ldr	r3, [pc, #552]	; (80053dc <MX_LWIP_Init+0x288>)
 80051b2:	785b      	ldrb	r3, [r3, #1]
 80051b4:	041b      	lsls	r3, r3, #16
 80051b6:	431a      	orrs	r2, r3
 80051b8:	4b88      	ldr	r3, [pc, #544]	; (80053dc <MX_LWIP_Init+0x288>)
 80051ba:	789b      	ldrb	r3, [r3, #2]
 80051bc:	021b      	lsls	r3, r3, #8
 80051be:	4313      	orrs	r3, r2
 80051c0:	4a86      	ldr	r2, [pc, #536]	; (80053dc <MX_LWIP_Init+0x288>)
 80051c2:	78d2      	ldrb	r2, [r2, #3]
 80051c4:	4313      	orrs	r3, r2
 80051c6:	061a      	lsls	r2, r3, #24
 80051c8:	4b84      	ldr	r3, [pc, #528]	; (80053dc <MX_LWIP_Init+0x288>)
 80051ca:	781b      	ldrb	r3, [r3, #0]
 80051cc:	0619      	lsls	r1, r3, #24
 80051ce:	4b83      	ldr	r3, [pc, #524]	; (80053dc <MX_LWIP_Init+0x288>)
 80051d0:	785b      	ldrb	r3, [r3, #1]
 80051d2:	041b      	lsls	r3, r3, #16
 80051d4:	4319      	orrs	r1, r3
 80051d6:	4b81      	ldr	r3, [pc, #516]	; (80053dc <MX_LWIP_Init+0x288>)
 80051d8:	789b      	ldrb	r3, [r3, #2]
 80051da:	021b      	lsls	r3, r3, #8
 80051dc:	430b      	orrs	r3, r1
 80051de:	497f      	ldr	r1, [pc, #508]	; (80053dc <MX_LWIP_Init+0x288>)
 80051e0:	78c9      	ldrb	r1, [r1, #3]
 80051e2:	430b      	orrs	r3, r1
 80051e4:	021b      	lsls	r3, r3, #8
 80051e6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80051ea:	431a      	orrs	r2, r3
 80051ec:	4b7b      	ldr	r3, [pc, #492]	; (80053dc <MX_LWIP_Init+0x288>)
 80051ee:	781b      	ldrb	r3, [r3, #0]
 80051f0:	0619      	lsls	r1, r3, #24
 80051f2:	4b7a      	ldr	r3, [pc, #488]	; (80053dc <MX_LWIP_Init+0x288>)
 80051f4:	785b      	ldrb	r3, [r3, #1]
 80051f6:	041b      	lsls	r3, r3, #16
 80051f8:	4319      	orrs	r1, r3
 80051fa:	4b78      	ldr	r3, [pc, #480]	; (80053dc <MX_LWIP_Init+0x288>)
 80051fc:	789b      	ldrb	r3, [r3, #2]
 80051fe:	021b      	lsls	r3, r3, #8
 8005200:	430b      	orrs	r3, r1
 8005202:	4976      	ldr	r1, [pc, #472]	; (80053dc <MX_LWIP_Init+0x288>)
 8005204:	78c9      	ldrb	r1, [r1, #3]
 8005206:	430b      	orrs	r3, r1
 8005208:	0a1b      	lsrs	r3, r3, #8
 800520a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800520e:	431a      	orrs	r2, r3
 8005210:	4b72      	ldr	r3, [pc, #456]	; (80053dc <MX_LWIP_Init+0x288>)
 8005212:	781b      	ldrb	r3, [r3, #0]
 8005214:	0619      	lsls	r1, r3, #24
 8005216:	4b71      	ldr	r3, [pc, #452]	; (80053dc <MX_LWIP_Init+0x288>)
 8005218:	785b      	ldrb	r3, [r3, #1]
 800521a:	041b      	lsls	r3, r3, #16
 800521c:	4319      	orrs	r1, r3
 800521e:	4b6f      	ldr	r3, [pc, #444]	; (80053dc <MX_LWIP_Init+0x288>)
 8005220:	789b      	ldrb	r3, [r3, #2]
 8005222:	021b      	lsls	r3, r3, #8
 8005224:	430b      	orrs	r3, r1
 8005226:	496d      	ldr	r1, [pc, #436]	; (80053dc <MX_LWIP_Init+0x288>)
 8005228:	78c9      	ldrb	r1, [r1, #3]
 800522a:	430b      	orrs	r3, r1
 800522c:	0e1b      	lsrs	r3, r3, #24
 800522e:	4313      	orrs	r3, r2
 8005230:	4a6d      	ldr	r2, [pc, #436]	; (80053e8 <MX_LWIP_Init+0x294>)
 8005232:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8005234:	4b6a      	ldr	r3, [pc, #424]	; (80053e0 <MX_LWIP_Init+0x28c>)
 8005236:	781b      	ldrb	r3, [r3, #0]
 8005238:	061a      	lsls	r2, r3, #24
 800523a:	4b69      	ldr	r3, [pc, #420]	; (80053e0 <MX_LWIP_Init+0x28c>)
 800523c:	785b      	ldrb	r3, [r3, #1]
 800523e:	041b      	lsls	r3, r3, #16
 8005240:	431a      	orrs	r2, r3
 8005242:	4b67      	ldr	r3, [pc, #412]	; (80053e0 <MX_LWIP_Init+0x28c>)
 8005244:	789b      	ldrb	r3, [r3, #2]
 8005246:	021b      	lsls	r3, r3, #8
 8005248:	4313      	orrs	r3, r2
 800524a:	4a65      	ldr	r2, [pc, #404]	; (80053e0 <MX_LWIP_Init+0x28c>)
 800524c:	78d2      	ldrb	r2, [r2, #3]
 800524e:	4313      	orrs	r3, r2
 8005250:	061a      	lsls	r2, r3, #24
 8005252:	4b63      	ldr	r3, [pc, #396]	; (80053e0 <MX_LWIP_Init+0x28c>)
 8005254:	781b      	ldrb	r3, [r3, #0]
 8005256:	0619      	lsls	r1, r3, #24
 8005258:	4b61      	ldr	r3, [pc, #388]	; (80053e0 <MX_LWIP_Init+0x28c>)
 800525a:	785b      	ldrb	r3, [r3, #1]
 800525c:	041b      	lsls	r3, r3, #16
 800525e:	4319      	orrs	r1, r3
 8005260:	4b5f      	ldr	r3, [pc, #380]	; (80053e0 <MX_LWIP_Init+0x28c>)
 8005262:	789b      	ldrb	r3, [r3, #2]
 8005264:	021b      	lsls	r3, r3, #8
 8005266:	430b      	orrs	r3, r1
 8005268:	495d      	ldr	r1, [pc, #372]	; (80053e0 <MX_LWIP_Init+0x28c>)
 800526a:	78c9      	ldrb	r1, [r1, #3]
 800526c:	430b      	orrs	r3, r1
 800526e:	021b      	lsls	r3, r3, #8
 8005270:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005274:	431a      	orrs	r2, r3
 8005276:	4b5a      	ldr	r3, [pc, #360]	; (80053e0 <MX_LWIP_Init+0x28c>)
 8005278:	781b      	ldrb	r3, [r3, #0]
 800527a:	0619      	lsls	r1, r3, #24
 800527c:	4b58      	ldr	r3, [pc, #352]	; (80053e0 <MX_LWIP_Init+0x28c>)
 800527e:	785b      	ldrb	r3, [r3, #1]
 8005280:	041b      	lsls	r3, r3, #16
 8005282:	4319      	orrs	r1, r3
 8005284:	4b56      	ldr	r3, [pc, #344]	; (80053e0 <MX_LWIP_Init+0x28c>)
 8005286:	789b      	ldrb	r3, [r3, #2]
 8005288:	021b      	lsls	r3, r3, #8
 800528a:	430b      	orrs	r3, r1
 800528c:	4954      	ldr	r1, [pc, #336]	; (80053e0 <MX_LWIP_Init+0x28c>)
 800528e:	78c9      	ldrb	r1, [r1, #3]
 8005290:	430b      	orrs	r3, r1
 8005292:	0a1b      	lsrs	r3, r3, #8
 8005294:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005298:	431a      	orrs	r2, r3
 800529a:	4b51      	ldr	r3, [pc, #324]	; (80053e0 <MX_LWIP_Init+0x28c>)
 800529c:	781b      	ldrb	r3, [r3, #0]
 800529e:	0619      	lsls	r1, r3, #24
 80052a0:	4b4f      	ldr	r3, [pc, #316]	; (80053e0 <MX_LWIP_Init+0x28c>)
 80052a2:	785b      	ldrb	r3, [r3, #1]
 80052a4:	041b      	lsls	r3, r3, #16
 80052a6:	4319      	orrs	r1, r3
 80052a8:	4b4d      	ldr	r3, [pc, #308]	; (80053e0 <MX_LWIP_Init+0x28c>)
 80052aa:	789b      	ldrb	r3, [r3, #2]
 80052ac:	021b      	lsls	r3, r3, #8
 80052ae:	430b      	orrs	r3, r1
 80052b0:	494b      	ldr	r1, [pc, #300]	; (80053e0 <MX_LWIP_Init+0x28c>)
 80052b2:	78c9      	ldrb	r1, [r1, #3]
 80052b4:	430b      	orrs	r3, r1
 80052b6:	0e1b      	lsrs	r3, r3, #24
 80052b8:	4313      	orrs	r3, r2
 80052ba:	4a4c      	ldr	r2, [pc, #304]	; (80053ec <MX_LWIP_Init+0x298>)
 80052bc:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 80052be:	4b49      	ldr	r3, [pc, #292]	; (80053e4 <MX_LWIP_Init+0x290>)
 80052c0:	781b      	ldrb	r3, [r3, #0]
 80052c2:	061a      	lsls	r2, r3, #24
 80052c4:	4b47      	ldr	r3, [pc, #284]	; (80053e4 <MX_LWIP_Init+0x290>)
 80052c6:	785b      	ldrb	r3, [r3, #1]
 80052c8:	041b      	lsls	r3, r3, #16
 80052ca:	431a      	orrs	r2, r3
 80052cc:	4b45      	ldr	r3, [pc, #276]	; (80053e4 <MX_LWIP_Init+0x290>)
 80052ce:	789b      	ldrb	r3, [r3, #2]
 80052d0:	021b      	lsls	r3, r3, #8
 80052d2:	4313      	orrs	r3, r2
 80052d4:	4a43      	ldr	r2, [pc, #268]	; (80053e4 <MX_LWIP_Init+0x290>)
 80052d6:	78d2      	ldrb	r2, [r2, #3]
 80052d8:	4313      	orrs	r3, r2
 80052da:	061a      	lsls	r2, r3, #24
 80052dc:	4b41      	ldr	r3, [pc, #260]	; (80053e4 <MX_LWIP_Init+0x290>)
 80052de:	781b      	ldrb	r3, [r3, #0]
 80052e0:	0619      	lsls	r1, r3, #24
 80052e2:	4b40      	ldr	r3, [pc, #256]	; (80053e4 <MX_LWIP_Init+0x290>)
 80052e4:	785b      	ldrb	r3, [r3, #1]
 80052e6:	041b      	lsls	r3, r3, #16
 80052e8:	4319      	orrs	r1, r3
 80052ea:	4b3e      	ldr	r3, [pc, #248]	; (80053e4 <MX_LWIP_Init+0x290>)
 80052ec:	789b      	ldrb	r3, [r3, #2]
 80052ee:	021b      	lsls	r3, r3, #8
 80052f0:	430b      	orrs	r3, r1
 80052f2:	493c      	ldr	r1, [pc, #240]	; (80053e4 <MX_LWIP_Init+0x290>)
 80052f4:	78c9      	ldrb	r1, [r1, #3]
 80052f6:	430b      	orrs	r3, r1
 80052f8:	021b      	lsls	r3, r3, #8
 80052fa:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80052fe:	431a      	orrs	r2, r3
 8005300:	4b38      	ldr	r3, [pc, #224]	; (80053e4 <MX_LWIP_Init+0x290>)
 8005302:	781b      	ldrb	r3, [r3, #0]
 8005304:	0619      	lsls	r1, r3, #24
 8005306:	4b37      	ldr	r3, [pc, #220]	; (80053e4 <MX_LWIP_Init+0x290>)
 8005308:	785b      	ldrb	r3, [r3, #1]
 800530a:	041b      	lsls	r3, r3, #16
 800530c:	4319      	orrs	r1, r3
 800530e:	4b35      	ldr	r3, [pc, #212]	; (80053e4 <MX_LWIP_Init+0x290>)
 8005310:	789b      	ldrb	r3, [r3, #2]
 8005312:	021b      	lsls	r3, r3, #8
 8005314:	430b      	orrs	r3, r1
 8005316:	4933      	ldr	r1, [pc, #204]	; (80053e4 <MX_LWIP_Init+0x290>)
 8005318:	78c9      	ldrb	r1, [r1, #3]
 800531a:	430b      	orrs	r3, r1
 800531c:	0a1b      	lsrs	r3, r3, #8
 800531e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005322:	431a      	orrs	r2, r3
 8005324:	4b2f      	ldr	r3, [pc, #188]	; (80053e4 <MX_LWIP_Init+0x290>)
 8005326:	781b      	ldrb	r3, [r3, #0]
 8005328:	0619      	lsls	r1, r3, #24
 800532a:	4b2e      	ldr	r3, [pc, #184]	; (80053e4 <MX_LWIP_Init+0x290>)
 800532c:	785b      	ldrb	r3, [r3, #1]
 800532e:	041b      	lsls	r3, r3, #16
 8005330:	4319      	orrs	r1, r3
 8005332:	4b2c      	ldr	r3, [pc, #176]	; (80053e4 <MX_LWIP_Init+0x290>)
 8005334:	789b      	ldrb	r3, [r3, #2]
 8005336:	021b      	lsls	r3, r3, #8
 8005338:	430b      	orrs	r3, r1
 800533a:	492a      	ldr	r1, [pc, #168]	; (80053e4 <MX_LWIP_Init+0x290>)
 800533c:	78c9      	ldrb	r1, [r1, #3]
 800533e:	430b      	orrs	r3, r1
 8005340:	0e1b      	lsrs	r3, r3, #24
 8005342:	4313      	orrs	r3, r2
 8005344:	4a2a      	ldr	r2, [pc, #168]	; (80053f0 <MX_LWIP_Init+0x29c>)
 8005346:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8005348:	4b2a      	ldr	r3, [pc, #168]	; (80053f4 <MX_LWIP_Init+0x2a0>)
 800534a:	9302      	str	r3, [sp, #8]
 800534c:	4b2a      	ldr	r3, [pc, #168]	; (80053f8 <MX_LWIP_Init+0x2a4>)
 800534e:	9301      	str	r3, [sp, #4]
 8005350:	2300      	movs	r3, #0
 8005352:	9300      	str	r3, [sp, #0]
 8005354:	4b26      	ldr	r3, [pc, #152]	; (80053f0 <MX_LWIP_Init+0x29c>)
 8005356:	4a25      	ldr	r2, [pc, #148]	; (80053ec <MX_LWIP_Init+0x298>)
 8005358:	4923      	ldr	r1, [pc, #140]	; (80053e8 <MX_LWIP_Init+0x294>)
 800535a:	4828      	ldr	r0, [pc, #160]	; (80053fc <MX_LWIP_Init+0x2a8>)
 800535c:	f008 f90a 	bl	800d574 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8005360:	4826      	ldr	r0, [pc, #152]	; (80053fc <MX_LWIP_Init+0x2a8>)
 8005362:	f008 fab5 	bl	800d8d0 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8005366:	4b25      	ldr	r3, [pc, #148]	; (80053fc <MX_LWIP_Init+0x2a8>)
 8005368:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800536c:	089b      	lsrs	r3, r3, #2
 800536e:	f003 0301 	and.w	r3, r3, #1
 8005372:	b2db      	uxtb	r3, r3
 8005374:	2b00      	cmp	r3, #0
 8005376:	d003      	beq.n	8005380 <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8005378:	4820      	ldr	r0, [pc, #128]	; (80053fc <MX_LWIP_Init+0x2a8>)
 800537a:	f008 fab9 	bl	800d8f0 <netif_set_up>
 800537e:	e002      	b.n	8005386 <MX_LWIP_Init+0x232>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8005380:	481e      	ldr	r0, [pc, #120]	; (80053fc <MX_LWIP_Init+0x2a8>)
 8005382:	f008 fb21 	bl	800d9c8 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 8005386:	491e      	ldr	r1, [pc, #120]	; (8005400 <MX_LWIP_Init+0x2ac>)
 8005388:	481c      	ldr	r0, [pc, #112]	; (80053fc <MX_LWIP_Init+0x2a8>)
 800538a:	f008 fbb3 	bl	800daf4 <netif_set_link_callback>

  /* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(Netif_SEM);
 800538e:	2300      	movs	r3, #0
 8005390:	623b      	str	r3, [r7, #32]
 8005392:	2300      	movs	r3, #0
 8005394:	627b      	str	r3, [r7, #36]	; 0x24
  Netif_LinkSemaphore = osSemaphoreCreate(osSemaphore(Netif_SEM) , 1 );
 8005396:	f107 0320 	add.w	r3, r7, #32
 800539a:	2101      	movs	r1, #1
 800539c:	4618      	mov	r0, r3
 800539e:	f000 fd8f 	bl	8005ec0 <osSemaphoreCreate>
 80053a2:	4602      	mov	r2, r0
 80053a4:	4b17      	ldr	r3, [pc, #92]	; (8005404 <MX_LWIP_Init+0x2b0>)
 80053a6:	601a      	str	r2, [r3, #0]

  link_arg.netif = &gnetif;
 80053a8:	4b17      	ldr	r3, [pc, #92]	; (8005408 <MX_LWIP_Init+0x2b4>)
 80053aa:	4a14      	ldr	r2, [pc, #80]	; (80053fc <MX_LWIP_Init+0x2a8>)
 80053ac:	601a      	str	r2, [r3, #0]
  link_arg.semaphore = Netif_LinkSemaphore;
 80053ae:	4b15      	ldr	r3, [pc, #84]	; (8005404 <MX_LWIP_Init+0x2b0>)
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	4a15      	ldr	r2, [pc, #84]	; (8005408 <MX_LWIP_Init+0x2b4>)
 80053b4:	6053      	str	r3, [r2, #4]
  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(LinkThr, ethernetif_set_link, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE * 2);
 80053b6:	4b15      	ldr	r3, [pc, #84]	; (800540c <MX_LWIP_Init+0x2b8>)
 80053b8:	1d3c      	adds	r4, r7, #4
 80053ba:	461d      	mov	r5, r3
 80053bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80053be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80053c0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80053c4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(LinkThr), &link_arg);
 80053c8:	1d3b      	adds	r3, r7, #4
 80053ca:	490f      	ldr	r1, [pc, #60]	; (8005408 <MX_LWIP_Init+0x2b4>)
 80053cc:	4618      	mov	r0, r3
 80053ce:	f000 fc7b 	bl	8005cc8 <osThreadCreate>
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 80053d2:	bf00      	nop
 80053d4:	3728      	adds	r7, #40	; 0x28
 80053d6:	46bd      	mov	sp, r7
 80053d8:	bdb0      	pop	{r4, r5, r7, pc}
 80053da:	bf00      	nop
 80053dc:	20004900 	.word	0x20004900
 80053e0:	200048fc 	.word	0x200048fc
 80053e4:	200048c0 	.word	0x200048c0
 80053e8:	200048f8 	.word	0x200048f8
 80053ec:	20004904 	.word	0x20004904
 80053f0:	20004908 	.word	0x20004908
 80053f4:	0800c981 	.word	0x0800c981
 80053f8:	08005a65 	.word	0x08005a65
 80053fc:	200048c4 	.word	0x200048c4
 8005400:	08005b49 	.word	0x08005b49
 8005404:	20000764 	.word	0x20000764
 8005408:	200048b8 	.word	0x200048b8
 800540c:	08018520 	.word	0x08018520

08005410 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b08e      	sub	sp, #56	; 0x38
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005418:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800541c:	2200      	movs	r2, #0
 800541e:	601a      	str	r2, [r3, #0]
 8005420:	605a      	str	r2, [r3, #4]
 8005422:	609a      	str	r2, [r3, #8]
 8005424:	60da      	str	r2, [r3, #12]
 8005426:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	4a56      	ldr	r2, [pc, #344]	; (8005588 <HAL_ETH_MspInit+0x178>)
 800542e:	4293      	cmp	r3, r2
 8005430:	f040 80a6 	bne.w	8005580 <HAL_ETH_MspInit+0x170>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8005434:	4b55      	ldr	r3, [pc, #340]	; (800558c <HAL_ETH_MspInit+0x17c>)
 8005436:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005438:	4a54      	ldr	r2, [pc, #336]	; (800558c <HAL_ETH_MspInit+0x17c>)
 800543a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800543e:	6313      	str	r3, [r2, #48]	; 0x30
 8005440:	4b52      	ldr	r3, [pc, #328]	; (800558c <HAL_ETH_MspInit+0x17c>)
 8005442:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005444:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005448:	623b      	str	r3, [r7, #32]
 800544a:	6a3b      	ldr	r3, [r7, #32]
 800544c:	4b4f      	ldr	r3, [pc, #316]	; (800558c <HAL_ETH_MspInit+0x17c>)
 800544e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005450:	4a4e      	ldr	r2, [pc, #312]	; (800558c <HAL_ETH_MspInit+0x17c>)
 8005452:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005456:	6313      	str	r3, [r2, #48]	; 0x30
 8005458:	4b4c      	ldr	r3, [pc, #304]	; (800558c <HAL_ETH_MspInit+0x17c>)
 800545a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800545c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005460:	61fb      	str	r3, [r7, #28]
 8005462:	69fb      	ldr	r3, [r7, #28]
 8005464:	4b49      	ldr	r3, [pc, #292]	; (800558c <HAL_ETH_MspInit+0x17c>)
 8005466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005468:	4a48      	ldr	r2, [pc, #288]	; (800558c <HAL_ETH_MspInit+0x17c>)
 800546a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800546e:	6313      	str	r3, [r2, #48]	; 0x30
 8005470:	4b46      	ldr	r3, [pc, #280]	; (800558c <HAL_ETH_MspInit+0x17c>)
 8005472:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005474:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005478:	61bb      	str	r3, [r7, #24]
 800547a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800547c:	4b43      	ldr	r3, [pc, #268]	; (800558c <HAL_ETH_MspInit+0x17c>)
 800547e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005480:	4a42      	ldr	r2, [pc, #264]	; (800558c <HAL_ETH_MspInit+0x17c>)
 8005482:	f043 0304 	orr.w	r3, r3, #4
 8005486:	6313      	str	r3, [r2, #48]	; 0x30
 8005488:	4b40      	ldr	r3, [pc, #256]	; (800558c <HAL_ETH_MspInit+0x17c>)
 800548a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800548c:	f003 0304 	and.w	r3, r3, #4
 8005490:	617b      	str	r3, [r7, #20]
 8005492:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005494:	4b3d      	ldr	r3, [pc, #244]	; (800558c <HAL_ETH_MspInit+0x17c>)
 8005496:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005498:	4a3c      	ldr	r2, [pc, #240]	; (800558c <HAL_ETH_MspInit+0x17c>)
 800549a:	f043 0301 	orr.w	r3, r3, #1
 800549e:	6313      	str	r3, [r2, #48]	; 0x30
 80054a0:	4b3a      	ldr	r3, [pc, #232]	; (800558c <HAL_ETH_MspInit+0x17c>)
 80054a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054a4:	f003 0301 	and.w	r3, r3, #1
 80054a8:	613b      	str	r3, [r7, #16]
 80054aa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80054ac:	4b37      	ldr	r3, [pc, #220]	; (800558c <HAL_ETH_MspInit+0x17c>)
 80054ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054b0:	4a36      	ldr	r2, [pc, #216]	; (800558c <HAL_ETH_MspInit+0x17c>)
 80054b2:	f043 0302 	orr.w	r3, r3, #2
 80054b6:	6313      	str	r3, [r2, #48]	; 0x30
 80054b8:	4b34      	ldr	r3, [pc, #208]	; (800558c <HAL_ETH_MspInit+0x17c>)
 80054ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054bc:	f003 0302 	and.w	r3, r3, #2
 80054c0:	60fb      	str	r3, [r7, #12]
 80054c2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80054c4:	4b31      	ldr	r3, [pc, #196]	; (800558c <HAL_ETH_MspInit+0x17c>)
 80054c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054c8:	4a30      	ldr	r2, [pc, #192]	; (800558c <HAL_ETH_MspInit+0x17c>)
 80054ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80054ce:	6313      	str	r3, [r2, #48]	; 0x30
 80054d0:	4b2e      	ldr	r3, [pc, #184]	; (800558c <HAL_ETH_MspInit+0x17c>)
 80054d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054d8:	60bb      	str	r3, [r7, #8]
 80054da:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80054dc:	2332      	movs	r3, #50	; 0x32
 80054de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054e0:	2302      	movs	r3, #2
 80054e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054e4:	2300      	movs	r3, #0
 80054e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80054e8:	2303      	movs	r3, #3
 80054ea:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80054ec:	230b      	movs	r3, #11
 80054ee:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80054f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80054f4:	4619      	mov	r1, r3
 80054f6:	4826      	ldr	r0, [pc, #152]	; (8005590 <HAL_ETH_MspInit+0x180>)
 80054f8:	f7fd fb74 	bl	8002be4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 80054fc:	2386      	movs	r3, #134	; 0x86
 80054fe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005500:	2302      	movs	r3, #2
 8005502:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005504:	2300      	movs	r3, #0
 8005506:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005508:	2303      	movs	r3, #3
 800550a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800550c:	230b      	movs	r3, #11
 800550e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005510:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005514:	4619      	mov	r1, r3
 8005516:	481f      	ldr	r0, [pc, #124]	; (8005594 <HAL_ETH_MspInit+0x184>)
 8005518:	f7fd fb64 	bl	8002be4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800551c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005520:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005522:	2302      	movs	r3, #2
 8005524:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005526:	2300      	movs	r3, #0
 8005528:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800552a:	2303      	movs	r3, #3
 800552c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800552e:	230b      	movs	r3, #11
 8005530:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005532:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005536:	4619      	mov	r1, r3
 8005538:	4817      	ldr	r0, [pc, #92]	; (8005598 <HAL_ETH_MspInit+0x188>)
 800553a:	f7fd fb53 	bl	8002be4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 800553e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8005542:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005544:	2302      	movs	r3, #2
 8005546:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005548:	2300      	movs	r3, #0
 800554a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800554c:	2303      	movs	r3, #3
 800554e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005550:	230b      	movs	r3, #11
 8005552:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8005554:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005558:	4619      	mov	r1, r3
 800555a:	4810      	ldr	r0, [pc, #64]	; (800559c <HAL_ETH_MspInit+0x18c>)
 800555c:	f7fd fb42 	bl	8002be4 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8005560:	2200      	movs	r2, #0
 8005562:	2105      	movs	r1, #5
 8005564:	203d      	movs	r0, #61	; 0x3d
 8005566:	f7fc f98d 	bl	8001884 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800556a:	203d      	movs	r0, #61	; 0x3d
 800556c:	f7fc f9a6 	bl	80018bc <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(ETH_WKUP_IRQn, 5, 0);
 8005570:	2200      	movs	r2, #0
 8005572:	2105      	movs	r1, #5
 8005574:	203e      	movs	r0, #62	; 0x3e
 8005576:	f7fc f985 	bl	8001884 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_WKUP_IRQn);
 800557a:	203e      	movs	r0, #62	; 0x3e
 800557c:	f7fc f99e 	bl	80018bc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8005580:	bf00      	nop
 8005582:	3738      	adds	r7, #56	; 0x38
 8005584:	46bd      	mov	sp, r7
 8005586:	bd80      	pop	{r7, pc}
 8005588:	40028000 	.word	0x40028000
 800558c:	40023800 	.word	0x40023800
 8005590:	40020800 	.word	0x40020800
 8005594:	40020000 	.word	0x40020000
 8005598:	40020400 	.word	0x40020400
 800559c:	40021800 	.word	0x40021800

080055a0 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b082      	sub	sp, #8
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(s_xSemaphore);
 80055a8:	4b04      	ldr	r3, [pc, #16]	; (80055bc <HAL_ETH_RxCpltCallback+0x1c>)
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	4618      	mov	r0, r3
 80055ae:	f000 fd09 	bl	8005fc4 <osSemaphoreRelease>
}
 80055b2:	bf00      	nop
 80055b4:	3708      	adds	r7, #8
 80055b6:	46bd      	mov	sp, r7
 80055b8:	bd80      	pop	{r7, pc}
 80055ba:	bf00      	nop
 80055bc:	20000768 	.word	0x20000768

080055c0 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 80055c0:	b5b0      	push	{r4, r5, r7, lr}
 80055c2:	b090      	sub	sp, #64	; 0x40
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 80055c8:	2300      	movs	r3, #0
 80055ca:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 80055cc:	4b5c      	ldr	r3, [pc, #368]	; (8005740 <low_level_init+0x180>)
 80055ce:	4a5d      	ldr	r2, [pc, #372]	; (8005744 <low_level_init+0x184>)
 80055d0:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 80055d2:	4b5b      	ldr	r3, [pc, #364]	; (8005740 <low_level_init+0x180>)
 80055d4:	2201      	movs	r2, #1
 80055d6:	605a      	str	r2, [r3, #4]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 80055d8:	4b59      	ldr	r3, [pc, #356]	; (8005740 <low_level_init+0x180>)
 80055da:	2200      	movs	r2, #0
 80055dc:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 80055de:	2300      	movs	r3, #0
 80055e0:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  MACAddr[1] = 0x80;
 80055e4:	2380      	movs	r3, #128	; 0x80
 80055e6:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  MACAddr[2] = 0xE1;
 80055ea:	23e1      	movs	r3, #225	; 0xe1
 80055ec:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  MACAddr[3] = 0x00;
 80055f0:	2300      	movs	r3, #0
 80055f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  MACAddr[4] = 0x00;
 80055f6:	2300      	movs	r3, #0
 80055f8:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  MACAddr[5] = 0x01;
 80055fc:	2301      	movs	r3, #1
 80055fe:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  heth.Init.MACAddr = &MACAddr[0];
 8005602:	4a4f      	ldr	r2, [pc, #316]	; (8005740 <low_level_init+0x180>)
 8005604:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005608:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 800560a:	4b4d      	ldr	r3, [pc, #308]	; (8005740 <low_level_init+0x180>)
 800560c:	2201      	movs	r2, #1
 800560e:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8005610:	4b4b      	ldr	r3, [pc, #300]	; (8005740 <low_level_init+0x180>)
 8005612:	2200      	movs	r2, #0
 8005614:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8005616:	4b4a      	ldr	r3, [pc, #296]	; (8005740 <low_level_init+0x180>)
 8005618:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800561c:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800561e:	4848      	ldr	r0, [pc, #288]	; (8005740 <low_level_init+0x180>)
 8005620:	f7fc f95a 	bl	80018d8 <HAL_ETH_Init>
 8005624:	4603      	mov	r3, r0
 8005626:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if (hal_eth_init_status == HAL_OK)
 800562a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800562e:	2b00      	cmp	r3, #0
 8005630:	d108      	bne.n	8005644 <low_level_init+0x84>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005638:	f043 0304 	orr.w	r3, r3, #4
 800563c:	b2da      	uxtb	r2, r3
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8005644:	2304      	movs	r3, #4
 8005646:	4a40      	ldr	r2, [pc, #256]	; (8005748 <low_level_init+0x188>)
 8005648:	4940      	ldr	r1, [pc, #256]	; (800574c <low_level_init+0x18c>)
 800564a:	483d      	ldr	r0, [pc, #244]	; (8005740 <low_level_init+0x180>)
 800564c:	f7fc fae0 	bl	8001c10 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8005650:	2304      	movs	r3, #4
 8005652:	4a3f      	ldr	r2, [pc, #252]	; (8005750 <low_level_init+0x190>)
 8005654:	493f      	ldr	r1, [pc, #252]	; (8005754 <low_level_init+0x194>)
 8005656:	483a      	ldr	r0, [pc, #232]	; (8005740 <low_level_init+0x180>)
 8005658:	f7fc fb43 	bl	8001ce2 <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2206      	movs	r2, #6
 8005660:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8005664:	4b36      	ldr	r3, [pc, #216]	; (8005740 <low_level_init+0x180>)
 8005666:	695b      	ldr	r3, [r3, #20]
 8005668:	781a      	ldrb	r2, [r3, #0]
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8005670:	4b33      	ldr	r3, [pc, #204]	; (8005740 <low_level_init+0x180>)
 8005672:	695b      	ldr	r3, [r3, #20]
 8005674:	785a      	ldrb	r2, [r3, #1]
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800567c:	4b30      	ldr	r3, [pc, #192]	; (8005740 <low_level_init+0x180>)
 800567e:	695b      	ldr	r3, [r3, #20]
 8005680:	789a      	ldrb	r2, [r3, #2]
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8005688:	4b2d      	ldr	r3, [pc, #180]	; (8005740 <low_level_init+0x180>)
 800568a:	695b      	ldr	r3, [r3, #20]
 800568c:	78da      	ldrb	r2, [r3, #3]
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8005694:	4b2a      	ldr	r3, [pc, #168]	; (8005740 <low_level_init+0x180>)
 8005696:	695b      	ldr	r3, [r3, #20]
 8005698:	791a      	ldrb	r2, [r3, #4]
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 80056a0:	4b27      	ldr	r3, [pc, #156]	; (8005740 <low_level_init+0x180>)
 80056a2:	695b      	ldr	r3, [r3, #20]
 80056a4:	795a      	ldrb	r2, [r3, #5]
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = 1500;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80056b2:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80056ba:	f043 030a 	orr.w	r3, r3, #10
 80056be:	b2da      	uxtb	r2, r3
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

/* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(SEM);
 80056c6:	2300      	movs	r3, #0
 80056c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80056ca:	2300      	movs	r3, #0
 80056cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM), 1);
 80056ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80056d2:	2101      	movs	r1, #1
 80056d4:	4618      	mov	r0, r3
 80056d6:	f000 fbf3 	bl	8005ec0 <osSemaphoreCreate>
 80056da:	4602      	mov	r2, r0
 80056dc:	4b1e      	ldr	r3, [pc, #120]	; (8005758 <low_level_init+0x198>)
 80056de:	601a      	str	r2, [r3, #0]

/* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 80056e0:	4b1e      	ldr	r3, [pc, #120]	; (800575c <low_level_init+0x19c>)
 80056e2:	f107 040c 	add.w	r4, r7, #12
 80056e6:	461d      	mov	r5, r3
 80056e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80056ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80056ec:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80056f0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 80056f4:	f107 030c 	add.w	r3, r7, #12
 80056f8:	6879      	ldr	r1, [r7, #4]
 80056fa:	4618      	mov	r0, r3
 80056fc:	f000 fae4 	bl	8005cc8 <osThreadCreate>
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 8005700:	480f      	ldr	r0, [pc, #60]	; (8005740 <low_level_init+0x180>)
 8005702:	f7fc fe16 	bl	8002332 <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 8005706:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800570a:	461a      	mov	r2, r3
 800570c:	211d      	movs	r1, #29
 800570e:	480c      	ldr	r0, [pc, #48]	; (8005740 <low_level_init+0x180>)
 8005710:	f7fc fd41 	bl	8002196 <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 8005714:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005716:	f043 030b 	orr.w	r3, r3, #11
 800571a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 800571c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800571e:	461a      	mov	r2, r3
 8005720:	211d      	movs	r1, #29
 8005722:	4807      	ldr	r0, [pc, #28]	; (8005740 <low_level_init+0x180>)
 8005724:	f7fc fd9f 	bl	8002266 <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 8005728:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800572c:	461a      	mov	r2, r3
 800572e:	211d      	movs	r1, #29
 8005730:	4803      	ldr	r0, [pc, #12]	; (8005740 <low_level_init+0x180>)
 8005732:	f7fc fd30 	bl	8002196 <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8005736:	bf00      	nop
 8005738:	3740      	adds	r7, #64	; 0x40
 800573a:	46bd      	mov	sp, r7
 800573c:	bdb0      	pop	{r4, r5, r7, pc}
 800573e:	bf00      	nop
 8005740:	200061dc 	.word	0x200061dc
 8005744:	40028000 	.word	0x40028000
 8005748:	20006224 	.word	0x20006224
 800574c:	2000490c 	.word	0x2000490c
 8005750:	2000498c 	.word	0x2000498c
 8005754:	2000615c 	.word	0x2000615c
 8005758:	20000768 	.word	0x20000768
 800575c:	08018544 	.word	0x08018544

08005760 <low_level_output>:
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8005760:	b580      	push	{r7, lr}
 8005762:	b08a      	sub	sp, #40	; 0x28
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
 8005768:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 800576a:	4b4b      	ldr	r3, [pc, #300]	; (8005898 <low_level_output+0x138>)
 800576c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800576e:	689b      	ldr	r3, [r3, #8]
 8005770:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 8005772:	2300      	movs	r3, #0
 8005774:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 8005776:	2300      	movs	r3, #0
 8005778:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 800577a:	2300      	movs	r3, #0
 800577c:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 800577e:	2300      	movs	r3, #0
 8005780:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 8005782:	4b45      	ldr	r3, [pc, #276]	; (8005898 <low_level_output+0x138>)
 8005784:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005786:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 8005788:	2300      	movs	r3, #0
 800578a:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	623b      	str	r3, [r7, #32]
 8005790:	e05a      	b.n	8005848 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8005792:	69bb      	ldr	r3, [r7, #24]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	2b00      	cmp	r3, #0
 8005798:	da03      	bge.n	80057a2 <low_level_output+0x42>
      {
        errval = ERR_USE;
 800579a:	23f8      	movs	r3, #248	; 0xf8
 800579c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 80057a0:	e05c      	b.n	800585c <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 80057a2:	6a3b      	ldr	r3, [r7, #32]
 80057a4:	895b      	ldrh	r3, [r3, #10]
 80057a6:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 80057a8:	2300      	movs	r3, #0
 80057aa:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 80057ac:	e02f      	b.n	800580e <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 80057ae:	69fa      	ldr	r2, [r7, #28]
 80057b0:	693b      	ldr	r3, [r7, #16]
 80057b2:	18d0      	adds	r0, r2, r3
 80057b4:	6a3b      	ldr	r3, [r7, #32]
 80057b6:	685a      	ldr	r2, [r3, #4]
 80057b8:	68bb      	ldr	r3, [r7, #8]
 80057ba:	18d1      	adds	r1, r2, r3
 80057bc:	693a      	ldr	r2, [r7, #16]
 80057be:	f240 53f4 	movw	r3, #1524	; 0x5f4
 80057c2:	1a9b      	subs	r3, r3, r2
 80057c4:	461a      	mov	r2, r3
 80057c6:	f011 fee4 	bl	8017592 <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 80057ca:	69bb      	ldr	r3, [r7, #24]
 80057cc:	68db      	ldr	r3, [r3, #12]
 80057ce:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80057d0:	69bb      	ldr	r3, [r7, #24]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	da03      	bge.n	80057e0 <low_level_output+0x80>
        {
          errval = ERR_USE;
 80057d8:	23f8      	movs	r3, #248	; 0xf8
 80057da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 80057de:	e03d      	b.n	800585c <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 80057e0:	69bb      	ldr	r3, [r7, #24]
 80057e2:	689b      	ldr	r3, [r3, #8]
 80057e4:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 80057e6:	693a      	ldr	r2, [r7, #16]
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	4413      	add	r3, r2
 80057ec:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 80057f0:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 80057f2:	68ba      	ldr	r2, [r7, #8]
 80057f4:	693b      	ldr	r3, [r7, #16]
 80057f6:	1ad3      	subs	r3, r2, r3
 80057f8:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80057fc:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 80057fe:	697a      	ldr	r2, [r7, #20]
 8005800:	693b      	ldr	r3, [r7, #16]
 8005802:	1ad3      	subs	r3, r2, r3
 8005804:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8005808:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 800580a:	2300      	movs	r3, #0
 800580c:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800580e:	68fa      	ldr	r2, [r7, #12]
 8005810:	693b      	ldr	r3, [r7, #16]
 8005812:	4413      	add	r3, r2
 8005814:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8005818:	4293      	cmp	r3, r2
 800581a:	d8c8      	bhi.n	80057ae <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 800581c:	69fa      	ldr	r2, [r7, #28]
 800581e:	693b      	ldr	r3, [r7, #16]
 8005820:	18d0      	adds	r0, r2, r3
 8005822:	6a3b      	ldr	r3, [r7, #32]
 8005824:	685a      	ldr	r2, [r3, #4]
 8005826:	68bb      	ldr	r3, [r7, #8]
 8005828:	4413      	add	r3, r2
 800582a:	68fa      	ldr	r2, [r7, #12]
 800582c:	4619      	mov	r1, r3
 800582e:	f011 feb0 	bl	8017592 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8005832:	693a      	ldr	r2, [r7, #16]
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	4413      	add	r3, r2
 8005838:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 800583a:	697a      	ldr	r2, [r7, #20]
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	4413      	add	r3, r2
 8005840:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 8005842:	6a3b      	ldr	r3, [r7, #32]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	623b      	str	r3, [r7, #32]
 8005848:	6a3b      	ldr	r3, [r7, #32]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d1a1      	bne.n	8005792 <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 800584e:	6979      	ldr	r1, [r7, #20]
 8005850:	4811      	ldr	r0, [pc, #68]	; (8005898 <low_level_output+0x138>)
 8005852:	f7fc fab3 	bl	8001dbc <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 8005856:	2300      	movs	r3, #0
 8005858:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 800585c:	4b0e      	ldr	r3, [pc, #56]	; (8005898 <low_level_output+0x138>)
 800585e:	681a      	ldr	r2, [r3, #0]
 8005860:	f241 0314 	movw	r3, #4116	; 0x1014
 8005864:	4413      	add	r3, r2
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f003 0320 	and.w	r3, r3, #32
 800586c:	2b00      	cmp	r3, #0
 800586e:	d00d      	beq.n	800588c <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8005870:	4b09      	ldr	r3, [pc, #36]	; (8005898 <low_level_output+0x138>)
 8005872:	681a      	ldr	r2, [r3, #0]
 8005874:	f241 0314 	movw	r3, #4116	; 0x1014
 8005878:	4413      	add	r3, r2
 800587a:	2220      	movs	r2, #32
 800587c:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 800587e:	4b06      	ldr	r3, [pc, #24]	; (8005898 <low_level_output+0x138>)
 8005880:	681a      	ldr	r2, [r3, #0]
 8005882:	f241 0304 	movw	r3, #4100	; 0x1004
 8005886:	4413      	add	r3, r2
 8005888:	2200      	movs	r2, #0
 800588a:	601a      	str	r2, [r3, #0]
  }
  return errval;
 800588c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8005890:	4618      	mov	r0, r3
 8005892:	3728      	adds	r7, #40	; 0x28
 8005894:	46bd      	mov	sp, r7
 8005896:	bd80      	pop	{r7, pc}
 8005898:	200061dc 	.word	0x200061dc

0800589c <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b08c      	sub	sp, #48	; 0x30
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80058a4:	2300      	movs	r3, #0
 80058a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 80058a8:	2300      	movs	r3, #0
 80058aa:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 80058ac:	2300      	movs	r3, #0
 80058ae:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 80058b0:	2300      	movs	r3, #0
 80058b2:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 80058b4:	2300      	movs	r3, #0
 80058b6:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 80058b8:	2300      	movs	r3, #0
 80058ba:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 80058bc:	2300      	movs	r3, #0
 80058be:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 80058c0:	484f      	ldr	r0, [pc, #316]	; (8005a00 <low_level_input+0x164>)
 80058c2:	f7fc fb65 	bl	8001f90 <HAL_ETH_GetReceivedFrame_IT>
 80058c6:	4603      	mov	r3, r0
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d001      	beq.n	80058d0 <low_level_input+0x34>

    return NULL;
 80058cc:	2300      	movs	r3, #0
 80058ce:	e092      	b.n	80059f6 <low_level_input+0x15a>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 80058d0:	4b4b      	ldr	r3, [pc, #300]	; (8005a00 <low_level_input+0x164>)
 80058d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058d4:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 80058d6:	4b4a      	ldr	r3, [pc, #296]	; (8005a00 <low_level_input+0x164>)
 80058d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058da:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 80058dc:	89fb      	ldrh	r3, [r7, #14]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d007      	beq.n	80058f2 <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 80058e2:	89fb      	ldrh	r3, [r7, #14]
 80058e4:	f44f 72c1 	mov.w	r2, #386	; 0x182
 80058e8:	4619      	mov	r1, r3
 80058ea:	2000      	movs	r0, #0
 80058ec:	f008 f9cc 	bl	800dc88 <pbuf_alloc>
 80058f0:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 80058f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d04b      	beq.n	8005990 <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 80058f8:	4b41      	ldr	r3, [pc, #260]	; (8005a00 <low_level_input+0x164>)
 80058fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058fc:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 80058fe:	2300      	movs	r3, #0
 8005900:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8005902:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005904:	62bb      	str	r3, [r7, #40]	; 0x28
 8005906:	e040      	b.n	800598a <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 8005908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800590a:	895b      	ldrh	r3, [r3, #10]
 800590c:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 800590e:	2300      	movs	r3, #0
 8005910:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8005912:	e021      	b.n	8005958 <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8005914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005916:	685a      	ldr	r2, [r3, #4]
 8005918:	69bb      	ldr	r3, [r7, #24]
 800591a:	18d0      	adds	r0, r2, r3
 800591c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800591e:	69fb      	ldr	r3, [r7, #28]
 8005920:	18d1      	adds	r1, r2, r3
 8005922:	69fa      	ldr	r2, [r7, #28]
 8005924:	f240 53f4 	movw	r3, #1524	; 0x5f4
 8005928:	1a9b      	subs	r3, r3, r2
 800592a:	461a      	mov	r2, r3
 800592c:	f011 fe31 	bl	8017592 <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8005930:	6a3b      	ldr	r3, [r7, #32]
 8005932:	68db      	ldr	r3, [r3, #12]
 8005934:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 8005936:	6a3b      	ldr	r3, [r7, #32]
 8005938:	689b      	ldr	r3, [r3, #8]
 800593a:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 800593c:	69fa      	ldr	r2, [r7, #28]
 800593e:	697b      	ldr	r3, [r7, #20]
 8005940:	4413      	add	r3, r2
 8005942:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8005946:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8005948:	69ba      	ldr	r2, [r7, #24]
 800594a:	69fb      	ldr	r3, [r7, #28]
 800594c:	1ad3      	subs	r3, r2, r3
 800594e:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8005952:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 8005954:	2300      	movs	r3, #0
 8005956:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8005958:	697a      	ldr	r2, [r7, #20]
 800595a:	69fb      	ldr	r3, [r7, #28]
 800595c:	4413      	add	r3, r2
 800595e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8005962:	4293      	cmp	r3, r2
 8005964:	d8d6      	bhi.n	8005914 <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 8005966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005968:	685a      	ldr	r2, [r3, #4]
 800596a:	69bb      	ldr	r3, [r7, #24]
 800596c:	18d0      	adds	r0, r2, r3
 800596e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005970:	69fb      	ldr	r3, [r7, #28]
 8005972:	4413      	add	r3, r2
 8005974:	697a      	ldr	r2, [r7, #20]
 8005976:	4619      	mov	r1, r3
 8005978:	f011 fe0b 	bl	8017592 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 800597c:	69fa      	ldr	r2, [r7, #28]
 800597e:	697b      	ldr	r3, [r7, #20]
 8005980:	4413      	add	r3, r2
 8005982:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8005984:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	62bb      	str	r3, [r7, #40]	; 0x28
 800598a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800598c:	2b00      	cmp	r3, #0
 800598e:	d1bb      	bne.n	8005908 <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8005990:	4b1b      	ldr	r3, [pc, #108]	; (8005a00 <low_level_input+0x164>)
 8005992:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005994:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8005996:	2300      	movs	r3, #0
 8005998:	613b      	str	r3, [r7, #16]
 800599a:	e00b      	b.n	80059b4 <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 800599c:	6a3b      	ldr	r3, [r7, #32]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80059a4:	6a3b      	ldr	r3, [r7, #32]
 80059a6:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 80059a8:	6a3b      	ldr	r3, [r7, #32]
 80059aa:	68db      	ldr	r3, [r3, #12]
 80059ac:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 80059ae:	693b      	ldr	r3, [r7, #16]
 80059b0:	3301      	adds	r3, #1
 80059b2:	613b      	str	r3, [r7, #16]
 80059b4:	4b12      	ldr	r3, [pc, #72]	; (8005a00 <low_level_input+0x164>)
 80059b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059b8:	693a      	ldr	r2, [r7, #16]
 80059ba:	429a      	cmp	r2, r3
 80059bc:	d3ee      	bcc.n	800599c <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 80059be:	4b10      	ldr	r3, [pc, #64]	; (8005a00 <low_level_input+0x164>)
 80059c0:	2200      	movs	r2, #0
 80059c2:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 80059c4:	4b0e      	ldr	r3, [pc, #56]	; (8005a00 <low_level_input+0x164>)
 80059c6:	681a      	ldr	r2, [r3, #0]
 80059c8:	f241 0314 	movw	r3, #4116	; 0x1014
 80059cc:	4413      	add	r3, r2
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d00d      	beq.n	80059f4 <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 80059d8:	4b09      	ldr	r3, [pc, #36]	; (8005a00 <low_level_input+0x164>)
 80059da:	681a      	ldr	r2, [r3, #0]
 80059dc:	f241 0314 	movw	r3, #4116	; 0x1014
 80059e0:	4413      	add	r3, r2
 80059e2:	2280      	movs	r2, #128	; 0x80
 80059e4:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 80059e6:	4b06      	ldr	r3, [pc, #24]	; (8005a00 <low_level_input+0x164>)
 80059e8:	681a      	ldr	r2, [r3, #0]
 80059ea:	f241 0308 	movw	r3, #4104	; 0x1008
 80059ee:	4413      	add	r3, r2
 80059f0:	2200      	movs	r2, #0
 80059f2:	601a      	str	r2, [r3, #0]
  }
  return p;
 80059f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80059f6:	4618      	mov	r0, r3
 80059f8:	3730      	adds	r7, #48	; 0x30
 80059fa:	46bd      	mov	sp, r7
 80059fc:	bd80      	pop	{r7, pc}
 80059fe:	bf00      	nop
 8005a00:	200061dc 	.word	0x200061dc

08005a04 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void const * argument)
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b084      	sub	sp, #16
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	60fb      	str	r3, [r7, #12]

  for( ;; )
  {
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8005a10:	4b12      	ldr	r3, [pc, #72]	; (8005a5c <ethernetif_input+0x58>)
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f04f 31ff 	mov.w	r1, #4294967295
 8005a18:	4618      	mov	r0, r3
 8005a1a:	f000 fa85 	bl	8005f28 <osSemaphoreWait>
 8005a1e:	4603      	mov	r3, r0
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d1f5      	bne.n	8005a10 <ethernetif_input+0xc>
    {
      do
      {
        LOCK_TCPIP_CORE();
 8005a24:	480e      	ldr	r0, [pc, #56]	; (8005a60 <ethernetif_input+0x5c>)
 8005a26:	f011 fd0d 	bl	8017444 <sys_mutex_lock>
        p = low_level_input( netif );
 8005a2a:	68f8      	ldr	r0, [r7, #12]
 8005a2c:	f7ff ff36 	bl	800589c <low_level_input>
 8005a30:	60b8      	str	r0, [r7, #8]
        if   (p != NULL)
 8005a32:	68bb      	ldr	r3, [r7, #8]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d00a      	beq.n	8005a4e <ethernetif_input+0x4a>
        {
          if (netif->input( p, netif) != ERR_OK )
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	691b      	ldr	r3, [r3, #16]
 8005a3c:	68f9      	ldr	r1, [r7, #12]
 8005a3e:	68b8      	ldr	r0, [r7, #8]
 8005a40:	4798      	blx	r3
 8005a42:	4603      	mov	r3, r0
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d002      	beq.n	8005a4e <ethernetif_input+0x4a>
          {
            pbuf_free(p);
 8005a48:	68b8      	ldr	r0, [r7, #8]
 8005a4a:	f008 fc2f 	bl	800e2ac <pbuf_free>
          }
        }
        UNLOCK_TCPIP_CORE();
 8005a4e:	4804      	ldr	r0, [pc, #16]	; (8005a60 <ethernetif_input+0x5c>)
 8005a50:	f011 fd07 	bl	8017462 <sys_mutex_unlock>
      } while(p!=NULL);
 8005a54:	68bb      	ldr	r3, [r7, #8]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d1e4      	bne.n	8005a24 <ethernetif_input+0x20>
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8005a5a:	e7d9      	b.n	8005a10 <ethernetif_input+0xc>
 8005a5c:	20000768 	.word	0x20000768
 8005a60:	20007a34 	.word	0x20007a34

08005a64 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b082      	sub	sp, #8
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d106      	bne.n	8005a80 <ethernetif_init+0x1c>
 8005a72:	4b0e      	ldr	r3, [pc, #56]	; (8005aac <ethernetif_init+0x48>)
 8005a74:	f240 2237 	movw	r2, #567	; 0x237
 8005a78:	490d      	ldr	r1, [pc, #52]	; (8005ab0 <ethernetif_init+0x4c>)
 8005a7a:	480e      	ldr	r0, [pc, #56]	; (8005ab4 <ethernetif_init+0x50>)
 8005a7c:	f011 fd9c 	bl	80175b8 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2273      	movs	r2, #115	; 0x73
 8005a84:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2274      	movs	r2, #116	; 0x74
 8005a8c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	4a09      	ldr	r2, [pc, #36]	; (8005ab8 <ethernetif_init+0x54>)
 8005a94:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	4a08      	ldr	r2, [pc, #32]	; (8005abc <ethernetif_init+0x58>)
 8005a9a:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8005a9c:	6878      	ldr	r0, [r7, #4]
 8005a9e:	f7ff fd8f 	bl	80055c0 <low_level_init>

  return ERR_OK;
 8005aa2:	2300      	movs	r3, #0
}
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	3708      	adds	r7, #8
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	bd80      	pop	{r7, pc}
 8005aac:	08018560 	.word	0x08018560
 8005ab0:	0801857c 	.word	0x0801857c
 8005ab4:	0801858c 	.word	0x0801858c
 8005ab8:	08015475 	.word	0x08015475
 8005abc:	08005761 	.word	0x08005761

08005ac0 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8005ac4:	f7fb fb70 	bl	80011a8 <HAL_GetTick>
 8005ac8:	4603      	mov	r3, r0
}
 8005aca:	4618      	mov	r0, r3
 8005acc:	bd80      	pop	{r7, pc}
	...

08005ad0 <ethernetif_set_link>:
  * @param  netif: the network interface
  * @retval None
  */
void ethernetif_set_link(void const *argument)

{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b084      	sub	sp, #16
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8005ad8:	2300      	movs	r3, #0
 8005ada:	60bb      	str	r3, [r7, #8]
  struct link_str *link_arg = (struct link_str *)argument;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	60fb      	str	r3, [r7, #12]

  for(;;)
  {
    /* Read PHY_BSR*/
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8005ae0:	f107 0308 	add.w	r3, r7, #8
 8005ae4:	461a      	mov	r2, r3
 8005ae6:	2101      	movs	r1, #1
 8005ae8:	4816      	ldr	r0, [pc, #88]	; (8005b44 <ethernetif_set_link+0x74>)
 8005aea:	f7fc fb54 	bl	8002196 <HAL_ETH_ReadPHYRegister>

    regvalue &= PHY_LINKED_STATUS;
 8005aee:	68bb      	ldr	r3, [r7, #8]
 8005af0:	f003 0304 	and.w	r3, r3, #4
 8005af4:	60bb      	str	r3, [r7, #8]

    /* Check whether the netif link down and the PHY link is up */
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005afe:	f003 0304 	and.w	r3, r3, #4
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d108      	bne.n	8005b18 <ethernetif_set_link+0x48>
 8005b06:	68bb      	ldr	r3, [r7, #8]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d005      	beq.n	8005b18 <ethernetif_set_link+0x48>
    {
      /* network cable is connected */
      netif_set_link_up(link_arg->netif);
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	4618      	mov	r0, r3
 8005b12:	f007 ff8b 	bl	800da2c <netif_set_link_up>
 8005b16:	e011      	b.n	8005b3c <ethernetif_set_link+0x6c>
    }
    else if(netif_is_link_up(link_arg->netif) && (!regvalue))
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005b20:	089b      	lsrs	r3, r3, #2
 8005b22:	f003 0301 	and.w	r3, r3, #1
 8005b26:	b2db      	uxtb	r3, r3
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d007      	beq.n	8005b3c <ethernetif_set_link+0x6c>
 8005b2c:	68bb      	ldr	r3, [r7, #8]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d104      	bne.n	8005b3c <ethernetif_set_link+0x6c>
    {
      /* network cable is dis-connected */
      netif_set_link_down(link_arg->netif);
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	4618      	mov	r0, r3
 8005b38:	f007 ffac 	bl	800da94 <netif_set_link_down>
    }

    /* Suspend thread for 200 ms */
    osDelay(200);
 8005b3c:	20c8      	movs	r0, #200	; 0xc8
 8005b3e:	f000 f90f 	bl	8005d60 <osDelay>
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8005b42:	e7cd      	b.n	8005ae0 <ethernetif_set_link+0x10>
 8005b44:	200061dc 	.word	0x200061dc

08005b48 <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b084      	sub	sp, #16
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 8005b50:	2300      	movs	r3, #0
 8005b52:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 8005b54:	2300      	movs	r3, #0
 8005b56:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005b5e:	089b      	lsrs	r3, r3, #2
 8005b60:	f003 0301 	and.w	r3, r3, #1
 8005b64:	b2db      	uxtb	r3, r3
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d05d      	beq.n	8005c26 <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8005b6a:	4b34      	ldr	r3, [pc, #208]	; (8005c3c <ethernetif_update_config+0xf4>)
 8005b6c:	685b      	ldr	r3, [r3, #4]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d03f      	beq.n	8005bf2 <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 8005b72:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005b76:	2100      	movs	r1, #0
 8005b78:	4830      	ldr	r0, [pc, #192]	; (8005c3c <ethernetif_update_config+0xf4>)
 8005b7a:	f7fc fb74 	bl	8002266 <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 8005b7e:	f7fb fb13 	bl	80011a8 <HAL_GetTick>
 8005b82:	4603      	mov	r3, r0
 8005b84:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8005b86:	f107 0308 	add.w	r3, r7, #8
 8005b8a:	461a      	mov	r2, r3
 8005b8c:	2101      	movs	r1, #1
 8005b8e:	482b      	ldr	r0, [pc, #172]	; (8005c3c <ethernetif_update_config+0xf4>)
 8005b90:	f7fc fb01 	bl	8002196 <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 8005b94:	f7fb fb08 	bl	80011a8 <HAL_GetTick>
 8005b98:	4602      	mov	r2, r0
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	1ad3      	subs	r3, r2, r3
 8005b9e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005ba2:	d828      	bhi.n	8005bf6 <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8005ba4:	68bb      	ldr	r3, [r7, #8]
 8005ba6:	f003 0320 	and.w	r3, r3, #32
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d0eb      	beq.n	8005b86 <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 8005bae:	f107 0308 	add.w	r3, r7, #8
 8005bb2:	461a      	mov	r2, r3
 8005bb4:	211f      	movs	r1, #31
 8005bb6:	4821      	ldr	r0, [pc, #132]	; (8005c3c <ethernetif_update_config+0xf4>)
 8005bb8:	f7fc faed 	bl	8002196 <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8005bbc:	68bb      	ldr	r3, [r7, #8]
 8005bbe:	f003 0310 	and.w	r3, r3, #16
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d004      	beq.n	8005bd0 <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8005bc6:	4b1d      	ldr	r3, [pc, #116]	; (8005c3c <ethernetif_update_config+0xf4>)
 8005bc8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005bcc:	60da      	str	r2, [r3, #12]
 8005bce:	e002      	b.n	8005bd6 <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 8005bd0:	4b1a      	ldr	r3, [pc, #104]	; (8005c3c <ethernetif_update_config+0xf4>)
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 8005bd6:	68bb      	ldr	r3, [r7, #8]
 8005bd8:	f003 0304 	and.w	r3, r3, #4
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d003      	beq.n	8005be8 <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 8005be0:	4b16      	ldr	r3, [pc, #88]	; (8005c3c <ethernetif_update_config+0xf4>)
 8005be2:	2200      	movs	r2, #0
 8005be4:	609a      	str	r2, [r3, #8]
 8005be6:	e016      	b.n	8005c16 <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 8005be8:	4b14      	ldr	r3, [pc, #80]	; (8005c3c <ethernetif_update_config+0xf4>)
 8005bea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005bee:	609a      	str	r2, [r3, #8]
 8005bf0:	e011      	b.n	8005c16 <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 8005bf2:	bf00      	nop
 8005bf4:	e000      	b.n	8005bf8 <ethernetif_update_config+0xb0>
          goto error;
 8005bf6:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8005bf8:	4b10      	ldr	r3, [pc, #64]	; (8005c3c <ethernetif_update_config+0xf4>)
 8005bfa:	68db      	ldr	r3, [r3, #12]
 8005bfc:	08db      	lsrs	r3, r3, #3
 8005bfe:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 8005c00:	4b0e      	ldr	r3, [pc, #56]	; (8005c3c <ethernetif_update_config+0xf4>)
 8005c02:	689b      	ldr	r3, [r3, #8]
 8005c04:	085b      	lsrs	r3, r3, #1
 8005c06:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8005c08:	4313      	orrs	r3, r2
 8005c0a:	b29b      	uxth	r3, r3
 8005c0c:	461a      	mov	r2, r3
 8005c0e:	2100      	movs	r1, #0
 8005c10:	480a      	ldr	r0, [pc, #40]	; (8005c3c <ethernetif_update_config+0xf4>)
 8005c12:	f7fc fb28 	bl	8002266 <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 8005c16:	2100      	movs	r1, #0
 8005c18:	4808      	ldr	r0, [pc, #32]	; (8005c3c <ethernetif_update_config+0xf4>)
 8005c1a:	f7fc fbe9 	bl	80023f0 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 8005c1e:	4807      	ldr	r0, [pc, #28]	; (8005c3c <ethernetif_update_config+0xf4>)
 8005c20:	f7fc fb87 	bl	8002332 <HAL_ETH_Start>
 8005c24:	e002      	b.n	8005c2c <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 8005c26:	4805      	ldr	r0, [pc, #20]	; (8005c3c <ethernetif_update_config+0xf4>)
 8005c28:	f7fc fbb2 	bl	8002390 <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 8005c2c:	6878      	ldr	r0, [r7, #4]
 8005c2e:	f000 f807 	bl	8005c40 <ethernetif_notify_conn_changed>
}
 8005c32:	bf00      	nop
 8005c34:	3710      	adds	r7, #16
 8005c36:	46bd      	mov	sp, r7
 8005c38:	bd80      	pop	{r7, pc}
 8005c3a:	bf00      	nop
 8005c3c:	200061dc 	.word	0x200061dc

08005c40 <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 8005c40:	b480      	push	{r7}
 8005c42:	b083      	sub	sp, #12
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 8005c48:	bf00      	nop
 8005c4a:	370c      	adds	r7, #12
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c52:	4770      	bx	lr

08005c54 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005c54:	b480      	push	{r7}
 8005c56:	b085      	sub	sp, #20
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	4603      	mov	r3, r0
 8005c5c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005c5e:	2300      	movs	r3, #0
 8005c60:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8005c62:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005c66:	2b84      	cmp	r3, #132	; 0x84
 8005c68:	d005      	beq.n	8005c76 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8005c6a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	4413      	add	r3, r2
 8005c72:	3303      	adds	r3, #3
 8005c74:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8005c76:	68fb      	ldr	r3, [r7, #12]
}
 8005c78:	4618      	mov	r0, r3
 8005c7a:	3714      	adds	r7, #20
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c82:	4770      	bx	lr

08005c84 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8005c84:	b480      	push	{r7}
 8005c86:	b083      	sub	sp, #12
 8005c88:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005c8a:	f3ef 8305 	mrs	r3, IPSR
 8005c8e:	607b      	str	r3, [r7, #4]
  return(result);
 8005c90:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	bf14      	ite	ne
 8005c96:	2301      	movne	r3, #1
 8005c98:	2300      	moveq	r3, #0
 8005c9a:	b2db      	uxtb	r3, r3
}
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	370c      	adds	r7, #12
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca6:	4770      	bx	lr

08005ca8 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8005cac:	f7ff ffea 	bl	8005c84 <inHandlerMode>
 8005cb0:	4603      	mov	r3, r0
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d003      	beq.n	8005cbe <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8005cb6:	f001 fec5 	bl	8007a44 <xTaskGetTickCountFromISR>
 8005cba:	4603      	mov	r3, r0
 8005cbc:	e002      	b.n	8005cc4 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8005cbe:	f001 feb1 	bl	8007a24 <xTaskGetTickCount>
 8005cc2:	4603      	mov	r3, r0
  }
}
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	bd80      	pop	{r7, pc}

08005cc8 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005cc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005cca:	b089      	sub	sp, #36	; 0x24
 8005ccc:	af04      	add	r7, sp, #16
 8005cce:	6078      	str	r0, [r7, #4]
 8005cd0:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	695b      	ldr	r3, [r3, #20]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d020      	beq.n	8005d1c <osThreadCreate+0x54>
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	699b      	ldr	r3, [r3, #24]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d01c      	beq.n	8005d1c <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	685c      	ldr	r4, [r3, #4]
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681d      	ldr	r5, [r3, #0]
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	691e      	ldr	r6, [r3, #16]
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	f7ff ffad 	bl	8005c54 <makeFreeRtosPriority>
 8005cfa:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	695b      	ldr	r3, [r3, #20]
 8005d00:	687a      	ldr	r2, [r7, #4]
 8005d02:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005d04:	9202      	str	r2, [sp, #8]
 8005d06:	9301      	str	r3, [sp, #4]
 8005d08:	9100      	str	r1, [sp, #0]
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	4632      	mov	r2, r6
 8005d0e:	4629      	mov	r1, r5
 8005d10:	4620      	mov	r0, r4
 8005d12:	f001 fba5 	bl	8007460 <xTaskCreateStatic>
 8005d16:	4603      	mov	r3, r0
 8005d18:	60fb      	str	r3, [r7, #12]
 8005d1a:	e01c      	b.n	8005d56 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	685c      	ldr	r4, [r3, #4]
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005d28:	b29e      	uxth	r6, r3
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005d30:	4618      	mov	r0, r3
 8005d32:	f7ff ff8f 	bl	8005c54 <makeFreeRtosPriority>
 8005d36:	4602      	mov	r2, r0
 8005d38:	f107 030c 	add.w	r3, r7, #12
 8005d3c:	9301      	str	r3, [sp, #4]
 8005d3e:	9200      	str	r2, [sp, #0]
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	4632      	mov	r2, r6
 8005d44:	4629      	mov	r1, r5
 8005d46:	4620      	mov	r0, r4
 8005d48:	f001 fbea 	bl	8007520 <xTaskCreate>
 8005d4c:	4603      	mov	r3, r0
 8005d4e:	2b01      	cmp	r3, #1
 8005d50:	d001      	beq.n	8005d56 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005d52:	2300      	movs	r3, #0
 8005d54:	e000      	b.n	8005d58 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005d56:	68fb      	ldr	r3, [r7, #12]
}
 8005d58:	4618      	mov	r0, r3
 8005d5a:	3714      	adds	r7, #20
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005d60 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b084      	sub	sp, #16
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d001      	beq.n	8005d76 <osDelay+0x16>
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	e000      	b.n	8005d78 <osDelay+0x18>
 8005d76:	2301      	movs	r3, #1
 8005d78:	4618      	mov	r0, r3
 8005d7a:	f001 fd09 	bl	8007790 <vTaskDelay>
  
  return osOK;
 8005d7e:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005d80:	4618      	mov	r0, r3
 8005d82:	3710      	adds	r7, #16
 8005d84:	46bd      	mov	sp, r7
 8005d86:	bd80      	pop	{r7, pc}

08005d88 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b082      	sub	sp, #8
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	685b      	ldr	r3, [r3, #4]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d007      	beq.n	8005da8 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	685b      	ldr	r3, [r3, #4]
 8005d9c:	4619      	mov	r1, r3
 8005d9e:	2001      	movs	r0, #1
 8005da0:	f000 fc8d 	bl	80066be <xQueueCreateMutexStatic>
 8005da4:	4603      	mov	r3, r0
 8005da6:	e003      	b.n	8005db0 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8005da8:	2001      	movs	r0, #1
 8005daa:	f000 fc70 	bl	800668e <xQueueCreateMutex>
 8005dae:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8005db0:	4618      	mov	r0, r3
 8005db2:	3708      	adds	r7, #8
 8005db4:	46bd      	mov	sp, r7
 8005db6:	bd80      	pop	{r7, pc}

08005db8 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8005db8:	b580      	push	{r7, lr}
 8005dba:	b084      	sub	sp, #16
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
 8005dc0:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d101      	bne.n	8005dd0 <osMutexWait+0x18>
    return osErrorParameter;
 8005dcc:	2380      	movs	r3, #128	; 0x80
 8005dce:	e03a      	b.n	8005e46 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dda:	d103      	bne.n	8005de4 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8005ddc:	f04f 33ff 	mov.w	r3, #4294967295
 8005de0:	60fb      	str	r3, [r7, #12]
 8005de2:	e009      	b.n	8005df8 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d006      	beq.n	8005df8 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d101      	bne.n	8005df8 <osMutexWait+0x40>
      ticks = 1;
 8005df4:	2301      	movs	r3, #1
 8005df6:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8005df8:	f7ff ff44 	bl	8005c84 <inHandlerMode>
 8005dfc:	4603      	mov	r3, r0
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d017      	beq.n	8005e32 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8005e02:	f107 0308 	add.w	r3, r7, #8
 8005e06:	461a      	mov	r2, r3
 8005e08:	2100      	movs	r1, #0
 8005e0a:	6878      	ldr	r0, [r7, #4]
 8005e0c:	f001 f894 	bl	8006f38 <xQueueReceiveFromISR>
 8005e10:	4603      	mov	r3, r0
 8005e12:	2b01      	cmp	r3, #1
 8005e14:	d001      	beq.n	8005e1a <osMutexWait+0x62>
      return osErrorOS;
 8005e16:	23ff      	movs	r3, #255	; 0xff
 8005e18:	e015      	b.n	8005e46 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8005e1a:	68bb      	ldr	r3, [r7, #8]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d011      	beq.n	8005e44 <osMutexWait+0x8c>
 8005e20:	4b0b      	ldr	r3, [pc, #44]	; (8005e50 <osMutexWait+0x98>)
 8005e22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e26:	601a      	str	r2, [r3, #0]
 8005e28:	f3bf 8f4f 	dsb	sy
 8005e2c:	f3bf 8f6f 	isb	sy
 8005e30:	e008      	b.n	8005e44 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8005e32:	68f9      	ldr	r1, [r7, #12]
 8005e34:	6878      	ldr	r0, [r7, #4]
 8005e36:	f000 ff6f 	bl	8006d18 <xQueueSemaphoreTake>
 8005e3a:	4603      	mov	r3, r0
 8005e3c:	2b01      	cmp	r3, #1
 8005e3e:	d001      	beq.n	8005e44 <osMutexWait+0x8c>
    return osErrorOS;
 8005e40:	23ff      	movs	r3, #255	; 0xff
 8005e42:	e000      	b.n	8005e46 <osMutexWait+0x8e>
  }
  
  return osOK;
 8005e44:	2300      	movs	r3, #0
}
 8005e46:	4618      	mov	r0, r3
 8005e48:	3710      	adds	r7, #16
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	bd80      	pop	{r7, pc}
 8005e4e:	bf00      	nop
 8005e50:	e000ed04 	.word	0xe000ed04

08005e54 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b084      	sub	sp, #16
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8005e5c:	2300      	movs	r3, #0
 8005e5e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8005e60:	2300      	movs	r3, #0
 8005e62:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8005e64:	f7ff ff0e 	bl	8005c84 <inHandlerMode>
 8005e68:	4603      	mov	r3, r0
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d016      	beq.n	8005e9c <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8005e6e:	f107 0308 	add.w	r3, r7, #8
 8005e72:	4619      	mov	r1, r3
 8005e74:	6878      	ldr	r0, [r7, #4]
 8005e76:	f000 fddb 	bl	8006a30 <xQueueGiveFromISR>
 8005e7a:	4603      	mov	r3, r0
 8005e7c:	2b01      	cmp	r3, #1
 8005e7e:	d001      	beq.n	8005e84 <osMutexRelease+0x30>
      return osErrorOS;
 8005e80:	23ff      	movs	r3, #255	; 0xff
 8005e82:	e017      	b.n	8005eb4 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005e84:	68bb      	ldr	r3, [r7, #8]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d013      	beq.n	8005eb2 <osMutexRelease+0x5e>
 8005e8a:	4b0c      	ldr	r3, [pc, #48]	; (8005ebc <osMutexRelease+0x68>)
 8005e8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e90:	601a      	str	r2, [r3, #0]
 8005e92:	f3bf 8f4f 	dsb	sy
 8005e96:	f3bf 8f6f 	isb	sy
 8005e9a:	e00a      	b.n	8005eb2 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	2100      	movs	r1, #0
 8005ea2:	6878      	ldr	r0, [r7, #4]
 8005ea4:	f000 fc26 	bl	80066f4 <xQueueGenericSend>
 8005ea8:	4603      	mov	r3, r0
 8005eaa:	2b01      	cmp	r3, #1
 8005eac:	d001      	beq.n	8005eb2 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8005eae:	23ff      	movs	r3, #255	; 0xff
 8005eb0:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
}
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	3710      	adds	r7, #16
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	bd80      	pop	{r7, pc}
 8005ebc:	e000ed04 	.word	0xe000ed04

08005ec0 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	b086      	sub	sp, #24
 8005ec4:	af02      	add	r7, sp, #8
 8005ec6:	6078      	str	r0, [r7, #4]
 8005ec8:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	685b      	ldr	r3, [r3, #4]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d010      	beq.n	8005ef4 <osSemaphoreCreate+0x34>
    if (count == 1) {
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	2b01      	cmp	r3, #1
 8005ed6:	d10b      	bne.n	8005ef0 <osSemaphoreCreate+0x30>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	685a      	ldr	r2, [r3, #4]
 8005edc:	2303      	movs	r3, #3
 8005ede:	9300      	str	r3, [sp, #0]
 8005ee0:	4613      	mov	r3, r2
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	2100      	movs	r1, #0
 8005ee6:	2001      	movs	r0, #1
 8005ee8:	f000 fada 	bl	80064a0 <xQueueGenericCreateStatic>
 8005eec:	4603      	mov	r3, r0
 8005eee:	e016      	b.n	8005f1e <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	e014      	b.n	8005f1e <osSemaphoreCreate+0x5e>
#endif
    }
  }
  else {
    if (count == 1) {
 8005ef4:	683b      	ldr	r3, [r7, #0]
 8005ef6:	2b01      	cmp	r3, #1
 8005ef8:	d110      	bne.n	8005f1c <osSemaphoreCreate+0x5c>
      vSemaphoreCreateBinary(sema);
 8005efa:	2203      	movs	r2, #3
 8005efc:	2100      	movs	r1, #0
 8005efe:	2001      	movs	r0, #1
 8005f00:	f000 fb4b 	bl	800659a <xQueueGenericCreate>
 8005f04:	60f8      	str	r0, [r7, #12]
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d005      	beq.n	8005f18 <osSemaphoreCreate+0x58>
 8005f0c:	2300      	movs	r3, #0
 8005f0e:	2200      	movs	r2, #0
 8005f10:	2100      	movs	r1, #0
 8005f12:	68f8      	ldr	r0, [r7, #12]
 8005f14:	f000 fbee 	bl	80066f4 <xQueueGenericSend>
      return sema;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	e000      	b.n	8005f1e <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8005f1c:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8005f1e:	4618      	mov	r0, r3
 8005f20:	3710      	adds	r7, #16
 8005f22:	46bd      	mov	sp, r7
 8005f24:	bd80      	pop	{r7, pc}
	...

08005f28 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b084      	sub	sp, #16
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
 8005f30:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8005f32:	2300      	movs	r3, #0
 8005f34:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d101      	bne.n	8005f40 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8005f3c:	2380      	movs	r3, #128	; 0x80
 8005f3e:	e03a      	b.n	8005fb6 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8005f40:	2300      	movs	r3, #0
 8005f42:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8005f44:	683b      	ldr	r3, [r7, #0]
 8005f46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f4a:	d103      	bne.n	8005f54 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8005f4c:	f04f 33ff 	mov.w	r3, #4294967295
 8005f50:	60fb      	str	r3, [r7, #12]
 8005f52:	e009      	b.n	8005f68 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d006      	beq.n	8005f68 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d101      	bne.n	8005f68 <osSemaphoreWait+0x40>
      ticks = 1;
 8005f64:	2301      	movs	r3, #1
 8005f66:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8005f68:	f7ff fe8c 	bl	8005c84 <inHandlerMode>
 8005f6c:	4603      	mov	r3, r0
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d017      	beq.n	8005fa2 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8005f72:	f107 0308 	add.w	r3, r7, #8
 8005f76:	461a      	mov	r2, r3
 8005f78:	2100      	movs	r1, #0
 8005f7a:	6878      	ldr	r0, [r7, #4]
 8005f7c:	f000 ffdc 	bl	8006f38 <xQueueReceiveFromISR>
 8005f80:	4603      	mov	r3, r0
 8005f82:	2b01      	cmp	r3, #1
 8005f84:	d001      	beq.n	8005f8a <osSemaphoreWait+0x62>
      return osErrorOS;
 8005f86:	23ff      	movs	r3, #255	; 0xff
 8005f88:	e015      	b.n	8005fb6 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8005f8a:	68bb      	ldr	r3, [r7, #8]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d011      	beq.n	8005fb4 <osSemaphoreWait+0x8c>
 8005f90:	4b0b      	ldr	r3, [pc, #44]	; (8005fc0 <osSemaphoreWait+0x98>)
 8005f92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f96:	601a      	str	r2, [r3, #0]
 8005f98:	f3bf 8f4f 	dsb	sy
 8005f9c:	f3bf 8f6f 	isb	sy
 8005fa0:	e008      	b.n	8005fb4 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8005fa2:	68f9      	ldr	r1, [r7, #12]
 8005fa4:	6878      	ldr	r0, [r7, #4]
 8005fa6:	f000 feb7 	bl	8006d18 <xQueueSemaphoreTake>
 8005faa:	4603      	mov	r3, r0
 8005fac:	2b01      	cmp	r3, #1
 8005fae:	d001      	beq.n	8005fb4 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8005fb0:	23ff      	movs	r3, #255	; 0xff
 8005fb2:	e000      	b.n	8005fb6 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8005fb4:	2300      	movs	r3, #0
}
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	3710      	adds	r7, #16
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	bd80      	pop	{r7, pc}
 8005fbe:	bf00      	nop
 8005fc0:	e000ed04 	.word	0xe000ed04

08005fc4 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	b084      	sub	sp, #16
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8005fcc:	2300      	movs	r3, #0
 8005fce:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8005fd4:	f7ff fe56 	bl	8005c84 <inHandlerMode>
 8005fd8:	4603      	mov	r3, r0
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d016      	beq.n	800600c <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8005fde:	f107 0308 	add.w	r3, r7, #8
 8005fe2:	4619      	mov	r1, r3
 8005fe4:	6878      	ldr	r0, [r7, #4]
 8005fe6:	f000 fd23 	bl	8006a30 <xQueueGiveFromISR>
 8005fea:	4603      	mov	r3, r0
 8005fec:	2b01      	cmp	r3, #1
 8005fee:	d001      	beq.n	8005ff4 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8005ff0:	23ff      	movs	r3, #255	; 0xff
 8005ff2:	e017      	b.n	8006024 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005ff4:	68bb      	ldr	r3, [r7, #8]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d013      	beq.n	8006022 <osSemaphoreRelease+0x5e>
 8005ffa:	4b0c      	ldr	r3, [pc, #48]	; (800602c <osSemaphoreRelease+0x68>)
 8005ffc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006000:	601a      	str	r2, [r3, #0]
 8006002:	f3bf 8f4f 	dsb	sy
 8006006:	f3bf 8f6f 	isb	sy
 800600a:	e00a      	b.n	8006022 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800600c:	2300      	movs	r3, #0
 800600e:	2200      	movs	r2, #0
 8006010:	2100      	movs	r1, #0
 8006012:	6878      	ldr	r0, [r7, #4]
 8006014:	f000 fb6e 	bl	80066f4 <xQueueGenericSend>
 8006018:	4603      	mov	r3, r0
 800601a:	2b01      	cmp	r3, #1
 800601c:	d001      	beq.n	8006022 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800601e:	23ff      	movs	r3, #255	; 0xff
 8006020:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8006022:	68fb      	ldr	r3, [r7, #12]
}
 8006024:	4618      	mov	r0, r3
 8006026:	3710      	adds	r7, #16
 8006028:	46bd      	mov	sp, r7
 800602a:	bd80      	pop	{r7, pc}
 800602c:	e000ed04 	.word	0xe000ed04

08006030 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 8006030:	b580      	push	{r7, lr}
 8006032:	b082      	sub	sp, #8
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8006038:	f7ff fe24 	bl	8005c84 <inHandlerMode>
 800603c:	4603      	mov	r3, r0
 800603e:	2b00      	cmp	r3, #0
 8006040:	d001      	beq.n	8006046 <osSemaphoreDelete+0x16>
    return osErrorISR;
 8006042:	2382      	movs	r3, #130	; 0x82
 8006044:	e003      	b.n	800604e <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 8006046:	6878      	ldr	r0, [r7, #4]
 8006048:	f001 f837 	bl	80070ba <vQueueDelete>

  return osOK; 
 800604c:	2300      	movs	r3, #0
}
 800604e:	4618      	mov	r0, r3
 8006050:	3708      	adds	r7, #8
 8006052:	46bd      	mov	sp, r7
 8006054:	bd80      	pop	{r7, pc}

08006056 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8006056:	b590      	push	{r4, r7, lr}
 8006058:	b085      	sub	sp, #20
 800605a:	af02      	add	r7, sp, #8
 800605c:	6078      	str	r0, [r7, #4]
 800605e:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	689b      	ldr	r3, [r3, #8]
 8006064:	2b00      	cmp	r3, #0
 8006066:	d012      	beq.n	800608e <osMessageCreate+0x38>
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	68db      	ldr	r3, [r3, #12]
 800606c:	2b00      	cmp	r3, #0
 800606e:	d00e      	beq.n	800608e <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	6818      	ldr	r0, [r3, #0]
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	6859      	ldr	r1, [r3, #4]
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	689a      	ldr	r2, [r3, #8]
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	68dc      	ldr	r4, [r3, #12]
 8006080:	2300      	movs	r3, #0
 8006082:	9300      	str	r3, [sp, #0]
 8006084:	4623      	mov	r3, r4
 8006086:	f000 fa0b 	bl	80064a0 <xQueueGenericCreateStatic>
 800608a:	4603      	mov	r3, r0
 800608c:	e008      	b.n	80060a0 <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6818      	ldr	r0, [r3, #0]
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	685b      	ldr	r3, [r3, #4]
 8006096:	2200      	movs	r2, #0
 8006098:	4619      	mov	r1, r3
 800609a:	f000 fa7e 	bl	800659a <xQueueGenericCreate>
 800609e:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 80060a0:	4618      	mov	r0, r3
 80060a2:	370c      	adds	r7, #12
 80060a4:	46bd      	mov	sp, r7
 80060a6:	bd90      	pop	{r4, r7, pc}

080060a8 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 80060a8:	b580      	push	{r7, lr}
 80060aa:	b086      	sub	sp, #24
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	60f8      	str	r0, [r7, #12]
 80060b0:	60b9      	str	r1, [r7, #8]
 80060b2:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 80060b4:	2300      	movs	r3, #0
 80060b6:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 80060bc:	697b      	ldr	r3, [r7, #20]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d101      	bne.n	80060c6 <osMessagePut+0x1e>
    ticks = 1;
 80060c2:	2301      	movs	r3, #1
 80060c4:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 80060c6:	f7ff fddd 	bl	8005c84 <inHandlerMode>
 80060ca:	4603      	mov	r3, r0
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d018      	beq.n	8006102 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 80060d0:	f107 0210 	add.w	r2, r7, #16
 80060d4:	f107 0108 	add.w	r1, r7, #8
 80060d8:	2300      	movs	r3, #0
 80060da:	68f8      	ldr	r0, [r7, #12]
 80060dc:	f000 fc0c 	bl	80068f8 <xQueueGenericSendFromISR>
 80060e0:	4603      	mov	r3, r0
 80060e2:	2b01      	cmp	r3, #1
 80060e4:	d001      	beq.n	80060ea <osMessagePut+0x42>
      return osErrorOS;
 80060e6:	23ff      	movs	r3, #255	; 0xff
 80060e8:	e018      	b.n	800611c <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80060ea:	693b      	ldr	r3, [r7, #16]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d014      	beq.n	800611a <osMessagePut+0x72>
 80060f0:	4b0c      	ldr	r3, [pc, #48]	; (8006124 <osMessagePut+0x7c>)
 80060f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80060f6:	601a      	str	r2, [r3, #0]
 80060f8:	f3bf 8f4f 	dsb	sy
 80060fc:	f3bf 8f6f 	isb	sy
 8006100:	e00b      	b.n	800611a <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8006102:	f107 0108 	add.w	r1, r7, #8
 8006106:	2300      	movs	r3, #0
 8006108:	697a      	ldr	r2, [r7, #20]
 800610a:	68f8      	ldr	r0, [r7, #12]
 800610c:	f000 faf2 	bl	80066f4 <xQueueGenericSend>
 8006110:	4603      	mov	r3, r0
 8006112:	2b01      	cmp	r3, #1
 8006114:	d001      	beq.n	800611a <osMessagePut+0x72>
      return osErrorOS;
 8006116:	23ff      	movs	r3, #255	; 0xff
 8006118:	e000      	b.n	800611c <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800611a:	2300      	movs	r3, #0
}
 800611c:	4618      	mov	r0, r3
 800611e:	3718      	adds	r7, #24
 8006120:	46bd      	mov	sp, r7
 8006122:	bd80      	pop	{r7, pc}
 8006124:	e000ed04 	.word	0xe000ed04

08006128 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8006128:	b590      	push	{r4, r7, lr}
 800612a:	b08b      	sub	sp, #44	; 0x2c
 800612c:	af00      	add	r7, sp, #0
 800612e:	60f8      	str	r0, [r7, #12]
 8006130:	60b9      	str	r1, [r7, #8]
 8006132:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8006134:	68bb      	ldr	r3, [r7, #8]
 8006136:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8006138:	2300      	movs	r3, #0
 800613a:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800613c:	68bb      	ldr	r3, [r7, #8]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d10a      	bne.n	8006158 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8006142:	2380      	movs	r3, #128	; 0x80
 8006144:	617b      	str	r3, [r7, #20]
    return event;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	461c      	mov	r4, r3
 800614a:	f107 0314 	add.w	r3, r7, #20
 800614e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006152:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006156:	e054      	b.n	8006202 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8006158:	2300      	movs	r3, #0
 800615a:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800615c:	2300      	movs	r3, #0
 800615e:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006166:	d103      	bne.n	8006170 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8006168:	f04f 33ff 	mov.w	r3, #4294967295
 800616c:	627b      	str	r3, [r7, #36]	; 0x24
 800616e:	e009      	b.n	8006184 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2b00      	cmp	r3, #0
 8006174:	d006      	beq.n	8006184 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800617a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800617c:	2b00      	cmp	r3, #0
 800617e:	d101      	bne.n	8006184 <osMessageGet+0x5c>
      ticks = 1;
 8006180:	2301      	movs	r3, #1
 8006182:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8006184:	f7ff fd7e 	bl	8005c84 <inHandlerMode>
 8006188:	4603      	mov	r3, r0
 800618a:	2b00      	cmp	r3, #0
 800618c:	d01c      	beq.n	80061c8 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800618e:	f107 0220 	add.w	r2, r7, #32
 8006192:	f107 0314 	add.w	r3, r7, #20
 8006196:	3304      	adds	r3, #4
 8006198:	4619      	mov	r1, r3
 800619a:	68b8      	ldr	r0, [r7, #8]
 800619c:	f000 fecc 	bl	8006f38 <xQueueReceiveFromISR>
 80061a0:	4603      	mov	r3, r0
 80061a2:	2b01      	cmp	r3, #1
 80061a4:	d102      	bne.n	80061ac <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 80061a6:	2310      	movs	r3, #16
 80061a8:	617b      	str	r3, [r7, #20]
 80061aa:	e001      	b.n	80061b0 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 80061ac:	2300      	movs	r3, #0
 80061ae:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 80061b0:	6a3b      	ldr	r3, [r7, #32]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d01d      	beq.n	80061f2 <osMessageGet+0xca>
 80061b6:	4b15      	ldr	r3, [pc, #84]	; (800620c <osMessageGet+0xe4>)
 80061b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80061bc:	601a      	str	r2, [r3, #0]
 80061be:	f3bf 8f4f 	dsb	sy
 80061c2:	f3bf 8f6f 	isb	sy
 80061c6:	e014      	b.n	80061f2 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 80061c8:	f107 0314 	add.w	r3, r7, #20
 80061cc:	3304      	adds	r3, #4
 80061ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061d0:	4619      	mov	r1, r3
 80061d2:	68b8      	ldr	r0, [r7, #8]
 80061d4:	f000 fcbe 	bl	8006b54 <xQueueReceive>
 80061d8:	4603      	mov	r3, r0
 80061da:	2b01      	cmp	r3, #1
 80061dc:	d102      	bne.n	80061e4 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 80061de:	2310      	movs	r3, #16
 80061e0:	617b      	str	r3, [r7, #20]
 80061e2:	e006      	b.n	80061f2 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 80061e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d101      	bne.n	80061ee <osMessageGet+0xc6>
 80061ea:	2300      	movs	r3, #0
 80061ec:	e000      	b.n	80061f0 <osMessageGet+0xc8>
 80061ee:	2340      	movs	r3, #64	; 0x40
 80061f0:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	461c      	mov	r4, r3
 80061f6:	f107 0314 	add.w	r3, r7, #20
 80061fa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80061fe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8006202:	68f8      	ldr	r0, [r7, #12]
 8006204:	372c      	adds	r7, #44	; 0x2c
 8006206:	46bd      	mov	sp, r7
 8006208:	bd90      	pop	{r4, r7, pc}
 800620a:	bf00      	nop
 800620c:	e000ed04 	.word	0xe000ed04

08006210 <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 8006210:	b580      	push	{r7, lr}
 8006212:	b082      	sub	sp, #8
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8006218:	f7ff fd34 	bl	8005c84 <inHandlerMode>
 800621c:	4603      	mov	r3, r0
 800621e:	2b00      	cmp	r3, #0
 8006220:	d004      	beq.n	800622c <osMessageWaiting+0x1c>
    return uxQueueMessagesWaitingFromISR(queue_id);
 8006222:	6878      	ldr	r0, [r7, #4]
 8006224:	f000 ff2a 	bl	800707c <uxQueueMessagesWaitingFromISR>
 8006228:	4603      	mov	r3, r0
 800622a:	e003      	b.n	8006234 <osMessageWaiting+0x24>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 800622c:	6878      	ldr	r0, [r7, #4]
 800622e:	f000 ff06 	bl	800703e <uxQueueMessagesWaiting>
 8006232:	4603      	mov	r3, r0
  }
}
 8006234:	4618      	mov	r0, r3
 8006236:	3708      	adds	r7, #8
 8006238:	46bd      	mov	sp, r7
 800623a:	bd80      	pop	{r7, pc}

0800623c <osMessageDelete>:
* @brief Delete a Message Queue
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osMessageDelete (osMessageQId queue_id)
{
 800623c:	b580      	push	{r7, lr}
 800623e:	b082      	sub	sp, #8
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8006244:	f7ff fd1e 	bl	8005c84 <inHandlerMode>
 8006248:	4603      	mov	r3, r0
 800624a:	2b00      	cmp	r3, #0
 800624c:	d001      	beq.n	8006252 <osMessageDelete+0x16>
    return osErrorISR;
 800624e:	2382      	movs	r3, #130	; 0x82
 8006250:	e003      	b.n	800625a <osMessageDelete+0x1e>
  }

  vQueueDelete(queue_id);
 8006252:	6878      	ldr	r0, [r7, #4]
 8006254:	f000 ff31 	bl	80070ba <vQueueDelete>

  return osOK; 
 8006258:	2300      	movs	r3, #0
}
 800625a:	4618      	mov	r0, r3
 800625c:	3708      	adds	r7, #8
 800625e:	46bd      	mov	sp, r7
 8006260:	bd80      	pop	{r7, pc}

08006262 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006262:	b480      	push	{r7}
 8006264:	b083      	sub	sp, #12
 8006266:	af00      	add	r7, sp, #0
 8006268:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	f103 0208 	add.w	r2, r3, #8
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	f04f 32ff 	mov.w	r2, #4294967295
 800627a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	f103 0208 	add.w	r2, r3, #8
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	f103 0208 	add.w	r2, r3, #8
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2200      	movs	r2, #0
 8006294:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006296:	bf00      	nop
 8006298:	370c      	adds	r7, #12
 800629a:	46bd      	mov	sp, r7
 800629c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a0:	4770      	bx	lr

080062a2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80062a2:	b480      	push	{r7}
 80062a4:	b083      	sub	sp, #12
 80062a6:	af00      	add	r7, sp, #0
 80062a8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	2200      	movs	r2, #0
 80062ae:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80062b0:	bf00      	nop
 80062b2:	370c      	adds	r7, #12
 80062b4:	46bd      	mov	sp, r7
 80062b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ba:	4770      	bx	lr

080062bc <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80062bc:	b480      	push	{r7}
 80062be:	b085      	sub	sp, #20
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	6078      	str	r0, [r7, #4]
 80062c4:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	685b      	ldr	r3, [r3, #4]
 80062ca:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	68fa      	ldr	r2, [r7, #12]
 80062d0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	689a      	ldr	r2, [r3, #8]
 80062d6:	683b      	ldr	r3, [r7, #0]
 80062d8:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	689b      	ldr	r3, [r3, #8]
 80062de:	683a      	ldr	r2, [r7, #0]
 80062e0:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	683a      	ldr	r2, [r7, #0]
 80062e6:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	687a      	ldr	r2, [r7, #4]
 80062ec:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	1c5a      	adds	r2, r3, #1
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	601a      	str	r2, [r3, #0]
}
 80062f8:	bf00      	nop
 80062fa:	3714      	adds	r7, #20
 80062fc:	46bd      	mov	sp, r7
 80062fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006302:	4770      	bx	lr

08006304 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006304:	b480      	push	{r7}
 8006306:	b085      	sub	sp, #20
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
 800630c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006314:	68bb      	ldr	r3, [r7, #8]
 8006316:	f1b3 3fff 	cmp.w	r3, #4294967295
 800631a:	d103      	bne.n	8006324 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	691b      	ldr	r3, [r3, #16]
 8006320:	60fb      	str	r3, [r7, #12]
 8006322:	e00c      	b.n	800633e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	3308      	adds	r3, #8
 8006328:	60fb      	str	r3, [r7, #12]
 800632a:	e002      	b.n	8006332 <vListInsert+0x2e>
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	685b      	ldr	r3, [r3, #4]
 8006330:	60fb      	str	r3, [r7, #12]
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	685b      	ldr	r3, [r3, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	68ba      	ldr	r2, [r7, #8]
 800633a:	429a      	cmp	r2, r3
 800633c:	d2f6      	bcs.n	800632c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	685a      	ldr	r2, [r3, #4]
 8006342:	683b      	ldr	r3, [r7, #0]
 8006344:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	685b      	ldr	r3, [r3, #4]
 800634a:	683a      	ldr	r2, [r7, #0]
 800634c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	68fa      	ldr	r2, [r7, #12]
 8006352:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	683a      	ldr	r2, [r7, #0]
 8006358:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800635a:	683b      	ldr	r3, [r7, #0]
 800635c:	687a      	ldr	r2, [r7, #4]
 800635e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	1c5a      	adds	r2, r3, #1
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	601a      	str	r2, [r3, #0]
}
 800636a:	bf00      	nop
 800636c:	3714      	adds	r7, #20
 800636e:	46bd      	mov	sp, r7
 8006370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006374:	4770      	bx	lr

08006376 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006376:	b480      	push	{r7}
 8006378:	b085      	sub	sp, #20
 800637a:	af00      	add	r7, sp, #0
 800637c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	691b      	ldr	r3, [r3, #16]
 8006382:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	685b      	ldr	r3, [r3, #4]
 8006388:	687a      	ldr	r2, [r7, #4]
 800638a:	6892      	ldr	r2, [r2, #8]
 800638c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	689b      	ldr	r3, [r3, #8]
 8006392:	687a      	ldr	r2, [r7, #4]
 8006394:	6852      	ldr	r2, [r2, #4]
 8006396:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	685b      	ldr	r3, [r3, #4]
 800639c:	687a      	ldr	r2, [r7, #4]
 800639e:	429a      	cmp	r2, r3
 80063a0:	d103      	bne.n	80063aa <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	689a      	ldr	r2, [r3, #8]
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	2200      	movs	r2, #0
 80063ae:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	1e5a      	subs	r2, r3, #1
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	681b      	ldr	r3, [r3, #0]
}
 80063be:	4618      	mov	r0, r3
 80063c0:	3714      	adds	r7, #20
 80063c2:	46bd      	mov	sp, r7
 80063c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c8:	4770      	bx	lr
	...

080063cc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b084      	sub	sp, #16
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
 80063d4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d10b      	bne.n	80063f8 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80063e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063e4:	b672      	cpsid	i
 80063e6:	f383 8811 	msr	BASEPRI, r3
 80063ea:	f3bf 8f6f 	isb	sy
 80063ee:	f3bf 8f4f 	dsb	sy
 80063f2:	b662      	cpsie	i
 80063f4:	60bb      	str	r3, [r7, #8]
 80063f6:	e7fe      	b.n	80063f6 <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
 80063f8:	f002 fd3e 	bl	8008e78 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	681a      	ldr	r2, [r3, #0]
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006404:	68f9      	ldr	r1, [r7, #12]
 8006406:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006408:	fb01 f303 	mul.w	r3, r1, r3
 800640c:	441a      	add	r2, r3
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	2200      	movs	r2, #0
 8006416:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	681a      	ldr	r2, [r3, #0]
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	681a      	ldr	r2, [r3, #0]
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006428:	3b01      	subs	r3, #1
 800642a:	68f9      	ldr	r1, [r7, #12]
 800642c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800642e:	fb01 f303 	mul.w	r3, r1, r3
 8006432:	441a      	add	r2, r3
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	22ff      	movs	r2, #255	; 0xff
 800643c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	22ff      	movs	r2, #255	; 0xff
 8006444:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d114      	bne.n	8006478 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	691b      	ldr	r3, [r3, #16]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d01a      	beq.n	800648c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	3310      	adds	r3, #16
 800645a:	4618      	mov	r0, r3
 800645c:	f001 fc6c 	bl	8007d38 <xTaskRemoveFromEventList>
 8006460:	4603      	mov	r3, r0
 8006462:	2b00      	cmp	r3, #0
 8006464:	d012      	beq.n	800648c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006466:	4b0d      	ldr	r3, [pc, #52]	; (800649c <xQueueGenericReset+0xd0>)
 8006468:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800646c:	601a      	str	r2, [r3, #0]
 800646e:	f3bf 8f4f 	dsb	sy
 8006472:	f3bf 8f6f 	isb	sy
 8006476:	e009      	b.n	800648c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	3310      	adds	r3, #16
 800647c:	4618      	mov	r0, r3
 800647e:	f7ff fef0 	bl	8006262 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	3324      	adds	r3, #36	; 0x24
 8006486:	4618      	mov	r0, r3
 8006488:	f7ff feeb 	bl	8006262 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800648c:	f002 fd26 	bl	8008edc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006490:	2301      	movs	r3, #1
}
 8006492:	4618      	mov	r0, r3
 8006494:	3710      	adds	r7, #16
 8006496:	46bd      	mov	sp, r7
 8006498:	bd80      	pop	{r7, pc}
 800649a:	bf00      	nop
 800649c:	e000ed04 	.word	0xe000ed04

080064a0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80064a0:	b580      	push	{r7, lr}
 80064a2:	b08e      	sub	sp, #56	; 0x38
 80064a4:	af02      	add	r7, sp, #8
 80064a6:	60f8      	str	r0, [r7, #12]
 80064a8:	60b9      	str	r1, [r7, #8]
 80064aa:	607a      	str	r2, [r7, #4]
 80064ac:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d10b      	bne.n	80064cc <xQueueGenericCreateStatic+0x2c>
 80064b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064b8:	b672      	cpsid	i
 80064ba:	f383 8811 	msr	BASEPRI, r3
 80064be:	f3bf 8f6f 	isb	sy
 80064c2:	f3bf 8f4f 	dsb	sy
 80064c6:	b662      	cpsie	i
 80064c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80064ca:	e7fe      	b.n	80064ca <xQueueGenericCreateStatic+0x2a>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80064cc:	683b      	ldr	r3, [r7, #0]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d10b      	bne.n	80064ea <xQueueGenericCreateStatic+0x4a>
 80064d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064d6:	b672      	cpsid	i
 80064d8:	f383 8811 	msr	BASEPRI, r3
 80064dc:	f3bf 8f6f 	isb	sy
 80064e0:	f3bf 8f4f 	dsb	sy
 80064e4:	b662      	cpsie	i
 80064e6:	627b      	str	r3, [r7, #36]	; 0x24
 80064e8:	e7fe      	b.n	80064e8 <xQueueGenericCreateStatic+0x48>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d002      	beq.n	80064f6 <xQueueGenericCreateStatic+0x56>
 80064f0:	68bb      	ldr	r3, [r7, #8]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d001      	beq.n	80064fa <xQueueGenericCreateStatic+0x5a>
 80064f6:	2301      	movs	r3, #1
 80064f8:	e000      	b.n	80064fc <xQueueGenericCreateStatic+0x5c>
 80064fa:	2300      	movs	r3, #0
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d10b      	bne.n	8006518 <xQueueGenericCreateStatic+0x78>
 8006500:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006504:	b672      	cpsid	i
 8006506:	f383 8811 	msr	BASEPRI, r3
 800650a:	f3bf 8f6f 	isb	sy
 800650e:	f3bf 8f4f 	dsb	sy
 8006512:	b662      	cpsie	i
 8006514:	623b      	str	r3, [r7, #32]
 8006516:	e7fe      	b.n	8006516 <xQueueGenericCreateStatic+0x76>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2b00      	cmp	r3, #0
 800651c:	d102      	bne.n	8006524 <xQueueGenericCreateStatic+0x84>
 800651e:	68bb      	ldr	r3, [r7, #8]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d101      	bne.n	8006528 <xQueueGenericCreateStatic+0x88>
 8006524:	2301      	movs	r3, #1
 8006526:	e000      	b.n	800652a <xQueueGenericCreateStatic+0x8a>
 8006528:	2300      	movs	r3, #0
 800652a:	2b00      	cmp	r3, #0
 800652c:	d10b      	bne.n	8006546 <xQueueGenericCreateStatic+0xa6>
 800652e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006532:	b672      	cpsid	i
 8006534:	f383 8811 	msr	BASEPRI, r3
 8006538:	f3bf 8f6f 	isb	sy
 800653c:	f3bf 8f4f 	dsb	sy
 8006540:	b662      	cpsie	i
 8006542:	61fb      	str	r3, [r7, #28]
 8006544:	e7fe      	b.n	8006544 <xQueueGenericCreateStatic+0xa4>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006546:	2348      	movs	r3, #72	; 0x48
 8006548:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800654a:	697b      	ldr	r3, [r7, #20]
 800654c:	2b48      	cmp	r3, #72	; 0x48
 800654e:	d00b      	beq.n	8006568 <xQueueGenericCreateStatic+0xc8>
 8006550:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006554:	b672      	cpsid	i
 8006556:	f383 8811 	msr	BASEPRI, r3
 800655a:	f3bf 8f6f 	isb	sy
 800655e:	f3bf 8f4f 	dsb	sy
 8006562:	b662      	cpsie	i
 8006564:	61bb      	str	r3, [r7, #24]
 8006566:	e7fe      	b.n	8006566 <xQueueGenericCreateStatic+0xc6>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006568:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800656a:	683b      	ldr	r3, [r7, #0]
 800656c:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800656e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006570:	2b00      	cmp	r3, #0
 8006572:	d00d      	beq.n	8006590 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006574:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006576:	2201      	movs	r2, #1
 8006578:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800657c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006582:	9300      	str	r3, [sp, #0]
 8006584:	4613      	mov	r3, r2
 8006586:	687a      	ldr	r2, [r7, #4]
 8006588:	68b9      	ldr	r1, [r7, #8]
 800658a:	68f8      	ldr	r0, [r7, #12]
 800658c:	f000 f846 	bl	800661c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006590:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006592:	4618      	mov	r0, r3
 8006594:	3730      	adds	r7, #48	; 0x30
 8006596:	46bd      	mov	sp, r7
 8006598:	bd80      	pop	{r7, pc}

0800659a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800659a:	b580      	push	{r7, lr}
 800659c:	b08a      	sub	sp, #40	; 0x28
 800659e:	af02      	add	r7, sp, #8
 80065a0:	60f8      	str	r0, [r7, #12]
 80065a2:	60b9      	str	r1, [r7, #8]
 80065a4:	4613      	mov	r3, r2
 80065a6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d10b      	bne.n	80065c6 <xQueueGenericCreate+0x2c>
 80065ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065b2:	b672      	cpsid	i
 80065b4:	f383 8811 	msr	BASEPRI, r3
 80065b8:	f3bf 8f6f 	isb	sy
 80065bc:	f3bf 8f4f 	dsb	sy
 80065c0:	b662      	cpsie	i
 80065c2:	613b      	str	r3, [r7, #16]
 80065c4:	e7fe      	b.n	80065c4 <xQueueGenericCreate+0x2a>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80065c6:	68bb      	ldr	r3, [r7, #8]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d102      	bne.n	80065d2 <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80065cc:	2300      	movs	r3, #0
 80065ce:	61fb      	str	r3, [r7, #28]
 80065d0:	e004      	b.n	80065dc <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	68ba      	ldr	r2, [r7, #8]
 80065d6:	fb02 f303 	mul.w	r3, r2, r3
 80065da:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80065dc:	69fb      	ldr	r3, [r7, #28]
 80065de:	3348      	adds	r3, #72	; 0x48
 80065e0:	4618      	mov	r0, r3
 80065e2:	f002 fd6b 	bl	80090bc <pvPortMalloc>
 80065e6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80065e8:	69bb      	ldr	r3, [r7, #24]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d011      	beq.n	8006612 <xQueueGenericCreate+0x78>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80065ee:	69bb      	ldr	r3, [r7, #24]
 80065f0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80065f2:	697b      	ldr	r3, [r7, #20]
 80065f4:	3348      	adds	r3, #72	; 0x48
 80065f6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80065f8:	69bb      	ldr	r3, [r7, #24]
 80065fa:	2200      	movs	r2, #0
 80065fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006600:	79fa      	ldrb	r2, [r7, #7]
 8006602:	69bb      	ldr	r3, [r7, #24]
 8006604:	9300      	str	r3, [sp, #0]
 8006606:	4613      	mov	r3, r2
 8006608:	697a      	ldr	r2, [r7, #20]
 800660a:	68b9      	ldr	r1, [r7, #8]
 800660c:	68f8      	ldr	r0, [r7, #12]
 800660e:	f000 f805 	bl	800661c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006612:	69bb      	ldr	r3, [r7, #24]
	}
 8006614:	4618      	mov	r0, r3
 8006616:	3720      	adds	r7, #32
 8006618:	46bd      	mov	sp, r7
 800661a:	bd80      	pop	{r7, pc}

0800661c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800661c:	b580      	push	{r7, lr}
 800661e:	b084      	sub	sp, #16
 8006620:	af00      	add	r7, sp, #0
 8006622:	60f8      	str	r0, [r7, #12]
 8006624:	60b9      	str	r1, [r7, #8]
 8006626:	607a      	str	r2, [r7, #4]
 8006628:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800662a:	68bb      	ldr	r3, [r7, #8]
 800662c:	2b00      	cmp	r3, #0
 800662e:	d103      	bne.n	8006638 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006630:	69bb      	ldr	r3, [r7, #24]
 8006632:	69ba      	ldr	r2, [r7, #24]
 8006634:	601a      	str	r2, [r3, #0]
 8006636:	e002      	b.n	800663e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006638:	69bb      	ldr	r3, [r7, #24]
 800663a:	687a      	ldr	r2, [r7, #4]
 800663c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800663e:	69bb      	ldr	r3, [r7, #24]
 8006640:	68fa      	ldr	r2, [r7, #12]
 8006642:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006644:	69bb      	ldr	r3, [r7, #24]
 8006646:	68ba      	ldr	r2, [r7, #8]
 8006648:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800664a:	2101      	movs	r1, #1
 800664c:	69b8      	ldr	r0, [r7, #24]
 800664e:	f7ff febd 	bl	80063cc <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006652:	bf00      	nop
 8006654:	3710      	adds	r7, #16
 8006656:	46bd      	mov	sp, r7
 8006658:	bd80      	pop	{r7, pc}

0800665a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800665a:	b580      	push	{r7, lr}
 800665c:	b082      	sub	sp, #8
 800665e:	af00      	add	r7, sp, #0
 8006660:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d00e      	beq.n	8006686 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	2200      	movs	r2, #0
 800666c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	2200      	movs	r2, #0
 8006672:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2200      	movs	r2, #0
 8006678:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800667a:	2300      	movs	r3, #0
 800667c:	2200      	movs	r2, #0
 800667e:	2100      	movs	r1, #0
 8006680:	6878      	ldr	r0, [r7, #4]
 8006682:	f000 f837 	bl	80066f4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8006686:	bf00      	nop
 8006688:	3708      	adds	r7, #8
 800668a:	46bd      	mov	sp, r7
 800668c:	bd80      	pop	{r7, pc}

0800668e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800668e:	b580      	push	{r7, lr}
 8006690:	b086      	sub	sp, #24
 8006692:	af00      	add	r7, sp, #0
 8006694:	4603      	mov	r3, r0
 8006696:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006698:	2301      	movs	r3, #1
 800669a:	617b      	str	r3, [r7, #20]
 800669c:	2300      	movs	r3, #0
 800669e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80066a0:	79fb      	ldrb	r3, [r7, #7]
 80066a2:	461a      	mov	r2, r3
 80066a4:	6939      	ldr	r1, [r7, #16]
 80066a6:	6978      	ldr	r0, [r7, #20]
 80066a8:	f7ff ff77 	bl	800659a <xQueueGenericCreate>
 80066ac:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80066ae:	68f8      	ldr	r0, [r7, #12]
 80066b0:	f7ff ffd3 	bl	800665a <prvInitialiseMutex>

		return xNewQueue;
 80066b4:	68fb      	ldr	r3, [r7, #12]
	}
 80066b6:	4618      	mov	r0, r3
 80066b8:	3718      	adds	r7, #24
 80066ba:	46bd      	mov	sp, r7
 80066bc:	bd80      	pop	{r7, pc}

080066be <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80066be:	b580      	push	{r7, lr}
 80066c0:	b088      	sub	sp, #32
 80066c2:	af02      	add	r7, sp, #8
 80066c4:	4603      	mov	r3, r0
 80066c6:	6039      	str	r1, [r7, #0]
 80066c8:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80066ca:	2301      	movs	r3, #1
 80066cc:	617b      	str	r3, [r7, #20]
 80066ce:	2300      	movs	r3, #0
 80066d0:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80066d2:	79fb      	ldrb	r3, [r7, #7]
 80066d4:	9300      	str	r3, [sp, #0]
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	2200      	movs	r2, #0
 80066da:	6939      	ldr	r1, [r7, #16]
 80066dc:	6978      	ldr	r0, [r7, #20]
 80066de:	f7ff fedf 	bl	80064a0 <xQueueGenericCreateStatic>
 80066e2:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80066e4:	68f8      	ldr	r0, [r7, #12]
 80066e6:	f7ff ffb8 	bl	800665a <prvInitialiseMutex>

		return xNewQueue;
 80066ea:	68fb      	ldr	r3, [r7, #12]
	}
 80066ec:	4618      	mov	r0, r3
 80066ee:	3718      	adds	r7, #24
 80066f0:	46bd      	mov	sp, r7
 80066f2:	bd80      	pop	{r7, pc}

080066f4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80066f4:	b580      	push	{r7, lr}
 80066f6:	b08e      	sub	sp, #56	; 0x38
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	60f8      	str	r0, [r7, #12]
 80066fc:	60b9      	str	r1, [r7, #8]
 80066fe:	607a      	str	r2, [r7, #4]
 8006700:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006702:	2300      	movs	r3, #0
 8006704:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800670a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800670c:	2b00      	cmp	r3, #0
 800670e:	d10b      	bne.n	8006728 <xQueueGenericSend+0x34>
 8006710:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006714:	b672      	cpsid	i
 8006716:	f383 8811 	msr	BASEPRI, r3
 800671a:	f3bf 8f6f 	isb	sy
 800671e:	f3bf 8f4f 	dsb	sy
 8006722:	b662      	cpsie	i
 8006724:	62bb      	str	r3, [r7, #40]	; 0x28
 8006726:	e7fe      	b.n	8006726 <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006728:	68bb      	ldr	r3, [r7, #8]
 800672a:	2b00      	cmp	r3, #0
 800672c:	d103      	bne.n	8006736 <xQueueGenericSend+0x42>
 800672e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006732:	2b00      	cmp	r3, #0
 8006734:	d101      	bne.n	800673a <xQueueGenericSend+0x46>
 8006736:	2301      	movs	r3, #1
 8006738:	e000      	b.n	800673c <xQueueGenericSend+0x48>
 800673a:	2300      	movs	r3, #0
 800673c:	2b00      	cmp	r3, #0
 800673e:	d10b      	bne.n	8006758 <xQueueGenericSend+0x64>
 8006740:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006744:	b672      	cpsid	i
 8006746:	f383 8811 	msr	BASEPRI, r3
 800674a:	f3bf 8f6f 	isb	sy
 800674e:	f3bf 8f4f 	dsb	sy
 8006752:	b662      	cpsie	i
 8006754:	627b      	str	r3, [r7, #36]	; 0x24
 8006756:	e7fe      	b.n	8006756 <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	2b02      	cmp	r3, #2
 800675c:	d103      	bne.n	8006766 <xQueueGenericSend+0x72>
 800675e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006760:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006762:	2b01      	cmp	r3, #1
 8006764:	d101      	bne.n	800676a <xQueueGenericSend+0x76>
 8006766:	2301      	movs	r3, #1
 8006768:	e000      	b.n	800676c <xQueueGenericSend+0x78>
 800676a:	2300      	movs	r3, #0
 800676c:	2b00      	cmp	r3, #0
 800676e:	d10b      	bne.n	8006788 <xQueueGenericSend+0x94>
 8006770:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006774:	b672      	cpsid	i
 8006776:	f383 8811 	msr	BASEPRI, r3
 800677a:	f3bf 8f6f 	isb	sy
 800677e:	f3bf 8f4f 	dsb	sy
 8006782:	b662      	cpsie	i
 8006784:	623b      	str	r3, [r7, #32]
 8006786:	e7fe      	b.n	8006786 <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006788:	f001 fc96 	bl	80080b8 <xTaskGetSchedulerState>
 800678c:	4603      	mov	r3, r0
 800678e:	2b00      	cmp	r3, #0
 8006790:	d102      	bne.n	8006798 <xQueueGenericSend+0xa4>
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d101      	bne.n	800679c <xQueueGenericSend+0xa8>
 8006798:	2301      	movs	r3, #1
 800679a:	e000      	b.n	800679e <xQueueGenericSend+0xaa>
 800679c:	2300      	movs	r3, #0
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d10b      	bne.n	80067ba <xQueueGenericSend+0xc6>
 80067a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067a6:	b672      	cpsid	i
 80067a8:	f383 8811 	msr	BASEPRI, r3
 80067ac:	f3bf 8f6f 	isb	sy
 80067b0:	f3bf 8f4f 	dsb	sy
 80067b4:	b662      	cpsie	i
 80067b6:	61fb      	str	r3, [r7, #28]
 80067b8:	e7fe      	b.n	80067b8 <xQueueGenericSend+0xc4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80067ba:	f002 fb5d 	bl	8008e78 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80067be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80067c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067c6:	429a      	cmp	r2, r3
 80067c8:	d302      	bcc.n	80067d0 <xQueueGenericSend+0xdc>
 80067ca:	683b      	ldr	r3, [r7, #0]
 80067cc:	2b02      	cmp	r3, #2
 80067ce:	d129      	bne.n	8006824 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80067d0:	683a      	ldr	r2, [r7, #0]
 80067d2:	68b9      	ldr	r1, [r7, #8]
 80067d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80067d6:	f000 fcac 	bl	8007132 <prvCopyDataToQueue>
 80067da:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80067dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d010      	beq.n	8006806 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80067e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067e6:	3324      	adds	r3, #36	; 0x24
 80067e8:	4618      	mov	r0, r3
 80067ea:	f001 faa5 	bl	8007d38 <xTaskRemoveFromEventList>
 80067ee:	4603      	mov	r3, r0
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d013      	beq.n	800681c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80067f4:	4b3f      	ldr	r3, [pc, #252]	; (80068f4 <xQueueGenericSend+0x200>)
 80067f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80067fa:	601a      	str	r2, [r3, #0]
 80067fc:	f3bf 8f4f 	dsb	sy
 8006800:	f3bf 8f6f 	isb	sy
 8006804:	e00a      	b.n	800681c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006808:	2b00      	cmp	r3, #0
 800680a:	d007      	beq.n	800681c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800680c:	4b39      	ldr	r3, [pc, #228]	; (80068f4 <xQueueGenericSend+0x200>)
 800680e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006812:	601a      	str	r2, [r3, #0]
 8006814:	f3bf 8f4f 	dsb	sy
 8006818:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800681c:	f002 fb5e 	bl	8008edc <vPortExitCritical>
				return pdPASS;
 8006820:	2301      	movs	r3, #1
 8006822:	e063      	b.n	80068ec <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2b00      	cmp	r3, #0
 8006828:	d103      	bne.n	8006832 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800682a:	f002 fb57 	bl	8008edc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800682e:	2300      	movs	r3, #0
 8006830:	e05c      	b.n	80068ec <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006832:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006834:	2b00      	cmp	r3, #0
 8006836:	d106      	bne.n	8006846 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006838:	f107 0314 	add.w	r3, r7, #20
 800683c:	4618      	mov	r0, r3
 800683e:	f001 fadf 	bl	8007e00 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006842:	2301      	movs	r3, #1
 8006844:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006846:	f002 fb49 	bl	8008edc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800684a:	f001 f83f 	bl	80078cc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800684e:	f002 fb13 	bl	8008e78 <vPortEnterCritical>
 8006852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006854:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006858:	b25b      	sxtb	r3, r3
 800685a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800685e:	d103      	bne.n	8006868 <xQueueGenericSend+0x174>
 8006860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006862:	2200      	movs	r2, #0
 8006864:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800686a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800686e:	b25b      	sxtb	r3, r3
 8006870:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006874:	d103      	bne.n	800687e <xQueueGenericSend+0x18a>
 8006876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006878:	2200      	movs	r2, #0
 800687a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800687e:	f002 fb2d 	bl	8008edc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006882:	1d3a      	adds	r2, r7, #4
 8006884:	f107 0314 	add.w	r3, r7, #20
 8006888:	4611      	mov	r1, r2
 800688a:	4618      	mov	r0, r3
 800688c:	f001 face 	bl	8007e2c <xTaskCheckForTimeOut>
 8006890:	4603      	mov	r3, r0
 8006892:	2b00      	cmp	r3, #0
 8006894:	d124      	bne.n	80068e0 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006896:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006898:	f000 fd43 	bl	8007322 <prvIsQueueFull>
 800689c:	4603      	mov	r3, r0
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d018      	beq.n	80068d4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80068a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068a4:	3310      	adds	r3, #16
 80068a6:	687a      	ldr	r2, [r7, #4]
 80068a8:	4611      	mov	r1, r2
 80068aa:	4618      	mov	r0, r3
 80068ac:	f001 f9f2 	bl	8007c94 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80068b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80068b2:	f000 fcce 	bl	8007252 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80068b6:	f001 f817 	bl	80078e8 <xTaskResumeAll>
 80068ba:	4603      	mov	r3, r0
 80068bc:	2b00      	cmp	r3, #0
 80068be:	f47f af7c 	bne.w	80067ba <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80068c2:	4b0c      	ldr	r3, [pc, #48]	; (80068f4 <xQueueGenericSend+0x200>)
 80068c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80068c8:	601a      	str	r2, [r3, #0]
 80068ca:	f3bf 8f4f 	dsb	sy
 80068ce:	f3bf 8f6f 	isb	sy
 80068d2:	e772      	b.n	80067ba <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80068d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80068d6:	f000 fcbc 	bl	8007252 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80068da:	f001 f805 	bl	80078e8 <xTaskResumeAll>
 80068de:	e76c      	b.n	80067ba <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80068e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80068e2:	f000 fcb6 	bl	8007252 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80068e6:	f000 ffff 	bl	80078e8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80068ea:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80068ec:	4618      	mov	r0, r3
 80068ee:	3738      	adds	r7, #56	; 0x38
 80068f0:	46bd      	mov	sp, r7
 80068f2:	bd80      	pop	{r7, pc}
 80068f4:	e000ed04 	.word	0xe000ed04

080068f8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b08e      	sub	sp, #56	; 0x38
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	60f8      	str	r0, [r7, #12]
 8006900:	60b9      	str	r1, [r7, #8]
 8006902:	607a      	str	r2, [r7, #4]
 8006904:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800690a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800690c:	2b00      	cmp	r3, #0
 800690e:	d10b      	bne.n	8006928 <xQueueGenericSendFromISR+0x30>
 8006910:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006914:	b672      	cpsid	i
 8006916:	f383 8811 	msr	BASEPRI, r3
 800691a:	f3bf 8f6f 	isb	sy
 800691e:	f3bf 8f4f 	dsb	sy
 8006922:	b662      	cpsie	i
 8006924:	627b      	str	r3, [r7, #36]	; 0x24
 8006926:	e7fe      	b.n	8006926 <xQueueGenericSendFromISR+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006928:	68bb      	ldr	r3, [r7, #8]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d103      	bne.n	8006936 <xQueueGenericSendFromISR+0x3e>
 800692e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006932:	2b00      	cmp	r3, #0
 8006934:	d101      	bne.n	800693a <xQueueGenericSendFromISR+0x42>
 8006936:	2301      	movs	r3, #1
 8006938:	e000      	b.n	800693c <xQueueGenericSendFromISR+0x44>
 800693a:	2300      	movs	r3, #0
 800693c:	2b00      	cmp	r3, #0
 800693e:	d10b      	bne.n	8006958 <xQueueGenericSendFromISR+0x60>
 8006940:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006944:	b672      	cpsid	i
 8006946:	f383 8811 	msr	BASEPRI, r3
 800694a:	f3bf 8f6f 	isb	sy
 800694e:	f3bf 8f4f 	dsb	sy
 8006952:	b662      	cpsie	i
 8006954:	623b      	str	r3, [r7, #32]
 8006956:	e7fe      	b.n	8006956 <xQueueGenericSendFromISR+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006958:	683b      	ldr	r3, [r7, #0]
 800695a:	2b02      	cmp	r3, #2
 800695c:	d103      	bne.n	8006966 <xQueueGenericSendFromISR+0x6e>
 800695e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006960:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006962:	2b01      	cmp	r3, #1
 8006964:	d101      	bne.n	800696a <xQueueGenericSendFromISR+0x72>
 8006966:	2301      	movs	r3, #1
 8006968:	e000      	b.n	800696c <xQueueGenericSendFromISR+0x74>
 800696a:	2300      	movs	r3, #0
 800696c:	2b00      	cmp	r3, #0
 800696e:	d10b      	bne.n	8006988 <xQueueGenericSendFromISR+0x90>
 8006970:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006974:	b672      	cpsid	i
 8006976:	f383 8811 	msr	BASEPRI, r3
 800697a:	f3bf 8f6f 	isb	sy
 800697e:	f3bf 8f4f 	dsb	sy
 8006982:	b662      	cpsie	i
 8006984:	61fb      	str	r3, [r7, #28]
 8006986:	e7fe      	b.n	8006986 <xQueueGenericSendFromISR+0x8e>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006988:	f002 fb56 	bl	8009038 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800698c:	f3ef 8211 	mrs	r2, BASEPRI
 8006990:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006994:	b672      	cpsid	i
 8006996:	f383 8811 	msr	BASEPRI, r3
 800699a:	f3bf 8f6f 	isb	sy
 800699e:	f3bf 8f4f 	dsb	sy
 80069a2:	b662      	cpsie	i
 80069a4:	61ba      	str	r2, [r7, #24]
 80069a6:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80069a8:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80069aa:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80069ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80069b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069b4:	429a      	cmp	r2, r3
 80069b6:	d302      	bcc.n	80069be <xQueueGenericSendFromISR+0xc6>
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	2b02      	cmp	r3, #2
 80069bc:	d12c      	bne.n	8006a18 <xQueueGenericSendFromISR+0x120>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80069be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069c0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80069c4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80069c8:	683a      	ldr	r2, [r7, #0]
 80069ca:	68b9      	ldr	r1, [r7, #8]
 80069cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80069ce:	f000 fbb0 	bl	8007132 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80069d2:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80069d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069da:	d112      	bne.n	8006a02 <xQueueGenericSendFromISR+0x10a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80069dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d016      	beq.n	8006a12 <xQueueGenericSendFromISR+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80069e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069e6:	3324      	adds	r3, #36	; 0x24
 80069e8:	4618      	mov	r0, r3
 80069ea:	f001 f9a5 	bl	8007d38 <xTaskRemoveFromEventList>
 80069ee:	4603      	mov	r3, r0
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d00e      	beq.n	8006a12 <xQueueGenericSendFromISR+0x11a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d00b      	beq.n	8006a12 <xQueueGenericSendFromISR+0x11a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	2201      	movs	r2, #1
 80069fe:	601a      	str	r2, [r3, #0]
 8006a00:	e007      	b.n	8006a12 <xQueueGenericSendFromISR+0x11a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006a02:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006a06:	3301      	adds	r3, #1
 8006a08:	b2db      	uxtb	r3, r3
 8006a0a:	b25a      	sxtb	r2, r3
 8006a0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006a12:	2301      	movs	r3, #1
 8006a14:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8006a16:	e001      	b.n	8006a1c <xQueueGenericSendFromISR+0x124>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006a18:	2300      	movs	r3, #0
 8006a1a:	637b      	str	r3, [r7, #52]	; 0x34
 8006a1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a1e:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006a20:	693b      	ldr	r3, [r7, #16]
 8006a22:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006a26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006a28:	4618      	mov	r0, r3
 8006a2a:	3738      	adds	r7, #56	; 0x38
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	bd80      	pop	{r7, pc}

08006a30 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b08e      	sub	sp, #56	; 0x38
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
 8006a38:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8006a3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d10b      	bne.n	8006a5c <xQueueGiveFromISR+0x2c>
	__asm volatile
 8006a44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a48:	b672      	cpsid	i
 8006a4a:	f383 8811 	msr	BASEPRI, r3
 8006a4e:	f3bf 8f6f 	isb	sy
 8006a52:	f3bf 8f4f 	dsb	sy
 8006a56:	b662      	cpsie	i
 8006a58:	623b      	str	r3, [r7, #32]
 8006a5a:	e7fe      	b.n	8006a5a <xQueueGiveFromISR+0x2a>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006a5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d00b      	beq.n	8006a7c <xQueueGiveFromISR+0x4c>
 8006a64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a68:	b672      	cpsid	i
 8006a6a:	f383 8811 	msr	BASEPRI, r3
 8006a6e:	f3bf 8f6f 	isb	sy
 8006a72:	f3bf 8f4f 	dsb	sy
 8006a76:	b662      	cpsie	i
 8006a78:	61fb      	str	r3, [r7, #28]
 8006a7a:	e7fe      	b.n	8006a7a <xQueueGiveFromISR+0x4a>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8006a7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d103      	bne.n	8006a8c <xQueueGiveFromISR+0x5c>
 8006a84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a86:	689b      	ldr	r3, [r3, #8]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d101      	bne.n	8006a90 <xQueueGiveFromISR+0x60>
 8006a8c:	2301      	movs	r3, #1
 8006a8e:	e000      	b.n	8006a92 <xQueueGiveFromISR+0x62>
 8006a90:	2300      	movs	r3, #0
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d10b      	bne.n	8006aae <xQueueGiveFromISR+0x7e>
 8006a96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a9a:	b672      	cpsid	i
 8006a9c:	f383 8811 	msr	BASEPRI, r3
 8006aa0:	f3bf 8f6f 	isb	sy
 8006aa4:	f3bf 8f4f 	dsb	sy
 8006aa8:	b662      	cpsie	i
 8006aaa:	61bb      	str	r3, [r7, #24]
 8006aac:	e7fe      	b.n	8006aac <xQueueGiveFromISR+0x7c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006aae:	f002 fac3 	bl	8009038 <vPortValidateInterruptPriority>
	__asm volatile
 8006ab2:	f3ef 8211 	mrs	r2, BASEPRI
 8006ab6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aba:	b672      	cpsid	i
 8006abc:	f383 8811 	msr	BASEPRI, r3
 8006ac0:	f3bf 8f6f 	isb	sy
 8006ac4:	f3bf 8f4f 	dsb	sy
 8006ac8:	b662      	cpsie	i
 8006aca:	617a      	str	r2, [r7, #20]
 8006acc:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8006ace:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006ad0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006ad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ad4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ad6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8006ad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ada:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006adc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006ade:	429a      	cmp	r2, r3
 8006ae0:	d22b      	bcs.n	8006b3a <xQueueGiveFromISR+0x10a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006ae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ae4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006ae8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006aec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006aee:	1c5a      	adds	r2, r3, #1
 8006af0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006af2:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006af4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006af8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006afc:	d112      	bne.n	8006b24 <xQueueGiveFromISR+0xf4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006afe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d016      	beq.n	8006b34 <xQueueGiveFromISR+0x104>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006b06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b08:	3324      	adds	r3, #36	; 0x24
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	f001 f914 	bl	8007d38 <xTaskRemoveFromEventList>
 8006b10:	4603      	mov	r3, r0
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d00e      	beq.n	8006b34 <xQueueGiveFromISR+0x104>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006b16:	683b      	ldr	r3, [r7, #0]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d00b      	beq.n	8006b34 <xQueueGiveFromISR+0x104>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006b1c:	683b      	ldr	r3, [r7, #0]
 8006b1e:	2201      	movs	r2, #1
 8006b20:	601a      	str	r2, [r3, #0]
 8006b22:	e007      	b.n	8006b34 <xQueueGiveFromISR+0x104>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006b24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006b28:	3301      	adds	r3, #1
 8006b2a:	b2db      	uxtb	r3, r3
 8006b2c:	b25a      	sxtb	r2, r3
 8006b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006b34:	2301      	movs	r3, #1
 8006b36:	637b      	str	r3, [r7, #52]	; 0x34
 8006b38:	e001      	b.n	8006b3e <xQueueGiveFromISR+0x10e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	637b      	str	r3, [r7, #52]	; 0x34
 8006b3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b40:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006b48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	3738      	adds	r7, #56	; 0x38
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	bd80      	pop	{r7, pc}
	...

08006b54 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006b54:	b580      	push	{r7, lr}
 8006b56:	b08c      	sub	sp, #48	; 0x30
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	60f8      	str	r0, [r7, #12]
 8006b5c:	60b9      	str	r1, [r7, #8]
 8006b5e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006b60:	2300      	movs	r3, #0
 8006b62:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006b68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d10b      	bne.n	8006b86 <xQueueReceive+0x32>
	__asm volatile
 8006b6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b72:	b672      	cpsid	i
 8006b74:	f383 8811 	msr	BASEPRI, r3
 8006b78:	f3bf 8f6f 	isb	sy
 8006b7c:	f3bf 8f4f 	dsb	sy
 8006b80:	b662      	cpsie	i
 8006b82:	623b      	str	r3, [r7, #32]
 8006b84:	e7fe      	b.n	8006b84 <xQueueReceive+0x30>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006b86:	68bb      	ldr	r3, [r7, #8]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d103      	bne.n	8006b94 <xQueueReceive+0x40>
 8006b8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d101      	bne.n	8006b98 <xQueueReceive+0x44>
 8006b94:	2301      	movs	r3, #1
 8006b96:	e000      	b.n	8006b9a <xQueueReceive+0x46>
 8006b98:	2300      	movs	r3, #0
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d10b      	bne.n	8006bb6 <xQueueReceive+0x62>
 8006b9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ba2:	b672      	cpsid	i
 8006ba4:	f383 8811 	msr	BASEPRI, r3
 8006ba8:	f3bf 8f6f 	isb	sy
 8006bac:	f3bf 8f4f 	dsb	sy
 8006bb0:	b662      	cpsie	i
 8006bb2:	61fb      	str	r3, [r7, #28]
 8006bb4:	e7fe      	b.n	8006bb4 <xQueueReceive+0x60>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006bb6:	f001 fa7f 	bl	80080b8 <xTaskGetSchedulerState>
 8006bba:	4603      	mov	r3, r0
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d102      	bne.n	8006bc6 <xQueueReceive+0x72>
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d101      	bne.n	8006bca <xQueueReceive+0x76>
 8006bc6:	2301      	movs	r3, #1
 8006bc8:	e000      	b.n	8006bcc <xQueueReceive+0x78>
 8006bca:	2300      	movs	r3, #0
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d10b      	bne.n	8006be8 <xQueueReceive+0x94>
 8006bd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bd4:	b672      	cpsid	i
 8006bd6:	f383 8811 	msr	BASEPRI, r3
 8006bda:	f3bf 8f6f 	isb	sy
 8006bde:	f3bf 8f4f 	dsb	sy
 8006be2:	b662      	cpsie	i
 8006be4:	61bb      	str	r3, [r7, #24]
 8006be6:	e7fe      	b.n	8006be6 <xQueueReceive+0x92>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006be8:	f002 f946 	bl	8008e78 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006bec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bf0:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d01f      	beq.n	8006c38 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006bf8:	68b9      	ldr	r1, [r7, #8]
 8006bfa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006bfc:	f000 fb03 	bl	8007206 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c02:	1e5a      	subs	r2, r3, #1
 8006c04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c06:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006c08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c0a:	691b      	ldr	r3, [r3, #16]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d00f      	beq.n	8006c30 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006c10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c12:	3310      	adds	r3, #16
 8006c14:	4618      	mov	r0, r3
 8006c16:	f001 f88f 	bl	8007d38 <xTaskRemoveFromEventList>
 8006c1a:	4603      	mov	r3, r0
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d007      	beq.n	8006c30 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006c20:	4b3c      	ldr	r3, [pc, #240]	; (8006d14 <xQueueReceive+0x1c0>)
 8006c22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c26:	601a      	str	r2, [r3, #0]
 8006c28:	f3bf 8f4f 	dsb	sy
 8006c2c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006c30:	f002 f954 	bl	8008edc <vPortExitCritical>
				return pdPASS;
 8006c34:	2301      	movs	r3, #1
 8006c36:	e069      	b.n	8006d0c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d103      	bne.n	8006c46 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006c3e:	f002 f94d 	bl	8008edc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006c42:	2300      	movs	r3, #0
 8006c44:	e062      	b.n	8006d0c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006c46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d106      	bne.n	8006c5a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006c4c:	f107 0310 	add.w	r3, r7, #16
 8006c50:	4618      	mov	r0, r3
 8006c52:	f001 f8d5 	bl	8007e00 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006c56:	2301      	movs	r3, #1
 8006c58:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006c5a:	f002 f93f 	bl	8008edc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006c5e:	f000 fe35 	bl	80078cc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006c62:	f002 f909 	bl	8008e78 <vPortEnterCritical>
 8006c66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c68:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006c6c:	b25b      	sxtb	r3, r3
 8006c6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c72:	d103      	bne.n	8006c7c <xQueueReceive+0x128>
 8006c74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c76:	2200      	movs	r2, #0
 8006c78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006c7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c7e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006c82:	b25b      	sxtb	r3, r3
 8006c84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c88:	d103      	bne.n	8006c92 <xQueueReceive+0x13e>
 8006c8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006c92:	f002 f923 	bl	8008edc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006c96:	1d3a      	adds	r2, r7, #4
 8006c98:	f107 0310 	add.w	r3, r7, #16
 8006c9c:	4611      	mov	r1, r2
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	f001 f8c4 	bl	8007e2c <xTaskCheckForTimeOut>
 8006ca4:	4603      	mov	r3, r0
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d123      	bne.n	8006cf2 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006caa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006cac:	f000 fb23 	bl	80072f6 <prvIsQueueEmpty>
 8006cb0:	4603      	mov	r3, r0
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d017      	beq.n	8006ce6 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006cb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cb8:	3324      	adds	r3, #36	; 0x24
 8006cba:	687a      	ldr	r2, [r7, #4]
 8006cbc:	4611      	mov	r1, r2
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	f000 ffe8 	bl	8007c94 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006cc4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006cc6:	f000 fac4 	bl	8007252 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006cca:	f000 fe0d 	bl	80078e8 <xTaskResumeAll>
 8006cce:	4603      	mov	r3, r0
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d189      	bne.n	8006be8 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8006cd4:	4b0f      	ldr	r3, [pc, #60]	; (8006d14 <xQueueReceive+0x1c0>)
 8006cd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006cda:	601a      	str	r2, [r3, #0]
 8006cdc:	f3bf 8f4f 	dsb	sy
 8006ce0:	f3bf 8f6f 	isb	sy
 8006ce4:	e780      	b.n	8006be8 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006ce6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006ce8:	f000 fab3 	bl	8007252 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006cec:	f000 fdfc 	bl	80078e8 <xTaskResumeAll>
 8006cf0:	e77a      	b.n	8006be8 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006cf2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006cf4:	f000 faad 	bl	8007252 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006cf8:	f000 fdf6 	bl	80078e8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006cfc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006cfe:	f000 fafa 	bl	80072f6 <prvIsQueueEmpty>
 8006d02:	4603      	mov	r3, r0
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	f43f af6f 	beq.w	8006be8 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006d0a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	3730      	adds	r7, #48	; 0x30
 8006d10:	46bd      	mov	sp, r7
 8006d12:	bd80      	pop	{r7, pc}
 8006d14:	e000ed04 	.word	0xe000ed04

08006d18 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	b08e      	sub	sp, #56	; 0x38
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
 8006d20:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8006d22:	2300      	movs	r3, #0
 8006d24:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006d2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d10b      	bne.n	8006d4c <xQueueSemaphoreTake+0x34>
 8006d34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d38:	b672      	cpsid	i
 8006d3a:	f383 8811 	msr	BASEPRI, r3
 8006d3e:	f3bf 8f6f 	isb	sy
 8006d42:	f3bf 8f4f 	dsb	sy
 8006d46:	b662      	cpsie	i
 8006d48:	623b      	str	r3, [r7, #32]
 8006d4a:	e7fe      	b.n	8006d4a <xQueueSemaphoreTake+0x32>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006d4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d00b      	beq.n	8006d6c <xQueueSemaphoreTake+0x54>
 8006d54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d58:	b672      	cpsid	i
 8006d5a:	f383 8811 	msr	BASEPRI, r3
 8006d5e:	f3bf 8f6f 	isb	sy
 8006d62:	f3bf 8f4f 	dsb	sy
 8006d66:	b662      	cpsie	i
 8006d68:	61fb      	str	r3, [r7, #28]
 8006d6a:	e7fe      	b.n	8006d6a <xQueueSemaphoreTake+0x52>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006d6c:	f001 f9a4 	bl	80080b8 <xTaskGetSchedulerState>
 8006d70:	4603      	mov	r3, r0
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d102      	bne.n	8006d7c <xQueueSemaphoreTake+0x64>
 8006d76:	683b      	ldr	r3, [r7, #0]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d101      	bne.n	8006d80 <xQueueSemaphoreTake+0x68>
 8006d7c:	2301      	movs	r3, #1
 8006d7e:	e000      	b.n	8006d82 <xQueueSemaphoreTake+0x6a>
 8006d80:	2300      	movs	r3, #0
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d10b      	bne.n	8006d9e <xQueueSemaphoreTake+0x86>
 8006d86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d8a:	b672      	cpsid	i
 8006d8c:	f383 8811 	msr	BASEPRI, r3
 8006d90:	f3bf 8f6f 	isb	sy
 8006d94:	f3bf 8f4f 	dsb	sy
 8006d98:	b662      	cpsie	i
 8006d9a:	61bb      	str	r3, [r7, #24]
 8006d9c:	e7fe      	b.n	8006d9c <xQueueSemaphoreTake+0x84>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006d9e:	f002 f86b 	bl	8008e78 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006da2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006da4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006da6:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8006da8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d024      	beq.n	8006df8 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006dae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006db0:	1e5a      	subs	r2, r3, #1
 8006db2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006db4:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006db6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d104      	bne.n	8006dc8 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8006dbe:	f001 fb3d 	bl	800843c <pvTaskIncrementMutexHeldCount>
 8006dc2:	4602      	mov	r2, r0
 8006dc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dc6:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006dc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dca:	691b      	ldr	r3, [r3, #16]
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d00f      	beq.n	8006df0 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006dd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dd2:	3310      	adds	r3, #16
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	f000 ffaf 	bl	8007d38 <xTaskRemoveFromEventList>
 8006dda:	4603      	mov	r3, r0
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d007      	beq.n	8006df0 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006de0:	4b54      	ldr	r3, [pc, #336]	; (8006f34 <xQueueSemaphoreTake+0x21c>)
 8006de2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006de6:	601a      	str	r2, [r3, #0]
 8006de8:	f3bf 8f4f 	dsb	sy
 8006dec:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006df0:	f002 f874 	bl	8008edc <vPortExitCritical>
				return pdPASS;
 8006df4:	2301      	movs	r3, #1
 8006df6:	e098      	b.n	8006f2a <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006df8:	683b      	ldr	r3, [r7, #0]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d112      	bne.n	8006e24 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d00b      	beq.n	8006e1c <xQueueSemaphoreTake+0x104>
 8006e04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e08:	b672      	cpsid	i
 8006e0a:	f383 8811 	msr	BASEPRI, r3
 8006e0e:	f3bf 8f6f 	isb	sy
 8006e12:	f3bf 8f4f 	dsb	sy
 8006e16:	b662      	cpsie	i
 8006e18:	617b      	str	r3, [r7, #20]
 8006e1a:	e7fe      	b.n	8006e1a <xQueueSemaphoreTake+0x102>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006e1c:	f002 f85e 	bl	8008edc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006e20:	2300      	movs	r3, #0
 8006e22:	e082      	b.n	8006f2a <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006e24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d106      	bne.n	8006e38 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006e2a:	f107 030c 	add.w	r3, r7, #12
 8006e2e:	4618      	mov	r0, r3
 8006e30:	f000 ffe6 	bl	8007e00 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006e34:	2301      	movs	r3, #1
 8006e36:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006e38:	f002 f850 	bl	8008edc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006e3c:	f000 fd46 	bl	80078cc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006e40:	f002 f81a 	bl	8008e78 <vPortEnterCritical>
 8006e44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e46:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006e4a:	b25b      	sxtb	r3, r3
 8006e4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e50:	d103      	bne.n	8006e5a <xQueueSemaphoreTake+0x142>
 8006e52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e54:	2200      	movs	r2, #0
 8006e56:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006e5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e5c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006e60:	b25b      	sxtb	r3, r3
 8006e62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e66:	d103      	bne.n	8006e70 <xQueueSemaphoreTake+0x158>
 8006e68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006e70:	f002 f834 	bl	8008edc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006e74:	463a      	mov	r2, r7
 8006e76:	f107 030c 	add.w	r3, r7, #12
 8006e7a:	4611      	mov	r1, r2
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	f000 ffd5 	bl	8007e2c <xTaskCheckForTimeOut>
 8006e82:	4603      	mov	r3, r0
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d132      	bne.n	8006eee <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006e88:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006e8a:	f000 fa34 	bl	80072f6 <prvIsQueueEmpty>
 8006e8e:	4603      	mov	r3, r0
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d026      	beq.n	8006ee2 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006e94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d109      	bne.n	8006eb0 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8006e9c:	f001 ffec 	bl	8008e78 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006ea0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ea2:	689b      	ldr	r3, [r3, #8]
 8006ea4:	4618      	mov	r0, r3
 8006ea6:	f001 f925 	bl	80080f4 <xTaskPriorityInherit>
 8006eaa:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8006eac:	f002 f816 	bl	8008edc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006eb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006eb2:	3324      	adds	r3, #36	; 0x24
 8006eb4:	683a      	ldr	r2, [r7, #0]
 8006eb6:	4611      	mov	r1, r2
 8006eb8:	4618      	mov	r0, r3
 8006eba:	f000 feeb 	bl	8007c94 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006ebe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006ec0:	f000 f9c7 	bl	8007252 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006ec4:	f000 fd10 	bl	80078e8 <xTaskResumeAll>
 8006ec8:	4603      	mov	r3, r0
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	f47f af67 	bne.w	8006d9e <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8006ed0:	4b18      	ldr	r3, [pc, #96]	; (8006f34 <xQueueSemaphoreTake+0x21c>)
 8006ed2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ed6:	601a      	str	r2, [r3, #0]
 8006ed8:	f3bf 8f4f 	dsb	sy
 8006edc:	f3bf 8f6f 	isb	sy
 8006ee0:	e75d      	b.n	8006d9e <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8006ee2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006ee4:	f000 f9b5 	bl	8007252 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006ee8:	f000 fcfe 	bl	80078e8 <xTaskResumeAll>
 8006eec:	e757      	b.n	8006d9e <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8006eee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006ef0:	f000 f9af 	bl	8007252 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006ef4:	f000 fcf8 	bl	80078e8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006ef8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006efa:	f000 f9fc 	bl	80072f6 <prvIsQueueEmpty>
 8006efe:	4603      	mov	r3, r0
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	f43f af4c 	beq.w	8006d9e <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8006f06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d00d      	beq.n	8006f28 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8006f0c:	f001 ffb4 	bl	8008e78 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006f10:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006f12:	f000 f8f6 	bl	8007102 <prvGetDisinheritPriorityAfterTimeout>
 8006f16:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8006f18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f1a:	689b      	ldr	r3, [r3, #8]
 8006f1c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006f1e:	4618      	mov	r0, r3
 8006f20:	f001 f9f0 	bl	8008304 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006f24:	f001 ffda 	bl	8008edc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006f28:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006f2a:	4618      	mov	r0, r3
 8006f2c:	3738      	adds	r7, #56	; 0x38
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	bd80      	pop	{r7, pc}
 8006f32:	bf00      	nop
 8006f34:	e000ed04 	.word	0xe000ed04

08006f38 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006f38:	b580      	push	{r7, lr}
 8006f3a:	b08e      	sub	sp, #56	; 0x38
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	60f8      	str	r0, [r7, #12]
 8006f40:	60b9      	str	r1, [r7, #8]
 8006f42:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006f48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d10b      	bne.n	8006f66 <xQueueReceiveFromISR+0x2e>
 8006f4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f52:	b672      	cpsid	i
 8006f54:	f383 8811 	msr	BASEPRI, r3
 8006f58:	f3bf 8f6f 	isb	sy
 8006f5c:	f3bf 8f4f 	dsb	sy
 8006f60:	b662      	cpsie	i
 8006f62:	623b      	str	r3, [r7, #32]
 8006f64:	e7fe      	b.n	8006f64 <xQueueReceiveFromISR+0x2c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006f66:	68bb      	ldr	r3, [r7, #8]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d103      	bne.n	8006f74 <xQueueReceiveFromISR+0x3c>
 8006f6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d101      	bne.n	8006f78 <xQueueReceiveFromISR+0x40>
 8006f74:	2301      	movs	r3, #1
 8006f76:	e000      	b.n	8006f7a <xQueueReceiveFromISR+0x42>
 8006f78:	2300      	movs	r3, #0
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d10b      	bne.n	8006f96 <xQueueReceiveFromISR+0x5e>
 8006f7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f82:	b672      	cpsid	i
 8006f84:	f383 8811 	msr	BASEPRI, r3
 8006f88:	f3bf 8f6f 	isb	sy
 8006f8c:	f3bf 8f4f 	dsb	sy
 8006f90:	b662      	cpsie	i
 8006f92:	61fb      	str	r3, [r7, #28]
 8006f94:	e7fe      	b.n	8006f94 <xQueueReceiveFromISR+0x5c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006f96:	f002 f84f 	bl	8009038 <vPortValidateInterruptPriority>
	__asm volatile
 8006f9a:	f3ef 8211 	mrs	r2, BASEPRI
 8006f9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fa2:	b672      	cpsid	i
 8006fa4:	f383 8811 	msr	BASEPRI, r3
 8006fa8:	f3bf 8f6f 	isb	sy
 8006fac:	f3bf 8f4f 	dsb	sy
 8006fb0:	b662      	cpsie	i
 8006fb2:	61ba      	str	r2, [r7, #24]
 8006fb4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8006fb6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006fb8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006fba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fbe:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006fc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d02f      	beq.n	8007026 <xQueueReceiveFromISR+0xee>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8006fc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fc8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006fcc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006fd0:	68b9      	ldr	r1, [r7, #8]
 8006fd2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006fd4:	f000 f917 	bl	8007206 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006fd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fda:	1e5a      	subs	r2, r3, #1
 8006fdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fde:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8006fe0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006fe4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fe8:	d112      	bne.n	8007010 <xQueueReceiveFromISR+0xd8>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006fea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fec:	691b      	ldr	r3, [r3, #16]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d016      	beq.n	8007020 <xQueueReceiveFromISR+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006ff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ff4:	3310      	adds	r3, #16
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	f000 fe9e 	bl	8007d38 <xTaskRemoveFromEventList>
 8006ffc:	4603      	mov	r3, r0
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d00e      	beq.n	8007020 <xQueueReceiveFromISR+0xe8>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	2b00      	cmp	r3, #0
 8007006:	d00b      	beq.n	8007020 <xQueueReceiveFromISR+0xe8>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	2201      	movs	r2, #1
 800700c:	601a      	str	r2, [r3, #0]
 800700e:	e007      	b.n	8007020 <xQueueReceiveFromISR+0xe8>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8007010:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007014:	3301      	adds	r3, #1
 8007016:	b2db      	uxtb	r3, r3
 8007018:	b25a      	sxtb	r2, r3
 800701a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800701c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8007020:	2301      	movs	r3, #1
 8007022:	637b      	str	r3, [r7, #52]	; 0x34
 8007024:	e001      	b.n	800702a <xQueueReceiveFromISR+0xf2>
		}
		else
		{
			xReturn = pdFAIL;
 8007026:	2300      	movs	r3, #0
 8007028:	637b      	str	r3, [r7, #52]	; 0x34
 800702a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800702c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800702e:	693b      	ldr	r3, [r7, #16]
 8007030:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007034:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007036:	4618      	mov	r0, r3
 8007038:	3738      	adds	r7, #56	; 0x38
 800703a:	46bd      	mov	sp, r7
 800703c:	bd80      	pop	{r7, pc}

0800703e <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800703e:	b580      	push	{r7, lr}
 8007040:	b084      	sub	sp, #16
 8007042:	af00      	add	r7, sp, #0
 8007044:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	2b00      	cmp	r3, #0
 800704a:	d10b      	bne.n	8007064 <uxQueueMessagesWaiting+0x26>
	__asm volatile
 800704c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007050:	b672      	cpsid	i
 8007052:	f383 8811 	msr	BASEPRI, r3
 8007056:	f3bf 8f6f 	isb	sy
 800705a:	f3bf 8f4f 	dsb	sy
 800705e:	b662      	cpsie	i
 8007060:	60bb      	str	r3, [r7, #8]
 8007062:	e7fe      	b.n	8007062 <uxQueueMessagesWaiting+0x24>

	taskENTER_CRITICAL();
 8007064:	f001 ff08 	bl	8008e78 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800706c:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800706e:	f001 ff35 	bl	8008edc <vPortExitCritical>

	return uxReturn;
 8007072:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8007074:	4618      	mov	r0, r3
 8007076:	3710      	adds	r7, #16
 8007078:	46bd      	mov	sp, r7
 800707a:	bd80      	pop	{r7, pc}

0800707c <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 800707c:	b480      	push	{r7}
 800707e:	b087      	sub	sp, #28
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8007088:	697b      	ldr	r3, [r7, #20]
 800708a:	2b00      	cmp	r3, #0
 800708c:	d10b      	bne.n	80070a6 <uxQueueMessagesWaitingFromISR+0x2a>
 800708e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007092:	b672      	cpsid	i
 8007094:	f383 8811 	msr	BASEPRI, r3
 8007098:	f3bf 8f6f 	isb	sy
 800709c:	f3bf 8f4f 	dsb	sy
 80070a0:	b662      	cpsie	i
 80070a2:	60fb      	str	r3, [r7, #12]
 80070a4:	e7fe      	b.n	80070a4 <uxQueueMessagesWaitingFromISR+0x28>
	uxReturn = pxQueue->uxMessagesWaiting;
 80070a6:	697b      	ldr	r3, [r7, #20]
 80070a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070aa:	613b      	str	r3, [r7, #16]

	return uxReturn;
 80070ac:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80070ae:	4618      	mov	r0, r3
 80070b0:	371c      	adds	r7, #28
 80070b2:	46bd      	mov	sp, r7
 80070b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b8:	4770      	bx	lr

080070ba <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80070ba:	b580      	push	{r7, lr}
 80070bc:	b084      	sub	sp, #16
 80070be:	af00      	add	r7, sp, #0
 80070c0:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d10b      	bne.n	80070e4 <vQueueDelete+0x2a>
 80070cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070d0:	b672      	cpsid	i
 80070d2:	f383 8811 	msr	BASEPRI, r3
 80070d6:	f3bf 8f6f 	isb	sy
 80070da:	f3bf 8f4f 	dsb	sy
 80070de:	b662      	cpsie	i
 80070e0:	60bb      	str	r3, [r7, #8]
 80070e2:	e7fe      	b.n	80070e2 <vQueueDelete+0x28>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80070e4:	68f8      	ldr	r0, [r7, #12]
 80070e6:	f000 f95d 	bl	80073a4 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d102      	bne.n	80070fa <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 80070f4:	68f8      	ldr	r0, [r7, #12]
 80070f6:	f002 f8a9 	bl	800924c <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80070fa:	bf00      	nop
 80070fc:	3710      	adds	r7, #16
 80070fe:	46bd      	mov	sp, r7
 8007100:	bd80      	pop	{r7, pc}

08007102 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8007102:	b480      	push	{r7}
 8007104:	b085      	sub	sp, #20
 8007106:	af00      	add	r7, sp, #0
 8007108:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800710e:	2b00      	cmp	r3, #0
 8007110:	d006      	beq.n	8007120 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	f1c3 0307 	rsb	r3, r3, #7
 800711c:	60fb      	str	r3, [r7, #12]
 800711e:	e001      	b.n	8007124 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8007120:	2300      	movs	r3, #0
 8007122:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8007124:	68fb      	ldr	r3, [r7, #12]
	}
 8007126:	4618      	mov	r0, r3
 8007128:	3714      	adds	r7, #20
 800712a:	46bd      	mov	sp, r7
 800712c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007130:	4770      	bx	lr

08007132 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007132:	b580      	push	{r7, lr}
 8007134:	b086      	sub	sp, #24
 8007136:	af00      	add	r7, sp, #0
 8007138:	60f8      	str	r0, [r7, #12]
 800713a:	60b9      	str	r1, [r7, #8]
 800713c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800713e:	2300      	movs	r3, #0
 8007140:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007146:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800714c:	2b00      	cmp	r3, #0
 800714e:	d10d      	bne.n	800716c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	2b00      	cmp	r3, #0
 8007156:	d14d      	bne.n	80071f4 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	689b      	ldr	r3, [r3, #8]
 800715c:	4618      	mov	r0, r3
 800715e:	f001 f849 	bl	80081f4 <xTaskPriorityDisinherit>
 8007162:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	2200      	movs	r2, #0
 8007168:	609a      	str	r2, [r3, #8]
 800716a:	e043      	b.n	80071f4 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d119      	bne.n	80071a6 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	6858      	ldr	r0, [r3, #4]
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800717a:	461a      	mov	r2, r3
 800717c:	68b9      	ldr	r1, [r7, #8]
 800717e:	f010 fa08 	bl	8017592 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	685a      	ldr	r2, [r3, #4]
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800718a:	441a      	add	r2, r3
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	685a      	ldr	r2, [r3, #4]
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	689b      	ldr	r3, [r3, #8]
 8007198:	429a      	cmp	r2, r3
 800719a:	d32b      	bcc.n	80071f4 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	681a      	ldr	r2, [r3, #0]
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	605a      	str	r2, [r3, #4]
 80071a4:	e026      	b.n	80071f4 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	68d8      	ldr	r0, [r3, #12]
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071ae:	461a      	mov	r2, r3
 80071b0:	68b9      	ldr	r1, [r7, #8]
 80071b2:	f010 f9ee 	bl	8017592 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	68da      	ldr	r2, [r3, #12]
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071be:	425b      	negs	r3, r3
 80071c0:	441a      	add	r2, r3
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	68da      	ldr	r2, [r3, #12]
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	429a      	cmp	r2, r3
 80071d0:	d207      	bcs.n	80071e2 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	689a      	ldr	r2, [r3, #8]
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071da:	425b      	negs	r3, r3
 80071dc:	441a      	add	r2, r3
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	2b02      	cmp	r3, #2
 80071e6:	d105      	bne.n	80071f4 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80071e8:	693b      	ldr	r3, [r7, #16]
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d002      	beq.n	80071f4 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80071ee:	693b      	ldr	r3, [r7, #16]
 80071f0:	3b01      	subs	r3, #1
 80071f2:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80071f4:	693b      	ldr	r3, [r7, #16]
 80071f6:	1c5a      	adds	r2, r3, #1
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80071fc:	697b      	ldr	r3, [r7, #20]
}
 80071fe:	4618      	mov	r0, r3
 8007200:	3718      	adds	r7, #24
 8007202:	46bd      	mov	sp, r7
 8007204:	bd80      	pop	{r7, pc}

08007206 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007206:	b580      	push	{r7, lr}
 8007208:	b082      	sub	sp, #8
 800720a:	af00      	add	r7, sp, #0
 800720c:	6078      	str	r0, [r7, #4]
 800720e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007214:	2b00      	cmp	r3, #0
 8007216:	d018      	beq.n	800724a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	68da      	ldr	r2, [r3, #12]
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007220:	441a      	add	r2, r3
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	68da      	ldr	r2, [r3, #12]
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	689b      	ldr	r3, [r3, #8]
 800722e:	429a      	cmp	r2, r3
 8007230:	d303      	bcc.n	800723a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681a      	ldr	r2, [r3, #0]
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	68d9      	ldr	r1, [r3, #12]
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007242:	461a      	mov	r2, r3
 8007244:	6838      	ldr	r0, [r7, #0]
 8007246:	f010 f9a4 	bl	8017592 <memcpy>
	}
}
 800724a:	bf00      	nop
 800724c:	3708      	adds	r7, #8
 800724e:	46bd      	mov	sp, r7
 8007250:	bd80      	pop	{r7, pc}

08007252 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007252:	b580      	push	{r7, lr}
 8007254:	b084      	sub	sp, #16
 8007256:	af00      	add	r7, sp, #0
 8007258:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800725a:	f001 fe0d 	bl	8008e78 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007264:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007266:	e011      	b.n	800728c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800726c:	2b00      	cmp	r3, #0
 800726e:	d012      	beq.n	8007296 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	3324      	adds	r3, #36	; 0x24
 8007274:	4618      	mov	r0, r3
 8007276:	f000 fd5f 	bl	8007d38 <xTaskRemoveFromEventList>
 800727a:	4603      	mov	r3, r0
 800727c:	2b00      	cmp	r3, #0
 800727e:	d001      	beq.n	8007284 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007280:	f000 fe38 	bl	8007ef4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007284:	7bfb      	ldrb	r3, [r7, #15]
 8007286:	3b01      	subs	r3, #1
 8007288:	b2db      	uxtb	r3, r3
 800728a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800728c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007290:	2b00      	cmp	r3, #0
 8007292:	dce9      	bgt.n	8007268 <prvUnlockQueue+0x16>
 8007294:	e000      	b.n	8007298 <prvUnlockQueue+0x46>
					break;
 8007296:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	22ff      	movs	r2, #255	; 0xff
 800729c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80072a0:	f001 fe1c 	bl	8008edc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80072a4:	f001 fde8 	bl	8008e78 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80072ae:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80072b0:	e011      	b.n	80072d6 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	691b      	ldr	r3, [r3, #16]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d012      	beq.n	80072e0 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	3310      	adds	r3, #16
 80072be:	4618      	mov	r0, r3
 80072c0:	f000 fd3a 	bl	8007d38 <xTaskRemoveFromEventList>
 80072c4:	4603      	mov	r3, r0
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d001      	beq.n	80072ce <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80072ca:	f000 fe13 	bl	8007ef4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80072ce:	7bbb      	ldrb	r3, [r7, #14]
 80072d0:	3b01      	subs	r3, #1
 80072d2:	b2db      	uxtb	r3, r3
 80072d4:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80072d6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80072da:	2b00      	cmp	r3, #0
 80072dc:	dce9      	bgt.n	80072b2 <prvUnlockQueue+0x60>
 80072de:	e000      	b.n	80072e2 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80072e0:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	22ff      	movs	r2, #255	; 0xff
 80072e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80072ea:	f001 fdf7 	bl	8008edc <vPortExitCritical>
}
 80072ee:	bf00      	nop
 80072f0:	3710      	adds	r7, #16
 80072f2:	46bd      	mov	sp, r7
 80072f4:	bd80      	pop	{r7, pc}

080072f6 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80072f6:	b580      	push	{r7, lr}
 80072f8:	b084      	sub	sp, #16
 80072fa:	af00      	add	r7, sp, #0
 80072fc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80072fe:	f001 fdbb 	bl	8008e78 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007306:	2b00      	cmp	r3, #0
 8007308:	d102      	bne.n	8007310 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800730a:	2301      	movs	r3, #1
 800730c:	60fb      	str	r3, [r7, #12]
 800730e:	e001      	b.n	8007314 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007310:	2300      	movs	r3, #0
 8007312:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007314:	f001 fde2 	bl	8008edc <vPortExitCritical>

	return xReturn;
 8007318:	68fb      	ldr	r3, [r7, #12]
}
 800731a:	4618      	mov	r0, r3
 800731c:	3710      	adds	r7, #16
 800731e:	46bd      	mov	sp, r7
 8007320:	bd80      	pop	{r7, pc}

08007322 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007322:	b580      	push	{r7, lr}
 8007324:	b084      	sub	sp, #16
 8007326:	af00      	add	r7, sp, #0
 8007328:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800732a:	f001 fda5 	bl	8008e78 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007336:	429a      	cmp	r2, r3
 8007338:	d102      	bne.n	8007340 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800733a:	2301      	movs	r3, #1
 800733c:	60fb      	str	r3, [r7, #12]
 800733e:	e001      	b.n	8007344 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007340:	2300      	movs	r3, #0
 8007342:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007344:	f001 fdca 	bl	8008edc <vPortExitCritical>

	return xReturn;
 8007348:	68fb      	ldr	r3, [r7, #12]
}
 800734a:	4618      	mov	r0, r3
 800734c:	3710      	adds	r7, #16
 800734e:	46bd      	mov	sp, r7
 8007350:	bd80      	pop	{r7, pc}
	...

08007354 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007354:	b480      	push	{r7}
 8007356:	b085      	sub	sp, #20
 8007358:	af00      	add	r7, sp, #0
 800735a:	6078      	str	r0, [r7, #4]
 800735c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800735e:	2300      	movs	r3, #0
 8007360:	60fb      	str	r3, [r7, #12]
 8007362:	e014      	b.n	800738e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007364:	4a0e      	ldr	r2, [pc, #56]	; (80073a0 <vQueueAddToRegistry+0x4c>)
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800736c:	2b00      	cmp	r3, #0
 800736e:	d10b      	bne.n	8007388 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007370:	490b      	ldr	r1, [pc, #44]	; (80073a0 <vQueueAddToRegistry+0x4c>)
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	683a      	ldr	r2, [r7, #0]
 8007376:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800737a:	4a09      	ldr	r2, [pc, #36]	; (80073a0 <vQueueAddToRegistry+0x4c>)
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	00db      	lsls	r3, r3, #3
 8007380:	4413      	add	r3, r2
 8007382:	687a      	ldr	r2, [r7, #4]
 8007384:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007386:	e005      	b.n	8007394 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	3301      	adds	r3, #1
 800738c:	60fb      	str	r3, [r7, #12]
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	2b07      	cmp	r3, #7
 8007392:	d9e7      	bls.n	8007364 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007394:	bf00      	nop
 8007396:	3714      	adds	r7, #20
 8007398:	46bd      	mov	sp, r7
 800739a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739e:	4770      	bx	lr
 80073a0:	200079f4 	.word	0x200079f4

080073a4 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80073a4:	b480      	push	{r7}
 80073a6:	b085      	sub	sp, #20
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80073ac:	2300      	movs	r3, #0
 80073ae:	60fb      	str	r3, [r7, #12]
 80073b0:	e016      	b.n	80073e0 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80073b2:	4a10      	ldr	r2, [pc, #64]	; (80073f4 <vQueueUnregisterQueue+0x50>)
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	00db      	lsls	r3, r3, #3
 80073b8:	4413      	add	r3, r2
 80073ba:	685b      	ldr	r3, [r3, #4]
 80073bc:	687a      	ldr	r2, [r7, #4]
 80073be:	429a      	cmp	r2, r3
 80073c0:	d10b      	bne.n	80073da <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80073c2:	4a0c      	ldr	r2, [pc, #48]	; (80073f4 <vQueueUnregisterQueue+0x50>)
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	2100      	movs	r1, #0
 80073c8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80073cc:	4a09      	ldr	r2, [pc, #36]	; (80073f4 <vQueueUnregisterQueue+0x50>)
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	00db      	lsls	r3, r3, #3
 80073d2:	4413      	add	r3, r2
 80073d4:	2200      	movs	r2, #0
 80073d6:	605a      	str	r2, [r3, #4]
				break;
 80073d8:	e005      	b.n	80073e6 <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	3301      	adds	r3, #1
 80073de:	60fb      	str	r3, [r7, #12]
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	2b07      	cmp	r3, #7
 80073e4:	d9e5      	bls.n	80073b2 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80073e6:	bf00      	nop
 80073e8:	3714      	adds	r7, #20
 80073ea:	46bd      	mov	sp, r7
 80073ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f0:	4770      	bx	lr
 80073f2:	bf00      	nop
 80073f4:	200079f4 	.word	0x200079f4

080073f8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80073f8:	b580      	push	{r7, lr}
 80073fa:	b086      	sub	sp, #24
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	60f8      	str	r0, [r7, #12]
 8007400:	60b9      	str	r1, [r7, #8]
 8007402:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007408:	f001 fd36 	bl	8008e78 <vPortEnterCritical>
 800740c:	697b      	ldr	r3, [r7, #20]
 800740e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007412:	b25b      	sxtb	r3, r3
 8007414:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007418:	d103      	bne.n	8007422 <vQueueWaitForMessageRestricted+0x2a>
 800741a:	697b      	ldr	r3, [r7, #20]
 800741c:	2200      	movs	r2, #0
 800741e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007422:	697b      	ldr	r3, [r7, #20]
 8007424:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007428:	b25b      	sxtb	r3, r3
 800742a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800742e:	d103      	bne.n	8007438 <vQueueWaitForMessageRestricted+0x40>
 8007430:	697b      	ldr	r3, [r7, #20]
 8007432:	2200      	movs	r2, #0
 8007434:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007438:	f001 fd50 	bl	8008edc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800743c:	697b      	ldr	r3, [r7, #20]
 800743e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007440:	2b00      	cmp	r3, #0
 8007442:	d106      	bne.n	8007452 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007444:	697b      	ldr	r3, [r7, #20]
 8007446:	3324      	adds	r3, #36	; 0x24
 8007448:	687a      	ldr	r2, [r7, #4]
 800744a:	68b9      	ldr	r1, [r7, #8]
 800744c:	4618      	mov	r0, r3
 800744e:	f000 fc47 	bl	8007ce0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007452:	6978      	ldr	r0, [r7, #20]
 8007454:	f7ff fefd 	bl	8007252 <prvUnlockQueue>
	}
 8007458:	bf00      	nop
 800745a:	3718      	adds	r7, #24
 800745c:	46bd      	mov	sp, r7
 800745e:	bd80      	pop	{r7, pc}

08007460 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007460:	b580      	push	{r7, lr}
 8007462:	b08e      	sub	sp, #56	; 0x38
 8007464:	af04      	add	r7, sp, #16
 8007466:	60f8      	str	r0, [r7, #12]
 8007468:	60b9      	str	r1, [r7, #8]
 800746a:	607a      	str	r2, [r7, #4]
 800746c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800746e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007470:	2b00      	cmp	r3, #0
 8007472:	d10b      	bne.n	800748c <xTaskCreateStatic+0x2c>
 8007474:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007478:	b672      	cpsid	i
 800747a:	f383 8811 	msr	BASEPRI, r3
 800747e:	f3bf 8f6f 	isb	sy
 8007482:	f3bf 8f4f 	dsb	sy
 8007486:	b662      	cpsie	i
 8007488:	623b      	str	r3, [r7, #32]
 800748a:	e7fe      	b.n	800748a <xTaskCreateStatic+0x2a>
		configASSERT( pxTaskBuffer != NULL );
 800748c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800748e:	2b00      	cmp	r3, #0
 8007490:	d10b      	bne.n	80074aa <xTaskCreateStatic+0x4a>
 8007492:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007496:	b672      	cpsid	i
 8007498:	f383 8811 	msr	BASEPRI, r3
 800749c:	f3bf 8f6f 	isb	sy
 80074a0:	f3bf 8f4f 	dsb	sy
 80074a4:	b662      	cpsie	i
 80074a6:	61fb      	str	r3, [r7, #28]
 80074a8:	e7fe      	b.n	80074a8 <xTaskCreateStatic+0x48>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80074aa:	2364      	movs	r3, #100	; 0x64
 80074ac:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80074ae:	693b      	ldr	r3, [r7, #16]
 80074b0:	2b64      	cmp	r3, #100	; 0x64
 80074b2:	d00b      	beq.n	80074cc <xTaskCreateStatic+0x6c>
 80074b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074b8:	b672      	cpsid	i
 80074ba:	f383 8811 	msr	BASEPRI, r3
 80074be:	f3bf 8f6f 	isb	sy
 80074c2:	f3bf 8f4f 	dsb	sy
 80074c6:	b662      	cpsie	i
 80074c8:	61bb      	str	r3, [r7, #24]
 80074ca:	e7fe      	b.n	80074ca <xTaskCreateStatic+0x6a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80074cc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80074ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d01e      	beq.n	8007512 <xTaskCreateStatic+0xb2>
 80074d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d01b      	beq.n	8007512 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80074da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074dc:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80074de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074e0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80074e2:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80074e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074e6:	2202      	movs	r2, #2
 80074e8:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80074ec:	2300      	movs	r3, #0
 80074ee:	9303      	str	r3, [sp, #12]
 80074f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074f2:	9302      	str	r3, [sp, #8]
 80074f4:	f107 0314 	add.w	r3, r7, #20
 80074f8:	9301      	str	r3, [sp, #4]
 80074fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074fc:	9300      	str	r3, [sp, #0]
 80074fe:	683b      	ldr	r3, [r7, #0]
 8007500:	687a      	ldr	r2, [r7, #4]
 8007502:	68b9      	ldr	r1, [r7, #8]
 8007504:	68f8      	ldr	r0, [r7, #12]
 8007506:	f000 f850 	bl	80075aa <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800750a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800750c:	f000 f8d6 	bl	80076bc <prvAddNewTaskToReadyList>
 8007510:	e001      	b.n	8007516 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8007512:	2300      	movs	r3, #0
 8007514:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007516:	697b      	ldr	r3, [r7, #20]
	}
 8007518:	4618      	mov	r0, r3
 800751a:	3728      	adds	r7, #40	; 0x28
 800751c:	46bd      	mov	sp, r7
 800751e:	bd80      	pop	{r7, pc}

08007520 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007520:	b580      	push	{r7, lr}
 8007522:	b08c      	sub	sp, #48	; 0x30
 8007524:	af04      	add	r7, sp, #16
 8007526:	60f8      	str	r0, [r7, #12]
 8007528:	60b9      	str	r1, [r7, #8]
 800752a:	603b      	str	r3, [r7, #0]
 800752c:	4613      	mov	r3, r2
 800752e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007530:	88fb      	ldrh	r3, [r7, #6]
 8007532:	009b      	lsls	r3, r3, #2
 8007534:	4618      	mov	r0, r3
 8007536:	f001 fdc1 	bl	80090bc <pvPortMalloc>
 800753a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800753c:	697b      	ldr	r3, [r7, #20]
 800753e:	2b00      	cmp	r3, #0
 8007540:	d00e      	beq.n	8007560 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007542:	2064      	movs	r0, #100	; 0x64
 8007544:	f001 fdba 	bl	80090bc <pvPortMalloc>
 8007548:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800754a:	69fb      	ldr	r3, [r7, #28]
 800754c:	2b00      	cmp	r3, #0
 800754e:	d003      	beq.n	8007558 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007550:	69fb      	ldr	r3, [r7, #28]
 8007552:	697a      	ldr	r2, [r7, #20]
 8007554:	631a      	str	r2, [r3, #48]	; 0x30
 8007556:	e005      	b.n	8007564 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007558:	6978      	ldr	r0, [r7, #20]
 800755a:	f001 fe77 	bl	800924c <vPortFree>
 800755e:	e001      	b.n	8007564 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007560:	2300      	movs	r3, #0
 8007562:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007564:	69fb      	ldr	r3, [r7, #28]
 8007566:	2b00      	cmp	r3, #0
 8007568:	d017      	beq.n	800759a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800756a:	69fb      	ldr	r3, [r7, #28]
 800756c:	2200      	movs	r2, #0
 800756e:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007572:	88fa      	ldrh	r2, [r7, #6]
 8007574:	2300      	movs	r3, #0
 8007576:	9303      	str	r3, [sp, #12]
 8007578:	69fb      	ldr	r3, [r7, #28]
 800757a:	9302      	str	r3, [sp, #8]
 800757c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800757e:	9301      	str	r3, [sp, #4]
 8007580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007582:	9300      	str	r3, [sp, #0]
 8007584:	683b      	ldr	r3, [r7, #0]
 8007586:	68b9      	ldr	r1, [r7, #8]
 8007588:	68f8      	ldr	r0, [r7, #12]
 800758a:	f000 f80e 	bl	80075aa <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800758e:	69f8      	ldr	r0, [r7, #28]
 8007590:	f000 f894 	bl	80076bc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007594:	2301      	movs	r3, #1
 8007596:	61bb      	str	r3, [r7, #24]
 8007598:	e002      	b.n	80075a0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800759a:	f04f 33ff 	mov.w	r3, #4294967295
 800759e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80075a0:	69bb      	ldr	r3, [r7, #24]
	}
 80075a2:	4618      	mov	r0, r3
 80075a4:	3720      	adds	r7, #32
 80075a6:	46bd      	mov	sp, r7
 80075a8:	bd80      	pop	{r7, pc}

080075aa <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80075aa:	b580      	push	{r7, lr}
 80075ac:	b088      	sub	sp, #32
 80075ae:	af00      	add	r7, sp, #0
 80075b0:	60f8      	str	r0, [r7, #12]
 80075b2:	60b9      	str	r1, [r7, #8]
 80075b4:	607a      	str	r2, [r7, #4]
 80075b6:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80075b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80075bc:	6879      	ldr	r1, [r7, #4]
 80075be:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80075c2:	440b      	add	r3, r1
 80075c4:	009b      	lsls	r3, r3, #2
 80075c6:	4413      	add	r3, r2
 80075c8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80075ca:	69bb      	ldr	r3, [r7, #24]
 80075cc:	f023 0307 	bic.w	r3, r3, #7
 80075d0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80075d2:	69bb      	ldr	r3, [r7, #24]
 80075d4:	f003 0307 	and.w	r3, r3, #7
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d00b      	beq.n	80075f4 <prvInitialiseNewTask+0x4a>
 80075dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075e0:	b672      	cpsid	i
 80075e2:	f383 8811 	msr	BASEPRI, r3
 80075e6:	f3bf 8f6f 	isb	sy
 80075ea:	f3bf 8f4f 	dsb	sy
 80075ee:	b662      	cpsie	i
 80075f0:	617b      	str	r3, [r7, #20]
 80075f2:	e7fe      	b.n	80075f2 <prvInitialiseNewTask+0x48>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80075f4:	68bb      	ldr	r3, [r7, #8]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d01f      	beq.n	800763a <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80075fa:	2300      	movs	r3, #0
 80075fc:	61fb      	str	r3, [r7, #28]
 80075fe:	e012      	b.n	8007626 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007600:	68ba      	ldr	r2, [r7, #8]
 8007602:	69fb      	ldr	r3, [r7, #28]
 8007604:	4413      	add	r3, r2
 8007606:	7819      	ldrb	r1, [r3, #0]
 8007608:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800760a:	69fb      	ldr	r3, [r7, #28]
 800760c:	4413      	add	r3, r2
 800760e:	3334      	adds	r3, #52	; 0x34
 8007610:	460a      	mov	r2, r1
 8007612:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007614:	68ba      	ldr	r2, [r7, #8]
 8007616:	69fb      	ldr	r3, [r7, #28]
 8007618:	4413      	add	r3, r2
 800761a:	781b      	ldrb	r3, [r3, #0]
 800761c:	2b00      	cmp	r3, #0
 800761e:	d006      	beq.n	800762e <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007620:	69fb      	ldr	r3, [r7, #28]
 8007622:	3301      	adds	r3, #1
 8007624:	61fb      	str	r3, [r7, #28]
 8007626:	69fb      	ldr	r3, [r7, #28]
 8007628:	2b1e      	cmp	r3, #30
 800762a:	d9e9      	bls.n	8007600 <prvInitialiseNewTask+0x56>
 800762c:	e000      	b.n	8007630 <prvInitialiseNewTask+0x86>
			{
				break;
 800762e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007632:	2200      	movs	r2, #0
 8007634:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
 8007638:	e003      	b.n	8007642 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800763a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800763c:	2200      	movs	r2, #0
 800763e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007644:	2b06      	cmp	r3, #6
 8007646:	d901      	bls.n	800764c <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007648:	2306      	movs	r3, #6
 800764a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800764c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800764e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007650:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007654:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007656:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->uxMutexesHeld = 0;
 8007658:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800765a:	2200      	movs	r2, #0
 800765c:	659a      	str	r2, [r3, #88]	; 0x58
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800765e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007660:	3304      	adds	r3, #4
 8007662:	4618      	mov	r0, r3
 8007664:	f7fe fe1d 	bl	80062a2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800766a:	3318      	adds	r3, #24
 800766c:	4618      	mov	r0, r3
 800766e:	f7fe fe18 	bl	80062a2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007674:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007676:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800767a:	f1c3 0207 	rsb	r2, r3, #7
 800767e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007680:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007684:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007686:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800768a:	2200      	movs	r2, #0
 800768c:	65da      	str	r2, [r3, #92]	; 0x5c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800768e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007690:	2200      	movs	r2, #0
 8007692:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007696:	683a      	ldr	r2, [r7, #0]
 8007698:	68f9      	ldr	r1, [r7, #12]
 800769a:	69b8      	ldr	r0, [r7, #24]
 800769c:	f001 fae0 	bl	8008c60 <pxPortInitialiseStack>
 80076a0:	4602      	mov	r2, r0
 80076a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076a4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80076a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d002      	beq.n	80076b2 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80076ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80076b0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80076b2:	bf00      	nop
 80076b4:	3720      	adds	r7, #32
 80076b6:	46bd      	mov	sp, r7
 80076b8:	bd80      	pop	{r7, pc}
	...

080076bc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80076bc:	b580      	push	{r7, lr}
 80076be:	b082      	sub	sp, #8
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80076c4:	f001 fbd8 	bl	8008e78 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80076c8:	4b2a      	ldr	r3, [pc, #168]	; (8007774 <prvAddNewTaskToReadyList+0xb8>)
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	3301      	adds	r3, #1
 80076ce:	4a29      	ldr	r2, [pc, #164]	; (8007774 <prvAddNewTaskToReadyList+0xb8>)
 80076d0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80076d2:	4b29      	ldr	r3, [pc, #164]	; (8007778 <prvAddNewTaskToReadyList+0xbc>)
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d109      	bne.n	80076ee <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80076da:	4a27      	ldr	r2, [pc, #156]	; (8007778 <prvAddNewTaskToReadyList+0xbc>)
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80076e0:	4b24      	ldr	r3, [pc, #144]	; (8007774 <prvAddNewTaskToReadyList+0xb8>)
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	2b01      	cmp	r3, #1
 80076e6:	d110      	bne.n	800770a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80076e8:	f000 fc2a 	bl	8007f40 <prvInitialiseTaskLists>
 80076ec:	e00d      	b.n	800770a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80076ee:	4b23      	ldr	r3, [pc, #140]	; (800777c <prvAddNewTaskToReadyList+0xc0>)
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d109      	bne.n	800770a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80076f6:	4b20      	ldr	r3, [pc, #128]	; (8007778 <prvAddNewTaskToReadyList+0xbc>)
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007700:	429a      	cmp	r2, r3
 8007702:	d802      	bhi.n	800770a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007704:	4a1c      	ldr	r2, [pc, #112]	; (8007778 <prvAddNewTaskToReadyList+0xbc>)
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800770a:	4b1d      	ldr	r3, [pc, #116]	; (8007780 <prvAddNewTaskToReadyList+0xc4>)
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	3301      	adds	r3, #1
 8007710:	4a1b      	ldr	r2, [pc, #108]	; (8007780 <prvAddNewTaskToReadyList+0xc4>)
 8007712:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007718:	2201      	movs	r2, #1
 800771a:	409a      	lsls	r2, r3
 800771c:	4b19      	ldr	r3, [pc, #100]	; (8007784 <prvAddNewTaskToReadyList+0xc8>)
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	4313      	orrs	r3, r2
 8007722:	4a18      	ldr	r2, [pc, #96]	; (8007784 <prvAddNewTaskToReadyList+0xc8>)
 8007724:	6013      	str	r3, [r2, #0]
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800772a:	4613      	mov	r3, r2
 800772c:	009b      	lsls	r3, r3, #2
 800772e:	4413      	add	r3, r2
 8007730:	009b      	lsls	r3, r3, #2
 8007732:	4a15      	ldr	r2, [pc, #84]	; (8007788 <prvAddNewTaskToReadyList+0xcc>)
 8007734:	441a      	add	r2, r3
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	3304      	adds	r3, #4
 800773a:	4619      	mov	r1, r3
 800773c:	4610      	mov	r0, r2
 800773e:	f7fe fdbd 	bl	80062bc <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007742:	f001 fbcb 	bl	8008edc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007746:	4b0d      	ldr	r3, [pc, #52]	; (800777c <prvAddNewTaskToReadyList+0xc0>)
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	2b00      	cmp	r3, #0
 800774c:	d00e      	beq.n	800776c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800774e:	4b0a      	ldr	r3, [pc, #40]	; (8007778 <prvAddNewTaskToReadyList+0xbc>)
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007758:	429a      	cmp	r2, r3
 800775a:	d207      	bcs.n	800776c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800775c:	4b0b      	ldr	r3, [pc, #44]	; (800778c <prvAddNewTaskToReadyList+0xd0>)
 800775e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007762:	601a      	str	r2, [r3, #0]
 8007764:	f3bf 8f4f 	dsb	sy
 8007768:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800776c:	bf00      	nop
 800776e:	3708      	adds	r7, #8
 8007770:	46bd      	mov	sp, r7
 8007772:	bd80      	pop	{r7, pc}
 8007774:	2000086c 	.word	0x2000086c
 8007778:	2000076c 	.word	0x2000076c
 800777c:	20000878 	.word	0x20000878
 8007780:	20000888 	.word	0x20000888
 8007784:	20000874 	.word	0x20000874
 8007788:	20000770 	.word	0x20000770
 800778c:	e000ed04 	.word	0xe000ed04

08007790 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007790:	b580      	push	{r7, lr}
 8007792:	b084      	sub	sp, #16
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007798:	2300      	movs	r3, #0
 800779a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d018      	beq.n	80077d4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80077a2:	4b14      	ldr	r3, [pc, #80]	; (80077f4 <vTaskDelay+0x64>)
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d00b      	beq.n	80077c2 <vTaskDelay+0x32>
 80077aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077ae:	b672      	cpsid	i
 80077b0:	f383 8811 	msr	BASEPRI, r3
 80077b4:	f3bf 8f6f 	isb	sy
 80077b8:	f3bf 8f4f 	dsb	sy
 80077bc:	b662      	cpsie	i
 80077be:	60bb      	str	r3, [r7, #8]
 80077c0:	e7fe      	b.n	80077c0 <vTaskDelay+0x30>
			vTaskSuspendAll();
 80077c2:	f000 f883 	bl	80078cc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80077c6:	2100      	movs	r1, #0
 80077c8:	6878      	ldr	r0, [r7, #4]
 80077ca:	f000 fe4b 	bl	8008464 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80077ce:	f000 f88b 	bl	80078e8 <xTaskResumeAll>
 80077d2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d107      	bne.n	80077ea <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80077da:	4b07      	ldr	r3, [pc, #28]	; (80077f8 <vTaskDelay+0x68>)
 80077dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80077e0:	601a      	str	r2, [r3, #0]
 80077e2:	f3bf 8f4f 	dsb	sy
 80077e6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80077ea:	bf00      	nop
 80077ec:	3710      	adds	r7, #16
 80077ee:	46bd      	mov	sp, r7
 80077f0:	bd80      	pop	{r7, pc}
 80077f2:	bf00      	nop
 80077f4:	20000894 	.word	0x20000894
 80077f8:	e000ed04 	.word	0xe000ed04

080077fc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80077fc:	b580      	push	{r7, lr}
 80077fe:	b08a      	sub	sp, #40	; 0x28
 8007800:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007802:	2300      	movs	r3, #0
 8007804:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007806:	2300      	movs	r3, #0
 8007808:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800780a:	463a      	mov	r2, r7
 800780c:	1d39      	adds	r1, r7, #4
 800780e:	f107 0308 	add.w	r3, r7, #8
 8007812:	4618      	mov	r0, r3
 8007814:	f7f8 ff04 	bl	8000620 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007818:	6839      	ldr	r1, [r7, #0]
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	68ba      	ldr	r2, [r7, #8]
 800781e:	9202      	str	r2, [sp, #8]
 8007820:	9301      	str	r3, [sp, #4]
 8007822:	2300      	movs	r3, #0
 8007824:	9300      	str	r3, [sp, #0]
 8007826:	2300      	movs	r3, #0
 8007828:	460a      	mov	r2, r1
 800782a:	4922      	ldr	r1, [pc, #136]	; (80078b4 <vTaskStartScheduler+0xb8>)
 800782c:	4822      	ldr	r0, [pc, #136]	; (80078b8 <vTaskStartScheduler+0xbc>)
 800782e:	f7ff fe17 	bl	8007460 <xTaskCreateStatic>
 8007832:	4602      	mov	r2, r0
 8007834:	4b21      	ldr	r3, [pc, #132]	; (80078bc <vTaskStartScheduler+0xc0>)
 8007836:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007838:	4b20      	ldr	r3, [pc, #128]	; (80078bc <vTaskStartScheduler+0xc0>)
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	2b00      	cmp	r3, #0
 800783e:	d002      	beq.n	8007846 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007840:	2301      	movs	r3, #1
 8007842:	617b      	str	r3, [r7, #20]
 8007844:	e001      	b.n	800784a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007846:	2300      	movs	r3, #0
 8007848:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800784a:	697b      	ldr	r3, [r7, #20]
 800784c:	2b01      	cmp	r3, #1
 800784e:	d102      	bne.n	8007856 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007850:	f000 fe6e 	bl	8008530 <xTimerCreateTimerTask>
 8007854:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007856:	697b      	ldr	r3, [r7, #20]
 8007858:	2b01      	cmp	r3, #1
 800785a:	d117      	bne.n	800788c <vTaskStartScheduler+0x90>
 800785c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007860:	b672      	cpsid	i
 8007862:	f383 8811 	msr	BASEPRI, r3
 8007866:	f3bf 8f6f 	isb	sy
 800786a:	f3bf 8f4f 	dsb	sy
 800786e:	b662      	cpsie	i
 8007870:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007872:	4b13      	ldr	r3, [pc, #76]	; (80078c0 <vTaskStartScheduler+0xc4>)
 8007874:	f04f 32ff 	mov.w	r2, #4294967295
 8007878:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800787a:	4b12      	ldr	r3, [pc, #72]	; (80078c4 <vTaskStartScheduler+0xc8>)
 800787c:	2201      	movs	r2, #1
 800787e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007880:	4b11      	ldr	r3, [pc, #68]	; (80078c8 <vTaskStartScheduler+0xcc>)
 8007882:	2200      	movs	r2, #0
 8007884:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007886:	f001 fa7b 	bl	8008d80 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800788a:	e00f      	b.n	80078ac <vTaskStartScheduler+0xb0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800788c:	697b      	ldr	r3, [r7, #20]
 800788e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007892:	d10b      	bne.n	80078ac <vTaskStartScheduler+0xb0>
 8007894:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007898:	b672      	cpsid	i
 800789a:	f383 8811 	msr	BASEPRI, r3
 800789e:	f3bf 8f6f 	isb	sy
 80078a2:	f3bf 8f4f 	dsb	sy
 80078a6:	b662      	cpsie	i
 80078a8:	60fb      	str	r3, [r7, #12]
 80078aa:	e7fe      	b.n	80078aa <vTaskStartScheduler+0xae>
}
 80078ac:	bf00      	nop
 80078ae:	3718      	adds	r7, #24
 80078b0:	46bd      	mov	sp, r7
 80078b2:	bd80      	pop	{r7, pc}
 80078b4:	080185b4 	.word	0x080185b4
 80078b8:	08007f0d 	.word	0x08007f0d
 80078bc:	20000890 	.word	0x20000890
 80078c0:	2000088c 	.word	0x2000088c
 80078c4:	20000878 	.word	0x20000878
 80078c8:	20000870 	.word	0x20000870

080078cc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80078cc:	b480      	push	{r7}
 80078ce:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80078d0:	4b04      	ldr	r3, [pc, #16]	; (80078e4 <vTaskSuspendAll+0x18>)
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	3301      	adds	r3, #1
 80078d6:	4a03      	ldr	r2, [pc, #12]	; (80078e4 <vTaskSuspendAll+0x18>)
 80078d8:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80078da:	bf00      	nop
 80078dc:	46bd      	mov	sp, r7
 80078de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e2:	4770      	bx	lr
 80078e4:	20000894 	.word	0x20000894

080078e8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80078e8:	b580      	push	{r7, lr}
 80078ea:	b084      	sub	sp, #16
 80078ec:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80078ee:	2300      	movs	r3, #0
 80078f0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80078f2:	2300      	movs	r3, #0
 80078f4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80078f6:	4b42      	ldr	r3, [pc, #264]	; (8007a00 <xTaskResumeAll+0x118>)
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d10b      	bne.n	8007916 <xTaskResumeAll+0x2e>
 80078fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007902:	b672      	cpsid	i
 8007904:	f383 8811 	msr	BASEPRI, r3
 8007908:	f3bf 8f6f 	isb	sy
 800790c:	f3bf 8f4f 	dsb	sy
 8007910:	b662      	cpsie	i
 8007912:	603b      	str	r3, [r7, #0]
 8007914:	e7fe      	b.n	8007914 <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007916:	f001 faaf 	bl	8008e78 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800791a:	4b39      	ldr	r3, [pc, #228]	; (8007a00 <xTaskResumeAll+0x118>)
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	3b01      	subs	r3, #1
 8007920:	4a37      	ldr	r2, [pc, #220]	; (8007a00 <xTaskResumeAll+0x118>)
 8007922:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007924:	4b36      	ldr	r3, [pc, #216]	; (8007a00 <xTaskResumeAll+0x118>)
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	2b00      	cmp	r3, #0
 800792a:	d161      	bne.n	80079f0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800792c:	4b35      	ldr	r3, [pc, #212]	; (8007a04 <xTaskResumeAll+0x11c>)
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	2b00      	cmp	r3, #0
 8007932:	d05d      	beq.n	80079f0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007934:	e02e      	b.n	8007994 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007936:	4b34      	ldr	r3, [pc, #208]	; (8007a08 <xTaskResumeAll+0x120>)
 8007938:	68db      	ldr	r3, [r3, #12]
 800793a:	68db      	ldr	r3, [r3, #12]
 800793c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	3318      	adds	r3, #24
 8007942:	4618      	mov	r0, r3
 8007944:	f7fe fd17 	bl	8006376 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	3304      	adds	r3, #4
 800794c:	4618      	mov	r0, r3
 800794e:	f7fe fd12 	bl	8006376 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007956:	2201      	movs	r2, #1
 8007958:	409a      	lsls	r2, r3
 800795a:	4b2c      	ldr	r3, [pc, #176]	; (8007a0c <xTaskResumeAll+0x124>)
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	4313      	orrs	r3, r2
 8007960:	4a2a      	ldr	r2, [pc, #168]	; (8007a0c <xTaskResumeAll+0x124>)
 8007962:	6013      	str	r3, [r2, #0]
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007968:	4613      	mov	r3, r2
 800796a:	009b      	lsls	r3, r3, #2
 800796c:	4413      	add	r3, r2
 800796e:	009b      	lsls	r3, r3, #2
 8007970:	4a27      	ldr	r2, [pc, #156]	; (8007a10 <xTaskResumeAll+0x128>)
 8007972:	441a      	add	r2, r3
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	3304      	adds	r3, #4
 8007978:	4619      	mov	r1, r3
 800797a:	4610      	mov	r0, r2
 800797c:	f7fe fc9e 	bl	80062bc <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007984:	4b23      	ldr	r3, [pc, #140]	; (8007a14 <xTaskResumeAll+0x12c>)
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800798a:	429a      	cmp	r2, r3
 800798c:	d302      	bcc.n	8007994 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800798e:	4b22      	ldr	r3, [pc, #136]	; (8007a18 <xTaskResumeAll+0x130>)
 8007990:	2201      	movs	r2, #1
 8007992:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007994:	4b1c      	ldr	r3, [pc, #112]	; (8007a08 <xTaskResumeAll+0x120>)
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	2b00      	cmp	r3, #0
 800799a:	d1cc      	bne.n	8007936 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d001      	beq.n	80079a6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80079a2:	f000 fb69 	bl	8008078 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80079a6:	4b1d      	ldr	r3, [pc, #116]	; (8007a1c <xTaskResumeAll+0x134>)
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d010      	beq.n	80079d4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80079b2:	f000 f859 	bl	8007a68 <xTaskIncrementTick>
 80079b6:	4603      	mov	r3, r0
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d002      	beq.n	80079c2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80079bc:	4b16      	ldr	r3, [pc, #88]	; (8007a18 <xTaskResumeAll+0x130>)
 80079be:	2201      	movs	r2, #1
 80079c0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	3b01      	subs	r3, #1
 80079c6:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d1f1      	bne.n	80079b2 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 80079ce:	4b13      	ldr	r3, [pc, #76]	; (8007a1c <xTaskResumeAll+0x134>)
 80079d0:	2200      	movs	r2, #0
 80079d2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80079d4:	4b10      	ldr	r3, [pc, #64]	; (8007a18 <xTaskResumeAll+0x130>)
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d009      	beq.n	80079f0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80079dc:	2301      	movs	r3, #1
 80079de:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80079e0:	4b0f      	ldr	r3, [pc, #60]	; (8007a20 <xTaskResumeAll+0x138>)
 80079e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80079e6:	601a      	str	r2, [r3, #0]
 80079e8:	f3bf 8f4f 	dsb	sy
 80079ec:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80079f0:	f001 fa74 	bl	8008edc <vPortExitCritical>

	return xAlreadyYielded;
 80079f4:	68bb      	ldr	r3, [r7, #8]
}
 80079f6:	4618      	mov	r0, r3
 80079f8:	3710      	adds	r7, #16
 80079fa:	46bd      	mov	sp, r7
 80079fc:	bd80      	pop	{r7, pc}
 80079fe:	bf00      	nop
 8007a00:	20000894 	.word	0x20000894
 8007a04:	2000086c 	.word	0x2000086c
 8007a08:	2000082c 	.word	0x2000082c
 8007a0c:	20000874 	.word	0x20000874
 8007a10:	20000770 	.word	0x20000770
 8007a14:	2000076c 	.word	0x2000076c
 8007a18:	20000880 	.word	0x20000880
 8007a1c:	2000087c 	.word	0x2000087c
 8007a20:	e000ed04 	.word	0xe000ed04

08007a24 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007a24:	b480      	push	{r7}
 8007a26:	b083      	sub	sp, #12
 8007a28:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007a2a:	4b05      	ldr	r3, [pc, #20]	; (8007a40 <xTaskGetTickCount+0x1c>)
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007a30:	687b      	ldr	r3, [r7, #4]
}
 8007a32:	4618      	mov	r0, r3
 8007a34:	370c      	adds	r7, #12
 8007a36:	46bd      	mov	sp, r7
 8007a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3c:	4770      	bx	lr
 8007a3e:	bf00      	nop
 8007a40:	20000870 	.word	0x20000870

08007a44 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8007a44:	b580      	push	{r7, lr}
 8007a46:	b082      	sub	sp, #8
 8007a48:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007a4a:	f001 faf5 	bl	8009038 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8007a4e:	2300      	movs	r3, #0
 8007a50:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8007a52:	4b04      	ldr	r3, [pc, #16]	; (8007a64 <xTaskGetTickCountFromISR+0x20>)
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007a58:	683b      	ldr	r3, [r7, #0]
}
 8007a5a:	4618      	mov	r0, r3
 8007a5c:	3708      	adds	r7, #8
 8007a5e:	46bd      	mov	sp, r7
 8007a60:	bd80      	pop	{r7, pc}
 8007a62:	bf00      	nop
 8007a64:	20000870 	.word	0x20000870

08007a68 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007a68:	b580      	push	{r7, lr}
 8007a6a:	b086      	sub	sp, #24
 8007a6c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007a6e:	2300      	movs	r3, #0
 8007a70:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007a72:	4b4f      	ldr	r3, [pc, #316]	; (8007bb0 <xTaskIncrementTick+0x148>)
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	f040 8089 	bne.w	8007b8e <xTaskIncrementTick+0x126>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007a7c:	4b4d      	ldr	r3, [pc, #308]	; (8007bb4 <xTaskIncrementTick+0x14c>)
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	3301      	adds	r3, #1
 8007a82:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007a84:	4a4b      	ldr	r2, [pc, #300]	; (8007bb4 <xTaskIncrementTick+0x14c>)
 8007a86:	693b      	ldr	r3, [r7, #16]
 8007a88:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007a8a:	693b      	ldr	r3, [r7, #16]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d121      	bne.n	8007ad4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8007a90:	4b49      	ldr	r3, [pc, #292]	; (8007bb8 <xTaskIncrementTick+0x150>)
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d00b      	beq.n	8007ab2 <xTaskIncrementTick+0x4a>
 8007a9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a9e:	b672      	cpsid	i
 8007aa0:	f383 8811 	msr	BASEPRI, r3
 8007aa4:	f3bf 8f6f 	isb	sy
 8007aa8:	f3bf 8f4f 	dsb	sy
 8007aac:	b662      	cpsie	i
 8007aae:	603b      	str	r3, [r7, #0]
 8007ab0:	e7fe      	b.n	8007ab0 <xTaskIncrementTick+0x48>
 8007ab2:	4b41      	ldr	r3, [pc, #260]	; (8007bb8 <xTaskIncrementTick+0x150>)
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	60fb      	str	r3, [r7, #12]
 8007ab8:	4b40      	ldr	r3, [pc, #256]	; (8007bbc <xTaskIncrementTick+0x154>)
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	4a3e      	ldr	r2, [pc, #248]	; (8007bb8 <xTaskIncrementTick+0x150>)
 8007abe:	6013      	str	r3, [r2, #0]
 8007ac0:	4a3e      	ldr	r2, [pc, #248]	; (8007bbc <xTaskIncrementTick+0x154>)
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	6013      	str	r3, [r2, #0]
 8007ac6:	4b3e      	ldr	r3, [pc, #248]	; (8007bc0 <xTaskIncrementTick+0x158>)
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	3301      	adds	r3, #1
 8007acc:	4a3c      	ldr	r2, [pc, #240]	; (8007bc0 <xTaskIncrementTick+0x158>)
 8007ace:	6013      	str	r3, [r2, #0]
 8007ad0:	f000 fad2 	bl	8008078 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007ad4:	4b3b      	ldr	r3, [pc, #236]	; (8007bc4 <xTaskIncrementTick+0x15c>)
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	693a      	ldr	r2, [r7, #16]
 8007ada:	429a      	cmp	r2, r3
 8007adc:	d348      	bcc.n	8007b70 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007ade:	4b36      	ldr	r3, [pc, #216]	; (8007bb8 <xTaskIncrementTick+0x150>)
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d104      	bne.n	8007af2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007ae8:	4b36      	ldr	r3, [pc, #216]	; (8007bc4 <xTaskIncrementTick+0x15c>)
 8007aea:	f04f 32ff 	mov.w	r2, #4294967295
 8007aee:	601a      	str	r2, [r3, #0]
					break;
 8007af0:	e03e      	b.n	8007b70 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007af2:	4b31      	ldr	r3, [pc, #196]	; (8007bb8 <xTaskIncrementTick+0x150>)
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	68db      	ldr	r3, [r3, #12]
 8007af8:	68db      	ldr	r3, [r3, #12]
 8007afa:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007afc:	68bb      	ldr	r3, [r7, #8]
 8007afe:	685b      	ldr	r3, [r3, #4]
 8007b00:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007b02:	693a      	ldr	r2, [r7, #16]
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	429a      	cmp	r2, r3
 8007b08:	d203      	bcs.n	8007b12 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007b0a:	4a2e      	ldr	r2, [pc, #184]	; (8007bc4 <xTaskIncrementTick+0x15c>)
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007b10:	e02e      	b.n	8007b70 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007b12:	68bb      	ldr	r3, [r7, #8]
 8007b14:	3304      	adds	r3, #4
 8007b16:	4618      	mov	r0, r3
 8007b18:	f7fe fc2d 	bl	8006376 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007b1c:	68bb      	ldr	r3, [r7, #8]
 8007b1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d004      	beq.n	8007b2e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007b24:	68bb      	ldr	r3, [r7, #8]
 8007b26:	3318      	adds	r3, #24
 8007b28:	4618      	mov	r0, r3
 8007b2a:	f7fe fc24 	bl	8006376 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007b2e:	68bb      	ldr	r3, [r7, #8]
 8007b30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b32:	2201      	movs	r2, #1
 8007b34:	409a      	lsls	r2, r3
 8007b36:	4b24      	ldr	r3, [pc, #144]	; (8007bc8 <xTaskIncrementTick+0x160>)
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	4313      	orrs	r3, r2
 8007b3c:	4a22      	ldr	r2, [pc, #136]	; (8007bc8 <xTaskIncrementTick+0x160>)
 8007b3e:	6013      	str	r3, [r2, #0]
 8007b40:	68bb      	ldr	r3, [r7, #8]
 8007b42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b44:	4613      	mov	r3, r2
 8007b46:	009b      	lsls	r3, r3, #2
 8007b48:	4413      	add	r3, r2
 8007b4a:	009b      	lsls	r3, r3, #2
 8007b4c:	4a1f      	ldr	r2, [pc, #124]	; (8007bcc <xTaskIncrementTick+0x164>)
 8007b4e:	441a      	add	r2, r3
 8007b50:	68bb      	ldr	r3, [r7, #8]
 8007b52:	3304      	adds	r3, #4
 8007b54:	4619      	mov	r1, r3
 8007b56:	4610      	mov	r0, r2
 8007b58:	f7fe fbb0 	bl	80062bc <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007b5c:	68bb      	ldr	r3, [r7, #8]
 8007b5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b60:	4b1b      	ldr	r3, [pc, #108]	; (8007bd0 <xTaskIncrementTick+0x168>)
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b66:	429a      	cmp	r2, r3
 8007b68:	d3b9      	bcc.n	8007ade <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8007b6a:	2301      	movs	r3, #1
 8007b6c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007b6e:	e7b6      	b.n	8007ade <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007b70:	4b17      	ldr	r3, [pc, #92]	; (8007bd0 <xTaskIncrementTick+0x168>)
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b76:	4915      	ldr	r1, [pc, #84]	; (8007bcc <xTaskIncrementTick+0x164>)
 8007b78:	4613      	mov	r3, r2
 8007b7a:	009b      	lsls	r3, r3, #2
 8007b7c:	4413      	add	r3, r2
 8007b7e:	009b      	lsls	r3, r3, #2
 8007b80:	440b      	add	r3, r1
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	2b01      	cmp	r3, #1
 8007b86:	d907      	bls.n	8007b98 <xTaskIncrementTick+0x130>
			{
				xSwitchRequired = pdTRUE;
 8007b88:	2301      	movs	r3, #1
 8007b8a:	617b      	str	r3, [r7, #20]
 8007b8c:	e004      	b.n	8007b98 <xTaskIncrementTick+0x130>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8007b8e:	4b11      	ldr	r3, [pc, #68]	; (8007bd4 <xTaskIncrementTick+0x16c>)
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	3301      	adds	r3, #1
 8007b94:	4a0f      	ldr	r2, [pc, #60]	; (8007bd4 <xTaskIncrementTick+0x16c>)
 8007b96:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8007b98:	4b0f      	ldr	r3, [pc, #60]	; (8007bd8 <xTaskIncrementTick+0x170>)
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d001      	beq.n	8007ba4 <xTaskIncrementTick+0x13c>
		{
			xSwitchRequired = pdTRUE;
 8007ba0:	2301      	movs	r3, #1
 8007ba2:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8007ba4:	697b      	ldr	r3, [r7, #20]
}
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	3718      	adds	r7, #24
 8007baa:	46bd      	mov	sp, r7
 8007bac:	bd80      	pop	{r7, pc}
 8007bae:	bf00      	nop
 8007bb0:	20000894 	.word	0x20000894
 8007bb4:	20000870 	.word	0x20000870
 8007bb8:	20000824 	.word	0x20000824
 8007bbc:	20000828 	.word	0x20000828
 8007bc0:	20000884 	.word	0x20000884
 8007bc4:	2000088c 	.word	0x2000088c
 8007bc8:	20000874 	.word	0x20000874
 8007bcc:	20000770 	.word	0x20000770
 8007bd0:	2000076c 	.word	0x2000076c
 8007bd4:	2000087c 	.word	0x2000087c
 8007bd8:	20000880 	.word	0x20000880

08007bdc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007bdc:	b480      	push	{r7}
 8007bde:	b087      	sub	sp, #28
 8007be0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007be2:	4b27      	ldr	r3, [pc, #156]	; (8007c80 <vTaskSwitchContext+0xa4>)
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d003      	beq.n	8007bf2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007bea:	4b26      	ldr	r3, [pc, #152]	; (8007c84 <vTaskSwitchContext+0xa8>)
 8007bec:	2201      	movs	r2, #1
 8007bee:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007bf0:	e040      	b.n	8007c74 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8007bf2:	4b24      	ldr	r3, [pc, #144]	; (8007c84 <vTaskSwitchContext+0xa8>)
 8007bf4:	2200      	movs	r2, #0
 8007bf6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007bf8:	4b23      	ldr	r3, [pc, #140]	; (8007c88 <vTaskSwitchContext+0xac>)
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	fab3 f383 	clz	r3, r3
 8007c04:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8007c06:	7afb      	ldrb	r3, [r7, #11]
 8007c08:	f1c3 031f 	rsb	r3, r3, #31
 8007c0c:	617b      	str	r3, [r7, #20]
 8007c0e:	491f      	ldr	r1, [pc, #124]	; (8007c8c <vTaskSwitchContext+0xb0>)
 8007c10:	697a      	ldr	r2, [r7, #20]
 8007c12:	4613      	mov	r3, r2
 8007c14:	009b      	lsls	r3, r3, #2
 8007c16:	4413      	add	r3, r2
 8007c18:	009b      	lsls	r3, r3, #2
 8007c1a:	440b      	add	r3, r1
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d10b      	bne.n	8007c3a <vTaskSwitchContext+0x5e>
	__asm volatile
 8007c22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c26:	b672      	cpsid	i
 8007c28:	f383 8811 	msr	BASEPRI, r3
 8007c2c:	f3bf 8f6f 	isb	sy
 8007c30:	f3bf 8f4f 	dsb	sy
 8007c34:	b662      	cpsie	i
 8007c36:	607b      	str	r3, [r7, #4]
 8007c38:	e7fe      	b.n	8007c38 <vTaskSwitchContext+0x5c>
 8007c3a:	697a      	ldr	r2, [r7, #20]
 8007c3c:	4613      	mov	r3, r2
 8007c3e:	009b      	lsls	r3, r3, #2
 8007c40:	4413      	add	r3, r2
 8007c42:	009b      	lsls	r3, r3, #2
 8007c44:	4a11      	ldr	r2, [pc, #68]	; (8007c8c <vTaskSwitchContext+0xb0>)
 8007c46:	4413      	add	r3, r2
 8007c48:	613b      	str	r3, [r7, #16]
 8007c4a:	693b      	ldr	r3, [r7, #16]
 8007c4c:	685b      	ldr	r3, [r3, #4]
 8007c4e:	685a      	ldr	r2, [r3, #4]
 8007c50:	693b      	ldr	r3, [r7, #16]
 8007c52:	605a      	str	r2, [r3, #4]
 8007c54:	693b      	ldr	r3, [r7, #16]
 8007c56:	685a      	ldr	r2, [r3, #4]
 8007c58:	693b      	ldr	r3, [r7, #16]
 8007c5a:	3308      	adds	r3, #8
 8007c5c:	429a      	cmp	r2, r3
 8007c5e:	d104      	bne.n	8007c6a <vTaskSwitchContext+0x8e>
 8007c60:	693b      	ldr	r3, [r7, #16]
 8007c62:	685b      	ldr	r3, [r3, #4]
 8007c64:	685a      	ldr	r2, [r3, #4]
 8007c66:	693b      	ldr	r3, [r7, #16]
 8007c68:	605a      	str	r2, [r3, #4]
 8007c6a:	693b      	ldr	r3, [r7, #16]
 8007c6c:	685b      	ldr	r3, [r3, #4]
 8007c6e:	68db      	ldr	r3, [r3, #12]
 8007c70:	4a07      	ldr	r2, [pc, #28]	; (8007c90 <vTaskSwitchContext+0xb4>)
 8007c72:	6013      	str	r3, [r2, #0]
}
 8007c74:	bf00      	nop
 8007c76:	371c      	adds	r7, #28
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7e:	4770      	bx	lr
 8007c80:	20000894 	.word	0x20000894
 8007c84:	20000880 	.word	0x20000880
 8007c88:	20000874 	.word	0x20000874
 8007c8c:	20000770 	.word	0x20000770
 8007c90:	2000076c 	.word	0x2000076c

08007c94 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007c94:	b580      	push	{r7, lr}
 8007c96:	b084      	sub	sp, #16
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	6078      	str	r0, [r7, #4]
 8007c9c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d10b      	bne.n	8007cbc <vTaskPlaceOnEventList+0x28>
 8007ca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ca8:	b672      	cpsid	i
 8007caa:	f383 8811 	msr	BASEPRI, r3
 8007cae:	f3bf 8f6f 	isb	sy
 8007cb2:	f3bf 8f4f 	dsb	sy
 8007cb6:	b662      	cpsie	i
 8007cb8:	60fb      	str	r3, [r7, #12]
 8007cba:	e7fe      	b.n	8007cba <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007cbc:	4b07      	ldr	r3, [pc, #28]	; (8007cdc <vTaskPlaceOnEventList+0x48>)
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	3318      	adds	r3, #24
 8007cc2:	4619      	mov	r1, r3
 8007cc4:	6878      	ldr	r0, [r7, #4]
 8007cc6:	f7fe fb1d 	bl	8006304 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007cca:	2101      	movs	r1, #1
 8007ccc:	6838      	ldr	r0, [r7, #0]
 8007cce:	f000 fbc9 	bl	8008464 <prvAddCurrentTaskToDelayedList>
}
 8007cd2:	bf00      	nop
 8007cd4:	3710      	adds	r7, #16
 8007cd6:	46bd      	mov	sp, r7
 8007cd8:	bd80      	pop	{r7, pc}
 8007cda:	bf00      	nop
 8007cdc:	2000076c 	.word	0x2000076c

08007ce0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007ce0:	b580      	push	{r7, lr}
 8007ce2:	b086      	sub	sp, #24
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	60f8      	str	r0, [r7, #12]
 8007ce8:	60b9      	str	r1, [r7, #8]
 8007cea:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d10b      	bne.n	8007d0a <vTaskPlaceOnEventListRestricted+0x2a>
 8007cf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cf6:	b672      	cpsid	i
 8007cf8:	f383 8811 	msr	BASEPRI, r3
 8007cfc:	f3bf 8f6f 	isb	sy
 8007d00:	f3bf 8f4f 	dsb	sy
 8007d04:	b662      	cpsie	i
 8007d06:	617b      	str	r3, [r7, #20]
 8007d08:	e7fe      	b.n	8007d08 <vTaskPlaceOnEventListRestricted+0x28>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007d0a:	4b0a      	ldr	r3, [pc, #40]	; (8007d34 <vTaskPlaceOnEventListRestricted+0x54>)
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	3318      	adds	r3, #24
 8007d10:	4619      	mov	r1, r3
 8007d12:	68f8      	ldr	r0, [r7, #12]
 8007d14:	f7fe fad2 	bl	80062bc <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d002      	beq.n	8007d24 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8007d1e:	f04f 33ff 	mov.w	r3, #4294967295
 8007d22:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007d24:	6879      	ldr	r1, [r7, #4]
 8007d26:	68b8      	ldr	r0, [r7, #8]
 8007d28:	f000 fb9c 	bl	8008464 <prvAddCurrentTaskToDelayedList>
	}
 8007d2c:	bf00      	nop
 8007d2e:	3718      	adds	r7, #24
 8007d30:	46bd      	mov	sp, r7
 8007d32:	bd80      	pop	{r7, pc}
 8007d34:	2000076c 	.word	0x2000076c

08007d38 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007d38:	b580      	push	{r7, lr}
 8007d3a:	b086      	sub	sp, #24
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	68db      	ldr	r3, [r3, #12]
 8007d44:	68db      	ldr	r3, [r3, #12]
 8007d46:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007d48:	693b      	ldr	r3, [r7, #16]
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d10b      	bne.n	8007d66 <xTaskRemoveFromEventList+0x2e>
 8007d4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d52:	b672      	cpsid	i
 8007d54:	f383 8811 	msr	BASEPRI, r3
 8007d58:	f3bf 8f6f 	isb	sy
 8007d5c:	f3bf 8f4f 	dsb	sy
 8007d60:	b662      	cpsie	i
 8007d62:	60fb      	str	r3, [r7, #12]
 8007d64:	e7fe      	b.n	8007d64 <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007d66:	693b      	ldr	r3, [r7, #16]
 8007d68:	3318      	adds	r3, #24
 8007d6a:	4618      	mov	r0, r3
 8007d6c:	f7fe fb03 	bl	8006376 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007d70:	4b1d      	ldr	r3, [pc, #116]	; (8007de8 <xTaskRemoveFromEventList+0xb0>)
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d11c      	bne.n	8007db2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007d78:	693b      	ldr	r3, [r7, #16]
 8007d7a:	3304      	adds	r3, #4
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	f7fe fafa 	bl	8006376 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007d82:	693b      	ldr	r3, [r7, #16]
 8007d84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d86:	2201      	movs	r2, #1
 8007d88:	409a      	lsls	r2, r3
 8007d8a:	4b18      	ldr	r3, [pc, #96]	; (8007dec <xTaskRemoveFromEventList+0xb4>)
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	4313      	orrs	r3, r2
 8007d90:	4a16      	ldr	r2, [pc, #88]	; (8007dec <xTaskRemoveFromEventList+0xb4>)
 8007d92:	6013      	str	r3, [r2, #0]
 8007d94:	693b      	ldr	r3, [r7, #16]
 8007d96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d98:	4613      	mov	r3, r2
 8007d9a:	009b      	lsls	r3, r3, #2
 8007d9c:	4413      	add	r3, r2
 8007d9e:	009b      	lsls	r3, r3, #2
 8007da0:	4a13      	ldr	r2, [pc, #76]	; (8007df0 <xTaskRemoveFromEventList+0xb8>)
 8007da2:	441a      	add	r2, r3
 8007da4:	693b      	ldr	r3, [r7, #16]
 8007da6:	3304      	adds	r3, #4
 8007da8:	4619      	mov	r1, r3
 8007daa:	4610      	mov	r0, r2
 8007dac:	f7fe fa86 	bl	80062bc <vListInsertEnd>
 8007db0:	e005      	b.n	8007dbe <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007db2:	693b      	ldr	r3, [r7, #16]
 8007db4:	3318      	adds	r3, #24
 8007db6:	4619      	mov	r1, r3
 8007db8:	480e      	ldr	r0, [pc, #56]	; (8007df4 <xTaskRemoveFromEventList+0xbc>)
 8007dba:	f7fe fa7f 	bl	80062bc <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007dbe:	693b      	ldr	r3, [r7, #16]
 8007dc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007dc2:	4b0d      	ldr	r3, [pc, #52]	; (8007df8 <xTaskRemoveFromEventList+0xc0>)
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dc8:	429a      	cmp	r2, r3
 8007dca:	d905      	bls.n	8007dd8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007dcc:	2301      	movs	r3, #1
 8007dce:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007dd0:	4b0a      	ldr	r3, [pc, #40]	; (8007dfc <xTaskRemoveFromEventList+0xc4>)
 8007dd2:	2201      	movs	r2, #1
 8007dd4:	601a      	str	r2, [r3, #0]
 8007dd6:	e001      	b.n	8007ddc <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8007dd8:	2300      	movs	r3, #0
 8007dda:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007ddc:	697b      	ldr	r3, [r7, #20]
}
 8007dde:	4618      	mov	r0, r3
 8007de0:	3718      	adds	r7, #24
 8007de2:	46bd      	mov	sp, r7
 8007de4:	bd80      	pop	{r7, pc}
 8007de6:	bf00      	nop
 8007de8:	20000894 	.word	0x20000894
 8007dec:	20000874 	.word	0x20000874
 8007df0:	20000770 	.word	0x20000770
 8007df4:	2000082c 	.word	0x2000082c
 8007df8:	2000076c 	.word	0x2000076c
 8007dfc:	20000880 	.word	0x20000880

08007e00 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007e00:	b480      	push	{r7}
 8007e02:	b083      	sub	sp, #12
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007e08:	4b06      	ldr	r3, [pc, #24]	; (8007e24 <vTaskInternalSetTimeOutState+0x24>)
 8007e0a:	681a      	ldr	r2, [r3, #0]
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007e10:	4b05      	ldr	r3, [pc, #20]	; (8007e28 <vTaskInternalSetTimeOutState+0x28>)
 8007e12:	681a      	ldr	r2, [r3, #0]
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	605a      	str	r2, [r3, #4]
}
 8007e18:	bf00      	nop
 8007e1a:	370c      	adds	r7, #12
 8007e1c:	46bd      	mov	sp, r7
 8007e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e22:	4770      	bx	lr
 8007e24:	20000884 	.word	0x20000884
 8007e28:	20000870 	.word	0x20000870

08007e2c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007e2c:	b580      	push	{r7, lr}
 8007e2e:	b088      	sub	sp, #32
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	6078      	str	r0, [r7, #4]
 8007e34:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d10b      	bne.n	8007e54 <xTaskCheckForTimeOut+0x28>
 8007e3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e40:	b672      	cpsid	i
 8007e42:	f383 8811 	msr	BASEPRI, r3
 8007e46:	f3bf 8f6f 	isb	sy
 8007e4a:	f3bf 8f4f 	dsb	sy
 8007e4e:	b662      	cpsie	i
 8007e50:	613b      	str	r3, [r7, #16]
 8007e52:	e7fe      	b.n	8007e52 <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 8007e54:	683b      	ldr	r3, [r7, #0]
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d10b      	bne.n	8007e72 <xTaskCheckForTimeOut+0x46>
 8007e5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e5e:	b672      	cpsid	i
 8007e60:	f383 8811 	msr	BASEPRI, r3
 8007e64:	f3bf 8f6f 	isb	sy
 8007e68:	f3bf 8f4f 	dsb	sy
 8007e6c:	b662      	cpsie	i
 8007e6e:	60fb      	str	r3, [r7, #12]
 8007e70:	e7fe      	b.n	8007e70 <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 8007e72:	f001 f801 	bl	8008e78 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007e76:	4b1d      	ldr	r3, [pc, #116]	; (8007eec <xTaskCheckForTimeOut+0xc0>)
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	685b      	ldr	r3, [r3, #4]
 8007e80:	69ba      	ldr	r2, [r7, #24]
 8007e82:	1ad3      	subs	r3, r2, r3
 8007e84:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007e86:	683b      	ldr	r3, [r7, #0]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e8e:	d102      	bne.n	8007e96 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007e90:	2300      	movs	r3, #0
 8007e92:	61fb      	str	r3, [r7, #28]
 8007e94:	e023      	b.n	8007ede <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681a      	ldr	r2, [r3, #0]
 8007e9a:	4b15      	ldr	r3, [pc, #84]	; (8007ef0 <xTaskCheckForTimeOut+0xc4>)
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	429a      	cmp	r2, r3
 8007ea0:	d007      	beq.n	8007eb2 <xTaskCheckForTimeOut+0x86>
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	685b      	ldr	r3, [r3, #4]
 8007ea6:	69ba      	ldr	r2, [r7, #24]
 8007ea8:	429a      	cmp	r2, r3
 8007eaa:	d302      	bcc.n	8007eb2 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007eac:	2301      	movs	r3, #1
 8007eae:	61fb      	str	r3, [r7, #28]
 8007eb0:	e015      	b.n	8007ede <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007eb2:	683b      	ldr	r3, [r7, #0]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	697a      	ldr	r2, [r7, #20]
 8007eb8:	429a      	cmp	r2, r3
 8007eba:	d20b      	bcs.n	8007ed4 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007ebc:	683b      	ldr	r3, [r7, #0]
 8007ebe:	681a      	ldr	r2, [r3, #0]
 8007ec0:	697b      	ldr	r3, [r7, #20]
 8007ec2:	1ad2      	subs	r2, r2, r3
 8007ec4:	683b      	ldr	r3, [r7, #0]
 8007ec6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007ec8:	6878      	ldr	r0, [r7, #4]
 8007eca:	f7ff ff99 	bl	8007e00 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007ece:	2300      	movs	r3, #0
 8007ed0:	61fb      	str	r3, [r7, #28]
 8007ed2:	e004      	b.n	8007ede <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8007ed4:	683b      	ldr	r3, [r7, #0]
 8007ed6:	2200      	movs	r2, #0
 8007ed8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007eda:	2301      	movs	r3, #1
 8007edc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007ede:	f000 fffd 	bl	8008edc <vPortExitCritical>

	return xReturn;
 8007ee2:	69fb      	ldr	r3, [r7, #28]
}
 8007ee4:	4618      	mov	r0, r3
 8007ee6:	3720      	adds	r7, #32
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	bd80      	pop	{r7, pc}
 8007eec:	20000870 	.word	0x20000870
 8007ef0:	20000884 	.word	0x20000884

08007ef4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007ef4:	b480      	push	{r7}
 8007ef6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007ef8:	4b03      	ldr	r3, [pc, #12]	; (8007f08 <vTaskMissedYield+0x14>)
 8007efa:	2201      	movs	r2, #1
 8007efc:	601a      	str	r2, [r3, #0]
}
 8007efe:	bf00      	nop
 8007f00:	46bd      	mov	sp, r7
 8007f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f06:	4770      	bx	lr
 8007f08:	20000880 	.word	0x20000880

08007f0c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007f0c:	b580      	push	{r7, lr}
 8007f0e:	b082      	sub	sp, #8
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007f14:	f000 f854 	bl	8007fc0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007f18:	4b07      	ldr	r3, [pc, #28]	; (8007f38 <prvIdleTask+0x2c>)
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	2b01      	cmp	r3, #1
 8007f1e:	d907      	bls.n	8007f30 <prvIdleTask+0x24>
			{
				taskYIELD();
 8007f20:	4b06      	ldr	r3, [pc, #24]	; (8007f3c <prvIdleTask+0x30>)
 8007f22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f26:	601a      	str	r2, [r3, #0]
 8007f28:	f3bf 8f4f 	dsb	sy
 8007f2c:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8007f30:	f7f8 fb6e 	bl	8000610 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8007f34:	e7ee      	b.n	8007f14 <prvIdleTask+0x8>
 8007f36:	bf00      	nop
 8007f38:	20000770 	.word	0x20000770
 8007f3c:	e000ed04 	.word	0xe000ed04

08007f40 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007f40:	b580      	push	{r7, lr}
 8007f42:	b082      	sub	sp, #8
 8007f44:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007f46:	2300      	movs	r3, #0
 8007f48:	607b      	str	r3, [r7, #4]
 8007f4a:	e00c      	b.n	8007f66 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007f4c:	687a      	ldr	r2, [r7, #4]
 8007f4e:	4613      	mov	r3, r2
 8007f50:	009b      	lsls	r3, r3, #2
 8007f52:	4413      	add	r3, r2
 8007f54:	009b      	lsls	r3, r3, #2
 8007f56:	4a12      	ldr	r2, [pc, #72]	; (8007fa0 <prvInitialiseTaskLists+0x60>)
 8007f58:	4413      	add	r3, r2
 8007f5a:	4618      	mov	r0, r3
 8007f5c:	f7fe f981 	bl	8006262 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	3301      	adds	r3, #1
 8007f64:	607b      	str	r3, [r7, #4]
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	2b06      	cmp	r3, #6
 8007f6a:	d9ef      	bls.n	8007f4c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007f6c:	480d      	ldr	r0, [pc, #52]	; (8007fa4 <prvInitialiseTaskLists+0x64>)
 8007f6e:	f7fe f978 	bl	8006262 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007f72:	480d      	ldr	r0, [pc, #52]	; (8007fa8 <prvInitialiseTaskLists+0x68>)
 8007f74:	f7fe f975 	bl	8006262 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007f78:	480c      	ldr	r0, [pc, #48]	; (8007fac <prvInitialiseTaskLists+0x6c>)
 8007f7a:	f7fe f972 	bl	8006262 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007f7e:	480c      	ldr	r0, [pc, #48]	; (8007fb0 <prvInitialiseTaskLists+0x70>)
 8007f80:	f7fe f96f 	bl	8006262 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007f84:	480b      	ldr	r0, [pc, #44]	; (8007fb4 <prvInitialiseTaskLists+0x74>)
 8007f86:	f7fe f96c 	bl	8006262 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007f8a:	4b0b      	ldr	r3, [pc, #44]	; (8007fb8 <prvInitialiseTaskLists+0x78>)
 8007f8c:	4a05      	ldr	r2, [pc, #20]	; (8007fa4 <prvInitialiseTaskLists+0x64>)
 8007f8e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007f90:	4b0a      	ldr	r3, [pc, #40]	; (8007fbc <prvInitialiseTaskLists+0x7c>)
 8007f92:	4a05      	ldr	r2, [pc, #20]	; (8007fa8 <prvInitialiseTaskLists+0x68>)
 8007f94:	601a      	str	r2, [r3, #0]
}
 8007f96:	bf00      	nop
 8007f98:	3708      	adds	r7, #8
 8007f9a:	46bd      	mov	sp, r7
 8007f9c:	bd80      	pop	{r7, pc}
 8007f9e:	bf00      	nop
 8007fa0:	20000770 	.word	0x20000770
 8007fa4:	200007fc 	.word	0x200007fc
 8007fa8:	20000810 	.word	0x20000810
 8007fac:	2000082c 	.word	0x2000082c
 8007fb0:	20000840 	.word	0x20000840
 8007fb4:	20000858 	.word	0x20000858
 8007fb8:	20000824 	.word	0x20000824
 8007fbc:	20000828 	.word	0x20000828

08007fc0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007fc0:	b580      	push	{r7, lr}
 8007fc2:	b082      	sub	sp, #8
 8007fc4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007fc6:	e019      	b.n	8007ffc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007fc8:	f000 ff56 	bl	8008e78 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007fcc:	4b0f      	ldr	r3, [pc, #60]	; (800800c <prvCheckTasksWaitingTermination+0x4c>)
 8007fce:	68db      	ldr	r3, [r3, #12]
 8007fd0:	68db      	ldr	r3, [r3, #12]
 8007fd2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	3304      	adds	r3, #4
 8007fd8:	4618      	mov	r0, r3
 8007fda:	f7fe f9cc 	bl	8006376 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007fde:	4b0c      	ldr	r3, [pc, #48]	; (8008010 <prvCheckTasksWaitingTermination+0x50>)
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	3b01      	subs	r3, #1
 8007fe4:	4a0a      	ldr	r2, [pc, #40]	; (8008010 <prvCheckTasksWaitingTermination+0x50>)
 8007fe6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007fe8:	4b0a      	ldr	r3, [pc, #40]	; (8008014 <prvCheckTasksWaitingTermination+0x54>)
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	3b01      	subs	r3, #1
 8007fee:	4a09      	ldr	r2, [pc, #36]	; (8008014 <prvCheckTasksWaitingTermination+0x54>)
 8007ff0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007ff2:	f000 ff73 	bl	8008edc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007ff6:	6878      	ldr	r0, [r7, #4]
 8007ff8:	f000 f80e 	bl	8008018 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007ffc:	4b05      	ldr	r3, [pc, #20]	; (8008014 <prvCheckTasksWaitingTermination+0x54>)
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	2b00      	cmp	r3, #0
 8008002:	d1e1      	bne.n	8007fc8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008004:	bf00      	nop
 8008006:	3708      	adds	r7, #8
 8008008:	46bd      	mov	sp, r7
 800800a:	bd80      	pop	{r7, pc}
 800800c:	20000840 	.word	0x20000840
 8008010:	2000086c 	.word	0x2000086c
 8008014:	20000854 	.word	0x20000854

08008018 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008018:	b580      	push	{r7, lr}
 800801a:	b084      	sub	sp, #16
 800801c:	af00      	add	r7, sp, #0
 800801e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8008026:	2b00      	cmp	r3, #0
 8008028:	d108      	bne.n	800803c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800802e:	4618      	mov	r0, r3
 8008030:	f001 f90c 	bl	800924c <vPortFree>
				vPortFree( pxTCB );
 8008034:	6878      	ldr	r0, [r7, #4]
 8008036:	f001 f909 	bl	800924c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800803a:	e019      	b.n	8008070 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8008042:	2b01      	cmp	r3, #1
 8008044:	d103      	bne.n	800804e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8008046:	6878      	ldr	r0, [r7, #4]
 8008048:	f001 f900 	bl	800924c <vPortFree>
	}
 800804c:	e010      	b.n	8008070 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8008054:	2b02      	cmp	r3, #2
 8008056:	d00b      	beq.n	8008070 <prvDeleteTCB+0x58>
 8008058:	f04f 0350 	mov.w	r3, #80	; 0x50
 800805c:	b672      	cpsid	i
 800805e:	f383 8811 	msr	BASEPRI, r3
 8008062:	f3bf 8f6f 	isb	sy
 8008066:	f3bf 8f4f 	dsb	sy
 800806a:	b662      	cpsie	i
 800806c:	60fb      	str	r3, [r7, #12]
 800806e:	e7fe      	b.n	800806e <prvDeleteTCB+0x56>
	}
 8008070:	bf00      	nop
 8008072:	3710      	adds	r7, #16
 8008074:	46bd      	mov	sp, r7
 8008076:	bd80      	pop	{r7, pc}

08008078 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008078:	b480      	push	{r7}
 800807a:	b083      	sub	sp, #12
 800807c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800807e:	4b0c      	ldr	r3, [pc, #48]	; (80080b0 <prvResetNextTaskUnblockTime+0x38>)
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	2b00      	cmp	r3, #0
 8008086:	d104      	bne.n	8008092 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008088:	4b0a      	ldr	r3, [pc, #40]	; (80080b4 <prvResetNextTaskUnblockTime+0x3c>)
 800808a:	f04f 32ff 	mov.w	r2, #4294967295
 800808e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008090:	e008      	b.n	80080a4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008092:	4b07      	ldr	r3, [pc, #28]	; (80080b0 <prvResetNextTaskUnblockTime+0x38>)
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	68db      	ldr	r3, [r3, #12]
 8008098:	68db      	ldr	r3, [r3, #12]
 800809a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	685b      	ldr	r3, [r3, #4]
 80080a0:	4a04      	ldr	r2, [pc, #16]	; (80080b4 <prvResetNextTaskUnblockTime+0x3c>)
 80080a2:	6013      	str	r3, [r2, #0]
}
 80080a4:	bf00      	nop
 80080a6:	370c      	adds	r7, #12
 80080a8:	46bd      	mov	sp, r7
 80080aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ae:	4770      	bx	lr
 80080b0:	20000824 	.word	0x20000824
 80080b4:	2000088c 	.word	0x2000088c

080080b8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80080b8:	b480      	push	{r7}
 80080ba:	b083      	sub	sp, #12
 80080bc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80080be:	4b0b      	ldr	r3, [pc, #44]	; (80080ec <xTaskGetSchedulerState+0x34>)
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d102      	bne.n	80080cc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80080c6:	2301      	movs	r3, #1
 80080c8:	607b      	str	r3, [r7, #4]
 80080ca:	e008      	b.n	80080de <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80080cc:	4b08      	ldr	r3, [pc, #32]	; (80080f0 <xTaskGetSchedulerState+0x38>)
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d102      	bne.n	80080da <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80080d4:	2302      	movs	r3, #2
 80080d6:	607b      	str	r3, [r7, #4]
 80080d8:	e001      	b.n	80080de <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80080da:	2300      	movs	r3, #0
 80080dc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80080de:	687b      	ldr	r3, [r7, #4]
	}
 80080e0:	4618      	mov	r0, r3
 80080e2:	370c      	adds	r7, #12
 80080e4:	46bd      	mov	sp, r7
 80080e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ea:	4770      	bx	lr
 80080ec:	20000878 	.word	0x20000878
 80080f0:	20000894 	.word	0x20000894

080080f4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80080f4:	b580      	push	{r7, lr}
 80080f6:	b084      	sub	sp, #16
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8008100:	2300      	movs	r3, #0
 8008102:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	2b00      	cmp	r3, #0
 8008108:	d069      	beq.n	80081de <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800810a:	68bb      	ldr	r3, [r7, #8]
 800810c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800810e:	4b36      	ldr	r3, [pc, #216]	; (80081e8 <xTaskPriorityInherit+0xf4>)
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008114:	429a      	cmp	r2, r3
 8008116:	d259      	bcs.n	80081cc <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008118:	68bb      	ldr	r3, [r7, #8]
 800811a:	699b      	ldr	r3, [r3, #24]
 800811c:	2b00      	cmp	r3, #0
 800811e:	db06      	blt.n	800812e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008120:	4b31      	ldr	r3, [pc, #196]	; (80081e8 <xTaskPriorityInherit+0xf4>)
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008126:	f1c3 0207 	rsb	r2, r3, #7
 800812a:	68bb      	ldr	r3, [r7, #8]
 800812c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800812e:	68bb      	ldr	r3, [r7, #8]
 8008130:	6959      	ldr	r1, [r3, #20]
 8008132:	68bb      	ldr	r3, [r7, #8]
 8008134:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008136:	4613      	mov	r3, r2
 8008138:	009b      	lsls	r3, r3, #2
 800813a:	4413      	add	r3, r2
 800813c:	009b      	lsls	r3, r3, #2
 800813e:	4a2b      	ldr	r2, [pc, #172]	; (80081ec <xTaskPriorityInherit+0xf8>)
 8008140:	4413      	add	r3, r2
 8008142:	4299      	cmp	r1, r3
 8008144:	d13a      	bne.n	80081bc <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008146:	68bb      	ldr	r3, [r7, #8]
 8008148:	3304      	adds	r3, #4
 800814a:	4618      	mov	r0, r3
 800814c:	f7fe f913 	bl	8006376 <uxListRemove>
 8008150:	4603      	mov	r3, r0
 8008152:	2b00      	cmp	r3, #0
 8008154:	d115      	bne.n	8008182 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8008156:	68bb      	ldr	r3, [r7, #8]
 8008158:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800815a:	4924      	ldr	r1, [pc, #144]	; (80081ec <xTaskPriorityInherit+0xf8>)
 800815c:	4613      	mov	r3, r2
 800815e:	009b      	lsls	r3, r3, #2
 8008160:	4413      	add	r3, r2
 8008162:	009b      	lsls	r3, r3, #2
 8008164:	440b      	add	r3, r1
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	2b00      	cmp	r3, #0
 800816a:	d10a      	bne.n	8008182 <xTaskPriorityInherit+0x8e>
 800816c:	68bb      	ldr	r3, [r7, #8]
 800816e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008170:	2201      	movs	r2, #1
 8008172:	fa02 f303 	lsl.w	r3, r2, r3
 8008176:	43da      	mvns	r2, r3
 8008178:	4b1d      	ldr	r3, [pc, #116]	; (80081f0 <xTaskPriorityInherit+0xfc>)
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	4013      	ands	r3, r2
 800817e:	4a1c      	ldr	r2, [pc, #112]	; (80081f0 <xTaskPriorityInherit+0xfc>)
 8008180:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008182:	4b19      	ldr	r3, [pc, #100]	; (80081e8 <xTaskPriorityInherit+0xf4>)
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008188:	68bb      	ldr	r3, [r7, #8]
 800818a:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800818c:	68bb      	ldr	r3, [r7, #8]
 800818e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008190:	2201      	movs	r2, #1
 8008192:	409a      	lsls	r2, r3
 8008194:	4b16      	ldr	r3, [pc, #88]	; (80081f0 <xTaskPriorityInherit+0xfc>)
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	4313      	orrs	r3, r2
 800819a:	4a15      	ldr	r2, [pc, #84]	; (80081f0 <xTaskPriorityInherit+0xfc>)
 800819c:	6013      	str	r3, [r2, #0]
 800819e:	68bb      	ldr	r3, [r7, #8]
 80081a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081a2:	4613      	mov	r3, r2
 80081a4:	009b      	lsls	r3, r3, #2
 80081a6:	4413      	add	r3, r2
 80081a8:	009b      	lsls	r3, r3, #2
 80081aa:	4a10      	ldr	r2, [pc, #64]	; (80081ec <xTaskPriorityInherit+0xf8>)
 80081ac:	441a      	add	r2, r3
 80081ae:	68bb      	ldr	r3, [r7, #8]
 80081b0:	3304      	adds	r3, #4
 80081b2:	4619      	mov	r1, r3
 80081b4:	4610      	mov	r0, r2
 80081b6:	f7fe f881 	bl	80062bc <vListInsertEnd>
 80081ba:	e004      	b.n	80081c6 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80081bc:	4b0a      	ldr	r3, [pc, #40]	; (80081e8 <xTaskPriorityInherit+0xf4>)
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081c2:	68bb      	ldr	r3, [r7, #8]
 80081c4:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80081c6:	2301      	movs	r3, #1
 80081c8:	60fb      	str	r3, [r7, #12]
 80081ca:	e008      	b.n	80081de <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80081cc:	68bb      	ldr	r3, [r7, #8]
 80081ce:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80081d0:	4b05      	ldr	r3, [pc, #20]	; (80081e8 <xTaskPriorityInherit+0xf4>)
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081d6:	429a      	cmp	r2, r3
 80081d8:	d201      	bcs.n	80081de <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80081da:	2301      	movs	r3, #1
 80081dc:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80081de:	68fb      	ldr	r3, [r7, #12]
	}
 80081e0:	4618      	mov	r0, r3
 80081e2:	3710      	adds	r7, #16
 80081e4:	46bd      	mov	sp, r7
 80081e6:	bd80      	pop	{r7, pc}
 80081e8:	2000076c 	.word	0x2000076c
 80081ec:	20000770 	.word	0x20000770
 80081f0:	20000874 	.word	0x20000874

080081f4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80081f4:	b580      	push	{r7, lr}
 80081f6:	b086      	sub	sp, #24
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008200:	2300      	movs	r3, #0
 8008202:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	2b00      	cmp	r3, #0
 8008208:	d070      	beq.n	80082ec <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800820a:	4b3b      	ldr	r3, [pc, #236]	; (80082f8 <xTaskPriorityDisinherit+0x104>)
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	693a      	ldr	r2, [r7, #16]
 8008210:	429a      	cmp	r2, r3
 8008212:	d00b      	beq.n	800822c <xTaskPriorityDisinherit+0x38>
 8008214:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008218:	b672      	cpsid	i
 800821a:	f383 8811 	msr	BASEPRI, r3
 800821e:	f3bf 8f6f 	isb	sy
 8008222:	f3bf 8f4f 	dsb	sy
 8008226:	b662      	cpsie	i
 8008228:	60fb      	str	r3, [r7, #12]
 800822a:	e7fe      	b.n	800822a <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 800822c:	693b      	ldr	r3, [r7, #16]
 800822e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008230:	2b00      	cmp	r3, #0
 8008232:	d10b      	bne.n	800824c <xTaskPriorityDisinherit+0x58>
 8008234:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008238:	b672      	cpsid	i
 800823a:	f383 8811 	msr	BASEPRI, r3
 800823e:	f3bf 8f6f 	isb	sy
 8008242:	f3bf 8f4f 	dsb	sy
 8008246:	b662      	cpsie	i
 8008248:	60bb      	str	r3, [r7, #8]
 800824a:	e7fe      	b.n	800824a <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 800824c:	693b      	ldr	r3, [r7, #16]
 800824e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008250:	1e5a      	subs	r2, r3, #1
 8008252:	693b      	ldr	r3, [r7, #16]
 8008254:	659a      	str	r2, [r3, #88]	; 0x58

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008256:	693b      	ldr	r3, [r7, #16]
 8008258:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800825a:	693b      	ldr	r3, [r7, #16]
 800825c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800825e:	429a      	cmp	r2, r3
 8008260:	d044      	beq.n	80082ec <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008262:	693b      	ldr	r3, [r7, #16]
 8008264:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008266:	2b00      	cmp	r3, #0
 8008268:	d140      	bne.n	80082ec <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800826a:	693b      	ldr	r3, [r7, #16]
 800826c:	3304      	adds	r3, #4
 800826e:	4618      	mov	r0, r3
 8008270:	f7fe f881 	bl	8006376 <uxListRemove>
 8008274:	4603      	mov	r3, r0
 8008276:	2b00      	cmp	r3, #0
 8008278:	d115      	bne.n	80082a6 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800827a:	693b      	ldr	r3, [r7, #16]
 800827c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800827e:	491f      	ldr	r1, [pc, #124]	; (80082fc <xTaskPriorityDisinherit+0x108>)
 8008280:	4613      	mov	r3, r2
 8008282:	009b      	lsls	r3, r3, #2
 8008284:	4413      	add	r3, r2
 8008286:	009b      	lsls	r3, r3, #2
 8008288:	440b      	add	r3, r1
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	2b00      	cmp	r3, #0
 800828e:	d10a      	bne.n	80082a6 <xTaskPriorityDisinherit+0xb2>
 8008290:	693b      	ldr	r3, [r7, #16]
 8008292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008294:	2201      	movs	r2, #1
 8008296:	fa02 f303 	lsl.w	r3, r2, r3
 800829a:	43da      	mvns	r2, r3
 800829c:	4b18      	ldr	r3, [pc, #96]	; (8008300 <xTaskPriorityDisinherit+0x10c>)
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	4013      	ands	r3, r2
 80082a2:	4a17      	ldr	r2, [pc, #92]	; (8008300 <xTaskPriorityDisinherit+0x10c>)
 80082a4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80082a6:	693b      	ldr	r3, [r7, #16]
 80082a8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80082aa:	693b      	ldr	r3, [r7, #16]
 80082ac:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80082ae:	693b      	ldr	r3, [r7, #16]
 80082b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082b2:	f1c3 0207 	rsb	r2, r3, #7
 80082b6:	693b      	ldr	r3, [r7, #16]
 80082b8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80082ba:	693b      	ldr	r3, [r7, #16]
 80082bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082be:	2201      	movs	r2, #1
 80082c0:	409a      	lsls	r2, r3
 80082c2:	4b0f      	ldr	r3, [pc, #60]	; (8008300 <xTaskPriorityDisinherit+0x10c>)
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	4313      	orrs	r3, r2
 80082c8:	4a0d      	ldr	r2, [pc, #52]	; (8008300 <xTaskPriorityDisinherit+0x10c>)
 80082ca:	6013      	str	r3, [r2, #0]
 80082cc:	693b      	ldr	r3, [r7, #16]
 80082ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082d0:	4613      	mov	r3, r2
 80082d2:	009b      	lsls	r3, r3, #2
 80082d4:	4413      	add	r3, r2
 80082d6:	009b      	lsls	r3, r3, #2
 80082d8:	4a08      	ldr	r2, [pc, #32]	; (80082fc <xTaskPriorityDisinherit+0x108>)
 80082da:	441a      	add	r2, r3
 80082dc:	693b      	ldr	r3, [r7, #16]
 80082de:	3304      	adds	r3, #4
 80082e0:	4619      	mov	r1, r3
 80082e2:	4610      	mov	r0, r2
 80082e4:	f7fd ffea 	bl	80062bc <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80082e8:	2301      	movs	r3, #1
 80082ea:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80082ec:	697b      	ldr	r3, [r7, #20]
	}
 80082ee:	4618      	mov	r0, r3
 80082f0:	3718      	adds	r7, #24
 80082f2:	46bd      	mov	sp, r7
 80082f4:	bd80      	pop	{r7, pc}
 80082f6:	bf00      	nop
 80082f8:	2000076c 	.word	0x2000076c
 80082fc:	20000770 	.word	0x20000770
 8008300:	20000874 	.word	0x20000874

08008304 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8008304:	b580      	push	{r7, lr}
 8008306:	b088      	sub	sp, #32
 8008308:	af00      	add	r7, sp, #0
 800830a:	6078      	str	r0, [r7, #4]
 800830c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8008312:	2301      	movs	r3, #1
 8008314:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	2b00      	cmp	r3, #0
 800831a:	f000 8085 	beq.w	8008428 <vTaskPriorityDisinheritAfterTimeout+0x124>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800831e:	69bb      	ldr	r3, [r7, #24]
 8008320:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008322:	2b00      	cmp	r3, #0
 8008324:	d10b      	bne.n	800833e <vTaskPriorityDisinheritAfterTimeout+0x3a>
 8008326:	f04f 0350 	mov.w	r3, #80	; 0x50
 800832a:	b672      	cpsid	i
 800832c:	f383 8811 	msr	BASEPRI, r3
 8008330:	f3bf 8f6f 	isb	sy
 8008334:	f3bf 8f4f 	dsb	sy
 8008338:	b662      	cpsie	i
 800833a:	60fb      	str	r3, [r7, #12]
 800833c:	e7fe      	b.n	800833c <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800833e:	69bb      	ldr	r3, [r7, #24]
 8008340:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008342:	683a      	ldr	r2, [r7, #0]
 8008344:	429a      	cmp	r2, r3
 8008346:	d902      	bls.n	800834e <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8008348:	683b      	ldr	r3, [r7, #0]
 800834a:	61fb      	str	r3, [r7, #28]
 800834c:	e002      	b.n	8008354 <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800834e:	69bb      	ldr	r3, [r7, #24]
 8008350:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008352:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008354:	69bb      	ldr	r3, [r7, #24]
 8008356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008358:	69fa      	ldr	r2, [r7, #28]
 800835a:	429a      	cmp	r2, r3
 800835c:	d064      	beq.n	8008428 <vTaskPriorityDisinheritAfterTimeout+0x124>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800835e:	69bb      	ldr	r3, [r7, #24]
 8008360:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008362:	697a      	ldr	r2, [r7, #20]
 8008364:	429a      	cmp	r2, r3
 8008366:	d15f      	bne.n	8008428 <vTaskPriorityDisinheritAfterTimeout+0x124>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8008368:	4b31      	ldr	r3, [pc, #196]	; (8008430 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	69ba      	ldr	r2, [r7, #24]
 800836e:	429a      	cmp	r2, r3
 8008370:	d10b      	bne.n	800838a <vTaskPriorityDisinheritAfterTimeout+0x86>
 8008372:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008376:	b672      	cpsid	i
 8008378:	f383 8811 	msr	BASEPRI, r3
 800837c:	f3bf 8f6f 	isb	sy
 8008380:	f3bf 8f4f 	dsb	sy
 8008384:	b662      	cpsie	i
 8008386:	60bb      	str	r3, [r7, #8]
 8008388:	e7fe      	b.n	8008388 <vTaskPriorityDisinheritAfterTimeout+0x84>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800838a:	69bb      	ldr	r3, [r7, #24]
 800838c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800838e:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8008390:	69bb      	ldr	r3, [r7, #24]
 8008392:	69fa      	ldr	r2, [r7, #28]
 8008394:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008396:	69bb      	ldr	r3, [r7, #24]
 8008398:	699b      	ldr	r3, [r3, #24]
 800839a:	2b00      	cmp	r3, #0
 800839c:	db04      	blt.n	80083a8 <vTaskPriorityDisinheritAfterTimeout+0xa4>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800839e:	69fb      	ldr	r3, [r7, #28]
 80083a0:	f1c3 0207 	rsb	r2, r3, #7
 80083a4:	69bb      	ldr	r3, [r7, #24]
 80083a6:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80083a8:	69bb      	ldr	r3, [r7, #24]
 80083aa:	6959      	ldr	r1, [r3, #20]
 80083ac:	693a      	ldr	r2, [r7, #16]
 80083ae:	4613      	mov	r3, r2
 80083b0:	009b      	lsls	r3, r3, #2
 80083b2:	4413      	add	r3, r2
 80083b4:	009b      	lsls	r3, r3, #2
 80083b6:	4a1f      	ldr	r2, [pc, #124]	; (8008434 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 80083b8:	4413      	add	r3, r2
 80083ba:	4299      	cmp	r1, r3
 80083bc:	d134      	bne.n	8008428 <vTaskPriorityDisinheritAfterTimeout+0x124>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80083be:	69bb      	ldr	r3, [r7, #24]
 80083c0:	3304      	adds	r3, #4
 80083c2:	4618      	mov	r0, r3
 80083c4:	f7fd ffd7 	bl	8006376 <uxListRemove>
 80083c8:	4603      	mov	r3, r0
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d115      	bne.n	80083fa <vTaskPriorityDisinheritAfterTimeout+0xf6>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80083ce:	69bb      	ldr	r3, [r7, #24]
 80083d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083d2:	4918      	ldr	r1, [pc, #96]	; (8008434 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 80083d4:	4613      	mov	r3, r2
 80083d6:	009b      	lsls	r3, r3, #2
 80083d8:	4413      	add	r3, r2
 80083da:	009b      	lsls	r3, r3, #2
 80083dc:	440b      	add	r3, r1
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d10a      	bne.n	80083fa <vTaskPriorityDisinheritAfterTimeout+0xf6>
 80083e4:	69bb      	ldr	r3, [r7, #24]
 80083e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083e8:	2201      	movs	r2, #1
 80083ea:	fa02 f303 	lsl.w	r3, r2, r3
 80083ee:	43da      	mvns	r2, r3
 80083f0:	4b11      	ldr	r3, [pc, #68]	; (8008438 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	4013      	ands	r3, r2
 80083f6:	4a10      	ldr	r2, [pc, #64]	; (8008438 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 80083f8:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80083fa:	69bb      	ldr	r3, [r7, #24]
 80083fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083fe:	2201      	movs	r2, #1
 8008400:	409a      	lsls	r2, r3
 8008402:	4b0d      	ldr	r3, [pc, #52]	; (8008438 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	4313      	orrs	r3, r2
 8008408:	4a0b      	ldr	r2, [pc, #44]	; (8008438 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800840a:	6013      	str	r3, [r2, #0]
 800840c:	69bb      	ldr	r3, [r7, #24]
 800840e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008410:	4613      	mov	r3, r2
 8008412:	009b      	lsls	r3, r3, #2
 8008414:	4413      	add	r3, r2
 8008416:	009b      	lsls	r3, r3, #2
 8008418:	4a06      	ldr	r2, [pc, #24]	; (8008434 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800841a:	441a      	add	r2, r3
 800841c:	69bb      	ldr	r3, [r7, #24]
 800841e:	3304      	adds	r3, #4
 8008420:	4619      	mov	r1, r3
 8008422:	4610      	mov	r0, r2
 8008424:	f7fd ff4a 	bl	80062bc <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008428:	bf00      	nop
 800842a:	3720      	adds	r7, #32
 800842c:	46bd      	mov	sp, r7
 800842e:	bd80      	pop	{r7, pc}
 8008430:	2000076c 	.word	0x2000076c
 8008434:	20000770 	.word	0x20000770
 8008438:	20000874 	.word	0x20000874

0800843c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800843c:	b480      	push	{r7}
 800843e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008440:	4b07      	ldr	r3, [pc, #28]	; (8008460 <pvTaskIncrementMutexHeldCount+0x24>)
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	2b00      	cmp	r3, #0
 8008446:	d004      	beq.n	8008452 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008448:	4b05      	ldr	r3, [pc, #20]	; (8008460 <pvTaskIncrementMutexHeldCount+0x24>)
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800844e:	3201      	adds	r2, #1
 8008450:	659a      	str	r2, [r3, #88]	; 0x58
		}

		return pxCurrentTCB;
 8008452:	4b03      	ldr	r3, [pc, #12]	; (8008460 <pvTaskIncrementMutexHeldCount+0x24>)
 8008454:	681b      	ldr	r3, [r3, #0]
	}
 8008456:	4618      	mov	r0, r3
 8008458:	46bd      	mov	sp, r7
 800845a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800845e:	4770      	bx	lr
 8008460:	2000076c 	.word	0x2000076c

08008464 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008464:	b580      	push	{r7, lr}
 8008466:	b084      	sub	sp, #16
 8008468:	af00      	add	r7, sp, #0
 800846a:	6078      	str	r0, [r7, #4]
 800846c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800846e:	4b29      	ldr	r3, [pc, #164]	; (8008514 <prvAddCurrentTaskToDelayedList+0xb0>)
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008474:	4b28      	ldr	r3, [pc, #160]	; (8008518 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	3304      	adds	r3, #4
 800847a:	4618      	mov	r0, r3
 800847c:	f7fd ff7b 	bl	8006376 <uxListRemove>
 8008480:	4603      	mov	r3, r0
 8008482:	2b00      	cmp	r3, #0
 8008484:	d10b      	bne.n	800849e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8008486:	4b24      	ldr	r3, [pc, #144]	; (8008518 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800848c:	2201      	movs	r2, #1
 800848e:	fa02 f303 	lsl.w	r3, r2, r3
 8008492:	43da      	mvns	r2, r3
 8008494:	4b21      	ldr	r3, [pc, #132]	; (800851c <prvAddCurrentTaskToDelayedList+0xb8>)
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	4013      	ands	r3, r2
 800849a:	4a20      	ldr	r2, [pc, #128]	; (800851c <prvAddCurrentTaskToDelayedList+0xb8>)
 800849c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084a4:	d10a      	bne.n	80084bc <prvAddCurrentTaskToDelayedList+0x58>
 80084a6:	683b      	ldr	r3, [r7, #0]
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d007      	beq.n	80084bc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80084ac:	4b1a      	ldr	r3, [pc, #104]	; (8008518 <prvAddCurrentTaskToDelayedList+0xb4>)
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	3304      	adds	r3, #4
 80084b2:	4619      	mov	r1, r3
 80084b4:	481a      	ldr	r0, [pc, #104]	; (8008520 <prvAddCurrentTaskToDelayedList+0xbc>)
 80084b6:	f7fd ff01 	bl	80062bc <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80084ba:	e026      	b.n	800850a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80084bc:	68fa      	ldr	r2, [r7, #12]
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	4413      	add	r3, r2
 80084c2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80084c4:	4b14      	ldr	r3, [pc, #80]	; (8008518 <prvAddCurrentTaskToDelayedList+0xb4>)
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	68ba      	ldr	r2, [r7, #8]
 80084ca:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80084cc:	68ba      	ldr	r2, [r7, #8]
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	429a      	cmp	r2, r3
 80084d2:	d209      	bcs.n	80084e8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80084d4:	4b13      	ldr	r3, [pc, #76]	; (8008524 <prvAddCurrentTaskToDelayedList+0xc0>)
 80084d6:	681a      	ldr	r2, [r3, #0]
 80084d8:	4b0f      	ldr	r3, [pc, #60]	; (8008518 <prvAddCurrentTaskToDelayedList+0xb4>)
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	3304      	adds	r3, #4
 80084de:	4619      	mov	r1, r3
 80084e0:	4610      	mov	r0, r2
 80084e2:	f7fd ff0f 	bl	8006304 <vListInsert>
}
 80084e6:	e010      	b.n	800850a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80084e8:	4b0f      	ldr	r3, [pc, #60]	; (8008528 <prvAddCurrentTaskToDelayedList+0xc4>)
 80084ea:	681a      	ldr	r2, [r3, #0]
 80084ec:	4b0a      	ldr	r3, [pc, #40]	; (8008518 <prvAddCurrentTaskToDelayedList+0xb4>)
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	3304      	adds	r3, #4
 80084f2:	4619      	mov	r1, r3
 80084f4:	4610      	mov	r0, r2
 80084f6:	f7fd ff05 	bl	8006304 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80084fa:	4b0c      	ldr	r3, [pc, #48]	; (800852c <prvAddCurrentTaskToDelayedList+0xc8>)
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	68ba      	ldr	r2, [r7, #8]
 8008500:	429a      	cmp	r2, r3
 8008502:	d202      	bcs.n	800850a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8008504:	4a09      	ldr	r2, [pc, #36]	; (800852c <prvAddCurrentTaskToDelayedList+0xc8>)
 8008506:	68bb      	ldr	r3, [r7, #8]
 8008508:	6013      	str	r3, [r2, #0]
}
 800850a:	bf00      	nop
 800850c:	3710      	adds	r7, #16
 800850e:	46bd      	mov	sp, r7
 8008510:	bd80      	pop	{r7, pc}
 8008512:	bf00      	nop
 8008514:	20000870 	.word	0x20000870
 8008518:	2000076c 	.word	0x2000076c
 800851c:	20000874 	.word	0x20000874
 8008520:	20000858 	.word	0x20000858
 8008524:	20000828 	.word	0x20000828
 8008528:	20000824 	.word	0x20000824
 800852c:	2000088c 	.word	0x2000088c

08008530 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008530:	b580      	push	{r7, lr}
 8008532:	b08a      	sub	sp, #40	; 0x28
 8008534:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008536:	2300      	movs	r3, #0
 8008538:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800853a:	f000 fb51 	bl	8008be0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800853e:	4b1d      	ldr	r3, [pc, #116]	; (80085b4 <xTimerCreateTimerTask+0x84>)
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	2b00      	cmp	r3, #0
 8008544:	d021      	beq.n	800858a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008546:	2300      	movs	r3, #0
 8008548:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800854a:	2300      	movs	r3, #0
 800854c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800854e:	1d3a      	adds	r2, r7, #4
 8008550:	f107 0108 	add.w	r1, r7, #8
 8008554:	f107 030c 	add.w	r3, r7, #12
 8008558:	4618      	mov	r0, r3
 800855a:	f7f8 f87b 	bl	8000654 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800855e:	6879      	ldr	r1, [r7, #4]
 8008560:	68bb      	ldr	r3, [r7, #8]
 8008562:	68fa      	ldr	r2, [r7, #12]
 8008564:	9202      	str	r2, [sp, #8]
 8008566:	9301      	str	r3, [sp, #4]
 8008568:	2302      	movs	r3, #2
 800856a:	9300      	str	r3, [sp, #0]
 800856c:	2300      	movs	r3, #0
 800856e:	460a      	mov	r2, r1
 8008570:	4911      	ldr	r1, [pc, #68]	; (80085b8 <xTimerCreateTimerTask+0x88>)
 8008572:	4812      	ldr	r0, [pc, #72]	; (80085bc <xTimerCreateTimerTask+0x8c>)
 8008574:	f7fe ff74 	bl	8007460 <xTaskCreateStatic>
 8008578:	4602      	mov	r2, r0
 800857a:	4b11      	ldr	r3, [pc, #68]	; (80085c0 <xTimerCreateTimerTask+0x90>)
 800857c:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800857e:	4b10      	ldr	r3, [pc, #64]	; (80085c0 <xTimerCreateTimerTask+0x90>)
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	2b00      	cmp	r3, #0
 8008584:	d001      	beq.n	800858a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008586:	2301      	movs	r3, #1
 8008588:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800858a:	697b      	ldr	r3, [r7, #20]
 800858c:	2b00      	cmp	r3, #0
 800858e:	d10b      	bne.n	80085a8 <xTimerCreateTimerTask+0x78>
 8008590:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008594:	b672      	cpsid	i
 8008596:	f383 8811 	msr	BASEPRI, r3
 800859a:	f3bf 8f6f 	isb	sy
 800859e:	f3bf 8f4f 	dsb	sy
 80085a2:	b662      	cpsie	i
 80085a4:	613b      	str	r3, [r7, #16]
 80085a6:	e7fe      	b.n	80085a6 <xTimerCreateTimerTask+0x76>
	return xReturn;
 80085a8:	697b      	ldr	r3, [r7, #20]
}
 80085aa:	4618      	mov	r0, r3
 80085ac:	3718      	adds	r7, #24
 80085ae:	46bd      	mov	sp, r7
 80085b0:	bd80      	pop	{r7, pc}
 80085b2:	bf00      	nop
 80085b4:	200008c8 	.word	0x200008c8
 80085b8:	080185bc 	.word	0x080185bc
 80085bc:	080087b9 	.word	0x080087b9
 80085c0:	200008cc 	.word	0x200008cc

080085c4 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 80085c4:	b580      	push	{r7, lr}
 80085c6:	b088      	sub	sp, #32
 80085c8:	af02      	add	r7, sp, #8
 80085ca:	60f8      	str	r0, [r7, #12]
 80085cc:	60b9      	str	r1, [r7, #8]
 80085ce:	607a      	str	r2, [r7, #4]
 80085d0:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 80085d2:	2028      	movs	r0, #40	; 0x28
 80085d4:	f000 fd72 	bl	80090bc <pvPortMalloc>
 80085d8:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 80085da:	697b      	ldr	r3, [r7, #20]
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d00d      	beq.n	80085fc <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The autoreload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 80085e0:	697b      	ldr	r3, [r7, #20]
 80085e2:	2200      	movs	r2, #0
 80085e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80085e8:	697b      	ldr	r3, [r7, #20]
 80085ea:	9301      	str	r3, [sp, #4]
 80085ec:	6a3b      	ldr	r3, [r7, #32]
 80085ee:	9300      	str	r3, [sp, #0]
 80085f0:	683b      	ldr	r3, [r7, #0]
 80085f2:	687a      	ldr	r2, [r7, #4]
 80085f4:	68b9      	ldr	r1, [r7, #8]
 80085f6:	68f8      	ldr	r0, [r7, #12]
 80085f8:	f000 f805 	bl	8008606 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 80085fc:	697b      	ldr	r3, [r7, #20]
	}
 80085fe:	4618      	mov	r0, r3
 8008600:	3718      	adds	r7, #24
 8008602:	46bd      	mov	sp, r7
 8008604:	bd80      	pop	{r7, pc}

08008606 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8008606:	b580      	push	{r7, lr}
 8008608:	b086      	sub	sp, #24
 800860a:	af00      	add	r7, sp, #0
 800860c:	60f8      	str	r0, [r7, #12]
 800860e:	60b9      	str	r1, [r7, #8]
 8008610:	607a      	str	r2, [r7, #4]
 8008612:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8008614:	68bb      	ldr	r3, [r7, #8]
 8008616:	2b00      	cmp	r3, #0
 8008618:	d10b      	bne.n	8008632 <prvInitialiseNewTimer+0x2c>
 800861a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800861e:	b672      	cpsid	i
 8008620:	f383 8811 	msr	BASEPRI, r3
 8008624:	f3bf 8f6f 	isb	sy
 8008628:	f3bf 8f4f 	dsb	sy
 800862c:	b662      	cpsie	i
 800862e:	617b      	str	r3, [r7, #20]
 8008630:	e7fe      	b.n	8008630 <prvInitialiseNewTimer+0x2a>

	if( pxNewTimer != NULL )
 8008632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008634:	2b00      	cmp	r3, #0
 8008636:	d01e      	beq.n	8008676 <prvInitialiseNewTimer+0x70>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8008638:	f000 fad2 	bl	8008be0 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800863c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800863e:	68fa      	ldr	r2, [r7, #12]
 8008640:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8008642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008644:	68ba      	ldr	r2, [r7, #8]
 8008646:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8008648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800864a:	683a      	ldr	r2, [r7, #0]
 800864c:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800864e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008650:	6a3a      	ldr	r2, [r7, #32]
 8008652:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8008654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008656:	3304      	adds	r3, #4
 8008658:	4618      	mov	r0, r3
 800865a:	f7fd fe22 	bl	80062a2 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	2b00      	cmp	r3, #0
 8008662:	d008      	beq.n	8008676 <prvInitialiseNewTimer+0x70>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8008664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008666:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800866a:	f043 0304 	orr.w	r3, r3, #4
 800866e:	b2da      	uxtb	r2, r3
 8008670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008672:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8008676:	bf00      	nop
 8008678:	3718      	adds	r7, #24
 800867a:	46bd      	mov	sp, r7
 800867c:	bd80      	pop	{r7, pc}
	...

08008680 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008680:	b580      	push	{r7, lr}
 8008682:	b08a      	sub	sp, #40	; 0x28
 8008684:	af00      	add	r7, sp, #0
 8008686:	60f8      	str	r0, [r7, #12]
 8008688:	60b9      	str	r1, [r7, #8]
 800868a:	607a      	str	r2, [r7, #4]
 800868c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800868e:	2300      	movs	r3, #0
 8008690:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	2b00      	cmp	r3, #0
 8008696:	d10b      	bne.n	80086b0 <xTimerGenericCommand+0x30>
 8008698:	f04f 0350 	mov.w	r3, #80	; 0x50
 800869c:	b672      	cpsid	i
 800869e:	f383 8811 	msr	BASEPRI, r3
 80086a2:	f3bf 8f6f 	isb	sy
 80086a6:	f3bf 8f4f 	dsb	sy
 80086aa:	b662      	cpsie	i
 80086ac:	623b      	str	r3, [r7, #32]
 80086ae:	e7fe      	b.n	80086ae <xTimerGenericCommand+0x2e>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80086b0:	4b19      	ldr	r3, [pc, #100]	; (8008718 <xTimerGenericCommand+0x98>)
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d02a      	beq.n	800870e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80086b8:	68bb      	ldr	r3, [r7, #8]
 80086ba:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80086c4:	68bb      	ldr	r3, [r7, #8]
 80086c6:	2b05      	cmp	r3, #5
 80086c8:	dc18      	bgt.n	80086fc <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80086ca:	f7ff fcf5 	bl	80080b8 <xTaskGetSchedulerState>
 80086ce:	4603      	mov	r3, r0
 80086d0:	2b02      	cmp	r3, #2
 80086d2:	d109      	bne.n	80086e8 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80086d4:	4b10      	ldr	r3, [pc, #64]	; (8008718 <xTimerGenericCommand+0x98>)
 80086d6:	6818      	ldr	r0, [r3, #0]
 80086d8:	f107 0114 	add.w	r1, r7, #20
 80086dc:	2300      	movs	r3, #0
 80086de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80086e0:	f7fe f808 	bl	80066f4 <xQueueGenericSend>
 80086e4:	6278      	str	r0, [r7, #36]	; 0x24
 80086e6:	e012      	b.n	800870e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80086e8:	4b0b      	ldr	r3, [pc, #44]	; (8008718 <xTimerGenericCommand+0x98>)
 80086ea:	6818      	ldr	r0, [r3, #0]
 80086ec:	f107 0114 	add.w	r1, r7, #20
 80086f0:	2300      	movs	r3, #0
 80086f2:	2200      	movs	r2, #0
 80086f4:	f7fd fffe 	bl	80066f4 <xQueueGenericSend>
 80086f8:	6278      	str	r0, [r7, #36]	; 0x24
 80086fa:	e008      	b.n	800870e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80086fc:	4b06      	ldr	r3, [pc, #24]	; (8008718 <xTimerGenericCommand+0x98>)
 80086fe:	6818      	ldr	r0, [r3, #0]
 8008700:	f107 0114 	add.w	r1, r7, #20
 8008704:	2300      	movs	r3, #0
 8008706:	683a      	ldr	r2, [r7, #0]
 8008708:	f7fe f8f6 	bl	80068f8 <xQueueGenericSendFromISR>
 800870c:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800870e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008710:	4618      	mov	r0, r3
 8008712:	3728      	adds	r7, #40	; 0x28
 8008714:	46bd      	mov	sp, r7
 8008716:	bd80      	pop	{r7, pc}
 8008718:	200008c8 	.word	0x200008c8

0800871c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800871c:	b580      	push	{r7, lr}
 800871e:	b088      	sub	sp, #32
 8008720:	af02      	add	r7, sp, #8
 8008722:	6078      	str	r0, [r7, #4]
 8008724:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008726:	4b23      	ldr	r3, [pc, #140]	; (80087b4 <prvProcessExpiredTimer+0x98>)
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	68db      	ldr	r3, [r3, #12]
 800872c:	68db      	ldr	r3, [r3, #12]
 800872e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008730:	697b      	ldr	r3, [r7, #20]
 8008732:	3304      	adds	r3, #4
 8008734:	4618      	mov	r0, r3
 8008736:	f7fd fe1e 	bl	8006376 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800873a:	697b      	ldr	r3, [r7, #20]
 800873c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008740:	f003 0304 	and.w	r3, r3, #4
 8008744:	2b00      	cmp	r3, #0
 8008746:	d023      	beq.n	8008790 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008748:	697b      	ldr	r3, [r7, #20]
 800874a:	699a      	ldr	r2, [r3, #24]
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	18d1      	adds	r1, r2, r3
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	683a      	ldr	r2, [r7, #0]
 8008754:	6978      	ldr	r0, [r7, #20]
 8008756:	f000 f8d3 	bl	8008900 <prvInsertTimerInActiveList>
 800875a:	4603      	mov	r3, r0
 800875c:	2b00      	cmp	r3, #0
 800875e:	d020      	beq.n	80087a2 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008760:	2300      	movs	r3, #0
 8008762:	9300      	str	r3, [sp, #0]
 8008764:	2300      	movs	r3, #0
 8008766:	687a      	ldr	r2, [r7, #4]
 8008768:	2100      	movs	r1, #0
 800876a:	6978      	ldr	r0, [r7, #20]
 800876c:	f7ff ff88 	bl	8008680 <xTimerGenericCommand>
 8008770:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008772:	693b      	ldr	r3, [r7, #16]
 8008774:	2b00      	cmp	r3, #0
 8008776:	d114      	bne.n	80087a2 <prvProcessExpiredTimer+0x86>
 8008778:	f04f 0350 	mov.w	r3, #80	; 0x50
 800877c:	b672      	cpsid	i
 800877e:	f383 8811 	msr	BASEPRI, r3
 8008782:	f3bf 8f6f 	isb	sy
 8008786:	f3bf 8f4f 	dsb	sy
 800878a:	b662      	cpsie	i
 800878c:	60fb      	str	r3, [r7, #12]
 800878e:	e7fe      	b.n	800878e <prvProcessExpiredTimer+0x72>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008790:	697b      	ldr	r3, [r7, #20]
 8008792:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008796:	f023 0301 	bic.w	r3, r3, #1
 800879a:	b2da      	uxtb	r2, r3
 800879c:	697b      	ldr	r3, [r7, #20]
 800879e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80087a2:	697b      	ldr	r3, [r7, #20]
 80087a4:	6a1b      	ldr	r3, [r3, #32]
 80087a6:	6978      	ldr	r0, [r7, #20]
 80087a8:	4798      	blx	r3
}
 80087aa:	bf00      	nop
 80087ac:	3718      	adds	r7, #24
 80087ae:	46bd      	mov	sp, r7
 80087b0:	bd80      	pop	{r7, pc}
 80087b2:	bf00      	nop
 80087b4:	200008c0 	.word	0x200008c0

080087b8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80087b8:	b580      	push	{r7, lr}
 80087ba:	b084      	sub	sp, #16
 80087bc:	af00      	add	r7, sp, #0
 80087be:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80087c0:	f107 0308 	add.w	r3, r7, #8
 80087c4:	4618      	mov	r0, r3
 80087c6:	f000 f857 	bl	8008878 <prvGetNextExpireTime>
 80087ca:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80087cc:	68bb      	ldr	r3, [r7, #8]
 80087ce:	4619      	mov	r1, r3
 80087d0:	68f8      	ldr	r0, [r7, #12]
 80087d2:	f000 f803 	bl	80087dc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80087d6:	f000 f8d5 	bl	8008984 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80087da:	e7f1      	b.n	80087c0 <prvTimerTask+0x8>

080087dc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80087dc:	b580      	push	{r7, lr}
 80087de:	b084      	sub	sp, #16
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	6078      	str	r0, [r7, #4]
 80087e4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80087e6:	f7ff f871 	bl	80078cc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80087ea:	f107 0308 	add.w	r3, r7, #8
 80087ee:	4618      	mov	r0, r3
 80087f0:	f000 f866 	bl	80088c0 <prvSampleTimeNow>
 80087f4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80087f6:	68bb      	ldr	r3, [r7, #8]
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d130      	bne.n	800885e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80087fc:	683b      	ldr	r3, [r7, #0]
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d10a      	bne.n	8008818 <prvProcessTimerOrBlockTask+0x3c>
 8008802:	687a      	ldr	r2, [r7, #4]
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	429a      	cmp	r2, r3
 8008808:	d806      	bhi.n	8008818 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800880a:	f7ff f86d 	bl	80078e8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800880e:	68f9      	ldr	r1, [r7, #12]
 8008810:	6878      	ldr	r0, [r7, #4]
 8008812:	f7ff ff83 	bl	800871c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008816:	e024      	b.n	8008862 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008818:	683b      	ldr	r3, [r7, #0]
 800881a:	2b00      	cmp	r3, #0
 800881c:	d008      	beq.n	8008830 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800881e:	4b13      	ldr	r3, [pc, #76]	; (800886c <prvProcessTimerOrBlockTask+0x90>)
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	2b00      	cmp	r3, #0
 8008826:	d101      	bne.n	800882c <prvProcessTimerOrBlockTask+0x50>
 8008828:	2301      	movs	r3, #1
 800882a:	e000      	b.n	800882e <prvProcessTimerOrBlockTask+0x52>
 800882c:	2300      	movs	r3, #0
 800882e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008830:	4b0f      	ldr	r3, [pc, #60]	; (8008870 <prvProcessTimerOrBlockTask+0x94>)
 8008832:	6818      	ldr	r0, [r3, #0]
 8008834:	687a      	ldr	r2, [r7, #4]
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	1ad3      	subs	r3, r2, r3
 800883a:	683a      	ldr	r2, [r7, #0]
 800883c:	4619      	mov	r1, r3
 800883e:	f7fe fddb 	bl	80073f8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008842:	f7ff f851 	bl	80078e8 <xTaskResumeAll>
 8008846:	4603      	mov	r3, r0
 8008848:	2b00      	cmp	r3, #0
 800884a:	d10a      	bne.n	8008862 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800884c:	4b09      	ldr	r3, [pc, #36]	; (8008874 <prvProcessTimerOrBlockTask+0x98>)
 800884e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008852:	601a      	str	r2, [r3, #0]
 8008854:	f3bf 8f4f 	dsb	sy
 8008858:	f3bf 8f6f 	isb	sy
}
 800885c:	e001      	b.n	8008862 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800885e:	f7ff f843 	bl	80078e8 <xTaskResumeAll>
}
 8008862:	bf00      	nop
 8008864:	3710      	adds	r7, #16
 8008866:	46bd      	mov	sp, r7
 8008868:	bd80      	pop	{r7, pc}
 800886a:	bf00      	nop
 800886c:	200008c4 	.word	0x200008c4
 8008870:	200008c8 	.word	0x200008c8
 8008874:	e000ed04 	.word	0xe000ed04

08008878 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008878:	b480      	push	{r7}
 800887a:	b085      	sub	sp, #20
 800887c:	af00      	add	r7, sp, #0
 800887e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008880:	4b0e      	ldr	r3, [pc, #56]	; (80088bc <prvGetNextExpireTime+0x44>)
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	2b00      	cmp	r3, #0
 8008888:	d101      	bne.n	800888e <prvGetNextExpireTime+0x16>
 800888a:	2201      	movs	r2, #1
 800888c:	e000      	b.n	8008890 <prvGetNextExpireTime+0x18>
 800888e:	2200      	movs	r2, #0
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	2b00      	cmp	r3, #0
 800889a:	d105      	bne.n	80088a8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800889c:	4b07      	ldr	r3, [pc, #28]	; (80088bc <prvGetNextExpireTime+0x44>)
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	68db      	ldr	r3, [r3, #12]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	60fb      	str	r3, [r7, #12]
 80088a6:	e001      	b.n	80088ac <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80088a8:	2300      	movs	r3, #0
 80088aa:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80088ac:	68fb      	ldr	r3, [r7, #12]
}
 80088ae:	4618      	mov	r0, r3
 80088b0:	3714      	adds	r7, #20
 80088b2:	46bd      	mov	sp, r7
 80088b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b8:	4770      	bx	lr
 80088ba:	bf00      	nop
 80088bc:	200008c0 	.word	0x200008c0

080088c0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80088c0:	b580      	push	{r7, lr}
 80088c2:	b084      	sub	sp, #16
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80088c8:	f7ff f8ac 	bl	8007a24 <xTaskGetTickCount>
 80088cc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80088ce:	4b0b      	ldr	r3, [pc, #44]	; (80088fc <prvSampleTimeNow+0x3c>)
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	68fa      	ldr	r2, [r7, #12]
 80088d4:	429a      	cmp	r2, r3
 80088d6:	d205      	bcs.n	80088e4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80088d8:	f000 f91c 	bl	8008b14 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	2201      	movs	r2, #1
 80088e0:	601a      	str	r2, [r3, #0]
 80088e2:	e002      	b.n	80088ea <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	2200      	movs	r2, #0
 80088e8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80088ea:	4a04      	ldr	r2, [pc, #16]	; (80088fc <prvSampleTimeNow+0x3c>)
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80088f0:	68fb      	ldr	r3, [r7, #12]
}
 80088f2:	4618      	mov	r0, r3
 80088f4:	3710      	adds	r7, #16
 80088f6:	46bd      	mov	sp, r7
 80088f8:	bd80      	pop	{r7, pc}
 80088fa:	bf00      	nop
 80088fc:	200008d0 	.word	0x200008d0

08008900 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008900:	b580      	push	{r7, lr}
 8008902:	b086      	sub	sp, #24
 8008904:	af00      	add	r7, sp, #0
 8008906:	60f8      	str	r0, [r7, #12]
 8008908:	60b9      	str	r1, [r7, #8]
 800890a:	607a      	str	r2, [r7, #4]
 800890c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800890e:	2300      	movs	r3, #0
 8008910:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	68ba      	ldr	r2, [r7, #8]
 8008916:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	68fa      	ldr	r2, [r7, #12]
 800891c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800891e:	68ba      	ldr	r2, [r7, #8]
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	429a      	cmp	r2, r3
 8008924:	d812      	bhi.n	800894c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008926:	687a      	ldr	r2, [r7, #4]
 8008928:	683b      	ldr	r3, [r7, #0]
 800892a:	1ad2      	subs	r2, r2, r3
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	699b      	ldr	r3, [r3, #24]
 8008930:	429a      	cmp	r2, r3
 8008932:	d302      	bcc.n	800893a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008934:	2301      	movs	r3, #1
 8008936:	617b      	str	r3, [r7, #20]
 8008938:	e01b      	b.n	8008972 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800893a:	4b10      	ldr	r3, [pc, #64]	; (800897c <prvInsertTimerInActiveList+0x7c>)
 800893c:	681a      	ldr	r2, [r3, #0]
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	3304      	adds	r3, #4
 8008942:	4619      	mov	r1, r3
 8008944:	4610      	mov	r0, r2
 8008946:	f7fd fcdd 	bl	8006304 <vListInsert>
 800894a:	e012      	b.n	8008972 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800894c:	687a      	ldr	r2, [r7, #4]
 800894e:	683b      	ldr	r3, [r7, #0]
 8008950:	429a      	cmp	r2, r3
 8008952:	d206      	bcs.n	8008962 <prvInsertTimerInActiveList+0x62>
 8008954:	68ba      	ldr	r2, [r7, #8]
 8008956:	683b      	ldr	r3, [r7, #0]
 8008958:	429a      	cmp	r2, r3
 800895a:	d302      	bcc.n	8008962 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800895c:	2301      	movs	r3, #1
 800895e:	617b      	str	r3, [r7, #20]
 8008960:	e007      	b.n	8008972 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008962:	4b07      	ldr	r3, [pc, #28]	; (8008980 <prvInsertTimerInActiveList+0x80>)
 8008964:	681a      	ldr	r2, [r3, #0]
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	3304      	adds	r3, #4
 800896a:	4619      	mov	r1, r3
 800896c:	4610      	mov	r0, r2
 800896e:	f7fd fcc9 	bl	8006304 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008972:	697b      	ldr	r3, [r7, #20]
}
 8008974:	4618      	mov	r0, r3
 8008976:	3718      	adds	r7, #24
 8008978:	46bd      	mov	sp, r7
 800897a:	bd80      	pop	{r7, pc}
 800897c:	200008c4 	.word	0x200008c4
 8008980:	200008c0 	.word	0x200008c0

08008984 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008984:	b580      	push	{r7, lr}
 8008986:	b08c      	sub	sp, #48	; 0x30
 8008988:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800898a:	e0b0      	b.n	8008aee <prvProcessReceivedCommands+0x16a>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800898c:	68bb      	ldr	r3, [r7, #8]
 800898e:	2b00      	cmp	r3, #0
 8008990:	f2c0 80ac 	blt.w	8008aec <prvProcessReceivedCommands+0x168>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008994:	693b      	ldr	r3, [r7, #16]
 8008996:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800899a:	695b      	ldr	r3, [r3, #20]
 800899c:	2b00      	cmp	r3, #0
 800899e:	d004      	beq.n	80089aa <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80089a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089a2:	3304      	adds	r3, #4
 80089a4:	4618      	mov	r0, r3
 80089a6:	f7fd fce6 	bl	8006376 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80089aa:	1d3b      	adds	r3, r7, #4
 80089ac:	4618      	mov	r0, r3
 80089ae:	f7ff ff87 	bl	80088c0 <prvSampleTimeNow>
 80089b2:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 80089b4:	68bb      	ldr	r3, [r7, #8]
 80089b6:	2b09      	cmp	r3, #9
 80089b8:	f200 8099 	bhi.w	8008aee <prvProcessReceivedCommands+0x16a>
 80089bc:	a201      	add	r2, pc, #4	; (adr r2, 80089c4 <prvProcessReceivedCommands+0x40>)
 80089be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089c2:	bf00      	nop
 80089c4:	080089ed 	.word	0x080089ed
 80089c8:	080089ed 	.word	0x080089ed
 80089cc:	080089ed 	.word	0x080089ed
 80089d0:	08008a63 	.word	0x08008a63
 80089d4:	08008a77 	.word	0x08008a77
 80089d8:	08008ac3 	.word	0x08008ac3
 80089dc:	080089ed 	.word	0x080089ed
 80089e0:	080089ed 	.word	0x080089ed
 80089e4:	08008a63 	.word	0x08008a63
 80089e8:	08008a77 	.word	0x08008a77
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80089ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089ee:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80089f2:	f043 0301 	orr.w	r3, r3, #1
 80089f6:	b2da      	uxtb	r2, r3
 80089f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80089fe:	68fa      	ldr	r2, [r7, #12]
 8008a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a02:	699b      	ldr	r3, [r3, #24]
 8008a04:	18d1      	adds	r1, r2, r3
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	6a3a      	ldr	r2, [r7, #32]
 8008a0a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008a0c:	f7ff ff78 	bl	8008900 <prvInsertTimerInActiveList>
 8008a10:	4603      	mov	r3, r0
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d06b      	beq.n	8008aee <prvProcessReceivedCommands+0x16a>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a18:	6a1b      	ldr	r3, [r3, #32]
 8008a1a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008a1c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a20:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008a24:	f003 0304 	and.w	r3, r3, #4
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d060      	beq.n	8008aee <prvProcessReceivedCommands+0x16a>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008a2c:	68fa      	ldr	r2, [r7, #12]
 8008a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a30:	699b      	ldr	r3, [r3, #24]
 8008a32:	441a      	add	r2, r3
 8008a34:	2300      	movs	r3, #0
 8008a36:	9300      	str	r3, [sp, #0]
 8008a38:	2300      	movs	r3, #0
 8008a3a:	2100      	movs	r1, #0
 8008a3c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008a3e:	f7ff fe1f 	bl	8008680 <xTimerGenericCommand>
 8008a42:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8008a44:	69fb      	ldr	r3, [r7, #28]
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d151      	bne.n	8008aee <prvProcessReceivedCommands+0x16a>
 8008a4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a4e:	b672      	cpsid	i
 8008a50:	f383 8811 	msr	BASEPRI, r3
 8008a54:	f3bf 8f6f 	isb	sy
 8008a58:	f3bf 8f4f 	dsb	sy
 8008a5c:	b662      	cpsie	i
 8008a5e:	61bb      	str	r3, [r7, #24]
 8008a60:	e7fe      	b.n	8008a60 <prvProcessReceivedCommands+0xdc>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a64:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008a68:	f023 0301 	bic.w	r3, r3, #1
 8008a6c:	b2da      	uxtb	r2, r3
 8008a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a70:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					break;
 8008a74:	e03b      	b.n	8008aee <prvProcessReceivedCommands+0x16a>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a78:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008a7c:	f043 0301 	orr.w	r3, r3, #1
 8008a80:	b2da      	uxtb	r2, r3
 8008a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a84:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008a88:	68fa      	ldr	r2, [r7, #12]
 8008a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a8c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a90:	699b      	ldr	r3, [r3, #24]
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d10b      	bne.n	8008aae <prvProcessReceivedCommands+0x12a>
 8008a96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a9a:	b672      	cpsid	i
 8008a9c:	f383 8811 	msr	BASEPRI, r3
 8008aa0:	f3bf 8f6f 	isb	sy
 8008aa4:	f3bf 8f4f 	dsb	sy
 8008aa8:	b662      	cpsie	i
 8008aaa:	617b      	str	r3, [r7, #20]
 8008aac:	e7fe      	b.n	8008aac <prvProcessReceivedCommands+0x128>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ab0:	699a      	ldr	r2, [r3, #24]
 8008ab2:	6a3b      	ldr	r3, [r7, #32]
 8008ab4:	18d1      	adds	r1, r2, r3
 8008ab6:	6a3b      	ldr	r3, [r7, #32]
 8008ab8:	6a3a      	ldr	r2, [r7, #32]
 8008aba:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008abc:	f7ff ff20 	bl	8008900 <prvInsertTimerInActiveList>
					break;
 8008ac0:	e015      	b.n	8008aee <prvProcessReceivedCommands+0x16a>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ac4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008ac8:	f003 0302 	and.w	r3, r3, #2
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d103      	bne.n	8008ad8 <prvProcessReceivedCommands+0x154>
						{
							vPortFree( pxTimer );
 8008ad0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008ad2:	f000 fbbb 	bl	800924c <vPortFree>
 8008ad6:	e00a      	b.n	8008aee <prvProcessReceivedCommands+0x16a>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ada:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008ade:	f023 0301 	bic.w	r3, r3, #1
 8008ae2:	b2da      	uxtb	r2, r3
 8008ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ae6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008aea:	e000      	b.n	8008aee <prvProcessReceivedCommands+0x16a>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8008aec:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008aee:	4b08      	ldr	r3, [pc, #32]	; (8008b10 <prvProcessReceivedCommands+0x18c>)
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	f107 0108 	add.w	r1, r7, #8
 8008af6:	2200      	movs	r2, #0
 8008af8:	4618      	mov	r0, r3
 8008afa:	f7fe f82b 	bl	8006b54 <xQueueReceive>
 8008afe:	4603      	mov	r3, r0
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	f47f af43 	bne.w	800898c <prvProcessReceivedCommands+0x8>
	}
}
 8008b06:	bf00      	nop
 8008b08:	3728      	adds	r7, #40	; 0x28
 8008b0a:	46bd      	mov	sp, r7
 8008b0c:	bd80      	pop	{r7, pc}
 8008b0e:	bf00      	nop
 8008b10:	200008c8 	.word	0x200008c8

08008b14 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008b14:	b580      	push	{r7, lr}
 8008b16:	b088      	sub	sp, #32
 8008b18:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008b1a:	e049      	b.n	8008bb0 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008b1c:	4b2e      	ldr	r3, [pc, #184]	; (8008bd8 <prvSwitchTimerLists+0xc4>)
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	68db      	ldr	r3, [r3, #12]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008b26:	4b2c      	ldr	r3, [pc, #176]	; (8008bd8 <prvSwitchTimerLists+0xc4>)
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	68db      	ldr	r3, [r3, #12]
 8008b2c:	68db      	ldr	r3, [r3, #12]
 8008b2e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	3304      	adds	r3, #4
 8008b34:	4618      	mov	r0, r3
 8008b36:	f7fd fc1e 	bl	8006376 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	6a1b      	ldr	r3, [r3, #32]
 8008b3e:	68f8      	ldr	r0, [r7, #12]
 8008b40:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008b48:	f003 0304 	and.w	r3, r3, #4
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d02f      	beq.n	8008bb0 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	699b      	ldr	r3, [r3, #24]
 8008b54:	693a      	ldr	r2, [r7, #16]
 8008b56:	4413      	add	r3, r2
 8008b58:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008b5a:	68ba      	ldr	r2, [r7, #8]
 8008b5c:	693b      	ldr	r3, [r7, #16]
 8008b5e:	429a      	cmp	r2, r3
 8008b60:	d90e      	bls.n	8008b80 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	68ba      	ldr	r2, [r7, #8]
 8008b66:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	68fa      	ldr	r2, [r7, #12]
 8008b6c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008b6e:	4b1a      	ldr	r3, [pc, #104]	; (8008bd8 <prvSwitchTimerLists+0xc4>)
 8008b70:	681a      	ldr	r2, [r3, #0]
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	3304      	adds	r3, #4
 8008b76:	4619      	mov	r1, r3
 8008b78:	4610      	mov	r0, r2
 8008b7a:	f7fd fbc3 	bl	8006304 <vListInsert>
 8008b7e:	e017      	b.n	8008bb0 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008b80:	2300      	movs	r3, #0
 8008b82:	9300      	str	r3, [sp, #0]
 8008b84:	2300      	movs	r3, #0
 8008b86:	693a      	ldr	r2, [r7, #16]
 8008b88:	2100      	movs	r1, #0
 8008b8a:	68f8      	ldr	r0, [r7, #12]
 8008b8c:	f7ff fd78 	bl	8008680 <xTimerGenericCommand>
 8008b90:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d10b      	bne.n	8008bb0 <prvSwitchTimerLists+0x9c>
 8008b98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b9c:	b672      	cpsid	i
 8008b9e:	f383 8811 	msr	BASEPRI, r3
 8008ba2:	f3bf 8f6f 	isb	sy
 8008ba6:	f3bf 8f4f 	dsb	sy
 8008baa:	b662      	cpsie	i
 8008bac:	603b      	str	r3, [r7, #0]
 8008bae:	e7fe      	b.n	8008bae <prvSwitchTimerLists+0x9a>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008bb0:	4b09      	ldr	r3, [pc, #36]	; (8008bd8 <prvSwitchTimerLists+0xc4>)
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d1b0      	bne.n	8008b1c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008bba:	4b07      	ldr	r3, [pc, #28]	; (8008bd8 <prvSwitchTimerLists+0xc4>)
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008bc0:	4b06      	ldr	r3, [pc, #24]	; (8008bdc <prvSwitchTimerLists+0xc8>)
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	4a04      	ldr	r2, [pc, #16]	; (8008bd8 <prvSwitchTimerLists+0xc4>)
 8008bc6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008bc8:	4a04      	ldr	r2, [pc, #16]	; (8008bdc <prvSwitchTimerLists+0xc8>)
 8008bca:	697b      	ldr	r3, [r7, #20]
 8008bcc:	6013      	str	r3, [r2, #0]
}
 8008bce:	bf00      	nop
 8008bd0:	3718      	adds	r7, #24
 8008bd2:	46bd      	mov	sp, r7
 8008bd4:	bd80      	pop	{r7, pc}
 8008bd6:	bf00      	nop
 8008bd8:	200008c0 	.word	0x200008c0
 8008bdc:	200008c4 	.word	0x200008c4

08008be0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008be0:	b580      	push	{r7, lr}
 8008be2:	b082      	sub	sp, #8
 8008be4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008be6:	f000 f947 	bl	8008e78 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008bea:	4b15      	ldr	r3, [pc, #84]	; (8008c40 <prvCheckForValidListAndQueue+0x60>)
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d120      	bne.n	8008c34 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008bf2:	4814      	ldr	r0, [pc, #80]	; (8008c44 <prvCheckForValidListAndQueue+0x64>)
 8008bf4:	f7fd fb35 	bl	8006262 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008bf8:	4813      	ldr	r0, [pc, #76]	; (8008c48 <prvCheckForValidListAndQueue+0x68>)
 8008bfa:	f7fd fb32 	bl	8006262 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008bfe:	4b13      	ldr	r3, [pc, #76]	; (8008c4c <prvCheckForValidListAndQueue+0x6c>)
 8008c00:	4a10      	ldr	r2, [pc, #64]	; (8008c44 <prvCheckForValidListAndQueue+0x64>)
 8008c02:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008c04:	4b12      	ldr	r3, [pc, #72]	; (8008c50 <prvCheckForValidListAndQueue+0x70>)
 8008c06:	4a10      	ldr	r2, [pc, #64]	; (8008c48 <prvCheckForValidListAndQueue+0x68>)
 8008c08:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008c0a:	2300      	movs	r3, #0
 8008c0c:	9300      	str	r3, [sp, #0]
 8008c0e:	4b11      	ldr	r3, [pc, #68]	; (8008c54 <prvCheckForValidListAndQueue+0x74>)
 8008c10:	4a11      	ldr	r2, [pc, #68]	; (8008c58 <prvCheckForValidListAndQueue+0x78>)
 8008c12:	210c      	movs	r1, #12
 8008c14:	200a      	movs	r0, #10
 8008c16:	f7fd fc43 	bl	80064a0 <xQueueGenericCreateStatic>
 8008c1a:	4602      	mov	r2, r0
 8008c1c:	4b08      	ldr	r3, [pc, #32]	; (8008c40 <prvCheckForValidListAndQueue+0x60>)
 8008c1e:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008c20:	4b07      	ldr	r3, [pc, #28]	; (8008c40 <prvCheckForValidListAndQueue+0x60>)
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d005      	beq.n	8008c34 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008c28:	4b05      	ldr	r3, [pc, #20]	; (8008c40 <prvCheckForValidListAndQueue+0x60>)
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	490b      	ldr	r1, [pc, #44]	; (8008c5c <prvCheckForValidListAndQueue+0x7c>)
 8008c2e:	4618      	mov	r0, r3
 8008c30:	f7fe fb90 	bl	8007354 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008c34:	f000 f952 	bl	8008edc <vPortExitCritical>
}
 8008c38:	bf00      	nop
 8008c3a:	46bd      	mov	sp, r7
 8008c3c:	bd80      	pop	{r7, pc}
 8008c3e:	bf00      	nop
 8008c40:	200008c8 	.word	0x200008c8
 8008c44:	20000898 	.word	0x20000898
 8008c48:	200008ac 	.word	0x200008ac
 8008c4c:	200008c0 	.word	0x200008c0
 8008c50:	200008c4 	.word	0x200008c4
 8008c54:	2000094c 	.word	0x2000094c
 8008c58:	200008d4 	.word	0x200008d4
 8008c5c:	080185c4 	.word	0x080185c4

08008c60 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008c60:	b480      	push	{r7}
 8008c62:	b085      	sub	sp, #20
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	60f8      	str	r0, [r7, #12]
 8008c68:	60b9      	str	r1, [r7, #8]
 8008c6a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	3b04      	subs	r3, #4
 8008c70:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008c78:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	3b04      	subs	r3, #4
 8008c7e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008c80:	68bb      	ldr	r3, [r7, #8]
 8008c82:	f023 0201 	bic.w	r2, r3, #1
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	3b04      	subs	r3, #4
 8008c8e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008c90:	4a0c      	ldr	r2, [pc, #48]	; (8008cc4 <pxPortInitialiseStack+0x64>)
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	3b14      	subs	r3, #20
 8008c9a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008c9c:	687a      	ldr	r2, [r7, #4]
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	3b04      	subs	r3, #4
 8008ca6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	f06f 0202 	mvn.w	r2, #2
 8008cae:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	3b20      	subs	r3, #32
 8008cb4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008cb6:	68fb      	ldr	r3, [r7, #12]
}
 8008cb8:	4618      	mov	r0, r3
 8008cba:	3714      	adds	r7, #20
 8008cbc:	46bd      	mov	sp, r7
 8008cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc2:	4770      	bx	lr
 8008cc4:	08008cc9 	.word	0x08008cc9

08008cc8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008cc8:	b480      	push	{r7}
 8008cca:	b085      	sub	sp, #20
 8008ccc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008cce:	2300      	movs	r3, #0
 8008cd0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008cd2:	4b13      	ldr	r3, [pc, #76]	; (8008d20 <prvTaskExitError+0x58>)
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cda:	d00b      	beq.n	8008cf4 <prvTaskExitError+0x2c>
 8008cdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ce0:	b672      	cpsid	i
 8008ce2:	f383 8811 	msr	BASEPRI, r3
 8008ce6:	f3bf 8f6f 	isb	sy
 8008cea:	f3bf 8f4f 	dsb	sy
 8008cee:	b662      	cpsie	i
 8008cf0:	60fb      	str	r3, [r7, #12]
 8008cf2:	e7fe      	b.n	8008cf2 <prvTaskExitError+0x2a>
 8008cf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cf8:	b672      	cpsid	i
 8008cfa:	f383 8811 	msr	BASEPRI, r3
 8008cfe:	f3bf 8f6f 	isb	sy
 8008d02:	f3bf 8f4f 	dsb	sy
 8008d06:	b662      	cpsie	i
 8008d08:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008d0a:	bf00      	nop
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d0fc      	beq.n	8008d0c <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008d12:	bf00      	nop
 8008d14:	3714      	adds	r7, #20
 8008d16:	46bd      	mov	sp, r7
 8008d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d1c:	4770      	bx	lr
 8008d1e:	bf00      	nop
 8008d20:	2000000c 	.word	0x2000000c
	...

08008d30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008d30:	4b07      	ldr	r3, [pc, #28]	; (8008d50 <pxCurrentTCBConst2>)
 8008d32:	6819      	ldr	r1, [r3, #0]
 8008d34:	6808      	ldr	r0, [r1, #0]
 8008d36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d3a:	f380 8809 	msr	PSP, r0
 8008d3e:	f3bf 8f6f 	isb	sy
 8008d42:	f04f 0000 	mov.w	r0, #0
 8008d46:	f380 8811 	msr	BASEPRI, r0
 8008d4a:	4770      	bx	lr
 8008d4c:	f3af 8000 	nop.w

08008d50 <pxCurrentTCBConst2>:
 8008d50:	2000076c 	.word	0x2000076c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008d54:	bf00      	nop
 8008d56:	bf00      	nop

08008d58 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008d58:	4808      	ldr	r0, [pc, #32]	; (8008d7c <prvPortStartFirstTask+0x24>)
 8008d5a:	6800      	ldr	r0, [r0, #0]
 8008d5c:	6800      	ldr	r0, [r0, #0]
 8008d5e:	f380 8808 	msr	MSP, r0
 8008d62:	f04f 0000 	mov.w	r0, #0
 8008d66:	f380 8814 	msr	CONTROL, r0
 8008d6a:	b662      	cpsie	i
 8008d6c:	b661      	cpsie	f
 8008d6e:	f3bf 8f4f 	dsb	sy
 8008d72:	f3bf 8f6f 	isb	sy
 8008d76:	df00      	svc	0
 8008d78:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008d7a:	bf00      	nop
 8008d7c:	e000ed08 	.word	0xe000ed08

08008d80 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008d80:	b580      	push	{r7, lr}
 8008d82:	b084      	sub	sp, #16
 8008d84:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008d86:	4b36      	ldr	r3, [pc, #216]	; (8008e60 <xPortStartScheduler+0xe0>)
 8008d88:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	781b      	ldrb	r3, [r3, #0]
 8008d8e:	b2db      	uxtb	r3, r3
 8008d90:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	22ff      	movs	r2, #255	; 0xff
 8008d96:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	781b      	ldrb	r3, [r3, #0]
 8008d9c:	b2db      	uxtb	r3, r3
 8008d9e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008da0:	78fb      	ldrb	r3, [r7, #3]
 8008da2:	b2db      	uxtb	r3, r3
 8008da4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008da8:	b2da      	uxtb	r2, r3
 8008daa:	4b2e      	ldr	r3, [pc, #184]	; (8008e64 <xPortStartScheduler+0xe4>)
 8008dac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008dae:	4b2e      	ldr	r3, [pc, #184]	; (8008e68 <xPortStartScheduler+0xe8>)
 8008db0:	2207      	movs	r2, #7
 8008db2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008db4:	e009      	b.n	8008dca <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8008db6:	4b2c      	ldr	r3, [pc, #176]	; (8008e68 <xPortStartScheduler+0xe8>)
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	3b01      	subs	r3, #1
 8008dbc:	4a2a      	ldr	r2, [pc, #168]	; (8008e68 <xPortStartScheduler+0xe8>)
 8008dbe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008dc0:	78fb      	ldrb	r3, [r7, #3]
 8008dc2:	b2db      	uxtb	r3, r3
 8008dc4:	005b      	lsls	r3, r3, #1
 8008dc6:	b2db      	uxtb	r3, r3
 8008dc8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008dca:	78fb      	ldrb	r3, [r7, #3]
 8008dcc:	b2db      	uxtb	r3, r3
 8008dce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008dd2:	2b80      	cmp	r3, #128	; 0x80
 8008dd4:	d0ef      	beq.n	8008db6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008dd6:	4b24      	ldr	r3, [pc, #144]	; (8008e68 <xPortStartScheduler+0xe8>)
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	f1c3 0307 	rsb	r3, r3, #7
 8008dde:	2b04      	cmp	r3, #4
 8008de0:	d00b      	beq.n	8008dfa <xPortStartScheduler+0x7a>
 8008de2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008de6:	b672      	cpsid	i
 8008de8:	f383 8811 	msr	BASEPRI, r3
 8008dec:	f3bf 8f6f 	isb	sy
 8008df0:	f3bf 8f4f 	dsb	sy
 8008df4:	b662      	cpsie	i
 8008df6:	60bb      	str	r3, [r7, #8]
 8008df8:	e7fe      	b.n	8008df8 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008dfa:	4b1b      	ldr	r3, [pc, #108]	; (8008e68 <xPortStartScheduler+0xe8>)
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	021b      	lsls	r3, r3, #8
 8008e00:	4a19      	ldr	r2, [pc, #100]	; (8008e68 <xPortStartScheduler+0xe8>)
 8008e02:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008e04:	4b18      	ldr	r3, [pc, #96]	; (8008e68 <xPortStartScheduler+0xe8>)
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008e0c:	4a16      	ldr	r2, [pc, #88]	; (8008e68 <xPortStartScheduler+0xe8>)
 8008e0e:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	b2da      	uxtb	r2, r3
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008e18:	4b14      	ldr	r3, [pc, #80]	; (8008e6c <xPortStartScheduler+0xec>)
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	4a13      	ldr	r2, [pc, #76]	; (8008e6c <xPortStartScheduler+0xec>)
 8008e1e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008e22:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008e24:	4b11      	ldr	r3, [pc, #68]	; (8008e6c <xPortStartScheduler+0xec>)
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	4a10      	ldr	r2, [pc, #64]	; (8008e6c <xPortStartScheduler+0xec>)
 8008e2a:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008e2e:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008e30:	f000 f8d4 	bl	8008fdc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008e34:	4b0e      	ldr	r3, [pc, #56]	; (8008e70 <xPortStartScheduler+0xf0>)
 8008e36:	2200      	movs	r2, #0
 8008e38:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008e3a:	f000 f8f3 	bl	8009024 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008e3e:	4b0d      	ldr	r3, [pc, #52]	; (8008e74 <xPortStartScheduler+0xf4>)
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	4a0c      	ldr	r2, [pc, #48]	; (8008e74 <xPortStartScheduler+0xf4>)
 8008e44:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008e48:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008e4a:	f7ff ff85 	bl	8008d58 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008e4e:	f7fe fec5 	bl	8007bdc <vTaskSwitchContext>
	prvTaskExitError();
 8008e52:	f7ff ff39 	bl	8008cc8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008e56:	2300      	movs	r3, #0
}
 8008e58:	4618      	mov	r0, r3
 8008e5a:	3710      	adds	r7, #16
 8008e5c:	46bd      	mov	sp, r7
 8008e5e:	bd80      	pop	{r7, pc}
 8008e60:	e000e400 	.word	0xe000e400
 8008e64:	20000994 	.word	0x20000994
 8008e68:	20000998 	.word	0x20000998
 8008e6c:	e000ed20 	.word	0xe000ed20
 8008e70:	2000000c 	.word	0x2000000c
 8008e74:	e000ef34 	.word	0xe000ef34

08008e78 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008e78:	b480      	push	{r7}
 8008e7a:	b083      	sub	sp, #12
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e82:	b672      	cpsid	i
 8008e84:	f383 8811 	msr	BASEPRI, r3
 8008e88:	f3bf 8f6f 	isb	sy
 8008e8c:	f3bf 8f4f 	dsb	sy
 8008e90:	b662      	cpsie	i
 8008e92:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008e94:	4b0f      	ldr	r3, [pc, #60]	; (8008ed4 <vPortEnterCritical+0x5c>)
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	3301      	adds	r3, #1
 8008e9a:	4a0e      	ldr	r2, [pc, #56]	; (8008ed4 <vPortEnterCritical+0x5c>)
 8008e9c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008e9e:	4b0d      	ldr	r3, [pc, #52]	; (8008ed4 <vPortEnterCritical+0x5c>)
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	2b01      	cmp	r3, #1
 8008ea4:	d110      	bne.n	8008ec8 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008ea6:	4b0c      	ldr	r3, [pc, #48]	; (8008ed8 <vPortEnterCritical+0x60>)
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	b2db      	uxtb	r3, r3
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d00b      	beq.n	8008ec8 <vPortEnterCritical+0x50>
 8008eb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008eb4:	b672      	cpsid	i
 8008eb6:	f383 8811 	msr	BASEPRI, r3
 8008eba:	f3bf 8f6f 	isb	sy
 8008ebe:	f3bf 8f4f 	dsb	sy
 8008ec2:	b662      	cpsie	i
 8008ec4:	603b      	str	r3, [r7, #0]
 8008ec6:	e7fe      	b.n	8008ec6 <vPortEnterCritical+0x4e>
	}
}
 8008ec8:	bf00      	nop
 8008eca:	370c      	adds	r7, #12
 8008ecc:	46bd      	mov	sp, r7
 8008ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed2:	4770      	bx	lr
 8008ed4:	2000000c 	.word	0x2000000c
 8008ed8:	e000ed04 	.word	0xe000ed04

08008edc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008edc:	b480      	push	{r7}
 8008ede:	b083      	sub	sp, #12
 8008ee0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008ee2:	4b12      	ldr	r3, [pc, #72]	; (8008f2c <vPortExitCritical+0x50>)
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d10b      	bne.n	8008f02 <vPortExitCritical+0x26>
 8008eea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008eee:	b672      	cpsid	i
 8008ef0:	f383 8811 	msr	BASEPRI, r3
 8008ef4:	f3bf 8f6f 	isb	sy
 8008ef8:	f3bf 8f4f 	dsb	sy
 8008efc:	b662      	cpsie	i
 8008efe:	607b      	str	r3, [r7, #4]
 8008f00:	e7fe      	b.n	8008f00 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 8008f02:	4b0a      	ldr	r3, [pc, #40]	; (8008f2c <vPortExitCritical+0x50>)
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	3b01      	subs	r3, #1
 8008f08:	4a08      	ldr	r2, [pc, #32]	; (8008f2c <vPortExitCritical+0x50>)
 8008f0a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008f0c:	4b07      	ldr	r3, [pc, #28]	; (8008f2c <vPortExitCritical+0x50>)
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d104      	bne.n	8008f1e <vPortExitCritical+0x42>
 8008f14:	2300      	movs	r3, #0
 8008f16:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008f18:	683b      	ldr	r3, [r7, #0]
 8008f1a:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8008f1e:	bf00      	nop
 8008f20:	370c      	adds	r7, #12
 8008f22:	46bd      	mov	sp, r7
 8008f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f28:	4770      	bx	lr
 8008f2a:	bf00      	nop
 8008f2c:	2000000c 	.word	0x2000000c

08008f30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008f30:	f3ef 8009 	mrs	r0, PSP
 8008f34:	f3bf 8f6f 	isb	sy
 8008f38:	4b15      	ldr	r3, [pc, #84]	; (8008f90 <pxCurrentTCBConst>)
 8008f3a:	681a      	ldr	r2, [r3, #0]
 8008f3c:	f01e 0f10 	tst.w	lr, #16
 8008f40:	bf08      	it	eq
 8008f42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008f46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f4a:	6010      	str	r0, [r2, #0]
 8008f4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008f50:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008f54:	b672      	cpsid	i
 8008f56:	f380 8811 	msr	BASEPRI, r0
 8008f5a:	f3bf 8f4f 	dsb	sy
 8008f5e:	f3bf 8f6f 	isb	sy
 8008f62:	b662      	cpsie	i
 8008f64:	f7fe fe3a 	bl	8007bdc <vTaskSwitchContext>
 8008f68:	f04f 0000 	mov.w	r0, #0
 8008f6c:	f380 8811 	msr	BASEPRI, r0
 8008f70:	bc09      	pop	{r0, r3}
 8008f72:	6819      	ldr	r1, [r3, #0]
 8008f74:	6808      	ldr	r0, [r1, #0]
 8008f76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f7a:	f01e 0f10 	tst.w	lr, #16
 8008f7e:	bf08      	it	eq
 8008f80:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008f84:	f380 8809 	msr	PSP, r0
 8008f88:	f3bf 8f6f 	isb	sy
 8008f8c:	4770      	bx	lr
 8008f8e:	bf00      	nop

08008f90 <pxCurrentTCBConst>:
 8008f90:	2000076c 	.word	0x2000076c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008f94:	bf00      	nop
 8008f96:	bf00      	nop

08008f98 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008f98:	b580      	push	{r7, lr}
 8008f9a:	b082      	sub	sp, #8
 8008f9c:	af00      	add	r7, sp, #0
	__asm volatile
 8008f9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fa2:	b672      	cpsid	i
 8008fa4:	f383 8811 	msr	BASEPRI, r3
 8008fa8:	f3bf 8f6f 	isb	sy
 8008fac:	f3bf 8f4f 	dsb	sy
 8008fb0:	b662      	cpsie	i
 8008fb2:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008fb4:	f7fe fd58 	bl	8007a68 <xTaskIncrementTick>
 8008fb8:	4603      	mov	r3, r0
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d003      	beq.n	8008fc6 <SysTick_Handler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008fbe:	4b06      	ldr	r3, [pc, #24]	; (8008fd8 <SysTick_Handler+0x40>)
 8008fc0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008fc4:	601a      	str	r2, [r3, #0]
 8008fc6:	2300      	movs	r3, #0
 8008fc8:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008fca:	683b      	ldr	r3, [r7, #0]
 8008fcc:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8008fd0:	bf00      	nop
 8008fd2:	3708      	adds	r7, #8
 8008fd4:	46bd      	mov	sp, r7
 8008fd6:	bd80      	pop	{r7, pc}
 8008fd8:	e000ed04 	.word	0xe000ed04

08008fdc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008fdc:	b480      	push	{r7}
 8008fde:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008fe0:	4b0b      	ldr	r3, [pc, #44]	; (8009010 <vPortSetupTimerInterrupt+0x34>)
 8008fe2:	2200      	movs	r2, #0
 8008fe4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008fe6:	4b0b      	ldr	r3, [pc, #44]	; (8009014 <vPortSetupTimerInterrupt+0x38>)
 8008fe8:	2200      	movs	r2, #0
 8008fea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008fec:	4b0a      	ldr	r3, [pc, #40]	; (8009018 <vPortSetupTimerInterrupt+0x3c>)
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	4a0a      	ldr	r2, [pc, #40]	; (800901c <vPortSetupTimerInterrupt+0x40>)
 8008ff2:	fba2 2303 	umull	r2, r3, r2, r3
 8008ff6:	099b      	lsrs	r3, r3, #6
 8008ff8:	4a09      	ldr	r2, [pc, #36]	; (8009020 <vPortSetupTimerInterrupt+0x44>)
 8008ffa:	3b01      	subs	r3, #1
 8008ffc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008ffe:	4b04      	ldr	r3, [pc, #16]	; (8009010 <vPortSetupTimerInterrupt+0x34>)
 8009000:	2207      	movs	r2, #7
 8009002:	601a      	str	r2, [r3, #0]
}
 8009004:	bf00      	nop
 8009006:	46bd      	mov	sp, r7
 8009008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800900c:	4770      	bx	lr
 800900e:	bf00      	nop
 8009010:	e000e010 	.word	0xe000e010
 8009014:	e000e018 	.word	0xe000e018
 8009018:	20000000 	.word	0x20000000
 800901c:	10624dd3 	.word	0x10624dd3
 8009020:	e000e014 	.word	0xe000e014

08009024 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009024:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009034 <vPortEnableVFP+0x10>
 8009028:	6801      	ldr	r1, [r0, #0]
 800902a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800902e:	6001      	str	r1, [r0, #0]
 8009030:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009032:	bf00      	nop
 8009034:	e000ed88 	.word	0xe000ed88

08009038 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009038:	b480      	push	{r7}
 800903a:	b085      	sub	sp, #20
 800903c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800903e:	f3ef 8305 	mrs	r3, IPSR
 8009042:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	2b0f      	cmp	r3, #15
 8009048:	d915      	bls.n	8009076 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800904a:	4a18      	ldr	r2, [pc, #96]	; (80090ac <vPortValidateInterruptPriority+0x74>)
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	4413      	add	r3, r2
 8009050:	781b      	ldrb	r3, [r3, #0]
 8009052:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009054:	4b16      	ldr	r3, [pc, #88]	; (80090b0 <vPortValidateInterruptPriority+0x78>)
 8009056:	781b      	ldrb	r3, [r3, #0]
 8009058:	7afa      	ldrb	r2, [r7, #11]
 800905a:	429a      	cmp	r2, r3
 800905c:	d20b      	bcs.n	8009076 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800905e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009062:	b672      	cpsid	i
 8009064:	f383 8811 	msr	BASEPRI, r3
 8009068:	f3bf 8f6f 	isb	sy
 800906c:	f3bf 8f4f 	dsb	sy
 8009070:	b662      	cpsie	i
 8009072:	607b      	str	r3, [r7, #4]
 8009074:	e7fe      	b.n	8009074 <vPortValidateInterruptPriority+0x3c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009076:	4b0f      	ldr	r3, [pc, #60]	; (80090b4 <vPortValidateInterruptPriority+0x7c>)
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800907e:	4b0e      	ldr	r3, [pc, #56]	; (80090b8 <vPortValidateInterruptPriority+0x80>)
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	429a      	cmp	r2, r3
 8009084:	d90b      	bls.n	800909e <vPortValidateInterruptPriority+0x66>
 8009086:	f04f 0350 	mov.w	r3, #80	; 0x50
 800908a:	b672      	cpsid	i
 800908c:	f383 8811 	msr	BASEPRI, r3
 8009090:	f3bf 8f6f 	isb	sy
 8009094:	f3bf 8f4f 	dsb	sy
 8009098:	b662      	cpsie	i
 800909a:	603b      	str	r3, [r7, #0]
 800909c:	e7fe      	b.n	800909c <vPortValidateInterruptPriority+0x64>
	}
 800909e:	bf00      	nop
 80090a0:	3714      	adds	r7, #20
 80090a2:	46bd      	mov	sp, r7
 80090a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a8:	4770      	bx	lr
 80090aa:	bf00      	nop
 80090ac:	e000e3f0 	.word	0xe000e3f0
 80090b0:	20000994 	.word	0x20000994
 80090b4:	e000ed0c 	.word	0xe000ed0c
 80090b8:	20000998 	.word	0x20000998

080090bc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80090bc:	b580      	push	{r7, lr}
 80090be:	b08a      	sub	sp, #40	; 0x28
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80090c4:	2300      	movs	r3, #0
 80090c6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80090c8:	f7fe fc00 	bl	80078cc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80090cc:	4b5a      	ldr	r3, [pc, #360]	; (8009238 <pvPortMalloc+0x17c>)
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d101      	bne.n	80090d8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80090d4:	f000 f916 	bl	8009304 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80090d8:	4b58      	ldr	r3, [pc, #352]	; (800923c <pvPortMalloc+0x180>)
 80090da:	681a      	ldr	r2, [r3, #0]
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	4013      	ands	r3, r2
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	f040 8090 	bne.w	8009206 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d01e      	beq.n	800912a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80090ec:	2208      	movs	r2, #8
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	4413      	add	r3, r2
 80090f2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	f003 0307 	and.w	r3, r3, #7
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d015      	beq.n	800912a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	f023 0307 	bic.w	r3, r3, #7
 8009104:	3308      	adds	r3, #8
 8009106:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	f003 0307 	and.w	r3, r3, #7
 800910e:	2b00      	cmp	r3, #0
 8009110:	d00b      	beq.n	800912a <pvPortMalloc+0x6e>
 8009112:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009116:	b672      	cpsid	i
 8009118:	f383 8811 	msr	BASEPRI, r3
 800911c:	f3bf 8f6f 	isb	sy
 8009120:	f3bf 8f4f 	dsb	sy
 8009124:	b662      	cpsie	i
 8009126:	617b      	str	r3, [r7, #20]
 8009128:	e7fe      	b.n	8009128 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	2b00      	cmp	r3, #0
 800912e:	d06a      	beq.n	8009206 <pvPortMalloc+0x14a>
 8009130:	4b43      	ldr	r3, [pc, #268]	; (8009240 <pvPortMalloc+0x184>)
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	687a      	ldr	r2, [r7, #4]
 8009136:	429a      	cmp	r2, r3
 8009138:	d865      	bhi.n	8009206 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800913a:	4b42      	ldr	r3, [pc, #264]	; (8009244 <pvPortMalloc+0x188>)
 800913c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800913e:	4b41      	ldr	r3, [pc, #260]	; (8009244 <pvPortMalloc+0x188>)
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009144:	e004      	b.n	8009150 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8009146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009148:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800914a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009152:	685b      	ldr	r3, [r3, #4]
 8009154:	687a      	ldr	r2, [r7, #4]
 8009156:	429a      	cmp	r2, r3
 8009158:	d903      	bls.n	8009162 <pvPortMalloc+0xa6>
 800915a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	2b00      	cmp	r3, #0
 8009160:	d1f1      	bne.n	8009146 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009162:	4b35      	ldr	r3, [pc, #212]	; (8009238 <pvPortMalloc+0x17c>)
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009168:	429a      	cmp	r2, r3
 800916a:	d04c      	beq.n	8009206 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800916c:	6a3b      	ldr	r3, [r7, #32]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	2208      	movs	r2, #8
 8009172:	4413      	add	r3, r2
 8009174:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009178:	681a      	ldr	r2, [r3, #0]
 800917a:	6a3b      	ldr	r3, [r7, #32]
 800917c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800917e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009180:	685a      	ldr	r2, [r3, #4]
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	1ad2      	subs	r2, r2, r3
 8009186:	2308      	movs	r3, #8
 8009188:	005b      	lsls	r3, r3, #1
 800918a:	429a      	cmp	r2, r3
 800918c:	d920      	bls.n	80091d0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800918e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	4413      	add	r3, r2
 8009194:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009196:	69bb      	ldr	r3, [r7, #24]
 8009198:	f003 0307 	and.w	r3, r3, #7
 800919c:	2b00      	cmp	r3, #0
 800919e:	d00b      	beq.n	80091b8 <pvPortMalloc+0xfc>
 80091a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091a4:	b672      	cpsid	i
 80091a6:	f383 8811 	msr	BASEPRI, r3
 80091aa:	f3bf 8f6f 	isb	sy
 80091ae:	f3bf 8f4f 	dsb	sy
 80091b2:	b662      	cpsie	i
 80091b4:	613b      	str	r3, [r7, #16]
 80091b6:	e7fe      	b.n	80091b6 <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80091b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091ba:	685a      	ldr	r2, [r3, #4]
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	1ad2      	subs	r2, r2, r3
 80091c0:	69bb      	ldr	r3, [r7, #24]
 80091c2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80091c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091c6:	687a      	ldr	r2, [r7, #4]
 80091c8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80091ca:	69b8      	ldr	r0, [r7, #24]
 80091cc:	f000 f8fc 	bl	80093c8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80091d0:	4b1b      	ldr	r3, [pc, #108]	; (8009240 <pvPortMalloc+0x184>)
 80091d2:	681a      	ldr	r2, [r3, #0]
 80091d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091d6:	685b      	ldr	r3, [r3, #4]
 80091d8:	1ad3      	subs	r3, r2, r3
 80091da:	4a19      	ldr	r2, [pc, #100]	; (8009240 <pvPortMalloc+0x184>)
 80091dc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80091de:	4b18      	ldr	r3, [pc, #96]	; (8009240 <pvPortMalloc+0x184>)
 80091e0:	681a      	ldr	r2, [r3, #0]
 80091e2:	4b19      	ldr	r3, [pc, #100]	; (8009248 <pvPortMalloc+0x18c>)
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	429a      	cmp	r2, r3
 80091e8:	d203      	bcs.n	80091f2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80091ea:	4b15      	ldr	r3, [pc, #84]	; (8009240 <pvPortMalloc+0x184>)
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	4a16      	ldr	r2, [pc, #88]	; (8009248 <pvPortMalloc+0x18c>)
 80091f0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80091f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091f4:	685a      	ldr	r2, [r3, #4]
 80091f6:	4b11      	ldr	r3, [pc, #68]	; (800923c <pvPortMalloc+0x180>)
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	431a      	orrs	r2, r3
 80091fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091fe:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009202:	2200      	movs	r2, #0
 8009204:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009206:	f7fe fb6f 	bl	80078e8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800920a:	69fb      	ldr	r3, [r7, #28]
 800920c:	f003 0307 	and.w	r3, r3, #7
 8009210:	2b00      	cmp	r3, #0
 8009212:	d00b      	beq.n	800922c <pvPortMalloc+0x170>
 8009214:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009218:	b672      	cpsid	i
 800921a:	f383 8811 	msr	BASEPRI, r3
 800921e:	f3bf 8f6f 	isb	sy
 8009222:	f3bf 8f4f 	dsb	sy
 8009226:	b662      	cpsie	i
 8009228:	60fb      	str	r3, [r7, #12]
 800922a:	e7fe      	b.n	800922a <pvPortMalloc+0x16e>
	return pvReturn;
 800922c:	69fb      	ldr	r3, [r7, #28]
}
 800922e:	4618      	mov	r0, r3
 8009230:	3728      	adds	r7, #40	; 0x28
 8009232:	46bd      	mov	sp, r7
 8009234:	bd80      	pop	{r7, pc}
 8009236:	bf00      	nop
 8009238:	200045a4 	.word	0x200045a4
 800923c:	200045b0 	.word	0x200045b0
 8009240:	200045a8 	.word	0x200045a8
 8009244:	2000459c 	.word	0x2000459c
 8009248:	200045ac 	.word	0x200045ac

0800924c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800924c:	b580      	push	{r7, lr}
 800924e:	b086      	sub	sp, #24
 8009250:	af00      	add	r7, sp, #0
 8009252:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	2b00      	cmp	r3, #0
 800925c:	d04a      	beq.n	80092f4 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800925e:	2308      	movs	r3, #8
 8009260:	425b      	negs	r3, r3
 8009262:	697a      	ldr	r2, [r7, #20]
 8009264:	4413      	add	r3, r2
 8009266:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009268:	697b      	ldr	r3, [r7, #20]
 800926a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800926c:	693b      	ldr	r3, [r7, #16]
 800926e:	685a      	ldr	r2, [r3, #4]
 8009270:	4b22      	ldr	r3, [pc, #136]	; (80092fc <vPortFree+0xb0>)
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	4013      	ands	r3, r2
 8009276:	2b00      	cmp	r3, #0
 8009278:	d10b      	bne.n	8009292 <vPortFree+0x46>
 800927a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800927e:	b672      	cpsid	i
 8009280:	f383 8811 	msr	BASEPRI, r3
 8009284:	f3bf 8f6f 	isb	sy
 8009288:	f3bf 8f4f 	dsb	sy
 800928c:	b662      	cpsie	i
 800928e:	60fb      	str	r3, [r7, #12]
 8009290:	e7fe      	b.n	8009290 <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009292:	693b      	ldr	r3, [r7, #16]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	2b00      	cmp	r3, #0
 8009298:	d00b      	beq.n	80092b2 <vPortFree+0x66>
 800929a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800929e:	b672      	cpsid	i
 80092a0:	f383 8811 	msr	BASEPRI, r3
 80092a4:	f3bf 8f6f 	isb	sy
 80092a8:	f3bf 8f4f 	dsb	sy
 80092ac:	b662      	cpsie	i
 80092ae:	60bb      	str	r3, [r7, #8]
 80092b0:	e7fe      	b.n	80092b0 <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80092b2:	693b      	ldr	r3, [r7, #16]
 80092b4:	685a      	ldr	r2, [r3, #4]
 80092b6:	4b11      	ldr	r3, [pc, #68]	; (80092fc <vPortFree+0xb0>)
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	4013      	ands	r3, r2
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d019      	beq.n	80092f4 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80092c0:	693b      	ldr	r3, [r7, #16]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d115      	bne.n	80092f4 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80092c8:	693b      	ldr	r3, [r7, #16]
 80092ca:	685a      	ldr	r2, [r3, #4]
 80092cc:	4b0b      	ldr	r3, [pc, #44]	; (80092fc <vPortFree+0xb0>)
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	43db      	mvns	r3, r3
 80092d2:	401a      	ands	r2, r3
 80092d4:	693b      	ldr	r3, [r7, #16]
 80092d6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80092d8:	f7fe faf8 	bl	80078cc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80092dc:	693b      	ldr	r3, [r7, #16]
 80092de:	685a      	ldr	r2, [r3, #4]
 80092e0:	4b07      	ldr	r3, [pc, #28]	; (8009300 <vPortFree+0xb4>)
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	4413      	add	r3, r2
 80092e6:	4a06      	ldr	r2, [pc, #24]	; (8009300 <vPortFree+0xb4>)
 80092e8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80092ea:	6938      	ldr	r0, [r7, #16]
 80092ec:	f000 f86c 	bl	80093c8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80092f0:	f7fe fafa 	bl	80078e8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80092f4:	bf00      	nop
 80092f6:	3718      	adds	r7, #24
 80092f8:	46bd      	mov	sp, r7
 80092fa:	bd80      	pop	{r7, pc}
 80092fc:	200045b0 	.word	0x200045b0
 8009300:	200045a8 	.word	0x200045a8

08009304 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009304:	b480      	push	{r7}
 8009306:	b085      	sub	sp, #20
 8009308:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800930a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800930e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009310:	4b27      	ldr	r3, [pc, #156]	; (80093b0 <prvHeapInit+0xac>)
 8009312:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	f003 0307 	and.w	r3, r3, #7
 800931a:	2b00      	cmp	r3, #0
 800931c:	d00c      	beq.n	8009338 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	3307      	adds	r3, #7
 8009322:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	f023 0307 	bic.w	r3, r3, #7
 800932a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800932c:	68ba      	ldr	r2, [r7, #8]
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	1ad3      	subs	r3, r2, r3
 8009332:	4a1f      	ldr	r2, [pc, #124]	; (80093b0 <prvHeapInit+0xac>)
 8009334:	4413      	add	r3, r2
 8009336:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800933c:	4a1d      	ldr	r2, [pc, #116]	; (80093b4 <prvHeapInit+0xb0>)
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009342:	4b1c      	ldr	r3, [pc, #112]	; (80093b4 <prvHeapInit+0xb0>)
 8009344:	2200      	movs	r2, #0
 8009346:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	68ba      	ldr	r2, [r7, #8]
 800934c:	4413      	add	r3, r2
 800934e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009350:	2208      	movs	r2, #8
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	1a9b      	subs	r3, r3, r2
 8009356:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	f023 0307 	bic.w	r3, r3, #7
 800935e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	4a15      	ldr	r2, [pc, #84]	; (80093b8 <prvHeapInit+0xb4>)
 8009364:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009366:	4b14      	ldr	r3, [pc, #80]	; (80093b8 <prvHeapInit+0xb4>)
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	2200      	movs	r2, #0
 800936c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800936e:	4b12      	ldr	r3, [pc, #72]	; (80093b8 <prvHeapInit+0xb4>)
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	2200      	movs	r2, #0
 8009374:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800937a:	683b      	ldr	r3, [r7, #0]
 800937c:	68fa      	ldr	r2, [r7, #12]
 800937e:	1ad2      	subs	r2, r2, r3
 8009380:	683b      	ldr	r3, [r7, #0]
 8009382:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009384:	4b0c      	ldr	r3, [pc, #48]	; (80093b8 <prvHeapInit+0xb4>)
 8009386:	681a      	ldr	r2, [r3, #0]
 8009388:	683b      	ldr	r3, [r7, #0]
 800938a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800938c:	683b      	ldr	r3, [r7, #0]
 800938e:	685b      	ldr	r3, [r3, #4]
 8009390:	4a0a      	ldr	r2, [pc, #40]	; (80093bc <prvHeapInit+0xb8>)
 8009392:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009394:	683b      	ldr	r3, [r7, #0]
 8009396:	685b      	ldr	r3, [r3, #4]
 8009398:	4a09      	ldr	r2, [pc, #36]	; (80093c0 <prvHeapInit+0xbc>)
 800939a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800939c:	4b09      	ldr	r3, [pc, #36]	; (80093c4 <prvHeapInit+0xc0>)
 800939e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80093a2:	601a      	str	r2, [r3, #0]
}
 80093a4:	bf00      	nop
 80093a6:	3714      	adds	r7, #20
 80093a8:	46bd      	mov	sp, r7
 80093aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ae:	4770      	bx	lr
 80093b0:	2000099c 	.word	0x2000099c
 80093b4:	2000459c 	.word	0x2000459c
 80093b8:	200045a4 	.word	0x200045a4
 80093bc:	200045ac 	.word	0x200045ac
 80093c0:	200045a8 	.word	0x200045a8
 80093c4:	200045b0 	.word	0x200045b0

080093c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80093c8:	b480      	push	{r7}
 80093ca:	b085      	sub	sp, #20
 80093cc:	af00      	add	r7, sp, #0
 80093ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80093d0:	4b28      	ldr	r3, [pc, #160]	; (8009474 <prvInsertBlockIntoFreeList+0xac>)
 80093d2:	60fb      	str	r3, [r7, #12]
 80093d4:	e002      	b.n	80093dc <prvInsertBlockIntoFreeList+0x14>
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	60fb      	str	r3, [r7, #12]
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	687a      	ldr	r2, [r7, #4]
 80093e2:	429a      	cmp	r2, r3
 80093e4:	d8f7      	bhi.n	80093d6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	685b      	ldr	r3, [r3, #4]
 80093ee:	68ba      	ldr	r2, [r7, #8]
 80093f0:	4413      	add	r3, r2
 80093f2:	687a      	ldr	r2, [r7, #4]
 80093f4:	429a      	cmp	r2, r3
 80093f6:	d108      	bne.n	800940a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	685a      	ldr	r2, [r3, #4]
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	685b      	ldr	r3, [r3, #4]
 8009400:	441a      	add	r2, r3
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	685b      	ldr	r3, [r3, #4]
 8009412:	68ba      	ldr	r2, [r7, #8]
 8009414:	441a      	add	r2, r3
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	429a      	cmp	r2, r3
 800941c:	d118      	bne.n	8009450 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	681a      	ldr	r2, [r3, #0]
 8009422:	4b15      	ldr	r3, [pc, #84]	; (8009478 <prvInsertBlockIntoFreeList+0xb0>)
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	429a      	cmp	r2, r3
 8009428:	d00d      	beq.n	8009446 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	685a      	ldr	r2, [r3, #4]
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	685b      	ldr	r3, [r3, #4]
 8009434:	441a      	add	r2, r3
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	681a      	ldr	r2, [r3, #0]
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	601a      	str	r2, [r3, #0]
 8009444:	e008      	b.n	8009458 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009446:	4b0c      	ldr	r3, [pc, #48]	; (8009478 <prvInsertBlockIntoFreeList+0xb0>)
 8009448:	681a      	ldr	r2, [r3, #0]
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	601a      	str	r2, [r3, #0]
 800944e:	e003      	b.n	8009458 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	681a      	ldr	r2, [r3, #0]
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009458:	68fa      	ldr	r2, [r7, #12]
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	429a      	cmp	r2, r3
 800945e:	d002      	beq.n	8009466 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	687a      	ldr	r2, [r7, #4]
 8009464:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009466:	bf00      	nop
 8009468:	3714      	adds	r7, #20
 800946a:	46bd      	mov	sp, r7
 800946c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009470:	4770      	bx	lr
 8009472:	bf00      	nop
 8009474:	2000459c 	.word	0x2000459c
 8009478:	200045a4 	.word	0x200045a4

0800947c <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 800947c:	b580      	push	{r7, lr}
 800947e:	b084      	sub	sp, #16
 8009480:	af00      	add	r7, sp, #0
 8009482:	6078      	str	r0, [r7, #4]
 8009484:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8009486:	683b      	ldr	r3, [r7, #0]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	330c      	adds	r3, #12
 800948c:	461a      	mov	r2, r3
 800948e:	6839      	ldr	r1, [r7, #0]
 8009490:	6878      	ldr	r0, [r7, #4]
 8009492:	f003 fad7 	bl	800ca44 <tcpip_send_msg_wait_sem>
 8009496:	4603      	mov	r3, r0
 8009498:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800949a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d103      	bne.n	80094aa <netconn_apimsg+0x2e>
    return apimsg->err;
 80094a2:	683b      	ldr	r3, [r7, #0]
 80094a4:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80094a8:	e001      	b.n	80094ae <netconn_apimsg+0x32>
  }
  return err;
 80094aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80094ae:	4618      	mov	r0, r3
 80094b0:	3710      	adds	r7, #16
 80094b2:	46bd      	mov	sp, r7
 80094b4:	bd80      	pop	{r7, pc}
	...

080094b8 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 80094b8:	b580      	push	{r7, lr}
 80094ba:	b08c      	sub	sp, #48	; 0x30
 80094bc:	af00      	add	r7, sp, #0
 80094be:	4603      	mov	r3, r0
 80094c0:	603a      	str	r2, [r7, #0]
 80094c2:	71fb      	strb	r3, [r7, #7]
 80094c4:	460b      	mov	r3, r1
 80094c6:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 80094c8:	79fb      	ldrb	r3, [r7, #7]
 80094ca:	6839      	ldr	r1, [r7, #0]
 80094cc:	4618      	mov	r0, r3
 80094ce:	f001 f8b3 	bl	800a638 <netconn_alloc>
 80094d2:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (conn != NULL) {
 80094d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d054      	beq.n	8009584 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 80094da:	79bb      	ldrb	r3, [r7, #6]
 80094dc:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 80094de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094e0:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 80094e2:	f107 0308 	add.w	r3, r7, #8
 80094e6:	4619      	mov	r1, r3
 80094e8:	4829      	ldr	r0, [pc, #164]	; (8009590 <netconn_new_with_proto_and_callback+0xd8>)
 80094ea:	f7ff ffc7 	bl	800947c <netconn_apimsg>
 80094ee:	4603      	mov	r3, r0
 80094f0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (err != ERR_OK) {
 80094f4:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d043      	beq.n	8009584 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 80094fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094fe:	685b      	ldr	r3, [r3, #4]
 8009500:	2b00      	cmp	r3, #0
 8009502:	d005      	beq.n	8009510 <netconn_new_with_proto_and_callback+0x58>
 8009504:	4b23      	ldr	r3, [pc, #140]	; (8009594 <netconn_new_with_proto_and_callback+0xdc>)
 8009506:	22a3      	movs	r2, #163	; 0xa3
 8009508:	4923      	ldr	r1, [pc, #140]	; (8009598 <netconn_new_with_proto_and_callback+0xe0>)
 800950a:	4824      	ldr	r0, [pc, #144]	; (800959c <netconn_new_with_proto_and_callback+0xe4>)
 800950c:	f00e f854 	bl	80175b8 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 8009510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009512:	3310      	adds	r3, #16
 8009514:	4618      	mov	r0, r3
 8009516:	f00d febc 	bl	8017292 <sys_mbox_valid>
 800951a:	4603      	mov	r3, r0
 800951c:	2b00      	cmp	r3, #0
 800951e:	d105      	bne.n	800952c <netconn_new_with_proto_and_callback+0x74>
 8009520:	4b1c      	ldr	r3, [pc, #112]	; (8009594 <netconn_new_with_proto_and_callback+0xdc>)
 8009522:	22a4      	movs	r2, #164	; 0xa4
 8009524:	491e      	ldr	r1, [pc, #120]	; (80095a0 <netconn_new_with_proto_and_callback+0xe8>)
 8009526:	481d      	ldr	r0, [pc, #116]	; (800959c <netconn_new_with_proto_and_callback+0xe4>)
 8009528:	f00e f846 	bl	80175b8 <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 800952c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800952e:	3314      	adds	r3, #20
 8009530:	4618      	mov	r0, r3
 8009532:	f00d feae 	bl	8017292 <sys_mbox_valid>
 8009536:	4603      	mov	r3, r0
 8009538:	2b00      	cmp	r3, #0
 800953a:	d005      	beq.n	8009548 <netconn_new_with_proto_and_callback+0x90>
 800953c:	4b15      	ldr	r3, [pc, #84]	; (8009594 <netconn_new_with_proto_and_callback+0xdc>)
 800953e:	22a6      	movs	r2, #166	; 0xa6
 8009540:	4918      	ldr	r1, [pc, #96]	; (80095a4 <netconn_new_with_proto_and_callback+0xec>)
 8009542:	4816      	ldr	r0, [pc, #88]	; (800959c <netconn_new_with_proto_and_callback+0xe4>)
 8009544:	f00e f838 	bl	80175b8 <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 8009548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800954a:	330c      	adds	r3, #12
 800954c:	4618      	mov	r0, r3
 800954e:	f00d ff31 	bl	80173b4 <sys_sem_valid>
 8009552:	4603      	mov	r3, r0
 8009554:	2b00      	cmp	r3, #0
 8009556:	d105      	bne.n	8009564 <netconn_new_with_proto_and_callback+0xac>
 8009558:	4b0e      	ldr	r3, [pc, #56]	; (8009594 <netconn_new_with_proto_and_callback+0xdc>)
 800955a:	22a9      	movs	r2, #169	; 0xa9
 800955c:	4912      	ldr	r1, [pc, #72]	; (80095a8 <netconn_new_with_proto_and_callback+0xf0>)
 800955e:	480f      	ldr	r0, [pc, #60]	; (800959c <netconn_new_with_proto_and_callback+0xe4>)
 8009560:	f00e f82a 	bl	80175b8 <iprintf>
      sys_sem_free(&conn->op_completed);
 8009564:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009566:	330c      	adds	r3, #12
 8009568:	4618      	mov	r0, r3
 800956a:	f00d ff16 	bl	801739a <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 800956e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009570:	3310      	adds	r3, #16
 8009572:	4618      	mov	r0, r3
 8009574:	f00d fe06 	bl	8017184 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 8009578:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800957a:	2006      	movs	r0, #6
 800957c:	f003 ffc8 	bl	800d510 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 8009580:	2300      	movs	r3, #0
 8009582:	e000      	b.n	8009586 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 8009584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8009586:	4618      	mov	r0, r3
 8009588:	3730      	adds	r7, #48	; 0x30
 800958a:	46bd      	mov	sp, r7
 800958c:	bd80      	pop	{r7, pc}
 800958e:	bf00      	nop
 8009590:	0800a60d 	.word	0x0800a60d
 8009594:	080185cc 	.word	0x080185cc
 8009598:	08018600 	.word	0x08018600
 800959c:	08018624 	.word	0x08018624
 80095a0:	0801864c 	.word	0x0801864c
 80095a4:	08018664 	.word	0x08018664
 80095a8:	08018688 	.word	0x08018688

080095ac <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 80095ac:	b580      	push	{r7, lr}
 80095ae:	b08c      	sub	sp, #48	; 0x30
 80095b0:	af00      	add	r7, sp, #0
 80095b2:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d101      	bne.n	80095be <netconn_prepare_delete+0x12>
    return ERR_OK;
 80095ba:	2300      	movs	r3, #0
 80095bc:	e014      	b.n	80095e8 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 80095c2:	2329      	movs	r3, #41	; 0x29
 80095c4:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 80095c6:	f107 030c 	add.w	r3, r7, #12
 80095ca:	4619      	mov	r1, r3
 80095cc:	4808      	ldr	r0, [pc, #32]	; (80095f0 <netconn_prepare_delete+0x44>)
 80095ce:	f7ff ff55 	bl	800947c <netconn_apimsg>
 80095d2:	4603      	mov	r3, r0
 80095d4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 80095d8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d002      	beq.n	80095e6 <netconn_prepare_delete+0x3a>
    return err;
 80095e0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80095e4:	e000      	b.n	80095e8 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 80095e6:	2300      	movs	r3, #0
}
 80095e8:	4618      	mov	r0, r3
 80095ea:	3730      	adds	r7, #48	; 0x30
 80095ec:	46bd      	mov	sp, r7
 80095ee:	bd80      	pop	{r7, pc}
 80095f0:	0800ab69 	.word	0x0800ab69

080095f4 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 80095f4:	b580      	push	{r7, lr}
 80095f6:	b084      	sub	sp, #16
 80095f8:	af00      	add	r7, sp, #0
 80095fa:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d101      	bne.n	8009606 <netconn_delete+0x12>
    return ERR_OK;
 8009602:	2300      	movs	r3, #0
 8009604:	e00d      	b.n	8009622 <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 8009606:	6878      	ldr	r0, [r7, #4]
 8009608:	f7ff ffd0 	bl	80095ac <netconn_prepare_delete>
 800960c:	4603      	mov	r3, r0
 800960e:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 8009610:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009614:	2b00      	cmp	r3, #0
 8009616:	d102      	bne.n	800961e <netconn_delete+0x2a>
    netconn_free(conn);
 8009618:	6878      	ldr	r0, [r7, #4]
 800961a:	f001 f877 	bl	800a70c <netconn_free>
  }
  return err;
 800961e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009622:	4618      	mov	r0, r3
 8009624:	3710      	adds	r7, #16
 8009626:	46bd      	mov	sp, r7
 8009628:	bd80      	pop	{r7, pc}
	...

0800962c <netconn_getaddr>:
 * @return ERR_CONN for invalid connections
 *         ERR_OK if the information was retrieved
 */
err_t
netconn_getaddr(struct netconn *conn, ip_addr_t *addr, u16_t *port, u8_t local)
{
 800962c:	b580      	push	{r7, lr}
 800962e:	b08e      	sub	sp, #56	; 0x38
 8009630:	af00      	add	r7, sp, #0
 8009632:	60f8      	str	r0, [r7, #12]
 8009634:	60b9      	str	r1, [r7, #8]
 8009636:	607a      	str	r2, [r7, #4]
 8009638:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_getaddr: invalid conn", (conn != NULL), return ERR_ARG;);
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	2b00      	cmp	r3, #0
 800963e:	d109      	bne.n	8009654 <netconn_getaddr+0x28>
 8009640:	4b1d      	ldr	r3, [pc, #116]	; (80096b8 <netconn_getaddr+0x8c>)
 8009642:	f44f 7289 	mov.w	r2, #274	; 0x112
 8009646:	491d      	ldr	r1, [pc, #116]	; (80096bc <netconn_getaddr+0x90>)
 8009648:	481d      	ldr	r0, [pc, #116]	; (80096c0 <netconn_getaddr+0x94>)
 800964a:	f00d ffb5 	bl	80175b8 <iprintf>
 800964e:	f06f 030f 	mvn.w	r3, #15
 8009652:	e02d      	b.n	80096b0 <netconn_getaddr+0x84>
  LWIP_ERROR("netconn_getaddr: invalid addr", (addr != NULL), return ERR_ARG;);
 8009654:	68bb      	ldr	r3, [r7, #8]
 8009656:	2b00      	cmp	r3, #0
 8009658:	d109      	bne.n	800966e <netconn_getaddr+0x42>
 800965a:	4b17      	ldr	r3, [pc, #92]	; (80096b8 <netconn_getaddr+0x8c>)
 800965c:	f240 1213 	movw	r2, #275	; 0x113
 8009660:	4918      	ldr	r1, [pc, #96]	; (80096c4 <netconn_getaddr+0x98>)
 8009662:	4817      	ldr	r0, [pc, #92]	; (80096c0 <netconn_getaddr+0x94>)
 8009664:	f00d ffa8 	bl	80175b8 <iprintf>
 8009668:	f06f 030f 	mvn.w	r3, #15
 800966c:	e020      	b.n	80096b0 <netconn_getaddr+0x84>
  LWIP_ERROR("netconn_getaddr: invalid port", (port != NULL), return ERR_ARG;);
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	2b00      	cmp	r3, #0
 8009672:	d109      	bne.n	8009688 <netconn_getaddr+0x5c>
 8009674:	4b10      	ldr	r3, [pc, #64]	; (80096b8 <netconn_getaddr+0x8c>)
 8009676:	f44f 728a 	mov.w	r2, #276	; 0x114
 800967a:	4913      	ldr	r1, [pc, #76]	; (80096c8 <netconn_getaddr+0x9c>)
 800967c:	4810      	ldr	r0, [pc, #64]	; (80096c0 <netconn_getaddr+0x94>)
 800967e:	f00d ff9b 	bl	80175b8 <iprintf>
 8009682:	f06f 030f 	mvn.w	r3, #15
 8009686:	e013      	b.n	80096b0 <netconn_getaddr+0x84>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.ad.local = local;
 800968c:	78fb      	ldrb	r3, [r7, #3]
 800968e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
#if LWIP_MPU_COMPATIBLE
  err = netconn_apimsg(lwip_netconn_do_getaddr, &API_MSG_VAR_REF(msg));
  *addr = msg->msg.ad.ipaddr;
  *port = msg->msg.ad.port;
#else /* LWIP_MPU_COMPATIBLE */
  msg.msg.ad.ipaddr = addr;
 8009692:	68bb      	ldr	r3, [r7, #8]
 8009694:	61fb      	str	r3, [r7, #28]
  msg.msg.ad.port = port;
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	623b      	str	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_getaddr, &msg);
 800969a:	f107 0314 	add.w	r3, r7, #20
 800969e:	4619      	mov	r1, r3
 80096a0:	480a      	ldr	r0, [pc, #40]	; (80096cc <netconn_getaddr+0xa0>)
 80096a2:	f7ff feeb 	bl	800947c <netconn_apimsg>
 80096a6:	4603      	mov	r3, r0
 80096a8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
#endif /* LWIP_MPU_COMPATIBLE */
  API_MSG_VAR_FREE(msg);

  return err;
 80096ac:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 80096b0:	4618      	mov	r0, r3
 80096b2:	3738      	adds	r7, #56	; 0x38
 80096b4:	46bd      	mov	sp, r7
 80096b6:	bd80      	pop	{r7, pc}
 80096b8:	080185cc 	.word	0x080185cc
 80096bc:	080186a4 	.word	0x080186a4
 80096c0:	08018624 	.word	0x08018624
 80096c4:	080186c4 	.word	0x080186c4
 80096c8:	080186e4 	.word	0x080186e4
 80096cc:	0800b3b5 	.word	0x0800b3b5

080096d0 <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 80096d0:	b580      	push	{r7, lr}
 80096d2:	b08e      	sub	sp, #56	; 0x38
 80096d4:	af00      	add	r7, sp, #0
 80096d6:	60f8      	str	r0, [r7, #12]
 80096d8:	60b9      	str	r1, [r7, #8]
 80096da:	4613      	mov	r3, r2
 80096dc:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d109      	bne.n	80096f8 <netconn_bind+0x28>
 80096e4:	4b11      	ldr	r3, [pc, #68]	; (800972c <netconn_bind+0x5c>)
 80096e6:	f44f 729c 	mov.w	r2, #312	; 0x138
 80096ea:	4911      	ldr	r1, [pc, #68]	; (8009730 <netconn_bind+0x60>)
 80096ec:	4811      	ldr	r0, [pc, #68]	; (8009734 <netconn_bind+0x64>)
 80096ee:	f00d ff63 	bl	80175b8 <iprintf>
 80096f2:	f06f 030f 	mvn.w	r3, #15
 80096f6:	e015      	b.n	8009724 <netconn_bind+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 80096f8:	68bb      	ldr	r3, [r7, #8]
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d101      	bne.n	8009702 <netconn_bind+0x32>
    addr = IP4_ADDR_ANY;
 80096fe:	4b0e      	ldr	r3, [pc, #56]	; (8009738 <netconn_bind+0x68>)
 8009700:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 8009706:	68bb      	ldr	r3, [r7, #8]
 8009708:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 800970a:	88fb      	ldrh	r3, [r7, #6]
 800970c:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 800970e:	f107 0314 	add.w	r3, r7, #20
 8009712:	4619      	mov	r1, r3
 8009714:	4809      	ldr	r0, [pc, #36]	; (800973c <netconn_bind+0x6c>)
 8009716:	f7ff feb1 	bl	800947c <netconn_apimsg>
 800971a:	4603      	mov	r3, r0
 800971c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 8009720:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8009724:	4618      	mov	r0, r3
 8009726:	3738      	adds	r7, #56	; 0x38
 8009728:	46bd      	mov	sp, r7
 800972a:	bd80      	pop	{r7, pc}
 800972c:	080185cc 	.word	0x080185cc
 8009730:	08018704 	.word	0x08018704
 8009734:	08018624 	.word	0x08018624
 8009738:	0801ba3c 	.word	0x0801ba3c
 800973c:	0800ad15 	.word	0x0800ad15

08009740 <netconn_listen_with_backlog>:
 * @return ERR_OK if the netconn was set to listen (UDP and RAW netconns
 *         don't return any error (yet?))
 */
err_t
netconn_listen_with_backlog(struct netconn *conn, u8_t backlog)
{
 8009740:	b580      	push	{r7, lr}
 8009742:	b08c      	sub	sp, #48	; 0x30
 8009744:	af00      	add	r7, sp, #0
 8009746:	6078      	str	r0, [r7, #4]
 8009748:	460b      	mov	r3, r1
 800974a:	70fb      	strb	r3, [r7, #3]
  err_t err;

  /* This does no harm. If TCP_LISTEN_BACKLOG is off, backlog is unused. */
  LWIP_UNUSED_ARG(backlog);

  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	2b00      	cmp	r3, #0
 8009750:	d109      	bne.n	8009766 <netconn_listen_with_backlog+0x26>
 8009752:	4b0d      	ldr	r3, [pc, #52]	; (8009788 <netconn_listen_with_backlog+0x48>)
 8009754:	f240 12bb 	movw	r2, #443	; 0x1bb
 8009758:	490c      	ldr	r1, [pc, #48]	; (800978c <netconn_listen_with_backlog+0x4c>)
 800975a:	480d      	ldr	r0, [pc, #52]	; (8009790 <netconn_listen_with_backlog+0x50>)
 800975c:	f00d ff2c 	bl	80175b8 <iprintf>
 8009760:	f06f 030f 	mvn.w	r3, #15
 8009764:	e00c      	b.n	8009780 <netconn_listen_with_backlog+0x40>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	60fb      	str	r3, [r7, #12]
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_REF(msg).msg.lb.backlog = backlog;
#endif /* TCP_LISTEN_BACKLOG */
  err = netconn_apimsg(lwip_netconn_do_listen, &API_MSG_VAR_REF(msg));
 800976a:	f107 030c 	add.w	r3, r7, #12
 800976e:	4619      	mov	r1, r3
 8009770:	4808      	ldr	r0, [pc, #32]	; (8009794 <netconn_listen_with_backlog+0x54>)
 8009772:	f7ff fe83 	bl	800947c <netconn_apimsg>
 8009776:	4603      	mov	r3, r0
 8009778:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800977c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(backlog);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 8009780:	4618      	mov	r0, r3
 8009782:	3730      	adds	r7, #48	; 0x30
 8009784:	46bd      	mov	sp, r7
 8009786:	bd80      	pop	{r7, pc}
 8009788:	080185cc 	.word	0x080185cc
 800978c:	08018784 	.word	0x08018784
 8009790:	08018624 	.word	0x08018624
 8009794:	0800ad6d 	.word	0x0800ad6d

08009798 <netconn_accept>:
 * @return ERR_OK if a new connection has been received or an error
 *                code otherwise
 */
err_t
netconn_accept(struct netconn *conn, struct netconn **new_conn)
{
 8009798:	b580      	push	{r7, lr}
 800979a:	b086      	sub	sp, #24
 800979c:	af00      	add	r7, sp, #0
 800979e:	6078      	str	r0, [r7, #4]
 80097a0:	6039      	str	r1, [r7, #0]
  struct netconn *newconn;
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_DECLARE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 80097a2:	683b      	ldr	r3, [r7, #0]
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d109      	bne.n	80097bc <netconn_accept+0x24>
 80097a8:	4b3d      	ldr	r3, [pc, #244]	; (80098a0 <netconn_accept+0x108>)
 80097aa:	f240 12e1 	movw	r2, #481	; 0x1e1
 80097ae:	493d      	ldr	r1, [pc, #244]	; (80098a4 <netconn_accept+0x10c>)
 80097b0:	483d      	ldr	r0, [pc, #244]	; (80098a8 <netconn_accept+0x110>)
 80097b2:	f00d ff01 	bl	80175b8 <iprintf>
 80097b6:	f06f 030f 	mvn.w	r3, #15
 80097ba:	e06c      	b.n	8009896 <netconn_accept+0xfe>
  *new_conn = NULL;
 80097bc:	683b      	ldr	r3, [r7, #0]
 80097be:	2200      	movs	r2, #0
 80097c0:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d109      	bne.n	80097dc <netconn_accept+0x44>
 80097c8:	4b35      	ldr	r3, [pc, #212]	; (80098a0 <netconn_accept+0x108>)
 80097ca:	f240 12e3 	movw	r2, #483	; 0x1e3
 80097ce:	4937      	ldr	r1, [pc, #220]	; (80098ac <netconn_accept+0x114>)
 80097d0:	4835      	ldr	r0, [pc, #212]	; (80098a8 <netconn_accept+0x110>)
 80097d2:	f00d fef1 	bl	80175b8 <iprintf>
 80097d6:	f06f 030f 	mvn.w	r3, #15
 80097da:	e05c      	b.n	8009896 <netconn_accept+0xfe>

  /* NOTE: Although the opengroup spec says a pending error shall be returned to
           send/recv/getsockopt(SO_ERROR) only, we return it for listening
           connections also, to handle embedded-system errors */
  err = netconn_err(conn);
 80097dc:	6878      	ldr	r0, [r7, #4]
 80097de:	f000 fb53 	bl	8009e88 <netconn_err>
 80097e2:	4603      	mov	r3, r0
 80097e4:	74fb      	strb	r3, [r7, #19]
  if (err != ERR_OK) {
 80097e6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d002      	beq.n	80097f4 <netconn_accept+0x5c>
    /* return pending error */
    return err;
 80097ee:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80097f2:	e050      	b.n	8009896 <netconn_accept+0xfe>
  }
  if (!NETCONN_ACCEPTMBOX_WAITABLE(conn)) {
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	3314      	adds	r3, #20
 80097f8:	4618      	mov	r0, r3
 80097fa:	f00d fd4a 	bl	8017292 <sys_mbox_valid>
 80097fe:	4603      	mov	r3, r0
 8009800:	2b00      	cmp	r3, #0
 8009802:	d005      	beq.n	8009810 <netconn_accept+0x78>
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	7f1b      	ldrb	r3, [r3, #28]
 8009808:	f003 0301 	and.w	r3, r3, #1
 800980c:	2b00      	cmp	r3, #0
 800980e:	d002      	beq.n	8009816 <netconn_accept+0x7e>
    /* don't accept if closed: this might block the application task
       waiting on acceptmbox forever! */
    return ERR_CLSD;
 8009810:	f06f 030e 	mvn.w	r3, #14
 8009814:	e03f      	b.n	8009896 <netconn_accept+0xfe>
  }

  API_MSG_VAR_ALLOC_ACCEPT(msg);

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn)) {
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	7f1b      	ldrb	r3, [r3, #28]
 800981a:	f003 0302 	and.w	r3, r3, #2
 800981e:	2b00      	cmp	r3, #0
 8009820:	d00e      	beq.n	8009840 <netconn_accept+0xa8>
    if (sys_arch_mbox_tryfetch(&conn->acceptmbox, &accept_ptr) == SYS_ARCH_TIMEOUT) {
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	3314      	adds	r3, #20
 8009826:	f107 020c 	add.w	r2, r7, #12
 800982a:	4611      	mov	r1, r2
 800982c:	4618      	mov	r0, r3
 800982e:	f00d fd14 	bl	801725a <sys_arch_mbox_tryfetch>
 8009832:	4603      	mov	r3, r0
 8009834:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009838:	d10a      	bne.n	8009850 <netconn_accept+0xb8>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_WOULDBLOCK;
 800983a:	f06f 0306 	mvn.w	r3, #6
 800983e:	e02a      	b.n	8009896 <netconn_accept+0xfe>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, 0);
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	3314      	adds	r3, #20
 8009844:	f107 010c 	add.w	r1, r7, #12
 8009848:	2200      	movs	r2, #0
 800984a:	4618      	mov	r0, r3
 800984c:	f00d fcc6 	bl	80171dc <sys_arch_mbox_fetch>
    }
  }
#endif

  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009854:	2b00      	cmp	r3, #0
 8009856:	d005      	beq.n	8009864 <netconn_accept+0xcc>
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800985c:	2200      	movs	r2, #0
 800985e:	2101      	movs	r1, #1
 8009860:	6878      	ldr	r0, [r7, #4]
 8009862:	4798      	blx	r3

  if (lwip_netconn_is_err_msg(accept_ptr, &err)) {
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	f107 0213 	add.w	r2, r7, #19
 800986a:	4611      	mov	r1, r2
 800986c:	4618      	mov	r0, r3
 800986e:	f000 fb59 	bl	8009f24 <lwip_netconn_is_err_msg>
 8009872:	4603      	mov	r3, r0
 8009874:	2b00      	cmp	r3, #0
 8009876:	d002      	beq.n	800987e <netconn_accept+0xe6>
    /* a connection has been aborted: e.g. out of pcbs or out of netconns during accept */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return err;
 8009878:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800987c:	e00b      	b.n	8009896 <netconn_accept+0xfe>
  }
  if (accept_ptr == NULL) {
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	2b00      	cmp	r3, #0
 8009882:	d102      	bne.n	800988a <netconn_accept+0xf2>
    /* connection has been aborted */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return ERR_CLSD;
 8009884:	f06f 030e 	mvn.w	r3, #14
 8009888:	e005      	b.n	8009896 <netconn_accept+0xfe>
  }
  newconn = (struct netconn *)accept_ptr;
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	617b      	str	r3, [r7, #20]
  /* don't care for the return value of lwip_netconn_do_recv */
  netconn_apimsg(lwip_netconn_do_accepted, &API_MSG_VAR_REF(msg));
  API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  *new_conn = newconn;
 800988e:	683b      	ldr	r3, [r7, #0]
 8009890:	697a      	ldr	r2, [r7, #20]
 8009892:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 8009894:	2300      	movs	r3, #0
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(new_conn);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 8009896:	4618      	mov	r0, r3
 8009898:	3718      	adds	r7, #24
 800989a:	46bd      	mov	sp, r7
 800989c:	bd80      	pop	{r7, pc}
 800989e:	bf00      	nop
 80098a0:	080185cc 	.word	0x080185cc
 80098a4:	080187a4 	.word	0x080187a4
 80098a8:	08018624 	.word	0x08018624
 80098ac:	080187c4 	.word	0x080187c4

080098b0 <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 80098b0:	b580      	push	{r7, lr}
 80098b2:	b088      	sub	sp, #32
 80098b4:	af00      	add	r7, sp, #0
 80098b6:	60f8      	str	r0, [r7, #12]
 80098b8:	60b9      	str	r1, [r7, #8]
 80098ba:	4613      	mov	r3, r2
 80098bc:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 80098be:	2300      	movs	r3, #0
 80098c0:	617b      	str	r3, [r7, #20]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 80098c2:	68bb      	ldr	r3, [r7, #8]
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d109      	bne.n	80098dc <netconn_recv_data+0x2c>
 80098c8:	4b4d      	ldr	r3, [pc, #308]	; (8009a00 <netconn_recv_data+0x150>)
 80098ca:	f44f 7212 	mov.w	r2, #584	; 0x248
 80098ce:	494d      	ldr	r1, [pc, #308]	; (8009a04 <netconn_recv_data+0x154>)
 80098d0:	484d      	ldr	r0, [pc, #308]	; (8009a08 <netconn_recv_data+0x158>)
 80098d2:	f00d fe71 	bl	80175b8 <iprintf>
 80098d6:	f06f 030f 	mvn.w	r3, #15
 80098da:	e08d      	b.n	80099f8 <netconn_recv_data+0x148>
  *new_buf = NULL;
 80098dc:	68bb      	ldr	r3, [r7, #8]
 80098de:	2200      	movs	r2, #0
 80098e0:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d109      	bne.n	80098fc <netconn_recv_data+0x4c>
 80098e8:	4b45      	ldr	r3, [pc, #276]	; (8009a00 <netconn_recv_data+0x150>)
 80098ea:	f240 224a 	movw	r2, #586	; 0x24a
 80098ee:	4947      	ldr	r1, [pc, #284]	; (8009a0c <netconn_recv_data+0x15c>)
 80098f0:	4845      	ldr	r0, [pc, #276]	; (8009a08 <netconn_recv_data+0x158>)
 80098f2:	f00d fe61 	bl	80175b8 <iprintf>
 80098f6:	f06f 030f 	mvn.w	r3, #15
 80098fa:	e07d      	b.n	80099f8 <netconn_recv_data+0x148>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	3310      	adds	r3, #16
 8009900:	4618      	mov	r0, r3
 8009902:	f00d fcc6 	bl	8017292 <sys_mbox_valid>
 8009906:	4603      	mov	r3, r0
 8009908:	2b00      	cmp	r3, #0
 800990a:	d10e      	bne.n	800992a <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 800990c:	68f8      	ldr	r0, [r7, #12]
 800990e:	f000 fabb 	bl	8009e88 <netconn_err>
 8009912:	4603      	mov	r3, r0
 8009914:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 8009916:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800991a:	2b00      	cmp	r3, #0
 800991c:	d002      	beq.n	8009924 <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 800991e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8009922:	e069      	b.n	80099f8 <netconn_recv_data+0x148>
    }
    return ERR_CONN;
 8009924:	f06f 030a 	mvn.w	r3, #10
 8009928:	e066      	b.n	80099f8 <netconn_recv_data+0x148>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	7f1b      	ldrb	r3, [r3, #28]
 800992e:	f003 0302 	and.w	r3, r3, #2
 8009932:	2b00      	cmp	r3, #0
 8009934:	d10f      	bne.n	8009956 <netconn_recv_data+0xa6>
 8009936:	79fb      	ldrb	r3, [r7, #7]
 8009938:	f003 0304 	and.w	r3, r3, #4
 800993c:	2b00      	cmp	r3, #0
 800993e:	d10a      	bne.n	8009956 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	7f1b      	ldrb	r3, [r3, #28]
 8009944:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 8009948:	2b00      	cmp	r3, #0
 800994a:	d104      	bne.n	8009956 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8009952:	2b00      	cmp	r3, #0
 8009954:	d023      	beq.n	800999e <netconn_recv_data+0xee>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	3310      	adds	r3, #16
 800995a:	f107 0214 	add.w	r2, r7, #20
 800995e:	4611      	mov	r1, r2
 8009960:	4618      	mov	r0, r3
 8009962:	f00d fc7a 	bl	801725a <sys_arch_mbox_tryfetch>
 8009966:	4603      	mov	r3, r0
 8009968:	f1b3 3fff 	cmp.w	r3, #4294967295
 800996c:	d11f      	bne.n	80099ae <netconn_recv_data+0xfe>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 800996e:	68f8      	ldr	r0, [r7, #12]
 8009970:	f000 fa8a 	bl	8009e88 <netconn_err>
 8009974:	4603      	mov	r3, r0
 8009976:	77fb      	strb	r3, [r7, #31]
      if (err != ERR_OK) {
 8009978:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800997c:	2b00      	cmp	r3, #0
 800997e:	d002      	beq.n	8009986 <netconn_recv_data+0xd6>
        /* return pending error */
        return err;
 8009980:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009984:	e038      	b.n	80099f8 <netconn_recv_data+0x148>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	7f1b      	ldrb	r3, [r3, #28]
 800998a:	f003 0301 	and.w	r3, r3, #1
 800998e:	2b00      	cmp	r3, #0
 8009990:	d002      	beq.n	8009998 <netconn_recv_data+0xe8>
        return ERR_CONN;
 8009992:	f06f 030a 	mvn.w	r3, #10
 8009996:	e02f      	b.n	80099f8 <netconn_recv_data+0x148>
      }
      return ERR_WOULDBLOCK;
 8009998:	f06f 0306 	mvn.w	r3, #6
 800999c:	e02c      	b.n	80099f8 <netconn_recv_data+0x148>
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	3310      	adds	r3, #16
 80099a2:	f107 0114 	add.w	r1, r7, #20
 80099a6:	2200      	movs	r2, #0
 80099a8:	4618      	mov	r0, r3
 80099aa:	f00d fc17 	bl	80171dc <sys_arch_mbox_fetch>
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 80099ae:	697b      	ldr	r3, [r7, #20]
 80099b0:	f107 0213 	add.w	r2, r7, #19
 80099b4:	4611      	mov	r1, r2
 80099b6:	4618      	mov	r0, r3
 80099b8:	f000 fab4 	bl	8009f24 <lwip_netconn_is_err_msg>
 80099bc:	4603      	mov	r3, r0
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d009      	beq.n	80099d6 <netconn_recv_data+0x126>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 80099c2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80099c6:	f113 0f0f 	cmn.w	r3, #15
 80099ca:	d101      	bne.n	80099d0 <netconn_recv_data+0x120>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 80099cc:	2300      	movs	r3, #0
 80099ce:	e013      	b.n	80099f8 <netconn_recv_data+0x148>
      }
      return err;
 80099d0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80099d4:	e010      	b.n	80099f8 <netconn_recv_data+0x148>
    }
    len = ((struct pbuf *)buf)->tot_len;
 80099d6:	697b      	ldr	r3, [r7, #20]
 80099d8:	891b      	ldrh	r3, [r3, #8]
 80099da:	83bb      	strh	r3, [r7, #28]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d005      	beq.n	80099f0 <netconn_recv_data+0x140>
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099e8:	8bba      	ldrh	r2, [r7, #28]
 80099ea:	2101      	movs	r1, #1
 80099ec:	68f8      	ldr	r0, [r7, #12]
 80099ee:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 80099f0:	697a      	ldr	r2, [r7, #20]
 80099f2:	68bb      	ldr	r3, [r7, #8]
 80099f4:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 80099f6:	2300      	movs	r3, #0
}
 80099f8:	4618      	mov	r0, r3
 80099fa:	3720      	adds	r7, #32
 80099fc:	46bd      	mov	sp, r7
 80099fe:	bd80      	pop	{r7, pc}
 8009a00:	080185cc 	.word	0x080185cc
 8009a04:	080187e4 	.word	0x080187e4
 8009a08:	08018624 	.word	0x08018624
 8009a0c:	08018804 	.word	0x08018804

08009a10 <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 8009a10:	b580      	push	{r7, lr}
 8009a12:	b084      	sub	sp, #16
 8009a14:	af00      	add	r7, sp, #0
 8009a16:	60f8      	str	r0, [r7, #12]
 8009a18:	60b9      	str	r1, [r7, #8]
 8009a1a:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d005      	beq.n	8009a2e <netconn_tcp_recvd_msg+0x1e>
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	781b      	ldrb	r3, [r3, #0]
 8009a26:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009a2a:	2b10      	cmp	r3, #16
 8009a2c:	d009      	beq.n	8009a42 <netconn_tcp_recvd_msg+0x32>
 8009a2e:	4b0c      	ldr	r3, [pc, #48]	; (8009a60 <netconn_tcp_recvd_msg+0x50>)
 8009a30:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8009a34:	490b      	ldr	r1, [pc, #44]	; (8009a64 <netconn_tcp_recvd_msg+0x54>)
 8009a36:	480c      	ldr	r0, [pc, #48]	; (8009a68 <netconn_tcp_recvd_msg+0x58>)
 8009a38:	f00d fdbe 	bl	80175b8 <iprintf>
 8009a3c:	f06f 030f 	mvn.w	r3, #15
 8009a40:	e00a      	b.n	8009a58 <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	68fa      	ldr	r2, [r7, #12]
 8009a46:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	68ba      	ldr	r2, [r7, #8]
 8009a4c:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 8009a4e:	6879      	ldr	r1, [r7, #4]
 8009a50:	4806      	ldr	r0, [pc, #24]	; (8009a6c <netconn_tcp_recvd_msg+0x5c>)
 8009a52:	f7ff fd13 	bl	800947c <netconn_apimsg>
 8009a56:	4603      	mov	r3, r0
}
 8009a58:	4618      	mov	r0, r3
 8009a5a:	3710      	adds	r7, #16
 8009a5c:	46bd      	mov	sp, r7
 8009a5e:	bd80      	pop	{r7, pc}
 8009a60:	080185cc 	.word	0x080185cc
 8009a64:	08018820 	.word	0x08018820
 8009a68:	08018624 	.word	0x08018624
 8009a6c:	0800ae9d 	.word	0x0800ae9d

08009a70 <netconn_tcp_recvd>:

err_t
netconn_tcp_recvd(struct netconn *conn, size_t len)
{
 8009a70:	b580      	push	{r7, lr}
 8009a72:	b08c      	sub	sp, #48	; 0x30
 8009a74:	af00      	add	r7, sp, #0
 8009a76:	6078      	str	r0, [r7, #4]
 8009a78:	6039      	str	r1, [r7, #0]
  err_t err;
  API_MSG_VAR_DECLARE(msg);
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d005      	beq.n	8009a8c <netconn_tcp_recvd+0x1c>
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	781b      	ldrb	r3, [r3, #0]
 8009a84:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009a88:	2b10      	cmp	r3, #16
 8009a8a:	d009      	beq.n	8009aa0 <netconn_tcp_recvd+0x30>
 8009a8c:	4b0c      	ldr	r3, [pc, #48]	; (8009ac0 <netconn_tcp_recvd+0x50>)
 8009a8e:	f240 22b6 	movw	r2, #694	; 0x2b6
 8009a92:	490c      	ldr	r1, [pc, #48]	; (8009ac4 <netconn_tcp_recvd+0x54>)
 8009a94:	480c      	ldr	r0, [pc, #48]	; (8009ac8 <netconn_tcp_recvd+0x58>)
 8009a96:	f00d fd8f 	bl	80175b8 <iprintf>
 8009a9a:	f06f 030f 	mvn.w	r3, #15
 8009a9e:	e00b      	b.n	8009ab8 <netconn_tcp_recvd+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  API_MSG_VAR_ALLOC(msg);
  err = netconn_tcp_recvd_msg(conn, len, &API_VAR_REF(msg));
 8009aa0:	f107 030c 	add.w	r3, r7, #12
 8009aa4:	461a      	mov	r2, r3
 8009aa6:	6839      	ldr	r1, [r7, #0]
 8009aa8:	6878      	ldr	r0, [r7, #4]
 8009aaa:	f7ff ffb1 	bl	8009a10 <netconn_tcp_recvd_msg>
 8009aae:	4603      	mov	r3, r0
 8009ab0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);
  return err;
 8009ab4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8009ab8:	4618      	mov	r0, r3
 8009aba:	3730      	adds	r7, #48	; 0x30
 8009abc:	46bd      	mov	sp, r7
 8009abe:	bd80      	pop	{r7, pc}
 8009ac0:	080185cc 	.word	0x080185cc
 8009ac4:	08018820 	.word	0x08018820
 8009ac8:	08018624 	.word	0x08018624

08009acc <netconn_recv_data_tcp>:

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 8009acc:	b580      	push	{r7, lr}
 8009ace:	b090      	sub	sp, #64	; 0x40
 8009ad0:	af00      	add	r7, sp, #0
 8009ad2:	60f8      	str	r0, [r7, #12]
 8009ad4:	60b9      	str	r1, [r7, #8]
 8009ad6:	4613      	mov	r3, r2
 8009ad8:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	3310      	adds	r3, #16
 8009ade:	4618      	mov	r0, r3
 8009ae0:	f00d fbd7 	bl	8017292 <sys_mbox_valid>
 8009ae4:	4603      	mov	r3, r0
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d102      	bne.n	8009af0 <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 8009aea:	f06f 030a 	mvn.w	r3, #10
 8009aee:	e06d      	b.n	8009bcc <netconn_recv_data_tcp+0x100>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	7f1b      	ldrb	r3, [r3, #28]
 8009af4:	b25b      	sxtb	r3, r3
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	da07      	bge.n	8009b0a <netconn_recv_data_tcp+0x3e>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	7f1b      	ldrb	r3, [r3, #28]
 8009afe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009b02:	b2da      	uxtb	r2, r3
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	771a      	strb	r2, [r3, #28]
    goto handle_fin;
 8009b08:	e039      	b.n	8009b7e <netconn_recv_data_tcp+0xb2>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 8009b0a:	79fb      	ldrb	r3, [r7, #7]
 8009b0c:	461a      	mov	r2, r3
 8009b0e:	68b9      	ldr	r1, [r7, #8]
 8009b10:	68f8      	ldr	r0, [r7, #12]
 8009b12:	f7ff fecd 	bl	80098b0 <netconn_recv_data>
 8009b16:	4603      	mov	r3, r0
 8009b18:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (err != ERR_OK) {
 8009b1c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d002      	beq.n	8009b2a <netconn_recv_data_tcp+0x5e>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 8009b24:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009b28:	e050      	b.n	8009bcc <netconn_recv_data_tcp+0x100>
  }
  buf = *new_buf;
 8009b2a:	68bb      	ldr	r3, [r7, #8]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 8009b30:	79fb      	ldrb	r3, [r7, #7]
 8009b32:	f003 0308 	and.w	r3, r3, #8
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d10e      	bne.n	8009b58 <netconn_recv_data_tcp+0x8c>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 8009b3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d002      	beq.n	8009b46 <netconn_recv_data_tcp+0x7a>
 8009b40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b42:	891b      	ldrh	r3, [r3, #8]
 8009b44:	e000      	b.n	8009b48 <netconn_recv_data_tcp+0x7c>
 8009b46:	2301      	movs	r3, #1
 8009b48:	86fb      	strh	r3, [r7, #54]	; 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 8009b4a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009b4c:	f107 0214 	add.w	r2, r7, #20
 8009b50:	4619      	mov	r1, r3
 8009b52:	68f8      	ldr	r0, [r7, #12]
 8009b54:	f7ff ff5c 	bl	8009a10 <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 8009b58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d134      	bne.n	8009bc8 <netconn_recv_data_tcp+0xfc>
    if (apiflags & NETCONN_NOFIN) {
 8009b5e:	79fb      	ldrb	r3, [r7, #7]
 8009b60:	f003 0310 	and.w	r3, r3, #16
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d009      	beq.n	8009b7c <netconn_recv_data_tcp+0xb0>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	7f1b      	ldrb	r3, [r3, #28]
 8009b6c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009b70:	b2da      	uxtb	r2, r3
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	771a      	strb	r2, [r3, #28]
      return ERR_WOULDBLOCK;
 8009b76:	f06f 0306 	mvn.w	r3, #6
 8009b7a:	e027      	b.n	8009bcc <netconn_recv_data_tcp+0x100>
    } else {
handle_fin:
 8009b7c:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d005      	beq.n	8009b92 <netconn_recv_data_tcp+0xc6>
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b8a:	2200      	movs	r2, #0
 8009b8c:	2101      	movs	r1, #1
 8009b8e:	68f8      	ldr	r0, [r7, #12]
 8009b90:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	685b      	ldr	r3, [r3, #4]
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d10f      	bne.n	8009bba <netconn_recv_data_tcp+0xee>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 8009b9a:	68f8      	ldr	r0, [r7, #12]
 8009b9c:	f000 f974 	bl	8009e88 <netconn_err>
 8009ba0:	4603      	mov	r3, r0
 8009ba2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        if (err != ERR_OK) {
 8009ba6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d002      	beq.n	8009bb4 <netconn_recv_data_tcp+0xe8>
          return err;
 8009bae:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009bb2:	e00b      	b.n	8009bcc <netconn_recv_data_tcp+0x100>
        }
        return ERR_RST;
 8009bb4:	f06f 030d 	mvn.w	r3, #13
 8009bb8:	e008      	b.n	8009bcc <netconn_recv_data_tcp+0x100>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 8009bba:	2101      	movs	r1, #1
 8009bbc:	68f8      	ldr	r0, [r7, #12]
 8009bbe:	f000 f933 	bl	8009e28 <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 8009bc2:	f06f 030e 	mvn.w	r3, #14
 8009bc6:	e001      	b.n	8009bcc <netconn_recv_data_tcp+0x100>
    }
  }
  return err;
 8009bc8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8009bcc:	4618      	mov	r0, r3
 8009bce:	3740      	adds	r7, #64	; 0x40
 8009bd0:	46bd      	mov	sp, r7
 8009bd2:	bd80      	pop	{r7, pc}

08009bd4 <netconn_recv_tcp_pbuf_flags>:
 *                memory error or another error, @see netconn_recv_data)
 *         ERR_ARG if conn is not a TCP netconn
 */
err_t
netconn_recv_tcp_pbuf_flags(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 8009bd4:	b580      	push	{r7, lr}
 8009bd6:	b084      	sub	sp, #16
 8009bd8:	af00      	add	r7, sp, #0
 8009bda:	60f8      	str	r0, [r7, #12]
 8009bdc:	60b9      	str	r1, [r7, #8]
 8009bde:	4613      	mov	r3, r2
 8009be0:	71fb      	strb	r3, [r7, #7]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d005      	beq.n	8009bf4 <netconn_recv_tcp_pbuf_flags+0x20>
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	781b      	ldrb	r3, [r3, #0]
 8009bec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009bf0:	2b10      	cmp	r3, #16
 8009bf2:	d009      	beq.n	8009c08 <netconn_recv_tcp_pbuf_flags+0x34>
 8009bf4:	4b0a      	ldr	r3, [pc, #40]	; (8009c20 <netconn_recv_tcp_pbuf_flags+0x4c>)
 8009bf6:	f240 3226 	movw	r2, #806	; 0x326
 8009bfa:	490a      	ldr	r1, [pc, #40]	; (8009c24 <netconn_recv_tcp_pbuf_flags+0x50>)
 8009bfc:	480a      	ldr	r0, [pc, #40]	; (8009c28 <netconn_recv_tcp_pbuf_flags+0x54>)
 8009bfe:	f00d fcdb 	bl	80175b8 <iprintf>
 8009c02:	f06f 030f 	mvn.w	r3, #15
 8009c06:	e006      	b.n	8009c16 <netconn_recv_tcp_pbuf_flags+0x42>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  return netconn_recv_data_tcp(conn, new_buf, apiflags);
 8009c08:	79fb      	ldrb	r3, [r7, #7]
 8009c0a:	461a      	mov	r2, r3
 8009c0c:	68b9      	ldr	r1, [r7, #8]
 8009c0e:	68f8      	ldr	r0, [r7, #12]
 8009c10:	f7ff ff5c 	bl	8009acc <netconn_recv_data_tcp>
 8009c14:	4603      	mov	r3, r0
}
 8009c16:	4618      	mov	r0, r3
 8009c18:	3710      	adds	r7, #16
 8009c1a:	46bd      	mov	sp, r7
 8009c1c:	bd80      	pop	{r7, pc}
 8009c1e:	bf00      	nop
 8009c20:	080185cc 	.word	0x080185cc
 8009c24:	08018820 	.word	0x08018820
 8009c28:	08018624 	.word	0x08018624

08009c2c <netconn_recv_udp_raw_netbuf_flags>:
 *                memory error or another error)
 *         ERR_ARG if conn is not a UDP/RAW netconn
 */
err_t
netconn_recv_udp_raw_netbuf_flags(struct netconn *conn, struct netbuf **new_buf, u8_t apiflags)
{
 8009c2c:	b580      	push	{r7, lr}
 8009c2e:	b084      	sub	sp, #16
 8009c30:	af00      	add	r7, sp, #0
 8009c32:	60f8      	str	r0, [r7, #12]
 8009c34:	60b9      	str	r1, [r7, #8]
 8009c36:	4613      	mov	r3, r2
 8009c38:	71fb      	strb	r3, [r7, #7]
  LWIP_ERROR("netconn_recv_udp_raw_netbuf: invalid conn", (conn != NULL) &&
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d005      	beq.n	8009c4c <netconn_recv_udp_raw_netbuf_flags+0x20>
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	781b      	ldrb	r3, [r3, #0]
 8009c44:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009c48:	2b10      	cmp	r3, #16
 8009c4a:	d109      	bne.n	8009c60 <netconn_recv_udp_raw_netbuf_flags+0x34>
 8009c4c:	4b0a      	ldr	r3, [pc, #40]	; (8009c78 <netconn_recv_udp_raw_netbuf_flags+0x4c>)
 8009c4e:	f240 324d 	movw	r2, #845	; 0x34d
 8009c52:	490a      	ldr	r1, [pc, #40]	; (8009c7c <netconn_recv_udp_raw_netbuf_flags+0x50>)
 8009c54:	480a      	ldr	r0, [pc, #40]	; (8009c80 <netconn_recv_udp_raw_netbuf_flags+0x54>)
 8009c56:	f00d fcaf 	bl	80175b8 <iprintf>
 8009c5a:	f06f 030f 	mvn.w	r3, #15
 8009c5e:	e006      	b.n	8009c6e <netconn_recv_udp_raw_netbuf_flags+0x42>
             NETCONNTYPE_GROUP(netconn_type(conn)) != NETCONN_TCP, return ERR_ARG;);

  return netconn_recv_data(conn, (void **)new_buf, apiflags);
 8009c60:	79fb      	ldrb	r3, [r7, #7]
 8009c62:	461a      	mov	r2, r3
 8009c64:	68b9      	ldr	r1, [r7, #8]
 8009c66:	68f8      	ldr	r0, [r7, #12]
 8009c68:	f7ff fe22 	bl	80098b0 <netconn_recv_data>
 8009c6c:	4603      	mov	r3, r0
}
 8009c6e:	4618      	mov	r0, r3
 8009c70:	3710      	adds	r7, #16
 8009c72:	46bd      	mov	sp, r7
 8009c74:	bd80      	pop	{r7, pc}
 8009c76:	bf00      	nop
 8009c78:	080185cc 	.word	0x080185cc
 8009c7c:	08018844 	.word	0x08018844
 8009c80:	08018624 	.word	0x08018624

08009c84 <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 8009c84:	b580      	push	{r7, lr}
 8009c86:	b088      	sub	sp, #32
 8009c88:	af02      	add	r7, sp, #8
 8009c8a:	60f8      	str	r0, [r7, #12]
 8009c8c:	60b9      	str	r1, [r7, #8]
 8009c8e:	607a      	str	r2, [r7, #4]
 8009c90:	70fb      	strb	r3, [r7, #3]
  struct netvector vector;
  vector.ptr = dataptr;
 8009c92:	68bb      	ldr	r3, [r7, #8]
 8009c94:	613b      	str	r3, [r7, #16]
  vector.len = size;
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	617b      	str	r3, [r7, #20]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 8009c9a:	78fa      	ldrb	r2, [r7, #3]
 8009c9c:	f107 0110 	add.w	r1, r7, #16
 8009ca0:	6a3b      	ldr	r3, [r7, #32]
 8009ca2:	9300      	str	r3, [sp, #0]
 8009ca4:	4613      	mov	r3, r2
 8009ca6:	2201      	movs	r2, #1
 8009ca8:	68f8      	ldr	r0, [r7, #12]
 8009caa:	f000 f805 	bl	8009cb8 <netconn_write_vectors_partly>
 8009cae:	4603      	mov	r3, r0
}
 8009cb0:	4618      	mov	r0, r3
 8009cb2:	3718      	adds	r7, #24
 8009cb4:	46bd      	mov	sp, r7
 8009cb6:	bd80      	pop	{r7, pc}

08009cb8 <netconn_write_vectors_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_vectors_partly(struct netconn *conn, struct netvector *vectors, u16_t vectorcnt,
                             u8_t apiflags, size_t *bytes_written)
{
 8009cb8:	b580      	push	{r7, lr}
 8009cba:	b092      	sub	sp, #72	; 0x48
 8009cbc:	af00      	add	r7, sp, #0
 8009cbe:	60f8      	str	r0, [r7, #12]
 8009cc0:	60b9      	str	r1, [r7, #8]
 8009cc2:	4611      	mov	r1, r2
 8009cc4:	461a      	mov	r2, r3
 8009cc6:	460b      	mov	r3, r1
 8009cc8:	80fb      	strh	r3, [r7, #6]
 8009cca:	4613      	mov	r3, r2
 8009ccc:	717b      	strb	r3, [r7, #5]
  err_t err;
  u8_t dontblock;
  size_t size;
  int i;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d109      	bne.n	8009ce8 <netconn_write_vectors_partly+0x30>
 8009cd4:	4b4e      	ldr	r3, [pc, #312]	; (8009e10 <netconn_write_vectors_partly+0x158>)
 8009cd6:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8009cda:	494e      	ldr	r1, [pc, #312]	; (8009e14 <netconn_write_vectors_partly+0x15c>)
 8009cdc:	484e      	ldr	r0, [pc, #312]	; (8009e18 <netconn_write_vectors_partly+0x160>)
 8009cde:	f00d fc6b 	bl	80175b8 <iprintf>
 8009ce2:	f06f 030f 	mvn.w	r3, #15
 8009ce6:	e08e      	b.n	8009e06 <netconn_write_vectors_partly+0x14e>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	781b      	ldrb	r3, [r3, #0]
 8009cec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009cf0:	2b10      	cmp	r3, #16
 8009cf2:	d009      	beq.n	8009d08 <netconn_write_vectors_partly+0x50>
 8009cf4:	4b46      	ldr	r3, [pc, #280]	; (8009e10 <netconn_write_vectors_partly+0x158>)
 8009cf6:	f240 32ef 	movw	r2, #1007	; 0x3ef
 8009cfa:	4948      	ldr	r1, [pc, #288]	; (8009e1c <netconn_write_vectors_partly+0x164>)
 8009cfc:	4846      	ldr	r0, [pc, #280]	; (8009e18 <netconn_write_vectors_partly+0x160>)
 8009cfe:	f00d fc5b 	bl	80175b8 <iprintf>
 8009d02:	f06f 0305 	mvn.w	r3, #5
 8009d06:	e07e      	b.n	8009e06 <netconn_write_vectors_partly+0x14e>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	7f1b      	ldrb	r3, [r3, #28]
 8009d0c:	f003 0302 	and.w	r3, r3, #2
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d104      	bne.n	8009d1e <netconn_write_vectors_partly+0x66>
 8009d14:	797b      	ldrb	r3, [r7, #5]
 8009d16:	f003 0304 	and.w	r3, r3, #4
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d001      	beq.n	8009d22 <netconn_write_vectors_partly+0x6a>
 8009d1e:	2301      	movs	r3, #1
 8009d20:	e000      	b.n	8009d24 <netconn_write_vectors_partly+0x6c>
 8009d22:	2300      	movs	r3, #0
 8009d24:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 8009d28:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d005      	beq.n	8009d3c <netconn_write_vectors_partly+0x84>
 8009d30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d102      	bne.n	8009d3c <netconn_write_vectors_partly+0x84>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 8009d36:	f06f 0305 	mvn.w	r3, #5
 8009d3a:	e064      	b.n	8009e06 <netconn_write_vectors_partly+0x14e>
  }

  /* sum up the total size */
  size = 0;
 8009d3c:	2300      	movs	r3, #0
 8009d3e:	647b      	str	r3, [r7, #68]	; 0x44
  for (i = 0; i < vectorcnt; i++) {
 8009d40:	2300      	movs	r3, #0
 8009d42:	643b      	str	r3, [r7, #64]	; 0x40
 8009d44:	e015      	b.n	8009d72 <netconn_write_vectors_partly+0xba>
    size += vectors[i].len;
 8009d46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009d48:	00db      	lsls	r3, r3, #3
 8009d4a:	68ba      	ldr	r2, [r7, #8]
 8009d4c:	4413      	add	r3, r2
 8009d4e:	685b      	ldr	r3, [r3, #4]
 8009d50:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009d52:	4413      	add	r3, r2
 8009d54:	647b      	str	r3, [r7, #68]	; 0x44
    if (size < vectors[i].len) {
 8009d56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009d58:	00db      	lsls	r3, r3, #3
 8009d5a:	68ba      	ldr	r2, [r7, #8]
 8009d5c:	4413      	add	r3, r2
 8009d5e:	685b      	ldr	r3, [r3, #4]
 8009d60:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009d62:	429a      	cmp	r2, r3
 8009d64:	d202      	bcs.n	8009d6c <netconn_write_vectors_partly+0xb4>
      /* overflow */
      return ERR_VAL;
 8009d66:	f06f 0305 	mvn.w	r3, #5
 8009d6a:	e04c      	b.n	8009e06 <netconn_write_vectors_partly+0x14e>
  for (i = 0; i < vectorcnt; i++) {
 8009d6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009d6e:	3301      	adds	r3, #1
 8009d70:	643b      	str	r3, [r7, #64]	; 0x40
 8009d72:	88fb      	ldrh	r3, [r7, #6]
 8009d74:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009d76:	429a      	cmp	r2, r3
 8009d78:	dbe5      	blt.n	8009d46 <netconn_write_vectors_partly+0x8e>
    }
  }
  if (size == 0) {
 8009d7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d101      	bne.n	8009d84 <netconn_write_vectors_partly+0xcc>
    return ERR_OK;
 8009d80:	2300      	movs	r3, #0
 8009d82:	e040      	b.n	8009e06 <netconn_write_vectors_partly+0x14e>
  } else if (size > SSIZE_MAX) {
 8009d84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	da0a      	bge.n	8009da0 <netconn_write_vectors_partly+0xe8>
    ssize_t limited;
    /* this is required by the socket layer (cannot send full size_t range) */
    if (!bytes_written) {
 8009d8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d102      	bne.n	8009d96 <netconn_write_vectors_partly+0xde>
      return ERR_VAL;
 8009d90:	f06f 0305 	mvn.w	r3, #5
 8009d94:	e037      	b.n	8009e06 <netconn_write_vectors_partly+0x14e>
    }
    /* limit the amount of data to send */
    limited = SSIZE_MAX;
 8009d96:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8009d9a:	63bb      	str	r3, [r7, #56]	; 0x38
    size = (size_t)limited;
 8009d9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d9e:	647b      	str	r3, [r7, #68]	; 0x44
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 8009da4:	68bb      	ldr	r3, [r7, #8]
 8009da6:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 8009da8:	88fb      	ldrh	r3, [r7, #6]
 8009daa:	843b      	strh	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 8009dac:	2300      	movs	r3, #0
 8009dae:	627b      	str	r3, [r7, #36]	; 0x24
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 8009db0:	797b      	ldrb	r3, [r7, #5]
 8009db2:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  API_MSG_VAR_REF(msg).msg.w.len = size;
 8009db6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009db8:	62bb      	str	r3, [r7, #40]	; 0x28
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 8009dba:	2300      	movs	r3, #0
 8009dbc:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 8009dbe:	f107 0314 	add.w	r3, r7, #20
 8009dc2:	4619      	mov	r1, r3
 8009dc4:	4816      	ldr	r0, [pc, #88]	; (8009e20 <netconn_write_vectors_partly+0x168>)
 8009dc6:	f7ff fb59 	bl	800947c <netconn_apimsg>
 8009dca:	4603      	mov	r3, r0
 8009dcc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (err == ERR_OK) {
 8009dd0:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d114      	bne.n	8009e02 <netconn_write_vectors_partly+0x14a>
    if (bytes_written != NULL) {
 8009dd8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d002      	beq.n	8009de4 <netconn_write_vectors_partly+0x12c>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 8009dde:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009de0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009de2:	601a      	str	r2, [r3, #0]
    }
    /* for blocking, check all requested bytes were written, NOTE: send_timeout is
       treated as dontblock (see dontblock assignment above) */
    if (!dontblock) {
 8009de4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d10a      	bne.n	8009e02 <netconn_write_vectors_partly+0x14a>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 8009dec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009dee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009df0:	429a      	cmp	r2, r3
 8009df2:	d006      	beq.n	8009e02 <netconn_write_vectors_partly+0x14a>
 8009df4:	4b06      	ldr	r3, [pc, #24]	; (8009e10 <netconn_write_vectors_partly+0x158>)
 8009df6:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8009dfa:	490a      	ldr	r1, [pc, #40]	; (8009e24 <netconn_write_vectors_partly+0x16c>)
 8009dfc:	4806      	ldr	r0, [pc, #24]	; (8009e18 <netconn_write_vectors_partly+0x160>)
 8009dfe:	f00d fbdb 	bl	80175b8 <iprintf>
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 8009e02:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8009e06:	4618      	mov	r0, r3
 8009e08:	3748      	adds	r7, #72	; 0x48
 8009e0a:	46bd      	mov	sp, r7
 8009e0c:	bd80      	pop	{r7, pc}
 8009e0e:	bf00      	nop
 8009e10:	080185cc 	.word	0x080185cc
 8009e14:	08018898 	.word	0x08018898
 8009e18:	08018624 	.word	0x08018624
 8009e1c:	080188b4 	.word	0x080188b4
 8009e20:	0800b2a1 	.word	0x0800b2a1
 8009e24:	080188d8 	.word	0x080188d8

08009e28 <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 8009e28:	b580      	push	{r7, lr}
 8009e2a:	b08c      	sub	sp, #48	; 0x30
 8009e2c:	af00      	add	r7, sp, #0
 8009e2e:	6078      	str	r0, [r7, #4]
 8009e30:	460b      	mov	r3, r1
 8009e32:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d109      	bne.n	8009e4e <netconn_close_shutdown+0x26>
 8009e3a:	4b0f      	ldr	r3, [pc, #60]	; (8009e78 <netconn_close_shutdown+0x50>)
 8009e3c:	f240 4247 	movw	r2, #1095	; 0x447
 8009e40:	490e      	ldr	r1, [pc, #56]	; (8009e7c <netconn_close_shutdown+0x54>)
 8009e42:	480f      	ldr	r0, [pc, #60]	; (8009e80 <netconn_close_shutdown+0x58>)
 8009e44:	f00d fbb8 	bl	80175b8 <iprintf>
 8009e48:	f06f 030f 	mvn.w	r3, #15
 8009e4c:	e010      	b.n	8009e70 <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 8009e52:	78fb      	ldrb	r3, [r7, #3]
 8009e54:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8009e56:	2329      	movs	r3, #41	; 0x29
 8009e58:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 8009e5a:	f107 030c 	add.w	r3, r7, #12
 8009e5e:	4619      	mov	r1, r3
 8009e60:	4808      	ldr	r0, [pc, #32]	; (8009e84 <netconn_close_shutdown+0x5c>)
 8009e62:	f7ff fb0b 	bl	800947c <netconn_apimsg>
 8009e66:	4603      	mov	r3, r0
 8009e68:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8009e6c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8009e70:	4618      	mov	r0, r3
 8009e72:	3730      	adds	r7, #48	; 0x30
 8009e74:	46bd      	mov	sp, r7
 8009e76:	bd80      	pop	{r7, pc}
 8009e78:	080185cc 	.word	0x080185cc
 8009e7c:	080188fc 	.word	0x080188fc
 8009e80:	08018624 	.word	0x08018624
 8009e84:	0800b47d 	.word	0x0800b47d

08009e88 <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 8009e88:	b580      	push	{r7, lr}
 8009e8a:	b084      	sub	sp, #16
 8009e8c:	af00      	add	r7, sp, #0
 8009e8e:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d101      	bne.n	8009e9a <netconn_err+0x12>
    return ERR_OK;
 8009e96:	2300      	movs	r3, #0
 8009e98:	e00d      	b.n	8009eb6 <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 8009e9a:	f00d fb15 	bl	80174c8 <sys_arch_protect>
 8009e9e:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	7a1b      	ldrb	r3, [r3, #8]
 8009ea4:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	2200      	movs	r2, #0
 8009eaa:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 8009eac:	68f8      	ldr	r0, [r7, #12]
 8009eae:	f00d fb19 	bl	80174e4 <sys_arch_unprotect>
  return err;
 8009eb2:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8009eb6:	4618      	mov	r0, r3
 8009eb8:	3710      	adds	r7, #16
 8009eba:	46bd      	mov	sp, r7
 8009ebc:	bd80      	pop	{r7, pc}
	...

08009ec0 <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 8009ec0:	b580      	push	{r7, lr}
 8009ec2:	b082      	sub	sp, #8
 8009ec4:	af00      	add	r7, sp, #0
 8009ec6:	4603      	mov	r3, r0
 8009ec8:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 8009eca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009ece:	f113 0f0e 	cmn.w	r3, #14
 8009ed2:	d008      	beq.n	8009ee6 <lwip_netconn_err_to_msg+0x26>
 8009ed4:	f113 0f0d 	cmn.w	r3, #13
 8009ed8:	d003      	beq.n	8009ee2 <lwip_netconn_err_to_msg+0x22>
 8009eda:	f113 0f0f 	cmn.w	r3, #15
 8009ede:	d004      	beq.n	8009eea <lwip_netconn_err_to_msg+0x2a>
 8009ee0:	e005      	b.n	8009eee <lwip_netconn_err_to_msg+0x2e>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 8009ee2:	4b0a      	ldr	r3, [pc, #40]	; (8009f0c <lwip_netconn_err_to_msg+0x4c>)
 8009ee4:	e00e      	b.n	8009f04 <lwip_netconn_err_to_msg+0x44>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 8009ee6:	4b0a      	ldr	r3, [pc, #40]	; (8009f10 <lwip_netconn_err_to_msg+0x50>)
 8009ee8:	e00c      	b.n	8009f04 <lwip_netconn_err_to_msg+0x44>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 8009eea:	4b0a      	ldr	r3, [pc, #40]	; (8009f14 <lwip_netconn_err_to_msg+0x54>)
 8009eec:	e00a      	b.n	8009f04 <lwip_netconn_err_to_msg+0x44>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 8009eee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d005      	beq.n	8009f02 <lwip_netconn_err_to_msg+0x42>
 8009ef6:	4b08      	ldr	r3, [pc, #32]	; (8009f18 <lwip_netconn_err_to_msg+0x58>)
 8009ef8:	227d      	movs	r2, #125	; 0x7d
 8009efa:	4908      	ldr	r1, [pc, #32]	; (8009f1c <lwip_netconn_err_to_msg+0x5c>)
 8009efc:	4808      	ldr	r0, [pc, #32]	; (8009f20 <lwip_netconn_err_to_msg+0x60>)
 8009efe:	f00d fb5b 	bl	80175b8 <iprintf>
      return NULL;
 8009f02:	2300      	movs	r3, #0
  }
}
 8009f04:	4618      	mov	r0, r3
 8009f06:	3708      	adds	r7, #8
 8009f08:	46bd      	mov	sp, r7
 8009f0a:	bd80      	pop	{r7, pc}
 8009f0c:	0801b8f4 	.word	0x0801b8f4
 8009f10:	0801b8f5 	.word	0x0801b8f5
 8009f14:	0801b8f6 	.word	0x0801b8f6
 8009f18:	08018918 	.word	0x08018918
 8009f1c:	0801894c 	.word	0x0801894c
 8009f20:	0801895c 	.word	0x0801895c

08009f24 <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 8009f24:	b580      	push	{r7, lr}
 8009f26:	b082      	sub	sp, #8
 8009f28:	af00      	add	r7, sp, #0
 8009f2a:	6078      	str	r0, [r7, #4]
 8009f2c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 8009f2e:	683b      	ldr	r3, [r7, #0]
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d105      	bne.n	8009f40 <lwip_netconn_is_err_msg+0x1c>
 8009f34:	4b12      	ldr	r3, [pc, #72]	; (8009f80 <lwip_netconn_is_err_msg+0x5c>)
 8009f36:	2285      	movs	r2, #133	; 0x85
 8009f38:	4912      	ldr	r1, [pc, #72]	; (8009f84 <lwip_netconn_is_err_msg+0x60>)
 8009f3a:	4813      	ldr	r0, [pc, #76]	; (8009f88 <lwip_netconn_is_err_msg+0x64>)
 8009f3c:	f00d fb3c 	bl	80175b8 <iprintf>

  if (msg == &netconn_aborted) {
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	4a12      	ldr	r2, [pc, #72]	; (8009f8c <lwip_netconn_is_err_msg+0x68>)
 8009f44:	4293      	cmp	r3, r2
 8009f46:	d104      	bne.n	8009f52 <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 8009f48:	683b      	ldr	r3, [r7, #0]
 8009f4a:	22f3      	movs	r2, #243	; 0xf3
 8009f4c:	701a      	strb	r2, [r3, #0]
    return 1;
 8009f4e:	2301      	movs	r3, #1
 8009f50:	e012      	b.n	8009f78 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	4a0e      	ldr	r2, [pc, #56]	; (8009f90 <lwip_netconn_is_err_msg+0x6c>)
 8009f56:	4293      	cmp	r3, r2
 8009f58:	d104      	bne.n	8009f64 <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 8009f5a:	683b      	ldr	r3, [r7, #0]
 8009f5c:	22f2      	movs	r2, #242	; 0xf2
 8009f5e:	701a      	strb	r2, [r3, #0]
    return 1;
 8009f60:	2301      	movs	r3, #1
 8009f62:	e009      	b.n	8009f78 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	4a0b      	ldr	r2, [pc, #44]	; (8009f94 <lwip_netconn_is_err_msg+0x70>)
 8009f68:	4293      	cmp	r3, r2
 8009f6a:	d104      	bne.n	8009f76 <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 8009f6c:	683b      	ldr	r3, [r7, #0]
 8009f6e:	22f1      	movs	r2, #241	; 0xf1
 8009f70:	701a      	strb	r2, [r3, #0]
    return 1;
 8009f72:	2301      	movs	r3, #1
 8009f74:	e000      	b.n	8009f78 <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 8009f76:	2300      	movs	r3, #0
}
 8009f78:	4618      	mov	r0, r3
 8009f7a:	3708      	adds	r7, #8
 8009f7c:	46bd      	mov	sp, r7
 8009f7e:	bd80      	pop	{r7, pc}
 8009f80:	08018918 	.word	0x08018918
 8009f84:	08018984 	.word	0x08018984
 8009f88:	0801895c 	.word	0x0801895c
 8009f8c:	0801b8f4 	.word	0x0801b8f4
 8009f90:	0801b8f5 	.word	0x0801b8f5
 8009f94:	0801b8f6 	.word	0x0801b8f6

08009f98 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8009f98:	b580      	push	{r7, lr}
 8009f9a:	b088      	sub	sp, #32
 8009f9c:	af00      	add	r7, sp, #0
 8009f9e:	60f8      	str	r0, [r7, #12]
 8009fa0:	60b9      	str	r1, [r7, #8]
 8009fa2:	607a      	str	r2, [r7, #4]
 8009fa4:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 8009fa6:	68bb      	ldr	r3, [r7, #8]
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d106      	bne.n	8009fba <recv_tcp+0x22>
 8009fac:	4b36      	ldr	r3, [pc, #216]	; (800a088 <recv_tcp+0xf0>)
 8009fae:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8009fb2:	4936      	ldr	r1, [pc, #216]	; (800a08c <recv_tcp+0xf4>)
 8009fb4:	4836      	ldr	r0, [pc, #216]	; (800a090 <recv_tcp+0xf8>)
 8009fb6:	f00d faff 	bl	80175b8 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d106      	bne.n	8009fce <recv_tcp+0x36>
 8009fc0:	4b31      	ldr	r3, [pc, #196]	; (800a088 <recv_tcp+0xf0>)
 8009fc2:	f240 122d 	movw	r2, #301	; 0x12d
 8009fc6:	4933      	ldr	r1, [pc, #204]	; (800a094 <recv_tcp+0xfc>)
 8009fc8:	4831      	ldr	r0, [pc, #196]	; (800a090 <recv_tcp+0xf8>)
 8009fca:	f00d faf5 	bl	80175b8 <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 8009fce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d006      	beq.n	8009fe4 <recv_tcp+0x4c>
 8009fd6:	4b2c      	ldr	r3, [pc, #176]	; (800a088 <recv_tcp+0xf0>)
 8009fd8:	f44f 7297 	mov.w	r2, #302	; 0x12e
 8009fdc:	492e      	ldr	r1, [pc, #184]	; (800a098 <recv_tcp+0x100>)
 8009fde:	482c      	ldr	r0, [pc, #176]	; (800a090 <recv_tcp+0xf8>)
 8009fe0:	f00d faea 	bl	80175b8 <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 8009fe8:	697b      	ldr	r3, [r7, #20]
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d102      	bne.n	8009ff4 <recv_tcp+0x5c>
    return ERR_VAL;
 8009fee:	f06f 0305 	mvn.w	r3, #5
 8009ff2:	e045      	b.n	800a080 <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 8009ff4:	697b      	ldr	r3, [r7, #20]
 8009ff6:	685b      	ldr	r3, [r3, #4]
 8009ff8:	68ba      	ldr	r2, [r7, #8]
 8009ffa:	429a      	cmp	r2, r3
 8009ffc:	d006      	beq.n	800a00c <recv_tcp+0x74>
 8009ffe:	4b22      	ldr	r3, [pc, #136]	; (800a088 <recv_tcp+0xf0>)
 800a000:	f240 1235 	movw	r2, #309	; 0x135
 800a004:	4925      	ldr	r1, [pc, #148]	; (800a09c <recv_tcp+0x104>)
 800a006:	4822      	ldr	r0, [pc, #136]	; (800a090 <recv_tcp+0xf8>)
 800a008:	f00d fad6 	bl	80175b8 <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800a00c:	697b      	ldr	r3, [r7, #20]
 800a00e:	3310      	adds	r3, #16
 800a010:	4618      	mov	r0, r3
 800a012:	f00d f93e 	bl	8017292 <sys_mbox_valid>
 800a016:	4603      	mov	r3, r0
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d10d      	bne.n	800a038 <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d008      	beq.n	800a034 <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	891b      	ldrh	r3, [r3, #8]
 800a026:	4619      	mov	r1, r3
 800a028:	68b8      	ldr	r0, [r7, #8]
 800a02a:	f005 f8ed 	bl	800f208 <tcp_recved>
      pbuf_free(p);
 800a02e:	6878      	ldr	r0, [r7, #4]
 800a030:	f004 f93c 	bl	800e2ac <pbuf_free>
    }
    return ERR_OK;
 800a034:	2300      	movs	r3, #0
 800a036:	e023      	b.n	800a080 <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d005      	beq.n	800a04a <recv_tcp+0xb2>
    msg = p;
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	891b      	ldrh	r3, [r3, #8]
 800a046:	83fb      	strh	r3, [r7, #30]
 800a048:	e003      	b.n	800a052 <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 800a04a:	4b15      	ldr	r3, [pc, #84]	; (800a0a0 <recv_tcp+0x108>)
 800a04c:	61bb      	str	r3, [r7, #24]
    len = 0;
 800a04e:	2300      	movs	r3, #0
 800a050:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 800a052:	697b      	ldr	r3, [r7, #20]
 800a054:	3310      	adds	r3, #16
 800a056:	69b9      	ldr	r1, [r7, #24]
 800a058:	4618      	mov	r0, r3
 800a05a:	f00d f8a5 	bl	80171a8 <sys_mbox_trypost>
 800a05e:	4603      	mov	r3, r0
 800a060:	2b00      	cmp	r3, #0
 800a062:	d002      	beq.n	800a06a <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 800a064:	f04f 33ff 	mov.w	r3, #4294967295
 800a068:	e00a      	b.n	800a080 <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800a06a:	697b      	ldr	r3, [r7, #20]
 800a06c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d005      	beq.n	800a07e <recv_tcp+0xe6>
 800a072:	697b      	ldr	r3, [r7, #20]
 800a074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a076:	8bfa      	ldrh	r2, [r7, #30]
 800a078:	2100      	movs	r1, #0
 800a07a:	6978      	ldr	r0, [r7, #20]
 800a07c:	4798      	blx	r3
  }

  return ERR_OK;
 800a07e:	2300      	movs	r3, #0
}
 800a080:	4618      	mov	r0, r3
 800a082:	3720      	adds	r7, #32
 800a084:	46bd      	mov	sp, r7
 800a086:	bd80      	pop	{r7, pc}
 800a088:	08018918 	.word	0x08018918
 800a08c:	08018990 	.word	0x08018990
 800a090:	0801895c 	.word	0x0801895c
 800a094:	080189b4 	.word	0x080189b4
 800a098:	080189d4 	.word	0x080189d4
 800a09c:	080189ec 	.word	0x080189ec
 800a0a0:	0801b8f6 	.word	0x0801b8f6

0800a0a4 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 800a0a4:	b580      	push	{r7, lr}
 800a0a6:	b084      	sub	sp, #16
 800a0a8:	af00      	add	r7, sp, #0
 800a0aa:	6078      	str	r0, [r7, #4]
 800a0ac:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d106      	bne.n	800a0c6 <poll_tcp+0x22>
 800a0b8:	4b29      	ldr	r3, [pc, #164]	; (800a160 <poll_tcp+0xbc>)
 800a0ba:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 800a0be:	4929      	ldr	r1, [pc, #164]	; (800a164 <poll_tcp+0xc0>)
 800a0c0:	4829      	ldr	r0, [pc, #164]	; (800a168 <poll_tcp+0xc4>)
 800a0c2:	f00d fa79 	bl	80175b8 <iprintf>

  if (conn->state == NETCONN_WRITE) {
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	785b      	ldrb	r3, [r3, #1]
 800a0ca:	2b01      	cmp	r3, #1
 800a0cc:	d104      	bne.n	800a0d8 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800a0ce:	2101      	movs	r1, #1
 800a0d0:	68f8      	ldr	r0, [r7, #12]
 800a0d2:	f000 ff19 	bl	800af08 <lwip_netconn_do_writemore>
 800a0d6:	e016      	b.n	800a106 <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	785b      	ldrb	r3, [r3, #1]
 800a0dc:	2b04      	cmp	r3, #4
 800a0de:	d112      	bne.n	800a106 <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	6a1b      	ldr	r3, [r3, #32]
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d00a      	beq.n	800a0fe <poll_tcp+0x5a>
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	6a1b      	ldr	r3, [r3, #32]
 800a0ec:	7a5b      	ldrb	r3, [r3, #9]
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d005      	beq.n	800a0fe <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	6a1b      	ldr	r3, [r3, #32]
 800a0f6:	7a5a      	ldrb	r2, [r3, #9]
 800a0f8:	3a01      	subs	r2, #1
 800a0fa:	b2d2      	uxtb	r2, r2
 800a0fc:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800a0fe:	2101      	movs	r1, #1
 800a100:	68f8      	ldr	r0, [r7, #12]
 800a102:	f000 fbcb 	bl	800a89c <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	7f1b      	ldrb	r3, [r3, #28]
 800a10a:	f003 0310 	and.w	r3, r3, #16
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d021      	beq.n	800a156 <poll_tcp+0xb2>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	685b      	ldr	r3, [r3, #4]
 800a116:	2b00      	cmp	r3, #0
 800a118:	d01d      	beq.n	800a156 <poll_tcp+0xb2>
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	685b      	ldr	r3, [r3, #4]
 800a11e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800a122:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800a126:	d316      	bcc.n	800a156 <poll_tcp+0xb2>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	685b      	ldr	r3, [r3, #4]
 800a12c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800a130:	2b04      	cmp	r3, #4
 800a132:	d810      	bhi.n	800a156 <poll_tcp+0xb2>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	7f1b      	ldrb	r3, [r3, #28]
 800a138:	f023 0310 	bic.w	r3, r3, #16
 800a13c:	b2da      	uxtb	r2, r3
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a146:	2b00      	cmp	r3, #0
 800a148:	d005      	beq.n	800a156 <poll_tcp+0xb2>
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a14e:	2200      	movs	r2, #0
 800a150:	2102      	movs	r1, #2
 800a152:	68f8      	ldr	r0, [r7, #12]
 800a154:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800a156:	2300      	movs	r3, #0
}
 800a158:	4618      	mov	r0, r3
 800a15a:	3710      	adds	r7, #16
 800a15c:	46bd      	mov	sp, r7
 800a15e:	bd80      	pop	{r7, pc}
 800a160:	08018918 	.word	0x08018918
 800a164:	08018a0c 	.word	0x08018a0c
 800a168:	0801895c 	.word	0x0801895c

0800a16c <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 800a16c:	b580      	push	{r7, lr}
 800a16e:	b086      	sub	sp, #24
 800a170:	af00      	add	r7, sp, #0
 800a172:	60f8      	str	r0, [r7, #12]
 800a174:	60b9      	str	r1, [r7, #8]
 800a176:	4613      	mov	r3, r2
 800a178:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800a17e:	697b      	ldr	r3, [r7, #20]
 800a180:	2b00      	cmp	r3, #0
 800a182:	d106      	bne.n	800a192 <sent_tcp+0x26>
 800a184:	4b20      	ldr	r3, [pc, #128]	; (800a208 <sent_tcp+0x9c>)
 800a186:	f240 1293 	movw	r2, #403	; 0x193
 800a18a:	4920      	ldr	r1, [pc, #128]	; (800a20c <sent_tcp+0xa0>)
 800a18c:	4820      	ldr	r0, [pc, #128]	; (800a210 <sent_tcp+0xa4>)
 800a18e:	f00d fa13 	bl	80175b8 <iprintf>

  if (conn) {
 800a192:	697b      	ldr	r3, [r7, #20]
 800a194:	2b00      	cmp	r3, #0
 800a196:	d032      	beq.n	800a1fe <sent_tcp+0x92>
    if (conn->state == NETCONN_WRITE) {
 800a198:	697b      	ldr	r3, [r7, #20]
 800a19a:	785b      	ldrb	r3, [r3, #1]
 800a19c:	2b01      	cmp	r3, #1
 800a19e:	d104      	bne.n	800a1aa <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800a1a0:	2101      	movs	r1, #1
 800a1a2:	6978      	ldr	r0, [r7, #20]
 800a1a4:	f000 feb0 	bl	800af08 <lwip_netconn_do_writemore>
 800a1a8:	e007      	b.n	800a1ba <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 800a1aa:	697b      	ldr	r3, [r7, #20]
 800a1ac:	785b      	ldrb	r3, [r3, #1]
 800a1ae:	2b04      	cmp	r3, #4
 800a1b0:	d103      	bne.n	800a1ba <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800a1b2:	2101      	movs	r1, #1
 800a1b4:	6978      	ldr	r0, [r7, #20]
 800a1b6:	f000 fb71 	bl	800a89c <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800a1ba:	697b      	ldr	r3, [r7, #20]
 800a1bc:	685b      	ldr	r3, [r3, #4]
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d01d      	beq.n	800a1fe <sent_tcp+0x92>
 800a1c2:	697b      	ldr	r3, [r7, #20]
 800a1c4:	685b      	ldr	r3, [r3, #4]
 800a1c6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800a1ca:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800a1ce:	d316      	bcc.n	800a1fe <sent_tcp+0x92>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800a1d0:	697b      	ldr	r3, [r7, #20]
 800a1d2:	685b      	ldr	r3, [r3, #4]
 800a1d4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800a1d8:	2b04      	cmp	r3, #4
 800a1da:	d810      	bhi.n	800a1fe <sent_tcp+0x92>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800a1dc:	697b      	ldr	r3, [r7, #20]
 800a1de:	7f1b      	ldrb	r3, [r3, #28]
 800a1e0:	f023 0310 	bic.w	r3, r3, #16
 800a1e4:	b2da      	uxtb	r2, r3
 800a1e6:	697b      	ldr	r3, [r7, #20]
 800a1e8:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 800a1ea:	697b      	ldr	r3, [r7, #20]
 800a1ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d005      	beq.n	800a1fe <sent_tcp+0x92>
 800a1f2:	697b      	ldr	r3, [r7, #20]
 800a1f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1f6:	88fa      	ldrh	r2, [r7, #6]
 800a1f8:	2102      	movs	r1, #2
 800a1fa:	6978      	ldr	r0, [r7, #20]
 800a1fc:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800a1fe:	2300      	movs	r3, #0
}
 800a200:	4618      	mov	r0, r3
 800a202:	3718      	adds	r7, #24
 800a204:	46bd      	mov	sp, r7
 800a206:	bd80      	pop	{r7, pc}
 800a208:	08018918 	.word	0x08018918
 800a20c:	08018a0c 	.word	0x08018a0c
 800a210:	0801895c 	.word	0x0801895c

0800a214 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 800a214:	b580      	push	{r7, lr}
 800a216:	b088      	sub	sp, #32
 800a218:	af00      	add	r7, sp, #0
 800a21a:	6078      	str	r0, [r7, #4]
 800a21c:	460b      	mov	r3, r1
 800a21e:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800a224:	69fb      	ldr	r3, [r7, #28]
 800a226:	2b00      	cmp	r3, #0
 800a228:	d106      	bne.n	800a238 <err_tcp+0x24>
 800a22a:	4b5f      	ldr	r3, [pc, #380]	; (800a3a8 <err_tcp+0x194>)
 800a22c:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 800a230:	495e      	ldr	r1, [pc, #376]	; (800a3ac <err_tcp+0x198>)
 800a232:	485f      	ldr	r0, [pc, #380]	; (800a3b0 <err_tcp+0x19c>)
 800a234:	f00d f9c0 	bl	80175b8 <iprintf>

  SYS_ARCH_PROTECT(lev);
 800a238:	f00d f946 	bl	80174c8 <sys_arch_protect>
 800a23c:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 800a23e:	69fb      	ldr	r3, [r7, #28]
 800a240:	2200      	movs	r2, #0
 800a242:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 800a244:	69fb      	ldr	r3, [r7, #28]
 800a246:	78fa      	ldrb	r2, [r7, #3]
 800a248:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 800a24a:	69fb      	ldr	r3, [r7, #28]
 800a24c:	7f1b      	ldrb	r3, [r3, #28]
 800a24e:	f043 0301 	orr.w	r3, r3, #1
 800a252:	b2da      	uxtb	r2, r3
 800a254:	69fb      	ldr	r3, [r7, #28]
 800a256:	771a      	strb	r2, [r3, #28]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 800a258:	69fb      	ldr	r3, [r7, #28]
 800a25a:	785b      	ldrb	r3, [r3, #1]
 800a25c:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 800a25e:	69fb      	ldr	r3, [r7, #28]
 800a260:	2200      	movs	r2, #0
 800a262:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 800a264:	69b8      	ldr	r0, [r7, #24]
 800a266:	f00d f93d 	bl	80174e4 <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800a26a:	69fb      	ldr	r3, [r7, #28]
 800a26c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d005      	beq.n	800a27e <err_tcp+0x6a>
 800a272:	69fb      	ldr	r3, [r7, #28]
 800a274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a276:	2200      	movs	r2, #0
 800a278:	2104      	movs	r1, #4
 800a27a:	69f8      	ldr	r0, [r7, #28]
 800a27c:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800a27e:	69fb      	ldr	r3, [r7, #28]
 800a280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a282:	2b00      	cmp	r3, #0
 800a284:	d005      	beq.n	800a292 <err_tcp+0x7e>
 800a286:	69fb      	ldr	r3, [r7, #28]
 800a288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a28a:	2200      	movs	r2, #0
 800a28c:	2100      	movs	r1, #0
 800a28e:	69f8      	ldr	r0, [r7, #28]
 800a290:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800a292:	69fb      	ldr	r3, [r7, #28]
 800a294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a296:	2b00      	cmp	r3, #0
 800a298:	d005      	beq.n	800a2a6 <err_tcp+0x92>
 800a29a:	69fb      	ldr	r3, [r7, #28]
 800a29c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a29e:	2200      	movs	r2, #0
 800a2a0:	2102      	movs	r1, #2
 800a2a2:	69f8      	ldr	r0, [r7, #28]
 800a2a4:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 800a2a6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a2aa:	4618      	mov	r0, r3
 800a2ac:	f7ff fe08 	bl	8009ec0 <lwip_netconn_err_to_msg>
 800a2b0:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800a2b2:	69fb      	ldr	r3, [r7, #28]
 800a2b4:	3310      	adds	r3, #16
 800a2b6:	4618      	mov	r0, r3
 800a2b8:	f00c ffeb 	bl	8017292 <sys_mbox_valid>
 800a2bc:	4603      	mov	r3, r0
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d005      	beq.n	800a2ce <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 800a2c2:	69fb      	ldr	r3, [r7, #28]
 800a2c4:	3310      	adds	r3, #16
 800a2c6:	6939      	ldr	r1, [r7, #16]
 800a2c8:	4618      	mov	r0, r3
 800a2ca:	f00c ff6d 	bl	80171a8 <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800a2ce:	69fb      	ldr	r3, [r7, #28]
 800a2d0:	3314      	adds	r3, #20
 800a2d2:	4618      	mov	r0, r3
 800a2d4:	f00c ffdd 	bl	8017292 <sys_mbox_valid>
 800a2d8:	4603      	mov	r3, r0
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d005      	beq.n	800a2ea <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 800a2de:	69fb      	ldr	r3, [r7, #28]
 800a2e0:	3314      	adds	r3, #20
 800a2e2:	6939      	ldr	r1, [r7, #16]
 800a2e4:	4618      	mov	r0, r3
 800a2e6:	f00c ff5f 	bl	80171a8 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 800a2ea:	7dfb      	ldrb	r3, [r7, #23]
 800a2ec:	2b01      	cmp	r3, #1
 800a2ee:	d005      	beq.n	800a2fc <err_tcp+0xe8>
 800a2f0:	7dfb      	ldrb	r3, [r7, #23]
 800a2f2:	2b04      	cmp	r3, #4
 800a2f4:	d002      	beq.n	800a2fc <err_tcp+0xe8>
 800a2f6:	7dfb      	ldrb	r3, [r7, #23]
 800a2f8:	2b03      	cmp	r3, #3
 800a2fa:	d143      	bne.n	800a384 <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 800a2fc:	69fb      	ldr	r3, [r7, #28]
 800a2fe:	7f1b      	ldrb	r3, [r3, #28]
 800a300:	f003 0304 	and.w	r3, r3, #4
 800a304:	2b00      	cmp	r3, #0
 800a306:	bf14      	ite	ne
 800a308:	2301      	movne	r3, #1
 800a30a:	2300      	moveq	r3, #0
 800a30c:	b2db      	uxtb	r3, r3
 800a30e:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 800a310:	69fb      	ldr	r3, [r7, #28]
 800a312:	7f1b      	ldrb	r3, [r3, #28]
 800a314:	f023 0304 	bic.w	r3, r3, #4
 800a318:	b2da      	uxtb	r2, r3
 800a31a:	69fb      	ldr	r3, [r7, #28]
 800a31c:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	2b00      	cmp	r3, #0
 800a322:	d13b      	bne.n	800a39c <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800a324:	69fb      	ldr	r3, [r7, #28]
 800a326:	6a1b      	ldr	r3, [r3, #32]
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d106      	bne.n	800a33a <err_tcp+0x126>
 800a32c:	4b1e      	ldr	r3, [pc, #120]	; (800a3a8 <err_tcp+0x194>)
 800a32e:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800a332:	4920      	ldr	r1, [pc, #128]	; (800a3b4 <err_tcp+0x1a0>)
 800a334:	481e      	ldr	r0, [pc, #120]	; (800a3b0 <err_tcp+0x19c>)
 800a336:	f00d f93f 	bl	80175b8 <iprintf>
      if (old_state == NETCONN_CLOSE) {
 800a33a:	7dfb      	ldrb	r3, [r7, #23]
 800a33c:	2b04      	cmp	r3, #4
 800a33e:	d104      	bne.n	800a34a <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 800a340:	69fb      	ldr	r3, [r7, #28]
 800a342:	6a1b      	ldr	r3, [r3, #32]
 800a344:	2200      	movs	r2, #0
 800a346:	711a      	strb	r2, [r3, #4]
 800a348:	e003      	b.n	800a352 <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 800a34a:	69fb      	ldr	r3, [r7, #28]
 800a34c:	6a1b      	ldr	r3, [r3, #32]
 800a34e:	78fa      	ldrb	r2, [r7, #3]
 800a350:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800a352:	69fb      	ldr	r3, [r7, #28]
 800a354:	6a1b      	ldr	r3, [r3, #32]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	330c      	adds	r3, #12
 800a35a:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 800a35c:	68b8      	ldr	r0, [r7, #8]
 800a35e:	f00d f829 	bl	80173b4 <sys_sem_valid>
 800a362:	4603      	mov	r3, r0
 800a364:	2b00      	cmp	r3, #0
 800a366:	d106      	bne.n	800a376 <err_tcp+0x162>
 800a368:	4b0f      	ldr	r3, [pc, #60]	; (800a3a8 <err_tcp+0x194>)
 800a36a:	f240 12ef 	movw	r2, #495	; 0x1ef
 800a36e:	4912      	ldr	r1, [pc, #72]	; (800a3b8 <err_tcp+0x1a4>)
 800a370:	480f      	ldr	r0, [pc, #60]	; (800a3b0 <err_tcp+0x19c>)
 800a372:	f00d f921 	bl	80175b8 <iprintf>
      conn->current_msg = NULL;
 800a376:	69fb      	ldr	r3, [r7, #28]
 800a378:	2200      	movs	r2, #0
 800a37a:	621a      	str	r2, [r3, #32]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 800a37c:	68b8      	ldr	r0, [r7, #8]
 800a37e:	f00c ffff 	bl	8017380 <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 800a382:	e00b      	b.n	800a39c <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 800a384:	69fb      	ldr	r3, [r7, #28]
 800a386:	6a1b      	ldr	r3, [r3, #32]
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d008      	beq.n	800a39e <err_tcp+0x18a>
 800a38c:	4b06      	ldr	r3, [pc, #24]	; (800a3a8 <err_tcp+0x194>)
 800a38e:	f240 12f7 	movw	r2, #503	; 0x1f7
 800a392:	490a      	ldr	r1, [pc, #40]	; (800a3bc <err_tcp+0x1a8>)
 800a394:	4806      	ldr	r0, [pc, #24]	; (800a3b0 <err_tcp+0x19c>)
 800a396:	f00d f90f 	bl	80175b8 <iprintf>
  }
}
 800a39a:	e000      	b.n	800a39e <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
 800a39c:	bf00      	nop
}
 800a39e:	bf00      	nop
 800a3a0:	3720      	adds	r7, #32
 800a3a2:	46bd      	mov	sp, r7
 800a3a4:	bd80      	pop	{r7, pc}
 800a3a6:	bf00      	nop
 800a3a8:	08018918 	.word	0x08018918
 800a3ac:	08018a0c 	.word	0x08018a0c
 800a3b0:	0801895c 	.word	0x0801895c
 800a3b4:	08018a1c 	.word	0x08018a1c
 800a3b8:	08018a38 	.word	0x08018a38
 800a3bc:	08018a54 	.word	0x08018a54

0800a3c0 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 800a3c0:	b580      	push	{r7, lr}
 800a3c2:	b084      	sub	sp, #16
 800a3c4:	af00      	add	r7, sp, #0
 800a3c6:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	685b      	ldr	r3, [r3, #4]
 800a3cc:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 800a3ce:	6879      	ldr	r1, [r7, #4]
 800a3d0:	68f8      	ldr	r0, [r7, #12]
 800a3d2:	f005 fddb 	bl	800ff8c <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 800a3d6:	490a      	ldr	r1, [pc, #40]	; (800a400 <setup_tcp+0x40>)
 800a3d8:	68f8      	ldr	r0, [r7, #12]
 800a3da:	f005 fde9 	bl	800ffb0 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 800a3de:	4909      	ldr	r1, [pc, #36]	; (800a404 <setup_tcp+0x44>)
 800a3e0:	68f8      	ldr	r0, [r7, #12]
 800a3e2:	f005 fe07 	bl	800fff4 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 800a3e6:	2202      	movs	r2, #2
 800a3e8:	4907      	ldr	r1, [pc, #28]	; (800a408 <setup_tcp+0x48>)
 800a3ea:	68f8      	ldr	r0, [r7, #12]
 800a3ec:	f005 fe5e 	bl	80100ac <tcp_poll>
  tcp_err(pcb, err_tcp);
 800a3f0:	4906      	ldr	r1, [pc, #24]	; (800a40c <setup_tcp+0x4c>)
 800a3f2:	68f8      	ldr	r0, [r7, #12]
 800a3f4:	f005 fe20 	bl	8010038 <tcp_err>
}
 800a3f8:	bf00      	nop
 800a3fa:	3710      	adds	r7, #16
 800a3fc:	46bd      	mov	sp, r7
 800a3fe:	bd80      	pop	{r7, pc}
 800a400:	08009f99 	.word	0x08009f99
 800a404:	0800a16d 	.word	0x0800a16d
 800a408:	0800a0a5 	.word	0x0800a0a5
 800a40c:	0800a215 	.word	0x0800a215

0800a410 <accept_function>:
 *
 * @see tcp.h (struct tcp_pcb_listen.accept) for parameters and return value
 */
static err_t
accept_function(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 800a410:	b590      	push	{r4, r7, lr}
 800a412:	b089      	sub	sp, #36	; 0x24
 800a414:	af00      	add	r7, sp, #0
 800a416:	60f8      	str	r0, [r7, #12]
 800a418:	60b9      	str	r1, [r7, #8]
 800a41a:	4613      	mov	r3, r2
 800a41c:	71fb      	strb	r3, [r7, #7]
  struct netconn *newconn;
  struct netconn *conn = (struct netconn *)arg;
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 800a422:	69fb      	ldr	r3, [r7, #28]
 800a424:	2b00      	cmp	r3, #0
 800a426:	d102      	bne.n	800a42e <accept_function+0x1e>
    return ERR_VAL;
 800a428:	f06f 0305 	mvn.w	r3, #5
 800a42c:	e0a1      	b.n	800a572 <accept_function+0x162>
  }
  if (!NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800a42e:	69fb      	ldr	r3, [r7, #28]
 800a430:	3314      	adds	r3, #20
 800a432:	4618      	mov	r0, r3
 800a434:	f00c ff2d 	bl	8017292 <sys_mbox_valid>
 800a438:	4603      	mov	r3, r0
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d102      	bne.n	800a444 <accept_function+0x34>
    LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: acceptmbox already deleted\n"));
    return ERR_VAL;
 800a43e:	f06f 0305 	mvn.w	r3, #5
 800a442:	e096      	b.n	800a572 <accept_function+0x162>
  }

  if (newpcb == NULL) {
 800a444:	68bb      	ldr	r3, [r7, #8]
 800a446:	2b00      	cmp	r3, #0
 800a448:	d11b      	bne.n	800a482 <accept_function+0x72>
    /* out-of-pcbs during connect: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 800a44a:	69fb      	ldr	r3, [r7, #28]
 800a44c:	f103 0414 	add.w	r4, r3, #20
 800a450:	f06f 000c 	mvn.w	r0, #12
 800a454:	f7ff fd34 	bl	8009ec0 <lwip_netconn_err_to_msg>
 800a458:	4603      	mov	r3, r0
 800a45a:	4619      	mov	r1, r3
 800a45c:	4620      	mov	r0, r4
 800a45e:	f00c fea3 	bl	80171a8 <sys_mbox_trypost>
 800a462:	4603      	mov	r3, r0
 800a464:	2b00      	cmp	r3, #0
 800a466:	d109      	bne.n	800a47c <accept_function+0x6c>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800a468:	69fb      	ldr	r3, [r7, #28]
 800a46a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d005      	beq.n	800a47c <accept_function+0x6c>
 800a470:	69fb      	ldr	r3, [r7, #28]
 800a472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a474:	2200      	movs	r2, #0
 800a476:	2100      	movs	r1, #0
 800a478:	69f8      	ldr	r0, [r7, #28]
 800a47a:	4798      	blx	r3
    }
    return ERR_VAL;
 800a47c:	f06f 0305 	mvn.w	r3, #5
 800a480:	e077      	b.n	800a572 <accept_function+0x162>
  }
  LWIP_ASSERT("expect newpcb == NULL or err == ERR_OK", err == ERR_OK);
 800a482:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a486:	2b00      	cmp	r3, #0
 800a488:	d006      	beq.n	800a498 <accept_function+0x88>
 800a48a:	4b3c      	ldr	r3, [pc, #240]	; (800a57c <accept_function+0x16c>)
 800a48c:	f240 222a 	movw	r2, #554	; 0x22a
 800a490:	493b      	ldr	r1, [pc, #236]	; (800a580 <accept_function+0x170>)
 800a492:	483c      	ldr	r0, [pc, #240]	; (800a584 <accept_function+0x174>)
 800a494:	f00d f890 	bl	80175b8 <iprintf>

  LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: newpcb->state: %s\n", tcp_debug_state_str(newpcb->state)));

  /* We have to set the callback here even though
   * the new socket is unknown. newconn->socket is marked as -1. */
  newconn = netconn_alloc(conn->type, conn->callback);
 800a498:	69fb      	ldr	r3, [r7, #28]
 800a49a:	781a      	ldrb	r2, [r3, #0]
 800a49c:	69fb      	ldr	r3, [r7, #28]
 800a49e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4a0:	4619      	mov	r1, r3
 800a4a2:	4610      	mov	r0, r2
 800a4a4:	f000 f8c8 	bl	800a638 <netconn_alloc>
 800a4a8:	61b8      	str	r0, [r7, #24]
  if (newconn == NULL) {
 800a4aa:	69bb      	ldr	r3, [r7, #24]
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d11b      	bne.n	800a4e8 <accept_function+0xd8>
    /* outof netconns: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 800a4b0:	69fb      	ldr	r3, [r7, #28]
 800a4b2:	f103 0414 	add.w	r4, r3, #20
 800a4b6:	f06f 000c 	mvn.w	r0, #12
 800a4ba:	f7ff fd01 	bl	8009ec0 <lwip_netconn_err_to_msg>
 800a4be:	4603      	mov	r3, r0
 800a4c0:	4619      	mov	r1, r3
 800a4c2:	4620      	mov	r0, r4
 800a4c4:	f00c fe70 	bl	80171a8 <sys_mbox_trypost>
 800a4c8:	4603      	mov	r3, r0
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d109      	bne.n	800a4e2 <accept_function+0xd2>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800a4ce:	69fb      	ldr	r3, [r7, #28]
 800a4d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d005      	beq.n	800a4e2 <accept_function+0xd2>
 800a4d6:	69fb      	ldr	r3, [r7, #28]
 800a4d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4da:	2200      	movs	r2, #0
 800a4dc:	2100      	movs	r1, #0
 800a4de:	69f8      	ldr	r0, [r7, #28]
 800a4e0:	4798      	blx	r3
    }
    return ERR_MEM;
 800a4e2:	f04f 33ff 	mov.w	r3, #4294967295
 800a4e6:	e044      	b.n	800a572 <accept_function+0x162>
  }
  newconn->pcb.tcp = newpcb;
 800a4e8:	69bb      	ldr	r3, [r7, #24]
 800a4ea:	68ba      	ldr	r2, [r7, #8]
 800a4ec:	605a      	str	r2, [r3, #4]
  setup_tcp(newconn);
 800a4ee:	69b8      	ldr	r0, [r7, #24]
 800a4f0:	f7ff ff66 	bl	800a3c0 <setup_tcp>

  /* handle backlog counter */
  tcp_backlog_delayed(newpcb);

  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 800a4f4:	69fb      	ldr	r3, [r7, #28]
 800a4f6:	3314      	adds	r3, #20
 800a4f8:	69b9      	ldr	r1, [r7, #24]
 800a4fa:	4618      	mov	r0, r3
 800a4fc:	f00c fe54 	bl	80171a8 <sys_mbox_trypost>
 800a500:	4603      	mov	r3, r0
 800a502:	2b00      	cmp	r3, #0
 800a504:	d02a      	beq.n	800a55c <accept_function+0x14c>
    /* When returning != ERR_OK, the pcb is aborted in tcp_process(),
       so do nothing here! */
    /* remove all references to this netconn from the pcb */
    struct tcp_pcb *pcb = newconn->pcb.tcp;
 800a506:	69bb      	ldr	r3, [r7, #24]
 800a508:	685b      	ldr	r3, [r3, #4]
 800a50a:	617b      	str	r3, [r7, #20]
    tcp_arg(pcb, NULL);
 800a50c:	2100      	movs	r1, #0
 800a50e:	6978      	ldr	r0, [r7, #20]
 800a510:	f005 fd3c 	bl	800ff8c <tcp_arg>
    tcp_recv(pcb, NULL);
 800a514:	2100      	movs	r1, #0
 800a516:	6978      	ldr	r0, [r7, #20]
 800a518:	f005 fd4a 	bl	800ffb0 <tcp_recv>
    tcp_sent(pcb, NULL);
 800a51c:	2100      	movs	r1, #0
 800a51e:	6978      	ldr	r0, [r7, #20]
 800a520:	f005 fd68 	bl	800fff4 <tcp_sent>
    tcp_poll(pcb, NULL, 0);
 800a524:	2200      	movs	r2, #0
 800a526:	2100      	movs	r1, #0
 800a528:	6978      	ldr	r0, [r7, #20]
 800a52a:	f005 fdbf 	bl	80100ac <tcp_poll>
    tcp_err(pcb, NULL);
 800a52e:	2100      	movs	r1, #0
 800a530:	6978      	ldr	r0, [r7, #20]
 800a532:	f005 fd81 	bl	8010038 <tcp_err>
    /* remove reference from to the pcb from this netconn */
    newconn->pcb.tcp = NULL;
 800a536:	69bb      	ldr	r3, [r7, #24]
 800a538:	2200      	movs	r2, #0
 800a53a:	605a      	str	r2, [r3, #4]
    /* no need to drain since we know the recvmbox is empty. */
    sys_mbox_free(&newconn->recvmbox);
 800a53c:	69bb      	ldr	r3, [r7, #24]
 800a53e:	3310      	adds	r3, #16
 800a540:	4618      	mov	r0, r3
 800a542:	f00c fe1f 	bl	8017184 <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
 800a546:	69bb      	ldr	r3, [r7, #24]
 800a548:	3310      	adds	r3, #16
 800a54a:	4618      	mov	r0, r3
 800a54c:	f00c feb2 	bl	80172b4 <sys_mbox_set_invalid>
    netconn_free(newconn);
 800a550:	69b8      	ldr	r0, [r7, #24]
 800a552:	f000 f8db 	bl	800a70c <netconn_free>
    return ERR_MEM;
 800a556:	f04f 33ff 	mov.w	r3, #4294967295
 800a55a:	e00a      	b.n	800a572 <accept_function+0x162>
  } else {
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800a55c:	69fb      	ldr	r3, [r7, #28]
 800a55e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a560:	2b00      	cmp	r3, #0
 800a562:	d005      	beq.n	800a570 <accept_function+0x160>
 800a564:	69fb      	ldr	r3, [r7, #28]
 800a566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a568:	2200      	movs	r2, #0
 800a56a:	2100      	movs	r1, #0
 800a56c:	69f8      	ldr	r0, [r7, #28]
 800a56e:	4798      	blx	r3
  }

  return ERR_OK;
 800a570:	2300      	movs	r3, #0
}
 800a572:	4618      	mov	r0, r3
 800a574:	3724      	adds	r7, #36	; 0x24
 800a576:	46bd      	mov	sp, r7
 800a578:	bd90      	pop	{r4, r7, pc}
 800a57a:	bf00      	nop
 800a57c:	08018918 	.word	0x08018918
 800a580:	08018a70 	.word	0x08018a70
 800a584:	0801895c 	.word	0x0801895c

0800a588 <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 800a588:	b590      	push	{r4, r7, lr}
 800a58a:	b085      	sub	sp, #20
 800a58c:	af00      	add	r7, sp, #0
 800a58e:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 800a590:	2300      	movs	r3, #0
 800a592:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	685b      	ldr	r3, [r3, #4]
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d006      	beq.n	800a5ac <pcb_new+0x24>
 800a59e:	4b18      	ldr	r3, [pc, #96]	; (800a600 <pcb_new+0x78>)
 800a5a0:	f240 2265 	movw	r2, #613	; 0x265
 800a5a4:	4917      	ldr	r1, [pc, #92]	; (800a604 <pcb_new+0x7c>)
 800a5a6:	4818      	ldr	r0, [pc, #96]	; (800a608 <pcb_new+0x80>)
 800a5a8:	f00d f806 	bl	80175b8 <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	781b      	ldrb	r3, [r3, #0]
 800a5b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a5b6:	2b10      	cmp	r3, #16
 800a5b8:	d112      	bne.n	800a5e0 <pcb_new+0x58>
      }
      break;
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	681c      	ldr	r4, [r3, #0]
 800a5be:	7bfb      	ldrb	r3, [r7, #15]
 800a5c0:	4618      	mov	r0, r3
 800a5c2:	f005 fcd5 	bl	800ff70 <tcp_new_ip_type>
 800a5c6:	4603      	mov	r3, r0
 800a5c8:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	685b      	ldr	r3, [r3, #4]
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d009      	beq.n	800a5e8 <pcb_new+0x60>
        setup_tcp(msg->conn);
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	4618      	mov	r0, r3
 800a5da:	f7ff fef1 	bl	800a3c0 <setup_tcp>
      }
      break;
 800a5de:	e003      	b.n	800a5e8 <pcb_new+0x60>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	22fa      	movs	r2, #250	; 0xfa
 800a5e4:	711a      	strb	r2, [r3, #4]
      return;
 800a5e6:	e008      	b.n	800a5fa <pcb_new+0x72>
      break;
 800a5e8:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	685b      	ldr	r3, [r3, #4]
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d102      	bne.n	800a5fa <pcb_new+0x72>
    msg->err = ERR_MEM;
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	22ff      	movs	r2, #255	; 0xff
 800a5f8:	711a      	strb	r2, [r3, #4]
  }
}
 800a5fa:	3714      	adds	r7, #20
 800a5fc:	46bd      	mov	sp, r7
 800a5fe:	bd90      	pop	{r4, r7, pc}
 800a600:	08018918 	.word	0x08018918
 800a604:	08018a98 	.word	0x08018a98
 800a608:	0801895c 	.word	0x0801895c

0800a60c <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 800a60c:	b580      	push	{r7, lr}
 800a60e:	b084      	sub	sp, #16
 800a610:	af00      	add	r7, sp, #0
 800a612:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	2200      	movs	r2, #0
 800a61c:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	685b      	ldr	r3, [r3, #4]
 800a624:	2b00      	cmp	r3, #0
 800a626:	d102      	bne.n	800a62e <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 800a628:	68f8      	ldr	r0, [r7, #12]
 800a62a:	f7ff ffad 	bl	800a588 <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 800a62e:	bf00      	nop
 800a630:	3710      	adds	r7, #16
 800a632:	46bd      	mov	sp, r7
 800a634:	bd80      	pop	{r7, pc}
	...

0800a638 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 800a638:	b580      	push	{r7, lr}
 800a63a:	b086      	sub	sp, #24
 800a63c:	af00      	add	r7, sp, #0
 800a63e:	4603      	mov	r3, r0
 800a640:	6039      	str	r1, [r7, #0]
 800a642:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 800a644:	2300      	movs	r3, #0
 800a646:	75fb      	strb	r3, [r7, #23]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 800a648:	2006      	movs	r0, #6
 800a64a:	f002 ff0f 	bl	800d46c <memp_malloc>
 800a64e:	6138      	str	r0, [r7, #16]
  if (conn == NULL) {
 800a650:	693b      	ldr	r3, [r7, #16]
 800a652:	2b00      	cmp	r3, #0
 800a654:	d101      	bne.n	800a65a <netconn_alloc+0x22>
    return NULL;
 800a656:	2300      	movs	r3, #0
 800a658:	e04d      	b.n	800a6f6 <netconn_alloc+0xbe>
  }

  conn->pending_err = ERR_OK;
 800a65a:	693b      	ldr	r3, [r7, #16]
 800a65c:	2200      	movs	r2, #0
 800a65e:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 800a660:	693b      	ldr	r3, [r7, #16]
 800a662:	79fa      	ldrb	r2, [r7, #7]
 800a664:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 800a666:	693b      	ldr	r3, [r7, #16]
 800a668:	2200      	movs	r2, #0
 800a66a:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 800a66c:	79fb      	ldrb	r3, [r7, #7]
 800a66e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a672:	2b10      	cmp	r3, #16
 800a674:	d10c      	bne.n	800a690 <netconn_alloc+0x58>
#endif /* LWIP_NETBUF_RECVINFO */
      break;
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 800a676:	2306      	movs	r3, #6
 800a678:	60fb      	str	r3, [r7, #12]
      break;
 800a67a:	bf00      	nop
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
      goto free_and_return;
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 800a67c:	693b      	ldr	r3, [r7, #16]
 800a67e:	3310      	adds	r3, #16
 800a680:	68f9      	ldr	r1, [r7, #12]
 800a682:	4618      	mov	r0, r3
 800a684:	f00c fd5c 	bl	8017140 <sys_mbox_new>
 800a688:	4603      	mov	r3, r0
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d008      	beq.n	800a6a0 <netconn_alloc+0x68>
    goto free_and_return;
 800a68e:	e02d      	b.n	800a6ec <netconn_alloc+0xb4>
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 800a690:	4b1b      	ldr	r3, [pc, #108]	; (800a700 <netconn_alloc+0xc8>)
 800a692:	f240 22e5 	movw	r2, #741	; 0x2e5
 800a696:	491b      	ldr	r1, [pc, #108]	; (800a704 <netconn_alloc+0xcc>)
 800a698:	481b      	ldr	r0, [pc, #108]	; (800a708 <netconn_alloc+0xd0>)
 800a69a:	f00c ff8d 	bl	80175b8 <iprintf>
      goto free_and_return;
 800a69e:	e025      	b.n	800a6ec <netconn_alloc+0xb4>
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 800a6a0:	693b      	ldr	r3, [r7, #16]
 800a6a2:	330c      	adds	r3, #12
 800a6a4:	2100      	movs	r1, #0
 800a6a6:	4618      	mov	r0, r3
 800a6a8:	f00c fe11 	bl	80172ce <sys_sem_new>
 800a6ac:	4603      	mov	r3, r0
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d005      	beq.n	800a6be <netconn_alloc+0x86>
    sys_mbox_free(&conn->recvmbox);
 800a6b2:	693b      	ldr	r3, [r7, #16]
 800a6b4:	3310      	adds	r3, #16
 800a6b6:	4618      	mov	r0, r3
 800a6b8:	f00c fd64 	bl	8017184 <sys_mbox_free>
    goto free_and_return;
 800a6bc:	e016      	b.n	800a6ec <netconn_alloc+0xb4>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 800a6be:	693b      	ldr	r3, [r7, #16]
 800a6c0:	3314      	adds	r3, #20
 800a6c2:	4618      	mov	r0, r3
 800a6c4:	f00c fdf6 	bl	80172b4 <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 800a6c8:	693b      	ldr	r3, [r7, #16]
 800a6ca:	2200      	movs	r2, #0
 800a6cc:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 800a6ce:	693b      	ldr	r3, [r7, #16]
 800a6d0:	f04f 32ff 	mov.w	r2, #4294967295
 800a6d4:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 800a6d6:	693b      	ldr	r3, [r7, #16]
 800a6d8:	683a      	ldr	r2, [r7, #0]
 800a6da:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCP
  conn->current_msg  = NULL;
 800a6dc:	693b      	ldr	r3, [r7, #16]
 800a6de:	2200      	movs	r2, #0
 800a6e0:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 800a6e2:	693b      	ldr	r3, [r7, #16]
 800a6e4:	7dfa      	ldrb	r2, [r7, #23]
 800a6e6:	771a      	strb	r2, [r3, #28]
  return conn;
 800a6e8:	693b      	ldr	r3, [r7, #16]
 800a6ea:	e004      	b.n	800a6f6 <netconn_alloc+0xbe>
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 800a6ec:	6939      	ldr	r1, [r7, #16]
 800a6ee:	2006      	movs	r0, #6
 800a6f0:	f002 ff0e 	bl	800d510 <memp_free>
  return NULL;
 800a6f4:	2300      	movs	r3, #0
}
 800a6f6:	4618      	mov	r0, r3
 800a6f8:	3718      	adds	r7, #24
 800a6fa:	46bd      	mov	sp, r7
 800a6fc:	bd80      	pop	{r7, pc}
 800a6fe:	bf00      	nop
 800a700:	08018918 	.word	0x08018918
 800a704:	08018ab8 	.word	0x08018ab8
 800a708:	0801895c 	.word	0x0801895c

0800a70c <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 800a70c:	b580      	push	{r7, lr}
 800a70e:	b082      	sub	sp, #8
 800a710:	af00      	add	r7, sp, #0
 800a712:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	685b      	ldr	r3, [r3, #4]
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d006      	beq.n	800a72a <netconn_free+0x1e>
 800a71c:	4b1b      	ldr	r3, [pc, #108]	; (800a78c <netconn_free+0x80>)
 800a71e:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800a722:	491b      	ldr	r1, [pc, #108]	; (800a790 <netconn_free+0x84>)
 800a724:	481b      	ldr	r0, [pc, #108]	; (800a794 <netconn_free+0x88>)
 800a726:	f00c ff47 	bl	80175b8 <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	3310      	adds	r3, #16
 800a72e:	4618      	mov	r0, r3
 800a730:	f00c fdaf 	bl	8017292 <sys_mbox_valid>
 800a734:	4603      	mov	r3, r0
 800a736:	2b00      	cmp	r3, #0
 800a738:	d006      	beq.n	800a748 <netconn_free+0x3c>
 800a73a:	4b14      	ldr	r3, [pc, #80]	; (800a78c <netconn_free+0x80>)
 800a73c:	f44f 7249 	mov.w	r2, #804	; 0x324
 800a740:	4915      	ldr	r1, [pc, #84]	; (800a798 <netconn_free+0x8c>)
 800a742:	4814      	ldr	r0, [pc, #80]	; (800a794 <netconn_free+0x88>)
 800a744:	f00c ff38 	bl	80175b8 <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	3314      	adds	r3, #20
 800a74c:	4618      	mov	r0, r3
 800a74e:	f00c fda0 	bl	8017292 <sys_mbox_valid>
 800a752:	4603      	mov	r3, r0
 800a754:	2b00      	cmp	r3, #0
 800a756:	d006      	beq.n	800a766 <netconn_free+0x5a>
 800a758:	4b0c      	ldr	r3, [pc, #48]	; (800a78c <netconn_free+0x80>)
 800a75a:	f240 3227 	movw	r2, #807	; 0x327
 800a75e:	490f      	ldr	r1, [pc, #60]	; (800a79c <netconn_free+0x90>)
 800a760:	480c      	ldr	r0, [pc, #48]	; (800a794 <netconn_free+0x88>)
 800a762:	f00c ff29 	bl	80175b8 <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	330c      	adds	r3, #12
 800a76a:	4618      	mov	r0, r3
 800a76c:	f00c fe15 	bl	801739a <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	330c      	adds	r3, #12
 800a774:	4618      	mov	r0, r3
 800a776:	f00c fe2e 	bl	80173d6 <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 800a77a:	6879      	ldr	r1, [r7, #4]
 800a77c:	2006      	movs	r0, #6
 800a77e:	f002 fec7 	bl	800d510 <memp_free>
}
 800a782:	bf00      	nop
 800a784:	3708      	adds	r7, #8
 800a786:	46bd      	mov	sp, r7
 800a788:	bd80      	pop	{r7, pc}
 800a78a:	bf00      	nop
 800a78c:	08018918 	.word	0x08018918
 800a790:	08018ae0 	.word	0x08018ae0
 800a794:	0801895c 	.word	0x0801895c
 800a798:	08018b10 	.word	0x08018b10
 800a79c:	08018b4c 	.word	0x08018b4c

0800a7a0 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 800a7a0:	b580      	push	{r7, lr}
 800a7a2:	b086      	sub	sp, #24
 800a7a4:	af00      	add	r7, sp, #0
 800a7a6:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	3310      	adds	r3, #16
 800a7ac:	4618      	mov	r0, r3
 800a7ae:	f00c fd70 	bl	8017292 <sys_mbox_valid>
 800a7b2:	4603      	mov	r3, r0
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d02f      	beq.n	800a818 <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800a7b8:	e018      	b.n	800a7ec <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	781b      	ldrb	r3, [r3, #0]
 800a7be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a7c2:	2b10      	cmp	r3, #16
 800a7c4:	d10e      	bne.n	800a7e4 <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 800a7c6:	693b      	ldr	r3, [r7, #16]
 800a7c8:	f107 020f 	add.w	r2, r7, #15
 800a7cc:	4611      	mov	r1, r2
 800a7ce:	4618      	mov	r0, r3
 800a7d0:	f7ff fba8 	bl	8009f24 <lwip_netconn_is_err_msg>
 800a7d4:	4603      	mov	r3, r0
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d108      	bne.n	800a7ec <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 800a7da:	693b      	ldr	r3, [r7, #16]
 800a7dc:	4618      	mov	r0, r3
 800a7de:	f003 fd65 	bl	800e2ac <pbuf_free>
 800a7e2:	e003      	b.n	800a7ec <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 800a7e4:	693b      	ldr	r3, [r7, #16]
 800a7e6:	4618      	mov	r0, r3
 800a7e8:	f000 fef2 	bl	800b5d0 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	3310      	adds	r3, #16
 800a7f0:	f107 0210 	add.w	r2, r7, #16
 800a7f4:	4611      	mov	r1, r2
 800a7f6:	4618      	mov	r0, r3
 800a7f8:	f00c fd2f 	bl	801725a <sys_arch_mbox_tryfetch>
 800a7fc:	4603      	mov	r3, r0
 800a7fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a802:	d1da      	bne.n	800a7ba <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	3310      	adds	r3, #16
 800a808:	4618      	mov	r0, r3
 800a80a:	f00c fcbb 	bl	8017184 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	3310      	adds	r3, #16
 800a812:	4618      	mov	r0, r3
 800a814:	f00c fd4e 	bl	80172b4 <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	3314      	adds	r3, #20
 800a81c:	4618      	mov	r0, r3
 800a81e:	f00c fd38 	bl	8017292 <sys_mbox_valid>
 800a822:	4603      	mov	r3, r0
 800a824:	2b00      	cmp	r3, #0
 800a826:	d034      	beq.n	800a892 <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800a828:	e01d      	b.n	800a866 <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 800a82a:	693b      	ldr	r3, [r7, #16]
 800a82c:	f107 020e 	add.w	r2, r7, #14
 800a830:	4611      	mov	r1, r2
 800a832:	4618      	mov	r0, r3
 800a834:	f7ff fb76 	bl	8009f24 <lwip_netconn_is_err_msg>
 800a838:	4603      	mov	r3, r0
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d113      	bne.n	800a866 <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 800a83e:	693b      	ldr	r3, [r7, #16]
 800a840:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 800a842:	6978      	ldr	r0, [r7, #20]
 800a844:	f7ff ffac 	bl	800a7a0 <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 800a848:	697b      	ldr	r3, [r7, #20]
 800a84a:	685b      	ldr	r3, [r3, #4]
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d007      	beq.n	800a860 <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 800a850:	697b      	ldr	r3, [r7, #20]
 800a852:	685b      	ldr	r3, [r3, #4]
 800a854:	4618      	mov	r0, r3
 800a856:	f004 fb0f 	bl	800ee78 <tcp_abort>
            newconn->pcb.tcp = NULL;
 800a85a:	697b      	ldr	r3, [r7, #20]
 800a85c:	2200      	movs	r2, #0
 800a85e:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 800a860:	6978      	ldr	r0, [r7, #20]
 800a862:	f7ff ff53 	bl	800a70c <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	3314      	adds	r3, #20
 800a86a:	f107 0210 	add.w	r2, r7, #16
 800a86e:	4611      	mov	r1, r2
 800a870:	4618      	mov	r0, r3
 800a872:	f00c fcf2 	bl	801725a <sys_arch_mbox_tryfetch>
 800a876:	4603      	mov	r3, r0
 800a878:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a87c:	d1d5      	bne.n	800a82a <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	3314      	adds	r3, #20
 800a882:	4618      	mov	r0, r3
 800a884:	f00c fc7e 	bl	8017184 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	3314      	adds	r3, #20
 800a88c:	4618      	mov	r0, r3
 800a88e:	f00c fd11 	bl	80172b4 <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 800a892:	bf00      	nop
 800a894:	3718      	adds	r7, #24
 800a896:	46bd      	mov	sp, r7
 800a898:	bd80      	pop	{r7, pc}
	...

0800a89c <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800a89c:	b580      	push	{r7, lr}
 800a89e:	b086      	sub	sp, #24
 800a8a0:	af00      	add	r7, sp, #0
 800a8a2:	6078      	str	r0, [r7, #4]
 800a8a4:	460b      	mov	r3, r1
 800a8a6:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 800a8a8:	2300      	movs	r3, #0
 800a8aa:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d106      	bne.n	800a8c0 <lwip_netconn_do_close_internal+0x24>
 800a8b2:	4ba1      	ldr	r3, [pc, #644]	; (800ab38 <lwip_netconn_do_close_internal+0x29c>)
 800a8b4:	f240 32a2 	movw	r2, #930	; 0x3a2
 800a8b8:	49a0      	ldr	r1, [pc, #640]	; (800ab3c <lwip_netconn_do_close_internal+0x2a0>)
 800a8ba:	48a1      	ldr	r0, [pc, #644]	; (800ab40 <lwip_netconn_do_close_internal+0x2a4>)
 800a8bc:	f00c fe7c 	bl	80175b8 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	781b      	ldrb	r3, [r3, #0]
 800a8c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a8c8:	2b10      	cmp	r3, #16
 800a8ca:	d006      	beq.n	800a8da <lwip_netconn_do_close_internal+0x3e>
 800a8cc:	4b9a      	ldr	r3, [pc, #616]	; (800ab38 <lwip_netconn_do_close_internal+0x29c>)
 800a8ce:	f240 32a3 	movw	r2, #931	; 0x3a3
 800a8d2:	499c      	ldr	r1, [pc, #624]	; (800ab44 <lwip_netconn_do_close_internal+0x2a8>)
 800a8d4:	489a      	ldr	r0, [pc, #616]	; (800ab40 <lwip_netconn_do_close_internal+0x2a4>)
 800a8d6:	f00c fe6f 	bl	80175b8 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	785b      	ldrb	r3, [r3, #1]
 800a8de:	2b04      	cmp	r3, #4
 800a8e0:	d006      	beq.n	800a8f0 <lwip_netconn_do_close_internal+0x54>
 800a8e2:	4b95      	ldr	r3, [pc, #596]	; (800ab38 <lwip_netconn_do_close_internal+0x29c>)
 800a8e4:	f44f 7269 	mov.w	r2, #932	; 0x3a4
 800a8e8:	4997      	ldr	r1, [pc, #604]	; (800ab48 <lwip_netconn_do_close_internal+0x2ac>)
 800a8ea:	4895      	ldr	r0, [pc, #596]	; (800ab40 <lwip_netconn_do_close_internal+0x2a4>)
 800a8ec:	f00c fe64 	bl	80175b8 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	685b      	ldr	r3, [r3, #4]
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d106      	bne.n	800a906 <lwip_netconn_do_close_internal+0x6a>
 800a8f8:	4b8f      	ldr	r3, [pc, #572]	; (800ab38 <lwip_netconn_do_close_internal+0x29c>)
 800a8fa:	f240 32a5 	movw	r2, #933	; 0x3a5
 800a8fe:	4993      	ldr	r1, [pc, #588]	; (800ab4c <lwip_netconn_do_close_internal+0x2b0>)
 800a900:	488f      	ldr	r0, [pc, #572]	; (800ab40 <lwip_netconn_do_close_internal+0x2a4>)
 800a902:	f00c fe59 	bl	80175b8 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	6a1b      	ldr	r3, [r3, #32]
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d106      	bne.n	800a91c <lwip_netconn_do_close_internal+0x80>
 800a90e:	4b8a      	ldr	r3, [pc, #552]	; (800ab38 <lwip_netconn_do_close_internal+0x29c>)
 800a910:	f240 32a6 	movw	r2, #934	; 0x3a6
 800a914:	498e      	ldr	r1, [pc, #568]	; (800ab50 <lwip_netconn_do_close_internal+0x2b4>)
 800a916:	488a      	ldr	r0, [pc, #552]	; (800ab40 <lwip_netconn_do_close_internal+0x2a4>)
 800a918:	f00c fe4e 	bl	80175b8 <iprintf>

  tpcb = conn->pcb.tcp;
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	685b      	ldr	r3, [r3, #4]
 800a920:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	6a1b      	ldr	r3, [r3, #32]
 800a926:	7a1b      	ldrb	r3, [r3, #8]
 800a928:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 800a92a:	7bfb      	ldrb	r3, [r7, #15]
 800a92c:	f003 0301 	and.w	r3, r3, #1
 800a930:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 800a932:	7bfb      	ldrb	r3, [r7, #15]
 800a934:	f003 0302 	and.w	r3, r3, #2
 800a938:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 800a93a:	7bfb      	ldrb	r3, [r7, #15]
 800a93c:	2b03      	cmp	r3, #3
 800a93e:	d102      	bne.n	800a946 <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 800a940:	2301      	movs	r3, #1
 800a942:	75bb      	strb	r3, [r7, #22]
 800a944:	e01f      	b.n	800a986 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 800a946:	7bbb      	ldrb	r3, [r7, #14]
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d00e      	beq.n	800a96a <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 800a94c:	693b      	ldr	r3, [r7, #16]
 800a94e:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 800a950:	2b05      	cmp	r3, #5
 800a952:	d007      	beq.n	800a964 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 800a954:	693b      	ldr	r3, [r7, #16]
 800a956:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 800a958:	2b06      	cmp	r3, #6
 800a95a:	d003      	beq.n	800a964 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 800a95c:	693b      	ldr	r3, [r7, #16]
 800a95e:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 800a960:	2b08      	cmp	r3, #8
 800a962:	d102      	bne.n	800a96a <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 800a964:	2301      	movs	r3, #1
 800a966:	75bb      	strb	r3, [r7, #22]
 800a968:	e00d      	b.n	800a986 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 800a96a:	7b7b      	ldrb	r3, [r7, #13]
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d008      	beq.n	800a982 <lwip_netconn_do_close_internal+0xe6>
 800a970:	693b      	ldr	r3, [r7, #16]
 800a972:	8b5b      	ldrh	r3, [r3, #26]
 800a974:	f003 0310 	and.w	r3, r3, #16
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d002      	beq.n	800a982 <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 800a97c:	2301      	movs	r3, #1
 800a97e:	75bb      	strb	r3, [r7, #22]
 800a980:	e001      	b.n	800a986 <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 800a982:	2300      	movs	r3, #0
 800a984:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 800a986:	7dbb      	ldrb	r3, [r7, #22]
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d003      	beq.n	800a994 <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 800a98c:	2100      	movs	r1, #0
 800a98e:	6938      	ldr	r0, [r7, #16]
 800a990:	f005 fafc 	bl	800ff8c <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 800a994:	693b      	ldr	r3, [r7, #16]
 800a996:	7d1b      	ldrb	r3, [r3, #20]
 800a998:	2b01      	cmp	r3, #1
 800a99a:	d104      	bne.n	800a9a6 <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 800a99c:	2100      	movs	r1, #0
 800a99e:	6938      	ldr	r0, [r7, #16]
 800a9a0:	f005 fb6c 	bl	801007c <tcp_accept>
 800a9a4:	e01d      	b.n	800a9e2 <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 800a9a6:	7bbb      	ldrb	r3, [r7, #14]
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d007      	beq.n	800a9bc <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 800a9ac:	2100      	movs	r1, #0
 800a9ae:	6938      	ldr	r0, [r7, #16]
 800a9b0:	f005 fafe 	bl	800ffb0 <tcp_recv>
      tcp_accept(tpcb, NULL);
 800a9b4:	2100      	movs	r1, #0
 800a9b6:	6938      	ldr	r0, [r7, #16]
 800a9b8:	f005 fb60 	bl	801007c <tcp_accept>
    }
    if (shut_tx) {
 800a9bc:	7b7b      	ldrb	r3, [r7, #13]
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d003      	beq.n	800a9ca <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 800a9c2:	2100      	movs	r1, #0
 800a9c4:	6938      	ldr	r0, [r7, #16]
 800a9c6:	f005 fb15 	bl	800fff4 <tcp_sent>
    }
    if (shut_close) {
 800a9ca:	7dbb      	ldrb	r3, [r7, #22]
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d008      	beq.n	800a9e2 <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 800a9d0:	2200      	movs	r2, #0
 800a9d2:	2100      	movs	r1, #0
 800a9d4:	6938      	ldr	r0, [r7, #16]
 800a9d6:	f005 fb69 	bl	80100ac <tcp_poll>
      tcp_err(tpcb, NULL);
 800a9da:	2100      	movs	r1, #0
 800a9dc:	6938      	ldr	r0, [r7, #16]
 800a9de:	f005 fb2b 	bl	8010038 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 800a9e2:	7dbb      	ldrb	r3, [r7, #22]
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d005      	beq.n	800a9f4 <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 800a9e8:	6938      	ldr	r0, [r7, #16]
 800a9ea:	f004 f901 	bl	800ebf0 <tcp_close>
 800a9ee:	4603      	mov	r3, r0
 800a9f0:	75fb      	strb	r3, [r7, #23]
 800a9f2:	e007      	b.n	800aa04 <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 800a9f4:	7bbb      	ldrb	r3, [r7, #14]
 800a9f6:	7b7a      	ldrb	r2, [r7, #13]
 800a9f8:	4619      	mov	r1, r3
 800a9fa:	6938      	ldr	r0, [r7, #16]
 800a9fc:	f004 f924 	bl	800ec48 <tcp_shutdown>
 800aa00:	4603      	mov	r3, r0
 800aa02:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 800aa04:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d102      	bne.n	800aa12 <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 800aa0c:	2301      	movs	r3, #1
 800aa0e:	757b      	strb	r3, [r7, #21]
 800aa10:	e016      	b.n	800aa40 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 800aa12:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800aa16:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa1a:	d10f      	bne.n	800aa3c <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	6a1b      	ldr	r3, [r3, #32]
 800aa20:	7a5b      	ldrb	r3, [r3, #9]
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d10c      	bne.n	800aa40 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 800aa26:	2301      	movs	r3, #1
 800aa28:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 800aa2a:	7dbb      	ldrb	r3, [r7, #22]
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d007      	beq.n	800aa40 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 800aa30:	6938      	ldr	r0, [r7, #16]
 800aa32:	f004 fa21 	bl	800ee78 <tcp_abort>
          err = ERR_OK;
 800aa36:	2300      	movs	r3, #0
 800aa38:	75fb      	strb	r3, [r7, #23]
 800aa3a:	e001      	b.n	800aa40 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 800aa3c:	2301      	movs	r3, #1
 800aa3e:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 800aa40:	7d7b      	ldrb	r3, [r7, #21]
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d044      	beq.n	800aad0 <lwip_netconn_do_close_internal+0x234>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	6a1b      	ldr	r3, [r3, #32]
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	330c      	adds	r3, #12
 800aa4e:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	6a1b      	ldr	r3, [r3, #32]
 800aa54:	7dfa      	ldrb	r2, [r7, #23]
 800aa56:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	2200      	movs	r2, #0
 800aa5c:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	2200      	movs	r2, #0
 800aa62:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 800aa64:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d129      	bne.n	800aac0 <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 800aa6c:	7dbb      	ldrb	r3, [r7, #22]
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d00c      	beq.n	800aa8c <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	2200      	movs	r2, #0
 800aa76:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d005      	beq.n	800aa8c <lwip_netconn_do_close_internal+0x1f0>
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa84:	2200      	movs	r2, #0
 800aa86:	2104      	movs	r1, #4
 800aa88:	6878      	ldr	r0, [r7, #4]
 800aa8a:	4798      	blx	r3
      }
      if (shut_rx) {
 800aa8c:	7bbb      	ldrb	r3, [r7, #14]
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d009      	beq.n	800aaa6 <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d005      	beq.n	800aaa6 <lwip_netconn_do_close_internal+0x20a>
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa9e:	2200      	movs	r2, #0
 800aaa0:	2100      	movs	r1, #0
 800aaa2:	6878      	ldr	r0, [r7, #4]
 800aaa4:	4798      	blx	r3
      }
      if (shut_tx) {
 800aaa6:	7b7b      	ldrb	r3, [r7, #13]
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d009      	beq.n	800aac0 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d005      	beq.n	800aac0 <lwip_netconn_do_close_internal+0x224>
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aab8:	2200      	movs	r2, #0
 800aaba:	2102      	movs	r1, #2
 800aabc:	6878      	ldr	r0, [r7, #4]
 800aabe:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800aac0:	78fb      	ldrb	r3, [r7, #3]
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d002      	beq.n	800aacc <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 800aac6:	68b8      	ldr	r0, [r7, #8]
 800aac8:	f00c fc5a 	bl	8017380 <sys_sem_signal>
    }
    return ERR_OK;
 800aacc:	2300      	movs	r3, #0
 800aace:	e02e      	b.n	800ab2e <lwip_netconn_do_close_internal+0x292>
  }
  if (!close_finished) {
 800aad0:	7d7b      	ldrb	r3, [r7, #21]
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d11e      	bne.n	800ab14 <lwip_netconn_do_close_internal+0x278>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 800aad6:	693b      	ldr	r3, [r7, #16]
 800aad8:	7d1b      	ldrb	r3, [r3, #20]
 800aada:	2b01      	cmp	r3, #1
 800aadc:	d106      	bne.n	800aaec <lwip_netconn_do_close_internal+0x250>
 800aade:	4b16      	ldr	r3, [pc, #88]	; (800ab38 <lwip_netconn_do_close_internal+0x29c>)
 800aae0:	f240 4241 	movw	r2, #1089	; 0x441
 800aae4:	491b      	ldr	r1, [pc, #108]	; (800ab54 <lwip_netconn_do_close_internal+0x2b8>)
 800aae6:	4816      	ldr	r0, [pc, #88]	; (800ab40 <lwip_netconn_do_close_internal+0x2a4>)
 800aae8:	f00c fd66 	bl	80175b8 <iprintf>
    if (shut_tx) {
 800aaec:	7b7b      	ldrb	r3, [r7, #13]
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d003      	beq.n	800aafa <lwip_netconn_do_close_internal+0x25e>
      tcp_sent(tpcb, sent_tcp);
 800aaf2:	4919      	ldr	r1, [pc, #100]	; (800ab58 <lwip_netconn_do_close_internal+0x2bc>)
 800aaf4:	6938      	ldr	r0, [r7, #16]
 800aaf6:	f005 fa7d 	bl	800fff4 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 800aafa:	2201      	movs	r2, #1
 800aafc:	4917      	ldr	r1, [pc, #92]	; (800ab5c <lwip_netconn_do_close_internal+0x2c0>)
 800aafe:	6938      	ldr	r0, [r7, #16]
 800ab00:	f005 fad4 	bl	80100ac <tcp_poll>
    tcp_err(tpcb, err_tcp);
 800ab04:	4916      	ldr	r1, [pc, #88]	; (800ab60 <lwip_netconn_do_close_internal+0x2c4>)
 800ab06:	6938      	ldr	r0, [r7, #16]
 800ab08:	f005 fa96 	bl	8010038 <tcp_err>
    tcp_arg(tpcb, conn);
 800ab0c:	6879      	ldr	r1, [r7, #4]
 800ab0e:	6938      	ldr	r0, [r7, #16]
 800ab10:	f005 fa3c 	bl	800ff8c <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 800ab14:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d106      	bne.n	800ab2a <lwip_netconn_do_close_internal+0x28e>
 800ab1c:	4b06      	ldr	r3, [pc, #24]	; (800ab38 <lwip_netconn_do_close_internal+0x29c>)
 800ab1e:	f240 424d 	movw	r2, #1101	; 0x44d
 800ab22:	4910      	ldr	r1, [pc, #64]	; (800ab64 <lwip_netconn_do_close_internal+0x2c8>)
 800ab24:	4806      	ldr	r0, [pc, #24]	; (800ab40 <lwip_netconn_do_close_internal+0x2a4>)
 800ab26:	f00c fd47 	bl	80175b8 <iprintf>
  return err;
 800ab2a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ab2e:	4618      	mov	r0, r3
 800ab30:	3718      	adds	r7, #24
 800ab32:	46bd      	mov	sp, r7
 800ab34:	bd80      	pop	{r7, pc}
 800ab36:	bf00      	nop
 800ab38:	08018918 	.word	0x08018918
 800ab3c:	08018b88 	.word	0x08018b88
 800ab40:	0801895c 	.word	0x0801895c
 800ab44:	08018b98 	.word	0x08018b98
 800ab48:	08018bb8 	.word	0x08018bb8
 800ab4c:	08018bdc 	.word	0x08018bdc
 800ab50:	08018a1c 	.word	0x08018a1c
 800ab54:	08018bf0 	.word	0x08018bf0
 800ab58:	0800a16d 	.word	0x0800a16d
 800ab5c:	0800a0a5 	.word	0x0800a0a5
 800ab60:	0800a215 	.word	0x0800a215
 800ab64:	08018c14 	.word	0x08018c14

0800ab68 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 800ab68:	b580      	push	{r7, lr}
 800ab6a:	b084      	sub	sp, #16
 800ab6c:	af00      	add	r7, sp, #0
 800ab6e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	785b      	ldrb	r3, [r3, #1]
 800ab7a:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 800ab7c:	7afb      	ldrb	r3, [r7, #11]
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d00d      	beq.n	800ab9e <lwip_netconn_do_delconn+0x36>
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	781b      	ldrb	r3, [r3, #0]
 800ab88:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ab8c:	2b10      	cmp	r3, #16
 800ab8e:	d006      	beq.n	800ab9e <lwip_netconn_do_delconn+0x36>
 800ab90:	4b59      	ldr	r3, [pc, #356]	; (800acf8 <lwip_netconn_do_delconn+0x190>)
 800ab92:	f240 425f 	movw	r2, #1119	; 0x45f
 800ab96:	4959      	ldr	r1, [pc, #356]	; (800acfc <lwip_netconn_do_delconn+0x194>)
 800ab98:	4859      	ldr	r0, [pc, #356]	; (800ad00 <lwip_netconn_do_delconn+0x198>)
 800ab9a:	f00c fd0d 	bl	80175b8 <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 800ab9e:	7afb      	ldrb	r3, [r7, #11]
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d005      	beq.n	800abb0 <lwip_netconn_do_delconn+0x48>
 800aba4:	7afb      	ldrb	r3, [r7, #11]
 800aba6:	2b02      	cmp	r3, #2
 800aba8:	d002      	beq.n	800abb0 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 800abaa:	7afb      	ldrb	r3, [r7, #11]
 800abac:	2b03      	cmp	r3, #3
 800abae:	d109      	bne.n	800abc4 <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 800abb0:	7afb      	ldrb	r3, [r7, #11]
 800abb2:	2b03      	cmp	r3, #3
 800abb4:	d10a      	bne.n	800abcc <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	7f1b      	ldrb	r3, [r3, #28]
 800abbc:	f003 0304 	and.w	r3, r3, #4
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d103      	bne.n	800abcc <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	22fb      	movs	r2, #251	; 0xfb
 800abc8:	711a      	strb	r2, [r3, #4]
 800abca:	e08a      	b.n	800ace2 <lwip_netconn_do_delconn+0x17a>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 800abcc:	7afb      	ldrb	r3, [r7, #11]
 800abce:	2b03      	cmp	r3, #3
 800abd0:	d10d      	bne.n	800abee <lwip_netconn_do_delconn+0x86>
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	7f1b      	ldrb	r3, [r3, #28]
 800abd8:	f003 0304 	and.w	r3, r3, #4
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d106      	bne.n	800abee <lwip_netconn_do_delconn+0x86>
 800abe0:	4b45      	ldr	r3, [pc, #276]	; (800acf8 <lwip_netconn_do_delconn+0x190>)
 800abe2:	f240 427b 	movw	r2, #1147	; 0x47b
 800abe6:	4947      	ldr	r1, [pc, #284]	; (800ad04 <lwip_netconn_do_delconn+0x19c>)
 800abe8:	4845      	ldr	r0, [pc, #276]	; (800ad00 <lwip_netconn_do_delconn+0x198>)
 800abea:	f00c fce5 	bl	80175b8 <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	2200      	movs	r2, #0
 800abf2:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	4618      	mov	r0, r3
 800abfa:	f7ff fdd1 	bl	800a7a0 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	685b      	ldr	r3, [r3, #4]
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d052      	beq.n	800acae <lwip_netconn_do_delconn+0x146>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	781b      	ldrb	r3, [r3, #0]
 800ac0e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ac12:	2b10      	cmp	r3, #16
 800ac14:	d005      	beq.n	800ac22 <lwip_netconn_do_delconn+0xba>
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
#endif /* LWIP_TCP */
        default:
          break;
 800ac16:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	2200      	movs	r2, #0
 800ac1e:	605a      	str	r2, [r3, #4]
 800ac20:	e045      	b.n	800acae <lwip_netconn_do_delconn+0x146>
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	6a1b      	ldr	r3, [r3, #32]
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d006      	beq.n	800ac3a <lwip_netconn_do_delconn+0xd2>
 800ac2c:	4b32      	ldr	r3, [pc, #200]	; (800acf8 <lwip_netconn_do_delconn+0x190>)
 800ac2e:	f240 4294 	movw	r2, #1172	; 0x494
 800ac32:	4935      	ldr	r1, [pc, #212]	; (800ad08 <lwip_netconn_do_delconn+0x1a0>)
 800ac34:	4832      	ldr	r0, [pc, #200]	; (800ad00 <lwip_netconn_do_delconn+0x198>)
 800ac36:	f00c fcbf 	bl	80175b8 <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	2204      	movs	r2, #4
 800ac40:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	2203      	movs	r2, #3
 800ac46:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	68fa      	ldr	r2, [r7, #12]
 800ac4e:	621a      	str	r2, [r3, #32]
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	2100      	movs	r1, #0
 800ac56:	4618      	mov	r0, r3
 800ac58:	f7ff fe20 	bl	800a89c <lwip_netconn_do_close_internal>
 800ac5c:	4603      	mov	r3, r0
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d046      	beq.n	800acf0 <lwip_netconn_do_delconn+0x188>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	785b      	ldrb	r3, [r3, #1]
 800ac68:	2b04      	cmp	r3, #4
 800ac6a:	d006      	beq.n	800ac7a <lwip_netconn_do_delconn+0x112>
 800ac6c:	4b22      	ldr	r3, [pc, #136]	; (800acf8 <lwip_netconn_do_delconn+0x190>)
 800ac6e:	f240 429a 	movw	r2, #1178	; 0x49a
 800ac72:	4926      	ldr	r1, [pc, #152]	; (800ad0c <lwip_netconn_do_delconn+0x1a4>)
 800ac74:	4822      	ldr	r0, [pc, #136]	; (800ad00 <lwip_netconn_do_delconn+0x198>)
 800ac76:	f00c fc9f 	bl	80175b8 <iprintf>
            UNLOCK_TCPIP_CORE();
 800ac7a:	4825      	ldr	r0, [pc, #148]	; (800ad10 <lwip_netconn_do_delconn+0x1a8>)
 800ac7c:	f00c fbf1 	bl	8017462 <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	330c      	adds	r3, #12
 800ac86:	2100      	movs	r1, #0
 800ac88:	4618      	mov	r0, r3
 800ac8a:	f00c fb48 	bl	801731e <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 800ac8e:	4820      	ldr	r0, [pc, #128]	; (800ad10 <lwip_netconn_do_delconn+0x1a8>)
 800ac90:	f00c fbd8 	bl	8017444 <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	785b      	ldrb	r3, [r3, #1]
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d028      	beq.n	800acf0 <lwip_netconn_do_delconn+0x188>
 800ac9e:	4b16      	ldr	r3, [pc, #88]	; (800acf8 <lwip_netconn_do_delconn+0x190>)
 800aca0:	f240 429e 	movw	r2, #1182	; 0x49e
 800aca4:	4919      	ldr	r1, [pc, #100]	; (800ad0c <lwip_netconn_do_delconn+0x1a4>)
 800aca6:	4816      	ldr	r0, [pc, #88]	; (800ad00 <lwip_netconn_do_delconn+0x198>)
 800aca8:	f00c fc86 	bl	80175b8 <iprintf>
          return;
 800acac:	e020      	b.n	800acf0 <lwip_netconn_do_delconn+0x188>
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d007      	beq.n	800acc8 <lwip_netconn_do_delconn+0x160>
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acbe:	68fa      	ldr	r2, [r7, #12]
 800acc0:	6810      	ldr	r0, [r2, #0]
 800acc2:	2200      	movs	r2, #0
 800acc4:	2100      	movs	r1, #0
 800acc6:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d007      	beq.n	800ace2 <lwip_netconn_do_delconn+0x17a>
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acd8:	68fa      	ldr	r2, [r7, #12]
 800acda:	6810      	ldr	r0, [r2, #0]
 800acdc:	2200      	movs	r2, #0
 800acde:	2102      	movs	r1, #2
 800ace0:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	330c      	adds	r3, #12
 800ace8:	4618      	mov	r0, r3
 800acea:	f00c fb63 	bl	80173b4 <sys_sem_valid>
 800acee:	e000      	b.n	800acf2 <lwip_netconn_do_delconn+0x18a>
          return;
 800acf0:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 800acf2:	3710      	adds	r7, #16
 800acf4:	46bd      	mov	sp, r7
 800acf6:	bd80      	pop	{r7, pc}
 800acf8:	08018918 	.word	0x08018918
 800acfc:	08018c24 	.word	0x08018c24
 800ad00:	0801895c 	.word	0x0801895c
 800ad04:	08018c38 	.word	0x08018c38
 800ad08:	08018c58 	.word	0x08018c58
 800ad0c:	08018c74 	.word	0x08018c74
 800ad10:	20007a34 	.word	0x20007a34

0800ad14 <lwip_netconn_do_bind>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 800ad14:	b580      	push	{r7, lr}
 800ad16:	b084      	sub	sp, #16
 800ad18:	af00      	add	r7, sp, #0
 800ad1a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	60bb      	str	r3, [r7, #8]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 800ad20:	68bb      	ldr	r3, [r7, #8]
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	685b      	ldr	r3, [r3, #4]
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d017      	beq.n	800ad5a <lwip_netconn_do_bind+0x46>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800ad2a:	68bb      	ldr	r3, [r7, #8]
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	781b      	ldrb	r3, [r3, #0]
 800ad30:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ad34:	2b10      	cmp	r3, #16
 800ad36:	d10c      	bne.n	800ad52 <lwip_netconn_do_bind+0x3e>
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
        break;
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800ad38:	68bb      	ldr	r3, [r7, #8]
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	6858      	ldr	r0, [r3, #4]
 800ad3e:	68bb      	ldr	r3, [r7, #8]
 800ad40:	6899      	ldr	r1, [r3, #8]
 800ad42:	68bb      	ldr	r3, [r7, #8]
 800ad44:	899b      	ldrh	r3, [r3, #12]
 800ad46:	461a      	mov	r2, r3
 800ad48:	f004 f8a2 	bl	800ee90 <tcp_bind>
 800ad4c:	4603      	mov	r3, r0
 800ad4e:	73fb      	strb	r3, [r7, #15]
        break;
 800ad50:	e005      	b.n	800ad5e <lwip_netconn_do_bind+0x4a>
#endif /* LWIP_TCP */
      default:
        err = ERR_VAL;
 800ad52:	23fa      	movs	r3, #250	; 0xfa
 800ad54:	73fb      	strb	r3, [r7, #15]
        break;
 800ad56:	bf00      	nop
 800ad58:	e001      	b.n	800ad5e <lwip_netconn_do_bind+0x4a>
    }
  } else {
    err = ERR_VAL;
 800ad5a:	23fa      	movs	r3, #250	; 0xfa
 800ad5c:	73fb      	strb	r3, [r7, #15]
  }
  msg->err = err;
 800ad5e:	68bb      	ldr	r3, [r7, #8]
 800ad60:	7bfa      	ldrb	r2, [r7, #15]
 800ad62:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800ad64:	bf00      	nop
 800ad66:	3710      	adds	r7, #16
 800ad68:	46bd      	mov	sp, r7
 800ad6a:	bd80      	pop	{r7, pc}

0800ad6c <lwip_netconn_do_listen>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_listen(void *m)
{
 800ad6c:	b580      	push	{r7, lr}
 800ad6e:	b086      	sub	sp, #24
 800ad70:	af00      	add	r7, sp, #0
 800ad72:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	617b      	str	r3, [r7, #20]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 800ad78:	697b      	ldr	r3, [r7, #20]
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	685b      	ldr	r3, [r3, #4]
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d07f      	beq.n	800ae82 <lwip_netconn_do_listen+0x116>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800ad82:	697b      	ldr	r3, [r7, #20]
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	781b      	ldrb	r3, [r3, #0]
 800ad88:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ad8c:	2b10      	cmp	r3, #16
 800ad8e:	d175      	bne.n	800ae7c <lwip_netconn_do_listen+0x110>
      if (msg->conn->state == NETCONN_NONE) {
 800ad90:	697b      	ldr	r3, [r7, #20]
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	785b      	ldrb	r3, [r3, #1]
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d165      	bne.n	800ae66 <lwip_netconn_do_listen+0xfa>
        struct tcp_pcb *lpcb;
        if (msg->conn->pcb.tcp->state != CLOSED) {
 800ad9a:	697b      	ldr	r3, [r7, #20]
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	685b      	ldr	r3, [r3, #4]
 800ada0:	7d1b      	ldrb	r3, [r3, #20]
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d002      	beq.n	800adac <lwip_netconn_do_listen+0x40>
          /* connection is not closed, cannot listen */
          err = ERR_VAL;
 800ada6:	23fa      	movs	r3, #250	; 0xfa
 800ada8:	72fb      	strb	r3, [r7, #11]
 800adaa:	e06c      	b.n	800ae86 <lwip_netconn_do_listen+0x11a>
        } else {
          u8_t backlog;
#if TCP_LISTEN_BACKLOG
          backlog = msg->msg.lb.backlog;
#else  /* TCP_LISTEN_BACKLOG */
          backlog = TCP_DEFAULT_LISTEN_BACKLOG;
 800adac:	23ff      	movs	r3, #255	; 0xff
 800adae:	74fb      	strb	r3, [r7, #19]
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->local_ip,  IPADDR_TYPE_ANY);
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->remote_ip, IPADDR_TYPE_ANY);
          }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

          lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
 800adb0:	697b      	ldr	r3, [r7, #20]
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	685b      	ldr	r3, [r3, #4]
 800adb6:	f107 020b 	add.w	r2, r7, #11
 800adba:	7cf9      	ldrb	r1, [r7, #19]
 800adbc:	4618      	mov	r0, r3
 800adbe:	f004 f91f 	bl	800f000 <tcp_listen_with_backlog_and_err>
 800adc2:	60f8      	str	r0, [r7, #12]

          if (lpcb == NULL) {
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d05d      	beq.n	800ae86 <lwip_netconn_do_listen+0x11a>
            /* in this case, the old pcb is still allocated */
          } else {
            /* delete the recvmbox and allocate the acceptmbox */
            if (sys_mbox_valid(&msg->conn->recvmbox)) {
 800adca:	697b      	ldr	r3, [r7, #20]
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	3310      	adds	r3, #16
 800add0:	4618      	mov	r0, r3
 800add2:	f00c fa5e 	bl	8017292 <sys_mbox_valid>
 800add6:	4603      	mov	r3, r0
 800add8:	2b00      	cmp	r3, #0
 800adda:	d00b      	beq.n	800adf4 <lwip_netconn_do_listen+0x88>
              /** @todo: should we drain the recvmbox here? */
              sys_mbox_free(&msg->conn->recvmbox);
 800addc:	697b      	ldr	r3, [r7, #20]
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	3310      	adds	r3, #16
 800ade2:	4618      	mov	r0, r3
 800ade4:	f00c f9ce 	bl	8017184 <sys_mbox_free>
              sys_mbox_set_invalid(&msg->conn->recvmbox);
 800ade8:	697b      	ldr	r3, [r7, #20]
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	3310      	adds	r3, #16
 800adee:	4618      	mov	r0, r3
 800adf0:	f00c fa60 	bl	80172b4 <sys_mbox_set_invalid>
            }
            err = ERR_OK;
 800adf4:	2300      	movs	r3, #0
 800adf6:	72fb      	strb	r3, [r7, #11]
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 800adf8:	697b      	ldr	r3, [r7, #20]
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	3314      	adds	r3, #20
 800adfe:	4618      	mov	r0, r3
 800ae00:	f00c fa47 	bl	8017292 <sys_mbox_valid>
 800ae04:	4603      	mov	r3, r0
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d108      	bne.n	800ae1c <lwip_netconn_do_listen+0xb0>
              err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
 800ae0a:	697b      	ldr	r3, [r7, #20]
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	3314      	adds	r3, #20
 800ae10:	2106      	movs	r1, #6
 800ae12:	4618      	mov	r0, r3
 800ae14:	f00c f994 	bl	8017140 <sys_mbox_new>
 800ae18:	4603      	mov	r3, r0
 800ae1a:	72fb      	strb	r3, [r7, #11]
            }
            if (err == ERR_OK) {
 800ae1c:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d118      	bne.n	800ae56 <lwip_netconn_do_listen+0xea>
              msg->conn->state = NETCONN_LISTEN;
 800ae24:	697b      	ldr	r3, [r7, #20]
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	2202      	movs	r2, #2
 800ae2a:	705a      	strb	r2, [r3, #1]
              msg->conn->pcb.tcp = lpcb;
 800ae2c:	697b      	ldr	r3, [r7, #20]
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	68fa      	ldr	r2, [r7, #12]
 800ae32:	605a      	str	r2, [r3, #4]
              tcp_arg(msg->conn->pcb.tcp, msg->conn);
 800ae34:	697b      	ldr	r3, [r7, #20]
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	685a      	ldr	r2, [r3, #4]
 800ae3a:	697b      	ldr	r3, [r7, #20]
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	4619      	mov	r1, r3
 800ae40:	4610      	mov	r0, r2
 800ae42:	f005 f8a3 	bl	800ff8c <tcp_arg>
              tcp_accept(msg->conn->pcb.tcp, accept_function);
 800ae46:	697b      	ldr	r3, [r7, #20]
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	685b      	ldr	r3, [r3, #4]
 800ae4c:	4912      	ldr	r1, [pc, #72]	; (800ae98 <lwip_netconn_do_listen+0x12c>)
 800ae4e:	4618      	mov	r0, r3
 800ae50:	f005 f914 	bl	801007c <tcp_accept>
 800ae54:	e017      	b.n	800ae86 <lwip_netconn_do_listen+0x11a>
            } else {
              /* since the old pcb is already deallocated, free lpcb now */
              tcp_close(lpcb);
 800ae56:	68f8      	ldr	r0, [r7, #12]
 800ae58:	f003 feca 	bl	800ebf0 <tcp_close>
              msg->conn->pcb.tcp = NULL;
 800ae5c:	697b      	ldr	r3, [r7, #20]
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	2200      	movs	r2, #0
 800ae62:	605a      	str	r2, [r3, #4]
 800ae64:	e00f      	b.n	800ae86 <lwip_netconn_do_listen+0x11a>
            }
          }
        }
      } else if (msg->conn->state == NETCONN_LISTEN) {
 800ae66:	697b      	ldr	r3, [r7, #20]
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	785b      	ldrb	r3, [r3, #1]
 800ae6c:	2b02      	cmp	r3, #2
 800ae6e:	d102      	bne.n	800ae76 <lwip_netconn_do_listen+0x10a>
        /* already listening, allow updating of the backlog */
        err = ERR_OK;
 800ae70:	2300      	movs	r3, #0
 800ae72:	72fb      	strb	r3, [r7, #11]
 800ae74:	e007      	b.n	800ae86 <lwip_netconn_do_listen+0x11a>
        tcp_backlog_set(msg->conn->pcb.tcp, msg->msg.lb.backlog);
      } else {
        err = ERR_CONN;
 800ae76:	23f5      	movs	r3, #245	; 0xf5
 800ae78:	72fb      	strb	r3, [r7, #11]
 800ae7a:	e004      	b.n	800ae86 <lwip_netconn_do_listen+0x11a>
      }
    } else {
      err = ERR_ARG;
 800ae7c:	23f0      	movs	r3, #240	; 0xf0
 800ae7e:	72fb      	strb	r3, [r7, #11]
 800ae80:	e001      	b.n	800ae86 <lwip_netconn_do_listen+0x11a>
    }
  } else {
    err = ERR_CONN;
 800ae82:	23f5      	movs	r3, #245	; 0xf5
 800ae84:	72fb      	strb	r3, [r7, #11]
  }
  msg->err = err;
 800ae86:	f997 200b 	ldrsb.w	r2, [r7, #11]
 800ae8a:	697b      	ldr	r3, [r7, #20]
 800ae8c:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800ae8e:	bf00      	nop
 800ae90:	3718      	adds	r7, #24
 800ae92:	46bd      	mov	sp, r7
 800ae94:	bd80      	pop	{r7, pc}
 800ae96:	bf00      	nop
 800ae98:	0800a411 	.word	0x0800a411

0800ae9c <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 800ae9c:	b580      	push	{r7, lr}
 800ae9e:	b086      	sub	sp, #24
 800aea0:	af00      	add	r7, sp, #0
 800aea2:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 800aea8:	693b      	ldr	r3, [r7, #16]
 800aeaa:	2200      	movs	r2, #0
 800aeac:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 800aeae:	693b      	ldr	r3, [r7, #16]
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	685b      	ldr	r3, [r3, #4]
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d022      	beq.n	800aefe <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800aeb8:	693b      	ldr	r3, [r7, #16]
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	781b      	ldrb	r3, [r3, #0]
 800aebe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800aec2:	2b10      	cmp	r3, #16
 800aec4:	d11b      	bne.n	800aefe <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 800aec6:	693b      	ldr	r3, [r7, #16]
 800aec8:	689b      	ldr	r3, [r3, #8]
 800aeca:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 800aecc:	697b      	ldr	r3, [r7, #20]
 800aece:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aed2:	d202      	bcs.n	800aeda <lwip_netconn_do_recv+0x3e>
 800aed4:	697b      	ldr	r3, [r7, #20]
 800aed6:	b29b      	uxth	r3, r3
 800aed8:	e001      	b.n	800aede <lwip_netconn_do_recv+0x42>
 800aeda:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800aede:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 800aee0:	693b      	ldr	r3, [r7, #16]
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	685b      	ldr	r3, [r3, #4]
 800aee6:	89fa      	ldrh	r2, [r7, #14]
 800aee8:	4611      	mov	r1, r2
 800aeea:	4618      	mov	r0, r3
 800aeec:	f004 f98c 	bl	800f208 <tcp_recved>
        remaining -= recved;
 800aef0:	89fb      	ldrh	r3, [r7, #14]
 800aef2:	697a      	ldr	r2, [r7, #20]
 800aef4:	1ad3      	subs	r3, r2, r3
 800aef6:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 800aef8:	697b      	ldr	r3, [r7, #20]
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	d1e6      	bne.n	800aecc <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 800aefe:	bf00      	nop
 800af00:	3718      	adds	r7, #24
 800af02:	46bd      	mov	sp, r7
 800af04:	bd80      	pop	{r7, pc}
	...

0800af08 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800af08:	b580      	push	{r7, lr}
 800af0a:	b088      	sub	sp, #32
 800af0c:	af00      	add	r7, sp, #0
 800af0e:	6078      	str	r0, [r7, #4]
 800af10:	460b      	mov	r3, r1
 800af12:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 800af14:	2300      	movs	r3, #0
 800af16:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d106      	bne.n	800af2c <lwip_netconn_do_writemore+0x24>
 800af1e:	4b96      	ldr	r3, [pc, #600]	; (800b178 <lwip_netconn_do_writemore+0x270>)
 800af20:	f240 6273 	movw	r2, #1651	; 0x673
 800af24:	4995      	ldr	r1, [pc, #596]	; (800b17c <lwip_netconn_do_writemore+0x274>)
 800af26:	4896      	ldr	r0, [pc, #600]	; (800b180 <lwip_netconn_do_writemore+0x278>)
 800af28:	f00c fb46 	bl	80175b8 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	785b      	ldrb	r3, [r3, #1]
 800af30:	2b01      	cmp	r3, #1
 800af32:	d006      	beq.n	800af42 <lwip_netconn_do_writemore+0x3a>
 800af34:	4b90      	ldr	r3, [pc, #576]	; (800b178 <lwip_netconn_do_writemore+0x270>)
 800af36:	f240 6274 	movw	r2, #1652	; 0x674
 800af3a:	4992      	ldr	r1, [pc, #584]	; (800b184 <lwip_netconn_do_writemore+0x27c>)
 800af3c:	4890      	ldr	r0, [pc, #576]	; (800b180 <lwip_netconn_do_writemore+0x278>)
 800af3e:	f00c fb3b 	bl	80175b8 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	6a1b      	ldr	r3, [r3, #32]
 800af46:	2b00      	cmp	r3, #0
 800af48:	d106      	bne.n	800af58 <lwip_netconn_do_writemore+0x50>
 800af4a:	4b8b      	ldr	r3, [pc, #556]	; (800b178 <lwip_netconn_do_writemore+0x270>)
 800af4c:	f240 6275 	movw	r2, #1653	; 0x675
 800af50:	498d      	ldr	r1, [pc, #564]	; (800b188 <lwip_netconn_do_writemore+0x280>)
 800af52:	488b      	ldr	r0, [pc, #556]	; (800b180 <lwip_netconn_do_writemore+0x278>)
 800af54:	f00c fb30 	bl	80175b8 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	685b      	ldr	r3, [r3, #4]
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d106      	bne.n	800af6e <lwip_netconn_do_writemore+0x66>
 800af60:	4b85      	ldr	r3, [pc, #532]	; (800b178 <lwip_netconn_do_writemore+0x270>)
 800af62:	f240 6276 	movw	r2, #1654	; 0x676
 800af66:	4989      	ldr	r1, [pc, #548]	; (800b18c <lwip_netconn_do_writemore+0x284>)
 800af68:	4885      	ldr	r0, [pc, #532]	; (800b180 <lwip_netconn_do_writemore+0x278>)
 800af6a:	f00c fb25 	bl	80175b8 <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	6a1b      	ldr	r3, [r3, #32]
 800af72:	699a      	ldr	r2, [r3, #24]
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	6a1b      	ldr	r3, [r3, #32]
 800af78:	695b      	ldr	r3, [r3, #20]
 800af7a:	429a      	cmp	r2, r3
 800af7c:	d306      	bcc.n	800af8c <lwip_netconn_do_writemore+0x84>
 800af7e:	4b7e      	ldr	r3, [pc, #504]	; (800b178 <lwip_netconn_do_writemore+0x270>)
 800af80:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 800af84:	4982      	ldr	r1, [pc, #520]	; (800b190 <lwip_netconn_do_writemore+0x288>)
 800af86:	487e      	ldr	r0, [pc, #504]	; (800b180 <lwip_netconn_do_writemore+0x278>)
 800af88:	f00c fb16 	bl	80175b8 <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	6a1b      	ldr	r3, [r3, #32]
 800af90:	899b      	ldrh	r3, [r3, #12]
 800af92:	2b00      	cmp	r3, #0
 800af94:	d106      	bne.n	800afa4 <lwip_netconn_do_writemore+0x9c>
 800af96:	4b78      	ldr	r3, [pc, #480]	; (800b178 <lwip_netconn_do_writemore+0x270>)
 800af98:	f240 6279 	movw	r2, #1657	; 0x679
 800af9c:	497d      	ldr	r1, [pc, #500]	; (800b194 <lwip_netconn_do_writemore+0x28c>)
 800af9e:	4878      	ldr	r0, [pc, #480]	; (800b180 <lwip_netconn_do_writemore+0x278>)
 800afa0:	f00c fb0a 	bl	80175b8 <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	6a1b      	ldr	r3, [r3, #32]
 800afa8:	7f1b      	ldrb	r3, [r3, #28]
 800afaa:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	7f1b      	ldrb	r3, [r3, #28]
 800afb0:	f003 0302 	and.w	r3, r3, #2
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	d104      	bne.n	800afc2 <lwip_netconn_do_writemore+0xba>
 800afb8:	7ebb      	ldrb	r3, [r7, #26]
 800afba:	f003 0304 	and.w	r3, r3, #4
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d001      	beq.n	800afc6 <lwip_netconn_do_writemore+0xbe>
 800afc2:	2301      	movs	r3, #1
 800afc4:	e000      	b.n	800afc8 <lwip_netconn_do_writemore+0xc0>
 800afc6:	2300      	movs	r3, #0
 800afc8:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	6a1b      	ldr	r3, [r3, #32]
 800afce:	689b      	ldr	r3, [r3, #8]
 800afd0:	681a      	ldr	r2, [r3, #0]
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	6a1b      	ldr	r3, [r3, #32]
 800afd6:	691b      	ldr	r3, [r3, #16]
 800afd8:	4413      	add	r3, r2
 800afda:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	6a1b      	ldr	r3, [r3, #32]
 800afe0:	689b      	ldr	r3, [r3, #8]
 800afe2:	685a      	ldr	r2, [r3, #4]
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	6a1b      	ldr	r3, [r3, #32]
 800afe8:	691b      	ldr	r3, [r3, #16]
 800afea:	1ad3      	subs	r3, r2, r3
 800afec:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 800afee:	693b      	ldr	r3, [r7, #16]
 800aff0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aff4:	d307      	bcc.n	800b006 <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 800aff6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800affa:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800affc:	7ebb      	ldrb	r3, [r7, #26]
 800affe:	f043 0302 	orr.w	r3, r3, #2
 800b002:	76bb      	strb	r3, [r7, #26]
 800b004:	e001      	b.n	800b00a <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 800b006:	693b      	ldr	r3, [r7, #16]
 800b008:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	685b      	ldr	r3, [r3, #4]
 800b00e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800b012:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 800b014:	89fa      	ldrh	r2, [r7, #14]
 800b016:	8bbb      	ldrh	r3, [r7, #28]
 800b018:	429a      	cmp	r2, r3
 800b01a:	d216      	bcs.n	800b04a <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 800b01c:	89fb      	ldrh	r3, [r7, #14]
 800b01e:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 800b020:	7e3b      	ldrb	r3, [r7, #24]
 800b022:	2b00      	cmp	r3, #0
 800b024:	d00d      	beq.n	800b042 <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 800b026:	8bbb      	ldrh	r3, [r7, #28]
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d10e      	bne.n	800b04a <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	6a1b      	ldr	r3, [r3, #32]
 800b030:	699b      	ldr	r3, [r3, #24]
 800b032:	2b00      	cmp	r3, #0
 800b034:	d102      	bne.n	800b03c <lwip_netconn_do_writemore+0x134>
 800b036:	f06f 0306 	mvn.w	r3, #6
 800b03a:	e000      	b.n	800b03e <lwip_netconn_do_writemore+0x136>
 800b03c:	2300      	movs	r3, #0
 800b03e:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 800b040:	e07d      	b.n	800b13e <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 800b042:	7ebb      	ldrb	r3, [r7, #26]
 800b044:	f043 0302 	orr.w	r3, r3, #2
 800b048:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	6a1b      	ldr	r3, [r3, #32]
 800b04e:	691a      	ldr	r2, [r3, #16]
 800b050:	8bbb      	ldrh	r3, [r7, #28]
 800b052:	441a      	add	r2, r3
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	6a1b      	ldr	r3, [r3, #32]
 800b058:	689b      	ldr	r3, [r3, #8]
 800b05a:	685b      	ldr	r3, [r3, #4]
 800b05c:	429a      	cmp	r2, r3
 800b05e:	d906      	bls.n	800b06e <lwip_netconn_do_writemore+0x166>
 800b060:	4b45      	ldr	r3, [pc, #276]	; (800b178 <lwip_netconn_do_writemore+0x270>)
 800b062:	f240 62a4 	movw	r2, #1700	; 0x6a4
 800b066:	494c      	ldr	r1, [pc, #304]	; (800b198 <lwip_netconn_do_writemore+0x290>)
 800b068:	4845      	ldr	r0, [pc, #276]	; (800b180 <lwip_netconn_do_writemore+0x278>)
 800b06a:	f00c faa5 	bl	80175b8 <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 800b06e:	8bbb      	ldrh	r3, [r7, #28]
 800b070:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b074:	4293      	cmp	r3, r2
 800b076:	d103      	bne.n	800b080 <lwip_netconn_do_writemore+0x178>
 800b078:	693b      	ldr	r3, [r7, #16]
 800b07a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b07e:	d209      	bcs.n	800b094 <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800b080:	693b      	ldr	r3, [r7, #16]
 800b082:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 800b084:	8bba      	ldrh	r2, [r7, #28]
 800b086:	429a      	cmp	r2, r3
 800b088:	d10b      	bne.n	800b0a2 <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	6a1b      	ldr	r3, [r3, #32]
 800b08e:	899b      	ldrh	r3, [r3, #12]
 800b090:	2b01      	cmp	r3, #1
 800b092:	d906      	bls.n	800b0a2 <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 800b094:	2301      	movs	r3, #1
 800b096:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800b098:	7ebb      	ldrb	r3, [r7, #26]
 800b09a:	f043 0302 	orr.w	r3, r3, #2
 800b09e:	76bb      	strb	r3, [r7, #26]
 800b0a0:	e001      	b.n	800b0a6 <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 800b0a2:	2300      	movs	r3, #0
 800b0a4:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	6858      	ldr	r0, [r3, #4]
 800b0aa:	7ebb      	ldrb	r3, [r7, #26]
 800b0ac:	8bba      	ldrh	r2, [r7, #28]
 800b0ae:	6979      	ldr	r1, [r7, #20]
 800b0b0:	f007 fea8 	bl	8012e04 <tcp_write>
 800b0b4:	4603      	mov	r3, r0
 800b0b6:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 800b0b8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d12c      	bne.n	800b11a <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	6a1b      	ldr	r3, [r3, #32]
 800b0c4:	6999      	ldr	r1, [r3, #24]
 800b0c6:	8bba      	ldrh	r2, [r7, #28]
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	6a1b      	ldr	r3, [r3, #32]
 800b0cc:	440a      	add	r2, r1
 800b0ce:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	6a1b      	ldr	r3, [r3, #32]
 800b0d4:	6919      	ldr	r1, [r3, #16]
 800b0d6:	8bba      	ldrh	r2, [r7, #28]
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	6a1b      	ldr	r3, [r3, #32]
 800b0dc:	440a      	add	r2, r1
 800b0de:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	6a1b      	ldr	r3, [r3, #32]
 800b0e4:	691a      	ldr	r2, [r3, #16]
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	6a1b      	ldr	r3, [r3, #32]
 800b0ea:	689b      	ldr	r3, [r3, #8]
 800b0ec:	685b      	ldr	r3, [r3, #4]
 800b0ee:	429a      	cmp	r2, r3
 800b0f0:	d113      	bne.n	800b11a <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	6a1b      	ldr	r3, [r3, #32]
 800b0f6:	899a      	ldrh	r2, [r3, #12]
 800b0f8:	3a01      	subs	r2, #1
 800b0fa:	b292      	uxth	r2, r2
 800b0fc:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	6a1b      	ldr	r3, [r3, #32]
 800b102:	899b      	ldrh	r3, [r3, #12]
 800b104:	2b00      	cmp	r3, #0
 800b106:	d008      	beq.n	800b11a <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	6a1b      	ldr	r3, [r3, #32]
 800b10c:	689a      	ldr	r2, [r3, #8]
 800b10e:	3208      	adds	r2, #8
 800b110:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	6a1b      	ldr	r3, [r3, #32]
 800b116:	2200      	movs	r2, #0
 800b118:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 800b11a:	7e7b      	ldrb	r3, [r7, #25]
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d004      	beq.n	800b12a <lwip_netconn_do_writemore+0x222>
 800b120:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b124:	2b00      	cmp	r3, #0
 800b126:	f43f af50 	beq.w	800afca <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 800b12a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d004      	beq.n	800b13c <lwip_netconn_do_writemore+0x234>
 800b132:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b136:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b13a:	d146      	bne.n	800b1ca <lwip_netconn_do_writemore+0x2c2>
err_mem:
 800b13c:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 800b13e:	7e3b      	ldrb	r3, [r7, #24]
 800b140:	2b00      	cmp	r3, #0
 800b142:	d02b      	beq.n	800b19c <lwip_netconn_do_writemore+0x294>
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	6a1b      	ldr	r3, [r3, #32]
 800b148:	699a      	ldr	r2, [r3, #24]
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	6a1b      	ldr	r3, [r3, #32]
 800b14e:	695b      	ldr	r3, [r3, #20]
 800b150:	429a      	cmp	r2, r3
 800b152:	d223      	bcs.n	800b19c <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d005      	beq.n	800b168 <lwip_netconn_do_writemore+0x260>
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b160:	2200      	movs	r2, #0
 800b162:	2103      	movs	r1, #3
 800b164:	6878      	ldr	r0, [r7, #4]
 800b166:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	7f1b      	ldrb	r3, [r3, #28]
 800b16c:	f043 0310 	orr.w	r3, r3, #16
 800b170:	b2da      	uxtb	r2, r3
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	771a      	strb	r2, [r3, #28]
 800b176:	e028      	b.n	800b1ca <lwip_netconn_do_writemore+0x2c2>
 800b178:	08018918 	.word	0x08018918
 800b17c:	08018a0c 	.word	0x08018a0c
 800b180:	0801895c 	.word	0x0801895c
 800b184:	08018d14 	.word	0x08018d14
 800b188:	08018a1c 	.word	0x08018a1c
 800b18c:	08018d34 	.word	0x08018d34
 800b190:	08018d4c 	.word	0x08018d4c
 800b194:	08018d8c 	.word	0x08018d8c
 800b198:	08018db4 	.word	0x08018db4
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	685b      	ldr	r3, [r3, #4]
 800b1a0:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800b1a4:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800b1a8:	d305      	bcc.n	800b1b6 <lwip_netconn_do_writemore+0x2ae>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	685b      	ldr	r3, [r3, #4]
 800b1ae:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800b1b2:	2b04      	cmp	r3, #4
 800b1b4:	d909      	bls.n	800b1ca <lwip_netconn_do_writemore+0x2c2>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d005      	beq.n	800b1ca <lwip_netconn_do_writemore+0x2c2>
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1c2:	2200      	movs	r2, #0
 800b1c4:	2103      	movs	r1, #3
 800b1c6:	6878      	ldr	r0, [r7, #4]
 800b1c8:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 800b1ca:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d11d      	bne.n	800b20e <lwip_netconn_do_writemore+0x306>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	6a1b      	ldr	r3, [r3, #32]
 800b1d6:	699a      	ldr	r2, [r3, #24]
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	6a1b      	ldr	r3, [r3, #32]
 800b1dc:	695b      	ldr	r3, [r3, #20]
 800b1de:	429a      	cmp	r2, r3
 800b1e0:	d002      	beq.n	800b1e8 <lwip_netconn_do_writemore+0x2e0>
 800b1e2:	7e3b      	ldrb	r3, [r7, #24]
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	d001      	beq.n	800b1ec <lwip_netconn_do_writemore+0x2e4>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 800b1e8:	2301      	movs	r3, #1
 800b1ea:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	685b      	ldr	r3, [r3, #4]
 800b1f0:	4618      	mov	r0, r3
 800b1f2:	f008 fbf3 	bl	80139dc <tcp_output>
 800b1f6:	4603      	mov	r3, r0
 800b1f8:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 800b1fa:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800b1fe:	f113 0f04 	cmn.w	r3, #4
 800b202:	d12c      	bne.n	800b25e <lwip_netconn_do_writemore+0x356>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800b204:	7b3b      	ldrb	r3, [r7, #12]
 800b206:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800b208:	2301      	movs	r3, #1
 800b20a:	76fb      	strb	r3, [r7, #27]
 800b20c:	e027      	b.n	800b25e <lwip_netconn_do_writemore+0x356>
      }
    } else if (err == ERR_MEM) {
 800b20e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b212:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b216:	d120      	bne.n	800b25a <lwip_netconn_do_writemore+0x352>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	685b      	ldr	r3, [r3, #4]
 800b21c:	4618      	mov	r0, r3
 800b21e:	f008 fbdd 	bl	80139dc <tcp_output>
 800b222:	4603      	mov	r3, r0
 800b224:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 800b226:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800b22a:	f113 0f04 	cmn.w	r3, #4
 800b22e:	d104      	bne.n	800b23a <lwip_netconn_do_writemore+0x332>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800b230:	7b7b      	ldrb	r3, [r7, #13]
 800b232:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800b234:	2301      	movs	r3, #1
 800b236:	76fb      	strb	r3, [r7, #27]
 800b238:	e011      	b.n	800b25e <lwip_netconn_do_writemore+0x356>
      } else if (dontblock) {
 800b23a:	7e3b      	ldrb	r3, [r7, #24]
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d00e      	beq.n	800b25e <lwip_netconn_do_writemore+0x356>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	6a1b      	ldr	r3, [r3, #32]
 800b244:	699b      	ldr	r3, [r3, #24]
 800b246:	2b00      	cmp	r3, #0
 800b248:	d102      	bne.n	800b250 <lwip_netconn_do_writemore+0x348>
 800b24a:	f06f 0306 	mvn.w	r3, #6
 800b24e:	e000      	b.n	800b252 <lwip_netconn_do_writemore+0x34a>
 800b250:	2300      	movs	r3, #0
 800b252:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800b254:	2301      	movs	r3, #1
 800b256:	76fb      	strb	r3, [r7, #27]
 800b258:	e001      	b.n	800b25e <lwip_netconn_do_writemore+0x356>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 800b25a:	2301      	movs	r3, #1
 800b25c:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 800b25e:	7efb      	ldrb	r3, [r7, #27]
 800b260:	2b00      	cmp	r3, #0
 800b262:	d015      	beq.n	800b290 <lwip_netconn_do_writemore+0x388>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	6a1b      	ldr	r3, [r3, #32]
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	330c      	adds	r3, #12
 800b26c:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	6a1b      	ldr	r3, [r3, #32]
 800b272:	7ffa      	ldrb	r2, [r7, #31]
 800b274:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	2200      	movs	r2, #0
 800b27a:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	2200      	movs	r2, #0
 800b280:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800b282:	78fb      	ldrb	r3, [r7, #3]
 800b284:	2b00      	cmp	r3, #0
 800b286:	d006      	beq.n	800b296 <lwip_netconn_do_writemore+0x38e>
#endif
    {
      sys_sem_signal(op_completed_sem);
 800b288:	68b8      	ldr	r0, [r7, #8]
 800b28a:	f00c f879 	bl	8017380 <sys_sem_signal>
 800b28e:	e002      	b.n	800b296 <lwip_netconn_do_writemore+0x38e>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 800b290:	f04f 33ff 	mov.w	r3, #4294967295
 800b294:	e000      	b.n	800b298 <lwip_netconn_do_writemore+0x390>
  }
#endif
  return ERR_OK;
 800b296:	2300      	movs	r3, #0
}
 800b298:	4618      	mov	r0, r3
 800b29a:	3720      	adds	r7, #32
 800b29c:	46bd      	mov	sp, r7
 800b29e:	bd80      	pop	{r7, pc}

0800b2a0 <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 800b2a0:	b580      	push	{r7, lr}
 800b2a2:	b084      	sub	sp, #16
 800b2a4:	af00      	add	r7, sp, #0
 800b2a6:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 800b2ac:	68bb      	ldr	r3, [r7, #8]
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	4618      	mov	r0, r3
 800b2b2:	f7fe fde9 	bl	8009e88 <netconn_err>
 800b2b6:	4603      	mov	r3, r0
 800b2b8:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800b2ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d163      	bne.n	800b38a <lwip_netconn_do_write+0xea>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800b2c2:	68bb      	ldr	r3, [r7, #8]
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	781b      	ldrb	r3, [r3, #0]
 800b2c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b2cc:	2b10      	cmp	r3, #16
 800b2ce:	d15c      	bne.n	800b38a <lwip_netconn_do_write+0xea>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 800b2d0:	68bb      	ldr	r3, [r7, #8]
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	785b      	ldrb	r3, [r3, #1]
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d002      	beq.n	800b2e0 <lwip_netconn_do_write+0x40>
        /* netconn is connecting, closing or in blocking write */
        err = ERR_INPROGRESS;
 800b2da:	23fb      	movs	r3, #251	; 0xfb
 800b2dc:	73fb      	strb	r3, [r7, #15]
 800b2de:	e054      	b.n	800b38a <lwip_netconn_do_write+0xea>
      } else if (msg->conn->pcb.tcp != NULL) {
 800b2e0:	68bb      	ldr	r3, [r7, #8]
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	685b      	ldr	r3, [r3, #4]
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	d04d      	beq.n	800b386 <lwip_netconn_do_write+0xe6>
        msg->conn->state = NETCONN_WRITE;
 800b2ea:	68bb      	ldr	r3, [r7, #8]
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	2201      	movs	r2, #1
 800b2f0:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800b2f2:	68bb      	ldr	r3, [r7, #8]
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	6a1b      	ldr	r3, [r3, #32]
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d006      	beq.n	800b30a <lwip_netconn_do_write+0x6a>
 800b2fc:	4b27      	ldr	r3, [pc, #156]	; (800b39c <lwip_netconn_do_write+0xfc>)
 800b2fe:	f240 7223 	movw	r2, #1827	; 0x723
 800b302:	4927      	ldr	r1, [pc, #156]	; (800b3a0 <lwip_netconn_do_write+0x100>)
 800b304:	4827      	ldr	r0, [pc, #156]	; (800b3a4 <lwip_netconn_do_write+0x104>)
 800b306:	f00c f957 	bl	80175b8 <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 800b30a:	68bb      	ldr	r3, [r7, #8]
 800b30c:	695b      	ldr	r3, [r3, #20]
 800b30e:	2b00      	cmp	r3, #0
 800b310:	d106      	bne.n	800b320 <lwip_netconn_do_write+0x80>
 800b312:	4b22      	ldr	r3, [pc, #136]	; (800b39c <lwip_netconn_do_write+0xfc>)
 800b314:	f240 7224 	movw	r2, #1828	; 0x724
 800b318:	4923      	ldr	r1, [pc, #140]	; (800b3a8 <lwip_netconn_do_write+0x108>)
 800b31a:	4822      	ldr	r0, [pc, #136]	; (800b3a4 <lwip_netconn_do_write+0x104>)
 800b31c:	f00c f94c 	bl	80175b8 <iprintf>
        msg->conn->current_msg = msg;
 800b320:	68bb      	ldr	r3, [r7, #8]
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	68ba      	ldr	r2, [r7, #8]
 800b326:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 800b328:	68bb      	ldr	r3, [r7, #8]
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	2100      	movs	r1, #0
 800b32e:	4618      	mov	r0, r3
 800b330:	f7ff fdea 	bl	800af08 <lwip_netconn_do_writemore>
 800b334:	4603      	mov	r3, r0
 800b336:	2b00      	cmp	r3, #0
 800b338:	d02b      	beq.n	800b392 <lwip_netconn_do_write+0xf2>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 800b33a:	68bb      	ldr	r3, [r7, #8]
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	785b      	ldrb	r3, [r3, #1]
 800b340:	2b01      	cmp	r3, #1
 800b342:	d006      	beq.n	800b352 <lwip_netconn_do_write+0xb2>
 800b344:	4b15      	ldr	r3, [pc, #84]	; (800b39c <lwip_netconn_do_write+0xfc>)
 800b346:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 800b34a:	4918      	ldr	r1, [pc, #96]	; (800b3ac <lwip_netconn_do_write+0x10c>)
 800b34c:	4815      	ldr	r0, [pc, #84]	; (800b3a4 <lwip_netconn_do_write+0x104>)
 800b34e:	f00c f933 	bl	80175b8 <iprintf>
          UNLOCK_TCPIP_CORE();
 800b352:	4817      	ldr	r0, [pc, #92]	; (800b3b0 <lwip_netconn_do_write+0x110>)
 800b354:	f00c f885 	bl	8017462 <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800b358:	68bb      	ldr	r3, [r7, #8]
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	330c      	adds	r3, #12
 800b35e:	2100      	movs	r1, #0
 800b360:	4618      	mov	r0, r3
 800b362:	f00b ffdc 	bl	801731e <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 800b366:	4812      	ldr	r0, [pc, #72]	; (800b3b0 <lwip_netconn_do_write+0x110>)
 800b368:	f00c f86c 	bl	8017444 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 800b36c:	68bb      	ldr	r3, [r7, #8]
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	785b      	ldrb	r3, [r3, #1]
 800b372:	2b01      	cmp	r3, #1
 800b374:	d10d      	bne.n	800b392 <lwip_netconn_do_write+0xf2>
 800b376:	4b09      	ldr	r3, [pc, #36]	; (800b39c <lwip_netconn_do_write+0xfc>)
 800b378:	f240 722c 	movw	r2, #1836	; 0x72c
 800b37c:	490b      	ldr	r1, [pc, #44]	; (800b3ac <lwip_netconn_do_write+0x10c>)
 800b37e:	4809      	ldr	r0, [pc, #36]	; (800b3a4 <lwip_netconn_do_write+0x104>)
 800b380:	f00c f91a 	bl	80175b8 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 800b384:	e005      	b.n	800b392 <lwip_netconn_do_write+0xf2>
      } else {
        err = ERR_CONN;
 800b386:	23f5      	movs	r3, #245	; 0xf5
 800b388:	73fb      	strb	r3, [r7, #15]
    } else {
      err = ERR_VAL;
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
 800b38a:	68bb      	ldr	r3, [r7, #8]
 800b38c:	7bfa      	ldrb	r2, [r7, #15]
 800b38e:	711a      	strb	r2, [r3, #4]
 800b390:	e000      	b.n	800b394 <lwip_netconn_do_write+0xf4>
        return;
 800b392:	bf00      	nop
  TCPIP_APIMSG_ACK(msg);
}
 800b394:	3710      	adds	r7, #16
 800b396:	46bd      	mov	sp, r7
 800b398:	bd80      	pop	{r7, pc}
 800b39a:	bf00      	nop
 800b39c:	08018918 	.word	0x08018918
 800b3a0:	08018c58 	.word	0x08018c58
 800b3a4:	0801895c 	.word	0x0801895c
 800b3a8:	08018de0 	.word	0x08018de0
 800b3ac:	08018c74 	.word	0x08018c74
 800b3b0:	20007a34 	.word	0x20007a34

0800b3b4 <lwip_netconn_do_getaddr>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_getaddr(void *m)
{
 800b3b4:	b580      	push	{r7, lr}
 800b3b6:	b084      	sub	sp, #16
 800b3b8:	af00      	add	r7, sp, #0
 800b3ba:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	60fb      	str	r3, [r7, #12]

  if (msg->conn->pcb.ip != NULL) {
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	685b      	ldr	r3, [r3, #4]
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d04a      	beq.n	800b460 <lwip_netconn_do_getaddr+0xac>
    if (msg->msg.ad.local) {
 800b3ca:	68fb      	ldr	r3, [r7, #12]
 800b3cc:	7c1b      	ldrb	r3, [r3, #16]
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d007      	beq.n	800b3e2 <lwip_netconn_do_getaddr+0x2e>
      ip_addr_copy(API_EXPR_DEREF(msg->msg.ad.ipaddr),
 800b3d2:	68fb      	ldr	r3, [r7, #12]
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	685a      	ldr	r2, [r3, #4]
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	689b      	ldr	r3, [r3, #8]
 800b3dc:	6812      	ldr	r2, [r2, #0]
 800b3de:	601a      	str	r2, [r3, #0]
 800b3e0:	e006      	b.n	800b3f0 <lwip_netconn_do_getaddr+0x3c>
                   msg->conn->pcb.ip->local_ip);
    } else {
      ip_addr_copy(API_EXPR_DEREF(msg->msg.ad.ipaddr),
 800b3e2:	68fb      	ldr	r3, [r7, #12]
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	685a      	ldr	r2, [r3, #4]
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	689b      	ldr	r3, [r3, #8]
 800b3ec:	6852      	ldr	r2, [r2, #4]
 800b3ee:	601a      	str	r2, [r3, #0]
                   msg->conn->pcb.ip->remote_ip);
    }

    msg->err = ERR_OK;
 800b3f0:	68fb      	ldr	r3, [r7, #12]
 800b3f2:	2200      	movs	r2, #0
 800b3f4:	711a      	strb	r2, [r3, #4]
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	781b      	ldrb	r3, [r3, #0]
 800b3fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b400:	2b10      	cmp	r3, #16
 800b402:	d124      	bne.n	800b44e <lwip_netconn_do_getaddr+0x9a>
        }
        break;
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        if ((msg->msg.ad.local == 0) &&
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	7c1b      	ldrb	r3, [r3, #16]
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d10f      	bne.n	800b42c <lwip_netconn_do_getaddr+0x78>
            ((msg->conn->pcb.tcp->state == CLOSED) || (msg->conn->pcb.tcp->state == LISTEN))) {
 800b40c:	68fb      	ldr	r3, [r7, #12]
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	685b      	ldr	r3, [r3, #4]
 800b412:	7d1b      	ldrb	r3, [r3, #20]
        if ((msg->msg.ad.local == 0) &&
 800b414:	2b00      	cmp	r3, #0
 800b416:	d005      	beq.n	800b424 <lwip_netconn_do_getaddr+0x70>
            ((msg->conn->pcb.tcp->state == CLOSED) || (msg->conn->pcb.tcp->state == LISTEN))) {
 800b418:	68fb      	ldr	r3, [r7, #12]
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	685b      	ldr	r3, [r3, #4]
 800b41e:	7d1b      	ldrb	r3, [r3, #20]
 800b420:	2b01      	cmp	r3, #1
 800b422:	d103      	bne.n	800b42c <lwip_netconn_do_getaddr+0x78>
          /* pcb is not connected and remote name is requested */
          msg->err = ERR_CONN;
 800b424:	68fb      	ldr	r3, [r7, #12]
 800b426:	22f5      	movs	r2, #245	; 0xf5
 800b428:	711a      	strb	r2, [r3, #4]
        } else {
          API_EXPR_DEREF(msg->msg.ad.port) = (msg->msg.ad.local ? msg->conn->pcb.tcp->local_port : msg->conn->pcb.tcp->remote_port);
        }
        break;
 800b42a:	e01c      	b.n	800b466 <lwip_netconn_do_getaddr+0xb2>
          API_EXPR_DEREF(msg->msg.ad.port) = (msg->msg.ad.local ? msg->conn->pcb.tcp->local_port : msg->conn->pcb.tcp->remote_port);
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	7c1b      	ldrb	r3, [r3, #16]
 800b430:	2b00      	cmp	r3, #0
 800b432:	d004      	beq.n	800b43e <lwip_netconn_do_getaddr+0x8a>
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	685b      	ldr	r3, [r3, #4]
 800b43a:	8adb      	ldrh	r3, [r3, #22]
 800b43c:	e003      	b.n	800b446 <lwip_netconn_do_getaddr+0x92>
 800b43e:	68fb      	ldr	r3, [r7, #12]
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	685b      	ldr	r3, [r3, #4]
 800b444:	8b1b      	ldrh	r3, [r3, #24]
 800b446:	68fa      	ldr	r2, [r7, #12]
 800b448:	68d2      	ldr	r2, [r2, #12]
 800b44a:	8013      	strh	r3, [r2, #0]
        break;
 800b44c:	e00b      	b.n	800b466 <lwip_netconn_do_getaddr+0xb2>
#endif /* LWIP_TCP */
      default:
        LWIP_ASSERT("invalid netconn_type", 0);
 800b44e:	4b08      	ldr	r3, [pc, #32]	; (800b470 <lwip_netconn_do_getaddr+0xbc>)
 800b450:	f240 727d 	movw	r2, #1917	; 0x77d
 800b454:	4907      	ldr	r1, [pc, #28]	; (800b474 <lwip_netconn_do_getaddr+0xc0>)
 800b456:	4808      	ldr	r0, [pc, #32]	; (800b478 <lwip_netconn_do_getaddr+0xc4>)
 800b458:	f00c f8ae 	bl	80175b8 <iprintf>
        break;
 800b45c:	bf00      	nop
 800b45e:	e002      	b.n	800b466 <lwip_netconn_do_getaddr+0xb2>
    }
  } else {
    msg->err = ERR_CONN;
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	22f5      	movs	r2, #245	; 0xf5
 800b464:	711a      	strb	r2, [r3, #4]
  }
  TCPIP_APIMSG_ACK(msg);
}
 800b466:	bf00      	nop
 800b468:	3710      	adds	r7, #16
 800b46a:	46bd      	mov	sp, r7
 800b46c:	bd80      	pop	{r7, pc}
 800b46e:	bf00      	nop
 800b470:	08018918 	.word	0x08018918
 800b474:	08018df4 	.word	0x08018df4
 800b478:	0801895c 	.word	0x0801895c

0800b47c <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 800b47c:	b580      	push	{r7, lr}
 800b47e:	b084      	sub	sp, #16
 800b480:	af00      	add	r7, sp, #0
 800b482:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	785b      	ldrb	r3, [r3, #1]
 800b48e:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	685b      	ldr	r3, [r3, #4]
 800b496:	2b00      	cmp	r3, #0
 800b498:	d069      	beq.n	800b56e <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800b49a:	68fb      	ldr	r3, [r7, #12]
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	781b      	ldrb	r3, [r3, #0]
 800b4a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 800b4a4:	2b10      	cmp	r3, #16
 800b4a6:	d162      	bne.n	800b56e <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800b4a8:	68fb      	ldr	r3, [r7, #12]
 800b4aa:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800b4ac:	2b03      	cmp	r3, #3
 800b4ae:	d002      	beq.n	800b4b6 <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800b4b0:	7afb      	ldrb	r3, [r7, #11]
 800b4b2:	2b02      	cmp	r3, #2
 800b4b4:	d05b      	beq.n	800b56e <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 800b4b6:	7afb      	ldrb	r3, [r7, #11]
 800b4b8:	2b03      	cmp	r3, #3
 800b4ba:	d103      	bne.n	800b4c4 <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 800b4bc:	68fb      	ldr	r3, [r7, #12]
 800b4be:	22f5      	movs	r2, #245	; 0xf5
 800b4c0:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800b4c2:	e059      	b.n	800b578 <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 800b4c4:	7afb      	ldrb	r3, [r7, #11]
 800b4c6:	2b01      	cmp	r3, #1
 800b4c8:	d103      	bne.n	800b4d2 <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	22fb      	movs	r2, #251	; 0xfb
 800b4ce:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800b4d0:	e052      	b.n	800b578 <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	7a1b      	ldrb	r3, [r3, #8]
 800b4d6:	f003 0301 	and.w	r3, r3, #1
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d004      	beq.n	800b4e8 <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 800b4de:	68fb      	ldr	r3, [r7, #12]
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	4618      	mov	r0, r3
 800b4e4:	f7ff f95c 	bl	800a7a0 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800b4e8:	68fb      	ldr	r3, [r7, #12]
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	6a1b      	ldr	r3, [r3, #32]
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	d006      	beq.n	800b500 <lwip_netconn_do_close+0x84>
 800b4f2:	4b23      	ldr	r3, [pc, #140]	; (800b580 <lwip_netconn_do_close+0x104>)
 800b4f4:	f240 72bd 	movw	r2, #1981	; 0x7bd
 800b4f8:	4922      	ldr	r1, [pc, #136]	; (800b584 <lwip_netconn_do_close+0x108>)
 800b4fa:	4823      	ldr	r0, [pc, #140]	; (800b588 <lwip_netconn_do_close+0x10c>)
 800b4fc:	f00c f85c 	bl	80175b8 <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 800b500:	68fb      	ldr	r3, [r7, #12]
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	2204      	movs	r2, #4
 800b506:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 800b508:	68fb      	ldr	r3, [r7, #12]
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	68fa      	ldr	r2, [r7, #12]
 800b50e:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800b510:	68fb      	ldr	r3, [r7, #12]
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	2100      	movs	r1, #0
 800b516:	4618      	mov	r0, r3
 800b518:	f7ff f9c0 	bl	800a89c <lwip_netconn_do_close_internal>
 800b51c:	4603      	mov	r3, r0
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d029      	beq.n	800b576 <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800b522:	68fb      	ldr	r3, [r7, #12]
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	785b      	ldrb	r3, [r3, #1]
 800b528:	2b04      	cmp	r3, #4
 800b52a:	d006      	beq.n	800b53a <lwip_netconn_do_close+0xbe>
 800b52c:	4b14      	ldr	r3, [pc, #80]	; (800b580 <lwip_netconn_do_close+0x104>)
 800b52e:	f240 72c2 	movw	r2, #1986	; 0x7c2
 800b532:	4916      	ldr	r1, [pc, #88]	; (800b58c <lwip_netconn_do_close+0x110>)
 800b534:	4814      	ldr	r0, [pc, #80]	; (800b588 <lwip_netconn_do_close+0x10c>)
 800b536:	f00c f83f 	bl	80175b8 <iprintf>
        UNLOCK_TCPIP_CORE();
 800b53a:	4815      	ldr	r0, [pc, #84]	; (800b590 <lwip_netconn_do_close+0x114>)
 800b53c:	f00b ff91 	bl	8017462 <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	330c      	adds	r3, #12
 800b546:	2100      	movs	r1, #0
 800b548:	4618      	mov	r0, r3
 800b54a:	f00b fee8 	bl	801731e <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 800b54e:	4810      	ldr	r0, [pc, #64]	; (800b590 <lwip_netconn_do_close+0x114>)
 800b550:	f00b ff78 	bl	8017444 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	785b      	ldrb	r3, [r3, #1]
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d00b      	beq.n	800b576 <lwip_netconn_do_close+0xfa>
 800b55e:	4b08      	ldr	r3, [pc, #32]	; (800b580 <lwip_netconn_do_close+0x104>)
 800b560:	f240 72c6 	movw	r2, #1990	; 0x7c6
 800b564:	4909      	ldr	r1, [pc, #36]	; (800b58c <lwip_netconn_do_close+0x110>)
 800b566:	4808      	ldr	r0, [pc, #32]	; (800b588 <lwip_netconn_do_close+0x10c>)
 800b568:	f00c f826 	bl	80175b8 <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 800b56c:	e003      	b.n	800b576 <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	22f5      	movs	r2, #245	; 0xf5
 800b572:	711a      	strb	r2, [r3, #4]
 800b574:	e000      	b.n	800b578 <lwip_netconn_do_close+0xfc>
      return;
 800b576:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 800b578:	3710      	adds	r7, #16
 800b57a:	46bd      	mov	sp, r7
 800b57c:	bd80      	pop	{r7, pc}
 800b57e:	bf00      	nop
 800b580:	08018918 	.word	0x08018918
 800b584:	08018c58 	.word	0x08018c58
 800b588:	0801895c 	.word	0x0801895c
 800b58c:	08018c74 	.word	0x08018c74
 800b590:	20007a34 	.word	0x20007a34

0800b594 <err_to_errno>:
  EIO            /* ERR_ARG        -16     Illegal argument.        */
};

int
err_to_errno(err_t err)
{
 800b594:	b480      	push	{r7}
 800b596:	b083      	sub	sp, #12
 800b598:	af00      	add	r7, sp, #0
 800b59a:	4603      	mov	r3, r0
 800b59c:	71fb      	strb	r3, [r7, #7]
  if ((err > 0) || (-err >= (err_t)LWIP_ARRAYSIZE(err_to_errno_table))) {
 800b59e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	dc04      	bgt.n	800b5b0 <err_to_errno+0x1c>
 800b5a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b5aa:	425b      	negs	r3, r3
 800b5ac:	2b10      	cmp	r3, #16
 800b5ae:	dd01      	ble.n	800b5b4 <err_to_errno+0x20>
    return EIO;
 800b5b0:	2305      	movs	r3, #5
 800b5b2:	e005      	b.n	800b5c0 <err_to_errno+0x2c>
  }
  return err_to_errno_table[-err];
 800b5b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b5b8:	425b      	negs	r3, r3
 800b5ba:	4a04      	ldr	r2, [pc, #16]	; (800b5cc <err_to_errno+0x38>)
 800b5bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 800b5c0:	4618      	mov	r0, r3
 800b5c2:	370c      	adds	r7, #12
 800b5c4:	46bd      	mov	sp, r7
 800b5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ca:	4770      	bx	lr
 800b5cc:	0801b8f8 	.word	0x0801b8f8

0800b5d0 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 800b5d0:	b580      	push	{r7, lr}
 800b5d2:	b082      	sub	sp, #8
 800b5d4:	af00      	add	r7, sp, #0
 800b5d6:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	d013      	beq.n	800b606 <netbuf_delete+0x36>
    if (buf->p != NULL) {
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d00b      	beq.n	800b5fe <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	4618      	mov	r0, r3
 800b5ec:	f002 fe5e 	bl	800e2ac <pbuf_free>
      buf->p = buf->ptr = NULL;
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	2200      	movs	r2, #0
 800b5f4:	605a      	str	r2, [r3, #4]
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	685a      	ldr	r2, [r3, #4]
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 800b5fe:	6879      	ldr	r1, [r7, #4]
 800b600:	2005      	movs	r0, #5
 800b602:	f001 ff85 	bl	800d510 <memp_free>
  }
}
 800b606:	bf00      	nop
 800b608:	3708      	adds	r7, #8
 800b60a:	46bd      	mov	sp, r7
 800b60c:	bd80      	pop	{r7, pc}
	...

0800b610 <tryget_socket_unconn_nouse>:
#endif /* LWIP_NETCONN_FULLDUPLEX */

/* Translate a socket 'int' into a pointer (only fails if the index is invalid) */
static struct lwip_sock *
tryget_socket_unconn_nouse(int fd)
{
 800b610:	b480      	push	{r7}
 800b612:	b085      	sub	sp, #20
 800b614:	af00      	add	r7, sp, #0
 800b616:	6078      	str	r0, [r7, #4]
  int s = fd - LWIP_SOCKET_OFFSET;
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	60fb      	str	r3, [r7, #12]
  if ((s < 0) || (s >= NUM_SOCKETS)) {
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	2b00      	cmp	r3, #0
 800b620:	db02      	blt.n	800b628 <tryget_socket_unconn_nouse+0x18>
 800b622:	68fb      	ldr	r3, [r7, #12]
 800b624:	2b03      	cmp	r3, #3
 800b626:	dd01      	ble.n	800b62c <tryget_socket_unconn_nouse+0x1c>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("tryget_socket_unconn(%d): invalid\n", fd));
    return NULL;
 800b628:	2300      	movs	r3, #0
 800b62a:	e003      	b.n	800b634 <tryget_socket_unconn_nouse+0x24>
  }
  return &sockets[s];
 800b62c:	68fb      	ldr	r3, [r7, #12]
 800b62e:	011b      	lsls	r3, r3, #4
 800b630:	4a03      	ldr	r2, [pc, #12]	; (800b640 <tryget_socket_unconn_nouse+0x30>)
 800b632:	4413      	add	r3, r2
}
 800b634:	4618      	mov	r0, r3
 800b636:	3714      	adds	r7, #20
 800b638:	46bd      	mov	sp, r7
 800b63a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b63e:	4770      	bx	lr
 800b640:	200045b4 	.word	0x200045b4

0800b644 <tryget_socket_unconn>:
}

/* Translate a socket 'int' into a pointer (only fails if the index is invalid) */
static struct lwip_sock *
tryget_socket_unconn(int fd)
{
 800b644:	b580      	push	{r7, lr}
 800b646:	b084      	sub	sp, #16
 800b648:	af00      	add	r7, sp, #0
 800b64a:	6078      	str	r0, [r7, #4]
  struct lwip_sock *ret = tryget_socket_unconn_nouse(fd);
 800b64c:	6878      	ldr	r0, [r7, #4]
 800b64e:	f7ff ffdf 	bl	800b610 <tryget_socket_unconn_nouse>
 800b652:	60f8      	str	r0, [r7, #12]
  if (ret != NULL) {
    if (!sock_inc_used(ret)) {
      return NULL;
    }
  }
  return ret;
 800b654:	68fb      	ldr	r3, [r7, #12]
}
 800b656:	4618      	mov	r0, r3
 800b658:	3710      	adds	r7, #16
 800b65a:	46bd      	mov	sp, r7
 800b65c:	bd80      	pop	{r7, pc}

0800b65e <tryget_socket>:
 * @param fd externally used socket index
 * @return struct lwip_sock for the socket or NULL if not found
 */
static struct lwip_sock *
tryget_socket(int fd)
{
 800b65e:	b580      	push	{r7, lr}
 800b660:	b084      	sub	sp, #16
 800b662:	af00      	add	r7, sp, #0
 800b664:	6078      	str	r0, [r7, #4]
  struct lwip_sock *sock = tryget_socket_unconn(fd);
 800b666:	6878      	ldr	r0, [r7, #4]
 800b668:	f7ff ffec 	bl	800b644 <tryget_socket_unconn>
 800b66c:	60f8      	str	r0, [r7, #12]
  if (sock != NULL) {
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	2b00      	cmp	r3, #0
 800b672:	d005      	beq.n	800b680 <tryget_socket+0x22>
    if (sock->conn) {
 800b674:	68fb      	ldr	r3, [r7, #12]
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d001      	beq.n	800b680 <tryget_socket+0x22>
      return sock;
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	e000      	b.n	800b682 <tryget_socket+0x24>
    }
    done_socket(sock);
  }
  return NULL;
 800b680:	2300      	movs	r3, #0
}
 800b682:	4618      	mov	r0, r3
 800b684:	3710      	adds	r7, #16
 800b686:	46bd      	mov	sp, r7
 800b688:	bd80      	pop	{r7, pc}
	...

0800b68c <get_socket>:
 * @param fd externally used socket index
 * @return struct lwip_sock for the socket or NULL if not found
 */
static struct lwip_sock *
get_socket(int fd)
{
 800b68c:	b580      	push	{r7, lr}
 800b68e:	b084      	sub	sp, #16
 800b690:	af00      	add	r7, sp, #0
 800b692:	6078      	str	r0, [r7, #4]
  struct lwip_sock *sock = tryget_socket(fd);
 800b694:	6878      	ldr	r0, [r7, #4]
 800b696:	f7ff ffe2 	bl	800b65e <tryget_socket>
 800b69a:	60f8      	str	r0, [r7, #12]
  if (!sock) {
 800b69c:	68fb      	ldr	r3, [r7, #12]
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	d104      	bne.n	800b6ac <get_socket+0x20>
    if ((fd < LWIP_SOCKET_OFFSET) || (fd >= (LWIP_SOCKET_OFFSET + NUM_SOCKETS))) {
      LWIP_DEBUGF(SOCKETS_DEBUG, ("get_socket(%d): invalid\n", fd));
    }
    set_errno(EBADF);
 800b6a2:	4b05      	ldr	r3, [pc, #20]	; (800b6b8 <get_socket+0x2c>)
 800b6a4:	2209      	movs	r2, #9
 800b6a6:	601a      	str	r2, [r3, #0]
    return NULL;
 800b6a8:	2300      	movs	r3, #0
 800b6aa:	e000      	b.n	800b6ae <get_socket+0x22>
  }
  return sock;
 800b6ac:	68fb      	ldr	r3, [r7, #12]
}
 800b6ae:	4618      	mov	r0, r3
 800b6b0:	3710      	adds	r7, #16
 800b6b2:	46bd      	mov	sp, r7
 800b6b4:	bd80      	pop	{r7, pc}
 800b6b6:	bf00      	nop
 800b6b8:	2000d2a0 	.word	0x2000d2a0

0800b6bc <alloc_socket>:
 *                 0 if socket has been created by socket()
 * @return the index of the new socket; -1 on error
 */
static int
alloc_socket(struct netconn *newconn, int accepted)
{
 800b6bc:	b580      	push	{r7, lr}
 800b6be:	b084      	sub	sp, #16
 800b6c0:	af00      	add	r7, sp, #0
 800b6c2:	6078      	str	r0, [r7, #4]
 800b6c4:	6039      	str	r1, [r7, #0]
  int i;
  SYS_ARCH_DECL_PROTECT(lev);
  LWIP_UNUSED_ARG(accepted);

  /* allocate a new socket identifier */
  for (i = 0; i < NUM_SOCKETS; ++i) {
 800b6c6:	2300      	movs	r3, #0
 800b6c8:	60fb      	str	r3, [r7, #12]
 800b6ca:	e052      	b.n	800b772 <alloc_socket+0xb6>
    /* Protect socket array */
    SYS_ARCH_PROTECT(lev);
 800b6cc:	f00b fefc 	bl	80174c8 <sys_arch_protect>
 800b6d0:	60b8      	str	r0, [r7, #8]
    if (!sockets[i].conn) {
 800b6d2:	4a2c      	ldr	r2, [pc, #176]	; (800b784 <alloc_socket+0xc8>)
 800b6d4:	68fb      	ldr	r3, [r7, #12]
 800b6d6:	011b      	lsls	r3, r3, #4
 800b6d8:	4413      	add	r3, r2
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d142      	bne.n	800b766 <alloc_socket+0xaa>
        continue;
      }
      sockets[i].fd_used    = 1;
      sockets[i].fd_free_pending = 0;
#endif
      sockets[i].conn       = newconn;
 800b6e0:	4a28      	ldr	r2, [pc, #160]	; (800b784 <alloc_socket+0xc8>)
 800b6e2:	68fb      	ldr	r3, [r7, #12]
 800b6e4:	011b      	lsls	r3, r3, #4
 800b6e6:	4413      	add	r3, r2
 800b6e8:	687a      	ldr	r2, [r7, #4]
 800b6ea:	601a      	str	r2, [r3, #0]
      /* The socket is not yet known to anyone, so no need to protect
         after having marked it as used. */
      SYS_ARCH_UNPROTECT(lev);
 800b6ec:	68b8      	ldr	r0, [r7, #8]
 800b6ee:	f00b fef9 	bl	80174e4 <sys_arch_unprotect>
      sockets[i].lastdata.pbuf = NULL;
 800b6f2:	4a24      	ldr	r2, [pc, #144]	; (800b784 <alloc_socket+0xc8>)
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	011b      	lsls	r3, r3, #4
 800b6f8:	4413      	add	r3, r2
 800b6fa:	3304      	adds	r3, #4
 800b6fc:	2200      	movs	r2, #0
 800b6fe:	601a      	str	r2, [r3, #0]
#if LWIP_SOCKET_SELECT || LWIP_SOCKET_POLL
      LWIP_ASSERT("sockets[i].select_waiting == 0", sockets[i].select_waiting == 0);
 800b700:	4a20      	ldr	r2, [pc, #128]	; (800b784 <alloc_socket+0xc8>)
 800b702:	68fb      	ldr	r3, [r7, #12]
 800b704:	011b      	lsls	r3, r3, #4
 800b706:	4413      	add	r3, r2
 800b708:	330e      	adds	r3, #14
 800b70a:	781b      	ldrb	r3, [r3, #0]
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	d006      	beq.n	800b71e <alloc_socket+0x62>
 800b710:	4b1d      	ldr	r3, [pc, #116]	; (800b788 <alloc_socket+0xcc>)
 800b712:	f240 220e 	movw	r2, #526	; 0x20e
 800b716:	491d      	ldr	r1, [pc, #116]	; (800b78c <alloc_socket+0xd0>)
 800b718:	481d      	ldr	r0, [pc, #116]	; (800b790 <alloc_socket+0xd4>)
 800b71a:	f00b ff4d 	bl	80175b8 <iprintf>
      sockets[i].rcvevent   = 0;
 800b71e:	4a19      	ldr	r2, [pc, #100]	; (800b784 <alloc_socket+0xc8>)
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	011b      	lsls	r3, r3, #4
 800b724:	4413      	add	r3, r2
 800b726:	3308      	adds	r3, #8
 800b728:	2200      	movs	r2, #0
 800b72a:	801a      	strh	r2, [r3, #0]
      /* TCP sendbuf is empty, but the socket is not yet writable until connected
       * (unless it has been created by accept()). */
      sockets[i].sendevent  = (NETCONNTYPE_GROUP(newconn->type) == NETCONN_TCP ? (accepted != 0) : 1);
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	781b      	ldrb	r3, [r3, #0]
 800b730:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b734:	2b10      	cmp	r3, #16
 800b736:	d102      	bne.n	800b73e <alloc_socket+0x82>
 800b738:	683b      	ldr	r3, [r7, #0]
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d001      	beq.n	800b742 <alloc_socket+0x86>
 800b73e:	2301      	movs	r3, #1
 800b740:	e000      	b.n	800b744 <alloc_socket+0x88>
 800b742:	2300      	movs	r3, #0
 800b744:	b299      	uxth	r1, r3
 800b746:	4a0f      	ldr	r2, [pc, #60]	; (800b784 <alloc_socket+0xc8>)
 800b748:	68fb      	ldr	r3, [r7, #12]
 800b74a:	011b      	lsls	r3, r3, #4
 800b74c:	4413      	add	r3, r2
 800b74e:	330a      	adds	r3, #10
 800b750:	460a      	mov	r2, r1
 800b752:	801a      	strh	r2, [r3, #0]
      sockets[i].errevent   = 0;
 800b754:	4a0b      	ldr	r2, [pc, #44]	; (800b784 <alloc_socket+0xc8>)
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	011b      	lsls	r3, r3, #4
 800b75a:	4413      	add	r3, r2
 800b75c:	330c      	adds	r3, #12
 800b75e:	2200      	movs	r2, #0
 800b760:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_SOCKET_SELECT || LWIP_SOCKET_POLL */
      return i + LWIP_SOCKET_OFFSET;
 800b762:	68fb      	ldr	r3, [r7, #12]
 800b764:	e00a      	b.n	800b77c <alloc_socket+0xc0>
    }
    SYS_ARCH_UNPROTECT(lev);
 800b766:	68b8      	ldr	r0, [r7, #8]
 800b768:	f00b febc 	bl	80174e4 <sys_arch_unprotect>
  for (i = 0; i < NUM_SOCKETS; ++i) {
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	3301      	adds	r3, #1
 800b770:	60fb      	str	r3, [r7, #12]
 800b772:	68fb      	ldr	r3, [r7, #12]
 800b774:	2b03      	cmp	r3, #3
 800b776:	dda9      	ble.n	800b6cc <alloc_socket+0x10>
  }
  return -1;
 800b778:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b77c:	4618      	mov	r0, r3
 800b77e:	3710      	adds	r7, #16
 800b780:	46bd      	mov	sp, r7
 800b782:	bd80      	pop	{r7, pc}
 800b784:	200045b4 	.word	0x200045b4
 800b788:	08018e0c 	.word	0x08018e0c
 800b78c:	08018e40 	.word	0x08018e40
 800b790:	08018e60 	.word	0x08018e60

0800b794 <free_socket_locked>:
 * @param lastdata lastdata is stored here, must be freed externally
 */
static int
free_socket_locked(struct lwip_sock *sock, int is_tcp, struct netconn **conn,
                   union lwip_sock_lastdata *lastdata)
{
 800b794:	b480      	push	{r7}
 800b796:	b085      	sub	sp, #20
 800b798:	af00      	add	r7, sp, #0
 800b79a:	60f8      	str	r0, [r7, #12]
 800b79c:	60b9      	str	r1, [r7, #8]
 800b79e:	607a      	str	r2, [r7, #4]
 800b7a0:	603b      	str	r3, [r7, #0]
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  LWIP_UNUSED_ARG(is_tcp);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  *lastdata = sock->lastdata;
 800b7a2:	683b      	ldr	r3, [r7, #0]
 800b7a4:	68fa      	ldr	r2, [r7, #12]
 800b7a6:	6852      	ldr	r2, [r2, #4]
 800b7a8:	601a      	str	r2, [r3, #0]
  sock->lastdata.pbuf = NULL;
 800b7aa:	68fb      	ldr	r3, [r7, #12]
 800b7ac:	2200      	movs	r2, #0
 800b7ae:	605a      	str	r2, [r3, #4]
  *conn = sock->conn;
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	681a      	ldr	r2, [r3, #0]
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	601a      	str	r2, [r3, #0]
  sock->conn = NULL;
 800b7b8:	68fb      	ldr	r3, [r7, #12]
 800b7ba:	2200      	movs	r2, #0
 800b7bc:	601a      	str	r2, [r3, #0]
  return 1;
 800b7be:	2301      	movs	r3, #1
}
 800b7c0:	4618      	mov	r0, r3
 800b7c2:	3714      	adds	r7, #20
 800b7c4:	46bd      	mov	sp, r7
 800b7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ca:	4770      	bx	lr

0800b7cc <free_socket_free_elements>:

/** Free a socket's leftover members.
 */
static void
free_socket_free_elements(int is_tcp, struct netconn *conn, union lwip_sock_lastdata *lastdata)
{
 800b7cc:	b580      	push	{r7, lr}
 800b7ce:	b084      	sub	sp, #16
 800b7d0:	af00      	add	r7, sp, #0
 800b7d2:	60f8      	str	r0, [r7, #12]
 800b7d4:	60b9      	str	r1, [r7, #8]
 800b7d6:	607a      	str	r2, [r7, #4]
  if (lastdata->pbuf != NULL) {
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d00d      	beq.n	800b7fc <free_socket_free_elements+0x30>
    if (is_tcp) {
 800b7e0:	68fb      	ldr	r3, [r7, #12]
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d005      	beq.n	800b7f2 <free_socket_free_elements+0x26>
      pbuf_free(lastdata->pbuf);
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	4618      	mov	r0, r3
 800b7ec:	f002 fd5e 	bl	800e2ac <pbuf_free>
 800b7f0:	e004      	b.n	800b7fc <free_socket_free_elements+0x30>
    } else {
      netbuf_delete(lastdata->netbuf);
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	4618      	mov	r0, r3
 800b7f8:	f7ff feea 	bl	800b5d0 <netbuf_delete>
    }
  }
  if (conn != NULL) {
 800b7fc:	68bb      	ldr	r3, [r7, #8]
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d002      	beq.n	800b808 <free_socket_free_elements+0x3c>
    /* netconn_prepare_delete() has already been called, here we only free the conn */
    netconn_delete(conn);
 800b802:	68b8      	ldr	r0, [r7, #8]
 800b804:	f7fd fef6 	bl	80095f4 <netconn_delete>
  }
}
 800b808:	bf00      	nop
 800b80a:	3710      	adds	r7, #16
 800b80c:	46bd      	mov	sp, r7
 800b80e:	bd80      	pop	{r7, pc}

0800b810 <free_socket>:
 * @param sock the socket to free
 * @param is_tcp != 0 for TCP sockets, used to free lastdata
 */
static void
free_socket(struct lwip_sock *sock, int is_tcp)
{
 800b810:	b580      	push	{r7, lr}
 800b812:	b086      	sub	sp, #24
 800b814:	af00      	add	r7, sp, #0
 800b816:	6078      	str	r0, [r7, #4]
 800b818:	6039      	str	r1, [r7, #0]
  struct netconn *conn;
  union lwip_sock_lastdata lastdata;
  SYS_ARCH_DECL_PROTECT(lev);

  /* Protect socket array */
  SYS_ARCH_PROTECT(lev);
 800b81a:	f00b fe55 	bl	80174c8 <sys_arch_protect>
 800b81e:	6178      	str	r0, [r7, #20]

  freed = free_socket_locked(sock, is_tcp, &conn, &lastdata);
 800b820:	f107 0308 	add.w	r3, r7, #8
 800b824:	f107 020c 	add.w	r2, r7, #12
 800b828:	6839      	ldr	r1, [r7, #0]
 800b82a:	6878      	ldr	r0, [r7, #4]
 800b82c:	f7ff ffb2 	bl	800b794 <free_socket_locked>
 800b830:	6138      	str	r0, [r7, #16]
  SYS_ARCH_UNPROTECT(lev);
 800b832:	6978      	ldr	r0, [r7, #20]
 800b834:	f00b fe56 	bl	80174e4 <sys_arch_unprotect>
  /* don't use 'sock' after this line, as another task might have allocated it */

  if (freed) {
 800b838:	693b      	ldr	r3, [r7, #16]
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	d006      	beq.n	800b84c <free_socket+0x3c>
    free_socket_free_elements(is_tcp, conn, &lastdata);
 800b83e:	68fb      	ldr	r3, [r7, #12]
 800b840:	f107 0208 	add.w	r2, r7, #8
 800b844:	4619      	mov	r1, r3
 800b846:	6838      	ldr	r0, [r7, #0]
 800b848:	f7ff ffc0 	bl	800b7cc <free_socket_free_elements>
  }
}
 800b84c:	bf00      	nop
 800b84e:	3718      	adds	r7, #24
 800b850:	46bd      	mov	sp, r7
 800b852:	bd80      	pop	{r7, pc}

0800b854 <lwip_accept>:
 * Exceptions are documented!
 */

int
lwip_accept(int s, struct sockaddr *addr, socklen_t *addrlen)
{
 800b854:	b590      	push	{r4, r7, lr}
 800b856:	b099      	sub	sp, #100	; 0x64
 800b858:	af00      	add	r7, sp, #0
 800b85a:	60f8      	str	r0, [r7, #12]
 800b85c:	60b9      	str	r1, [r7, #8]
 800b85e:	607a      	str	r2, [r7, #4]
  struct lwip_sock *sock, *nsock;
  struct netconn *newconn;
  ip_addr_t naddr;
  u16_t port = 0;
 800b860:	2300      	movs	r3, #0
 800b862:	84fb      	strh	r3, [r7, #38]	; 0x26
  err_t err;
  int recvevent;
  SYS_ARCH_DECL_PROTECT(lev);

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_accept(%d)...\n", s));
  sock = get_socket(s);
 800b864:	68f8      	ldr	r0, [r7, #12]
 800b866:	f7ff ff11 	bl	800b68c <get_socket>
 800b86a:	65b8      	str	r0, [r7, #88]	; 0x58
  if (!sock) {
 800b86c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b86e:	2b00      	cmp	r3, #0
 800b870:	d102      	bne.n	800b878 <lwip_accept+0x24>
    return -1;
 800b872:	f04f 33ff 	mov.w	r3, #4294967295
 800b876:	e0f8      	b.n	800ba6a <lwip_accept+0x216>
  }

  /* wait for a new connection */
  err = netconn_accept(sock->conn, &newconn);
 800b878:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800b880:	4611      	mov	r1, r2
 800b882:	4618      	mov	r0, r3
 800b884:	f7fd ff88 	bl	8009798 <netconn_accept>
 800b888:	4603      	mov	r3, r0
 800b88a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
  if (err != ERR_OK) {
 800b88e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800b892:	2b00      	cmp	r3, #0
 800b894:	d02c      	beq.n	800b8f0 <lwip_accept+0x9c>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_accept(%d): netconn_acept failed, err=%d\n", s, err));
    if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_TCP) {
 800b896:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	781b      	ldrb	r3, [r3, #0]
 800b89c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b8a0:	2b10      	cmp	r3, #16
 800b8a2:	d008      	beq.n	800b8b6 <lwip_accept+0x62>
      sock_set_errno(sock, EOPNOTSUPP);
 800b8a4:	235f      	movs	r3, #95	; 0x5f
 800b8a6:	633b      	str	r3, [r7, #48]	; 0x30
 800b8a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	d01d      	beq.n	800b8ea <lwip_accept+0x96>
 800b8ae:	4a71      	ldr	r2, [pc, #452]	; (800ba74 <lwip_accept+0x220>)
 800b8b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8b2:	6013      	str	r3, [r2, #0]
 800b8b4:	e019      	b.n	800b8ea <lwip_accept+0x96>
    } else if (err == ERR_CLSD) {
 800b8b6:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800b8ba:	f113 0f0f 	cmn.w	r3, #15
 800b8be:	d108      	bne.n	800b8d2 <lwip_accept+0x7e>
      sock_set_errno(sock, EINVAL);
 800b8c0:	2316      	movs	r3, #22
 800b8c2:	637b      	str	r3, [r7, #52]	; 0x34
 800b8c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d00f      	beq.n	800b8ea <lwip_accept+0x96>
 800b8ca:	4a6a      	ldr	r2, [pc, #424]	; (800ba74 <lwip_accept+0x220>)
 800b8cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b8ce:	6013      	str	r3, [r2, #0]
 800b8d0:	e00b      	b.n	800b8ea <lwip_accept+0x96>
    } else {
      sock_set_errno(sock, err_to_errno(err));
 800b8d2:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800b8d6:	4618      	mov	r0, r3
 800b8d8:	f7ff fe5c 	bl	800b594 <err_to_errno>
 800b8dc:	63b8      	str	r0, [r7, #56]	; 0x38
 800b8de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d002      	beq.n	800b8ea <lwip_accept+0x96>
 800b8e4:	4a63      	ldr	r2, [pc, #396]	; (800ba74 <lwip_accept+0x220>)
 800b8e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8e8:	6013      	str	r3, [r2, #0]
    }
    done_socket(sock);
    return -1;
 800b8ea:	f04f 33ff 	mov.w	r3, #4294967295
 800b8ee:	e0bc      	b.n	800ba6a <lwip_accept+0x216>
  }
  LWIP_ASSERT("newconn != NULL", newconn != NULL);
 800b8f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	d106      	bne.n	800b904 <lwip_accept+0xb0>
 800b8f6:	4b60      	ldr	r3, [pc, #384]	; (800ba78 <lwip_accept+0x224>)
 800b8f8:	f240 228b 	movw	r2, #651	; 0x28b
 800b8fc:	495f      	ldr	r1, [pc, #380]	; (800ba7c <lwip_accept+0x228>)
 800b8fe:	4860      	ldr	r0, [pc, #384]	; (800ba80 <lwip_accept+0x22c>)
 800b900:	f00b fe5a 	bl	80175b8 <iprintf>

  newsock = alloc_socket(newconn, 1);
 800b904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b906:	2101      	movs	r1, #1
 800b908:	4618      	mov	r0, r3
 800b90a:	f7ff fed7 	bl	800b6bc <alloc_socket>
 800b90e:	6538      	str	r0, [r7, #80]	; 0x50
  if (newsock == -1) {
 800b910:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b912:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b916:	d10e      	bne.n	800b936 <lwip_accept+0xe2>
    netconn_delete(newconn);
 800b918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b91a:	4618      	mov	r0, r3
 800b91c:	f7fd fe6a 	bl	80095f4 <netconn_delete>
    sock_set_errno(sock, ENFILE);
 800b920:	2317      	movs	r3, #23
 800b922:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b924:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b926:	2b00      	cmp	r3, #0
 800b928:	d002      	beq.n	800b930 <lwip_accept+0xdc>
 800b92a:	4a52      	ldr	r2, [pc, #328]	; (800ba74 <lwip_accept+0x220>)
 800b92c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b92e:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 800b930:	f04f 33ff 	mov.w	r3, #4294967295
 800b934:	e099      	b.n	800ba6a <lwip_accept+0x216>
  }
  LWIP_ASSERT("invalid socket index", (newsock >= LWIP_SOCKET_OFFSET) && (newsock < NUM_SOCKETS + LWIP_SOCKET_OFFSET));
 800b936:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b938:	2b00      	cmp	r3, #0
 800b93a:	db02      	blt.n	800b942 <lwip_accept+0xee>
 800b93c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b93e:	2b03      	cmp	r3, #3
 800b940:	dd06      	ble.n	800b950 <lwip_accept+0xfc>
 800b942:	4b4d      	ldr	r3, [pc, #308]	; (800ba78 <lwip_accept+0x224>)
 800b944:	f44f 7225 	mov.w	r2, #660	; 0x294
 800b948:	494e      	ldr	r1, [pc, #312]	; (800ba84 <lwip_accept+0x230>)
 800b94a:	484d      	ldr	r0, [pc, #308]	; (800ba80 <lwip_accept+0x22c>)
 800b94c:	f00b fe34 	bl	80175b8 <iprintf>
  nsock = &sockets[newsock - LWIP_SOCKET_OFFSET];
 800b950:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b952:	011b      	lsls	r3, r3, #4
 800b954:	4a4c      	ldr	r2, [pc, #304]	; (800ba88 <lwip_accept+0x234>)
 800b956:	4413      	add	r3, r2
 800b958:	64fb      	str	r3, [r7, #76]	; 0x4c
  /* See event_callback: If data comes in right away after an accept, even
   * though the server task might not have created a new socket yet.
   * In that case, newconn->socket is counted down (newconn->socket--),
   * so nsock->rcvevent is >= 1 here!
   */
  SYS_ARCH_PROTECT(lev);
 800b95a:	f00b fdb5 	bl	80174c8 <sys_arch_protect>
 800b95e:	64b8      	str	r0, [r7, #72]	; 0x48
  recvevent = (s16_t)(-1 - newconn->socket);
 800b960:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b962:	699b      	ldr	r3, [r3, #24]
 800b964:	b21b      	sxth	r3, r3
 800b966:	43db      	mvns	r3, r3
 800b968:	b21b      	sxth	r3, r3
 800b96a:	65fb      	str	r3, [r7, #92]	; 0x5c
  newconn->socket = newsock;
 800b96c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b96e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b970:	619a      	str	r2, [r3, #24]
  SYS_ARCH_UNPROTECT(lev);
 800b972:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800b974:	f00b fdb6 	bl	80174e4 <sys_arch_unprotect>

  if (newconn->callback) {
 800b978:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b97a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d012      	beq.n	800b9a6 <lwip_accept+0x152>
    LOCK_TCPIP_CORE();
 800b980:	4842      	ldr	r0, [pc, #264]	; (800ba8c <lwip_accept+0x238>)
 800b982:	f00b fd5f 	bl	8017444 <sys_mutex_lock>
    while (recvevent > 0) {
 800b986:	e008      	b.n	800b99a <lwip_accept+0x146>
      recvevent--;
 800b988:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b98a:	3b01      	subs	r3, #1
 800b98c:	65fb      	str	r3, [r7, #92]	; 0x5c
      newconn->callback(newconn, NETCONN_EVT_RCVPLUS, 0);
 800b98e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b992:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b994:	2200      	movs	r2, #0
 800b996:	2100      	movs	r1, #0
 800b998:	4798      	blx	r3
    while (recvevent > 0) {
 800b99a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	dcf3      	bgt.n	800b988 <lwip_accept+0x134>
    }
    UNLOCK_TCPIP_CORE();
 800b9a0:	483a      	ldr	r0, [pc, #232]	; (800ba8c <lwip_accept+0x238>)
 800b9a2:	f00b fd5e 	bl	8017462 <sys_mutex_unlock>
  }

  /* Note that POSIX only requires us to check addr is non-NULL. addrlen must
   * not be NULL if addr is valid.
   */
  if ((addr != NULL) && (addrlen != NULL)) {
 800b9a6:	68bb      	ldr	r3, [r7, #8]
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d055      	beq.n	800ba58 <lwip_accept+0x204>
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d052      	beq.n	800ba58 <lwip_accept+0x204>
    union sockaddr_aligned tempaddr;
    /* get the IP address and port of the remote host */
    err = netconn_peer(newconn, &naddr, &port);
 800b9b2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b9b4:	f107 0226 	add.w	r2, r7, #38	; 0x26
 800b9b8:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800b9bc:	2300      	movs	r3, #0
 800b9be:	f7fd fe35 	bl	800962c <netconn_getaddr>
 800b9c2:	4603      	mov	r3, r0
 800b9c4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    if (err != ERR_OK) {
 800b9c8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d016      	beq.n	800b9fe <lwip_accept+0x1aa>
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_accept(%d): netconn_peer failed, err=%d\n", s, err));
      netconn_delete(newconn);
 800b9d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9d2:	4618      	mov	r0, r3
 800b9d4:	f7fd fe0e 	bl	80095f4 <netconn_delete>
      free_socket(nsock, 1);
 800b9d8:	2101      	movs	r1, #1
 800b9da:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800b9dc:	f7ff ff18 	bl	800b810 <free_socket>
      sock_set_errno(sock, err_to_errno(err));
 800b9e0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800b9e4:	4618      	mov	r0, r3
 800b9e6:	f7ff fdd5 	bl	800b594 <err_to_errno>
 800b9ea:	6478      	str	r0, [r7, #68]	; 0x44
 800b9ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d002      	beq.n	800b9f8 <lwip_accept+0x1a4>
 800b9f2:	4a20      	ldr	r2, [pc, #128]	; (800ba74 <lwip_accept+0x220>)
 800b9f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b9f6:	6013      	str	r3, [r2, #0]
      done_socket(sock);
      return -1;
 800b9f8:	f04f 33ff 	mov.w	r3, #4294967295
 800b9fc:	e035      	b.n	800ba6a <lwip_accept+0x216>
    }

    IPADDR_PORT_TO_SOCKADDR(&tempaddr, &naddr, port);
 800b9fe:	f107 0314 	add.w	r3, r7, #20
 800ba02:	2210      	movs	r2, #16
 800ba04:	701a      	strb	r2, [r3, #0]
 800ba06:	f107 0314 	add.w	r3, r7, #20
 800ba0a:	2202      	movs	r2, #2
 800ba0c:	705a      	strb	r2, [r3, #1]
 800ba0e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ba10:	f107 0414 	add.w	r4, r7, #20
 800ba14:	4618      	mov	r0, r3
 800ba16:	f001 f875 	bl	800cb04 <lwip_htons>
 800ba1a:	4603      	mov	r3, r0
 800ba1c:	8063      	strh	r3, [r4, #2]
 800ba1e:	f107 0314 	add.w	r3, r7, #20
 800ba22:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ba24:	605a      	str	r2, [r3, #4]
 800ba26:	f107 0314 	add.w	r3, r7, #20
 800ba2a:	3308      	adds	r3, #8
 800ba2c:	2208      	movs	r2, #8
 800ba2e:	2100      	movs	r1, #0
 800ba30:	4618      	mov	r0, r3
 800ba32:	f00b fdb9 	bl	80175a8 <memset>
    if (*addrlen > tempaddr.sa.sa_len) {
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	7d3a      	ldrb	r2, [r7, #20]
 800ba3c:	4293      	cmp	r3, r2
 800ba3e:	d903      	bls.n	800ba48 <lwip_accept+0x1f4>
      *addrlen = tempaddr.sa.sa_len;
 800ba40:	7d3b      	ldrb	r3, [r7, #20]
 800ba42:	461a      	mov	r2, r3
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	601a      	str	r2, [r3, #0]
    }
    MEMCPY(addr, &tempaddr, *addrlen);
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	681a      	ldr	r2, [r3, #0]
 800ba4c:	f107 0314 	add.w	r3, r7, #20
 800ba50:	4619      	mov	r1, r3
 800ba52:	68b8      	ldr	r0, [r7, #8]
 800ba54:	f00b fd9d 	bl	8017592 <memcpy>
    LWIP_DEBUGF(SOCKETS_DEBUG, (" port=%"U16_F"\n", port));
  } else {
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_accept(%d) returning new sock=%d", s, newsock));
  }

  sock_set_errno(sock, 0);
 800ba58:	2300      	movs	r3, #0
 800ba5a:	643b      	str	r3, [r7, #64]	; 0x40
 800ba5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d002      	beq.n	800ba68 <lwip_accept+0x214>
 800ba62:	4a04      	ldr	r2, [pc, #16]	; (800ba74 <lwip_accept+0x220>)
 800ba64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ba66:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  done_socket(nsock);
  return newsock;
 800ba68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
}
 800ba6a:	4618      	mov	r0, r3
 800ba6c:	3764      	adds	r7, #100	; 0x64
 800ba6e:	46bd      	mov	sp, r7
 800ba70:	bd90      	pop	{r4, r7, pc}
 800ba72:	bf00      	nop
 800ba74:	2000d2a0 	.word	0x2000d2a0
 800ba78:	08018e0c 	.word	0x08018e0c
 800ba7c:	08018e88 	.word	0x08018e88
 800ba80:	08018e60 	.word	0x08018e60
 800ba84:	08018e98 	.word	0x08018e98
 800ba88:	200045b4 	.word	0x200045b4
 800ba8c:	20007a34 	.word	0x20007a34

0800ba90 <lwip_bind>:

int
lwip_bind(int s, const struct sockaddr *name, socklen_t namelen)
{
 800ba90:	b580      	push	{r7, lr}
 800ba92:	b08a      	sub	sp, #40	; 0x28
 800ba94:	af00      	add	r7, sp, #0
 800ba96:	60f8      	str	r0, [r7, #12]
 800ba98:	60b9      	str	r1, [r7, #8]
 800ba9a:	607a      	str	r2, [r7, #4]
  struct lwip_sock *sock;
  ip_addr_t local_addr;
  u16_t local_port;
  err_t err;

  sock = get_socket(s);
 800ba9c:	68f8      	ldr	r0, [r7, #12]
 800ba9e:	f7ff fdf5 	bl	800b68c <get_socket>
 800baa2:	6278      	str	r0, [r7, #36]	; 0x24
  if (!sock) {
 800baa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d102      	bne.n	800bab0 <lwip_bind+0x20>
    return -1;
 800baaa:	f04f 33ff 	mov.w	r3, #4294967295
 800baae:	e051      	b.n	800bb54 <lwip_bind+0xc4>
    done_socket(sock);
    return -1;
  }

  /* check size, family and alignment of 'name' */
  LWIP_ERROR("lwip_bind: invalid address", (IS_SOCK_ADDR_LEN_VALID(namelen) &&
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	2b10      	cmp	r3, #16
 800bab4:	d108      	bne.n	800bac8 <lwip_bind+0x38>
 800bab6:	68bb      	ldr	r3, [r7, #8]
 800bab8:	785b      	ldrb	r3, [r3, #1]
 800baba:	2b02      	cmp	r3, #2
 800babc:	d104      	bne.n	800bac8 <lwip_bind+0x38>
 800babe:	68bb      	ldr	r3, [r7, #8]
 800bac0:	f003 0303 	and.w	r3, r3, #3
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d014      	beq.n	800baf2 <lwip_bind+0x62>
 800bac8:	4b24      	ldr	r3, [pc, #144]	; (800bb5c <lwip_bind+0xcc>)
 800baca:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800bace:	4924      	ldr	r1, [pc, #144]	; (800bb60 <lwip_bind+0xd0>)
 800bad0:	4824      	ldr	r0, [pc, #144]	; (800bb64 <lwip_bind+0xd4>)
 800bad2:	f00b fd71 	bl	80175b8 <iprintf>
 800bad6:	f06f 000f 	mvn.w	r0, #15
 800bada:	f7ff fd5b 	bl	800b594 <err_to_errno>
 800bade:	6178      	str	r0, [r7, #20]
 800bae0:	697b      	ldr	r3, [r7, #20]
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d002      	beq.n	800baec <lwip_bind+0x5c>
 800bae6:	4a20      	ldr	r2, [pc, #128]	; (800bb68 <lwip_bind+0xd8>)
 800bae8:	697b      	ldr	r3, [r7, #20]
 800baea:	6013      	str	r3, [r2, #0]
 800baec:	f04f 33ff 	mov.w	r3, #4294967295
 800baf0:	e030      	b.n	800bb54 <lwip_bind+0xc4>
             IS_SOCK_ADDR_TYPE_VALID(name) && IS_SOCK_ADDR_ALIGNED(name)),
             sock_set_errno(sock, err_to_errno(ERR_ARG)); done_socket(sock); return -1;);
  LWIP_UNUSED_ARG(namelen);

  SOCKADDR_TO_IPADDR_PORT(name, &local_addr, local_port);
 800baf2:	68bb      	ldr	r3, [r7, #8]
 800baf4:	685b      	ldr	r3, [r3, #4]
 800baf6:	613b      	str	r3, [r7, #16]
 800baf8:	68bb      	ldr	r3, [r7, #8]
 800bafa:	885b      	ldrh	r3, [r3, #2]
 800bafc:	4618      	mov	r0, r3
 800bafe:	f001 f801 	bl	800cb04 <lwip_htons>
 800bb02:	4603      	mov	r3, r0
 800bb04:	847b      	strh	r3, [r7, #34]	; 0x22
    unmap_ipv4_mapped_ipv6(ip_2_ip4(&local_addr), ip_2_ip6(&local_addr));
    IP_SET_TYPE_VAL(local_addr, IPADDR_TYPE_V4);
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  err = netconn_bind(sock->conn, &local_addr, local_port);
 800bb06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800bb0c:	f107 0110 	add.w	r1, r7, #16
 800bb10:	4618      	mov	r0, r3
 800bb12:	f7fd fddd 	bl	80096d0 <netconn_bind>
 800bb16:	4603      	mov	r3, r0
 800bb18:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

  if (err != ERR_OK) {
 800bb1c:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	d00e      	beq.n	800bb42 <lwip_bind+0xb2>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_bind(%d) failed, err=%d\n", s, err));
    sock_set_errno(sock, err_to_errno(err));
 800bb24:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 800bb28:	4618      	mov	r0, r3
 800bb2a:	f7ff fd33 	bl	800b594 <err_to_errno>
 800bb2e:	61b8      	str	r0, [r7, #24]
 800bb30:	69bb      	ldr	r3, [r7, #24]
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d002      	beq.n	800bb3c <lwip_bind+0xac>
 800bb36:	4a0c      	ldr	r2, [pc, #48]	; (800bb68 <lwip_bind+0xd8>)
 800bb38:	69bb      	ldr	r3, [r7, #24]
 800bb3a:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 800bb3c:	f04f 33ff 	mov.w	r3, #4294967295
 800bb40:	e008      	b.n	800bb54 <lwip_bind+0xc4>
  }

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_bind(%d) succeeded\n", s));
  sock_set_errno(sock, 0);
 800bb42:	2300      	movs	r3, #0
 800bb44:	61fb      	str	r3, [r7, #28]
 800bb46:	69fb      	ldr	r3, [r7, #28]
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d002      	beq.n	800bb52 <lwip_bind+0xc2>
 800bb4c:	4a06      	ldr	r2, [pc, #24]	; (800bb68 <lwip_bind+0xd8>)
 800bb4e:	69fb      	ldr	r3, [r7, #28]
 800bb50:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return 0;
 800bb52:	2300      	movs	r3, #0
}
 800bb54:	4618      	mov	r0, r3
 800bb56:	3728      	adds	r7, #40	; 0x28
 800bb58:	46bd      	mov	sp, r7
 800bb5a:	bd80      	pop	{r7, pc}
 800bb5c:	08018e0c 	.word	0x08018e0c
 800bb60:	08018eb0 	.word	0x08018eb0
 800bb64:	08018e60 	.word	0x08018e60
 800bb68:	2000d2a0 	.word	0x2000d2a0

0800bb6c <lwip_close>:

int
lwip_close(int s)
{
 800bb6c:	b580      	push	{r7, lr}
 800bb6e:	b086      	sub	sp, #24
 800bb70:	af00      	add	r7, sp, #0
 800bb72:	6078      	str	r0, [r7, #4]
  struct lwip_sock *sock;
  int is_tcp = 0;
 800bb74:	2300      	movs	r3, #0
 800bb76:	617b      	str	r3, [r7, #20]
  err_t err;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_close(%d)\n", s));

  sock = get_socket(s);
 800bb78:	6878      	ldr	r0, [r7, #4]
 800bb7a:	f7ff fd87 	bl	800b68c <get_socket>
 800bb7e:	6138      	str	r0, [r7, #16]
  if (!sock) {
 800bb80:	693b      	ldr	r3, [r7, #16]
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d102      	bne.n	800bb8c <lwip_close+0x20>
    return -1;
 800bb86:	f04f 33ff 	mov.w	r3, #4294967295
 800bb8a:	e039      	b.n	800bc00 <lwip_close+0x94>
  }

  if (sock->conn != NULL) {
 800bb8c:	693b      	ldr	r3, [r7, #16]
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d00b      	beq.n	800bbac <lwip_close+0x40>
    is_tcp = NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP;
 800bb94:	693b      	ldr	r3, [r7, #16]
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	781b      	ldrb	r3, [r3, #0]
 800bb9a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bb9e:	2b10      	cmp	r3, #16
 800bba0:	bf0c      	ite	eq
 800bba2:	2301      	moveq	r3, #1
 800bba4:	2300      	movne	r3, #0
 800bba6:	b2db      	uxtb	r3, r3
 800bba8:	617b      	str	r3, [r7, #20]
 800bbaa:	e00a      	b.n	800bbc2 <lwip_close+0x56>
  } else {
    LWIP_ASSERT("sock->lastdata == NULL", sock->lastdata.pbuf == NULL);
 800bbac:	693b      	ldr	r3, [r7, #16]
 800bbae:	685b      	ldr	r3, [r3, #4]
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	d006      	beq.n	800bbc2 <lwip_close+0x56>
 800bbb4:	4b14      	ldr	r3, [pc, #80]	; (800bc08 <lwip_close+0x9c>)
 800bbb6:	f44f 7245 	mov.w	r2, #788	; 0x314
 800bbba:	4914      	ldr	r1, [pc, #80]	; (800bc0c <lwip_close+0xa0>)
 800bbbc:	4814      	ldr	r0, [pc, #80]	; (800bc10 <lwip_close+0xa4>)
 800bbbe:	f00b fcfb 	bl	80175b8 <iprintf>
#if LWIP_IPV6_MLD
  /* drop all possibly joined MLD6 memberships */
  lwip_socket_drop_registered_mld6_memberships(s);
#endif /* LWIP_IPV6_MLD */

  err = netconn_prepare_delete(sock->conn);
 800bbc2:	693b      	ldr	r3, [r7, #16]
 800bbc4:	681b      	ldr	r3, [r3, #0]
 800bbc6:	4618      	mov	r0, r3
 800bbc8:	f7fd fcf0 	bl	80095ac <netconn_prepare_delete>
 800bbcc:	4603      	mov	r3, r0
 800bbce:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800bbd0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	d00e      	beq.n	800bbf6 <lwip_close+0x8a>
    sock_set_errno(sock, err_to_errno(err));
 800bbd8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bbdc:	4618      	mov	r0, r3
 800bbde:	f7ff fcd9 	bl	800b594 <err_to_errno>
 800bbe2:	60b8      	str	r0, [r7, #8]
 800bbe4:	68bb      	ldr	r3, [r7, #8]
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	d002      	beq.n	800bbf0 <lwip_close+0x84>
 800bbea:	4a0a      	ldr	r2, [pc, #40]	; (800bc14 <lwip_close+0xa8>)
 800bbec:	68bb      	ldr	r3, [r7, #8]
 800bbee:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 800bbf0:	f04f 33ff 	mov.w	r3, #4294967295
 800bbf4:	e004      	b.n	800bc00 <lwip_close+0x94>
  }

  free_socket(sock, is_tcp);
 800bbf6:	6979      	ldr	r1, [r7, #20]
 800bbf8:	6938      	ldr	r0, [r7, #16]
 800bbfa:	f7ff fe09 	bl	800b810 <free_socket>
  set_errno(0);
  return 0;
 800bbfe:	2300      	movs	r3, #0
}
 800bc00:	4618      	mov	r0, r3
 800bc02:	3718      	adds	r7, #24
 800bc04:	46bd      	mov	sp, r7
 800bc06:	bd80      	pop	{r7, pc}
 800bc08:	08018e0c 	.word	0x08018e0c
 800bc0c:	08018ecc 	.word	0x08018ecc
 800bc10:	08018e60 	.word	0x08018e60
 800bc14:	2000d2a0 	.word	0x2000d2a0

0800bc18 <lwip_listen>:
 * @param backlog (ATTENTION: needs TCP_LISTEN_BACKLOG=1)
 * @return 0 on success, non-zero on failure
 */
int
lwip_listen(int s, int backlog)
{
 800bc18:	b580      	push	{r7, lr}
 800bc1a:	b088      	sub	sp, #32
 800bc1c:	af00      	add	r7, sp, #0
 800bc1e:	6078      	str	r0, [r7, #4]
 800bc20:	6039      	str	r1, [r7, #0]
  struct lwip_sock *sock;
  err_t err;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_listen(%d, backlog=%d)\n", s, backlog));

  sock = get_socket(s);
 800bc22:	6878      	ldr	r0, [r7, #4]
 800bc24:	f7ff fd32 	bl	800b68c <get_socket>
 800bc28:	61f8      	str	r0, [r7, #28]
  if (!sock) {
 800bc2a:	69fb      	ldr	r3, [r7, #28]
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d102      	bne.n	800bc36 <lwip_listen+0x1e>
    return -1;
 800bc30:	f04f 33ff 	mov.w	r3, #4294967295
 800bc34:	e03e      	b.n	800bcb4 <lwip_listen+0x9c>
  }

  /* limit the "backlog" parameter to fit in an u8_t */
  backlog = LWIP_MIN(LWIP_MAX(backlog, 0), 0xff);
 800bc36:	683b      	ldr	r3, [r7, #0]
 800bc38:	2bfe      	cmp	r3, #254	; 0xfe
 800bc3a:	dc03      	bgt.n	800bc44 <lwip_listen+0x2c>
 800bc3c:	683b      	ldr	r3, [r7, #0]
 800bc3e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800bc42:	e000      	b.n	800bc46 <lwip_listen+0x2e>
 800bc44:	23ff      	movs	r3, #255	; 0xff
 800bc46:	603b      	str	r3, [r7, #0]

  err = netconn_listen_with_backlog(sock->conn, (u8_t)backlog);
 800bc48:	69fb      	ldr	r3, [r7, #28]
 800bc4a:	681b      	ldr	r3, [r3, #0]
 800bc4c:	683a      	ldr	r2, [r7, #0]
 800bc4e:	b2d2      	uxtb	r2, r2
 800bc50:	4611      	mov	r1, r2
 800bc52:	4618      	mov	r0, r3
 800bc54:	f7fd fd74 	bl	8009740 <netconn_listen_with_backlog>
 800bc58:	4603      	mov	r3, r0
 800bc5a:	76fb      	strb	r3, [r7, #27]

  if (err != ERR_OK) {
 800bc5c:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	d01e      	beq.n	800bca2 <lwip_listen+0x8a>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_listen(%d) failed, err=%d\n", s, err));
    if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_TCP) {
 800bc64:	69fb      	ldr	r3, [r7, #28]
 800bc66:	681b      	ldr	r3, [r3, #0]
 800bc68:	781b      	ldrb	r3, [r3, #0]
 800bc6a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bc6e:	2b10      	cmp	r3, #16
 800bc70:	d008      	beq.n	800bc84 <lwip_listen+0x6c>
      sock_set_errno(sock, EOPNOTSUPP);
 800bc72:	235f      	movs	r3, #95	; 0x5f
 800bc74:	60fb      	str	r3, [r7, #12]
 800bc76:	68fb      	ldr	r3, [r7, #12]
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d00f      	beq.n	800bc9c <lwip_listen+0x84>
 800bc7c:	4a0f      	ldr	r2, [pc, #60]	; (800bcbc <lwip_listen+0xa4>)
 800bc7e:	68fb      	ldr	r3, [r7, #12]
 800bc80:	6013      	str	r3, [r2, #0]
 800bc82:	e00b      	b.n	800bc9c <lwip_listen+0x84>
    } else {
      sock_set_errno(sock, err_to_errno(err));
 800bc84:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800bc88:	4618      	mov	r0, r3
 800bc8a:	f7ff fc83 	bl	800b594 <err_to_errno>
 800bc8e:	6138      	str	r0, [r7, #16]
 800bc90:	693b      	ldr	r3, [r7, #16]
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	d002      	beq.n	800bc9c <lwip_listen+0x84>
 800bc96:	4a09      	ldr	r2, [pc, #36]	; (800bcbc <lwip_listen+0xa4>)
 800bc98:	693b      	ldr	r3, [r7, #16]
 800bc9a:	6013      	str	r3, [r2, #0]
    }
    done_socket(sock);
    return -1;
 800bc9c:	f04f 33ff 	mov.w	r3, #4294967295
 800bca0:	e008      	b.n	800bcb4 <lwip_listen+0x9c>
  }

  sock_set_errno(sock, 0);
 800bca2:	2300      	movs	r3, #0
 800bca4:	617b      	str	r3, [r7, #20]
 800bca6:	697b      	ldr	r3, [r7, #20]
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	d002      	beq.n	800bcb2 <lwip_listen+0x9a>
 800bcac:	4a03      	ldr	r2, [pc, #12]	; (800bcbc <lwip_listen+0xa4>)
 800bcae:	697b      	ldr	r3, [r7, #20]
 800bcb0:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return 0;
 800bcb2:	2300      	movs	r3, #0
}
 800bcb4:	4618      	mov	r0, r3
 800bcb6:	3720      	adds	r7, #32
 800bcb8:	46bd      	mov	sp, r7
 800bcba:	bd80      	pop	{r7, pc}
 800bcbc:	2000d2a0 	.word	0x2000d2a0

0800bcc0 <lwip_recv_tcp>:
 * until "len" bytes are received or we're otherwise done.
 * Keeps sock->lastdata for peeking or partly copying.
 */
static ssize_t
lwip_recv_tcp(struct lwip_sock *sock, void *mem, size_t len, int flags)
{
 800bcc0:	b580      	push	{r7, lr}
 800bcc2:	b08c      	sub	sp, #48	; 0x30
 800bcc4:	af00      	add	r7, sp, #0
 800bcc6:	60f8      	str	r0, [r7, #12]
 800bcc8:	60b9      	str	r1, [r7, #8]
 800bcca:	607a      	str	r2, [r7, #4]
 800bccc:	603b      	str	r3, [r7, #0]
  u8_t apiflags = NETCONN_NOAUTORCVD;
 800bcce:	2308      	movs	r3, #8
 800bcd0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  ssize_t recvd = 0;
 800bcd4:	2300      	movs	r3, #0
 800bcd6:	62bb      	str	r3, [r7, #40]	; 0x28
  ssize_t recv_left = (len <= SSIZE_MAX) ? (ssize_t)len : SSIZE_MAX;
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	db01      	blt.n	800bce2 <lwip_recv_tcp+0x22>
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	e001      	b.n	800bce6 <lwip_recv_tcp+0x26>
 800bce2:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800bce6:	627b      	str	r3, [r7, #36]	; 0x24

  LWIP_ASSERT("no socket given", sock != NULL);
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	d106      	bne.n	800bcfc <lwip_recv_tcp+0x3c>
 800bcee:	4b74      	ldr	r3, [pc, #464]	; (800bec0 <lwip_recv_tcp+0x200>)
 800bcf0:	f240 329e 	movw	r2, #926	; 0x39e
 800bcf4:	4973      	ldr	r1, [pc, #460]	; (800bec4 <lwip_recv_tcp+0x204>)
 800bcf6:	4874      	ldr	r0, [pc, #464]	; (800bec8 <lwip_recv_tcp+0x208>)
 800bcf8:	f00b fc5e 	bl	80175b8 <iprintf>
  LWIP_ASSERT("this should be checked internally", NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP);
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	781b      	ldrb	r3, [r3, #0]
 800bd02:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bd06:	2b10      	cmp	r3, #16
 800bd08:	d006      	beq.n	800bd18 <lwip_recv_tcp+0x58>
 800bd0a:	4b6d      	ldr	r3, [pc, #436]	; (800bec0 <lwip_recv_tcp+0x200>)
 800bd0c:	f240 329f 	movw	r2, #927	; 0x39f
 800bd10:	496e      	ldr	r1, [pc, #440]	; (800becc <lwip_recv_tcp+0x20c>)
 800bd12:	486d      	ldr	r0, [pc, #436]	; (800bec8 <lwip_recv_tcp+0x208>)
 800bd14:	f00b fc50 	bl	80175b8 <iprintf>

  if (flags & MSG_DONTWAIT) {
 800bd18:	683b      	ldr	r3, [r7, #0]
 800bd1a:	f003 0308 	and.w	r3, r3, #8
 800bd1e:	2b00      	cmp	r3, #0
 800bd20:	d005      	beq.n	800bd2e <lwip_recv_tcp+0x6e>
    apiflags |= NETCONN_DONTBLOCK;
 800bd22:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bd26:	f043 0304 	orr.w	r3, r3, #4
 800bd2a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    err_t err;
    u16_t copylen;

    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: top while sock->lastdata=%p\n", (void *)sock->lastdata.pbuf));
    /* Check if there is data left from the last recv operation. */
    if (sock->lastdata.pbuf) {
 800bd2e:	68fb      	ldr	r3, [r7, #12]
 800bd30:	685b      	ldr	r3, [r3, #4]
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d003      	beq.n	800bd3e <lwip_recv_tcp+0x7e>
      p = sock->lastdata.pbuf;
 800bd36:	68fb      	ldr	r3, [r7, #12]
 800bd38:	685b      	ldr	r3, [r3, #4]
 800bd3a:	617b      	str	r3, [r7, #20]
 800bd3c:	e036      	b.n	800bdac <lwip_recv_tcp+0xec>
    } else {
      /* No data was left from the previous operation, so we try to get
         some from the network. */
      err = netconn_recv_tcp_pbuf_flags(sock->conn, &p, apiflags);
 800bd3e:	68fb      	ldr	r3, [r7, #12]
 800bd40:	681b      	ldr	r3, [r3, #0]
 800bd42:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800bd46:	f107 0114 	add.w	r1, r7, #20
 800bd4a:	4618      	mov	r0, r3
 800bd4c:	f7fd ff42 	bl	8009bd4 <netconn_recv_tcp_pbuf_flags>
 800bd50:	4603      	mov	r3, r0
 800bd52:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: netconn_recv err=%d, pbuf=%p\n",
                                  err, (void *)p));

      if (err != ERR_OK) {
 800bd56:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d019      	beq.n	800bd92 <lwip_recv_tcp+0xd2>
        if (recvd > 0) {
 800bd5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	f300 808d 	bgt.w	800be80 <lwip_recv_tcp+0x1c0>
          goto lwip_recv_tcp_done;
        }
        /* We should really do some error checking here. */
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: p == NULL, error is \"%s\"!\n",
                                    lwip_strerr(err)));
        sock_set_errno(sock, err_to_errno(err));
 800bd66:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 800bd6a:	4618      	mov	r0, r3
 800bd6c:	f7ff fc12 	bl	800b594 <err_to_errno>
 800bd70:	61f8      	str	r0, [r7, #28]
 800bd72:	69fb      	ldr	r3, [r7, #28]
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	d002      	beq.n	800bd7e <lwip_recv_tcp+0xbe>
 800bd78:	4a55      	ldr	r2, [pc, #340]	; (800bed0 <lwip_recv_tcp+0x210>)
 800bd7a:	69fb      	ldr	r3, [r7, #28]
 800bd7c:	6013      	str	r3, [r2, #0]
        if (err == ERR_CLSD) {
 800bd7e:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 800bd82:	f113 0f0f 	cmn.w	r3, #15
 800bd86:	d101      	bne.n	800bd8c <lwip_recv_tcp+0xcc>
          return 0;
 800bd88:	2300      	movs	r3, #0
 800bd8a:	e094      	b.n	800beb6 <lwip_recv_tcp+0x1f6>
        } else {
          return -1;
 800bd8c:	f04f 33ff 	mov.w	r3, #4294967295
 800bd90:	e091      	b.n	800beb6 <lwip_recv_tcp+0x1f6>
        }
      }
      LWIP_ASSERT("p != NULL", p != NULL);
 800bd92:	697b      	ldr	r3, [r7, #20]
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d106      	bne.n	800bda6 <lwip_recv_tcp+0xe6>
 800bd98:	4b49      	ldr	r3, [pc, #292]	; (800bec0 <lwip_recv_tcp+0x200>)
 800bd9a:	f240 32c5 	movw	r2, #965	; 0x3c5
 800bd9e:	494d      	ldr	r1, [pc, #308]	; (800bed4 <lwip_recv_tcp+0x214>)
 800bda0:	4849      	ldr	r0, [pc, #292]	; (800bec8 <lwip_recv_tcp+0x208>)
 800bda2:	f00b fc09 	bl	80175b8 <iprintf>
      sock->lastdata.pbuf = p;
 800bda6:	697a      	ldr	r2, [r7, #20]
 800bda8:	68fb      	ldr	r3, [r7, #12]
 800bdaa:	605a      	str	r2, [r3, #4]
    }

    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: buflen=%"U16_F" recv_left=%d off=%d\n",
                                p->tot_len, (int)recv_left, (int)recvd));

    if (recv_left > p->tot_len) {
 800bdac:	697b      	ldr	r3, [r7, #20]
 800bdae:	891b      	ldrh	r3, [r3, #8]
 800bdb0:	461a      	mov	r2, r3
 800bdb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdb4:	4293      	cmp	r3, r2
 800bdb6:	dd03      	ble.n	800bdc0 <lwip_recv_tcp+0x100>
      copylen = p->tot_len;
 800bdb8:	697b      	ldr	r3, [r7, #20]
 800bdba:	891b      	ldrh	r3, [r3, #8]
 800bdbc:	847b      	strh	r3, [r7, #34]	; 0x22
 800bdbe:	e001      	b.n	800bdc4 <lwip_recv_tcp+0x104>
    } else {
      copylen = (u16_t)recv_left;
 800bdc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdc2:	847b      	strh	r3, [r7, #34]	; 0x22
    }
    if (recvd + copylen < recvd) {
 800bdc4:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800bdc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdc8:	4413      	add	r3, r2
 800bdca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bdcc:	429a      	cmp	r2, r3
 800bdce:	dd03      	ble.n	800bdd8 <lwip_recv_tcp+0x118>
      /* overflow */
      copylen = (u16_t)(SSIZE_MAX - recvd);
 800bdd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdd2:	b29b      	uxth	r3, r3
 800bdd4:	43db      	mvns	r3, r3
 800bdd6:	847b      	strh	r3, [r7, #34]	; 0x22
    }

    /* copy the contents of the received buffer into
    the supplied memory pointer mem */
    pbuf_copy_partial(p, (u8_t *)mem + recvd, copylen, 0);
 800bdd8:	6978      	ldr	r0, [r7, #20]
 800bdda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bddc:	68ba      	ldr	r2, [r7, #8]
 800bdde:	18d1      	adds	r1, r2, r3
 800bde0:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800bde2:	2300      	movs	r3, #0
 800bde4:	f002 fc58 	bl	800e698 <pbuf_copy_partial>

    recvd += copylen;
 800bde8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bdea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bdec:	4413      	add	r3, r2
 800bdee:	62bb      	str	r3, [r7, #40]	; 0x28

    /* TCP combines multiple pbufs for one recv */
    LWIP_ASSERT("invalid copylen, len would underflow", recv_left >= copylen);
 800bdf0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bdf2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bdf4:	429a      	cmp	r2, r3
 800bdf6:	da06      	bge.n	800be06 <lwip_recv_tcp+0x146>
 800bdf8:	4b31      	ldr	r3, [pc, #196]	; (800bec0 <lwip_recv_tcp+0x200>)
 800bdfa:	f240 32dd 	movw	r2, #989	; 0x3dd
 800bdfe:	4936      	ldr	r1, [pc, #216]	; (800bed8 <lwip_recv_tcp+0x218>)
 800be00:	4831      	ldr	r0, [pc, #196]	; (800bec8 <lwip_recv_tcp+0x208>)
 800be02:	f00b fbd9 	bl	80175b8 <iprintf>
    recv_left -= copylen;
 800be06:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800be08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800be0a:	1ad3      	subs	r3, r2, r3
 800be0c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Unless we peek the incoming message... */
    if ((flags & MSG_PEEK) == 0) {
 800be0e:	683b      	ldr	r3, [r7, #0]
 800be10:	f003 0301 	and.w	r3, r3, #1
 800be14:	2b00      	cmp	r3, #0
 800be16:	d123      	bne.n	800be60 <lwip_recv_tcp+0x1a0>
      /* ... check if there is data left in the pbuf */
      LWIP_ASSERT("invalid copylen", p->tot_len >= copylen);
 800be18:	697b      	ldr	r3, [r7, #20]
 800be1a:	891b      	ldrh	r3, [r3, #8]
 800be1c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800be1e:	429a      	cmp	r2, r3
 800be20:	d906      	bls.n	800be30 <lwip_recv_tcp+0x170>
 800be22:	4b27      	ldr	r3, [pc, #156]	; (800bec0 <lwip_recv_tcp+0x200>)
 800be24:	f240 32e3 	movw	r2, #995	; 0x3e3
 800be28:	492c      	ldr	r1, [pc, #176]	; (800bedc <lwip_recv_tcp+0x21c>)
 800be2a:	4827      	ldr	r0, [pc, #156]	; (800bec8 <lwip_recv_tcp+0x208>)
 800be2c:	f00b fbc4 	bl	80175b8 <iprintf>
      if (p->tot_len - copylen > 0) {
 800be30:	697b      	ldr	r3, [r7, #20]
 800be32:	891b      	ldrh	r3, [r3, #8]
 800be34:	461a      	mov	r2, r3
 800be36:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800be38:	1ad3      	subs	r3, r2, r3
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	dd09      	ble.n	800be52 <lwip_recv_tcp+0x192>
        /* If so, it should be saved in the sock structure for the next recv call.
           We store the pbuf but hide/free the consumed data: */
        sock->lastdata.pbuf = pbuf_free_header(p, copylen);
 800be3e:	697b      	ldr	r3, [r7, #20]
 800be40:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800be42:	4611      	mov	r1, r2
 800be44:	4618      	mov	r0, r3
 800be46:	f002 f9fe 	bl	800e246 <pbuf_free_header>
 800be4a:	4602      	mov	r2, r0
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	605a      	str	r2, [r3, #4]
 800be50:	e006      	b.n	800be60 <lwip_recv_tcp+0x1a0>
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: lastdata now pbuf=%p\n", (void *)sock->lastdata.pbuf));
      } else {
        sock->lastdata.pbuf = NULL;
 800be52:	68fb      	ldr	r3, [r7, #12]
 800be54:	2200      	movs	r2, #0
 800be56:	605a      	str	r2, [r3, #4]
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: deleting pbuf=%p\n", (void *)p));
        pbuf_free(p);
 800be58:	697b      	ldr	r3, [r7, #20]
 800be5a:	4618      	mov	r0, r3
 800be5c:	f002 fa26 	bl	800e2ac <pbuf_free>
      }
    }
    /* once we have some data to return, only add more if we don't need to wait */
    apiflags |= NETCONN_DONTBLOCK | NETCONN_NOFIN;
 800be60:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800be64:	f043 0314 	orr.w	r3, r3, #20
 800be68:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    /* @todo: do we need to support peeking more than one pbuf? */
  } while ((recv_left > 0) && !(flags & MSG_PEEK));
 800be6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be6e:	2b00      	cmp	r3, #0
 800be70:	dd08      	ble.n	800be84 <lwip_recv_tcp+0x1c4>
 800be72:	683b      	ldr	r3, [r7, #0]
 800be74:	f003 0301 	and.w	r3, r3, #1
 800be78:	2b00      	cmp	r3, #0
 800be7a:	f43f af58 	beq.w	800bd2e <lwip_recv_tcp+0x6e>
lwip_recv_tcp_done:
 800be7e:	e001      	b.n	800be84 <lwip_recv_tcp+0x1c4>
          goto lwip_recv_tcp_done;
 800be80:	bf00      	nop
 800be82:	e000      	b.n	800be86 <lwip_recv_tcp+0x1c6>
lwip_recv_tcp_done:
 800be84:	bf00      	nop
  if ((recvd > 0) && !(flags & MSG_PEEK)) {
 800be86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be88:	2b00      	cmp	r3, #0
 800be8a:	dd0b      	ble.n	800bea4 <lwip_recv_tcp+0x1e4>
 800be8c:	683b      	ldr	r3, [r7, #0]
 800be8e:	f003 0301 	and.w	r3, r3, #1
 800be92:	2b00      	cmp	r3, #0
 800be94:	d106      	bne.n	800bea4 <lwip_recv_tcp+0x1e4>
    /* ensure window update after copying all data */
    netconn_tcp_recvd(sock->conn, (size_t)recvd);
 800be96:	68fb      	ldr	r3, [r7, #12]
 800be98:	681b      	ldr	r3, [r3, #0]
 800be9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800be9c:	4611      	mov	r1, r2
 800be9e:	4618      	mov	r0, r3
 800bea0:	f7fd fde6 	bl	8009a70 <netconn_tcp_recvd>
  }
  sock_set_errno(sock, 0);
 800bea4:	2300      	movs	r3, #0
 800bea6:	61bb      	str	r3, [r7, #24]
 800bea8:	69bb      	ldr	r3, [r7, #24]
 800beaa:	2b00      	cmp	r3, #0
 800beac:	d002      	beq.n	800beb4 <lwip_recv_tcp+0x1f4>
 800beae:	4a08      	ldr	r2, [pc, #32]	; (800bed0 <lwip_recv_tcp+0x210>)
 800beb0:	69bb      	ldr	r3, [r7, #24]
 800beb2:	6013      	str	r3, [r2, #0]
  return recvd;
 800beb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800beb6:	4618      	mov	r0, r3
 800beb8:	3730      	adds	r7, #48	; 0x30
 800beba:	46bd      	mov	sp, r7
 800bebc:	bd80      	pop	{r7, pc}
 800bebe:	bf00      	nop
 800bec0:	08018e0c 	.word	0x08018e0c
 800bec4:	08018f04 	.word	0x08018f04
 800bec8:	08018e60 	.word	0x08018e60
 800becc:	08018f14 	.word	0x08018f14
 800bed0:	2000d2a0 	.word	0x2000d2a0
 800bed4:	08018f38 	.word	0x08018f38
 800bed8:	08018f44 	.word	0x08018f44
 800bedc:	08018f6c 	.word	0x08018f6c

0800bee0 <lwip_sock_make_addr>:

/* Convert a netbuf's address data to struct sockaddr */
static int
lwip_sock_make_addr(struct netconn *conn, ip_addr_t *fromaddr, u16_t port,
                    struct sockaddr *from, socklen_t *fromlen)
{
 800bee0:	b590      	push	{r4, r7, lr}
 800bee2:	b08b      	sub	sp, #44	; 0x2c
 800bee4:	af00      	add	r7, sp, #0
 800bee6:	60f8      	str	r0, [r7, #12]
 800bee8:	60b9      	str	r1, [r7, #8]
 800beea:	603b      	str	r3, [r7, #0]
 800beec:	4613      	mov	r3, r2
 800beee:	80fb      	strh	r3, [r7, #6]
  int truncated = 0;
 800bef0:	2300      	movs	r3, #0
 800bef2:	627b      	str	r3, [r7, #36]	; 0x24
  union sockaddr_aligned saddr;

  LWIP_UNUSED_ARG(conn);

  LWIP_ASSERT("fromaddr != NULL", fromaddr != NULL);
 800bef4:	68bb      	ldr	r3, [r7, #8]
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	d106      	bne.n	800bf08 <lwip_sock_make_addr+0x28>
 800befa:	4b2b      	ldr	r3, [pc, #172]	; (800bfa8 <lwip_sock_make_addr+0xc8>)
 800befc:	f240 4207 	movw	r2, #1031	; 0x407
 800bf00:	492a      	ldr	r1, [pc, #168]	; (800bfac <lwip_sock_make_addr+0xcc>)
 800bf02:	482b      	ldr	r0, [pc, #172]	; (800bfb0 <lwip_sock_make_addr+0xd0>)
 800bf04:	f00b fb58 	bl	80175b8 <iprintf>
  LWIP_ASSERT("from != NULL", from != NULL);
 800bf08:	683b      	ldr	r3, [r7, #0]
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	d106      	bne.n	800bf1c <lwip_sock_make_addr+0x3c>
 800bf0e:	4b26      	ldr	r3, [pc, #152]	; (800bfa8 <lwip_sock_make_addr+0xc8>)
 800bf10:	f44f 6281 	mov.w	r2, #1032	; 0x408
 800bf14:	4927      	ldr	r1, [pc, #156]	; (800bfb4 <lwip_sock_make_addr+0xd4>)
 800bf16:	4826      	ldr	r0, [pc, #152]	; (800bfb0 <lwip_sock_make_addr+0xd0>)
 800bf18:	f00b fb4e 	bl	80175b8 <iprintf>
  LWIP_ASSERT("fromlen != NULL", fromlen != NULL);
 800bf1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	d106      	bne.n	800bf30 <lwip_sock_make_addr+0x50>
 800bf22:	4b21      	ldr	r3, [pc, #132]	; (800bfa8 <lwip_sock_make_addr+0xc8>)
 800bf24:	f240 4209 	movw	r2, #1033	; 0x409
 800bf28:	4923      	ldr	r1, [pc, #140]	; (800bfb8 <lwip_sock_make_addr+0xd8>)
 800bf2a:	4821      	ldr	r0, [pc, #132]	; (800bfb0 <lwip_sock_make_addr+0xd0>)
 800bf2c:	f00b fb44 	bl	80175b8 <iprintf>
    ip4_2_ipv4_mapped_ipv6(ip_2_ip6(fromaddr), ip_2_ip4(fromaddr));
    IP_SET_TYPE(fromaddr, IPADDR_TYPE_V6);
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  IPADDR_PORT_TO_SOCKADDR(&saddr, fromaddr, port);
 800bf30:	f107 0314 	add.w	r3, r7, #20
 800bf34:	2210      	movs	r2, #16
 800bf36:	701a      	strb	r2, [r3, #0]
 800bf38:	f107 0314 	add.w	r3, r7, #20
 800bf3c:	2202      	movs	r2, #2
 800bf3e:	705a      	strb	r2, [r3, #1]
 800bf40:	f107 0414 	add.w	r4, r7, #20
 800bf44:	88fb      	ldrh	r3, [r7, #6]
 800bf46:	4618      	mov	r0, r3
 800bf48:	f000 fddc 	bl	800cb04 <lwip_htons>
 800bf4c:	4603      	mov	r3, r0
 800bf4e:	8063      	strh	r3, [r4, #2]
 800bf50:	f107 0314 	add.w	r3, r7, #20
 800bf54:	68ba      	ldr	r2, [r7, #8]
 800bf56:	6812      	ldr	r2, [r2, #0]
 800bf58:	605a      	str	r2, [r3, #4]
 800bf5a:	f107 0314 	add.w	r3, r7, #20
 800bf5e:	3308      	adds	r3, #8
 800bf60:	2208      	movs	r2, #8
 800bf62:	2100      	movs	r1, #0
 800bf64:	4618      	mov	r0, r3
 800bf66:	f00b fb1f 	bl	80175a8 <memset>
  if (*fromlen < saddr.sa.sa_len) {
 800bf6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf6c:	681b      	ldr	r3, [r3, #0]
 800bf6e:	7d3a      	ldrb	r2, [r7, #20]
 800bf70:	4293      	cmp	r3, r2
 800bf72:	d202      	bcs.n	800bf7a <lwip_sock_make_addr+0x9a>
    truncated = 1;
 800bf74:	2301      	movs	r3, #1
 800bf76:	627b      	str	r3, [r7, #36]	; 0x24
 800bf78:	e008      	b.n	800bf8c <lwip_sock_make_addr+0xac>
  } else if (*fromlen > saddr.sa.sa_len) {
 800bf7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf7c:	681b      	ldr	r3, [r3, #0]
 800bf7e:	7d3a      	ldrb	r2, [r7, #20]
 800bf80:	4293      	cmp	r3, r2
 800bf82:	d903      	bls.n	800bf8c <lwip_sock_make_addr+0xac>
    *fromlen = saddr.sa.sa_len;
 800bf84:	7d3b      	ldrb	r3, [r7, #20]
 800bf86:	461a      	mov	r2, r3
 800bf88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf8a:	601a      	str	r2, [r3, #0]
  }
  MEMCPY(from, &saddr, *fromlen);
 800bf8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf8e:	681a      	ldr	r2, [r3, #0]
 800bf90:	f107 0314 	add.w	r3, r7, #20
 800bf94:	4619      	mov	r1, r3
 800bf96:	6838      	ldr	r0, [r7, #0]
 800bf98:	f00b fafb 	bl	8017592 <memcpy>
  return truncated;
 800bf9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800bf9e:	4618      	mov	r0, r3
 800bfa0:	372c      	adds	r7, #44	; 0x2c
 800bfa2:	46bd      	mov	sp, r7
 800bfa4:	bd90      	pop	{r4, r7, pc}
 800bfa6:	bf00      	nop
 800bfa8:	08018e0c 	.word	0x08018e0c
 800bfac:	08018f7c 	.word	0x08018f7c
 800bfb0:	08018e60 	.word	0x08018e60
 800bfb4:	08018f90 	.word	0x08018f90
 800bfb8:	08018fa0 	.word	0x08018fa0

0800bfbc <lwip_recv_tcp_from>:

#if LWIP_TCP
/* Helper function to get a tcp socket's remote address info */
static int
lwip_recv_tcp_from(struct lwip_sock *sock, struct sockaddr *from, socklen_t *fromlen, const char *dbg_fn, int dbg_s, ssize_t dbg_ret)
{
 800bfbc:	b580      	push	{r7, lr}
 800bfbe:	b088      	sub	sp, #32
 800bfc0:	af02      	add	r7, sp, #8
 800bfc2:	60f8      	str	r0, [r7, #12]
 800bfc4:	60b9      	str	r1, [r7, #8]
 800bfc6:	607a      	str	r2, [r7, #4]
 800bfc8:	603b      	str	r3, [r7, #0]
  if (sock == NULL) {
 800bfca:	68fb      	ldr	r3, [r7, #12]
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	d101      	bne.n	800bfd4 <lwip_recv_tcp_from+0x18>
    return 0;
 800bfd0:	2300      	movs	r3, #0
 800bfd2:	e021      	b.n	800c018 <lwip_recv_tcp_from+0x5c>
  LWIP_UNUSED_ARG(dbg_fn);
  LWIP_UNUSED_ARG(dbg_s);
  LWIP_UNUSED_ARG(dbg_ret);

#if !SOCKETS_DEBUG
  if (from && fromlen)
 800bfd4:	68bb      	ldr	r3, [r7, #8]
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	d01d      	beq.n	800c016 <lwip_recv_tcp_from+0x5a>
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	d01a      	beq.n	800c016 <lwip_recv_tcp_from+0x5a>
#endif /* !SOCKETS_DEBUG */
  {
    /* get remote addr/port from tcp_pcb */
    u16_t port;
    ip_addr_t tmpaddr;
    netconn_getaddr(sock->conn, &tmpaddr, &port, 0);
 800bfe0:	68fb      	ldr	r3, [r7, #12]
 800bfe2:	6818      	ldr	r0, [r3, #0]
 800bfe4:	f107 0216 	add.w	r2, r7, #22
 800bfe8:	f107 0110 	add.w	r1, r7, #16
 800bfec:	2300      	movs	r3, #0
 800bfee:	f7fd fb1d 	bl	800962c <netconn_getaddr>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("%s(%d):  addr=", dbg_fn, dbg_s));
    ip_addr_debug_print_val(SOCKETS_DEBUG, tmpaddr);
    LWIP_DEBUGF(SOCKETS_DEBUG, (" port=%"U16_F" len=%d\n", port, (int)dbg_ret));
    if (from && fromlen) {
 800bff2:	68bb      	ldr	r3, [r7, #8]
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	d00e      	beq.n	800c016 <lwip_recv_tcp_from+0x5a>
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	d00b      	beq.n	800c016 <lwip_recv_tcp_from+0x5a>
      return lwip_sock_make_addr(sock->conn, &tmpaddr, port, from, fromlen);
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	6818      	ldr	r0, [r3, #0]
 800c002:	8afa      	ldrh	r2, [r7, #22]
 800c004:	f107 0110 	add.w	r1, r7, #16
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	9300      	str	r3, [sp, #0]
 800c00c:	68bb      	ldr	r3, [r7, #8]
 800c00e:	f7ff ff67 	bl	800bee0 <lwip_sock_make_addr>
 800c012:	4603      	mov	r3, r0
 800c014:	e000      	b.n	800c018 <lwip_recv_tcp_from+0x5c>
    }
  }
  return 0;
 800c016:	2300      	movs	r3, #0
}
 800c018:	4618      	mov	r0, r3
 800c01a:	3718      	adds	r7, #24
 800c01c:	46bd      	mov	sp, r7
 800c01e:	bd80      	pop	{r7, pc}

0800c020 <lwip_recvfrom_udp_raw>:
/* Helper function to receive a netbuf from a udp or raw netconn.
 * Keeps sock->lastdata for peeking.
 */
static err_t
lwip_recvfrom_udp_raw(struct lwip_sock *sock, int flags, struct msghdr *msg, u16_t *datagram_len, int dbg_s)
{
 800c020:	b590      	push	{r4, r7, lr}
 800c022:	b08d      	sub	sp, #52	; 0x34
 800c024:	af02      	add	r7, sp, #8
 800c026:	60f8      	str	r0, [r7, #12]
 800c028:	60b9      	str	r1, [r7, #8]
 800c02a:	607a      	str	r2, [r7, #4]
 800c02c:	603b      	str	r3, [r7, #0]
  err_t err;
  u16_t buflen, copylen, copied;
  int i;

  LWIP_UNUSED_ARG(dbg_s);
  LWIP_ERROR("lwip_recvfrom_udp_raw: invalid arguments", (msg->msg_iov != NULL) || (msg->msg_iovlen <= 0), return ERR_ARG;);
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	689b      	ldr	r3, [r3, #8]
 800c032:	2b00      	cmp	r3, #0
 800c034:	d10d      	bne.n	800c052 <lwip_recvfrom_udp_raw+0x32>
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	68db      	ldr	r3, [r3, #12]
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	dd09      	ble.n	800c052 <lwip_recvfrom_udp_raw+0x32>
 800c03e:	4b5e      	ldr	r3, [pc, #376]	; (800c1b8 <lwip_recvfrom_udp_raw+0x198>)
 800c040:	f240 4249 	movw	r2, #1097	; 0x449
 800c044:	495d      	ldr	r1, [pc, #372]	; (800c1bc <lwip_recvfrom_udp_raw+0x19c>)
 800c046:	485e      	ldr	r0, [pc, #376]	; (800c1c0 <lwip_recvfrom_udp_raw+0x1a0>)
 800c048:	f00b fab6 	bl	80175b8 <iprintf>
 800c04c:	f06f 030f 	mvn.w	r3, #15
 800c050:	e0ad      	b.n	800c1ae <lwip_recvfrom_udp_raw+0x18e>

  if (flags & MSG_DONTWAIT) {
 800c052:	68bb      	ldr	r3, [r7, #8]
 800c054:	f003 0308 	and.w	r3, r3, #8
 800c058:	2b00      	cmp	r3, #0
 800c05a:	d003      	beq.n	800c064 <lwip_recvfrom_udp_raw+0x44>
    apiflags = NETCONN_DONTBLOCK;
 800c05c:	2304      	movs	r3, #4
 800c05e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c062:	e002      	b.n	800c06a <lwip_recvfrom_udp_raw+0x4a>
  } else {
    apiflags = 0;
 800c064:	2300      	movs	r3, #0
 800c066:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom_udp_raw[UDP/RAW]: top sock->lastdata=%p\n", (void *)sock->lastdata.netbuf));
  /* Check if there is data left from the last recv operation. */
  buf = sock->lastdata.netbuf;
 800c06a:	68fb      	ldr	r3, [r7, #12]
 800c06c:	685b      	ldr	r3, [r3, #4]
 800c06e:	613b      	str	r3, [r7, #16]
  if (buf == NULL) {
 800c070:	693b      	ldr	r3, [r7, #16]
 800c072:	2b00      	cmp	r3, #0
 800c074:	d11e      	bne.n	800c0b4 <lwip_recvfrom_udp_raw+0x94>
    /* No data was left from the previous operation, so we try to get
        some from the network. */
    err = netconn_recv_udp_raw_netbuf_flags(sock->conn, &buf, apiflags);
 800c076:	68fb      	ldr	r3, [r7, #12]
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800c07e:	f107 0110 	add.w	r1, r7, #16
 800c082:	4618      	mov	r0, r3
 800c084:	f7fd fdd2 	bl	8009c2c <netconn_recv_udp_raw_netbuf_flags>
 800c088:	4603      	mov	r3, r0
 800c08a:	76fb      	strb	r3, [r7, #27]
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom_udp_raw[UDP/RAW]: netconn_recv err=%d, netbuf=%p\n",
                                err, (void *)buf));

    if (err != ERR_OK) {
 800c08c:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800c090:	2b00      	cmp	r3, #0
 800c092:	d002      	beq.n	800c09a <lwip_recvfrom_udp_raw+0x7a>
      return err;
 800c094:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800c098:	e089      	b.n	800c1ae <lwip_recvfrom_udp_raw+0x18e>
    }
    LWIP_ASSERT("buf != NULL", buf != NULL);
 800c09a:	693b      	ldr	r3, [r7, #16]
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	d106      	bne.n	800c0ae <lwip_recvfrom_udp_raw+0x8e>
 800c0a0:	4b45      	ldr	r3, [pc, #276]	; (800c1b8 <lwip_recvfrom_udp_raw+0x198>)
 800c0a2:	f240 425e 	movw	r2, #1118	; 0x45e
 800c0a6:	4947      	ldr	r1, [pc, #284]	; (800c1c4 <lwip_recvfrom_udp_raw+0x1a4>)
 800c0a8:	4845      	ldr	r0, [pc, #276]	; (800c1c0 <lwip_recvfrom_udp_raw+0x1a0>)
 800c0aa:	f00b fa85 	bl	80175b8 <iprintf>
    sock->lastdata.netbuf = buf;
 800c0ae:	693a      	ldr	r2, [r7, #16]
 800c0b0:	68fb      	ldr	r3, [r7, #12]
 800c0b2:	605a      	str	r2, [r3, #4]
  }
  buflen = buf->p->tot_len;
 800c0b4:	693b      	ldr	r3, [r7, #16]
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	891b      	ldrh	r3, [r3, #8]
 800c0ba:	833b      	strh	r3, [r7, #24]
  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom_udp_raw: buflen=%"U16_F"\n", buflen));

  copied = 0;
 800c0bc:	2300      	movs	r3, #0
 800c0be:	847b      	strh	r3, [r7, #34]	; 0x22
  /* copy the pbuf payload into the iovs */
  for (i = 0; (i < msg->msg_iovlen) && (copied < buflen); i++) {
 800c0c0:	2300      	movs	r3, #0
 800c0c2:	61fb      	str	r3, [r7, #28]
 800c0c4:	e029      	b.n	800c11a <lwip_recvfrom_udp_raw+0xfa>
    u16_t len_left = (u16_t)(buflen - copied);
 800c0c6:	8b3a      	ldrh	r2, [r7, #24]
 800c0c8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c0ca:	1ad3      	subs	r3, r2, r3
 800c0cc:	82fb      	strh	r3, [r7, #22]
    if (msg->msg_iov[i].iov_len > len_left) {
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	689a      	ldr	r2, [r3, #8]
 800c0d2:	69fb      	ldr	r3, [r7, #28]
 800c0d4:	00db      	lsls	r3, r3, #3
 800c0d6:	4413      	add	r3, r2
 800c0d8:	685a      	ldr	r2, [r3, #4]
 800c0da:	8afb      	ldrh	r3, [r7, #22]
 800c0dc:	429a      	cmp	r2, r3
 800c0de:	d902      	bls.n	800c0e6 <lwip_recvfrom_udp_raw+0xc6>
      copylen = len_left;
 800c0e0:	8afb      	ldrh	r3, [r7, #22]
 800c0e2:	84bb      	strh	r3, [r7, #36]	; 0x24
 800c0e4:	e006      	b.n	800c0f4 <lwip_recvfrom_udp_raw+0xd4>
    } else {
      copylen = (u16_t)msg->msg_iov[i].iov_len;
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	689a      	ldr	r2, [r3, #8]
 800c0ea:	69fb      	ldr	r3, [r7, #28]
 800c0ec:	00db      	lsls	r3, r3, #3
 800c0ee:	4413      	add	r3, r2
 800c0f0:	685b      	ldr	r3, [r3, #4]
 800c0f2:	84bb      	strh	r3, [r7, #36]	; 0x24
    }

    /* copy the contents of the received buffer into
        the supplied memory buffer */
    pbuf_copy_partial(buf->p, (u8_t *)msg->msg_iov[i].iov_base, copylen, copied);
 800c0f4:	693b      	ldr	r3, [r7, #16]
 800c0f6:	6818      	ldr	r0, [r3, #0]
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	689a      	ldr	r2, [r3, #8]
 800c0fc:	69fb      	ldr	r3, [r7, #28]
 800c0fe:	00db      	lsls	r3, r3, #3
 800c100:	4413      	add	r3, r2
 800c102:	6819      	ldr	r1, [r3, #0]
 800c104:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c106:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800c108:	f002 fac6 	bl	800e698 <pbuf_copy_partial>
    copied = (u16_t)(copied + copylen);
 800c10c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800c10e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c110:	4413      	add	r3, r2
 800c112:	847b      	strh	r3, [r7, #34]	; 0x22
  for (i = 0; (i < msg->msg_iovlen) && (copied < buflen); i++) {
 800c114:	69fb      	ldr	r3, [r7, #28]
 800c116:	3301      	adds	r3, #1
 800c118:	61fb      	str	r3, [r7, #28]
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	68db      	ldr	r3, [r3, #12]
 800c11e:	69fa      	ldr	r2, [r7, #28]
 800c120:	429a      	cmp	r2, r3
 800c122:	da03      	bge.n	800c12c <lwip_recvfrom_udp_raw+0x10c>
 800c124:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800c126:	8b3b      	ldrh	r3, [r7, #24]
 800c128:	429a      	cmp	r2, r3
 800c12a:	d3cc      	bcc.n	800c0c6 <lwip_recvfrom_udp_raw+0xa6>
  }

  /* Check to see from where the data was.*/
#if !SOCKETS_DEBUG
  if (msg->msg_name && msg->msg_namelen)
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	681b      	ldr	r3, [r3, #0]
 800c130:	2b00      	cmp	r3, #0
 800c132:	d01a      	beq.n	800c16a <lwip_recvfrom_udp_raw+0x14a>
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	685b      	ldr	r3, [r3, #4]
 800c138:	2b00      	cmp	r3, #0
 800c13a:	d016      	beq.n	800c16a <lwip_recvfrom_udp_raw+0x14a>
#endif /* !SOCKETS_DEBUG */
  {
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom_udp_raw(%d):  addr=", dbg_s));
    ip_addr_debug_print_val(SOCKETS_DEBUG, *netbuf_fromaddr(buf));
    LWIP_DEBUGF(SOCKETS_DEBUG, (" port=%"U16_F" len=%d\n", netbuf_fromport(buf), copied));
    if (msg->msg_name && msg->msg_namelen) {
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	681b      	ldr	r3, [r3, #0]
 800c140:	2b00      	cmp	r3, #0
 800c142:	d012      	beq.n	800c16a <lwip_recvfrom_udp_raw+0x14a>
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	685b      	ldr	r3, [r3, #4]
 800c148:	2b00      	cmp	r3, #0
 800c14a:	d00e      	beq.n	800c16a <lwip_recvfrom_udp_raw+0x14a>
      lwip_sock_make_addr(sock->conn, netbuf_fromaddr(buf), netbuf_fromport(buf),
 800c14c:	68fb      	ldr	r3, [r7, #12]
 800c14e:	6818      	ldr	r0, [r3, #0]
 800c150:	693b      	ldr	r3, [r7, #16]
 800c152:	f103 0108 	add.w	r1, r3, #8
 800c156:	693b      	ldr	r3, [r7, #16]
 800c158:	899a      	ldrh	r2, [r3, #12]
                          (struct sockaddr *)msg->msg_name, &msg->msg_namelen);
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	681c      	ldr	r4, [r3, #0]
      lwip_sock_make_addr(sock->conn, netbuf_fromaddr(buf), netbuf_fromport(buf),
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	3304      	adds	r3, #4
 800c162:	9300      	str	r3, [sp, #0]
 800c164:	4623      	mov	r3, r4
 800c166:	f7ff febb 	bl	800bee0 <lwip_sock_make_addr>
    }
  }

  /* Initialize flag output */
  msg->msg_flags = 0;
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	2200      	movs	r2, #0
 800c16e:	619a      	str	r2, [r3, #24]

  if (msg->msg_control) {
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	691b      	ldr	r3, [r3, #16]
 800c174:	2b00      	cmp	r3, #0
 800c176:	d007      	beq.n	800c188 <lwip_recvfrom_udp_raw+0x168>
    u8_t wrote_msg = 0;
 800c178:	2300      	movs	r3, #0
 800c17a:	757b      	strb	r3, [r7, #21]
#endif /* LWIP_IPV4 */
      }
    }
#endif /* LWIP_NETBUF_RECVINFO */

    if (!wrote_msg) {
 800c17c:	7d7b      	ldrb	r3, [r7, #21]
 800c17e:	2b00      	cmp	r3, #0
 800c180:	d102      	bne.n	800c188 <lwip_recvfrom_udp_raw+0x168>
      msg->msg_controllen = 0;
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	2200      	movs	r2, #0
 800c186:	615a      	str	r2, [r3, #20]
    }
  }

  /* If we don't peek the incoming message: zero lastdata pointer and free the netbuf */
  if ((flags & MSG_PEEK) == 0) {
 800c188:	68bb      	ldr	r3, [r7, #8]
 800c18a:	f003 0301 	and.w	r3, r3, #1
 800c18e:	2b00      	cmp	r3, #0
 800c190:	d106      	bne.n	800c1a0 <lwip_recvfrom_udp_raw+0x180>
    sock->lastdata.netbuf = NULL;
 800c192:	68fb      	ldr	r3, [r7, #12]
 800c194:	2200      	movs	r2, #0
 800c196:	605a      	str	r2, [r3, #4]
    netbuf_delete(buf);
 800c198:	693b      	ldr	r3, [r7, #16]
 800c19a:	4618      	mov	r0, r3
 800c19c:	f7ff fa18 	bl	800b5d0 <netbuf_delete>
  }
  if (datagram_len) {
 800c1a0:	683b      	ldr	r3, [r7, #0]
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	d002      	beq.n	800c1ac <lwip_recvfrom_udp_raw+0x18c>
    *datagram_len = buflen;
 800c1a6:	683b      	ldr	r3, [r7, #0]
 800c1a8:	8b3a      	ldrh	r2, [r7, #24]
 800c1aa:	801a      	strh	r2, [r3, #0]
  }
  return ERR_OK;
 800c1ac:	2300      	movs	r3, #0
}
 800c1ae:	4618      	mov	r0, r3
 800c1b0:	372c      	adds	r7, #44	; 0x2c
 800c1b2:	46bd      	mov	sp, r7
 800c1b4:	bd90      	pop	{r4, r7, pc}
 800c1b6:	bf00      	nop
 800c1b8:	08018e0c 	.word	0x08018e0c
 800c1bc:	08018fb0 	.word	0x08018fb0
 800c1c0:	08018e60 	.word	0x08018e60
 800c1c4:	08018fdc 	.word	0x08018fdc

0800c1c8 <lwip_recvfrom>:

ssize_t
lwip_recvfrom(int s, void *mem, size_t len, int flags,
              struct sockaddr *from, socklen_t *fromlen)
{
 800c1c8:	b580      	push	{r7, lr}
 800c1ca:	b096      	sub	sp, #88	; 0x58
 800c1cc:	af02      	add	r7, sp, #8
 800c1ce:	60f8      	str	r0, [r7, #12]
 800c1d0:	60b9      	str	r1, [r7, #8]
 800c1d2:	607a      	str	r2, [r7, #4]
 800c1d4:	603b      	str	r3, [r7, #0]
  struct lwip_sock *sock;
  ssize_t ret;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom(%d, %p, %"SZT_F", 0x%x, ..)\n", s, mem, len, flags));
  sock = get_socket(s);
 800c1d6:	68f8      	ldr	r0, [r7, #12]
 800c1d8:	f7ff fa58 	bl	800b68c <get_socket>
 800c1dc:	64f8      	str	r0, [r7, #76]	; 0x4c
  if (!sock) {
 800c1de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	d102      	bne.n	800c1ea <lwip_recvfrom+0x22>
    return -1;
 800c1e4:	f04f 33ff 	mov.w	r3, #4294967295
 800c1e8:	e077      	b.n	800c2da <lwip_recvfrom+0x112>
  }
#if LWIP_TCP
  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
 800c1ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c1ec:	681b      	ldr	r3, [r3, #0]
 800c1ee:	781b      	ldrb	r3, [r3, #0]
 800c1f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c1f4:	2b10      	cmp	r3, #16
 800c1f6:	d112      	bne.n	800c21e <lwip_recvfrom+0x56>
    ret = lwip_recv_tcp(sock, mem, len, flags);
 800c1f8:	683b      	ldr	r3, [r7, #0]
 800c1fa:	687a      	ldr	r2, [r7, #4]
 800c1fc:	68b9      	ldr	r1, [r7, #8]
 800c1fe:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800c200:	f7ff fd5e 	bl	800bcc0 <lwip_recv_tcp>
 800c204:	6478      	str	r0, [r7, #68]	; 0x44
    lwip_recv_tcp_from(sock, from, fromlen, "lwip_recvfrom", s, ret);
 800c206:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c208:	9301      	str	r3, [sp, #4]
 800c20a:	68fb      	ldr	r3, [r7, #12]
 800c20c:	9300      	str	r3, [sp, #0]
 800c20e:	4b35      	ldr	r3, [pc, #212]	; (800c2e4 <lwip_recvfrom+0x11c>)
 800c210:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c212:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c214:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800c216:	f7ff fed1 	bl	800bfbc <lwip_recv_tcp_from>
    done_socket(sock);
    return ret;
 800c21a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c21c:	e05d      	b.n	800c2da <lwip_recvfrom+0x112>
  } else
#endif
  {
    u16_t datagram_len = 0;
 800c21e:	2300      	movs	r3, #0
 800c220:	877b      	strh	r3, [r7, #58]	; 0x3a
    struct iovec vec;
    struct msghdr msg;
    err_t err;
    vec.iov_base = mem;
 800c222:	68bb      	ldr	r3, [r7, #8]
 800c224:	633b      	str	r3, [r7, #48]	; 0x30
    vec.iov_len = len;
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	637b      	str	r3, [r7, #52]	; 0x34
    msg.msg_control = NULL;
 800c22a:	2300      	movs	r3, #0
 800c22c:	627b      	str	r3, [r7, #36]	; 0x24
    msg.msg_controllen = 0;
 800c22e:	2300      	movs	r3, #0
 800c230:	62bb      	str	r3, [r7, #40]	; 0x28
    msg.msg_flags = 0;
 800c232:	2300      	movs	r3, #0
 800c234:	62fb      	str	r3, [r7, #44]	; 0x2c
    msg.msg_iov = &vec;
 800c236:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800c23a:	61fb      	str	r3, [r7, #28]
    msg.msg_iovlen = 1;
 800c23c:	2301      	movs	r3, #1
 800c23e:	623b      	str	r3, [r7, #32]
    msg.msg_name = from;
 800c240:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c242:	617b      	str	r3, [r7, #20]
    msg.msg_namelen = (fromlen ? *fromlen : 0);
 800c244:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c246:	2b00      	cmp	r3, #0
 800c248:	d002      	beq.n	800c250 <lwip_recvfrom+0x88>
 800c24a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c24c:	681b      	ldr	r3, [r3, #0]
 800c24e:	e000      	b.n	800c252 <lwip_recvfrom+0x8a>
 800c250:	2300      	movs	r3, #0
 800c252:	61bb      	str	r3, [r7, #24]
    err = lwip_recvfrom_udp_raw(sock, flags, &msg, &datagram_len, s);
 800c254:	f107 013a 	add.w	r1, r7, #58	; 0x3a
 800c258:	f107 0214 	add.w	r2, r7, #20
 800c25c:	68fb      	ldr	r3, [r7, #12]
 800c25e:	9300      	str	r3, [sp, #0]
 800c260:	460b      	mov	r3, r1
 800c262:	6839      	ldr	r1, [r7, #0]
 800c264:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800c266:	f7ff fedb 	bl	800c020 <lwip_recvfrom_udp_raw>
 800c26a:	4603      	mov	r3, r0
 800c26c:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
    if (err != ERR_OK) {
 800c270:	f997 304b 	ldrsb.w	r3, [r7, #75]	; 0x4b
 800c274:	2b00      	cmp	r3, #0
 800c276:	d00e      	beq.n	800c296 <lwip_recvfrom+0xce>
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom[UDP/RAW](%d): buf == NULL, error is \"%s\"!\n",
                                  s, lwip_strerr(err)));
      sock_set_errno(sock, err_to_errno(err));
 800c278:	f997 304b 	ldrsb.w	r3, [r7, #75]	; 0x4b
 800c27c:	4618      	mov	r0, r3
 800c27e:	f7ff f989 	bl	800b594 <err_to_errno>
 800c282:	63f8      	str	r0, [r7, #60]	; 0x3c
 800c284:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c286:	2b00      	cmp	r3, #0
 800c288:	d002      	beq.n	800c290 <lwip_recvfrom+0xc8>
 800c28a:	4a17      	ldr	r2, [pc, #92]	; (800c2e8 <lwip_recvfrom+0x120>)
 800c28c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c28e:	6013      	str	r3, [r2, #0]
      done_socket(sock);
      return -1;
 800c290:	f04f 33ff 	mov.w	r3, #4294967295
 800c294:	e021      	b.n	800c2da <lwip_recvfrom+0x112>
    }
    ret = (ssize_t)LWIP_MIN(LWIP_MIN(len, datagram_len), SSIZE_MAX);
 800c296:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800c298:	461a      	mov	r2, r3
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	4293      	cmp	r3, r2
 800c29e:	bf28      	it	cs
 800c2a0:	4613      	movcs	r3, r2
 800c2a2:	4a12      	ldr	r2, [pc, #72]	; (800c2ec <lwip_recvfrom+0x124>)
 800c2a4:	4293      	cmp	r3, r2
 800c2a6:	d806      	bhi.n	800c2b6 <lwip_recvfrom+0xee>
 800c2a8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800c2aa:	461a      	mov	r2, r3
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	4293      	cmp	r3, r2
 800c2b0:	bf28      	it	cs
 800c2b2:	4613      	movcs	r3, r2
 800c2b4:	e001      	b.n	800c2ba <lwip_recvfrom+0xf2>
 800c2b6:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800c2ba:	647b      	str	r3, [r7, #68]	; 0x44
    if (fromlen) {
 800c2bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	d002      	beq.n	800c2c8 <lwip_recvfrom+0x100>
      *fromlen = msg.msg_namelen;
 800c2c2:	69ba      	ldr	r2, [r7, #24]
 800c2c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c2c6:	601a      	str	r2, [r3, #0]
    }
  }

  sock_set_errno(sock, 0);
 800c2c8:	2300      	movs	r3, #0
 800c2ca:	643b      	str	r3, [r7, #64]	; 0x40
 800c2cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	d002      	beq.n	800c2d8 <lwip_recvfrom+0x110>
 800c2d2:	4a05      	ldr	r2, [pc, #20]	; (800c2e8 <lwip_recvfrom+0x120>)
 800c2d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c2d6:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return ret;
 800c2d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800c2da:	4618      	mov	r0, r3
 800c2dc:	3750      	adds	r7, #80	; 0x50
 800c2de:	46bd      	mov	sp, r7
 800c2e0:	bd80      	pop	{r7, pc}
 800c2e2:	bf00      	nop
 800c2e4:	08018fe8 	.word	0x08018fe8
 800c2e8:	2000d2a0 	.word	0x2000d2a0
 800c2ec:	7ffffffe 	.word	0x7ffffffe

0800c2f0 <lwip_recv>:
  return lwip_recvmsg(s, &msg, 0);
}

ssize_t
lwip_recv(int s, void *mem, size_t len, int flags)
{
 800c2f0:	b580      	push	{r7, lr}
 800c2f2:	b086      	sub	sp, #24
 800c2f4:	af02      	add	r7, sp, #8
 800c2f6:	60f8      	str	r0, [r7, #12]
 800c2f8:	60b9      	str	r1, [r7, #8]
 800c2fa:	607a      	str	r2, [r7, #4]
 800c2fc:	603b      	str	r3, [r7, #0]
  return lwip_recvfrom(s, mem, len, flags, NULL, NULL);
 800c2fe:	2300      	movs	r3, #0
 800c300:	9301      	str	r3, [sp, #4]
 800c302:	2300      	movs	r3, #0
 800c304:	9300      	str	r3, [sp, #0]
 800c306:	683b      	ldr	r3, [r7, #0]
 800c308:	687a      	ldr	r2, [r7, #4]
 800c30a:	68b9      	ldr	r1, [r7, #8]
 800c30c:	68f8      	ldr	r0, [r7, #12]
 800c30e:	f7ff ff5b 	bl	800c1c8 <lwip_recvfrom>
 800c312:	4603      	mov	r3, r0
}
 800c314:	4618      	mov	r0, r3
 800c316:	3710      	adds	r7, #16
 800c318:	46bd      	mov	sp, r7
 800c31a:	bd80      	pop	{r7, pc}

0800c31c <lwip_send>:
#endif /* LWIP_UDP || LWIP_RAW */
}

ssize_t
lwip_send(int s, const void *data, size_t size, int flags)
{
 800c31c:	b580      	push	{r7, lr}
 800c31e:	b08c      	sub	sp, #48	; 0x30
 800c320:	af02      	add	r7, sp, #8
 800c322:	60f8      	str	r0, [r7, #12]
 800c324:	60b9      	str	r1, [r7, #8]
 800c326:	607a      	str	r2, [r7, #4]
 800c328:	603b      	str	r3, [r7, #0]
  size_t written;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_send(%d, data=%p, size=%"SZT_F", flags=0x%x)\n",
                              s, data, size, flags));

  sock = get_socket(s);
 800c32a:	68f8      	ldr	r0, [r7, #12]
 800c32c:	f7ff f9ae 	bl	800b68c <get_socket>
 800c330:	6278      	str	r0, [r7, #36]	; 0x24
  if (!sock) {
 800c332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c334:	2b00      	cmp	r3, #0
 800c336:	d102      	bne.n	800c33e <lwip_send+0x22>
    return -1;
 800c338:	f04f 33ff 	mov.w	r3, #4294967295
 800c33c:	e04b      	b.n	800c3d6 <lwip_send+0xba>
  }

  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_TCP) {
 800c33e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	781b      	ldrb	r3, [r3, #0]
 800c344:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c348:	2b10      	cmp	r3, #16
 800c34a:	d00d      	beq.n	800c368 <lwip_send+0x4c>
#if (LWIP_UDP || LWIP_RAW)
    done_socket(sock);
    return lwip_sendto(s, data, size, flags, NULL, 0);
#else /* (LWIP_UDP || LWIP_RAW) */
    sock_set_errno(sock, err_to_errno(ERR_ARG));
 800c34c:	f06f 000f 	mvn.w	r0, #15
 800c350:	f7ff f920 	bl	800b594 <err_to_errno>
 800c354:	61b8      	str	r0, [r7, #24]
 800c356:	69bb      	ldr	r3, [r7, #24]
 800c358:	2b00      	cmp	r3, #0
 800c35a:	d002      	beq.n	800c362 <lwip_send+0x46>
 800c35c:	4a20      	ldr	r2, [pc, #128]	; (800c3e0 <lwip_send+0xc4>)
 800c35e:	69bb      	ldr	r3, [r7, #24]
 800c360:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 800c362:	f04f 33ff 	mov.w	r3, #4294967295
 800c366:	e036      	b.n	800c3d6 <lwip_send+0xba>
#endif /* (LWIP_UDP || LWIP_RAW) */
  }

  write_flags = (u8_t)(NETCONN_COPY |
                       ((flags & MSG_MORE)     ? NETCONN_MORE      : 0) |
 800c368:	683b      	ldr	r3, [r7, #0]
 800c36a:	f003 0310 	and.w	r3, r3, #16
  write_flags = (u8_t)(NETCONN_COPY |
 800c36e:	2b00      	cmp	r3, #0
 800c370:	d001      	beq.n	800c376 <lwip_send+0x5a>
 800c372:	2203      	movs	r2, #3
 800c374:	e000      	b.n	800c378 <lwip_send+0x5c>
 800c376:	2201      	movs	r2, #1
                       ((flags & MSG_MORE)     ? NETCONN_MORE      : 0) |
 800c378:	683b      	ldr	r3, [r7, #0]
 800c37a:	105b      	asrs	r3, r3, #1
 800c37c:	b25b      	sxtb	r3, r3
 800c37e:	f003 0304 	and.w	r3, r3, #4
 800c382:	b25b      	sxtb	r3, r3
 800c384:	4313      	orrs	r3, r2
 800c386:	b25b      	sxtb	r3, r3
  write_flags = (u8_t)(NETCONN_COPY |
 800c388:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
                       ((flags & MSG_DONTWAIT) ? NETCONN_DONTBLOCK : 0));
  written = 0;
 800c38c:	2300      	movs	r3, #0
 800c38e:	617b      	str	r3, [r7, #20]
  err = netconn_write_partly(sock->conn, data, size, write_flags, &written);
 800c390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c392:	6818      	ldr	r0, [r3, #0]
 800c394:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800c398:	f107 0314 	add.w	r3, r7, #20
 800c39c:	9300      	str	r3, [sp, #0]
 800c39e:	4613      	mov	r3, r2
 800c3a0:	687a      	ldr	r2, [r7, #4]
 800c3a2:	68b9      	ldr	r1, [r7, #8]
 800c3a4:	f7fd fc6e 	bl	8009c84 <netconn_write_partly>
 800c3a8:	4603      	mov	r3, r0
 800c3aa:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_send(%d) err=%d written=%"SZT_F"\n", s, err, written));
  sock_set_errno(sock, err_to_errno(err));
 800c3ae:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 800c3b2:	4618      	mov	r0, r3
 800c3b4:	f7ff f8ee 	bl	800b594 <err_to_errno>
 800c3b8:	61f8      	str	r0, [r7, #28]
 800c3ba:	69fb      	ldr	r3, [r7, #28]
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	d002      	beq.n	800c3c6 <lwip_send+0xaa>
 800c3c0:	4a07      	ldr	r2, [pc, #28]	; (800c3e0 <lwip_send+0xc4>)
 800c3c2:	69fb      	ldr	r3, [r7, #28]
 800c3c4:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  /* casting 'written' to ssize_t is OK here since the netconn API limits it to SSIZE_MAX */
  return (err == ERR_OK ? (ssize_t)written : -1);
 800c3c6:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	d101      	bne.n	800c3d2 <lwip_send+0xb6>
 800c3ce:	697b      	ldr	r3, [r7, #20]
 800c3d0:	e001      	b.n	800c3d6 <lwip_send+0xba>
 800c3d2:	f04f 33ff 	mov.w	r3, #4294967295
}
 800c3d6:	4618      	mov	r0, r3
 800c3d8:	3728      	adds	r7, #40	; 0x28
 800c3da:	46bd      	mov	sp, r7
 800c3dc:	bd80      	pop	{r7, pc}
 800c3de:	bf00      	nop
 800c3e0:	2000d2a0 	.word	0x2000d2a0

0800c3e4 <lwip_socket>:
  return (err == ERR_OK ? short_size : -1);
}

int
lwip_socket(int domain, int type, int protocol)
{
 800c3e4:	b580      	push	{r7, lr}
 800c3e6:	b086      	sub	sp, #24
 800c3e8:	af00      	add	r7, sp, #0
 800c3ea:	60f8      	str	r0, [r7, #12]
 800c3ec:	60b9      	str	r1, [r7, #8]
 800c3ee:	607a      	str	r2, [r7, #4]
  int i;

  LWIP_UNUSED_ARG(domain); /* @todo: check this */

  /* create a netconn */
  switch (type) {
 800c3f0:	68bb      	ldr	r3, [r7, #8]
 800c3f2:	2b02      	cmp	r3, #2
 800c3f4:	d00d      	beq.n	800c412 <lwip_socket+0x2e>
 800c3f6:	2b03      	cmp	r3, #3
 800c3f8:	d002      	beq.n	800c400 <lwip_socket+0x1c>
 800c3fa:	2b01      	cmp	r3, #1
 800c3fc:	d016      	beq.n	800c42c <lwip_socket+0x48>
 800c3fe:	e01c      	b.n	800c43a <lwip_socket+0x56>
    case SOCK_RAW:
      conn = netconn_new_with_proto_and_callback(DOMAIN_TO_NETCONN_TYPE(domain, NETCONN_RAW),
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	b2db      	uxtb	r3, r3
 800c404:	4a21      	ldr	r2, [pc, #132]	; (800c48c <lwip_socket+0xa8>)
 800c406:	4619      	mov	r1, r3
 800c408:	2040      	movs	r0, #64	; 0x40
 800c40a:	f7fd f855 	bl	80094b8 <netconn_new_with_proto_and_callback>
 800c40e:	6178      	str	r0, [r7, #20]
             (u8_t)protocol, DEFAULT_SOCKET_EVENTCB);
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%s, SOCK_RAW, %d) = ",
                                  domain == PF_INET ? "PF_INET" : "UNKNOWN", protocol));
      break;
 800c410:	e019      	b.n	800c446 <lwip_socket+0x62>
    case SOCK_DGRAM:
      conn = netconn_new_with_callback(DOMAIN_TO_NETCONN_TYPE(domain,
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	2b88      	cmp	r3, #136	; 0x88
 800c416:	d101      	bne.n	800c41c <lwip_socket+0x38>
 800c418:	2321      	movs	r3, #33	; 0x21
 800c41a:	e000      	b.n	800c41e <lwip_socket+0x3a>
 800c41c:	2320      	movs	r3, #32
 800c41e:	4a1b      	ldr	r2, [pc, #108]	; (800c48c <lwip_socket+0xa8>)
 800c420:	2100      	movs	r1, #0
 800c422:	4618      	mov	r0, r3
 800c424:	f7fd f848 	bl	80094b8 <netconn_new_with_proto_and_callback>
 800c428:	6178      	str	r0, [r7, #20]
      if (conn) {
        /* netconn layer enables pktinfo by default, sockets default to off */
        conn->flags &= ~NETCONN_FLAG_PKTINFO;
      }
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 800c42a:	e00c      	b.n	800c446 <lwip_socket+0x62>
    case SOCK_STREAM:
      conn = netconn_new_with_callback(DOMAIN_TO_NETCONN_TYPE(domain, NETCONN_TCP), DEFAULT_SOCKET_EVENTCB);
 800c42c:	4a17      	ldr	r2, [pc, #92]	; (800c48c <lwip_socket+0xa8>)
 800c42e:	2100      	movs	r1, #0
 800c430:	2010      	movs	r0, #16
 800c432:	f7fd f841 	bl	80094b8 <netconn_new_with_proto_and_callback>
 800c436:	6178      	str	r0, [r7, #20]
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%s, SOCK_STREAM, %d) = ",
                                  domain == PF_INET ? "PF_INET" : "UNKNOWN", protocol));
      break;
 800c438:	e005      	b.n	800c446 <lwip_socket+0x62>
    default:
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%d, %d/UNKNOWN, %d) = -1\n",
                                  domain, type, protocol));
      set_errno(EINVAL);
 800c43a:	4b15      	ldr	r3, [pc, #84]	; (800c490 <lwip_socket+0xac>)
 800c43c:	2216      	movs	r2, #22
 800c43e:	601a      	str	r2, [r3, #0]
      return -1;
 800c440:	f04f 33ff 	mov.w	r3, #4294967295
 800c444:	e01e      	b.n	800c484 <lwip_socket+0xa0>
  }

  if (!conn) {
 800c446:	697b      	ldr	r3, [r7, #20]
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d105      	bne.n	800c458 <lwip_socket+0x74>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("-1 / ENOBUFS (could not create netconn)\n"));
    set_errno(ENOBUFS);
 800c44c:	4b10      	ldr	r3, [pc, #64]	; (800c490 <lwip_socket+0xac>)
 800c44e:	2269      	movs	r2, #105	; 0x69
 800c450:	601a      	str	r2, [r3, #0]
    return -1;
 800c452:	f04f 33ff 	mov.w	r3, #4294967295
 800c456:	e015      	b.n	800c484 <lwip_socket+0xa0>
  }

  i = alloc_socket(conn, 0);
 800c458:	2100      	movs	r1, #0
 800c45a:	6978      	ldr	r0, [r7, #20]
 800c45c:	f7ff f92e 	bl	800b6bc <alloc_socket>
 800c460:	6138      	str	r0, [r7, #16]

  if (i == -1) {
 800c462:	693b      	ldr	r3, [r7, #16]
 800c464:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c468:	d108      	bne.n	800c47c <lwip_socket+0x98>
    netconn_delete(conn);
 800c46a:	6978      	ldr	r0, [r7, #20]
 800c46c:	f7fd f8c2 	bl	80095f4 <netconn_delete>
    set_errno(ENFILE);
 800c470:	4b07      	ldr	r3, [pc, #28]	; (800c490 <lwip_socket+0xac>)
 800c472:	2217      	movs	r2, #23
 800c474:	601a      	str	r2, [r3, #0]
    return -1;
 800c476:	f04f 33ff 	mov.w	r3, #4294967295
 800c47a:	e003      	b.n	800c484 <lwip_socket+0xa0>
  }
  conn->socket = i;
 800c47c:	697b      	ldr	r3, [r7, #20]
 800c47e:	693a      	ldr	r2, [r7, #16]
 800c480:	619a      	str	r2, [r3, #24]
  done_socket(&sockets[i - LWIP_SOCKET_OFFSET]);
  LWIP_DEBUGF(SOCKETS_DEBUG, ("%d\n", i));
  set_errno(0);
  return i;
 800c482:	693b      	ldr	r3, [r7, #16]
}
 800c484:	4618      	mov	r0, r3
 800c486:	3718      	adds	r7, #24
 800c488:	46bd      	mov	sp, r7
 800c48a:	bd80      	pop	{r7, pc}
 800c48c:	0800c51d 	.word	0x0800c51d
 800c490:	2000d2a0 	.word	0x2000d2a0

0800c494 <lwip_poll_should_wake>:
 * Check whether event_callback should wake up a thread waiting in
 * lwip_poll.
 */
static int
lwip_poll_should_wake(const struct lwip_select_cb *scb, int fd, int has_recvevent, int has_sendevent, int has_errevent)
{
 800c494:	b480      	push	{r7}
 800c496:	b087      	sub	sp, #28
 800c498:	af00      	add	r7, sp, #0
 800c49a:	60f8      	str	r0, [r7, #12]
 800c49c:	60b9      	str	r1, [r7, #8]
 800c49e:	607a      	str	r2, [r7, #4]
 800c4a0:	603b      	str	r3, [r7, #0]
  nfds_t fdi;
  for (fdi = 0; fdi < scb->poll_nfds; fdi++) {
 800c4a2:	2300      	movs	r3, #0
 800c4a4:	617b      	str	r3, [r7, #20]
 800c4a6:	e02c      	b.n	800c502 <lwip_poll_should_wake+0x6e>
    const struct pollfd *pollfd = &scb->poll_fds[fdi];
 800c4a8:	68fb      	ldr	r3, [r7, #12]
 800c4aa:	695a      	ldr	r2, [r3, #20]
 800c4ac:	697b      	ldr	r3, [r7, #20]
 800c4ae:	00db      	lsls	r3, r3, #3
 800c4b0:	4413      	add	r3, r2
 800c4b2:	613b      	str	r3, [r7, #16]
    if (pollfd->fd == fd) {
 800c4b4:	693b      	ldr	r3, [r7, #16]
 800c4b6:	681b      	ldr	r3, [r3, #0]
 800c4b8:	68ba      	ldr	r2, [r7, #8]
 800c4ba:	429a      	cmp	r2, r3
 800c4bc:	d11e      	bne.n	800c4fc <lwip_poll_should_wake+0x68>
      /* Do not update pollfd->revents right here;
         that would be a data race because lwip_pollscan
         accesses revents without protecting. */
      if (has_recvevent && (pollfd->events & POLLIN) != 0) {
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	d009      	beq.n	800c4d8 <lwip_poll_should_wake+0x44>
 800c4c4:	693b      	ldr	r3, [r7, #16]
 800c4c6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800c4ca:	b29b      	uxth	r3, r3
 800c4cc:	f003 0301 	and.w	r3, r3, #1
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	d001      	beq.n	800c4d8 <lwip_poll_should_wake+0x44>
        return 1;
 800c4d4:	2301      	movs	r3, #1
 800c4d6:	e01a      	b.n	800c50e <lwip_poll_should_wake+0x7a>
      }
      if (has_sendevent && (pollfd->events & POLLOUT) != 0) {
 800c4d8:	683b      	ldr	r3, [r7, #0]
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	d009      	beq.n	800c4f2 <lwip_poll_should_wake+0x5e>
 800c4de:	693b      	ldr	r3, [r7, #16]
 800c4e0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800c4e4:	b29b      	uxth	r3, r3
 800c4e6:	f003 0302 	and.w	r3, r3, #2
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	d001      	beq.n	800c4f2 <lwip_poll_should_wake+0x5e>
        return 1;
 800c4ee:	2301      	movs	r3, #1
 800c4f0:	e00d      	b.n	800c50e <lwip_poll_should_wake+0x7a>
      }
      if (has_errevent) {
 800c4f2:	6a3b      	ldr	r3, [r7, #32]
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	d001      	beq.n	800c4fc <lwip_poll_should_wake+0x68>
        /* POLLERR is output only. */
        return 1;
 800c4f8:	2301      	movs	r3, #1
 800c4fa:	e008      	b.n	800c50e <lwip_poll_should_wake+0x7a>
  for (fdi = 0; fdi < scb->poll_nfds; fdi++) {
 800c4fc:	697b      	ldr	r3, [r7, #20]
 800c4fe:	3301      	adds	r3, #1
 800c500:	617b      	str	r3, [r7, #20]
 800c502:	68fb      	ldr	r3, [r7, #12]
 800c504:	699b      	ldr	r3, [r3, #24]
 800c506:	697a      	ldr	r2, [r7, #20]
 800c508:	429a      	cmp	r2, r3
 800c50a:	d3cd      	bcc.n	800c4a8 <lwip_poll_should_wake+0x14>
      }
    }
  }
  return 0;
 800c50c:	2300      	movs	r3, #0
}
 800c50e:	4618      	mov	r0, r3
 800c510:	371c      	adds	r7, #28
 800c512:	46bd      	mov	sp, r7
 800c514:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c518:	4770      	bx	lr
	...

0800c51c <event_callback>:
 *   NETCONN_EVT_ERROR
 * This requirement will be asserted in select_check_waiters()
 */
static void
event_callback(struct netconn *conn, enum netconn_evt evt, u16_t len)
{
 800c51c:	b580      	push	{r7, lr}
 800c51e:	b08a      	sub	sp, #40	; 0x28
 800c520:	af00      	add	r7, sp, #0
 800c522:	6078      	str	r0, [r7, #4]
 800c524:	460b      	mov	r3, r1
 800c526:	70fb      	strb	r3, [r7, #3]
 800c528:	4613      	mov	r3, r2
 800c52a:	803b      	strh	r3, [r7, #0]
  SYS_ARCH_DECL_PROTECT(lev);

  LWIP_UNUSED_ARG(len);

  /* Get socket */
  if (conn) {
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	2b00      	cmp	r3, #0
 800c530:	f000 80a4 	beq.w	800c67c <event_callback+0x160>
    s = conn->socket;
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	699b      	ldr	r3, [r3, #24]
 800c538:	627b      	str	r3, [r7, #36]	; 0x24
    if (s < 0) {
 800c53a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	da18      	bge.n	800c572 <event_callback+0x56>
      /* Data comes in right away after an accept, even though
       * the server task might not have created a new socket yet.
       * Just count down (or up) if that's the case and we
       * will use the data later. Note that only receive events
       * can happen before the new socket is set up. */
      SYS_ARCH_PROTECT(lev);
 800c540:	f00a ffc2 	bl	80174c8 <sys_arch_protect>
 800c544:	61f8      	str	r0, [r7, #28]
      if (conn->socket < 0) {
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	699b      	ldr	r3, [r3, #24]
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	da0b      	bge.n	800c566 <event_callback+0x4a>
        if (evt == NETCONN_EVT_RCVPLUS) {
 800c54e:	78fb      	ldrb	r3, [r7, #3]
 800c550:	2b00      	cmp	r3, #0
 800c552:	d104      	bne.n	800c55e <event_callback+0x42>
          /* conn->socket is -1 on initialization
             lwip_accept adjusts sock->recvevent if conn->socket < -1 */
          conn->socket--;
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	699b      	ldr	r3, [r3, #24]
 800c558:	1e5a      	subs	r2, r3, #1
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	619a      	str	r2, [r3, #24]
        }
        SYS_ARCH_UNPROTECT(lev);
 800c55e:	69f8      	ldr	r0, [r7, #28]
 800c560:	f00a ffc0 	bl	80174e4 <sys_arch_unprotect>
        return;
 800c564:	e08d      	b.n	800c682 <event_callback+0x166>
      }
      s = conn->socket;
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	699b      	ldr	r3, [r3, #24]
 800c56a:	627b      	str	r3, [r7, #36]	; 0x24
      SYS_ARCH_UNPROTECT(lev);
 800c56c:	69f8      	ldr	r0, [r7, #28]
 800c56e:	f00a ffb9 	bl	80174e4 <sys_arch_unprotect>
    }

    sock = get_socket(s);
 800c572:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c574:	f7ff f88a 	bl	800b68c <get_socket>
 800c578:	61b8      	str	r0, [r7, #24]
    if (!sock) {
 800c57a:	69bb      	ldr	r3, [r7, #24]
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	d07f      	beq.n	800c680 <event_callback+0x164>
    }
  } else {
    return;
  }

  check_waiters = 1;
 800c580:	2301      	movs	r3, #1
 800c582:	623b      	str	r3, [r7, #32]
  SYS_ARCH_PROTECT(lev);
 800c584:	f00a ffa0 	bl	80174c8 <sys_arch_protect>
 800c588:	61f8      	str	r0, [r7, #28]
  /* Set event as required */
  switch (evt) {
 800c58a:	78fb      	ldrb	r3, [r7, #3]
 800c58c:	2b04      	cmp	r3, #4
 800c58e:	d83e      	bhi.n	800c60e <event_callback+0xf2>
 800c590:	a201      	add	r2, pc, #4	; (adr r2, 800c598 <event_callback+0x7c>)
 800c592:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c596:	bf00      	nop
 800c598:	0800c5ad 	.word	0x0800c5ad
 800c59c:	0800c5cf 	.word	0x0800c5cf
 800c5a0:	0800c5e7 	.word	0x0800c5e7
 800c5a4:	0800c5fb 	.word	0x0800c5fb
 800c5a8:	0800c607 	.word	0x0800c607
    case NETCONN_EVT_RCVPLUS:
      sock->rcvevent++;
 800c5ac:	69bb      	ldr	r3, [r7, #24]
 800c5ae:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800c5b2:	b29b      	uxth	r3, r3
 800c5b4:	3301      	adds	r3, #1
 800c5b6:	b29b      	uxth	r3, r3
 800c5b8:	b21a      	sxth	r2, r3
 800c5ba:	69bb      	ldr	r3, [r7, #24]
 800c5bc:	811a      	strh	r2, [r3, #8]
      if (sock->rcvevent > 1) {
 800c5be:	69bb      	ldr	r3, [r7, #24]
 800c5c0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800c5c4:	2b01      	cmp	r3, #1
 800c5c6:	dd2a      	ble.n	800c61e <event_callback+0x102>
        check_waiters = 0;
 800c5c8:	2300      	movs	r3, #0
 800c5ca:	623b      	str	r3, [r7, #32]
      }
      break;
 800c5cc:	e027      	b.n	800c61e <event_callback+0x102>
    case NETCONN_EVT_RCVMINUS:
      sock->rcvevent--;
 800c5ce:	69bb      	ldr	r3, [r7, #24]
 800c5d0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800c5d4:	b29b      	uxth	r3, r3
 800c5d6:	3b01      	subs	r3, #1
 800c5d8:	b29b      	uxth	r3, r3
 800c5da:	b21a      	sxth	r2, r3
 800c5dc:	69bb      	ldr	r3, [r7, #24]
 800c5de:	811a      	strh	r2, [r3, #8]
      check_waiters = 0;
 800c5e0:	2300      	movs	r3, #0
 800c5e2:	623b      	str	r3, [r7, #32]
      break;
 800c5e4:	e01c      	b.n	800c620 <event_callback+0x104>
    case NETCONN_EVT_SENDPLUS:
      if (sock->sendevent) {
 800c5e6:	69bb      	ldr	r3, [r7, #24]
 800c5e8:	895b      	ldrh	r3, [r3, #10]
 800c5ea:	2b00      	cmp	r3, #0
 800c5ec:	d001      	beq.n	800c5f2 <event_callback+0xd6>
        check_waiters = 0;
 800c5ee:	2300      	movs	r3, #0
 800c5f0:	623b      	str	r3, [r7, #32]
      }
      sock->sendevent = 1;
 800c5f2:	69bb      	ldr	r3, [r7, #24]
 800c5f4:	2201      	movs	r2, #1
 800c5f6:	815a      	strh	r2, [r3, #10]
      break;
 800c5f8:	e012      	b.n	800c620 <event_callback+0x104>
    case NETCONN_EVT_SENDMINUS:
      sock->sendevent = 0;
 800c5fa:	69bb      	ldr	r3, [r7, #24]
 800c5fc:	2200      	movs	r2, #0
 800c5fe:	815a      	strh	r2, [r3, #10]
      check_waiters = 0;
 800c600:	2300      	movs	r3, #0
 800c602:	623b      	str	r3, [r7, #32]
      break;
 800c604:	e00c      	b.n	800c620 <event_callback+0x104>
    case NETCONN_EVT_ERROR:
      sock->errevent = 1;
 800c606:	69bb      	ldr	r3, [r7, #24]
 800c608:	2201      	movs	r2, #1
 800c60a:	819a      	strh	r2, [r3, #12]
      break;
 800c60c:	e008      	b.n	800c620 <event_callback+0x104>
    default:
      LWIP_ASSERT("unknown event", 0);
 800c60e:	4b1e      	ldr	r3, [pc, #120]	; (800c688 <event_callback+0x16c>)
 800c610:	f44f 621f 	mov.w	r2, #2544	; 0x9f0
 800c614:	491d      	ldr	r1, [pc, #116]	; (800c68c <event_callback+0x170>)
 800c616:	481e      	ldr	r0, [pc, #120]	; (800c690 <event_callback+0x174>)
 800c618:	f00a ffce 	bl	80175b8 <iprintf>
      break;
 800c61c:	e000      	b.n	800c620 <event_callback+0x104>
      break;
 800c61e:	bf00      	nop
  }

  if (sock->select_waiting && check_waiters) {
 800c620:	69bb      	ldr	r3, [r7, #24]
 800c622:	7b9b      	ldrb	r3, [r3, #14]
 800c624:	2b00      	cmp	r3, #0
 800c626:	d025      	beq.n	800c674 <event_callback+0x158>
 800c628:	6a3b      	ldr	r3, [r7, #32]
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	d022      	beq.n	800c674 <event_callback+0x158>
    /* Save which events are active */
    int has_recvevent, has_sendevent, has_errevent;
    has_recvevent = sock->rcvevent > 0;
 800c62e:	69bb      	ldr	r3, [r7, #24]
 800c630:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800c634:	2b00      	cmp	r3, #0
 800c636:	bfcc      	ite	gt
 800c638:	2301      	movgt	r3, #1
 800c63a:	2300      	movle	r3, #0
 800c63c:	b2db      	uxtb	r3, r3
 800c63e:	617b      	str	r3, [r7, #20]
    has_sendevent = sock->sendevent != 0;
 800c640:	69bb      	ldr	r3, [r7, #24]
 800c642:	895b      	ldrh	r3, [r3, #10]
 800c644:	2b00      	cmp	r3, #0
 800c646:	bf14      	ite	ne
 800c648:	2301      	movne	r3, #1
 800c64a:	2300      	moveq	r3, #0
 800c64c:	b2db      	uxtb	r3, r3
 800c64e:	613b      	str	r3, [r7, #16]
    has_errevent = sock->errevent != 0;
 800c650:	69bb      	ldr	r3, [r7, #24]
 800c652:	899b      	ldrh	r3, [r3, #12]
 800c654:	2b00      	cmp	r3, #0
 800c656:	bf14      	ite	ne
 800c658:	2301      	movne	r3, #1
 800c65a:	2300      	moveq	r3, #0
 800c65c:	b2db      	uxtb	r3, r3
 800c65e:	60fb      	str	r3, [r7, #12]
    SYS_ARCH_UNPROTECT(lev);
 800c660:	69f8      	ldr	r0, [r7, #28]
 800c662:	f00a ff3f 	bl	80174e4 <sys_arch_unprotect>
    /* Check any select calls waiting on this socket */
    select_check_waiters(s, has_recvevent, has_sendevent, has_errevent);
 800c666:	68fb      	ldr	r3, [r7, #12]
 800c668:	693a      	ldr	r2, [r7, #16]
 800c66a:	6979      	ldr	r1, [r7, #20]
 800c66c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c66e:	f000 f811 	bl	800c694 <select_check_waiters>
  if (sock->select_waiting && check_waiters) {
 800c672:	e006      	b.n	800c682 <event_callback+0x166>
  } else {
    SYS_ARCH_UNPROTECT(lev);
 800c674:	69f8      	ldr	r0, [r7, #28]
 800c676:	f00a ff35 	bl	80174e4 <sys_arch_unprotect>
 800c67a:	e002      	b.n	800c682 <event_callback+0x166>
    return;
 800c67c:	bf00      	nop
 800c67e:	e000      	b.n	800c682 <event_callback+0x166>
      return;
 800c680:	bf00      	nop
  }
  done_socket(sock);
}
 800c682:	3728      	adds	r7, #40	; 0x28
 800c684:	46bd      	mov	sp, r7
 800c686:	bd80      	pop	{r7, pc}
 800c688:	08018e0c 	.word	0x08018e0c
 800c68c:	08019164 	.word	0x08019164
 800c690:	08018e60 	.word	0x08018e60

0800c694 <select_check_waiters>:
 * of the loop, thus creating a possibility where a thread could modify the
 * select_cb_list during our UNPROTECT/PROTECT. We use a generational counter to
 * detect this change and restart the list walk. The list is expected to be small
 */
static void select_check_waiters(int s, int has_recvevent, int has_sendevent, int has_errevent)
{
 800c694:	b580      	push	{r7, lr}
 800c696:	b088      	sub	sp, #32
 800c698:	af02      	add	r7, sp, #8
 800c69a:	60f8      	str	r0, [r7, #12]
 800c69c:	60b9      	str	r1, [r7, #8]
 800c69e:	607a      	str	r2, [r7, #4]
 800c6a0:	603b      	str	r3, [r7, #0]
  SYS_ARCH_PROTECT(lev);
again:
  /* remember the state of select_cb_list to detect changes */
  last_select_cb_ctr = select_cb_ctr;
#endif /* !LWIP_TCPIP_CORE_LOCKING */
  for (scb = select_cb_list; scb != NULL; scb = scb->next) {
 800c6a2:	4b3d      	ldr	r3, [pc, #244]	; (800c798 <select_check_waiters+0x104>)
 800c6a4:	681b      	ldr	r3, [r3, #0]
 800c6a6:	617b      	str	r3, [r7, #20]
 800c6a8:	e06f      	b.n	800c78a <select_check_waiters+0xf6>
    if (scb->sem_signalled == 0) {
 800c6aa:	697b      	ldr	r3, [r7, #20]
 800c6ac:	69db      	ldr	r3, [r3, #28]
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	d168      	bne.n	800c784 <select_check_waiters+0xf0>
      /* semaphore not signalled yet */
      int do_signal = 0;
 800c6b2:	2300      	movs	r3, #0
 800c6b4:	613b      	str	r3, [r7, #16]
#if LWIP_SOCKET_POLL
      if (scb->poll_fds != NULL) {
 800c6b6:	697b      	ldr	r3, [r7, #20]
 800c6b8:	695b      	ldr	r3, [r3, #20]
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	d009      	beq.n	800c6d2 <select_check_waiters+0x3e>
        do_signal = lwip_poll_should_wake(scb, s, has_recvevent, has_sendevent, has_errevent);
 800c6be:	683b      	ldr	r3, [r7, #0]
 800c6c0:	9300      	str	r3, [sp, #0]
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	68ba      	ldr	r2, [r7, #8]
 800c6c6:	68f9      	ldr	r1, [r7, #12]
 800c6c8:	6978      	ldr	r0, [r7, #20]
 800c6ca:	f7ff fee3 	bl	800c494 <lwip_poll_should_wake>
 800c6ce:	6138      	str	r0, [r7, #16]
 800c6d0:	e04d      	b.n	800c76e <select_check_waiters+0xda>
      else
#endif /* LWIP_SOCKET_SELECT && LWIP_SOCKET_POLL */
#if LWIP_SOCKET_SELECT
      {
        /* Test this select call for our socket */
        if (has_recvevent) {
 800c6d2:	68bb      	ldr	r3, [r7, #8]
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	d014      	beq.n	800c702 <select_check_waiters+0x6e>
          if (scb->readset && FD_ISSET(s, scb->readset)) {
 800c6d8:	697b      	ldr	r3, [r7, #20]
 800c6da:	689b      	ldr	r3, [r3, #8]
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	d010      	beq.n	800c702 <select_check_waiters+0x6e>
 800c6e0:	697b      	ldr	r3, [r7, #20]
 800c6e2:	689b      	ldr	r3, [r3, #8]
 800c6e4:	68fa      	ldr	r2, [r7, #12]
 800c6e6:	0952      	lsrs	r2, r2, #5
 800c6e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c6ec:	68fa      	ldr	r2, [r7, #12]
 800c6ee:	f002 021f 	and.w	r2, r2, #31
 800c6f2:	2101      	movs	r1, #1
 800c6f4:	fa01 f202 	lsl.w	r2, r1, r2
 800c6f8:	4013      	ands	r3, r2
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	d001      	beq.n	800c702 <select_check_waiters+0x6e>
            do_signal = 1;
 800c6fe:	2301      	movs	r3, #1
 800c700:	613b      	str	r3, [r7, #16]
          }
        }
        if (has_sendevent) {
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	2b00      	cmp	r3, #0
 800c706:	d017      	beq.n	800c738 <select_check_waiters+0xa4>
          if (!do_signal && scb->writeset && FD_ISSET(s, scb->writeset)) {
 800c708:	693b      	ldr	r3, [r7, #16]
 800c70a:	2b00      	cmp	r3, #0
 800c70c:	d114      	bne.n	800c738 <select_check_waiters+0xa4>
 800c70e:	697b      	ldr	r3, [r7, #20]
 800c710:	68db      	ldr	r3, [r3, #12]
 800c712:	2b00      	cmp	r3, #0
 800c714:	d010      	beq.n	800c738 <select_check_waiters+0xa4>
 800c716:	697b      	ldr	r3, [r7, #20]
 800c718:	68db      	ldr	r3, [r3, #12]
 800c71a:	68fa      	ldr	r2, [r7, #12]
 800c71c:	0952      	lsrs	r2, r2, #5
 800c71e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c722:	68fa      	ldr	r2, [r7, #12]
 800c724:	f002 021f 	and.w	r2, r2, #31
 800c728:	2101      	movs	r1, #1
 800c72a:	fa01 f202 	lsl.w	r2, r1, r2
 800c72e:	4013      	ands	r3, r2
 800c730:	2b00      	cmp	r3, #0
 800c732:	d001      	beq.n	800c738 <select_check_waiters+0xa4>
            do_signal = 1;
 800c734:	2301      	movs	r3, #1
 800c736:	613b      	str	r3, [r7, #16]
          }
        }
        if (has_errevent) {
 800c738:	683b      	ldr	r3, [r7, #0]
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	d017      	beq.n	800c76e <select_check_waiters+0xda>
          if (!do_signal && scb->exceptset && FD_ISSET(s, scb->exceptset)) {
 800c73e:	693b      	ldr	r3, [r7, #16]
 800c740:	2b00      	cmp	r3, #0
 800c742:	d114      	bne.n	800c76e <select_check_waiters+0xda>
 800c744:	697b      	ldr	r3, [r7, #20]
 800c746:	691b      	ldr	r3, [r3, #16]
 800c748:	2b00      	cmp	r3, #0
 800c74a:	d010      	beq.n	800c76e <select_check_waiters+0xda>
 800c74c:	697b      	ldr	r3, [r7, #20]
 800c74e:	691b      	ldr	r3, [r3, #16]
 800c750:	68fa      	ldr	r2, [r7, #12]
 800c752:	0952      	lsrs	r2, r2, #5
 800c754:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c758:	68fa      	ldr	r2, [r7, #12]
 800c75a:	f002 021f 	and.w	r2, r2, #31
 800c75e:	2101      	movs	r1, #1
 800c760:	fa01 f202 	lsl.w	r2, r1, r2
 800c764:	4013      	ands	r3, r2
 800c766:	2b00      	cmp	r3, #0
 800c768:	d001      	beq.n	800c76e <select_check_waiters+0xda>
            do_signal = 1;
 800c76a:	2301      	movs	r3, #1
 800c76c:	613b      	str	r3, [r7, #16]
          }
        }
      }
#endif /* LWIP_SOCKET_SELECT */
      if (do_signal) {
 800c76e:	693b      	ldr	r3, [r7, #16]
 800c770:	2b00      	cmp	r3, #0
 800c772:	d007      	beq.n	800c784 <select_check_waiters+0xf0>
        scb->sem_signalled = 1;
 800c774:	697b      	ldr	r3, [r7, #20]
 800c776:	2201      	movs	r2, #1
 800c778:	61da      	str	r2, [r3, #28]
        /* For !LWIP_TCPIP_CORE_LOCKING, we don't call SYS_ARCH_UNPROTECT() before signaling
           the semaphore, as this might lead to the select thread taking itself off the list,
           invalidating the semaphore. */
        sys_sem_signal(SELECT_SEM_PTR(scb->sem));
 800c77a:	697b      	ldr	r3, [r7, #20]
 800c77c:	3320      	adds	r3, #32
 800c77e:	4618      	mov	r0, r3
 800c780:	f00a fdfe 	bl	8017380 <sys_sem_signal>
  for (scb = select_cb_list; scb != NULL; scb = scb->next) {
 800c784:	697b      	ldr	r3, [r7, #20]
 800c786:	681b      	ldr	r3, [r3, #0]
 800c788:	617b      	str	r3, [r7, #20]
 800c78a:	697b      	ldr	r3, [r7, #20]
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	d18c      	bne.n	800c6aa <select_check_waiters+0x16>
    /* remember the state of select_cb_list to detect changes */
    last_select_cb_ctr = select_cb_ctr;
  }
  SYS_ARCH_UNPROTECT(lev);
#endif
}
 800c790:	bf00      	nop
 800c792:	3718      	adds	r7, #24
 800c794:	46bd      	mov	sp, r7
 800c796:	bd80      	pop	{r7, pc}
 800c798:	200045f4 	.word	0x200045f4

0800c79c <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800c79c:	b580      	push	{r7, lr}
 800c79e:	b084      	sub	sp, #16
 800c7a0:	af00      	add	r7, sp, #0
 800c7a2:	6078      	str	r0, [r7, #4]
 800c7a4:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800c7a6:	f008 f9e1 	bl	8014b6c <sys_timeouts_sleeptime>
 800c7aa:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800c7ac:	68fb      	ldr	r3, [r7, #12]
 800c7ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c7b2:	d10b      	bne.n	800c7cc <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800c7b4:	4813      	ldr	r0, [pc, #76]	; (800c804 <tcpip_timeouts_mbox_fetch+0x68>)
 800c7b6:	f00a fe54 	bl	8017462 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800c7ba:	2200      	movs	r2, #0
 800c7bc:	6839      	ldr	r1, [r7, #0]
 800c7be:	6878      	ldr	r0, [r7, #4]
 800c7c0:	f00a fd0c 	bl	80171dc <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800c7c4:	480f      	ldr	r0, [pc, #60]	; (800c804 <tcpip_timeouts_mbox_fetch+0x68>)
 800c7c6:	f00a fe3d 	bl	8017444 <sys_mutex_lock>
    return;
 800c7ca:	e018      	b.n	800c7fe <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800c7cc:	68fb      	ldr	r3, [r7, #12]
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	d102      	bne.n	800c7d8 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800c7d2:	f008 f991 	bl	8014af8 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800c7d6:	e7e6      	b.n	800c7a6 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800c7d8:	480a      	ldr	r0, [pc, #40]	; (800c804 <tcpip_timeouts_mbox_fetch+0x68>)
 800c7da:	f00a fe42 	bl	8017462 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800c7de:	68fa      	ldr	r2, [r7, #12]
 800c7e0:	6839      	ldr	r1, [r7, #0]
 800c7e2:	6878      	ldr	r0, [r7, #4]
 800c7e4:	f00a fcfa 	bl	80171dc <sys_arch_mbox_fetch>
 800c7e8:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800c7ea:	4806      	ldr	r0, [pc, #24]	; (800c804 <tcpip_timeouts_mbox_fetch+0x68>)
 800c7ec:	f00a fe2a 	bl	8017444 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800c7f0:	68bb      	ldr	r3, [r7, #8]
 800c7f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c7f6:	d102      	bne.n	800c7fe <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800c7f8:	f008 f97e 	bl	8014af8 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800c7fc:	e7d3      	b.n	800c7a6 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800c7fe:	3710      	adds	r7, #16
 800c800:	46bd      	mov	sp, r7
 800c802:	bd80      	pop	{r7, pc}
 800c804:	20007a34 	.word	0x20007a34

0800c808 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800c808:	b580      	push	{r7, lr}
 800c80a:	b084      	sub	sp, #16
 800c80c:	af00      	add	r7, sp, #0
 800c80e:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800c810:	4810      	ldr	r0, [pc, #64]	; (800c854 <tcpip_thread+0x4c>)
 800c812:	f00a fe17 	bl	8017444 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800c816:	4b10      	ldr	r3, [pc, #64]	; (800c858 <tcpip_thread+0x50>)
 800c818:	681b      	ldr	r3, [r3, #0]
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	d005      	beq.n	800c82a <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800c81e:	4b0e      	ldr	r3, [pc, #56]	; (800c858 <tcpip_thread+0x50>)
 800c820:	681b      	ldr	r3, [r3, #0]
 800c822:	4a0e      	ldr	r2, [pc, #56]	; (800c85c <tcpip_thread+0x54>)
 800c824:	6812      	ldr	r2, [r2, #0]
 800c826:	4610      	mov	r0, r2
 800c828:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800c82a:	f107 030c 	add.w	r3, r7, #12
 800c82e:	4619      	mov	r1, r3
 800c830:	480b      	ldr	r0, [pc, #44]	; (800c860 <tcpip_thread+0x58>)
 800c832:	f7ff ffb3 	bl	800c79c <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800c836:	68fb      	ldr	r3, [r7, #12]
 800c838:	2b00      	cmp	r3, #0
 800c83a:	d106      	bne.n	800c84a <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800c83c:	4b09      	ldr	r3, [pc, #36]	; (800c864 <tcpip_thread+0x5c>)
 800c83e:	2291      	movs	r2, #145	; 0x91
 800c840:	4909      	ldr	r1, [pc, #36]	; (800c868 <tcpip_thread+0x60>)
 800c842:	480a      	ldr	r0, [pc, #40]	; (800c86c <tcpip_thread+0x64>)
 800c844:	f00a feb8 	bl	80175b8 <iprintf>
      continue;
 800c848:	e003      	b.n	800c852 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800c84a:	68fb      	ldr	r3, [r7, #12]
 800c84c:	4618      	mov	r0, r3
 800c84e:	f000 f80f 	bl	800c870 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800c852:	e7ea      	b.n	800c82a <tcpip_thread+0x22>
 800c854:	20007a34 	.word	0x20007a34
 800c858:	200045f8 	.word	0x200045f8
 800c85c:	200045fc 	.word	0x200045fc
 800c860:	20004600 	.word	0x20004600
 800c864:	080191b8 	.word	0x080191b8
 800c868:	080191e8 	.word	0x080191e8
 800c86c:	08019208 	.word	0x08019208

0800c870 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800c870:	b580      	push	{r7, lr}
 800c872:	b082      	sub	sp, #8
 800c874:	af00      	add	r7, sp, #0
 800c876:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	781b      	ldrb	r3, [r3, #0]
 800c87c:	2b01      	cmp	r3, #1
 800c87e:	d018      	beq.n	800c8b2 <tcpip_thread_handle_msg+0x42>
 800c880:	2b02      	cmp	r3, #2
 800c882:	d021      	beq.n	800c8c8 <tcpip_thread_handle_msg+0x58>
 800c884:	2b00      	cmp	r3, #0
 800c886:	d126      	bne.n	800c8d6 <tcpip_thread_handle_msg+0x66>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	68db      	ldr	r3, [r3, #12]
 800c88c:	687a      	ldr	r2, [r7, #4]
 800c88e:	6850      	ldr	r0, [r2, #4]
 800c890:	687a      	ldr	r2, [r7, #4]
 800c892:	6892      	ldr	r2, [r2, #8]
 800c894:	4611      	mov	r1, r2
 800c896:	4798      	blx	r3
 800c898:	4603      	mov	r3, r0
 800c89a:	2b00      	cmp	r3, #0
 800c89c:	d004      	beq.n	800c8a8 <tcpip_thread_handle_msg+0x38>
        pbuf_free(msg->msg.inp.p);
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	685b      	ldr	r3, [r3, #4]
 800c8a2:	4618      	mov	r0, r3
 800c8a4:	f001 fd02 	bl	800e2ac <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800c8a8:	6879      	ldr	r1, [r7, #4]
 800c8aa:	2008      	movs	r0, #8
 800c8ac:	f000 fe30 	bl	800d510 <memp_free>
      break;
 800c8b0:	e018      	b.n	800c8e4 <tcpip_thread_handle_msg+0x74>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	685b      	ldr	r3, [r3, #4]
 800c8b6:	687a      	ldr	r2, [r7, #4]
 800c8b8:	6892      	ldr	r2, [r2, #8]
 800c8ba:	4610      	mov	r0, r2
 800c8bc:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800c8be:	6879      	ldr	r1, [r7, #4]
 800c8c0:	2007      	movs	r0, #7
 800c8c2:	f000 fe25 	bl	800d510 <memp_free>
      break;
 800c8c6:	e00d      	b.n	800c8e4 <tcpip_thread_handle_msg+0x74>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	685b      	ldr	r3, [r3, #4]
 800c8cc:	687a      	ldr	r2, [r7, #4]
 800c8ce:	6892      	ldr	r2, [r2, #8]
 800c8d0:	4610      	mov	r0, r2
 800c8d2:	4798      	blx	r3
      break;
 800c8d4:	e006      	b.n	800c8e4 <tcpip_thread_handle_msg+0x74>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800c8d6:	4b05      	ldr	r3, [pc, #20]	; (800c8ec <tcpip_thread_handle_msg+0x7c>)
 800c8d8:	22cf      	movs	r2, #207	; 0xcf
 800c8da:	4905      	ldr	r1, [pc, #20]	; (800c8f0 <tcpip_thread_handle_msg+0x80>)
 800c8dc:	4805      	ldr	r0, [pc, #20]	; (800c8f4 <tcpip_thread_handle_msg+0x84>)
 800c8de:	f00a fe6b 	bl	80175b8 <iprintf>
      break;
 800c8e2:	bf00      	nop
  }
}
 800c8e4:	bf00      	nop
 800c8e6:	3708      	adds	r7, #8
 800c8e8:	46bd      	mov	sp, r7
 800c8ea:	bd80      	pop	{r7, pc}
 800c8ec:	080191b8 	.word	0x080191b8
 800c8f0:	080191e8 	.word	0x080191e8
 800c8f4:	08019208 	.word	0x08019208

0800c8f8 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800c8f8:	b580      	push	{r7, lr}
 800c8fa:	b086      	sub	sp, #24
 800c8fc:	af00      	add	r7, sp, #0
 800c8fe:	60f8      	str	r0, [r7, #12]
 800c900:	60b9      	str	r1, [r7, #8]
 800c902:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800c904:	481a      	ldr	r0, [pc, #104]	; (800c970 <tcpip_inpkt+0x78>)
 800c906:	f00a fcc4 	bl	8017292 <sys_mbox_valid>
 800c90a:	4603      	mov	r3, r0
 800c90c:	2b00      	cmp	r3, #0
 800c90e:	d105      	bne.n	800c91c <tcpip_inpkt+0x24>
 800c910:	4b18      	ldr	r3, [pc, #96]	; (800c974 <tcpip_inpkt+0x7c>)
 800c912:	22fc      	movs	r2, #252	; 0xfc
 800c914:	4918      	ldr	r1, [pc, #96]	; (800c978 <tcpip_inpkt+0x80>)
 800c916:	4819      	ldr	r0, [pc, #100]	; (800c97c <tcpip_inpkt+0x84>)
 800c918:	f00a fe4e 	bl	80175b8 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800c91c:	2008      	movs	r0, #8
 800c91e:	f000 fda5 	bl	800d46c <memp_malloc>
 800c922:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800c924:	697b      	ldr	r3, [r7, #20]
 800c926:	2b00      	cmp	r3, #0
 800c928:	d102      	bne.n	800c930 <tcpip_inpkt+0x38>
    return ERR_MEM;
 800c92a:	f04f 33ff 	mov.w	r3, #4294967295
 800c92e:	e01a      	b.n	800c966 <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800c930:	697b      	ldr	r3, [r7, #20]
 800c932:	2200      	movs	r2, #0
 800c934:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800c936:	697b      	ldr	r3, [r7, #20]
 800c938:	68fa      	ldr	r2, [r7, #12]
 800c93a:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800c93c:	697b      	ldr	r3, [r7, #20]
 800c93e:	68ba      	ldr	r2, [r7, #8]
 800c940:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800c942:	697b      	ldr	r3, [r7, #20]
 800c944:	687a      	ldr	r2, [r7, #4]
 800c946:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800c948:	6979      	ldr	r1, [r7, #20]
 800c94a:	4809      	ldr	r0, [pc, #36]	; (800c970 <tcpip_inpkt+0x78>)
 800c94c:	f00a fc2c 	bl	80171a8 <sys_mbox_trypost>
 800c950:	4603      	mov	r3, r0
 800c952:	2b00      	cmp	r3, #0
 800c954:	d006      	beq.n	800c964 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800c956:	6979      	ldr	r1, [r7, #20]
 800c958:	2008      	movs	r0, #8
 800c95a:	f000 fdd9 	bl	800d510 <memp_free>
    return ERR_MEM;
 800c95e:	f04f 33ff 	mov.w	r3, #4294967295
 800c962:	e000      	b.n	800c966 <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800c964:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800c966:	4618      	mov	r0, r3
 800c968:	3718      	adds	r7, #24
 800c96a:	46bd      	mov	sp, r7
 800c96c:	bd80      	pop	{r7, pc}
 800c96e:	bf00      	nop
 800c970:	20004600 	.word	0x20004600
 800c974:	080191b8 	.word	0x080191b8
 800c978:	08019230 	.word	0x08019230
 800c97c:	08019208 	.word	0x08019208

0800c980 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800c980:	b580      	push	{r7, lr}
 800c982:	b082      	sub	sp, #8
 800c984:	af00      	add	r7, sp, #0
 800c986:	6078      	str	r0, [r7, #4]
 800c988:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800c98a:	683b      	ldr	r3, [r7, #0]
 800c98c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c990:	f003 0318 	and.w	r3, r3, #24
 800c994:	2b00      	cmp	r3, #0
 800c996:	d006      	beq.n	800c9a6 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800c998:	4a08      	ldr	r2, [pc, #32]	; (800c9bc <tcpip_input+0x3c>)
 800c99a:	6839      	ldr	r1, [r7, #0]
 800c99c:	6878      	ldr	r0, [r7, #4]
 800c99e:	f7ff ffab 	bl	800c8f8 <tcpip_inpkt>
 800c9a2:	4603      	mov	r3, r0
 800c9a4:	e005      	b.n	800c9b2 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800c9a6:	4a06      	ldr	r2, [pc, #24]	; (800c9c0 <tcpip_input+0x40>)
 800c9a8:	6839      	ldr	r1, [r7, #0]
 800c9aa:	6878      	ldr	r0, [r7, #4]
 800c9ac:	f7ff ffa4 	bl	800c8f8 <tcpip_inpkt>
 800c9b0:	4603      	mov	r3, r0
}
 800c9b2:	4618      	mov	r0, r3
 800c9b4:	3708      	adds	r7, #8
 800c9b6:	46bd      	mov	sp, r7
 800c9b8:	bd80      	pop	{r7, pc}
 800c9ba:	bf00      	nop
 800c9bc:	08016f95 	.word	0x08016f95
 800c9c0:	08015ec5 	.word	0x08015ec5

0800c9c4 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800c9c4:	b580      	push	{r7, lr}
 800c9c6:	b084      	sub	sp, #16
 800c9c8:	af00      	add	r7, sp, #0
 800c9ca:	6078      	str	r0, [r7, #4]
 800c9cc:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800c9ce:	4819      	ldr	r0, [pc, #100]	; (800ca34 <tcpip_try_callback+0x70>)
 800c9d0:	f00a fc5f 	bl	8017292 <sys_mbox_valid>
 800c9d4:	4603      	mov	r3, r0
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	d106      	bne.n	800c9e8 <tcpip_try_callback+0x24>
 800c9da:	4b17      	ldr	r3, [pc, #92]	; (800ca38 <tcpip_try_callback+0x74>)
 800c9dc:	f240 125d 	movw	r2, #349	; 0x15d
 800c9e0:	4916      	ldr	r1, [pc, #88]	; (800ca3c <tcpip_try_callback+0x78>)
 800c9e2:	4817      	ldr	r0, [pc, #92]	; (800ca40 <tcpip_try_callback+0x7c>)
 800c9e4:	f00a fde8 	bl	80175b8 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800c9e8:	2007      	movs	r0, #7
 800c9ea:	f000 fd3f 	bl	800d46c <memp_malloc>
 800c9ee:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800c9f0:	68fb      	ldr	r3, [r7, #12]
 800c9f2:	2b00      	cmp	r3, #0
 800c9f4:	d102      	bne.n	800c9fc <tcpip_try_callback+0x38>
    return ERR_MEM;
 800c9f6:	f04f 33ff 	mov.w	r3, #4294967295
 800c9fa:	e017      	b.n	800ca2c <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800c9fc:	68fb      	ldr	r3, [r7, #12]
 800c9fe:	2201      	movs	r2, #1
 800ca00:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800ca02:	68fb      	ldr	r3, [r7, #12]
 800ca04:	687a      	ldr	r2, [r7, #4]
 800ca06:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800ca08:	68fb      	ldr	r3, [r7, #12]
 800ca0a:	683a      	ldr	r2, [r7, #0]
 800ca0c:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800ca0e:	68f9      	ldr	r1, [r7, #12]
 800ca10:	4808      	ldr	r0, [pc, #32]	; (800ca34 <tcpip_try_callback+0x70>)
 800ca12:	f00a fbc9 	bl	80171a8 <sys_mbox_trypost>
 800ca16:	4603      	mov	r3, r0
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	d006      	beq.n	800ca2a <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800ca1c:	68f9      	ldr	r1, [r7, #12]
 800ca1e:	2007      	movs	r0, #7
 800ca20:	f000 fd76 	bl	800d510 <memp_free>
    return ERR_MEM;
 800ca24:	f04f 33ff 	mov.w	r3, #4294967295
 800ca28:	e000      	b.n	800ca2c <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800ca2a:	2300      	movs	r3, #0
}
 800ca2c:	4618      	mov	r0, r3
 800ca2e:	3710      	adds	r7, #16
 800ca30:	46bd      	mov	sp, r7
 800ca32:	bd80      	pop	{r7, pc}
 800ca34:	20004600 	.word	0x20004600
 800ca38:	080191b8 	.word	0x080191b8
 800ca3c:	08019230 	.word	0x08019230
 800ca40:	08019208 	.word	0x08019208

0800ca44 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 800ca44:	b580      	push	{r7, lr}
 800ca46:	b084      	sub	sp, #16
 800ca48:	af00      	add	r7, sp, #0
 800ca4a:	60f8      	str	r0, [r7, #12]
 800ca4c:	60b9      	str	r1, [r7, #8]
 800ca4e:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 800ca50:	4806      	ldr	r0, [pc, #24]	; (800ca6c <tcpip_send_msg_wait_sem+0x28>)
 800ca52:	f00a fcf7 	bl	8017444 <sys_mutex_lock>
  fn(apimsg);
 800ca56:	68fb      	ldr	r3, [r7, #12]
 800ca58:	68b8      	ldr	r0, [r7, #8]
 800ca5a:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 800ca5c:	4803      	ldr	r0, [pc, #12]	; (800ca6c <tcpip_send_msg_wait_sem+0x28>)
 800ca5e:	f00a fd00 	bl	8017462 <sys_mutex_unlock>
  return ERR_OK;
 800ca62:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 800ca64:	4618      	mov	r0, r3
 800ca66:	3710      	adds	r7, #16
 800ca68:	46bd      	mov	sp, r7
 800ca6a:	bd80      	pop	{r7, pc}
 800ca6c:	20007a34 	.word	0x20007a34

0800ca70 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800ca70:	b580      	push	{r7, lr}
 800ca72:	b084      	sub	sp, #16
 800ca74:	af02      	add	r7, sp, #8
 800ca76:	6078      	str	r0, [r7, #4]
 800ca78:	6039      	str	r1, [r7, #0]
  lwip_init();
 800ca7a:	f000 f871 	bl	800cb60 <lwip_init>

  tcpip_init_done = initfunc;
 800ca7e:	4a17      	ldr	r2, [pc, #92]	; (800cadc <tcpip_init+0x6c>)
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800ca84:	4a16      	ldr	r2, [pc, #88]	; (800cae0 <tcpip_init+0x70>)
 800ca86:	683b      	ldr	r3, [r7, #0]
 800ca88:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800ca8a:	2106      	movs	r1, #6
 800ca8c:	4815      	ldr	r0, [pc, #84]	; (800cae4 <tcpip_init+0x74>)
 800ca8e:	f00a fb57 	bl	8017140 <sys_mbox_new>
 800ca92:	4603      	mov	r3, r0
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	d006      	beq.n	800caa6 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800ca98:	4b13      	ldr	r3, [pc, #76]	; (800cae8 <tcpip_init+0x78>)
 800ca9a:	f240 2261 	movw	r2, #609	; 0x261
 800ca9e:	4913      	ldr	r1, [pc, #76]	; (800caec <tcpip_init+0x7c>)
 800caa0:	4813      	ldr	r0, [pc, #76]	; (800caf0 <tcpip_init+0x80>)
 800caa2:	f00a fd89 	bl	80175b8 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800caa6:	4813      	ldr	r0, [pc, #76]	; (800caf4 <tcpip_init+0x84>)
 800caa8:	f00a fcb0 	bl	801740c <sys_mutex_new>
 800caac:	4603      	mov	r3, r0
 800caae:	2b00      	cmp	r3, #0
 800cab0:	d006      	beq.n	800cac0 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800cab2:	4b0d      	ldr	r3, [pc, #52]	; (800cae8 <tcpip_init+0x78>)
 800cab4:	f240 2265 	movw	r2, #613	; 0x265
 800cab8:	490f      	ldr	r1, [pc, #60]	; (800caf8 <tcpip_init+0x88>)
 800caba:	480d      	ldr	r0, [pc, #52]	; (800caf0 <tcpip_init+0x80>)
 800cabc:	f00a fd7c 	bl	80175b8 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800cac0:	2300      	movs	r3, #0
 800cac2:	9300      	str	r3, [sp, #0]
 800cac4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cac8:	2200      	movs	r2, #0
 800caca:	490c      	ldr	r1, [pc, #48]	; (800cafc <tcpip_init+0x8c>)
 800cacc:	480c      	ldr	r0, [pc, #48]	; (800cb00 <tcpip_init+0x90>)
 800cace:	f00a fcd5 	bl	801747c <sys_thread_new>
}
 800cad2:	bf00      	nop
 800cad4:	3708      	adds	r7, #8
 800cad6:	46bd      	mov	sp, r7
 800cad8:	bd80      	pop	{r7, pc}
 800cada:	bf00      	nop
 800cadc:	200045f8 	.word	0x200045f8
 800cae0:	200045fc 	.word	0x200045fc
 800cae4:	20004600 	.word	0x20004600
 800cae8:	080191b8 	.word	0x080191b8
 800caec:	08019240 	.word	0x08019240
 800caf0:	08019208 	.word	0x08019208
 800caf4:	20007a34 	.word	0x20007a34
 800caf8:	08019264 	.word	0x08019264
 800cafc:	0800c809 	.word	0x0800c809
 800cb00:	08019288 	.word	0x08019288

0800cb04 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800cb04:	b480      	push	{r7}
 800cb06:	b083      	sub	sp, #12
 800cb08:	af00      	add	r7, sp, #0
 800cb0a:	4603      	mov	r3, r0
 800cb0c:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800cb0e:	88fb      	ldrh	r3, [r7, #6]
 800cb10:	021b      	lsls	r3, r3, #8
 800cb12:	b21a      	sxth	r2, r3
 800cb14:	88fb      	ldrh	r3, [r7, #6]
 800cb16:	0a1b      	lsrs	r3, r3, #8
 800cb18:	b29b      	uxth	r3, r3
 800cb1a:	b21b      	sxth	r3, r3
 800cb1c:	4313      	orrs	r3, r2
 800cb1e:	b21b      	sxth	r3, r3
 800cb20:	b29b      	uxth	r3, r3
}
 800cb22:	4618      	mov	r0, r3
 800cb24:	370c      	adds	r7, #12
 800cb26:	46bd      	mov	sp, r7
 800cb28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb2c:	4770      	bx	lr

0800cb2e <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800cb2e:	b480      	push	{r7}
 800cb30:	b083      	sub	sp, #12
 800cb32:	af00      	add	r7, sp, #0
 800cb34:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	061a      	lsls	r2, r3, #24
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	021b      	lsls	r3, r3, #8
 800cb3e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800cb42:	431a      	orrs	r2, r3
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	0a1b      	lsrs	r3, r3, #8
 800cb48:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800cb4c:	431a      	orrs	r2, r3
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	0e1b      	lsrs	r3, r3, #24
 800cb52:	4313      	orrs	r3, r2
}
 800cb54:	4618      	mov	r0, r3
 800cb56:	370c      	adds	r7, #12
 800cb58:	46bd      	mov	sp, r7
 800cb5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb5e:	4770      	bx	lr

0800cb60 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800cb60:	b580      	push	{r7, lr}
 800cb62:	b082      	sub	sp, #8
 800cb64:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800cb66:	2300      	movs	r3, #0
 800cb68:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800cb6a:	f00a fc41 	bl	80173f0 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800cb6e:	f000 f8d3 	bl	800cd18 <mem_init>
  memp_init();
 800cb72:	f000 fc2f 	bl	800d3d4 <memp_init>
  pbuf_init();
  netif_init();
 800cb76:	f000 fcf5 	bl	800d564 <netif_init>
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800cb7a:	f001 fe31 	bl	800e7e0 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800cb7e:	f007 ff75 	bl	8014a6c <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800cb82:	bf00      	nop
 800cb84:	3708      	adds	r7, #8
 800cb86:	46bd      	mov	sp, r7
 800cb88:	bd80      	pop	{r7, pc}
	...

0800cb8c <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800cb8c:	b480      	push	{r7}
 800cb8e:	b083      	sub	sp, #12
 800cb90:	af00      	add	r7, sp, #0
 800cb92:	4603      	mov	r3, r0
 800cb94:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800cb96:	4b05      	ldr	r3, [pc, #20]	; (800cbac <ptr_to_mem+0x20>)
 800cb98:	681a      	ldr	r2, [r3, #0]
 800cb9a:	88fb      	ldrh	r3, [r7, #6]
 800cb9c:	4413      	add	r3, r2
}
 800cb9e:	4618      	mov	r0, r3
 800cba0:	370c      	adds	r7, #12
 800cba2:	46bd      	mov	sp, r7
 800cba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cba8:	4770      	bx	lr
 800cbaa:	bf00      	nop
 800cbac:	20004604 	.word	0x20004604

0800cbb0 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800cbb0:	b480      	push	{r7}
 800cbb2:	b083      	sub	sp, #12
 800cbb4:	af00      	add	r7, sp, #0
 800cbb6:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	4a05      	ldr	r2, [pc, #20]	; (800cbd0 <mem_to_ptr+0x20>)
 800cbbc:	6812      	ldr	r2, [r2, #0]
 800cbbe:	1a9b      	subs	r3, r3, r2
 800cbc0:	b29b      	uxth	r3, r3
}
 800cbc2:	4618      	mov	r0, r3
 800cbc4:	370c      	adds	r7, #12
 800cbc6:	46bd      	mov	sp, r7
 800cbc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbcc:	4770      	bx	lr
 800cbce:	bf00      	nop
 800cbd0:	20004604 	.word	0x20004604

0800cbd4 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800cbd4:	b590      	push	{r4, r7, lr}
 800cbd6:	b085      	sub	sp, #20
 800cbd8:	af00      	add	r7, sp, #0
 800cbda:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800cbdc:	4b45      	ldr	r3, [pc, #276]	; (800ccf4 <plug_holes+0x120>)
 800cbde:	681b      	ldr	r3, [r3, #0]
 800cbe0:	687a      	ldr	r2, [r7, #4]
 800cbe2:	429a      	cmp	r2, r3
 800cbe4:	d206      	bcs.n	800cbf4 <plug_holes+0x20>
 800cbe6:	4b44      	ldr	r3, [pc, #272]	; (800ccf8 <plug_holes+0x124>)
 800cbe8:	f240 12df 	movw	r2, #479	; 0x1df
 800cbec:	4943      	ldr	r1, [pc, #268]	; (800ccfc <plug_holes+0x128>)
 800cbee:	4844      	ldr	r0, [pc, #272]	; (800cd00 <plug_holes+0x12c>)
 800cbf0:	f00a fce2 	bl	80175b8 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800cbf4:	4b43      	ldr	r3, [pc, #268]	; (800cd04 <plug_holes+0x130>)
 800cbf6:	681b      	ldr	r3, [r3, #0]
 800cbf8:	687a      	ldr	r2, [r7, #4]
 800cbfa:	429a      	cmp	r2, r3
 800cbfc:	d306      	bcc.n	800cc0c <plug_holes+0x38>
 800cbfe:	4b3e      	ldr	r3, [pc, #248]	; (800ccf8 <plug_holes+0x124>)
 800cc00:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800cc04:	4940      	ldr	r1, [pc, #256]	; (800cd08 <plug_holes+0x134>)
 800cc06:	483e      	ldr	r0, [pc, #248]	; (800cd00 <plug_holes+0x12c>)
 800cc08:	f00a fcd6 	bl	80175b8 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	791b      	ldrb	r3, [r3, #4]
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	d006      	beq.n	800cc22 <plug_holes+0x4e>
 800cc14:	4b38      	ldr	r3, [pc, #224]	; (800ccf8 <plug_holes+0x124>)
 800cc16:	f240 12e1 	movw	r2, #481	; 0x1e1
 800cc1a:	493c      	ldr	r1, [pc, #240]	; (800cd0c <plug_holes+0x138>)
 800cc1c:	4838      	ldr	r0, [pc, #224]	; (800cd00 <plug_holes+0x12c>)
 800cc1e:	f00a fccb 	bl	80175b8 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	881b      	ldrh	r3, [r3, #0]
 800cc26:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800cc2a:	d906      	bls.n	800cc3a <plug_holes+0x66>
 800cc2c:	4b32      	ldr	r3, [pc, #200]	; (800ccf8 <plug_holes+0x124>)
 800cc2e:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800cc32:	4937      	ldr	r1, [pc, #220]	; (800cd10 <plug_holes+0x13c>)
 800cc34:	4832      	ldr	r0, [pc, #200]	; (800cd00 <plug_holes+0x12c>)
 800cc36:	f00a fcbf 	bl	80175b8 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	881b      	ldrh	r3, [r3, #0]
 800cc3e:	4618      	mov	r0, r3
 800cc40:	f7ff ffa4 	bl	800cb8c <ptr_to_mem>
 800cc44:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800cc46:	687a      	ldr	r2, [r7, #4]
 800cc48:	68fb      	ldr	r3, [r7, #12]
 800cc4a:	429a      	cmp	r2, r3
 800cc4c:	d024      	beq.n	800cc98 <plug_holes+0xc4>
 800cc4e:	68fb      	ldr	r3, [r7, #12]
 800cc50:	791b      	ldrb	r3, [r3, #4]
 800cc52:	2b00      	cmp	r3, #0
 800cc54:	d120      	bne.n	800cc98 <plug_holes+0xc4>
 800cc56:	4b2b      	ldr	r3, [pc, #172]	; (800cd04 <plug_holes+0x130>)
 800cc58:	681b      	ldr	r3, [r3, #0]
 800cc5a:	68fa      	ldr	r2, [r7, #12]
 800cc5c:	429a      	cmp	r2, r3
 800cc5e:	d01b      	beq.n	800cc98 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800cc60:	4b2c      	ldr	r3, [pc, #176]	; (800cd14 <plug_holes+0x140>)
 800cc62:	681b      	ldr	r3, [r3, #0]
 800cc64:	68fa      	ldr	r2, [r7, #12]
 800cc66:	429a      	cmp	r2, r3
 800cc68:	d102      	bne.n	800cc70 <plug_holes+0x9c>
      lfree = mem;
 800cc6a:	4a2a      	ldr	r2, [pc, #168]	; (800cd14 <plug_holes+0x140>)
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800cc70:	68fb      	ldr	r3, [r7, #12]
 800cc72:	881a      	ldrh	r2, [r3, #0]
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800cc78:	68fb      	ldr	r3, [r7, #12]
 800cc7a:	881b      	ldrh	r3, [r3, #0]
 800cc7c:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800cc80:	d00a      	beq.n	800cc98 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800cc82:	68fb      	ldr	r3, [r7, #12]
 800cc84:	881b      	ldrh	r3, [r3, #0]
 800cc86:	4618      	mov	r0, r3
 800cc88:	f7ff ff80 	bl	800cb8c <ptr_to_mem>
 800cc8c:	4604      	mov	r4, r0
 800cc8e:	6878      	ldr	r0, [r7, #4]
 800cc90:	f7ff ff8e 	bl	800cbb0 <mem_to_ptr>
 800cc94:	4603      	mov	r3, r0
 800cc96:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	885b      	ldrh	r3, [r3, #2]
 800cc9c:	4618      	mov	r0, r3
 800cc9e:	f7ff ff75 	bl	800cb8c <ptr_to_mem>
 800cca2:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800cca4:	68ba      	ldr	r2, [r7, #8]
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	429a      	cmp	r2, r3
 800ccaa:	d01f      	beq.n	800ccec <plug_holes+0x118>
 800ccac:	68bb      	ldr	r3, [r7, #8]
 800ccae:	791b      	ldrb	r3, [r3, #4]
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	d11b      	bne.n	800ccec <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800ccb4:	4b17      	ldr	r3, [pc, #92]	; (800cd14 <plug_holes+0x140>)
 800ccb6:	681b      	ldr	r3, [r3, #0]
 800ccb8:	687a      	ldr	r2, [r7, #4]
 800ccba:	429a      	cmp	r2, r3
 800ccbc:	d102      	bne.n	800ccc4 <plug_holes+0xf0>
      lfree = pmem;
 800ccbe:	4a15      	ldr	r2, [pc, #84]	; (800cd14 <plug_holes+0x140>)
 800ccc0:	68bb      	ldr	r3, [r7, #8]
 800ccc2:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	881a      	ldrh	r2, [r3, #0]
 800ccc8:	68bb      	ldr	r3, [r7, #8]
 800ccca:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	881b      	ldrh	r3, [r3, #0]
 800ccd0:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800ccd4:	d00a      	beq.n	800ccec <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	881b      	ldrh	r3, [r3, #0]
 800ccda:	4618      	mov	r0, r3
 800ccdc:	f7ff ff56 	bl	800cb8c <ptr_to_mem>
 800cce0:	4604      	mov	r4, r0
 800cce2:	68b8      	ldr	r0, [r7, #8]
 800cce4:	f7ff ff64 	bl	800cbb0 <mem_to_ptr>
 800cce8:	4603      	mov	r3, r0
 800ccea:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800ccec:	bf00      	nop
 800ccee:	3714      	adds	r7, #20
 800ccf0:	46bd      	mov	sp, r7
 800ccf2:	bd90      	pop	{r4, r7, pc}
 800ccf4:	20004604 	.word	0x20004604
 800ccf8:	08019298 	.word	0x08019298
 800ccfc:	080192c8 	.word	0x080192c8
 800cd00:	080192e0 	.word	0x080192e0
 800cd04:	20004608 	.word	0x20004608
 800cd08:	08019308 	.word	0x08019308
 800cd0c:	08019324 	.word	0x08019324
 800cd10:	08019340 	.word	0x08019340
 800cd14:	20004610 	.word	0x20004610

0800cd18 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800cd18:	b580      	push	{r7, lr}
 800cd1a:	b082      	sub	sp, #8
 800cd1c:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800cd1e:	4b1f      	ldr	r3, [pc, #124]	; (800cd9c <mem_init+0x84>)
 800cd20:	3303      	adds	r3, #3
 800cd22:	f023 0303 	bic.w	r3, r3, #3
 800cd26:	461a      	mov	r2, r3
 800cd28:	4b1d      	ldr	r3, [pc, #116]	; (800cda0 <mem_init+0x88>)
 800cd2a:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800cd2c:	4b1c      	ldr	r3, [pc, #112]	; (800cda0 <mem_init+0x88>)
 800cd2e:	681b      	ldr	r3, [r3, #0]
 800cd30:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800cd38:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	2200      	movs	r2, #0
 800cd3e:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	2200      	movs	r2, #0
 800cd44:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800cd46:	f44f 5020 	mov.w	r0, #10240	; 0x2800
 800cd4a:	f7ff ff1f 	bl	800cb8c <ptr_to_mem>
 800cd4e:	4602      	mov	r2, r0
 800cd50:	4b14      	ldr	r3, [pc, #80]	; (800cda4 <mem_init+0x8c>)
 800cd52:	601a      	str	r2, [r3, #0]
  ram_end->used = 1;
 800cd54:	4b13      	ldr	r3, [pc, #76]	; (800cda4 <mem_init+0x8c>)
 800cd56:	681b      	ldr	r3, [r3, #0]
 800cd58:	2201      	movs	r2, #1
 800cd5a:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800cd5c:	4b11      	ldr	r3, [pc, #68]	; (800cda4 <mem_init+0x8c>)
 800cd5e:	681b      	ldr	r3, [r3, #0]
 800cd60:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800cd64:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800cd66:	4b0f      	ldr	r3, [pc, #60]	; (800cda4 <mem_init+0x8c>)
 800cd68:	681b      	ldr	r3, [r3, #0]
 800cd6a:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800cd6e:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800cd70:	4b0b      	ldr	r3, [pc, #44]	; (800cda0 <mem_init+0x88>)
 800cd72:	681b      	ldr	r3, [r3, #0]
 800cd74:	4a0c      	ldr	r2, [pc, #48]	; (800cda8 <mem_init+0x90>)
 800cd76:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800cd78:	480c      	ldr	r0, [pc, #48]	; (800cdac <mem_init+0x94>)
 800cd7a:	f00a fb47 	bl	801740c <sys_mutex_new>
 800cd7e:	4603      	mov	r3, r0
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	d006      	beq.n	800cd92 <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800cd84:	4b0a      	ldr	r3, [pc, #40]	; (800cdb0 <mem_init+0x98>)
 800cd86:	f240 221f 	movw	r2, #543	; 0x21f
 800cd8a:	490a      	ldr	r1, [pc, #40]	; (800cdb4 <mem_init+0x9c>)
 800cd8c:	480a      	ldr	r0, [pc, #40]	; (800cdb8 <mem_init+0xa0>)
 800cd8e:	f00a fc13 	bl	80175b8 <iprintf>
  }
}
 800cd92:	bf00      	nop
 800cd94:	3708      	adds	r7, #8
 800cd96:	46bd      	mov	sp, r7
 800cd98:	bd80      	pop	{r7, pc}
 800cd9a:	bf00      	nop
 800cd9c:	20007a50 	.word	0x20007a50
 800cda0:	20004604 	.word	0x20004604
 800cda4:	20004608 	.word	0x20004608
 800cda8:	20004610 	.word	0x20004610
 800cdac:	2000460c 	.word	0x2000460c
 800cdb0:	08019298 	.word	0x08019298
 800cdb4:	0801936c 	.word	0x0801936c
 800cdb8:	080192e0 	.word	0x080192e0

0800cdbc <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800cdbc:	b580      	push	{r7, lr}
 800cdbe:	b086      	sub	sp, #24
 800cdc0:	af00      	add	r7, sp, #0
 800cdc2:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800cdc4:	6878      	ldr	r0, [r7, #4]
 800cdc6:	f7ff fef3 	bl	800cbb0 <mem_to_ptr>
 800cdca:	4603      	mov	r3, r0
 800cdcc:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	881b      	ldrh	r3, [r3, #0]
 800cdd2:	4618      	mov	r0, r3
 800cdd4:	f7ff feda 	bl	800cb8c <ptr_to_mem>
 800cdd8:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	885b      	ldrh	r3, [r3, #2]
 800cdde:	4618      	mov	r0, r3
 800cde0:	f7ff fed4 	bl	800cb8c <ptr_to_mem>
 800cde4:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	881b      	ldrh	r3, [r3, #0]
 800cdea:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800cdee:	d818      	bhi.n	800ce22 <mem_link_valid+0x66>
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	885b      	ldrh	r3, [r3, #2]
 800cdf4:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800cdf8:	d813      	bhi.n	800ce22 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800cdfe:	8afa      	ldrh	r2, [r7, #22]
 800ce00:	429a      	cmp	r2, r3
 800ce02:	d004      	beq.n	800ce0e <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800ce04:	68fb      	ldr	r3, [r7, #12]
 800ce06:	881b      	ldrh	r3, [r3, #0]
 800ce08:	8afa      	ldrh	r2, [r7, #22]
 800ce0a:	429a      	cmp	r2, r3
 800ce0c:	d109      	bne.n	800ce22 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800ce0e:	4b08      	ldr	r3, [pc, #32]	; (800ce30 <mem_link_valid+0x74>)
 800ce10:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800ce12:	693a      	ldr	r2, [r7, #16]
 800ce14:	429a      	cmp	r2, r3
 800ce16:	d006      	beq.n	800ce26 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800ce18:	693b      	ldr	r3, [r7, #16]
 800ce1a:	885b      	ldrh	r3, [r3, #2]
 800ce1c:	8afa      	ldrh	r2, [r7, #22]
 800ce1e:	429a      	cmp	r2, r3
 800ce20:	d001      	beq.n	800ce26 <mem_link_valid+0x6a>
    return 0;
 800ce22:	2300      	movs	r3, #0
 800ce24:	e000      	b.n	800ce28 <mem_link_valid+0x6c>
  }
  return 1;
 800ce26:	2301      	movs	r3, #1
}
 800ce28:	4618      	mov	r0, r3
 800ce2a:	3718      	adds	r7, #24
 800ce2c:	46bd      	mov	sp, r7
 800ce2e:	bd80      	pop	{r7, pc}
 800ce30:	20004608 	.word	0x20004608

0800ce34 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800ce34:	b580      	push	{r7, lr}
 800ce36:	b088      	sub	sp, #32
 800ce38:	af00      	add	r7, sp, #0
 800ce3a:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	2b00      	cmp	r3, #0
 800ce40:	d070      	beq.n	800cf24 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	f003 0303 	and.w	r3, r3, #3
 800ce48:	2b00      	cmp	r3, #0
 800ce4a:	d00d      	beq.n	800ce68 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800ce4c:	4b37      	ldr	r3, [pc, #220]	; (800cf2c <mem_free+0xf8>)
 800ce4e:	f240 2273 	movw	r2, #627	; 0x273
 800ce52:	4937      	ldr	r1, [pc, #220]	; (800cf30 <mem_free+0xfc>)
 800ce54:	4837      	ldr	r0, [pc, #220]	; (800cf34 <mem_free+0x100>)
 800ce56:	f00a fbaf 	bl	80175b8 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800ce5a:	f00a fb35 	bl	80174c8 <sys_arch_protect>
 800ce5e:	60f8      	str	r0, [r7, #12]
 800ce60:	68f8      	ldr	r0, [r7, #12]
 800ce62:	f00a fb3f 	bl	80174e4 <sys_arch_unprotect>
    return;
 800ce66:	e05e      	b.n	800cf26 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	3b08      	subs	r3, #8
 800ce6c:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800ce6e:	4b32      	ldr	r3, [pc, #200]	; (800cf38 <mem_free+0x104>)
 800ce70:	681b      	ldr	r3, [r3, #0]
 800ce72:	69fa      	ldr	r2, [r7, #28]
 800ce74:	429a      	cmp	r2, r3
 800ce76:	d306      	bcc.n	800ce86 <mem_free+0x52>
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	f103 020c 	add.w	r2, r3, #12
 800ce7e:	4b2f      	ldr	r3, [pc, #188]	; (800cf3c <mem_free+0x108>)
 800ce80:	681b      	ldr	r3, [r3, #0]
 800ce82:	429a      	cmp	r2, r3
 800ce84:	d90d      	bls.n	800cea2 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800ce86:	4b29      	ldr	r3, [pc, #164]	; (800cf2c <mem_free+0xf8>)
 800ce88:	f240 227f 	movw	r2, #639	; 0x27f
 800ce8c:	492c      	ldr	r1, [pc, #176]	; (800cf40 <mem_free+0x10c>)
 800ce8e:	4829      	ldr	r0, [pc, #164]	; (800cf34 <mem_free+0x100>)
 800ce90:	f00a fb92 	bl	80175b8 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800ce94:	f00a fb18 	bl	80174c8 <sys_arch_protect>
 800ce98:	6138      	str	r0, [r7, #16]
 800ce9a:	6938      	ldr	r0, [r7, #16]
 800ce9c:	f00a fb22 	bl	80174e4 <sys_arch_unprotect>
    return;
 800cea0:	e041      	b.n	800cf26 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800cea2:	4828      	ldr	r0, [pc, #160]	; (800cf44 <mem_free+0x110>)
 800cea4:	f00a face 	bl	8017444 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800cea8:	69fb      	ldr	r3, [r7, #28]
 800ceaa:	791b      	ldrb	r3, [r3, #4]
 800ceac:	2b00      	cmp	r3, #0
 800ceae:	d110      	bne.n	800ced2 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800ceb0:	4b1e      	ldr	r3, [pc, #120]	; (800cf2c <mem_free+0xf8>)
 800ceb2:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800ceb6:	4924      	ldr	r1, [pc, #144]	; (800cf48 <mem_free+0x114>)
 800ceb8:	481e      	ldr	r0, [pc, #120]	; (800cf34 <mem_free+0x100>)
 800ceba:	f00a fb7d 	bl	80175b8 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800cebe:	4821      	ldr	r0, [pc, #132]	; (800cf44 <mem_free+0x110>)
 800cec0:	f00a facf 	bl	8017462 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800cec4:	f00a fb00 	bl	80174c8 <sys_arch_protect>
 800cec8:	6178      	str	r0, [r7, #20]
 800ceca:	6978      	ldr	r0, [r7, #20]
 800cecc:	f00a fb0a 	bl	80174e4 <sys_arch_unprotect>
    return;
 800ced0:	e029      	b.n	800cf26 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800ced2:	69f8      	ldr	r0, [r7, #28]
 800ced4:	f7ff ff72 	bl	800cdbc <mem_link_valid>
 800ced8:	4603      	mov	r3, r0
 800ceda:	2b00      	cmp	r3, #0
 800cedc:	d110      	bne.n	800cf00 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800cede:	4b13      	ldr	r3, [pc, #76]	; (800cf2c <mem_free+0xf8>)
 800cee0:	f240 2295 	movw	r2, #661	; 0x295
 800cee4:	4919      	ldr	r1, [pc, #100]	; (800cf4c <mem_free+0x118>)
 800cee6:	4813      	ldr	r0, [pc, #76]	; (800cf34 <mem_free+0x100>)
 800cee8:	f00a fb66 	bl	80175b8 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800ceec:	4815      	ldr	r0, [pc, #84]	; (800cf44 <mem_free+0x110>)
 800ceee:	f00a fab8 	bl	8017462 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800cef2:	f00a fae9 	bl	80174c8 <sys_arch_protect>
 800cef6:	61b8      	str	r0, [r7, #24]
 800cef8:	69b8      	ldr	r0, [r7, #24]
 800cefa:	f00a faf3 	bl	80174e4 <sys_arch_unprotect>
    return;
 800cefe:	e012      	b.n	800cf26 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800cf00:	69fb      	ldr	r3, [r7, #28]
 800cf02:	2200      	movs	r2, #0
 800cf04:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800cf06:	4b12      	ldr	r3, [pc, #72]	; (800cf50 <mem_free+0x11c>)
 800cf08:	681b      	ldr	r3, [r3, #0]
 800cf0a:	69fa      	ldr	r2, [r7, #28]
 800cf0c:	429a      	cmp	r2, r3
 800cf0e:	d202      	bcs.n	800cf16 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800cf10:	4a0f      	ldr	r2, [pc, #60]	; (800cf50 <mem_free+0x11c>)
 800cf12:	69fb      	ldr	r3, [r7, #28]
 800cf14:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800cf16:	69f8      	ldr	r0, [r7, #28]
 800cf18:	f7ff fe5c 	bl	800cbd4 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800cf1c:	4809      	ldr	r0, [pc, #36]	; (800cf44 <mem_free+0x110>)
 800cf1e:	f00a faa0 	bl	8017462 <sys_mutex_unlock>
 800cf22:	e000      	b.n	800cf26 <mem_free+0xf2>
    return;
 800cf24:	bf00      	nop
}
 800cf26:	3720      	adds	r7, #32
 800cf28:	46bd      	mov	sp, r7
 800cf2a:	bd80      	pop	{r7, pc}
 800cf2c:	08019298 	.word	0x08019298
 800cf30:	08019388 	.word	0x08019388
 800cf34:	080192e0 	.word	0x080192e0
 800cf38:	20004604 	.word	0x20004604
 800cf3c:	20004608 	.word	0x20004608
 800cf40:	080193ac 	.word	0x080193ac
 800cf44:	2000460c 	.word	0x2000460c
 800cf48:	080193c8 	.word	0x080193c8
 800cf4c:	080193f0 	.word	0x080193f0
 800cf50:	20004610 	.word	0x20004610

0800cf54 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800cf54:	b580      	push	{r7, lr}
 800cf56:	b088      	sub	sp, #32
 800cf58:	af00      	add	r7, sp, #0
 800cf5a:	6078      	str	r0, [r7, #4]
 800cf5c:	460b      	mov	r3, r1
 800cf5e:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800cf60:	887b      	ldrh	r3, [r7, #2]
 800cf62:	3303      	adds	r3, #3
 800cf64:	b29b      	uxth	r3, r3
 800cf66:	f023 0303 	bic.w	r3, r3, #3
 800cf6a:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800cf6c:	8bfb      	ldrh	r3, [r7, #30]
 800cf6e:	2b0b      	cmp	r3, #11
 800cf70:	d801      	bhi.n	800cf76 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800cf72:	230c      	movs	r3, #12
 800cf74:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800cf76:	8bfb      	ldrh	r3, [r7, #30]
 800cf78:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800cf7c:	d803      	bhi.n	800cf86 <mem_trim+0x32>
 800cf7e:	8bfa      	ldrh	r2, [r7, #30]
 800cf80:	887b      	ldrh	r3, [r7, #2]
 800cf82:	429a      	cmp	r2, r3
 800cf84:	d201      	bcs.n	800cf8a <mem_trim+0x36>
    return NULL;
 800cf86:	2300      	movs	r3, #0
 800cf88:	e0d8      	b.n	800d13c <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800cf8a:	4b6e      	ldr	r3, [pc, #440]	; (800d144 <mem_trim+0x1f0>)
 800cf8c:	681b      	ldr	r3, [r3, #0]
 800cf8e:	687a      	ldr	r2, [r7, #4]
 800cf90:	429a      	cmp	r2, r3
 800cf92:	d304      	bcc.n	800cf9e <mem_trim+0x4a>
 800cf94:	4b6c      	ldr	r3, [pc, #432]	; (800d148 <mem_trim+0x1f4>)
 800cf96:	681b      	ldr	r3, [r3, #0]
 800cf98:	687a      	ldr	r2, [r7, #4]
 800cf9a:	429a      	cmp	r2, r3
 800cf9c:	d306      	bcc.n	800cfac <mem_trim+0x58>
 800cf9e:	4b6b      	ldr	r3, [pc, #428]	; (800d14c <mem_trim+0x1f8>)
 800cfa0:	f240 22d2 	movw	r2, #722	; 0x2d2
 800cfa4:	496a      	ldr	r1, [pc, #424]	; (800d150 <mem_trim+0x1fc>)
 800cfa6:	486b      	ldr	r0, [pc, #428]	; (800d154 <mem_trim+0x200>)
 800cfa8:	f00a fb06 	bl	80175b8 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800cfac:	4b65      	ldr	r3, [pc, #404]	; (800d144 <mem_trim+0x1f0>)
 800cfae:	681b      	ldr	r3, [r3, #0]
 800cfb0:	687a      	ldr	r2, [r7, #4]
 800cfb2:	429a      	cmp	r2, r3
 800cfb4:	d304      	bcc.n	800cfc0 <mem_trim+0x6c>
 800cfb6:	4b64      	ldr	r3, [pc, #400]	; (800d148 <mem_trim+0x1f4>)
 800cfb8:	681b      	ldr	r3, [r3, #0]
 800cfba:	687a      	ldr	r2, [r7, #4]
 800cfbc:	429a      	cmp	r2, r3
 800cfbe:	d307      	bcc.n	800cfd0 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800cfc0:	f00a fa82 	bl	80174c8 <sys_arch_protect>
 800cfc4:	60b8      	str	r0, [r7, #8]
 800cfc6:	68b8      	ldr	r0, [r7, #8]
 800cfc8:	f00a fa8c 	bl	80174e4 <sys_arch_unprotect>
    return rmem;
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	e0b5      	b.n	800d13c <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	3b08      	subs	r3, #8
 800cfd4:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800cfd6:	69b8      	ldr	r0, [r7, #24]
 800cfd8:	f7ff fdea 	bl	800cbb0 <mem_to_ptr>
 800cfdc:	4603      	mov	r3, r0
 800cfde:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800cfe0:	69bb      	ldr	r3, [r7, #24]
 800cfe2:	881a      	ldrh	r2, [r3, #0]
 800cfe4:	8afb      	ldrh	r3, [r7, #22]
 800cfe6:	1ad3      	subs	r3, r2, r3
 800cfe8:	b29b      	uxth	r3, r3
 800cfea:	3b08      	subs	r3, #8
 800cfec:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800cfee:	8bfa      	ldrh	r2, [r7, #30]
 800cff0:	8abb      	ldrh	r3, [r7, #20]
 800cff2:	429a      	cmp	r2, r3
 800cff4:	d906      	bls.n	800d004 <mem_trim+0xb0>
 800cff6:	4b55      	ldr	r3, [pc, #340]	; (800d14c <mem_trim+0x1f8>)
 800cff8:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800cffc:	4956      	ldr	r1, [pc, #344]	; (800d158 <mem_trim+0x204>)
 800cffe:	4855      	ldr	r0, [pc, #340]	; (800d154 <mem_trim+0x200>)
 800d000:	f00a fada 	bl	80175b8 <iprintf>
  if (newsize > size) {
 800d004:	8bfa      	ldrh	r2, [r7, #30]
 800d006:	8abb      	ldrh	r3, [r7, #20]
 800d008:	429a      	cmp	r2, r3
 800d00a:	d901      	bls.n	800d010 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800d00c:	2300      	movs	r3, #0
 800d00e:	e095      	b.n	800d13c <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800d010:	8bfa      	ldrh	r2, [r7, #30]
 800d012:	8abb      	ldrh	r3, [r7, #20]
 800d014:	429a      	cmp	r2, r3
 800d016:	d101      	bne.n	800d01c <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	e08f      	b.n	800d13c <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800d01c:	484f      	ldr	r0, [pc, #316]	; (800d15c <mem_trim+0x208>)
 800d01e:	f00a fa11 	bl	8017444 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800d022:	69bb      	ldr	r3, [r7, #24]
 800d024:	881b      	ldrh	r3, [r3, #0]
 800d026:	4618      	mov	r0, r3
 800d028:	f7ff fdb0 	bl	800cb8c <ptr_to_mem>
 800d02c:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800d02e:	693b      	ldr	r3, [r7, #16]
 800d030:	791b      	ldrb	r3, [r3, #4]
 800d032:	2b00      	cmp	r3, #0
 800d034:	d13f      	bne.n	800d0b6 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800d036:	69bb      	ldr	r3, [r7, #24]
 800d038:	881b      	ldrh	r3, [r3, #0]
 800d03a:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800d03e:	d106      	bne.n	800d04e <mem_trim+0xfa>
 800d040:	4b42      	ldr	r3, [pc, #264]	; (800d14c <mem_trim+0x1f8>)
 800d042:	f240 22f5 	movw	r2, #757	; 0x2f5
 800d046:	4946      	ldr	r1, [pc, #280]	; (800d160 <mem_trim+0x20c>)
 800d048:	4842      	ldr	r0, [pc, #264]	; (800d154 <mem_trim+0x200>)
 800d04a:	f00a fab5 	bl	80175b8 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800d04e:	693b      	ldr	r3, [r7, #16]
 800d050:	881b      	ldrh	r3, [r3, #0]
 800d052:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800d054:	8afa      	ldrh	r2, [r7, #22]
 800d056:	8bfb      	ldrh	r3, [r7, #30]
 800d058:	4413      	add	r3, r2
 800d05a:	b29b      	uxth	r3, r3
 800d05c:	3308      	adds	r3, #8
 800d05e:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800d060:	4b40      	ldr	r3, [pc, #256]	; (800d164 <mem_trim+0x210>)
 800d062:	681b      	ldr	r3, [r3, #0]
 800d064:	693a      	ldr	r2, [r7, #16]
 800d066:	429a      	cmp	r2, r3
 800d068:	d106      	bne.n	800d078 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800d06a:	89fb      	ldrh	r3, [r7, #14]
 800d06c:	4618      	mov	r0, r3
 800d06e:	f7ff fd8d 	bl	800cb8c <ptr_to_mem>
 800d072:	4602      	mov	r2, r0
 800d074:	4b3b      	ldr	r3, [pc, #236]	; (800d164 <mem_trim+0x210>)
 800d076:	601a      	str	r2, [r3, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800d078:	89fb      	ldrh	r3, [r7, #14]
 800d07a:	4618      	mov	r0, r3
 800d07c:	f7ff fd86 	bl	800cb8c <ptr_to_mem>
 800d080:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800d082:	693b      	ldr	r3, [r7, #16]
 800d084:	2200      	movs	r2, #0
 800d086:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800d088:	693b      	ldr	r3, [r7, #16]
 800d08a:	89ba      	ldrh	r2, [r7, #12]
 800d08c:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800d08e:	693b      	ldr	r3, [r7, #16]
 800d090:	8afa      	ldrh	r2, [r7, #22]
 800d092:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800d094:	69bb      	ldr	r3, [r7, #24]
 800d096:	89fa      	ldrh	r2, [r7, #14]
 800d098:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800d09a:	693b      	ldr	r3, [r7, #16]
 800d09c:	881b      	ldrh	r3, [r3, #0]
 800d09e:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800d0a2:	d047      	beq.n	800d134 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800d0a4:	693b      	ldr	r3, [r7, #16]
 800d0a6:	881b      	ldrh	r3, [r3, #0]
 800d0a8:	4618      	mov	r0, r3
 800d0aa:	f7ff fd6f 	bl	800cb8c <ptr_to_mem>
 800d0ae:	4602      	mov	r2, r0
 800d0b0:	89fb      	ldrh	r3, [r7, #14]
 800d0b2:	8053      	strh	r3, [r2, #2]
 800d0b4:	e03e      	b.n	800d134 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800d0b6:	8bfb      	ldrh	r3, [r7, #30]
 800d0b8:	f103 0214 	add.w	r2, r3, #20
 800d0bc:	8abb      	ldrh	r3, [r7, #20]
 800d0be:	429a      	cmp	r2, r3
 800d0c0:	d838      	bhi.n	800d134 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800d0c2:	8afa      	ldrh	r2, [r7, #22]
 800d0c4:	8bfb      	ldrh	r3, [r7, #30]
 800d0c6:	4413      	add	r3, r2
 800d0c8:	b29b      	uxth	r3, r3
 800d0ca:	3308      	adds	r3, #8
 800d0cc:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800d0ce:	69bb      	ldr	r3, [r7, #24]
 800d0d0:	881b      	ldrh	r3, [r3, #0]
 800d0d2:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800d0d6:	d106      	bne.n	800d0e6 <mem_trim+0x192>
 800d0d8:	4b1c      	ldr	r3, [pc, #112]	; (800d14c <mem_trim+0x1f8>)
 800d0da:	f240 3216 	movw	r2, #790	; 0x316
 800d0de:	4920      	ldr	r1, [pc, #128]	; (800d160 <mem_trim+0x20c>)
 800d0e0:	481c      	ldr	r0, [pc, #112]	; (800d154 <mem_trim+0x200>)
 800d0e2:	f00a fa69 	bl	80175b8 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800d0e6:	89fb      	ldrh	r3, [r7, #14]
 800d0e8:	4618      	mov	r0, r3
 800d0ea:	f7ff fd4f 	bl	800cb8c <ptr_to_mem>
 800d0ee:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800d0f0:	4b1c      	ldr	r3, [pc, #112]	; (800d164 <mem_trim+0x210>)
 800d0f2:	681b      	ldr	r3, [r3, #0]
 800d0f4:	693a      	ldr	r2, [r7, #16]
 800d0f6:	429a      	cmp	r2, r3
 800d0f8:	d202      	bcs.n	800d100 <mem_trim+0x1ac>
      lfree = mem2;
 800d0fa:	4a1a      	ldr	r2, [pc, #104]	; (800d164 <mem_trim+0x210>)
 800d0fc:	693b      	ldr	r3, [r7, #16]
 800d0fe:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800d100:	693b      	ldr	r3, [r7, #16]
 800d102:	2200      	movs	r2, #0
 800d104:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800d106:	69bb      	ldr	r3, [r7, #24]
 800d108:	881a      	ldrh	r2, [r3, #0]
 800d10a:	693b      	ldr	r3, [r7, #16]
 800d10c:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800d10e:	693b      	ldr	r3, [r7, #16]
 800d110:	8afa      	ldrh	r2, [r7, #22]
 800d112:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800d114:	69bb      	ldr	r3, [r7, #24]
 800d116:	89fa      	ldrh	r2, [r7, #14]
 800d118:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800d11a:	693b      	ldr	r3, [r7, #16]
 800d11c:	881b      	ldrh	r3, [r3, #0]
 800d11e:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800d122:	d007      	beq.n	800d134 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800d124:	693b      	ldr	r3, [r7, #16]
 800d126:	881b      	ldrh	r3, [r3, #0]
 800d128:	4618      	mov	r0, r3
 800d12a:	f7ff fd2f 	bl	800cb8c <ptr_to_mem>
 800d12e:	4602      	mov	r2, r0
 800d130:	89fb      	ldrh	r3, [r7, #14]
 800d132:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800d134:	4809      	ldr	r0, [pc, #36]	; (800d15c <mem_trim+0x208>)
 800d136:	f00a f994 	bl	8017462 <sys_mutex_unlock>
  return rmem;
 800d13a:	687b      	ldr	r3, [r7, #4]
}
 800d13c:	4618      	mov	r0, r3
 800d13e:	3720      	adds	r7, #32
 800d140:	46bd      	mov	sp, r7
 800d142:	bd80      	pop	{r7, pc}
 800d144:	20004604 	.word	0x20004604
 800d148:	20004608 	.word	0x20004608
 800d14c:	08019298 	.word	0x08019298
 800d150:	08019424 	.word	0x08019424
 800d154:	080192e0 	.word	0x080192e0
 800d158:	0801943c 	.word	0x0801943c
 800d15c:	2000460c 	.word	0x2000460c
 800d160:	0801945c 	.word	0x0801945c
 800d164:	20004610 	.word	0x20004610

0800d168 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800d168:	b580      	push	{r7, lr}
 800d16a:	b088      	sub	sp, #32
 800d16c:	af00      	add	r7, sp, #0
 800d16e:	4603      	mov	r3, r0
 800d170:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800d172:	88fb      	ldrh	r3, [r7, #6]
 800d174:	2b00      	cmp	r3, #0
 800d176:	d101      	bne.n	800d17c <mem_malloc+0x14>
    return NULL;
 800d178:	2300      	movs	r3, #0
 800d17a:	e0e2      	b.n	800d342 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800d17c:	88fb      	ldrh	r3, [r7, #6]
 800d17e:	3303      	adds	r3, #3
 800d180:	b29b      	uxth	r3, r3
 800d182:	f023 0303 	bic.w	r3, r3, #3
 800d186:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800d188:	8bbb      	ldrh	r3, [r7, #28]
 800d18a:	2b0b      	cmp	r3, #11
 800d18c:	d801      	bhi.n	800d192 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800d18e:	230c      	movs	r3, #12
 800d190:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800d192:	8bbb      	ldrh	r3, [r7, #28]
 800d194:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800d198:	d803      	bhi.n	800d1a2 <mem_malloc+0x3a>
 800d19a:	8bba      	ldrh	r2, [r7, #28]
 800d19c:	88fb      	ldrh	r3, [r7, #6]
 800d19e:	429a      	cmp	r2, r3
 800d1a0:	d201      	bcs.n	800d1a6 <mem_malloc+0x3e>
    return NULL;
 800d1a2:	2300      	movs	r3, #0
 800d1a4:	e0cd      	b.n	800d342 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800d1a6:	4869      	ldr	r0, [pc, #420]	; (800d34c <mem_malloc+0x1e4>)
 800d1a8:	f00a f94c 	bl	8017444 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800d1ac:	4b68      	ldr	r3, [pc, #416]	; (800d350 <mem_malloc+0x1e8>)
 800d1ae:	681b      	ldr	r3, [r3, #0]
 800d1b0:	4618      	mov	r0, r3
 800d1b2:	f7ff fcfd 	bl	800cbb0 <mem_to_ptr>
 800d1b6:	4603      	mov	r3, r0
 800d1b8:	83fb      	strh	r3, [r7, #30]
 800d1ba:	e0b7      	b.n	800d32c <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800d1bc:	8bfb      	ldrh	r3, [r7, #30]
 800d1be:	4618      	mov	r0, r3
 800d1c0:	f7ff fce4 	bl	800cb8c <ptr_to_mem>
 800d1c4:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800d1c6:	697b      	ldr	r3, [r7, #20]
 800d1c8:	791b      	ldrb	r3, [r3, #4]
 800d1ca:	2b00      	cmp	r3, #0
 800d1cc:	f040 80a7 	bne.w	800d31e <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800d1d0:	697b      	ldr	r3, [r7, #20]
 800d1d2:	881b      	ldrh	r3, [r3, #0]
 800d1d4:	461a      	mov	r2, r3
 800d1d6:	8bfb      	ldrh	r3, [r7, #30]
 800d1d8:	1ad3      	subs	r3, r2, r3
 800d1da:	f1a3 0208 	sub.w	r2, r3, #8
 800d1de:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800d1e0:	429a      	cmp	r2, r3
 800d1e2:	f0c0 809c 	bcc.w	800d31e <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800d1e6:	697b      	ldr	r3, [r7, #20]
 800d1e8:	881b      	ldrh	r3, [r3, #0]
 800d1ea:	461a      	mov	r2, r3
 800d1ec:	8bfb      	ldrh	r3, [r7, #30]
 800d1ee:	1ad3      	subs	r3, r2, r3
 800d1f0:	f1a3 0208 	sub.w	r2, r3, #8
 800d1f4:	8bbb      	ldrh	r3, [r7, #28]
 800d1f6:	3314      	adds	r3, #20
 800d1f8:	429a      	cmp	r2, r3
 800d1fa:	d333      	bcc.n	800d264 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800d1fc:	8bfa      	ldrh	r2, [r7, #30]
 800d1fe:	8bbb      	ldrh	r3, [r7, #28]
 800d200:	4413      	add	r3, r2
 800d202:	b29b      	uxth	r3, r3
 800d204:	3308      	adds	r3, #8
 800d206:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800d208:	8a7b      	ldrh	r3, [r7, #18]
 800d20a:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800d20e:	d106      	bne.n	800d21e <mem_malloc+0xb6>
 800d210:	4b50      	ldr	r3, [pc, #320]	; (800d354 <mem_malloc+0x1ec>)
 800d212:	f240 3287 	movw	r2, #903	; 0x387
 800d216:	4950      	ldr	r1, [pc, #320]	; (800d358 <mem_malloc+0x1f0>)
 800d218:	4850      	ldr	r0, [pc, #320]	; (800d35c <mem_malloc+0x1f4>)
 800d21a:	f00a f9cd 	bl	80175b8 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800d21e:	8a7b      	ldrh	r3, [r7, #18]
 800d220:	4618      	mov	r0, r3
 800d222:	f7ff fcb3 	bl	800cb8c <ptr_to_mem>
 800d226:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800d228:	68fb      	ldr	r3, [r7, #12]
 800d22a:	2200      	movs	r2, #0
 800d22c:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800d22e:	697b      	ldr	r3, [r7, #20]
 800d230:	881a      	ldrh	r2, [r3, #0]
 800d232:	68fb      	ldr	r3, [r7, #12]
 800d234:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800d236:	68fb      	ldr	r3, [r7, #12]
 800d238:	8bfa      	ldrh	r2, [r7, #30]
 800d23a:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800d23c:	697b      	ldr	r3, [r7, #20]
 800d23e:	8a7a      	ldrh	r2, [r7, #18]
 800d240:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800d242:	697b      	ldr	r3, [r7, #20]
 800d244:	2201      	movs	r2, #1
 800d246:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800d248:	68fb      	ldr	r3, [r7, #12]
 800d24a:	881b      	ldrh	r3, [r3, #0]
 800d24c:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800d250:	d00b      	beq.n	800d26a <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800d252:	68fb      	ldr	r3, [r7, #12]
 800d254:	881b      	ldrh	r3, [r3, #0]
 800d256:	4618      	mov	r0, r3
 800d258:	f7ff fc98 	bl	800cb8c <ptr_to_mem>
 800d25c:	4602      	mov	r2, r0
 800d25e:	8a7b      	ldrh	r3, [r7, #18]
 800d260:	8053      	strh	r3, [r2, #2]
 800d262:	e002      	b.n	800d26a <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800d264:	697b      	ldr	r3, [r7, #20]
 800d266:	2201      	movs	r2, #1
 800d268:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800d26a:	4b39      	ldr	r3, [pc, #228]	; (800d350 <mem_malloc+0x1e8>)
 800d26c:	681b      	ldr	r3, [r3, #0]
 800d26e:	697a      	ldr	r2, [r7, #20]
 800d270:	429a      	cmp	r2, r3
 800d272:	d127      	bne.n	800d2c4 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800d274:	4b36      	ldr	r3, [pc, #216]	; (800d350 <mem_malloc+0x1e8>)
 800d276:	681b      	ldr	r3, [r3, #0]
 800d278:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800d27a:	e005      	b.n	800d288 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800d27c:	69bb      	ldr	r3, [r7, #24]
 800d27e:	881b      	ldrh	r3, [r3, #0]
 800d280:	4618      	mov	r0, r3
 800d282:	f7ff fc83 	bl	800cb8c <ptr_to_mem>
 800d286:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800d288:	69bb      	ldr	r3, [r7, #24]
 800d28a:	791b      	ldrb	r3, [r3, #4]
 800d28c:	2b00      	cmp	r3, #0
 800d28e:	d004      	beq.n	800d29a <mem_malloc+0x132>
 800d290:	4b33      	ldr	r3, [pc, #204]	; (800d360 <mem_malloc+0x1f8>)
 800d292:	681b      	ldr	r3, [r3, #0]
 800d294:	69ba      	ldr	r2, [r7, #24]
 800d296:	429a      	cmp	r2, r3
 800d298:	d1f0      	bne.n	800d27c <mem_malloc+0x114>
          }
          lfree = cur;
 800d29a:	4a2d      	ldr	r2, [pc, #180]	; (800d350 <mem_malloc+0x1e8>)
 800d29c:	69bb      	ldr	r3, [r7, #24]
 800d29e:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800d2a0:	4b2b      	ldr	r3, [pc, #172]	; (800d350 <mem_malloc+0x1e8>)
 800d2a2:	681a      	ldr	r2, [r3, #0]
 800d2a4:	4b2e      	ldr	r3, [pc, #184]	; (800d360 <mem_malloc+0x1f8>)
 800d2a6:	681b      	ldr	r3, [r3, #0]
 800d2a8:	429a      	cmp	r2, r3
 800d2aa:	d00b      	beq.n	800d2c4 <mem_malloc+0x15c>
 800d2ac:	4b28      	ldr	r3, [pc, #160]	; (800d350 <mem_malloc+0x1e8>)
 800d2ae:	681b      	ldr	r3, [r3, #0]
 800d2b0:	791b      	ldrb	r3, [r3, #4]
 800d2b2:	2b00      	cmp	r3, #0
 800d2b4:	d006      	beq.n	800d2c4 <mem_malloc+0x15c>
 800d2b6:	4b27      	ldr	r3, [pc, #156]	; (800d354 <mem_malloc+0x1ec>)
 800d2b8:	f240 32b5 	movw	r2, #949	; 0x3b5
 800d2bc:	4929      	ldr	r1, [pc, #164]	; (800d364 <mem_malloc+0x1fc>)
 800d2be:	4827      	ldr	r0, [pc, #156]	; (800d35c <mem_malloc+0x1f4>)
 800d2c0:	f00a f97a 	bl	80175b8 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800d2c4:	4821      	ldr	r0, [pc, #132]	; (800d34c <mem_malloc+0x1e4>)
 800d2c6:	f00a f8cc 	bl	8017462 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800d2ca:	8bba      	ldrh	r2, [r7, #28]
 800d2cc:	697b      	ldr	r3, [r7, #20]
 800d2ce:	4413      	add	r3, r2
 800d2d0:	3308      	adds	r3, #8
 800d2d2:	4a23      	ldr	r2, [pc, #140]	; (800d360 <mem_malloc+0x1f8>)
 800d2d4:	6812      	ldr	r2, [r2, #0]
 800d2d6:	4293      	cmp	r3, r2
 800d2d8:	d906      	bls.n	800d2e8 <mem_malloc+0x180>
 800d2da:	4b1e      	ldr	r3, [pc, #120]	; (800d354 <mem_malloc+0x1ec>)
 800d2dc:	f240 32ba 	movw	r2, #954	; 0x3ba
 800d2e0:	4921      	ldr	r1, [pc, #132]	; (800d368 <mem_malloc+0x200>)
 800d2e2:	481e      	ldr	r0, [pc, #120]	; (800d35c <mem_malloc+0x1f4>)
 800d2e4:	f00a f968 	bl	80175b8 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800d2e8:	697b      	ldr	r3, [r7, #20]
 800d2ea:	f003 0303 	and.w	r3, r3, #3
 800d2ee:	2b00      	cmp	r3, #0
 800d2f0:	d006      	beq.n	800d300 <mem_malloc+0x198>
 800d2f2:	4b18      	ldr	r3, [pc, #96]	; (800d354 <mem_malloc+0x1ec>)
 800d2f4:	f44f 726f 	mov.w	r2, #956	; 0x3bc
 800d2f8:	491c      	ldr	r1, [pc, #112]	; (800d36c <mem_malloc+0x204>)
 800d2fa:	4818      	ldr	r0, [pc, #96]	; (800d35c <mem_malloc+0x1f4>)
 800d2fc:	f00a f95c 	bl	80175b8 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800d300:	697b      	ldr	r3, [r7, #20]
 800d302:	f003 0303 	and.w	r3, r3, #3
 800d306:	2b00      	cmp	r3, #0
 800d308:	d006      	beq.n	800d318 <mem_malloc+0x1b0>
 800d30a:	4b12      	ldr	r3, [pc, #72]	; (800d354 <mem_malloc+0x1ec>)
 800d30c:	f240 32be 	movw	r2, #958	; 0x3be
 800d310:	4917      	ldr	r1, [pc, #92]	; (800d370 <mem_malloc+0x208>)
 800d312:	4812      	ldr	r0, [pc, #72]	; (800d35c <mem_malloc+0x1f4>)
 800d314:	f00a f950 	bl	80175b8 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800d318:	697b      	ldr	r3, [r7, #20]
 800d31a:	3308      	adds	r3, #8
 800d31c:	e011      	b.n	800d342 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800d31e:	8bfb      	ldrh	r3, [r7, #30]
 800d320:	4618      	mov	r0, r3
 800d322:	f7ff fc33 	bl	800cb8c <ptr_to_mem>
 800d326:	4603      	mov	r3, r0
 800d328:	881b      	ldrh	r3, [r3, #0]
 800d32a:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800d32c:	8bfa      	ldrh	r2, [r7, #30]
 800d32e:	8bbb      	ldrh	r3, [r7, #28]
 800d330:	f5c3 5320 	rsb	r3, r3, #10240	; 0x2800
 800d334:	429a      	cmp	r2, r3
 800d336:	f4ff af41 	bcc.w	800d1bc <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800d33a:	4804      	ldr	r0, [pc, #16]	; (800d34c <mem_malloc+0x1e4>)
 800d33c:	f00a f891 	bl	8017462 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800d340:	2300      	movs	r3, #0
}
 800d342:	4618      	mov	r0, r3
 800d344:	3720      	adds	r7, #32
 800d346:	46bd      	mov	sp, r7
 800d348:	bd80      	pop	{r7, pc}
 800d34a:	bf00      	nop
 800d34c:	2000460c 	.word	0x2000460c
 800d350:	20004610 	.word	0x20004610
 800d354:	08019298 	.word	0x08019298
 800d358:	0801945c 	.word	0x0801945c
 800d35c:	080192e0 	.word	0x080192e0
 800d360:	20004608 	.word	0x20004608
 800d364:	08019470 	.word	0x08019470
 800d368:	0801948c 	.word	0x0801948c
 800d36c:	080194bc 	.word	0x080194bc
 800d370:	080194ec 	.word	0x080194ec

0800d374 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800d374:	b480      	push	{r7}
 800d376:	b085      	sub	sp, #20
 800d378:	af00      	add	r7, sp, #0
 800d37a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	689b      	ldr	r3, [r3, #8]
 800d380:	2200      	movs	r2, #0
 800d382:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	685b      	ldr	r3, [r3, #4]
 800d388:	3303      	adds	r3, #3
 800d38a:	f023 0303 	bic.w	r3, r3, #3
 800d38e:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800d390:	2300      	movs	r3, #0
 800d392:	60fb      	str	r3, [r7, #12]
 800d394:	e011      	b.n	800d3ba <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	689b      	ldr	r3, [r3, #8]
 800d39a:	681a      	ldr	r2, [r3, #0]
 800d39c:	68bb      	ldr	r3, [r7, #8]
 800d39e:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	689b      	ldr	r3, [r3, #8]
 800d3a4:	68ba      	ldr	r2, [r7, #8]
 800d3a6:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	881b      	ldrh	r3, [r3, #0]
 800d3ac:	461a      	mov	r2, r3
 800d3ae:	68bb      	ldr	r3, [r7, #8]
 800d3b0:	4413      	add	r3, r2
 800d3b2:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800d3b4:	68fb      	ldr	r3, [r7, #12]
 800d3b6:	3301      	adds	r3, #1
 800d3b8:	60fb      	str	r3, [r7, #12]
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	885b      	ldrh	r3, [r3, #2]
 800d3be:	461a      	mov	r2, r3
 800d3c0:	68fb      	ldr	r3, [r7, #12]
 800d3c2:	4293      	cmp	r3, r2
 800d3c4:	dbe7      	blt.n	800d396 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800d3c6:	bf00      	nop
 800d3c8:	3714      	adds	r7, #20
 800d3ca:	46bd      	mov	sp, r7
 800d3cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3d0:	4770      	bx	lr
	...

0800d3d4 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800d3d4:	b580      	push	{r7, lr}
 800d3d6:	b082      	sub	sp, #8
 800d3d8:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800d3da:	2300      	movs	r3, #0
 800d3dc:	80fb      	strh	r3, [r7, #6]
 800d3de:	e009      	b.n	800d3f4 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800d3e0:	88fb      	ldrh	r3, [r7, #6]
 800d3e2:	4a08      	ldr	r2, [pc, #32]	; (800d404 <memp_init+0x30>)
 800d3e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d3e8:	4618      	mov	r0, r3
 800d3ea:	f7ff ffc3 	bl	800d374 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800d3ee:	88fb      	ldrh	r3, [r7, #6]
 800d3f0:	3301      	adds	r3, #1
 800d3f2:	80fb      	strh	r3, [r7, #6]
 800d3f4:	88fb      	ldrh	r3, [r7, #6]
 800d3f6:	2b0b      	cmp	r3, #11
 800d3f8:	d9f2      	bls.n	800d3e0 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800d3fa:	bf00      	nop
 800d3fc:	3708      	adds	r7, #8
 800d3fe:	46bd      	mov	sp, r7
 800d400:	bd80      	pop	{r7, pc}
 800d402:	bf00      	nop
 800d404:	0801b9cc 	.word	0x0801b9cc

0800d408 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800d408:	b580      	push	{r7, lr}
 800d40a:	b084      	sub	sp, #16
 800d40c:	af00      	add	r7, sp, #0
 800d40e:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800d410:	f00a f85a 	bl	80174c8 <sys_arch_protect>
 800d414:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	689b      	ldr	r3, [r3, #8]
 800d41a:	681b      	ldr	r3, [r3, #0]
 800d41c:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800d41e:	68bb      	ldr	r3, [r7, #8]
 800d420:	2b00      	cmp	r3, #0
 800d422:	d015      	beq.n	800d450 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	689b      	ldr	r3, [r3, #8]
 800d428:	68ba      	ldr	r2, [r7, #8]
 800d42a:	6812      	ldr	r2, [r2, #0]
 800d42c:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800d42e:	68bb      	ldr	r3, [r7, #8]
 800d430:	f003 0303 	and.w	r3, r3, #3
 800d434:	2b00      	cmp	r3, #0
 800d436:	d006      	beq.n	800d446 <do_memp_malloc_pool+0x3e>
 800d438:	4b09      	ldr	r3, [pc, #36]	; (800d460 <do_memp_malloc_pool+0x58>)
 800d43a:	f240 1219 	movw	r2, #281	; 0x119
 800d43e:	4909      	ldr	r1, [pc, #36]	; (800d464 <do_memp_malloc_pool+0x5c>)
 800d440:	4809      	ldr	r0, [pc, #36]	; (800d468 <do_memp_malloc_pool+0x60>)
 800d442:	f00a f8b9 	bl	80175b8 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800d446:	68f8      	ldr	r0, [r7, #12]
 800d448:	f00a f84c 	bl	80174e4 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800d44c:	68bb      	ldr	r3, [r7, #8]
 800d44e:	e003      	b.n	800d458 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800d450:	68f8      	ldr	r0, [r7, #12]
 800d452:	f00a f847 	bl	80174e4 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800d456:	2300      	movs	r3, #0
}
 800d458:	4618      	mov	r0, r3
 800d45a:	3710      	adds	r7, #16
 800d45c:	46bd      	mov	sp, r7
 800d45e:	bd80      	pop	{r7, pc}
 800d460:	08019510 	.word	0x08019510
 800d464:	08019540 	.word	0x08019540
 800d468:	08019564 	.word	0x08019564

0800d46c <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800d46c:	b580      	push	{r7, lr}
 800d46e:	b084      	sub	sp, #16
 800d470:	af00      	add	r7, sp, #0
 800d472:	4603      	mov	r3, r0
 800d474:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800d476:	79fb      	ldrb	r3, [r7, #7]
 800d478:	2b0b      	cmp	r3, #11
 800d47a:	d908      	bls.n	800d48e <memp_malloc+0x22>
 800d47c:	4b0a      	ldr	r3, [pc, #40]	; (800d4a8 <memp_malloc+0x3c>)
 800d47e:	f240 1257 	movw	r2, #343	; 0x157
 800d482:	490a      	ldr	r1, [pc, #40]	; (800d4ac <memp_malloc+0x40>)
 800d484:	480a      	ldr	r0, [pc, #40]	; (800d4b0 <memp_malloc+0x44>)
 800d486:	f00a f897 	bl	80175b8 <iprintf>
 800d48a:	2300      	movs	r3, #0
 800d48c:	e008      	b.n	800d4a0 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800d48e:	79fb      	ldrb	r3, [r7, #7]
 800d490:	4a08      	ldr	r2, [pc, #32]	; (800d4b4 <memp_malloc+0x48>)
 800d492:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d496:	4618      	mov	r0, r3
 800d498:	f7ff ffb6 	bl	800d408 <do_memp_malloc_pool>
 800d49c:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800d49e:	68fb      	ldr	r3, [r7, #12]
}
 800d4a0:	4618      	mov	r0, r3
 800d4a2:	3710      	adds	r7, #16
 800d4a4:	46bd      	mov	sp, r7
 800d4a6:	bd80      	pop	{r7, pc}
 800d4a8:	08019510 	.word	0x08019510
 800d4ac:	080195a0 	.word	0x080195a0
 800d4b0:	08019564 	.word	0x08019564
 800d4b4:	0801b9cc 	.word	0x0801b9cc

0800d4b8 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800d4b8:	b580      	push	{r7, lr}
 800d4ba:	b084      	sub	sp, #16
 800d4bc:	af00      	add	r7, sp, #0
 800d4be:	6078      	str	r0, [r7, #4]
 800d4c0:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800d4c2:	683b      	ldr	r3, [r7, #0]
 800d4c4:	f003 0303 	and.w	r3, r3, #3
 800d4c8:	2b00      	cmp	r3, #0
 800d4ca:	d006      	beq.n	800d4da <do_memp_free_pool+0x22>
 800d4cc:	4b0d      	ldr	r3, [pc, #52]	; (800d504 <do_memp_free_pool+0x4c>)
 800d4ce:	f240 126d 	movw	r2, #365	; 0x16d
 800d4d2:	490d      	ldr	r1, [pc, #52]	; (800d508 <do_memp_free_pool+0x50>)
 800d4d4:	480d      	ldr	r0, [pc, #52]	; (800d50c <do_memp_free_pool+0x54>)
 800d4d6:	f00a f86f 	bl	80175b8 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800d4da:	683b      	ldr	r3, [r7, #0]
 800d4dc:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800d4de:	f009 fff3 	bl	80174c8 <sys_arch_protect>
 800d4e2:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	689b      	ldr	r3, [r3, #8]
 800d4e8:	681a      	ldr	r2, [r3, #0]
 800d4ea:	68fb      	ldr	r3, [r7, #12]
 800d4ec:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	689b      	ldr	r3, [r3, #8]
 800d4f2:	68fa      	ldr	r2, [r7, #12]
 800d4f4:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800d4f6:	68b8      	ldr	r0, [r7, #8]
 800d4f8:	f009 fff4 	bl	80174e4 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800d4fc:	bf00      	nop
 800d4fe:	3710      	adds	r7, #16
 800d500:	46bd      	mov	sp, r7
 800d502:	bd80      	pop	{r7, pc}
 800d504:	08019510 	.word	0x08019510
 800d508:	080195c0 	.word	0x080195c0
 800d50c:	08019564 	.word	0x08019564

0800d510 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800d510:	b580      	push	{r7, lr}
 800d512:	b082      	sub	sp, #8
 800d514:	af00      	add	r7, sp, #0
 800d516:	4603      	mov	r3, r0
 800d518:	6039      	str	r1, [r7, #0]
 800d51a:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800d51c:	79fb      	ldrb	r3, [r7, #7]
 800d51e:	2b0b      	cmp	r3, #11
 800d520:	d907      	bls.n	800d532 <memp_free+0x22>
 800d522:	4b0c      	ldr	r3, [pc, #48]	; (800d554 <memp_free+0x44>)
 800d524:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800d528:	490b      	ldr	r1, [pc, #44]	; (800d558 <memp_free+0x48>)
 800d52a:	480c      	ldr	r0, [pc, #48]	; (800d55c <memp_free+0x4c>)
 800d52c:	f00a f844 	bl	80175b8 <iprintf>
 800d530:	e00c      	b.n	800d54c <memp_free+0x3c>

  if (mem == NULL) {
 800d532:	683b      	ldr	r3, [r7, #0]
 800d534:	2b00      	cmp	r3, #0
 800d536:	d008      	beq.n	800d54a <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800d538:	79fb      	ldrb	r3, [r7, #7]
 800d53a:	4a09      	ldr	r2, [pc, #36]	; (800d560 <memp_free+0x50>)
 800d53c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d540:	6839      	ldr	r1, [r7, #0]
 800d542:	4618      	mov	r0, r3
 800d544:	f7ff ffb8 	bl	800d4b8 <do_memp_free_pool>
 800d548:	e000      	b.n	800d54c <memp_free+0x3c>
    return;
 800d54a:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800d54c:	3708      	adds	r7, #8
 800d54e:	46bd      	mov	sp, r7
 800d550:	bd80      	pop	{r7, pc}
 800d552:	bf00      	nop
 800d554:	08019510 	.word	0x08019510
 800d558:	080195e0 	.word	0x080195e0
 800d55c:	08019564 	.word	0x08019564
 800d560:	0801b9cc 	.word	0x0801b9cc

0800d564 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800d564:	b480      	push	{r7}
 800d566:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800d568:	bf00      	nop
 800d56a:	46bd      	mov	sp, r7
 800d56c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d570:	4770      	bx	lr
	...

0800d574 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800d574:	b580      	push	{r7, lr}
 800d576:	b086      	sub	sp, #24
 800d578:	af00      	add	r7, sp, #0
 800d57a:	60f8      	str	r0, [r7, #12]
 800d57c:	60b9      	str	r1, [r7, #8]
 800d57e:	607a      	str	r2, [r7, #4]
 800d580:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800d582:	68fb      	ldr	r3, [r7, #12]
 800d584:	2b00      	cmp	r3, #0
 800d586:	d108      	bne.n	800d59a <netif_add+0x26>
 800d588:	4b57      	ldr	r3, [pc, #348]	; (800d6e8 <netif_add+0x174>)
 800d58a:	f240 1227 	movw	r2, #295	; 0x127
 800d58e:	4957      	ldr	r1, [pc, #348]	; (800d6ec <netif_add+0x178>)
 800d590:	4857      	ldr	r0, [pc, #348]	; (800d6f0 <netif_add+0x17c>)
 800d592:	f00a f811 	bl	80175b8 <iprintf>
 800d596:	2300      	movs	r3, #0
 800d598:	e0a2      	b.n	800d6e0 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800d59a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d59c:	2b00      	cmp	r3, #0
 800d59e:	d108      	bne.n	800d5b2 <netif_add+0x3e>
 800d5a0:	4b51      	ldr	r3, [pc, #324]	; (800d6e8 <netif_add+0x174>)
 800d5a2:	f44f 7294 	mov.w	r2, #296	; 0x128
 800d5a6:	4953      	ldr	r1, [pc, #332]	; (800d6f4 <netif_add+0x180>)
 800d5a8:	4851      	ldr	r0, [pc, #324]	; (800d6f0 <netif_add+0x17c>)
 800d5aa:	f00a f805 	bl	80175b8 <iprintf>
 800d5ae:	2300      	movs	r3, #0
 800d5b0:	e096      	b.n	800d6e0 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800d5b2:	68bb      	ldr	r3, [r7, #8]
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	d101      	bne.n	800d5bc <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800d5b8:	4b4f      	ldr	r3, [pc, #316]	; (800d6f8 <netif_add+0x184>)
 800d5ba:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	d101      	bne.n	800d5c6 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800d5c2:	4b4d      	ldr	r3, [pc, #308]	; (800d6f8 <netif_add+0x184>)
 800d5c4:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800d5c6:	683b      	ldr	r3, [r7, #0]
 800d5c8:	2b00      	cmp	r3, #0
 800d5ca:	d101      	bne.n	800d5d0 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800d5cc:	4b4a      	ldr	r3, [pc, #296]	; (800d6f8 <netif_add+0x184>)
 800d5ce:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800d5d0:	68fb      	ldr	r3, [r7, #12]
 800d5d2:	2200      	movs	r2, #0
 800d5d4:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800d5d6:	68fb      	ldr	r3, [r7, #12]
 800d5d8:	2200      	movs	r2, #0
 800d5da:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800d5dc:	68fb      	ldr	r3, [r7, #12]
 800d5de:	2200      	movs	r2, #0
 800d5e0:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800d5e2:	68fb      	ldr	r3, [r7, #12]
 800d5e4:	4a45      	ldr	r2, [pc, #276]	; (800d6fc <netif_add+0x188>)
 800d5e6:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800d5e8:	68fb      	ldr	r3, [r7, #12]
 800d5ea:	2200      	movs	r2, #0
 800d5ec:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 800d5ee:	68fb      	ldr	r3, [r7, #12]
 800d5f0:	2200      	movs	r2, #0
 800d5f2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800d5f6:	68fb      	ldr	r3, [r7, #12]
 800d5f8:	2200      	movs	r2, #0
 800d5fa:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800d5fc:	68fb      	ldr	r3, [r7, #12]
 800d5fe:	6a3a      	ldr	r2, [r7, #32]
 800d600:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800d602:	4b3f      	ldr	r3, [pc, #252]	; (800d700 <netif_add+0x18c>)
 800d604:	781a      	ldrb	r2, [r3, #0]
 800d606:	68fb      	ldr	r3, [r7, #12]
 800d608:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 800d60c:	68fb      	ldr	r3, [r7, #12]
 800d60e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d610:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800d612:	683b      	ldr	r3, [r7, #0]
 800d614:	687a      	ldr	r2, [r7, #4]
 800d616:	68b9      	ldr	r1, [r7, #8]
 800d618:	68f8      	ldr	r0, [r7, #12]
 800d61a:	f000 f90f 	bl	800d83c <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800d61e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d620:	68f8      	ldr	r0, [r7, #12]
 800d622:	4798      	blx	r3
 800d624:	4603      	mov	r3, r0
 800d626:	2b00      	cmp	r3, #0
 800d628:	d001      	beq.n	800d62e <netif_add+0xba>
    return NULL;
 800d62a:	2300      	movs	r3, #0
 800d62c:	e058      	b.n	800d6e0 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800d62e:	68fb      	ldr	r3, [r7, #12]
 800d630:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d634:	2bff      	cmp	r3, #255	; 0xff
 800d636:	d103      	bne.n	800d640 <netif_add+0xcc>
        netif->num = 0;
 800d638:	68fb      	ldr	r3, [r7, #12]
 800d63a:	2200      	movs	r2, #0
 800d63c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 800d640:	2300      	movs	r3, #0
 800d642:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800d644:	4b2f      	ldr	r3, [pc, #188]	; (800d704 <netif_add+0x190>)
 800d646:	681b      	ldr	r3, [r3, #0]
 800d648:	617b      	str	r3, [r7, #20]
 800d64a:	e02b      	b.n	800d6a4 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800d64c:	697a      	ldr	r2, [r7, #20]
 800d64e:	68fb      	ldr	r3, [r7, #12]
 800d650:	429a      	cmp	r2, r3
 800d652:	d106      	bne.n	800d662 <netif_add+0xee>
 800d654:	4b24      	ldr	r3, [pc, #144]	; (800d6e8 <netif_add+0x174>)
 800d656:	f240 128b 	movw	r2, #395	; 0x18b
 800d65a:	492b      	ldr	r1, [pc, #172]	; (800d708 <netif_add+0x194>)
 800d65c:	4824      	ldr	r0, [pc, #144]	; (800d6f0 <netif_add+0x17c>)
 800d65e:	f009 ffab 	bl	80175b8 <iprintf>
        num_netifs++;
 800d662:	693b      	ldr	r3, [r7, #16]
 800d664:	3301      	adds	r3, #1
 800d666:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800d668:	693b      	ldr	r3, [r7, #16]
 800d66a:	2bff      	cmp	r3, #255	; 0xff
 800d66c:	dd06      	ble.n	800d67c <netif_add+0x108>
 800d66e:	4b1e      	ldr	r3, [pc, #120]	; (800d6e8 <netif_add+0x174>)
 800d670:	f240 128d 	movw	r2, #397	; 0x18d
 800d674:	4925      	ldr	r1, [pc, #148]	; (800d70c <netif_add+0x198>)
 800d676:	481e      	ldr	r0, [pc, #120]	; (800d6f0 <netif_add+0x17c>)
 800d678:	f009 ff9e 	bl	80175b8 <iprintf>
        if (netif2->num == netif->num) {
 800d67c:	697b      	ldr	r3, [r7, #20]
 800d67e:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800d682:	68fb      	ldr	r3, [r7, #12]
 800d684:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d688:	429a      	cmp	r2, r3
 800d68a:	d108      	bne.n	800d69e <netif_add+0x12a>
          netif->num++;
 800d68c:	68fb      	ldr	r3, [r7, #12]
 800d68e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d692:	3301      	adds	r3, #1
 800d694:	b2da      	uxtb	r2, r3
 800d696:	68fb      	ldr	r3, [r7, #12]
 800d698:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 800d69c:	e005      	b.n	800d6aa <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800d69e:	697b      	ldr	r3, [r7, #20]
 800d6a0:	681b      	ldr	r3, [r3, #0]
 800d6a2:	617b      	str	r3, [r7, #20]
 800d6a4:	697b      	ldr	r3, [r7, #20]
 800d6a6:	2b00      	cmp	r3, #0
 800d6a8:	d1d0      	bne.n	800d64c <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800d6aa:	697b      	ldr	r3, [r7, #20]
 800d6ac:	2b00      	cmp	r3, #0
 800d6ae:	d1be      	bne.n	800d62e <netif_add+0xba>
  }
  if (netif->num == 254) {
 800d6b0:	68fb      	ldr	r3, [r7, #12]
 800d6b2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d6b6:	2bfe      	cmp	r3, #254	; 0xfe
 800d6b8:	d103      	bne.n	800d6c2 <netif_add+0x14e>
    netif_num = 0;
 800d6ba:	4b11      	ldr	r3, [pc, #68]	; (800d700 <netif_add+0x18c>)
 800d6bc:	2200      	movs	r2, #0
 800d6be:	701a      	strb	r2, [r3, #0]
 800d6c0:	e006      	b.n	800d6d0 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800d6c2:	68fb      	ldr	r3, [r7, #12]
 800d6c4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d6c8:	3301      	adds	r3, #1
 800d6ca:	b2da      	uxtb	r2, r3
 800d6cc:	4b0c      	ldr	r3, [pc, #48]	; (800d700 <netif_add+0x18c>)
 800d6ce:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800d6d0:	4b0c      	ldr	r3, [pc, #48]	; (800d704 <netif_add+0x190>)
 800d6d2:	681a      	ldr	r2, [r3, #0]
 800d6d4:	68fb      	ldr	r3, [r7, #12]
 800d6d6:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800d6d8:	4a0a      	ldr	r2, [pc, #40]	; (800d704 <netif_add+0x190>)
 800d6da:	68fb      	ldr	r3, [r7, #12]
 800d6dc:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800d6de:	68fb      	ldr	r3, [r7, #12]
}
 800d6e0:	4618      	mov	r0, r3
 800d6e2:	3718      	adds	r7, #24
 800d6e4:	46bd      	mov	sp, r7
 800d6e6:	bd80      	pop	{r7, pc}
 800d6e8:	080195fc 	.word	0x080195fc
 800d6ec:	08019690 	.word	0x08019690
 800d6f0:	0801964c 	.word	0x0801964c
 800d6f4:	080196ac 	.word	0x080196ac
 800d6f8:	0801ba3c 	.word	0x0801ba3c
 800d6fc:	0800db17 	.word	0x0800db17
 800d700:	20004644 	.word	0x20004644
 800d704:	2000d278 	.word	0x2000d278
 800d708:	080196d0 	.word	0x080196d0
 800d70c:	080196e4 	.word	0x080196e4

0800d710 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800d710:	b580      	push	{r7, lr}
 800d712:	b082      	sub	sp, #8
 800d714:	af00      	add	r7, sp, #0
 800d716:	6078      	str	r0, [r7, #4]
 800d718:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800d71a:	6839      	ldr	r1, [r7, #0]
 800d71c:	6878      	ldr	r0, [r7, #4]
 800d71e:	f002 fe6b 	bl	80103f8 <tcp_netif_ip_addr_changed>
  udp_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800d722:	bf00      	nop
 800d724:	3708      	adds	r7, #8
 800d726:	46bd      	mov	sp, r7
 800d728:	bd80      	pop	{r7, pc}
	...

0800d72c <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800d72c:	b580      	push	{r7, lr}
 800d72e:	b086      	sub	sp, #24
 800d730:	af00      	add	r7, sp, #0
 800d732:	60f8      	str	r0, [r7, #12]
 800d734:	60b9      	str	r1, [r7, #8]
 800d736:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800d738:	68bb      	ldr	r3, [r7, #8]
 800d73a:	2b00      	cmp	r3, #0
 800d73c:	d106      	bne.n	800d74c <netif_do_set_ipaddr+0x20>
 800d73e:	4b1d      	ldr	r3, [pc, #116]	; (800d7b4 <netif_do_set_ipaddr+0x88>)
 800d740:	f240 12cb 	movw	r2, #459	; 0x1cb
 800d744:	491c      	ldr	r1, [pc, #112]	; (800d7b8 <netif_do_set_ipaddr+0x8c>)
 800d746:	481d      	ldr	r0, [pc, #116]	; (800d7bc <netif_do_set_ipaddr+0x90>)
 800d748:	f009 ff36 	bl	80175b8 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	2b00      	cmp	r3, #0
 800d750:	d106      	bne.n	800d760 <netif_do_set_ipaddr+0x34>
 800d752:	4b18      	ldr	r3, [pc, #96]	; (800d7b4 <netif_do_set_ipaddr+0x88>)
 800d754:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800d758:	4917      	ldr	r1, [pc, #92]	; (800d7b8 <netif_do_set_ipaddr+0x8c>)
 800d75a:	4818      	ldr	r0, [pc, #96]	; (800d7bc <netif_do_set_ipaddr+0x90>)
 800d75c:	f009 ff2c 	bl	80175b8 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800d760:	68bb      	ldr	r3, [r7, #8]
 800d762:	681a      	ldr	r2, [r3, #0]
 800d764:	68fb      	ldr	r3, [r7, #12]
 800d766:	3304      	adds	r3, #4
 800d768:	681b      	ldr	r3, [r3, #0]
 800d76a:	429a      	cmp	r2, r3
 800d76c:	d01c      	beq.n	800d7a8 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800d76e:	68bb      	ldr	r3, [r7, #8]
 800d770:	681b      	ldr	r3, [r3, #0]
 800d772:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800d774:	68fb      	ldr	r3, [r7, #12]
 800d776:	3304      	adds	r3, #4
 800d778:	681a      	ldr	r2, [r3, #0]
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800d77e:	f107 0314 	add.w	r3, r7, #20
 800d782:	4619      	mov	r1, r3
 800d784:	6878      	ldr	r0, [r7, #4]
 800d786:	f7ff ffc3 	bl	800d710 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800d78a:	68bb      	ldr	r3, [r7, #8]
 800d78c:	2b00      	cmp	r3, #0
 800d78e:	d002      	beq.n	800d796 <netif_do_set_ipaddr+0x6a>
 800d790:	68bb      	ldr	r3, [r7, #8]
 800d792:	681b      	ldr	r3, [r3, #0]
 800d794:	e000      	b.n	800d798 <netif_do_set_ipaddr+0x6c>
 800d796:	2300      	movs	r3, #0
 800d798:	68fa      	ldr	r2, [r7, #12]
 800d79a:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800d79c:	2101      	movs	r1, #1
 800d79e:	68f8      	ldr	r0, [r7, #12]
 800d7a0:	f000 f8d2 	bl	800d948 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800d7a4:	2301      	movs	r3, #1
 800d7a6:	e000      	b.n	800d7aa <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800d7a8:	2300      	movs	r3, #0
}
 800d7aa:	4618      	mov	r0, r3
 800d7ac:	3718      	adds	r7, #24
 800d7ae:	46bd      	mov	sp, r7
 800d7b0:	bd80      	pop	{r7, pc}
 800d7b2:	bf00      	nop
 800d7b4:	080195fc 	.word	0x080195fc
 800d7b8:	08019714 	.word	0x08019714
 800d7bc:	0801964c 	.word	0x0801964c

0800d7c0 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800d7c0:	b480      	push	{r7}
 800d7c2:	b085      	sub	sp, #20
 800d7c4:	af00      	add	r7, sp, #0
 800d7c6:	60f8      	str	r0, [r7, #12]
 800d7c8:	60b9      	str	r1, [r7, #8]
 800d7ca:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800d7cc:	68bb      	ldr	r3, [r7, #8]
 800d7ce:	681a      	ldr	r2, [r3, #0]
 800d7d0:	68fb      	ldr	r3, [r7, #12]
 800d7d2:	3308      	adds	r3, #8
 800d7d4:	681b      	ldr	r3, [r3, #0]
 800d7d6:	429a      	cmp	r2, r3
 800d7d8:	d00a      	beq.n	800d7f0 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800d7da:	68bb      	ldr	r3, [r7, #8]
 800d7dc:	2b00      	cmp	r3, #0
 800d7de:	d002      	beq.n	800d7e6 <netif_do_set_netmask+0x26>
 800d7e0:	68bb      	ldr	r3, [r7, #8]
 800d7e2:	681b      	ldr	r3, [r3, #0]
 800d7e4:	e000      	b.n	800d7e8 <netif_do_set_netmask+0x28>
 800d7e6:	2300      	movs	r3, #0
 800d7e8:	68fa      	ldr	r2, [r7, #12]
 800d7ea:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800d7ec:	2301      	movs	r3, #1
 800d7ee:	e000      	b.n	800d7f2 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800d7f0:	2300      	movs	r3, #0
}
 800d7f2:	4618      	mov	r0, r3
 800d7f4:	3714      	adds	r7, #20
 800d7f6:	46bd      	mov	sp, r7
 800d7f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7fc:	4770      	bx	lr

0800d7fe <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800d7fe:	b480      	push	{r7}
 800d800:	b085      	sub	sp, #20
 800d802:	af00      	add	r7, sp, #0
 800d804:	60f8      	str	r0, [r7, #12]
 800d806:	60b9      	str	r1, [r7, #8]
 800d808:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800d80a:	68bb      	ldr	r3, [r7, #8]
 800d80c:	681a      	ldr	r2, [r3, #0]
 800d80e:	68fb      	ldr	r3, [r7, #12]
 800d810:	330c      	adds	r3, #12
 800d812:	681b      	ldr	r3, [r3, #0]
 800d814:	429a      	cmp	r2, r3
 800d816:	d00a      	beq.n	800d82e <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800d818:	68bb      	ldr	r3, [r7, #8]
 800d81a:	2b00      	cmp	r3, #0
 800d81c:	d002      	beq.n	800d824 <netif_do_set_gw+0x26>
 800d81e:	68bb      	ldr	r3, [r7, #8]
 800d820:	681b      	ldr	r3, [r3, #0]
 800d822:	e000      	b.n	800d826 <netif_do_set_gw+0x28>
 800d824:	2300      	movs	r3, #0
 800d826:	68fa      	ldr	r2, [r7, #12]
 800d828:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800d82a:	2301      	movs	r3, #1
 800d82c:	e000      	b.n	800d830 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800d82e:	2300      	movs	r3, #0
}
 800d830:	4618      	mov	r0, r3
 800d832:	3714      	adds	r7, #20
 800d834:	46bd      	mov	sp, r7
 800d836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d83a:	4770      	bx	lr

0800d83c <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800d83c:	b580      	push	{r7, lr}
 800d83e:	b088      	sub	sp, #32
 800d840:	af00      	add	r7, sp, #0
 800d842:	60f8      	str	r0, [r7, #12]
 800d844:	60b9      	str	r1, [r7, #8]
 800d846:	607a      	str	r2, [r7, #4]
 800d848:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800d84a:	2300      	movs	r3, #0
 800d84c:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800d84e:	2300      	movs	r3, #0
 800d850:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800d852:	68bb      	ldr	r3, [r7, #8]
 800d854:	2b00      	cmp	r3, #0
 800d856:	d101      	bne.n	800d85c <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800d858:	4b1c      	ldr	r3, [pc, #112]	; (800d8cc <netif_set_addr+0x90>)
 800d85a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	2b00      	cmp	r3, #0
 800d860:	d101      	bne.n	800d866 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800d862:	4b1a      	ldr	r3, [pc, #104]	; (800d8cc <netif_set_addr+0x90>)
 800d864:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800d866:	683b      	ldr	r3, [r7, #0]
 800d868:	2b00      	cmp	r3, #0
 800d86a:	d101      	bne.n	800d870 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800d86c:	4b17      	ldr	r3, [pc, #92]	; (800d8cc <netif_set_addr+0x90>)
 800d86e:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800d870:	68bb      	ldr	r3, [r7, #8]
 800d872:	2b00      	cmp	r3, #0
 800d874:	d003      	beq.n	800d87e <netif_set_addr+0x42>
 800d876:	68bb      	ldr	r3, [r7, #8]
 800d878:	681b      	ldr	r3, [r3, #0]
 800d87a:	2b00      	cmp	r3, #0
 800d87c:	d101      	bne.n	800d882 <netif_set_addr+0x46>
 800d87e:	2301      	movs	r3, #1
 800d880:	e000      	b.n	800d884 <netif_set_addr+0x48>
 800d882:	2300      	movs	r3, #0
 800d884:	617b      	str	r3, [r7, #20]
  if (remove) {
 800d886:	697b      	ldr	r3, [r7, #20]
 800d888:	2b00      	cmp	r3, #0
 800d88a:	d006      	beq.n	800d89a <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800d88c:	f107 0310 	add.w	r3, r7, #16
 800d890:	461a      	mov	r2, r3
 800d892:	68b9      	ldr	r1, [r7, #8]
 800d894:	68f8      	ldr	r0, [r7, #12]
 800d896:	f7ff ff49 	bl	800d72c <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800d89a:	69fa      	ldr	r2, [r7, #28]
 800d89c:	6879      	ldr	r1, [r7, #4]
 800d89e:	68f8      	ldr	r0, [r7, #12]
 800d8a0:	f7ff ff8e 	bl	800d7c0 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800d8a4:	69ba      	ldr	r2, [r7, #24]
 800d8a6:	6839      	ldr	r1, [r7, #0]
 800d8a8:	68f8      	ldr	r0, [r7, #12]
 800d8aa:	f7ff ffa8 	bl	800d7fe <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800d8ae:	697b      	ldr	r3, [r7, #20]
 800d8b0:	2b00      	cmp	r3, #0
 800d8b2:	d106      	bne.n	800d8c2 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800d8b4:	f107 0310 	add.w	r3, r7, #16
 800d8b8:	461a      	mov	r2, r3
 800d8ba:	68b9      	ldr	r1, [r7, #8]
 800d8bc:	68f8      	ldr	r0, [r7, #12]
 800d8be:	f7ff ff35 	bl	800d72c <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800d8c2:	bf00      	nop
 800d8c4:	3720      	adds	r7, #32
 800d8c6:	46bd      	mov	sp, r7
 800d8c8:	bd80      	pop	{r7, pc}
 800d8ca:	bf00      	nop
 800d8cc:	0801ba3c 	.word	0x0801ba3c

0800d8d0 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800d8d0:	b480      	push	{r7}
 800d8d2:	b083      	sub	sp, #12
 800d8d4:	af00      	add	r7, sp, #0
 800d8d6:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800d8d8:	4a04      	ldr	r2, [pc, #16]	; (800d8ec <netif_set_default+0x1c>)
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800d8de:	bf00      	nop
 800d8e0:	370c      	adds	r7, #12
 800d8e2:	46bd      	mov	sp, r7
 800d8e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8e8:	4770      	bx	lr
 800d8ea:	bf00      	nop
 800d8ec:	2000d27c 	.word	0x2000d27c

0800d8f0 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800d8f0:	b580      	push	{r7, lr}
 800d8f2:	b082      	sub	sp, #8
 800d8f4:	af00      	add	r7, sp, #0
 800d8f6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	2b00      	cmp	r3, #0
 800d8fc:	d107      	bne.n	800d90e <netif_set_up+0x1e>
 800d8fe:	4b0f      	ldr	r3, [pc, #60]	; (800d93c <netif_set_up+0x4c>)
 800d900:	f44f 7254 	mov.w	r2, #848	; 0x350
 800d904:	490e      	ldr	r1, [pc, #56]	; (800d940 <netif_set_up+0x50>)
 800d906:	480f      	ldr	r0, [pc, #60]	; (800d944 <netif_set_up+0x54>)
 800d908:	f009 fe56 	bl	80175b8 <iprintf>
 800d90c:	e013      	b.n	800d936 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d914:	f003 0301 	and.w	r3, r3, #1
 800d918:	2b00      	cmp	r3, #0
 800d91a:	d10c      	bne.n	800d936 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d922:	f043 0301 	orr.w	r3, r3, #1
 800d926:	b2da      	uxtb	r2, r3
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800d92e:	2103      	movs	r1, #3
 800d930:	6878      	ldr	r0, [r7, #4]
 800d932:	f000 f809 	bl	800d948 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800d936:	3708      	adds	r7, #8
 800d938:	46bd      	mov	sp, r7
 800d93a:	bd80      	pop	{r7, pc}
 800d93c:	080195fc 	.word	0x080195fc
 800d940:	08019784 	.word	0x08019784
 800d944:	0801964c 	.word	0x0801964c

0800d948 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800d948:	b580      	push	{r7, lr}
 800d94a:	b082      	sub	sp, #8
 800d94c:	af00      	add	r7, sp, #0
 800d94e:	6078      	str	r0, [r7, #4]
 800d950:	460b      	mov	r3, r1
 800d952:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	2b00      	cmp	r3, #0
 800d958:	d106      	bne.n	800d968 <netif_issue_reports+0x20>
 800d95a:	4b18      	ldr	r3, [pc, #96]	; (800d9bc <netif_issue_reports+0x74>)
 800d95c:	f240 326d 	movw	r2, #877	; 0x36d
 800d960:	4917      	ldr	r1, [pc, #92]	; (800d9c0 <netif_issue_reports+0x78>)
 800d962:	4818      	ldr	r0, [pc, #96]	; (800d9c4 <netif_issue_reports+0x7c>)
 800d964:	f009 fe28 	bl	80175b8 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d96e:	f003 0304 	and.w	r3, r3, #4
 800d972:	2b00      	cmp	r3, #0
 800d974:	d01e      	beq.n	800d9b4 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d97c:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800d980:	2b00      	cmp	r3, #0
 800d982:	d017      	beq.n	800d9b4 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800d984:	78fb      	ldrb	r3, [r7, #3]
 800d986:	f003 0301 	and.w	r3, r3, #1
 800d98a:	2b00      	cmp	r3, #0
 800d98c:	d013      	beq.n	800d9b6 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	3304      	adds	r3, #4
 800d992:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800d994:	2b00      	cmp	r3, #0
 800d996:	d00e      	beq.n	800d9b6 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d99e:	f003 0308 	and.w	r3, r3, #8
 800d9a2:	2b00      	cmp	r3, #0
 800d9a4:	d007      	beq.n	800d9b6 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	3304      	adds	r3, #4
 800d9aa:	4619      	mov	r1, r3
 800d9ac:	6878      	ldr	r0, [r7, #4]
 800d9ae:	f008 f84f 	bl	8015a50 <etharp_request>
 800d9b2:	e000      	b.n	800d9b6 <netif_issue_reports+0x6e>
    return;
 800d9b4:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800d9b6:	3708      	adds	r7, #8
 800d9b8:	46bd      	mov	sp, r7
 800d9ba:	bd80      	pop	{r7, pc}
 800d9bc:	080195fc 	.word	0x080195fc
 800d9c0:	080197a0 	.word	0x080197a0
 800d9c4:	0801964c 	.word	0x0801964c

0800d9c8 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800d9c8:	b580      	push	{r7, lr}
 800d9ca:	b082      	sub	sp, #8
 800d9cc:	af00      	add	r7, sp, #0
 800d9ce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	2b00      	cmp	r3, #0
 800d9d4:	d107      	bne.n	800d9e6 <netif_set_down+0x1e>
 800d9d6:	4b12      	ldr	r3, [pc, #72]	; (800da20 <netif_set_down+0x58>)
 800d9d8:	f240 329b 	movw	r2, #923	; 0x39b
 800d9dc:	4911      	ldr	r1, [pc, #68]	; (800da24 <netif_set_down+0x5c>)
 800d9de:	4812      	ldr	r0, [pc, #72]	; (800da28 <netif_set_down+0x60>)
 800d9e0:	f009 fdea 	bl	80175b8 <iprintf>
 800d9e4:	e019      	b.n	800da1a <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d9ec:	f003 0301 	and.w	r3, r3, #1
 800d9f0:	2b00      	cmp	r3, #0
 800d9f2:	d012      	beq.n	800da1a <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d9fa:	f023 0301 	bic.w	r3, r3, #1
 800d9fe:	b2da      	uxtb	r2, r3
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800da0c:	f003 0308 	and.w	r3, r3, #8
 800da10:	2b00      	cmp	r3, #0
 800da12:	d002      	beq.n	800da1a <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800da14:	6878      	ldr	r0, [r7, #4]
 800da16:	f007 fbd9 	bl	80151cc <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800da1a:	3708      	adds	r7, #8
 800da1c:	46bd      	mov	sp, r7
 800da1e:	bd80      	pop	{r7, pc}
 800da20:	080195fc 	.word	0x080195fc
 800da24:	080197c4 	.word	0x080197c4
 800da28:	0801964c 	.word	0x0801964c

0800da2c <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800da2c:	b580      	push	{r7, lr}
 800da2e:	b082      	sub	sp, #8
 800da30:	af00      	add	r7, sp, #0
 800da32:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	2b00      	cmp	r3, #0
 800da38:	d107      	bne.n	800da4a <netif_set_link_up+0x1e>
 800da3a:	4b13      	ldr	r3, [pc, #76]	; (800da88 <netif_set_link_up+0x5c>)
 800da3c:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800da40:	4912      	ldr	r1, [pc, #72]	; (800da8c <netif_set_link_up+0x60>)
 800da42:	4813      	ldr	r0, [pc, #76]	; (800da90 <netif_set_link_up+0x64>)
 800da44:	f009 fdb8 	bl	80175b8 <iprintf>
 800da48:	e01b      	b.n	800da82 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800da50:	f003 0304 	and.w	r3, r3, #4
 800da54:	2b00      	cmp	r3, #0
 800da56:	d114      	bne.n	800da82 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800da5e:	f043 0304 	orr.w	r3, r3, #4
 800da62:	b2da      	uxtb	r2, r3
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800da6a:	2103      	movs	r1, #3
 800da6c:	6878      	ldr	r0, [r7, #4]
 800da6e:	f7ff ff6b 	bl	800d948 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	69db      	ldr	r3, [r3, #28]
 800da76:	2b00      	cmp	r3, #0
 800da78:	d003      	beq.n	800da82 <netif_set_link_up+0x56>
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	69db      	ldr	r3, [r3, #28]
 800da7e:	6878      	ldr	r0, [r7, #4]
 800da80:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800da82:	3708      	adds	r7, #8
 800da84:	46bd      	mov	sp, r7
 800da86:	bd80      	pop	{r7, pc}
 800da88:	080195fc 	.word	0x080195fc
 800da8c:	080197e4 	.word	0x080197e4
 800da90:	0801964c 	.word	0x0801964c

0800da94 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800da94:	b580      	push	{r7, lr}
 800da96:	b082      	sub	sp, #8
 800da98:	af00      	add	r7, sp, #0
 800da9a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	2b00      	cmp	r3, #0
 800daa0:	d107      	bne.n	800dab2 <netif_set_link_down+0x1e>
 800daa2:	4b11      	ldr	r3, [pc, #68]	; (800dae8 <netif_set_link_down+0x54>)
 800daa4:	f240 4206 	movw	r2, #1030	; 0x406
 800daa8:	4910      	ldr	r1, [pc, #64]	; (800daec <netif_set_link_down+0x58>)
 800daaa:	4811      	ldr	r0, [pc, #68]	; (800daf0 <netif_set_link_down+0x5c>)
 800daac:	f009 fd84 	bl	80175b8 <iprintf>
 800dab0:	e017      	b.n	800dae2 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800dab8:	f003 0304 	and.w	r3, r3, #4
 800dabc:	2b00      	cmp	r3, #0
 800dabe:	d010      	beq.n	800dae2 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800dac6:	f023 0304 	bic.w	r3, r3, #4
 800daca:	b2da      	uxtb	r2, r3
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	69db      	ldr	r3, [r3, #28]
 800dad6:	2b00      	cmp	r3, #0
 800dad8:	d003      	beq.n	800dae2 <netif_set_link_down+0x4e>
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	69db      	ldr	r3, [r3, #28]
 800dade:	6878      	ldr	r0, [r7, #4]
 800dae0:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800dae2:	3708      	adds	r7, #8
 800dae4:	46bd      	mov	sp, r7
 800dae6:	bd80      	pop	{r7, pc}
 800dae8:	080195fc 	.word	0x080195fc
 800daec:	08019808 	.word	0x08019808
 800daf0:	0801964c 	.word	0x0801964c

0800daf4 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800daf4:	b480      	push	{r7}
 800daf6:	b083      	sub	sp, #12
 800daf8:	af00      	add	r7, sp, #0
 800dafa:	6078      	str	r0, [r7, #4]
 800dafc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	2b00      	cmp	r3, #0
 800db02:	d002      	beq.n	800db0a <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	683a      	ldr	r2, [r7, #0]
 800db08:	61da      	str	r2, [r3, #28]
  }
}
 800db0a:	bf00      	nop
 800db0c:	370c      	adds	r7, #12
 800db0e:	46bd      	mov	sp, r7
 800db10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db14:	4770      	bx	lr

0800db16 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800db16:	b480      	push	{r7}
 800db18:	b085      	sub	sp, #20
 800db1a:	af00      	add	r7, sp, #0
 800db1c:	60f8      	str	r0, [r7, #12]
 800db1e:	60b9      	str	r1, [r7, #8]
 800db20:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800db22:	f06f 030b 	mvn.w	r3, #11
}
 800db26:	4618      	mov	r0, r3
 800db28:	3714      	adds	r7, #20
 800db2a:	46bd      	mov	sp, r7
 800db2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db30:	4770      	bx	lr
	...

0800db34 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800db34:	b480      	push	{r7}
 800db36:	b085      	sub	sp, #20
 800db38:	af00      	add	r7, sp, #0
 800db3a:	4603      	mov	r3, r0
 800db3c:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800db3e:	79fb      	ldrb	r3, [r7, #7]
 800db40:	2b00      	cmp	r3, #0
 800db42:	d013      	beq.n	800db6c <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800db44:	4b0d      	ldr	r3, [pc, #52]	; (800db7c <netif_get_by_index+0x48>)
 800db46:	681b      	ldr	r3, [r3, #0]
 800db48:	60fb      	str	r3, [r7, #12]
 800db4a:	e00c      	b.n	800db66 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800db4c:	68fb      	ldr	r3, [r7, #12]
 800db4e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800db52:	3301      	adds	r3, #1
 800db54:	b2db      	uxtb	r3, r3
 800db56:	79fa      	ldrb	r2, [r7, #7]
 800db58:	429a      	cmp	r2, r3
 800db5a:	d101      	bne.n	800db60 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800db5c:	68fb      	ldr	r3, [r7, #12]
 800db5e:	e006      	b.n	800db6e <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800db60:	68fb      	ldr	r3, [r7, #12]
 800db62:	681b      	ldr	r3, [r3, #0]
 800db64:	60fb      	str	r3, [r7, #12]
 800db66:	68fb      	ldr	r3, [r7, #12]
 800db68:	2b00      	cmp	r3, #0
 800db6a:	d1ef      	bne.n	800db4c <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800db6c:	2300      	movs	r3, #0
}
 800db6e:	4618      	mov	r0, r3
 800db70:	3714      	adds	r7, #20
 800db72:	46bd      	mov	sp, r7
 800db74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db78:	4770      	bx	lr
 800db7a:	bf00      	nop
 800db7c:	2000d278 	.word	0x2000d278

0800db80 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800db80:	b580      	push	{r7, lr}
 800db82:	b082      	sub	sp, #8
 800db84:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800db86:	f009 fc9f 	bl	80174c8 <sys_arch_protect>
 800db8a:	6038      	str	r0, [r7, #0]
 800db8c:	4b0d      	ldr	r3, [pc, #52]	; (800dbc4 <pbuf_free_ooseq+0x44>)
 800db8e:	2200      	movs	r2, #0
 800db90:	701a      	strb	r2, [r3, #0]
 800db92:	6838      	ldr	r0, [r7, #0]
 800db94:	f009 fca6 	bl	80174e4 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800db98:	4b0b      	ldr	r3, [pc, #44]	; (800dbc8 <pbuf_free_ooseq+0x48>)
 800db9a:	681b      	ldr	r3, [r3, #0]
 800db9c:	607b      	str	r3, [r7, #4]
 800db9e:	e00a      	b.n	800dbb6 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dba4:	2b00      	cmp	r3, #0
 800dba6:	d003      	beq.n	800dbb0 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800dba8:	6878      	ldr	r0, [r7, #4]
 800dbaa:	f002 fc63 	bl	8010474 <tcp_free_ooseq>
      return;
 800dbae:	e005      	b.n	800dbbc <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	68db      	ldr	r3, [r3, #12]
 800dbb4:	607b      	str	r3, [r7, #4]
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	2b00      	cmp	r3, #0
 800dbba:	d1f1      	bne.n	800dba0 <pbuf_free_ooseq+0x20>
    }
  }
}
 800dbbc:	3708      	adds	r7, #8
 800dbbe:	46bd      	mov	sp, r7
 800dbc0:	bd80      	pop	{r7, pc}
 800dbc2:	bf00      	nop
 800dbc4:	2000d280 	.word	0x2000d280
 800dbc8:	2000d288 	.word	0x2000d288

0800dbcc <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800dbcc:	b580      	push	{r7, lr}
 800dbce:	b082      	sub	sp, #8
 800dbd0:	af00      	add	r7, sp, #0
 800dbd2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800dbd4:	f7ff ffd4 	bl	800db80 <pbuf_free_ooseq>
}
 800dbd8:	bf00      	nop
 800dbda:	3708      	adds	r7, #8
 800dbdc:	46bd      	mov	sp, r7
 800dbde:	bd80      	pop	{r7, pc}

0800dbe0 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800dbe0:	b580      	push	{r7, lr}
 800dbe2:	b082      	sub	sp, #8
 800dbe4:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800dbe6:	f009 fc6f 	bl	80174c8 <sys_arch_protect>
 800dbea:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800dbec:	4b0f      	ldr	r3, [pc, #60]	; (800dc2c <pbuf_pool_is_empty+0x4c>)
 800dbee:	781b      	ldrb	r3, [r3, #0]
 800dbf0:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800dbf2:	4b0e      	ldr	r3, [pc, #56]	; (800dc2c <pbuf_pool_is_empty+0x4c>)
 800dbf4:	2201      	movs	r2, #1
 800dbf6:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800dbf8:	6878      	ldr	r0, [r7, #4]
 800dbfa:	f009 fc73 	bl	80174e4 <sys_arch_unprotect>

  if (!queued) {
 800dbfe:	78fb      	ldrb	r3, [r7, #3]
 800dc00:	2b00      	cmp	r3, #0
 800dc02:	d10f      	bne.n	800dc24 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800dc04:	2100      	movs	r1, #0
 800dc06:	480a      	ldr	r0, [pc, #40]	; (800dc30 <pbuf_pool_is_empty+0x50>)
 800dc08:	f7fe fedc 	bl	800c9c4 <tcpip_try_callback>
 800dc0c:	4603      	mov	r3, r0
 800dc0e:	2b00      	cmp	r3, #0
 800dc10:	d008      	beq.n	800dc24 <pbuf_pool_is_empty+0x44>
 800dc12:	f009 fc59 	bl	80174c8 <sys_arch_protect>
 800dc16:	6078      	str	r0, [r7, #4]
 800dc18:	4b04      	ldr	r3, [pc, #16]	; (800dc2c <pbuf_pool_is_empty+0x4c>)
 800dc1a:	2200      	movs	r2, #0
 800dc1c:	701a      	strb	r2, [r3, #0]
 800dc1e:	6878      	ldr	r0, [r7, #4]
 800dc20:	f009 fc60 	bl	80174e4 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800dc24:	bf00      	nop
 800dc26:	3708      	adds	r7, #8
 800dc28:	46bd      	mov	sp, r7
 800dc2a:	bd80      	pop	{r7, pc}
 800dc2c:	2000d280 	.word	0x2000d280
 800dc30:	0800dbcd 	.word	0x0800dbcd

0800dc34 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800dc34:	b480      	push	{r7}
 800dc36:	b085      	sub	sp, #20
 800dc38:	af00      	add	r7, sp, #0
 800dc3a:	60f8      	str	r0, [r7, #12]
 800dc3c:	60b9      	str	r1, [r7, #8]
 800dc3e:	4611      	mov	r1, r2
 800dc40:	461a      	mov	r2, r3
 800dc42:	460b      	mov	r3, r1
 800dc44:	80fb      	strh	r3, [r7, #6]
 800dc46:	4613      	mov	r3, r2
 800dc48:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800dc4a:	68fb      	ldr	r3, [r7, #12]
 800dc4c:	2200      	movs	r2, #0
 800dc4e:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800dc50:	68fb      	ldr	r3, [r7, #12]
 800dc52:	68ba      	ldr	r2, [r7, #8]
 800dc54:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800dc56:	68fb      	ldr	r3, [r7, #12]
 800dc58:	88fa      	ldrh	r2, [r7, #6]
 800dc5a:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800dc5c:	68fb      	ldr	r3, [r7, #12]
 800dc5e:	88ba      	ldrh	r2, [r7, #4]
 800dc60:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800dc62:	8b3b      	ldrh	r3, [r7, #24]
 800dc64:	b2da      	uxtb	r2, r3
 800dc66:	68fb      	ldr	r3, [r7, #12]
 800dc68:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800dc6a:	68fb      	ldr	r3, [r7, #12]
 800dc6c:	7f3a      	ldrb	r2, [r7, #28]
 800dc6e:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800dc70:	68fb      	ldr	r3, [r7, #12]
 800dc72:	2201      	movs	r2, #1
 800dc74:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800dc76:	68fb      	ldr	r3, [r7, #12]
 800dc78:	2200      	movs	r2, #0
 800dc7a:	73da      	strb	r2, [r3, #15]
}
 800dc7c:	bf00      	nop
 800dc7e:	3714      	adds	r7, #20
 800dc80:	46bd      	mov	sp, r7
 800dc82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc86:	4770      	bx	lr

0800dc88 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800dc88:	b580      	push	{r7, lr}
 800dc8a:	b08c      	sub	sp, #48	; 0x30
 800dc8c:	af02      	add	r7, sp, #8
 800dc8e:	4603      	mov	r3, r0
 800dc90:	71fb      	strb	r3, [r7, #7]
 800dc92:	460b      	mov	r3, r1
 800dc94:	80bb      	strh	r3, [r7, #4]
 800dc96:	4613      	mov	r3, r2
 800dc98:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800dc9a:	79fb      	ldrb	r3, [r7, #7]
 800dc9c:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800dc9e:	887b      	ldrh	r3, [r7, #2]
 800dca0:	2b41      	cmp	r3, #65	; 0x41
 800dca2:	d00b      	beq.n	800dcbc <pbuf_alloc+0x34>
 800dca4:	2b41      	cmp	r3, #65	; 0x41
 800dca6:	dc02      	bgt.n	800dcae <pbuf_alloc+0x26>
 800dca8:	2b01      	cmp	r3, #1
 800dcaa:	d007      	beq.n	800dcbc <pbuf_alloc+0x34>
 800dcac:	e0c2      	b.n	800de34 <pbuf_alloc+0x1ac>
 800dcae:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800dcb2:	d00b      	beq.n	800dccc <pbuf_alloc+0x44>
 800dcb4:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800dcb8:	d070      	beq.n	800dd9c <pbuf_alloc+0x114>
 800dcba:	e0bb      	b.n	800de34 <pbuf_alloc+0x1ac>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800dcbc:	887a      	ldrh	r2, [r7, #2]
 800dcbe:	88bb      	ldrh	r3, [r7, #4]
 800dcc0:	4619      	mov	r1, r3
 800dcc2:	2000      	movs	r0, #0
 800dcc4:	f000 f8d2 	bl	800de6c <pbuf_alloc_reference>
 800dcc8:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800dcca:	e0bd      	b.n	800de48 <pbuf_alloc+0x1c0>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800dccc:	2300      	movs	r3, #0
 800dcce:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800dcd0:	2300      	movs	r3, #0
 800dcd2:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800dcd4:	88bb      	ldrh	r3, [r7, #4]
 800dcd6:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800dcd8:	200b      	movs	r0, #11
 800dcda:	f7ff fbc7 	bl	800d46c <memp_malloc>
 800dcde:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800dce0:	693b      	ldr	r3, [r7, #16]
 800dce2:	2b00      	cmp	r3, #0
 800dce4:	d109      	bne.n	800dcfa <pbuf_alloc+0x72>
          PBUF_POOL_IS_EMPTY();
 800dce6:	f7ff ff7b 	bl	800dbe0 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800dcea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcec:	2b00      	cmp	r3, #0
 800dcee:	d002      	beq.n	800dcf6 <pbuf_alloc+0x6e>
            pbuf_free(p);
 800dcf0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dcf2:	f000 fadb 	bl	800e2ac <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800dcf6:	2300      	movs	r3, #0
 800dcf8:	e0a7      	b.n	800de4a <pbuf_alloc+0x1c2>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800dcfa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800dcfc:	3303      	adds	r3, #3
 800dcfe:	b29b      	uxth	r3, r3
 800dd00:	f023 0303 	bic.w	r3, r3, #3
 800dd04:	b29b      	uxth	r3, r3
 800dd06:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800dd0a:	b29b      	uxth	r3, r3
 800dd0c:	8b7a      	ldrh	r2, [r7, #26]
 800dd0e:	4293      	cmp	r3, r2
 800dd10:	bf28      	it	cs
 800dd12:	4613      	movcs	r3, r2
 800dd14:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800dd16:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800dd18:	3310      	adds	r3, #16
 800dd1a:	693a      	ldr	r2, [r7, #16]
 800dd1c:	4413      	add	r3, r2
 800dd1e:	3303      	adds	r3, #3
 800dd20:	f023 0303 	bic.w	r3, r3, #3
 800dd24:	4618      	mov	r0, r3
 800dd26:	89f9      	ldrh	r1, [r7, #14]
 800dd28:	8b7a      	ldrh	r2, [r7, #26]
 800dd2a:	2300      	movs	r3, #0
 800dd2c:	9301      	str	r3, [sp, #4]
 800dd2e:	887b      	ldrh	r3, [r7, #2]
 800dd30:	9300      	str	r3, [sp, #0]
 800dd32:	460b      	mov	r3, r1
 800dd34:	4601      	mov	r1, r0
 800dd36:	6938      	ldr	r0, [r7, #16]
 800dd38:	f7ff ff7c 	bl	800dc34 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800dd3c:	693b      	ldr	r3, [r7, #16]
 800dd3e:	685b      	ldr	r3, [r3, #4]
 800dd40:	f003 0303 	and.w	r3, r3, #3
 800dd44:	2b00      	cmp	r3, #0
 800dd46:	d006      	beq.n	800dd56 <pbuf_alloc+0xce>
 800dd48:	4b42      	ldr	r3, [pc, #264]	; (800de54 <pbuf_alloc+0x1cc>)
 800dd4a:	f240 1201 	movw	r2, #257	; 0x101
 800dd4e:	4942      	ldr	r1, [pc, #264]	; (800de58 <pbuf_alloc+0x1d0>)
 800dd50:	4842      	ldr	r0, [pc, #264]	; (800de5c <pbuf_alloc+0x1d4>)
 800dd52:	f009 fc31 	bl	80175b8 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800dd56:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800dd58:	3303      	adds	r3, #3
 800dd5a:	f023 0303 	bic.w	r3, r3, #3
 800dd5e:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800dd62:	d106      	bne.n	800dd72 <pbuf_alloc+0xea>
 800dd64:	4b3b      	ldr	r3, [pc, #236]	; (800de54 <pbuf_alloc+0x1cc>)
 800dd66:	f240 1203 	movw	r2, #259	; 0x103
 800dd6a:	493d      	ldr	r1, [pc, #244]	; (800de60 <pbuf_alloc+0x1d8>)
 800dd6c:	483b      	ldr	r0, [pc, #236]	; (800de5c <pbuf_alloc+0x1d4>)
 800dd6e:	f009 fc23 	bl	80175b8 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800dd72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd74:	2b00      	cmp	r3, #0
 800dd76:	d102      	bne.n	800dd7e <pbuf_alloc+0xf6>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800dd78:	693b      	ldr	r3, [r7, #16]
 800dd7a:	627b      	str	r3, [r7, #36]	; 0x24
 800dd7c:	e002      	b.n	800dd84 <pbuf_alloc+0xfc>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800dd7e:	69fb      	ldr	r3, [r7, #28]
 800dd80:	693a      	ldr	r2, [r7, #16]
 800dd82:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800dd84:	693b      	ldr	r3, [r7, #16]
 800dd86:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800dd88:	8b7a      	ldrh	r2, [r7, #26]
 800dd8a:	89fb      	ldrh	r3, [r7, #14]
 800dd8c:	1ad3      	subs	r3, r2, r3
 800dd8e:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800dd90:	2300      	movs	r3, #0
 800dd92:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800dd94:	8b7b      	ldrh	r3, [r7, #26]
 800dd96:	2b00      	cmp	r3, #0
 800dd98:	d19e      	bne.n	800dcd8 <pbuf_alloc+0x50>
      break;
 800dd9a:	e055      	b.n	800de48 <pbuf_alloc+0x1c0>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800dd9c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800dd9e:	3303      	adds	r3, #3
 800dda0:	b29b      	uxth	r3, r3
 800dda2:	f023 0303 	bic.w	r3, r3, #3
 800dda6:	b29a      	uxth	r2, r3
 800dda8:	88bb      	ldrh	r3, [r7, #4]
 800ddaa:	3303      	adds	r3, #3
 800ddac:	b29b      	uxth	r3, r3
 800ddae:	f023 0303 	bic.w	r3, r3, #3
 800ddb2:	b29b      	uxth	r3, r3
 800ddb4:	4413      	add	r3, r2
 800ddb6:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800ddb8:	8b3b      	ldrh	r3, [r7, #24]
 800ddba:	3310      	adds	r3, #16
 800ddbc:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800ddbe:	8b3a      	ldrh	r2, [r7, #24]
 800ddc0:	88bb      	ldrh	r3, [r7, #4]
 800ddc2:	3303      	adds	r3, #3
 800ddc4:	f023 0303 	bic.w	r3, r3, #3
 800ddc8:	429a      	cmp	r2, r3
 800ddca:	d306      	bcc.n	800ddda <pbuf_alloc+0x152>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800ddcc:	8afa      	ldrh	r2, [r7, #22]
 800ddce:	88bb      	ldrh	r3, [r7, #4]
 800ddd0:	3303      	adds	r3, #3
 800ddd2:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800ddd6:	429a      	cmp	r2, r3
 800ddd8:	d201      	bcs.n	800ddde <pbuf_alloc+0x156>
        return NULL;
 800ddda:	2300      	movs	r3, #0
 800dddc:	e035      	b.n	800de4a <pbuf_alloc+0x1c2>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800ddde:	8afb      	ldrh	r3, [r7, #22]
 800dde0:	4618      	mov	r0, r3
 800dde2:	f7ff f9c1 	bl	800d168 <mem_malloc>
 800dde6:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800dde8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddea:	2b00      	cmp	r3, #0
 800ddec:	d101      	bne.n	800ddf2 <pbuf_alloc+0x16a>
        return NULL;
 800ddee:	2300      	movs	r3, #0
 800ddf0:	e02b      	b.n	800de4a <pbuf_alloc+0x1c2>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800ddf2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ddf4:	3310      	adds	r3, #16
 800ddf6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ddf8:	4413      	add	r3, r2
 800ddfa:	3303      	adds	r3, #3
 800ddfc:	f023 0303 	bic.w	r3, r3, #3
 800de00:	4618      	mov	r0, r3
 800de02:	88b9      	ldrh	r1, [r7, #4]
 800de04:	88ba      	ldrh	r2, [r7, #4]
 800de06:	2300      	movs	r3, #0
 800de08:	9301      	str	r3, [sp, #4]
 800de0a:	887b      	ldrh	r3, [r7, #2]
 800de0c:	9300      	str	r3, [sp, #0]
 800de0e:	460b      	mov	r3, r1
 800de10:	4601      	mov	r1, r0
 800de12:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800de14:	f7ff ff0e 	bl	800dc34 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800de18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de1a:	685b      	ldr	r3, [r3, #4]
 800de1c:	f003 0303 	and.w	r3, r3, #3
 800de20:	2b00      	cmp	r3, #0
 800de22:	d010      	beq.n	800de46 <pbuf_alloc+0x1be>
 800de24:	4b0b      	ldr	r3, [pc, #44]	; (800de54 <pbuf_alloc+0x1cc>)
 800de26:	f240 1223 	movw	r2, #291	; 0x123
 800de2a:	490e      	ldr	r1, [pc, #56]	; (800de64 <pbuf_alloc+0x1dc>)
 800de2c:	480b      	ldr	r0, [pc, #44]	; (800de5c <pbuf_alloc+0x1d4>)
 800de2e:	f009 fbc3 	bl	80175b8 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800de32:	e008      	b.n	800de46 <pbuf_alloc+0x1be>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800de34:	4b07      	ldr	r3, [pc, #28]	; (800de54 <pbuf_alloc+0x1cc>)
 800de36:	f240 1227 	movw	r2, #295	; 0x127
 800de3a:	490b      	ldr	r1, [pc, #44]	; (800de68 <pbuf_alloc+0x1e0>)
 800de3c:	4807      	ldr	r0, [pc, #28]	; (800de5c <pbuf_alloc+0x1d4>)
 800de3e:	f009 fbbb 	bl	80175b8 <iprintf>
      return NULL;
 800de42:	2300      	movs	r3, #0
 800de44:	e001      	b.n	800de4a <pbuf_alloc+0x1c2>
      break;
 800de46:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800de48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800de4a:	4618      	mov	r0, r3
 800de4c:	3728      	adds	r7, #40	; 0x28
 800de4e:	46bd      	mov	sp, r7
 800de50:	bd80      	pop	{r7, pc}
 800de52:	bf00      	nop
 800de54:	0801982c 	.word	0x0801982c
 800de58:	0801985c 	.word	0x0801985c
 800de5c:	0801988c 	.word	0x0801988c
 800de60:	080198b4 	.word	0x080198b4
 800de64:	080198e8 	.word	0x080198e8
 800de68:	08019914 	.word	0x08019914

0800de6c <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800de6c:	b580      	push	{r7, lr}
 800de6e:	b086      	sub	sp, #24
 800de70:	af02      	add	r7, sp, #8
 800de72:	6078      	str	r0, [r7, #4]
 800de74:	460b      	mov	r3, r1
 800de76:	807b      	strh	r3, [r7, #2]
 800de78:	4613      	mov	r3, r2
 800de7a:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800de7c:	883b      	ldrh	r3, [r7, #0]
 800de7e:	2b41      	cmp	r3, #65	; 0x41
 800de80:	d009      	beq.n	800de96 <pbuf_alloc_reference+0x2a>
 800de82:	883b      	ldrh	r3, [r7, #0]
 800de84:	2b01      	cmp	r3, #1
 800de86:	d006      	beq.n	800de96 <pbuf_alloc_reference+0x2a>
 800de88:	4b0f      	ldr	r3, [pc, #60]	; (800dec8 <pbuf_alloc_reference+0x5c>)
 800de8a:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800de8e:	490f      	ldr	r1, [pc, #60]	; (800decc <pbuf_alloc_reference+0x60>)
 800de90:	480f      	ldr	r0, [pc, #60]	; (800ded0 <pbuf_alloc_reference+0x64>)
 800de92:	f009 fb91 	bl	80175b8 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800de96:	200a      	movs	r0, #10
 800de98:	f7ff fae8 	bl	800d46c <memp_malloc>
 800de9c:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800de9e:	68fb      	ldr	r3, [r7, #12]
 800dea0:	2b00      	cmp	r3, #0
 800dea2:	d101      	bne.n	800dea8 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800dea4:	2300      	movs	r3, #0
 800dea6:	e00b      	b.n	800dec0 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800dea8:	8879      	ldrh	r1, [r7, #2]
 800deaa:	887a      	ldrh	r2, [r7, #2]
 800deac:	2300      	movs	r3, #0
 800deae:	9301      	str	r3, [sp, #4]
 800deb0:	883b      	ldrh	r3, [r7, #0]
 800deb2:	9300      	str	r3, [sp, #0]
 800deb4:	460b      	mov	r3, r1
 800deb6:	6879      	ldr	r1, [r7, #4]
 800deb8:	68f8      	ldr	r0, [r7, #12]
 800deba:	f7ff febb 	bl	800dc34 <pbuf_init_alloced_pbuf>
  return p;
 800debe:	68fb      	ldr	r3, [r7, #12]
}
 800dec0:	4618      	mov	r0, r3
 800dec2:	3710      	adds	r7, #16
 800dec4:	46bd      	mov	sp, r7
 800dec6:	bd80      	pop	{r7, pc}
 800dec8:	0801982c 	.word	0x0801982c
 800decc:	08019930 	.word	0x08019930
 800ded0:	0801988c 	.word	0x0801988c

0800ded4 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800ded4:	b580      	push	{r7, lr}
 800ded6:	b088      	sub	sp, #32
 800ded8:	af02      	add	r7, sp, #8
 800deda:	607b      	str	r3, [r7, #4]
 800dedc:	4603      	mov	r3, r0
 800dede:	73fb      	strb	r3, [r7, #15]
 800dee0:	460b      	mov	r3, r1
 800dee2:	81bb      	strh	r3, [r7, #12]
 800dee4:	4613      	mov	r3, r2
 800dee6:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800dee8:	7bfb      	ldrb	r3, [r7, #15]
 800deea:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800deec:	8a7b      	ldrh	r3, [r7, #18]
 800deee:	3303      	adds	r3, #3
 800def0:	f023 0203 	bic.w	r2, r3, #3
 800def4:	89bb      	ldrh	r3, [r7, #12]
 800def6:	441a      	add	r2, r3
 800def8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800defa:	429a      	cmp	r2, r3
 800defc:	d901      	bls.n	800df02 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800defe:	2300      	movs	r3, #0
 800df00:	e018      	b.n	800df34 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800df02:	6a3b      	ldr	r3, [r7, #32]
 800df04:	2b00      	cmp	r3, #0
 800df06:	d007      	beq.n	800df18 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800df08:	8a7b      	ldrh	r3, [r7, #18]
 800df0a:	3303      	adds	r3, #3
 800df0c:	f023 0303 	bic.w	r3, r3, #3
 800df10:	6a3a      	ldr	r2, [r7, #32]
 800df12:	4413      	add	r3, r2
 800df14:	617b      	str	r3, [r7, #20]
 800df16:	e001      	b.n	800df1c <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800df18:	2300      	movs	r3, #0
 800df1a:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800df1c:	6878      	ldr	r0, [r7, #4]
 800df1e:	89b9      	ldrh	r1, [r7, #12]
 800df20:	89ba      	ldrh	r2, [r7, #12]
 800df22:	2302      	movs	r3, #2
 800df24:	9301      	str	r3, [sp, #4]
 800df26:	897b      	ldrh	r3, [r7, #10]
 800df28:	9300      	str	r3, [sp, #0]
 800df2a:	460b      	mov	r3, r1
 800df2c:	6979      	ldr	r1, [r7, #20]
 800df2e:	f7ff fe81 	bl	800dc34 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800df32:	687b      	ldr	r3, [r7, #4]
}
 800df34:	4618      	mov	r0, r3
 800df36:	3718      	adds	r7, #24
 800df38:	46bd      	mov	sp, r7
 800df3a:	bd80      	pop	{r7, pc}

0800df3c <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800df3c:	b580      	push	{r7, lr}
 800df3e:	b084      	sub	sp, #16
 800df40:	af00      	add	r7, sp, #0
 800df42:	6078      	str	r0, [r7, #4]
 800df44:	460b      	mov	r3, r1
 800df46:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	2b00      	cmp	r3, #0
 800df4c:	d106      	bne.n	800df5c <pbuf_realloc+0x20>
 800df4e:	4b3a      	ldr	r3, [pc, #232]	; (800e038 <pbuf_realloc+0xfc>)
 800df50:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800df54:	4939      	ldr	r1, [pc, #228]	; (800e03c <pbuf_realloc+0x100>)
 800df56:	483a      	ldr	r0, [pc, #232]	; (800e040 <pbuf_realloc+0x104>)
 800df58:	f009 fb2e 	bl	80175b8 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	891b      	ldrh	r3, [r3, #8]
 800df60:	887a      	ldrh	r2, [r7, #2]
 800df62:	429a      	cmp	r2, r3
 800df64:	d264      	bcs.n	800e030 <pbuf_realloc+0xf4>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	891a      	ldrh	r2, [r3, #8]
 800df6a:	887b      	ldrh	r3, [r7, #2]
 800df6c:	1ad3      	subs	r3, r2, r3
 800df6e:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800df70:	887b      	ldrh	r3, [r7, #2]
 800df72:	817b      	strh	r3, [r7, #10]
  q = p;
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800df78:	e018      	b.n	800dfac <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800df7a:	68fb      	ldr	r3, [r7, #12]
 800df7c:	895b      	ldrh	r3, [r3, #10]
 800df7e:	897a      	ldrh	r2, [r7, #10]
 800df80:	1ad3      	subs	r3, r2, r3
 800df82:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800df84:	68fb      	ldr	r3, [r7, #12]
 800df86:	891a      	ldrh	r2, [r3, #8]
 800df88:	893b      	ldrh	r3, [r7, #8]
 800df8a:	1ad3      	subs	r3, r2, r3
 800df8c:	b29a      	uxth	r2, r3
 800df8e:	68fb      	ldr	r3, [r7, #12]
 800df90:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800df92:	68fb      	ldr	r3, [r7, #12]
 800df94:	681b      	ldr	r3, [r3, #0]
 800df96:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800df98:	68fb      	ldr	r3, [r7, #12]
 800df9a:	2b00      	cmp	r3, #0
 800df9c:	d106      	bne.n	800dfac <pbuf_realloc+0x70>
 800df9e:	4b26      	ldr	r3, [pc, #152]	; (800e038 <pbuf_realloc+0xfc>)
 800dfa0:	f240 12af 	movw	r2, #431	; 0x1af
 800dfa4:	4927      	ldr	r1, [pc, #156]	; (800e044 <pbuf_realloc+0x108>)
 800dfa6:	4826      	ldr	r0, [pc, #152]	; (800e040 <pbuf_realloc+0x104>)
 800dfa8:	f009 fb06 	bl	80175b8 <iprintf>
  while (rem_len > q->len) {
 800dfac:	68fb      	ldr	r3, [r7, #12]
 800dfae:	895b      	ldrh	r3, [r3, #10]
 800dfb0:	897a      	ldrh	r2, [r7, #10]
 800dfb2:	429a      	cmp	r2, r3
 800dfb4:	d8e1      	bhi.n	800df7a <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800dfb6:	68fb      	ldr	r3, [r7, #12]
 800dfb8:	7b1b      	ldrb	r3, [r3, #12]
 800dfba:	f003 030f 	and.w	r3, r3, #15
 800dfbe:	2b00      	cmp	r3, #0
 800dfc0:	d122      	bne.n	800e008 <pbuf_realloc+0xcc>
 800dfc2:	68fb      	ldr	r3, [r7, #12]
 800dfc4:	895b      	ldrh	r3, [r3, #10]
 800dfc6:	897a      	ldrh	r2, [r7, #10]
 800dfc8:	429a      	cmp	r2, r3
 800dfca:	d01d      	beq.n	800e008 <pbuf_realloc+0xcc>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800dfcc:	68fb      	ldr	r3, [r7, #12]
 800dfce:	7b5b      	ldrb	r3, [r3, #13]
 800dfd0:	f003 0302 	and.w	r3, r3, #2
 800dfd4:	2b00      	cmp	r3, #0
 800dfd6:	d117      	bne.n	800e008 <pbuf_realloc+0xcc>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800dfd8:	68fb      	ldr	r3, [r7, #12]
 800dfda:	685b      	ldr	r3, [r3, #4]
 800dfdc:	461a      	mov	r2, r3
 800dfde:	68fb      	ldr	r3, [r7, #12]
 800dfe0:	1ad3      	subs	r3, r2, r3
 800dfe2:	b29a      	uxth	r2, r3
 800dfe4:	897b      	ldrh	r3, [r7, #10]
 800dfe6:	4413      	add	r3, r2
 800dfe8:	b29b      	uxth	r3, r3
 800dfea:	4619      	mov	r1, r3
 800dfec:	68f8      	ldr	r0, [r7, #12]
 800dfee:	f7fe ffb1 	bl	800cf54 <mem_trim>
 800dff2:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800dff4:	68fb      	ldr	r3, [r7, #12]
 800dff6:	2b00      	cmp	r3, #0
 800dff8:	d106      	bne.n	800e008 <pbuf_realloc+0xcc>
 800dffa:	4b0f      	ldr	r3, [pc, #60]	; (800e038 <pbuf_realloc+0xfc>)
 800dffc:	f240 12bd 	movw	r2, #445	; 0x1bd
 800e000:	4911      	ldr	r1, [pc, #68]	; (800e048 <pbuf_realloc+0x10c>)
 800e002:	480f      	ldr	r0, [pc, #60]	; (800e040 <pbuf_realloc+0x104>)
 800e004:	f009 fad8 	bl	80175b8 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800e008:	68fb      	ldr	r3, [r7, #12]
 800e00a:	897a      	ldrh	r2, [r7, #10]
 800e00c:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800e00e:	68fb      	ldr	r3, [r7, #12]
 800e010:	895a      	ldrh	r2, [r3, #10]
 800e012:	68fb      	ldr	r3, [r7, #12]
 800e014:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800e016:	68fb      	ldr	r3, [r7, #12]
 800e018:	681b      	ldr	r3, [r3, #0]
 800e01a:	2b00      	cmp	r3, #0
 800e01c:	d004      	beq.n	800e028 <pbuf_realloc+0xec>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800e01e:	68fb      	ldr	r3, [r7, #12]
 800e020:	681b      	ldr	r3, [r3, #0]
 800e022:	4618      	mov	r0, r3
 800e024:	f000 f942 	bl	800e2ac <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800e028:	68fb      	ldr	r3, [r7, #12]
 800e02a:	2200      	movs	r2, #0
 800e02c:	601a      	str	r2, [r3, #0]
 800e02e:	e000      	b.n	800e032 <pbuf_realloc+0xf6>
    return;
 800e030:	bf00      	nop

}
 800e032:	3710      	adds	r7, #16
 800e034:	46bd      	mov	sp, r7
 800e036:	bd80      	pop	{r7, pc}
 800e038:	0801982c 	.word	0x0801982c
 800e03c:	08019944 	.word	0x08019944
 800e040:	0801988c 	.word	0x0801988c
 800e044:	0801995c 	.word	0x0801995c
 800e048:	08019974 	.word	0x08019974

0800e04c <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800e04c:	b580      	push	{r7, lr}
 800e04e:	b086      	sub	sp, #24
 800e050:	af00      	add	r7, sp, #0
 800e052:	60f8      	str	r0, [r7, #12]
 800e054:	60b9      	str	r1, [r7, #8]
 800e056:	4613      	mov	r3, r2
 800e058:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800e05a:	68fb      	ldr	r3, [r7, #12]
 800e05c:	2b00      	cmp	r3, #0
 800e05e:	d106      	bne.n	800e06e <pbuf_add_header_impl+0x22>
 800e060:	4b2b      	ldr	r3, [pc, #172]	; (800e110 <pbuf_add_header_impl+0xc4>)
 800e062:	f240 12df 	movw	r2, #479	; 0x1df
 800e066:	492b      	ldr	r1, [pc, #172]	; (800e114 <pbuf_add_header_impl+0xc8>)
 800e068:	482b      	ldr	r0, [pc, #172]	; (800e118 <pbuf_add_header_impl+0xcc>)
 800e06a:	f009 faa5 	bl	80175b8 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800e06e:	68fb      	ldr	r3, [r7, #12]
 800e070:	2b00      	cmp	r3, #0
 800e072:	d003      	beq.n	800e07c <pbuf_add_header_impl+0x30>
 800e074:	68bb      	ldr	r3, [r7, #8]
 800e076:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e07a:	d301      	bcc.n	800e080 <pbuf_add_header_impl+0x34>
    return 1;
 800e07c:	2301      	movs	r3, #1
 800e07e:	e043      	b.n	800e108 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800e080:	68bb      	ldr	r3, [r7, #8]
 800e082:	2b00      	cmp	r3, #0
 800e084:	d101      	bne.n	800e08a <pbuf_add_header_impl+0x3e>
    return 0;
 800e086:	2300      	movs	r3, #0
 800e088:	e03e      	b.n	800e108 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800e08a:	68bb      	ldr	r3, [r7, #8]
 800e08c:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800e08e:	68fb      	ldr	r3, [r7, #12]
 800e090:	891a      	ldrh	r2, [r3, #8]
 800e092:	8a7b      	ldrh	r3, [r7, #18]
 800e094:	4413      	add	r3, r2
 800e096:	b29b      	uxth	r3, r3
 800e098:	8a7a      	ldrh	r2, [r7, #18]
 800e09a:	429a      	cmp	r2, r3
 800e09c:	d901      	bls.n	800e0a2 <pbuf_add_header_impl+0x56>
    return 1;
 800e09e:	2301      	movs	r3, #1
 800e0a0:	e032      	b.n	800e108 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800e0a2:	68fb      	ldr	r3, [r7, #12]
 800e0a4:	7b1b      	ldrb	r3, [r3, #12]
 800e0a6:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800e0a8:	8a3b      	ldrh	r3, [r7, #16]
 800e0aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e0ae:	2b00      	cmp	r3, #0
 800e0b0:	d00c      	beq.n	800e0cc <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800e0b2:	68fb      	ldr	r3, [r7, #12]
 800e0b4:	685a      	ldr	r2, [r3, #4]
 800e0b6:	68bb      	ldr	r3, [r7, #8]
 800e0b8:	425b      	negs	r3, r3
 800e0ba:	4413      	add	r3, r2
 800e0bc:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800e0be:	68fb      	ldr	r3, [r7, #12]
 800e0c0:	3310      	adds	r3, #16
 800e0c2:	697a      	ldr	r2, [r7, #20]
 800e0c4:	429a      	cmp	r2, r3
 800e0c6:	d20d      	bcs.n	800e0e4 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800e0c8:	2301      	movs	r3, #1
 800e0ca:	e01d      	b.n	800e108 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800e0cc:	79fb      	ldrb	r3, [r7, #7]
 800e0ce:	2b00      	cmp	r3, #0
 800e0d0:	d006      	beq.n	800e0e0 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800e0d2:	68fb      	ldr	r3, [r7, #12]
 800e0d4:	685a      	ldr	r2, [r3, #4]
 800e0d6:	68bb      	ldr	r3, [r7, #8]
 800e0d8:	425b      	negs	r3, r3
 800e0da:	4413      	add	r3, r2
 800e0dc:	617b      	str	r3, [r7, #20]
 800e0de:	e001      	b.n	800e0e4 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800e0e0:	2301      	movs	r3, #1
 800e0e2:	e011      	b.n	800e108 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800e0e4:	68fb      	ldr	r3, [r7, #12]
 800e0e6:	697a      	ldr	r2, [r7, #20]
 800e0e8:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800e0ea:	68fb      	ldr	r3, [r7, #12]
 800e0ec:	895a      	ldrh	r2, [r3, #10]
 800e0ee:	8a7b      	ldrh	r3, [r7, #18]
 800e0f0:	4413      	add	r3, r2
 800e0f2:	b29a      	uxth	r2, r3
 800e0f4:	68fb      	ldr	r3, [r7, #12]
 800e0f6:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800e0f8:	68fb      	ldr	r3, [r7, #12]
 800e0fa:	891a      	ldrh	r2, [r3, #8]
 800e0fc:	8a7b      	ldrh	r3, [r7, #18]
 800e0fe:	4413      	add	r3, r2
 800e100:	b29a      	uxth	r2, r3
 800e102:	68fb      	ldr	r3, [r7, #12]
 800e104:	811a      	strh	r2, [r3, #8]


  return 0;
 800e106:	2300      	movs	r3, #0
}
 800e108:	4618      	mov	r0, r3
 800e10a:	3718      	adds	r7, #24
 800e10c:	46bd      	mov	sp, r7
 800e10e:	bd80      	pop	{r7, pc}
 800e110:	0801982c 	.word	0x0801982c
 800e114:	08019990 	.word	0x08019990
 800e118:	0801988c 	.word	0x0801988c

0800e11c <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800e11c:	b580      	push	{r7, lr}
 800e11e:	b082      	sub	sp, #8
 800e120:	af00      	add	r7, sp, #0
 800e122:	6078      	str	r0, [r7, #4]
 800e124:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800e126:	2200      	movs	r2, #0
 800e128:	6839      	ldr	r1, [r7, #0]
 800e12a:	6878      	ldr	r0, [r7, #4]
 800e12c:	f7ff ff8e 	bl	800e04c <pbuf_add_header_impl>
 800e130:	4603      	mov	r3, r0
}
 800e132:	4618      	mov	r0, r3
 800e134:	3708      	adds	r7, #8
 800e136:	46bd      	mov	sp, r7
 800e138:	bd80      	pop	{r7, pc}
	...

0800e13c <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800e13c:	b580      	push	{r7, lr}
 800e13e:	b084      	sub	sp, #16
 800e140:	af00      	add	r7, sp, #0
 800e142:	6078      	str	r0, [r7, #4]
 800e144:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	2b00      	cmp	r3, #0
 800e14a:	d106      	bne.n	800e15a <pbuf_remove_header+0x1e>
 800e14c:	4b20      	ldr	r3, [pc, #128]	; (800e1d0 <pbuf_remove_header+0x94>)
 800e14e:	f240 224b 	movw	r2, #587	; 0x24b
 800e152:	4920      	ldr	r1, [pc, #128]	; (800e1d4 <pbuf_remove_header+0x98>)
 800e154:	4820      	ldr	r0, [pc, #128]	; (800e1d8 <pbuf_remove_header+0x9c>)
 800e156:	f009 fa2f 	bl	80175b8 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	2b00      	cmp	r3, #0
 800e15e:	d003      	beq.n	800e168 <pbuf_remove_header+0x2c>
 800e160:	683b      	ldr	r3, [r7, #0]
 800e162:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e166:	d301      	bcc.n	800e16c <pbuf_remove_header+0x30>
    return 1;
 800e168:	2301      	movs	r3, #1
 800e16a:	e02c      	b.n	800e1c6 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800e16c:	683b      	ldr	r3, [r7, #0]
 800e16e:	2b00      	cmp	r3, #0
 800e170:	d101      	bne.n	800e176 <pbuf_remove_header+0x3a>
    return 0;
 800e172:	2300      	movs	r3, #0
 800e174:	e027      	b.n	800e1c6 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800e176:	683b      	ldr	r3, [r7, #0]
 800e178:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	895b      	ldrh	r3, [r3, #10]
 800e17e:	89fa      	ldrh	r2, [r7, #14]
 800e180:	429a      	cmp	r2, r3
 800e182:	d908      	bls.n	800e196 <pbuf_remove_header+0x5a>
 800e184:	4b12      	ldr	r3, [pc, #72]	; (800e1d0 <pbuf_remove_header+0x94>)
 800e186:	f240 2255 	movw	r2, #597	; 0x255
 800e18a:	4914      	ldr	r1, [pc, #80]	; (800e1dc <pbuf_remove_header+0xa0>)
 800e18c:	4812      	ldr	r0, [pc, #72]	; (800e1d8 <pbuf_remove_header+0x9c>)
 800e18e:	f009 fa13 	bl	80175b8 <iprintf>
 800e192:	2301      	movs	r3, #1
 800e194:	e017      	b.n	800e1c6 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	685b      	ldr	r3, [r3, #4]
 800e19a:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	685a      	ldr	r2, [r3, #4]
 800e1a0:	683b      	ldr	r3, [r7, #0]
 800e1a2:	441a      	add	r2, r3
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	895a      	ldrh	r2, [r3, #10]
 800e1ac:	89fb      	ldrh	r3, [r7, #14]
 800e1ae:	1ad3      	subs	r3, r2, r3
 800e1b0:	b29a      	uxth	r2, r3
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	891a      	ldrh	r2, [r3, #8]
 800e1ba:	89fb      	ldrh	r3, [r7, #14]
 800e1bc:	1ad3      	subs	r3, r2, r3
 800e1be:	b29a      	uxth	r2, r3
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800e1c4:	2300      	movs	r3, #0
}
 800e1c6:	4618      	mov	r0, r3
 800e1c8:	3710      	adds	r7, #16
 800e1ca:	46bd      	mov	sp, r7
 800e1cc:	bd80      	pop	{r7, pc}
 800e1ce:	bf00      	nop
 800e1d0:	0801982c 	.word	0x0801982c
 800e1d4:	08019990 	.word	0x08019990
 800e1d8:	0801988c 	.word	0x0801988c
 800e1dc:	0801999c 	.word	0x0801999c

0800e1e0 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800e1e0:	b580      	push	{r7, lr}
 800e1e2:	b082      	sub	sp, #8
 800e1e4:	af00      	add	r7, sp, #0
 800e1e6:	6078      	str	r0, [r7, #4]
 800e1e8:	460b      	mov	r3, r1
 800e1ea:	807b      	strh	r3, [r7, #2]
 800e1ec:	4613      	mov	r3, r2
 800e1ee:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800e1f0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e1f4:	2b00      	cmp	r3, #0
 800e1f6:	da08      	bge.n	800e20a <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800e1f8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e1fc:	425b      	negs	r3, r3
 800e1fe:	4619      	mov	r1, r3
 800e200:	6878      	ldr	r0, [r7, #4]
 800e202:	f7ff ff9b 	bl	800e13c <pbuf_remove_header>
 800e206:	4603      	mov	r3, r0
 800e208:	e007      	b.n	800e21a <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800e20a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e20e:	787a      	ldrb	r2, [r7, #1]
 800e210:	4619      	mov	r1, r3
 800e212:	6878      	ldr	r0, [r7, #4]
 800e214:	f7ff ff1a 	bl	800e04c <pbuf_add_header_impl>
 800e218:	4603      	mov	r3, r0
  }
}
 800e21a:	4618      	mov	r0, r3
 800e21c:	3708      	adds	r7, #8
 800e21e:	46bd      	mov	sp, r7
 800e220:	bd80      	pop	{r7, pc}

0800e222 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800e222:	b580      	push	{r7, lr}
 800e224:	b082      	sub	sp, #8
 800e226:	af00      	add	r7, sp, #0
 800e228:	6078      	str	r0, [r7, #4]
 800e22a:	460b      	mov	r3, r1
 800e22c:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800e22e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e232:	2201      	movs	r2, #1
 800e234:	4619      	mov	r1, r3
 800e236:	6878      	ldr	r0, [r7, #4]
 800e238:	f7ff ffd2 	bl	800e1e0 <pbuf_header_impl>
 800e23c:	4603      	mov	r3, r0
}
 800e23e:	4618      	mov	r0, r3
 800e240:	3708      	adds	r7, #8
 800e242:	46bd      	mov	sp, r7
 800e244:	bd80      	pop	{r7, pc}

0800e246 <pbuf_free_header>:
 *                   takes an u16_t not s16_t!
 * @return the new head pbuf
 */
struct pbuf *
pbuf_free_header(struct pbuf *q, u16_t size)
{
 800e246:	b580      	push	{r7, lr}
 800e248:	b086      	sub	sp, #24
 800e24a:	af00      	add	r7, sp, #0
 800e24c:	6078      	str	r0, [r7, #4]
 800e24e:	460b      	mov	r3, r1
 800e250:	807b      	strh	r3, [r7, #2]
  struct pbuf *p = q;
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	617b      	str	r3, [r7, #20]
  u16_t free_left = size;
 800e256:	887b      	ldrh	r3, [r7, #2]
 800e258:	827b      	strh	r3, [r7, #18]
  while (free_left && p) {
 800e25a:	e01c      	b.n	800e296 <pbuf_free_header+0x50>
    if (free_left >= p->len) {
 800e25c:	697b      	ldr	r3, [r7, #20]
 800e25e:	895b      	ldrh	r3, [r3, #10]
 800e260:	8a7a      	ldrh	r2, [r7, #18]
 800e262:	429a      	cmp	r2, r3
 800e264:	d310      	bcc.n	800e288 <pbuf_free_header+0x42>
      struct pbuf *f = p;
 800e266:	697b      	ldr	r3, [r7, #20]
 800e268:	60fb      	str	r3, [r7, #12]
      free_left = (u16_t)(free_left - p->len);
 800e26a:	697b      	ldr	r3, [r7, #20]
 800e26c:	895b      	ldrh	r3, [r3, #10]
 800e26e:	8a7a      	ldrh	r2, [r7, #18]
 800e270:	1ad3      	subs	r3, r2, r3
 800e272:	827b      	strh	r3, [r7, #18]
      p = p->next;
 800e274:	697b      	ldr	r3, [r7, #20]
 800e276:	681b      	ldr	r3, [r3, #0]
 800e278:	617b      	str	r3, [r7, #20]
      f->next = 0;
 800e27a:	68fb      	ldr	r3, [r7, #12]
 800e27c:	2200      	movs	r2, #0
 800e27e:	601a      	str	r2, [r3, #0]
      pbuf_free(f);
 800e280:	68f8      	ldr	r0, [r7, #12]
 800e282:	f000 f813 	bl	800e2ac <pbuf_free>
 800e286:	e006      	b.n	800e296 <pbuf_free_header+0x50>
    } else {
      pbuf_remove_header(p, free_left);
 800e288:	8a7b      	ldrh	r3, [r7, #18]
 800e28a:	4619      	mov	r1, r3
 800e28c:	6978      	ldr	r0, [r7, #20]
 800e28e:	f7ff ff55 	bl	800e13c <pbuf_remove_header>
      free_left = 0;
 800e292:	2300      	movs	r3, #0
 800e294:	827b      	strh	r3, [r7, #18]
  while (free_left && p) {
 800e296:	8a7b      	ldrh	r3, [r7, #18]
 800e298:	2b00      	cmp	r3, #0
 800e29a:	d002      	beq.n	800e2a2 <pbuf_free_header+0x5c>
 800e29c:	697b      	ldr	r3, [r7, #20]
 800e29e:	2b00      	cmp	r3, #0
 800e2a0:	d1dc      	bne.n	800e25c <pbuf_free_header+0x16>
    }
  }
  return p;
 800e2a2:	697b      	ldr	r3, [r7, #20]
}
 800e2a4:	4618      	mov	r0, r3
 800e2a6:	3718      	adds	r7, #24
 800e2a8:	46bd      	mov	sp, r7
 800e2aa:	bd80      	pop	{r7, pc}

0800e2ac <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800e2ac:	b580      	push	{r7, lr}
 800e2ae:	b088      	sub	sp, #32
 800e2b0:	af00      	add	r7, sp, #0
 800e2b2:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	2b00      	cmp	r3, #0
 800e2b8:	d10b      	bne.n	800e2d2 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	2b00      	cmp	r3, #0
 800e2be:	d106      	bne.n	800e2ce <pbuf_free+0x22>
 800e2c0:	4b3b      	ldr	r3, [pc, #236]	; (800e3b0 <pbuf_free+0x104>)
 800e2c2:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800e2c6:	493b      	ldr	r1, [pc, #236]	; (800e3b4 <pbuf_free+0x108>)
 800e2c8:	483b      	ldr	r0, [pc, #236]	; (800e3b8 <pbuf_free+0x10c>)
 800e2ca:	f009 f975 	bl	80175b8 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800e2ce:	2300      	movs	r3, #0
 800e2d0:	e069      	b.n	800e3a6 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800e2d2:	2300      	movs	r3, #0
 800e2d4:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800e2d6:	e062      	b.n	800e39e <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800e2d8:	f009 f8f6 	bl	80174c8 <sys_arch_protect>
 800e2dc:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800e2de:	687b      	ldr	r3, [r7, #4]
 800e2e0:	7b9b      	ldrb	r3, [r3, #14]
 800e2e2:	2b00      	cmp	r3, #0
 800e2e4:	d106      	bne.n	800e2f4 <pbuf_free+0x48>
 800e2e6:	4b32      	ldr	r3, [pc, #200]	; (800e3b0 <pbuf_free+0x104>)
 800e2e8:	f240 22f1 	movw	r2, #753	; 0x2f1
 800e2ec:	4933      	ldr	r1, [pc, #204]	; (800e3bc <pbuf_free+0x110>)
 800e2ee:	4832      	ldr	r0, [pc, #200]	; (800e3b8 <pbuf_free+0x10c>)
 800e2f0:	f009 f962 	bl	80175b8 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	7b9b      	ldrb	r3, [r3, #14]
 800e2f8:	3b01      	subs	r3, #1
 800e2fa:	b2da      	uxtb	r2, r3
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	739a      	strb	r2, [r3, #14]
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	7b9b      	ldrb	r3, [r3, #14]
 800e304:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800e306:	69b8      	ldr	r0, [r7, #24]
 800e308:	f009 f8ec 	bl	80174e4 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800e30c:	7dfb      	ldrb	r3, [r7, #23]
 800e30e:	2b00      	cmp	r3, #0
 800e310:	d143      	bne.n	800e39a <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800e312:	687b      	ldr	r3, [r7, #4]
 800e314:	681b      	ldr	r3, [r3, #0]
 800e316:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	7b1b      	ldrb	r3, [r3, #12]
 800e31c:	f003 030f 	and.w	r3, r3, #15
 800e320:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800e322:	687b      	ldr	r3, [r7, #4]
 800e324:	7b5b      	ldrb	r3, [r3, #13]
 800e326:	f003 0302 	and.w	r3, r3, #2
 800e32a:	2b00      	cmp	r3, #0
 800e32c:	d011      	beq.n	800e352 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800e332:	68bb      	ldr	r3, [r7, #8]
 800e334:	691b      	ldr	r3, [r3, #16]
 800e336:	2b00      	cmp	r3, #0
 800e338:	d106      	bne.n	800e348 <pbuf_free+0x9c>
 800e33a:	4b1d      	ldr	r3, [pc, #116]	; (800e3b0 <pbuf_free+0x104>)
 800e33c:	f240 22ff 	movw	r2, #767	; 0x2ff
 800e340:	491f      	ldr	r1, [pc, #124]	; (800e3c0 <pbuf_free+0x114>)
 800e342:	481d      	ldr	r0, [pc, #116]	; (800e3b8 <pbuf_free+0x10c>)
 800e344:	f009 f938 	bl	80175b8 <iprintf>
        pc->custom_free_function(p);
 800e348:	68bb      	ldr	r3, [r7, #8]
 800e34a:	691b      	ldr	r3, [r3, #16]
 800e34c:	6878      	ldr	r0, [r7, #4]
 800e34e:	4798      	blx	r3
 800e350:	e01d      	b.n	800e38e <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800e352:	7bfb      	ldrb	r3, [r7, #15]
 800e354:	2b02      	cmp	r3, #2
 800e356:	d104      	bne.n	800e362 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800e358:	6879      	ldr	r1, [r7, #4]
 800e35a:	200b      	movs	r0, #11
 800e35c:	f7ff f8d8 	bl	800d510 <memp_free>
 800e360:	e015      	b.n	800e38e <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800e362:	7bfb      	ldrb	r3, [r7, #15]
 800e364:	2b01      	cmp	r3, #1
 800e366:	d104      	bne.n	800e372 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800e368:	6879      	ldr	r1, [r7, #4]
 800e36a:	200a      	movs	r0, #10
 800e36c:	f7ff f8d0 	bl	800d510 <memp_free>
 800e370:	e00d      	b.n	800e38e <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800e372:	7bfb      	ldrb	r3, [r7, #15]
 800e374:	2b00      	cmp	r3, #0
 800e376:	d103      	bne.n	800e380 <pbuf_free+0xd4>
          mem_free(p);
 800e378:	6878      	ldr	r0, [r7, #4]
 800e37a:	f7fe fd5b 	bl	800ce34 <mem_free>
 800e37e:	e006      	b.n	800e38e <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800e380:	4b0b      	ldr	r3, [pc, #44]	; (800e3b0 <pbuf_free+0x104>)
 800e382:	f240 320f 	movw	r2, #783	; 0x30f
 800e386:	490f      	ldr	r1, [pc, #60]	; (800e3c4 <pbuf_free+0x118>)
 800e388:	480b      	ldr	r0, [pc, #44]	; (800e3b8 <pbuf_free+0x10c>)
 800e38a:	f009 f915 	bl	80175b8 <iprintf>
        }
      }
      count++;
 800e38e:	7ffb      	ldrb	r3, [r7, #31]
 800e390:	3301      	adds	r3, #1
 800e392:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800e394:	693b      	ldr	r3, [r7, #16]
 800e396:	607b      	str	r3, [r7, #4]
 800e398:	e001      	b.n	800e39e <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800e39a:	2300      	movs	r3, #0
 800e39c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	2b00      	cmp	r3, #0
 800e3a2:	d199      	bne.n	800e2d8 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800e3a4:	7ffb      	ldrb	r3, [r7, #31]
}
 800e3a6:	4618      	mov	r0, r3
 800e3a8:	3720      	adds	r7, #32
 800e3aa:	46bd      	mov	sp, r7
 800e3ac:	bd80      	pop	{r7, pc}
 800e3ae:	bf00      	nop
 800e3b0:	0801982c 	.word	0x0801982c
 800e3b4:	08019990 	.word	0x08019990
 800e3b8:	0801988c 	.word	0x0801988c
 800e3bc:	080199bc 	.word	0x080199bc
 800e3c0:	080199d4 	.word	0x080199d4
 800e3c4:	080199f8 	.word	0x080199f8

0800e3c8 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800e3c8:	b480      	push	{r7}
 800e3ca:	b085      	sub	sp, #20
 800e3cc:	af00      	add	r7, sp, #0
 800e3ce:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800e3d0:	2300      	movs	r3, #0
 800e3d2:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800e3d4:	e005      	b.n	800e3e2 <pbuf_clen+0x1a>
    ++len;
 800e3d6:	89fb      	ldrh	r3, [r7, #14]
 800e3d8:	3301      	adds	r3, #1
 800e3da:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	681b      	ldr	r3, [r3, #0]
 800e3e0:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	2b00      	cmp	r3, #0
 800e3e6:	d1f6      	bne.n	800e3d6 <pbuf_clen+0xe>
  }
  return len;
 800e3e8:	89fb      	ldrh	r3, [r7, #14]
}
 800e3ea:	4618      	mov	r0, r3
 800e3ec:	3714      	adds	r7, #20
 800e3ee:	46bd      	mov	sp, r7
 800e3f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3f4:	4770      	bx	lr
	...

0800e3f8 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800e3f8:	b580      	push	{r7, lr}
 800e3fa:	b084      	sub	sp, #16
 800e3fc:	af00      	add	r7, sp, #0
 800e3fe:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	2b00      	cmp	r3, #0
 800e404:	d016      	beq.n	800e434 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800e406:	f009 f85f 	bl	80174c8 <sys_arch_protect>
 800e40a:	60f8      	str	r0, [r7, #12]
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	7b9b      	ldrb	r3, [r3, #14]
 800e410:	3301      	adds	r3, #1
 800e412:	b2da      	uxtb	r2, r3
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	739a      	strb	r2, [r3, #14]
 800e418:	68f8      	ldr	r0, [r7, #12]
 800e41a:	f009 f863 	bl	80174e4 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	7b9b      	ldrb	r3, [r3, #14]
 800e422:	2b00      	cmp	r3, #0
 800e424:	d106      	bne.n	800e434 <pbuf_ref+0x3c>
 800e426:	4b05      	ldr	r3, [pc, #20]	; (800e43c <pbuf_ref+0x44>)
 800e428:	f240 3242 	movw	r2, #834	; 0x342
 800e42c:	4904      	ldr	r1, [pc, #16]	; (800e440 <pbuf_ref+0x48>)
 800e42e:	4805      	ldr	r0, [pc, #20]	; (800e444 <pbuf_ref+0x4c>)
 800e430:	f009 f8c2 	bl	80175b8 <iprintf>
  }
}
 800e434:	bf00      	nop
 800e436:	3710      	adds	r7, #16
 800e438:	46bd      	mov	sp, r7
 800e43a:	bd80      	pop	{r7, pc}
 800e43c:	0801982c 	.word	0x0801982c
 800e440:	08019a0c 	.word	0x08019a0c
 800e444:	0801988c 	.word	0x0801988c

0800e448 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800e448:	b580      	push	{r7, lr}
 800e44a:	b084      	sub	sp, #16
 800e44c:	af00      	add	r7, sp, #0
 800e44e:	6078      	str	r0, [r7, #4]
 800e450:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	2b00      	cmp	r3, #0
 800e456:	d002      	beq.n	800e45e <pbuf_cat+0x16>
 800e458:	683b      	ldr	r3, [r7, #0]
 800e45a:	2b00      	cmp	r3, #0
 800e45c:	d107      	bne.n	800e46e <pbuf_cat+0x26>
 800e45e:	4b20      	ldr	r3, [pc, #128]	; (800e4e0 <pbuf_cat+0x98>)
 800e460:	f240 325a 	movw	r2, #858	; 0x35a
 800e464:	491f      	ldr	r1, [pc, #124]	; (800e4e4 <pbuf_cat+0x9c>)
 800e466:	4820      	ldr	r0, [pc, #128]	; (800e4e8 <pbuf_cat+0xa0>)
 800e468:	f009 f8a6 	bl	80175b8 <iprintf>
 800e46c:	e034      	b.n	800e4d8 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	60fb      	str	r3, [r7, #12]
 800e472:	e00a      	b.n	800e48a <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800e474:	68fb      	ldr	r3, [r7, #12]
 800e476:	891a      	ldrh	r2, [r3, #8]
 800e478:	683b      	ldr	r3, [r7, #0]
 800e47a:	891b      	ldrh	r3, [r3, #8]
 800e47c:	4413      	add	r3, r2
 800e47e:	b29a      	uxth	r2, r3
 800e480:	68fb      	ldr	r3, [r7, #12]
 800e482:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800e484:	68fb      	ldr	r3, [r7, #12]
 800e486:	681b      	ldr	r3, [r3, #0]
 800e488:	60fb      	str	r3, [r7, #12]
 800e48a:	68fb      	ldr	r3, [r7, #12]
 800e48c:	681b      	ldr	r3, [r3, #0]
 800e48e:	2b00      	cmp	r3, #0
 800e490:	d1f0      	bne.n	800e474 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800e492:	68fb      	ldr	r3, [r7, #12]
 800e494:	891a      	ldrh	r2, [r3, #8]
 800e496:	68fb      	ldr	r3, [r7, #12]
 800e498:	895b      	ldrh	r3, [r3, #10]
 800e49a:	429a      	cmp	r2, r3
 800e49c:	d006      	beq.n	800e4ac <pbuf_cat+0x64>
 800e49e:	4b10      	ldr	r3, [pc, #64]	; (800e4e0 <pbuf_cat+0x98>)
 800e4a0:	f240 3262 	movw	r2, #866	; 0x362
 800e4a4:	4911      	ldr	r1, [pc, #68]	; (800e4ec <pbuf_cat+0xa4>)
 800e4a6:	4810      	ldr	r0, [pc, #64]	; (800e4e8 <pbuf_cat+0xa0>)
 800e4a8:	f009 f886 	bl	80175b8 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800e4ac:	68fb      	ldr	r3, [r7, #12]
 800e4ae:	681b      	ldr	r3, [r3, #0]
 800e4b0:	2b00      	cmp	r3, #0
 800e4b2:	d006      	beq.n	800e4c2 <pbuf_cat+0x7a>
 800e4b4:	4b0a      	ldr	r3, [pc, #40]	; (800e4e0 <pbuf_cat+0x98>)
 800e4b6:	f240 3263 	movw	r2, #867	; 0x363
 800e4ba:	490d      	ldr	r1, [pc, #52]	; (800e4f0 <pbuf_cat+0xa8>)
 800e4bc:	480a      	ldr	r0, [pc, #40]	; (800e4e8 <pbuf_cat+0xa0>)
 800e4be:	f009 f87b 	bl	80175b8 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800e4c2:	68fb      	ldr	r3, [r7, #12]
 800e4c4:	891a      	ldrh	r2, [r3, #8]
 800e4c6:	683b      	ldr	r3, [r7, #0]
 800e4c8:	891b      	ldrh	r3, [r3, #8]
 800e4ca:	4413      	add	r3, r2
 800e4cc:	b29a      	uxth	r2, r3
 800e4ce:	68fb      	ldr	r3, [r7, #12]
 800e4d0:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800e4d2:	68fb      	ldr	r3, [r7, #12]
 800e4d4:	683a      	ldr	r2, [r7, #0]
 800e4d6:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800e4d8:	3710      	adds	r7, #16
 800e4da:	46bd      	mov	sp, r7
 800e4dc:	bd80      	pop	{r7, pc}
 800e4de:	bf00      	nop
 800e4e0:	0801982c 	.word	0x0801982c
 800e4e4:	08019a20 	.word	0x08019a20
 800e4e8:	0801988c 	.word	0x0801988c
 800e4ec:	08019a58 	.word	0x08019a58
 800e4f0:	08019a88 	.word	0x08019a88

0800e4f4 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800e4f4:	b580      	push	{r7, lr}
 800e4f6:	b086      	sub	sp, #24
 800e4f8:	af00      	add	r7, sp, #0
 800e4fa:	6078      	str	r0, [r7, #4]
 800e4fc:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800e4fe:	2300      	movs	r3, #0
 800e500:	617b      	str	r3, [r7, #20]
 800e502:	2300      	movs	r3, #0
 800e504:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	2b00      	cmp	r3, #0
 800e50a:	d008      	beq.n	800e51e <pbuf_copy+0x2a>
 800e50c:	683b      	ldr	r3, [r7, #0]
 800e50e:	2b00      	cmp	r3, #0
 800e510:	d005      	beq.n	800e51e <pbuf_copy+0x2a>
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	891a      	ldrh	r2, [r3, #8]
 800e516:	683b      	ldr	r3, [r7, #0]
 800e518:	891b      	ldrh	r3, [r3, #8]
 800e51a:	429a      	cmp	r2, r3
 800e51c:	d209      	bcs.n	800e532 <pbuf_copy+0x3e>
 800e51e:	4b57      	ldr	r3, [pc, #348]	; (800e67c <pbuf_copy+0x188>)
 800e520:	f240 32ca 	movw	r2, #970	; 0x3ca
 800e524:	4956      	ldr	r1, [pc, #344]	; (800e680 <pbuf_copy+0x18c>)
 800e526:	4857      	ldr	r0, [pc, #348]	; (800e684 <pbuf_copy+0x190>)
 800e528:	f009 f846 	bl	80175b8 <iprintf>
 800e52c:	f06f 030f 	mvn.w	r3, #15
 800e530:	e09f      	b.n	800e672 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	895b      	ldrh	r3, [r3, #10]
 800e536:	461a      	mov	r2, r3
 800e538:	697b      	ldr	r3, [r7, #20]
 800e53a:	1ad2      	subs	r2, r2, r3
 800e53c:	683b      	ldr	r3, [r7, #0]
 800e53e:	895b      	ldrh	r3, [r3, #10]
 800e540:	4619      	mov	r1, r3
 800e542:	693b      	ldr	r3, [r7, #16]
 800e544:	1acb      	subs	r3, r1, r3
 800e546:	429a      	cmp	r2, r3
 800e548:	d306      	bcc.n	800e558 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800e54a:	683b      	ldr	r3, [r7, #0]
 800e54c:	895b      	ldrh	r3, [r3, #10]
 800e54e:	461a      	mov	r2, r3
 800e550:	693b      	ldr	r3, [r7, #16]
 800e552:	1ad3      	subs	r3, r2, r3
 800e554:	60fb      	str	r3, [r7, #12]
 800e556:	e005      	b.n	800e564 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	895b      	ldrh	r3, [r3, #10]
 800e55c:	461a      	mov	r2, r3
 800e55e:	697b      	ldr	r3, [r7, #20]
 800e560:	1ad3      	subs	r3, r2, r3
 800e562:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	685a      	ldr	r2, [r3, #4]
 800e568:	697b      	ldr	r3, [r7, #20]
 800e56a:	18d0      	adds	r0, r2, r3
 800e56c:	683b      	ldr	r3, [r7, #0]
 800e56e:	685a      	ldr	r2, [r3, #4]
 800e570:	693b      	ldr	r3, [r7, #16]
 800e572:	4413      	add	r3, r2
 800e574:	68fa      	ldr	r2, [r7, #12]
 800e576:	4619      	mov	r1, r3
 800e578:	f009 f80b 	bl	8017592 <memcpy>
    offset_to += len;
 800e57c:	697a      	ldr	r2, [r7, #20]
 800e57e:	68fb      	ldr	r3, [r7, #12]
 800e580:	4413      	add	r3, r2
 800e582:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800e584:	693a      	ldr	r2, [r7, #16]
 800e586:	68fb      	ldr	r3, [r7, #12]
 800e588:	4413      	add	r3, r2
 800e58a:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	895b      	ldrh	r3, [r3, #10]
 800e590:	461a      	mov	r2, r3
 800e592:	697b      	ldr	r3, [r7, #20]
 800e594:	4293      	cmp	r3, r2
 800e596:	d906      	bls.n	800e5a6 <pbuf_copy+0xb2>
 800e598:	4b38      	ldr	r3, [pc, #224]	; (800e67c <pbuf_copy+0x188>)
 800e59a:	f240 32d9 	movw	r2, #985	; 0x3d9
 800e59e:	493a      	ldr	r1, [pc, #232]	; (800e688 <pbuf_copy+0x194>)
 800e5a0:	4838      	ldr	r0, [pc, #224]	; (800e684 <pbuf_copy+0x190>)
 800e5a2:	f009 f809 	bl	80175b8 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800e5a6:	683b      	ldr	r3, [r7, #0]
 800e5a8:	895b      	ldrh	r3, [r3, #10]
 800e5aa:	461a      	mov	r2, r3
 800e5ac:	693b      	ldr	r3, [r7, #16]
 800e5ae:	4293      	cmp	r3, r2
 800e5b0:	d906      	bls.n	800e5c0 <pbuf_copy+0xcc>
 800e5b2:	4b32      	ldr	r3, [pc, #200]	; (800e67c <pbuf_copy+0x188>)
 800e5b4:	f240 32da 	movw	r2, #986	; 0x3da
 800e5b8:	4934      	ldr	r1, [pc, #208]	; (800e68c <pbuf_copy+0x198>)
 800e5ba:	4832      	ldr	r0, [pc, #200]	; (800e684 <pbuf_copy+0x190>)
 800e5bc:	f008 fffc 	bl	80175b8 <iprintf>
    if (offset_from >= p_from->len) {
 800e5c0:	683b      	ldr	r3, [r7, #0]
 800e5c2:	895b      	ldrh	r3, [r3, #10]
 800e5c4:	461a      	mov	r2, r3
 800e5c6:	693b      	ldr	r3, [r7, #16]
 800e5c8:	4293      	cmp	r3, r2
 800e5ca:	d304      	bcc.n	800e5d6 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800e5cc:	2300      	movs	r3, #0
 800e5ce:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800e5d0:	683b      	ldr	r3, [r7, #0]
 800e5d2:	681b      	ldr	r3, [r3, #0]
 800e5d4:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	895b      	ldrh	r3, [r3, #10]
 800e5da:	461a      	mov	r2, r3
 800e5dc:	697b      	ldr	r3, [r7, #20]
 800e5de:	4293      	cmp	r3, r2
 800e5e0:	d114      	bne.n	800e60c <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800e5e2:	2300      	movs	r3, #0
 800e5e4:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	681b      	ldr	r3, [r3, #0]
 800e5ea:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	2b00      	cmp	r3, #0
 800e5f0:	d10c      	bne.n	800e60c <pbuf_copy+0x118>
 800e5f2:	683b      	ldr	r3, [r7, #0]
 800e5f4:	2b00      	cmp	r3, #0
 800e5f6:	d009      	beq.n	800e60c <pbuf_copy+0x118>
 800e5f8:	4b20      	ldr	r3, [pc, #128]	; (800e67c <pbuf_copy+0x188>)
 800e5fa:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800e5fe:	4924      	ldr	r1, [pc, #144]	; (800e690 <pbuf_copy+0x19c>)
 800e600:	4820      	ldr	r0, [pc, #128]	; (800e684 <pbuf_copy+0x190>)
 800e602:	f008 ffd9 	bl	80175b8 <iprintf>
 800e606:	f06f 030f 	mvn.w	r3, #15
 800e60a:	e032      	b.n	800e672 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800e60c:	683b      	ldr	r3, [r7, #0]
 800e60e:	2b00      	cmp	r3, #0
 800e610:	d013      	beq.n	800e63a <pbuf_copy+0x146>
 800e612:	683b      	ldr	r3, [r7, #0]
 800e614:	895a      	ldrh	r2, [r3, #10]
 800e616:	683b      	ldr	r3, [r7, #0]
 800e618:	891b      	ldrh	r3, [r3, #8]
 800e61a:	429a      	cmp	r2, r3
 800e61c:	d10d      	bne.n	800e63a <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800e61e:	683b      	ldr	r3, [r7, #0]
 800e620:	681b      	ldr	r3, [r3, #0]
 800e622:	2b00      	cmp	r3, #0
 800e624:	d009      	beq.n	800e63a <pbuf_copy+0x146>
 800e626:	4b15      	ldr	r3, [pc, #84]	; (800e67c <pbuf_copy+0x188>)
 800e628:	f240 32ea 	movw	r2, #1002	; 0x3ea
 800e62c:	4919      	ldr	r1, [pc, #100]	; (800e694 <pbuf_copy+0x1a0>)
 800e62e:	4815      	ldr	r0, [pc, #84]	; (800e684 <pbuf_copy+0x190>)
 800e630:	f008 ffc2 	bl	80175b8 <iprintf>
 800e634:	f06f 0305 	mvn.w	r3, #5
 800e638:	e01b      	b.n	800e672 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	2b00      	cmp	r3, #0
 800e63e:	d013      	beq.n	800e668 <pbuf_copy+0x174>
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	895a      	ldrh	r2, [r3, #10]
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	891b      	ldrh	r3, [r3, #8]
 800e648:	429a      	cmp	r2, r3
 800e64a:	d10d      	bne.n	800e668 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	681b      	ldr	r3, [r3, #0]
 800e650:	2b00      	cmp	r3, #0
 800e652:	d009      	beq.n	800e668 <pbuf_copy+0x174>
 800e654:	4b09      	ldr	r3, [pc, #36]	; (800e67c <pbuf_copy+0x188>)
 800e656:	f240 32ef 	movw	r2, #1007	; 0x3ef
 800e65a:	490e      	ldr	r1, [pc, #56]	; (800e694 <pbuf_copy+0x1a0>)
 800e65c:	4809      	ldr	r0, [pc, #36]	; (800e684 <pbuf_copy+0x190>)
 800e65e:	f008 ffab 	bl	80175b8 <iprintf>
 800e662:	f06f 0305 	mvn.w	r3, #5
 800e666:	e004      	b.n	800e672 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800e668:	683b      	ldr	r3, [r7, #0]
 800e66a:	2b00      	cmp	r3, #0
 800e66c:	f47f af61 	bne.w	800e532 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800e670:	2300      	movs	r3, #0
}
 800e672:	4618      	mov	r0, r3
 800e674:	3718      	adds	r7, #24
 800e676:	46bd      	mov	sp, r7
 800e678:	bd80      	pop	{r7, pc}
 800e67a:	bf00      	nop
 800e67c:	0801982c 	.word	0x0801982c
 800e680:	08019ad4 	.word	0x08019ad4
 800e684:	0801988c 	.word	0x0801988c
 800e688:	08019b04 	.word	0x08019b04
 800e68c:	08019b1c 	.word	0x08019b1c
 800e690:	08019b38 	.word	0x08019b38
 800e694:	08019b48 	.word	0x08019b48

0800e698 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800e698:	b580      	push	{r7, lr}
 800e69a:	b088      	sub	sp, #32
 800e69c:	af00      	add	r7, sp, #0
 800e69e:	60f8      	str	r0, [r7, #12]
 800e6a0:	60b9      	str	r1, [r7, #8]
 800e6a2:	4611      	mov	r1, r2
 800e6a4:	461a      	mov	r2, r3
 800e6a6:	460b      	mov	r3, r1
 800e6a8:	80fb      	strh	r3, [r7, #6]
 800e6aa:	4613      	mov	r3, r2
 800e6ac:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800e6ae:	2300      	movs	r3, #0
 800e6b0:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800e6b2:	2300      	movs	r3, #0
 800e6b4:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800e6b6:	68fb      	ldr	r3, [r7, #12]
 800e6b8:	2b00      	cmp	r3, #0
 800e6ba:	d108      	bne.n	800e6ce <pbuf_copy_partial+0x36>
 800e6bc:	4b2b      	ldr	r3, [pc, #172]	; (800e76c <pbuf_copy_partial+0xd4>)
 800e6be:	f240 420a 	movw	r2, #1034	; 0x40a
 800e6c2:	492b      	ldr	r1, [pc, #172]	; (800e770 <pbuf_copy_partial+0xd8>)
 800e6c4:	482b      	ldr	r0, [pc, #172]	; (800e774 <pbuf_copy_partial+0xdc>)
 800e6c6:	f008 ff77 	bl	80175b8 <iprintf>
 800e6ca:	2300      	movs	r3, #0
 800e6cc:	e04a      	b.n	800e764 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800e6ce:	68bb      	ldr	r3, [r7, #8]
 800e6d0:	2b00      	cmp	r3, #0
 800e6d2:	d108      	bne.n	800e6e6 <pbuf_copy_partial+0x4e>
 800e6d4:	4b25      	ldr	r3, [pc, #148]	; (800e76c <pbuf_copy_partial+0xd4>)
 800e6d6:	f240 420b 	movw	r2, #1035	; 0x40b
 800e6da:	4927      	ldr	r1, [pc, #156]	; (800e778 <pbuf_copy_partial+0xe0>)
 800e6dc:	4825      	ldr	r0, [pc, #148]	; (800e774 <pbuf_copy_partial+0xdc>)
 800e6de:	f008 ff6b 	bl	80175b8 <iprintf>
 800e6e2:	2300      	movs	r3, #0
 800e6e4:	e03e      	b.n	800e764 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800e6e6:	68fb      	ldr	r3, [r7, #12]
 800e6e8:	61fb      	str	r3, [r7, #28]
 800e6ea:	e034      	b.n	800e756 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800e6ec:	88bb      	ldrh	r3, [r7, #4]
 800e6ee:	2b00      	cmp	r3, #0
 800e6f0:	d00a      	beq.n	800e708 <pbuf_copy_partial+0x70>
 800e6f2:	69fb      	ldr	r3, [r7, #28]
 800e6f4:	895b      	ldrh	r3, [r3, #10]
 800e6f6:	88ba      	ldrh	r2, [r7, #4]
 800e6f8:	429a      	cmp	r2, r3
 800e6fa:	d305      	bcc.n	800e708 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800e6fc:	69fb      	ldr	r3, [r7, #28]
 800e6fe:	895b      	ldrh	r3, [r3, #10]
 800e700:	88ba      	ldrh	r2, [r7, #4]
 800e702:	1ad3      	subs	r3, r2, r3
 800e704:	80bb      	strh	r3, [r7, #4]
 800e706:	e023      	b.n	800e750 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800e708:	69fb      	ldr	r3, [r7, #28]
 800e70a:	895a      	ldrh	r2, [r3, #10]
 800e70c:	88bb      	ldrh	r3, [r7, #4]
 800e70e:	1ad3      	subs	r3, r2, r3
 800e710:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800e712:	8b3a      	ldrh	r2, [r7, #24]
 800e714:	88fb      	ldrh	r3, [r7, #6]
 800e716:	429a      	cmp	r2, r3
 800e718:	d901      	bls.n	800e71e <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800e71a:	88fb      	ldrh	r3, [r7, #6]
 800e71c:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800e71e:	8b7b      	ldrh	r3, [r7, #26]
 800e720:	68ba      	ldr	r2, [r7, #8]
 800e722:	18d0      	adds	r0, r2, r3
 800e724:	69fb      	ldr	r3, [r7, #28]
 800e726:	685a      	ldr	r2, [r3, #4]
 800e728:	88bb      	ldrh	r3, [r7, #4]
 800e72a:	4413      	add	r3, r2
 800e72c:	8b3a      	ldrh	r2, [r7, #24]
 800e72e:	4619      	mov	r1, r3
 800e730:	f008 ff2f 	bl	8017592 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800e734:	8afa      	ldrh	r2, [r7, #22]
 800e736:	8b3b      	ldrh	r3, [r7, #24]
 800e738:	4413      	add	r3, r2
 800e73a:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800e73c:	8b7a      	ldrh	r2, [r7, #26]
 800e73e:	8b3b      	ldrh	r3, [r7, #24]
 800e740:	4413      	add	r3, r2
 800e742:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800e744:	88fa      	ldrh	r2, [r7, #6]
 800e746:	8b3b      	ldrh	r3, [r7, #24]
 800e748:	1ad3      	subs	r3, r2, r3
 800e74a:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800e74c:	2300      	movs	r3, #0
 800e74e:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800e750:	69fb      	ldr	r3, [r7, #28]
 800e752:	681b      	ldr	r3, [r3, #0]
 800e754:	61fb      	str	r3, [r7, #28]
 800e756:	88fb      	ldrh	r3, [r7, #6]
 800e758:	2b00      	cmp	r3, #0
 800e75a:	d002      	beq.n	800e762 <pbuf_copy_partial+0xca>
 800e75c:	69fb      	ldr	r3, [r7, #28]
 800e75e:	2b00      	cmp	r3, #0
 800e760:	d1c4      	bne.n	800e6ec <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800e762:	8afb      	ldrh	r3, [r7, #22]
}
 800e764:	4618      	mov	r0, r3
 800e766:	3720      	adds	r7, #32
 800e768:	46bd      	mov	sp, r7
 800e76a:	bd80      	pop	{r7, pc}
 800e76c:	0801982c 	.word	0x0801982c
 800e770:	08019b74 	.word	0x08019b74
 800e774:	0801988c 	.word	0x0801988c
 800e778:	08019b94 	.word	0x08019b94

0800e77c <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800e77c:	b580      	push	{r7, lr}
 800e77e:	b084      	sub	sp, #16
 800e780:	af00      	add	r7, sp, #0
 800e782:	4603      	mov	r3, r0
 800e784:	603a      	str	r2, [r7, #0]
 800e786:	71fb      	strb	r3, [r7, #7]
 800e788:	460b      	mov	r3, r1
 800e78a:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800e78c:	683b      	ldr	r3, [r7, #0]
 800e78e:	8919      	ldrh	r1, [r3, #8]
 800e790:	88ba      	ldrh	r2, [r7, #4]
 800e792:	79fb      	ldrb	r3, [r7, #7]
 800e794:	4618      	mov	r0, r3
 800e796:	f7ff fa77 	bl	800dc88 <pbuf_alloc>
 800e79a:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800e79c:	68fb      	ldr	r3, [r7, #12]
 800e79e:	2b00      	cmp	r3, #0
 800e7a0:	d101      	bne.n	800e7a6 <pbuf_clone+0x2a>
    return NULL;
 800e7a2:	2300      	movs	r3, #0
 800e7a4:	e011      	b.n	800e7ca <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800e7a6:	6839      	ldr	r1, [r7, #0]
 800e7a8:	68f8      	ldr	r0, [r7, #12]
 800e7aa:	f7ff fea3 	bl	800e4f4 <pbuf_copy>
 800e7ae:	4603      	mov	r3, r0
 800e7b0:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800e7b2:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800e7b6:	2b00      	cmp	r3, #0
 800e7b8:	d006      	beq.n	800e7c8 <pbuf_clone+0x4c>
 800e7ba:	4b06      	ldr	r3, [pc, #24]	; (800e7d4 <pbuf_clone+0x58>)
 800e7bc:	f240 5224 	movw	r2, #1316	; 0x524
 800e7c0:	4905      	ldr	r1, [pc, #20]	; (800e7d8 <pbuf_clone+0x5c>)
 800e7c2:	4806      	ldr	r0, [pc, #24]	; (800e7dc <pbuf_clone+0x60>)
 800e7c4:	f008 fef8 	bl	80175b8 <iprintf>
  return q;
 800e7c8:	68fb      	ldr	r3, [r7, #12]
}
 800e7ca:	4618      	mov	r0, r3
 800e7cc:	3710      	adds	r7, #16
 800e7ce:	46bd      	mov	sp, r7
 800e7d0:	bd80      	pop	{r7, pc}
 800e7d2:	bf00      	nop
 800e7d4:	0801982c 	.word	0x0801982c
 800e7d8:	08019ca0 	.word	0x08019ca0
 800e7dc:	0801988c 	.word	0x0801988c

0800e7e0 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800e7e0:	b580      	push	{r7, lr}
 800e7e2:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800e7e4:	f008 ff00 	bl	80175e8 <rand>
 800e7e8:	4603      	mov	r3, r0
 800e7ea:	b29b      	uxth	r3, r3
 800e7ec:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800e7f0:	b29b      	uxth	r3, r3
 800e7f2:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800e7f6:	b29a      	uxth	r2, r3
 800e7f8:	4b01      	ldr	r3, [pc, #4]	; (800e800 <tcp_init+0x20>)
 800e7fa:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800e7fc:	bf00      	nop
 800e7fe:	bd80      	pop	{r7, pc}
 800e800:	20000010 	.word	0x20000010

0800e804 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800e804:	b580      	push	{r7, lr}
 800e806:	b082      	sub	sp, #8
 800e808:	af00      	add	r7, sp, #0
 800e80a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	7d1b      	ldrb	r3, [r3, #20]
 800e810:	2b01      	cmp	r3, #1
 800e812:	d105      	bne.n	800e820 <tcp_free+0x1c>
 800e814:	4b06      	ldr	r3, [pc, #24]	; (800e830 <tcp_free+0x2c>)
 800e816:	22d4      	movs	r2, #212	; 0xd4
 800e818:	4906      	ldr	r1, [pc, #24]	; (800e834 <tcp_free+0x30>)
 800e81a:	4807      	ldr	r0, [pc, #28]	; (800e838 <tcp_free+0x34>)
 800e81c:	f008 fecc 	bl	80175b8 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800e820:	6879      	ldr	r1, [r7, #4]
 800e822:	2000      	movs	r0, #0
 800e824:	f7fe fe74 	bl	800d510 <memp_free>
}
 800e828:	bf00      	nop
 800e82a:	3708      	adds	r7, #8
 800e82c:	46bd      	mov	sp, r7
 800e82e:	bd80      	pop	{r7, pc}
 800e830:	08019d2c 	.word	0x08019d2c
 800e834:	08019d5c 	.word	0x08019d5c
 800e838:	08019d70 	.word	0x08019d70

0800e83c <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800e83c:	b580      	push	{r7, lr}
 800e83e:	b082      	sub	sp, #8
 800e840:	af00      	add	r7, sp, #0
 800e842:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	7d1b      	ldrb	r3, [r3, #20]
 800e848:	2b01      	cmp	r3, #1
 800e84a:	d105      	bne.n	800e858 <tcp_free_listen+0x1c>
 800e84c:	4b06      	ldr	r3, [pc, #24]	; (800e868 <tcp_free_listen+0x2c>)
 800e84e:	22df      	movs	r2, #223	; 0xdf
 800e850:	4906      	ldr	r1, [pc, #24]	; (800e86c <tcp_free_listen+0x30>)
 800e852:	4807      	ldr	r0, [pc, #28]	; (800e870 <tcp_free_listen+0x34>)
 800e854:	f008 feb0 	bl	80175b8 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800e858:	6879      	ldr	r1, [r7, #4]
 800e85a:	2001      	movs	r0, #1
 800e85c:	f7fe fe58 	bl	800d510 <memp_free>
}
 800e860:	bf00      	nop
 800e862:	3708      	adds	r7, #8
 800e864:	46bd      	mov	sp, r7
 800e866:	bd80      	pop	{r7, pc}
 800e868:	08019d2c 	.word	0x08019d2c
 800e86c:	08019d98 	.word	0x08019d98
 800e870:	08019d70 	.word	0x08019d70

0800e874 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800e874:	b580      	push	{r7, lr}
 800e876:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800e878:	f001 f89a 	bl	800f9b0 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800e87c:	4b07      	ldr	r3, [pc, #28]	; (800e89c <tcp_tmr+0x28>)
 800e87e:	781b      	ldrb	r3, [r3, #0]
 800e880:	3301      	adds	r3, #1
 800e882:	b2da      	uxtb	r2, r3
 800e884:	4b05      	ldr	r3, [pc, #20]	; (800e89c <tcp_tmr+0x28>)
 800e886:	701a      	strb	r2, [r3, #0]
 800e888:	4b04      	ldr	r3, [pc, #16]	; (800e89c <tcp_tmr+0x28>)
 800e88a:	781b      	ldrb	r3, [r3, #0]
 800e88c:	f003 0301 	and.w	r3, r3, #1
 800e890:	2b00      	cmp	r3, #0
 800e892:	d001      	beq.n	800e898 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800e894:	f000 fd4e 	bl	800f334 <tcp_slowtmr>
  }
}
 800e898:	bf00      	nop
 800e89a:	bd80      	pop	{r7, pc}
 800e89c:	20004645 	.word	0x20004645

0800e8a0 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800e8a0:	b580      	push	{r7, lr}
 800e8a2:	b084      	sub	sp, #16
 800e8a4:	af00      	add	r7, sp, #0
 800e8a6:	6078      	str	r0, [r7, #4]
 800e8a8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800e8aa:	683b      	ldr	r3, [r7, #0]
 800e8ac:	2b00      	cmp	r3, #0
 800e8ae:	d105      	bne.n	800e8bc <tcp_remove_listener+0x1c>
 800e8b0:	4b0d      	ldr	r3, [pc, #52]	; (800e8e8 <tcp_remove_listener+0x48>)
 800e8b2:	22ff      	movs	r2, #255	; 0xff
 800e8b4:	490d      	ldr	r1, [pc, #52]	; (800e8ec <tcp_remove_listener+0x4c>)
 800e8b6:	480e      	ldr	r0, [pc, #56]	; (800e8f0 <tcp_remove_listener+0x50>)
 800e8b8:	f008 fe7e 	bl	80175b8 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	60fb      	str	r3, [r7, #12]
 800e8c0:	e00a      	b.n	800e8d8 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800e8c2:	68fb      	ldr	r3, [r7, #12]
 800e8c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e8c6:	683a      	ldr	r2, [r7, #0]
 800e8c8:	429a      	cmp	r2, r3
 800e8ca:	d102      	bne.n	800e8d2 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800e8cc:	68fb      	ldr	r3, [r7, #12]
 800e8ce:	2200      	movs	r2, #0
 800e8d0:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800e8d2:	68fb      	ldr	r3, [r7, #12]
 800e8d4:	68db      	ldr	r3, [r3, #12]
 800e8d6:	60fb      	str	r3, [r7, #12]
 800e8d8:	68fb      	ldr	r3, [r7, #12]
 800e8da:	2b00      	cmp	r3, #0
 800e8dc:	d1f1      	bne.n	800e8c2 <tcp_remove_listener+0x22>
    }
  }
}
 800e8de:	bf00      	nop
 800e8e0:	3710      	adds	r7, #16
 800e8e2:	46bd      	mov	sp, r7
 800e8e4:	bd80      	pop	{r7, pc}
 800e8e6:	bf00      	nop
 800e8e8:	08019d2c 	.word	0x08019d2c
 800e8ec:	08019db4 	.word	0x08019db4
 800e8f0:	08019d70 	.word	0x08019d70

0800e8f4 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800e8f4:	b580      	push	{r7, lr}
 800e8f6:	b084      	sub	sp, #16
 800e8f8:	af00      	add	r7, sp, #0
 800e8fa:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	2b00      	cmp	r3, #0
 800e900:	d106      	bne.n	800e910 <tcp_listen_closed+0x1c>
 800e902:	4b14      	ldr	r3, [pc, #80]	; (800e954 <tcp_listen_closed+0x60>)
 800e904:	f240 1211 	movw	r2, #273	; 0x111
 800e908:	4913      	ldr	r1, [pc, #76]	; (800e958 <tcp_listen_closed+0x64>)
 800e90a:	4814      	ldr	r0, [pc, #80]	; (800e95c <tcp_listen_closed+0x68>)
 800e90c:	f008 fe54 	bl	80175b8 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	7d1b      	ldrb	r3, [r3, #20]
 800e914:	2b01      	cmp	r3, #1
 800e916:	d006      	beq.n	800e926 <tcp_listen_closed+0x32>
 800e918:	4b0e      	ldr	r3, [pc, #56]	; (800e954 <tcp_listen_closed+0x60>)
 800e91a:	f44f 7289 	mov.w	r2, #274	; 0x112
 800e91e:	4910      	ldr	r1, [pc, #64]	; (800e960 <tcp_listen_closed+0x6c>)
 800e920:	480e      	ldr	r0, [pc, #56]	; (800e95c <tcp_listen_closed+0x68>)
 800e922:	f008 fe49 	bl	80175b8 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800e926:	2301      	movs	r3, #1
 800e928:	60fb      	str	r3, [r7, #12]
 800e92a:	e00b      	b.n	800e944 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800e92c:	4a0d      	ldr	r2, [pc, #52]	; (800e964 <tcp_listen_closed+0x70>)
 800e92e:	68fb      	ldr	r3, [r7, #12]
 800e930:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e934:	681b      	ldr	r3, [r3, #0]
 800e936:	6879      	ldr	r1, [r7, #4]
 800e938:	4618      	mov	r0, r3
 800e93a:	f7ff ffb1 	bl	800e8a0 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800e93e:	68fb      	ldr	r3, [r7, #12]
 800e940:	3301      	adds	r3, #1
 800e942:	60fb      	str	r3, [r7, #12]
 800e944:	68fb      	ldr	r3, [r7, #12]
 800e946:	2b03      	cmp	r3, #3
 800e948:	d9f0      	bls.n	800e92c <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800e94a:	bf00      	nop
 800e94c:	3710      	adds	r7, #16
 800e94e:	46bd      	mov	sp, r7
 800e950:	bd80      	pop	{r7, pc}
 800e952:	bf00      	nop
 800e954:	08019d2c 	.word	0x08019d2c
 800e958:	08019ddc 	.word	0x08019ddc
 800e95c:	08019d70 	.word	0x08019d70
 800e960:	08019de8 	.word	0x08019de8
 800e964:	0801ba14 	.word	0x0801ba14

0800e968 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800e968:	b5b0      	push	{r4, r5, r7, lr}
 800e96a:	b088      	sub	sp, #32
 800e96c:	af04      	add	r7, sp, #16
 800e96e:	6078      	str	r0, [r7, #4]
 800e970:	460b      	mov	r3, r1
 800e972:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	2b00      	cmp	r3, #0
 800e978:	d106      	bne.n	800e988 <tcp_close_shutdown+0x20>
 800e97a:	4b61      	ldr	r3, [pc, #388]	; (800eb00 <tcp_close_shutdown+0x198>)
 800e97c:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800e980:	4960      	ldr	r1, [pc, #384]	; (800eb04 <tcp_close_shutdown+0x19c>)
 800e982:	4861      	ldr	r0, [pc, #388]	; (800eb08 <tcp_close_shutdown+0x1a0>)
 800e984:	f008 fe18 	bl	80175b8 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800e988:	78fb      	ldrb	r3, [r7, #3]
 800e98a:	2b00      	cmp	r3, #0
 800e98c:	d066      	beq.n	800ea5c <tcp_close_shutdown+0xf4>
 800e98e:	687b      	ldr	r3, [r7, #4]
 800e990:	7d1b      	ldrb	r3, [r3, #20]
 800e992:	2b04      	cmp	r3, #4
 800e994:	d003      	beq.n	800e99e <tcp_close_shutdown+0x36>
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	7d1b      	ldrb	r3, [r3, #20]
 800e99a:	2b07      	cmp	r3, #7
 800e99c:	d15e      	bne.n	800ea5c <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800e99e:	687b      	ldr	r3, [r7, #4]
 800e9a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e9a2:	2b00      	cmp	r3, #0
 800e9a4:	d104      	bne.n	800e9b0 <tcp_close_shutdown+0x48>
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e9aa:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800e9ae:	d055      	beq.n	800ea5c <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	8b5b      	ldrh	r3, [r3, #26]
 800e9b4:	f003 0310 	and.w	r3, r3, #16
 800e9b8:	2b00      	cmp	r3, #0
 800e9ba:	d106      	bne.n	800e9ca <tcp_close_shutdown+0x62>
 800e9bc:	4b50      	ldr	r3, [pc, #320]	; (800eb00 <tcp_close_shutdown+0x198>)
 800e9be:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800e9c2:	4952      	ldr	r1, [pc, #328]	; (800eb0c <tcp_close_shutdown+0x1a4>)
 800e9c4:	4850      	ldr	r0, [pc, #320]	; (800eb08 <tcp_close_shutdown+0x1a0>)
 800e9c6:	f008 fdf7 	bl	80175b8 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800e9d2:	687d      	ldr	r5, [r7, #4]
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	3304      	adds	r3, #4
 800e9d8:	687a      	ldr	r2, [r7, #4]
 800e9da:	8ad2      	ldrh	r2, [r2, #22]
 800e9dc:	6879      	ldr	r1, [r7, #4]
 800e9de:	8b09      	ldrh	r1, [r1, #24]
 800e9e0:	9102      	str	r1, [sp, #8]
 800e9e2:	9201      	str	r2, [sp, #4]
 800e9e4:	9300      	str	r3, [sp, #0]
 800e9e6:	462b      	mov	r3, r5
 800e9e8:	4622      	mov	r2, r4
 800e9ea:	4601      	mov	r1, r0
 800e9ec:	6878      	ldr	r0, [r7, #4]
 800e9ee:	f005 fdbb 	bl	8014568 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800e9f2:	6878      	ldr	r0, [r7, #4]
 800e9f4:	f001 fb8a 	bl	801010c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800e9f8:	4b45      	ldr	r3, [pc, #276]	; (800eb10 <tcp_close_shutdown+0x1a8>)
 800e9fa:	681b      	ldr	r3, [r3, #0]
 800e9fc:	687a      	ldr	r2, [r7, #4]
 800e9fe:	429a      	cmp	r2, r3
 800ea00:	d105      	bne.n	800ea0e <tcp_close_shutdown+0xa6>
 800ea02:	4b43      	ldr	r3, [pc, #268]	; (800eb10 <tcp_close_shutdown+0x1a8>)
 800ea04:	681b      	ldr	r3, [r3, #0]
 800ea06:	68db      	ldr	r3, [r3, #12]
 800ea08:	4a41      	ldr	r2, [pc, #260]	; (800eb10 <tcp_close_shutdown+0x1a8>)
 800ea0a:	6013      	str	r3, [r2, #0]
 800ea0c:	e013      	b.n	800ea36 <tcp_close_shutdown+0xce>
 800ea0e:	4b40      	ldr	r3, [pc, #256]	; (800eb10 <tcp_close_shutdown+0x1a8>)
 800ea10:	681b      	ldr	r3, [r3, #0]
 800ea12:	60fb      	str	r3, [r7, #12]
 800ea14:	e00c      	b.n	800ea30 <tcp_close_shutdown+0xc8>
 800ea16:	68fb      	ldr	r3, [r7, #12]
 800ea18:	68db      	ldr	r3, [r3, #12]
 800ea1a:	687a      	ldr	r2, [r7, #4]
 800ea1c:	429a      	cmp	r2, r3
 800ea1e:	d104      	bne.n	800ea2a <tcp_close_shutdown+0xc2>
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	68da      	ldr	r2, [r3, #12]
 800ea24:	68fb      	ldr	r3, [r7, #12]
 800ea26:	60da      	str	r2, [r3, #12]
 800ea28:	e005      	b.n	800ea36 <tcp_close_shutdown+0xce>
 800ea2a:	68fb      	ldr	r3, [r7, #12]
 800ea2c:	68db      	ldr	r3, [r3, #12]
 800ea2e:	60fb      	str	r3, [r7, #12]
 800ea30:	68fb      	ldr	r3, [r7, #12]
 800ea32:	2b00      	cmp	r3, #0
 800ea34:	d1ef      	bne.n	800ea16 <tcp_close_shutdown+0xae>
 800ea36:	687b      	ldr	r3, [r7, #4]
 800ea38:	2200      	movs	r2, #0
 800ea3a:	60da      	str	r2, [r3, #12]
 800ea3c:	4b35      	ldr	r3, [pc, #212]	; (800eb14 <tcp_close_shutdown+0x1ac>)
 800ea3e:	2201      	movs	r2, #1
 800ea40:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800ea42:	4b35      	ldr	r3, [pc, #212]	; (800eb18 <tcp_close_shutdown+0x1b0>)
 800ea44:	681b      	ldr	r3, [r3, #0]
 800ea46:	687a      	ldr	r2, [r7, #4]
 800ea48:	429a      	cmp	r2, r3
 800ea4a:	d102      	bne.n	800ea52 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800ea4c:	f004 f81c 	bl	8012a88 <tcp_trigger_input_pcb_close>
 800ea50:	e002      	b.n	800ea58 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800ea52:	6878      	ldr	r0, [r7, #4]
 800ea54:	f7ff fed6 	bl	800e804 <tcp_free>
      }
      return ERR_OK;
 800ea58:	2300      	movs	r3, #0
 800ea5a:	e04d      	b.n	800eaf8 <tcp_close_shutdown+0x190>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	7d1b      	ldrb	r3, [r3, #20]
 800ea60:	2b01      	cmp	r3, #1
 800ea62:	d02d      	beq.n	800eac0 <tcp_close_shutdown+0x158>
 800ea64:	2b02      	cmp	r3, #2
 800ea66:	d036      	beq.n	800ead6 <tcp_close_shutdown+0x16e>
 800ea68:	2b00      	cmp	r3, #0
 800ea6a:	d13f      	bne.n	800eaec <tcp_close_shutdown+0x184>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	8adb      	ldrh	r3, [r3, #22]
 800ea70:	2b00      	cmp	r3, #0
 800ea72:	d021      	beq.n	800eab8 <tcp_close_shutdown+0x150>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800ea74:	4b29      	ldr	r3, [pc, #164]	; (800eb1c <tcp_close_shutdown+0x1b4>)
 800ea76:	681b      	ldr	r3, [r3, #0]
 800ea78:	687a      	ldr	r2, [r7, #4]
 800ea7a:	429a      	cmp	r2, r3
 800ea7c:	d105      	bne.n	800ea8a <tcp_close_shutdown+0x122>
 800ea7e:	4b27      	ldr	r3, [pc, #156]	; (800eb1c <tcp_close_shutdown+0x1b4>)
 800ea80:	681b      	ldr	r3, [r3, #0]
 800ea82:	68db      	ldr	r3, [r3, #12]
 800ea84:	4a25      	ldr	r2, [pc, #148]	; (800eb1c <tcp_close_shutdown+0x1b4>)
 800ea86:	6013      	str	r3, [r2, #0]
 800ea88:	e013      	b.n	800eab2 <tcp_close_shutdown+0x14a>
 800ea8a:	4b24      	ldr	r3, [pc, #144]	; (800eb1c <tcp_close_shutdown+0x1b4>)
 800ea8c:	681b      	ldr	r3, [r3, #0]
 800ea8e:	60bb      	str	r3, [r7, #8]
 800ea90:	e00c      	b.n	800eaac <tcp_close_shutdown+0x144>
 800ea92:	68bb      	ldr	r3, [r7, #8]
 800ea94:	68db      	ldr	r3, [r3, #12]
 800ea96:	687a      	ldr	r2, [r7, #4]
 800ea98:	429a      	cmp	r2, r3
 800ea9a:	d104      	bne.n	800eaa6 <tcp_close_shutdown+0x13e>
 800ea9c:	687b      	ldr	r3, [r7, #4]
 800ea9e:	68da      	ldr	r2, [r3, #12]
 800eaa0:	68bb      	ldr	r3, [r7, #8]
 800eaa2:	60da      	str	r2, [r3, #12]
 800eaa4:	e005      	b.n	800eab2 <tcp_close_shutdown+0x14a>
 800eaa6:	68bb      	ldr	r3, [r7, #8]
 800eaa8:	68db      	ldr	r3, [r3, #12]
 800eaaa:	60bb      	str	r3, [r7, #8]
 800eaac:	68bb      	ldr	r3, [r7, #8]
 800eaae:	2b00      	cmp	r3, #0
 800eab0:	d1ef      	bne.n	800ea92 <tcp_close_shutdown+0x12a>
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	2200      	movs	r2, #0
 800eab6:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800eab8:	6878      	ldr	r0, [r7, #4]
 800eaba:	f7ff fea3 	bl	800e804 <tcp_free>
      break;
 800eabe:	e01a      	b.n	800eaf6 <tcp_close_shutdown+0x18e>
    case LISTEN:
      tcp_listen_closed(pcb);
 800eac0:	6878      	ldr	r0, [r7, #4]
 800eac2:	f7ff ff17 	bl	800e8f4 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800eac6:	6879      	ldr	r1, [r7, #4]
 800eac8:	4815      	ldr	r0, [pc, #84]	; (800eb20 <tcp_close_shutdown+0x1b8>)
 800eaca:	f001 fb6f 	bl	80101ac <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800eace:	6878      	ldr	r0, [r7, #4]
 800ead0:	f7ff feb4 	bl	800e83c <tcp_free_listen>
      break;
 800ead4:	e00f      	b.n	800eaf6 <tcp_close_shutdown+0x18e>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800ead6:	6879      	ldr	r1, [r7, #4]
 800ead8:	480d      	ldr	r0, [pc, #52]	; (800eb10 <tcp_close_shutdown+0x1a8>)
 800eada:	f001 fb67 	bl	80101ac <tcp_pcb_remove>
 800eade:	4b0d      	ldr	r3, [pc, #52]	; (800eb14 <tcp_close_shutdown+0x1ac>)
 800eae0:	2201      	movs	r2, #1
 800eae2:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800eae4:	6878      	ldr	r0, [r7, #4]
 800eae6:	f7ff fe8d 	bl	800e804 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800eaea:	e004      	b.n	800eaf6 <tcp_close_shutdown+0x18e>
    default:
      return tcp_close_shutdown_fin(pcb);
 800eaec:	6878      	ldr	r0, [r7, #4]
 800eaee:	f000 f819 	bl	800eb24 <tcp_close_shutdown_fin>
 800eaf2:	4603      	mov	r3, r0
 800eaf4:	e000      	b.n	800eaf8 <tcp_close_shutdown+0x190>
  }
  return ERR_OK;
 800eaf6:	2300      	movs	r3, #0
}
 800eaf8:	4618      	mov	r0, r3
 800eafa:	3710      	adds	r7, #16
 800eafc:	46bd      	mov	sp, r7
 800eafe:	bdb0      	pop	{r4, r5, r7, pc}
 800eb00:	08019d2c 	.word	0x08019d2c
 800eb04:	08019e00 	.word	0x08019e00
 800eb08:	08019d70 	.word	0x08019d70
 800eb0c:	08019e20 	.word	0x08019e20
 800eb10:	2000d288 	.word	0x2000d288
 800eb14:	2000d284 	.word	0x2000d284
 800eb18:	2000d29c 	.word	0x2000d29c
 800eb1c:	2000d294 	.word	0x2000d294
 800eb20:	2000d290 	.word	0x2000d290

0800eb24 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800eb24:	b580      	push	{r7, lr}
 800eb26:	b084      	sub	sp, #16
 800eb28:	af00      	add	r7, sp, #0
 800eb2a:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	2b00      	cmp	r3, #0
 800eb30:	d106      	bne.n	800eb40 <tcp_close_shutdown_fin+0x1c>
 800eb32:	4b2c      	ldr	r3, [pc, #176]	; (800ebe4 <tcp_close_shutdown_fin+0xc0>)
 800eb34:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800eb38:	492b      	ldr	r1, [pc, #172]	; (800ebe8 <tcp_close_shutdown_fin+0xc4>)
 800eb3a:	482c      	ldr	r0, [pc, #176]	; (800ebec <tcp_close_shutdown_fin+0xc8>)
 800eb3c:	f008 fd3c 	bl	80175b8 <iprintf>

  switch (pcb->state) {
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	7d1b      	ldrb	r3, [r3, #20]
 800eb44:	2b04      	cmp	r3, #4
 800eb46:	d010      	beq.n	800eb6a <tcp_close_shutdown_fin+0x46>
 800eb48:	2b07      	cmp	r3, #7
 800eb4a:	d01b      	beq.n	800eb84 <tcp_close_shutdown_fin+0x60>
 800eb4c:	2b03      	cmp	r3, #3
 800eb4e:	d126      	bne.n	800eb9e <tcp_close_shutdown_fin+0x7a>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800eb50:	6878      	ldr	r0, [r7, #4]
 800eb52:	f004 fe05 	bl	8013760 <tcp_send_fin>
 800eb56:	4603      	mov	r3, r0
 800eb58:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800eb5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800eb5e:	2b00      	cmp	r3, #0
 800eb60:	d11f      	bne.n	800eba2 <tcp_close_shutdown_fin+0x7e>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800eb62:	687b      	ldr	r3, [r7, #4]
 800eb64:	2205      	movs	r2, #5
 800eb66:	751a      	strb	r2, [r3, #20]
      }
      break;
 800eb68:	e01b      	b.n	800eba2 <tcp_close_shutdown_fin+0x7e>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800eb6a:	6878      	ldr	r0, [r7, #4]
 800eb6c:	f004 fdf8 	bl	8013760 <tcp_send_fin>
 800eb70:	4603      	mov	r3, r0
 800eb72:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800eb74:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800eb78:	2b00      	cmp	r3, #0
 800eb7a:	d114      	bne.n	800eba6 <tcp_close_shutdown_fin+0x82>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	2205      	movs	r2, #5
 800eb80:	751a      	strb	r2, [r3, #20]
      }
      break;
 800eb82:	e010      	b.n	800eba6 <tcp_close_shutdown_fin+0x82>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800eb84:	6878      	ldr	r0, [r7, #4]
 800eb86:	f004 fdeb 	bl	8013760 <tcp_send_fin>
 800eb8a:	4603      	mov	r3, r0
 800eb8c:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800eb8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800eb92:	2b00      	cmp	r3, #0
 800eb94:	d109      	bne.n	800ebaa <tcp_close_shutdown_fin+0x86>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	2209      	movs	r2, #9
 800eb9a:	751a      	strb	r2, [r3, #20]
      }
      break;
 800eb9c:	e005      	b.n	800ebaa <tcp_close_shutdown_fin+0x86>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800eb9e:	2300      	movs	r3, #0
 800eba0:	e01c      	b.n	800ebdc <tcp_close_shutdown_fin+0xb8>
      break;
 800eba2:	bf00      	nop
 800eba4:	e002      	b.n	800ebac <tcp_close_shutdown_fin+0x88>
      break;
 800eba6:	bf00      	nop
 800eba8:	e000      	b.n	800ebac <tcp_close_shutdown_fin+0x88>
      break;
 800ebaa:	bf00      	nop
  }

  if (err == ERR_OK) {
 800ebac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ebb0:	2b00      	cmp	r3, #0
 800ebb2:	d103      	bne.n	800ebbc <tcp_close_shutdown_fin+0x98>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800ebb4:	6878      	ldr	r0, [r7, #4]
 800ebb6:	f004 ff11 	bl	80139dc <tcp_output>
 800ebba:	e00d      	b.n	800ebd8 <tcp_close_shutdown_fin+0xb4>
  } else if (err == ERR_MEM) {
 800ebbc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ebc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ebc4:	d108      	bne.n	800ebd8 <tcp_close_shutdown_fin+0xb4>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	8b5b      	ldrh	r3, [r3, #26]
 800ebca:	f043 0308 	orr.w	r3, r3, #8
 800ebce:	b29a      	uxth	r2, r3
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800ebd4:	2300      	movs	r3, #0
 800ebd6:	e001      	b.n	800ebdc <tcp_close_shutdown_fin+0xb8>
  }
  return err;
 800ebd8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ebdc:	4618      	mov	r0, r3
 800ebde:	3710      	adds	r7, #16
 800ebe0:	46bd      	mov	sp, r7
 800ebe2:	bd80      	pop	{r7, pc}
 800ebe4:	08019d2c 	.word	0x08019d2c
 800ebe8:	08019ddc 	.word	0x08019ddc
 800ebec:	08019d70 	.word	0x08019d70

0800ebf0 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800ebf0:	b580      	push	{r7, lr}
 800ebf2:	b082      	sub	sp, #8
 800ebf4:	af00      	add	r7, sp, #0
 800ebf6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	2b00      	cmp	r3, #0
 800ebfc:	d109      	bne.n	800ec12 <tcp_close+0x22>
 800ebfe:	4b0f      	ldr	r3, [pc, #60]	; (800ec3c <tcp_close+0x4c>)
 800ec00:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800ec04:	490e      	ldr	r1, [pc, #56]	; (800ec40 <tcp_close+0x50>)
 800ec06:	480f      	ldr	r0, [pc, #60]	; (800ec44 <tcp_close+0x54>)
 800ec08:	f008 fcd6 	bl	80175b8 <iprintf>
 800ec0c:	f06f 030f 	mvn.w	r3, #15
 800ec10:	e00f      	b.n	800ec32 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	7d1b      	ldrb	r3, [r3, #20]
 800ec16:	2b01      	cmp	r3, #1
 800ec18:	d006      	beq.n	800ec28 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	8b5b      	ldrh	r3, [r3, #26]
 800ec1e:	f043 0310 	orr.w	r3, r3, #16
 800ec22:	b29a      	uxth	r2, r3
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800ec28:	2101      	movs	r1, #1
 800ec2a:	6878      	ldr	r0, [r7, #4]
 800ec2c:	f7ff fe9c 	bl	800e968 <tcp_close_shutdown>
 800ec30:	4603      	mov	r3, r0
}
 800ec32:	4618      	mov	r0, r3
 800ec34:	3708      	adds	r7, #8
 800ec36:	46bd      	mov	sp, r7
 800ec38:	bd80      	pop	{r7, pc}
 800ec3a:	bf00      	nop
 800ec3c:	08019d2c 	.word	0x08019d2c
 800ec40:	08019e3c 	.word	0x08019e3c
 800ec44:	08019d70 	.word	0x08019d70

0800ec48 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 800ec48:	b580      	push	{r7, lr}
 800ec4a:	b084      	sub	sp, #16
 800ec4c:	af00      	add	r7, sp, #0
 800ec4e:	60f8      	str	r0, [r7, #12]
 800ec50:	60b9      	str	r1, [r7, #8]
 800ec52:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 800ec54:	68fb      	ldr	r3, [r7, #12]
 800ec56:	2b00      	cmp	r3, #0
 800ec58:	d109      	bne.n	800ec6e <tcp_shutdown+0x26>
 800ec5a:	4b25      	ldr	r3, [pc, #148]	; (800ecf0 <tcp_shutdown+0xa8>)
 800ec5c:	f240 2207 	movw	r2, #519	; 0x207
 800ec60:	4924      	ldr	r1, [pc, #144]	; (800ecf4 <tcp_shutdown+0xac>)
 800ec62:	4825      	ldr	r0, [pc, #148]	; (800ecf8 <tcp_shutdown+0xb0>)
 800ec64:	f008 fca8 	bl	80175b8 <iprintf>
 800ec68:	f06f 030f 	mvn.w	r3, #15
 800ec6c:	e03c      	b.n	800ece8 <tcp_shutdown+0xa0>

  if (pcb->state == LISTEN) {
 800ec6e:	68fb      	ldr	r3, [r7, #12]
 800ec70:	7d1b      	ldrb	r3, [r3, #20]
 800ec72:	2b01      	cmp	r3, #1
 800ec74:	d102      	bne.n	800ec7c <tcp_shutdown+0x34>
    return ERR_CONN;
 800ec76:	f06f 030a 	mvn.w	r3, #10
 800ec7a:	e035      	b.n	800ece8 <tcp_shutdown+0xa0>
  }
  if (shut_rx) {
 800ec7c:	68bb      	ldr	r3, [r7, #8]
 800ec7e:	2b00      	cmp	r3, #0
 800ec80:	d01b      	beq.n	800ecba <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800ec82:	68fb      	ldr	r3, [r7, #12]
 800ec84:	8b5b      	ldrh	r3, [r3, #26]
 800ec86:	f043 0310 	orr.w	r3, r3, #16
 800ec8a:	b29a      	uxth	r2, r3
 800ec8c:	68fb      	ldr	r3, [r7, #12]
 800ec8e:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	2b00      	cmp	r3, #0
 800ec94:	d005      	beq.n	800eca2 <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 800ec96:	2101      	movs	r1, #1
 800ec98:	68f8      	ldr	r0, [r7, #12]
 800ec9a:	f7ff fe65 	bl	800e968 <tcp_close_shutdown>
 800ec9e:	4603      	mov	r3, r0
 800eca0:	e022      	b.n	800ece8 <tcp_shutdown+0xa0>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 800eca2:	68fb      	ldr	r3, [r7, #12]
 800eca4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800eca6:	2b00      	cmp	r3, #0
 800eca8:	d007      	beq.n	800ecba <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 800ecaa:	68fb      	ldr	r3, [r7, #12]
 800ecac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ecae:	4618      	mov	r0, r3
 800ecb0:	f7ff fafc 	bl	800e2ac <pbuf_free>
      pcb->refused_data = NULL;
 800ecb4:	68fb      	ldr	r3, [r7, #12]
 800ecb6:	2200      	movs	r2, #0
 800ecb8:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }
  if (shut_tx) {
 800ecba:	687b      	ldr	r3, [r7, #4]
 800ecbc:	2b00      	cmp	r3, #0
 800ecbe:	d012      	beq.n	800ece6 <tcp_shutdown+0x9e>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 800ecc0:	68fb      	ldr	r3, [r7, #12]
 800ecc2:	7d1b      	ldrb	r3, [r3, #20]
 800ecc4:	2b03      	cmp	r3, #3
 800ecc6:	db0b      	blt.n	800ece0 <tcp_shutdown+0x98>
 800ecc8:	2b04      	cmp	r3, #4
 800ecca:	dd01      	ble.n	800ecd0 <tcp_shutdown+0x88>
 800eccc:	2b07      	cmp	r3, #7
 800ecce:	d107      	bne.n	800ece0 <tcp_shutdown+0x98>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 800ecd0:	68bb      	ldr	r3, [r7, #8]
 800ecd2:	b2db      	uxtb	r3, r3
 800ecd4:	4619      	mov	r1, r3
 800ecd6:	68f8      	ldr	r0, [r7, #12]
 800ecd8:	f7ff fe46 	bl	800e968 <tcp_close_shutdown>
 800ecdc:	4603      	mov	r3, r0
 800ecde:	e003      	b.n	800ece8 <tcp_shutdown+0xa0>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 800ece0:	f06f 030a 	mvn.w	r3, #10
 800ece4:	e000      	b.n	800ece8 <tcp_shutdown+0xa0>
    }
  }
  return ERR_OK;
 800ece6:	2300      	movs	r3, #0
}
 800ece8:	4618      	mov	r0, r3
 800ecea:	3710      	adds	r7, #16
 800ecec:	46bd      	mov	sp, r7
 800ecee:	bd80      	pop	{r7, pc}
 800ecf0:	08019d2c 	.word	0x08019d2c
 800ecf4:	08019e54 	.word	0x08019e54
 800ecf8:	08019d70 	.word	0x08019d70

0800ecfc <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800ecfc:	b580      	push	{r7, lr}
 800ecfe:	b08e      	sub	sp, #56	; 0x38
 800ed00:	af04      	add	r7, sp, #16
 800ed02:	6078      	str	r0, [r7, #4]
 800ed04:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800ed06:	687b      	ldr	r3, [r7, #4]
 800ed08:	2b00      	cmp	r3, #0
 800ed0a:	d107      	bne.n	800ed1c <tcp_abandon+0x20>
 800ed0c:	4b52      	ldr	r3, [pc, #328]	; (800ee58 <tcp_abandon+0x15c>)
 800ed0e:	f240 223d 	movw	r2, #573	; 0x23d
 800ed12:	4952      	ldr	r1, [pc, #328]	; (800ee5c <tcp_abandon+0x160>)
 800ed14:	4852      	ldr	r0, [pc, #328]	; (800ee60 <tcp_abandon+0x164>)
 800ed16:	f008 fc4f 	bl	80175b8 <iprintf>
 800ed1a:	e099      	b.n	800ee50 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	7d1b      	ldrb	r3, [r3, #20]
 800ed20:	2b01      	cmp	r3, #1
 800ed22:	d106      	bne.n	800ed32 <tcp_abandon+0x36>
 800ed24:	4b4c      	ldr	r3, [pc, #304]	; (800ee58 <tcp_abandon+0x15c>)
 800ed26:	f240 2241 	movw	r2, #577	; 0x241
 800ed2a:	494e      	ldr	r1, [pc, #312]	; (800ee64 <tcp_abandon+0x168>)
 800ed2c:	484c      	ldr	r0, [pc, #304]	; (800ee60 <tcp_abandon+0x164>)
 800ed2e:	f008 fc43 	bl	80175b8 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	7d1b      	ldrb	r3, [r3, #20]
 800ed36:	2b0a      	cmp	r3, #10
 800ed38:	d107      	bne.n	800ed4a <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800ed3a:	6879      	ldr	r1, [r7, #4]
 800ed3c:	484a      	ldr	r0, [pc, #296]	; (800ee68 <tcp_abandon+0x16c>)
 800ed3e:	f001 fa35 	bl	80101ac <tcp_pcb_remove>
    tcp_free(pcb);
 800ed42:	6878      	ldr	r0, [r7, #4]
 800ed44:	f7ff fd5e 	bl	800e804 <tcp_free>
 800ed48:	e082      	b.n	800ee50 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800ed4a:	2300      	movs	r3, #0
 800ed4c:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800ed4e:	2300      	movs	r3, #0
 800ed50:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ed56:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed5c:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800ed5e:	687b      	ldr	r3, [r7, #4]
 800ed60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ed64:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	691b      	ldr	r3, [r3, #16]
 800ed6a:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	7d1b      	ldrb	r3, [r3, #20]
 800ed70:	2b00      	cmp	r3, #0
 800ed72:	d126      	bne.n	800edc2 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800ed74:	687b      	ldr	r3, [r7, #4]
 800ed76:	8adb      	ldrh	r3, [r3, #22]
 800ed78:	2b00      	cmp	r3, #0
 800ed7a:	d02e      	beq.n	800edda <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800ed7c:	4b3b      	ldr	r3, [pc, #236]	; (800ee6c <tcp_abandon+0x170>)
 800ed7e:	681b      	ldr	r3, [r3, #0]
 800ed80:	687a      	ldr	r2, [r7, #4]
 800ed82:	429a      	cmp	r2, r3
 800ed84:	d105      	bne.n	800ed92 <tcp_abandon+0x96>
 800ed86:	4b39      	ldr	r3, [pc, #228]	; (800ee6c <tcp_abandon+0x170>)
 800ed88:	681b      	ldr	r3, [r3, #0]
 800ed8a:	68db      	ldr	r3, [r3, #12]
 800ed8c:	4a37      	ldr	r2, [pc, #220]	; (800ee6c <tcp_abandon+0x170>)
 800ed8e:	6013      	str	r3, [r2, #0]
 800ed90:	e013      	b.n	800edba <tcp_abandon+0xbe>
 800ed92:	4b36      	ldr	r3, [pc, #216]	; (800ee6c <tcp_abandon+0x170>)
 800ed94:	681b      	ldr	r3, [r3, #0]
 800ed96:	61fb      	str	r3, [r7, #28]
 800ed98:	e00c      	b.n	800edb4 <tcp_abandon+0xb8>
 800ed9a:	69fb      	ldr	r3, [r7, #28]
 800ed9c:	68db      	ldr	r3, [r3, #12]
 800ed9e:	687a      	ldr	r2, [r7, #4]
 800eda0:	429a      	cmp	r2, r3
 800eda2:	d104      	bne.n	800edae <tcp_abandon+0xb2>
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	68da      	ldr	r2, [r3, #12]
 800eda8:	69fb      	ldr	r3, [r7, #28]
 800edaa:	60da      	str	r2, [r3, #12]
 800edac:	e005      	b.n	800edba <tcp_abandon+0xbe>
 800edae:	69fb      	ldr	r3, [r7, #28]
 800edb0:	68db      	ldr	r3, [r3, #12]
 800edb2:	61fb      	str	r3, [r7, #28]
 800edb4:	69fb      	ldr	r3, [r7, #28]
 800edb6:	2b00      	cmp	r3, #0
 800edb8:	d1ef      	bne.n	800ed9a <tcp_abandon+0x9e>
 800edba:	687b      	ldr	r3, [r7, #4]
 800edbc:	2200      	movs	r2, #0
 800edbe:	60da      	str	r2, [r3, #12]
 800edc0:	e00b      	b.n	800edda <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800edc2:	683b      	ldr	r3, [r7, #0]
 800edc4:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	8adb      	ldrh	r3, [r3, #22]
 800edca:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800edcc:	6879      	ldr	r1, [r7, #4]
 800edce:	4828      	ldr	r0, [pc, #160]	; (800ee70 <tcp_abandon+0x174>)
 800edd0:	f001 f9ec 	bl	80101ac <tcp_pcb_remove>
 800edd4:	4b27      	ldr	r3, [pc, #156]	; (800ee74 <tcp_abandon+0x178>)
 800edd6:	2201      	movs	r2, #1
 800edd8:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800edda:	687b      	ldr	r3, [r7, #4]
 800eddc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800edde:	2b00      	cmp	r3, #0
 800ede0:	d004      	beq.n	800edec <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ede6:	4618      	mov	r0, r3
 800ede8:	f000 fec2 	bl	800fb70 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800edf0:	2b00      	cmp	r3, #0
 800edf2:	d004      	beq.n	800edfe <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800edf4:	687b      	ldr	r3, [r7, #4]
 800edf6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800edf8:	4618      	mov	r0, r3
 800edfa:	f000 feb9 	bl	800fb70 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800edfe:	687b      	ldr	r3, [r7, #4]
 800ee00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ee02:	2b00      	cmp	r3, #0
 800ee04:	d004      	beq.n	800ee10 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800ee06:	687b      	ldr	r3, [r7, #4]
 800ee08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ee0a:	4618      	mov	r0, r3
 800ee0c:	f000 feb0 	bl	800fb70 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800ee10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee12:	2b00      	cmp	r3, #0
 800ee14:	d00e      	beq.n	800ee34 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800ee16:	6879      	ldr	r1, [r7, #4]
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	3304      	adds	r3, #4
 800ee1c:	687a      	ldr	r2, [r7, #4]
 800ee1e:	8b12      	ldrh	r2, [r2, #24]
 800ee20:	9202      	str	r2, [sp, #8]
 800ee22:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800ee24:	9201      	str	r2, [sp, #4]
 800ee26:	9300      	str	r3, [sp, #0]
 800ee28:	460b      	mov	r3, r1
 800ee2a:	697a      	ldr	r2, [r7, #20]
 800ee2c:	69b9      	ldr	r1, [r7, #24]
 800ee2e:	6878      	ldr	r0, [r7, #4]
 800ee30:	f005 fb9a 	bl	8014568 <tcp_rst>
    }
    last_state = pcb->state;
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	7d1b      	ldrb	r3, [r3, #20]
 800ee38:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800ee3a:	6878      	ldr	r0, [r7, #4]
 800ee3c:	f7ff fce2 	bl	800e804 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800ee40:	693b      	ldr	r3, [r7, #16]
 800ee42:	2b00      	cmp	r3, #0
 800ee44:	d004      	beq.n	800ee50 <tcp_abandon+0x154>
 800ee46:	693b      	ldr	r3, [r7, #16]
 800ee48:	f06f 010c 	mvn.w	r1, #12
 800ee4c:	68f8      	ldr	r0, [r7, #12]
 800ee4e:	4798      	blx	r3
  }
}
 800ee50:	3728      	adds	r7, #40	; 0x28
 800ee52:	46bd      	mov	sp, r7
 800ee54:	bd80      	pop	{r7, pc}
 800ee56:	bf00      	nop
 800ee58:	08019d2c 	.word	0x08019d2c
 800ee5c:	08019e70 	.word	0x08019e70
 800ee60:	08019d70 	.word	0x08019d70
 800ee64:	08019e8c 	.word	0x08019e8c
 800ee68:	2000d298 	.word	0x2000d298
 800ee6c:	2000d294 	.word	0x2000d294
 800ee70:	2000d288 	.word	0x2000d288
 800ee74:	2000d284 	.word	0x2000d284

0800ee78 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800ee78:	b580      	push	{r7, lr}
 800ee7a:	b082      	sub	sp, #8
 800ee7c:	af00      	add	r7, sp, #0
 800ee7e:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800ee80:	2101      	movs	r1, #1
 800ee82:	6878      	ldr	r0, [r7, #4]
 800ee84:	f7ff ff3a 	bl	800ecfc <tcp_abandon>
}
 800ee88:	bf00      	nop
 800ee8a:	3708      	adds	r7, #8
 800ee8c:	46bd      	mov	sp, r7
 800ee8e:	bd80      	pop	{r7, pc}

0800ee90 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800ee90:	b580      	push	{r7, lr}
 800ee92:	b088      	sub	sp, #32
 800ee94:	af00      	add	r7, sp, #0
 800ee96:	60f8      	str	r0, [r7, #12]
 800ee98:	60b9      	str	r1, [r7, #8]
 800ee9a:	4613      	mov	r3, r2
 800ee9c:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 800ee9e:	2304      	movs	r3, #4
 800eea0:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800eea2:	68bb      	ldr	r3, [r7, #8]
 800eea4:	2b00      	cmp	r3, #0
 800eea6:	d101      	bne.n	800eeac <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 800eea8:	4b3e      	ldr	r3, [pc, #248]	; (800efa4 <tcp_bind+0x114>)
 800eeaa:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800eeac:	68fb      	ldr	r3, [r7, #12]
 800eeae:	2b00      	cmp	r3, #0
 800eeb0:	d109      	bne.n	800eec6 <tcp_bind+0x36>
 800eeb2:	4b3d      	ldr	r3, [pc, #244]	; (800efa8 <tcp_bind+0x118>)
 800eeb4:	f240 22a9 	movw	r2, #681	; 0x2a9
 800eeb8:	493c      	ldr	r1, [pc, #240]	; (800efac <tcp_bind+0x11c>)
 800eeba:	483d      	ldr	r0, [pc, #244]	; (800efb0 <tcp_bind+0x120>)
 800eebc:	f008 fb7c 	bl	80175b8 <iprintf>
 800eec0:	f06f 030f 	mvn.w	r3, #15
 800eec4:	e06a      	b.n	800ef9c <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800eec6:	68fb      	ldr	r3, [r7, #12]
 800eec8:	7d1b      	ldrb	r3, [r3, #20]
 800eeca:	2b00      	cmp	r3, #0
 800eecc:	d009      	beq.n	800eee2 <tcp_bind+0x52>
 800eece:	4b36      	ldr	r3, [pc, #216]	; (800efa8 <tcp_bind+0x118>)
 800eed0:	f240 22ab 	movw	r2, #683	; 0x2ab
 800eed4:	4937      	ldr	r1, [pc, #220]	; (800efb4 <tcp_bind+0x124>)
 800eed6:	4836      	ldr	r0, [pc, #216]	; (800efb0 <tcp_bind+0x120>)
 800eed8:	f008 fb6e 	bl	80175b8 <iprintf>
 800eedc:	f06f 0305 	mvn.w	r3, #5
 800eee0:	e05c      	b.n	800ef9c <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 800eee2:	88fb      	ldrh	r3, [r7, #6]
 800eee4:	2b00      	cmp	r3, #0
 800eee6:	d109      	bne.n	800eefc <tcp_bind+0x6c>
    port = tcp_new_port();
 800eee8:	f000 f9de 	bl	800f2a8 <tcp_new_port>
 800eeec:	4603      	mov	r3, r0
 800eeee:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800eef0:	88fb      	ldrh	r3, [r7, #6]
 800eef2:	2b00      	cmp	r3, #0
 800eef4:	d135      	bne.n	800ef62 <tcp_bind+0xd2>
      return ERR_BUF;
 800eef6:	f06f 0301 	mvn.w	r3, #1
 800eefa:	e04f      	b.n	800ef9c <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 800eefc:	2300      	movs	r3, #0
 800eefe:	61fb      	str	r3, [r7, #28]
 800ef00:	e02b      	b.n	800ef5a <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800ef02:	4a2d      	ldr	r2, [pc, #180]	; (800efb8 <tcp_bind+0x128>)
 800ef04:	69fb      	ldr	r3, [r7, #28]
 800ef06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ef0a:	681b      	ldr	r3, [r3, #0]
 800ef0c:	61bb      	str	r3, [r7, #24]
 800ef0e:	e01e      	b.n	800ef4e <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 800ef10:	69bb      	ldr	r3, [r7, #24]
 800ef12:	8adb      	ldrh	r3, [r3, #22]
 800ef14:	88fa      	ldrh	r2, [r7, #6]
 800ef16:	429a      	cmp	r2, r3
 800ef18:	d116      	bne.n	800ef48 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 800ef1a:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800ef1c:	2b00      	cmp	r3, #0
 800ef1e:	d010      	beq.n	800ef42 <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 800ef20:	69bb      	ldr	r3, [r7, #24]
 800ef22:	681b      	ldr	r3, [r3, #0]
 800ef24:	2b00      	cmp	r3, #0
 800ef26:	d00c      	beq.n	800ef42 <tcp_bind+0xb2>
 800ef28:	68bb      	ldr	r3, [r7, #8]
 800ef2a:	2b00      	cmp	r3, #0
 800ef2c:	d009      	beq.n	800ef42 <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 800ef2e:	68bb      	ldr	r3, [r7, #8]
 800ef30:	681b      	ldr	r3, [r3, #0]
 800ef32:	2b00      	cmp	r3, #0
 800ef34:	d005      	beq.n	800ef42 <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 800ef36:	69bb      	ldr	r3, [r7, #24]
 800ef38:	681a      	ldr	r2, [r3, #0]
 800ef3a:	68bb      	ldr	r3, [r7, #8]
 800ef3c:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800ef3e:	429a      	cmp	r2, r3
 800ef40:	d102      	bne.n	800ef48 <tcp_bind+0xb8>
              return ERR_USE;
 800ef42:	f06f 0307 	mvn.w	r3, #7
 800ef46:	e029      	b.n	800ef9c <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800ef48:	69bb      	ldr	r3, [r7, #24]
 800ef4a:	68db      	ldr	r3, [r3, #12]
 800ef4c:	61bb      	str	r3, [r7, #24]
 800ef4e:	69bb      	ldr	r3, [r7, #24]
 800ef50:	2b00      	cmp	r3, #0
 800ef52:	d1dd      	bne.n	800ef10 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 800ef54:	69fb      	ldr	r3, [r7, #28]
 800ef56:	3301      	adds	r3, #1
 800ef58:	61fb      	str	r3, [r7, #28]
 800ef5a:	69fa      	ldr	r2, [r7, #28]
 800ef5c:	697b      	ldr	r3, [r7, #20]
 800ef5e:	429a      	cmp	r2, r3
 800ef60:	dbcf      	blt.n	800ef02 <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 800ef62:	68bb      	ldr	r3, [r7, #8]
 800ef64:	2b00      	cmp	r3, #0
 800ef66:	d00c      	beq.n	800ef82 <tcp_bind+0xf2>
 800ef68:	68bb      	ldr	r3, [r7, #8]
 800ef6a:	681b      	ldr	r3, [r3, #0]
 800ef6c:	2b00      	cmp	r3, #0
 800ef6e:	d008      	beq.n	800ef82 <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 800ef70:	68bb      	ldr	r3, [r7, #8]
 800ef72:	2b00      	cmp	r3, #0
 800ef74:	d002      	beq.n	800ef7c <tcp_bind+0xec>
 800ef76:	68bb      	ldr	r3, [r7, #8]
 800ef78:	681b      	ldr	r3, [r3, #0]
 800ef7a:	e000      	b.n	800ef7e <tcp_bind+0xee>
 800ef7c:	2300      	movs	r3, #0
 800ef7e:	68fa      	ldr	r2, [r7, #12]
 800ef80:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 800ef82:	68fb      	ldr	r3, [r7, #12]
 800ef84:	88fa      	ldrh	r2, [r7, #6]
 800ef86:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800ef88:	4b0c      	ldr	r3, [pc, #48]	; (800efbc <tcp_bind+0x12c>)
 800ef8a:	681a      	ldr	r2, [r3, #0]
 800ef8c:	68fb      	ldr	r3, [r7, #12]
 800ef8e:	60da      	str	r2, [r3, #12]
 800ef90:	4a0a      	ldr	r2, [pc, #40]	; (800efbc <tcp_bind+0x12c>)
 800ef92:	68fb      	ldr	r3, [r7, #12]
 800ef94:	6013      	str	r3, [r2, #0]
 800ef96:	f005 fca9 	bl	80148ec <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 800ef9a:	2300      	movs	r3, #0
}
 800ef9c:	4618      	mov	r0, r3
 800ef9e:	3720      	adds	r7, #32
 800efa0:	46bd      	mov	sp, r7
 800efa2:	bd80      	pop	{r7, pc}
 800efa4:	0801ba3c 	.word	0x0801ba3c
 800efa8:	08019d2c 	.word	0x08019d2c
 800efac:	08019ec0 	.word	0x08019ec0
 800efb0:	08019d70 	.word	0x08019d70
 800efb4:	08019ed8 	.word	0x08019ed8
 800efb8:	0801ba14 	.word	0x0801ba14
 800efbc:	2000d294 	.word	0x2000d294

0800efc0 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 800efc0:	b580      	push	{r7, lr}
 800efc2:	b084      	sub	sp, #16
 800efc4:	af00      	add	r7, sp, #0
 800efc6:	60f8      	str	r0, [r7, #12]
 800efc8:	60b9      	str	r1, [r7, #8]
 800efca:	4613      	mov	r3, r2
 800efcc:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 800efce:	68bb      	ldr	r3, [r7, #8]
 800efd0:	2b00      	cmp	r3, #0
 800efd2:	d106      	bne.n	800efe2 <tcp_accept_null+0x22>
 800efd4:	4b07      	ldr	r3, [pc, #28]	; (800eff4 <tcp_accept_null+0x34>)
 800efd6:	f240 320f 	movw	r2, #783	; 0x30f
 800efda:	4907      	ldr	r1, [pc, #28]	; (800eff8 <tcp_accept_null+0x38>)
 800efdc:	4807      	ldr	r0, [pc, #28]	; (800effc <tcp_accept_null+0x3c>)
 800efde:	f008 faeb 	bl	80175b8 <iprintf>

  tcp_abort(pcb);
 800efe2:	68b8      	ldr	r0, [r7, #8]
 800efe4:	f7ff ff48 	bl	800ee78 <tcp_abort>

  return ERR_ABRT;
 800efe8:	f06f 030c 	mvn.w	r3, #12
}
 800efec:	4618      	mov	r0, r3
 800efee:	3710      	adds	r7, #16
 800eff0:	46bd      	mov	sp, r7
 800eff2:	bd80      	pop	{r7, pc}
 800eff4:	08019d2c 	.word	0x08019d2c
 800eff8:	08019f00 	.word	0x08019f00
 800effc:	08019d70 	.word	0x08019d70

0800f000 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 800f000:	b580      	push	{r7, lr}
 800f002:	b088      	sub	sp, #32
 800f004:	af00      	add	r7, sp, #0
 800f006:	60f8      	str	r0, [r7, #12]
 800f008:	460b      	mov	r3, r1
 800f00a:	607a      	str	r2, [r7, #4]
 800f00c:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 800f00e:	2300      	movs	r3, #0
 800f010:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 800f012:	68fb      	ldr	r3, [r7, #12]
 800f014:	2b00      	cmp	r3, #0
 800f016:	d109      	bne.n	800f02c <tcp_listen_with_backlog_and_err+0x2c>
 800f018:	4b47      	ldr	r3, [pc, #284]	; (800f138 <tcp_listen_with_backlog_and_err+0x138>)
 800f01a:	f240 3259 	movw	r2, #857	; 0x359
 800f01e:	4947      	ldr	r1, [pc, #284]	; (800f13c <tcp_listen_with_backlog_and_err+0x13c>)
 800f020:	4847      	ldr	r0, [pc, #284]	; (800f140 <tcp_listen_with_backlog_and_err+0x140>)
 800f022:	f008 fac9 	bl	80175b8 <iprintf>
 800f026:	23f0      	movs	r3, #240	; 0xf0
 800f028:	76fb      	strb	r3, [r7, #27]
 800f02a:	e079      	b.n	800f120 <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 800f02c:	68fb      	ldr	r3, [r7, #12]
 800f02e:	7d1b      	ldrb	r3, [r3, #20]
 800f030:	2b00      	cmp	r3, #0
 800f032:	d009      	beq.n	800f048 <tcp_listen_with_backlog_and_err+0x48>
 800f034:	4b40      	ldr	r3, [pc, #256]	; (800f138 <tcp_listen_with_backlog_and_err+0x138>)
 800f036:	f240 325a 	movw	r2, #858	; 0x35a
 800f03a:	4942      	ldr	r1, [pc, #264]	; (800f144 <tcp_listen_with_backlog_and_err+0x144>)
 800f03c:	4840      	ldr	r0, [pc, #256]	; (800f140 <tcp_listen_with_backlog_and_err+0x140>)
 800f03e:	f008 fabb 	bl	80175b8 <iprintf>
 800f042:	23f1      	movs	r3, #241	; 0xf1
 800f044:	76fb      	strb	r3, [r7, #27]
 800f046:	e06b      	b.n	800f120 <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 800f048:	68fb      	ldr	r3, [r7, #12]
 800f04a:	7d1b      	ldrb	r3, [r3, #20]
 800f04c:	2b01      	cmp	r3, #1
 800f04e:	d104      	bne.n	800f05a <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 800f050:	68fb      	ldr	r3, [r7, #12]
 800f052:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 800f054:	23f7      	movs	r3, #247	; 0xf7
 800f056:	76fb      	strb	r3, [r7, #27]
    goto done;
 800f058:	e062      	b.n	800f120 <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 800f05a:	2001      	movs	r0, #1
 800f05c:	f7fe fa06 	bl	800d46c <memp_malloc>
 800f060:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 800f062:	69fb      	ldr	r3, [r7, #28]
 800f064:	2b00      	cmp	r3, #0
 800f066:	d102      	bne.n	800f06e <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 800f068:	23ff      	movs	r3, #255	; 0xff
 800f06a:	76fb      	strb	r3, [r7, #27]
    goto done;
 800f06c:	e058      	b.n	800f120 <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 800f06e:	68fb      	ldr	r3, [r7, #12]
 800f070:	691a      	ldr	r2, [r3, #16]
 800f072:	69fb      	ldr	r3, [r7, #28]
 800f074:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 800f076:	68fb      	ldr	r3, [r7, #12]
 800f078:	8ada      	ldrh	r2, [r3, #22]
 800f07a:	69fb      	ldr	r3, [r7, #28]
 800f07c:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 800f07e:	69fb      	ldr	r3, [r7, #28]
 800f080:	2201      	movs	r2, #1
 800f082:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 800f084:	68fb      	ldr	r3, [r7, #12]
 800f086:	7d5a      	ldrb	r2, [r3, #21]
 800f088:	69fb      	ldr	r3, [r7, #28]
 800f08a:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 800f08c:	68fb      	ldr	r3, [r7, #12]
 800f08e:	7a5a      	ldrb	r2, [r3, #9]
 800f090:	69fb      	ldr	r3, [r7, #28]
 800f092:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 800f094:	69fb      	ldr	r3, [r7, #28]
 800f096:	2200      	movs	r2, #0
 800f098:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 800f09a:	68fb      	ldr	r3, [r7, #12]
 800f09c:	7ada      	ldrb	r2, [r3, #11]
 800f09e:	69fb      	ldr	r3, [r7, #28]
 800f0a0:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 800f0a2:	68fb      	ldr	r3, [r7, #12]
 800f0a4:	7a9a      	ldrb	r2, [r3, #10]
 800f0a6:	69fb      	ldr	r3, [r7, #28]
 800f0a8:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 800f0aa:	68fb      	ldr	r3, [r7, #12]
 800f0ac:	681a      	ldr	r2, [r3, #0]
 800f0ae:	69fb      	ldr	r3, [r7, #28]
 800f0b0:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 800f0b2:	68fb      	ldr	r3, [r7, #12]
 800f0b4:	8adb      	ldrh	r3, [r3, #22]
 800f0b6:	2b00      	cmp	r3, #0
 800f0b8:	d021      	beq.n	800f0fe <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800f0ba:	4b23      	ldr	r3, [pc, #140]	; (800f148 <tcp_listen_with_backlog_and_err+0x148>)
 800f0bc:	681b      	ldr	r3, [r3, #0]
 800f0be:	68fa      	ldr	r2, [r7, #12]
 800f0c0:	429a      	cmp	r2, r3
 800f0c2:	d105      	bne.n	800f0d0 <tcp_listen_with_backlog_and_err+0xd0>
 800f0c4:	4b20      	ldr	r3, [pc, #128]	; (800f148 <tcp_listen_with_backlog_and_err+0x148>)
 800f0c6:	681b      	ldr	r3, [r3, #0]
 800f0c8:	68db      	ldr	r3, [r3, #12]
 800f0ca:	4a1f      	ldr	r2, [pc, #124]	; (800f148 <tcp_listen_with_backlog_and_err+0x148>)
 800f0cc:	6013      	str	r3, [r2, #0]
 800f0ce:	e013      	b.n	800f0f8 <tcp_listen_with_backlog_and_err+0xf8>
 800f0d0:	4b1d      	ldr	r3, [pc, #116]	; (800f148 <tcp_listen_with_backlog_and_err+0x148>)
 800f0d2:	681b      	ldr	r3, [r3, #0]
 800f0d4:	617b      	str	r3, [r7, #20]
 800f0d6:	e00c      	b.n	800f0f2 <tcp_listen_with_backlog_and_err+0xf2>
 800f0d8:	697b      	ldr	r3, [r7, #20]
 800f0da:	68db      	ldr	r3, [r3, #12]
 800f0dc:	68fa      	ldr	r2, [r7, #12]
 800f0de:	429a      	cmp	r2, r3
 800f0e0:	d104      	bne.n	800f0ec <tcp_listen_with_backlog_and_err+0xec>
 800f0e2:	68fb      	ldr	r3, [r7, #12]
 800f0e4:	68da      	ldr	r2, [r3, #12]
 800f0e6:	697b      	ldr	r3, [r7, #20]
 800f0e8:	60da      	str	r2, [r3, #12]
 800f0ea:	e005      	b.n	800f0f8 <tcp_listen_with_backlog_and_err+0xf8>
 800f0ec:	697b      	ldr	r3, [r7, #20]
 800f0ee:	68db      	ldr	r3, [r3, #12]
 800f0f0:	617b      	str	r3, [r7, #20]
 800f0f2:	697b      	ldr	r3, [r7, #20]
 800f0f4:	2b00      	cmp	r3, #0
 800f0f6:	d1ef      	bne.n	800f0d8 <tcp_listen_with_backlog_and_err+0xd8>
 800f0f8:	68fb      	ldr	r3, [r7, #12]
 800f0fa:	2200      	movs	r2, #0
 800f0fc:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 800f0fe:	68f8      	ldr	r0, [r7, #12]
 800f100:	f7ff fb80 	bl	800e804 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 800f104:	69fb      	ldr	r3, [r7, #28]
 800f106:	4a11      	ldr	r2, [pc, #68]	; (800f14c <tcp_listen_with_backlog_and_err+0x14c>)
 800f108:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 800f10a:	4b11      	ldr	r3, [pc, #68]	; (800f150 <tcp_listen_with_backlog_and_err+0x150>)
 800f10c:	681a      	ldr	r2, [r3, #0]
 800f10e:	69fb      	ldr	r3, [r7, #28]
 800f110:	60da      	str	r2, [r3, #12]
 800f112:	4a0f      	ldr	r2, [pc, #60]	; (800f150 <tcp_listen_with_backlog_and_err+0x150>)
 800f114:	69fb      	ldr	r3, [r7, #28]
 800f116:	6013      	str	r3, [r2, #0]
 800f118:	f005 fbe8 	bl	80148ec <tcp_timer_needed>
  res = ERR_OK;
 800f11c:	2300      	movs	r3, #0
 800f11e:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 800f120:	687b      	ldr	r3, [r7, #4]
 800f122:	2b00      	cmp	r3, #0
 800f124:	d002      	beq.n	800f12c <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 800f126:	687b      	ldr	r3, [r7, #4]
 800f128:	7efa      	ldrb	r2, [r7, #27]
 800f12a:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 800f12c:	69fb      	ldr	r3, [r7, #28]
}
 800f12e:	4618      	mov	r0, r3
 800f130:	3720      	adds	r7, #32
 800f132:	46bd      	mov	sp, r7
 800f134:	bd80      	pop	{r7, pc}
 800f136:	bf00      	nop
 800f138:	08019d2c 	.word	0x08019d2c
 800f13c:	08019f20 	.word	0x08019f20
 800f140:	08019d70 	.word	0x08019d70
 800f144:	08019f50 	.word	0x08019f50
 800f148:	2000d294 	.word	0x2000d294
 800f14c:	0800efc1 	.word	0x0800efc1
 800f150:	2000d290 	.word	0x2000d290

0800f154 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800f154:	b580      	push	{r7, lr}
 800f156:	b084      	sub	sp, #16
 800f158:	af00      	add	r7, sp, #0
 800f15a:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800f15c:	687b      	ldr	r3, [r7, #4]
 800f15e:	2b00      	cmp	r3, #0
 800f160:	d106      	bne.n	800f170 <tcp_update_rcv_ann_wnd+0x1c>
 800f162:	4b25      	ldr	r3, [pc, #148]	; (800f1f8 <tcp_update_rcv_ann_wnd+0xa4>)
 800f164:	f240 32a6 	movw	r2, #934	; 0x3a6
 800f168:	4924      	ldr	r1, [pc, #144]	; (800f1fc <tcp_update_rcv_ann_wnd+0xa8>)
 800f16a:	4825      	ldr	r0, [pc, #148]	; (800f200 <tcp_update_rcv_ann_wnd+0xac>)
 800f16c:	f008 fa24 	bl	80175b8 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800f170:	687b      	ldr	r3, [r7, #4]
 800f172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f174:	687a      	ldr	r2, [r7, #4]
 800f176:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800f178:	4413      	add	r3, r2
 800f17a:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800f17c:	687b      	ldr	r3, [r7, #4]
 800f17e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f180:	687a      	ldr	r2, [r7, #4]
 800f182:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800f184:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800f188:	bf28      	it	cs
 800f18a:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800f18e:	b292      	uxth	r2, r2
 800f190:	4413      	add	r3, r2
 800f192:	68fa      	ldr	r2, [r7, #12]
 800f194:	1ad3      	subs	r3, r2, r3
 800f196:	2b00      	cmp	r3, #0
 800f198:	db08      	blt.n	800f1ac <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800f19a:	687b      	ldr	r3, [r7, #4]
 800f19c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800f1a2:	687b      	ldr	r3, [r7, #4]
 800f1a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f1a6:	68fa      	ldr	r2, [r7, #12]
 800f1a8:	1ad3      	subs	r3, r2, r3
 800f1aa:	e020      	b.n	800f1ee <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800f1ac:	687b      	ldr	r3, [r7, #4]
 800f1ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f1b0:	687b      	ldr	r3, [r7, #4]
 800f1b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f1b4:	1ad3      	subs	r3, r2, r3
 800f1b6:	2b00      	cmp	r3, #0
 800f1b8:	dd03      	ble.n	800f1c2 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800f1ba:	687b      	ldr	r3, [r7, #4]
 800f1bc:	2200      	movs	r2, #0
 800f1be:	855a      	strh	r2, [r3, #42]	; 0x2a
 800f1c0:	e014      	b.n	800f1ec <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800f1c2:	687b      	ldr	r3, [r7, #4]
 800f1c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f1c6:	687b      	ldr	r3, [r7, #4]
 800f1c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f1ca:	1ad3      	subs	r3, r2, r3
 800f1cc:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800f1ce:	68bb      	ldr	r3, [r7, #8]
 800f1d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f1d4:	d306      	bcc.n	800f1e4 <tcp_update_rcv_ann_wnd+0x90>
 800f1d6:	4b08      	ldr	r3, [pc, #32]	; (800f1f8 <tcp_update_rcv_ann_wnd+0xa4>)
 800f1d8:	f240 32b6 	movw	r2, #950	; 0x3b6
 800f1dc:	4909      	ldr	r1, [pc, #36]	; (800f204 <tcp_update_rcv_ann_wnd+0xb0>)
 800f1de:	4808      	ldr	r0, [pc, #32]	; (800f200 <tcp_update_rcv_ann_wnd+0xac>)
 800f1e0:	f008 f9ea 	bl	80175b8 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800f1e4:	68bb      	ldr	r3, [r7, #8]
 800f1e6:	b29a      	uxth	r2, r3
 800f1e8:	687b      	ldr	r3, [r7, #4]
 800f1ea:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800f1ec:	2300      	movs	r3, #0
  }
}
 800f1ee:	4618      	mov	r0, r3
 800f1f0:	3710      	adds	r7, #16
 800f1f2:	46bd      	mov	sp, r7
 800f1f4:	bd80      	pop	{r7, pc}
 800f1f6:	bf00      	nop
 800f1f8:	08019d2c 	.word	0x08019d2c
 800f1fc:	08019f88 	.word	0x08019f88
 800f200:	08019d70 	.word	0x08019d70
 800f204:	08019fac 	.word	0x08019fac

0800f208 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800f208:	b580      	push	{r7, lr}
 800f20a:	b084      	sub	sp, #16
 800f20c:	af00      	add	r7, sp, #0
 800f20e:	6078      	str	r0, [r7, #4]
 800f210:	460b      	mov	r3, r1
 800f212:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800f214:	687b      	ldr	r3, [r7, #4]
 800f216:	2b00      	cmp	r3, #0
 800f218:	d107      	bne.n	800f22a <tcp_recved+0x22>
 800f21a:	4b1f      	ldr	r3, [pc, #124]	; (800f298 <tcp_recved+0x90>)
 800f21c:	f240 32cf 	movw	r2, #975	; 0x3cf
 800f220:	491e      	ldr	r1, [pc, #120]	; (800f29c <tcp_recved+0x94>)
 800f222:	481f      	ldr	r0, [pc, #124]	; (800f2a0 <tcp_recved+0x98>)
 800f224:	f008 f9c8 	bl	80175b8 <iprintf>
 800f228:	e032      	b.n	800f290 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800f22a:	687b      	ldr	r3, [r7, #4]
 800f22c:	7d1b      	ldrb	r3, [r3, #20]
 800f22e:	2b01      	cmp	r3, #1
 800f230:	d106      	bne.n	800f240 <tcp_recved+0x38>
 800f232:	4b19      	ldr	r3, [pc, #100]	; (800f298 <tcp_recved+0x90>)
 800f234:	f240 32d3 	movw	r2, #979	; 0x3d3
 800f238:	491a      	ldr	r1, [pc, #104]	; (800f2a4 <tcp_recved+0x9c>)
 800f23a:	4819      	ldr	r0, [pc, #100]	; (800f2a0 <tcp_recved+0x98>)
 800f23c:	f008 f9bc 	bl	80175b8 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800f240:	687b      	ldr	r3, [r7, #4]
 800f242:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f244:	887b      	ldrh	r3, [r7, #2]
 800f246:	4413      	add	r3, r2
 800f248:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800f24a:	89fb      	ldrh	r3, [r7, #14]
 800f24c:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800f250:	d804      	bhi.n	800f25c <tcp_recved+0x54>
 800f252:	687b      	ldr	r3, [r7, #4]
 800f254:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f256:	89fa      	ldrh	r2, [r7, #14]
 800f258:	429a      	cmp	r2, r3
 800f25a:	d204      	bcs.n	800f266 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800f25c:	687b      	ldr	r3, [r7, #4]
 800f25e:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800f262:	851a      	strh	r2, [r3, #40]	; 0x28
 800f264:	e002      	b.n	800f26c <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800f266:	687b      	ldr	r3, [r7, #4]
 800f268:	89fa      	ldrh	r2, [r7, #14]
 800f26a:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800f26c:	6878      	ldr	r0, [r7, #4]
 800f26e:	f7ff ff71 	bl	800f154 <tcp_update_rcv_ann_wnd>
 800f272:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800f274:	68bb      	ldr	r3, [r7, #8]
 800f276:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800f27a:	d309      	bcc.n	800f290 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800f27c:	687b      	ldr	r3, [r7, #4]
 800f27e:	8b5b      	ldrh	r3, [r3, #26]
 800f280:	f043 0302 	orr.w	r3, r3, #2
 800f284:	b29a      	uxth	r2, r3
 800f286:	687b      	ldr	r3, [r7, #4]
 800f288:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800f28a:	6878      	ldr	r0, [r7, #4]
 800f28c:	f004 fba6 	bl	80139dc <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800f290:	3710      	adds	r7, #16
 800f292:	46bd      	mov	sp, r7
 800f294:	bd80      	pop	{r7, pc}
 800f296:	bf00      	nop
 800f298:	08019d2c 	.word	0x08019d2c
 800f29c:	08019fc8 	.word	0x08019fc8
 800f2a0:	08019d70 	.word	0x08019d70
 800f2a4:	08019fe0 	.word	0x08019fe0

0800f2a8 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800f2a8:	b480      	push	{r7}
 800f2aa:	b083      	sub	sp, #12
 800f2ac:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800f2ae:	2300      	movs	r3, #0
 800f2b0:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800f2b2:	4b1e      	ldr	r3, [pc, #120]	; (800f32c <tcp_new_port+0x84>)
 800f2b4:	881b      	ldrh	r3, [r3, #0]
 800f2b6:	3301      	adds	r3, #1
 800f2b8:	b29a      	uxth	r2, r3
 800f2ba:	4b1c      	ldr	r3, [pc, #112]	; (800f32c <tcp_new_port+0x84>)
 800f2bc:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800f2be:	4b1b      	ldr	r3, [pc, #108]	; (800f32c <tcp_new_port+0x84>)
 800f2c0:	881b      	ldrh	r3, [r3, #0]
 800f2c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f2c6:	4293      	cmp	r3, r2
 800f2c8:	d103      	bne.n	800f2d2 <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800f2ca:	4b18      	ldr	r3, [pc, #96]	; (800f32c <tcp_new_port+0x84>)
 800f2cc:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800f2d0:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800f2d2:	2300      	movs	r3, #0
 800f2d4:	71fb      	strb	r3, [r7, #7]
 800f2d6:	e01e      	b.n	800f316 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800f2d8:	79fb      	ldrb	r3, [r7, #7]
 800f2da:	4a15      	ldr	r2, [pc, #84]	; (800f330 <tcp_new_port+0x88>)
 800f2dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f2e0:	681b      	ldr	r3, [r3, #0]
 800f2e2:	603b      	str	r3, [r7, #0]
 800f2e4:	e011      	b.n	800f30a <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 800f2e6:	683b      	ldr	r3, [r7, #0]
 800f2e8:	8ada      	ldrh	r2, [r3, #22]
 800f2ea:	4b10      	ldr	r3, [pc, #64]	; (800f32c <tcp_new_port+0x84>)
 800f2ec:	881b      	ldrh	r3, [r3, #0]
 800f2ee:	429a      	cmp	r2, r3
 800f2f0:	d108      	bne.n	800f304 <tcp_new_port+0x5c>
        n++;
 800f2f2:	88bb      	ldrh	r3, [r7, #4]
 800f2f4:	3301      	adds	r3, #1
 800f2f6:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800f2f8:	88bb      	ldrh	r3, [r7, #4]
 800f2fa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f2fe:	d3d8      	bcc.n	800f2b2 <tcp_new_port+0xa>
          return 0;
 800f300:	2300      	movs	r3, #0
 800f302:	e00d      	b.n	800f320 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800f304:	683b      	ldr	r3, [r7, #0]
 800f306:	68db      	ldr	r3, [r3, #12]
 800f308:	603b      	str	r3, [r7, #0]
 800f30a:	683b      	ldr	r3, [r7, #0]
 800f30c:	2b00      	cmp	r3, #0
 800f30e:	d1ea      	bne.n	800f2e6 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800f310:	79fb      	ldrb	r3, [r7, #7]
 800f312:	3301      	adds	r3, #1
 800f314:	71fb      	strb	r3, [r7, #7]
 800f316:	79fb      	ldrb	r3, [r7, #7]
 800f318:	2b03      	cmp	r3, #3
 800f31a:	d9dd      	bls.n	800f2d8 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800f31c:	4b03      	ldr	r3, [pc, #12]	; (800f32c <tcp_new_port+0x84>)
 800f31e:	881b      	ldrh	r3, [r3, #0]
}
 800f320:	4618      	mov	r0, r3
 800f322:	370c      	adds	r7, #12
 800f324:	46bd      	mov	sp, r7
 800f326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f32a:	4770      	bx	lr
 800f32c:	20000010 	.word	0x20000010
 800f330:	0801ba14 	.word	0x0801ba14

0800f334 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800f334:	b5b0      	push	{r4, r5, r7, lr}
 800f336:	b090      	sub	sp, #64	; 0x40
 800f338:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800f33a:	2300      	movs	r3, #0
 800f33c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800f340:	4b94      	ldr	r3, [pc, #592]	; (800f594 <tcp_slowtmr+0x260>)
 800f342:	681b      	ldr	r3, [r3, #0]
 800f344:	3301      	adds	r3, #1
 800f346:	4a93      	ldr	r2, [pc, #588]	; (800f594 <tcp_slowtmr+0x260>)
 800f348:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800f34a:	4b93      	ldr	r3, [pc, #588]	; (800f598 <tcp_slowtmr+0x264>)
 800f34c:	781b      	ldrb	r3, [r3, #0]
 800f34e:	3301      	adds	r3, #1
 800f350:	b2da      	uxtb	r2, r3
 800f352:	4b91      	ldr	r3, [pc, #580]	; (800f598 <tcp_slowtmr+0x264>)
 800f354:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800f356:	2300      	movs	r3, #0
 800f358:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800f35a:	4b90      	ldr	r3, [pc, #576]	; (800f59c <tcp_slowtmr+0x268>)
 800f35c:	681b      	ldr	r3, [r3, #0]
 800f35e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800f360:	e29d      	b.n	800f89e <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800f362:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f364:	7d1b      	ldrb	r3, [r3, #20]
 800f366:	2b00      	cmp	r3, #0
 800f368:	d106      	bne.n	800f378 <tcp_slowtmr+0x44>
 800f36a:	4b8d      	ldr	r3, [pc, #564]	; (800f5a0 <tcp_slowtmr+0x26c>)
 800f36c:	f240 42be 	movw	r2, #1214	; 0x4be
 800f370:	498c      	ldr	r1, [pc, #560]	; (800f5a4 <tcp_slowtmr+0x270>)
 800f372:	488d      	ldr	r0, [pc, #564]	; (800f5a8 <tcp_slowtmr+0x274>)
 800f374:	f008 f920 	bl	80175b8 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800f378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f37a:	7d1b      	ldrb	r3, [r3, #20]
 800f37c:	2b01      	cmp	r3, #1
 800f37e:	d106      	bne.n	800f38e <tcp_slowtmr+0x5a>
 800f380:	4b87      	ldr	r3, [pc, #540]	; (800f5a0 <tcp_slowtmr+0x26c>)
 800f382:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800f386:	4989      	ldr	r1, [pc, #548]	; (800f5ac <tcp_slowtmr+0x278>)
 800f388:	4887      	ldr	r0, [pc, #540]	; (800f5a8 <tcp_slowtmr+0x274>)
 800f38a:	f008 f915 	bl	80175b8 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800f38e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f390:	7d1b      	ldrb	r3, [r3, #20]
 800f392:	2b0a      	cmp	r3, #10
 800f394:	d106      	bne.n	800f3a4 <tcp_slowtmr+0x70>
 800f396:	4b82      	ldr	r3, [pc, #520]	; (800f5a0 <tcp_slowtmr+0x26c>)
 800f398:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800f39c:	4984      	ldr	r1, [pc, #528]	; (800f5b0 <tcp_slowtmr+0x27c>)
 800f39e:	4882      	ldr	r0, [pc, #520]	; (800f5a8 <tcp_slowtmr+0x274>)
 800f3a0:	f008 f90a 	bl	80175b8 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800f3a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3a6:	7f9a      	ldrb	r2, [r3, #30]
 800f3a8:	4b7b      	ldr	r3, [pc, #492]	; (800f598 <tcp_slowtmr+0x264>)
 800f3aa:	781b      	ldrb	r3, [r3, #0]
 800f3ac:	429a      	cmp	r2, r3
 800f3ae:	d105      	bne.n	800f3bc <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800f3b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3b2:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800f3b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3b6:	68db      	ldr	r3, [r3, #12]
 800f3b8:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800f3ba:	e270      	b.n	800f89e <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 800f3bc:	4b76      	ldr	r3, [pc, #472]	; (800f598 <tcp_slowtmr+0x264>)
 800f3be:	781a      	ldrb	r2, [r3, #0]
 800f3c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3c2:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800f3c4:	2300      	movs	r3, #0
 800f3c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800f3ca:	2300      	movs	r3, #0
 800f3cc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800f3d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3d2:	7d1b      	ldrb	r3, [r3, #20]
 800f3d4:	2b02      	cmp	r3, #2
 800f3d6:	d10a      	bne.n	800f3ee <tcp_slowtmr+0xba>
 800f3d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3da:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f3de:	2b05      	cmp	r3, #5
 800f3e0:	d905      	bls.n	800f3ee <tcp_slowtmr+0xba>
      ++pcb_remove;
 800f3e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f3e6:	3301      	adds	r3, #1
 800f3e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f3ec:	e11e      	b.n	800f62c <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800f3ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3f0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f3f4:	2b0b      	cmp	r3, #11
 800f3f6:	d905      	bls.n	800f404 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800f3f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f3fc:	3301      	adds	r3, #1
 800f3fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f402:	e113      	b.n	800f62c <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800f404:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f406:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800f40a:	2b00      	cmp	r3, #0
 800f40c:	d075      	beq.n	800f4fa <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800f40e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f410:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f412:	2b00      	cmp	r3, #0
 800f414:	d006      	beq.n	800f424 <tcp_slowtmr+0xf0>
 800f416:	4b62      	ldr	r3, [pc, #392]	; (800f5a0 <tcp_slowtmr+0x26c>)
 800f418:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800f41c:	4965      	ldr	r1, [pc, #404]	; (800f5b4 <tcp_slowtmr+0x280>)
 800f41e:	4862      	ldr	r0, [pc, #392]	; (800f5a8 <tcp_slowtmr+0x274>)
 800f420:	f008 f8ca 	bl	80175b8 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800f424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f426:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f428:	2b00      	cmp	r3, #0
 800f42a:	d106      	bne.n	800f43a <tcp_slowtmr+0x106>
 800f42c:	4b5c      	ldr	r3, [pc, #368]	; (800f5a0 <tcp_slowtmr+0x26c>)
 800f42e:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800f432:	4961      	ldr	r1, [pc, #388]	; (800f5b8 <tcp_slowtmr+0x284>)
 800f434:	485c      	ldr	r0, [pc, #368]	; (800f5a8 <tcp_slowtmr+0x274>)
 800f436:	f008 f8bf 	bl	80175b8 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800f43a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f43c:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800f440:	2b0b      	cmp	r3, #11
 800f442:	d905      	bls.n	800f450 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800f444:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f448:	3301      	adds	r3, #1
 800f44a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f44e:	e0ed      	b.n	800f62c <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800f450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f452:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800f456:	3b01      	subs	r3, #1
 800f458:	4a58      	ldr	r2, [pc, #352]	; (800f5bc <tcp_slowtmr+0x288>)
 800f45a:	5cd3      	ldrb	r3, [r2, r3]
 800f45c:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800f45e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f460:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800f464:	7c7a      	ldrb	r2, [r7, #17]
 800f466:	429a      	cmp	r2, r3
 800f468:	d907      	bls.n	800f47a <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800f46a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f46c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800f470:	3301      	adds	r3, #1
 800f472:	b2da      	uxtb	r2, r3
 800f474:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f476:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800f47a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f47c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800f480:	7c7a      	ldrb	r2, [r7, #17]
 800f482:	429a      	cmp	r2, r3
 800f484:	f200 80d2 	bhi.w	800f62c <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800f488:	2301      	movs	r3, #1
 800f48a:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800f48c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f48e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f492:	2b00      	cmp	r3, #0
 800f494:	d108      	bne.n	800f4a8 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800f496:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f498:	f005 f95a 	bl	8014750 <tcp_zero_window_probe>
 800f49c:	4603      	mov	r3, r0
 800f49e:	2b00      	cmp	r3, #0
 800f4a0:	d014      	beq.n	800f4cc <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800f4a2:	2300      	movs	r3, #0
 800f4a4:	623b      	str	r3, [r7, #32]
 800f4a6:	e011      	b.n	800f4cc <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800f4a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4aa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f4ae:	4619      	mov	r1, r3
 800f4b0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f4b2:	f004 f80d 	bl	80134d0 <tcp_split_unsent_seg>
 800f4b6:	4603      	mov	r3, r0
 800f4b8:	2b00      	cmp	r3, #0
 800f4ba:	d107      	bne.n	800f4cc <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800f4bc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f4be:	f004 fa8d 	bl	80139dc <tcp_output>
 800f4c2:	4603      	mov	r3, r0
 800f4c4:	2b00      	cmp	r3, #0
 800f4c6:	d101      	bne.n	800f4cc <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800f4c8:	2300      	movs	r3, #0
 800f4ca:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800f4cc:	6a3b      	ldr	r3, [r7, #32]
 800f4ce:	2b00      	cmp	r3, #0
 800f4d0:	f000 80ac 	beq.w	800f62c <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800f4d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4d6:	2200      	movs	r2, #0
 800f4d8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800f4dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4de:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800f4e2:	2b06      	cmp	r3, #6
 800f4e4:	f200 80a2 	bhi.w	800f62c <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800f4e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4ea:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800f4ee:	3301      	adds	r3, #1
 800f4f0:	b2da      	uxtb	r2, r3
 800f4f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4f4:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800f4f8:	e098      	b.n	800f62c <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800f4fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4fc:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800f500:	2b00      	cmp	r3, #0
 800f502:	db0f      	blt.n	800f524 <tcp_slowtmr+0x1f0>
 800f504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f506:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800f50a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800f50e:	4293      	cmp	r3, r2
 800f510:	d008      	beq.n	800f524 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800f512:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f514:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800f518:	b29b      	uxth	r3, r3
 800f51a:	3301      	adds	r3, #1
 800f51c:	b29b      	uxth	r3, r3
 800f51e:	b21a      	sxth	r2, r3
 800f520:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f522:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800f524:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f526:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800f52a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f52c:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800f530:	429a      	cmp	r2, r3
 800f532:	db7b      	blt.n	800f62c <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800f534:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f536:	f004 fd49 	bl	8013fcc <tcp_rexmit_rto_prepare>
 800f53a:	4603      	mov	r3, r0
 800f53c:	2b00      	cmp	r3, #0
 800f53e:	d007      	beq.n	800f550 <tcp_slowtmr+0x21c>
 800f540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f542:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f544:	2b00      	cmp	r3, #0
 800f546:	d171      	bne.n	800f62c <tcp_slowtmr+0x2f8>
 800f548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f54a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f54c:	2b00      	cmp	r3, #0
 800f54e:	d06d      	beq.n	800f62c <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800f550:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f552:	7d1b      	ldrb	r3, [r3, #20]
 800f554:	2b02      	cmp	r3, #2
 800f556:	d03a      	beq.n	800f5ce <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800f558:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f55a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f55e:	2b0c      	cmp	r3, #12
 800f560:	bf28      	it	cs
 800f562:	230c      	movcs	r3, #12
 800f564:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800f566:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f568:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800f56c:	10db      	asrs	r3, r3, #3
 800f56e:	b21b      	sxth	r3, r3
 800f570:	461a      	mov	r2, r3
 800f572:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f574:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800f578:	4413      	add	r3, r2
 800f57a:	7efa      	ldrb	r2, [r7, #27]
 800f57c:	4910      	ldr	r1, [pc, #64]	; (800f5c0 <tcp_slowtmr+0x28c>)
 800f57e:	5c8a      	ldrb	r2, [r1, r2]
 800f580:	4093      	lsls	r3, r2
 800f582:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800f584:	697b      	ldr	r3, [r7, #20]
 800f586:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800f58a:	4293      	cmp	r3, r2
 800f58c:	dc1a      	bgt.n	800f5c4 <tcp_slowtmr+0x290>
 800f58e:	697b      	ldr	r3, [r7, #20]
 800f590:	b21a      	sxth	r2, r3
 800f592:	e019      	b.n	800f5c8 <tcp_slowtmr+0x294>
 800f594:	2000d28c 	.word	0x2000d28c
 800f598:	20004646 	.word	0x20004646
 800f59c:	2000d288 	.word	0x2000d288
 800f5a0:	08019d2c 	.word	0x08019d2c
 800f5a4:	0801a070 	.word	0x0801a070
 800f5a8:	08019d70 	.word	0x08019d70
 800f5ac:	0801a09c 	.word	0x0801a09c
 800f5b0:	0801a0c8 	.word	0x0801a0c8
 800f5b4:	0801a0f8 	.word	0x0801a0f8
 800f5b8:	0801a12c 	.word	0x0801a12c
 800f5bc:	0801ba0c 	.word	0x0801ba0c
 800f5c0:	0801b9fc 	.word	0x0801b9fc
 800f5c4:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800f5c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f5ca:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800f5ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f5d0:	2200      	movs	r2, #0
 800f5d2:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800f5d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f5d6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800f5da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f5dc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f5e0:	4293      	cmp	r3, r2
 800f5e2:	bf28      	it	cs
 800f5e4:	4613      	movcs	r3, r2
 800f5e6:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800f5e8:	8a7b      	ldrh	r3, [r7, #18]
 800f5ea:	085b      	lsrs	r3, r3, #1
 800f5ec:	b29a      	uxth	r2, r3
 800f5ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f5f0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800f5f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f5f6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800f5fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f5fc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f5fe:	005b      	lsls	r3, r3, #1
 800f600:	b29b      	uxth	r3, r3
 800f602:	429a      	cmp	r2, r3
 800f604:	d206      	bcs.n	800f614 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800f606:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f608:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f60a:	005b      	lsls	r3, r3, #1
 800f60c:	b29a      	uxth	r2, r3
 800f60e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f610:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800f614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f616:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800f618:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f61a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800f61e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f620:	2200      	movs	r2, #0
 800f622:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800f626:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f628:	f004 fd40 	bl	80140ac <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800f62c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f62e:	7d1b      	ldrb	r3, [r3, #20]
 800f630:	2b06      	cmp	r3, #6
 800f632:	d111      	bne.n	800f658 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800f634:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f636:	8b5b      	ldrh	r3, [r3, #26]
 800f638:	f003 0310 	and.w	r3, r3, #16
 800f63c:	2b00      	cmp	r3, #0
 800f63e:	d00b      	beq.n	800f658 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f640:	4b9c      	ldr	r3, [pc, #624]	; (800f8b4 <tcp_slowtmr+0x580>)
 800f642:	681a      	ldr	r2, [r3, #0]
 800f644:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f646:	6a1b      	ldr	r3, [r3, #32]
 800f648:	1ad3      	subs	r3, r2, r3
 800f64a:	2b28      	cmp	r3, #40	; 0x28
 800f64c:	d904      	bls.n	800f658 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800f64e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f652:	3301      	adds	r3, #1
 800f654:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800f658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f65a:	7a5b      	ldrb	r3, [r3, #9]
 800f65c:	f003 0308 	and.w	r3, r3, #8
 800f660:	2b00      	cmp	r3, #0
 800f662:	d04a      	beq.n	800f6fa <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 800f664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f666:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800f668:	2b04      	cmp	r3, #4
 800f66a:	d003      	beq.n	800f674 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800f66c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f66e:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800f670:	2b07      	cmp	r3, #7
 800f672:	d142      	bne.n	800f6fa <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f674:	4b8f      	ldr	r3, [pc, #572]	; (800f8b4 <tcp_slowtmr+0x580>)
 800f676:	681a      	ldr	r2, [r3, #0]
 800f678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f67a:	6a1b      	ldr	r3, [r3, #32]
 800f67c:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800f67e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f680:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800f684:	4b8c      	ldr	r3, [pc, #560]	; (800f8b8 <tcp_slowtmr+0x584>)
 800f686:	440b      	add	r3, r1
 800f688:	498c      	ldr	r1, [pc, #560]	; (800f8bc <tcp_slowtmr+0x588>)
 800f68a:	fba1 1303 	umull	r1, r3, r1, r3
 800f68e:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f690:	429a      	cmp	r2, r3
 800f692:	d90a      	bls.n	800f6aa <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800f694:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f698:	3301      	adds	r3, #1
 800f69a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800f69e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f6a2:	3301      	adds	r3, #1
 800f6a4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800f6a8:	e027      	b.n	800f6fa <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f6aa:	4b82      	ldr	r3, [pc, #520]	; (800f8b4 <tcp_slowtmr+0x580>)
 800f6ac:	681a      	ldr	r2, [r3, #0]
 800f6ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6b0:	6a1b      	ldr	r3, [r3, #32]
 800f6b2:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800f6b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6b6:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800f6ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6bc:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800f6c0:	4618      	mov	r0, r3
 800f6c2:	4b7f      	ldr	r3, [pc, #508]	; (800f8c0 <tcp_slowtmr+0x58c>)
 800f6c4:	fb03 f300 	mul.w	r3, r3, r0
 800f6c8:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800f6ca:	497c      	ldr	r1, [pc, #496]	; (800f8bc <tcp_slowtmr+0x588>)
 800f6cc:	fba1 1303 	umull	r1, r3, r1, r3
 800f6d0:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f6d2:	429a      	cmp	r2, r3
 800f6d4:	d911      	bls.n	800f6fa <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 800f6d6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f6d8:	f004 fffa 	bl	80146d0 <tcp_keepalive>
 800f6dc:	4603      	mov	r3, r0
 800f6de:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800f6e2:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800f6e6:	2b00      	cmp	r3, #0
 800f6e8:	d107      	bne.n	800f6fa <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 800f6ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6ec:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800f6f0:	3301      	adds	r3, #1
 800f6f2:	b2da      	uxtb	r2, r3
 800f6f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6f6:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800f6fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f6fe:	2b00      	cmp	r3, #0
 800f700:	d011      	beq.n	800f726 <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800f702:	4b6c      	ldr	r3, [pc, #432]	; (800f8b4 <tcp_slowtmr+0x580>)
 800f704:	681a      	ldr	r2, [r3, #0]
 800f706:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f708:	6a1b      	ldr	r3, [r3, #32]
 800f70a:	1ad2      	subs	r2, r2, r3
 800f70c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f70e:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800f712:	4619      	mov	r1, r3
 800f714:	460b      	mov	r3, r1
 800f716:	005b      	lsls	r3, r3, #1
 800f718:	440b      	add	r3, r1
 800f71a:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800f71c:	429a      	cmp	r2, r3
 800f71e:	d302      	bcc.n	800f726 <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800f720:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f722:	f000 fea7 	bl	8010474 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800f726:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f728:	7d1b      	ldrb	r3, [r3, #20]
 800f72a:	2b03      	cmp	r3, #3
 800f72c:	d10b      	bne.n	800f746 <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f72e:	4b61      	ldr	r3, [pc, #388]	; (800f8b4 <tcp_slowtmr+0x580>)
 800f730:	681a      	ldr	r2, [r3, #0]
 800f732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f734:	6a1b      	ldr	r3, [r3, #32]
 800f736:	1ad3      	subs	r3, r2, r3
 800f738:	2b28      	cmp	r3, #40	; 0x28
 800f73a:	d904      	bls.n	800f746 <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800f73c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f740:	3301      	adds	r3, #1
 800f742:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800f746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f748:	7d1b      	ldrb	r3, [r3, #20]
 800f74a:	2b09      	cmp	r3, #9
 800f74c:	d10b      	bne.n	800f766 <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800f74e:	4b59      	ldr	r3, [pc, #356]	; (800f8b4 <tcp_slowtmr+0x580>)
 800f750:	681a      	ldr	r2, [r3, #0]
 800f752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f754:	6a1b      	ldr	r3, [r3, #32]
 800f756:	1ad3      	subs	r3, r2, r3
 800f758:	2bf0      	cmp	r3, #240	; 0xf0
 800f75a:	d904      	bls.n	800f766 <tcp_slowtmr+0x432>
        ++pcb_remove;
 800f75c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f760:	3301      	adds	r3, #1
 800f762:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800f766:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f76a:	2b00      	cmp	r3, #0
 800f76c:	d060      	beq.n	800f830 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800f76e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f770:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f774:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800f776:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f778:	f000 fcc8 	bl	801010c <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800f77c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f77e:	2b00      	cmp	r3, #0
 800f780:	d010      	beq.n	800f7a4 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800f782:	4b50      	ldr	r3, [pc, #320]	; (800f8c4 <tcp_slowtmr+0x590>)
 800f784:	681b      	ldr	r3, [r3, #0]
 800f786:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f788:	429a      	cmp	r2, r3
 800f78a:	d106      	bne.n	800f79a <tcp_slowtmr+0x466>
 800f78c:	4b4e      	ldr	r3, [pc, #312]	; (800f8c8 <tcp_slowtmr+0x594>)
 800f78e:	f240 526d 	movw	r2, #1389	; 0x56d
 800f792:	494e      	ldr	r1, [pc, #312]	; (800f8cc <tcp_slowtmr+0x598>)
 800f794:	484e      	ldr	r0, [pc, #312]	; (800f8d0 <tcp_slowtmr+0x59c>)
 800f796:	f007 ff0f 	bl	80175b8 <iprintf>
        prev->next = pcb->next;
 800f79a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f79c:	68da      	ldr	r2, [r3, #12]
 800f79e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7a0:	60da      	str	r2, [r3, #12]
 800f7a2:	e00f      	b.n	800f7c4 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800f7a4:	4b47      	ldr	r3, [pc, #284]	; (800f8c4 <tcp_slowtmr+0x590>)
 800f7a6:	681b      	ldr	r3, [r3, #0]
 800f7a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f7aa:	429a      	cmp	r2, r3
 800f7ac:	d006      	beq.n	800f7bc <tcp_slowtmr+0x488>
 800f7ae:	4b46      	ldr	r3, [pc, #280]	; (800f8c8 <tcp_slowtmr+0x594>)
 800f7b0:	f240 5271 	movw	r2, #1393	; 0x571
 800f7b4:	4947      	ldr	r1, [pc, #284]	; (800f8d4 <tcp_slowtmr+0x5a0>)
 800f7b6:	4846      	ldr	r0, [pc, #280]	; (800f8d0 <tcp_slowtmr+0x59c>)
 800f7b8:	f007 fefe 	bl	80175b8 <iprintf>
        tcp_active_pcbs = pcb->next;
 800f7bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7be:	68db      	ldr	r3, [r3, #12]
 800f7c0:	4a40      	ldr	r2, [pc, #256]	; (800f8c4 <tcp_slowtmr+0x590>)
 800f7c2:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800f7c4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f7c8:	2b00      	cmp	r3, #0
 800f7ca:	d013      	beq.n	800f7f4 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800f7cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7ce:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800f7d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7d2:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800f7d4:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800f7d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7d8:	3304      	adds	r3, #4
 800f7da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f7dc:	8ad2      	ldrh	r2, [r2, #22]
 800f7de:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f7e0:	8b09      	ldrh	r1, [r1, #24]
 800f7e2:	9102      	str	r1, [sp, #8]
 800f7e4:	9201      	str	r2, [sp, #4]
 800f7e6:	9300      	str	r3, [sp, #0]
 800f7e8:	462b      	mov	r3, r5
 800f7ea:	4622      	mov	r2, r4
 800f7ec:	4601      	mov	r1, r0
 800f7ee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f7f0:	f004 feba 	bl	8014568 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800f7f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7f6:	691b      	ldr	r3, [r3, #16]
 800f7f8:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800f7fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7fc:	7d1b      	ldrb	r3, [r3, #20]
 800f7fe:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800f800:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f802:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800f804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f806:	68db      	ldr	r3, [r3, #12]
 800f808:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800f80a:	6838      	ldr	r0, [r7, #0]
 800f80c:	f7fe fffa 	bl	800e804 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800f810:	4b31      	ldr	r3, [pc, #196]	; (800f8d8 <tcp_slowtmr+0x5a4>)
 800f812:	2200      	movs	r2, #0
 800f814:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800f816:	68fb      	ldr	r3, [r7, #12]
 800f818:	2b00      	cmp	r3, #0
 800f81a:	d004      	beq.n	800f826 <tcp_slowtmr+0x4f2>
 800f81c:	68fb      	ldr	r3, [r7, #12]
 800f81e:	f06f 010c 	mvn.w	r1, #12
 800f822:	68b8      	ldr	r0, [r7, #8]
 800f824:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800f826:	4b2c      	ldr	r3, [pc, #176]	; (800f8d8 <tcp_slowtmr+0x5a4>)
 800f828:	781b      	ldrb	r3, [r3, #0]
 800f82a:	2b00      	cmp	r3, #0
 800f82c:	d037      	beq.n	800f89e <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 800f82e:	e592      	b.n	800f356 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800f830:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f832:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800f834:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f836:	68db      	ldr	r3, [r3, #12]
 800f838:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800f83a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f83c:	7f1b      	ldrb	r3, [r3, #28]
 800f83e:	3301      	adds	r3, #1
 800f840:	b2da      	uxtb	r2, r3
 800f842:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f844:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800f846:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f848:	7f1a      	ldrb	r2, [r3, #28]
 800f84a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f84c:	7f5b      	ldrb	r3, [r3, #29]
 800f84e:	429a      	cmp	r2, r3
 800f850:	d325      	bcc.n	800f89e <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 800f852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f854:	2200      	movs	r2, #0
 800f856:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800f858:	4b1f      	ldr	r3, [pc, #124]	; (800f8d8 <tcp_slowtmr+0x5a4>)
 800f85a:	2200      	movs	r2, #0
 800f85c:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800f85e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f860:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f864:	2b00      	cmp	r3, #0
 800f866:	d00b      	beq.n	800f880 <tcp_slowtmr+0x54c>
 800f868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f86a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f86e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f870:	6912      	ldr	r2, [r2, #16]
 800f872:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f874:	4610      	mov	r0, r2
 800f876:	4798      	blx	r3
 800f878:	4603      	mov	r3, r0
 800f87a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800f87e:	e002      	b.n	800f886 <tcp_slowtmr+0x552>
 800f880:	2300      	movs	r3, #0
 800f882:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800f886:	4b14      	ldr	r3, [pc, #80]	; (800f8d8 <tcp_slowtmr+0x5a4>)
 800f888:	781b      	ldrb	r3, [r3, #0]
 800f88a:	2b00      	cmp	r3, #0
 800f88c:	d000      	beq.n	800f890 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 800f88e:	e562      	b.n	800f356 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800f890:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800f894:	2b00      	cmp	r3, #0
 800f896:	d102      	bne.n	800f89e <tcp_slowtmr+0x56a>
          tcp_output(prev);
 800f898:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f89a:	f004 f89f 	bl	80139dc <tcp_output>
  while (pcb != NULL) {
 800f89e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8a0:	2b00      	cmp	r3, #0
 800f8a2:	f47f ad5e 	bne.w	800f362 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800f8a6:	2300      	movs	r3, #0
 800f8a8:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800f8aa:	4b0c      	ldr	r3, [pc, #48]	; (800f8dc <tcp_slowtmr+0x5a8>)
 800f8ac:	681b      	ldr	r3, [r3, #0]
 800f8ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800f8b0:	e069      	b.n	800f986 <tcp_slowtmr+0x652>
 800f8b2:	bf00      	nop
 800f8b4:	2000d28c 	.word	0x2000d28c
 800f8b8:	000a4cb8 	.word	0x000a4cb8
 800f8bc:	10624dd3 	.word	0x10624dd3
 800f8c0:	000124f8 	.word	0x000124f8
 800f8c4:	2000d288 	.word	0x2000d288
 800f8c8:	08019d2c 	.word	0x08019d2c
 800f8cc:	0801a164 	.word	0x0801a164
 800f8d0:	08019d70 	.word	0x08019d70
 800f8d4:	0801a190 	.word	0x0801a190
 800f8d8:	2000d284 	.word	0x2000d284
 800f8dc:	2000d298 	.word	0x2000d298
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800f8e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8e2:	7d1b      	ldrb	r3, [r3, #20]
 800f8e4:	2b0a      	cmp	r3, #10
 800f8e6:	d006      	beq.n	800f8f6 <tcp_slowtmr+0x5c2>
 800f8e8:	4b2a      	ldr	r3, [pc, #168]	; (800f994 <tcp_slowtmr+0x660>)
 800f8ea:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800f8ee:	492a      	ldr	r1, [pc, #168]	; (800f998 <tcp_slowtmr+0x664>)
 800f8f0:	482a      	ldr	r0, [pc, #168]	; (800f99c <tcp_slowtmr+0x668>)
 800f8f2:	f007 fe61 	bl	80175b8 <iprintf>
    pcb_remove = 0;
 800f8f6:	2300      	movs	r3, #0
 800f8f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800f8fc:	4b28      	ldr	r3, [pc, #160]	; (800f9a0 <tcp_slowtmr+0x66c>)
 800f8fe:	681a      	ldr	r2, [r3, #0]
 800f900:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f902:	6a1b      	ldr	r3, [r3, #32]
 800f904:	1ad3      	subs	r3, r2, r3
 800f906:	2bf0      	cmp	r3, #240	; 0xf0
 800f908:	d904      	bls.n	800f914 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800f90a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f90e:	3301      	adds	r3, #1
 800f910:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800f914:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f918:	2b00      	cmp	r3, #0
 800f91a:	d02f      	beq.n	800f97c <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800f91c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f91e:	f000 fbf5 	bl	801010c <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800f922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f924:	2b00      	cmp	r3, #0
 800f926:	d010      	beq.n	800f94a <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800f928:	4b1e      	ldr	r3, [pc, #120]	; (800f9a4 <tcp_slowtmr+0x670>)
 800f92a:	681b      	ldr	r3, [r3, #0]
 800f92c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f92e:	429a      	cmp	r2, r3
 800f930:	d106      	bne.n	800f940 <tcp_slowtmr+0x60c>
 800f932:	4b18      	ldr	r3, [pc, #96]	; (800f994 <tcp_slowtmr+0x660>)
 800f934:	f240 52af 	movw	r2, #1455	; 0x5af
 800f938:	491b      	ldr	r1, [pc, #108]	; (800f9a8 <tcp_slowtmr+0x674>)
 800f93a:	4818      	ldr	r0, [pc, #96]	; (800f99c <tcp_slowtmr+0x668>)
 800f93c:	f007 fe3c 	bl	80175b8 <iprintf>
        prev->next = pcb->next;
 800f940:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f942:	68da      	ldr	r2, [r3, #12]
 800f944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f946:	60da      	str	r2, [r3, #12]
 800f948:	e00f      	b.n	800f96a <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800f94a:	4b16      	ldr	r3, [pc, #88]	; (800f9a4 <tcp_slowtmr+0x670>)
 800f94c:	681b      	ldr	r3, [r3, #0]
 800f94e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f950:	429a      	cmp	r2, r3
 800f952:	d006      	beq.n	800f962 <tcp_slowtmr+0x62e>
 800f954:	4b0f      	ldr	r3, [pc, #60]	; (800f994 <tcp_slowtmr+0x660>)
 800f956:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800f95a:	4914      	ldr	r1, [pc, #80]	; (800f9ac <tcp_slowtmr+0x678>)
 800f95c:	480f      	ldr	r0, [pc, #60]	; (800f99c <tcp_slowtmr+0x668>)
 800f95e:	f007 fe2b 	bl	80175b8 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800f962:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f964:	68db      	ldr	r3, [r3, #12]
 800f966:	4a0f      	ldr	r2, [pc, #60]	; (800f9a4 <tcp_slowtmr+0x670>)
 800f968:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800f96a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f96c:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800f96e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f970:	68db      	ldr	r3, [r3, #12]
 800f972:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800f974:	69f8      	ldr	r0, [r7, #28]
 800f976:	f7fe ff45 	bl	800e804 <tcp_free>
 800f97a:	e004      	b.n	800f986 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800f97c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f97e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800f980:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f982:	68db      	ldr	r3, [r3, #12]
 800f984:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800f986:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f988:	2b00      	cmp	r3, #0
 800f98a:	d1a9      	bne.n	800f8e0 <tcp_slowtmr+0x5ac>
    }
  }
}
 800f98c:	bf00      	nop
 800f98e:	3730      	adds	r7, #48	; 0x30
 800f990:	46bd      	mov	sp, r7
 800f992:	bdb0      	pop	{r4, r5, r7, pc}
 800f994:	08019d2c 	.word	0x08019d2c
 800f998:	0801a1bc 	.word	0x0801a1bc
 800f99c:	08019d70 	.word	0x08019d70
 800f9a0:	2000d28c 	.word	0x2000d28c
 800f9a4:	2000d298 	.word	0x2000d298
 800f9a8:	0801a1ec 	.word	0x0801a1ec
 800f9ac:	0801a214 	.word	0x0801a214

0800f9b0 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800f9b0:	b580      	push	{r7, lr}
 800f9b2:	b082      	sub	sp, #8
 800f9b4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800f9b6:	4b2d      	ldr	r3, [pc, #180]	; (800fa6c <tcp_fasttmr+0xbc>)
 800f9b8:	781b      	ldrb	r3, [r3, #0]
 800f9ba:	3301      	adds	r3, #1
 800f9bc:	b2da      	uxtb	r2, r3
 800f9be:	4b2b      	ldr	r3, [pc, #172]	; (800fa6c <tcp_fasttmr+0xbc>)
 800f9c0:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800f9c2:	4b2b      	ldr	r3, [pc, #172]	; (800fa70 <tcp_fasttmr+0xc0>)
 800f9c4:	681b      	ldr	r3, [r3, #0]
 800f9c6:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800f9c8:	e048      	b.n	800fa5c <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800f9ca:	687b      	ldr	r3, [r7, #4]
 800f9cc:	7f9a      	ldrb	r2, [r3, #30]
 800f9ce:	4b27      	ldr	r3, [pc, #156]	; (800fa6c <tcp_fasttmr+0xbc>)
 800f9d0:	781b      	ldrb	r3, [r3, #0]
 800f9d2:	429a      	cmp	r2, r3
 800f9d4:	d03f      	beq.n	800fa56 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800f9d6:	4b25      	ldr	r3, [pc, #148]	; (800fa6c <tcp_fasttmr+0xbc>)
 800f9d8:	781a      	ldrb	r2, [r3, #0]
 800f9da:	687b      	ldr	r3, [r7, #4]
 800f9dc:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800f9de:	687b      	ldr	r3, [r7, #4]
 800f9e0:	8b5b      	ldrh	r3, [r3, #26]
 800f9e2:	f003 0301 	and.w	r3, r3, #1
 800f9e6:	2b00      	cmp	r3, #0
 800f9e8:	d010      	beq.n	800fa0c <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800f9ea:	687b      	ldr	r3, [r7, #4]
 800f9ec:	8b5b      	ldrh	r3, [r3, #26]
 800f9ee:	f043 0302 	orr.w	r3, r3, #2
 800f9f2:	b29a      	uxth	r2, r3
 800f9f4:	687b      	ldr	r3, [r7, #4]
 800f9f6:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800f9f8:	6878      	ldr	r0, [r7, #4]
 800f9fa:	f003 ffef 	bl	80139dc <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800f9fe:	687b      	ldr	r3, [r7, #4]
 800fa00:	8b5b      	ldrh	r3, [r3, #26]
 800fa02:	f023 0303 	bic.w	r3, r3, #3
 800fa06:	b29a      	uxth	r2, r3
 800fa08:	687b      	ldr	r3, [r7, #4]
 800fa0a:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800fa0c:	687b      	ldr	r3, [r7, #4]
 800fa0e:	8b5b      	ldrh	r3, [r3, #26]
 800fa10:	f003 0308 	and.w	r3, r3, #8
 800fa14:	2b00      	cmp	r3, #0
 800fa16:	d009      	beq.n	800fa2c <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800fa18:	687b      	ldr	r3, [r7, #4]
 800fa1a:	8b5b      	ldrh	r3, [r3, #26]
 800fa1c:	f023 0308 	bic.w	r3, r3, #8
 800fa20:	b29a      	uxth	r2, r3
 800fa22:	687b      	ldr	r3, [r7, #4]
 800fa24:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800fa26:	6878      	ldr	r0, [r7, #4]
 800fa28:	f7ff f87c 	bl	800eb24 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800fa2c:	687b      	ldr	r3, [r7, #4]
 800fa2e:	68db      	ldr	r3, [r3, #12]
 800fa30:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800fa32:	687b      	ldr	r3, [r7, #4]
 800fa34:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fa36:	2b00      	cmp	r3, #0
 800fa38:	d00a      	beq.n	800fa50 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800fa3a:	4b0e      	ldr	r3, [pc, #56]	; (800fa74 <tcp_fasttmr+0xc4>)
 800fa3c:	2200      	movs	r2, #0
 800fa3e:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800fa40:	6878      	ldr	r0, [r7, #4]
 800fa42:	f000 f819 	bl	800fa78 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800fa46:	4b0b      	ldr	r3, [pc, #44]	; (800fa74 <tcp_fasttmr+0xc4>)
 800fa48:	781b      	ldrb	r3, [r3, #0]
 800fa4a:	2b00      	cmp	r3, #0
 800fa4c:	d000      	beq.n	800fa50 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800fa4e:	e7b8      	b.n	800f9c2 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800fa50:	683b      	ldr	r3, [r7, #0]
 800fa52:	607b      	str	r3, [r7, #4]
 800fa54:	e002      	b.n	800fa5c <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800fa56:	687b      	ldr	r3, [r7, #4]
 800fa58:	68db      	ldr	r3, [r3, #12]
 800fa5a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800fa5c:	687b      	ldr	r3, [r7, #4]
 800fa5e:	2b00      	cmp	r3, #0
 800fa60:	d1b3      	bne.n	800f9ca <tcp_fasttmr+0x1a>
    }
  }
}
 800fa62:	bf00      	nop
 800fa64:	3708      	adds	r7, #8
 800fa66:	46bd      	mov	sp, r7
 800fa68:	bd80      	pop	{r7, pc}
 800fa6a:	bf00      	nop
 800fa6c:	20004646 	.word	0x20004646
 800fa70:	2000d288 	.word	0x2000d288
 800fa74:	2000d284 	.word	0x2000d284

0800fa78 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800fa78:	b590      	push	{r4, r7, lr}
 800fa7a:	b085      	sub	sp, #20
 800fa7c:	af00      	add	r7, sp, #0
 800fa7e:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800fa80:	687b      	ldr	r3, [r7, #4]
 800fa82:	2b00      	cmp	r3, #0
 800fa84:	d109      	bne.n	800fa9a <tcp_process_refused_data+0x22>
 800fa86:	4b37      	ldr	r3, [pc, #220]	; (800fb64 <tcp_process_refused_data+0xec>)
 800fa88:	f240 6209 	movw	r2, #1545	; 0x609
 800fa8c:	4936      	ldr	r1, [pc, #216]	; (800fb68 <tcp_process_refused_data+0xf0>)
 800fa8e:	4837      	ldr	r0, [pc, #220]	; (800fb6c <tcp_process_refused_data+0xf4>)
 800fa90:	f007 fd92 	bl	80175b8 <iprintf>
 800fa94:	f06f 030f 	mvn.w	r3, #15
 800fa98:	e060      	b.n	800fb5c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800fa9a:	687b      	ldr	r3, [r7, #4]
 800fa9c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fa9e:	7b5b      	ldrb	r3, [r3, #13]
 800faa0:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800faa2:	687b      	ldr	r3, [r7, #4]
 800faa4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800faa6:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800faa8:	687b      	ldr	r3, [r7, #4]
 800faaa:	2200      	movs	r2, #0
 800faac:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800faae:	687b      	ldr	r3, [r7, #4]
 800fab0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fab4:	2b00      	cmp	r3, #0
 800fab6:	d00b      	beq.n	800fad0 <tcp_process_refused_data+0x58>
 800fab8:	687b      	ldr	r3, [r7, #4]
 800faba:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800fabe:	687b      	ldr	r3, [r7, #4]
 800fac0:	6918      	ldr	r0, [r3, #16]
 800fac2:	2300      	movs	r3, #0
 800fac4:	68ba      	ldr	r2, [r7, #8]
 800fac6:	6879      	ldr	r1, [r7, #4]
 800fac8:	47a0      	blx	r4
 800faca:	4603      	mov	r3, r0
 800facc:	73fb      	strb	r3, [r7, #15]
 800face:	e007      	b.n	800fae0 <tcp_process_refused_data+0x68>
 800fad0:	2300      	movs	r3, #0
 800fad2:	68ba      	ldr	r2, [r7, #8]
 800fad4:	6879      	ldr	r1, [r7, #4]
 800fad6:	2000      	movs	r0, #0
 800fad8:	f000 f8a2 	bl	800fc20 <tcp_recv_null>
 800fadc:	4603      	mov	r3, r0
 800fade:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800fae0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fae4:	2b00      	cmp	r3, #0
 800fae6:	d12a      	bne.n	800fb3e <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800fae8:	7bbb      	ldrb	r3, [r7, #14]
 800faea:	f003 0320 	and.w	r3, r3, #32
 800faee:	2b00      	cmp	r3, #0
 800faf0:	d033      	beq.n	800fb5a <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800faf2:	687b      	ldr	r3, [r7, #4]
 800faf4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800faf6:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800fafa:	d005      	beq.n	800fb08 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800fafc:	687b      	ldr	r3, [r7, #4]
 800fafe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fb00:	3301      	adds	r3, #1
 800fb02:	b29a      	uxth	r2, r3
 800fb04:	687b      	ldr	r3, [r7, #4]
 800fb06:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800fb08:	687b      	ldr	r3, [r7, #4]
 800fb0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fb0e:	2b00      	cmp	r3, #0
 800fb10:	d00b      	beq.n	800fb2a <tcp_process_refused_data+0xb2>
 800fb12:	687b      	ldr	r3, [r7, #4]
 800fb14:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800fb18:	687b      	ldr	r3, [r7, #4]
 800fb1a:	6918      	ldr	r0, [r3, #16]
 800fb1c:	2300      	movs	r3, #0
 800fb1e:	2200      	movs	r2, #0
 800fb20:	6879      	ldr	r1, [r7, #4]
 800fb22:	47a0      	blx	r4
 800fb24:	4603      	mov	r3, r0
 800fb26:	73fb      	strb	r3, [r7, #15]
 800fb28:	e001      	b.n	800fb2e <tcp_process_refused_data+0xb6>
 800fb2a:	2300      	movs	r3, #0
 800fb2c:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800fb2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fb32:	f113 0f0d 	cmn.w	r3, #13
 800fb36:	d110      	bne.n	800fb5a <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800fb38:	f06f 030c 	mvn.w	r3, #12
 800fb3c:	e00e      	b.n	800fb5c <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800fb3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fb42:	f113 0f0d 	cmn.w	r3, #13
 800fb46:	d102      	bne.n	800fb4e <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800fb48:	f06f 030c 	mvn.w	r3, #12
 800fb4c:	e006      	b.n	800fb5c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800fb4e:	687b      	ldr	r3, [r7, #4]
 800fb50:	68ba      	ldr	r2, [r7, #8]
 800fb52:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800fb54:	f06f 0304 	mvn.w	r3, #4
 800fb58:	e000      	b.n	800fb5c <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800fb5a:	2300      	movs	r3, #0
}
 800fb5c:	4618      	mov	r0, r3
 800fb5e:	3714      	adds	r7, #20
 800fb60:	46bd      	mov	sp, r7
 800fb62:	bd90      	pop	{r4, r7, pc}
 800fb64:	08019d2c 	.word	0x08019d2c
 800fb68:	0801a23c 	.word	0x0801a23c
 800fb6c:	08019d70 	.word	0x08019d70

0800fb70 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800fb70:	b580      	push	{r7, lr}
 800fb72:	b084      	sub	sp, #16
 800fb74:	af00      	add	r7, sp, #0
 800fb76:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800fb78:	e007      	b.n	800fb8a <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800fb7a:	687b      	ldr	r3, [r7, #4]
 800fb7c:	681b      	ldr	r3, [r3, #0]
 800fb7e:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800fb80:	6878      	ldr	r0, [r7, #4]
 800fb82:	f000 f809 	bl	800fb98 <tcp_seg_free>
    seg = next;
 800fb86:	68fb      	ldr	r3, [r7, #12]
 800fb88:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800fb8a:	687b      	ldr	r3, [r7, #4]
 800fb8c:	2b00      	cmp	r3, #0
 800fb8e:	d1f4      	bne.n	800fb7a <tcp_segs_free+0xa>
  }
}
 800fb90:	bf00      	nop
 800fb92:	3710      	adds	r7, #16
 800fb94:	46bd      	mov	sp, r7
 800fb96:	bd80      	pop	{r7, pc}

0800fb98 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800fb98:	b580      	push	{r7, lr}
 800fb9a:	b082      	sub	sp, #8
 800fb9c:	af00      	add	r7, sp, #0
 800fb9e:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800fba0:	687b      	ldr	r3, [r7, #4]
 800fba2:	2b00      	cmp	r3, #0
 800fba4:	d00c      	beq.n	800fbc0 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800fba6:	687b      	ldr	r3, [r7, #4]
 800fba8:	685b      	ldr	r3, [r3, #4]
 800fbaa:	2b00      	cmp	r3, #0
 800fbac:	d004      	beq.n	800fbb8 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800fbae:	687b      	ldr	r3, [r7, #4]
 800fbb0:	685b      	ldr	r3, [r3, #4]
 800fbb2:	4618      	mov	r0, r3
 800fbb4:	f7fe fb7a 	bl	800e2ac <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800fbb8:	6879      	ldr	r1, [r7, #4]
 800fbba:	2002      	movs	r0, #2
 800fbbc:	f7fd fca8 	bl	800d510 <memp_free>
  }
}
 800fbc0:	bf00      	nop
 800fbc2:	3708      	adds	r7, #8
 800fbc4:	46bd      	mov	sp, r7
 800fbc6:	bd80      	pop	{r7, pc}

0800fbc8 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800fbc8:	b580      	push	{r7, lr}
 800fbca:	b084      	sub	sp, #16
 800fbcc:	af00      	add	r7, sp, #0
 800fbce:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800fbd0:	687b      	ldr	r3, [r7, #4]
 800fbd2:	2b00      	cmp	r3, #0
 800fbd4:	d106      	bne.n	800fbe4 <tcp_seg_copy+0x1c>
 800fbd6:	4b0f      	ldr	r3, [pc, #60]	; (800fc14 <tcp_seg_copy+0x4c>)
 800fbd8:	f240 6282 	movw	r2, #1666	; 0x682
 800fbdc:	490e      	ldr	r1, [pc, #56]	; (800fc18 <tcp_seg_copy+0x50>)
 800fbde:	480f      	ldr	r0, [pc, #60]	; (800fc1c <tcp_seg_copy+0x54>)
 800fbe0:	f007 fcea 	bl	80175b8 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800fbe4:	2002      	movs	r0, #2
 800fbe6:	f7fd fc41 	bl	800d46c <memp_malloc>
 800fbea:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800fbec:	68fb      	ldr	r3, [r7, #12]
 800fbee:	2b00      	cmp	r3, #0
 800fbf0:	d101      	bne.n	800fbf6 <tcp_seg_copy+0x2e>
    return NULL;
 800fbf2:	2300      	movs	r3, #0
 800fbf4:	e00a      	b.n	800fc0c <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800fbf6:	2210      	movs	r2, #16
 800fbf8:	6879      	ldr	r1, [r7, #4]
 800fbfa:	68f8      	ldr	r0, [r7, #12]
 800fbfc:	f007 fcc9 	bl	8017592 <memcpy>
  pbuf_ref(cseg->p);
 800fc00:	68fb      	ldr	r3, [r7, #12]
 800fc02:	685b      	ldr	r3, [r3, #4]
 800fc04:	4618      	mov	r0, r3
 800fc06:	f7fe fbf7 	bl	800e3f8 <pbuf_ref>
  return cseg;
 800fc0a:	68fb      	ldr	r3, [r7, #12]
}
 800fc0c:	4618      	mov	r0, r3
 800fc0e:	3710      	adds	r7, #16
 800fc10:	46bd      	mov	sp, r7
 800fc12:	bd80      	pop	{r7, pc}
 800fc14:	08019d2c 	.word	0x08019d2c
 800fc18:	0801a280 	.word	0x0801a280
 800fc1c:	08019d70 	.word	0x08019d70

0800fc20 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800fc20:	b580      	push	{r7, lr}
 800fc22:	b084      	sub	sp, #16
 800fc24:	af00      	add	r7, sp, #0
 800fc26:	60f8      	str	r0, [r7, #12]
 800fc28:	60b9      	str	r1, [r7, #8]
 800fc2a:	607a      	str	r2, [r7, #4]
 800fc2c:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800fc2e:	68bb      	ldr	r3, [r7, #8]
 800fc30:	2b00      	cmp	r3, #0
 800fc32:	d109      	bne.n	800fc48 <tcp_recv_null+0x28>
 800fc34:	4b12      	ldr	r3, [pc, #72]	; (800fc80 <tcp_recv_null+0x60>)
 800fc36:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800fc3a:	4912      	ldr	r1, [pc, #72]	; (800fc84 <tcp_recv_null+0x64>)
 800fc3c:	4812      	ldr	r0, [pc, #72]	; (800fc88 <tcp_recv_null+0x68>)
 800fc3e:	f007 fcbb 	bl	80175b8 <iprintf>
 800fc42:	f06f 030f 	mvn.w	r3, #15
 800fc46:	e016      	b.n	800fc76 <tcp_recv_null+0x56>

  if (p != NULL) {
 800fc48:	687b      	ldr	r3, [r7, #4]
 800fc4a:	2b00      	cmp	r3, #0
 800fc4c:	d009      	beq.n	800fc62 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800fc4e:	687b      	ldr	r3, [r7, #4]
 800fc50:	891b      	ldrh	r3, [r3, #8]
 800fc52:	4619      	mov	r1, r3
 800fc54:	68b8      	ldr	r0, [r7, #8]
 800fc56:	f7ff fad7 	bl	800f208 <tcp_recved>
    pbuf_free(p);
 800fc5a:	6878      	ldr	r0, [r7, #4]
 800fc5c:	f7fe fb26 	bl	800e2ac <pbuf_free>
 800fc60:	e008      	b.n	800fc74 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800fc62:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800fc66:	2b00      	cmp	r3, #0
 800fc68:	d104      	bne.n	800fc74 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800fc6a:	68b8      	ldr	r0, [r7, #8]
 800fc6c:	f7fe ffc0 	bl	800ebf0 <tcp_close>
 800fc70:	4603      	mov	r3, r0
 800fc72:	e000      	b.n	800fc76 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800fc74:	2300      	movs	r3, #0
}
 800fc76:	4618      	mov	r0, r3
 800fc78:	3710      	adds	r7, #16
 800fc7a:	46bd      	mov	sp, r7
 800fc7c:	bd80      	pop	{r7, pc}
 800fc7e:	bf00      	nop
 800fc80:	08019d2c 	.word	0x08019d2c
 800fc84:	0801a29c 	.word	0x0801a29c
 800fc88:	08019d70 	.word	0x08019d70

0800fc8c <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800fc8c:	b580      	push	{r7, lr}
 800fc8e:	b086      	sub	sp, #24
 800fc90:	af00      	add	r7, sp, #0
 800fc92:	4603      	mov	r3, r0
 800fc94:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800fc96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800fc9a:	2b00      	cmp	r3, #0
 800fc9c:	db01      	blt.n	800fca2 <tcp_kill_prio+0x16>
 800fc9e:	79fb      	ldrb	r3, [r7, #7]
 800fca0:	e000      	b.n	800fca4 <tcp_kill_prio+0x18>
 800fca2:	237f      	movs	r3, #127	; 0x7f
 800fca4:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800fca6:	7afb      	ldrb	r3, [r7, #11]
 800fca8:	2b00      	cmp	r3, #0
 800fcaa:	d034      	beq.n	800fd16 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800fcac:	7afb      	ldrb	r3, [r7, #11]
 800fcae:	3b01      	subs	r3, #1
 800fcb0:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800fcb2:	2300      	movs	r3, #0
 800fcb4:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800fcb6:	2300      	movs	r3, #0
 800fcb8:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800fcba:	4b19      	ldr	r3, [pc, #100]	; (800fd20 <tcp_kill_prio+0x94>)
 800fcbc:	681b      	ldr	r3, [r3, #0]
 800fcbe:	617b      	str	r3, [r7, #20]
 800fcc0:	e01f      	b.n	800fd02 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800fcc2:	697b      	ldr	r3, [r7, #20]
 800fcc4:	7d5b      	ldrb	r3, [r3, #21]
 800fcc6:	7afa      	ldrb	r2, [r7, #11]
 800fcc8:	429a      	cmp	r2, r3
 800fcca:	d80c      	bhi.n	800fce6 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800fccc:	697b      	ldr	r3, [r7, #20]
 800fcce:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800fcd0:	7afa      	ldrb	r2, [r7, #11]
 800fcd2:	429a      	cmp	r2, r3
 800fcd4:	d112      	bne.n	800fcfc <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800fcd6:	4b13      	ldr	r3, [pc, #76]	; (800fd24 <tcp_kill_prio+0x98>)
 800fcd8:	681a      	ldr	r2, [r3, #0]
 800fcda:	697b      	ldr	r3, [r7, #20]
 800fcdc:	6a1b      	ldr	r3, [r3, #32]
 800fcde:	1ad3      	subs	r3, r2, r3
 800fce0:	68fa      	ldr	r2, [r7, #12]
 800fce2:	429a      	cmp	r2, r3
 800fce4:	d80a      	bhi.n	800fcfc <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800fce6:	4b0f      	ldr	r3, [pc, #60]	; (800fd24 <tcp_kill_prio+0x98>)
 800fce8:	681a      	ldr	r2, [r3, #0]
 800fcea:	697b      	ldr	r3, [r7, #20]
 800fcec:	6a1b      	ldr	r3, [r3, #32]
 800fcee:	1ad3      	subs	r3, r2, r3
 800fcf0:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800fcf2:	697b      	ldr	r3, [r7, #20]
 800fcf4:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800fcf6:	697b      	ldr	r3, [r7, #20]
 800fcf8:	7d5b      	ldrb	r3, [r3, #21]
 800fcfa:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800fcfc:	697b      	ldr	r3, [r7, #20]
 800fcfe:	68db      	ldr	r3, [r3, #12]
 800fd00:	617b      	str	r3, [r7, #20]
 800fd02:	697b      	ldr	r3, [r7, #20]
 800fd04:	2b00      	cmp	r3, #0
 800fd06:	d1dc      	bne.n	800fcc2 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800fd08:	693b      	ldr	r3, [r7, #16]
 800fd0a:	2b00      	cmp	r3, #0
 800fd0c:	d004      	beq.n	800fd18 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800fd0e:	6938      	ldr	r0, [r7, #16]
 800fd10:	f7ff f8b2 	bl	800ee78 <tcp_abort>
 800fd14:	e000      	b.n	800fd18 <tcp_kill_prio+0x8c>
    return;
 800fd16:	bf00      	nop
  }
}
 800fd18:	3718      	adds	r7, #24
 800fd1a:	46bd      	mov	sp, r7
 800fd1c:	bd80      	pop	{r7, pc}
 800fd1e:	bf00      	nop
 800fd20:	2000d288 	.word	0x2000d288
 800fd24:	2000d28c 	.word	0x2000d28c

0800fd28 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800fd28:	b580      	push	{r7, lr}
 800fd2a:	b086      	sub	sp, #24
 800fd2c:	af00      	add	r7, sp, #0
 800fd2e:	4603      	mov	r3, r0
 800fd30:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800fd32:	79fb      	ldrb	r3, [r7, #7]
 800fd34:	2b08      	cmp	r3, #8
 800fd36:	d009      	beq.n	800fd4c <tcp_kill_state+0x24>
 800fd38:	79fb      	ldrb	r3, [r7, #7]
 800fd3a:	2b09      	cmp	r3, #9
 800fd3c:	d006      	beq.n	800fd4c <tcp_kill_state+0x24>
 800fd3e:	4b1a      	ldr	r3, [pc, #104]	; (800fda8 <tcp_kill_state+0x80>)
 800fd40:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800fd44:	4919      	ldr	r1, [pc, #100]	; (800fdac <tcp_kill_state+0x84>)
 800fd46:	481a      	ldr	r0, [pc, #104]	; (800fdb0 <tcp_kill_state+0x88>)
 800fd48:	f007 fc36 	bl	80175b8 <iprintf>

  inactivity = 0;
 800fd4c:	2300      	movs	r3, #0
 800fd4e:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800fd50:	2300      	movs	r3, #0
 800fd52:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800fd54:	4b17      	ldr	r3, [pc, #92]	; (800fdb4 <tcp_kill_state+0x8c>)
 800fd56:	681b      	ldr	r3, [r3, #0]
 800fd58:	617b      	str	r3, [r7, #20]
 800fd5a:	e017      	b.n	800fd8c <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800fd5c:	697b      	ldr	r3, [r7, #20]
 800fd5e:	7d1b      	ldrb	r3, [r3, #20]
 800fd60:	79fa      	ldrb	r2, [r7, #7]
 800fd62:	429a      	cmp	r2, r3
 800fd64:	d10f      	bne.n	800fd86 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800fd66:	4b14      	ldr	r3, [pc, #80]	; (800fdb8 <tcp_kill_state+0x90>)
 800fd68:	681a      	ldr	r2, [r3, #0]
 800fd6a:	697b      	ldr	r3, [r7, #20]
 800fd6c:	6a1b      	ldr	r3, [r3, #32]
 800fd6e:	1ad3      	subs	r3, r2, r3
 800fd70:	68fa      	ldr	r2, [r7, #12]
 800fd72:	429a      	cmp	r2, r3
 800fd74:	d807      	bhi.n	800fd86 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800fd76:	4b10      	ldr	r3, [pc, #64]	; (800fdb8 <tcp_kill_state+0x90>)
 800fd78:	681a      	ldr	r2, [r3, #0]
 800fd7a:	697b      	ldr	r3, [r7, #20]
 800fd7c:	6a1b      	ldr	r3, [r3, #32]
 800fd7e:	1ad3      	subs	r3, r2, r3
 800fd80:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800fd82:	697b      	ldr	r3, [r7, #20]
 800fd84:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800fd86:	697b      	ldr	r3, [r7, #20]
 800fd88:	68db      	ldr	r3, [r3, #12]
 800fd8a:	617b      	str	r3, [r7, #20]
 800fd8c:	697b      	ldr	r3, [r7, #20]
 800fd8e:	2b00      	cmp	r3, #0
 800fd90:	d1e4      	bne.n	800fd5c <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800fd92:	693b      	ldr	r3, [r7, #16]
 800fd94:	2b00      	cmp	r3, #0
 800fd96:	d003      	beq.n	800fda0 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800fd98:	2100      	movs	r1, #0
 800fd9a:	6938      	ldr	r0, [r7, #16]
 800fd9c:	f7fe ffae 	bl	800ecfc <tcp_abandon>
  }
}
 800fda0:	bf00      	nop
 800fda2:	3718      	adds	r7, #24
 800fda4:	46bd      	mov	sp, r7
 800fda6:	bd80      	pop	{r7, pc}
 800fda8:	08019d2c 	.word	0x08019d2c
 800fdac:	0801a2b8 	.word	0x0801a2b8
 800fdb0:	08019d70 	.word	0x08019d70
 800fdb4:	2000d288 	.word	0x2000d288
 800fdb8:	2000d28c 	.word	0x2000d28c

0800fdbc <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800fdbc:	b580      	push	{r7, lr}
 800fdbe:	b084      	sub	sp, #16
 800fdc0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800fdc2:	2300      	movs	r3, #0
 800fdc4:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800fdc6:	2300      	movs	r3, #0
 800fdc8:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800fdca:	4b12      	ldr	r3, [pc, #72]	; (800fe14 <tcp_kill_timewait+0x58>)
 800fdcc:	681b      	ldr	r3, [r3, #0]
 800fdce:	60fb      	str	r3, [r7, #12]
 800fdd0:	e012      	b.n	800fdf8 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800fdd2:	4b11      	ldr	r3, [pc, #68]	; (800fe18 <tcp_kill_timewait+0x5c>)
 800fdd4:	681a      	ldr	r2, [r3, #0]
 800fdd6:	68fb      	ldr	r3, [r7, #12]
 800fdd8:	6a1b      	ldr	r3, [r3, #32]
 800fdda:	1ad3      	subs	r3, r2, r3
 800fddc:	687a      	ldr	r2, [r7, #4]
 800fdde:	429a      	cmp	r2, r3
 800fde0:	d807      	bhi.n	800fdf2 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800fde2:	4b0d      	ldr	r3, [pc, #52]	; (800fe18 <tcp_kill_timewait+0x5c>)
 800fde4:	681a      	ldr	r2, [r3, #0]
 800fde6:	68fb      	ldr	r3, [r7, #12]
 800fde8:	6a1b      	ldr	r3, [r3, #32]
 800fdea:	1ad3      	subs	r3, r2, r3
 800fdec:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800fdee:	68fb      	ldr	r3, [r7, #12]
 800fdf0:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800fdf2:	68fb      	ldr	r3, [r7, #12]
 800fdf4:	68db      	ldr	r3, [r3, #12]
 800fdf6:	60fb      	str	r3, [r7, #12]
 800fdf8:	68fb      	ldr	r3, [r7, #12]
 800fdfa:	2b00      	cmp	r3, #0
 800fdfc:	d1e9      	bne.n	800fdd2 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800fdfe:	68bb      	ldr	r3, [r7, #8]
 800fe00:	2b00      	cmp	r3, #0
 800fe02:	d002      	beq.n	800fe0a <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800fe04:	68b8      	ldr	r0, [r7, #8]
 800fe06:	f7ff f837 	bl	800ee78 <tcp_abort>
  }
}
 800fe0a:	bf00      	nop
 800fe0c:	3710      	adds	r7, #16
 800fe0e:	46bd      	mov	sp, r7
 800fe10:	bd80      	pop	{r7, pc}
 800fe12:	bf00      	nop
 800fe14:	2000d298 	.word	0x2000d298
 800fe18:	2000d28c 	.word	0x2000d28c

0800fe1c <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800fe1c:	b580      	push	{r7, lr}
 800fe1e:	b082      	sub	sp, #8
 800fe20:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800fe22:	4b10      	ldr	r3, [pc, #64]	; (800fe64 <tcp_handle_closepend+0x48>)
 800fe24:	681b      	ldr	r3, [r3, #0]
 800fe26:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800fe28:	e014      	b.n	800fe54 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800fe2a:	687b      	ldr	r3, [r7, #4]
 800fe2c:	68db      	ldr	r3, [r3, #12]
 800fe2e:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800fe30:	687b      	ldr	r3, [r7, #4]
 800fe32:	8b5b      	ldrh	r3, [r3, #26]
 800fe34:	f003 0308 	and.w	r3, r3, #8
 800fe38:	2b00      	cmp	r3, #0
 800fe3a:	d009      	beq.n	800fe50 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800fe3c:	687b      	ldr	r3, [r7, #4]
 800fe3e:	8b5b      	ldrh	r3, [r3, #26]
 800fe40:	f023 0308 	bic.w	r3, r3, #8
 800fe44:	b29a      	uxth	r2, r3
 800fe46:	687b      	ldr	r3, [r7, #4]
 800fe48:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800fe4a:	6878      	ldr	r0, [r7, #4]
 800fe4c:	f7fe fe6a 	bl	800eb24 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800fe50:	683b      	ldr	r3, [r7, #0]
 800fe52:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800fe54:	687b      	ldr	r3, [r7, #4]
 800fe56:	2b00      	cmp	r3, #0
 800fe58:	d1e7      	bne.n	800fe2a <tcp_handle_closepend+0xe>
  }
}
 800fe5a:	bf00      	nop
 800fe5c:	3708      	adds	r7, #8
 800fe5e:	46bd      	mov	sp, r7
 800fe60:	bd80      	pop	{r7, pc}
 800fe62:	bf00      	nop
 800fe64:	2000d288 	.word	0x2000d288

0800fe68 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800fe68:	b580      	push	{r7, lr}
 800fe6a:	b084      	sub	sp, #16
 800fe6c:	af00      	add	r7, sp, #0
 800fe6e:	4603      	mov	r3, r0
 800fe70:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800fe72:	2000      	movs	r0, #0
 800fe74:	f7fd fafa 	bl	800d46c <memp_malloc>
 800fe78:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800fe7a:	68fb      	ldr	r3, [r7, #12]
 800fe7c:	2b00      	cmp	r3, #0
 800fe7e:	d126      	bne.n	800fece <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800fe80:	f7ff ffcc 	bl	800fe1c <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800fe84:	f7ff ff9a 	bl	800fdbc <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800fe88:	2000      	movs	r0, #0
 800fe8a:	f7fd faef 	bl	800d46c <memp_malloc>
 800fe8e:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800fe90:	68fb      	ldr	r3, [r7, #12]
 800fe92:	2b00      	cmp	r3, #0
 800fe94:	d11b      	bne.n	800fece <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800fe96:	2009      	movs	r0, #9
 800fe98:	f7ff ff46 	bl	800fd28 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800fe9c:	2000      	movs	r0, #0
 800fe9e:	f7fd fae5 	bl	800d46c <memp_malloc>
 800fea2:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800fea4:	68fb      	ldr	r3, [r7, #12]
 800fea6:	2b00      	cmp	r3, #0
 800fea8:	d111      	bne.n	800fece <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800feaa:	2008      	movs	r0, #8
 800feac:	f7ff ff3c 	bl	800fd28 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800feb0:	2000      	movs	r0, #0
 800feb2:	f7fd fadb 	bl	800d46c <memp_malloc>
 800feb6:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800feb8:	68fb      	ldr	r3, [r7, #12]
 800feba:	2b00      	cmp	r3, #0
 800febc:	d107      	bne.n	800fece <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800febe:	79fb      	ldrb	r3, [r7, #7]
 800fec0:	4618      	mov	r0, r3
 800fec2:	f7ff fee3 	bl	800fc8c <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800fec6:	2000      	movs	r0, #0
 800fec8:	f7fd fad0 	bl	800d46c <memp_malloc>
 800fecc:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800fece:	68fb      	ldr	r3, [r7, #12]
 800fed0:	2b00      	cmp	r3, #0
 800fed2:	d03f      	beq.n	800ff54 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800fed4:	229c      	movs	r2, #156	; 0x9c
 800fed6:	2100      	movs	r1, #0
 800fed8:	68f8      	ldr	r0, [r7, #12]
 800feda:	f007 fb65 	bl	80175a8 <memset>
    pcb->prio = prio;
 800fede:	68fb      	ldr	r3, [r7, #12]
 800fee0:	79fa      	ldrb	r2, [r7, #7]
 800fee2:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800fee4:	68fb      	ldr	r3, [r7, #12]
 800fee6:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800feea:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800feee:	68fb      	ldr	r3, [r7, #12]
 800fef0:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800fef4:	855a      	strh	r2, [r3, #42]	; 0x2a
 800fef6:	68fb      	ldr	r3, [r7, #12]
 800fef8:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800fefa:	68fb      	ldr	r3, [r7, #12]
 800fefc:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800fefe:	68fb      	ldr	r3, [r7, #12]
 800ff00:	22ff      	movs	r2, #255	; 0xff
 800ff02:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800ff04:	68fb      	ldr	r3, [r7, #12]
 800ff06:	f44f 7206 	mov.w	r2, #536	; 0x218
 800ff0a:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800ff0c:	68fb      	ldr	r3, [r7, #12]
 800ff0e:	2206      	movs	r2, #6
 800ff10:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800ff14:	68fb      	ldr	r3, [r7, #12]
 800ff16:	2206      	movs	r2, #6
 800ff18:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800ff1a:	68fb      	ldr	r3, [r7, #12]
 800ff1c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ff20:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800ff22:	68fb      	ldr	r3, [r7, #12]
 800ff24:	2201      	movs	r2, #1
 800ff26:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800ff2a:	4b0d      	ldr	r3, [pc, #52]	; (800ff60 <tcp_alloc+0xf8>)
 800ff2c:	681a      	ldr	r2, [r3, #0]
 800ff2e:	68fb      	ldr	r3, [r7, #12]
 800ff30:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800ff32:	4b0c      	ldr	r3, [pc, #48]	; (800ff64 <tcp_alloc+0xfc>)
 800ff34:	781a      	ldrb	r2, [r3, #0]
 800ff36:	68fb      	ldr	r3, [r7, #12]
 800ff38:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800ff3a:	68fb      	ldr	r3, [r7, #12]
 800ff3c:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800ff40:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800ff44:	68fb      	ldr	r3, [r7, #12]
 800ff46:	4a08      	ldr	r2, [pc, #32]	; (800ff68 <tcp_alloc+0x100>)
 800ff48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800ff4c:	68fb      	ldr	r3, [r7, #12]
 800ff4e:	4a07      	ldr	r2, [pc, #28]	; (800ff6c <tcp_alloc+0x104>)
 800ff50:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800ff54:	68fb      	ldr	r3, [r7, #12]
}
 800ff56:	4618      	mov	r0, r3
 800ff58:	3710      	adds	r7, #16
 800ff5a:	46bd      	mov	sp, r7
 800ff5c:	bd80      	pop	{r7, pc}
 800ff5e:	bf00      	nop
 800ff60:	2000d28c 	.word	0x2000d28c
 800ff64:	20004646 	.word	0x20004646
 800ff68:	0800fc21 	.word	0x0800fc21
 800ff6c:	006ddd00 	.word	0x006ddd00

0800ff70 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 800ff70:	b580      	push	{r7, lr}
 800ff72:	b084      	sub	sp, #16
 800ff74:	af00      	add	r7, sp, #0
 800ff76:	4603      	mov	r3, r0
 800ff78:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 800ff7a:	2040      	movs	r0, #64	; 0x40
 800ff7c:	f7ff ff74 	bl	800fe68 <tcp_alloc>
 800ff80:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 800ff82:	68fb      	ldr	r3, [r7, #12]
}
 800ff84:	4618      	mov	r0, r3
 800ff86:	3710      	adds	r7, #16
 800ff88:	46bd      	mov	sp, r7
 800ff8a:	bd80      	pop	{r7, pc}

0800ff8c <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 800ff8c:	b480      	push	{r7}
 800ff8e:	b083      	sub	sp, #12
 800ff90:	af00      	add	r7, sp, #0
 800ff92:	6078      	str	r0, [r7, #4]
 800ff94:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800ff96:	687b      	ldr	r3, [r7, #4]
 800ff98:	2b00      	cmp	r3, #0
 800ff9a:	d002      	beq.n	800ffa2 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 800ff9c:	687b      	ldr	r3, [r7, #4]
 800ff9e:	683a      	ldr	r2, [r7, #0]
 800ffa0:	611a      	str	r2, [r3, #16]
  }
}
 800ffa2:	bf00      	nop
 800ffa4:	370c      	adds	r7, #12
 800ffa6:	46bd      	mov	sp, r7
 800ffa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffac:	4770      	bx	lr
	...

0800ffb0 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800ffb0:	b580      	push	{r7, lr}
 800ffb2:	b082      	sub	sp, #8
 800ffb4:	af00      	add	r7, sp, #0
 800ffb6:	6078      	str	r0, [r7, #4]
 800ffb8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800ffba:	687b      	ldr	r3, [r7, #4]
 800ffbc:	2b00      	cmp	r3, #0
 800ffbe:	d00e      	beq.n	800ffde <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800ffc0:	687b      	ldr	r3, [r7, #4]
 800ffc2:	7d1b      	ldrb	r3, [r3, #20]
 800ffc4:	2b01      	cmp	r3, #1
 800ffc6:	d106      	bne.n	800ffd6 <tcp_recv+0x26>
 800ffc8:	4b07      	ldr	r3, [pc, #28]	; (800ffe8 <tcp_recv+0x38>)
 800ffca:	f240 72df 	movw	r2, #2015	; 0x7df
 800ffce:	4907      	ldr	r1, [pc, #28]	; (800ffec <tcp_recv+0x3c>)
 800ffd0:	4807      	ldr	r0, [pc, #28]	; (800fff0 <tcp_recv+0x40>)
 800ffd2:	f007 faf1 	bl	80175b8 <iprintf>
    pcb->recv = recv;
 800ffd6:	687b      	ldr	r3, [r7, #4]
 800ffd8:	683a      	ldr	r2, [r7, #0]
 800ffda:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 800ffde:	bf00      	nop
 800ffe0:	3708      	adds	r7, #8
 800ffe2:	46bd      	mov	sp, r7
 800ffe4:	bd80      	pop	{r7, pc}
 800ffe6:	bf00      	nop
 800ffe8:	08019d2c 	.word	0x08019d2c
 800ffec:	0801a2c8 	.word	0x0801a2c8
 800fff0:	08019d70 	.word	0x08019d70

0800fff4 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800fff4:	b580      	push	{r7, lr}
 800fff6:	b082      	sub	sp, #8
 800fff8:	af00      	add	r7, sp, #0
 800fffa:	6078      	str	r0, [r7, #4]
 800fffc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800fffe:	687b      	ldr	r3, [r7, #4]
 8010000:	2b00      	cmp	r3, #0
 8010002:	d00e      	beq.n	8010022 <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8010004:	687b      	ldr	r3, [r7, #4]
 8010006:	7d1b      	ldrb	r3, [r3, #20]
 8010008:	2b01      	cmp	r3, #1
 801000a:	d106      	bne.n	801001a <tcp_sent+0x26>
 801000c:	4b07      	ldr	r3, [pc, #28]	; (801002c <tcp_sent+0x38>)
 801000e:	f240 72f3 	movw	r2, #2035	; 0x7f3
 8010012:	4907      	ldr	r1, [pc, #28]	; (8010030 <tcp_sent+0x3c>)
 8010014:	4807      	ldr	r0, [pc, #28]	; (8010034 <tcp_sent+0x40>)
 8010016:	f007 facf 	bl	80175b8 <iprintf>
    pcb->sent = sent;
 801001a:	687b      	ldr	r3, [r7, #4]
 801001c:	683a      	ldr	r2, [r7, #0]
 801001e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 8010022:	bf00      	nop
 8010024:	3708      	adds	r7, #8
 8010026:	46bd      	mov	sp, r7
 8010028:	bd80      	pop	{r7, pc}
 801002a:	bf00      	nop
 801002c:	08019d2c 	.word	0x08019d2c
 8010030:	0801a2f0 	.word	0x0801a2f0
 8010034:	08019d70 	.word	0x08019d70

08010038 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 8010038:	b580      	push	{r7, lr}
 801003a:	b082      	sub	sp, #8
 801003c:	af00      	add	r7, sp, #0
 801003e:	6078      	str	r0, [r7, #4]
 8010040:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8010042:	687b      	ldr	r3, [r7, #4]
 8010044:	2b00      	cmp	r3, #0
 8010046:	d00e      	beq.n	8010066 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8010048:	687b      	ldr	r3, [r7, #4]
 801004a:	7d1b      	ldrb	r3, [r3, #20]
 801004c:	2b01      	cmp	r3, #1
 801004e:	d106      	bne.n	801005e <tcp_err+0x26>
 8010050:	4b07      	ldr	r3, [pc, #28]	; (8010070 <tcp_err+0x38>)
 8010052:	f640 020d 	movw	r2, #2061	; 0x80d
 8010056:	4907      	ldr	r1, [pc, #28]	; (8010074 <tcp_err+0x3c>)
 8010058:	4807      	ldr	r0, [pc, #28]	; (8010078 <tcp_err+0x40>)
 801005a:	f007 faad 	bl	80175b8 <iprintf>
    pcb->errf = err;
 801005e:	687b      	ldr	r3, [r7, #4]
 8010060:	683a      	ldr	r2, [r7, #0]
 8010062:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 8010066:	bf00      	nop
 8010068:	3708      	adds	r7, #8
 801006a:	46bd      	mov	sp, r7
 801006c:	bd80      	pop	{r7, pc}
 801006e:	bf00      	nop
 8010070:	08019d2c 	.word	0x08019d2c
 8010074:	0801a318 	.word	0x0801a318
 8010078:	08019d70 	.word	0x08019d70

0801007c <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 801007c:	b480      	push	{r7}
 801007e:	b085      	sub	sp, #20
 8010080:	af00      	add	r7, sp, #0
 8010082:	6078      	str	r0, [r7, #4]
 8010084:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 8010086:	687b      	ldr	r3, [r7, #4]
 8010088:	2b00      	cmp	r3, #0
 801008a:	d008      	beq.n	801009e <tcp_accept+0x22>
 801008c:	687b      	ldr	r3, [r7, #4]
 801008e:	7d1b      	ldrb	r3, [r3, #20]
 8010090:	2b01      	cmp	r3, #1
 8010092:	d104      	bne.n	801009e <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 8010094:	687b      	ldr	r3, [r7, #4]
 8010096:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 8010098:	68fb      	ldr	r3, [r7, #12]
 801009a:	683a      	ldr	r2, [r7, #0]
 801009c:	619a      	str	r2, [r3, #24]
  }
}
 801009e:	bf00      	nop
 80100a0:	3714      	adds	r7, #20
 80100a2:	46bd      	mov	sp, r7
 80100a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100a8:	4770      	bx	lr
	...

080100ac <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 80100ac:	b580      	push	{r7, lr}
 80100ae:	b084      	sub	sp, #16
 80100b0:	af00      	add	r7, sp, #0
 80100b2:	60f8      	str	r0, [r7, #12]
 80100b4:	60b9      	str	r1, [r7, #8]
 80100b6:	4613      	mov	r3, r2
 80100b8:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 80100ba:	68fb      	ldr	r3, [r7, #12]
 80100bc:	2b00      	cmp	r3, #0
 80100be:	d107      	bne.n	80100d0 <tcp_poll+0x24>
 80100c0:	4b0e      	ldr	r3, [pc, #56]	; (80100fc <tcp_poll+0x50>)
 80100c2:	f640 023d 	movw	r2, #2109	; 0x83d
 80100c6:	490e      	ldr	r1, [pc, #56]	; (8010100 <tcp_poll+0x54>)
 80100c8:	480e      	ldr	r0, [pc, #56]	; (8010104 <tcp_poll+0x58>)
 80100ca:	f007 fa75 	bl	80175b8 <iprintf>
 80100ce:	e011      	b.n	80100f4 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 80100d0:	68fb      	ldr	r3, [r7, #12]
 80100d2:	7d1b      	ldrb	r3, [r3, #20]
 80100d4:	2b01      	cmp	r3, #1
 80100d6:	d106      	bne.n	80100e6 <tcp_poll+0x3a>
 80100d8:	4b08      	ldr	r3, [pc, #32]	; (80100fc <tcp_poll+0x50>)
 80100da:	f640 023e 	movw	r2, #2110	; 0x83e
 80100de:	490a      	ldr	r1, [pc, #40]	; (8010108 <tcp_poll+0x5c>)
 80100e0:	4808      	ldr	r0, [pc, #32]	; (8010104 <tcp_poll+0x58>)
 80100e2:	f007 fa69 	bl	80175b8 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 80100e6:	68fb      	ldr	r3, [r7, #12]
 80100e8:	68ba      	ldr	r2, [r7, #8]
 80100ea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 80100ee:	68fb      	ldr	r3, [r7, #12]
 80100f0:	79fa      	ldrb	r2, [r7, #7]
 80100f2:	775a      	strb	r2, [r3, #29]
}
 80100f4:	3710      	adds	r7, #16
 80100f6:	46bd      	mov	sp, r7
 80100f8:	bd80      	pop	{r7, pc}
 80100fa:	bf00      	nop
 80100fc:	08019d2c 	.word	0x08019d2c
 8010100:	0801a340 	.word	0x0801a340
 8010104:	08019d70 	.word	0x08019d70
 8010108:	0801a358 	.word	0x0801a358

0801010c <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 801010c:	b580      	push	{r7, lr}
 801010e:	b082      	sub	sp, #8
 8010110:	af00      	add	r7, sp, #0
 8010112:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8010114:	687b      	ldr	r3, [r7, #4]
 8010116:	2b00      	cmp	r3, #0
 8010118:	d107      	bne.n	801012a <tcp_pcb_purge+0x1e>
 801011a:	4b21      	ldr	r3, [pc, #132]	; (80101a0 <tcp_pcb_purge+0x94>)
 801011c:	f640 0251 	movw	r2, #2129	; 0x851
 8010120:	4920      	ldr	r1, [pc, #128]	; (80101a4 <tcp_pcb_purge+0x98>)
 8010122:	4821      	ldr	r0, [pc, #132]	; (80101a8 <tcp_pcb_purge+0x9c>)
 8010124:	f007 fa48 	bl	80175b8 <iprintf>
 8010128:	e037      	b.n	801019a <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 801012a:	687b      	ldr	r3, [r7, #4]
 801012c:	7d1b      	ldrb	r3, [r3, #20]
 801012e:	2b00      	cmp	r3, #0
 8010130:	d033      	beq.n	801019a <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8010132:	687b      	ldr	r3, [r7, #4]
 8010134:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8010136:	2b0a      	cmp	r3, #10
 8010138:	d02f      	beq.n	801019a <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 801013a:	687b      	ldr	r3, [r7, #4]
 801013c:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 801013e:	2b01      	cmp	r3, #1
 8010140:	d02b      	beq.n	801019a <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8010142:	687b      	ldr	r3, [r7, #4]
 8010144:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010146:	2b00      	cmp	r3, #0
 8010148:	d007      	beq.n	801015a <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 801014a:	687b      	ldr	r3, [r7, #4]
 801014c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801014e:	4618      	mov	r0, r3
 8010150:	f7fe f8ac 	bl	800e2ac <pbuf_free>
      pcb->refused_data = NULL;
 8010154:	687b      	ldr	r3, [r7, #4]
 8010156:	2200      	movs	r2, #0
 8010158:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 801015a:	687b      	ldr	r3, [r7, #4]
 801015c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801015e:	2b00      	cmp	r3, #0
 8010160:	d002      	beq.n	8010168 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8010162:	6878      	ldr	r0, [r7, #4]
 8010164:	f000 f986 	bl	8010474 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8010168:	687b      	ldr	r3, [r7, #4]
 801016a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801016e:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8010170:	687b      	ldr	r3, [r7, #4]
 8010172:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010174:	4618      	mov	r0, r3
 8010176:	f7ff fcfb 	bl	800fb70 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 801017a:	687b      	ldr	r3, [r7, #4]
 801017c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801017e:	4618      	mov	r0, r3
 8010180:	f7ff fcf6 	bl	800fb70 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8010184:	687b      	ldr	r3, [r7, #4]
 8010186:	2200      	movs	r2, #0
 8010188:	66da      	str	r2, [r3, #108]	; 0x6c
 801018a:	687b      	ldr	r3, [r7, #4]
 801018c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 801018e:	687b      	ldr	r3, [r7, #4]
 8010190:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8010192:	687b      	ldr	r3, [r7, #4]
 8010194:	2200      	movs	r2, #0
 8010196:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 801019a:	3708      	adds	r7, #8
 801019c:	46bd      	mov	sp, r7
 801019e:	bd80      	pop	{r7, pc}
 80101a0:	08019d2c 	.word	0x08019d2c
 80101a4:	0801a378 	.word	0x0801a378
 80101a8:	08019d70 	.word	0x08019d70

080101ac <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 80101ac:	b580      	push	{r7, lr}
 80101ae:	b084      	sub	sp, #16
 80101b0:	af00      	add	r7, sp, #0
 80101b2:	6078      	str	r0, [r7, #4]
 80101b4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 80101b6:	683b      	ldr	r3, [r7, #0]
 80101b8:	2b00      	cmp	r3, #0
 80101ba:	d106      	bne.n	80101ca <tcp_pcb_remove+0x1e>
 80101bc:	4b3e      	ldr	r3, [pc, #248]	; (80102b8 <tcp_pcb_remove+0x10c>)
 80101be:	f640 0283 	movw	r2, #2179	; 0x883
 80101c2:	493e      	ldr	r1, [pc, #248]	; (80102bc <tcp_pcb_remove+0x110>)
 80101c4:	483e      	ldr	r0, [pc, #248]	; (80102c0 <tcp_pcb_remove+0x114>)
 80101c6:	f007 f9f7 	bl	80175b8 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 80101ca:	687b      	ldr	r3, [r7, #4]
 80101cc:	2b00      	cmp	r3, #0
 80101ce:	d106      	bne.n	80101de <tcp_pcb_remove+0x32>
 80101d0:	4b39      	ldr	r3, [pc, #228]	; (80102b8 <tcp_pcb_remove+0x10c>)
 80101d2:	f640 0284 	movw	r2, #2180	; 0x884
 80101d6:	493b      	ldr	r1, [pc, #236]	; (80102c4 <tcp_pcb_remove+0x118>)
 80101d8:	4839      	ldr	r0, [pc, #228]	; (80102c0 <tcp_pcb_remove+0x114>)
 80101da:	f007 f9ed 	bl	80175b8 <iprintf>

  TCP_RMV(pcblist, pcb);
 80101de:	687b      	ldr	r3, [r7, #4]
 80101e0:	681b      	ldr	r3, [r3, #0]
 80101e2:	683a      	ldr	r2, [r7, #0]
 80101e4:	429a      	cmp	r2, r3
 80101e6:	d105      	bne.n	80101f4 <tcp_pcb_remove+0x48>
 80101e8:	687b      	ldr	r3, [r7, #4]
 80101ea:	681b      	ldr	r3, [r3, #0]
 80101ec:	68da      	ldr	r2, [r3, #12]
 80101ee:	687b      	ldr	r3, [r7, #4]
 80101f0:	601a      	str	r2, [r3, #0]
 80101f2:	e013      	b.n	801021c <tcp_pcb_remove+0x70>
 80101f4:	687b      	ldr	r3, [r7, #4]
 80101f6:	681b      	ldr	r3, [r3, #0]
 80101f8:	60fb      	str	r3, [r7, #12]
 80101fa:	e00c      	b.n	8010216 <tcp_pcb_remove+0x6a>
 80101fc:	68fb      	ldr	r3, [r7, #12]
 80101fe:	68db      	ldr	r3, [r3, #12]
 8010200:	683a      	ldr	r2, [r7, #0]
 8010202:	429a      	cmp	r2, r3
 8010204:	d104      	bne.n	8010210 <tcp_pcb_remove+0x64>
 8010206:	683b      	ldr	r3, [r7, #0]
 8010208:	68da      	ldr	r2, [r3, #12]
 801020a:	68fb      	ldr	r3, [r7, #12]
 801020c:	60da      	str	r2, [r3, #12]
 801020e:	e005      	b.n	801021c <tcp_pcb_remove+0x70>
 8010210:	68fb      	ldr	r3, [r7, #12]
 8010212:	68db      	ldr	r3, [r3, #12]
 8010214:	60fb      	str	r3, [r7, #12]
 8010216:	68fb      	ldr	r3, [r7, #12]
 8010218:	2b00      	cmp	r3, #0
 801021a:	d1ef      	bne.n	80101fc <tcp_pcb_remove+0x50>
 801021c:	683b      	ldr	r3, [r7, #0]
 801021e:	2200      	movs	r2, #0
 8010220:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8010222:	6838      	ldr	r0, [r7, #0]
 8010224:	f7ff ff72 	bl	801010c <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8010228:	683b      	ldr	r3, [r7, #0]
 801022a:	7d1b      	ldrb	r3, [r3, #20]
 801022c:	2b0a      	cmp	r3, #10
 801022e:	d013      	beq.n	8010258 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8010230:	683b      	ldr	r3, [r7, #0]
 8010232:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8010234:	2b01      	cmp	r3, #1
 8010236:	d00f      	beq.n	8010258 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8010238:	683b      	ldr	r3, [r7, #0]
 801023a:	8b5b      	ldrh	r3, [r3, #26]
 801023c:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8010240:	2b00      	cmp	r3, #0
 8010242:	d009      	beq.n	8010258 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8010244:	683b      	ldr	r3, [r7, #0]
 8010246:	8b5b      	ldrh	r3, [r3, #26]
 8010248:	f043 0302 	orr.w	r3, r3, #2
 801024c:	b29a      	uxth	r2, r3
 801024e:	683b      	ldr	r3, [r7, #0]
 8010250:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8010252:	6838      	ldr	r0, [r7, #0]
 8010254:	f003 fbc2 	bl	80139dc <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8010258:	683b      	ldr	r3, [r7, #0]
 801025a:	7d1b      	ldrb	r3, [r3, #20]
 801025c:	2b01      	cmp	r3, #1
 801025e:	d020      	beq.n	80102a2 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8010260:	683b      	ldr	r3, [r7, #0]
 8010262:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010264:	2b00      	cmp	r3, #0
 8010266:	d006      	beq.n	8010276 <tcp_pcb_remove+0xca>
 8010268:	4b13      	ldr	r3, [pc, #76]	; (80102b8 <tcp_pcb_remove+0x10c>)
 801026a:	f640 0293 	movw	r2, #2195	; 0x893
 801026e:	4916      	ldr	r1, [pc, #88]	; (80102c8 <tcp_pcb_remove+0x11c>)
 8010270:	4813      	ldr	r0, [pc, #76]	; (80102c0 <tcp_pcb_remove+0x114>)
 8010272:	f007 f9a1 	bl	80175b8 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8010276:	683b      	ldr	r3, [r7, #0]
 8010278:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801027a:	2b00      	cmp	r3, #0
 801027c:	d006      	beq.n	801028c <tcp_pcb_remove+0xe0>
 801027e:	4b0e      	ldr	r3, [pc, #56]	; (80102b8 <tcp_pcb_remove+0x10c>)
 8010280:	f640 0294 	movw	r2, #2196	; 0x894
 8010284:	4911      	ldr	r1, [pc, #68]	; (80102cc <tcp_pcb_remove+0x120>)
 8010286:	480e      	ldr	r0, [pc, #56]	; (80102c0 <tcp_pcb_remove+0x114>)
 8010288:	f007 f996 	bl	80175b8 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 801028c:	683b      	ldr	r3, [r7, #0]
 801028e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010290:	2b00      	cmp	r3, #0
 8010292:	d006      	beq.n	80102a2 <tcp_pcb_remove+0xf6>
 8010294:	4b08      	ldr	r3, [pc, #32]	; (80102b8 <tcp_pcb_remove+0x10c>)
 8010296:	f640 0296 	movw	r2, #2198	; 0x896
 801029a:	490d      	ldr	r1, [pc, #52]	; (80102d0 <tcp_pcb_remove+0x124>)
 801029c:	4808      	ldr	r0, [pc, #32]	; (80102c0 <tcp_pcb_remove+0x114>)
 801029e:	f007 f98b 	bl	80175b8 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 80102a2:	683b      	ldr	r3, [r7, #0]
 80102a4:	2200      	movs	r2, #0
 80102a6:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 80102a8:	683b      	ldr	r3, [r7, #0]
 80102aa:	2200      	movs	r2, #0
 80102ac:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 80102ae:	bf00      	nop
 80102b0:	3710      	adds	r7, #16
 80102b2:	46bd      	mov	sp, r7
 80102b4:	bd80      	pop	{r7, pc}
 80102b6:	bf00      	nop
 80102b8:	08019d2c 	.word	0x08019d2c
 80102bc:	0801a394 	.word	0x0801a394
 80102c0:	08019d70 	.word	0x08019d70
 80102c4:	0801a3b0 	.word	0x0801a3b0
 80102c8:	0801a3d0 	.word	0x0801a3d0
 80102cc:	0801a3e8 	.word	0x0801a3e8
 80102d0:	0801a404 	.word	0x0801a404

080102d4 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 80102d4:	b580      	push	{r7, lr}
 80102d6:	b082      	sub	sp, #8
 80102d8:	af00      	add	r7, sp, #0
 80102da:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 80102dc:	687b      	ldr	r3, [r7, #4]
 80102de:	2b00      	cmp	r3, #0
 80102e0:	d106      	bne.n	80102f0 <tcp_next_iss+0x1c>
 80102e2:	4b0a      	ldr	r3, [pc, #40]	; (801030c <tcp_next_iss+0x38>)
 80102e4:	f640 02af 	movw	r2, #2223	; 0x8af
 80102e8:	4909      	ldr	r1, [pc, #36]	; (8010310 <tcp_next_iss+0x3c>)
 80102ea:	480a      	ldr	r0, [pc, #40]	; (8010314 <tcp_next_iss+0x40>)
 80102ec:	f007 f964 	bl	80175b8 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 80102f0:	4b09      	ldr	r3, [pc, #36]	; (8010318 <tcp_next_iss+0x44>)
 80102f2:	681a      	ldr	r2, [r3, #0]
 80102f4:	4b09      	ldr	r3, [pc, #36]	; (801031c <tcp_next_iss+0x48>)
 80102f6:	681b      	ldr	r3, [r3, #0]
 80102f8:	4413      	add	r3, r2
 80102fa:	4a07      	ldr	r2, [pc, #28]	; (8010318 <tcp_next_iss+0x44>)
 80102fc:	6013      	str	r3, [r2, #0]
  return iss;
 80102fe:	4b06      	ldr	r3, [pc, #24]	; (8010318 <tcp_next_iss+0x44>)
 8010300:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8010302:	4618      	mov	r0, r3
 8010304:	3708      	adds	r7, #8
 8010306:	46bd      	mov	sp, r7
 8010308:	bd80      	pop	{r7, pc}
 801030a:	bf00      	nop
 801030c:	08019d2c 	.word	0x08019d2c
 8010310:	0801a41c 	.word	0x0801a41c
 8010314:	08019d70 	.word	0x08019d70
 8010318:	20000014 	.word	0x20000014
 801031c:	2000d28c 	.word	0x2000d28c

08010320 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8010320:	b580      	push	{r7, lr}
 8010322:	b086      	sub	sp, #24
 8010324:	af00      	add	r7, sp, #0
 8010326:	4603      	mov	r3, r0
 8010328:	60b9      	str	r1, [r7, #8]
 801032a:	607a      	str	r2, [r7, #4]
 801032c:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 801032e:	687b      	ldr	r3, [r7, #4]
 8010330:	2b00      	cmp	r3, #0
 8010332:	d106      	bne.n	8010342 <tcp_eff_send_mss_netif+0x22>
 8010334:	4b14      	ldr	r3, [pc, #80]	; (8010388 <tcp_eff_send_mss_netif+0x68>)
 8010336:	f640 02c5 	movw	r2, #2245	; 0x8c5
 801033a:	4914      	ldr	r1, [pc, #80]	; (801038c <tcp_eff_send_mss_netif+0x6c>)
 801033c:	4814      	ldr	r0, [pc, #80]	; (8010390 <tcp_eff_send_mss_netif+0x70>)
 801033e:	f007 f93b 	bl	80175b8 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8010342:	68bb      	ldr	r3, [r7, #8]
 8010344:	2b00      	cmp	r3, #0
 8010346:	d101      	bne.n	801034c <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8010348:	89fb      	ldrh	r3, [r7, #14]
 801034a:	e019      	b.n	8010380 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 801034c:	68bb      	ldr	r3, [r7, #8]
 801034e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8010350:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8010352:	8afb      	ldrh	r3, [r7, #22]
 8010354:	2b00      	cmp	r3, #0
 8010356:	d012      	beq.n	801037e <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8010358:	2328      	movs	r3, #40	; 0x28
 801035a:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 801035c:	8afa      	ldrh	r2, [r7, #22]
 801035e:	8abb      	ldrh	r3, [r7, #20]
 8010360:	429a      	cmp	r2, r3
 8010362:	d904      	bls.n	801036e <tcp_eff_send_mss_netif+0x4e>
 8010364:	8afa      	ldrh	r2, [r7, #22]
 8010366:	8abb      	ldrh	r3, [r7, #20]
 8010368:	1ad3      	subs	r3, r2, r3
 801036a:	b29b      	uxth	r3, r3
 801036c:	e000      	b.n	8010370 <tcp_eff_send_mss_netif+0x50>
 801036e:	2300      	movs	r3, #0
 8010370:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8010372:	8a7a      	ldrh	r2, [r7, #18]
 8010374:	89fb      	ldrh	r3, [r7, #14]
 8010376:	4293      	cmp	r3, r2
 8010378:	bf28      	it	cs
 801037a:	4613      	movcs	r3, r2
 801037c:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 801037e:	89fb      	ldrh	r3, [r7, #14]
}
 8010380:	4618      	mov	r0, r3
 8010382:	3718      	adds	r7, #24
 8010384:	46bd      	mov	sp, r7
 8010386:	bd80      	pop	{r7, pc}
 8010388:	08019d2c 	.word	0x08019d2c
 801038c:	0801a438 	.word	0x0801a438
 8010390:	08019d70 	.word	0x08019d70

08010394 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8010394:	b580      	push	{r7, lr}
 8010396:	b084      	sub	sp, #16
 8010398:	af00      	add	r7, sp, #0
 801039a:	6078      	str	r0, [r7, #4]
 801039c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 801039e:	683b      	ldr	r3, [r7, #0]
 80103a0:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 80103a2:	687b      	ldr	r3, [r7, #4]
 80103a4:	2b00      	cmp	r3, #0
 80103a6:	d119      	bne.n	80103dc <tcp_netif_ip_addr_changed_pcblist+0x48>
 80103a8:	4b10      	ldr	r3, [pc, #64]	; (80103ec <tcp_netif_ip_addr_changed_pcblist+0x58>)
 80103aa:	f44f 6210 	mov.w	r2, #2304	; 0x900
 80103ae:	4910      	ldr	r1, [pc, #64]	; (80103f0 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 80103b0:	4810      	ldr	r0, [pc, #64]	; (80103f4 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 80103b2:	f007 f901 	bl	80175b8 <iprintf>

  while (pcb != NULL) {
 80103b6:	e011      	b.n	80103dc <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 80103b8:	68fb      	ldr	r3, [r7, #12]
 80103ba:	681a      	ldr	r2, [r3, #0]
 80103bc:	687b      	ldr	r3, [r7, #4]
 80103be:	681b      	ldr	r3, [r3, #0]
 80103c0:	429a      	cmp	r2, r3
 80103c2:	d108      	bne.n	80103d6 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 80103c4:	68fb      	ldr	r3, [r7, #12]
 80103c6:	68db      	ldr	r3, [r3, #12]
 80103c8:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 80103ca:	68f8      	ldr	r0, [r7, #12]
 80103cc:	f7fe fd54 	bl	800ee78 <tcp_abort>
      pcb = next;
 80103d0:	68bb      	ldr	r3, [r7, #8]
 80103d2:	60fb      	str	r3, [r7, #12]
 80103d4:	e002      	b.n	80103dc <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 80103d6:	68fb      	ldr	r3, [r7, #12]
 80103d8:	68db      	ldr	r3, [r3, #12]
 80103da:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 80103dc:	68fb      	ldr	r3, [r7, #12]
 80103de:	2b00      	cmp	r3, #0
 80103e0:	d1ea      	bne.n	80103b8 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 80103e2:	bf00      	nop
 80103e4:	3710      	adds	r7, #16
 80103e6:	46bd      	mov	sp, r7
 80103e8:	bd80      	pop	{r7, pc}
 80103ea:	bf00      	nop
 80103ec:	08019d2c 	.word	0x08019d2c
 80103f0:	0801a460 	.word	0x0801a460
 80103f4:	08019d70 	.word	0x08019d70

080103f8 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80103f8:	b580      	push	{r7, lr}
 80103fa:	b084      	sub	sp, #16
 80103fc:	af00      	add	r7, sp, #0
 80103fe:	6078      	str	r0, [r7, #4]
 8010400:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8010402:	687b      	ldr	r3, [r7, #4]
 8010404:	2b00      	cmp	r3, #0
 8010406:	d02a      	beq.n	801045e <tcp_netif_ip_addr_changed+0x66>
 8010408:	687b      	ldr	r3, [r7, #4]
 801040a:	681b      	ldr	r3, [r3, #0]
 801040c:	2b00      	cmp	r3, #0
 801040e:	d026      	beq.n	801045e <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8010410:	4b15      	ldr	r3, [pc, #84]	; (8010468 <tcp_netif_ip_addr_changed+0x70>)
 8010412:	681b      	ldr	r3, [r3, #0]
 8010414:	4619      	mov	r1, r3
 8010416:	6878      	ldr	r0, [r7, #4]
 8010418:	f7ff ffbc 	bl	8010394 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 801041c:	4b13      	ldr	r3, [pc, #76]	; (801046c <tcp_netif_ip_addr_changed+0x74>)
 801041e:	681b      	ldr	r3, [r3, #0]
 8010420:	4619      	mov	r1, r3
 8010422:	6878      	ldr	r0, [r7, #4]
 8010424:	f7ff ffb6 	bl	8010394 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8010428:	683b      	ldr	r3, [r7, #0]
 801042a:	2b00      	cmp	r3, #0
 801042c:	d017      	beq.n	801045e <tcp_netif_ip_addr_changed+0x66>
 801042e:	683b      	ldr	r3, [r7, #0]
 8010430:	681b      	ldr	r3, [r3, #0]
 8010432:	2b00      	cmp	r3, #0
 8010434:	d013      	beq.n	801045e <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8010436:	4b0e      	ldr	r3, [pc, #56]	; (8010470 <tcp_netif_ip_addr_changed+0x78>)
 8010438:	681b      	ldr	r3, [r3, #0]
 801043a:	60fb      	str	r3, [r7, #12]
 801043c:	e00c      	b.n	8010458 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 801043e:	68fb      	ldr	r3, [r7, #12]
 8010440:	681a      	ldr	r2, [r3, #0]
 8010442:	687b      	ldr	r3, [r7, #4]
 8010444:	681b      	ldr	r3, [r3, #0]
 8010446:	429a      	cmp	r2, r3
 8010448:	d103      	bne.n	8010452 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 801044a:	683b      	ldr	r3, [r7, #0]
 801044c:	681a      	ldr	r2, [r3, #0]
 801044e:	68fb      	ldr	r3, [r7, #12]
 8010450:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8010452:	68fb      	ldr	r3, [r7, #12]
 8010454:	68db      	ldr	r3, [r3, #12]
 8010456:	60fb      	str	r3, [r7, #12]
 8010458:	68fb      	ldr	r3, [r7, #12]
 801045a:	2b00      	cmp	r3, #0
 801045c:	d1ef      	bne.n	801043e <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 801045e:	bf00      	nop
 8010460:	3710      	adds	r7, #16
 8010462:	46bd      	mov	sp, r7
 8010464:	bd80      	pop	{r7, pc}
 8010466:	bf00      	nop
 8010468:	2000d288 	.word	0x2000d288
 801046c:	2000d294 	.word	0x2000d294
 8010470:	2000d290 	.word	0x2000d290

08010474 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8010474:	b580      	push	{r7, lr}
 8010476:	b082      	sub	sp, #8
 8010478:	af00      	add	r7, sp, #0
 801047a:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 801047c:	687b      	ldr	r3, [r7, #4]
 801047e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010480:	2b00      	cmp	r3, #0
 8010482:	d007      	beq.n	8010494 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8010484:	687b      	ldr	r3, [r7, #4]
 8010486:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010488:	4618      	mov	r0, r3
 801048a:	f7ff fb71 	bl	800fb70 <tcp_segs_free>
    pcb->ooseq = NULL;
 801048e:	687b      	ldr	r3, [r7, #4]
 8010490:	2200      	movs	r2, #0
 8010492:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8010494:	bf00      	nop
 8010496:	3708      	adds	r7, #8
 8010498:	46bd      	mov	sp, r7
 801049a:	bd80      	pop	{r7, pc}

0801049c <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 801049c:	b590      	push	{r4, r7, lr}
 801049e:	b08d      	sub	sp, #52	; 0x34
 80104a0:	af04      	add	r7, sp, #16
 80104a2:	6078      	str	r0, [r7, #4]
 80104a4:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 80104a6:	687b      	ldr	r3, [r7, #4]
 80104a8:	2b00      	cmp	r3, #0
 80104aa:	d105      	bne.n	80104b8 <tcp_input+0x1c>
 80104ac:	4b9b      	ldr	r3, [pc, #620]	; (801071c <tcp_input+0x280>)
 80104ae:	2283      	movs	r2, #131	; 0x83
 80104b0:	499b      	ldr	r1, [pc, #620]	; (8010720 <tcp_input+0x284>)
 80104b2:	489c      	ldr	r0, [pc, #624]	; (8010724 <tcp_input+0x288>)
 80104b4:	f007 f880 	bl	80175b8 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 80104b8:	687b      	ldr	r3, [r7, #4]
 80104ba:	685b      	ldr	r3, [r3, #4]
 80104bc:	4a9a      	ldr	r2, [pc, #616]	; (8010728 <tcp_input+0x28c>)
 80104be:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 80104c0:	687b      	ldr	r3, [r7, #4]
 80104c2:	895b      	ldrh	r3, [r3, #10]
 80104c4:	2b13      	cmp	r3, #19
 80104c6:	f240 83c4 	bls.w	8010c52 <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80104ca:	4b98      	ldr	r3, [pc, #608]	; (801072c <tcp_input+0x290>)
 80104cc:	695a      	ldr	r2, [r3, #20]
 80104ce:	4b97      	ldr	r3, [pc, #604]	; (801072c <tcp_input+0x290>)
 80104d0:	681b      	ldr	r3, [r3, #0]
 80104d2:	4619      	mov	r1, r3
 80104d4:	4610      	mov	r0, r2
 80104d6:	f005 fee7 	bl	80162a8 <ip4_addr_isbroadcast_u32>
 80104da:	4603      	mov	r3, r0
 80104dc:	2b00      	cmp	r3, #0
 80104de:	f040 83ba 	bne.w	8010c56 <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 80104e2:	4b92      	ldr	r3, [pc, #584]	; (801072c <tcp_input+0x290>)
 80104e4:	695b      	ldr	r3, [r3, #20]
 80104e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80104ea:	2be0      	cmp	r3, #224	; 0xe0
 80104ec:	f000 83b3 	beq.w	8010c56 <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 80104f0:	4b8d      	ldr	r3, [pc, #564]	; (8010728 <tcp_input+0x28c>)
 80104f2:	681b      	ldr	r3, [r3, #0]
 80104f4:	899b      	ldrh	r3, [r3, #12]
 80104f6:	b29b      	uxth	r3, r3
 80104f8:	4618      	mov	r0, r3
 80104fa:	f7fc fb03 	bl	800cb04 <lwip_htons>
 80104fe:	4603      	mov	r3, r0
 8010500:	0b1b      	lsrs	r3, r3, #12
 8010502:	b29b      	uxth	r3, r3
 8010504:	b2db      	uxtb	r3, r3
 8010506:	009b      	lsls	r3, r3, #2
 8010508:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 801050a:	7cbb      	ldrb	r3, [r7, #18]
 801050c:	2b13      	cmp	r3, #19
 801050e:	f240 83a2 	bls.w	8010c56 <tcp_input+0x7ba>
 8010512:	7cbb      	ldrb	r3, [r7, #18]
 8010514:	b29a      	uxth	r2, r3
 8010516:	687b      	ldr	r3, [r7, #4]
 8010518:	891b      	ldrh	r3, [r3, #8]
 801051a:	429a      	cmp	r2, r3
 801051c:	f200 839b 	bhi.w	8010c56 <tcp_input+0x7ba>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8010520:	7cbb      	ldrb	r3, [r7, #18]
 8010522:	b29b      	uxth	r3, r3
 8010524:	3b14      	subs	r3, #20
 8010526:	b29a      	uxth	r2, r3
 8010528:	4b81      	ldr	r3, [pc, #516]	; (8010730 <tcp_input+0x294>)
 801052a:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 801052c:	4b81      	ldr	r3, [pc, #516]	; (8010734 <tcp_input+0x298>)
 801052e:	2200      	movs	r2, #0
 8010530:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8010532:	687b      	ldr	r3, [r7, #4]
 8010534:	895a      	ldrh	r2, [r3, #10]
 8010536:	7cbb      	ldrb	r3, [r7, #18]
 8010538:	b29b      	uxth	r3, r3
 801053a:	429a      	cmp	r2, r3
 801053c:	d309      	bcc.n	8010552 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 801053e:	4b7c      	ldr	r3, [pc, #496]	; (8010730 <tcp_input+0x294>)
 8010540:	881a      	ldrh	r2, [r3, #0]
 8010542:	4b7d      	ldr	r3, [pc, #500]	; (8010738 <tcp_input+0x29c>)
 8010544:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8010546:	7cbb      	ldrb	r3, [r7, #18]
 8010548:	4619      	mov	r1, r3
 801054a:	6878      	ldr	r0, [r7, #4]
 801054c:	f7fd fdf6 	bl	800e13c <pbuf_remove_header>
 8010550:	e04e      	b.n	80105f0 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8010552:	687b      	ldr	r3, [r7, #4]
 8010554:	681b      	ldr	r3, [r3, #0]
 8010556:	2b00      	cmp	r3, #0
 8010558:	d105      	bne.n	8010566 <tcp_input+0xca>
 801055a:	4b70      	ldr	r3, [pc, #448]	; (801071c <tcp_input+0x280>)
 801055c:	22c2      	movs	r2, #194	; 0xc2
 801055e:	4977      	ldr	r1, [pc, #476]	; (801073c <tcp_input+0x2a0>)
 8010560:	4870      	ldr	r0, [pc, #448]	; (8010724 <tcp_input+0x288>)
 8010562:	f007 f829 	bl	80175b8 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8010566:	2114      	movs	r1, #20
 8010568:	6878      	ldr	r0, [r7, #4]
 801056a:	f7fd fde7 	bl	800e13c <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 801056e:	687b      	ldr	r3, [r7, #4]
 8010570:	895a      	ldrh	r2, [r3, #10]
 8010572:	4b71      	ldr	r3, [pc, #452]	; (8010738 <tcp_input+0x29c>)
 8010574:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8010576:	4b6e      	ldr	r3, [pc, #440]	; (8010730 <tcp_input+0x294>)
 8010578:	881a      	ldrh	r2, [r3, #0]
 801057a:	4b6f      	ldr	r3, [pc, #444]	; (8010738 <tcp_input+0x29c>)
 801057c:	881b      	ldrh	r3, [r3, #0]
 801057e:	1ad3      	subs	r3, r2, r3
 8010580:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8010582:	4b6d      	ldr	r3, [pc, #436]	; (8010738 <tcp_input+0x29c>)
 8010584:	881b      	ldrh	r3, [r3, #0]
 8010586:	4619      	mov	r1, r3
 8010588:	6878      	ldr	r0, [r7, #4]
 801058a:	f7fd fdd7 	bl	800e13c <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 801058e:	687b      	ldr	r3, [r7, #4]
 8010590:	681b      	ldr	r3, [r3, #0]
 8010592:	895b      	ldrh	r3, [r3, #10]
 8010594:	8a3a      	ldrh	r2, [r7, #16]
 8010596:	429a      	cmp	r2, r3
 8010598:	f200 835f 	bhi.w	8010c5a <tcp_input+0x7be>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 801059c:	687b      	ldr	r3, [r7, #4]
 801059e:	681b      	ldr	r3, [r3, #0]
 80105a0:	685b      	ldr	r3, [r3, #4]
 80105a2:	4a64      	ldr	r2, [pc, #400]	; (8010734 <tcp_input+0x298>)
 80105a4:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 80105a6:	687b      	ldr	r3, [r7, #4]
 80105a8:	681b      	ldr	r3, [r3, #0]
 80105aa:	8a3a      	ldrh	r2, [r7, #16]
 80105ac:	4611      	mov	r1, r2
 80105ae:	4618      	mov	r0, r3
 80105b0:	f7fd fdc4 	bl	800e13c <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 80105b4:	687b      	ldr	r3, [r7, #4]
 80105b6:	891a      	ldrh	r2, [r3, #8]
 80105b8:	8a3b      	ldrh	r3, [r7, #16]
 80105ba:	1ad3      	subs	r3, r2, r3
 80105bc:	b29a      	uxth	r2, r3
 80105be:	687b      	ldr	r3, [r7, #4]
 80105c0:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 80105c2:	687b      	ldr	r3, [r7, #4]
 80105c4:	895b      	ldrh	r3, [r3, #10]
 80105c6:	2b00      	cmp	r3, #0
 80105c8:	d005      	beq.n	80105d6 <tcp_input+0x13a>
 80105ca:	4b54      	ldr	r3, [pc, #336]	; (801071c <tcp_input+0x280>)
 80105cc:	22df      	movs	r2, #223	; 0xdf
 80105ce:	495c      	ldr	r1, [pc, #368]	; (8010740 <tcp_input+0x2a4>)
 80105d0:	4854      	ldr	r0, [pc, #336]	; (8010724 <tcp_input+0x288>)
 80105d2:	f006 fff1 	bl	80175b8 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 80105d6:	687b      	ldr	r3, [r7, #4]
 80105d8:	891a      	ldrh	r2, [r3, #8]
 80105da:	687b      	ldr	r3, [r7, #4]
 80105dc:	681b      	ldr	r3, [r3, #0]
 80105de:	891b      	ldrh	r3, [r3, #8]
 80105e0:	429a      	cmp	r2, r3
 80105e2:	d005      	beq.n	80105f0 <tcp_input+0x154>
 80105e4:	4b4d      	ldr	r3, [pc, #308]	; (801071c <tcp_input+0x280>)
 80105e6:	22e0      	movs	r2, #224	; 0xe0
 80105e8:	4956      	ldr	r1, [pc, #344]	; (8010744 <tcp_input+0x2a8>)
 80105ea:	484e      	ldr	r0, [pc, #312]	; (8010724 <tcp_input+0x288>)
 80105ec:	f006 ffe4 	bl	80175b8 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 80105f0:	4b4d      	ldr	r3, [pc, #308]	; (8010728 <tcp_input+0x28c>)
 80105f2:	681b      	ldr	r3, [r3, #0]
 80105f4:	881b      	ldrh	r3, [r3, #0]
 80105f6:	b29a      	uxth	r2, r3
 80105f8:	4b4b      	ldr	r3, [pc, #300]	; (8010728 <tcp_input+0x28c>)
 80105fa:	681c      	ldr	r4, [r3, #0]
 80105fc:	4610      	mov	r0, r2
 80105fe:	f7fc fa81 	bl	800cb04 <lwip_htons>
 8010602:	4603      	mov	r3, r0
 8010604:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8010606:	4b48      	ldr	r3, [pc, #288]	; (8010728 <tcp_input+0x28c>)
 8010608:	681b      	ldr	r3, [r3, #0]
 801060a:	885b      	ldrh	r3, [r3, #2]
 801060c:	b29a      	uxth	r2, r3
 801060e:	4b46      	ldr	r3, [pc, #280]	; (8010728 <tcp_input+0x28c>)
 8010610:	681c      	ldr	r4, [r3, #0]
 8010612:	4610      	mov	r0, r2
 8010614:	f7fc fa76 	bl	800cb04 <lwip_htons>
 8010618:	4603      	mov	r3, r0
 801061a:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 801061c:	4b42      	ldr	r3, [pc, #264]	; (8010728 <tcp_input+0x28c>)
 801061e:	681b      	ldr	r3, [r3, #0]
 8010620:	685a      	ldr	r2, [r3, #4]
 8010622:	4b41      	ldr	r3, [pc, #260]	; (8010728 <tcp_input+0x28c>)
 8010624:	681c      	ldr	r4, [r3, #0]
 8010626:	4610      	mov	r0, r2
 8010628:	f7fc fa81 	bl	800cb2e <lwip_htonl>
 801062c:	4603      	mov	r3, r0
 801062e:	6063      	str	r3, [r4, #4]
 8010630:	6863      	ldr	r3, [r4, #4]
 8010632:	4a45      	ldr	r2, [pc, #276]	; (8010748 <tcp_input+0x2ac>)
 8010634:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8010636:	4b3c      	ldr	r3, [pc, #240]	; (8010728 <tcp_input+0x28c>)
 8010638:	681b      	ldr	r3, [r3, #0]
 801063a:	689a      	ldr	r2, [r3, #8]
 801063c:	4b3a      	ldr	r3, [pc, #232]	; (8010728 <tcp_input+0x28c>)
 801063e:	681c      	ldr	r4, [r3, #0]
 8010640:	4610      	mov	r0, r2
 8010642:	f7fc fa74 	bl	800cb2e <lwip_htonl>
 8010646:	4603      	mov	r3, r0
 8010648:	60a3      	str	r3, [r4, #8]
 801064a:	68a3      	ldr	r3, [r4, #8]
 801064c:	4a3f      	ldr	r2, [pc, #252]	; (801074c <tcp_input+0x2b0>)
 801064e:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8010650:	4b35      	ldr	r3, [pc, #212]	; (8010728 <tcp_input+0x28c>)
 8010652:	681b      	ldr	r3, [r3, #0]
 8010654:	89db      	ldrh	r3, [r3, #14]
 8010656:	b29a      	uxth	r2, r3
 8010658:	4b33      	ldr	r3, [pc, #204]	; (8010728 <tcp_input+0x28c>)
 801065a:	681c      	ldr	r4, [r3, #0]
 801065c:	4610      	mov	r0, r2
 801065e:	f7fc fa51 	bl	800cb04 <lwip_htons>
 8010662:	4603      	mov	r3, r0
 8010664:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8010666:	4b30      	ldr	r3, [pc, #192]	; (8010728 <tcp_input+0x28c>)
 8010668:	681b      	ldr	r3, [r3, #0]
 801066a:	899b      	ldrh	r3, [r3, #12]
 801066c:	b29b      	uxth	r3, r3
 801066e:	4618      	mov	r0, r3
 8010670:	f7fc fa48 	bl	800cb04 <lwip_htons>
 8010674:	4603      	mov	r3, r0
 8010676:	b2db      	uxtb	r3, r3
 8010678:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801067c:	b2da      	uxtb	r2, r3
 801067e:	4b34      	ldr	r3, [pc, #208]	; (8010750 <tcp_input+0x2b4>)
 8010680:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8010682:	687b      	ldr	r3, [r7, #4]
 8010684:	891a      	ldrh	r2, [r3, #8]
 8010686:	4b33      	ldr	r3, [pc, #204]	; (8010754 <tcp_input+0x2b8>)
 8010688:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 801068a:	4b31      	ldr	r3, [pc, #196]	; (8010750 <tcp_input+0x2b4>)
 801068c:	781b      	ldrb	r3, [r3, #0]
 801068e:	f003 0303 	and.w	r3, r3, #3
 8010692:	2b00      	cmp	r3, #0
 8010694:	d00c      	beq.n	80106b0 <tcp_input+0x214>
    tcplen++;
 8010696:	4b2f      	ldr	r3, [pc, #188]	; (8010754 <tcp_input+0x2b8>)
 8010698:	881b      	ldrh	r3, [r3, #0]
 801069a:	3301      	adds	r3, #1
 801069c:	b29a      	uxth	r2, r3
 801069e:	4b2d      	ldr	r3, [pc, #180]	; (8010754 <tcp_input+0x2b8>)
 80106a0:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 80106a2:	687b      	ldr	r3, [r7, #4]
 80106a4:	891a      	ldrh	r2, [r3, #8]
 80106a6:	4b2b      	ldr	r3, [pc, #172]	; (8010754 <tcp_input+0x2b8>)
 80106a8:	881b      	ldrh	r3, [r3, #0]
 80106aa:	429a      	cmp	r2, r3
 80106ac:	f200 82d7 	bhi.w	8010c5e <tcp_input+0x7c2>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 80106b0:	2300      	movs	r3, #0
 80106b2:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80106b4:	4b28      	ldr	r3, [pc, #160]	; (8010758 <tcp_input+0x2bc>)
 80106b6:	681b      	ldr	r3, [r3, #0]
 80106b8:	61fb      	str	r3, [r7, #28]
 80106ba:	e09d      	b.n	80107f8 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 80106bc:	69fb      	ldr	r3, [r7, #28]
 80106be:	7d1b      	ldrb	r3, [r3, #20]
 80106c0:	2b00      	cmp	r3, #0
 80106c2:	d105      	bne.n	80106d0 <tcp_input+0x234>
 80106c4:	4b15      	ldr	r3, [pc, #84]	; (801071c <tcp_input+0x280>)
 80106c6:	22fb      	movs	r2, #251	; 0xfb
 80106c8:	4924      	ldr	r1, [pc, #144]	; (801075c <tcp_input+0x2c0>)
 80106ca:	4816      	ldr	r0, [pc, #88]	; (8010724 <tcp_input+0x288>)
 80106cc:	f006 ff74 	bl	80175b8 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 80106d0:	69fb      	ldr	r3, [r7, #28]
 80106d2:	7d1b      	ldrb	r3, [r3, #20]
 80106d4:	2b0a      	cmp	r3, #10
 80106d6:	d105      	bne.n	80106e4 <tcp_input+0x248>
 80106d8:	4b10      	ldr	r3, [pc, #64]	; (801071c <tcp_input+0x280>)
 80106da:	22fc      	movs	r2, #252	; 0xfc
 80106dc:	4920      	ldr	r1, [pc, #128]	; (8010760 <tcp_input+0x2c4>)
 80106de:	4811      	ldr	r0, [pc, #68]	; (8010724 <tcp_input+0x288>)
 80106e0:	f006 ff6a 	bl	80175b8 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 80106e4:	69fb      	ldr	r3, [r7, #28]
 80106e6:	7d1b      	ldrb	r3, [r3, #20]
 80106e8:	2b01      	cmp	r3, #1
 80106ea:	d105      	bne.n	80106f8 <tcp_input+0x25c>
 80106ec:	4b0b      	ldr	r3, [pc, #44]	; (801071c <tcp_input+0x280>)
 80106ee:	22fd      	movs	r2, #253	; 0xfd
 80106f0:	491c      	ldr	r1, [pc, #112]	; (8010764 <tcp_input+0x2c8>)
 80106f2:	480c      	ldr	r0, [pc, #48]	; (8010724 <tcp_input+0x288>)
 80106f4:	f006 ff60 	bl	80175b8 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80106f8:	69fb      	ldr	r3, [r7, #28]
 80106fa:	7a1b      	ldrb	r3, [r3, #8]
 80106fc:	2b00      	cmp	r3, #0
 80106fe:	d033      	beq.n	8010768 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8010700:	69fb      	ldr	r3, [r7, #28]
 8010702:	7a1a      	ldrb	r2, [r3, #8]
 8010704:	4b09      	ldr	r3, [pc, #36]	; (801072c <tcp_input+0x290>)
 8010706:	685b      	ldr	r3, [r3, #4]
 8010708:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801070c:	3301      	adds	r3, #1
 801070e:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010710:	429a      	cmp	r2, r3
 8010712:	d029      	beq.n	8010768 <tcp_input+0x2cc>
      prev = pcb;
 8010714:	69fb      	ldr	r3, [r7, #28]
 8010716:	61bb      	str	r3, [r7, #24]
      continue;
 8010718:	e06b      	b.n	80107f2 <tcp_input+0x356>
 801071a:	bf00      	nop
 801071c:	0801a494 	.word	0x0801a494
 8010720:	0801a4c8 	.word	0x0801a4c8
 8010724:	0801a4e0 	.word	0x0801a4e0
 8010728:	20004658 	.word	0x20004658
 801072c:	20007a38 	.word	0x20007a38
 8010730:	2000465c 	.word	0x2000465c
 8010734:	20004660 	.word	0x20004660
 8010738:	2000465e 	.word	0x2000465e
 801073c:	0801a508 	.word	0x0801a508
 8010740:	0801a518 	.word	0x0801a518
 8010744:	0801a524 	.word	0x0801a524
 8010748:	20004668 	.word	0x20004668
 801074c:	2000466c 	.word	0x2000466c
 8010750:	20004674 	.word	0x20004674
 8010754:	20004672 	.word	0x20004672
 8010758:	2000d288 	.word	0x2000d288
 801075c:	0801a544 	.word	0x0801a544
 8010760:	0801a56c 	.word	0x0801a56c
 8010764:	0801a598 	.word	0x0801a598
    }

    if (pcb->remote_port == tcphdr->src &&
 8010768:	69fb      	ldr	r3, [r7, #28]
 801076a:	8b1a      	ldrh	r2, [r3, #24]
 801076c:	4b94      	ldr	r3, [pc, #592]	; (80109c0 <tcp_input+0x524>)
 801076e:	681b      	ldr	r3, [r3, #0]
 8010770:	881b      	ldrh	r3, [r3, #0]
 8010772:	b29b      	uxth	r3, r3
 8010774:	429a      	cmp	r2, r3
 8010776:	d13a      	bne.n	80107ee <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8010778:	69fb      	ldr	r3, [r7, #28]
 801077a:	8ada      	ldrh	r2, [r3, #22]
 801077c:	4b90      	ldr	r3, [pc, #576]	; (80109c0 <tcp_input+0x524>)
 801077e:	681b      	ldr	r3, [r3, #0]
 8010780:	885b      	ldrh	r3, [r3, #2]
 8010782:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8010784:	429a      	cmp	r2, r3
 8010786:	d132      	bne.n	80107ee <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8010788:	69fb      	ldr	r3, [r7, #28]
 801078a:	685a      	ldr	r2, [r3, #4]
 801078c:	4b8d      	ldr	r3, [pc, #564]	; (80109c4 <tcp_input+0x528>)
 801078e:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8010790:	429a      	cmp	r2, r3
 8010792:	d12c      	bne.n	80107ee <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8010794:	69fb      	ldr	r3, [r7, #28]
 8010796:	681a      	ldr	r2, [r3, #0]
 8010798:	4b8a      	ldr	r3, [pc, #552]	; (80109c4 <tcp_input+0x528>)
 801079a:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801079c:	429a      	cmp	r2, r3
 801079e:	d126      	bne.n	80107ee <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 80107a0:	69fb      	ldr	r3, [r7, #28]
 80107a2:	68db      	ldr	r3, [r3, #12]
 80107a4:	69fa      	ldr	r2, [r7, #28]
 80107a6:	429a      	cmp	r2, r3
 80107a8:	d106      	bne.n	80107b8 <tcp_input+0x31c>
 80107aa:	4b87      	ldr	r3, [pc, #540]	; (80109c8 <tcp_input+0x52c>)
 80107ac:	f240 120d 	movw	r2, #269	; 0x10d
 80107b0:	4986      	ldr	r1, [pc, #536]	; (80109cc <tcp_input+0x530>)
 80107b2:	4887      	ldr	r0, [pc, #540]	; (80109d0 <tcp_input+0x534>)
 80107b4:	f006 ff00 	bl	80175b8 <iprintf>
      if (prev != NULL) {
 80107b8:	69bb      	ldr	r3, [r7, #24]
 80107ba:	2b00      	cmp	r3, #0
 80107bc:	d00a      	beq.n	80107d4 <tcp_input+0x338>
        prev->next = pcb->next;
 80107be:	69fb      	ldr	r3, [r7, #28]
 80107c0:	68da      	ldr	r2, [r3, #12]
 80107c2:	69bb      	ldr	r3, [r7, #24]
 80107c4:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 80107c6:	4b83      	ldr	r3, [pc, #524]	; (80109d4 <tcp_input+0x538>)
 80107c8:	681a      	ldr	r2, [r3, #0]
 80107ca:	69fb      	ldr	r3, [r7, #28]
 80107cc:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 80107ce:	4a81      	ldr	r2, [pc, #516]	; (80109d4 <tcp_input+0x538>)
 80107d0:	69fb      	ldr	r3, [r7, #28]
 80107d2:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 80107d4:	69fb      	ldr	r3, [r7, #28]
 80107d6:	68db      	ldr	r3, [r3, #12]
 80107d8:	69fa      	ldr	r2, [r7, #28]
 80107da:	429a      	cmp	r2, r3
 80107dc:	d111      	bne.n	8010802 <tcp_input+0x366>
 80107de:	4b7a      	ldr	r3, [pc, #488]	; (80109c8 <tcp_input+0x52c>)
 80107e0:	f240 1215 	movw	r2, #277	; 0x115
 80107e4:	497c      	ldr	r1, [pc, #496]	; (80109d8 <tcp_input+0x53c>)
 80107e6:	487a      	ldr	r0, [pc, #488]	; (80109d0 <tcp_input+0x534>)
 80107e8:	f006 fee6 	bl	80175b8 <iprintf>
      break;
 80107ec:	e009      	b.n	8010802 <tcp_input+0x366>
    }
    prev = pcb;
 80107ee:	69fb      	ldr	r3, [r7, #28]
 80107f0:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80107f2:	69fb      	ldr	r3, [r7, #28]
 80107f4:	68db      	ldr	r3, [r3, #12]
 80107f6:	61fb      	str	r3, [r7, #28]
 80107f8:	69fb      	ldr	r3, [r7, #28]
 80107fa:	2b00      	cmp	r3, #0
 80107fc:	f47f af5e 	bne.w	80106bc <tcp_input+0x220>
 8010800:	e000      	b.n	8010804 <tcp_input+0x368>
      break;
 8010802:	bf00      	nop
  }

  if (pcb == NULL) {
 8010804:	69fb      	ldr	r3, [r7, #28]
 8010806:	2b00      	cmp	r3, #0
 8010808:	f040 8095 	bne.w	8010936 <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801080c:	4b73      	ldr	r3, [pc, #460]	; (80109dc <tcp_input+0x540>)
 801080e:	681b      	ldr	r3, [r3, #0]
 8010810:	61fb      	str	r3, [r7, #28]
 8010812:	e03f      	b.n	8010894 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8010814:	69fb      	ldr	r3, [r7, #28]
 8010816:	7d1b      	ldrb	r3, [r3, #20]
 8010818:	2b0a      	cmp	r3, #10
 801081a:	d006      	beq.n	801082a <tcp_input+0x38e>
 801081c:	4b6a      	ldr	r3, [pc, #424]	; (80109c8 <tcp_input+0x52c>)
 801081e:	f240 121f 	movw	r2, #287	; 0x11f
 8010822:	496f      	ldr	r1, [pc, #444]	; (80109e0 <tcp_input+0x544>)
 8010824:	486a      	ldr	r0, [pc, #424]	; (80109d0 <tcp_input+0x534>)
 8010826:	f006 fec7 	bl	80175b8 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801082a:	69fb      	ldr	r3, [r7, #28]
 801082c:	7a1b      	ldrb	r3, [r3, #8]
 801082e:	2b00      	cmp	r3, #0
 8010830:	d009      	beq.n	8010846 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8010832:	69fb      	ldr	r3, [r7, #28]
 8010834:	7a1a      	ldrb	r2, [r3, #8]
 8010836:	4b63      	ldr	r3, [pc, #396]	; (80109c4 <tcp_input+0x528>)
 8010838:	685b      	ldr	r3, [r3, #4]
 801083a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801083e:	3301      	adds	r3, #1
 8010840:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010842:	429a      	cmp	r2, r3
 8010844:	d122      	bne.n	801088c <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8010846:	69fb      	ldr	r3, [r7, #28]
 8010848:	8b1a      	ldrh	r2, [r3, #24]
 801084a:	4b5d      	ldr	r3, [pc, #372]	; (80109c0 <tcp_input+0x524>)
 801084c:	681b      	ldr	r3, [r3, #0]
 801084e:	881b      	ldrh	r3, [r3, #0]
 8010850:	b29b      	uxth	r3, r3
 8010852:	429a      	cmp	r2, r3
 8010854:	d11b      	bne.n	801088e <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8010856:	69fb      	ldr	r3, [r7, #28]
 8010858:	8ada      	ldrh	r2, [r3, #22]
 801085a:	4b59      	ldr	r3, [pc, #356]	; (80109c0 <tcp_input+0x524>)
 801085c:	681b      	ldr	r3, [r3, #0]
 801085e:	885b      	ldrh	r3, [r3, #2]
 8010860:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8010862:	429a      	cmp	r2, r3
 8010864:	d113      	bne.n	801088e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8010866:	69fb      	ldr	r3, [r7, #28]
 8010868:	685a      	ldr	r2, [r3, #4]
 801086a:	4b56      	ldr	r3, [pc, #344]	; (80109c4 <tcp_input+0x528>)
 801086c:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 801086e:	429a      	cmp	r2, r3
 8010870:	d10d      	bne.n	801088e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8010872:	69fb      	ldr	r3, [r7, #28]
 8010874:	681a      	ldr	r2, [r3, #0]
 8010876:	4b53      	ldr	r3, [pc, #332]	; (80109c4 <tcp_input+0x528>)
 8010878:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801087a:	429a      	cmp	r2, r3
 801087c:	d107      	bne.n	801088e <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 801087e:	69f8      	ldr	r0, [r7, #28]
 8010880:	f000 fb52 	bl	8010f28 <tcp_timewait_input>
        }
        pbuf_free(p);
 8010884:	6878      	ldr	r0, [r7, #4]
 8010886:	f7fd fd11 	bl	800e2ac <pbuf_free>
        return;
 801088a:	e1ee      	b.n	8010c6a <tcp_input+0x7ce>
        continue;
 801088c:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801088e:	69fb      	ldr	r3, [r7, #28]
 8010890:	68db      	ldr	r3, [r3, #12]
 8010892:	61fb      	str	r3, [r7, #28]
 8010894:	69fb      	ldr	r3, [r7, #28]
 8010896:	2b00      	cmp	r3, #0
 8010898:	d1bc      	bne.n	8010814 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 801089a:	2300      	movs	r3, #0
 801089c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801089e:	4b51      	ldr	r3, [pc, #324]	; (80109e4 <tcp_input+0x548>)
 80108a0:	681b      	ldr	r3, [r3, #0]
 80108a2:	617b      	str	r3, [r7, #20]
 80108a4:	e02a      	b.n	80108fc <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 80108a6:	697b      	ldr	r3, [r7, #20]
 80108a8:	7a1b      	ldrb	r3, [r3, #8]
 80108aa:	2b00      	cmp	r3, #0
 80108ac:	d00c      	beq.n	80108c8 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80108ae:	697b      	ldr	r3, [r7, #20]
 80108b0:	7a1a      	ldrb	r2, [r3, #8]
 80108b2:	4b44      	ldr	r3, [pc, #272]	; (80109c4 <tcp_input+0x528>)
 80108b4:	685b      	ldr	r3, [r3, #4]
 80108b6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80108ba:	3301      	adds	r3, #1
 80108bc:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 80108be:	429a      	cmp	r2, r3
 80108c0:	d002      	beq.n	80108c8 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 80108c2:	697b      	ldr	r3, [r7, #20]
 80108c4:	61bb      	str	r3, [r7, #24]
        continue;
 80108c6:	e016      	b.n	80108f6 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 80108c8:	697b      	ldr	r3, [r7, #20]
 80108ca:	8ada      	ldrh	r2, [r3, #22]
 80108cc:	4b3c      	ldr	r3, [pc, #240]	; (80109c0 <tcp_input+0x524>)
 80108ce:	681b      	ldr	r3, [r3, #0]
 80108d0:	885b      	ldrh	r3, [r3, #2]
 80108d2:	b29b      	uxth	r3, r3
 80108d4:	429a      	cmp	r2, r3
 80108d6:	d10c      	bne.n	80108f2 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 80108d8:	697b      	ldr	r3, [r7, #20]
 80108da:	681a      	ldr	r2, [r3, #0]
 80108dc:	4b39      	ldr	r3, [pc, #228]	; (80109c4 <tcp_input+0x528>)
 80108de:	695b      	ldr	r3, [r3, #20]
 80108e0:	429a      	cmp	r2, r3
 80108e2:	d00f      	beq.n	8010904 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 80108e4:	697b      	ldr	r3, [r7, #20]
 80108e6:	2b00      	cmp	r3, #0
 80108e8:	d00d      	beq.n	8010906 <tcp_input+0x46a>
 80108ea:	697b      	ldr	r3, [r7, #20]
 80108ec:	681b      	ldr	r3, [r3, #0]
 80108ee:	2b00      	cmp	r3, #0
 80108f0:	d009      	beq.n	8010906 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 80108f2:	697b      	ldr	r3, [r7, #20]
 80108f4:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80108f6:	697b      	ldr	r3, [r7, #20]
 80108f8:	68db      	ldr	r3, [r3, #12]
 80108fa:	617b      	str	r3, [r7, #20]
 80108fc:	697b      	ldr	r3, [r7, #20]
 80108fe:	2b00      	cmp	r3, #0
 8010900:	d1d1      	bne.n	80108a6 <tcp_input+0x40a>
 8010902:	e000      	b.n	8010906 <tcp_input+0x46a>
            break;
 8010904:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8010906:	697b      	ldr	r3, [r7, #20]
 8010908:	2b00      	cmp	r3, #0
 801090a:	d014      	beq.n	8010936 <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 801090c:	69bb      	ldr	r3, [r7, #24]
 801090e:	2b00      	cmp	r3, #0
 8010910:	d00a      	beq.n	8010928 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8010912:	697b      	ldr	r3, [r7, #20]
 8010914:	68da      	ldr	r2, [r3, #12]
 8010916:	69bb      	ldr	r3, [r7, #24]
 8010918:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 801091a:	4b32      	ldr	r3, [pc, #200]	; (80109e4 <tcp_input+0x548>)
 801091c:	681a      	ldr	r2, [r3, #0]
 801091e:	697b      	ldr	r3, [r7, #20]
 8010920:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8010922:	4a30      	ldr	r2, [pc, #192]	; (80109e4 <tcp_input+0x548>)
 8010924:	697b      	ldr	r3, [r7, #20]
 8010926:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8010928:	6978      	ldr	r0, [r7, #20]
 801092a:	f000 f9ff 	bl	8010d2c <tcp_listen_input>
      }
      pbuf_free(p);
 801092e:	6878      	ldr	r0, [r7, #4]
 8010930:	f7fd fcbc 	bl	800e2ac <pbuf_free>
      return;
 8010934:	e199      	b.n	8010c6a <tcp_input+0x7ce>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8010936:	69fb      	ldr	r3, [r7, #28]
 8010938:	2b00      	cmp	r3, #0
 801093a:	f000 8160 	beq.w	8010bfe <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 801093e:	4b2a      	ldr	r3, [pc, #168]	; (80109e8 <tcp_input+0x54c>)
 8010940:	2200      	movs	r2, #0
 8010942:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8010944:	687b      	ldr	r3, [r7, #4]
 8010946:	891a      	ldrh	r2, [r3, #8]
 8010948:	4b27      	ldr	r3, [pc, #156]	; (80109e8 <tcp_input+0x54c>)
 801094a:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 801094c:	4a26      	ldr	r2, [pc, #152]	; (80109e8 <tcp_input+0x54c>)
 801094e:	687b      	ldr	r3, [r7, #4]
 8010950:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8010952:	4b1b      	ldr	r3, [pc, #108]	; (80109c0 <tcp_input+0x524>)
 8010954:	681b      	ldr	r3, [r3, #0]
 8010956:	4a24      	ldr	r2, [pc, #144]	; (80109e8 <tcp_input+0x54c>)
 8010958:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 801095a:	4b24      	ldr	r3, [pc, #144]	; (80109ec <tcp_input+0x550>)
 801095c:	2200      	movs	r2, #0
 801095e:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8010960:	4b23      	ldr	r3, [pc, #140]	; (80109f0 <tcp_input+0x554>)
 8010962:	2200      	movs	r2, #0
 8010964:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8010966:	4b23      	ldr	r3, [pc, #140]	; (80109f4 <tcp_input+0x558>)
 8010968:	2200      	movs	r2, #0
 801096a:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 801096c:	4b22      	ldr	r3, [pc, #136]	; (80109f8 <tcp_input+0x55c>)
 801096e:	781b      	ldrb	r3, [r3, #0]
 8010970:	f003 0308 	and.w	r3, r3, #8
 8010974:	2b00      	cmp	r3, #0
 8010976:	d006      	beq.n	8010986 <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 8010978:	687b      	ldr	r3, [r7, #4]
 801097a:	7b5b      	ldrb	r3, [r3, #13]
 801097c:	f043 0301 	orr.w	r3, r3, #1
 8010980:	b2da      	uxtb	r2, r3
 8010982:	687b      	ldr	r3, [r7, #4]
 8010984:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8010986:	69fb      	ldr	r3, [r7, #28]
 8010988:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801098a:	2b00      	cmp	r3, #0
 801098c:	d038      	beq.n	8010a00 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 801098e:	69f8      	ldr	r0, [r7, #28]
 8010990:	f7ff f872 	bl	800fa78 <tcp_process_refused_data>
 8010994:	4603      	mov	r3, r0
 8010996:	f113 0f0d 	cmn.w	r3, #13
 801099a:	d007      	beq.n	80109ac <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 801099c:	69fb      	ldr	r3, [r7, #28]
 801099e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80109a0:	2b00      	cmp	r3, #0
 80109a2:	d02d      	beq.n	8010a00 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80109a4:	4b15      	ldr	r3, [pc, #84]	; (80109fc <tcp_input+0x560>)
 80109a6:	881b      	ldrh	r3, [r3, #0]
 80109a8:	2b00      	cmp	r3, #0
 80109aa:	d029      	beq.n	8010a00 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 80109ac:	69fb      	ldr	r3, [r7, #28]
 80109ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80109b0:	2b00      	cmp	r3, #0
 80109b2:	f040 8104 	bne.w	8010bbe <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 80109b6:	69f8      	ldr	r0, [r7, #28]
 80109b8:	f003 fe28 	bl	801460c <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 80109bc:	e0ff      	b.n	8010bbe <tcp_input+0x722>
 80109be:	bf00      	nop
 80109c0:	20004658 	.word	0x20004658
 80109c4:	20007a38 	.word	0x20007a38
 80109c8:	0801a494 	.word	0x0801a494
 80109cc:	0801a5c0 	.word	0x0801a5c0
 80109d0:	0801a4e0 	.word	0x0801a4e0
 80109d4:	2000d288 	.word	0x2000d288
 80109d8:	0801a5ec 	.word	0x0801a5ec
 80109dc:	2000d298 	.word	0x2000d298
 80109e0:	0801a618 	.word	0x0801a618
 80109e4:	2000d290 	.word	0x2000d290
 80109e8:	20004648 	.word	0x20004648
 80109ec:	20004678 	.word	0x20004678
 80109f0:	20004675 	.word	0x20004675
 80109f4:	20004670 	.word	0x20004670
 80109f8:	20004674 	.word	0x20004674
 80109fc:	20004672 	.word	0x20004672
      }
    }
    tcp_input_pcb = pcb;
 8010a00:	4a9b      	ldr	r2, [pc, #620]	; (8010c70 <tcp_input+0x7d4>)
 8010a02:	69fb      	ldr	r3, [r7, #28]
 8010a04:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8010a06:	69f8      	ldr	r0, [r7, #28]
 8010a08:	f000 fb0a 	bl	8011020 <tcp_process>
 8010a0c:	4603      	mov	r3, r0
 8010a0e:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8010a10:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010a14:	f113 0f0d 	cmn.w	r3, #13
 8010a18:	f000 80d3 	beq.w	8010bc2 <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 8010a1c:	4b95      	ldr	r3, [pc, #596]	; (8010c74 <tcp_input+0x7d8>)
 8010a1e:	781b      	ldrb	r3, [r3, #0]
 8010a20:	f003 0308 	and.w	r3, r3, #8
 8010a24:	2b00      	cmp	r3, #0
 8010a26:	d015      	beq.n	8010a54 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8010a28:	69fb      	ldr	r3, [r7, #28]
 8010a2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010a2e:	2b00      	cmp	r3, #0
 8010a30:	d008      	beq.n	8010a44 <tcp_input+0x5a8>
 8010a32:	69fb      	ldr	r3, [r7, #28]
 8010a34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010a38:	69fa      	ldr	r2, [r7, #28]
 8010a3a:	6912      	ldr	r2, [r2, #16]
 8010a3c:	f06f 010d 	mvn.w	r1, #13
 8010a40:	4610      	mov	r0, r2
 8010a42:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8010a44:	69f9      	ldr	r1, [r7, #28]
 8010a46:	488c      	ldr	r0, [pc, #560]	; (8010c78 <tcp_input+0x7dc>)
 8010a48:	f7ff fbb0 	bl	80101ac <tcp_pcb_remove>
        tcp_free(pcb);
 8010a4c:	69f8      	ldr	r0, [r7, #28]
 8010a4e:	f7fd fed9 	bl	800e804 <tcp_free>
 8010a52:	e0c1      	b.n	8010bd8 <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 8010a54:	2300      	movs	r3, #0
 8010a56:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8010a58:	4b88      	ldr	r3, [pc, #544]	; (8010c7c <tcp_input+0x7e0>)
 8010a5a:	881b      	ldrh	r3, [r3, #0]
 8010a5c:	2b00      	cmp	r3, #0
 8010a5e:	d01d      	beq.n	8010a9c <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8010a60:	4b86      	ldr	r3, [pc, #536]	; (8010c7c <tcp_input+0x7e0>)
 8010a62:	881b      	ldrh	r3, [r3, #0]
 8010a64:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8010a66:	69fb      	ldr	r3, [r7, #28]
 8010a68:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010a6c:	2b00      	cmp	r3, #0
 8010a6e:	d00a      	beq.n	8010a86 <tcp_input+0x5ea>
 8010a70:	69fb      	ldr	r3, [r7, #28]
 8010a72:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010a76:	69fa      	ldr	r2, [r7, #28]
 8010a78:	6910      	ldr	r0, [r2, #16]
 8010a7a:	89fa      	ldrh	r2, [r7, #14]
 8010a7c:	69f9      	ldr	r1, [r7, #28]
 8010a7e:	4798      	blx	r3
 8010a80:	4603      	mov	r3, r0
 8010a82:	74fb      	strb	r3, [r7, #19]
 8010a84:	e001      	b.n	8010a8a <tcp_input+0x5ee>
 8010a86:	2300      	movs	r3, #0
 8010a88:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8010a8a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010a8e:	f113 0f0d 	cmn.w	r3, #13
 8010a92:	f000 8098 	beq.w	8010bc6 <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 8010a96:	4b79      	ldr	r3, [pc, #484]	; (8010c7c <tcp_input+0x7e0>)
 8010a98:	2200      	movs	r2, #0
 8010a9a:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8010a9c:	69f8      	ldr	r0, [r7, #28]
 8010a9e:	f000 f905 	bl	8010cac <tcp_input_delayed_close>
 8010aa2:	4603      	mov	r3, r0
 8010aa4:	2b00      	cmp	r3, #0
 8010aa6:	f040 8090 	bne.w	8010bca <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8010aaa:	4b75      	ldr	r3, [pc, #468]	; (8010c80 <tcp_input+0x7e4>)
 8010aac:	681b      	ldr	r3, [r3, #0]
 8010aae:	2b00      	cmp	r3, #0
 8010ab0:	d041      	beq.n	8010b36 <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8010ab2:	69fb      	ldr	r3, [r7, #28]
 8010ab4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010ab6:	2b00      	cmp	r3, #0
 8010ab8:	d006      	beq.n	8010ac8 <tcp_input+0x62c>
 8010aba:	4b72      	ldr	r3, [pc, #456]	; (8010c84 <tcp_input+0x7e8>)
 8010abc:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8010ac0:	4971      	ldr	r1, [pc, #452]	; (8010c88 <tcp_input+0x7ec>)
 8010ac2:	4872      	ldr	r0, [pc, #456]	; (8010c8c <tcp_input+0x7f0>)
 8010ac4:	f006 fd78 	bl	80175b8 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8010ac8:	69fb      	ldr	r3, [r7, #28]
 8010aca:	8b5b      	ldrh	r3, [r3, #26]
 8010acc:	f003 0310 	and.w	r3, r3, #16
 8010ad0:	2b00      	cmp	r3, #0
 8010ad2:	d008      	beq.n	8010ae6 <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8010ad4:	4b6a      	ldr	r3, [pc, #424]	; (8010c80 <tcp_input+0x7e4>)
 8010ad6:	681b      	ldr	r3, [r3, #0]
 8010ad8:	4618      	mov	r0, r3
 8010ada:	f7fd fbe7 	bl	800e2ac <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8010ade:	69f8      	ldr	r0, [r7, #28]
 8010ae0:	f7fe f9ca 	bl	800ee78 <tcp_abort>
            goto aborted;
 8010ae4:	e078      	b.n	8010bd8 <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8010ae6:	69fb      	ldr	r3, [r7, #28]
 8010ae8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010aec:	2b00      	cmp	r3, #0
 8010aee:	d00c      	beq.n	8010b0a <tcp_input+0x66e>
 8010af0:	69fb      	ldr	r3, [r7, #28]
 8010af2:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8010af6:	69fb      	ldr	r3, [r7, #28]
 8010af8:	6918      	ldr	r0, [r3, #16]
 8010afa:	4b61      	ldr	r3, [pc, #388]	; (8010c80 <tcp_input+0x7e4>)
 8010afc:	681a      	ldr	r2, [r3, #0]
 8010afe:	2300      	movs	r3, #0
 8010b00:	69f9      	ldr	r1, [r7, #28]
 8010b02:	47a0      	blx	r4
 8010b04:	4603      	mov	r3, r0
 8010b06:	74fb      	strb	r3, [r7, #19]
 8010b08:	e008      	b.n	8010b1c <tcp_input+0x680>
 8010b0a:	4b5d      	ldr	r3, [pc, #372]	; (8010c80 <tcp_input+0x7e4>)
 8010b0c:	681a      	ldr	r2, [r3, #0]
 8010b0e:	2300      	movs	r3, #0
 8010b10:	69f9      	ldr	r1, [r7, #28]
 8010b12:	2000      	movs	r0, #0
 8010b14:	f7ff f884 	bl	800fc20 <tcp_recv_null>
 8010b18:	4603      	mov	r3, r0
 8010b1a:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8010b1c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010b20:	f113 0f0d 	cmn.w	r3, #13
 8010b24:	d053      	beq.n	8010bce <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8010b26:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010b2a:	2b00      	cmp	r3, #0
 8010b2c:	d003      	beq.n	8010b36 <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8010b2e:	4b54      	ldr	r3, [pc, #336]	; (8010c80 <tcp_input+0x7e4>)
 8010b30:	681a      	ldr	r2, [r3, #0]
 8010b32:	69fb      	ldr	r3, [r7, #28]
 8010b34:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8010b36:	4b4f      	ldr	r3, [pc, #316]	; (8010c74 <tcp_input+0x7d8>)
 8010b38:	781b      	ldrb	r3, [r3, #0]
 8010b3a:	f003 0320 	and.w	r3, r3, #32
 8010b3e:	2b00      	cmp	r3, #0
 8010b40:	d030      	beq.n	8010ba4 <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 8010b42:	69fb      	ldr	r3, [r7, #28]
 8010b44:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010b46:	2b00      	cmp	r3, #0
 8010b48:	d009      	beq.n	8010b5e <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8010b4a:	69fb      	ldr	r3, [r7, #28]
 8010b4c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010b4e:	7b5a      	ldrb	r2, [r3, #13]
 8010b50:	69fb      	ldr	r3, [r7, #28]
 8010b52:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010b54:	f042 0220 	orr.w	r2, r2, #32
 8010b58:	b2d2      	uxtb	r2, r2
 8010b5a:	735a      	strb	r2, [r3, #13]
 8010b5c:	e022      	b.n	8010ba4 <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8010b5e:	69fb      	ldr	r3, [r7, #28]
 8010b60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010b62:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8010b66:	d005      	beq.n	8010b74 <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 8010b68:	69fb      	ldr	r3, [r7, #28]
 8010b6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010b6c:	3301      	adds	r3, #1
 8010b6e:	b29a      	uxth	r2, r3
 8010b70:	69fb      	ldr	r3, [r7, #28]
 8010b72:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8010b74:	69fb      	ldr	r3, [r7, #28]
 8010b76:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010b7a:	2b00      	cmp	r3, #0
 8010b7c:	d00b      	beq.n	8010b96 <tcp_input+0x6fa>
 8010b7e:	69fb      	ldr	r3, [r7, #28]
 8010b80:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8010b84:	69fb      	ldr	r3, [r7, #28]
 8010b86:	6918      	ldr	r0, [r3, #16]
 8010b88:	2300      	movs	r3, #0
 8010b8a:	2200      	movs	r2, #0
 8010b8c:	69f9      	ldr	r1, [r7, #28]
 8010b8e:	47a0      	blx	r4
 8010b90:	4603      	mov	r3, r0
 8010b92:	74fb      	strb	r3, [r7, #19]
 8010b94:	e001      	b.n	8010b9a <tcp_input+0x6fe>
 8010b96:	2300      	movs	r3, #0
 8010b98:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8010b9a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010b9e:	f113 0f0d 	cmn.w	r3, #13
 8010ba2:	d016      	beq.n	8010bd2 <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8010ba4:	4b32      	ldr	r3, [pc, #200]	; (8010c70 <tcp_input+0x7d4>)
 8010ba6:	2200      	movs	r2, #0
 8010ba8:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8010baa:	69f8      	ldr	r0, [r7, #28]
 8010bac:	f000 f87e 	bl	8010cac <tcp_input_delayed_close>
 8010bb0:	4603      	mov	r3, r0
 8010bb2:	2b00      	cmp	r3, #0
 8010bb4:	d10f      	bne.n	8010bd6 <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8010bb6:	69f8      	ldr	r0, [r7, #28]
 8010bb8:	f002 ff10 	bl	80139dc <tcp_output>
 8010bbc:	e00c      	b.n	8010bd8 <tcp_input+0x73c>
        goto aborted;
 8010bbe:	bf00      	nop
 8010bc0:	e00a      	b.n	8010bd8 <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8010bc2:	bf00      	nop
 8010bc4:	e008      	b.n	8010bd8 <tcp_input+0x73c>
              goto aborted;
 8010bc6:	bf00      	nop
 8010bc8:	e006      	b.n	8010bd8 <tcp_input+0x73c>
          goto aborted;
 8010bca:	bf00      	nop
 8010bcc:	e004      	b.n	8010bd8 <tcp_input+0x73c>
            goto aborted;
 8010bce:	bf00      	nop
 8010bd0:	e002      	b.n	8010bd8 <tcp_input+0x73c>
              goto aborted;
 8010bd2:	bf00      	nop
 8010bd4:	e000      	b.n	8010bd8 <tcp_input+0x73c>
          goto aborted;
 8010bd6:	bf00      	nop
    tcp_input_pcb = NULL;
 8010bd8:	4b25      	ldr	r3, [pc, #148]	; (8010c70 <tcp_input+0x7d4>)
 8010bda:	2200      	movs	r2, #0
 8010bdc:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8010bde:	4b28      	ldr	r3, [pc, #160]	; (8010c80 <tcp_input+0x7e4>)
 8010be0:	2200      	movs	r2, #0
 8010be2:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8010be4:	4b2a      	ldr	r3, [pc, #168]	; (8010c90 <tcp_input+0x7f4>)
 8010be6:	685b      	ldr	r3, [r3, #4]
 8010be8:	2b00      	cmp	r3, #0
 8010bea:	d03d      	beq.n	8010c68 <tcp_input+0x7cc>
      pbuf_free(inseg.p);
 8010bec:	4b28      	ldr	r3, [pc, #160]	; (8010c90 <tcp_input+0x7f4>)
 8010bee:	685b      	ldr	r3, [r3, #4]
 8010bf0:	4618      	mov	r0, r3
 8010bf2:	f7fd fb5b 	bl	800e2ac <pbuf_free>
      inseg.p = NULL;
 8010bf6:	4b26      	ldr	r3, [pc, #152]	; (8010c90 <tcp_input+0x7f4>)
 8010bf8:	2200      	movs	r2, #0
 8010bfa:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8010bfc:	e034      	b.n	8010c68 <tcp_input+0x7cc>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8010bfe:	4b25      	ldr	r3, [pc, #148]	; (8010c94 <tcp_input+0x7f8>)
 8010c00:	681b      	ldr	r3, [r3, #0]
 8010c02:	899b      	ldrh	r3, [r3, #12]
 8010c04:	b29b      	uxth	r3, r3
 8010c06:	4618      	mov	r0, r3
 8010c08:	f7fb ff7c 	bl	800cb04 <lwip_htons>
 8010c0c:	4603      	mov	r3, r0
 8010c0e:	b2db      	uxtb	r3, r3
 8010c10:	f003 0304 	and.w	r3, r3, #4
 8010c14:	2b00      	cmp	r3, #0
 8010c16:	d118      	bne.n	8010c4a <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010c18:	4b1f      	ldr	r3, [pc, #124]	; (8010c98 <tcp_input+0x7fc>)
 8010c1a:	6819      	ldr	r1, [r3, #0]
 8010c1c:	4b1f      	ldr	r3, [pc, #124]	; (8010c9c <tcp_input+0x800>)
 8010c1e:	881b      	ldrh	r3, [r3, #0]
 8010c20:	461a      	mov	r2, r3
 8010c22:	4b1f      	ldr	r3, [pc, #124]	; (8010ca0 <tcp_input+0x804>)
 8010c24:	681b      	ldr	r3, [r3, #0]
 8010c26:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010c28:	4b1a      	ldr	r3, [pc, #104]	; (8010c94 <tcp_input+0x7f8>)
 8010c2a:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010c2c:	885b      	ldrh	r3, [r3, #2]
 8010c2e:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010c30:	4a18      	ldr	r2, [pc, #96]	; (8010c94 <tcp_input+0x7f8>)
 8010c32:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010c34:	8812      	ldrh	r2, [r2, #0]
 8010c36:	b292      	uxth	r2, r2
 8010c38:	9202      	str	r2, [sp, #8]
 8010c3a:	9301      	str	r3, [sp, #4]
 8010c3c:	4b19      	ldr	r3, [pc, #100]	; (8010ca4 <tcp_input+0x808>)
 8010c3e:	9300      	str	r3, [sp, #0]
 8010c40:	4b19      	ldr	r3, [pc, #100]	; (8010ca8 <tcp_input+0x80c>)
 8010c42:	4602      	mov	r2, r0
 8010c44:	2000      	movs	r0, #0
 8010c46:	f003 fc8f 	bl	8014568 <tcp_rst>
    pbuf_free(p);
 8010c4a:	6878      	ldr	r0, [r7, #4]
 8010c4c:	f7fd fb2e 	bl	800e2ac <pbuf_free>
  return;
 8010c50:	e00a      	b.n	8010c68 <tcp_input+0x7cc>
    goto dropped;
 8010c52:	bf00      	nop
 8010c54:	e004      	b.n	8010c60 <tcp_input+0x7c4>
dropped:
 8010c56:	bf00      	nop
 8010c58:	e002      	b.n	8010c60 <tcp_input+0x7c4>
      goto dropped;
 8010c5a:	bf00      	nop
 8010c5c:	e000      	b.n	8010c60 <tcp_input+0x7c4>
      goto dropped;
 8010c5e:	bf00      	nop
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8010c60:	6878      	ldr	r0, [r7, #4]
 8010c62:	f7fd fb23 	bl	800e2ac <pbuf_free>
 8010c66:	e000      	b.n	8010c6a <tcp_input+0x7ce>
  return;
 8010c68:	bf00      	nop
}
 8010c6a:	3724      	adds	r7, #36	; 0x24
 8010c6c:	46bd      	mov	sp, r7
 8010c6e:	bd90      	pop	{r4, r7, pc}
 8010c70:	2000d29c 	.word	0x2000d29c
 8010c74:	20004675 	.word	0x20004675
 8010c78:	2000d288 	.word	0x2000d288
 8010c7c:	20004670 	.word	0x20004670
 8010c80:	20004678 	.word	0x20004678
 8010c84:	0801a494 	.word	0x0801a494
 8010c88:	0801a648 	.word	0x0801a648
 8010c8c:	0801a4e0 	.word	0x0801a4e0
 8010c90:	20004648 	.word	0x20004648
 8010c94:	20004658 	.word	0x20004658
 8010c98:	2000466c 	.word	0x2000466c
 8010c9c:	20004672 	.word	0x20004672
 8010ca0:	20004668 	.word	0x20004668
 8010ca4:	20007a48 	.word	0x20007a48
 8010ca8:	20007a4c 	.word	0x20007a4c

08010cac <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8010cac:	b580      	push	{r7, lr}
 8010cae:	b082      	sub	sp, #8
 8010cb0:	af00      	add	r7, sp, #0
 8010cb2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8010cb4:	687b      	ldr	r3, [r7, #4]
 8010cb6:	2b00      	cmp	r3, #0
 8010cb8:	d106      	bne.n	8010cc8 <tcp_input_delayed_close+0x1c>
 8010cba:	4b17      	ldr	r3, [pc, #92]	; (8010d18 <tcp_input_delayed_close+0x6c>)
 8010cbc:	f240 225a 	movw	r2, #602	; 0x25a
 8010cc0:	4916      	ldr	r1, [pc, #88]	; (8010d1c <tcp_input_delayed_close+0x70>)
 8010cc2:	4817      	ldr	r0, [pc, #92]	; (8010d20 <tcp_input_delayed_close+0x74>)
 8010cc4:	f006 fc78 	bl	80175b8 <iprintf>

  if (recv_flags & TF_CLOSED) {
 8010cc8:	4b16      	ldr	r3, [pc, #88]	; (8010d24 <tcp_input_delayed_close+0x78>)
 8010cca:	781b      	ldrb	r3, [r3, #0]
 8010ccc:	f003 0310 	and.w	r3, r3, #16
 8010cd0:	2b00      	cmp	r3, #0
 8010cd2:	d01c      	beq.n	8010d0e <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8010cd4:	687b      	ldr	r3, [r7, #4]
 8010cd6:	8b5b      	ldrh	r3, [r3, #26]
 8010cd8:	f003 0310 	and.w	r3, r3, #16
 8010cdc:	2b00      	cmp	r3, #0
 8010cde:	d10d      	bne.n	8010cfc <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8010ce0:	687b      	ldr	r3, [r7, #4]
 8010ce2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010ce6:	2b00      	cmp	r3, #0
 8010ce8:	d008      	beq.n	8010cfc <tcp_input_delayed_close+0x50>
 8010cea:	687b      	ldr	r3, [r7, #4]
 8010cec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010cf0:	687a      	ldr	r2, [r7, #4]
 8010cf2:	6912      	ldr	r2, [r2, #16]
 8010cf4:	f06f 010e 	mvn.w	r1, #14
 8010cf8:	4610      	mov	r0, r2
 8010cfa:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8010cfc:	6879      	ldr	r1, [r7, #4]
 8010cfe:	480a      	ldr	r0, [pc, #40]	; (8010d28 <tcp_input_delayed_close+0x7c>)
 8010d00:	f7ff fa54 	bl	80101ac <tcp_pcb_remove>
    tcp_free(pcb);
 8010d04:	6878      	ldr	r0, [r7, #4]
 8010d06:	f7fd fd7d 	bl	800e804 <tcp_free>
    return 1;
 8010d0a:	2301      	movs	r3, #1
 8010d0c:	e000      	b.n	8010d10 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8010d0e:	2300      	movs	r3, #0
}
 8010d10:	4618      	mov	r0, r3
 8010d12:	3708      	adds	r7, #8
 8010d14:	46bd      	mov	sp, r7
 8010d16:	bd80      	pop	{r7, pc}
 8010d18:	0801a494 	.word	0x0801a494
 8010d1c:	0801a664 	.word	0x0801a664
 8010d20:	0801a4e0 	.word	0x0801a4e0
 8010d24:	20004675 	.word	0x20004675
 8010d28:	2000d288 	.word	0x2000d288

08010d2c <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8010d2c:	b590      	push	{r4, r7, lr}
 8010d2e:	b08b      	sub	sp, #44	; 0x2c
 8010d30:	af04      	add	r7, sp, #16
 8010d32:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8010d34:	4b6f      	ldr	r3, [pc, #444]	; (8010ef4 <tcp_listen_input+0x1c8>)
 8010d36:	781b      	ldrb	r3, [r3, #0]
 8010d38:	f003 0304 	and.w	r3, r3, #4
 8010d3c:	2b00      	cmp	r3, #0
 8010d3e:	f040 80d3 	bne.w	8010ee8 <tcp_listen_input+0x1bc>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8010d42:	687b      	ldr	r3, [r7, #4]
 8010d44:	2b00      	cmp	r3, #0
 8010d46:	d106      	bne.n	8010d56 <tcp_listen_input+0x2a>
 8010d48:	4b6b      	ldr	r3, [pc, #428]	; (8010ef8 <tcp_listen_input+0x1cc>)
 8010d4a:	f240 2281 	movw	r2, #641	; 0x281
 8010d4e:	496b      	ldr	r1, [pc, #428]	; (8010efc <tcp_listen_input+0x1d0>)
 8010d50:	486b      	ldr	r0, [pc, #428]	; (8010f00 <tcp_listen_input+0x1d4>)
 8010d52:	f006 fc31 	bl	80175b8 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8010d56:	4b67      	ldr	r3, [pc, #412]	; (8010ef4 <tcp_listen_input+0x1c8>)
 8010d58:	781b      	ldrb	r3, [r3, #0]
 8010d5a:	f003 0310 	and.w	r3, r3, #16
 8010d5e:	2b00      	cmp	r3, #0
 8010d60:	d019      	beq.n	8010d96 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010d62:	4b68      	ldr	r3, [pc, #416]	; (8010f04 <tcp_listen_input+0x1d8>)
 8010d64:	6819      	ldr	r1, [r3, #0]
 8010d66:	4b68      	ldr	r3, [pc, #416]	; (8010f08 <tcp_listen_input+0x1dc>)
 8010d68:	881b      	ldrh	r3, [r3, #0]
 8010d6a:	461a      	mov	r2, r3
 8010d6c:	4b67      	ldr	r3, [pc, #412]	; (8010f0c <tcp_listen_input+0x1e0>)
 8010d6e:	681b      	ldr	r3, [r3, #0]
 8010d70:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010d72:	4b67      	ldr	r3, [pc, #412]	; (8010f10 <tcp_listen_input+0x1e4>)
 8010d74:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010d76:	885b      	ldrh	r3, [r3, #2]
 8010d78:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010d7a:	4a65      	ldr	r2, [pc, #404]	; (8010f10 <tcp_listen_input+0x1e4>)
 8010d7c:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010d7e:	8812      	ldrh	r2, [r2, #0]
 8010d80:	b292      	uxth	r2, r2
 8010d82:	9202      	str	r2, [sp, #8]
 8010d84:	9301      	str	r3, [sp, #4]
 8010d86:	4b63      	ldr	r3, [pc, #396]	; (8010f14 <tcp_listen_input+0x1e8>)
 8010d88:	9300      	str	r3, [sp, #0]
 8010d8a:	4b63      	ldr	r3, [pc, #396]	; (8010f18 <tcp_listen_input+0x1ec>)
 8010d8c:	4602      	mov	r2, r0
 8010d8e:	6878      	ldr	r0, [r7, #4]
 8010d90:	f003 fbea 	bl	8014568 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8010d94:	e0aa      	b.n	8010eec <tcp_listen_input+0x1c0>
  } else if (flags & TCP_SYN) {
 8010d96:	4b57      	ldr	r3, [pc, #348]	; (8010ef4 <tcp_listen_input+0x1c8>)
 8010d98:	781b      	ldrb	r3, [r3, #0]
 8010d9a:	f003 0302 	and.w	r3, r3, #2
 8010d9e:	2b00      	cmp	r3, #0
 8010da0:	f000 80a4 	beq.w	8010eec <tcp_listen_input+0x1c0>
    npcb = tcp_alloc(pcb->prio);
 8010da4:	687b      	ldr	r3, [r7, #4]
 8010da6:	7d5b      	ldrb	r3, [r3, #21]
 8010da8:	4618      	mov	r0, r3
 8010daa:	f7ff f85d 	bl	800fe68 <tcp_alloc>
 8010dae:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8010db0:	697b      	ldr	r3, [r7, #20]
 8010db2:	2b00      	cmp	r3, #0
 8010db4:	d111      	bne.n	8010dda <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8010db6:	687b      	ldr	r3, [r7, #4]
 8010db8:	699b      	ldr	r3, [r3, #24]
 8010dba:	2b00      	cmp	r3, #0
 8010dbc:	d00a      	beq.n	8010dd4 <tcp_listen_input+0xa8>
 8010dbe:	687b      	ldr	r3, [r7, #4]
 8010dc0:	699b      	ldr	r3, [r3, #24]
 8010dc2:	687a      	ldr	r2, [r7, #4]
 8010dc4:	6910      	ldr	r0, [r2, #16]
 8010dc6:	f04f 32ff 	mov.w	r2, #4294967295
 8010dca:	2100      	movs	r1, #0
 8010dcc:	4798      	blx	r3
 8010dce:	4603      	mov	r3, r0
 8010dd0:	73bb      	strb	r3, [r7, #14]
      return;
 8010dd2:	e08c      	b.n	8010eee <tcp_listen_input+0x1c2>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8010dd4:	23f0      	movs	r3, #240	; 0xf0
 8010dd6:	73bb      	strb	r3, [r7, #14]
      return;
 8010dd8:	e089      	b.n	8010eee <tcp_listen_input+0x1c2>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8010dda:	4b50      	ldr	r3, [pc, #320]	; (8010f1c <tcp_listen_input+0x1f0>)
 8010ddc:	695a      	ldr	r2, [r3, #20]
 8010dde:	697b      	ldr	r3, [r7, #20]
 8010de0:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8010de2:	4b4e      	ldr	r3, [pc, #312]	; (8010f1c <tcp_listen_input+0x1f0>)
 8010de4:	691a      	ldr	r2, [r3, #16]
 8010de6:	697b      	ldr	r3, [r7, #20]
 8010de8:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8010dea:	687b      	ldr	r3, [r7, #4]
 8010dec:	8ada      	ldrh	r2, [r3, #22]
 8010dee:	697b      	ldr	r3, [r7, #20]
 8010df0:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8010df2:	4b47      	ldr	r3, [pc, #284]	; (8010f10 <tcp_listen_input+0x1e4>)
 8010df4:	681b      	ldr	r3, [r3, #0]
 8010df6:	881b      	ldrh	r3, [r3, #0]
 8010df8:	b29a      	uxth	r2, r3
 8010dfa:	697b      	ldr	r3, [r7, #20]
 8010dfc:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8010dfe:	697b      	ldr	r3, [r7, #20]
 8010e00:	2203      	movs	r2, #3
 8010e02:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8010e04:	4b41      	ldr	r3, [pc, #260]	; (8010f0c <tcp_listen_input+0x1e0>)
 8010e06:	681b      	ldr	r3, [r3, #0]
 8010e08:	1c5a      	adds	r2, r3, #1
 8010e0a:	697b      	ldr	r3, [r7, #20]
 8010e0c:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8010e0e:	697b      	ldr	r3, [r7, #20]
 8010e10:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010e12:	697b      	ldr	r3, [r7, #20]
 8010e14:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8010e16:	6978      	ldr	r0, [r7, #20]
 8010e18:	f7ff fa5c 	bl	80102d4 <tcp_next_iss>
 8010e1c:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8010e1e:	697b      	ldr	r3, [r7, #20]
 8010e20:	693a      	ldr	r2, [r7, #16]
 8010e22:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8010e24:	697b      	ldr	r3, [r7, #20]
 8010e26:	693a      	ldr	r2, [r7, #16]
 8010e28:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 8010e2a:	697b      	ldr	r3, [r7, #20]
 8010e2c:	693a      	ldr	r2, [r7, #16]
 8010e2e:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8010e30:	697b      	ldr	r3, [r7, #20]
 8010e32:	693a      	ldr	r2, [r7, #16]
 8010e34:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8010e36:	4b35      	ldr	r3, [pc, #212]	; (8010f0c <tcp_listen_input+0x1e0>)
 8010e38:	681b      	ldr	r3, [r3, #0]
 8010e3a:	1e5a      	subs	r2, r3, #1
 8010e3c:	697b      	ldr	r3, [r7, #20]
 8010e3e:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8010e40:	687b      	ldr	r3, [r7, #4]
 8010e42:	691a      	ldr	r2, [r3, #16]
 8010e44:	697b      	ldr	r3, [r7, #20]
 8010e46:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8010e48:	697b      	ldr	r3, [r7, #20]
 8010e4a:	687a      	ldr	r2, [r7, #4]
 8010e4c:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8010e4e:	687b      	ldr	r3, [r7, #4]
 8010e50:	7a5b      	ldrb	r3, [r3, #9]
 8010e52:	f003 030c 	and.w	r3, r3, #12
 8010e56:	b2da      	uxtb	r2, r3
 8010e58:	697b      	ldr	r3, [r7, #20]
 8010e5a:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8010e5c:	687b      	ldr	r3, [r7, #4]
 8010e5e:	7a1a      	ldrb	r2, [r3, #8]
 8010e60:	697b      	ldr	r3, [r7, #20]
 8010e62:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8010e64:	4b2e      	ldr	r3, [pc, #184]	; (8010f20 <tcp_listen_input+0x1f4>)
 8010e66:	681a      	ldr	r2, [r3, #0]
 8010e68:	697b      	ldr	r3, [r7, #20]
 8010e6a:	60da      	str	r2, [r3, #12]
 8010e6c:	4a2c      	ldr	r2, [pc, #176]	; (8010f20 <tcp_listen_input+0x1f4>)
 8010e6e:	697b      	ldr	r3, [r7, #20]
 8010e70:	6013      	str	r3, [r2, #0]
 8010e72:	f003 fd3b 	bl	80148ec <tcp_timer_needed>
 8010e76:	4b2b      	ldr	r3, [pc, #172]	; (8010f24 <tcp_listen_input+0x1f8>)
 8010e78:	2201      	movs	r2, #1
 8010e7a:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8010e7c:	6978      	ldr	r0, [r7, #20]
 8010e7e:	f001 fd8f 	bl	80129a0 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8010e82:	4b23      	ldr	r3, [pc, #140]	; (8010f10 <tcp_listen_input+0x1e4>)
 8010e84:	681b      	ldr	r3, [r3, #0]
 8010e86:	89db      	ldrh	r3, [r3, #14]
 8010e88:	b29a      	uxth	r2, r3
 8010e8a:	697b      	ldr	r3, [r7, #20]
 8010e8c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8010e90:	697b      	ldr	r3, [r7, #20]
 8010e92:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8010e96:	697b      	ldr	r3, [r7, #20]
 8010e98:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8010e9c:	697b      	ldr	r3, [r7, #20]
 8010e9e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8010ea0:	697b      	ldr	r3, [r7, #20]
 8010ea2:	3304      	adds	r3, #4
 8010ea4:	4618      	mov	r0, r3
 8010ea6:	f004 ff73 	bl	8015d90 <ip4_route>
 8010eaa:	4601      	mov	r1, r0
 8010eac:	697b      	ldr	r3, [r7, #20]
 8010eae:	3304      	adds	r3, #4
 8010eb0:	461a      	mov	r2, r3
 8010eb2:	4620      	mov	r0, r4
 8010eb4:	f7ff fa34 	bl	8010320 <tcp_eff_send_mss_netif>
 8010eb8:	4603      	mov	r3, r0
 8010eba:	461a      	mov	r2, r3
 8010ebc:	697b      	ldr	r3, [r7, #20]
 8010ebe:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8010ec0:	2112      	movs	r1, #18
 8010ec2:	6978      	ldr	r0, [r7, #20]
 8010ec4:	f002 fc9c 	bl	8013800 <tcp_enqueue_flags>
 8010ec8:	4603      	mov	r3, r0
 8010eca:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8010ecc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010ed0:	2b00      	cmp	r3, #0
 8010ed2:	d004      	beq.n	8010ede <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8010ed4:	2100      	movs	r1, #0
 8010ed6:	6978      	ldr	r0, [r7, #20]
 8010ed8:	f7fd ff10 	bl	800ecfc <tcp_abandon>
      return;
 8010edc:	e007      	b.n	8010eee <tcp_listen_input+0x1c2>
    tcp_output(npcb);
 8010ede:	6978      	ldr	r0, [r7, #20]
 8010ee0:	f002 fd7c 	bl	80139dc <tcp_output>
  return;
 8010ee4:	bf00      	nop
 8010ee6:	e001      	b.n	8010eec <tcp_listen_input+0x1c0>
    return;
 8010ee8:	bf00      	nop
 8010eea:	e000      	b.n	8010eee <tcp_listen_input+0x1c2>
  return;
 8010eec:	bf00      	nop
}
 8010eee:	371c      	adds	r7, #28
 8010ef0:	46bd      	mov	sp, r7
 8010ef2:	bd90      	pop	{r4, r7, pc}
 8010ef4:	20004674 	.word	0x20004674
 8010ef8:	0801a494 	.word	0x0801a494
 8010efc:	0801a68c 	.word	0x0801a68c
 8010f00:	0801a4e0 	.word	0x0801a4e0
 8010f04:	2000466c 	.word	0x2000466c
 8010f08:	20004672 	.word	0x20004672
 8010f0c:	20004668 	.word	0x20004668
 8010f10:	20004658 	.word	0x20004658
 8010f14:	20007a48 	.word	0x20007a48
 8010f18:	20007a4c 	.word	0x20007a4c
 8010f1c:	20007a38 	.word	0x20007a38
 8010f20:	2000d288 	.word	0x2000d288
 8010f24:	2000d284 	.word	0x2000d284

08010f28 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8010f28:	b580      	push	{r7, lr}
 8010f2a:	b086      	sub	sp, #24
 8010f2c:	af04      	add	r7, sp, #16
 8010f2e:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8010f30:	4b30      	ldr	r3, [pc, #192]	; (8010ff4 <tcp_timewait_input+0xcc>)
 8010f32:	781b      	ldrb	r3, [r3, #0]
 8010f34:	f003 0304 	and.w	r3, r3, #4
 8010f38:	2b00      	cmp	r3, #0
 8010f3a:	d154      	bne.n	8010fe6 <tcp_timewait_input+0xbe>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8010f3c:	687b      	ldr	r3, [r7, #4]
 8010f3e:	2b00      	cmp	r3, #0
 8010f40:	d106      	bne.n	8010f50 <tcp_timewait_input+0x28>
 8010f42:	4b2d      	ldr	r3, [pc, #180]	; (8010ff8 <tcp_timewait_input+0xd0>)
 8010f44:	f240 22ee 	movw	r2, #750	; 0x2ee
 8010f48:	492c      	ldr	r1, [pc, #176]	; (8010ffc <tcp_timewait_input+0xd4>)
 8010f4a:	482d      	ldr	r0, [pc, #180]	; (8011000 <tcp_timewait_input+0xd8>)
 8010f4c:	f006 fb34 	bl	80175b8 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8010f50:	4b28      	ldr	r3, [pc, #160]	; (8010ff4 <tcp_timewait_input+0xcc>)
 8010f52:	781b      	ldrb	r3, [r3, #0]
 8010f54:	f003 0302 	and.w	r3, r3, #2
 8010f58:	2b00      	cmp	r3, #0
 8010f5a:	d02a      	beq.n	8010fb2 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8010f5c:	4b29      	ldr	r3, [pc, #164]	; (8011004 <tcp_timewait_input+0xdc>)
 8010f5e:	681a      	ldr	r2, [r3, #0]
 8010f60:	687b      	ldr	r3, [r7, #4]
 8010f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010f64:	1ad3      	subs	r3, r2, r3
 8010f66:	2b00      	cmp	r3, #0
 8010f68:	db2d      	blt.n	8010fc6 <tcp_timewait_input+0x9e>
 8010f6a:	4b26      	ldr	r3, [pc, #152]	; (8011004 <tcp_timewait_input+0xdc>)
 8010f6c:	681a      	ldr	r2, [r3, #0]
 8010f6e:	687b      	ldr	r3, [r7, #4]
 8010f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010f72:	6879      	ldr	r1, [r7, #4]
 8010f74:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010f76:	440b      	add	r3, r1
 8010f78:	1ad3      	subs	r3, r2, r3
 8010f7a:	2b00      	cmp	r3, #0
 8010f7c:	dc23      	bgt.n	8010fc6 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010f7e:	4b22      	ldr	r3, [pc, #136]	; (8011008 <tcp_timewait_input+0xe0>)
 8010f80:	6819      	ldr	r1, [r3, #0]
 8010f82:	4b22      	ldr	r3, [pc, #136]	; (801100c <tcp_timewait_input+0xe4>)
 8010f84:	881b      	ldrh	r3, [r3, #0]
 8010f86:	461a      	mov	r2, r3
 8010f88:	4b1e      	ldr	r3, [pc, #120]	; (8011004 <tcp_timewait_input+0xdc>)
 8010f8a:	681b      	ldr	r3, [r3, #0]
 8010f8c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010f8e:	4b20      	ldr	r3, [pc, #128]	; (8011010 <tcp_timewait_input+0xe8>)
 8010f90:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010f92:	885b      	ldrh	r3, [r3, #2]
 8010f94:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010f96:	4a1e      	ldr	r2, [pc, #120]	; (8011010 <tcp_timewait_input+0xe8>)
 8010f98:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010f9a:	8812      	ldrh	r2, [r2, #0]
 8010f9c:	b292      	uxth	r2, r2
 8010f9e:	9202      	str	r2, [sp, #8]
 8010fa0:	9301      	str	r3, [sp, #4]
 8010fa2:	4b1c      	ldr	r3, [pc, #112]	; (8011014 <tcp_timewait_input+0xec>)
 8010fa4:	9300      	str	r3, [sp, #0]
 8010fa6:	4b1c      	ldr	r3, [pc, #112]	; (8011018 <tcp_timewait_input+0xf0>)
 8010fa8:	4602      	mov	r2, r0
 8010faa:	6878      	ldr	r0, [r7, #4]
 8010fac:	f003 fadc 	bl	8014568 <tcp_rst>
      return;
 8010fb0:	e01c      	b.n	8010fec <tcp_timewait_input+0xc4>
    }
  } else if (flags & TCP_FIN) {
 8010fb2:	4b10      	ldr	r3, [pc, #64]	; (8010ff4 <tcp_timewait_input+0xcc>)
 8010fb4:	781b      	ldrb	r3, [r3, #0]
 8010fb6:	f003 0301 	and.w	r3, r3, #1
 8010fba:	2b00      	cmp	r3, #0
 8010fbc:	d003      	beq.n	8010fc6 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8010fbe:	4b17      	ldr	r3, [pc, #92]	; (801101c <tcp_timewait_input+0xf4>)
 8010fc0:	681a      	ldr	r2, [r3, #0]
 8010fc2:	687b      	ldr	r3, [r7, #4]
 8010fc4:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8010fc6:	4b11      	ldr	r3, [pc, #68]	; (801100c <tcp_timewait_input+0xe4>)
 8010fc8:	881b      	ldrh	r3, [r3, #0]
 8010fca:	2b00      	cmp	r3, #0
 8010fcc:	d00d      	beq.n	8010fea <tcp_timewait_input+0xc2>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8010fce:	687b      	ldr	r3, [r7, #4]
 8010fd0:	8b5b      	ldrh	r3, [r3, #26]
 8010fd2:	f043 0302 	orr.w	r3, r3, #2
 8010fd6:	b29a      	uxth	r2, r3
 8010fd8:	687b      	ldr	r3, [r7, #4]
 8010fda:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8010fdc:	6878      	ldr	r0, [r7, #4]
 8010fde:	f002 fcfd 	bl	80139dc <tcp_output>
  }
  return;
 8010fe2:	bf00      	nop
 8010fe4:	e001      	b.n	8010fea <tcp_timewait_input+0xc2>
    return;
 8010fe6:	bf00      	nop
 8010fe8:	e000      	b.n	8010fec <tcp_timewait_input+0xc4>
  return;
 8010fea:	bf00      	nop
}
 8010fec:	3708      	adds	r7, #8
 8010fee:	46bd      	mov	sp, r7
 8010ff0:	bd80      	pop	{r7, pc}
 8010ff2:	bf00      	nop
 8010ff4:	20004674 	.word	0x20004674
 8010ff8:	0801a494 	.word	0x0801a494
 8010ffc:	0801a6ac 	.word	0x0801a6ac
 8011000:	0801a4e0 	.word	0x0801a4e0
 8011004:	20004668 	.word	0x20004668
 8011008:	2000466c 	.word	0x2000466c
 801100c:	20004672 	.word	0x20004672
 8011010:	20004658 	.word	0x20004658
 8011014:	20007a48 	.word	0x20007a48
 8011018:	20007a4c 	.word	0x20007a4c
 801101c:	2000d28c 	.word	0x2000d28c

08011020 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8011020:	b590      	push	{r4, r7, lr}
 8011022:	b08d      	sub	sp, #52	; 0x34
 8011024:	af04      	add	r7, sp, #16
 8011026:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8011028:	2300      	movs	r3, #0
 801102a:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 801102c:	2300      	movs	r3, #0
 801102e:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8011030:	687b      	ldr	r3, [r7, #4]
 8011032:	2b00      	cmp	r3, #0
 8011034:	d106      	bne.n	8011044 <tcp_process+0x24>
 8011036:	4ba5      	ldr	r3, [pc, #660]	; (80112cc <tcp_process+0x2ac>)
 8011038:	f44f 7247 	mov.w	r2, #796	; 0x31c
 801103c:	49a4      	ldr	r1, [pc, #656]	; (80112d0 <tcp_process+0x2b0>)
 801103e:	48a5      	ldr	r0, [pc, #660]	; (80112d4 <tcp_process+0x2b4>)
 8011040:	f006 faba 	bl	80175b8 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8011044:	4ba4      	ldr	r3, [pc, #656]	; (80112d8 <tcp_process+0x2b8>)
 8011046:	781b      	ldrb	r3, [r3, #0]
 8011048:	f003 0304 	and.w	r3, r3, #4
 801104c:	2b00      	cmp	r3, #0
 801104e:	d04e      	beq.n	80110ee <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8011050:	687b      	ldr	r3, [r7, #4]
 8011052:	7d1b      	ldrb	r3, [r3, #20]
 8011054:	2b02      	cmp	r3, #2
 8011056:	d108      	bne.n	801106a <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8011058:	687b      	ldr	r3, [r7, #4]
 801105a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801105c:	4b9f      	ldr	r3, [pc, #636]	; (80112dc <tcp_process+0x2bc>)
 801105e:	681b      	ldr	r3, [r3, #0]
 8011060:	429a      	cmp	r2, r3
 8011062:	d123      	bne.n	80110ac <tcp_process+0x8c>
        acceptable = 1;
 8011064:	2301      	movs	r3, #1
 8011066:	76fb      	strb	r3, [r7, #27]
 8011068:	e020      	b.n	80110ac <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 801106a:	687b      	ldr	r3, [r7, #4]
 801106c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801106e:	4b9c      	ldr	r3, [pc, #624]	; (80112e0 <tcp_process+0x2c0>)
 8011070:	681b      	ldr	r3, [r3, #0]
 8011072:	429a      	cmp	r2, r3
 8011074:	d102      	bne.n	801107c <tcp_process+0x5c>
        acceptable = 1;
 8011076:	2301      	movs	r3, #1
 8011078:	76fb      	strb	r3, [r7, #27]
 801107a:	e017      	b.n	80110ac <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801107c:	4b98      	ldr	r3, [pc, #608]	; (80112e0 <tcp_process+0x2c0>)
 801107e:	681a      	ldr	r2, [r3, #0]
 8011080:	687b      	ldr	r3, [r7, #4]
 8011082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011084:	1ad3      	subs	r3, r2, r3
 8011086:	2b00      	cmp	r3, #0
 8011088:	db10      	blt.n	80110ac <tcp_process+0x8c>
 801108a:	4b95      	ldr	r3, [pc, #596]	; (80112e0 <tcp_process+0x2c0>)
 801108c:	681a      	ldr	r2, [r3, #0]
 801108e:	687b      	ldr	r3, [r7, #4]
 8011090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011092:	6879      	ldr	r1, [r7, #4]
 8011094:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011096:	440b      	add	r3, r1
 8011098:	1ad3      	subs	r3, r2, r3
 801109a:	2b00      	cmp	r3, #0
 801109c:	dc06      	bgt.n	80110ac <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 801109e:	687b      	ldr	r3, [r7, #4]
 80110a0:	8b5b      	ldrh	r3, [r3, #26]
 80110a2:	f043 0302 	orr.w	r3, r3, #2
 80110a6:	b29a      	uxth	r2, r3
 80110a8:	687b      	ldr	r3, [r7, #4]
 80110aa:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 80110ac:	7efb      	ldrb	r3, [r7, #27]
 80110ae:	2b00      	cmp	r3, #0
 80110b0:	d01b      	beq.n	80110ea <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 80110b2:	687b      	ldr	r3, [r7, #4]
 80110b4:	7d1b      	ldrb	r3, [r3, #20]
 80110b6:	2b00      	cmp	r3, #0
 80110b8:	d106      	bne.n	80110c8 <tcp_process+0xa8>
 80110ba:	4b84      	ldr	r3, [pc, #528]	; (80112cc <tcp_process+0x2ac>)
 80110bc:	f44f 724e 	mov.w	r2, #824	; 0x338
 80110c0:	4988      	ldr	r1, [pc, #544]	; (80112e4 <tcp_process+0x2c4>)
 80110c2:	4884      	ldr	r0, [pc, #528]	; (80112d4 <tcp_process+0x2b4>)
 80110c4:	f006 fa78 	bl	80175b8 <iprintf>
      recv_flags |= TF_RESET;
 80110c8:	4b87      	ldr	r3, [pc, #540]	; (80112e8 <tcp_process+0x2c8>)
 80110ca:	781b      	ldrb	r3, [r3, #0]
 80110cc:	f043 0308 	orr.w	r3, r3, #8
 80110d0:	b2da      	uxtb	r2, r3
 80110d2:	4b85      	ldr	r3, [pc, #532]	; (80112e8 <tcp_process+0x2c8>)
 80110d4:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 80110d6:	687b      	ldr	r3, [r7, #4]
 80110d8:	8b5b      	ldrh	r3, [r3, #26]
 80110da:	f023 0301 	bic.w	r3, r3, #1
 80110de:	b29a      	uxth	r2, r3
 80110e0:	687b      	ldr	r3, [r7, #4]
 80110e2:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 80110e4:	f06f 030d 	mvn.w	r3, #13
 80110e8:	e37a      	b.n	80117e0 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 80110ea:	2300      	movs	r3, #0
 80110ec:	e378      	b.n	80117e0 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 80110ee:	4b7a      	ldr	r3, [pc, #488]	; (80112d8 <tcp_process+0x2b8>)
 80110f0:	781b      	ldrb	r3, [r3, #0]
 80110f2:	f003 0302 	and.w	r3, r3, #2
 80110f6:	2b00      	cmp	r3, #0
 80110f8:	d010      	beq.n	801111c <tcp_process+0xfc>
 80110fa:	687b      	ldr	r3, [r7, #4]
 80110fc:	7d1b      	ldrb	r3, [r3, #20]
 80110fe:	2b02      	cmp	r3, #2
 8011100:	d00c      	beq.n	801111c <tcp_process+0xfc>
 8011102:	687b      	ldr	r3, [r7, #4]
 8011104:	7d1b      	ldrb	r3, [r3, #20]
 8011106:	2b03      	cmp	r3, #3
 8011108:	d008      	beq.n	801111c <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 801110a:	687b      	ldr	r3, [r7, #4]
 801110c:	8b5b      	ldrh	r3, [r3, #26]
 801110e:	f043 0302 	orr.w	r3, r3, #2
 8011112:	b29a      	uxth	r2, r3
 8011114:	687b      	ldr	r3, [r7, #4]
 8011116:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8011118:	2300      	movs	r3, #0
 801111a:	e361      	b.n	80117e0 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 801111c:	687b      	ldr	r3, [r7, #4]
 801111e:	8b5b      	ldrh	r3, [r3, #26]
 8011120:	f003 0310 	and.w	r3, r3, #16
 8011124:	2b00      	cmp	r3, #0
 8011126:	d103      	bne.n	8011130 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8011128:	4b70      	ldr	r3, [pc, #448]	; (80112ec <tcp_process+0x2cc>)
 801112a:	681a      	ldr	r2, [r3, #0]
 801112c:	687b      	ldr	r3, [r7, #4]
 801112e:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8011130:	687b      	ldr	r3, [r7, #4]
 8011132:	2200      	movs	r2, #0
 8011134:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8011138:	687b      	ldr	r3, [r7, #4]
 801113a:	2200      	movs	r2, #0
 801113c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8011140:	6878      	ldr	r0, [r7, #4]
 8011142:	f001 fc2d 	bl	80129a0 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8011146:	687b      	ldr	r3, [r7, #4]
 8011148:	7d1b      	ldrb	r3, [r3, #20]
 801114a:	3b02      	subs	r3, #2
 801114c:	2b07      	cmp	r3, #7
 801114e:	f200 8337 	bhi.w	80117c0 <tcp_process+0x7a0>
 8011152:	a201      	add	r2, pc, #4	; (adr r2, 8011158 <tcp_process+0x138>)
 8011154:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011158:	08011179 	.word	0x08011179
 801115c:	080113a9 	.word	0x080113a9
 8011160:	08011521 	.word	0x08011521
 8011164:	0801154b 	.word	0x0801154b
 8011168:	0801166f 	.word	0x0801166f
 801116c:	08011521 	.word	0x08011521
 8011170:	080116fb 	.word	0x080116fb
 8011174:	0801178b 	.word	0x0801178b
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8011178:	4b57      	ldr	r3, [pc, #348]	; (80112d8 <tcp_process+0x2b8>)
 801117a:	781b      	ldrb	r3, [r3, #0]
 801117c:	f003 0310 	and.w	r3, r3, #16
 8011180:	2b00      	cmp	r3, #0
 8011182:	f000 80e4 	beq.w	801134e <tcp_process+0x32e>
 8011186:	4b54      	ldr	r3, [pc, #336]	; (80112d8 <tcp_process+0x2b8>)
 8011188:	781b      	ldrb	r3, [r3, #0]
 801118a:	f003 0302 	and.w	r3, r3, #2
 801118e:	2b00      	cmp	r3, #0
 8011190:	f000 80dd 	beq.w	801134e <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8011194:	687b      	ldr	r3, [r7, #4]
 8011196:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011198:	1c5a      	adds	r2, r3, #1
 801119a:	4b50      	ldr	r3, [pc, #320]	; (80112dc <tcp_process+0x2bc>)
 801119c:	681b      	ldr	r3, [r3, #0]
 801119e:	429a      	cmp	r2, r3
 80111a0:	f040 80d5 	bne.w	801134e <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 80111a4:	4b4e      	ldr	r3, [pc, #312]	; (80112e0 <tcp_process+0x2c0>)
 80111a6:	681b      	ldr	r3, [r3, #0]
 80111a8:	1c5a      	adds	r2, r3, #1
 80111aa:	687b      	ldr	r3, [r7, #4]
 80111ac:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 80111ae:	687b      	ldr	r3, [r7, #4]
 80111b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80111b2:	687b      	ldr	r3, [r7, #4]
 80111b4:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 80111b6:	4b49      	ldr	r3, [pc, #292]	; (80112dc <tcp_process+0x2bc>)
 80111b8:	681a      	ldr	r2, [r3, #0]
 80111ba:	687b      	ldr	r3, [r7, #4]
 80111bc:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 80111be:	4b4c      	ldr	r3, [pc, #304]	; (80112f0 <tcp_process+0x2d0>)
 80111c0:	681b      	ldr	r3, [r3, #0]
 80111c2:	89db      	ldrh	r3, [r3, #14]
 80111c4:	b29a      	uxth	r2, r3
 80111c6:	687b      	ldr	r3, [r7, #4]
 80111c8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 80111cc:	687b      	ldr	r3, [r7, #4]
 80111ce:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80111d2:	687b      	ldr	r3, [r7, #4]
 80111d4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 80111d8:	4b41      	ldr	r3, [pc, #260]	; (80112e0 <tcp_process+0x2c0>)
 80111da:	681b      	ldr	r3, [r3, #0]
 80111dc:	1e5a      	subs	r2, r3, #1
 80111de:	687b      	ldr	r3, [r7, #4]
 80111e0:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 80111e2:	687b      	ldr	r3, [r7, #4]
 80111e4:	2204      	movs	r2, #4
 80111e6:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 80111e8:	687b      	ldr	r3, [r7, #4]
 80111ea:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 80111ec:	687b      	ldr	r3, [r7, #4]
 80111ee:	3304      	adds	r3, #4
 80111f0:	4618      	mov	r0, r3
 80111f2:	f004 fdcd 	bl	8015d90 <ip4_route>
 80111f6:	4601      	mov	r1, r0
 80111f8:	687b      	ldr	r3, [r7, #4]
 80111fa:	3304      	adds	r3, #4
 80111fc:	461a      	mov	r2, r3
 80111fe:	4620      	mov	r0, r4
 8011200:	f7ff f88e 	bl	8010320 <tcp_eff_send_mss_netif>
 8011204:	4603      	mov	r3, r0
 8011206:	461a      	mov	r2, r3
 8011208:	687b      	ldr	r3, [r7, #4]
 801120a:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801120c:	687b      	ldr	r3, [r7, #4]
 801120e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011210:	009a      	lsls	r2, r3, #2
 8011212:	687b      	ldr	r3, [r7, #4]
 8011214:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011216:	005b      	lsls	r3, r3, #1
 8011218:	f241 111c 	movw	r1, #4380	; 0x111c
 801121c:	428b      	cmp	r3, r1
 801121e:	bf38      	it	cc
 8011220:	460b      	movcc	r3, r1
 8011222:	429a      	cmp	r2, r3
 8011224:	d204      	bcs.n	8011230 <tcp_process+0x210>
 8011226:	687b      	ldr	r3, [r7, #4]
 8011228:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801122a:	009b      	lsls	r3, r3, #2
 801122c:	b29b      	uxth	r3, r3
 801122e:	e00d      	b.n	801124c <tcp_process+0x22c>
 8011230:	687b      	ldr	r3, [r7, #4]
 8011232:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011234:	005b      	lsls	r3, r3, #1
 8011236:	f241 121c 	movw	r2, #4380	; 0x111c
 801123a:	4293      	cmp	r3, r2
 801123c:	d904      	bls.n	8011248 <tcp_process+0x228>
 801123e:	687b      	ldr	r3, [r7, #4]
 8011240:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011242:	005b      	lsls	r3, r3, #1
 8011244:	b29b      	uxth	r3, r3
 8011246:	e001      	b.n	801124c <tcp_process+0x22c>
 8011248:	f241 131c 	movw	r3, #4380	; 0x111c
 801124c:	687a      	ldr	r2, [r7, #4]
 801124e:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8011252:	687b      	ldr	r3, [r7, #4]
 8011254:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011258:	2b00      	cmp	r3, #0
 801125a:	d106      	bne.n	801126a <tcp_process+0x24a>
 801125c:	4b1b      	ldr	r3, [pc, #108]	; (80112cc <tcp_process+0x2ac>)
 801125e:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8011262:	4924      	ldr	r1, [pc, #144]	; (80112f4 <tcp_process+0x2d4>)
 8011264:	481b      	ldr	r0, [pc, #108]	; (80112d4 <tcp_process+0x2b4>)
 8011266:	f006 f9a7 	bl	80175b8 <iprintf>
        --pcb->snd_queuelen;
 801126a:	687b      	ldr	r3, [r7, #4]
 801126c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011270:	3b01      	subs	r3, #1
 8011272:	b29a      	uxth	r2, r3
 8011274:	687b      	ldr	r3, [r7, #4]
 8011276:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 801127a:	687b      	ldr	r3, [r7, #4]
 801127c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801127e:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8011280:	69fb      	ldr	r3, [r7, #28]
 8011282:	2b00      	cmp	r3, #0
 8011284:	d111      	bne.n	80112aa <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8011286:	687b      	ldr	r3, [r7, #4]
 8011288:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801128a:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 801128c:	69fb      	ldr	r3, [r7, #28]
 801128e:	2b00      	cmp	r3, #0
 8011290:	d106      	bne.n	80112a0 <tcp_process+0x280>
 8011292:	4b0e      	ldr	r3, [pc, #56]	; (80112cc <tcp_process+0x2ac>)
 8011294:	f44f 725d 	mov.w	r2, #884	; 0x374
 8011298:	4917      	ldr	r1, [pc, #92]	; (80112f8 <tcp_process+0x2d8>)
 801129a:	480e      	ldr	r0, [pc, #56]	; (80112d4 <tcp_process+0x2b4>)
 801129c:	f006 f98c 	bl	80175b8 <iprintf>
          pcb->unsent = rseg->next;
 80112a0:	69fb      	ldr	r3, [r7, #28]
 80112a2:	681a      	ldr	r2, [r3, #0]
 80112a4:	687b      	ldr	r3, [r7, #4]
 80112a6:	66da      	str	r2, [r3, #108]	; 0x6c
 80112a8:	e003      	b.n	80112b2 <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 80112aa:	69fb      	ldr	r3, [r7, #28]
 80112ac:	681a      	ldr	r2, [r3, #0]
 80112ae:	687b      	ldr	r3, [r7, #4]
 80112b0:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 80112b2:	69f8      	ldr	r0, [r7, #28]
 80112b4:	f7fe fc70 	bl	800fb98 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 80112b8:	687b      	ldr	r3, [r7, #4]
 80112ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80112bc:	2b00      	cmp	r3, #0
 80112be:	d11d      	bne.n	80112fc <tcp_process+0x2dc>
          pcb->rtime = -1;
 80112c0:	687b      	ldr	r3, [r7, #4]
 80112c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80112c6:	861a      	strh	r2, [r3, #48]	; 0x30
 80112c8:	e01f      	b.n	801130a <tcp_process+0x2ea>
 80112ca:	bf00      	nop
 80112cc:	0801a494 	.word	0x0801a494
 80112d0:	0801a6cc 	.word	0x0801a6cc
 80112d4:	0801a4e0 	.word	0x0801a4e0
 80112d8:	20004674 	.word	0x20004674
 80112dc:	2000466c 	.word	0x2000466c
 80112e0:	20004668 	.word	0x20004668
 80112e4:	0801a6e8 	.word	0x0801a6e8
 80112e8:	20004675 	.word	0x20004675
 80112ec:	2000d28c 	.word	0x2000d28c
 80112f0:	20004658 	.word	0x20004658
 80112f4:	0801a708 	.word	0x0801a708
 80112f8:	0801a720 	.word	0x0801a720
        } else {
          pcb->rtime = 0;
 80112fc:	687b      	ldr	r3, [r7, #4]
 80112fe:	2200      	movs	r2, #0
 8011300:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 8011302:	687b      	ldr	r3, [r7, #4]
 8011304:	2200      	movs	r2, #0
 8011306:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 801130a:	687b      	ldr	r3, [r7, #4]
 801130c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011310:	2b00      	cmp	r3, #0
 8011312:	d00a      	beq.n	801132a <tcp_process+0x30a>
 8011314:	687b      	ldr	r3, [r7, #4]
 8011316:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801131a:	687a      	ldr	r2, [r7, #4]
 801131c:	6910      	ldr	r0, [r2, #16]
 801131e:	2200      	movs	r2, #0
 8011320:	6879      	ldr	r1, [r7, #4]
 8011322:	4798      	blx	r3
 8011324:	4603      	mov	r3, r0
 8011326:	76bb      	strb	r3, [r7, #26]
 8011328:	e001      	b.n	801132e <tcp_process+0x30e>
 801132a:	2300      	movs	r3, #0
 801132c:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 801132e:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8011332:	f113 0f0d 	cmn.w	r3, #13
 8011336:	d102      	bne.n	801133e <tcp_process+0x31e>
          return ERR_ABRT;
 8011338:	f06f 030c 	mvn.w	r3, #12
 801133c:	e250      	b.n	80117e0 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 801133e:	687b      	ldr	r3, [r7, #4]
 8011340:	8b5b      	ldrh	r3, [r3, #26]
 8011342:	f043 0302 	orr.w	r3, r3, #2
 8011346:	b29a      	uxth	r2, r3
 8011348:	687b      	ldr	r3, [r7, #4]
 801134a:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 801134c:	e23a      	b.n	80117c4 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 801134e:	4b9d      	ldr	r3, [pc, #628]	; (80115c4 <tcp_process+0x5a4>)
 8011350:	781b      	ldrb	r3, [r3, #0]
 8011352:	f003 0310 	and.w	r3, r3, #16
 8011356:	2b00      	cmp	r3, #0
 8011358:	f000 8234 	beq.w	80117c4 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801135c:	4b9a      	ldr	r3, [pc, #616]	; (80115c8 <tcp_process+0x5a8>)
 801135e:	6819      	ldr	r1, [r3, #0]
 8011360:	4b9a      	ldr	r3, [pc, #616]	; (80115cc <tcp_process+0x5ac>)
 8011362:	881b      	ldrh	r3, [r3, #0]
 8011364:	461a      	mov	r2, r3
 8011366:	4b9a      	ldr	r3, [pc, #616]	; (80115d0 <tcp_process+0x5b0>)
 8011368:	681b      	ldr	r3, [r3, #0]
 801136a:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801136c:	4b99      	ldr	r3, [pc, #612]	; (80115d4 <tcp_process+0x5b4>)
 801136e:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011370:	885b      	ldrh	r3, [r3, #2]
 8011372:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011374:	4a97      	ldr	r2, [pc, #604]	; (80115d4 <tcp_process+0x5b4>)
 8011376:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011378:	8812      	ldrh	r2, [r2, #0]
 801137a:	b292      	uxth	r2, r2
 801137c:	9202      	str	r2, [sp, #8]
 801137e:	9301      	str	r3, [sp, #4]
 8011380:	4b95      	ldr	r3, [pc, #596]	; (80115d8 <tcp_process+0x5b8>)
 8011382:	9300      	str	r3, [sp, #0]
 8011384:	4b95      	ldr	r3, [pc, #596]	; (80115dc <tcp_process+0x5bc>)
 8011386:	4602      	mov	r2, r0
 8011388:	6878      	ldr	r0, [r7, #4]
 801138a:	f003 f8ed 	bl	8014568 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 801138e:	687b      	ldr	r3, [r7, #4]
 8011390:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011394:	2b05      	cmp	r3, #5
 8011396:	f200 8215 	bhi.w	80117c4 <tcp_process+0x7a4>
          pcb->rtime = 0;
 801139a:	687b      	ldr	r3, [r7, #4]
 801139c:	2200      	movs	r2, #0
 801139e:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 80113a0:	6878      	ldr	r0, [r7, #4]
 80113a2:	f002 feab 	bl	80140fc <tcp_rexmit_rto>
      break;
 80113a6:	e20d      	b.n	80117c4 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 80113a8:	4b86      	ldr	r3, [pc, #536]	; (80115c4 <tcp_process+0x5a4>)
 80113aa:	781b      	ldrb	r3, [r3, #0]
 80113ac:	f003 0310 	and.w	r3, r3, #16
 80113b0:	2b00      	cmp	r3, #0
 80113b2:	f000 80a1 	beq.w	80114f8 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80113b6:	4b84      	ldr	r3, [pc, #528]	; (80115c8 <tcp_process+0x5a8>)
 80113b8:	681a      	ldr	r2, [r3, #0]
 80113ba:	687b      	ldr	r3, [r7, #4]
 80113bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80113be:	1ad3      	subs	r3, r2, r3
 80113c0:	3b01      	subs	r3, #1
 80113c2:	2b00      	cmp	r3, #0
 80113c4:	db7e      	blt.n	80114c4 <tcp_process+0x4a4>
 80113c6:	4b80      	ldr	r3, [pc, #512]	; (80115c8 <tcp_process+0x5a8>)
 80113c8:	681a      	ldr	r2, [r3, #0]
 80113ca:	687b      	ldr	r3, [r7, #4]
 80113cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80113ce:	1ad3      	subs	r3, r2, r3
 80113d0:	2b00      	cmp	r3, #0
 80113d2:	dc77      	bgt.n	80114c4 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 80113d4:	687b      	ldr	r3, [r7, #4]
 80113d6:	2204      	movs	r2, #4
 80113d8:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 80113da:	687b      	ldr	r3, [r7, #4]
 80113dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80113de:	2b00      	cmp	r3, #0
 80113e0:	d102      	bne.n	80113e8 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 80113e2:	23fa      	movs	r3, #250	; 0xfa
 80113e4:	76bb      	strb	r3, [r7, #26]
 80113e6:	e01d      	b.n	8011424 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 80113e8:	687b      	ldr	r3, [r7, #4]
 80113ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80113ec:	699b      	ldr	r3, [r3, #24]
 80113ee:	2b00      	cmp	r3, #0
 80113f0:	d106      	bne.n	8011400 <tcp_process+0x3e0>
 80113f2:	4b7b      	ldr	r3, [pc, #492]	; (80115e0 <tcp_process+0x5c0>)
 80113f4:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 80113f8:	497a      	ldr	r1, [pc, #488]	; (80115e4 <tcp_process+0x5c4>)
 80113fa:	487b      	ldr	r0, [pc, #492]	; (80115e8 <tcp_process+0x5c8>)
 80113fc:	f006 f8dc 	bl	80175b8 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8011400:	687b      	ldr	r3, [r7, #4]
 8011402:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011404:	699b      	ldr	r3, [r3, #24]
 8011406:	2b00      	cmp	r3, #0
 8011408:	d00a      	beq.n	8011420 <tcp_process+0x400>
 801140a:	687b      	ldr	r3, [r7, #4]
 801140c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801140e:	699b      	ldr	r3, [r3, #24]
 8011410:	687a      	ldr	r2, [r7, #4]
 8011412:	6910      	ldr	r0, [r2, #16]
 8011414:	2200      	movs	r2, #0
 8011416:	6879      	ldr	r1, [r7, #4]
 8011418:	4798      	blx	r3
 801141a:	4603      	mov	r3, r0
 801141c:	76bb      	strb	r3, [r7, #26]
 801141e:	e001      	b.n	8011424 <tcp_process+0x404>
 8011420:	23f0      	movs	r3, #240	; 0xf0
 8011422:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8011424:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8011428:	2b00      	cmp	r3, #0
 801142a:	d00a      	beq.n	8011442 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 801142c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8011430:	f113 0f0d 	cmn.w	r3, #13
 8011434:	d002      	beq.n	801143c <tcp_process+0x41c>
              tcp_abort(pcb);
 8011436:	6878      	ldr	r0, [r7, #4]
 8011438:	f7fd fd1e 	bl	800ee78 <tcp_abort>
            }
            return ERR_ABRT;
 801143c:	f06f 030c 	mvn.w	r3, #12
 8011440:	e1ce      	b.n	80117e0 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8011442:	6878      	ldr	r0, [r7, #4]
 8011444:	f000 fae0 	bl	8011a08 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8011448:	4b68      	ldr	r3, [pc, #416]	; (80115ec <tcp_process+0x5cc>)
 801144a:	881b      	ldrh	r3, [r3, #0]
 801144c:	2b00      	cmp	r3, #0
 801144e:	d005      	beq.n	801145c <tcp_process+0x43c>
            recv_acked--;
 8011450:	4b66      	ldr	r3, [pc, #408]	; (80115ec <tcp_process+0x5cc>)
 8011452:	881b      	ldrh	r3, [r3, #0]
 8011454:	3b01      	subs	r3, #1
 8011456:	b29a      	uxth	r2, r3
 8011458:	4b64      	ldr	r3, [pc, #400]	; (80115ec <tcp_process+0x5cc>)
 801145a:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801145c:	687b      	ldr	r3, [r7, #4]
 801145e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011460:	009a      	lsls	r2, r3, #2
 8011462:	687b      	ldr	r3, [r7, #4]
 8011464:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011466:	005b      	lsls	r3, r3, #1
 8011468:	f241 111c 	movw	r1, #4380	; 0x111c
 801146c:	428b      	cmp	r3, r1
 801146e:	bf38      	it	cc
 8011470:	460b      	movcc	r3, r1
 8011472:	429a      	cmp	r2, r3
 8011474:	d204      	bcs.n	8011480 <tcp_process+0x460>
 8011476:	687b      	ldr	r3, [r7, #4]
 8011478:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801147a:	009b      	lsls	r3, r3, #2
 801147c:	b29b      	uxth	r3, r3
 801147e:	e00d      	b.n	801149c <tcp_process+0x47c>
 8011480:	687b      	ldr	r3, [r7, #4]
 8011482:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011484:	005b      	lsls	r3, r3, #1
 8011486:	f241 121c 	movw	r2, #4380	; 0x111c
 801148a:	4293      	cmp	r3, r2
 801148c:	d904      	bls.n	8011498 <tcp_process+0x478>
 801148e:	687b      	ldr	r3, [r7, #4]
 8011490:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011492:	005b      	lsls	r3, r3, #1
 8011494:	b29b      	uxth	r3, r3
 8011496:	e001      	b.n	801149c <tcp_process+0x47c>
 8011498:	f241 131c 	movw	r3, #4380	; 0x111c
 801149c:	687a      	ldr	r2, [r7, #4]
 801149e:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 80114a2:	4b53      	ldr	r3, [pc, #332]	; (80115f0 <tcp_process+0x5d0>)
 80114a4:	781b      	ldrb	r3, [r3, #0]
 80114a6:	f003 0320 	and.w	r3, r3, #32
 80114aa:	2b00      	cmp	r3, #0
 80114ac:	d037      	beq.n	801151e <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 80114ae:	687b      	ldr	r3, [r7, #4]
 80114b0:	8b5b      	ldrh	r3, [r3, #26]
 80114b2:	f043 0302 	orr.w	r3, r3, #2
 80114b6:	b29a      	uxth	r2, r3
 80114b8:	687b      	ldr	r3, [r7, #4]
 80114ba:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 80114bc:	687b      	ldr	r3, [r7, #4]
 80114be:	2207      	movs	r2, #7
 80114c0:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 80114c2:	e02c      	b.n	801151e <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80114c4:	4b40      	ldr	r3, [pc, #256]	; (80115c8 <tcp_process+0x5a8>)
 80114c6:	6819      	ldr	r1, [r3, #0]
 80114c8:	4b40      	ldr	r3, [pc, #256]	; (80115cc <tcp_process+0x5ac>)
 80114ca:	881b      	ldrh	r3, [r3, #0]
 80114cc:	461a      	mov	r2, r3
 80114ce:	4b40      	ldr	r3, [pc, #256]	; (80115d0 <tcp_process+0x5b0>)
 80114d0:	681b      	ldr	r3, [r3, #0]
 80114d2:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80114d4:	4b3f      	ldr	r3, [pc, #252]	; (80115d4 <tcp_process+0x5b4>)
 80114d6:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80114d8:	885b      	ldrh	r3, [r3, #2]
 80114da:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80114dc:	4a3d      	ldr	r2, [pc, #244]	; (80115d4 <tcp_process+0x5b4>)
 80114de:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80114e0:	8812      	ldrh	r2, [r2, #0]
 80114e2:	b292      	uxth	r2, r2
 80114e4:	9202      	str	r2, [sp, #8]
 80114e6:	9301      	str	r3, [sp, #4]
 80114e8:	4b3b      	ldr	r3, [pc, #236]	; (80115d8 <tcp_process+0x5b8>)
 80114ea:	9300      	str	r3, [sp, #0]
 80114ec:	4b3b      	ldr	r3, [pc, #236]	; (80115dc <tcp_process+0x5bc>)
 80114ee:	4602      	mov	r2, r0
 80114f0:	6878      	ldr	r0, [r7, #4]
 80114f2:	f003 f839 	bl	8014568 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 80114f6:	e167      	b.n	80117c8 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 80114f8:	4b32      	ldr	r3, [pc, #200]	; (80115c4 <tcp_process+0x5a4>)
 80114fa:	781b      	ldrb	r3, [r3, #0]
 80114fc:	f003 0302 	and.w	r3, r3, #2
 8011500:	2b00      	cmp	r3, #0
 8011502:	f000 8161 	beq.w	80117c8 <tcp_process+0x7a8>
 8011506:	687b      	ldr	r3, [r7, #4]
 8011508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801150a:	1e5a      	subs	r2, r3, #1
 801150c:	4b30      	ldr	r3, [pc, #192]	; (80115d0 <tcp_process+0x5b0>)
 801150e:	681b      	ldr	r3, [r3, #0]
 8011510:	429a      	cmp	r2, r3
 8011512:	f040 8159 	bne.w	80117c8 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8011516:	6878      	ldr	r0, [r7, #4]
 8011518:	f002 fe12 	bl	8014140 <tcp_rexmit>
      break;
 801151c:	e154      	b.n	80117c8 <tcp_process+0x7a8>
 801151e:	e153      	b.n	80117c8 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8011520:	6878      	ldr	r0, [r7, #4]
 8011522:	f000 fa71 	bl	8011a08 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8011526:	4b32      	ldr	r3, [pc, #200]	; (80115f0 <tcp_process+0x5d0>)
 8011528:	781b      	ldrb	r3, [r3, #0]
 801152a:	f003 0320 	and.w	r3, r3, #32
 801152e:	2b00      	cmp	r3, #0
 8011530:	f000 814c 	beq.w	80117cc <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8011534:	687b      	ldr	r3, [r7, #4]
 8011536:	8b5b      	ldrh	r3, [r3, #26]
 8011538:	f043 0302 	orr.w	r3, r3, #2
 801153c:	b29a      	uxth	r2, r3
 801153e:	687b      	ldr	r3, [r7, #4]
 8011540:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8011542:	687b      	ldr	r3, [r7, #4]
 8011544:	2207      	movs	r2, #7
 8011546:	751a      	strb	r2, [r3, #20]
      }
      break;
 8011548:	e140      	b.n	80117cc <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 801154a:	6878      	ldr	r0, [r7, #4]
 801154c:	f000 fa5c 	bl	8011a08 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8011550:	4b27      	ldr	r3, [pc, #156]	; (80115f0 <tcp_process+0x5d0>)
 8011552:	781b      	ldrb	r3, [r3, #0]
 8011554:	f003 0320 	and.w	r3, r3, #32
 8011558:	2b00      	cmp	r3, #0
 801155a:	d071      	beq.n	8011640 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801155c:	4b19      	ldr	r3, [pc, #100]	; (80115c4 <tcp_process+0x5a4>)
 801155e:	781b      	ldrb	r3, [r3, #0]
 8011560:	f003 0310 	and.w	r3, r3, #16
 8011564:	2b00      	cmp	r3, #0
 8011566:	d060      	beq.n	801162a <tcp_process+0x60a>
 8011568:	687b      	ldr	r3, [r7, #4]
 801156a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801156c:	4b16      	ldr	r3, [pc, #88]	; (80115c8 <tcp_process+0x5a8>)
 801156e:	681b      	ldr	r3, [r3, #0]
 8011570:	429a      	cmp	r2, r3
 8011572:	d15a      	bne.n	801162a <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8011574:	687b      	ldr	r3, [r7, #4]
 8011576:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8011578:	2b00      	cmp	r3, #0
 801157a:	d156      	bne.n	801162a <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 801157c:	687b      	ldr	r3, [r7, #4]
 801157e:	8b5b      	ldrh	r3, [r3, #26]
 8011580:	f043 0302 	orr.w	r3, r3, #2
 8011584:	b29a      	uxth	r2, r3
 8011586:	687b      	ldr	r3, [r7, #4]
 8011588:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 801158a:	6878      	ldr	r0, [r7, #4]
 801158c:	f7fe fdbe 	bl	801010c <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8011590:	4b18      	ldr	r3, [pc, #96]	; (80115f4 <tcp_process+0x5d4>)
 8011592:	681b      	ldr	r3, [r3, #0]
 8011594:	687a      	ldr	r2, [r7, #4]
 8011596:	429a      	cmp	r2, r3
 8011598:	d105      	bne.n	80115a6 <tcp_process+0x586>
 801159a:	4b16      	ldr	r3, [pc, #88]	; (80115f4 <tcp_process+0x5d4>)
 801159c:	681b      	ldr	r3, [r3, #0]
 801159e:	68db      	ldr	r3, [r3, #12]
 80115a0:	4a14      	ldr	r2, [pc, #80]	; (80115f4 <tcp_process+0x5d4>)
 80115a2:	6013      	str	r3, [r2, #0]
 80115a4:	e02e      	b.n	8011604 <tcp_process+0x5e4>
 80115a6:	4b13      	ldr	r3, [pc, #76]	; (80115f4 <tcp_process+0x5d4>)
 80115a8:	681b      	ldr	r3, [r3, #0]
 80115aa:	617b      	str	r3, [r7, #20]
 80115ac:	e027      	b.n	80115fe <tcp_process+0x5de>
 80115ae:	697b      	ldr	r3, [r7, #20]
 80115b0:	68db      	ldr	r3, [r3, #12]
 80115b2:	687a      	ldr	r2, [r7, #4]
 80115b4:	429a      	cmp	r2, r3
 80115b6:	d11f      	bne.n	80115f8 <tcp_process+0x5d8>
 80115b8:	687b      	ldr	r3, [r7, #4]
 80115ba:	68da      	ldr	r2, [r3, #12]
 80115bc:	697b      	ldr	r3, [r7, #20]
 80115be:	60da      	str	r2, [r3, #12]
 80115c0:	e020      	b.n	8011604 <tcp_process+0x5e4>
 80115c2:	bf00      	nop
 80115c4:	20004674 	.word	0x20004674
 80115c8:	2000466c 	.word	0x2000466c
 80115cc:	20004672 	.word	0x20004672
 80115d0:	20004668 	.word	0x20004668
 80115d4:	20004658 	.word	0x20004658
 80115d8:	20007a48 	.word	0x20007a48
 80115dc:	20007a4c 	.word	0x20007a4c
 80115e0:	0801a494 	.word	0x0801a494
 80115e4:	0801a734 	.word	0x0801a734
 80115e8:	0801a4e0 	.word	0x0801a4e0
 80115ec:	20004670 	.word	0x20004670
 80115f0:	20004675 	.word	0x20004675
 80115f4:	2000d288 	.word	0x2000d288
 80115f8:	697b      	ldr	r3, [r7, #20]
 80115fa:	68db      	ldr	r3, [r3, #12]
 80115fc:	617b      	str	r3, [r7, #20]
 80115fe:	697b      	ldr	r3, [r7, #20]
 8011600:	2b00      	cmp	r3, #0
 8011602:	d1d4      	bne.n	80115ae <tcp_process+0x58e>
 8011604:	687b      	ldr	r3, [r7, #4]
 8011606:	2200      	movs	r2, #0
 8011608:	60da      	str	r2, [r3, #12]
 801160a:	4b77      	ldr	r3, [pc, #476]	; (80117e8 <tcp_process+0x7c8>)
 801160c:	2201      	movs	r2, #1
 801160e:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8011610:	687b      	ldr	r3, [r7, #4]
 8011612:	220a      	movs	r2, #10
 8011614:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8011616:	4b75      	ldr	r3, [pc, #468]	; (80117ec <tcp_process+0x7cc>)
 8011618:	681a      	ldr	r2, [r3, #0]
 801161a:	687b      	ldr	r3, [r7, #4]
 801161c:	60da      	str	r2, [r3, #12]
 801161e:	4a73      	ldr	r2, [pc, #460]	; (80117ec <tcp_process+0x7cc>)
 8011620:	687b      	ldr	r3, [r7, #4]
 8011622:	6013      	str	r3, [r2, #0]
 8011624:	f003 f962 	bl	80148ec <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8011628:	e0d2      	b.n	80117d0 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 801162a:	687b      	ldr	r3, [r7, #4]
 801162c:	8b5b      	ldrh	r3, [r3, #26]
 801162e:	f043 0302 	orr.w	r3, r3, #2
 8011632:	b29a      	uxth	r2, r3
 8011634:	687b      	ldr	r3, [r7, #4]
 8011636:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8011638:	687b      	ldr	r3, [r7, #4]
 801163a:	2208      	movs	r2, #8
 801163c:	751a      	strb	r2, [r3, #20]
      break;
 801163e:	e0c7      	b.n	80117d0 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8011640:	4b6b      	ldr	r3, [pc, #428]	; (80117f0 <tcp_process+0x7d0>)
 8011642:	781b      	ldrb	r3, [r3, #0]
 8011644:	f003 0310 	and.w	r3, r3, #16
 8011648:	2b00      	cmp	r3, #0
 801164a:	f000 80c1 	beq.w	80117d0 <tcp_process+0x7b0>
 801164e:	687b      	ldr	r3, [r7, #4]
 8011650:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011652:	4b68      	ldr	r3, [pc, #416]	; (80117f4 <tcp_process+0x7d4>)
 8011654:	681b      	ldr	r3, [r3, #0]
 8011656:	429a      	cmp	r2, r3
 8011658:	f040 80ba 	bne.w	80117d0 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 801165c:	687b      	ldr	r3, [r7, #4]
 801165e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8011660:	2b00      	cmp	r3, #0
 8011662:	f040 80b5 	bne.w	80117d0 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8011666:	687b      	ldr	r3, [r7, #4]
 8011668:	2206      	movs	r2, #6
 801166a:	751a      	strb	r2, [r3, #20]
      break;
 801166c:	e0b0      	b.n	80117d0 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 801166e:	6878      	ldr	r0, [r7, #4]
 8011670:	f000 f9ca 	bl	8011a08 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8011674:	4b60      	ldr	r3, [pc, #384]	; (80117f8 <tcp_process+0x7d8>)
 8011676:	781b      	ldrb	r3, [r3, #0]
 8011678:	f003 0320 	and.w	r3, r3, #32
 801167c:	2b00      	cmp	r3, #0
 801167e:	f000 80a9 	beq.w	80117d4 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8011682:	687b      	ldr	r3, [r7, #4]
 8011684:	8b5b      	ldrh	r3, [r3, #26]
 8011686:	f043 0302 	orr.w	r3, r3, #2
 801168a:	b29a      	uxth	r2, r3
 801168c:	687b      	ldr	r3, [r7, #4]
 801168e:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8011690:	6878      	ldr	r0, [r7, #4]
 8011692:	f7fe fd3b 	bl	801010c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8011696:	4b59      	ldr	r3, [pc, #356]	; (80117fc <tcp_process+0x7dc>)
 8011698:	681b      	ldr	r3, [r3, #0]
 801169a:	687a      	ldr	r2, [r7, #4]
 801169c:	429a      	cmp	r2, r3
 801169e:	d105      	bne.n	80116ac <tcp_process+0x68c>
 80116a0:	4b56      	ldr	r3, [pc, #344]	; (80117fc <tcp_process+0x7dc>)
 80116a2:	681b      	ldr	r3, [r3, #0]
 80116a4:	68db      	ldr	r3, [r3, #12]
 80116a6:	4a55      	ldr	r2, [pc, #340]	; (80117fc <tcp_process+0x7dc>)
 80116a8:	6013      	str	r3, [r2, #0]
 80116aa:	e013      	b.n	80116d4 <tcp_process+0x6b4>
 80116ac:	4b53      	ldr	r3, [pc, #332]	; (80117fc <tcp_process+0x7dc>)
 80116ae:	681b      	ldr	r3, [r3, #0]
 80116b0:	613b      	str	r3, [r7, #16]
 80116b2:	e00c      	b.n	80116ce <tcp_process+0x6ae>
 80116b4:	693b      	ldr	r3, [r7, #16]
 80116b6:	68db      	ldr	r3, [r3, #12]
 80116b8:	687a      	ldr	r2, [r7, #4]
 80116ba:	429a      	cmp	r2, r3
 80116bc:	d104      	bne.n	80116c8 <tcp_process+0x6a8>
 80116be:	687b      	ldr	r3, [r7, #4]
 80116c0:	68da      	ldr	r2, [r3, #12]
 80116c2:	693b      	ldr	r3, [r7, #16]
 80116c4:	60da      	str	r2, [r3, #12]
 80116c6:	e005      	b.n	80116d4 <tcp_process+0x6b4>
 80116c8:	693b      	ldr	r3, [r7, #16]
 80116ca:	68db      	ldr	r3, [r3, #12]
 80116cc:	613b      	str	r3, [r7, #16]
 80116ce:	693b      	ldr	r3, [r7, #16]
 80116d0:	2b00      	cmp	r3, #0
 80116d2:	d1ef      	bne.n	80116b4 <tcp_process+0x694>
 80116d4:	687b      	ldr	r3, [r7, #4]
 80116d6:	2200      	movs	r2, #0
 80116d8:	60da      	str	r2, [r3, #12]
 80116da:	4b43      	ldr	r3, [pc, #268]	; (80117e8 <tcp_process+0x7c8>)
 80116dc:	2201      	movs	r2, #1
 80116de:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80116e0:	687b      	ldr	r3, [r7, #4]
 80116e2:	220a      	movs	r2, #10
 80116e4:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80116e6:	4b41      	ldr	r3, [pc, #260]	; (80117ec <tcp_process+0x7cc>)
 80116e8:	681a      	ldr	r2, [r3, #0]
 80116ea:	687b      	ldr	r3, [r7, #4]
 80116ec:	60da      	str	r2, [r3, #12]
 80116ee:	4a3f      	ldr	r2, [pc, #252]	; (80117ec <tcp_process+0x7cc>)
 80116f0:	687b      	ldr	r3, [r7, #4]
 80116f2:	6013      	str	r3, [r2, #0]
 80116f4:	f003 f8fa 	bl	80148ec <tcp_timer_needed>
      }
      break;
 80116f8:	e06c      	b.n	80117d4 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 80116fa:	6878      	ldr	r0, [r7, #4]
 80116fc:	f000 f984 	bl	8011a08 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8011700:	4b3b      	ldr	r3, [pc, #236]	; (80117f0 <tcp_process+0x7d0>)
 8011702:	781b      	ldrb	r3, [r3, #0]
 8011704:	f003 0310 	and.w	r3, r3, #16
 8011708:	2b00      	cmp	r3, #0
 801170a:	d065      	beq.n	80117d8 <tcp_process+0x7b8>
 801170c:	687b      	ldr	r3, [r7, #4]
 801170e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011710:	4b38      	ldr	r3, [pc, #224]	; (80117f4 <tcp_process+0x7d4>)
 8011712:	681b      	ldr	r3, [r3, #0]
 8011714:	429a      	cmp	r2, r3
 8011716:	d15f      	bne.n	80117d8 <tcp_process+0x7b8>
 8011718:	687b      	ldr	r3, [r7, #4]
 801171a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801171c:	2b00      	cmp	r3, #0
 801171e:	d15b      	bne.n	80117d8 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8011720:	6878      	ldr	r0, [r7, #4]
 8011722:	f7fe fcf3 	bl	801010c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8011726:	4b35      	ldr	r3, [pc, #212]	; (80117fc <tcp_process+0x7dc>)
 8011728:	681b      	ldr	r3, [r3, #0]
 801172a:	687a      	ldr	r2, [r7, #4]
 801172c:	429a      	cmp	r2, r3
 801172e:	d105      	bne.n	801173c <tcp_process+0x71c>
 8011730:	4b32      	ldr	r3, [pc, #200]	; (80117fc <tcp_process+0x7dc>)
 8011732:	681b      	ldr	r3, [r3, #0]
 8011734:	68db      	ldr	r3, [r3, #12]
 8011736:	4a31      	ldr	r2, [pc, #196]	; (80117fc <tcp_process+0x7dc>)
 8011738:	6013      	str	r3, [r2, #0]
 801173a:	e013      	b.n	8011764 <tcp_process+0x744>
 801173c:	4b2f      	ldr	r3, [pc, #188]	; (80117fc <tcp_process+0x7dc>)
 801173e:	681b      	ldr	r3, [r3, #0]
 8011740:	60fb      	str	r3, [r7, #12]
 8011742:	e00c      	b.n	801175e <tcp_process+0x73e>
 8011744:	68fb      	ldr	r3, [r7, #12]
 8011746:	68db      	ldr	r3, [r3, #12]
 8011748:	687a      	ldr	r2, [r7, #4]
 801174a:	429a      	cmp	r2, r3
 801174c:	d104      	bne.n	8011758 <tcp_process+0x738>
 801174e:	687b      	ldr	r3, [r7, #4]
 8011750:	68da      	ldr	r2, [r3, #12]
 8011752:	68fb      	ldr	r3, [r7, #12]
 8011754:	60da      	str	r2, [r3, #12]
 8011756:	e005      	b.n	8011764 <tcp_process+0x744>
 8011758:	68fb      	ldr	r3, [r7, #12]
 801175a:	68db      	ldr	r3, [r3, #12]
 801175c:	60fb      	str	r3, [r7, #12]
 801175e:	68fb      	ldr	r3, [r7, #12]
 8011760:	2b00      	cmp	r3, #0
 8011762:	d1ef      	bne.n	8011744 <tcp_process+0x724>
 8011764:	687b      	ldr	r3, [r7, #4]
 8011766:	2200      	movs	r2, #0
 8011768:	60da      	str	r2, [r3, #12]
 801176a:	4b1f      	ldr	r3, [pc, #124]	; (80117e8 <tcp_process+0x7c8>)
 801176c:	2201      	movs	r2, #1
 801176e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8011770:	687b      	ldr	r3, [r7, #4]
 8011772:	220a      	movs	r2, #10
 8011774:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8011776:	4b1d      	ldr	r3, [pc, #116]	; (80117ec <tcp_process+0x7cc>)
 8011778:	681a      	ldr	r2, [r3, #0]
 801177a:	687b      	ldr	r3, [r7, #4]
 801177c:	60da      	str	r2, [r3, #12]
 801177e:	4a1b      	ldr	r2, [pc, #108]	; (80117ec <tcp_process+0x7cc>)
 8011780:	687b      	ldr	r3, [r7, #4]
 8011782:	6013      	str	r3, [r2, #0]
 8011784:	f003 f8b2 	bl	80148ec <tcp_timer_needed>
      }
      break;
 8011788:	e026      	b.n	80117d8 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 801178a:	6878      	ldr	r0, [r7, #4]
 801178c:	f000 f93c 	bl	8011a08 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8011790:	4b17      	ldr	r3, [pc, #92]	; (80117f0 <tcp_process+0x7d0>)
 8011792:	781b      	ldrb	r3, [r3, #0]
 8011794:	f003 0310 	and.w	r3, r3, #16
 8011798:	2b00      	cmp	r3, #0
 801179a:	d01f      	beq.n	80117dc <tcp_process+0x7bc>
 801179c:	687b      	ldr	r3, [r7, #4]
 801179e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80117a0:	4b14      	ldr	r3, [pc, #80]	; (80117f4 <tcp_process+0x7d4>)
 80117a2:	681b      	ldr	r3, [r3, #0]
 80117a4:	429a      	cmp	r2, r3
 80117a6:	d119      	bne.n	80117dc <tcp_process+0x7bc>
 80117a8:	687b      	ldr	r3, [r7, #4]
 80117aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80117ac:	2b00      	cmp	r3, #0
 80117ae:	d115      	bne.n	80117dc <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 80117b0:	4b11      	ldr	r3, [pc, #68]	; (80117f8 <tcp_process+0x7d8>)
 80117b2:	781b      	ldrb	r3, [r3, #0]
 80117b4:	f043 0310 	orr.w	r3, r3, #16
 80117b8:	b2da      	uxtb	r2, r3
 80117ba:	4b0f      	ldr	r3, [pc, #60]	; (80117f8 <tcp_process+0x7d8>)
 80117bc:	701a      	strb	r2, [r3, #0]
      }
      break;
 80117be:	e00d      	b.n	80117dc <tcp_process+0x7bc>
    default:
      break;
 80117c0:	bf00      	nop
 80117c2:	e00c      	b.n	80117de <tcp_process+0x7be>
      break;
 80117c4:	bf00      	nop
 80117c6:	e00a      	b.n	80117de <tcp_process+0x7be>
      break;
 80117c8:	bf00      	nop
 80117ca:	e008      	b.n	80117de <tcp_process+0x7be>
      break;
 80117cc:	bf00      	nop
 80117ce:	e006      	b.n	80117de <tcp_process+0x7be>
      break;
 80117d0:	bf00      	nop
 80117d2:	e004      	b.n	80117de <tcp_process+0x7be>
      break;
 80117d4:	bf00      	nop
 80117d6:	e002      	b.n	80117de <tcp_process+0x7be>
      break;
 80117d8:	bf00      	nop
 80117da:	e000      	b.n	80117de <tcp_process+0x7be>
      break;
 80117dc:	bf00      	nop
  }
  return ERR_OK;
 80117de:	2300      	movs	r3, #0
}
 80117e0:	4618      	mov	r0, r3
 80117e2:	3724      	adds	r7, #36	; 0x24
 80117e4:	46bd      	mov	sp, r7
 80117e6:	bd90      	pop	{r4, r7, pc}
 80117e8:	2000d284 	.word	0x2000d284
 80117ec:	2000d298 	.word	0x2000d298
 80117f0:	20004674 	.word	0x20004674
 80117f4:	2000466c 	.word	0x2000466c
 80117f8:	20004675 	.word	0x20004675
 80117fc:	2000d288 	.word	0x2000d288

08011800 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8011800:	b590      	push	{r4, r7, lr}
 8011802:	b085      	sub	sp, #20
 8011804:	af00      	add	r7, sp, #0
 8011806:	6078      	str	r0, [r7, #4]
 8011808:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 801180a:	687b      	ldr	r3, [r7, #4]
 801180c:	2b00      	cmp	r3, #0
 801180e:	d106      	bne.n	801181e <tcp_oos_insert_segment+0x1e>
 8011810:	4b3b      	ldr	r3, [pc, #236]	; (8011900 <tcp_oos_insert_segment+0x100>)
 8011812:	f240 421f 	movw	r2, #1055	; 0x41f
 8011816:	493b      	ldr	r1, [pc, #236]	; (8011904 <tcp_oos_insert_segment+0x104>)
 8011818:	483b      	ldr	r0, [pc, #236]	; (8011908 <tcp_oos_insert_segment+0x108>)
 801181a:	f005 fecd 	bl	80175b8 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801181e:	687b      	ldr	r3, [r7, #4]
 8011820:	68db      	ldr	r3, [r3, #12]
 8011822:	899b      	ldrh	r3, [r3, #12]
 8011824:	b29b      	uxth	r3, r3
 8011826:	4618      	mov	r0, r3
 8011828:	f7fb f96c 	bl	800cb04 <lwip_htons>
 801182c:	4603      	mov	r3, r0
 801182e:	b2db      	uxtb	r3, r3
 8011830:	f003 0301 	and.w	r3, r3, #1
 8011834:	2b00      	cmp	r3, #0
 8011836:	d028      	beq.n	801188a <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8011838:	6838      	ldr	r0, [r7, #0]
 801183a:	f7fe f999 	bl	800fb70 <tcp_segs_free>
    next = NULL;
 801183e:	2300      	movs	r3, #0
 8011840:	603b      	str	r3, [r7, #0]
 8011842:	e056      	b.n	80118f2 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8011844:	683b      	ldr	r3, [r7, #0]
 8011846:	68db      	ldr	r3, [r3, #12]
 8011848:	899b      	ldrh	r3, [r3, #12]
 801184a:	b29b      	uxth	r3, r3
 801184c:	4618      	mov	r0, r3
 801184e:	f7fb f959 	bl	800cb04 <lwip_htons>
 8011852:	4603      	mov	r3, r0
 8011854:	b2db      	uxtb	r3, r3
 8011856:	f003 0301 	and.w	r3, r3, #1
 801185a:	2b00      	cmp	r3, #0
 801185c:	d00d      	beq.n	801187a <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 801185e:	687b      	ldr	r3, [r7, #4]
 8011860:	68db      	ldr	r3, [r3, #12]
 8011862:	899b      	ldrh	r3, [r3, #12]
 8011864:	b29c      	uxth	r4, r3
 8011866:	2001      	movs	r0, #1
 8011868:	f7fb f94c 	bl	800cb04 <lwip_htons>
 801186c:	4603      	mov	r3, r0
 801186e:	461a      	mov	r2, r3
 8011870:	687b      	ldr	r3, [r7, #4]
 8011872:	68db      	ldr	r3, [r3, #12]
 8011874:	4322      	orrs	r2, r4
 8011876:	b292      	uxth	r2, r2
 8011878:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 801187a:	683b      	ldr	r3, [r7, #0]
 801187c:	60fb      	str	r3, [r7, #12]
      next = next->next;
 801187e:	683b      	ldr	r3, [r7, #0]
 8011880:	681b      	ldr	r3, [r3, #0]
 8011882:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8011884:	68f8      	ldr	r0, [r7, #12]
 8011886:	f7fe f987 	bl	800fb98 <tcp_seg_free>
    while (next &&
 801188a:	683b      	ldr	r3, [r7, #0]
 801188c:	2b00      	cmp	r3, #0
 801188e:	d00e      	beq.n	80118ae <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8011890:	687b      	ldr	r3, [r7, #4]
 8011892:	891b      	ldrh	r3, [r3, #8]
 8011894:	461a      	mov	r2, r3
 8011896:	4b1d      	ldr	r3, [pc, #116]	; (801190c <tcp_oos_insert_segment+0x10c>)
 8011898:	681b      	ldr	r3, [r3, #0]
 801189a:	441a      	add	r2, r3
 801189c:	683b      	ldr	r3, [r7, #0]
 801189e:	68db      	ldr	r3, [r3, #12]
 80118a0:	685b      	ldr	r3, [r3, #4]
 80118a2:	6839      	ldr	r1, [r7, #0]
 80118a4:	8909      	ldrh	r1, [r1, #8]
 80118a6:	440b      	add	r3, r1
 80118a8:	1ad3      	subs	r3, r2, r3
    while (next &&
 80118aa:	2b00      	cmp	r3, #0
 80118ac:	daca      	bge.n	8011844 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 80118ae:	683b      	ldr	r3, [r7, #0]
 80118b0:	2b00      	cmp	r3, #0
 80118b2:	d01e      	beq.n	80118f2 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 80118b4:	687b      	ldr	r3, [r7, #4]
 80118b6:	891b      	ldrh	r3, [r3, #8]
 80118b8:	461a      	mov	r2, r3
 80118ba:	4b14      	ldr	r3, [pc, #80]	; (801190c <tcp_oos_insert_segment+0x10c>)
 80118bc:	681b      	ldr	r3, [r3, #0]
 80118be:	441a      	add	r2, r3
 80118c0:	683b      	ldr	r3, [r7, #0]
 80118c2:	68db      	ldr	r3, [r3, #12]
 80118c4:	685b      	ldr	r3, [r3, #4]
 80118c6:	1ad3      	subs	r3, r2, r3
    if (next &&
 80118c8:	2b00      	cmp	r3, #0
 80118ca:	dd12      	ble.n	80118f2 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 80118cc:	683b      	ldr	r3, [r7, #0]
 80118ce:	68db      	ldr	r3, [r3, #12]
 80118d0:	685b      	ldr	r3, [r3, #4]
 80118d2:	b29a      	uxth	r2, r3
 80118d4:	4b0d      	ldr	r3, [pc, #52]	; (801190c <tcp_oos_insert_segment+0x10c>)
 80118d6:	681b      	ldr	r3, [r3, #0]
 80118d8:	b29b      	uxth	r3, r3
 80118da:	1ad3      	subs	r3, r2, r3
 80118dc:	b29a      	uxth	r2, r3
 80118de:	687b      	ldr	r3, [r7, #4]
 80118e0:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 80118e2:	687b      	ldr	r3, [r7, #4]
 80118e4:	685a      	ldr	r2, [r3, #4]
 80118e6:	687b      	ldr	r3, [r7, #4]
 80118e8:	891b      	ldrh	r3, [r3, #8]
 80118ea:	4619      	mov	r1, r3
 80118ec:	4610      	mov	r0, r2
 80118ee:	f7fc fb25 	bl	800df3c <pbuf_realloc>
    }
  }
  cseg->next = next;
 80118f2:	687b      	ldr	r3, [r7, #4]
 80118f4:	683a      	ldr	r2, [r7, #0]
 80118f6:	601a      	str	r2, [r3, #0]
}
 80118f8:	bf00      	nop
 80118fa:	3714      	adds	r7, #20
 80118fc:	46bd      	mov	sp, r7
 80118fe:	bd90      	pop	{r4, r7, pc}
 8011900:	0801a494 	.word	0x0801a494
 8011904:	0801a754 	.word	0x0801a754
 8011908:	0801a4e0 	.word	0x0801a4e0
 801190c:	20004668 	.word	0x20004668

08011910 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8011910:	b5b0      	push	{r4, r5, r7, lr}
 8011912:	b086      	sub	sp, #24
 8011914:	af00      	add	r7, sp, #0
 8011916:	60f8      	str	r0, [r7, #12]
 8011918:	60b9      	str	r1, [r7, #8]
 801191a:	607a      	str	r2, [r7, #4]
 801191c:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 801191e:	e03e      	b.n	801199e <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8011920:	68bb      	ldr	r3, [r7, #8]
 8011922:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8011924:	68bb      	ldr	r3, [r7, #8]
 8011926:	681b      	ldr	r3, [r3, #0]
 8011928:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 801192a:	697b      	ldr	r3, [r7, #20]
 801192c:	685b      	ldr	r3, [r3, #4]
 801192e:	4618      	mov	r0, r3
 8011930:	f7fc fd4a 	bl	800e3c8 <pbuf_clen>
 8011934:	4603      	mov	r3, r0
 8011936:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8011938:	68fb      	ldr	r3, [r7, #12]
 801193a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801193e:	8a7a      	ldrh	r2, [r7, #18]
 8011940:	429a      	cmp	r2, r3
 8011942:	d906      	bls.n	8011952 <tcp_free_acked_segments+0x42>
 8011944:	4b2a      	ldr	r3, [pc, #168]	; (80119f0 <tcp_free_acked_segments+0xe0>)
 8011946:	f240 4257 	movw	r2, #1111	; 0x457
 801194a:	492a      	ldr	r1, [pc, #168]	; (80119f4 <tcp_free_acked_segments+0xe4>)
 801194c:	482a      	ldr	r0, [pc, #168]	; (80119f8 <tcp_free_acked_segments+0xe8>)
 801194e:	f005 fe33 	bl	80175b8 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8011952:	68fb      	ldr	r3, [r7, #12]
 8011954:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8011958:	8a7b      	ldrh	r3, [r7, #18]
 801195a:	1ad3      	subs	r3, r2, r3
 801195c:	b29a      	uxth	r2, r3
 801195e:	68fb      	ldr	r3, [r7, #12]
 8011960:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8011964:	697b      	ldr	r3, [r7, #20]
 8011966:	891a      	ldrh	r2, [r3, #8]
 8011968:	4b24      	ldr	r3, [pc, #144]	; (80119fc <tcp_free_acked_segments+0xec>)
 801196a:	881b      	ldrh	r3, [r3, #0]
 801196c:	4413      	add	r3, r2
 801196e:	b29a      	uxth	r2, r3
 8011970:	4b22      	ldr	r3, [pc, #136]	; (80119fc <tcp_free_acked_segments+0xec>)
 8011972:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8011974:	6978      	ldr	r0, [r7, #20]
 8011976:	f7fe f90f 	bl	800fb98 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 801197a:	68fb      	ldr	r3, [r7, #12]
 801197c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011980:	2b00      	cmp	r3, #0
 8011982:	d00c      	beq.n	801199e <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8011984:	68bb      	ldr	r3, [r7, #8]
 8011986:	2b00      	cmp	r3, #0
 8011988:	d109      	bne.n	801199e <tcp_free_acked_segments+0x8e>
 801198a:	683b      	ldr	r3, [r7, #0]
 801198c:	2b00      	cmp	r3, #0
 801198e:	d106      	bne.n	801199e <tcp_free_acked_segments+0x8e>
 8011990:	4b17      	ldr	r3, [pc, #92]	; (80119f0 <tcp_free_acked_segments+0xe0>)
 8011992:	f240 4262 	movw	r2, #1122	; 0x462
 8011996:	491a      	ldr	r1, [pc, #104]	; (8011a00 <tcp_free_acked_segments+0xf0>)
 8011998:	4817      	ldr	r0, [pc, #92]	; (80119f8 <tcp_free_acked_segments+0xe8>)
 801199a:	f005 fe0d 	bl	80175b8 <iprintf>
  while (seg_list != NULL &&
 801199e:	68bb      	ldr	r3, [r7, #8]
 80119a0:	2b00      	cmp	r3, #0
 80119a2:	d020      	beq.n	80119e6 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 80119a4:	68bb      	ldr	r3, [r7, #8]
 80119a6:	68db      	ldr	r3, [r3, #12]
 80119a8:	685b      	ldr	r3, [r3, #4]
 80119aa:	4618      	mov	r0, r3
 80119ac:	f7fb f8bf 	bl	800cb2e <lwip_htonl>
 80119b0:	4604      	mov	r4, r0
 80119b2:	68bb      	ldr	r3, [r7, #8]
 80119b4:	891b      	ldrh	r3, [r3, #8]
 80119b6:	461d      	mov	r5, r3
 80119b8:	68bb      	ldr	r3, [r7, #8]
 80119ba:	68db      	ldr	r3, [r3, #12]
 80119bc:	899b      	ldrh	r3, [r3, #12]
 80119be:	b29b      	uxth	r3, r3
 80119c0:	4618      	mov	r0, r3
 80119c2:	f7fb f89f 	bl	800cb04 <lwip_htons>
 80119c6:	4603      	mov	r3, r0
 80119c8:	b2db      	uxtb	r3, r3
 80119ca:	f003 0303 	and.w	r3, r3, #3
 80119ce:	2b00      	cmp	r3, #0
 80119d0:	d001      	beq.n	80119d6 <tcp_free_acked_segments+0xc6>
 80119d2:	2301      	movs	r3, #1
 80119d4:	e000      	b.n	80119d8 <tcp_free_acked_segments+0xc8>
 80119d6:	2300      	movs	r3, #0
 80119d8:	442b      	add	r3, r5
 80119da:	18e2      	adds	r2, r4, r3
 80119dc:	4b09      	ldr	r3, [pc, #36]	; (8011a04 <tcp_free_acked_segments+0xf4>)
 80119de:	681b      	ldr	r3, [r3, #0]
 80119e0:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 80119e2:	2b00      	cmp	r3, #0
 80119e4:	dd9c      	ble.n	8011920 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 80119e6:	68bb      	ldr	r3, [r7, #8]
}
 80119e8:	4618      	mov	r0, r3
 80119ea:	3718      	adds	r7, #24
 80119ec:	46bd      	mov	sp, r7
 80119ee:	bdb0      	pop	{r4, r5, r7, pc}
 80119f0:	0801a494 	.word	0x0801a494
 80119f4:	0801a77c 	.word	0x0801a77c
 80119f8:	0801a4e0 	.word	0x0801a4e0
 80119fc:	20004670 	.word	0x20004670
 8011a00:	0801a7a4 	.word	0x0801a7a4
 8011a04:	2000466c 	.word	0x2000466c

08011a08 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8011a08:	b5b0      	push	{r4, r5, r7, lr}
 8011a0a:	b094      	sub	sp, #80	; 0x50
 8011a0c:	af00      	add	r7, sp, #0
 8011a0e:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8011a10:	2300      	movs	r3, #0
 8011a12:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8011a14:	687b      	ldr	r3, [r7, #4]
 8011a16:	2b00      	cmp	r3, #0
 8011a18:	d106      	bne.n	8011a28 <tcp_receive+0x20>
 8011a1a:	4ba6      	ldr	r3, [pc, #664]	; (8011cb4 <tcp_receive+0x2ac>)
 8011a1c:	f240 427b 	movw	r2, #1147	; 0x47b
 8011a20:	49a5      	ldr	r1, [pc, #660]	; (8011cb8 <tcp_receive+0x2b0>)
 8011a22:	48a6      	ldr	r0, [pc, #664]	; (8011cbc <tcp_receive+0x2b4>)
 8011a24:	f005 fdc8 	bl	80175b8 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8011a28:	687b      	ldr	r3, [r7, #4]
 8011a2a:	7d1b      	ldrb	r3, [r3, #20]
 8011a2c:	2b03      	cmp	r3, #3
 8011a2e:	d806      	bhi.n	8011a3e <tcp_receive+0x36>
 8011a30:	4ba0      	ldr	r3, [pc, #640]	; (8011cb4 <tcp_receive+0x2ac>)
 8011a32:	f240 427c 	movw	r2, #1148	; 0x47c
 8011a36:	49a2      	ldr	r1, [pc, #648]	; (8011cc0 <tcp_receive+0x2b8>)
 8011a38:	48a0      	ldr	r0, [pc, #640]	; (8011cbc <tcp_receive+0x2b4>)
 8011a3a:	f005 fdbd 	bl	80175b8 <iprintf>

  if (flags & TCP_ACK) {
 8011a3e:	4ba1      	ldr	r3, [pc, #644]	; (8011cc4 <tcp_receive+0x2bc>)
 8011a40:	781b      	ldrb	r3, [r3, #0]
 8011a42:	f003 0310 	and.w	r3, r3, #16
 8011a46:	2b00      	cmp	r3, #0
 8011a48:	f000 8263 	beq.w	8011f12 <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8011a4c:	687b      	ldr	r3, [r7, #4]
 8011a4e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011a52:	461a      	mov	r2, r3
 8011a54:	687b      	ldr	r3, [r7, #4]
 8011a56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011a58:	4413      	add	r3, r2
 8011a5a:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8011a5c:	687b      	ldr	r3, [r7, #4]
 8011a5e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8011a60:	4b99      	ldr	r3, [pc, #612]	; (8011cc8 <tcp_receive+0x2c0>)
 8011a62:	681b      	ldr	r3, [r3, #0]
 8011a64:	1ad3      	subs	r3, r2, r3
 8011a66:	2b00      	cmp	r3, #0
 8011a68:	db1b      	blt.n	8011aa2 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8011a6a:	687b      	ldr	r3, [r7, #4]
 8011a6c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8011a6e:	4b96      	ldr	r3, [pc, #600]	; (8011cc8 <tcp_receive+0x2c0>)
 8011a70:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8011a72:	429a      	cmp	r2, r3
 8011a74:	d106      	bne.n	8011a84 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8011a76:	687b      	ldr	r3, [r7, #4]
 8011a78:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8011a7a:	4b94      	ldr	r3, [pc, #592]	; (8011ccc <tcp_receive+0x2c4>)
 8011a7c:	681b      	ldr	r3, [r3, #0]
 8011a7e:	1ad3      	subs	r3, r2, r3
 8011a80:	2b00      	cmp	r3, #0
 8011a82:	db0e      	blt.n	8011aa2 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8011a84:	687b      	ldr	r3, [r7, #4]
 8011a86:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8011a88:	4b90      	ldr	r3, [pc, #576]	; (8011ccc <tcp_receive+0x2c4>)
 8011a8a:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8011a8c:	429a      	cmp	r2, r3
 8011a8e:	d125      	bne.n	8011adc <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8011a90:	4b8f      	ldr	r3, [pc, #572]	; (8011cd0 <tcp_receive+0x2c8>)
 8011a92:	681b      	ldr	r3, [r3, #0]
 8011a94:	89db      	ldrh	r3, [r3, #14]
 8011a96:	b29a      	uxth	r2, r3
 8011a98:	687b      	ldr	r3, [r7, #4]
 8011a9a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011a9e:	429a      	cmp	r2, r3
 8011aa0:	d91c      	bls.n	8011adc <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8011aa2:	4b8b      	ldr	r3, [pc, #556]	; (8011cd0 <tcp_receive+0x2c8>)
 8011aa4:	681b      	ldr	r3, [r3, #0]
 8011aa6:	89db      	ldrh	r3, [r3, #14]
 8011aa8:	b29a      	uxth	r2, r3
 8011aaa:	687b      	ldr	r3, [r7, #4]
 8011aac:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8011ab0:	687b      	ldr	r3, [r7, #4]
 8011ab2:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8011ab6:	687b      	ldr	r3, [r7, #4]
 8011ab8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011abc:	429a      	cmp	r2, r3
 8011abe:	d205      	bcs.n	8011acc <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8011ac0:	687b      	ldr	r3, [r7, #4]
 8011ac2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8011ac6:	687b      	ldr	r3, [r7, #4]
 8011ac8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8011acc:	4b7e      	ldr	r3, [pc, #504]	; (8011cc8 <tcp_receive+0x2c0>)
 8011ace:	681a      	ldr	r2, [r3, #0]
 8011ad0:	687b      	ldr	r3, [r7, #4]
 8011ad2:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8011ad4:	4b7d      	ldr	r3, [pc, #500]	; (8011ccc <tcp_receive+0x2c4>)
 8011ad6:	681a      	ldr	r2, [r3, #0]
 8011ad8:	687b      	ldr	r3, [r7, #4]
 8011ada:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8011adc:	4b7b      	ldr	r3, [pc, #492]	; (8011ccc <tcp_receive+0x2c4>)
 8011ade:	681a      	ldr	r2, [r3, #0]
 8011ae0:	687b      	ldr	r3, [r7, #4]
 8011ae2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011ae4:	1ad3      	subs	r3, r2, r3
 8011ae6:	2b00      	cmp	r3, #0
 8011ae8:	dc58      	bgt.n	8011b9c <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8011aea:	4b7a      	ldr	r3, [pc, #488]	; (8011cd4 <tcp_receive+0x2cc>)
 8011aec:	881b      	ldrh	r3, [r3, #0]
 8011aee:	2b00      	cmp	r3, #0
 8011af0:	d14b      	bne.n	8011b8a <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8011af2:	687b      	ldr	r3, [r7, #4]
 8011af4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011af6:	687a      	ldr	r2, [r7, #4]
 8011af8:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8011afc:	4413      	add	r3, r2
 8011afe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011b00:	429a      	cmp	r2, r3
 8011b02:	d142      	bne.n	8011b8a <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8011b04:	687b      	ldr	r3, [r7, #4]
 8011b06:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8011b0a:	2b00      	cmp	r3, #0
 8011b0c:	db3d      	blt.n	8011b8a <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8011b0e:	687b      	ldr	r3, [r7, #4]
 8011b10:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011b12:	4b6e      	ldr	r3, [pc, #440]	; (8011ccc <tcp_receive+0x2c4>)
 8011b14:	681b      	ldr	r3, [r3, #0]
 8011b16:	429a      	cmp	r2, r3
 8011b18:	d137      	bne.n	8011b8a <tcp_receive+0x182>
              found_dupack = 1;
 8011b1a:	2301      	movs	r3, #1
 8011b1c:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8011b1e:	687b      	ldr	r3, [r7, #4]
 8011b20:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8011b24:	2bff      	cmp	r3, #255	; 0xff
 8011b26:	d007      	beq.n	8011b38 <tcp_receive+0x130>
                ++pcb->dupacks;
 8011b28:	687b      	ldr	r3, [r7, #4]
 8011b2a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8011b2e:	3301      	adds	r3, #1
 8011b30:	b2da      	uxtb	r2, r3
 8011b32:	687b      	ldr	r3, [r7, #4]
 8011b34:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8011b38:	687b      	ldr	r3, [r7, #4]
 8011b3a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8011b3e:	2b03      	cmp	r3, #3
 8011b40:	d91b      	bls.n	8011b7a <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8011b42:	687b      	ldr	r3, [r7, #4]
 8011b44:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011b48:	687b      	ldr	r3, [r7, #4]
 8011b4a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011b4c:	4413      	add	r3, r2
 8011b4e:	b29a      	uxth	r2, r3
 8011b50:	687b      	ldr	r3, [r7, #4]
 8011b52:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011b56:	429a      	cmp	r2, r3
 8011b58:	d30a      	bcc.n	8011b70 <tcp_receive+0x168>
 8011b5a:	687b      	ldr	r3, [r7, #4]
 8011b5c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011b60:	687b      	ldr	r3, [r7, #4]
 8011b62:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011b64:	4413      	add	r3, r2
 8011b66:	b29a      	uxth	r2, r3
 8011b68:	687b      	ldr	r3, [r7, #4]
 8011b6a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8011b6e:	e004      	b.n	8011b7a <tcp_receive+0x172>
 8011b70:	687b      	ldr	r3, [r7, #4]
 8011b72:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011b76:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 8011b7a:	687b      	ldr	r3, [r7, #4]
 8011b7c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8011b80:	2b02      	cmp	r3, #2
 8011b82:	d902      	bls.n	8011b8a <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8011b84:	6878      	ldr	r0, [r7, #4]
 8011b86:	f002 fb47 	bl	8014218 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8011b8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011b8c:	2b00      	cmp	r3, #0
 8011b8e:	f040 8160 	bne.w	8011e52 <tcp_receive+0x44a>
        pcb->dupacks = 0;
 8011b92:	687b      	ldr	r3, [r7, #4]
 8011b94:	2200      	movs	r2, #0
 8011b96:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8011b9a:	e15a      	b.n	8011e52 <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8011b9c:	4b4b      	ldr	r3, [pc, #300]	; (8011ccc <tcp_receive+0x2c4>)
 8011b9e:	681a      	ldr	r2, [r3, #0]
 8011ba0:	687b      	ldr	r3, [r7, #4]
 8011ba2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011ba4:	1ad3      	subs	r3, r2, r3
 8011ba6:	3b01      	subs	r3, #1
 8011ba8:	2b00      	cmp	r3, #0
 8011baa:	f2c0 814d 	blt.w	8011e48 <tcp_receive+0x440>
 8011bae:	4b47      	ldr	r3, [pc, #284]	; (8011ccc <tcp_receive+0x2c4>)
 8011bb0:	681a      	ldr	r2, [r3, #0]
 8011bb2:	687b      	ldr	r3, [r7, #4]
 8011bb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011bb6:	1ad3      	subs	r3, r2, r3
 8011bb8:	2b00      	cmp	r3, #0
 8011bba:	f300 8145 	bgt.w	8011e48 <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8011bbe:	687b      	ldr	r3, [r7, #4]
 8011bc0:	8b5b      	ldrh	r3, [r3, #26]
 8011bc2:	f003 0304 	and.w	r3, r3, #4
 8011bc6:	2b00      	cmp	r3, #0
 8011bc8:	d010      	beq.n	8011bec <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8011bca:	687b      	ldr	r3, [r7, #4]
 8011bcc:	8b5b      	ldrh	r3, [r3, #26]
 8011bce:	f023 0304 	bic.w	r3, r3, #4
 8011bd2:	b29a      	uxth	r2, r3
 8011bd4:	687b      	ldr	r3, [r7, #4]
 8011bd6:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8011bd8:	687b      	ldr	r3, [r7, #4]
 8011bda:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8011bde:	687b      	ldr	r3, [r7, #4]
 8011be0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8011be4:	687b      	ldr	r3, [r7, #4]
 8011be6:	2200      	movs	r2, #0
 8011be8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8011bec:	687b      	ldr	r3, [r7, #4]
 8011bee:	2200      	movs	r2, #0
 8011bf0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8011bf4:	687b      	ldr	r3, [r7, #4]
 8011bf6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8011bfa:	10db      	asrs	r3, r3, #3
 8011bfc:	b21b      	sxth	r3, r3
 8011bfe:	b29a      	uxth	r2, r3
 8011c00:	687b      	ldr	r3, [r7, #4]
 8011c02:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8011c06:	b29b      	uxth	r3, r3
 8011c08:	4413      	add	r3, r2
 8011c0a:	b29b      	uxth	r3, r3
 8011c0c:	b21a      	sxth	r2, r3
 8011c0e:	687b      	ldr	r3, [r7, #4]
 8011c10:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8011c14:	4b2d      	ldr	r3, [pc, #180]	; (8011ccc <tcp_receive+0x2c4>)
 8011c16:	681b      	ldr	r3, [r3, #0]
 8011c18:	b29a      	uxth	r2, r3
 8011c1a:	687b      	ldr	r3, [r7, #4]
 8011c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011c1e:	b29b      	uxth	r3, r3
 8011c20:	1ad3      	subs	r3, r2, r3
 8011c22:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8011c24:	687b      	ldr	r3, [r7, #4]
 8011c26:	2200      	movs	r2, #0
 8011c28:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8011c2c:	4b27      	ldr	r3, [pc, #156]	; (8011ccc <tcp_receive+0x2c4>)
 8011c2e:	681a      	ldr	r2, [r3, #0]
 8011c30:	687b      	ldr	r3, [r7, #4]
 8011c32:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8011c34:	687b      	ldr	r3, [r7, #4]
 8011c36:	7d1b      	ldrb	r3, [r3, #20]
 8011c38:	2b03      	cmp	r3, #3
 8011c3a:	f240 8096 	bls.w	8011d6a <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 8011c3e:	687b      	ldr	r3, [r7, #4]
 8011c40:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011c44:	687b      	ldr	r3, [r7, #4]
 8011c46:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8011c4a:	429a      	cmp	r2, r3
 8011c4c:	d244      	bcs.n	8011cd8 <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8011c4e:	687b      	ldr	r3, [r7, #4]
 8011c50:	8b5b      	ldrh	r3, [r3, #26]
 8011c52:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011c56:	2b00      	cmp	r3, #0
 8011c58:	d001      	beq.n	8011c5e <tcp_receive+0x256>
 8011c5a:	2301      	movs	r3, #1
 8011c5c:	e000      	b.n	8011c60 <tcp_receive+0x258>
 8011c5e:	2302      	movs	r3, #2
 8011c60:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8011c64:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8011c68:	b29a      	uxth	r2, r3
 8011c6a:	687b      	ldr	r3, [r7, #4]
 8011c6c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011c6e:	fb12 f303 	smulbb	r3, r2, r3
 8011c72:	b29b      	uxth	r3, r3
 8011c74:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8011c76:	4293      	cmp	r3, r2
 8011c78:	bf28      	it	cs
 8011c7a:	4613      	movcs	r3, r2
 8011c7c:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8011c7e:	687b      	ldr	r3, [r7, #4]
 8011c80:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011c84:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8011c86:	4413      	add	r3, r2
 8011c88:	b29a      	uxth	r2, r3
 8011c8a:	687b      	ldr	r3, [r7, #4]
 8011c8c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011c90:	429a      	cmp	r2, r3
 8011c92:	d309      	bcc.n	8011ca8 <tcp_receive+0x2a0>
 8011c94:	687b      	ldr	r3, [r7, #4]
 8011c96:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011c9a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8011c9c:	4413      	add	r3, r2
 8011c9e:	b29a      	uxth	r2, r3
 8011ca0:	687b      	ldr	r3, [r7, #4]
 8011ca2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8011ca6:	e060      	b.n	8011d6a <tcp_receive+0x362>
 8011ca8:	687b      	ldr	r3, [r7, #4]
 8011caa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011cae:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8011cb2:	e05a      	b.n	8011d6a <tcp_receive+0x362>
 8011cb4:	0801a494 	.word	0x0801a494
 8011cb8:	0801a7c4 	.word	0x0801a7c4
 8011cbc:	0801a4e0 	.word	0x0801a4e0
 8011cc0:	0801a7e0 	.word	0x0801a7e0
 8011cc4:	20004674 	.word	0x20004674
 8011cc8:	20004668 	.word	0x20004668
 8011ccc:	2000466c 	.word	0x2000466c
 8011cd0:	20004658 	.word	0x20004658
 8011cd4:	20004672 	.word	0x20004672
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8011cd8:	687b      	ldr	r3, [r7, #4]
 8011cda:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8011cde:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8011ce0:	4413      	add	r3, r2
 8011ce2:	b29a      	uxth	r2, r3
 8011ce4:	687b      	ldr	r3, [r7, #4]
 8011ce6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8011cea:	429a      	cmp	r2, r3
 8011cec:	d309      	bcc.n	8011d02 <tcp_receive+0x2fa>
 8011cee:	687b      	ldr	r3, [r7, #4]
 8011cf0:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8011cf4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8011cf6:	4413      	add	r3, r2
 8011cf8:	b29a      	uxth	r2, r3
 8011cfa:	687b      	ldr	r3, [r7, #4]
 8011cfc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8011d00:	e004      	b.n	8011d0c <tcp_receive+0x304>
 8011d02:	687b      	ldr	r3, [r7, #4]
 8011d04:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011d08:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8011d0c:	687b      	ldr	r3, [r7, #4]
 8011d0e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8011d12:	687b      	ldr	r3, [r7, #4]
 8011d14:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011d18:	429a      	cmp	r2, r3
 8011d1a:	d326      	bcc.n	8011d6a <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8011d1c:	687b      	ldr	r3, [r7, #4]
 8011d1e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8011d22:	687b      	ldr	r3, [r7, #4]
 8011d24:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011d28:	1ad3      	subs	r3, r2, r3
 8011d2a:	b29a      	uxth	r2, r3
 8011d2c:	687b      	ldr	r3, [r7, #4]
 8011d2e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8011d32:	687b      	ldr	r3, [r7, #4]
 8011d34:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011d38:	687b      	ldr	r3, [r7, #4]
 8011d3a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011d3c:	4413      	add	r3, r2
 8011d3e:	b29a      	uxth	r2, r3
 8011d40:	687b      	ldr	r3, [r7, #4]
 8011d42:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011d46:	429a      	cmp	r2, r3
 8011d48:	d30a      	bcc.n	8011d60 <tcp_receive+0x358>
 8011d4a:	687b      	ldr	r3, [r7, #4]
 8011d4c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011d50:	687b      	ldr	r3, [r7, #4]
 8011d52:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011d54:	4413      	add	r3, r2
 8011d56:	b29a      	uxth	r2, r3
 8011d58:	687b      	ldr	r3, [r7, #4]
 8011d5a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8011d5e:	e004      	b.n	8011d6a <tcp_receive+0x362>
 8011d60:	687b      	ldr	r3, [r7, #4]
 8011d62:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011d66:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8011d6a:	687b      	ldr	r3, [r7, #4]
 8011d6c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8011d6e:	687b      	ldr	r3, [r7, #4]
 8011d70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011d72:	4a98      	ldr	r2, [pc, #608]	; (8011fd4 <tcp_receive+0x5cc>)
 8011d74:	6878      	ldr	r0, [r7, #4]
 8011d76:	f7ff fdcb 	bl	8011910 <tcp_free_acked_segments>
 8011d7a:	4602      	mov	r2, r0
 8011d7c:	687b      	ldr	r3, [r7, #4]
 8011d7e:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8011d80:	687b      	ldr	r3, [r7, #4]
 8011d82:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8011d84:	687b      	ldr	r3, [r7, #4]
 8011d86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011d88:	4a93      	ldr	r2, [pc, #588]	; (8011fd8 <tcp_receive+0x5d0>)
 8011d8a:	6878      	ldr	r0, [r7, #4]
 8011d8c:	f7ff fdc0 	bl	8011910 <tcp_free_acked_segments>
 8011d90:	4602      	mov	r2, r0
 8011d92:	687b      	ldr	r3, [r7, #4]
 8011d94:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8011d96:	687b      	ldr	r3, [r7, #4]
 8011d98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011d9a:	2b00      	cmp	r3, #0
 8011d9c:	d104      	bne.n	8011da8 <tcp_receive+0x3a0>
        pcb->rtime = -1;
 8011d9e:	687b      	ldr	r3, [r7, #4]
 8011da0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011da4:	861a      	strh	r2, [r3, #48]	; 0x30
 8011da6:	e002      	b.n	8011dae <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 8011da8:	687b      	ldr	r3, [r7, #4]
 8011daa:	2200      	movs	r2, #0
 8011dac:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8011dae:	687b      	ldr	r3, [r7, #4]
 8011db0:	2200      	movs	r2, #0
 8011db2:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8011db4:	687b      	ldr	r3, [r7, #4]
 8011db6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011db8:	2b00      	cmp	r3, #0
 8011dba:	d103      	bne.n	8011dc4 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 8011dbc:	687b      	ldr	r3, [r7, #4]
 8011dbe:	2200      	movs	r2, #0
 8011dc0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8011dc4:	687b      	ldr	r3, [r7, #4]
 8011dc6:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8011dca:	4b84      	ldr	r3, [pc, #528]	; (8011fdc <tcp_receive+0x5d4>)
 8011dcc:	881b      	ldrh	r3, [r3, #0]
 8011dce:	4413      	add	r3, r2
 8011dd0:	b29a      	uxth	r2, r3
 8011dd2:	687b      	ldr	r3, [r7, #4]
 8011dd4:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8011dd8:	687b      	ldr	r3, [r7, #4]
 8011dda:	8b5b      	ldrh	r3, [r3, #26]
 8011ddc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011de0:	2b00      	cmp	r3, #0
 8011de2:	d035      	beq.n	8011e50 <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8011de4:	687b      	ldr	r3, [r7, #4]
 8011de6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011de8:	2b00      	cmp	r3, #0
 8011dea:	d118      	bne.n	8011e1e <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 8011dec:	687b      	ldr	r3, [r7, #4]
 8011dee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011df0:	2b00      	cmp	r3, #0
 8011df2:	d00c      	beq.n	8011e0e <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8011df4:	687b      	ldr	r3, [r7, #4]
 8011df6:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8011df8:	687b      	ldr	r3, [r7, #4]
 8011dfa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011dfc:	68db      	ldr	r3, [r3, #12]
 8011dfe:	685b      	ldr	r3, [r3, #4]
 8011e00:	4618      	mov	r0, r3
 8011e02:	f7fa fe94 	bl	800cb2e <lwip_htonl>
 8011e06:	4603      	mov	r3, r0
 8011e08:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8011e0a:	2b00      	cmp	r3, #0
 8011e0c:	dc20      	bgt.n	8011e50 <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 8011e0e:	687b      	ldr	r3, [r7, #4]
 8011e10:	8b5b      	ldrh	r3, [r3, #26]
 8011e12:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8011e16:	b29a      	uxth	r2, r3
 8011e18:	687b      	ldr	r3, [r7, #4]
 8011e1a:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8011e1c:	e018      	b.n	8011e50 <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8011e1e:	687b      	ldr	r3, [r7, #4]
 8011e20:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8011e22:	687b      	ldr	r3, [r7, #4]
 8011e24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011e26:	68db      	ldr	r3, [r3, #12]
 8011e28:	685b      	ldr	r3, [r3, #4]
 8011e2a:	4618      	mov	r0, r3
 8011e2c:	f7fa fe7f 	bl	800cb2e <lwip_htonl>
 8011e30:	4603      	mov	r3, r0
 8011e32:	1ae3      	subs	r3, r4, r3
 8011e34:	2b00      	cmp	r3, #0
 8011e36:	dc0b      	bgt.n	8011e50 <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 8011e38:	687b      	ldr	r3, [r7, #4]
 8011e3a:	8b5b      	ldrh	r3, [r3, #26]
 8011e3c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8011e40:	b29a      	uxth	r2, r3
 8011e42:	687b      	ldr	r3, [r7, #4]
 8011e44:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8011e46:	e003      	b.n	8011e50 <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8011e48:	6878      	ldr	r0, [r7, #4]
 8011e4a:	f002 fbdf 	bl	801460c <tcp_send_empty_ack>
 8011e4e:	e000      	b.n	8011e52 <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8011e50:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8011e52:	687b      	ldr	r3, [r7, #4]
 8011e54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011e56:	2b00      	cmp	r3, #0
 8011e58:	d05b      	beq.n	8011f12 <tcp_receive+0x50a>
 8011e5a:	687b      	ldr	r3, [r7, #4]
 8011e5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011e5e:	4b60      	ldr	r3, [pc, #384]	; (8011fe0 <tcp_receive+0x5d8>)
 8011e60:	681b      	ldr	r3, [r3, #0]
 8011e62:	1ad3      	subs	r3, r2, r3
 8011e64:	2b00      	cmp	r3, #0
 8011e66:	da54      	bge.n	8011f12 <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8011e68:	4b5e      	ldr	r3, [pc, #376]	; (8011fe4 <tcp_receive+0x5dc>)
 8011e6a:	681b      	ldr	r3, [r3, #0]
 8011e6c:	b29a      	uxth	r2, r3
 8011e6e:	687b      	ldr	r3, [r7, #4]
 8011e70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011e72:	b29b      	uxth	r3, r3
 8011e74:	1ad3      	subs	r3, r2, r3
 8011e76:	b29b      	uxth	r3, r3
 8011e78:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8011e7c:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8011e80:	687b      	ldr	r3, [r7, #4]
 8011e82:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8011e86:	10db      	asrs	r3, r3, #3
 8011e88:	b21b      	sxth	r3, r3
 8011e8a:	b29b      	uxth	r3, r3
 8011e8c:	1ad3      	subs	r3, r2, r3
 8011e8e:	b29b      	uxth	r3, r3
 8011e90:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8011e94:	687b      	ldr	r3, [r7, #4]
 8011e96:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8011e9a:	b29a      	uxth	r2, r3
 8011e9c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8011ea0:	4413      	add	r3, r2
 8011ea2:	b29b      	uxth	r3, r3
 8011ea4:	b21a      	sxth	r2, r3
 8011ea6:	687b      	ldr	r3, [r7, #4]
 8011ea8:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8011eaa:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8011eae:	2b00      	cmp	r3, #0
 8011eb0:	da05      	bge.n	8011ebe <tcp_receive+0x4b6>
        m = (s16_t) - m;
 8011eb2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8011eb6:	425b      	negs	r3, r3
 8011eb8:	b29b      	uxth	r3, r3
 8011eba:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8011ebe:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8011ec2:	687b      	ldr	r3, [r7, #4]
 8011ec4:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8011ec8:	109b      	asrs	r3, r3, #2
 8011eca:	b21b      	sxth	r3, r3
 8011ecc:	b29b      	uxth	r3, r3
 8011ece:	1ad3      	subs	r3, r2, r3
 8011ed0:	b29b      	uxth	r3, r3
 8011ed2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8011ed6:	687b      	ldr	r3, [r7, #4]
 8011ed8:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8011edc:	b29a      	uxth	r2, r3
 8011ede:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8011ee2:	4413      	add	r3, r2
 8011ee4:	b29b      	uxth	r3, r3
 8011ee6:	b21a      	sxth	r2, r3
 8011ee8:	687b      	ldr	r3, [r7, #4]
 8011eea:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8011eec:	687b      	ldr	r3, [r7, #4]
 8011eee:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8011ef2:	10db      	asrs	r3, r3, #3
 8011ef4:	b21b      	sxth	r3, r3
 8011ef6:	b29a      	uxth	r2, r3
 8011ef8:	687b      	ldr	r3, [r7, #4]
 8011efa:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8011efe:	b29b      	uxth	r3, r3
 8011f00:	4413      	add	r3, r2
 8011f02:	b29b      	uxth	r3, r3
 8011f04:	b21a      	sxth	r2, r3
 8011f06:	687b      	ldr	r3, [r7, #4]
 8011f08:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8011f0c:	687b      	ldr	r3, [r7, #4]
 8011f0e:	2200      	movs	r2, #0
 8011f10:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8011f12:	4b35      	ldr	r3, [pc, #212]	; (8011fe8 <tcp_receive+0x5e0>)
 8011f14:	881b      	ldrh	r3, [r3, #0]
 8011f16:	2b00      	cmp	r3, #0
 8011f18:	f000 84e1 	beq.w	80128de <tcp_receive+0xed6>
 8011f1c:	687b      	ldr	r3, [r7, #4]
 8011f1e:	7d1b      	ldrb	r3, [r3, #20]
 8011f20:	2b06      	cmp	r3, #6
 8011f22:	f200 84dc 	bhi.w	80128de <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8011f26:	687b      	ldr	r3, [r7, #4]
 8011f28:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011f2a:	4b30      	ldr	r3, [pc, #192]	; (8011fec <tcp_receive+0x5e4>)
 8011f2c:	681b      	ldr	r3, [r3, #0]
 8011f2e:	1ad3      	subs	r3, r2, r3
 8011f30:	3b01      	subs	r3, #1
 8011f32:	2b00      	cmp	r3, #0
 8011f34:	f2c0 808e 	blt.w	8012054 <tcp_receive+0x64c>
 8011f38:	687b      	ldr	r3, [r7, #4]
 8011f3a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011f3c:	4b2a      	ldr	r3, [pc, #168]	; (8011fe8 <tcp_receive+0x5e0>)
 8011f3e:	881b      	ldrh	r3, [r3, #0]
 8011f40:	4619      	mov	r1, r3
 8011f42:	4b2a      	ldr	r3, [pc, #168]	; (8011fec <tcp_receive+0x5e4>)
 8011f44:	681b      	ldr	r3, [r3, #0]
 8011f46:	440b      	add	r3, r1
 8011f48:	1ad3      	subs	r3, r2, r3
 8011f4a:	3301      	adds	r3, #1
 8011f4c:	2b00      	cmp	r3, #0
 8011f4e:	f300 8081 	bgt.w	8012054 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8011f52:	4b27      	ldr	r3, [pc, #156]	; (8011ff0 <tcp_receive+0x5e8>)
 8011f54:	685b      	ldr	r3, [r3, #4]
 8011f56:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8011f58:	687b      	ldr	r3, [r7, #4]
 8011f5a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011f5c:	4b23      	ldr	r3, [pc, #140]	; (8011fec <tcp_receive+0x5e4>)
 8011f5e:	681b      	ldr	r3, [r3, #0]
 8011f60:	1ad3      	subs	r3, r2, r3
 8011f62:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8011f64:	4b22      	ldr	r3, [pc, #136]	; (8011ff0 <tcp_receive+0x5e8>)
 8011f66:	685b      	ldr	r3, [r3, #4]
 8011f68:	2b00      	cmp	r3, #0
 8011f6a:	d106      	bne.n	8011f7a <tcp_receive+0x572>
 8011f6c:	4b21      	ldr	r3, [pc, #132]	; (8011ff4 <tcp_receive+0x5ec>)
 8011f6e:	f240 5294 	movw	r2, #1428	; 0x594
 8011f72:	4921      	ldr	r1, [pc, #132]	; (8011ff8 <tcp_receive+0x5f0>)
 8011f74:	4821      	ldr	r0, [pc, #132]	; (8011ffc <tcp_receive+0x5f4>)
 8011f76:	f005 fb1f 	bl	80175b8 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8011f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f7c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8011f80:	4293      	cmp	r3, r2
 8011f82:	d906      	bls.n	8011f92 <tcp_receive+0x58a>
 8011f84:	4b1b      	ldr	r3, [pc, #108]	; (8011ff4 <tcp_receive+0x5ec>)
 8011f86:	f240 5295 	movw	r2, #1429	; 0x595
 8011f8a:	491d      	ldr	r1, [pc, #116]	; (8012000 <tcp_receive+0x5f8>)
 8011f8c:	481b      	ldr	r0, [pc, #108]	; (8011ffc <tcp_receive+0x5f4>)
 8011f8e:	f005 fb13 	bl	80175b8 <iprintf>
      off = (u16_t)off32;
 8011f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f94:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8011f98:	4b15      	ldr	r3, [pc, #84]	; (8011ff0 <tcp_receive+0x5e8>)
 8011f9a:	685b      	ldr	r3, [r3, #4]
 8011f9c:	891b      	ldrh	r3, [r3, #8]
 8011f9e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011fa2:	429a      	cmp	r2, r3
 8011fa4:	d906      	bls.n	8011fb4 <tcp_receive+0x5ac>
 8011fa6:	4b13      	ldr	r3, [pc, #76]	; (8011ff4 <tcp_receive+0x5ec>)
 8011fa8:	f240 5297 	movw	r2, #1431	; 0x597
 8011fac:	4915      	ldr	r1, [pc, #84]	; (8012004 <tcp_receive+0x5fc>)
 8011fae:	4813      	ldr	r0, [pc, #76]	; (8011ffc <tcp_receive+0x5f4>)
 8011fb0:	f005 fb02 	bl	80175b8 <iprintf>
      inseg.len -= off;
 8011fb4:	4b0e      	ldr	r3, [pc, #56]	; (8011ff0 <tcp_receive+0x5e8>)
 8011fb6:	891a      	ldrh	r2, [r3, #8]
 8011fb8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011fbc:	1ad3      	subs	r3, r2, r3
 8011fbe:	b29a      	uxth	r2, r3
 8011fc0:	4b0b      	ldr	r3, [pc, #44]	; (8011ff0 <tcp_receive+0x5e8>)
 8011fc2:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8011fc4:	4b0a      	ldr	r3, [pc, #40]	; (8011ff0 <tcp_receive+0x5e8>)
 8011fc6:	685b      	ldr	r3, [r3, #4]
 8011fc8:	891a      	ldrh	r2, [r3, #8]
 8011fca:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011fce:	1ad3      	subs	r3, r2, r3
 8011fd0:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8011fd2:	e029      	b.n	8012028 <tcp_receive+0x620>
 8011fd4:	0801a7fc 	.word	0x0801a7fc
 8011fd8:	0801a804 	.word	0x0801a804
 8011fdc:	20004670 	.word	0x20004670
 8011fe0:	2000466c 	.word	0x2000466c
 8011fe4:	2000d28c 	.word	0x2000d28c
 8011fe8:	20004672 	.word	0x20004672
 8011fec:	20004668 	.word	0x20004668
 8011ff0:	20004648 	.word	0x20004648
 8011ff4:	0801a494 	.word	0x0801a494
 8011ff8:	0801a80c 	.word	0x0801a80c
 8011ffc:	0801a4e0 	.word	0x0801a4e0
 8012000:	0801a81c 	.word	0x0801a81c
 8012004:	0801a82c 	.word	0x0801a82c
        off -= p->len;
 8012008:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801200a:	895b      	ldrh	r3, [r3, #10]
 801200c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012010:	1ad3      	subs	r3, r2, r3
 8012012:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8012016:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012018:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801201a:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 801201c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801201e:	2200      	movs	r2, #0
 8012020:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8012022:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012024:	681b      	ldr	r3, [r3, #0]
 8012026:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8012028:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801202a:	895b      	ldrh	r3, [r3, #10]
 801202c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012030:	429a      	cmp	r2, r3
 8012032:	d8e9      	bhi.n	8012008 <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8012034:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012038:	4619      	mov	r1, r3
 801203a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801203c:	f7fc f87e 	bl	800e13c <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8012040:	687b      	ldr	r3, [r7, #4]
 8012042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012044:	4a91      	ldr	r2, [pc, #580]	; (801228c <tcp_receive+0x884>)
 8012046:	6013      	str	r3, [r2, #0]
 8012048:	4b91      	ldr	r3, [pc, #580]	; (8012290 <tcp_receive+0x888>)
 801204a:	68db      	ldr	r3, [r3, #12]
 801204c:	4a8f      	ldr	r2, [pc, #572]	; (801228c <tcp_receive+0x884>)
 801204e:	6812      	ldr	r2, [r2, #0]
 8012050:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8012052:	e00d      	b.n	8012070 <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8012054:	4b8d      	ldr	r3, [pc, #564]	; (801228c <tcp_receive+0x884>)
 8012056:	681a      	ldr	r2, [r3, #0]
 8012058:	687b      	ldr	r3, [r7, #4]
 801205a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801205c:	1ad3      	subs	r3, r2, r3
 801205e:	2b00      	cmp	r3, #0
 8012060:	da06      	bge.n	8012070 <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8012062:	687b      	ldr	r3, [r7, #4]
 8012064:	8b5b      	ldrh	r3, [r3, #26]
 8012066:	f043 0302 	orr.w	r3, r3, #2
 801206a:	b29a      	uxth	r2, r3
 801206c:	687b      	ldr	r3, [r7, #4]
 801206e:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8012070:	4b86      	ldr	r3, [pc, #536]	; (801228c <tcp_receive+0x884>)
 8012072:	681a      	ldr	r2, [r3, #0]
 8012074:	687b      	ldr	r3, [r7, #4]
 8012076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012078:	1ad3      	subs	r3, r2, r3
 801207a:	2b00      	cmp	r3, #0
 801207c:	f2c0 842a 	blt.w	80128d4 <tcp_receive+0xecc>
 8012080:	4b82      	ldr	r3, [pc, #520]	; (801228c <tcp_receive+0x884>)
 8012082:	681a      	ldr	r2, [r3, #0]
 8012084:	687b      	ldr	r3, [r7, #4]
 8012086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012088:	6879      	ldr	r1, [r7, #4]
 801208a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801208c:	440b      	add	r3, r1
 801208e:	1ad3      	subs	r3, r2, r3
 8012090:	3301      	adds	r3, #1
 8012092:	2b00      	cmp	r3, #0
 8012094:	f300 841e 	bgt.w	80128d4 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8012098:	687b      	ldr	r3, [r7, #4]
 801209a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801209c:	4b7b      	ldr	r3, [pc, #492]	; (801228c <tcp_receive+0x884>)
 801209e:	681b      	ldr	r3, [r3, #0]
 80120a0:	429a      	cmp	r2, r3
 80120a2:	f040 829a 	bne.w	80125da <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 80120a6:	4b7a      	ldr	r3, [pc, #488]	; (8012290 <tcp_receive+0x888>)
 80120a8:	891c      	ldrh	r4, [r3, #8]
 80120aa:	4b79      	ldr	r3, [pc, #484]	; (8012290 <tcp_receive+0x888>)
 80120ac:	68db      	ldr	r3, [r3, #12]
 80120ae:	899b      	ldrh	r3, [r3, #12]
 80120b0:	b29b      	uxth	r3, r3
 80120b2:	4618      	mov	r0, r3
 80120b4:	f7fa fd26 	bl	800cb04 <lwip_htons>
 80120b8:	4603      	mov	r3, r0
 80120ba:	b2db      	uxtb	r3, r3
 80120bc:	f003 0303 	and.w	r3, r3, #3
 80120c0:	2b00      	cmp	r3, #0
 80120c2:	d001      	beq.n	80120c8 <tcp_receive+0x6c0>
 80120c4:	2301      	movs	r3, #1
 80120c6:	e000      	b.n	80120ca <tcp_receive+0x6c2>
 80120c8:	2300      	movs	r3, #0
 80120ca:	4423      	add	r3, r4
 80120cc:	b29a      	uxth	r2, r3
 80120ce:	4b71      	ldr	r3, [pc, #452]	; (8012294 <tcp_receive+0x88c>)
 80120d0:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 80120d2:	687b      	ldr	r3, [r7, #4]
 80120d4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80120d6:	4b6f      	ldr	r3, [pc, #444]	; (8012294 <tcp_receive+0x88c>)
 80120d8:	881b      	ldrh	r3, [r3, #0]
 80120da:	429a      	cmp	r2, r3
 80120dc:	d275      	bcs.n	80121ca <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80120de:	4b6c      	ldr	r3, [pc, #432]	; (8012290 <tcp_receive+0x888>)
 80120e0:	68db      	ldr	r3, [r3, #12]
 80120e2:	899b      	ldrh	r3, [r3, #12]
 80120e4:	b29b      	uxth	r3, r3
 80120e6:	4618      	mov	r0, r3
 80120e8:	f7fa fd0c 	bl	800cb04 <lwip_htons>
 80120ec:	4603      	mov	r3, r0
 80120ee:	b2db      	uxtb	r3, r3
 80120f0:	f003 0301 	and.w	r3, r3, #1
 80120f4:	2b00      	cmp	r3, #0
 80120f6:	d01f      	beq.n	8012138 <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 80120f8:	4b65      	ldr	r3, [pc, #404]	; (8012290 <tcp_receive+0x888>)
 80120fa:	68db      	ldr	r3, [r3, #12]
 80120fc:	899b      	ldrh	r3, [r3, #12]
 80120fe:	b29b      	uxth	r3, r3
 8012100:	b21b      	sxth	r3, r3
 8012102:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8012106:	b21c      	sxth	r4, r3
 8012108:	4b61      	ldr	r3, [pc, #388]	; (8012290 <tcp_receive+0x888>)
 801210a:	68db      	ldr	r3, [r3, #12]
 801210c:	899b      	ldrh	r3, [r3, #12]
 801210e:	b29b      	uxth	r3, r3
 8012110:	4618      	mov	r0, r3
 8012112:	f7fa fcf7 	bl	800cb04 <lwip_htons>
 8012116:	4603      	mov	r3, r0
 8012118:	b2db      	uxtb	r3, r3
 801211a:	b29b      	uxth	r3, r3
 801211c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8012120:	b29b      	uxth	r3, r3
 8012122:	4618      	mov	r0, r3
 8012124:	f7fa fcee 	bl	800cb04 <lwip_htons>
 8012128:	4603      	mov	r3, r0
 801212a:	b21b      	sxth	r3, r3
 801212c:	4323      	orrs	r3, r4
 801212e:	b21a      	sxth	r2, r3
 8012130:	4b57      	ldr	r3, [pc, #348]	; (8012290 <tcp_receive+0x888>)
 8012132:	68db      	ldr	r3, [r3, #12]
 8012134:	b292      	uxth	r2, r2
 8012136:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8012138:	687b      	ldr	r3, [r7, #4]
 801213a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801213c:	4b54      	ldr	r3, [pc, #336]	; (8012290 <tcp_receive+0x888>)
 801213e:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8012140:	4b53      	ldr	r3, [pc, #332]	; (8012290 <tcp_receive+0x888>)
 8012142:	68db      	ldr	r3, [r3, #12]
 8012144:	899b      	ldrh	r3, [r3, #12]
 8012146:	b29b      	uxth	r3, r3
 8012148:	4618      	mov	r0, r3
 801214a:	f7fa fcdb 	bl	800cb04 <lwip_htons>
 801214e:	4603      	mov	r3, r0
 8012150:	b2db      	uxtb	r3, r3
 8012152:	f003 0302 	and.w	r3, r3, #2
 8012156:	2b00      	cmp	r3, #0
 8012158:	d005      	beq.n	8012166 <tcp_receive+0x75e>
            inseg.len -= 1;
 801215a:	4b4d      	ldr	r3, [pc, #308]	; (8012290 <tcp_receive+0x888>)
 801215c:	891b      	ldrh	r3, [r3, #8]
 801215e:	3b01      	subs	r3, #1
 8012160:	b29a      	uxth	r2, r3
 8012162:	4b4b      	ldr	r3, [pc, #300]	; (8012290 <tcp_receive+0x888>)
 8012164:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8012166:	4b4a      	ldr	r3, [pc, #296]	; (8012290 <tcp_receive+0x888>)
 8012168:	685a      	ldr	r2, [r3, #4]
 801216a:	4b49      	ldr	r3, [pc, #292]	; (8012290 <tcp_receive+0x888>)
 801216c:	891b      	ldrh	r3, [r3, #8]
 801216e:	4619      	mov	r1, r3
 8012170:	4610      	mov	r0, r2
 8012172:	f7fb fee3 	bl	800df3c <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8012176:	4b46      	ldr	r3, [pc, #280]	; (8012290 <tcp_receive+0x888>)
 8012178:	891c      	ldrh	r4, [r3, #8]
 801217a:	4b45      	ldr	r3, [pc, #276]	; (8012290 <tcp_receive+0x888>)
 801217c:	68db      	ldr	r3, [r3, #12]
 801217e:	899b      	ldrh	r3, [r3, #12]
 8012180:	b29b      	uxth	r3, r3
 8012182:	4618      	mov	r0, r3
 8012184:	f7fa fcbe 	bl	800cb04 <lwip_htons>
 8012188:	4603      	mov	r3, r0
 801218a:	b2db      	uxtb	r3, r3
 801218c:	f003 0303 	and.w	r3, r3, #3
 8012190:	2b00      	cmp	r3, #0
 8012192:	d001      	beq.n	8012198 <tcp_receive+0x790>
 8012194:	2301      	movs	r3, #1
 8012196:	e000      	b.n	801219a <tcp_receive+0x792>
 8012198:	2300      	movs	r3, #0
 801219a:	4423      	add	r3, r4
 801219c:	b29a      	uxth	r2, r3
 801219e:	4b3d      	ldr	r3, [pc, #244]	; (8012294 <tcp_receive+0x88c>)
 80121a0:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80121a2:	4b3c      	ldr	r3, [pc, #240]	; (8012294 <tcp_receive+0x88c>)
 80121a4:	881b      	ldrh	r3, [r3, #0]
 80121a6:	461a      	mov	r2, r3
 80121a8:	4b38      	ldr	r3, [pc, #224]	; (801228c <tcp_receive+0x884>)
 80121aa:	681b      	ldr	r3, [r3, #0]
 80121ac:	441a      	add	r2, r3
 80121ae:	687b      	ldr	r3, [r7, #4]
 80121b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80121b2:	6879      	ldr	r1, [r7, #4]
 80121b4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80121b6:	440b      	add	r3, r1
 80121b8:	429a      	cmp	r2, r3
 80121ba:	d006      	beq.n	80121ca <tcp_receive+0x7c2>
 80121bc:	4b36      	ldr	r3, [pc, #216]	; (8012298 <tcp_receive+0x890>)
 80121be:	f240 52cc 	movw	r2, #1484	; 0x5cc
 80121c2:	4936      	ldr	r1, [pc, #216]	; (801229c <tcp_receive+0x894>)
 80121c4:	4836      	ldr	r0, [pc, #216]	; (80122a0 <tcp_receive+0x898>)
 80121c6:	f005 f9f7 	bl	80175b8 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 80121ca:	687b      	ldr	r3, [r7, #4]
 80121cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80121ce:	2b00      	cmp	r3, #0
 80121d0:	f000 80e7 	beq.w	80123a2 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80121d4:	4b2e      	ldr	r3, [pc, #184]	; (8012290 <tcp_receive+0x888>)
 80121d6:	68db      	ldr	r3, [r3, #12]
 80121d8:	899b      	ldrh	r3, [r3, #12]
 80121da:	b29b      	uxth	r3, r3
 80121dc:	4618      	mov	r0, r3
 80121de:	f7fa fc91 	bl	800cb04 <lwip_htons>
 80121e2:	4603      	mov	r3, r0
 80121e4:	b2db      	uxtb	r3, r3
 80121e6:	f003 0301 	and.w	r3, r3, #1
 80121ea:	2b00      	cmp	r3, #0
 80121ec:	d010      	beq.n	8012210 <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 80121ee:	e00a      	b.n	8012206 <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 80121f0:	687b      	ldr	r3, [r7, #4]
 80121f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80121f4:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 80121f6:	687b      	ldr	r3, [r7, #4]
 80121f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80121fa:	681a      	ldr	r2, [r3, #0]
 80121fc:	687b      	ldr	r3, [r7, #4]
 80121fe:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8012200:	68f8      	ldr	r0, [r7, #12]
 8012202:	f7fd fcc9 	bl	800fb98 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8012206:	687b      	ldr	r3, [r7, #4]
 8012208:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801220a:	2b00      	cmp	r3, #0
 801220c:	d1f0      	bne.n	80121f0 <tcp_receive+0x7e8>
 801220e:	e0c8      	b.n	80123a2 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8012210:	687b      	ldr	r3, [r7, #4]
 8012212:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012214:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8012216:	e052      	b.n	80122be <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8012218:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801221a:	68db      	ldr	r3, [r3, #12]
 801221c:	899b      	ldrh	r3, [r3, #12]
 801221e:	b29b      	uxth	r3, r3
 8012220:	4618      	mov	r0, r3
 8012222:	f7fa fc6f 	bl	800cb04 <lwip_htons>
 8012226:	4603      	mov	r3, r0
 8012228:	b2db      	uxtb	r3, r3
 801222a:	f003 0301 	and.w	r3, r3, #1
 801222e:	2b00      	cmp	r3, #0
 8012230:	d03d      	beq.n	80122ae <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8012232:	4b17      	ldr	r3, [pc, #92]	; (8012290 <tcp_receive+0x888>)
 8012234:	68db      	ldr	r3, [r3, #12]
 8012236:	899b      	ldrh	r3, [r3, #12]
 8012238:	b29b      	uxth	r3, r3
 801223a:	4618      	mov	r0, r3
 801223c:	f7fa fc62 	bl	800cb04 <lwip_htons>
 8012240:	4603      	mov	r3, r0
 8012242:	b2db      	uxtb	r3, r3
 8012244:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8012248:	2b00      	cmp	r3, #0
 801224a:	d130      	bne.n	80122ae <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 801224c:	4b10      	ldr	r3, [pc, #64]	; (8012290 <tcp_receive+0x888>)
 801224e:	68db      	ldr	r3, [r3, #12]
 8012250:	899b      	ldrh	r3, [r3, #12]
 8012252:	b29c      	uxth	r4, r3
 8012254:	2001      	movs	r0, #1
 8012256:	f7fa fc55 	bl	800cb04 <lwip_htons>
 801225a:	4603      	mov	r3, r0
 801225c:	461a      	mov	r2, r3
 801225e:	4b0c      	ldr	r3, [pc, #48]	; (8012290 <tcp_receive+0x888>)
 8012260:	68db      	ldr	r3, [r3, #12]
 8012262:	4322      	orrs	r2, r4
 8012264:	b292      	uxth	r2, r2
 8012266:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8012268:	4b09      	ldr	r3, [pc, #36]	; (8012290 <tcp_receive+0x888>)
 801226a:	891c      	ldrh	r4, [r3, #8]
 801226c:	4b08      	ldr	r3, [pc, #32]	; (8012290 <tcp_receive+0x888>)
 801226e:	68db      	ldr	r3, [r3, #12]
 8012270:	899b      	ldrh	r3, [r3, #12]
 8012272:	b29b      	uxth	r3, r3
 8012274:	4618      	mov	r0, r3
 8012276:	f7fa fc45 	bl	800cb04 <lwip_htons>
 801227a:	4603      	mov	r3, r0
 801227c:	b2db      	uxtb	r3, r3
 801227e:	f003 0303 	and.w	r3, r3, #3
 8012282:	2b00      	cmp	r3, #0
 8012284:	d00e      	beq.n	80122a4 <tcp_receive+0x89c>
 8012286:	2301      	movs	r3, #1
 8012288:	e00d      	b.n	80122a6 <tcp_receive+0x89e>
 801228a:	bf00      	nop
 801228c:	20004668 	.word	0x20004668
 8012290:	20004648 	.word	0x20004648
 8012294:	20004672 	.word	0x20004672
 8012298:	0801a494 	.word	0x0801a494
 801229c:	0801a83c 	.word	0x0801a83c
 80122a0:	0801a4e0 	.word	0x0801a4e0
 80122a4:	2300      	movs	r3, #0
 80122a6:	4423      	add	r3, r4
 80122a8:	b29a      	uxth	r2, r3
 80122aa:	4b98      	ldr	r3, [pc, #608]	; (801250c <tcp_receive+0xb04>)
 80122ac:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 80122ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80122b0:	613b      	str	r3, [r7, #16]
              next = next->next;
 80122b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80122b4:	681b      	ldr	r3, [r3, #0]
 80122b6:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 80122b8:	6938      	ldr	r0, [r7, #16]
 80122ba:	f7fd fc6d 	bl	800fb98 <tcp_seg_free>
            while (next &&
 80122be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80122c0:	2b00      	cmp	r3, #0
 80122c2:	d00e      	beq.n	80122e2 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 80122c4:	4b91      	ldr	r3, [pc, #580]	; (801250c <tcp_receive+0xb04>)
 80122c6:	881b      	ldrh	r3, [r3, #0]
 80122c8:	461a      	mov	r2, r3
 80122ca:	4b91      	ldr	r3, [pc, #580]	; (8012510 <tcp_receive+0xb08>)
 80122cc:	681b      	ldr	r3, [r3, #0]
 80122ce:	441a      	add	r2, r3
 80122d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80122d2:	68db      	ldr	r3, [r3, #12]
 80122d4:	685b      	ldr	r3, [r3, #4]
 80122d6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80122d8:	8909      	ldrh	r1, [r1, #8]
 80122da:	440b      	add	r3, r1
 80122dc:	1ad3      	subs	r3, r2, r3
            while (next &&
 80122de:	2b00      	cmp	r3, #0
 80122e0:	da9a      	bge.n	8012218 <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 80122e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80122e4:	2b00      	cmp	r3, #0
 80122e6:	d059      	beq.n	801239c <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 80122e8:	4b88      	ldr	r3, [pc, #544]	; (801250c <tcp_receive+0xb04>)
 80122ea:	881b      	ldrh	r3, [r3, #0]
 80122ec:	461a      	mov	r2, r3
 80122ee:	4b88      	ldr	r3, [pc, #544]	; (8012510 <tcp_receive+0xb08>)
 80122f0:	681b      	ldr	r3, [r3, #0]
 80122f2:	441a      	add	r2, r3
 80122f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80122f6:	68db      	ldr	r3, [r3, #12]
 80122f8:	685b      	ldr	r3, [r3, #4]
 80122fa:	1ad3      	subs	r3, r2, r3
            if (next &&
 80122fc:	2b00      	cmp	r3, #0
 80122fe:	dd4d      	ble.n	801239c <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8012300:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012302:	68db      	ldr	r3, [r3, #12]
 8012304:	685b      	ldr	r3, [r3, #4]
 8012306:	b29a      	uxth	r2, r3
 8012308:	4b81      	ldr	r3, [pc, #516]	; (8012510 <tcp_receive+0xb08>)
 801230a:	681b      	ldr	r3, [r3, #0]
 801230c:	b29b      	uxth	r3, r3
 801230e:	1ad3      	subs	r3, r2, r3
 8012310:	b29a      	uxth	r2, r3
 8012312:	4b80      	ldr	r3, [pc, #512]	; (8012514 <tcp_receive+0xb0c>)
 8012314:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8012316:	4b7f      	ldr	r3, [pc, #508]	; (8012514 <tcp_receive+0xb0c>)
 8012318:	68db      	ldr	r3, [r3, #12]
 801231a:	899b      	ldrh	r3, [r3, #12]
 801231c:	b29b      	uxth	r3, r3
 801231e:	4618      	mov	r0, r3
 8012320:	f7fa fbf0 	bl	800cb04 <lwip_htons>
 8012324:	4603      	mov	r3, r0
 8012326:	b2db      	uxtb	r3, r3
 8012328:	f003 0302 	and.w	r3, r3, #2
 801232c:	2b00      	cmp	r3, #0
 801232e:	d005      	beq.n	801233c <tcp_receive+0x934>
                inseg.len -= 1;
 8012330:	4b78      	ldr	r3, [pc, #480]	; (8012514 <tcp_receive+0xb0c>)
 8012332:	891b      	ldrh	r3, [r3, #8]
 8012334:	3b01      	subs	r3, #1
 8012336:	b29a      	uxth	r2, r3
 8012338:	4b76      	ldr	r3, [pc, #472]	; (8012514 <tcp_receive+0xb0c>)
 801233a:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 801233c:	4b75      	ldr	r3, [pc, #468]	; (8012514 <tcp_receive+0xb0c>)
 801233e:	685a      	ldr	r2, [r3, #4]
 8012340:	4b74      	ldr	r3, [pc, #464]	; (8012514 <tcp_receive+0xb0c>)
 8012342:	891b      	ldrh	r3, [r3, #8]
 8012344:	4619      	mov	r1, r3
 8012346:	4610      	mov	r0, r2
 8012348:	f7fb fdf8 	bl	800df3c <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 801234c:	4b71      	ldr	r3, [pc, #452]	; (8012514 <tcp_receive+0xb0c>)
 801234e:	891c      	ldrh	r4, [r3, #8]
 8012350:	4b70      	ldr	r3, [pc, #448]	; (8012514 <tcp_receive+0xb0c>)
 8012352:	68db      	ldr	r3, [r3, #12]
 8012354:	899b      	ldrh	r3, [r3, #12]
 8012356:	b29b      	uxth	r3, r3
 8012358:	4618      	mov	r0, r3
 801235a:	f7fa fbd3 	bl	800cb04 <lwip_htons>
 801235e:	4603      	mov	r3, r0
 8012360:	b2db      	uxtb	r3, r3
 8012362:	f003 0303 	and.w	r3, r3, #3
 8012366:	2b00      	cmp	r3, #0
 8012368:	d001      	beq.n	801236e <tcp_receive+0x966>
 801236a:	2301      	movs	r3, #1
 801236c:	e000      	b.n	8012370 <tcp_receive+0x968>
 801236e:	2300      	movs	r3, #0
 8012370:	4423      	add	r3, r4
 8012372:	b29a      	uxth	r2, r3
 8012374:	4b65      	ldr	r3, [pc, #404]	; (801250c <tcp_receive+0xb04>)
 8012376:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8012378:	4b64      	ldr	r3, [pc, #400]	; (801250c <tcp_receive+0xb04>)
 801237a:	881b      	ldrh	r3, [r3, #0]
 801237c:	461a      	mov	r2, r3
 801237e:	4b64      	ldr	r3, [pc, #400]	; (8012510 <tcp_receive+0xb08>)
 8012380:	681b      	ldr	r3, [r3, #0]
 8012382:	441a      	add	r2, r3
 8012384:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012386:	68db      	ldr	r3, [r3, #12]
 8012388:	685b      	ldr	r3, [r3, #4]
 801238a:	429a      	cmp	r2, r3
 801238c:	d006      	beq.n	801239c <tcp_receive+0x994>
 801238e:	4b62      	ldr	r3, [pc, #392]	; (8012518 <tcp_receive+0xb10>)
 8012390:	f240 52fd 	movw	r2, #1533	; 0x5fd
 8012394:	4961      	ldr	r1, [pc, #388]	; (801251c <tcp_receive+0xb14>)
 8012396:	4862      	ldr	r0, [pc, #392]	; (8012520 <tcp_receive+0xb18>)
 8012398:	f005 f90e 	bl	80175b8 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 801239c:	687b      	ldr	r3, [r7, #4]
 801239e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80123a0:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 80123a2:	4b5a      	ldr	r3, [pc, #360]	; (801250c <tcp_receive+0xb04>)
 80123a4:	881b      	ldrh	r3, [r3, #0]
 80123a6:	461a      	mov	r2, r3
 80123a8:	4b59      	ldr	r3, [pc, #356]	; (8012510 <tcp_receive+0xb08>)
 80123aa:	681b      	ldr	r3, [r3, #0]
 80123ac:	441a      	add	r2, r3
 80123ae:	687b      	ldr	r3, [r7, #4]
 80123b0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 80123b2:	687b      	ldr	r3, [r7, #4]
 80123b4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80123b6:	4b55      	ldr	r3, [pc, #340]	; (801250c <tcp_receive+0xb04>)
 80123b8:	881b      	ldrh	r3, [r3, #0]
 80123ba:	429a      	cmp	r2, r3
 80123bc:	d206      	bcs.n	80123cc <tcp_receive+0x9c4>
 80123be:	4b56      	ldr	r3, [pc, #344]	; (8012518 <tcp_receive+0xb10>)
 80123c0:	f240 6207 	movw	r2, #1543	; 0x607
 80123c4:	4957      	ldr	r1, [pc, #348]	; (8012524 <tcp_receive+0xb1c>)
 80123c6:	4856      	ldr	r0, [pc, #344]	; (8012520 <tcp_receive+0xb18>)
 80123c8:	f005 f8f6 	bl	80175b8 <iprintf>
        pcb->rcv_wnd -= tcplen;
 80123cc:	687b      	ldr	r3, [r7, #4]
 80123ce:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80123d0:	4b4e      	ldr	r3, [pc, #312]	; (801250c <tcp_receive+0xb04>)
 80123d2:	881b      	ldrh	r3, [r3, #0]
 80123d4:	1ad3      	subs	r3, r2, r3
 80123d6:	b29a      	uxth	r2, r3
 80123d8:	687b      	ldr	r3, [r7, #4]
 80123da:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 80123dc:	6878      	ldr	r0, [r7, #4]
 80123de:	f7fc feb9 	bl	800f154 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 80123e2:	4b4c      	ldr	r3, [pc, #304]	; (8012514 <tcp_receive+0xb0c>)
 80123e4:	685b      	ldr	r3, [r3, #4]
 80123e6:	891b      	ldrh	r3, [r3, #8]
 80123e8:	2b00      	cmp	r3, #0
 80123ea:	d006      	beq.n	80123fa <tcp_receive+0x9f2>
          recv_data = inseg.p;
 80123ec:	4b49      	ldr	r3, [pc, #292]	; (8012514 <tcp_receive+0xb0c>)
 80123ee:	685b      	ldr	r3, [r3, #4]
 80123f0:	4a4d      	ldr	r2, [pc, #308]	; (8012528 <tcp_receive+0xb20>)
 80123f2:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 80123f4:	4b47      	ldr	r3, [pc, #284]	; (8012514 <tcp_receive+0xb0c>)
 80123f6:	2200      	movs	r2, #0
 80123f8:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80123fa:	4b46      	ldr	r3, [pc, #280]	; (8012514 <tcp_receive+0xb0c>)
 80123fc:	68db      	ldr	r3, [r3, #12]
 80123fe:	899b      	ldrh	r3, [r3, #12]
 8012400:	b29b      	uxth	r3, r3
 8012402:	4618      	mov	r0, r3
 8012404:	f7fa fb7e 	bl	800cb04 <lwip_htons>
 8012408:	4603      	mov	r3, r0
 801240a:	b2db      	uxtb	r3, r3
 801240c:	f003 0301 	and.w	r3, r3, #1
 8012410:	2b00      	cmp	r3, #0
 8012412:	f000 80b8 	beq.w	8012586 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8012416:	4b45      	ldr	r3, [pc, #276]	; (801252c <tcp_receive+0xb24>)
 8012418:	781b      	ldrb	r3, [r3, #0]
 801241a:	f043 0320 	orr.w	r3, r3, #32
 801241e:	b2da      	uxtb	r2, r3
 8012420:	4b42      	ldr	r3, [pc, #264]	; (801252c <tcp_receive+0xb24>)
 8012422:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8012424:	e0af      	b.n	8012586 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8012426:	687b      	ldr	r3, [r7, #4]
 8012428:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801242a:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 801242c:	687b      	ldr	r3, [r7, #4]
 801242e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012430:	68db      	ldr	r3, [r3, #12]
 8012432:	685b      	ldr	r3, [r3, #4]
 8012434:	4a36      	ldr	r2, [pc, #216]	; (8012510 <tcp_receive+0xb08>)
 8012436:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8012438:	68bb      	ldr	r3, [r7, #8]
 801243a:	891b      	ldrh	r3, [r3, #8]
 801243c:	461c      	mov	r4, r3
 801243e:	68bb      	ldr	r3, [r7, #8]
 8012440:	68db      	ldr	r3, [r3, #12]
 8012442:	899b      	ldrh	r3, [r3, #12]
 8012444:	b29b      	uxth	r3, r3
 8012446:	4618      	mov	r0, r3
 8012448:	f7fa fb5c 	bl	800cb04 <lwip_htons>
 801244c:	4603      	mov	r3, r0
 801244e:	b2db      	uxtb	r3, r3
 8012450:	f003 0303 	and.w	r3, r3, #3
 8012454:	2b00      	cmp	r3, #0
 8012456:	d001      	beq.n	801245c <tcp_receive+0xa54>
 8012458:	2301      	movs	r3, #1
 801245a:	e000      	b.n	801245e <tcp_receive+0xa56>
 801245c:	2300      	movs	r3, #0
 801245e:	191a      	adds	r2, r3, r4
 8012460:	687b      	ldr	r3, [r7, #4]
 8012462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012464:	441a      	add	r2, r3
 8012466:	687b      	ldr	r3, [r7, #4]
 8012468:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 801246a:	687b      	ldr	r3, [r7, #4]
 801246c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801246e:	461c      	mov	r4, r3
 8012470:	68bb      	ldr	r3, [r7, #8]
 8012472:	891b      	ldrh	r3, [r3, #8]
 8012474:	461d      	mov	r5, r3
 8012476:	68bb      	ldr	r3, [r7, #8]
 8012478:	68db      	ldr	r3, [r3, #12]
 801247a:	899b      	ldrh	r3, [r3, #12]
 801247c:	b29b      	uxth	r3, r3
 801247e:	4618      	mov	r0, r3
 8012480:	f7fa fb40 	bl	800cb04 <lwip_htons>
 8012484:	4603      	mov	r3, r0
 8012486:	b2db      	uxtb	r3, r3
 8012488:	f003 0303 	and.w	r3, r3, #3
 801248c:	2b00      	cmp	r3, #0
 801248e:	d001      	beq.n	8012494 <tcp_receive+0xa8c>
 8012490:	2301      	movs	r3, #1
 8012492:	e000      	b.n	8012496 <tcp_receive+0xa8e>
 8012494:	2300      	movs	r3, #0
 8012496:	442b      	add	r3, r5
 8012498:	429c      	cmp	r4, r3
 801249a:	d206      	bcs.n	80124aa <tcp_receive+0xaa2>
 801249c:	4b1e      	ldr	r3, [pc, #120]	; (8012518 <tcp_receive+0xb10>)
 801249e:	f240 622c 	movw	r2, #1580	; 0x62c
 80124a2:	4923      	ldr	r1, [pc, #140]	; (8012530 <tcp_receive+0xb28>)
 80124a4:	481e      	ldr	r0, [pc, #120]	; (8012520 <tcp_receive+0xb18>)
 80124a6:	f005 f887 	bl	80175b8 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 80124aa:	68bb      	ldr	r3, [r7, #8]
 80124ac:	891b      	ldrh	r3, [r3, #8]
 80124ae:	461c      	mov	r4, r3
 80124b0:	68bb      	ldr	r3, [r7, #8]
 80124b2:	68db      	ldr	r3, [r3, #12]
 80124b4:	899b      	ldrh	r3, [r3, #12]
 80124b6:	b29b      	uxth	r3, r3
 80124b8:	4618      	mov	r0, r3
 80124ba:	f7fa fb23 	bl	800cb04 <lwip_htons>
 80124be:	4603      	mov	r3, r0
 80124c0:	b2db      	uxtb	r3, r3
 80124c2:	f003 0303 	and.w	r3, r3, #3
 80124c6:	2b00      	cmp	r3, #0
 80124c8:	d001      	beq.n	80124ce <tcp_receive+0xac6>
 80124ca:	2301      	movs	r3, #1
 80124cc:	e000      	b.n	80124d0 <tcp_receive+0xac8>
 80124ce:	2300      	movs	r3, #0
 80124d0:	1919      	adds	r1, r3, r4
 80124d2:	687b      	ldr	r3, [r7, #4]
 80124d4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80124d6:	b28b      	uxth	r3, r1
 80124d8:	1ad3      	subs	r3, r2, r3
 80124da:	b29a      	uxth	r2, r3
 80124dc:	687b      	ldr	r3, [r7, #4]
 80124de:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 80124e0:	6878      	ldr	r0, [r7, #4]
 80124e2:	f7fc fe37 	bl	800f154 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 80124e6:	68bb      	ldr	r3, [r7, #8]
 80124e8:	685b      	ldr	r3, [r3, #4]
 80124ea:	891b      	ldrh	r3, [r3, #8]
 80124ec:	2b00      	cmp	r3, #0
 80124ee:	d028      	beq.n	8012542 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 80124f0:	4b0d      	ldr	r3, [pc, #52]	; (8012528 <tcp_receive+0xb20>)
 80124f2:	681b      	ldr	r3, [r3, #0]
 80124f4:	2b00      	cmp	r3, #0
 80124f6:	d01d      	beq.n	8012534 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 80124f8:	4b0b      	ldr	r3, [pc, #44]	; (8012528 <tcp_receive+0xb20>)
 80124fa:	681a      	ldr	r2, [r3, #0]
 80124fc:	68bb      	ldr	r3, [r7, #8]
 80124fe:	685b      	ldr	r3, [r3, #4]
 8012500:	4619      	mov	r1, r3
 8012502:	4610      	mov	r0, r2
 8012504:	f7fb ffa0 	bl	800e448 <pbuf_cat>
 8012508:	e018      	b.n	801253c <tcp_receive+0xb34>
 801250a:	bf00      	nop
 801250c:	20004672 	.word	0x20004672
 8012510:	20004668 	.word	0x20004668
 8012514:	20004648 	.word	0x20004648
 8012518:	0801a494 	.word	0x0801a494
 801251c:	0801a874 	.word	0x0801a874
 8012520:	0801a4e0 	.word	0x0801a4e0
 8012524:	0801a8b0 	.word	0x0801a8b0
 8012528:	20004678 	.word	0x20004678
 801252c:	20004675 	.word	0x20004675
 8012530:	0801a8d0 	.word	0x0801a8d0
            } else {
              recv_data = cseg->p;
 8012534:	68bb      	ldr	r3, [r7, #8]
 8012536:	685b      	ldr	r3, [r3, #4]
 8012538:	4a70      	ldr	r2, [pc, #448]	; (80126fc <tcp_receive+0xcf4>)
 801253a:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 801253c:	68bb      	ldr	r3, [r7, #8]
 801253e:	2200      	movs	r2, #0
 8012540:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8012542:	68bb      	ldr	r3, [r7, #8]
 8012544:	68db      	ldr	r3, [r3, #12]
 8012546:	899b      	ldrh	r3, [r3, #12]
 8012548:	b29b      	uxth	r3, r3
 801254a:	4618      	mov	r0, r3
 801254c:	f7fa fada 	bl	800cb04 <lwip_htons>
 8012550:	4603      	mov	r3, r0
 8012552:	b2db      	uxtb	r3, r3
 8012554:	f003 0301 	and.w	r3, r3, #1
 8012558:	2b00      	cmp	r3, #0
 801255a:	d00d      	beq.n	8012578 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 801255c:	4b68      	ldr	r3, [pc, #416]	; (8012700 <tcp_receive+0xcf8>)
 801255e:	781b      	ldrb	r3, [r3, #0]
 8012560:	f043 0320 	orr.w	r3, r3, #32
 8012564:	b2da      	uxtb	r2, r3
 8012566:	4b66      	ldr	r3, [pc, #408]	; (8012700 <tcp_receive+0xcf8>)
 8012568:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 801256a:	687b      	ldr	r3, [r7, #4]
 801256c:	7d1b      	ldrb	r3, [r3, #20]
 801256e:	2b04      	cmp	r3, #4
 8012570:	d102      	bne.n	8012578 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 8012572:	687b      	ldr	r3, [r7, #4]
 8012574:	2207      	movs	r2, #7
 8012576:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8012578:	68bb      	ldr	r3, [r7, #8]
 801257a:	681a      	ldr	r2, [r3, #0]
 801257c:	687b      	ldr	r3, [r7, #4]
 801257e:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8012580:	68b8      	ldr	r0, [r7, #8]
 8012582:	f7fd fb09 	bl	800fb98 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8012586:	687b      	ldr	r3, [r7, #4]
 8012588:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801258a:	2b00      	cmp	r3, #0
 801258c:	d008      	beq.n	80125a0 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 801258e:	687b      	ldr	r3, [r7, #4]
 8012590:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012592:	68db      	ldr	r3, [r3, #12]
 8012594:	685a      	ldr	r2, [r3, #4]
 8012596:	687b      	ldr	r3, [r7, #4]
 8012598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 801259a:	429a      	cmp	r2, r3
 801259c:	f43f af43 	beq.w	8012426 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 80125a0:	687b      	ldr	r3, [r7, #4]
 80125a2:	8b5b      	ldrh	r3, [r3, #26]
 80125a4:	f003 0301 	and.w	r3, r3, #1
 80125a8:	2b00      	cmp	r3, #0
 80125aa:	d00e      	beq.n	80125ca <tcp_receive+0xbc2>
 80125ac:	687b      	ldr	r3, [r7, #4]
 80125ae:	8b5b      	ldrh	r3, [r3, #26]
 80125b0:	f023 0301 	bic.w	r3, r3, #1
 80125b4:	b29a      	uxth	r2, r3
 80125b6:	687b      	ldr	r3, [r7, #4]
 80125b8:	835a      	strh	r2, [r3, #26]
 80125ba:	687b      	ldr	r3, [r7, #4]
 80125bc:	8b5b      	ldrh	r3, [r3, #26]
 80125be:	f043 0302 	orr.w	r3, r3, #2
 80125c2:	b29a      	uxth	r2, r3
 80125c4:	687b      	ldr	r3, [r7, #4]
 80125c6:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80125c8:	e188      	b.n	80128dc <tcp_receive+0xed4>
        tcp_ack(pcb);
 80125ca:	687b      	ldr	r3, [r7, #4]
 80125cc:	8b5b      	ldrh	r3, [r3, #26]
 80125ce:	f043 0301 	orr.w	r3, r3, #1
 80125d2:	b29a      	uxth	r2, r3
 80125d4:	687b      	ldr	r3, [r7, #4]
 80125d6:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80125d8:	e180      	b.n	80128dc <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 80125da:	687b      	ldr	r3, [r7, #4]
 80125dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80125de:	2b00      	cmp	r3, #0
 80125e0:	d106      	bne.n	80125f0 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 80125e2:	4848      	ldr	r0, [pc, #288]	; (8012704 <tcp_receive+0xcfc>)
 80125e4:	f7fd faf0 	bl	800fbc8 <tcp_seg_copy>
 80125e8:	4602      	mov	r2, r0
 80125ea:	687b      	ldr	r3, [r7, #4]
 80125ec:	675a      	str	r2, [r3, #116]	; 0x74
 80125ee:	e16d      	b.n	80128cc <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 80125f0:	2300      	movs	r3, #0
 80125f2:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80125f4:	687b      	ldr	r3, [r7, #4]
 80125f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80125f8:	63bb      	str	r3, [r7, #56]	; 0x38
 80125fa:	e157      	b.n	80128ac <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 80125fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80125fe:	68db      	ldr	r3, [r3, #12]
 8012600:	685a      	ldr	r2, [r3, #4]
 8012602:	4b41      	ldr	r3, [pc, #260]	; (8012708 <tcp_receive+0xd00>)
 8012604:	681b      	ldr	r3, [r3, #0]
 8012606:	429a      	cmp	r2, r3
 8012608:	d11d      	bne.n	8012646 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 801260a:	4b3e      	ldr	r3, [pc, #248]	; (8012704 <tcp_receive+0xcfc>)
 801260c:	891a      	ldrh	r2, [r3, #8]
 801260e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012610:	891b      	ldrh	r3, [r3, #8]
 8012612:	429a      	cmp	r2, r3
 8012614:	f240 814f 	bls.w	80128b6 <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8012618:	483a      	ldr	r0, [pc, #232]	; (8012704 <tcp_receive+0xcfc>)
 801261a:	f7fd fad5 	bl	800fbc8 <tcp_seg_copy>
 801261e:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8012620:	697b      	ldr	r3, [r7, #20]
 8012622:	2b00      	cmp	r3, #0
 8012624:	f000 8149 	beq.w	80128ba <tcp_receive+0xeb2>
                  if (prev != NULL) {
 8012628:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801262a:	2b00      	cmp	r3, #0
 801262c:	d003      	beq.n	8012636 <tcp_receive+0xc2e>
                    prev->next = cseg;
 801262e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012630:	697a      	ldr	r2, [r7, #20]
 8012632:	601a      	str	r2, [r3, #0]
 8012634:	e002      	b.n	801263c <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 8012636:	687b      	ldr	r3, [r7, #4]
 8012638:	697a      	ldr	r2, [r7, #20]
 801263a:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 801263c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801263e:	6978      	ldr	r0, [r7, #20]
 8012640:	f7ff f8de 	bl	8011800 <tcp_oos_insert_segment>
                }
                break;
 8012644:	e139      	b.n	80128ba <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8012646:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012648:	2b00      	cmp	r3, #0
 801264a:	d117      	bne.n	801267c <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 801264c:	4b2e      	ldr	r3, [pc, #184]	; (8012708 <tcp_receive+0xd00>)
 801264e:	681a      	ldr	r2, [r3, #0]
 8012650:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012652:	68db      	ldr	r3, [r3, #12]
 8012654:	685b      	ldr	r3, [r3, #4]
 8012656:	1ad3      	subs	r3, r2, r3
 8012658:	2b00      	cmp	r3, #0
 801265a:	da57      	bge.n	801270c <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801265c:	4829      	ldr	r0, [pc, #164]	; (8012704 <tcp_receive+0xcfc>)
 801265e:	f7fd fab3 	bl	800fbc8 <tcp_seg_copy>
 8012662:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8012664:	69bb      	ldr	r3, [r7, #24]
 8012666:	2b00      	cmp	r3, #0
 8012668:	f000 8129 	beq.w	80128be <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 801266c:	687b      	ldr	r3, [r7, #4]
 801266e:	69ba      	ldr	r2, [r7, #24]
 8012670:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 8012672:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012674:	69b8      	ldr	r0, [r7, #24]
 8012676:	f7ff f8c3 	bl	8011800 <tcp_oos_insert_segment>
                  }
                  break;
 801267a:	e120      	b.n	80128be <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 801267c:	4b22      	ldr	r3, [pc, #136]	; (8012708 <tcp_receive+0xd00>)
 801267e:	681a      	ldr	r2, [r3, #0]
 8012680:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012682:	68db      	ldr	r3, [r3, #12]
 8012684:	685b      	ldr	r3, [r3, #4]
 8012686:	1ad3      	subs	r3, r2, r3
 8012688:	3b01      	subs	r3, #1
 801268a:	2b00      	cmp	r3, #0
 801268c:	db3e      	blt.n	801270c <tcp_receive+0xd04>
 801268e:	4b1e      	ldr	r3, [pc, #120]	; (8012708 <tcp_receive+0xd00>)
 8012690:	681a      	ldr	r2, [r3, #0]
 8012692:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012694:	68db      	ldr	r3, [r3, #12]
 8012696:	685b      	ldr	r3, [r3, #4]
 8012698:	1ad3      	subs	r3, r2, r3
 801269a:	3301      	adds	r3, #1
 801269c:	2b00      	cmp	r3, #0
 801269e:	dc35      	bgt.n	801270c <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80126a0:	4818      	ldr	r0, [pc, #96]	; (8012704 <tcp_receive+0xcfc>)
 80126a2:	f7fd fa91 	bl	800fbc8 <tcp_seg_copy>
 80126a6:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 80126a8:	69fb      	ldr	r3, [r7, #28]
 80126aa:	2b00      	cmp	r3, #0
 80126ac:	f000 8109 	beq.w	80128c2 <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 80126b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80126b2:	68db      	ldr	r3, [r3, #12]
 80126b4:	685b      	ldr	r3, [r3, #4]
 80126b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80126b8:	8912      	ldrh	r2, [r2, #8]
 80126ba:	441a      	add	r2, r3
 80126bc:	4b12      	ldr	r3, [pc, #72]	; (8012708 <tcp_receive+0xd00>)
 80126be:	681b      	ldr	r3, [r3, #0]
 80126c0:	1ad3      	subs	r3, r2, r3
 80126c2:	2b00      	cmp	r3, #0
 80126c4:	dd12      	ble.n	80126ec <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 80126c6:	4b10      	ldr	r3, [pc, #64]	; (8012708 <tcp_receive+0xd00>)
 80126c8:	681b      	ldr	r3, [r3, #0]
 80126ca:	b29a      	uxth	r2, r3
 80126cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80126ce:	68db      	ldr	r3, [r3, #12]
 80126d0:	685b      	ldr	r3, [r3, #4]
 80126d2:	b29b      	uxth	r3, r3
 80126d4:	1ad3      	subs	r3, r2, r3
 80126d6:	b29a      	uxth	r2, r3
 80126d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80126da:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 80126dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80126de:	685a      	ldr	r2, [r3, #4]
 80126e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80126e2:	891b      	ldrh	r3, [r3, #8]
 80126e4:	4619      	mov	r1, r3
 80126e6:	4610      	mov	r0, r2
 80126e8:	f7fb fc28 	bl	800df3c <pbuf_realloc>
                    }
                    prev->next = cseg;
 80126ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80126ee:	69fa      	ldr	r2, [r7, #28]
 80126f0:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 80126f2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80126f4:	69f8      	ldr	r0, [r7, #28]
 80126f6:	f7ff f883 	bl	8011800 <tcp_oos_insert_segment>
                  }
                  break;
 80126fa:	e0e2      	b.n	80128c2 <tcp_receive+0xeba>
 80126fc:	20004678 	.word	0x20004678
 8012700:	20004675 	.word	0x20004675
 8012704:	20004648 	.word	0x20004648
 8012708:	20004668 	.word	0x20004668
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 801270c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801270e:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8012710:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012712:	681b      	ldr	r3, [r3, #0]
 8012714:	2b00      	cmp	r3, #0
 8012716:	f040 80c6 	bne.w	80128a6 <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 801271a:	4b80      	ldr	r3, [pc, #512]	; (801291c <tcp_receive+0xf14>)
 801271c:	681a      	ldr	r2, [r3, #0]
 801271e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012720:	68db      	ldr	r3, [r3, #12]
 8012722:	685b      	ldr	r3, [r3, #4]
 8012724:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8012726:	2b00      	cmp	r3, #0
 8012728:	f340 80bd 	ble.w	80128a6 <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801272c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801272e:	68db      	ldr	r3, [r3, #12]
 8012730:	899b      	ldrh	r3, [r3, #12]
 8012732:	b29b      	uxth	r3, r3
 8012734:	4618      	mov	r0, r3
 8012736:	f7fa f9e5 	bl	800cb04 <lwip_htons>
 801273a:	4603      	mov	r3, r0
 801273c:	b2db      	uxtb	r3, r3
 801273e:	f003 0301 	and.w	r3, r3, #1
 8012742:	2b00      	cmp	r3, #0
 8012744:	f040 80bf 	bne.w	80128c6 <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8012748:	4875      	ldr	r0, [pc, #468]	; (8012920 <tcp_receive+0xf18>)
 801274a:	f7fd fa3d 	bl	800fbc8 <tcp_seg_copy>
 801274e:	4602      	mov	r2, r0
 8012750:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012752:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8012754:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012756:	681b      	ldr	r3, [r3, #0]
 8012758:	2b00      	cmp	r3, #0
 801275a:	f000 80b6 	beq.w	80128ca <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 801275e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012760:	68db      	ldr	r3, [r3, #12]
 8012762:	685b      	ldr	r3, [r3, #4]
 8012764:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012766:	8912      	ldrh	r2, [r2, #8]
 8012768:	441a      	add	r2, r3
 801276a:	4b6c      	ldr	r3, [pc, #432]	; (801291c <tcp_receive+0xf14>)
 801276c:	681b      	ldr	r3, [r3, #0]
 801276e:	1ad3      	subs	r3, r2, r3
 8012770:	2b00      	cmp	r3, #0
 8012772:	dd12      	ble.n	801279a <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8012774:	4b69      	ldr	r3, [pc, #420]	; (801291c <tcp_receive+0xf14>)
 8012776:	681b      	ldr	r3, [r3, #0]
 8012778:	b29a      	uxth	r2, r3
 801277a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801277c:	68db      	ldr	r3, [r3, #12]
 801277e:	685b      	ldr	r3, [r3, #4]
 8012780:	b29b      	uxth	r3, r3
 8012782:	1ad3      	subs	r3, r2, r3
 8012784:	b29a      	uxth	r2, r3
 8012786:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012788:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 801278a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801278c:	685a      	ldr	r2, [r3, #4]
 801278e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012790:	891b      	ldrh	r3, [r3, #8]
 8012792:	4619      	mov	r1, r3
 8012794:	4610      	mov	r0, r2
 8012796:	f7fb fbd1 	bl	800df3c <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 801279a:	4b62      	ldr	r3, [pc, #392]	; (8012924 <tcp_receive+0xf1c>)
 801279c:	881b      	ldrh	r3, [r3, #0]
 801279e:	461a      	mov	r2, r3
 80127a0:	4b5e      	ldr	r3, [pc, #376]	; (801291c <tcp_receive+0xf14>)
 80127a2:	681b      	ldr	r3, [r3, #0]
 80127a4:	441a      	add	r2, r3
 80127a6:	687b      	ldr	r3, [r7, #4]
 80127a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80127aa:	6879      	ldr	r1, [r7, #4]
 80127ac:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80127ae:	440b      	add	r3, r1
 80127b0:	1ad3      	subs	r3, r2, r3
 80127b2:	2b00      	cmp	r3, #0
 80127b4:	f340 8089 	ble.w	80128ca <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 80127b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80127ba:	681b      	ldr	r3, [r3, #0]
 80127bc:	68db      	ldr	r3, [r3, #12]
 80127be:	899b      	ldrh	r3, [r3, #12]
 80127c0:	b29b      	uxth	r3, r3
 80127c2:	4618      	mov	r0, r3
 80127c4:	f7fa f99e 	bl	800cb04 <lwip_htons>
 80127c8:	4603      	mov	r3, r0
 80127ca:	b2db      	uxtb	r3, r3
 80127cc:	f003 0301 	and.w	r3, r3, #1
 80127d0:	2b00      	cmp	r3, #0
 80127d2:	d022      	beq.n	801281a <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 80127d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80127d6:	681b      	ldr	r3, [r3, #0]
 80127d8:	68db      	ldr	r3, [r3, #12]
 80127da:	899b      	ldrh	r3, [r3, #12]
 80127dc:	b29b      	uxth	r3, r3
 80127de:	b21b      	sxth	r3, r3
 80127e0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80127e4:	b21c      	sxth	r4, r3
 80127e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80127e8:	681b      	ldr	r3, [r3, #0]
 80127ea:	68db      	ldr	r3, [r3, #12]
 80127ec:	899b      	ldrh	r3, [r3, #12]
 80127ee:	b29b      	uxth	r3, r3
 80127f0:	4618      	mov	r0, r3
 80127f2:	f7fa f987 	bl	800cb04 <lwip_htons>
 80127f6:	4603      	mov	r3, r0
 80127f8:	b2db      	uxtb	r3, r3
 80127fa:	b29b      	uxth	r3, r3
 80127fc:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8012800:	b29b      	uxth	r3, r3
 8012802:	4618      	mov	r0, r3
 8012804:	f7fa f97e 	bl	800cb04 <lwip_htons>
 8012808:	4603      	mov	r3, r0
 801280a:	b21b      	sxth	r3, r3
 801280c:	4323      	orrs	r3, r4
 801280e:	b21a      	sxth	r2, r3
 8012810:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012812:	681b      	ldr	r3, [r3, #0]
 8012814:	68db      	ldr	r3, [r3, #12]
 8012816:	b292      	uxth	r2, r2
 8012818:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 801281a:	687b      	ldr	r3, [r7, #4]
 801281c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801281e:	b29a      	uxth	r2, r3
 8012820:	687b      	ldr	r3, [r7, #4]
 8012822:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012824:	4413      	add	r3, r2
 8012826:	b299      	uxth	r1, r3
 8012828:	4b3c      	ldr	r3, [pc, #240]	; (801291c <tcp_receive+0xf14>)
 801282a:	681b      	ldr	r3, [r3, #0]
 801282c:	b29a      	uxth	r2, r3
 801282e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012830:	681b      	ldr	r3, [r3, #0]
 8012832:	1a8a      	subs	r2, r1, r2
 8012834:	b292      	uxth	r2, r2
 8012836:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8012838:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801283a:	681b      	ldr	r3, [r3, #0]
 801283c:	685a      	ldr	r2, [r3, #4]
 801283e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012840:	681b      	ldr	r3, [r3, #0]
 8012842:	891b      	ldrh	r3, [r3, #8]
 8012844:	4619      	mov	r1, r3
 8012846:	4610      	mov	r0, r2
 8012848:	f7fb fb78 	bl	800df3c <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 801284c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801284e:	681b      	ldr	r3, [r3, #0]
 8012850:	891c      	ldrh	r4, [r3, #8]
 8012852:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012854:	681b      	ldr	r3, [r3, #0]
 8012856:	68db      	ldr	r3, [r3, #12]
 8012858:	899b      	ldrh	r3, [r3, #12]
 801285a:	b29b      	uxth	r3, r3
 801285c:	4618      	mov	r0, r3
 801285e:	f7fa f951 	bl	800cb04 <lwip_htons>
 8012862:	4603      	mov	r3, r0
 8012864:	b2db      	uxtb	r3, r3
 8012866:	f003 0303 	and.w	r3, r3, #3
 801286a:	2b00      	cmp	r3, #0
 801286c:	d001      	beq.n	8012872 <tcp_receive+0xe6a>
 801286e:	2301      	movs	r3, #1
 8012870:	e000      	b.n	8012874 <tcp_receive+0xe6c>
 8012872:	2300      	movs	r3, #0
 8012874:	4423      	add	r3, r4
 8012876:	b29a      	uxth	r2, r3
 8012878:	4b2a      	ldr	r3, [pc, #168]	; (8012924 <tcp_receive+0xf1c>)
 801287a:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801287c:	4b29      	ldr	r3, [pc, #164]	; (8012924 <tcp_receive+0xf1c>)
 801287e:	881b      	ldrh	r3, [r3, #0]
 8012880:	461a      	mov	r2, r3
 8012882:	4b26      	ldr	r3, [pc, #152]	; (801291c <tcp_receive+0xf14>)
 8012884:	681b      	ldr	r3, [r3, #0]
 8012886:	441a      	add	r2, r3
 8012888:	687b      	ldr	r3, [r7, #4]
 801288a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801288c:	6879      	ldr	r1, [r7, #4]
 801288e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8012890:	440b      	add	r3, r1
 8012892:	429a      	cmp	r2, r3
 8012894:	d019      	beq.n	80128ca <tcp_receive+0xec2>
 8012896:	4b24      	ldr	r3, [pc, #144]	; (8012928 <tcp_receive+0xf20>)
 8012898:	f240 62f9 	movw	r2, #1785	; 0x6f9
 801289c:	4923      	ldr	r1, [pc, #140]	; (801292c <tcp_receive+0xf24>)
 801289e:	4824      	ldr	r0, [pc, #144]	; (8012930 <tcp_receive+0xf28>)
 80128a0:	f004 fe8a 	bl	80175b8 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 80128a4:	e011      	b.n	80128ca <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80128a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80128a8:	681b      	ldr	r3, [r3, #0]
 80128aa:	63bb      	str	r3, [r7, #56]	; 0x38
 80128ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80128ae:	2b00      	cmp	r3, #0
 80128b0:	f47f aea4 	bne.w	80125fc <tcp_receive+0xbf4>
 80128b4:	e00a      	b.n	80128cc <tcp_receive+0xec4>
                break;
 80128b6:	bf00      	nop
 80128b8:	e008      	b.n	80128cc <tcp_receive+0xec4>
                break;
 80128ba:	bf00      	nop
 80128bc:	e006      	b.n	80128cc <tcp_receive+0xec4>
                  break;
 80128be:	bf00      	nop
 80128c0:	e004      	b.n	80128cc <tcp_receive+0xec4>
                  break;
 80128c2:	bf00      	nop
 80128c4:	e002      	b.n	80128cc <tcp_receive+0xec4>
                  break;
 80128c6:	bf00      	nop
 80128c8:	e000      	b.n	80128cc <tcp_receive+0xec4>
                break;
 80128ca:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 80128cc:	6878      	ldr	r0, [r7, #4]
 80128ce:	f001 fe9d 	bl	801460c <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 80128d2:	e003      	b.n	80128dc <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 80128d4:	6878      	ldr	r0, [r7, #4]
 80128d6:	f001 fe99 	bl	801460c <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80128da:	e01a      	b.n	8012912 <tcp_receive+0xf0a>
 80128dc:	e019      	b.n	8012912 <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 80128de:	4b0f      	ldr	r3, [pc, #60]	; (801291c <tcp_receive+0xf14>)
 80128e0:	681a      	ldr	r2, [r3, #0]
 80128e2:	687b      	ldr	r3, [r7, #4]
 80128e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80128e6:	1ad3      	subs	r3, r2, r3
 80128e8:	2b00      	cmp	r3, #0
 80128ea:	db0a      	blt.n	8012902 <tcp_receive+0xefa>
 80128ec:	4b0b      	ldr	r3, [pc, #44]	; (801291c <tcp_receive+0xf14>)
 80128ee:	681a      	ldr	r2, [r3, #0]
 80128f0:	687b      	ldr	r3, [r7, #4]
 80128f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80128f4:	6879      	ldr	r1, [r7, #4]
 80128f6:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80128f8:	440b      	add	r3, r1
 80128fa:	1ad3      	subs	r3, r2, r3
 80128fc:	3301      	adds	r3, #1
 80128fe:	2b00      	cmp	r3, #0
 8012900:	dd07      	ble.n	8012912 <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 8012902:	687b      	ldr	r3, [r7, #4]
 8012904:	8b5b      	ldrh	r3, [r3, #26]
 8012906:	f043 0302 	orr.w	r3, r3, #2
 801290a:	b29a      	uxth	r2, r3
 801290c:	687b      	ldr	r3, [r7, #4]
 801290e:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8012910:	e7ff      	b.n	8012912 <tcp_receive+0xf0a>
 8012912:	bf00      	nop
 8012914:	3750      	adds	r7, #80	; 0x50
 8012916:	46bd      	mov	sp, r7
 8012918:	bdb0      	pop	{r4, r5, r7, pc}
 801291a:	bf00      	nop
 801291c:	20004668 	.word	0x20004668
 8012920:	20004648 	.word	0x20004648
 8012924:	20004672 	.word	0x20004672
 8012928:	0801a494 	.word	0x0801a494
 801292c:	0801a83c 	.word	0x0801a83c
 8012930:	0801a4e0 	.word	0x0801a4e0

08012934 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8012934:	b480      	push	{r7}
 8012936:	b083      	sub	sp, #12
 8012938:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 801293a:	4b15      	ldr	r3, [pc, #84]	; (8012990 <tcp_get_next_optbyte+0x5c>)
 801293c:	881b      	ldrh	r3, [r3, #0]
 801293e:	1c5a      	adds	r2, r3, #1
 8012940:	b291      	uxth	r1, r2
 8012942:	4a13      	ldr	r2, [pc, #76]	; (8012990 <tcp_get_next_optbyte+0x5c>)
 8012944:	8011      	strh	r1, [r2, #0]
 8012946:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8012948:	4b12      	ldr	r3, [pc, #72]	; (8012994 <tcp_get_next_optbyte+0x60>)
 801294a:	681b      	ldr	r3, [r3, #0]
 801294c:	2b00      	cmp	r3, #0
 801294e:	d004      	beq.n	801295a <tcp_get_next_optbyte+0x26>
 8012950:	4b11      	ldr	r3, [pc, #68]	; (8012998 <tcp_get_next_optbyte+0x64>)
 8012952:	881b      	ldrh	r3, [r3, #0]
 8012954:	88fa      	ldrh	r2, [r7, #6]
 8012956:	429a      	cmp	r2, r3
 8012958:	d208      	bcs.n	801296c <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 801295a:	4b10      	ldr	r3, [pc, #64]	; (801299c <tcp_get_next_optbyte+0x68>)
 801295c:	681b      	ldr	r3, [r3, #0]
 801295e:	3314      	adds	r3, #20
 8012960:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8012962:	88fb      	ldrh	r3, [r7, #6]
 8012964:	683a      	ldr	r2, [r7, #0]
 8012966:	4413      	add	r3, r2
 8012968:	781b      	ldrb	r3, [r3, #0]
 801296a:	e00b      	b.n	8012984 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 801296c:	88fb      	ldrh	r3, [r7, #6]
 801296e:	b2da      	uxtb	r2, r3
 8012970:	4b09      	ldr	r3, [pc, #36]	; (8012998 <tcp_get_next_optbyte+0x64>)
 8012972:	881b      	ldrh	r3, [r3, #0]
 8012974:	b2db      	uxtb	r3, r3
 8012976:	1ad3      	subs	r3, r2, r3
 8012978:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 801297a:	4b06      	ldr	r3, [pc, #24]	; (8012994 <tcp_get_next_optbyte+0x60>)
 801297c:	681a      	ldr	r2, [r3, #0]
 801297e:	797b      	ldrb	r3, [r7, #5]
 8012980:	4413      	add	r3, r2
 8012982:	781b      	ldrb	r3, [r3, #0]
  }
}
 8012984:	4618      	mov	r0, r3
 8012986:	370c      	adds	r7, #12
 8012988:	46bd      	mov	sp, r7
 801298a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801298e:	4770      	bx	lr
 8012990:	20004664 	.word	0x20004664
 8012994:	20004660 	.word	0x20004660
 8012998:	2000465e 	.word	0x2000465e
 801299c:	20004658 	.word	0x20004658

080129a0 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 80129a0:	b580      	push	{r7, lr}
 80129a2:	b084      	sub	sp, #16
 80129a4:	af00      	add	r7, sp, #0
 80129a6:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 80129a8:	687b      	ldr	r3, [r7, #4]
 80129aa:	2b00      	cmp	r3, #0
 80129ac:	d106      	bne.n	80129bc <tcp_parseopt+0x1c>
 80129ae:	4b31      	ldr	r3, [pc, #196]	; (8012a74 <tcp_parseopt+0xd4>)
 80129b0:	f240 727d 	movw	r2, #1917	; 0x77d
 80129b4:	4930      	ldr	r1, [pc, #192]	; (8012a78 <tcp_parseopt+0xd8>)
 80129b6:	4831      	ldr	r0, [pc, #196]	; (8012a7c <tcp_parseopt+0xdc>)
 80129b8:	f004 fdfe 	bl	80175b8 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 80129bc:	4b30      	ldr	r3, [pc, #192]	; (8012a80 <tcp_parseopt+0xe0>)
 80129be:	881b      	ldrh	r3, [r3, #0]
 80129c0:	2b00      	cmp	r3, #0
 80129c2:	d053      	beq.n	8012a6c <tcp_parseopt+0xcc>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80129c4:	4b2f      	ldr	r3, [pc, #188]	; (8012a84 <tcp_parseopt+0xe4>)
 80129c6:	2200      	movs	r2, #0
 80129c8:	801a      	strh	r2, [r3, #0]
 80129ca:	e043      	b.n	8012a54 <tcp_parseopt+0xb4>
      u8_t opt = tcp_get_next_optbyte();
 80129cc:	f7ff ffb2 	bl	8012934 <tcp_get_next_optbyte>
 80129d0:	4603      	mov	r3, r0
 80129d2:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 80129d4:	7bfb      	ldrb	r3, [r7, #15]
 80129d6:	2b01      	cmp	r3, #1
 80129d8:	d03c      	beq.n	8012a54 <tcp_parseopt+0xb4>
 80129da:	2b02      	cmp	r3, #2
 80129dc:	d002      	beq.n	80129e4 <tcp_parseopt+0x44>
 80129de:	2b00      	cmp	r3, #0
 80129e0:	d03f      	beq.n	8012a62 <tcp_parseopt+0xc2>
 80129e2:	e026      	b.n	8012a32 <tcp_parseopt+0x92>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 80129e4:	f7ff ffa6 	bl	8012934 <tcp_get_next_optbyte>
 80129e8:	4603      	mov	r3, r0
 80129ea:	2b04      	cmp	r3, #4
 80129ec:	d13b      	bne.n	8012a66 <tcp_parseopt+0xc6>
 80129ee:	4b25      	ldr	r3, [pc, #148]	; (8012a84 <tcp_parseopt+0xe4>)
 80129f0:	881b      	ldrh	r3, [r3, #0]
 80129f2:	3302      	adds	r3, #2
 80129f4:	4a22      	ldr	r2, [pc, #136]	; (8012a80 <tcp_parseopt+0xe0>)
 80129f6:	8812      	ldrh	r2, [r2, #0]
 80129f8:	4293      	cmp	r3, r2
 80129fa:	dc34      	bgt.n	8012a66 <tcp_parseopt+0xc6>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 80129fc:	f7ff ff9a 	bl	8012934 <tcp_get_next_optbyte>
 8012a00:	4603      	mov	r3, r0
 8012a02:	b29b      	uxth	r3, r3
 8012a04:	021b      	lsls	r3, r3, #8
 8012a06:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8012a08:	f7ff ff94 	bl	8012934 <tcp_get_next_optbyte>
 8012a0c:	4603      	mov	r3, r0
 8012a0e:	b29a      	uxth	r2, r3
 8012a10:	89bb      	ldrh	r3, [r7, #12]
 8012a12:	4313      	orrs	r3, r2
 8012a14:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8012a16:	89bb      	ldrh	r3, [r7, #12]
 8012a18:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8012a1c:	d804      	bhi.n	8012a28 <tcp_parseopt+0x88>
 8012a1e:	89bb      	ldrh	r3, [r7, #12]
 8012a20:	2b00      	cmp	r3, #0
 8012a22:	d001      	beq.n	8012a28 <tcp_parseopt+0x88>
 8012a24:	89ba      	ldrh	r2, [r7, #12]
 8012a26:	e001      	b.n	8012a2c <tcp_parseopt+0x8c>
 8012a28:	f44f 7206 	mov.w	r2, #536	; 0x218
 8012a2c:	687b      	ldr	r3, [r7, #4]
 8012a2e:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8012a30:	e010      	b.n	8012a54 <tcp_parseopt+0xb4>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8012a32:	f7ff ff7f 	bl	8012934 <tcp_get_next_optbyte>
 8012a36:	4603      	mov	r3, r0
 8012a38:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8012a3a:	7afb      	ldrb	r3, [r7, #11]
 8012a3c:	2b01      	cmp	r3, #1
 8012a3e:	d914      	bls.n	8012a6a <tcp_parseopt+0xca>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8012a40:	7afb      	ldrb	r3, [r7, #11]
 8012a42:	b29a      	uxth	r2, r3
 8012a44:	4b0f      	ldr	r3, [pc, #60]	; (8012a84 <tcp_parseopt+0xe4>)
 8012a46:	881b      	ldrh	r3, [r3, #0]
 8012a48:	4413      	add	r3, r2
 8012a4a:	b29b      	uxth	r3, r3
 8012a4c:	3b02      	subs	r3, #2
 8012a4e:	b29a      	uxth	r2, r3
 8012a50:	4b0c      	ldr	r3, [pc, #48]	; (8012a84 <tcp_parseopt+0xe4>)
 8012a52:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8012a54:	4b0b      	ldr	r3, [pc, #44]	; (8012a84 <tcp_parseopt+0xe4>)
 8012a56:	881a      	ldrh	r2, [r3, #0]
 8012a58:	4b09      	ldr	r3, [pc, #36]	; (8012a80 <tcp_parseopt+0xe0>)
 8012a5a:	881b      	ldrh	r3, [r3, #0]
 8012a5c:	429a      	cmp	r2, r3
 8012a5e:	d3b5      	bcc.n	80129cc <tcp_parseopt+0x2c>
 8012a60:	e004      	b.n	8012a6c <tcp_parseopt+0xcc>
          return;
 8012a62:	bf00      	nop
 8012a64:	e002      	b.n	8012a6c <tcp_parseopt+0xcc>
            return;
 8012a66:	bf00      	nop
 8012a68:	e000      	b.n	8012a6c <tcp_parseopt+0xcc>
            return;
 8012a6a:	bf00      	nop
      }
    }
  }
}
 8012a6c:	3710      	adds	r7, #16
 8012a6e:	46bd      	mov	sp, r7
 8012a70:	bd80      	pop	{r7, pc}
 8012a72:	bf00      	nop
 8012a74:	0801a494 	.word	0x0801a494
 8012a78:	0801a8f8 	.word	0x0801a8f8
 8012a7c:	0801a4e0 	.word	0x0801a4e0
 8012a80:	2000465c 	.word	0x2000465c
 8012a84:	20004664 	.word	0x20004664

08012a88 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8012a88:	b480      	push	{r7}
 8012a8a:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8012a8c:	4b05      	ldr	r3, [pc, #20]	; (8012aa4 <tcp_trigger_input_pcb_close+0x1c>)
 8012a8e:	781b      	ldrb	r3, [r3, #0]
 8012a90:	f043 0310 	orr.w	r3, r3, #16
 8012a94:	b2da      	uxtb	r2, r3
 8012a96:	4b03      	ldr	r3, [pc, #12]	; (8012aa4 <tcp_trigger_input_pcb_close+0x1c>)
 8012a98:	701a      	strb	r2, [r3, #0]
}
 8012a9a:	bf00      	nop
 8012a9c:	46bd      	mov	sp, r7
 8012a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012aa2:	4770      	bx	lr
 8012aa4:	20004675 	.word	0x20004675

08012aa8 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8012aa8:	b580      	push	{r7, lr}
 8012aaa:	b084      	sub	sp, #16
 8012aac:	af00      	add	r7, sp, #0
 8012aae:	60f8      	str	r0, [r7, #12]
 8012ab0:	60b9      	str	r1, [r7, #8]
 8012ab2:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8012ab4:	68fb      	ldr	r3, [r7, #12]
 8012ab6:	2b00      	cmp	r3, #0
 8012ab8:	d00a      	beq.n	8012ad0 <tcp_route+0x28>
 8012aba:	68fb      	ldr	r3, [r7, #12]
 8012abc:	7a1b      	ldrb	r3, [r3, #8]
 8012abe:	2b00      	cmp	r3, #0
 8012ac0:	d006      	beq.n	8012ad0 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8012ac2:	68fb      	ldr	r3, [r7, #12]
 8012ac4:	7a1b      	ldrb	r3, [r3, #8]
 8012ac6:	4618      	mov	r0, r3
 8012ac8:	f7fb f834 	bl	800db34 <netif_get_by_index>
 8012acc:	4603      	mov	r3, r0
 8012ace:	e003      	b.n	8012ad8 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8012ad0:	6878      	ldr	r0, [r7, #4]
 8012ad2:	f003 f95d 	bl	8015d90 <ip4_route>
 8012ad6:	4603      	mov	r3, r0
  }
}
 8012ad8:	4618      	mov	r0, r3
 8012ada:	3710      	adds	r7, #16
 8012adc:	46bd      	mov	sp, r7
 8012ade:	bd80      	pop	{r7, pc}

08012ae0 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8012ae0:	b590      	push	{r4, r7, lr}
 8012ae2:	b087      	sub	sp, #28
 8012ae4:	af00      	add	r7, sp, #0
 8012ae6:	60f8      	str	r0, [r7, #12]
 8012ae8:	60b9      	str	r1, [r7, #8]
 8012aea:	603b      	str	r3, [r7, #0]
 8012aec:	4613      	mov	r3, r2
 8012aee:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8012af0:	68fb      	ldr	r3, [r7, #12]
 8012af2:	2b00      	cmp	r3, #0
 8012af4:	d105      	bne.n	8012b02 <tcp_create_segment+0x22>
 8012af6:	4b44      	ldr	r3, [pc, #272]	; (8012c08 <tcp_create_segment+0x128>)
 8012af8:	22a3      	movs	r2, #163	; 0xa3
 8012afa:	4944      	ldr	r1, [pc, #272]	; (8012c0c <tcp_create_segment+0x12c>)
 8012afc:	4844      	ldr	r0, [pc, #272]	; (8012c10 <tcp_create_segment+0x130>)
 8012afe:	f004 fd5b 	bl	80175b8 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8012b02:	68bb      	ldr	r3, [r7, #8]
 8012b04:	2b00      	cmp	r3, #0
 8012b06:	d105      	bne.n	8012b14 <tcp_create_segment+0x34>
 8012b08:	4b3f      	ldr	r3, [pc, #252]	; (8012c08 <tcp_create_segment+0x128>)
 8012b0a:	22a4      	movs	r2, #164	; 0xa4
 8012b0c:	4941      	ldr	r1, [pc, #260]	; (8012c14 <tcp_create_segment+0x134>)
 8012b0e:	4840      	ldr	r0, [pc, #256]	; (8012c10 <tcp_create_segment+0x130>)
 8012b10:	f004 fd52 	bl	80175b8 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8012b14:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8012b18:	009b      	lsls	r3, r3, #2
 8012b1a:	b2db      	uxtb	r3, r3
 8012b1c:	f003 0304 	and.w	r3, r3, #4
 8012b20:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8012b22:	2002      	movs	r0, #2
 8012b24:	f7fa fca2 	bl	800d46c <memp_malloc>
 8012b28:	6138      	str	r0, [r7, #16]
 8012b2a:	693b      	ldr	r3, [r7, #16]
 8012b2c:	2b00      	cmp	r3, #0
 8012b2e:	d104      	bne.n	8012b3a <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8012b30:	68b8      	ldr	r0, [r7, #8]
 8012b32:	f7fb fbbb 	bl	800e2ac <pbuf_free>
    return NULL;
 8012b36:	2300      	movs	r3, #0
 8012b38:	e061      	b.n	8012bfe <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 8012b3a:	693b      	ldr	r3, [r7, #16]
 8012b3c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8012b40:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8012b42:	693b      	ldr	r3, [r7, #16]
 8012b44:	2200      	movs	r2, #0
 8012b46:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8012b48:	693b      	ldr	r3, [r7, #16]
 8012b4a:	68ba      	ldr	r2, [r7, #8]
 8012b4c:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8012b4e:	68bb      	ldr	r3, [r7, #8]
 8012b50:	891a      	ldrh	r2, [r3, #8]
 8012b52:	7dfb      	ldrb	r3, [r7, #23]
 8012b54:	b29b      	uxth	r3, r3
 8012b56:	429a      	cmp	r2, r3
 8012b58:	d205      	bcs.n	8012b66 <tcp_create_segment+0x86>
 8012b5a:	4b2b      	ldr	r3, [pc, #172]	; (8012c08 <tcp_create_segment+0x128>)
 8012b5c:	22b0      	movs	r2, #176	; 0xb0
 8012b5e:	492e      	ldr	r1, [pc, #184]	; (8012c18 <tcp_create_segment+0x138>)
 8012b60:	482b      	ldr	r0, [pc, #172]	; (8012c10 <tcp_create_segment+0x130>)
 8012b62:	f004 fd29 	bl	80175b8 <iprintf>
  seg->len = p->tot_len - optlen;
 8012b66:	68bb      	ldr	r3, [r7, #8]
 8012b68:	891a      	ldrh	r2, [r3, #8]
 8012b6a:	7dfb      	ldrb	r3, [r7, #23]
 8012b6c:	b29b      	uxth	r3, r3
 8012b6e:	1ad3      	subs	r3, r2, r3
 8012b70:	b29a      	uxth	r2, r3
 8012b72:	693b      	ldr	r3, [r7, #16]
 8012b74:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8012b76:	2114      	movs	r1, #20
 8012b78:	68b8      	ldr	r0, [r7, #8]
 8012b7a:	f7fb facf 	bl	800e11c <pbuf_add_header>
 8012b7e:	4603      	mov	r3, r0
 8012b80:	2b00      	cmp	r3, #0
 8012b82:	d004      	beq.n	8012b8e <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8012b84:	6938      	ldr	r0, [r7, #16]
 8012b86:	f7fd f807 	bl	800fb98 <tcp_seg_free>
    return NULL;
 8012b8a:	2300      	movs	r3, #0
 8012b8c:	e037      	b.n	8012bfe <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8012b8e:	693b      	ldr	r3, [r7, #16]
 8012b90:	685b      	ldr	r3, [r3, #4]
 8012b92:	685a      	ldr	r2, [r3, #4]
 8012b94:	693b      	ldr	r3, [r7, #16]
 8012b96:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8012b98:	68fb      	ldr	r3, [r7, #12]
 8012b9a:	8ada      	ldrh	r2, [r3, #22]
 8012b9c:	693b      	ldr	r3, [r7, #16]
 8012b9e:	68dc      	ldr	r4, [r3, #12]
 8012ba0:	4610      	mov	r0, r2
 8012ba2:	f7f9 ffaf 	bl	800cb04 <lwip_htons>
 8012ba6:	4603      	mov	r3, r0
 8012ba8:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8012baa:	68fb      	ldr	r3, [r7, #12]
 8012bac:	8b1a      	ldrh	r2, [r3, #24]
 8012bae:	693b      	ldr	r3, [r7, #16]
 8012bb0:	68dc      	ldr	r4, [r3, #12]
 8012bb2:	4610      	mov	r0, r2
 8012bb4:	f7f9 ffa6 	bl	800cb04 <lwip_htons>
 8012bb8:	4603      	mov	r3, r0
 8012bba:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8012bbc:	693b      	ldr	r3, [r7, #16]
 8012bbe:	68dc      	ldr	r4, [r3, #12]
 8012bc0:	6838      	ldr	r0, [r7, #0]
 8012bc2:	f7f9 ffb4 	bl	800cb2e <lwip_htonl>
 8012bc6:	4603      	mov	r3, r0
 8012bc8:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8012bca:	7dfb      	ldrb	r3, [r7, #23]
 8012bcc:	089b      	lsrs	r3, r3, #2
 8012bce:	b2db      	uxtb	r3, r3
 8012bd0:	b29b      	uxth	r3, r3
 8012bd2:	3305      	adds	r3, #5
 8012bd4:	b29b      	uxth	r3, r3
 8012bd6:	031b      	lsls	r3, r3, #12
 8012bd8:	b29a      	uxth	r2, r3
 8012bda:	79fb      	ldrb	r3, [r7, #7]
 8012bdc:	b29b      	uxth	r3, r3
 8012bde:	4313      	orrs	r3, r2
 8012be0:	b29a      	uxth	r2, r3
 8012be2:	693b      	ldr	r3, [r7, #16]
 8012be4:	68dc      	ldr	r4, [r3, #12]
 8012be6:	4610      	mov	r0, r2
 8012be8:	f7f9 ff8c 	bl	800cb04 <lwip_htons>
 8012bec:	4603      	mov	r3, r0
 8012bee:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8012bf0:	693b      	ldr	r3, [r7, #16]
 8012bf2:	68db      	ldr	r3, [r3, #12]
 8012bf4:	2200      	movs	r2, #0
 8012bf6:	749a      	strb	r2, [r3, #18]
 8012bf8:	2200      	movs	r2, #0
 8012bfa:	74da      	strb	r2, [r3, #19]
  return seg;
 8012bfc:	693b      	ldr	r3, [r7, #16]
}
 8012bfe:	4618      	mov	r0, r3
 8012c00:	371c      	adds	r7, #28
 8012c02:	46bd      	mov	sp, r7
 8012c04:	bd90      	pop	{r4, r7, pc}
 8012c06:	bf00      	nop
 8012c08:	0801a914 	.word	0x0801a914
 8012c0c:	0801a948 	.word	0x0801a948
 8012c10:	0801a968 	.word	0x0801a968
 8012c14:	0801a990 	.word	0x0801a990
 8012c18:	0801a9b4 	.word	0x0801a9b4

08012c1c <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8012c1c:	b580      	push	{r7, lr}
 8012c1e:	b086      	sub	sp, #24
 8012c20:	af00      	add	r7, sp, #0
 8012c22:	607b      	str	r3, [r7, #4]
 8012c24:	4603      	mov	r3, r0
 8012c26:	73fb      	strb	r3, [r7, #15]
 8012c28:	460b      	mov	r3, r1
 8012c2a:	81bb      	strh	r3, [r7, #12]
 8012c2c:	4613      	mov	r3, r2
 8012c2e:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8012c30:	89bb      	ldrh	r3, [r7, #12]
 8012c32:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8012c34:	687b      	ldr	r3, [r7, #4]
 8012c36:	2b00      	cmp	r3, #0
 8012c38:	d105      	bne.n	8012c46 <tcp_pbuf_prealloc+0x2a>
 8012c3a:	4b30      	ldr	r3, [pc, #192]	; (8012cfc <tcp_pbuf_prealloc+0xe0>)
 8012c3c:	22e8      	movs	r2, #232	; 0xe8
 8012c3e:	4930      	ldr	r1, [pc, #192]	; (8012d00 <tcp_pbuf_prealloc+0xe4>)
 8012c40:	4830      	ldr	r0, [pc, #192]	; (8012d04 <tcp_pbuf_prealloc+0xe8>)
 8012c42:	f004 fcb9 	bl	80175b8 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 8012c46:	6a3b      	ldr	r3, [r7, #32]
 8012c48:	2b00      	cmp	r3, #0
 8012c4a:	d105      	bne.n	8012c58 <tcp_pbuf_prealloc+0x3c>
 8012c4c:	4b2b      	ldr	r3, [pc, #172]	; (8012cfc <tcp_pbuf_prealloc+0xe0>)
 8012c4e:	22e9      	movs	r2, #233	; 0xe9
 8012c50:	492d      	ldr	r1, [pc, #180]	; (8012d08 <tcp_pbuf_prealloc+0xec>)
 8012c52:	482c      	ldr	r0, [pc, #176]	; (8012d04 <tcp_pbuf_prealloc+0xe8>)
 8012c54:	f004 fcb0 	bl	80175b8 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8012c58:	89ba      	ldrh	r2, [r7, #12]
 8012c5a:	897b      	ldrh	r3, [r7, #10]
 8012c5c:	429a      	cmp	r2, r3
 8012c5e:	d221      	bcs.n	8012ca4 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8012c60:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8012c64:	f003 0302 	and.w	r3, r3, #2
 8012c68:	2b00      	cmp	r3, #0
 8012c6a:	d111      	bne.n	8012c90 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8012c6c:	6a3b      	ldr	r3, [r7, #32]
 8012c6e:	8b5b      	ldrh	r3, [r3, #26]
 8012c70:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8012c74:	2b00      	cmp	r3, #0
 8012c76:	d115      	bne.n	8012ca4 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 8012c78:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8012c7c:	2b00      	cmp	r3, #0
 8012c7e:	d007      	beq.n	8012c90 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 8012c80:	6a3b      	ldr	r3, [r7, #32]
 8012c82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 8012c84:	2b00      	cmp	r3, #0
 8012c86:	d103      	bne.n	8012c90 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 8012c88:	6a3b      	ldr	r3, [r7, #32]
 8012c8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 8012c8c:	2b00      	cmp	r3, #0
 8012c8e:	d009      	beq.n	8012ca4 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8012c90:	89bb      	ldrh	r3, [r7, #12]
 8012c92:	f203 231b 	addw	r3, r3, #539	; 0x21b
 8012c96:	f023 0203 	bic.w	r2, r3, #3
 8012c9a:	897b      	ldrh	r3, [r7, #10]
 8012c9c:	4293      	cmp	r3, r2
 8012c9e:	bf28      	it	cs
 8012ca0:	4613      	movcs	r3, r2
 8012ca2:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8012ca4:	8af9      	ldrh	r1, [r7, #22]
 8012ca6:	7bfb      	ldrb	r3, [r7, #15]
 8012ca8:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012cac:	4618      	mov	r0, r3
 8012cae:	f7fa ffeb 	bl	800dc88 <pbuf_alloc>
 8012cb2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8012cb4:	693b      	ldr	r3, [r7, #16]
 8012cb6:	2b00      	cmp	r3, #0
 8012cb8:	d101      	bne.n	8012cbe <tcp_pbuf_prealloc+0xa2>
    return NULL;
 8012cba:	2300      	movs	r3, #0
 8012cbc:	e019      	b.n	8012cf2 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8012cbe:	693b      	ldr	r3, [r7, #16]
 8012cc0:	681b      	ldr	r3, [r3, #0]
 8012cc2:	2b00      	cmp	r3, #0
 8012cc4:	d006      	beq.n	8012cd4 <tcp_pbuf_prealloc+0xb8>
 8012cc6:	4b0d      	ldr	r3, [pc, #52]	; (8012cfc <tcp_pbuf_prealloc+0xe0>)
 8012cc8:	f240 120b 	movw	r2, #267	; 0x10b
 8012ccc:	490f      	ldr	r1, [pc, #60]	; (8012d0c <tcp_pbuf_prealloc+0xf0>)
 8012cce:	480d      	ldr	r0, [pc, #52]	; (8012d04 <tcp_pbuf_prealloc+0xe8>)
 8012cd0:	f004 fc72 	bl	80175b8 <iprintf>
  *oversize = p->len - length;
 8012cd4:	693b      	ldr	r3, [r7, #16]
 8012cd6:	895a      	ldrh	r2, [r3, #10]
 8012cd8:	89bb      	ldrh	r3, [r7, #12]
 8012cda:	1ad3      	subs	r3, r2, r3
 8012cdc:	b29a      	uxth	r2, r3
 8012cde:	687b      	ldr	r3, [r7, #4]
 8012ce0:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8012ce2:	693b      	ldr	r3, [r7, #16]
 8012ce4:	89ba      	ldrh	r2, [r7, #12]
 8012ce6:	811a      	strh	r2, [r3, #8]
 8012ce8:	693b      	ldr	r3, [r7, #16]
 8012cea:	891a      	ldrh	r2, [r3, #8]
 8012cec:	693b      	ldr	r3, [r7, #16]
 8012cee:	815a      	strh	r2, [r3, #10]
  return p;
 8012cf0:	693b      	ldr	r3, [r7, #16]
}
 8012cf2:	4618      	mov	r0, r3
 8012cf4:	3718      	adds	r7, #24
 8012cf6:	46bd      	mov	sp, r7
 8012cf8:	bd80      	pop	{r7, pc}
 8012cfa:	bf00      	nop
 8012cfc:	0801a914 	.word	0x0801a914
 8012d00:	0801a9cc 	.word	0x0801a9cc
 8012d04:	0801a968 	.word	0x0801a968
 8012d08:	0801a9f0 	.word	0x0801a9f0
 8012d0c:	0801aa10 	.word	0x0801aa10

08012d10 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8012d10:	b580      	push	{r7, lr}
 8012d12:	b082      	sub	sp, #8
 8012d14:	af00      	add	r7, sp, #0
 8012d16:	6078      	str	r0, [r7, #4]
 8012d18:	460b      	mov	r3, r1
 8012d1a:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 8012d1c:	687b      	ldr	r3, [r7, #4]
 8012d1e:	2b00      	cmp	r3, #0
 8012d20:	d106      	bne.n	8012d30 <tcp_write_checks+0x20>
 8012d22:	4b33      	ldr	r3, [pc, #204]	; (8012df0 <tcp_write_checks+0xe0>)
 8012d24:	f240 1233 	movw	r2, #307	; 0x133
 8012d28:	4932      	ldr	r1, [pc, #200]	; (8012df4 <tcp_write_checks+0xe4>)
 8012d2a:	4833      	ldr	r0, [pc, #204]	; (8012df8 <tcp_write_checks+0xe8>)
 8012d2c:	f004 fc44 	bl	80175b8 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8012d30:	687b      	ldr	r3, [r7, #4]
 8012d32:	7d1b      	ldrb	r3, [r3, #20]
 8012d34:	2b04      	cmp	r3, #4
 8012d36:	d00e      	beq.n	8012d56 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 8012d38:	687b      	ldr	r3, [r7, #4]
 8012d3a:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8012d3c:	2b07      	cmp	r3, #7
 8012d3e:	d00a      	beq.n	8012d56 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 8012d40:	687b      	ldr	r3, [r7, #4]
 8012d42:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8012d44:	2b02      	cmp	r3, #2
 8012d46:	d006      	beq.n	8012d56 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 8012d48:	687b      	ldr	r3, [r7, #4]
 8012d4a:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8012d4c:	2b03      	cmp	r3, #3
 8012d4e:	d002      	beq.n	8012d56 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8012d50:	f06f 030a 	mvn.w	r3, #10
 8012d54:	e048      	b.n	8012de8 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 8012d56:	887b      	ldrh	r3, [r7, #2]
 8012d58:	2b00      	cmp	r3, #0
 8012d5a:	d101      	bne.n	8012d60 <tcp_write_checks+0x50>
    return ERR_OK;
 8012d5c:	2300      	movs	r3, #0
 8012d5e:	e043      	b.n	8012de8 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8012d60:	687b      	ldr	r3, [r7, #4]
 8012d62:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8012d66:	887a      	ldrh	r2, [r7, #2]
 8012d68:	429a      	cmp	r2, r3
 8012d6a:	d909      	bls.n	8012d80 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8012d6c:	687b      	ldr	r3, [r7, #4]
 8012d6e:	8b5b      	ldrh	r3, [r3, #26]
 8012d70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012d74:	b29a      	uxth	r2, r3
 8012d76:	687b      	ldr	r3, [r7, #4]
 8012d78:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8012d7a:	f04f 33ff 	mov.w	r3, #4294967295
 8012d7e:	e033      	b.n	8012de8 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 8012d80:	687b      	ldr	r3, [r7, #4]
 8012d82:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012d86:	2b08      	cmp	r3, #8
 8012d88:	d909      	bls.n	8012d9e <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8012d8a:	687b      	ldr	r3, [r7, #4]
 8012d8c:	8b5b      	ldrh	r3, [r3, #26]
 8012d8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012d92:	b29a      	uxth	r2, r3
 8012d94:	687b      	ldr	r3, [r7, #4]
 8012d96:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8012d98:	f04f 33ff 	mov.w	r3, #4294967295
 8012d9c:	e024      	b.n	8012de8 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 8012d9e:	687b      	ldr	r3, [r7, #4]
 8012da0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012da4:	2b00      	cmp	r3, #0
 8012da6:	d00f      	beq.n	8012dc8 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8012da8:	687b      	ldr	r3, [r7, #4]
 8012daa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012dac:	2b00      	cmp	r3, #0
 8012dae:	d11a      	bne.n	8012de6 <tcp_write_checks+0xd6>
 8012db0:	687b      	ldr	r3, [r7, #4]
 8012db2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012db4:	2b00      	cmp	r3, #0
 8012db6:	d116      	bne.n	8012de6 <tcp_write_checks+0xd6>
 8012db8:	4b0d      	ldr	r3, [pc, #52]	; (8012df0 <tcp_write_checks+0xe0>)
 8012dba:	f44f 72ab 	mov.w	r2, #342	; 0x156
 8012dbe:	490f      	ldr	r1, [pc, #60]	; (8012dfc <tcp_write_checks+0xec>)
 8012dc0:	480d      	ldr	r0, [pc, #52]	; (8012df8 <tcp_write_checks+0xe8>)
 8012dc2:	f004 fbf9 	bl	80175b8 <iprintf>
 8012dc6:	e00e      	b.n	8012de6 <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8012dc8:	687b      	ldr	r3, [r7, #4]
 8012dca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012dcc:	2b00      	cmp	r3, #0
 8012dce:	d103      	bne.n	8012dd8 <tcp_write_checks+0xc8>
 8012dd0:	687b      	ldr	r3, [r7, #4]
 8012dd2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012dd4:	2b00      	cmp	r3, #0
 8012dd6:	d006      	beq.n	8012de6 <tcp_write_checks+0xd6>
 8012dd8:	4b05      	ldr	r3, [pc, #20]	; (8012df0 <tcp_write_checks+0xe0>)
 8012dda:	f240 1259 	movw	r2, #345	; 0x159
 8012dde:	4908      	ldr	r1, [pc, #32]	; (8012e00 <tcp_write_checks+0xf0>)
 8012de0:	4805      	ldr	r0, [pc, #20]	; (8012df8 <tcp_write_checks+0xe8>)
 8012de2:	f004 fbe9 	bl	80175b8 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 8012de6:	2300      	movs	r3, #0
}
 8012de8:	4618      	mov	r0, r3
 8012dea:	3708      	adds	r7, #8
 8012dec:	46bd      	mov	sp, r7
 8012dee:	bd80      	pop	{r7, pc}
 8012df0:	0801a914 	.word	0x0801a914
 8012df4:	0801aa24 	.word	0x0801aa24
 8012df8:	0801a968 	.word	0x0801a968
 8012dfc:	0801aa44 	.word	0x0801aa44
 8012e00:	0801aa80 	.word	0x0801aa80

08012e04 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8012e04:	b590      	push	{r4, r7, lr}
 8012e06:	b09b      	sub	sp, #108	; 0x6c
 8012e08:	af04      	add	r7, sp, #16
 8012e0a:	60f8      	str	r0, [r7, #12]
 8012e0c:	60b9      	str	r1, [r7, #8]
 8012e0e:	4611      	mov	r1, r2
 8012e10:	461a      	mov	r2, r3
 8012e12:	460b      	mov	r3, r1
 8012e14:	80fb      	strh	r3, [r7, #6]
 8012e16:	4613      	mov	r3, r2
 8012e18:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 8012e1a:	2300      	movs	r3, #0
 8012e1c:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8012e1e:	2300      	movs	r3, #0
 8012e20:	653b      	str	r3, [r7, #80]	; 0x50
 8012e22:	2300      	movs	r3, #0
 8012e24:	64fb      	str	r3, [r7, #76]	; 0x4c
 8012e26:	2300      	movs	r3, #0
 8012e28:	64bb      	str	r3, [r7, #72]	; 0x48
 8012e2a:	2300      	movs	r3, #0
 8012e2c:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 8012e2e:	2300      	movs	r3, #0
 8012e30:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 8012e34:	2300      	movs	r3, #0
 8012e36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 8012e3a:	2300      	movs	r3, #0
 8012e3c:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 8012e3e:	2300      	movs	r3, #0
 8012e40:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 8012e42:	2300      	movs	r3, #0
 8012e44:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 8012e46:	68fb      	ldr	r3, [r7, #12]
 8012e48:	2b00      	cmp	r3, #0
 8012e4a:	d109      	bne.n	8012e60 <tcp_write+0x5c>
 8012e4c:	4ba5      	ldr	r3, [pc, #660]	; (80130e4 <tcp_write+0x2e0>)
 8012e4e:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 8012e52:	49a5      	ldr	r1, [pc, #660]	; (80130e8 <tcp_write+0x2e4>)
 8012e54:	48a5      	ldr	r0, [pc, #660]	; (80130ec <tcp_write+0x2e8>)
 8012e56:	f004 fbaf 	bl	80175b8 <iprintf>
 8012e5a:	f06f 030f 	mvn.w	r3, #15
 8012e5e:	e32c      	b.n	80134ba <tcp_write+0x6b6>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 8012e60:	68fb      	ldr	r3, [r7, #12]
 8012e62:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8012e66:	085b      	lsrs	r3, r3, #1
 8012e68:	b29a      	uxth	r2, r3
 8012e6a:	68fb      	ldr	r3, [r7, #12]
 8012e6c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012e6e:	4293      	cmp	r3, r2
 8012e70:	bf28      	it	cs
 8012e72:	4613      	movcs	r3, r2
 8012e74:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 8012e76:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012e78:	2b00      	cmp	r3, #0
 8012e7a:	d102      	bne.n	8012e82 <tcp_write+0x7e>
 8012e7c:	68fb      	ldr	r3, [r7, #12]
 8012e7e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012e80:	e000      	b.n	8012e84 <tcp_write+0x80>
 8012e82:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012e84:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8012e86:	68bb      	ldr	r3, [r7, #8]
 8012e88:	2b00      	cmp	r3, #0
 8012e8a:	d109      	bne.n	8012ea0 <tcp_write+0x9c>
 8012e8c:	4b95      	ldr	r3, [pc, #596]	; (80130e4 <tcp_write+0x2e0>)
 8012e8e:	f44f 72d7 	mov.w	r2, #430	; 0x1ae
 8012e92:	4997      	ldr	r1, [pc, #604]	; (80130f0 <tcp_write+0x2ec>)
 8012e94:	4895      	ldr	r0, [pc, #596]	; (80130ec <tcp_write+0x2e8>)
 8012e96:	f004 fb8f 	bl	80175b8 <iprintf>
 8012e9a:	f06f 030f 	mvn.w	r3, #15
 8012e9e:	e30c      	b.n	80134ba <tcp_write+0x6b6>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8012ea0:	88fb      	ldrh	r3, [r7, #6]
 8012ea2:	4619      	mov	r1, r3
 8012ea4:	68f8      	ldr	r0, [r7, #12]
 8012ea6:	f7ff ff33 	bl	8012d10 <tcp_write_checks>
 8012eaa:	4603      	mov	r3, r0
 8012eac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 8012eb0:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8012eb4:	2b00      	cmp	r3, #0
 8012eb6:	d002      	beq.n	8012ebe <tcp_write+0xba>
    return err;
 8012eb8:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8012ebc:	e2fd      	b.n	80134ba <tcp_write+0x6b6>
  }
  queuelen = pcb->snd_queuelen;
 8012ebe:	68fb      	ldr	r3, [r7, #12]
 8012ec0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012ec4:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8012ec8:	2300      	movs	r3, #0
 8012eca:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 8012ece:	68fb      	ldr	r3, [r7, #12]
 8012ed0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012ed2:	2b00      	cmp	r3, #0
 8012ed4:	f000 80f7 	beq.w	80130c6 <tcp_write+0x2c2>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8012ed8:	68fb      	ldr	r3, [r7, #12]
 8012eda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012edc:	653b      	str	r3, [r7, #80]	; 0x50
 8012ede:	e002      	b.n	8012ee6 <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 8012ee0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012ee2:	681b      	ldr	r3, [r3, #0]
 8012ee4:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8012ee6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012ee8:	681b      	ldr	r3, [r3, #0]
 8012eea:	2b00      	cmp	r3, #0
 8012eec:	d1f8      	bne.n	8012ee0 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 8012eee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012ef0:	7a9b      	ldrb	r3, [r3, #10]
 8012ef2:	009b      	lsls	r3, r3, #2
 8012ef4:	b29b      	uxth	r3, r3
 8012ef6:	f003 0304 	and.w	r3, r3, #4
 8012efa:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8012efc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8012efe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012f00:	891b      	ldrh	r3, [r3, #8]
 8012f02:	4619      	mov	r1, r3
 8012f04:	8c3b      	ldrh	r3, [r7, #32]
 8012f06:	440b      	add	r3, r1
 8012f08:	429a      	cmp	r2, r3
 8012f0a:	da06      	bge.n	8012f1a <tcp_write+0x116>
 8012f0c:	4b75      	ldr	r3, [pc, #468]	; (80130e4 <tcp_write+0x2e0>)
 8012f0e:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8012f12:	4978      	ldr	r1, [pc, #480]	; (80130f4 <tcp_write+0x2f0>)
 8012f14:	4875      	ldr	r0, [pc, #468]	; (80130ec <tcp_write+0x2e8>)
 8012f16:	f004 fb4f 	bl	80175b8 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8012f1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012f1c:	891a      	ldrh	r2, [r3, #8]
 8012f1e:	8c3b      	ldrh	r3, [r7, #32]
 8012f20:	4413      	add	r3, r2
 8012f22:	b29b      	uxth	r3, r3
 8012f24:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8012f26:	1ad3      	subs	r3, r2, r3
 8012f28:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 8012f2a:	68fb      	ldr	r3, [r7, #12]
 8012f2c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8012f30:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 8012f32:	8a7b      	ldrh	r3, [r7, #18]
 8012f34:	2b00      	cmp	r3, #0
 8012f36:	d027      	beq.n	8012f88 <tcp_write+0x184>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8012f38:	8a7b      	ldrh	r3, [r7, #18]
 8012f3a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8012f3c:	429a      	cmp	r2, r3
 8012f3e:	d206      	bcs.n	8012f4e <tcp_write+0x14a>
 8012f40:	4b68      	ldr	r3, [pc, #416]	; (80130e4 <tcp_write+0x2e0>)
 8012f42:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 8012f46:	496c      	ldr	r1, [pc, #432]	; (80130f8 <tcp_write+0x2f4>)
 8012f48:	4868      	ldr	r0, [pc, #416]	; (80130ec <tcp_write+0x2e8>)
 8012f4a:	f004 fb35 	bl	80175b8 <iprintf>
      seg = last_unsent;
 8012f4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012f50:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8012f52:	8a7b      	ldrh	r3, [r7, #18]
 8012f54:	88fa      	ldrh	r2, [r7, #6]
 8012f56:	429a      	cmp	r2, r3
 8012f58:	d901      	bls.n	8012f5e <tcp_write+0x15a>
 8012f5a:	8a7b      	ldrh	r3, [r7, #18]
 8012f5c:	e000      	b.n	8012f60 <tcp_write+0x15c>
 8012f5e:	88fb      	ldrh	r3, [r7, #6]
 8012f60:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8012f62:	4293      	cmp	r3, r2
 8012f64:	bfa8      	it	ge
 8012f66:	4613      	movge	r3, r2
 8012f68:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 8012f6a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012f6e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012f70:	4413      	add	r3, r2
 8012f72:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 8012f76:	8a7a      	ldrh	r2, [r7, #18]
 8012f78:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012f7a:	1ad3      	subs	r3, r2, r3
 8012f7c:	b29b      	uxth	r3, r3
 8012f7e:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 8012f80:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8012f82:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012f84:	1ad3      	subs	r3, r2, r3
 8012f86:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 8012f88:	8a7b      	ldrh	r3, [r7, #18]
 8012f8a:	2b00      	cmp	r3, #0
 8012f8c:	d00b      	beq.n	8012fa6 <tcp_write+0x1a2>
 8012f8e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012f92:	88fb      	ldrh	r3, [r7, #6]
 8012f94:	429a      	cmp	r2, r3
 8012f96:	d006      	beq.n	8012fa6 <tcp_write+0x1a2>
 8012f98:	4b52      	ldr	r3, [pc, #328]	; (80130e4 <tcp_write+0x2e0>)
 8012f9a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012f9e:	4957      	ldr	r1, [pc, #348]	; (80130fc <tcp_write+0x2f8>)
 8012fa0:	4852      	ldr	r0, [pc, #328]	; (80130ec <tcp_write+0x2e8>)
 8012fa2:	f004 fb09 	bl	80175b8 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8012fa6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012faa:	88fb      	ldrh	r3, [r7, #6]
 8012fac:	429a      	cmp	r2, r3
 8012fae:	f080 8168 	bcs.w	8013282 <tcp_write+0x47e>
 8012fb2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8012fb4:	2b00      	cmp	r3, #0
 8012fb6:	f000 8164 	beq.w	8013282 <tcp_write+0x47e>
 8012fba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012fbc:	891b      	ldrh	r3, [r3, #8]
 8012fbe:	2b00      	cmp	r3, #0
 8012fc0:	f000 815f 	beq.w	8013282 <tcp_write+0x47e>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8012fc4:	88fa      	ldrh	r2, [r7, #6]
 8012fc6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012fca:	1ad2      	subs	r2, r2, r3
 8012fcc:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8012fce:	4293      	cmp	r3, r2
 8012fd0:	bfa8      	it	ge
 8012fd2:	4613      	movge	r3, r2
 8012fd4:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8012fd6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012fd8:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8012fda:	797b      	ldrb	r3, [r7, #5]
 8012fdc:	f003 0301 	and.w	r3, r3, #1
 8012fe0:	2b00      	cmp	r3, #0
 8012fe2:	d027      	beq.n	8013034 <tcp_write+0x230>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8012fe4:	f107 0012 	add.w	r0, r7, #18
 8012fe8:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8012fea:	8bf9      	ldrh	r1, [r7, #30]
 8012fec:	2301      	movs	r3, #1
 8012fee:	9302      	str	r3, [sp, #8]
 8012ff0:	797b      	ldrb	r3, [r7, #5]
 8012ff2:	9301      	str	r3, [sp, #4]
 8012ff4:	68fb      	ldr	r3, [r7, #12]
 8012ff6:	9300      	str	r3, [sp, #0]
 8012ff8:	4603      	mov	r3, r0
 8012ffa:	2000      	movs	r0, #0
 8012ffc:	f7ff fe0e 	bl	8012c1c <tcp_pbuf_prealloc>
 8013000:	6578      	str	r0, [r7, #84]	; 0x54
 8013002:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013004:	2b00      	cmp	r3, #0
 8013006:	f000 8226 	beq.w	8013456 <tcp_write+0x652>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 801300a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801300c:	6858      	ldr	r0, [r3, #4]
 801300e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8013012:	68ba      	ldr	r2, [r7, #8]
 8013014:	4413      	add	r3, r2
 8013016:	8bfa      	ldrh	r2, [r7, #30]
 8013018:	4619      	mov	r1, r3
 801301a:	f004 faba 	bl	8017592 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 801301e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8013020:	f7fb f9d2 	bl	800e3c8 <pbuf_clen>
 8013024:	4603      	mov	r3, r0
 8013026:	461a      	mov	r2, r3
 8013028:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801302c:	4413      	add	r3, r2
 801302e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8013032:	e041      	b.n	80130b8 <tcp_write+0x2b4>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8013034:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013036:	685b      	ldr	r3, [r3, #4]
 8013038:	637b      	str	r3, [r7, #52]	; 0x34
 801303a:	e002      	b.n	8013042 <tcp_write+0x23e>
 801303c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801303e:	681b      	ldr	r3, [r3, #0]
 8013040:	637b      	str	r3, [r7, #52]	; 0x34
 8013042:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013044:	681b      	ldr	r3, [r3, #0]
 8013046:	2b00      	cmp	r3, #0
 8013048:	d1f8      	bne.n	801303c <tcp_write+0x238>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801304a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801304c:	7b1b      	ldrb	r3, [r3, #12]
 801304e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8013052:	2b00      	cmp	r3, #0
 8013054:	d115      	bne.n	8013082 <tcp_write+0x27e>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8013056:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013058:	685b      	ldr	r3, [r3, #4]
 801305a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801305c:	8952      	ldrh	r2, [r2, #10]
 801305e:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8013060:	68ba      	ldr	r2, [r7, #8]
 8013062:	429a      	cmp	r2, r3
 8013064:	d10d      	bne.n	8013082 <tcp_write+0x27e>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8013066:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801306a:	2b00      	cmp	r3, #0
 801306c:	d006      	beq.n	801307c <tcp_write+0x278>
 801306e:	4b1d      	ldr	r3, [pc, #116]	; (80130e4 <tcp_write+0x2e0>)
 8013070:	f240 2231 	movw	r2, #561	; 0x231
 8013074:	4922      	ldr	r1, [pc, #136]	; (8013100 <tcp_write+0x2fc>)
 8013076:	481d      	ldr	r0, [pc, #116]	; (80130ec <tcp_write+0x2e8>)
 8013078:	f004 fa9e 	bl	80175b8 <iprintf>
          extendlen = seglen;
 801307c:	8bfb      	ldrh	r3, [r7, #30]
 801307e:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8013080:	e01a      	b.n	80130b8 <tcp_write+0x2b4>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8013082:	8bfb      	ldrh	r3, [r7, #30]
 8013084:	2201      	movs	r2, #1
 8013086:	4619      	mov	r1, r3
 8013088:	2000      	movs	r0, #0
 801308a:	f7fa fdfd 	bl	800dc88 <pbuf_alloc>
 801308e:	6578      	str	r0, [r7, #84]	; 0x54
 8013090:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013092:	2b00      	cmp	r3, #0
 8013094:	f000 81e1 	beq.w	801345a <tcp_write+0x656>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 8013098:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801309c:	68ba      	ldr	r2, [r7, #8]
 801309e:	441a      	add	r2, r3
 80130a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80130a2:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 80130a4:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80130a6:	f7fb f98f 	bl	800e3c8 <pbuf_clen>
 80130aa:	4603      	mov	r3, r0
 80130ac:	461a      	mov	r2, r3
 80130ae:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80130b2:	4413      	add	r3, r2
 80130b4:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 80130b8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80130bc:	8bfb      	ldrh	r3, [r7, #30]
 80130be:	4413      	add	r3, r2
 80130c0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80130c4:	e0dd      	b.n	8013282 <tcp_write+0x47e>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 80130c6:	68fb      	ldr	r3, [r7, #12]
 80130c8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80130cc:	2b00      	cmp	r3, #0
 80130ce:	f000 80d8 	beq.w	8013282 <tcp_write+0x47e>
 80130d2:	4b04      	ldr	r3, [pc, #16]	; (80130e4 <tcp_write+0x2e0>)
 80130d4:	f240 224b 	movw	r2, #587	; 0x24b
 80130d8:	490a      	ldr	r1, [pc, #40]	; (8013104 <tcp_write+0x300>)
 80130da:	4804      	ldr	r0, [pc, #16]	; (80130ec <tcp_write+0x2e8>)
 80130dc:	f004 fa6c 	bl	80175b8 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 80130e0:	e0cf      	b.n	8013282 <tcp_write+0x47e>
 80130e2:	bf00      	nop
 80130e4:	0801a914 	.word	0x0801a914
 80130e8:	0801aab4 	.word	0x0801aab4
 80130ec:	0801a968 	.word	0x0801a968
 80130f0:	0801aacc 	.word	0x0801aacc
 80130f4:	0801ab00 	.word	0x0801ab00
 80130f8:	0801ab18 	.word	0x0801ab18
 80130fc:	0801ab38 	.word	0x0801ab38
 8013100:	0801ab58 	.word	0x0801ab58
 8013104:	0801ab84 	.word	0x0801ab84
    struct pbuf *p;
    u16_t left = len - pos;
 8013108:	88fa      	ldrh	r2, [r7, #6]
 801310a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801310e:	1ad3      	subs	r3, r2, r3
 8013110:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 8013112:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8013116:	b29b      	uxth	r3, r3
 8013118:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801311a:	1ad3      	subs	r3, r2, r3
 801311c:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 801311e:	8b7a      	ldrh	r2, [r7, #26]
 8013120:	8bbb      	ldrh	r3, [r7, #28]
 8013122:	4293      	cmp	r3, r2
 8013124:	bf28      	it	cs
 8013126:	4613      	movcs	r3, r2
 8013128:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 801312a:	797b      	ldrb	r3, [r7, #5]
 801312c:	f003 0301 	and.w	r3, r3, #1
 8013130:	2b00      	cmp	r3, #0
 8013132:	d036      	beq.n	80131a2 <tcp_write+0x39e>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8013134:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8013138:	b29a      	uxth	r2, r3
 801313a:	8b3b      	ldrh	r3, [r7, #24]
 801313c:	4413      	add	r3, r2
 801313e:	b299      	uxth	r1, r3
 8013140:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013142:	2b00      	cmp	r3, #0
 8013144:	bf0c      	ite	eq
 8013146:	2301      	moveq	r3, #1
 8013148:	2300      	movne	r3, #0
 801314a:	b2db      	uxtb	r3, r3
 801314c:	f107 0012 	add.w	r0, r7, #18
 8013150:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8013152:	9302      	str	r3, [sp, #8]
 8013154:	797b      	ldrb	r3, [r7, #5]
 8013156:	9301      	str	r3, [sp, #4]
 8013158:	68fb      	ldr	r3, [r7, #12]
 801315a:	9300      	str	r3, [sp, #0]
 801315c:	4603      	mov	r3, r0
 801315e:	2036      	movs	r0, #54	; 0x36
 8013160:	f7ff fd5c 	bl	8012c1c <tcp_pbuf_prealloc>
 8013164:	6338      	str	r0, [r7, #48]	; 0x30
 8013166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013168:	2b00      	cmp	r3, #0
 801316a:	f000 8178 	beq.w	801345e <tcp_write+0x65a>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 801316e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013170:	895b      	ldrh	r3, [r3, #10]
 8013172:	8b3a      	ldrh	r2, [r7, #24]
 8013174:	429a      	cmp	r2, r3
 8013176:	d906      	bls.n	8013186 <tcp_write+0x382>
 8013178:	4b8c      	ldr	r3, [pc, #560]	; (80133ac <tcp_write+0x5a8>)
 801317a:	f240 2267 	movw	r2, #615	; 0x267
 801317e:	498c      	ldr	r1, [pc, #560]	; (80133b0 <tcp_write+0x5ac>)
 8013180:	488c      	ldr	r0, [pc, #560]	; (80133b4 <tcp_write+0x5b0>)
 8013182:	f004 fa19 	bl	80175b8 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 8013186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013188:	685a      	ldr	r2, [r3, #4]
 801318a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801318e:	18d0      	adds	r0, r2, r3
 8013190:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8013194:	68ba      	ldr	r2, [r7, #8]
 8013196:	4413      	add	r3, r2
 8013198:	8b3a      	ldrh	r2, [r7, #24]
 801319a:	4619      	mov	r1, r3
 801319c:	f004 f9f9 	bl	8017592 <memcpy>
 80131a0:	e02f      	b.n	8013202 <tcp_write+0x3fe>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 80131a2:	8a7b      	ldrh	r3, [r7, #18]
 80131a4:	2b00      	cmp	r3, #0
 80131a6:	d006      	beq.n	80131b6 <tcp_write+0x3b2>
 80131a8:	4b80      	ldr	r3, [pc, #512]	; (80133ac <tcp_write+0x5a8>)
 80131aa:	f240 2271 	movw	r2, #625	; 0x271
 80131ae:	4982      	ldr	r1, [pc, #520]	; (80133b8 <tcp_write+0x5b4>)
 80131b0:	4880      	ldr	r0, [pc, #512]	; (80133b4 <tcp_write+0x5b0>)
 80131b2:	f004 fa01 	bl	80175b8 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 80131b6:	8b3b      	ldrh	r3, [r7, #24]
 80131b8:	2201      	movs	r2, #1
 80131ba:	4619      	mov	r1, r3
 80131bc:	2036      	movs	r0, #54	; 0x36
 80131be:	f7fa fd63 	bl	800dc88 <pbuf_alloc>
 80131c2:	6178      	str	r0, [r7, #20]
 80131c4:	697b      	ldr	r3, [r7, #20]
 80131c6:	2b00      	cmp	r3, #0
 80131c8:	f000 814b 	beq.w	8013462 <tcp_write+0x65e>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 80131cc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80131d0:	68ba      	ldr	r2, [r7, #8]
 80131d2:	441a      	add	r2, r3
 80131d4:	697b      	ldr	r3, [r7, #20]
 80131d6:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80131d8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80131dc:	b29b      	uxth	r3, r3
 80131de:	f44f 7220 	mov.w	r2, #640	; 0x280
 80131e2:	4619      	mov	r1, r3
 80131e4:	2036      	movs	r0, #54	; 0x36
 80131e6:	f7fa fd4f 	bl	800dc88 <pbuf_alloc>
 80131ea:	6338      	str	r0, [r7, #48]	; 0x30
 80131ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80131ee:	2b00      	cmp	r3, #0
 80131f0:	d103      	bne.n	80131fa <tcp_write+0x3f6>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 80131f2:	6978      	ldr	r0, [r7, #20]
 80131f4:	f7fb f85a 	bl	800e2ac <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 80131f8:	e136      	b.n	8013468 <tcp_write+0x664>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 80131fa:	6979      	ldr	r1, [r7, #20]
 80131fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80131fe:	f7fb f923 	bl	800e448 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 8013202:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013204:	f7fb f8e0 	bl	800e3c8 <pbuf_clen>
 8013208:	4603      	mov	r3, r0
 801320a:	461a      	mov	r2, r3
 801320c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8013210:	4413      	add	r3, r2
 8013212:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 8013216:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801321a:	2b09      	cmp	r3, #9
 801321c:	d903      	bls.n	8013226 <tcp_write+0x422>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 801321e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013220:	f7fb f844 	bl	800e2ac <pbuf_free>
      goto memerr;
 8013224:	e120      	b.n	8013468 <tcp_write+0x664>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8013226:	68fb      	ldr	r3, [r7, #12]
 8013228:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801322a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801322e:	441a      	add	r2, r3
 8013230:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013234:	9300      	str	r3, [sp, #0]
 8013236:	4613      	mov	r3, r2
 8013238:	2200      	movs	r2, #0
 801323a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801323c:	68f8      	ldr	r0, [r7, #12]
 801323e:	f7ff fc4f 	bl	8012ae0 <tcp_create_segment>
 8013242:	64f8      	str	r0, [r7, #76]	; 0x4c
 8013244:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013246:	2b00      	cmp	r3, #0
 8013248:	f000 810d 	beq.w	8013466 <tcp_write+0x662>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 801324c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801324e:	2b00      	cmp	r3, #0
 8013250:	d102      	bne.n	8013258 <tcp_write+0x454>
      queue = seg;
 8013252:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013254:	647b      	str	r3, [r7, #68]	; 0x44
 8013256:	e00c      	b.n	8013272 <tcp_write+0x46e>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8013258:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801325a:	2b00      	cmp	r3, #0
 801325c:	d106      	bne.n	801326c <tcp_write+0x468>
 801325e:	4b53      	ldr	r3, [pc, #332]	; (80133ac <tcp_write+0x5a8>)
 8013260:	f240 22ab 	movw	r2, #683	; 0x2ab
 8013264:	4955      	ldr	r1, [pc, #340]	; (80133bc <tcp_write+0x5b8>)
 8013266:	4853      	ldr	r0, [pc, #332]	; (80133b4 <tcp_write+0x5b0>)
 8013268:	f004 f9a6 	bl	80175b8 <iprintf>
      prev_seg->next = seg;
 801326c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801326e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8013270:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 8013272:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013274:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 8013276:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801327a:	8b3b      	ldrh	r3, [r7, #24]
 801327c:	4413      	add	r3, r2
 801327e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 8013282:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8013286:	88fb      	ldrh	r3, [r7, #6]
 8013288:	429a      	cmp	r2, r3
 801328a:	f4ff af3d 	bcc.w	8013108 <tcp_write+0x304>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 801328e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8013290:	2b00      	cmp	r3, #0
 8013292:	d02c      	beq.n	80132ee <tcp_write+0x4ea>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8013294:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013296:	685b      	ldr	r3, [r3, #4]
 8013298:	62fb      	str	r3, [r7, #44]	; 0x2c
 801329a:	e01e      	b.n	80132da <tcp_write+0x4d6>
      p->tot_len += oversize_used;
 801329c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801329e:	891a      	ldrh	r2, [r3, #8]
 80132a0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80132a2:	4413      	add	r3, r2
 80132a4:	b29a      	uxth	r2, r3
 80132a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80132a8:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 80132aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80132ac:	681b      	ldr	r3, [r3, #0]
 80132ae:	2b00      	cmp	r3, #0
 80132b0:	d110      	bne.n	80132d4 <tcp_write+0x4d0>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 80132b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80132b4:	685b      	ldr	r3, [r3, #4]
 80132b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80132b8:	8952      	ldrh	r2, [r2, #10]
 80132ba:	4413      	add	r3, r2
 80132bc:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80132be:	68b9      	ldr	r1, [r7, #8]
 80132c0:	4618      	mov	r0, r3
 80132c2:	f004 f966 	bl	8017592 <memcpy>
        p->len += oversize_used;
 80132c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80132c8:	895a      	ldrh	r2, [r3, #10]
 80132ca:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80132cc:	4413      	add	r3, r2
 80132ce:	b29a      	uxth	r2, r3
 80132d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80132d2:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 80132d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80132d6:	681b      	ldr	r3, [r3, #0]
 80132d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80132da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80132dc:	2b00      	cmp	r3, #0
 80132de:	d1dd      	bne.n	801329c <tcp_write+0x498>
      }
    }
    last_unsent->len += oversize_used;
 80132e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80132e2:	891a      	ldrh	r2, [r3, #8]
 80132e4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80132e6:	4413      	add	r3, r2
 80132e8:	b29a      	uxth	r2, r3
 80132ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80132ec:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 80132ee:	8a7a      	ldrh	r2, [r7, #18]
 80132f0:	68fb      	ldr	r3, [r7, #12]
 80132f2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 80132f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80132f8:	2b00      	cmp	r3, #0
 80132fa:	d018      	beq.n	801332e <tcp_write+0x52a>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 80132fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80132fe:	2b00      	cmp	r3, #0
 8013300:	d106      	bne.n	8013310 <tcp_write+0x50c>
 8013302:	4b2a      	ldr	r3, [pc, #168]	; (80133ac <tcp_write+0x5a8>)
 8013304:	f240 22e1 	movw	r2, #737	; 0x2e1
 8013308:	492d      	ldr	r1, [pc, #180]	; (80133c0 <tcp_write+0x5bc>)
 801330a:	482a      	ldr	r0, [pc, #168]	; (80133b4 <tcp_write+0x5b0>)
 801330c:	f004 f954 	bl	80175b8 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8013310:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013312:	685b      	ldr	r3, [r3, #4]
 8013314:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8013316:	4618      	mov	r0, r3
 8013318:	f7fb f896 	bl	800e448 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 801331c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801331e:	891a      	ldrh	r2, [r3, #8]
 8013320:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013322:	891b      	ldrh	r3, [r3, #8]
 8013324:	4413      	add	r3, r2
 8013326:	b29a      	uxth	r2, r3
 8013328:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801332a:	811a      	strh	r2, [r3, #8]
 801332c:	e037      	b.n	801339e <tcp_write+0x59a>
  } else if (extendlen > 0) {
 801332e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8013330:	2b00      	cmp	r3, #0
 8013332:	d034      	beq.n	801339e <tcp_write+0x59a>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8013334:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013336:	2b00      	cmp	r3, #0
 8013338:	d003      	beq.n	8013342 <tcp_write+0x53e>
 801333a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801333c:	685b      	ldr	r3, [r3, #4]
 801333e:	2b00      	cmp	r3, #0
 8013340:	d106      	bne.n	8013350 <tcp_write+0x54c>
 8013342:	4b1a      	ldr	r3, [pc, #104]	; (80133ac <tcp_write+0x5a8>)
 8013344:	f240 22e7 	movw	r2, #743	; 0x2e7
 8013348:	491e      	ldr	r1, [pc, #120]	; (80133c4 <tcp_write+0x5c0>)
 801334a:	481a      	ldr	r0, [pc, #104]	; (80133b4 <tcp_write+0x5b0>)
 801334c:	f004 f934 	bl	80175b8 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8013350:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013352:	685b      	ldr	r3, [r3, #4]
 8013354:	62bb      	str	r3, [r7, #40]	; 0x28
 8013356:	e009      	b.n	801336c <tcp_write+0x568>
      p->tot_len += extendlen;
 8013358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801335a:	891a      	ldrh	r2, [r3, #8]
 801335c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801335e:	4413      	add	r3, r2
 8013360:	b29a      	uxth	r2, r3
 8013362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013364:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8013366:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013368:	681b      	ldr	r3, [r3, #0]
 801336a:	62bb      	str	r3, [r7, #40]	; 0x28
 801336c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801336e:	681b      	ldr	r3, [r3, #0]
 8013370:	2b00      	cmp	r3, #0
 8013372:	d1f1      	bne.n	8013358 <tcp_write+0x554>
    }
    p->tot_len += extendlen;
 8013374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013376:	891a      	ldrh	r2, [r3, #8]
 8013378:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801337a:	4413      	add	r3, r2
 801337c:	b29a      	uxth	r2, r3
 801337e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013380:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 8013382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013384:	895a      	ldrh	r2, [r3, #10]
 8013386:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8013388:	4413      	add	r3, r2
 801338a:	b29a      	uxth	r2, r3
 801338c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801338e:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8013390:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013392:	891a      	ldrh	r2, [r3, #8]
 8013394:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8013396:	4413      	add	r3, r2
 8013398:	b29a      	uxth	r2, r3
 801339a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801339c:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 801339e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80133a0:	2b00      	cmp	r3, #0
 80133a2:	d111      	bne.n	80133c8 <tcp_write+0x5c4>
    pcb->unsent = queue;
 80133a4:	68fb      	ldr	r3, [r7, #12]
 80133a6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80133a8:	66da      	str	r2, [r3, #108]	; 0x6c
 80133aa:	e010      	b.n	80133ce <tcp_write+0x5ca>
 80133ac:	0801a914 	.word	0x0801a914
 80133b0:	0801abb4 	.word	0x0801abb4
 80133b4:	0801a968 	.word	0x0801a968
 80133b8:	0801abf4 	.word	0x0801abf4
 80133bc:	0801ac04 	.word	0x0801ac04
 80133c0:	0801ac18 	.word	0x0801ac18
 80133c4:	0801ac50 	.word	0x0801ac50
  } else {
    last_unsent->next = queue;
 80133c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80133ca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80133cc:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 80133ce:	68fb      	ldr	r3, [r7, #12]
 80133d0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80133d2:	88fb      	ldrh	r3, [r7, #6]
 80133d4:	441a      	add	r2, r3
 80133d6:	68fb      	ldr	r3, [r7, #12]
 80133d8:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 80133da:	68fb      	ldr	r3, [r7, #12]
 80133dc:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 80133e0:	88fb      	ldrh	r3, [r7, #6]
 80133e2:	1ad3      	subs	r3, r2, r3
 80133e4:	b29a      	uxth	r2, r3
 80133e6:	68fb      	ldr	r3, [r7, #12]
 80133e8:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 80133ec:	68fb      	ldr	r3, [r7, #12]
 80133ee:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80133f2:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 80133f6:	68fb      	ldr	r3, [r7, #12]
 80133f8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80133fc:	2b00      	cmp	r3, #0
 80133fe:	d00e      	beq.n	801341e <tcp_write+0x61a>
    LWIP_ASSERT("tcp_write: valid queue length",
 8013400:	68fb      	ldr	r3, [r7, #12]
 8013402:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013404:	2b00      	cmp	r3, #0
 8013406:	d10a      	bne.n	801341e <tcp_write+0x61a>
 8013408:	68fb      	ldr	r3, [r7, #12]
 801340a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801340c:	2b00      	cmp	r3, #0
 801340e:	d106      	bne.n	801341e <tcp_write+0x61a>
 8013410:	4b2c      	ldr	r3, [pc, #176]	; (80134c4 <tcp_write+0x6c0>)
 8013412:	f240 3213 	movw	r2, #787	; 0x313
 8013416:	492c      	ldr	r1, [pc, #176]	; (80134c8 <tcp_write+0x6c4>)
 8013418:	482c      	ldr	r0, [pc, #176]	; (80134cc <tcp_write+0x6c8>)
 801341a:	f004 f8cd 	bl	80175b8 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 801341e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013420:	2b00      	cmp	r3, #0
 8013422:	d016      	beq.n	8013452 <tcp_write+0x64e>
 8013424:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013426:	68db      	ldr	r3, [r3, #12]
 8013428:	2b00      	cmp	r3, #0
 801342a:	d012      	beq.n	8013452 <tcp_write+0x64e>
 801342c:	797b      	ldrb	r3, [r7, #5]
 801342e:	f003 0302 	and.w	r3, r3, #2
 8013432:	2b00      	cmp	r3, #0
 8013434:	d10d      	bne.n	8013452 <tcp_write+0x64e>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8013436:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013438:	68db      	ldr	r3, [r3, #12]
 801343a:	899b      	ldrh	r3, [r3, #12]
 801343c:	b29c      	uxth	r4, r3
 801343e:	2008      	movs	r0, #8
 8013440:	f7f9 fb60 	bl	800cb04 <lwip_htons>
 8013444:	4603      	mov	r3, r0
 8013446:	461a      	mov	r2, r3
 8013448:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801344a:	68db      	ldr	r3, [r3, #12]
 801344c:	4322      	orrs	r2, r4
 801344e:	b292      	uxth	r2, r2
 8013450:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 8013452:	2300      	movs	r3, #0
 8013454:	e031      	b.n	80134ba <tcp_write+0x6b6>
          goto memerr;
 8013456:	bf00      	nop
 8013458:	e006      	b.n	8013468 <tcp_write+0x664>
            goto memerr;
 801345a:	bf00      	nop
 801345c:	e004      	b.n	8013468 <tcp_write+0x664>
        goto memerr;
 801345e:	bf00      	nop
 8013460:	e002      	b.n	8013468 <tcp_write+0x664>
        goto memerr;
 8013462:	bf00      	nop
 8013464:	e000      	b.n	8013468 <tcp_write+0x664>
      goto memerr;
 8013466:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8013468:	68fb      	ldr	r3, [r7, #12]
 801346a:	8b5b      	ldrh	r3, [r3, #26]
 801346c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013470:	b29a      	uxth	r2, r3
 8013472:	68fb      	ldr	r3, [r7, #12]
 8013474:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 8013476:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013478:	2b00      	cmp	r3, #0
 801347a:	d002      	beq.n	8013482 <tcp_write+0x67e>
    pbuf_free(concat_p);
 801347c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801347e:	f7fa ff15 	bl	800e2ac <pbuf_free>
  }
  if (queue != NULL) {
 8013482:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013484:	2b00      	cmp	r3, #0
 8013486:	d002      	beq.n	801348e <tcp_write+0x68a>
    tcp_segs_free(queue);
 8013488:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801348a:	f7fc fb71 	bl	800fb70 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 801348e:	68fb      	ldr	r3, [r7, #12]
 8013490:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013494:	2b00      	cmp	r3, #0
 8013496:	d00e      	beq.n	80134b6 <tcp_write+0x6b2>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8013498:	68fb      	ldr	r3, [r7, #12]
 801349a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801349c:	2b00      	cmp	r3, #0
 801349e:	d10a      	bne.n	80134b6 <tcp_write+0x6b2>
 80134a0:	68fb      	ldr	r3, [r7, #12]
 80134a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80134a4:	2b00      	cmp	r3, #0
 80134a6:	d106      	bne.n	80134b6 <tcp_write+0x6b2>
 80134a8:	4b06      	ldr	r3, [pc, #24]	; (80134c4 <tcp_write+0x6c0>)
 80134aa:	f44f 724a 	mov.w	r2, #808	; 0x328
 80134ae:	4906      	ldr	r1, [pc, #24]	; (80134c8 <tcp_write+0x6c4>)
 80134b0:	4806      	ldr	r0, [pc, #24]	; (80134cc <tcp_write+0x6c8>)
 80134b2:	f004 f881 	bl	80175b8 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 80134b6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80134ba:	4618      	mov	r0, r3
 80134bc:	375c      	adds	r7, #92	; 0x5c
 80134be:	46bd      	mov	sp, r7
 80134c0:	bd90      	pop	{r4, r7, pc}
 80134c2:	bf00      	nop
 80134c4:	0801a914 	.word	0x0801a914
 80134c8:	0801ac88 	.word	0x0801ac88
 80134cc:	0801a968 	.word	0x0801a968

080134d0 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 80134d0:	b590      	push	{r4, r7, lr}
 80134d2:	b08b      	sub	sp, #44	; 0x2c
 80134d4:	af02      	add	r7, sp, #8
 80134d6:	6078      	str	r0, [r7, #4]
 80134d8:	460b      	mov	r3, r1
 80134da:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 80134dc:	2300      	movs	r3, #0
 80134de:	61fb      	str	r3, [r7, #28]
 80134e0:	2300      	movs	r3, #0
 80134e2:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 80134e4:	2300      	movs	r3, #0
 80134e6:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 80134e8:	687b      	ldr	r3, [r7, #4]
 80134ea:	2b00      	cmp	r3, #0
 80134ec:	d106      	bne.n	80134fc <tcp_split_unsent_seg+0x2c>
 80134ee:	4b95      	ldr	r3, [pc, #596]	; (8013744 <tcp_split_unsent_seg+0x274>)
 80134f0:	f240 324b 	movw	r2, #843	; 0x34b
 80134f4:	4994      	ldr	r1, [pc, #592]	; (8013748 <tcp_split_unsent_seg+0x278>)
 80134f6:	4895      	ldr	r0, [pc, #596]	; (801374c <tcp_split_unsent_seg+0x27c>)
 80134f8:	f004 f85e 	bl	80175b8 <iprintf>

  useg = pcb->unsent;
 80134fc:	687b      	ldr	r3, [r7, #4]
 80134fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013500:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8013502:	697b      	ldr	r3, [r7, #20]
 8013504:	2b00      	cmp	r3, #0
 8013506:	d102      	bne.n	801350e <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8013508:	f04f 33ff 	mov.w	r3, #4294967295
 801350c:	e116      	b.n	801373c <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 801350e:	887b      	ldrh	r3, [r7, #2]
 8013510:	2b00      	cmp	r3, #0
 8013512:	d109      	bne.n	8013528 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8013514:	4b8b      	ldr	r3, [pc, #556]	; (8013744 <tcp_split_unsent_seg+0x274>)
 8013516:	f240 3253 	movw	r2, #851	; 0x353
 801351a:	498d      	ldr	r1, [pc, #564]	; (8013750 <tcp_split_unsent_seg+0x280>)
 801351c:	488b      	ldr	r0, [pc, #556]	; (801374c <tcp_split_unsent_seg+0x27c>)
 801351e:	f004 f84b 	bl	80175b8 <iprintf>
    return ERR_VAL;
 8013522:	f06f 0305 	mvn.w	r3, #5
 8013526:	e109      	b.n	801373c <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8013528:	697b      	ldr	r3, [r7, #20]
 801352a:	891b      	ldrh	r3, [r3, #8]
 801352c:	887a      	ldrh	r2, [r7, #2]
 801352e:	429a      	cmp	r2, r3
 8013530:	d301      	bcc.n	8013536 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8013532:	2300      	movs	r3, #0
 8013534:	e102      	b.n	801373c <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8013536:	687b      	ldr	r3, [r7, #4]
 8013538:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801353a:	887a      	ldrh	r2, [r7, #2]
 801353c:	429a      	cmp	r2, r3
 801353e:	d906      	bls.n	801354e <tcp_split_unsent_seg+0x7e>
 8013540:	4b80      	ldr	r3, [pc, #512]	; (8013744 <tcp_split_unsent_seg+0x274>)
 8013542:	f240 325b 	movw	r2, #859	; 0x35b
 8013546:	4983      	ldr	r1, [pc, #524]	; (8013754 <tcp_split_unsent_seg+0x284>)
 8013548:	4880      	ldr	r0, [pc, #512]	; (801374c <tcp_split_unsent_seg+0x27c>)
 801354a:	f004 f835 	bl	80175b8 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 801354e:	697b      	ldr	r3, [r7, #20]
 8013550:	891b      	ldrh	r3, [r3, #8]
 8013552:	2b00      	cmp	r3, #0
 8013554:	d106      	bne.n	8013564 <tcp_split_unsent_seg+0x94>
 8013556:	4b7b      	ldr	r3, [pc, #492]	; (8013744 <tcp_split_unsent_seg+0x274>)
 8013558:	f44f 7257 	mov.w	r2, #860	; 0x35c
 801355c:	497e      	ldr	r1, [pc, #504]	; (8013758 <tcp_split_unsent_seg+0x288>)
 801355e:	487b      	ldr	r0, [pc, #492]	; (801374c <tcp_split_unsent_seg+0x27c>)
 8013560:	f004 f82a 	bl	80175b8 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8013564:	697b      	ldr	r3, [r7, #20]
 8013566:	7a9b      	ldrb	r3, [r3, #10]
 8013568:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801356a:	7bfb      	ldrb	r3, [r7, #15]
 801356c:	009b      	lsls	r3, r3, #2
 801356e:	b2db      	uxtb	r3, r3
 8013570:	f003 0304 	and.w	r3, r3, #4
 8013574:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8013576:	697b      	ldr	r3, [r7, #20]
 8013578:	891a      	ldrh	r2, [r3, #8]
 801357a:	887b      	ldrh	r3, [r7, #2]
 801357c:	1ad3      	subs	r3, r2, r3
 801357e:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8013580:	7bbb      	ldrb	r3, [r7, #14]
 8013582:	b29a      	uxth	r2, r3
 8013584:	89bb      	ldrh	r3, [r7, #12]
 8013586:	4413      	add	r3, r2
 8013588:	b29b      	uxth	r3, r3
 801358a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801358e:	4619      	mov	r1, r3
 8013590:	2036      	movs	r0, #54	; 0x36
 8013592:	f7fa fb79 	bl	800dc88 <pbuf_alloc>
 8013596:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8013598:	693b      	ldr	r3, [r7, #16]
 801359a:	2b00      	cmp	r3, #0
 801359c:	f000 80b7 	beq.w	801370e <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 80135a0:	697b      	ldr	r3, [r7, #20]
 80135a2:	685b      	ldr	r3, [r3, #4]
 80135a4:	891a      	ldrh	r2, [r3, #8]
 80135a6:	697b      	ldr	r3, [r7, #20]
 80135a8:	891b      	ldrh	r3, [r3, #8]
 80135aa:	1ad3      	subs	r3, r2, r3
 80135ac:	b29a      	uxth	r2, r3
 80135ae:	887b      	ldrh	r3, [r7, #2]
 80135b0:	4413      	add	r3, r2
 80135b2:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 80135b4:	697b      	ldr	r3, [r7, #20]
 80135b6:	6858      	ldr	r0, [r3, #4]
 80135b8:	693b      	ldr	r3, [r7, #16]
 80135ba:	685a      	ldr	r2, [r3, #4]
 80135bc:	7bbb      	ldrb	r3, [r7, #14]
 80135be:	18d1      	adds	r1, r2, r3
 80135c0:	897b      	ldrh	r3, [r7, #10]
 80135c2:	89ba      	ldrh	r2, [r7, #12]
 80135c4:	f7fb f868 	bl	800e698 <pbuf_copy_partial>
 80135c8:	4603      	mov	r3, r0
 80135ca:	461a      	mov	r2, r3
 80135cc:	89bb      	ldrh	r3, [r7, #12]
 80135ce:	4293      	cmp	r3, r2
 80135d0:	f040 809f 	bne.w	8013712 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 80135d4:	697b      	ldr	r3, [r7, #20]
 80135d6:	68db      	ldr	r3, [r3, #12]
 80135d8:	899b      	ldrh	r3, [r3, #12]
 80135da:	b29b      	uxth	r3, r3
 80135dc:	4618      	mov	r0, r3
 80135de:	f7f9 fa91 	bl	800cb04 <lwip_htons>
 80135e2:	4603      	mov	r3, r0
 80135e4:	b2db      	uxtb	r3, r3
 80135e6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80135ea:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 80135ec:	2300      	movs	r3, #0
 80135ee:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 80135f0:	7efb      	ldrb	r3, [r7, #27]
 80135f2:	f003 0308 	and.w	r3, r3, #8
 80135f6:	2b00      	cmp	r3, #0
 80135f8:	d007      	beq.n	801360a <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 80135fa:	7efb      	ldrb	r3, [r7, #27]
 80135fc:	f023 0308 	bic.w	r3, r3, #8
 8013600:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8013602:	7ebb      	ldrb	r3, [r7, #26]
 8013604:	f043 0308 	orr.w	r3, r3, #8
 8013608:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 801360a:	7efb      	ldrb	r3, [r7, #27]
 801360c:	f003 0301 	and.w	r3, r3, #1
 8013610:	2b00      	cmp	r3, #0
 8013612:	d007      	beq.n	8013624 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8013614:	7efb      	ldrb	r3, [r7, #27]
 8013616:	f023 0301 	bic.w	r3, r3, #1
 801361a:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 801361c:	7ebb      	ldrb	r3, [r7, #26]
 801361e:	f043 0301 	orr.w	r3, r3, #1
 8013622:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8013624:	697b      	ldr	r3, [r7, #20]
 8013626:	68db      	ldr	r3, [r3, #12]
 8013628:	685b      	ldr	r3, [r3, #4]
 801362a:	4618      	mov	r0, r3
 801362c:	f7f9 fa7f 	bl	800cb2e <lwip_htonl>
 8013630:	4602      	mov	r2, r0
 8013632:	887b      	ldrh	r3, [r7, #2]
 8013634:	18d1      	adds	r1, r2, r3
 8013636:	7eba      	ldrb	r2, [r7, #26]
 8013638:	7bfb      	ldrb	r3, [r7, #15]
 801363a:	9300      	str	r3, [sp, #0]
 801363c:	460b      	mov	r3, r1
 801363e:	6939      	ldr	r1, [r7, #16]
 8013640:	6878      	ldr	r0, [r7, #4]
 8013642:	f7ff fa4d 	bl	8012ae0 <tcp_create_segment>
 8013646:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8013648:	69fb      	ldr	r3, [r7, #28]
 801364a:	2b00      	cmp	r3, #0
 801364c:	d063      	beq.n	8013716 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 801364e:	697b      	ldr	r3, [r7, #20]
 8013650:	685b      	ldr	r3, [r3, #4]
 8013652:	4618      	mov	r0, r3
 8013654:	f7fa feb8 	bl	800e3c8 <pbuf_clen>
 8013658:	4603      	mov	r3, r0
 801365a:	461a      	mov	r2, r3
 801365c:	687b      	ldr	r3, [r7, #4]
 801365e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013662:	1a9b      	subs	r3, r3, r2
 8013664:	b29a      	uxth	r2, r3
 8013666:	687b      	ldr	r3, [r7, #4]
 8013668:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 801366c:	697b      	ldr	r3, [r7, #20]
 801366e:	6858      	ldr	r0, [r3, #4]
 8013670:	697b      	ldr	r3, [r7, #20]
 8013672:	685b      	ldr	r3, [r3, #4]
 8013674:	891a      	ldrh	r2, [r3, #8]
 8013676:	89bb      	ldrh	r3, [r7, #12]
 8013678:	1ad3      	subs	r3, r2, r3
 801367a:	b29b      	uxth	r3, r3
 801367c:	4619      	mov	r1, r3
 801367e:	f7fa fc5d 	bl	800df3c <pbuf_realloc>
  useg->len -= remainder;
 8013682:	697b      	ldr	r3, [r7, #20]
 8013684:	891a      	ldrh	r2, [r3, #8]
 8013686:	89bb      	ldrh	r3, [r7, #12]
 8013688:	1ad3      	subs	r3, r2, r3
 801368a:	b29a      	uxth	r2, r3
 801368c:	697b      	ldr	r3, [r7, #20]
 801368e:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8013690:	697b      	ldr	r3, [r7, #20]
 8013692:	68db      	ldr	r3, [r3, #12]
 8013694:	899b      	ldrh	r3, [r3, #12]
 8013696:	b29c      	uxth	r4, r3
 8013698:	7efb      	ldrb	r3, [r7, #27]
 801369a:	b29b      	uxth	r3, r3
 801369c:	4618      	mov	r0, r3
 801369e:	f7f9 fa31 	bl	800cb04 <lwip_htons>
 80136a2:	4603      	mov	r3, r0
 80136a4:	461a      	mov	r2, r3
 80136a6:	697b      	ldr	r3, [r7, #20]
 80136a8:	68db      	ldr	r3, [r3, #12]
 80136aa:	4322      	orrs	r2, r4
 80136ac:	b292      	uxth	r2, r2
 80136ae:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 80136b0:	697b      	ldr	r3, [r7, #20]
 80136b2:	685b      	ldr	r3, [r3, #4]
 80136b4:	4618      	mov	r0, r3
 80136b6:	f7fa fe87 	bl	800e3c8 <pbuf_clen>
 80136ba:	4603      	mov	r3, r0
 80136bc:	461a      	mov	r2, r3
 80136be:	687b      	ldr	r3, [r7, #4]
 80136c0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80136c4:	4413      	add	r3, r2
 80136c6:	b29a      	uxth	r2, r3
 80136c8:	687b      	ldr	r3, [r7, #4]
 80136ca:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80136ce:	69fb      	ldr	r3, [r7, #28]
 80136d0:	685b      	ldr	r3, [r3, #4]
 80136d2:	4618      	mov	r0, r3
 80136d4:	f7fa fe78 	bl	800e3c8 <pbuf_clen>
 80136d8:	4603      	mov	r3, r0
 80136da:	461a      	mov	r2, r3
 80136dc:	687b      	ldr	r3, [r7, #4]
 80136de:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80136e2:	4413      	add	r3, r2
 80136e4:	b29a      	uxth	r2, r3
 80136e6:	687b      	ldr	r3, [r7, #4]
 80136e8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 80136ec:	697b      	ldr	r3, [r7, #20]
 80136ee:	681a      	ldr	r2, [r3, #0]
 80136f0:	69fb      	ldr	r3, [r7, #28]
 80136f2:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 80136f4:	697b      	ldr	r3, [r7, #20]
 80136f6:	69fa      	ldr	r2, [r7, #28]
 80136f8:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 80136fa:	69fb      	ldr	r3, [r7, #28]
 80136fc:	681b      	ldr	r3, [r3, #0]
 80136fe:	2b00      	cmp	r3, #0
 8013700:	d103      	bne.n	801370a <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8013702:	687b      	ldr	r3, [r7, #4]
 8013704:	2200      	movs	r2, #0
 8013706:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 801370a:	2300      	movs	r3, #0
 801370c:	e016      	b.n	801373c <tcp_split_unsent_seg+0x26c>
    goto memerr;
 801370e:	bf00      	nop
 8013710:	e002      	b.n	8013718 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8013712:	bf00      	nop
 8013714:	e000      	b.n	8013718 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8013716:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8013718:	69fb      	ldr	r3, [r7, #28]
 801371a:	2b00      	cmp	r3, #0
 801371c:	d006      	beq.n	801372c <tcp_split_unsent_seg+0x25c>
 801371e:	4b09      	ldr	r3, [pc, #36]	; (8013744 <tcp_split_unsent_seg+0x274>)
 8013720:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8013724:	490d      	ldr	r1, [pc, #52]	; (801375c <tcp_split_unsent_seg+0x28c>)
 8013726:	4809      	ldr	r0, [pc, #36]	; (801374c <tcp_split_unsent_seg+0x27c>)
 8013728:	f003 ff46 	bl	80175b8 <iprintf>
  if (p != NULL) {
 801372c:	693b      	ldr	r3, [r7, #16]
 801372e:	2b00      	cmp	r3, #0
 8013730:	d002      	beq.n	8013738 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8013732:	6938      	ldr	r0, [r7, #16]
 8013734:	f7fa fdba 	bl	800e2ac <pbuf_free>
  }

  return ERR_MEM;
 8013738:	f04f 33ff 	mov.w	r3, #4294967295
}
 801373c:	4618      	mov	r0, r3
 801373e:	3724      	adds	r7, #36	; 0x24
 8013740:	46bd      	mov	sp, r7
 8013742:	bd90      	pop	{r4, r7, pc}
 8013744:	0801a914 	.word	0x0801a914
 8013748:	0801aca8 	.word	0x0801aca8
 801374c:	0801a968 	.word	0x0801a968
 8013750:	0801accc 	.word	0x0801accc
 8013754:	0801acf0 	.word	0x0801acf0
 8013758:	0801ad00 	.word	0x0801ad00
 801375c:	0801ad10 	.word	0x0801ad10

08013760 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8013760:	b590      	push	{r4, r7, lr}
 8013762:	b085      	sub	sp, #20
 8013764:	af00      	add	r7, sp, #0
 8013766:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8013768:	687b      	ldr	r3, [r7, #4]
 801376a:	2b00      	cmp	r3, #0
 801376c:	d106      	bne.n	801377c <tcp_send_fin+0x1c>
 801376e:	4b21      	ldr	r3, [pc, #132]	; (80137f4 <tcp_send_fin+0x94>)
 8013770:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8013774:	4920      	ldr	r1, [pc, #128]	; (80137f8 <tcp_send_fin+0x98>)
 8013776:	4821      	ldr	r0, [pc, #132]	; (80137fc <tcp_send_fin+0x9c>)
 8013778:	f003 ff1e 	bl	80175b8 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 801377c:	687b      	ldr	r3, [r7, #4]
 801377e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013780:	2b00      	cmp	r3, #0
 8013782:	d02e      	beq.n	80137e2 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8013784:	687b      	ldr	r3, [r7, #4]
 8013786:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013788:	60fb      	str	r3, [r7, #12]
 801378a:	e002      	b.n	8013792 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 801378c:	68fb      	ldr	r3, [r7, #12]
 801378e:	681b      	ldr	r3, [r3, #0]
 8013790:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8013792:	68fb      	ldr	r3, [r7, #12]
 8013794:	681b      	ldr	r3, [r3, #0]
 8013796:	2b00      	cmp	r3, #0
 8013798:	d1f8      	bne.n	801378c <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 801379a:	68fb      	ldr	r3, [r7, #12]
 801379c:	68db      	ldr	r3, [r3, #12]
 801379e:	899b      	ldrh	r3, [r3, #12]
 80137a0:	b29b      	uxth	r3, r3
 80137a2:	4618      	mov	r0, r3
 80137a4:	f7f9 f9ae 	bl	800cb04 <lwip_htons>
 80137a8:	4603      	mov	r3, r0
 80137aa:	b2db      	uxtb	r3, r3
 80137ac:	f003 0307 	and.w	r3, r3, #7
 80137b0:	2b00      	cmp	r3, #0
 80137b2:	d116      	bne.n	80137e2 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 80137b4:	68fb      	ldr	r3, [r7, #12]
 80137b6:	68db      	ldr	r3, [r3, #12]
 80137b8:	899b      	ldrh	r3, [r3, #12]
 80137ba:	b29c      	uxth	r4, r3
 80137bc:	2001      	movs	r0, #1
 80137be:	f7f9 f9a1 	bl	800cb04 <lwip_htons>
 80137c2:	4603      	mov	r3, r0
 80137c4:	461a      	mov	r2, r3
 80137c6:	68fb      	ldr	r3, [r7, #12]
 80137c8:	68db      	ldr	r3, [r3, #12]
 80137ca:	4322      	orrs	r2, r4
 80137cc:	b292      	uxth	r2, r2
 80137ce:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 80137d0:	687b      	ldr	r3, [r7, #4]
 80137d2:	8b5b      	ldrh	r3, [r3, #26]
 80137d4:	f043 0320 	orr.w	r3, r3, #32
 80137d8:	b29a      	uxth	r2, r3
 80137da:	687b      	ldr	r3, [r7, #4]
 80137dc:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 80137de:	2300      	movs	r3, #0
 80137e0:	e004      	b.n	80137ec <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 80137e2:	2101      	movs	r1, #1
 80137e4:	6878      	ldr	r0, [r7, #4]
 80137e6:	f000 f80b 	bl	8013800 <tcp_enqueue_flags>
 80137ea:	4603      	mov	r3, r0
}
 80137ec:	4618      	mov	r0, r3
 80137ee:	3714      	adds	r7, #20
 80137f0:	46bd      	mov	sp, r7
 80137f2:	bd90      	pop	{r4, r7, pc}
 80137f4:	0801a914 	.word	0x0801a914
 80137f8:	0801ad1c 	.word	0x0801ad1c
 80137fc:	0801a968 	.word	0x0801a968

08013800 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8013800:	b580      	push	{r7, lr}
 8013802:	b08a      	sub	sp, #40	; 0x28
 8013804:	af02      	add	r7, sp, #8
 8013806:	6078      	str	r0, [r7, #4]
 8013808:	460b      	mov	r3, r1
 801380a:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 801380c:	2300      	movs	r3, #0
 801380e:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8013810:	2300      	movs	r3, #0
 8013812:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8013814:	78fb      	ldrb	r3, [r7, #3]
 8013816:	f003 0303 	and.w	r3, r3, #3
 801381a:	2b00      	cmp	r3, #0
 801381c:	d106      	bne.n	801382c <tcp_enqueue_flags+0x2c>
 801381e:	4b67      	ldr	r3, [pc, #412]	; (80139bc <tcp_enqueue_flags+0x1bc>)
 8013820:	f240 4212 	movw	r2, #1042	; 0x412
 8013824:	4966      	ldr	r1, [pc, #408]	; (80139c0 <tcp_enqueue_flags+0x1c0>)
 8013826:	4867      	ldr	r0, [pc, #412]	; (80139c4 <tcp_enqueue_flags+0x1c4>)
 8013828:	f003 fec6 	bl	80175b8 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 801382c:	687b      	ldr	r3, [r7, #4]
 801382e:	2b00      	cmp	r3, #0
 8013830:	d106      	bne.n	8013840 <tcp_enqueue_flags+0x40>
 8013832:	4b62      	ldr	r3, [pc, #392]	; (80139bc <tcp_enqueue_flags+0x1bc>)
 8013834:	f240 4213 	movw	r2, #1043	; 0x413
 8013838:	4963      	ldr	r1, [pc, #396]	; (80139c8 <tcp_enqueue_flags+0x1c8>)
 801383a:	4862      	ldr	r0, [pc, #392]	; (80139c4 <tcp_enqueue_flags+0x1c4>)
 801383c:	f003 febc 	bl	80175b8 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8013840:	78fb      	ldrb	r3, [r7, #3]
 8013842:	f003 0302 	and.w	r3, r3, #2
 8013846:	2b00      	cmp	r3, #0
 8013848:	d001      	beq.n	801384e <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 801384a:	2301      	movs	r3, #1
 801384c:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801384e:	7ffb      	ldrb	r3, [r7, #31]
 8013850:	009b      	lsls	r3, r3, #2
 8013852:	b2db      	uxtb	r3, r3
 8013854:	f003 0304 	and.w	r3, r3, #4
 8013858:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801385a:	7dfb      	ldrb	r3, [r7, #23]
 801385c:	b29b      	uxth	r3, r3
 801385e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013862:	4619      	mov	r1, r3
 8013864:	2036      	movs	r0, #54	; 0x36
 8013866:	f7fa fa0f 	bl	800dc88 <pbuf_alloc>
 801386a:	6138      	str	r0, [r7, #16]
 801386c:	693b      	ldr	r3, [r7, #16]
 801386e:	2b00      	cmp	r3, #0
 8013870:	d109      	bne.n	8013886 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8013872:	687b      	ldr	r3, [r7, #4]
 8013874:	8b5b      	ldrh	r3, [r3, #26]
 8013876:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801387a:	b29a      	uxth	r2, r3
 801387c:	687b      	ldr	r3, [r7, #4]
 801387e:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8013880:	f04f 33ff 	mov.w	r3, #4294967295
 8013884:	e095      	b.n	80139b2 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8013886:	693b      	ldr	r3, [r7, #16]
 8013888:	895a      	ldrh	r2, [r3, #10]
 801388a:	7dfb      	ldrb	r3, [r7, #23]
 801388c:	b29b      	uxth	r3, r3
 801388e:	429a      	cmp	r2, r3
 8013890:	d206      	bcs.n	80138a0 <tcp_enqueue_flags+0xa0>
 8013892:	4b4a      	ldr	r3, [pc, #296]	; (80139bc <tcp_enqueue_flags+0x1bc>)
 8013894:	f240 423a 	movw	r2, #1082	; 0x43a
 8013898:	494c      	ldr	r1, [pc, #304]	; (80139cc <tcp_enqueue_flags+0x1cc>)
 801389a:	484a      	ldr	r0, [pc, #296]	; (80139c4 <tcp_enqueue_flags+0x1c4>)
 801389c:	f003 fe8c 	bl	80175b8 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 80138a0:	687b      	ldr	r3, [r7, #4]
 80138a2:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 80138a4:	78fa      	ldrb	r2, [r7, #3]
 80138a6:	7ffb      	ldrb	r3, [r7, #31]
 80138a8:	9300      	str	r3, [sp, #0]
 80138aa:	460b      	mov	r3, r1
 80138ac:	6939      	ldr	r1, [r7, #16]
 80138ae:	6878      	ldr	r0, [r7, #4]
 80138b0:	f7ff f916 	bl	8012ae0 <tcp_create_segment>
 80138b4:	60f8      	str	r0, [r7, #12]
 80138b6:	68fb      	ldr	r3, [r7, #12]
 80138b8:	2b00      	cmp	r3, #0
 80138ba:	d109      	bne.n	80138d0 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80138bc:	687b      	ldr	r3, [r7, #4]
 80138be:	8b5b      	ldrh	r3, [r3, #26]
 80138c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80138c4:	b29a      	uxth	r2, r3
 80138c6:	687b      	ldr	r3, [r7, #4]
 80138c8:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80138ca:	f04f 33ff 	mov.w	r3, #4294967295
 80138ce:	e070      	b.n	80139b2 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 80138d0:	68fb      	ldr	r3, [r7, #12]
 80138d2:	68db      	ldr	r3, [r3, #12]
 80138d4:	f003 0303 	and.w	r3, r3, #3
 80138d8:	2b00      	cmp	r3, #0
 80138da:	d006      	beq.n	80138ea <tcp_enqueue_flags+0xea>
 80138dc:	4b37      	ldr	r3, [pc, #220]	; (80139bc <tcp_enqueue_flags+0x1bc>)
 80138de:	f240 4242 	movw	r2, #1090	; 0x442
 80138e2:	493b      	ldr	r1, [pc, #236]	; (80139d0 <tcp_enqueue_flags+0x1d0>)
 80138e4:	4837      	ldr	r0, [pc, #220]	; (80139c4 <tcp_enqueue_flags+0x1c4>)
 80138e6:	f003 fe67 	bl	80175b8 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 80138ea:	68fb      	ldr	r3, [r7, #12]
 80138ec:	891b      	ldrh	r3, [r3, #8]
 80138ee:	2b00      	cmp	r3, #0
 80138f0:	d006      	beq.n	8013900 <tcp_enqueue_flags+0x100>
 80138f2:	4b32      	ldr	r3, [pc, #200]	; (80139bc <tcp_enqueue_flags+0x1bc>)
 80138f4:	f240 4243 	movw	r2, #1091	; 0x443
 80138f8:	4936      	ldr	r1, [pc, #216]	; (80139d4 <tcp_enqueue_flags+0x1d4>)
 80138fa:	4832      	ldr	r0, [pc, #200]	; (80139c4 <tcp_enqueue_flags+0x1c4>)
 80138fc:	f003 fe5c 	bl	80175b8 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8013900:	687b      	ldr	r3, [r7, #4]
 8013902:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013904:	2b00      	cmp	r3, #0
 8013906:	d103      	bne.n	8013910 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8013908:	687b      	ldr	r3, [r7, #4]
 801390a:	68fa      	ldr	r2, [r7, #12]
 801390c:	66da      	str	r2, [r3, #108]	; 0x6c
 801390e:	e00d      	b.n	801392c <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8013910:	687b      	ldr	r3, [r7, #4]
 8013912:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013914:	61bb      	str	r3, [r7, #24]
 8013916:	e002      	b.n	801391e <tcp_enqueue_flags+0x11e>
 8013918:	69bb      	ldr	r3, [r7, #24]
 801391a:	681b      	ldr	r3, [r3, #0]
 801391c:	61bb      	str	r3, [r7, #24]
 801391e:	69bb      	ldr	r3, [r7, #24]
 8013920:	681b      	ldr	r3, [r3, #0]
 8013922:	2b00      	cmp	r3, #0
 8013924:	d1f8      	bne.n	8013918 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8013926:	69bb      	ldr	r3, [r7, #24]
 8013928:	68fa      	ldr	r2, [r7, #12]
 801392a:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 801392c:	687b      	ldr	r3, [r7, #4]
 801392e:	2200      	movs	r2, #0
 8013930:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8013934:	78fb      	ldrb	r3, [r7, #3]
 8013936:	f003 0302 	and.w	r3, r3, #2
 801393a:	2b00      	cmp	r3, #0
 801393c:	d104      	bne.n	8013948 <tcp_enqueue_flags+0x148>
 801393e:	78fb      	ldrb	r3, [r7, #3]
 8013940:	f003 0301 	and.w	r3, r3, #1
 8013944:	2b00      	cmp	r3, #0
 8013946:	d004      	beq.n	8013952 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8013948:	687b      	ldr	r3, [r7, #4]
 801394a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801394c:	1c5a      	adds	r2, r3, #1
 801394e:	687b      	ldr	r3, [r7, #4]
 8013950:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8013952:	78fb      	ldrb	r3, [r7, #3]
 8013954:	f003 0301 	and.w	r3, r3, #1
 8013958:	2b00      	cmp	r3, #0
 801395a:	d006      	beq.n	801396a <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 801395c:	687b      	ldr	r3, [r7, #4]
 801395e:	8b5b      	ldrh	r3, [r3, #26]
 8013960:	f043 0320 	orr.w	r3, r3, #32
 8013964:	b29a      	uxth	r2, r3
 8013966:	687b      	ldr	r3, [r7, #4]
 8013968:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801396a:	68fb      	ldr	r3, [r7, #12]
 801396c:	685b      	ldr	r3, [r3, #4]
 801396e:	4618      	mov	r0, r3
 8013970:	f7fa fd2a 	bl	800e3c8 <pbuf_clen>
 8013974:	4603      	mov	r3, r0
 8013976:	461a      	mov	r2, r3
 8013978:	687b      	ldr	r3, [r7, #4]
 801397a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801397e:	4413      	add	r3, r2
 8013980:	b29a      	uxth	r2, r3
 8013982:	687b      	ldr	r3, [r7, #4]
 8013984:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8013988:	687b      	ldr	r3, [r7, #4]
 801398a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801398e:	2b00      	cmp	r3, #0
 8013990:	d00e      	beq.n	80139b0 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8013992:	687b      	ldr	r3, [r7, #4]
 8013994:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013996:	2b00      	cmp	r3, #0
 8013998:	d10a      	bne.n	80139b0 <tcp_enqueue_flags+0x1b0>
 801399a:	687b      	ldr	r3, [r7, #4]
 801399c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801399e:	2b00      	cmp	r3, #0
 80139a0:	d106      	bne.n	80139b0 <tcp_enqueue_flags+0x1b0>
 80139a2:	4b06      	ldr	r3, [pc, #24]	; (80139bc <tcp_enqueue_flags+0x1bc>)
 80139a4:	f240 4266 	movw	r2, #1126	; 0x466
 80139a8:	490b      	ldr	r1, [pc, #44]	; (80139d8 <tcp_enqueue_flags+0x1d8>)
 80139aa:	4806      	ldr	r0, [pc, #24]	; (80139c4 <tcp_enqueue_flags+0x1c4>)
 80139ac:	f003 fe04 	bl	80175b8 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 80139b0:	2300      	movs	r3, #0
}
 80139b2:	4618      	mov	r0, r3
 80139b4:	3720      	adds	r7, #32
 80139b6:	46bd      	mov	sp, r7
 80139b8:	bd80      	pop	{r7, pc}
 80139ba:	bf00      	nop
 80139bc:	0801a914 	.word	0x0801a914
 80139c0:	0801ad38 	.word	0x0801ad38
 80139c4:	0801a968 	.word	0x0801a968
 80139c8:	0801ad90 	.word	0x0801ad90
 80139cc:	0801adb0 	.word	0x0801adb0
 80139d0:	0801adec 	.word	0x0801adec
 80139d4:	0801ae04 	.word	0x0801ae04
 80139d8:	0801ae30 	.word	0x0801ae30

080139dc <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 80139dc:	b5b0      	push	{r4, r5, r7, lr}
 80139de:	b08a      	sub	sp, #40	; 0x28
 80139e0:	af00      	add	r7, sp, #0
 80139e2:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 80139e4:	687b      	ldr	r3, [r7, #4]
 80139e6:	2b00      	cmp	r3, #0
 80139e8:	d106      	bne.n	80139f8 <tcp_output+0x1c>
 80139ea:	4ba0      	ldr	r3, [pc, #640]	; (8013c6c <tcp_output+0x290>)
 80139ec:	f240 42e1 	movw	r2, #1249	; 0x4e1
 80139f0:	499f      	ldr	r1, [pc, #636]	; (8013c70 <tcp_output+0x294>)
 80139f2:	48a0      	ldr	r0, [pc, #640]	; (8013c74 <tcp_output+0x298>)
 80139f4:	f003 fde0 	bl	80175b8 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 80139f8:	687b      	ldr	r3, [r7, #4]
 80139fa:	7d1b      	ldrb	r3, [r3, #20]
 80139fc:	2b01      	cmp	r3, #1
 80139fe:	d106      	bne.n	8013a0e <tcp_output+0x32>
 8013a00:	4b9a      	ldr	r3, [pc, #616]	; (8013c6c <tcp_output+0x290>)
 8013a02:	f240 42e4 	movw	r2, #1252	; 0x4e4
 8013a06:	499c      	ldr	r1, [pc, #624]	; (8013c78 <tcp_output+0x29c>)
 8013a08:	489a      	ldr	r0, [pc, #616]	; (8013c74 <tcp_output+0x298>)
 8013a0a:	f003 fdd5 	bl	80175b8 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8013a0e:	4b9b      	ldr	r3, [pc, #620]	; (8013c7c <tcp_output+0x2a0>)
 8013a10:	681b      	ldr	r3, [r3, #0]
 8013a12:	687a      	ldr	r2, [r7, #4]
 8013a14:	429a      	cmp	r2, r3
 8013a16:	d101      	bne.n	8013a1c <tcp_output+0x40>
    return ERR_OK;
 8013a18:	2300      	movs	r3, #0
 8013a1a:	e1d2      	b.n	8013dc2 <tcp_output+0x3e6>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8013a1c:	687b      	ldr	r3, [r7, #4]
 8013a1e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8013a22:	687b      	ldr	r3, [r7, #4]
 8013a24:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8013a28:	429a      	cmp	r2, r3
 8013a2a:	d203      	bcs.n	8013a34 <tcp_output+0x58>
 8013a2c:	687b      	ldr	r3, [r7, #4]
 8013a2e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8013a32:	e002      	b.n	8013a3a <tcp_output+0x5e>
 8013a34:	687b      	ldr	r3, [r7, #4]
 8013a36:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8013a3a:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8013a3c:	687b      	ldr	r3, [r7, #4]
 8013a3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013a40:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8013a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a44:	2b00      	cmp	r3, #0
 8013a46:	d10b      	bne.n	8013a60 <tcp_output+0x84>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8013a48:	687b      	ldr	r3, [r7, #4]
 8013a4a:	8b5b      	ldrh	r3, [r3, #26]
 8013a4c:	f003 0302 	and.w	r3, r3, #2
 8013a50:	2b00      	cmp	r3, #0
 8013a52:	f000 81a9 	beq.w	8013da8 <tcp_output+0x3cc>
      return tcp_send_empty_ack(pcb);
 8013a56:	6878      	ldr	r0, [r7, #4]
 8013a58:	f000 fdd8 	bl	801460c <tcp_send_empty_ack>
 8013a5c:	4603      	mov	r3, r0
 8013a5e:	e1b0      	b.n	8013dc2 <tcp_output+0x3e6>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8013a60:	6879      	ldr	r1, [r7, #4]
 8013a62:	687b      	ldr	r3, [r7, #4]
 8013a64:	3304      	adds	r3, #4
 8013a66:	461a      	mov	r2, r3
 8013a68:	6878      	ldr	r0, [r7, #4]
 8013a6a:	f7ff f81d 	bl	8012aa8 <tcp_route>
 8013a6e:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8013a70:	697b      	ldr	r3, [r7, #20]
 8013a72:	2b00      	cmp	r3, #0
 8013a74:	d102      	bne.n	8013a7c <tcp_output+0xa0>
    return ERR_RTE;
 8013a76:	f06f 0303 	mvn.w	r3, #3
 8013a7a:	e1a2      	b.n	8013dc2 <tcp_output+0x3e6>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8013a7c:	687b      	ldr	r3, [r7, #4]
 8013a7e:	2b00      	cmp	r3, #0
 8013a80:	d003      	beq.n	8013a8a <tcp_output+0xae>
 8013a82:	687b      	ldr	r3, [r7, #4]
 8013a84:	681b      	ldr	r3, [r3, #0]
 8013a86:	2b00      	cmp	r3, #0
 8013a88:	d111      	bne.n	8013aae <tcp_output+0xd2>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8013a8a:	697b      	ldr	r3, [r7, #20]
 8013a8c:	2b00      	cmp	r3, #0
 8013a8e:	d002      	beq.n	8013a96 <tcp_output+0xba>
 8013a90:	697b      	ldr	r3, [r7, #20]
 8013a92:	3304      	adds	r3, #4
 8013a94:	e000      	b.n	8013a98 <tcp_output+0xbc>
 8013a96:	2300      	movs	r3, #0
 8013a98:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8013a9a:	693b      	ldr	r3, [r7, #16]
 8013a9c:	2b00      	cmp	r3, #0
 8013a9e:	d102      	bne.n	8013aa6 <tcp_output+0xca>
      return ERR_RTE;
 8013aa0:	f06f 0303 	mvn.w	r3, #3
 8013aa4:	e18d      	b.n	8013dc2 <tcp_output+0x3e6>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8013aa6:	693b      	ldr	r3, [r7, #16]
 8013aa8:	681a      	ldr	r2, [r3, #0]
 8013aaa:	687b      	ldr	r3, [r7, #4]
 8013aac:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8013aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ab0:	68db      	ldr	r3, [r3, #12]
 8013ab2:	685b      	ldr	r3, [r3, #4]
 8013ab4:	4618      	mov	r0, r3
 8013ab6:	f7f9 f83a 	bl	800cb2e <lwip_htonl>
 8013aba:	4602      	mov	r2, r0
 8013abc:	687b      	ldr	r3, [r7, #4]
 8013abe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013ac0:	1ad3      	subs	r3, r2, r3
 8013ac2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013ac4:	8912      	ldrh	r2, [r2, #8]
 8013ac6:	4413      	add	r3, r2
 8013ac8:	69ba      	ldr	r2, [r7, #24]
 8013aca:	429a      	cmp	r2, r3
 8013acc:	d227      	bcs.n	8013b1e <tcp_output+0x142>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8013ace:	687b      	ldr	r3, [r7, #4]
 8013ad0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8013ad4:	461a      	mov	r2, r3
 8013ad6:	69bb      	ldr	r3, [r7, #24]
 8013ad8:	4293      	cmp	r3, r2
 8013ada:	d114      	bne.n	8013b06 <tcp_output+0x12a>
 8013adc:	687b      	ldr	r3, [r7, #4]
 8013ade:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013ae0:	2b00      	cmp	r3, #0
 8013ae2:	d110      	bne.n	8013b06 <tcp_output+0x12a>
 8013ae4:	687b      	ldr	r3, [r7, #4]
 8013ae6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8013aea:	2b00      	cmp	r3, #0
 8013aec:	d10b      	bne.n	8013b06 <tcp_output+0x12a>
      pcb->persist_cnt = 0;
 8013aee:	687b      	ldr	r3, [r7, #4]
 8013af0:	2200      	movs	r2, #0
 8013af2:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8013af6:	687b      	ldr	r3, [r7, #4]
 8013af8:	2201      	movs	r2, #1
 8013afa:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8013afe:	687b      	ldr	r3, [r7, #4]
 8013b00:	2200      	movs	r2, #0
 8013b02:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8013b06:	687b      	ldr	r3, [r7, #4]
 8013b08:	8b5b      	ldrh	r3, [r3, #26]
 8013b0a:	f003 0302 	and.w	r3, r3, #2
 8013b0e:	2b00      	cmp	r3, #0
 8013b10:	f000 814c 	beq.w	8013dac <tcp_output+0x3d0>
      return tcp_send_empty_ack(pcb);
 8013b14:	6878      	ldr	r0, [r7, #4]
 8013b16:	f000 fd79 	bl	801460c <tcp_send_empty_ack>
 8013b1a:	4603      	mov	r3, r0
 8013b1c:	e151      	b.n	8013dc2 <tcp_output+0x3e6>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8013b1e:	687b      	ldr	r3, [r7, #4]
 8013b20:	2200      	movs	r2, #0
 8013b22:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8013b26:	687b      	ldr	r3, [r7, #4]
 8013b28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013b2a:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8013b2c:	6a3b      	ldr	r3, [r7, #32]
 8013b2e:	2b00      	cmp	r3, #0
 8013b30:	f000 811b 	beq.w	8013d6a <tcp_output+0x38e>
    for (; useg->next != NULL; useg = useg->next);
 8013b34:	e002      	b.n	8013b3c <tcp_output+0x160>
 8013b36:	6a3b      	ldr	r3, [r7, #32]
 8013b38:	681b      	ldr	r3, [r3, #0]
 8013b3a:	623b      	str	r3, [r7, #32]
 8013b3c:	6a3b      	ldr	r3, [r7, #32]
 8013b3e:	681b      	ldr	r3, [r3, #0]
 8013b40:	2b00      	cmp	r3, #0
 8013b42:	d1f8      	bne.n	8013b36 <tcp_output+0x15a>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8013b44:	e111      	b.n	8013d6a <tcp_output+0x38e>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8013b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b48:	68db      	ldr	r3, [r3, #12]
 8013b4a:	899b      	ldrh	r3, [r3, #12]
 8013b4c:	b29b      	uxth	r3, r3
 8013b4e:	4618      	mov	r0, r3
 8013b50:	f7f8 ffd8 	bl	800cb04 <lwip_htons>
 8013b54:	4603      	mov	r3, r0
 8013b56:	b2db      	uxtb	r3, r3
 8013b58:	f003 0304 	and.w	r3, r3, #4
 8013b5c:	2b00      	cmp	r3, #0
 8013b5e:	d006      	beq.n	8013b6e <tcp_output+0x192>
 8013b60:	4b42      	ldr	r3, [pc, #264]	; (8013c6c <tcp_output+0x290>)
 8013b62:	f240 5237 	movw	r2, #1335	; 0x537
 8013b66:	4946      	ldr	r1, [pc, #280]	; (8013c80 <tcp_output+0x2a4>)
 8013b68:	4842      	ldr	r0, [pc, #264]	; (8013c74 <tcp_output+0x298>)
 8013b6a:	f003 fd25 	bl	80175b8 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8013b6e:	687b      	ldr	r3, [r7, #4]
 8013b70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013b72:	2b00      	cmp	r3, #0
 8013b74:	d01f      	beq.n	8013bb6 <tcp_output+0x1da>
 8013b76:	687b      	ldr	r3, [r7, #4]
 8013b78:	8b5b      	ldrh	r3, [r3, #26]
 8013b7a:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8013b7e:	2b00      	cmp	r3, #0
 8013b80:	d119      	bne.n	8013bb6 <tcp_output+0x1da>
 8013b82:	687b      	ldr	r3, [r7, #4]
 8013b84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013b86:	2b00      	cmp	r3, #0
 8013b88:	d00b      	beq.n	8013ba2 <tcp_output+0x1c6>
 8013b8a:	687b      	ldr	r3, [r7, #4]
 8013b8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013b8e:	681b      	ldr	r3, [r3, #0]
 8013b90:	2b00      	cmp	r3, #0
 8013b92:	d110      	bne.n	8013bb6 <tcp_output+0x1da>
 8013b94:	687b      	ldr	r3, [r7, #4]
 8013b96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013b98:	891a      	ldrh	r2, [r3, #8]
 8013b9a:	687b      	ldr	r3, [r7, #4]
 8013b9c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013b9e:	429a      	cmp	r2, r3
 8013ba0:	d209      	bcs.n	8013bb6 <tcp_output+0x1da>
 8013ba2:	687b      	ldr	r3, [r7, #4]
 8013ba4:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8013ba8:	2b00      	cmp	r3, #0
 8013baa:	d004      	beq.n	8013bb6 <tcp_output+0x1da>
 8013bac:	687b      	ldr	r3, [r7, #4]
 8013bae:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013bb2:	2b08      	cmp	r3, #8
 8013bb4:	d901      	bls.n	8013bba <tcp_output+0x1de>
 8013bb6:	2301      	movs	r3, #1
 8013bb8:	e000      	b.n	8013bbc <tcp_output+0x1e0>
 8013bba:	2300      	movs	r3, #0
 8013bbc:	2b00      	cmp	r3, #0
 8013bbe:	d106      	bne.n	8013bce <tcp_output+0x1f2>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8013bc0:	687b      	ldr	r3, [r7, #4]
 8013bc2:	8b5b      	ldrh	r3, [r3, #26]
 8013bc4:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8013bc8:	2b00      	cmp	r3, #0
 8013bca:	f000 80e3 	beq.w	8013d94 <tcp_output+0x3b8>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8013bce:	687b      	ldr	r3, [r7, #4]
 8013bd0:	7d1b      	ldrb	r3, [r3, #20]
 8013bd2:	2b02      	cmp	r3, #2
 8013bd4:	d00d      	beq.n	8013bf2 <tcp_output+0x216>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8013bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013bd8:	68db      	ldr	r3, [r3, #12]
 8013bda:	899b      	ldrh	r3, [r3, #12]
 8013bdc:	b29c      	uxth	r4, r3
 8013bde:	2010      	movs	r0, #16
 8013be0:	f7f8 ff90 	bl	800cb04 <lwip_htons>
 8013be4:	4603      	mov	r3, r0
 8013be6:	461a      	mov	r2, r3
 8013be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013bea:	68db      	ldr	r3, [r3, #12]
 8013bec:	4322      	orrs	r2, r4
 8013bee:	b292      	uxth	r2, r2
 8013bf0:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8013bf2:	697a      	ldr	r2, [r7, #20]
 8013bf4:	6879      	ldr	r1, [r7, #4]
 8013bf6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013bf8:	f000 f908 	bl	8013e0c <tcp_output_segment>
 8013bfc:	4603      	mov	r3, r0
 8013bfe:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8013c00:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013c04:	2b00      	cmp	r3, #0
 8013c06:	d009      	beq.n	8013c1c <tcp_output+0x240>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8013c08:	687b      	ldr	r3, [r7, #4]
 8013c0a:	8b5b      	ldrh	r3, [r3, #26]
 8013c0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013c10:	b29a      	uxth	r2, r3
 8013c12:	687b      	ldr	r3, [r7, #4]
 8013c14:	835a      	strh	r2, [r3, #26]
      return err;
 8013c16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013c1a:	e0d2      	b.n	8013dc2 <tcp_output+0x3e6>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8013c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c1e:	681a      	ldr	r2, [r3, #0]
 8013c20:	687b      	ldr	r3, [r7, #4]
 8013c22:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8013c24:	687b      	ldr	r3, [r7, #4]
 8013c26:	7d1b      	ldrb	r3, [r3, #20]
 8013c28:	2b02      	cmp	r3, #2
 8013c2a:	d006      	beq.n	8013c3a <tcp_output+0x25e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8013c2c:	687b      	ldr	r3, [r7, #4]
 8013c2e:	8b5b      	ldrh	r3, [r3, #26]
 8013c30:	f023 0303 	bic.w	r3, r3, #3
 8013c34:	b29a      	uxth	r2, r3
 8013c36:	687b      	ldr	r3, [r7, #4]
 8013c38:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8013c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c3c:	68db      	ldr	r3, [r3, #12]
 8013c3e:	685b      	ldr	r3, [r3, #4]
 8013c40:	4618      	mov	r0, r3
 8013c42:	f7f8 ff74 	bl	800cb2e <lwip_htonl>
 8013c46:	4604      	mov	r4, r0
 8013c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c4a:	891b      	ldrh	r3, [r3, #8]
 8013c4c:	461d      	mov	r5, r3
 8013c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c50:	68db      	ldr	r3, [r3, #12]
 8013c52:	899b      	ldrh	r3, [r3, #12]
 8013c54:	b29b      	uxth	r3, r3
 8013c56:	4618      	mov	r0, r3
 8013c58:	f7f8 ff54 	bl	800cb04 <lwip_htons>
 8013c5c:	4603      	mov	r3, r0
 8013c5e:	b2db      	uxtb	r3, r3
 8013c60:	f003 0303 	and.w	r3, r3, #3
 8013c64:	2b00      	cmp	r3, #0
 8013c66:	d00d      	beq.n	8013c84 <tcp_output+0x2a8>
 8013c68:	2301      	movs	r3, #1
 8013c6a:	e00c      	b.n	8013c86 <tcp_output+0x2aa>
 8013c6c:	0801a914 	.word	0x0801a914
 8013c70:	0801ae58 	.word	0x0801ae58
 8013c74:	0801a968 	.word	0x0801a968
 8013c78:	0801ae70 	.word	0x0801ae70
 8013c7c:	2000d29c 	.word	0x2000d29c
 8013c80:	0801ae98 	.word	0x0801ae98
 8013c84:	2300      	movs	r3, #0
 8013c86:	442b      	add	r3, r5
 8013c88:	4423      	add	r3, r4
 8013c8a:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8013c8c:	687b      	ldr	r3, [r7, #4]
 8013c8e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013c90:	68bb      	ldr	r3, [r7, #8]
 8013c92:	1ad3      	subs	r3, r2, r3
 8013c94:	2b00      	cmp	r3, #0
 8013c96:	da02      	bge.n	8013c9e <tcp_output+0x2c2>
      pcb->snd_nxt = snd_nxt;
 8013c98:	687b      	ldr	r3, [r7, #4]
 8013c9a:	68ba      	ldr	r2, [r7, #8]
 8013c9c:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8013c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ca0:	891b      	ldrh	r3, [r3, #8]
 8013ca2:	461c      	mov	r4, r3
 8013ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ca6:	68db      	ldr	r3, [r3, #12]
 8013ca8:	899b      	ldrh	r3, [r3, #12]
 8013caa:	b29b      	uxth	r3, r3
 8013cac:	4618      	mov	r0, r3
 8013cae:	f7f8 ff29 	bl	800cb04 <lwip_htons>
 8013cb2:	4603      	mov	r3, r0
 8013cb4:	b2db      	uxtb	r3, r3
 8013cb6:	f003 0303 	and.w	r3, r3, #3
 8013cba:	2b00      	cmp	r3, #0
 8013cbc:	d001      	beq.n	8013cc2 <tcp_output+0x2e6>
 8013cbe:	2301      	movs	r3, #1
 8013cc0:	e000      	b.n	8013cc4 <tcp_output+0x2e8>
 8013cc2:	2300      	movs	r3, #0
 8013cc4:	4423      	add	r3, r4
 8013cc6:	2b00      	cmp	r3, #0
 8013cc8:	d049      	beq.n	8013d5e <tcp_output+0x382>
      seg->next = NULL;
 8013cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ccc:	2200      	movs	r2, #0
 8013cce:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8013cd0:	687b      	ldr	r3, [r7, #4]
 8013cd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013cd4:	2b00      	cmp	r3, #0
 8013cd6:	d105      	bne.n	8013ce4 <tcp_output+0x308>
        pcb->unacked = seg;
 8013cd8:	687b      	ldr	r3, [r7, #4]
 8013cda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013cdc:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8013cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ce0:	623b      	str	r3, [r7, #32]
 8013ce2:	e03f      	b.n	8013d64 <tcp_output+0x388>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8013ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ce6:	68db      	ldr	r3, [r3, #12]
 8013ce8:	685b      	ldr	r3, [r3, #4]
 8013cea:	4618      	mov	r0, r3
 8013cec:	f7f8 ff1f 	bl	800cb2e <lwip_htonl>
 8013cf0:	4604      	mov	r4, r0
 8013cf2:	6a3b      	ldr	r3, [r7, #32]
 8013cf4:	68db      	ldr	r3, [r3, #12]
 8013cf6:	685b      	ldr	r3, [r3, #4]
 8013cf8:	4618      	mov	r0, r3
 8013cfa:	f7f8 ff18 	bl	800cb2e <lwip_htonl>
 8013cfe:	4603      	mov	r3, r0
 8013d00:	1ae3      	subs	r3, r4, r3
 8013d02:	2b00      	cmp	r3, #0
 8013d04:	da24      	bge.n	8013d50 <tcp_output+0x374>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8013d06:	687b      	ldr	r3, [r7, #4]
 8013d08:	3370      	adds	r3, #112	; 0x70
 8013d0a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8013d0c:	e002      	b.n	8013d14 <tcp_output+0x338>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8013d0e:	69fb      	ldr	r3, [r7, #28]
 8013d10:	681b      	ldr	r3, [r3, #0]
 8013d12:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8013d14:	69fb      	ldr	r3, [r7, #28]
 8013d16:	681b      	ldr	r3, [r3, #0]
 8013d18:	2b00      	cmp	r3, #0
 8013d1a:	d011      	beq.n	8013d40 <tcp_output+0x364>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8013d1c:	69fb      	ldr	r3, [r7, #28]
 8013d1e:	681b      	ldr	r3, [r3, #0]
 8013d20:	68db      	ldr	r3, [r3, #12]
 8013d22:	685b      	ldr	r3, [r3, #4]
 8013d24:	4618      	mov	r0, r3
 8013d26:	f7f8 ff02 	bl	800cb2e <lwip_htonl>
 8013d2a:	4604      	mov	r4, r0
 8013d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d2e:	68db      	ldr	r3, [r3, #12]
 8013d30:	685b      	ldr	r3, [r3, #4]
 8013d32:	4618      	mov	r0, r3
 8013d34:	f7f8 fefb 	bl	800cb2e <lwip_htonl>
 8013d38:	4603      	mov	r3, r0
 8013d3a:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8013d3c:	2b00      	cmp	r3, #0
 8013d3e:	dbe6      	blt.n	8013d0e <tcp_output+0x332>
          }
          seg->next = (*cur_seg);
 8013d40:	69fb      	ldr	r3, [r7, #28]
 8013d42:	681a      	ldr	r2, [r3, #0]
 8013d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d46:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8013d48:	69fb      	ldr	r3, [r7, #28]
 8013d4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013d4c:	601a      	str	r2, [r3, #0]
 8013d4e:	e009      	b.n	8013d64 <tcp_output+0x388>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8013d50:	6a3b      	ldr	r3, [r7, #32]
 8013d52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013d54:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8013d56:	6a3b      	ldr	r3, [r7, #32]
 8013d58:	681b      	ldr	r3, [r3, #0]
 8013d5a:	623b      	str	r3, [r7, #32]
 8013d5c:	e002      	b.n	8013d64 <tcp_output+0x388>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8013d5e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013d60:	f7fb ff1a 	bl	800fb98 <tcp_seg_free>
    }
    seg = pcb->unsent;
 8013d64:	687b      	ldr	r3, [r7, #4]
 8013d66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013d68:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8013d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d6c:	2b00      	cmp	r3, #0
 8013d6e:	d012      	beq.n	8013d96 <tcp_output+0x3ba>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8013d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d72:	68db      	ldr	r3, [r3, #12]
 8013d74:	685b      	ldr	r3, [r3, #4]
 8013d76:	4618      	mov	r0, r3
 8013d78:	f7f8 fed9 	bl	800cb2e <lwip_htonl>
 8013d7c:	4602      	mov	r2, r0
 8013d7e:	687b      	ldr	r3, [r7, #4]
 8013d80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013d82:	1ad3      	subs	r3, r2, r3
 8013d84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013d86:	8912      	ldrh	r2, [r2, #8]
 8013d88:	4413      	add	r3, r2
  while (seg != NULL &&
 8013d8a:	69ba      	ldr	r2, [r7, #24]
 8013d8c:	429a      	cmp	r2, r3
 8013d8e:	f4bf aeda 	bcs.w	8013b46 <tcp_output+0x16a>
 8013d92:	e000      	b.n	8013d96 <tcp_output+0x3ba>
      break;
 8013d94:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8013d96:	687b      	ldr	r3, [r7, #4]
 8013d98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013d9a:	2b00      	cmp	r3, #0
 8013d9c:	d108      	bne.n	8013db0 <tcp_output+0x3d4>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8013d9e:	687b      	ldr	r3, [r7, #4]
 8013da0:	2200      	movs	r2, #0
 8013da2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8013da6:	e004      	b.n	8013db2 <tcp_output+0x3d6>
    goto output_done;
 8013da8:	bf00      	nop
 8013daa:	e002      	b.n	8013db2 <tcp_output+0x3d6>
    goto output_done;
 8013dac:	bf00      	nop
 8013dae:	e000      	b.n	8013db2 <tcp_output+0x3d6>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8013db0:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8013db2:	687b      	ldr	r3, [r7, #4]
 8013db4:	8b5b      	ldrh	r3, [r3, #26]
 8013db6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8013dba:	b29a      	uxth	r2, r3
 8013dbc:	687b      	ldr	r3, [r7, #4]
 8013dbe:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8013dc0:	2300      	movs	r3, #0
}
 8013dc2:	4618      	mov	r0, r3
 8013dc4:	3728      	adds	r7, #40	; 0x28
 8013dc6:	46bd      	mov	sp, r7
 8013dc8:	bdb0      	pop	{r4, r5, r7, pc}
 8013dca:	bf00      	nop

08013dcc <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8013dcc:	b580      	push	{r7, lr}
 8013dce:	b082      	sub	sp, #8
 8013dd0:	af00      	add	r7, sp, #0
 8013dd2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8013dd4:	687b      	ldr	r3, [r7, #4]
 8013dd6:	2b00      	cmp	r3, #0
 8013dd8:	d106      	bne.n	8013de8 <tcp_output_segment_busy+0x1c>
 8013dda:	4b09      	ldr	r3, [pc, #36]	; (8013e00 <tcp_output_segment_busy+0x34>)
 8013ddc:	f240 529a 	movw	r2, #1434	; 0x59a
 8013de0:	4908      	ldr	r1, [pc, #32]	; (8013e04 <tcp_output_segment_busy+0x38>)
 8013de2:	4809      	ldr	r0, [pc, #36]	; (8013e08 <tcp_output_segment_busy+0x3c>)
 8013de4:	f003 fbe8 	bl	80175b8 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8013de8:	687b      	ldr	r3, [r7, #4]
 8013dea:	685b      	ldr	r3, [r3, #4]
 8013dec:	7b9b      	ldrb	r3, [r3, #14]
 8013dee:	2b01      	cmp	r3, #1
 8013df0:	d001      	beq.n	8013df6 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8013df2:	2301      	movs	r3, #1
 8013df4:	e000      	b.n	8013df8 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8013df6:	2300      	movs	r3, #0
}
 8013df8:	4618      	mov	r0, r3
 8013dfa:	3708      	adds	r7, #8
 8013dfc:	46bd      	mov	sp, r7
 8013dfe:	bd80      	pop	{r7, pc}
 8013e00:	0801a914 	.word	0x0801a914
 8013e04:	0801aeb0 	.word	0x0801aeb0
 8013e08:	0801a968 	.word	0x0801a968

08013e0c <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8013e0c:	b5b0      	push	{r4, r5, r7, lr}
 8013e0e:	b08c      	sub	sp, #48	; 0x30
 8013e10:	af04      	add	r7, sp, #16
 8013e12:	60f8      	str	r0, [r7, #12]
 8013e14:	60b9      	str	r1, [r7, #8]
 8013e16:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8013e18:	68fb      	ldr	r3, [r7, #12]
 8013e1a:	2b00      	cmp	r3, #0
 8013e1c:	d106      	bne.n	8013e2c <tcp_output_segment+0x20>
 8013e1e:	4b64      	ldr	r3, [pc, #400]	; (8013fb0 <tcp_output_segment+0x1a4>)
 8013e20:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8013e24:	4963      	ldr	r1, [pc, #396]	; (8013fb4 <tcp_output_segment+0x1a8>)
 8013e26:	4864      	ldr	r0, [pc, #400]	; (8013fb8 <tcp_output_segment+0x1ac>)
 8013e28:	f003 fbc6 	bl	80175b8 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8013e2c:	68bb      	ldr	r3, [r7, #8]
 8013e2e:	2b00      	cmp	r3, #0
 8013e30:	d106      	bne.n	8013e40 <tcp_output_segment+0x34>
 8013e32:	4b5f      	ldr	r3, [pc, #380]	; (8013fb0 <tcp_output_segment+0x1a4>)
 8013e34:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8013e38:	4960      	ldr	r1, [pc, #384]	; (8013fbc <tcp_output_segment+0x1b0>)
 8013e3a:	485f      	ldr	r0, [pc, #380]	; (8013fb8 <tcp_output_segment+0x1ac>)
 8013e3c:	f003 fbbc 	bl	80175b8 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8013e40:	687b      	ldr	r3, [r7, #4]
 8013e42:	2b00      	cmp	r3, #0
 8013e44:	d106      	bne.n	8013e54 <tcp_output_segment+0x48>
 8013e46:	4b5a      	ldr	r3, [pc, #360]	; (8013fb0 <tcp_output_segment+0x1a4>)
 8013e48:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8013e4c:	495c      	ldr	r1, [pc, #368]	; (8013fc0 <tcp_output_segment+0x1b4>)
 8013e4e:	485a      	ldr	r0, [pc, #360]	; (8013fb8 <tcp_output_segment+0x1ac>)
 8013e50:	f003 fbb2 	bl	80175b8 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8013e54:	68f8      	ldr	r0, [r7, #12]
 8013e56:	f7ff ffb9 	bl	8013dcc <tcp_output_segment_busy>
 8013e5a:	4603      	mov	r3, r0
 8013e5c:	2b00      	cmp	r3, #0
 8013e5e:	d001      	beq.n	8013e64 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8013e60:	2300      	movs	r3, #0
 8013e62:	e0a0      	b.n	8013fa6 <tcp_output_segment+0x19a>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8013e64:	68bb      	ldr	r3, [r7, #8]
 8013e66:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013e68:	68fb      	ldr	r3, [r7, #12]
 8013e6a:	68dc      	ldr	r4, [r3, #12]
 8013e6c:	4610      	mov	r0, r2
 8013e6e:	f7f8 fe5e 	bl	800cb2e <lwip_htonl>
 8013e72:	4603      	mov	r3, r0
 8013e74:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8013e76:	68bb      	ldr	r3, [r7, #8]
 8013e78:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8013e7a:	68fb      	ldr	r3, [r7, #12]
 8013e7c:	68dc      	ldr	r4, [r3, #12]
 8013e7e:	4610      	mov	r0, r2
 8013e80:	f7f8 fe40 	bl	800cb04 <lwip_htons>
 8013e84:	4603      	mov	r3, r0
 8013e86:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8013e88:	68bb      	ldr	r3, [r7, #8]
 8013e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013e8c:	68ba      	ldr	r2, [r7, #8]
 8013e8e:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8013e90:	441a      	add	r2, r3
 8013e92:	68bb      	ldr	r3, [r7, #8]
 8013e94:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8013e96:	68fb      	ldr	r3, [r7, #12]
 8013e98:	68db      	ldr	r3, [r3, #12]
 8013e9a:	3314      	adds	r3, #20
 8013e9c:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8013e9e:	68fb      	ldr	r3, [r7, #12]
 8013ea0:	7a9b      	ldrb	r3, [r3, #10]
 8013ea2:	f003 0301 	and.w	r3, r3, #1
 8013ea6:	2b00      	cmp	r3, #0
 8013ea8:	d015      	beq.n	8013ed6 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8013eaa:	68bb      	ldr	r3, [r7, #8]
 8013eac:	3304      	adds	r3, #4
 8013eae:	461a      	mov	r2, r3
 8013eb0:	6879      	ldr	r1, [r7, #4]
 8013eb2:	f44f 7006 	mov.w	r0, #536	; 0x218
 8013eb6:	f7fc fa33 	bl	8010320 <tcp_eff_send_mss_netif>
 8013eba:	4603      	mov	r3, r0
 8013ebc:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8013ebe:	8b7b      	ldrh	r3, [r7, #26]
 8013ec0:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8013ec4:	4618      	mov	r0, r3
 8013ec6:	f7f8 fe32 	bl	800cb2e <lwip_htonl>
 8013eca:	4602      	mov	r2, r0
 8013ecc:	69fb      	ldr	r3, [r7, #28]
 8013ece:	601a      	str	r2, [r3, #0]
    opts += 1;
 8013ed0:	69fb      	ldr	r3, [r7, #28]
 8013ed2:	3304      	adds	r3, #4
 8013ed4:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8013ed6:	68bb      	ldr	r3, [r7, #8]
 8013ed8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8013edc:	2b00      	cmp	r3, #0
 8013ede:	da02      	bge.n	8013ee6 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8013ee0:	68bb      	ldr	r3, [r7, #8]
 8013ee2:	2200      	movs	r2, #0
 8013ee4:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8013ee6:	68bb      	ldr	r3, [r7, #8]
 8013ee8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013eea:	2b00      	cmp	r3, #0
 8013eec:	d10c      	bne.n	8013f08 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8013eee:	4b35      	ldr	r3, [pc, #212]	; (8013fc4 <tcp_output_segment+0x1b8>)
 8013ef0:	681a      	ldr	r2, [r3, #0]
 8013ef2:	68bb      	ldr	r3, [r7, #8]
 8013ef4:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8013ef6:	68fb      	ldr	r3, [r7, #12]
 8013ef8:	68db      	ldr	r3, [r3, #12]
 8013efa:	685b      	ldr	r3, [r3, #4]
 8013efc:	4618      	mov	r0, r3
 8013efe:	f7f8 fe16 	bl	800cb2e <lwip_htonl>
 8013f02:	4602      	mov	r2, r0
 8013f04:	68bb      	ldr	r3, [r7, #8]
 8013f06:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8013f08:	68fb      	ldr	r3, [r7, #12]
 8013f0a:	68db      	ldr	r3, [r3, #12]
 8013f0c:	461a      	mov	r2, r3
 8013f0e:	68fb      	ldr	r3, [r7, #12]
 8013f10:	685b      	ldr	r3, [r3, #4]
 8013f12:	685b      	ldr	r3, [r3, #4]
 8013f14:	1ad3      	subs	r3, r2, r3
 8013f16:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8013f18:	68fb      	ldr	r3, [r7, #12]
 8013f1a:	685b      	ldr	r3, [r3, #4]
 8013f1c:	8959      	ldrh	r1, [r3, #10]
 8013f1e:	68fb      	ldr	r3, [r7, #12]
 8013f20:	685b      	ldr	r3, [r3, #4]
 8013f22:	8b3a      	ldrh	r2, [r7, #24]
 8013f24:	1a8a      	subs	r2, r1, r2
 8013f26:	b292      	uxth	r2, r2
 8013f28:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8013f2a:	68fb      	ldr	r3, [r7, #12]
 8013f2c:	685b      	ldr	r3, [r3, #4]
 8013f2e:	8919      	ldrh	r1, [r3, #8]
 8013f30:	68fb      	ldr	r3, [r7, #12]
 8013f32:	685b      	ldr	r3, [r3, #4]
 8013f34:	8b3a      	ldrh	r2, [r7, #24]
 8013f36:	1a8a      	subs	r2, r1, r2
 8013f38:	b292      	uxth	r2, r2
 8013f3a:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8013f3c:	68fb      	ldr	r3, [r7, #12]
 8013f3e:	685b      	ldr	r3, [r3, #4]
 8013f40:	68fa      	ldr	r2, [r7, #12]
 8013f42:	68d2      	ldr	r2, [r2, #12]
 8013f44:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8013f46:	68fb      	ldr	r3, [r7, #12]
 8013f48:	68db      	ldr	r3, [r3, #12]
 8013f4a:	2200      	movs	r2, #0
 8013f4c:	741a      	strb	r2, [r3, #16]
 8013f4e:	2200      	movs	r2, #0
 8013f50:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8013f52:	68fb      	ldr	r3, [r7, #12]
 8013f54:	68db      	ldr	r3, [r3, #12]
 8013f56:	f103 0214 	add.w	r2, r3, #20
 8013f5a:	68fb      	ldr	r3, [r7, #12]
 8013f5c:	7a9b      	ldrb	r3, [r3, #10]
 8013f5e:	009b      	lsls	r3, r3, #2
 8013f60:	f003 0304 	and.w	r3, r3, #4
 8013f64:	4413      	add	r3, r2
 8013f66:	69fa      	ldr	r2, [r7, #28]
 8013f68:	429a      	cmp	r2, r3
 8013f6a:	d006      	beq.n	8013f7a <tcp_output_segment+0x16e>
 8013f6c:	4b10      	ldr	r3, [pc, #64]	; (8013fb0 <tcp_output_segment+0x1a4>)
 8013f6e:	f240 621c 	movw	r2, #1564	; 0x61c
 8013f72:	4915      	ldr	r1, [pc, #84]	; (8013fc8 <tcp_output_segment+0x1bc>)
 8013f74:	4810      	ldr	r0, [pc, #64]	; (8013fb8 <tcp_output_segment+0x1ac>)
 8013f76:	f003 fb1f 	bl	80175b8 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8013f7a:	68fb      	ldr	r3, [r7, #12]
 8013f7c:	6858      	ldr	r0, [r3, #4]
 8013f7e:	68b9      	ldr	r1, [r7, #8]
 8013f80:	68bb      	ldr	r3, [r7, #8]
 8013f82:	1d1c      	adds	r4, r3, #4
 8013f84:	68bb      	ldr	r3, [r7, #8]
 8013f86:	7add      	ldrb	r5, [r3, #11]
 8013f88:	68bb      	ldr	r3, [r7, #8]
 8013f8a:	7a9b      	ldrb	r3, [r3, #10]
 8013f8c:	687a      	ldr	r2, [r7, #4]
 8013f8e:	9202      	str	r2, [sp, #8]
 8013f90:	2206      	movs	r2, #6
 8013f92:	9201      	str	r2, [sp, #4]
 8013f94:	9300      	str	r3, [sp, #0]
 8013f96:	462b      	mov	r3, r5
 8013f98:	4622      	mov	r2, r4
 8013f9a:	f002 f8ad 	bl	80160f8 <ip4_output_if>
 8013f9e:	4603      	mov	r3, r0
 8013fa0:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8013fa2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8013fa6:	4618      	mov	r0, r3
 8013fa8:	3720      	adds	r7, #32
 8013faa:	46bd      	mov	sp, r7
 8013fac:	bdb0      	pop	{r4, r5, r7, pc}
 8013fae:	bf00      	nop
 8013fb0:	0801a914 	.word	0x0801a914
 8013fb4:	0801aed8 	.word	0x0801aed8
 8013fb8:	0801a968 	.word	0x0801a968
 8013fbc:	0801aef8 	.word	0x0801aef8
 8013fc0:	0801af18 	.word	0x0801af18
 8013fc4:	2000d28c 	.word	0x2000d28c
 8013fc8:	0801af3c 	.word	0x0801af3c

08013fcc <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8013fcc:	b5b0      	push	{r4, r5, r7, lr}
 8013fce:	b084      	sub	sp, #16
 8013fd0:	af00      	add	r7, sp, #0
 8013fd2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8013fd4:	687b      	ldr	r3, [r7, #4]
 8013fd6:	2b00      	cmp	r3, #0
 8013fd8:	d106      	bne.n	8013fe8 <tcp_rexmit_rto_prepare+0x1c>
 8013fda:	4b31      	ldr	r3, [pc, #196]	; (80140a0 <tcp_rexmit_rto_prepare+0xd4>)
 8013fdc:	f240 6263 	movw	r2, #1635	; 0x663
 8013fe0:	4930      	ldr	r1, [pc, #192]	; (80140a4 <tcp_rexmit_rto_prepare+0xd8>)
 8013fe2:	4831      	ldr	r0, [pc, #196]	; (80140a8 <tcp_rexmit_rto_prepare+0xdc>)
 8013fe4:	f003 fae8 	bl	80175b8 <iprintf>

  if (pcb->unacked == NULL) {
 8013fe8:	687b      	ldr	r3, [r7, #4]
 8013fea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013fec:	2b00      	cmp	r3, #0
 8013fee:	d102      	bne.n	8013ff6 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8013ff0:	f06f 0305 	mvn.w	r3, #5
 8013ff4:	e050      	b.n	8014098 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8013ff6:	687b      	ldr	r3, [r7, #4]
 8013ff8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013ffa:	60fb      	str	r3, [r7, #12]
 8013ffc:	e00b      	b.n	8014016 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8013ffe:	68f8      	ldr	r0, [r7, #12]
 8014000:	f7ff fee4 	bl	8013dcc <tcp_output_segment_busy>
 8014004:	4603      	mov	r3, r0
 8014006:	2b00      	cmp	r3, #0
 8014008:	d002      	beq.n	8014010 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 801400a:	f06f 0305 	mvn.w	r3, #5
 801400e:	e043      	b.n	8014098 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8014010:	68fb      	ldr	r3, [r7, #12]
 8014012:	681b      	ldr	r3, [r3, #0]
 8014014:	60fb      	str	r3, [r7, #12]
 8014016:	68fb      	ldr	r3, [r7, #12]
 8014018:	681b      	ldr	r3, [r3, #0]
 801401a:	2b00      	cmp	r3, #0
 801401c:	d1ef      	bne.n	8013ffe <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 801401e:	68f8      	ldr	r0, [r7, #12]
 8014020:	f7ff fed4 	bl	8013dcc <tcp_output_segment_busy>
 8014024:	4603      	mov	r3, r0
 8014026:	2b00      	cmp	r3, #0
 8014028:	d002      	beq.n	8014030 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 801402a:	f06f 0305 	mvn.w	r3, #5
 801402e:	e033      	b.n	8014098 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8014030:	687b      	ldr	r3, [r7, #4]
 8014032:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8014034:	68fb      	ldr	r3, [r7, #12]
 8014036:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8014038:	687b      	ldr	r3, [r7, #4]
 801403a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 801403c:	687b      	ldr	r3, [r7, #4]
 801403e:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8014040:	687b      	ldr	r3, [r7, #4]
 8014042:	2200      	movs	r2, #0
 8014044:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8014046:	687b      	ldr	r3, [r7, #4]
 8014048:	8b5b      	ldrh	r3, [r3, #26]
 801404a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801404e:	b29a      	uxth	r2, r3
 8014050:	687b      	ldr	r3, [r7, #4]
 8014052:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8014054:	68fb      	ldr	r3, [r7, #12]
 8014056:	68db      	ldr	r3, [r3, #12]
 8014058:	685b      	ldr	r3, [r3, #4]
 801405a:	4618      	mov	r0, r3
 801405c:	f7f8 fd67 	bl	800cb2e <lwip_htonl>
 8014060:	4604      	mov	r4, r0
 8014062:	68fb      	ldr	r3, [r7, #12]
 8014064:	891b      	ldrh	r3, [r3, #8]
 8014066:	461d      	mov	r5, r3
 8014068:	68fb      	ldr	r3, [r7, #12]
 801406a:	68db      	ldr	r3, [r3, #12]
 801406c:	899b      	ldrh	r3, [r3, #12]
 801406e:	b29b      	uxth	r3, r3
 8014070:	4618      	mov	r0, r3
 8014072:	f7f8 fd47 	bl	800cb04 <lwip_htons>
 8014076:	4603      	mov	r3, r0
 8014078:	b2db      	uxtb	r3, r3
 801407a:	f003 0303 	and.w	r3, r3, #3
 801407e:	2b00      	cmp	r3, #0
 8014080:	d001      	beq.n	8014086 <tcp_rexmit_rto_prepare+0xba>
 8014082:	2301      	movs	r3, #1
 8014084:	e000      	b.n	8014088 <tcp_rexmit_rto_prepare+0xbc>
 8014086:	2300      	movs	r3, #0
 8014088:	442b      	add	r3, r5
 801408a:	18e2      	adds	r2, r4, r3
 801408c:	687b      	ldr	r3, [r7, #4]
 801408e:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8014090:	687b      	ldr	r3, [r7, #4]
 8014092:	2200      	movs	r2, #0
 8014094:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 8014096:	2300      	movs	r3, #0
}
 8014098:	4618      	mov	r0, r3
 801409a:	3710      	adds	r7, #16
 801409c:	46bd      	mov	sp, r7
 801409e:	bdb0      	pop	{r4, r5, r7, pc}
 80140a0:	0801a914 	.word	0x0801a914
 80140a4:	0801af50 	.word	0x0801af50
 80140a8:	0801a968 	.word	0x0801a968

080140ac <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 80140ac:	b580      	push	{r7, lr}
 80140ae:	b082      	sub	sp, #8
 80140b0:	af00      	add	r7, sp, #0
 80140b2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 80140b4:	687b      	ldr	r3, [r7, #4]
 80140b6:	2b00      	cmp	r3, #0
 80140b8:	d106      	bne.n	80140c8 <tcp_rexmit_rto_commit+0x1c>
 80140ba:	4b0d      	ldr	r3, [pc, #52]	; (80140f0 <tcp_rexmit_rto_commit+0x44>)
 80140bc:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 80140c0:	490c      	ldr	r1, [pc, #48]	; (80140f4 <tcp_rexmit_rto_commit+0x48>)
 80140c2:	480d      	ldr	r0, [pc, #52]	; (80140f8 <tcp_rexmit_rto_commit+0x4c>)
 80140c4:	f003 fa78 	bl	80175b8 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 80140c8:	687b      	ldr	r3, [r7, #4]
 80140ca:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80140ce:	2bff      	cmp	r3, #255	; 0xff
 80140d0:	d007      	beq.n	80140e2 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 80140d2:	687b      	ldr	r3, [r7, #4]
 80140d4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80140d8:	3301      	adds	r3, #1
 80140da:	b2da      	uxtb	r2, r3
 80140dc:	687b      	ldr	r3, [r7, #4]
 80140de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 80140e2:	6878      	ldr	r0, [r7, #4]
 80140e4:	f7ff fc7a 	bl	80139dc <tcp_output>
}
 80140e8:	bf00      	nop
 80140ea:	3708      	adds	r7, #8
 80140ec:	46bd      	mov	sp, r7
 80140ee:	bd80      	pop	{r7, pc}
 80140f0:	0801a914 	.word	0x0801a914
 80140f4:	0801af74 	.word	0x0801af74
 80140f8:	0801a968 	.word	0x0801a968

080140fc <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 80140fc:	b580      	push	{r7, lr}
 80140fe:	b082      	sub	sp, #8
 8014100:	af00      	add	r7, sp, #0
 8014102:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8014104:	687b      	ldr	r3, [r7, #4]
 8014106:	2b00      	cmp	r3, #0
 8014108:	d106      	bne.n	8014118 <tcp_rexmit_rto+0x1c>
 801410a:	4b0a      	ldr	r3, [pc, #40]	; (8014134 <tcp_rexmit_rto+0x38>)
 801410c:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8014110:	4909      	ldr	r1, [pc, #36]	; (8014138 <tcp_rexmit_rto+0x3c>)
 8014112:	480a      	ldr	r0, [pc, #40]	; (801413c <tcp_rexmit_rto+0x40>)
 8014114:	f003 fa50 	bl	80175b8 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8014118:	6878      	ldr	r0, [r7, #4]
 801411a:	f7ff ff57 	bl	8013fcc <tcp_rexmit_rto_prepare>
 801411e:	4603      	mov	r3, r0
 8014120:	2b00      	cmp	r3, #0
 8014122:	d102      	bne.n	801412a <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8014124:	6878      	ldr	r0, [r7, #4]
 8014126:	f7ff ffc1 	bl	80140ac <tcp_rexmit_rto_commit>
  }
}
 801412a:	bf00      	nop
 801412c:	3708      	adds	r7, #8
 801412e:	46bd      	mov	sp, r7
 8014130:	bd80      	pop	{r7, pc}
 8014132:	bf00      	nop
 8014134:	0801a914 	.word	0x0801a914
 8014138:	0801af98 	.word	0x0801af98
 801413c:	0801a968 	.word	0x0801a968

08014140 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8014140:	b590      	push	{r4, r7, lr}
 8014142:	b085      	sub	sp, #20
 8014144:	af00      	add	r7, sp, #0
 8014146:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8014148:	687b      	ldr	r3, [r7, #4]
 801414a:	2b00      	cmp	r3, #0
 801414c:	d106      	bne.n	801415c <tcp_rexmit+0x1c>
 801414e:	4b2f      	ldr	r3, [pc, #188]	; (801420c <tcp_rexmit+0xcc>)
 8014150:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8014154:	492e      	ldr	r1, [pc, #184]	; (8014210 <tcp_rexmit+0xd0>)
 8014156:	482f      	ldr	r0, [pc, #188]	; (8014214 <tcp_rexmit+0xd4>)
 8014158:	f003 fa2e 	bl	80175b8 <iprintf>

  if (pcb->unacked == NULL) {
 801415c:	687b      	ldr	r3, [r7, #4]
 801415e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014160:	2b00      	cmp	r3, #0
 8014162:	d102      	bne.n	801416a <tcp_rexmit+0x2a>
    return ERR_VAL;
 8014164:	f06f 0305 	mvn.w	r3, #5
 8014168:	e04c      	b.n	8014204 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 801416a:	687b      	ldr	r3, [r7, #4]
 801416c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801416e:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8014170:	68b8      	ldr	r0, [r7, #8]
 8014172:	f7ff fe2b 	bl	8013dcc <tcp_output_segment_busy>
 8014176:	4603      	mov	r3, r0
 8014178:	2b00      	cmp	r3, #0
 801417a:	d002      	beq.n	8014182 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 801417c:	f06f 0305 	mvn.w	r3, #5
 8014180:	e040      	b.n	8014204 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8014182:	68bb      	ldr	r3, [r7, #8]
 8014184:	681a      	ldr	r2, [r3, #0]
 8014186:	687b      	ldr	r3, [r7, #4]
 8014188:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 801418a:	687b      	ldr	r3, [r7, #4]
 801418c:	336c      	adds	r3, #108	; 0x6c
 801418e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8014190:	e002      	b.n	8014198 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8014192:	68fb      	ldr	r3, [r7, #12]
 8014194:	681b      	ldr	r3, [r3, #0]
 8014196:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8014198:	68fb      	ldr	r3, [r7, #12]
 801419a:	681b      	ldr	r3, [r3, #0]
 801419c:	2b00      	cmp	r3, #0
 801419e:	d011      	beq.n	80141c4 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80141a0:	68fb      	ldr	r3, [r7, #12]
 80141a2:	681b      	ldr	r3, [r3, #0]
 80141a4:	68db      	ldr	r3, [r3, #12]
 80141a6:	685b      	ldr	r3, [r3, #4]
 80141a8:	4618      	mov	r0, r3
 80141aa:	f7f8 fcc0 	bl	800cb2e <lwip_htonl>
 80141ae:	4604      	mov	r4, r0
 80141b0:	68bb      	ldr	r3, [r7, #8]
 80141b2:	68db      	ldr	r3, [r3, #12]
 80141b4:	685b      	ldr	r3, [r3, #4]
 80141b6:	4618      	mov	r0, r3
 80141b8:	f7f8 fcb9 	bl	800cb2e <lwip_htonl>
 80141bc:	4603      	mov	r3, r0
 80141be:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 80141c0:	2b00      	cmp	r3, #0
 80141c2:	dbe6      	blt.n	8014192 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 80141c4:	68fb      	ldr	r3, [r7, #12]
 80141c6:	681a      	ldr	r2, [r3, #0]
 80141c8:	68bb      	ldr	r3, [r7, #8]
 80141ca:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 80141cc:	68fb      	ldr	r3, [r7, #12]
 80141ce:	68ba      	ldr	r2, [r7, #8]
 80141d0:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 80141d2:	68bb      	ldr	r3, [r7, #8]
 80141d4:	681b      	ldr	r3, [r3, #0]
 80141d6:	2b00      	cmp	r3, #0
 80141d8:	d103      	bne.n	80141e2 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80141da:	687b      	ldr	r3, [r7, #4]
 80141dc:	2200      	movs	r2, #0
 80141de:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 80141e2:	687b      	ldr	r3, [r7, #4]
 80141e4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80141e8:	2bff      	cmp	r3, #255	; 0xff
 80141ea:	d007      	beq.n	80141fc <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 80141ec:	687b      	ldr	r3, [r7, #4]
 80141ee:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80141f2:	3301      	adds	r3, #1
 80141f4:	b2da      	uxtb	r2, r3
 80141f6:	687b      	ldr	r3, [r7, #4]
 80141f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 80141fc:	687b      	ldr	r3, [r7, #4]
 80141fe:	2200      	movs	r2, #0
 8014200:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8014202:	2300      	movs	r3, #0
}
 8014204:	4618      	mov	r0, r3
 8014206:	3714      	adds	r7, #20
 8014208:	46bd      	mov	sp, r7
 801420a:	bd90      	pop	{r4, r7, pc}
 801420c:	0801a914 	.word	0x0801a914
 8014210:	0801afb4 	.word	0x0801afb4
 8014214:	0801a968 	.word	0x0801a968

08014218 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8014218:	b580      	push	{r7, lr}
 801421a:	b082      	sub	sp, #8
 801421c:	af00      	add	r7, sp, #0
 801421e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8014220:	687b      	ldr	r3, [r7, #4]
 8014222:	2b00      	cmp	r3, #0
 8014224:	d106      	bne.n	8014234 <tcp_rexmit_fast+0x1c>
 8014226:	4b2f      	ldr	r3, [pc, #188]	; (80142e4 <tcp_rexmit_fast+0xcc>)
 8014228:	f240 62f9 	movw	r2, #1785	; 0x6f9
 801422c:	492e      	ldr	r1, [pc, #184]	; (80142e8 <tcp_rexmit_fast+0xd0>)
 801422e:	482f      	ldr	r0, [pc, #188]	; (80142ec <tcp_rexmit_fast+0xd4>)
 8014230:	f003 f9c2 	bl	80175b8 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8014234:	687b      	ldr	r3, [r7, #4]
 8014236:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014238:	2b00      	cmp	r3, #0
 801423a:	d04f      	beq.n	80142dc <tcp_rexmit_fast+0xc4>
 801423c:	687b      	ldr	r3, [r7, #4]
 801423e:	8b5b      	ldrh	r3, [r3, #26]
 8014240:	f003 0304 	and.w	r3, r3, #4
 8014244:	2b00      	cmp	r3, #0
 8014246:	d149      	bne.n	80142dc <tcp_rexmit_fast+0xc4>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8014248:	6878      	ldr	r0, [r7, #4]
 801424a:	f7ff ff79 	bl	8014140 <tcp_rexmit>
 801424e:	4603      	mov	r3, r0
 8014250:	2b00      	cmp	r3, #0
 8014252:	d143      	bne.n	80142dc <tcp_rexmit_fast+0xc4>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8014254:	687b      	ldr	r3, [r7, #4]
 8014256:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801425a:	687b      	ldr	r3, [r7, #4]
 801425c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8014260:	429a      	cmp	r2, r3
 8014262:	d208      	bcs.n	8014276 <tcp_rexmit_fast+0x5e>
 8014264:	687b      	ldr	r3, [r7, #4]
 8014266:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801426a:	2b00      	cmp	r3, #0
 801426c:	da00      	bge.n	8014270 <tcp_rexmit_fast+0x58>
 801426e:	3301      	adds	r3, #1
 8014270:	105b      	asrs	r3, r3, #1
 8014272:	b29b      	uxth	r3, r3
 8014274:	e007      	b.n	8014286 <tcp_rexmit_fast+0x6e>
 8014276:	687b      	ldr	r3, [r7, #4]
 8014278:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801427c:	2b00      	cmp	r3, #0
 801427e:	da00      	bge.n	8014282 <tcp_rexmit_fast+0x6a>
 8014280:	3301      	adds	r3, #1
 8014282:	105b      	asrs	r3, r3, #1
 8014284:	b29b      	uxth	r3, r3
 8014286:	687a      	ldr	r2, [r7, #4]
 8014288:	f8a2 304a 	strh.w	r3, [r2, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 801428c:	687b      	ldr	r3, [r7, #4]
 801428e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8014292:	461a      	mov	r2, r3
 8014294:	687b      	ldr	r3, [r7, #4]
 8014296:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014298:	005b      	lsls	r3, r3, #1
 801429a:	429a      	cmp	r2, r3
 801429c:	d206      	bcs.n	80142ac <tcp_rexmit_fast+0x94>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 801429e:	687b      	ldr	r3, [r7, #4]
 80142a0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80142a2:	005b      	lsls	r3, r3, #1
 80142a4:	b29a      	uxth	r2, r3
 80142a6:	687b      	ldr	r3, [r7, #4]
 80142a8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 80142ac:	687b      	ldr	r3, [r7, #4]
 80142ae:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80142b2:	687b      	ldr	r3, [r7, #4]
 80142b4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80142b6:	4619      	mov	r1, r3
 80142b8:	0049      	lsls	r1, r1, #1
 80142ba:	440b      	add	r3, r1
 80142bc:	b29b      	uxth	r3, r3
 80142be:	4413      	add	r3, r2
 80142c0:	b29a      	uxth	r2, r3
 80142c2:	687b      	ldr	r3, [r7, #4]
 80142c4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 80142c8:	687b      	ldr	r3, [r7, #4]
 80142ca:	8b5b      	ldrh	r3, [r3, #26]
 80142cc:	f043 0304 	orr.w	r3, r3, #4
 80142d0:	b29a      	uxth	r2, r3
 80142d2:	687b      	ldr	r3, [r7, #4]
 80142d4:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 80142d6:	687b      	ldr	r3, [r7, #4]
 80142d8:	2200      	movs	r2, #0
 80142da:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 80142dc:	bf00      	nop
 80142de:	3708      	adds	r7, #8
 80142e0:	46bd      	mov	sp, r7
 80142e2:	bd80      	pop	{r7, pc}
 80142e4:	0801a914 	.word	0x0801a914
 80142e8:	0801afcc 	.word	0x0801afcc
 80142ec:	0801a968 	.word	0x0801a968

080142f0 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 80142f0:	b580      	push	{r7, lr}
 80142f2:	b086      	sub	sp, #24
 80142f4:	af00      	add	r7, sp, #0
 80142f6:	60f8      	str	r0, [r7, #12]
 80142f8:	607b      	str	r3, [r7, #4]
 80142fa:	460b      	mov	r3, r1
 80142fc:	817b      	strh	r3, [r7, #10]
 80142fe:	4613      	mov	r3, r2
 8014300:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8014302:	897a      	ldrh	r2, [r7, #10]
 8014304:	893b      	ldrh	r3, [r7, #8]
 8014306:	4413      	add	r3, r2
 8014308:	b29b      	uxth	r3, r3
 801430a:	3314      	adds	r3, #20
 801430c:	b29b      	uxth	r3, r3
 801430e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014312:	4619      	mov	r1, r3
 8014314:	2022      	movs	r0, #34	; 0x22
 8014316:	f7f9 fcb7 	bl	800dc88 <pbuf_alloc>
 801431a:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 801431c:	697b      	ldr	r3, [r7, #20]
 801431e:	2b00      	cmp	r3, #0
 8014320:	d04e      	beq.n	80143c0 <tcp_output_alloc_header_common+0xd0>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8014322:	697b      	ldr	r3, [r7, #20]
 8014324:	895b      	ldrh	r3, [r3, #10]
 8014326:	461a      	mov	r2, r3
 8014328:	897b      	ldrh	r3, [r7, #10]
 801432a:	3314      	adds	r3, #20
 801432c:	429a      	cmp	r2, r3
 801432e:	da06      	bge.n	801433e <tcp_output_alloc_header_common+0x4e>
 8014330:	4b26      	ldr	r3, [pc, #152]	; (80143cc <tcp_output_alloc_header_common+0xdc>)
 8014332:	f240 7224 	movw	r2, #1828	; 0x724
 8014336:	4926      	ldr	r1, [pc, #152]	; (80143d0 <tcp_output_alloc_header_common+0xe0>)
 8014338:	4826      	ldr	r0, [pc, #152]	; (80143d4 <tcp_output_alloc_header_common+0xe4>)
 801433a:	f003 f93d 	bl	80175b8 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 801433e:	697b      	ldr	r3, [r7, #20]
 8014340:	685b      	ldr	r3, [r3, #4]
 8014342:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8014344:	8c3b      	ldrh	r3, [r7, #32]
 8014346:	4618      	mov	r0, r3
 8014348:	f7f8 fbdc 	bl	800cb04 <lwip_htons>
 801434c:	4603      	mov	r3, r0
 801434e:	461a      	mov	r2, r3
 8014350:	693b      	ldr	r3, [r7, #16]
 8014352:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8014354:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014356:	4618      	mov	r0, r3
 8014358:	f7f8 fbd4 	bl	800cb04 <lwip_htons>
 801435c:	4603      	mov	r3, r0
 801435e:	461a      	mov	r2, r3
 8014360:	693b      	ldr	r3, [r7, #16]
 8014362:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8014364:	693b      	ldr	r3, [r7, #16]
 8014366:	687a      	ldr	r2, [r7, #4]
 8014368:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 801436a:	68f8      	ldr	r0, [r7, #12]
 801436c:	f7f8 fbdf 	bl	800cb2e <lwip_htonl>
 8014370:	4602      	mov	r2, r0
 8014372:	693b      	ldr	r3, [r7, #16]
 8014374:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8014376:	897b      	ldrh	r3, [r7, #10]
 8014378:	089b      	lsrs	r3, r3, #2
 801437a:	b29b      	uxth	r3, r3
 801437c:	3305      	adds	r3, #5
 801437e:	b29b      	uxth	r3, r3
 8014380:	031b      	lsls	r3, r3, #12
 8014382:	b29a      	uxth	r2, r3
 8014384:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8014388:	b29b      	uxth	r3, r3
 801438a:	4313      	orrs	r3, r2
 801438c:	b29b      	uxth	r3, r3
 801438e:	4618      	mov	r0, r3
 8014390:	f7f8 fbb8 	bl	800cb04 <lwip_htons>
 8014394:	4603      	mov	r3, r0
 8014396:	461a      	mov	r2, r3
 8014398:	693b      	ldr	r3, [r7, #16]
 801439a:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 801439c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801439e:	4618      	mov	r0, r3
 80143a0:	f7f8 fbb0 	bl	800cb04 <lwip_htons>
 80143a4:	4603      	mov	r3, r0
 80143a6:	461a      	mov	r2, r3
 80143a8:	693b      	ldr	r3, [r7, #16]
 80143aa:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 80143ac:	693b      	ldr	r3, [r7, #16]
 80143ae:	2200      	movs	r2, #0
 80143b0:	741a      	strb	r2, [r3, #16]
 80143b2:	2200      	movs	r2, #0
 80143b4:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 80143b6:	693b      	ldr	r3, [r7, #16]
 80143b8:	2200      	movs	r2, #0
 80143ba:	749a      	strb	r2, [r3, #18]
 80143bc:	2200      	movs	r2, #0
 80143be:	74da      	strb	r2, [r3, #19]
  }
  return p;
 80143c0:	697b      	ldr	r3, [r7, #20]
}
 80143c2:	4618      	mov	r0, r3
 80143c4:	3718      	adds	r7, #24
 80143c6:	46bd      	mov	sp, r7
 80143c8:	bd80      	pop	{r7, pc}
 80143ca:	bf00      	nop
 80143cc:	0801a914 	.word	0x0801a914
 80143d0:	0801afec 	.word	0x0801afec
 80143d4:	0801a968 	.word	0x0801a968

080143d8 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 80143d8:	b5b0      	push	{r4, r5, r7, lr}
 80143da:	b08a      	sub	sp, #40	; 0x28
 80143dc:	af04      	add	r7, sp, #16
 80143de:	60f8      	str	r0, [r7, #12]
 80143e0:	607b      	str	r3, [r7, #4]
 80143e2:	460b      	mov	r3, r1
 80143e4:	817b      	strh	r3, [r7, #10]
 80143e6:	4613      	mov	r3, r2
 80143e8:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 80143ea:	68fb      	ldr	r3, [r7, #12]
 80143ec:	2b00      	cmp	r3, #0
 80143ee:	d106      	bne.n	80143fe <tcp_output_alloc_header+0x26>
 80143f0:	4b15      	ldr	r3, [pc, #84]	; (8014448 <tcp_output_alloc_header+0x70>)
 80143f2:	f240 7242 	movw	r2, #1858	; 0x742
 80143f6:	4915      	ldr	r1, [pc, #84]	; (801444c <tcp_output_alloc_header+0x74>)
 80143f8:	4815      	ldr	r0, [pc, #84]	; (8014450 <tcp_output_alloc_header+0x78>)
 80143fa:	f003 f8dd 	bl	80175b8 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 80143fe:	68fb      	ldr	r3, [r7, #12]
 8014400:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8014402:	68fb      	ldr	r3, [r7, #12]
 8014404:	8adb      	ldrh	r3, [r3, #22]
 8014406:	68fa      	ldr	r2, [r7, #12]
 8014408:	8b12      	ldrh	r2, [r2, #24]
 801440a:	68f9      	ldr	r1, [r7, #12]
 801440c:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 801440e:	893d      	ldrh	r5, [r7, #8]
 8014410:	897c      	ldrh	r4, [r7, #10]
 8014412:	9103      	str	r1, [sp, #12]
 8014414:	2110      	movs	r1, #16
 8014416:	9102      	str	r1, [sp, #8]
 8014418:	9201      	str	r2, [sp, #4]
 801441a:	9300      	str	r3, [sp, #0]
 801441c:	687b      	ldr	r3, [r7, #4]
 801441e:	462a      	mov	r2, r5
 8014420:	4621      	mov	r1, r4
 8014422:	f7ff ff65 	bl	80142f0 <tcp_output_alloc_header_common>
 8014426:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8014428:	697b      	ldr	r3, [r7, #20]
 801442a:	2b00      	cmp	r3, #0
 801442c:	d006      	beq.n	801443c <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801442e:	68fb      	ldr	r3, [r7, #12]
 8014430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014432:	68fa      	ldr	r2, [r7, #12]
 8014434:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8014436:	441a      	add	r2, r3
 8014438:	68fb      	ldr	r3, [r7, #12]
 801443a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 801443c:	697b      	ldr	r3, [r7, #20]
}
 801443e:	4618      	mov	r0, r3
 8014440:	3718      	adds	r7, #24
 8014442:	46bd      	mov	sp, r7
 8014444:	bdb0      	pop	{r4, r5, r7, pc}
 8014446:	bf00      	nop
 8014448:	0801a914 	.word	0x0801a914
 801444c:	0801b01c 	.word	0x0801b01c
 8014450:	0801a968 	.word	0x0801a968

08014454 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8014454:	b580      	push	{r7, lr}
 8014456:	b088      	sub	sp, #32
 8014458:	af00      	add	r7, sp, #0
 801445a:	60f8      	str	r0, [r7, #12]
 801445c:	60b9      	str	r1, [r7, #8]
 801445e:	4611      	mov	r1, r2
 8014460:	461a      	mov	r2, r3
 8014462:	460b      	mov	r3, r1
 8014464:	71fb      	strb	r3, [r7, #7]
 8014466:	4613      	mov	r3, r2
 8014468:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 801446a:	2300      	movs	r3, #0
 801446c:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 801446e:	68bb      	ldr	r3, [r7, #8]
 8014470:	2b00      	cmp	r3, #0
 8014472:	d106      	bne.n	8014482 <tcp_output_fill_options+0x2e>
 8014474:	4b13      	ldr	r3, [pc, #76]	; (80144c4 <tcp_output_fill_options+0x70>)
 8014476:	f240 7256 	movw	r2, #1878	; 0x756
 801447a:	4913      	ldr	r1, [pc, #76]	; (80144c8 <tcp_output_fill_options+0x74>)
 801447c:	4813      	ldr	r0, [pc, #76]	; (80144cc <tcp_output_fill_options+0x78>)
 801447e:	f003 f89b 	bl	80175b8 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8014482:	68bb      	ldr	r3, [r7, #8]
 8014484:	685b      	ldr	r3, [r3, #4]
 8014486:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8014488:	69bb      	ldr	r3, [r7, #24]
 801448a:	3314      	adds	r3, #20
 801448c:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 801448e:	69bb      	ldr	r3, [r7, #24]
 8014490:	f103 0214 	add.w	r2, r3, #20
 8014494:	8bfb      	ldrh	r3, [r7, #30]
 8014496:	009b      	lsls	r3, r3, #2
 8014498:	4619      	mov	r1, r3
 801449a:	79fb      	ldrb	r3, [r7, #7]
 801449c:	009b      	lsls	r3, r3, #2
 801449e:	f003 0304 	and.w	r3, r3, #4
 80144a2:	440b      	add	r3, r1
 80144a4:	4413      	add	r3, r2
 80144a6:	697a      	ldr	r2, [r7, #20]
 80144a8:	429a      	cmp	r2, r3
 80144aa:	d006      	beq.n	80144ba <tcp_output_fill_options+0x66>
 80144ac:	4b05      	ldr	r3, [pc, #20]	; (80144c4 <tcp_output_fill_options+0x70>)
 80144ae:	f240 7275 	movw	r2, #1909	; 0x775
 80144b2:	4907      	ldr	r1, [pc, #28]	; (80144d0 <tcp_output_fill_options+0x7c>)
 80144b4:	4805      	ldr	r0, [pc, #20]	; (80144cc <tcp_output_fill_options+0x78>)
 80144b6:	f003 f87f 	bl	80175b8 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 80144ba:	bf00      	nop
 80144bc:	3720      	adds	r7, #32
 80144be:	46bd      	mov	sp, r7
 80144c0:	bd80      	pop	{r7, pc}
 80144c2:	bf00      	nop
 80144c4:	0801a914 	.word	0x0801a914
 80144c8:	0801b044 	.word	0x0801b044
 80144cc:	0801a968 	.word	0x0801a968
 80144d0:	0801af3c 	.word	0x0801af3c

080144d4 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 80144d4:	b580      	push	{r7, lr}
 80144d6:	b08a      	sub	sp, #40	; 0x28
 80144d8:	af04      	add	r7, sp, #16
 80144da:	60f8      	str	r0, [r7, #12]
 80144dc:	60b9      	str	r1, [r7, #8]
 80144de:	607a      	str	r2, [r7, #4]
 80144e0:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 80144e2:	68bb      	ldr	r3, [r7, #8]
 80144e4:	2b00      	cmp	r3, #0
 80144e6:	d106      	bne.n	80144f6 <tcp_output_control_segment+0x22>
 80144e8:	4b1c      	ldr	r3, [pc, #112]	; (801455c <tcp_output_control_segment+0x88>)
 80144ea:	f240 7287 	movw	r2, #1927	; 0x787
 80144ee:	491c      	ldr	r1, [pc, #112]	; (8014560 <tcp_output_control_segment+0x8c>)
 80144f0:	481c      	ldr	r0, [pc, #112]	; (8014564 <tcp_output_control_segment+0x90>)
 80144f2:	f003 f861 	bl	80175b8 <iprintf>

  netif = tcp_route(pcb, src, dst);
 80144f6:	683a      	ldr	r2, [r7, #0]
 80144f8:	6879      	ldr	r1, [r7, #4]
 80144fa:	68f8      	ldr	r0, [r7, #12]
 80144fc:	f7fe fad4 	bl	8012aa8 <tcp_route>
 8014500:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8014502:	693b      	ldr	r3, [r7, #16]
 8014504:	2b00      	cmp	r3, #0
 8014506:	d102      	bne.n	801450e <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8014508:	23fc      	movs	r3, #252	; 0xfc
 801450a:	75fb      	strb	r3, [r7, #23]
 801450c:	e01c      	b.n	8014548 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 801450e:	68fb      	ldr	r3, [r7, #12]
 8014510:	2b00      	cmp	r3, #0
 8014512:	d006      	beq.n	8014522 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8014514:	68fb      	ldr	r3, [r7, #12]
 8014516:	7adb      	ldrb	r3, [r3, #11]
 8014518:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 801451a:	68fb      	ldr	r3, [r7, #12]
 801451c:	7a9b      	ldrb	r3, [r3, #10]
 801451e:	757b      	strb	r3, [r7, #21]
 8014520:	e003      	b.n	801452a <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8014522:	23ff      	movs	r3, #255	; 0xff
 8014524:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8014526:	2300      	movs	r3, #0
 8014528:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 801452a:	7dba      	ldrb	r2, [r7, #22]
 801452c:	693b      	ldr	r3, [r7, #16]
 801452e:	9302      	str	r3, [sp, #8]
 8014530:	2306      	movs	r3, #6
 8014532:	9301      	str	r3, [sp, #4]
 8014534:	7d7b      	ldrb	r3, [r7, #21]
 8014536:	9300      	str	r3, [sp, #0]
 8014538:	4613      	mov	r3, r2
 801453a:	683a      	ldr	r2, [r7, #0]
 801453c:	6879      	ldr	r1, [r7, #4]
 801453e:	68b8      	ldr	r0, [r7, #8]
 8014540:	f001 fdda 	bl	80160f8 <ip4_output_if>
 8014544:	4603      	mov	r3, r0
 8014546:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8014548:	68b8      	ldr	r0, [r7, #8]
 801454a:	f7f9 feaf 	bl	800e2ac <pbuf_free>
  return err;
 801454e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8014552:	4618      	mov	r0, r3
 8014554:	3718      	adds	r7, #24
 8014556:	46bd      	mov	sp, r7
 8014558:	bd80      	pop	{r7, pc}
 801455a:	bf00      	nop
 801455c:	0801a914 	.word	0x0801a914
 8014560:	0801b06c 	.word	0x0801b06c
 8014564:	0801a968 	.word	0x0801a968

08014568 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8014568:	b590      	push	{r4, r7, lr}
 801456a:	b08b      	sub	sp, #44	; 0x2c
 801456c:	af04      	add	r7, sp, #16
 801456e:	60f8      	str	r0, [r7, #12]
 8014570:	60b9      	str	r1, [r7, #8]
 8014572:	607a      	str	r2, [r7, #4]
 8014574:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8014576:	683b      	ldr	r3, [r7, #0]
 8014578:	2b00      	cmp	r3, #0
 801457a:	d106      	bne.n	801458a <tcp_rst+0x22>
 801457c:	4b1f      	ldr	r3, [pc, #124]	; (80145fc <tcp_rst+0x94>)
 801457e:	f240 72c4 	movw	r2, #1988	; 0x7c4
 8014582:	491f      	ldr	r1, [pc, #124]	; (8014600 <tcp_rst+0x98>)
 8014584:	481f      	ldr	r0, [pc, #124]	; (8014604 <tcp_rst+0x9c>)
 8014586:	f003 f817 	bl	80175b8 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 801458a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801458c:	2b00      	cmp	r3, #0
 801458e:	d106      	bne.n	801459e <tcp_rst+0x36>
 8014590:	4b1a      	ldr	r3, [pc, #104]	; (80145fc <tcp_rst+0x94>)
 8014592:	f240 72c5 	movw	r2, #1989	; 0x7c5
 8014596:	491c      	ldr	r1, [pc, #112]	; (8014608 <tcp_rst+0xa0>)
 8014598:	481a      	ldr	r0, [pc, #104]	; (8014604 <tcp_rst+0x9c>)
 801459a:	f003 f80d 	bl	80175b8 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801459e:	2300      	movs	r3, #0
 80145a0:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 80145a2:	f246 0308 	movw	r3, #24584	; 0x6008
 80145a6:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 80145a8:	7dfb      	ldrb	r3, [r7, #23]
 80145aa:	b29c      	uxth	r4, r3
 80145ac:	68b8      	ldr	r0, [r7, #8]
 80145ae:	f7f8 fabe 	bl	800cb2e <lwip_htonl>
 80145b2:	4602      	mov	r2, r0
 80145b4:	8abb      	ldrh	r3, [r7, #20]
 80145b6:	9303      	str	r3, [sp, #12]
 80145b8:	2314      	movs	r3, #20
 80145ba:	9302      	str	r3, [sp, #8]
 80145bc:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80145be:	9301      	str	r3, [sp, #4]
 80145c0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80145c2:	9300      	str	r3, [sp, #0]
 80145c4:	4613      	mov	r3, r2
 80145c6:	2200      	movs	r2, #0
 80145c8:	4621      	mov	r1, r4
 80145ca:	6878      	ldr	r0, [r7, #4]
 80145cc:	f7ff fe90 	bl	80142f0 <tcp_output_alloc_header_common>
 80145d0:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 80145d2:	693b      	ldr	r3, [r7, #16]
 80145d4:	2b00      	cmp	r3, #0
 80145d6:	d00c      	beq.n	80145f2 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80145d8:	7dfb      	ldrb	r3, [r7, #23]
 80145da:	2200      	movs	r2, #0
 80145dc:	6939      	ldr	r1, [r7, #16]
 80145de:	68f8      	ldr	r0, [r7, #12]
 80145e0:	f7ff ff38 	bl	8014454 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 80145e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80145e6:	683a      	ldr	r2, [r7, #0]
 80145e8:	6939      	ldr	r1, [r7, #16]
 80145ea:	68f8      	ldr	r0, [r7, #12]
 80145ec:	f7ff ff72 	bl	80144d4 <tcp_output_control_segment>
 80145f0:	e000      	b.n	80145f4 <tcp_rst+0x8c>
    return;
 80145f2:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 80145f4:	371c      	adds	r7, #28
 80145f6:	46bd      	mov	sp, r7
 80145f8:	bd90      	pop	{r4, r7, pc}
 80145fa:	bf00      	nop
 80145fc:	0801a914 	.word	0x0801a914
 8014600:	0801b098 	.word	0x0801b098
 8014604:	0801a968 	.word	0x0801a968
 8014608:	0801b0b4 	.word	0x0801b0b4

0801460c <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 801460c:	b590      	push	{r4, r7, lr}
 801460e:	b087      	sub	sp, #28
 8014610:	af00      	add	r7, sp, #0
 8014612:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8014614:	2300      	movs	r3, #0
 8014616:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8014618:	2300      	movs	r3, #0
 801461a:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 801461c:	687b      	ldr	r3, [r7, #4]
 801461e:	2b00      	cmp	r3, #0
 8014620:	d106      	bne.n	8014630 <tcp_send_empty_ack+0x24>
 8014622:	4b28      	ldr	r3, [pc, #160]	; (80146c4 <tcp_send_empty_ack+0xb8>)
 8014624:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8014628:	4927      	ldr	r1, [pc, #156]	; (80146c8 <tcp_send_empty_ack+0xbc>)
 801462a:	4828      	ldr	r0, [pc, #160]	; (80146cc <tcp_send_empty_ack+0xc0>)
 801462c:	f002 ffc4 	bl	80175b8 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8014630:	7dfb      	ldrb	r3, [r7, #23]
 8014632:	009b      	lsls	r3, r3, #2
 8014634:	b2db      	uxtb	r3, r3
 8014636:	f003 0304 	and.w	r3, r3, #4
 801463a:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 801463c:	7d7b      	ldrb	r3, [r7, #21]
 801463e:	b29c      	uxth	r4, r3
 8014640:	687b      	ldr	r3, [r7, #4]
 8014642:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014644:	4618      	mov	r0, r3
 8014646:	f7f8 fa72 	bl	800cb2e <lwip_htonl>
 801464a:	4603      	mov	r3, r0
 801464c:	2200      	movs	r2, #0
 801464e:	4621      	mov	r1, r4
 8014650:	6878      	ldr	r0, [r7, #4]
 8014652:	f7ff fec1 	bl	80143d8 <tcp_output_alloc_header>
 8014656:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8014658:	693b      	ldr	r3, [r7, #16]
 801465a:	2b00      	cmp	r3, #0
 801465c:	d109      	bne.n	8014672 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801465e:	687b      	ldr	r3, [r7, #4]
 8014660:	8b5b      	ldrh	r3, [r3, #26]
 8014662:	f043 0303 	orr.w	r3, r3, #3
 8014666:	b29a      	uxth	r2, r3
 8014668:	687b      	ldr	r3, [r7, #4]
 801466a:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 801466c:	f06f 0301 	mvn.w	r3, #1
 8014670:	e023      	b.n	80146ba <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8014672:	7dbb      	ldrb	r3, [r7, #22]
 8014674:	7dfa      	ldrb	r2, [r7, #23]
 8014676:	6939      	ldr	r1, [r7, #16]
 8014678:	6878      	ldr	r0, [r7, #4]
 801467a:	f7ff feeb 	bl	8014454 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801467e:	687a      	ldr	r2, [r7, #4]
 8014680:	687b      	ldr	r3, [r7, #4]
 8014682:	3304      	adds	r3, #4
 8014684:	6939      	ldr	r1, [r7, #16]
 8014686:	6878      	ldr	r0, [r7, #4]
 8014688:	f7ff ff24 	bl	80144d4 <tcp_output_control_segment>
 801468c:	4603      	mov	r3, r0
 801468e:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8014690:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014694:	2b00      	cmp	r3, #0
 8014696:	d007      	beq.n	80146a8 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8014698:	687b      	ldr	r3, [r7, #4]
 801469a:	8b5b      	ldrh	r3, [r3, #26]
 801469c:	f043 0303 	orr.w	r3, r3, #3
 80146a0:	b29a      	uxth	r2, r3
 80146a2:	687b      	ldr	r3, [r7, #4]
 80146a4:	835a      	strh	r2, [r3, #26]
 80146a6:	e006      	b.n	80146b6 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80146a8:	687b      	ldr	r3, [r7, #4]
 80146aa:	8b5b      	ldrh	r3, [r3, #26]
 80146ac:	f023 0303 	bic.w	r3, r3, #3
 80146b0:	b29a      	uxth	r2, r3
 80146b2:	687b      	ldr	r3, [r7, #4]
 80146b4:	835a      	strh	r2, [r3, #26]
  }

  return err;
 80146b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80146ba:	4618      	mov	r0, r3
 80146bc:	371c      	adds	r7, #28
 80146be:	46bd      	mov	sp, r7
 80146c0:	bd90      	pop	{r4, r7, pc}
 80146c2:	bf00      	nop
 80146c4:	0801a914 	.word	0x0801a914
 80146c8:	0801b0d0 	.word	0x0801b0d0
 80146cc:	0801a968 	.word	0x0801a968

080146d0 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 80146d0:	b590      	push	{r4, r7, lr}
 80146d2:	b087      	sub	sp, #28
 80146d4:	af00      	add	r7, sp, #0
 80146d6:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80146d8:	2300      	movs	r3, #0
 80146da:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 80146dc:	687b      	ldr	r3, [r7, #4]
 80146de:	2b00      	cmp	r3, #0
 80146e0:	d106      	bne.n	80146f0 <tcp_keepalive+0x20>
 80146e2:	4b18      	ldr	r3, [pc, #96]	; (8014744 <tcp_keepalive+0x74>)
 80146e4:	f640 0224 	movw	r2, #2084	; 0x824
 80146e8:	4917      	ldr	r1, [pc, #92]	; (8014748 <tcp_keepalive+0x78>)
 80146ea:	4818      	ldr	r0, [pc, #96]	; (801474c <tcp_keepalive+0x7c>)
 80146ec:	f002 ff64 	bl	80175b8 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 80146f0:	7dfb      	ldrb	r3, [r7, #23]
 80146f2:	b29c      	uxth	r4, r3
 80146f4:	687b      	ldr	r3, [r7, #4]
 80146f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80146f8:	3b01      	subs	r3, #1
 80146fa:	4618      	mov	r0, r3
 80146fc:	f7f8 fa17 	bl	800cb2e <lwip_htonl>
 8014700:	4603      	mov	r3, r0
 8014702:	2200      	movs	r2, #0
 8014704:	4621      	mov	r1, r4
 8014706:	6878      	ldr	r0, [r7, #4]
 8014708:	f7ff fe66 	bl	80143d8 <tcp_output_alloc_header>
 801470c:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801470e:	693b      	ldr	r3, [r7, #16]
 8014710:	2b00      	cmp	r3, #0
 8014712:	d102      	bne.n	801471a <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8014714:	f04f 33ff 	mov.w	r3, #4294967295
 8014718:	e010      	b.n	801473c <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801471a:	7dfb      	ldrb	r3, [r7, #23]
 801471c:	2200      	movs	r2, #0
 801471e:	6939      	ldr	r1, [r7, #16]
 8014720:	6878      	ldr	r0, [r7, #4]
 8014722:	f7ff fe97 	bl	8014454 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8014726:	687a      	ldr	r2, [r7, #4]
 8014728:	687b      	ldr	r3, [r7, #4]
 801472a:	3304      	adds	r3, #4
 801472c:	6939      	ldr	r1, [r7, #16]
 801472e:	6878      	ldr	r0, [r7, #4]
 8014730:	f7ff fed0 	bl	80144d4 <tcp_output_control_segment>
 8014734:	4603      	mov	r3, r0
 8014736:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8014738:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801473c:	4618      	mov	r0, r3
 801473e:	371c      	adds	r7, #28
 8014740:	46bd      	mov	sp, r7
 8014742:	bd90      	pop	{r4, r7, pc}
 8014744:	0801a914 	.word	0x0801a914
 8014748:	0801b0f0 	.word	0x0801b0f0
 801474c:	0801a968 	.word	0x0801a968

08014750 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8014750:	b590      	push	{r4, r7, lr}
 8014752:	b08b      	sub	sp, #44	; 0x2c
 8014754:	af00      	add	r7, sp, #0
 8014756:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8014758:	2300      	movs	r3, #0
 801475a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 801475e:	687b      	ldr	r3, [r7, #4]
 8014760:	2b00      	cmp	r3, #0
 8014762:	d106      	bne.n	8014772 <tcp_zero_window_probe+0x22>
 8014764:	4b4c      	ldr	r3, [pc, #304]	; (8014898 <tcp_zero_window_probe+0x148>)
 8014766:	f640 024f 	movw	r2, #2127	; 0x84f
 801476a:	494c      	ldr	r1, [pc, #304]	; (801489c <tcp_zero_window_probe+0x14c>)
 801476c:	484c      	ldr	r0, [pc, #304]	; (80148a0 <tcp_zero_window_probe+0x150>)
 801476e:	f002 ff23 	bl	80175b8 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8014772:	687b      	ldr	r3, [r7, #4]
 8014774:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014776:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8014778:	6a3b      	ldr	r3, [r7, #32]
 801477a:	2b00      	cmp	r3, #0
 801477c:	d101      	bne.n	8014782 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 801477e:	2300      	movs	r3, #0
 8014780:	e086      	b.n	8014890 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8014782:	687b      	ldr	r3, [r7, #4]
 8014784:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8014788:	2bff      	cmp	r3, #255	; 0xff
 801478a:	d007      	beq.n	801479c <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 801478c:	687b      	ldr	r3, [r7, #4]
 801478e:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8014792:	3301      	adds	r3, #1
 8014794:	b2da      	uxtb	r2, r3
 8014796:	687b      	ldr	r3, [r7, #4]
 8014798:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 801479c:	6a3b      	ldr	r3, [r7, #32]
 801479e:	68db      	ldr	r3, [r3, #12]
 80147a0:	899b      	ldrh	r3, [r3, #12]
 80147a2:	b29b      	uxth	r3, r3
 80147a4:	4618      	mov	r0, r3
 80147a6:	f7f8 f9ad 	bl	800cb04 <lwip_htons>
 80147aa:	4603      	mov	r3, r0
 80147ac:	b2db      	uxtb	r3, r3
 80147ae:	f003 0301 	and.w	r3, r3, #1
 80147b2:	2b00      	cmp	r3, #0
 80147b4:	d005      	beq.n	80147c2 <tcp_zero_window_probe+0x72>
 80147b6:	6a3b      	ldr	r3, [r7, #32]
 80147b8:	891b      	ldrh	r3, [r3, #8]
 80147ba:	2b00      	cmp	r3, #0
 80147bc:	d101      	bne.n	80147c2 <tcp_zero_window_probe+0x72>
 80147be:	2301      	movs	r3, #1
 80147c0:	e000      	b.n	80147c4 <tcp_zero_window_probe+0x74>
 80147c2:	2300      	movs	r3, #0
 80147c4:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 80147c6:	7ffb      	ldrb	r3, [r7, #31]
 80147c8:	2b00      	cmp	r3, #0
 80147ca:	bf0c      	ite	eq
 80147cc:	2301      	moveq	r3, #1
 80147ce:	2300      	movne	r3, #0
 80147d0:	b2db      	uxtb	r3, r3
 80147d2:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 80147d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80147d8:	b299      	uxth	r1, r3
 80147da:	6a3b      	ldr	r3, [r7, #32]
 80147dc:	68db      	ldr	r3, [r3, #12]
 80147de:	685b      	ldr	r3, [r3, #4]
 80147e0:	8bba      	ldrh	r2, [r7, #28]
 80147e2:	6878      	ldr	r0, [r7, #4]
 80147e4:	f7ff fdf8 	bl	80143d8 <tcp_output_alloc_header>
 80147e8:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 80147ea:	69bb      	ldr	r3, [r7, #24]
 80147ec:	2b00      	cmp	r3, #0
 80147ee:	d102      	bne.n	80147f6 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 80147f0:	f04f 33ff 	mov.w	r3, #4294967295
 80147f4:	e04c      	b.n	8014890 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 80147f6:	69bb      	ldr	r3, [r7, #24]
 80147f8:	685b      	ldr	r3, [r3, #4]
 80147fa:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 80147fc:	7ffb      	ldrb	r3, [r7, #31]
 80147fe:	2b00      	cmp	r3, #0
 8014800:	d011      	beq.n	8014826 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8014802:	697b      	ldr	r3, [r7, #20]
 8014804:	899b      	ldrh	r3, [r3, #12]
 8014806:	b29b      	uxth	r3, r3
 8014808:	b21b      	sxth	r3, r3
 801480a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801480e:	b21c      	sxth	r4, r3
 8014810:	2011      	movs	r0, #17
 8014812:	f7f8 f977 	bl	800cb04 <lwip_htons>
 8014816:	4603      	mov	r3, r0
 8014818:	b21b      	sxth	r3, r3
 801481a:	4323      	orrs	r3, r4
 801481c:	b21b      	sxth	r3, r3
 801481e:	b29a      	uxth	r2, r3
 8014820:	697b      	ldr	r3, [r7, #20]
 8014822:	819a      	strh	r2, [r3, #12]
 8014824:	e010      	b.n	8014848 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8014826:	69bb      	ldr	r3, [r7, #24]
 8014828:	685b      	ldr	r3, [r3, #4]
 801482a:	3314      	adds	r3, #20
 801482c:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801482e:	6a3b      	ldr	r3, [r7, #32]
 8014830:	6858      	ldr	r0, [r3, #4]
 8014832:	6a3b      	ldr	r3, [r7, #32]
 8014834:	685b      	ldr	r3, [r3, #4]
 8014836:	891a      	ldrh	r2, [r3, #8]
 8014838:	6a3b      	ldr	r3, [r7, #32]
 801483a:	891b      	ldrh	r3, [r3, #8]
 801483c:	1ad3      	subs	r3, r2, r3
 801483e:	b29b      	uxth	r3, r3
 8014840:	2201      	movs	r2, #1
 8014842:	6939      	ldr	r1, [r7, #16]
 8014844:	f7f9 ff28 	bl	800e698 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8014848:	6a3b      	ldr	r3, [r7, #32]
 801484a:	68db      	ldr	r3, [r3, #12]
 801484c:	685b      	ldr	r3, [r3, #4]
 801484e:	4618      	mov	r0, r3
 8014850:	f7f8 f96d 	bl	800cb2e <lwip_htonl>
 8014854:	4603      	mov	r3, r0
 8014856:	3301      	adds	r3, #1
 8014858:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801485a:	687b      	ldr	r3, [r7, #4]
 801485c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801485e:	68fb      	ldr	r3, [r7, #12]
 8014860:	1ad3      	subs	r3, r2, r3
 8014862:	2b00      	cmp	r3, #0
 8014864:	da02      	bge.n	801486c <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8014866:	687b      	ldr	r3, [r7, #4]
 8014868:	68fa      	ldr	r2, [r7, #12]
 801486a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801486c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014870:	2200      	movs	r2, #0
 8014872:	69b9      	ldr	r1, [r7, #24]
 8014874:	6878      	ldr	r0, [r7, #4]
 8014876:	f7ff fded 	bl	8014454 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801487a:	687a      	ldr	r2, [r7, #4]
 801487c:	687b      	ldr	r3, [r7, #4]
 801487e:	3304      	adds	r3, #4
 8014880:	69b9      	ldr	r1, [r7, #24]
 8014882:	6878      	ldr	r0, [r7, #4]
 8014884:	f7ff fe26 	bl	80144d4 <tcp_output_control_segment>
 8014888:	4603      	mov	r3, r0
 801488a:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801488c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8014890:	4618      	mov	r0, r3
 8014892:	372c      	adds	r7, #44	; 0x2c
 8014894:	46bd      	mov	sp, r7
 8014896:	bd90      	pop	{r4, r7, pc}
 8014898:	0801a914 	.word	0x0801a914
 801489c:	0801b10c 	.word	0x0801b10c
 80148a0:	0801a968 	.word	0x0801a968

080148a4 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 80148a4:	b580      	push	{r7, lr}
 80148a6:	b082      	sub	sp, #8
 80148a8:	af00      	add	r7, sp, #0
 80148aa:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 80148ac:	f7f9 ffe2 	bl	800e874 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 80148b0:	4b0a      	ldr	r3, [pc, #40]	; (80148dc <tcpip_tcp_timer+0x38>)
 80148b2:	681b      	ldr	r3, [r3, #0]
 80148b4:	2b00      	cmp	r3, #0
 80148b6:	d103      	bne.n	80148c0 <tcpip_tcp_timer+0x1c>
 80148b8:	4b09      	ldr	r3, [pc, #36]	; (80148e0 <tcpip_tcp_timer+0x3c>)
 80148ba:	681b      	ldr	r3, [r3, #0]
 80148bc:	2b00      	cmp	r3, #0
 80148be:	d005      	beq.n	80148cc <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80148c0:	2200      	movs	r2, #0
 80148c2:	4908      	ldr	r1, [pc, #32]	; (80148e4 <tcpip_tcp_timer+0x40>)
 80148c4:	20fa      	movs	r0, #250	; 0xfa
 80148c6:	f000 f8f1 	bl	8014aac <sys_timeout>
 80148ca:	e002      	b.n	80148d2 <tcpip_tcp_timer+0x2e>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 80148cc:	4b06      	ldr	r3, [pc, #24]	; (80148e8 <tcpip_tcp_timer+0x44>)
 80148ce:	2200      	movs	r2, #0
 80148d0:	601a      	str	r2, [r3, #0]
  }
}
 80148d2:	bf00      	nop
 80148d4:	3708      	adds	r7, #8
 80148d6:	46bd      	mov	sp, r7
 80148d8:	bd80      	pop	{r7, pc}
 80148da:	bf00      	nop
 80148dc:	2000d288 	.word	0x2000d288
 80148e0:	2000d298 	.word	0x2000d298
 80148e4:	080148a5 	.word	0x080148a5
 80148e8:	20004684 	.word	0x20004684

080148ec <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 80148ec:	b580      	push	{r7, lr}
 80148ee:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 80148f0:	4b0a      	ldr	r3, [pc, #40]	; (801491c <tcp_timer_needed+0x30>)
 80148f2:	681b      	ldr	r3, [r3, #0]
 80148f4:	2b00      	cmp	r3, #0
 80148f6:	d10f      	bne.n	8014918 <tcp_timer_needed+0x2c>
 80148f8:	4b09      	ldr	r3, [pc, #36]	; (8014920 <tcp_timer_needed+0x34>)
 80148fa:	681b      	ldr	r3, [r3, #0]
 80148fc:	2b00      	cmp	r3, #0
 80148fe:	d103      	bne.n	8014908 <tcp_timer_needed+0x1c>
 8014900:	4b08      	ldr	r3, [pc, #32]	; (8014924 <tcp_timer_needed+0x38>)
 8014902:	681b      	ldr	r3, [r3, #0]
 8014904:	2b00      	cmp	r3, #0
 8014906:	d007      	beq.n	8014918 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8014908:	4b04      	ldr	r3, [pc, #16]	; (801491c <tcp_timer_needed+0x30>)
 801490a:	2201      	movs	r2, #1
 801490c:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801490e:	2200      	movs	r2, #0
 8014910:	4905      	ldr	r1, [pc, #20]	; (8014928 <tcp_timer_needed+0x3c>)
 8014912:	20fa      	movs	r0, #250	; 0xfa
 8014914:	f000 f8ca 	bl	8014aac <sys_timeout>
  }
}
 8014918:	bf00      	nop
 801491a:	bd80      	pop	{r7, pc}
 801491c:	20004684 	.word	0x20004684
 8014920:	2000d288 	.word	0x2000d288
 8014924:	2000d298 	.word	0x2000d298
 8014928:	080148a5 	.word	0x080148a5

0801492c <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 801492c:	b580      	push	{r7, lr}
 801492e:	b086      	sub	sp, #24
 8014930:	af00      	add	r7, sp, #0
 8014932:	60f8      	str	r0, [r7, #12]
 8014934:	60b9      	str	r1, [r7, #8]
 8014936:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8014938:	2009      	movs	r0, #9
 801493a:	f7f8 fd97 	bl	800d46c <memp_malloc>
 801493e:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8014940:	693b      	ldr	r3, [r7, #16]
 8014942:	2b00      	cmp	r3, #0
 8014944:	d109      	bne.n	801495a <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8014946:	693b      	ldr	r3, [r7, #16]
 8014948:	2b00      	cmp	r3, #0
 801494a:	d151      	bne.n	80149f0 <sys_timeout_abs+0xc4>
 801494c:	4b2a      	ldr	r3, [pc, #168]	; (80149f8 <sys_timeout_abs+0xcc>)
 801494e:	22be      	movs	r2, #190	; 0xbe
 8014950:	492a      	ldr	r1, [pc, #168]	; (80149fc <sys_timeout_abs+0xd0>)
 8014952:	482b      	ldr	r0, [pc, #172]	; (8014a00 <sys_timeout_abs+0xd4>)
 8014954:	f002 fe30 	bl	80175b8 <iprintf>
    return;
 8014958:	e04a      	b.n	80149f0 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 801495a:	693b      	ldr	r3, [r7, #16]
 801495c:	2200      	movs	r2, #0
 801495e:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8014960:	693b      	ldr	r3, [r7, #16]
 8014962:	68ba      	ldr	r2, [r7, #8]
 8014964:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8014966:	693b      	ldr	r3, [r7, #16]
 8014968:	687a      	ldr	r2, [r7, #4]
 801496a:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 801496c:	693b      	ldr	r3, [r7, #16]
 801496e:	68fa      	ldr	r2, [r7, #12]
 8014970:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8014972:	4b24      	ldr	r3, [pc, #144]	; (8014a04 <sys_timeout_abs+0xd8>)
 8014974:	681b      	ldr	r3, [r3, #0]
 8014976:	2b00      	cmp	r3, #0
 8014978:	d103      	bne.n	8014982 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 801497a:	4a22      	ldr	r2, [pc, #136]	; (8014a04 <sys_timeout_abs+0xd8>)
 801497c:	693b      	ldr	r3, [r7, #16]
 801497e:	6013      	str	r3, [r2, #0]
    return;
 8014980:	e037      	b.n	80149f2 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8014982:	693b      	ldr	r3, [r7, #16]
 8014984:	685a      	ldr	r2, [r3, #4]
 8014986:	4b1f      	ldr	r3, [pc, #124]	; (8014a04 <sys_timeout_abs+0xd8>)
 8014988:	681b      	ldr	r3, [r3, #0]
 801498a:	685b      	ldr	r3, [r3, #4]
 801498c:	1ad3      	subs	r3, r2, r3
 801498e:	0fdb      	lsrs	r3, r3, #31
 8014990:	f003 0301 	and.w	r3, r3, #1
 8014994:	b2db      	uxtb	r3, r3
 8014996:	2b00      	cmp	r3, #0
 8014998:	d007      	beq.n	80149aa <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 801499a:	4b1a      	ldr	r3, [pc, #104]	; (8014a04 <sys_timeout_abs+0xd8>)
 801499c:	681a      	ldr	r2, [r3, #0]
 801499e:	693b      	ldr	r3, [r7, #16]
 80149a0:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 80149a2:	4a18      	ldr	r2, [pc, #96]	; (8014a04 <sys_timeout_abs+0xd8>)
 80149a4:	693b      	ldr	r3, [r7, #16]
 80149a6:	6013      	str	r3, [r2, #0]
 80149a8:	e023      	b.n	80149f2 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 80149aa:	4b16      	ldr	r3, [pc, #88]	; (8014a04 <sys_timeout_abs+0xd8>)
 80149ac:	681b      	ldr	r3, [r3, #0]
 80149ae:	617b      	str	r3, [r7, #20]
 80149b0:	e01a      	b.n	80149e8 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 80149b2:	697b      	ldr	r3, [r7, #20]
 80149b4:	681b      	ldr	r3, [r3, #0]
 80149b6:	2b00      	cmp	r3, #0
 80149b8:	d00b      	beq.n	80149d2 <sys_timeout_abs+0xa6>
 80149ba:	693b      	ldr	r3, [r7, #16]
 80149bc:	685a      	ldr	r2, [r3, #4]
 80149be:	697b      	ldr	r3, [r7, #20]
 80149c0:	681b      	ldr	r3, [r3, #0]
 80149c2:	685b      	ldr	r3, [r3, #4]
 80149c4:	1ad3      	subs	r3, r2, r3
 80149c6:	0fdb      	lsrs	r3, r3, #31
 80149c8:	f003 0301 	and.w	r3, r3, #1
 80149cc:	b2db      	uxtb	r3, r3
 80149ce:	2b00      	cmp	r3, #0
 80149d0:	d007      	beq.n	80149e2 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 80149d2:	697b      	ldr	r3, [r7, #20]
 80149d4:	681a      	ldr	r2, [r3, #0]
 80149d6:	693b      	ldr	r3, [r7, #16]
 80149d8:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 80149da:	697b      	ldr	r3, [r7, #20]
 80149dc:	693a      	ldr	r2, [r7, #16]
 80149de:	601a      	str	r2, [r3, #0]
        break;
 80149e0:	e007      	b.n	80149f2 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 80149e2:	697b      	ldr	r3, [r7, #20]
 80149e4:	681b      	ldr	r3, [r3, #0]
 80149e6:	617b      	str	r3, [r7, #20]
 80149e8:	697b      	ldr	r3, [r7, #20]
 80149ea:	2b00      	cmp	r3, #0
 80149ec:	d1e1      	bne.n	80149b2 <sys_timeout_abs+0x86>
 80149ee:	e000      	b.n	80149f2 <sys_timeout_abs+0xc6>
    return;
 80149f0:	bf00      	nop
      }
    }
  }
}
 80149f2:	3718      	adds	r7, #24
 80149f4:	46bd      	mov	sp, r7
 80149f6:	bd80      	pop	{r7, pc}
 80149f8:	0801b130 	.word	0x0801b130
 80149fc:	0801b164 	.word	0x0801b164
 8014a00:	0801b1a4 	.word	0x0801b1a4
 8014a04:	2000467c 	.word	0x2000467c

08014a08 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8014a08:	b580      	push	{r7, lr}
 8014a0a:	b086      	sub	sp, #24
 8014a0c:	af00      	add	r7, sp, #0
 8014a0e:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8014a10:	687b      	ldr	r3, [r7, #4]
 8014a12:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8014a14:	697b      	ldr	r3, [r7, #20]
 8014a16:	685b      	ldr	r3, [r3, #4]
 8014a18:	4798      	blx	r3

  now = sys_now();
 8014a1a:	f7f1 f851 	bl	8005ac0 <sys_now>
 8014a1e:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8014a20:	697b      	ldr	r3, [r7, #20]
 8014a22:	681a      	ldr	r2, [r3, #0]
 8014a24:	4b0f      	ldr	r3, [pc, #60]	; (8014a64 <lwip_cyclic_timer+0x5c>)
 8014a26:	681b      	ldr	r3, [r3, #0]
 8014a28:	4413      	add	r3, r2
 8014a2a:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8014a2c:	68fa      	ldr	r2, [r7, #12]
 8014a2e:	693b      	ldr	r3, [r7, #16]
 8014a30:	1ad3      	subs	r3, r2, r3
 8014a32:	0fdb      	lsrs	r3, r3, #31
 8014a34:	f003 0301 	and.w	r3, r3, #1
 8014a38:	b2db      	uxtb	r3, r3
 8014a3a:	2b00      	cmp	r3, #0
 8014a3c:	d009      	beq.n	8014a52 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8014a3e:	697b      	ldr	r3, [r7, #20]
 8014a40:	681a      	ldr	r2, [r3, #0]
 8014a42:	693b      	ldr	r3, [r7, #16]
 8014a44:	4413      	add	r3, r2
 8014a46:	687a      	ldr	r2, [r7, #4]
 8014a48:	4907      	ldr	r1, [pc, #28]	; (8014a68 <lwip_cyclic_timer+0x60>)
 8014a4a:	4618      	mov	r0, r3
 8014a4c:	f7ff ff6e 	bl	801492c <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8014a50:	e004      	b.n	8014a5c <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8014a52:	687a      	ldr	r2, [r7, #4]
 8014a54:	4904      	ldr	r1, [pc, #16]	; (8014a68 <lwip_cyclic_timer+0x60>)
 8014a56:	68f8      	ldr	r0, [r7, #12]
 8014a58:	f7ff ff68 	bl	801492c <sys_timeout_abs>
}
 8014a5c:	bf00      	nop
 8014a5e:	3718      	adds	r7, #24
 8014a60:	46bd      	mov	sp, r7
 8014a62:	bd80      	pop	{r7, pc}
 8014a64:	20004680 	.word	0x20004680
 8014a68:	08014a09 	.word	0x08014a09

08014a6c <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8014a6c:	b580      	push	{r7, lr}
 8014a6e:	b082      	sub	sp, #8
 8014a70:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8014a72:	2301      	movs	r3, #1
 8014a74:	607b      	str	r3, [r7, #4]
 8014a76:	e00e      	b.n	8014a96 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8014a78:	4a0a      	ldr	r2, [pc, #40]	; (8014aa4 <sys_timeouts_init+0x38>)
 8014a7a:	687b      	ldr	r3, [r7, #4]
 8014a7c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8014a80:	687b      	ldr	r3, [r7, #4]
 8014a82:	00db      	lsls	r3, r3, #3
 8014a84:	4a07      	ldr	r2, [pc, #28]	; (8014aa4 <sys_timeouts_init+0x38>)
 8014a86:	4413      	add	r3, r2
 8014a88:	461a      	mov	r2, r3
 8014a8a:	4907      	ldr	r1, [pc, #28]	; (8014aa8 <sys_timeouts_init+0x3c>)
 8014a8c:	f000 f80e 	bl	8014aac <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8014a90:	687b      	ldr	r3, [r7, #4]
 8014a92:	3301      	adds	r3, #1
 8014a94:	607b      	str	r3, [r7, #4]
 8014a96:	687b      	ldr	r3, [r7, #4]
 8014a98:	2b02      	cmp	r3, #2
 8014a9a:	d9ed      	bls.n	8014a78 <sys_timeouts_init+0xc>
  }
}
 8014a9c:	bf00      	nop
 8014a9e:	3708      	adds	r7, #8
 8014aa0:	46bd      	mov	sp, r7
 8014aa2:	bd80      	pop	{r7, pc}
 8014aa4:	0801ba24 	.word	0x0801ba24
 8014aa8:	08014a09 	.word	0x08014a09

08014aac <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8014aac:	b580      	push	{r7, lr}
 8014aae:	b086      	sub	sp, #24
 8014ab0:	af00      	add	r7, sp, #0
 8014ab2:	60f8      	str	r0, [r7, #12]
 8014ab4:	60b9      	str	r1, [r7, #8]
 8014ab6:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8014ab8:	68fb      	ldr	r3, [r7, #12]
 8014aba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8014abe:	d306      	bcc.n	8014ace <sys_timeout+0x22>
 8014ac0:	4b0a      	ldr	r3, [pc, #40]	; (8014aec <sys_timeout+0x40>)
 8014ac2:	f240 1229 	movw	r2, #297	; 0x129
 8014ac6:	490a      	ldr	r1, [pc, #40]	; (8014af0 <sys_timeout+0x44>)
 8014ac8:	480a      	ldr	r0, [pc, #40]	; (8014af4 <sys_timeout+0x48>)
 8014aca:	f002 fd75 	bl	80175b8 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8014ace:	f7f0 fff7 	bl	8005ac0 <sys_now>
 8014ad2:	4602      	mov	r2, r0
 8014ad4:	68fb      	ldr	r3, [r7, #12]
 8014ad6:	4413      	add	r3, r2
 8014ad8:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8014ada:	687a      	ldr	r2, [r7, #4]
 8014adc:	68b9      	ldr	r1, [r7, #8]
 8014ade:	6978      	ldr	r0, [r7, #20]
 8014ae0:	f7ff ff24 	bl	801492c <sys_timeout_abs>
#endif
}
 8014ae4:	bf00      	nop
 8014ae6:	3718      	adds	r7, #24
 8014ae8:	46bd      	mov	sp, r7
 8014aea:	bd80      	pop	{r7, pc}
 8014aec:	0801b130 	.word	0x0801b130
 8014af0:	0801b1cc 	.word	0x0801b1cc
 8014af4:	0801b1a4 	.word	0x0801b1a4

08014af8 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8014af8:	b580      	push	{r7, lr}
 8014afa:	b084      	sub	sp, #16
 8014afc:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8014afe:	f7f0 ffdf 	bl	8005ac0 <sys_now>
 8014b02:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8014b04:	4b17      	ldr	r3, [pc, #92]	; (8014b64 <sys_check_timeouts+0x6c>)
 8014b06:	681b      	ldr	r3, [r3, #0]
 8014b08:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8014b0a:	68bb      	ldr	r3, [r7, #8]
 8014b0c:	2b00      	cmp	r3, #0
 8014b0e:	d022      	beq.n	8014b56 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8014b10:	68bb      	ldr	r3, [r7, #8]
 8014b12:	685b      	ldr	r3, [r3, #4]
 8014b14:	68fa      	ldr	r2, [r7, #12]
 8014b16:	1ad3      	subs	r3, r2, r3
 8014b18:	0fdb      	lsrs	r3, r3, #31
 8014b1a:	f003 0301 	and.w	r3, r3, #1
 8014b1e:	b2db      	uxtb	r3, r3
 8014b20:	2b00      	cmp	r3, #0
 8014b22:	d11a      	bne.n	8014b5a <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8014b24:	68bb      	ldr	r3, [r7, #8]
 8014b26:	681b      	ldr	r3, [r3, #0]
 8014b28:	4a0e      	ldr	r2, [pc, #56]	; (8014b64 <sys_check_timeouts+0x6c>)
 8014b2a:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8014b2c:	68bb      	ldr	r3, [r7, #8]
 8014b2e:	689b      	ldr	r3, [r3, #8]
 8014b30:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8014b32:	68bb      	ldr	r3, [r7, #8]
 8014b34:	68db      	ldr	r3, [r3, #12]
 8014b36:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8014b38:	68bb      	ldr	r3, [r7, #8]
 8014b3a:	685b      	ldr	r3, [r3, #4]
 8014b3c:	4a0a      	ldr	r2, [pc, #40]	; (8014b68 <sys_check_timeouts+0x70>)
 8014b3e:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8014b40:	68b9      	ldr	r1, [r7, #8]
 8014b42:	2009      	movs	r0, #9
 8014b44:	f7f8 fce4 	bl	800d510 <memp_free>
    if (handler != NULL) {
 8014b48:	687b      	ldr	r3, [r7, #4]
 8014b4a:	2b00      	cmp	r3, #0
 8014b4c:	d0da      	beq.n	8014b04 <sys_check_timeouts+0xc>
      handler(arg);
 8014b4e:	687b      	ldr	r3, [r7, #4]
 8014b50:	6838      	ldr	r0, [r7, #0]
 8014b52:	4798      	blx	r3
  do {
 8014b54:	e7d6      	b.n	8014b04 <sys_check_timeouts+0xc>
      return;
 8014b56:	bf00      	nop
 8014b58:	e000      	b.n	8014b5c <sys_check_timeouts+0x64>
      return;
 8014b5a:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8014b5c:	3710      	adds	r7, #16
 8014b5e:	46bd      	mov	sp, r7
 8014b60:	bd80      	pop	{r7, pc}
 8014b62:	bf00      	nop
 8014b64:	2000467c 	.word	0x2000467c
 8014b68:	20004680 	.word	0x20004680

08014b6c <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8014b6c:	b580      	push	{r7, lr}
 8014b6e:	b082      	sub	sp, #8
 8014b70:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8014b72:	4b16      	ldr	r3, [pc, #88]	; (8014bcc <sys_timeouts_sleeptime+0x60>)
 8014b74:	681b      	ldr	r3, [r3, #0]
 8014b76:	2b00      	cmp	r3, #0
 8014b78:	d102      	bne.n	8014b80 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8014b7a:	f04f 33ff 	mov.w	r3, #4294967295
 8014b7e:	e020      	b.n	8014bc2 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8014b80:	f7f0 ff9e 	bl	8005ac0 <sys_now>
 8014b84:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8014b86:	4b11      	ldr	r3, [pc, #68]	; (8014bcc <sys_timeouts_sleeptime+0x60>)
 8014b88:	681b      	ldr	r3, [r3, #0]
 8014b8a:	685a      	ldr	r2, [r3, #4]
 8014b8c:	687b      	ldr	r3, [r7, #4]
 8014b8e:	1ad3      	subs	r3, r2, r3
 8014b90:	0fdb      	lsrs	r3, r3, #31
 8014b92:	f003 0301 	and.w	r3, r3, #1
 8014b96:	b2db      	uxtb	r3, r3
 8014b98:	2b00      	cmp	r3, #0
 8014b9a:	d001      	beq.n	8014ba0 <sys_timeouts_sleeptime+0x34>
    return 0;
 8014b9c:	2300      	movs	r3, #0
 8014b9e:	e010      	b.n	8014bc2 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8014ba0:	4b0a      	ldr	r3, [pc, #40]	; (8014bcc <sys_timeouts_sleeptime+0x60>)
 8014ba2:	681b      	ldr	r3, [r3, #0]
 8014ba4:	685a      	ldr	r2, [r3, #4]
 8014ba6:	687b      	ldr	r3, [r7, #4]
 8014ba8:	1ad3      	subs	r3, r2, r3
 8014baa:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8014bac:	683b      	ldr	r3, [r7, #0]
 8014bae:	2b00      	cmp	r3, #0
 8014bb0:	da06      	bge.n	8014bc0 <sys_timeouts_sleeptime+0x54>
 8014bb2:	4b07      	ldr	r3, [pc, #28]	; (8014bd0 <sys_timeouts_sleeptime+0x64>)
 8014bb4:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8014bb8:	4906      	ldr	r1, [pc, #24]	; (8014bd4 <sys_timeouts_sleeptime+0x68>)
 8014bba:	4807      	ldr	r0, [pc, #28]	; (8014bd8 <sys_timeouts_sleeptime+0x6c>)
 8014bbc:	f002 fcfc 	bl	80175b8 <iprintf>
    return ret;
 8014bc0:	683b      	ldr	r3, [r7, #0]
  }
}
 8014bc2:	4618      	mov	r0, r3
 8014bc4:	3708      	adds	r7, #8
 8014bc6:	46bd      	mov	sp, r7
 8014bc8:	bd80      	pop	{r7, pc}
 8014bca:	bf00      	nop
 8014bcc:	2000467c 	.word	0x2000467c
 8014bd0:	0801b130 	.word	0x0801b130
 8014bd4:	0801b204 	.word	0x0801b204
 8014bd8:	0801b1a4 	.word	0x0801b1a4

08014bdc <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8014bdc:	b580      	push	{r7, lr}
 8014bde:	b082      	sub	sp, #8
 8014be0:	af00      	add	r7, sp, #0
 8014be2:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8014be4:	4915      	ldr	r1, [pc, #84]	; (8014c3c <etharp_free_entry+0x60>)
 8014be6:	687a      	ldr	r2, [r7, #4]
 8014be8:	4613      	mov	r3, r2
 8014bea:	005b      	lsls	r3, r3, #1
 8014bec:	4413      	add	r3, r2
 8014bee:	00db      	lsls	r3, r3, #3
 8014bf0:	440b      	add	r3, r1
 8014bf2:	681b      	ldr	r3, [r3, #0]
 8014bf4:	2b00      	cmp	r3, #0
 8014bf6:	d013      	beq.n	8014c20 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8014bf8:	4910      	ldr	r1, [pc, #64]	; (8014c3c <etharp_free_entry+0x60>)
 8014bfa:	687a      	ldr	r2, [r7, #4]
 8014bfc:	4613      	mov	r3, r2
 8014bfe:	005b      	lsls	r3, r3, #1
 8014c00:	4413      	add	r3, r2
 8014c02:	00db      	lsls	r3, r3, #3
 8014c04:	440b      	add	r3, r1
 8014c06:	681b      	ldr	r3, [r3, #0]
 8014c08:	4618      	mov	r0, r3
 8014c0a:	f7f9 fb4f 	bl	800e2ac <pbuf_free>
    arp_table[i].q = NULL;
 8014c0e:	490b      	ldr	r1, [pc, #44]	; (8014c3c <etharp_free_entry+0x60>)
 8014c10:	687a      	ldr	r2, [r7, #4]
 8014c12:	4613      	mov	r3, r2
 8014c14:	005b      	lsls	r3, r3, #1
 8014c16:	4413      	add	r3, r2
 8014c18:	00db      	lsls	r3, r3, #3
 8014c1a:	440b      	add	r3, r1
 8014c1c:	2200      	movs	r2, #0
 8014c1e:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8014c20:	4906      	ldr	r1, [pc, #24]	; (8014c3c <etharp_free_entry+0x60>)
 8014c22:	687a      	ldr	r2, [r7, #4]
 8014c24:	4613      	mov	r3, r2
 8014c26:	005b      	lsls	r3, r3, #1
 8014c28:	4413      	add	r3, r2
 8014c2a:	00db      	lsls	r3, r3, #3
 8014c2c:	440b      	add	r3, r1
 8014c2e:	3314      	adds	r3, #20
 8014c30:	2200      	movs	r2, #0
 8014c32:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8014c34:	bf00      	nop
 8014c36:	3708      	adds	r7, #8
 8014c38:	46bd      	mov	sp, r7
 8014c3a:	bd80      	pop	{r7, pc}
 8014c3c:	20004688 	.word	0x20004688

08014c40 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8014c40:	b580      	push	{r7, lr}
 8014c42:	b082      	sub	sp, #8
 8014c44:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014c46:	2300      	movs	r3, #0
 8014c48:	607b      	str	r3, [r7, #4]
 8014c4a:	e096      	b.n	8014d7a <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8014c4c:	494f      	ldr	r1, [pc, #316]	; (8014d8c <etharp_tmr+0x14c>)
 8014c4e:	687a      	ldr	r2, [r7, #4]
 8014c50:	4613      	mov	r3, r2
 8014c52:	005b      	lsls	r3, r3, #1
 8014c54:	4413      	add	r3, r2
 8014c56:	00db      	lsls	r3, r3, #3
 8014c58:	440b      	add	r3, r1
 8014c5a:	3314      	adds	r3, #20
 8014c5c:	781b      	ldrb	r3, [r3, #0]
 8014c5e:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8014c60:	78fb      	ldrb	r3, [r7, #3]
 8014c62:	2b00      	cmp	r3, #0
 8014c64:	f000 8086 	beq.w	8014d74 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8014c68:	4948      	ldr	r1, [pc, #288]	; (8014d8c <etharp_tmr+0x14c>)
 8014c6a:	687a      	ldr	r2, [r7, #4]
 8014c6c:	4613      	mov	r3, r2
 8014c6e:	005b      	lsls	r3, r3, #1
 8014c70:	4413      	add	r3, r2
 8014c72:	00db      	lsls	r3, r3, #3
 8014c74:	440b      	add	r3, r1
 8014c76:	3312      	adds	r3, #18
 8014c78:	881b      	ldrh	r3, [r3, #0]
 8014c7a:	3301      	adds	r3, #1
 8014c7c:	b298      	uxth	r0, r3
 8014c7e:	4943      	ldr	r1, [pc, #268]	; (8014d8c <etharp_tmr+0x14c>)
 8014c80:	687a      	ldr	r2, [r7, #4]
 8014c82:	4613      	mov	r3, r2
 8014c84:	005b      	lsls	r3, r3, #1
 8014c86:	4413      	add	r3, r2
 8014c88:	00db      	lsls	r3, r3, #3
 8014c8a:	440b      	add	r3, r1
 8014c8c:	3312      	adds	r3, #18
 8014c8e:	4602      	mov	r2, r0
 8014c90:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8014c92:	493e      	ldr	r1, [pc, #248]	; (8014d8c <etharp_tmr+0x14c>)
 8014c94:	687a      	ldr	r2, [r7, #4]
 8014c96:	4613      	mov	r3, r2
 8014c98:	005b      	lsls	r3, r3, #1
 8014c9a:	4413      	add	r3, r2
 8014c9c:	00db      	lsls	r3, r3, #3
 8014c9e:	440b      	add	r3, r1
 8014ca0:	3312      	adds	r3, #18
 8014ca2:	881b      	ldrh	r3, [r3, #0]
 8014ca4:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8014ca8:	d215      	bcs.n	8014cd6 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8014caa:	4938      	ldr	r1, [pc, #224]	; (8014d8c <etharp_tmr+0x14c>)
 8014cac:	687a      	ldr	r2, [r7, #4]
 8014cae:	4613      	mov	r3, r2
 8014cb0:	005b      	lsls	r3, r3, #1
 8014cb2:	4413      	add	r3, r2
 8014cb4:	00db      	lsls	r3, r3, #3
 8014cb6:	440b      	add	r3, r1
 8014cb8:	3314      	adds	r3, #20
 8014cba:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8014cbc:	2b01      	cmp	r3, #1
 8014cbe:	d10e      	bne.n	8014cde <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8014cc0:	4932      	ldr	r1, [pc, #200]	; (8014d8c <etharp_tmr+0x14c>)
 8014cc2:	687a      	ldr	r2, [r7, #4]
 8014cc4:	4613      	mov	r3, r2
 8014cc6:	005b      	lsls	r3, r3, #1
 8014cc8:	4413      	add	r3, r2
 8014cca:	00db      	lsls	r3, r3, #3
 8014ccc:	440b      	add	r3, r1
 8014cce:	3312      	adds	r3, #18
 8014cd0:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8014cd2:	2b04      	cmp	r3, #4
 8014cd4:	d903      	bls.n	8014cde <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8014cd6:	6878      	ldr	r0, [r7, #4]
 8014cd8:	f7ff ff80 	bl	8014bdc <etharp_free_entry>
 8014cdc:	e04a      	b.n	8014d74 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8014cde:	492b      	ldr	r1, [pc, #172]	; (8014d8c <etharp_tmr+0x14c>)
 8014ce0:	687a      	ldr	r2, [r7, #4]
 8014ce2:	4613      	mov	r3, r2
 8014ce4:	005b      	lsls	r3, r3, #1
 8014ce6:	4413      	add	r3, r2
 8014ce8:	00db      	lsls	r3, r3, #3
 8014cea:	440b      	add	r3, r1
 8014cec:	3314      	adds	r3, #20
 8014cee:	781b      	ldrb	r3, [r3, #0]
 8014cf0:	2b03      	cmp	r3, #3
 8014cf2:	d10a      	bne.n	8014d0a <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8014cf4:	4925      	ldr	r1, [pc, #148]	; (8014d8c <etharp_tmr+0x14c>)
 8014cf6:	687a      	ldr	r2, [r7, #4]
 8014cf8:	4613      	mov	r3, r2
 8014cfa:	005b      	lsls	r3, r3, #1
 8014cfc:	4413      	add	r3, r2
 8014cfe:	00db      	lsls	r3, r3, #3
 8014d00:	440b      	add	r3, r1
 8014d02:	3314      	adds	r3, #20
 8014d04:	2204      	movs	r2, #4
 8014d06:	701a      	strb	r2, [r3, #0]
 8014d08:	e034      	b.n	8014d74 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8014d0a:	4920      	ldr	r1, [pc, #128]	; (8014d8c <etharp_tmr+0x14c>)
 8014d0c:	687a      	ldr	r2, [r7, #4]
 8014d0e:	4613      	mov	r3, r2
 8014d10:	005b      	lsls	r3, r3, #1
 8014d12:	4413      	add	r3, r2
 8014d14:	00db      	lsls	r3, r3, #3
 8014d16:	440b      	add	r3, r1
 8014d18:	3314      	adds	r3, #20
 8014d1a:	781b      	ldrb	r3, [r3, #0]
 8014d1c:	2b04      	cmp	r3, #4
 8014d1e:	d10a      	bne.n	8014d36 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8014d20:	491a      	ldr	r1, [pc, #104]	; (8014d8c <etharp_tmr+0x14c>)
 8014d22:	687a      	ldr	r2, [r7, #4]
 8014d24:	4613      	mov	r3, r2
 8014d26:	005b      	lsls	r3, r3, #1
 8014d28:	4413      	add	r3, r2
 8014d2a:	00db      	lsls	r3, r3, #3
 8014d2c:	440b      	add	r3, r1
 8014d2e:	3314      	adds	r3, #20
 8014d30:	2202      	movs	r2, #2
 8014d32:	701a      	strb	r2, [r3, #0]
 8014d34:	e01e      	b.n	8014d74 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8014d36:	4915      	ldr	r1, [pc, #84]	; (8014d8c <etharp_tmr+0x14c>)
 8014d38:	687a      	ldr	r2, [r7, #4]
 8014d3a:	4613      	mov	r3, r2
 8014d3c:	005b      	lsls	r3, r3, #1
 8014d3e:	4413      	add	r3, r2
 8014d40:	00db      	lsls	r3, r3, #3
 8014d42:	440b      	add	r3, r1
 8014d44:	3314      	adds	r3, #20
 8014d46:	781b      	ldrb	r3, [r3, #0]
 8014d48:	2b01      	cmp	r3, #1
 8014d4a:	d113      	bne.n	8014d74 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8014d4c:	490f      	ldr	r1, [pc, #60]	; (8014d8c <etharp_tmr+0x14c>)
 8014d4e:	687a      	ldr	r2, [r7, #4]
 8014d50:	4613      	mov	r3, r2
 8014d52:	005b      	lsls	r3, r3, #1
 8014d54:	4413      	add	r3, r2
 8014d56:	00db      	lsls	r3, r3, #3
 8014d58:	440b      	add	r3, r1
 8014d5a:	3308      	adds	r3, #8
 8014d5c:	6818      	ldr	r0, [r3, #0]
 8014d5e:	687a      	ldr	r2, [r7, #4]
 8014d60:	4613      	mov	r3, r2
 8014d62:	005b      	lsls	r3, r3, #1
 8014d64:	4413      	add	r3, r2
 8014d66:	00db      	lsls	r3, r3, #3
 8014d68:	4a08      	ldr	r2, [pc, #32]	; (8014d8c <etharp_tmr+0x14c>)
 8014d6a:	4413      	add	r3, r2
 8014d6c:	3304      	adds	r3, #4
 8014d6e:	4619      	mov	r1, r3
 8014d70:	f000 fe6e 	bl	8015a50 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014d74:	687b      	ldr	r3, [r7, #4]
 8014d76:	3301      	adds	r3, #1
 8014d78:	607b      	str	r3, [r7, #4]
 8014d7a:	687b      	ldr	r3, [r7, #4]
 8014d7c:	2b09      	cmp	r3, #9
 8014d7e:	f77f af65 	ble.w	8014c4c <etharp_tmr+0xc>
      }
    }
  }
}
 8014d82:	bf00      	nop
 8014d84:	3708      	adds	r7, #8
 8014d86:	46bd      	mov	sp, r7
 8014d88:	bd80      	pop	{r7, pc}
 8014d8a:	bf00      	nop
 8014d8c:	20004688 	.word	0x20004688

08014d90 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8014d90:	b580      	push	{r7, lr}
 8014d92:	b08a      	sub	sp, #40	; 0x28
 8014d94:	af00      	add	r7, sp, #0
 8014d96:	60f8      	str	r0, [r7, #12]
 8014d98:	460b      	mov	r3, r1
 8014d9a:	607a      	str	r2, [r7, #4]
 8014d9c:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8014d9e:	230a      	movs	r3, #10
 8014da0:	84fb      	strh	r3, [r7, #38]	; 0x26
 8014da2:	230a      	movs	r3, #10
 8014da4:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8014da6:	230a      	movs	r3, #10
 8014da8:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8014daa:	2300      	movs	r3, #0
 8014dac:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8014dae:	230a      	movs	r3, #10
 8014db0:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8014db2:	2300      	movs	r3, #0
 8014db4:	83bb      	strh	r3, [r7, #28]
 8014db6:	2300      	movs	r3, #0
 8014db8:	837b      	strh	r3, [r7, #26]
 8014dba:	2300      	movs	r3, #0
 8014dbc:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014dbe:	2300      	movs	r3, #0
 8014dc0:	843b      	strh	r3, [r7, #32]
 8014dc2:	e0ae      	b.n	8014f22 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8014dc4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014dc8:	49a6      	ldr	r1, [pc, #664]	; (8015064 <etharp_find_entry+0x2d4>)
 8014dca:	4613      	mov	r3, r2
 8014dcc:	005b      	lsls	r3, r3, #1
 8014dce:	4413      	add	r3, r2
 8014dd0:	00db      	lsls	r3, r3, #3
 8014dd2:	440b      	add	r3, r1
 8014dd4:	3314      	adds	r3, #20
 8014dd6:	781b      	ldrb	r3, [r3, #0]
 8014dd8:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8014dda:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8014dde:	2b0a      	cmp	r3, #10
 8014de0:	d105      	bne.n	8014dee <etharp_find_entry+0x5e>
 8014de2:	7dfb      	ldrb	r3, [r7, #23]
 8014de4:	2b00      	cmp	r3, #0
 8014de6:	d102      	bne.n	8014dee <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8014de8:	8c3b      	ldrh	r3, [r7, #32]
 8014dea:	847b      	strh	r3, [r7, #34]	; 0x22
 8014dec:	e095      	b.n	8014f1a <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8014dee:	7dfb      	ldrb	r3, [r7, #23]
 8014df0:	2b00      	cmp	r3, #0
 8014df2:	f000 8092 	beq.w	8014f1a <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8014df6:	7dfb      	ldrb	r3, [r7, #23]
 8014df8:	2b01      	cmp	r3, #1
 8014dfa:	d009      	beq.n	8014e10 <etharp_find_entry+0x80>
 8014dfc:	7dfb      	ldrb	r3, [r7, #23]
 8014dfe:	2b01      	cmp	r3, #1
 8014e00:	d806      	bhi.n	8014e10 <etharp_find_entry+0x80>
 8014e02:	4b99      	ldr	r3, [pc, #612]	; (8015068 <etharp_find_entry+0x2d8>)
 8014e04:	f44f 7292 	mov.w	r2, #292	; 0x124
 8014e08:	4998      	ldr	r1, [pc, #608]	; (801506c <etharp_find_entry+0x2dc>)
 8014e0a:	4899      	ldr	r0, [pc, #612]	; (8015070 <etharp_find_entry+0x2e0>)
 8014e0c:	f002 fbd4 	bl	80175b8 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8014e10:	68fb      	ldr	r3, [r7, #12]
 8014e12:	2b00      	cmp	r3, #0
 8014e14:	d020      	beq.n	8014e58 <etharp_find_entry+0xc8>
 8014e16:	68fb      	ldr	r3, [r7, #12]
 8014e18:	6819      	ldr	r1, [r3, #0]
 8014e1a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014e1e:	4891      	ldr	r0, [pc, #580]	; (8015064 <etharp_find_entry+0x2d4>)
 8014e20:	4613      	mov	r3, r2
 8014e22:	005b      	lsls	r3, r3, #1
 8014e24:	4413      	add	r3, r2
 8014e26:	00db      	lsls	r3, r3, #3
 8014e28:	4403      	add	r3, r0
 8014e2a:	3304      	adds	r3, #4
 8014e2c:	681b      	ldr	r3, [r3, #0]
 8014e2e:	4299      	cmp	r1, r3
 8014e30:	d112      	bne.n	8014e58 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8014e32:	687b      	ldr	r3, [r7, #4]
 8014e34:	2b00      	cmp	r3, #0
 8014e36:	d00c      	beq.n	8014e52 <etharp_find_entry+0xc2>
 8014e38:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014e3c:	4989      	ldr	r1, [pc, #548]	; (8015064 <etharp_find_entry+0x2d4>)
 8014e3e:	4613      	mov	r3, r2
 8014e40:	005b      	lsls	r3, r3, #1
 8014e42:	4413      	add	r3, r2
 8014e44:	00db      	lsls	r3, r3, #3
 8014e46:	440b      	add	r3, r1
 8014e48:	3308      	adds	r3, #8
 8014e4a:	681b      	ldr	r3, [r3, #0]
 8014e4c:	687a      	ldr	r2, [r7, #4]
 8014e4e:	429a      	cmp	r2, r3
 8014e50:	d102      	bne.n	8014e58 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8014e52:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014e56:	e100      	b.n	801505a <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8014e58:	7dfb      	ldrb	r3, [r7, #23]
 8014e5a:	2b01      	cmp	r3, #1
 8014e5c:	d140      	bne.n	8014ee0 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8014e5e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014e62:	4980      	ldr	r1, [pc, #512]	; (8015064 <etharp_find_entry+0x2d4>)
 8014e64:	4613      	mov	r3, r2
 8014e66:	005b      	lsls	r3, r3, #1
 8014e68:	4413      	add	r3, r2
 8014e6a:	00db      	lsls	r3, r3, #3
 8014e6c:	440b      	add	r3, r1
 8014e6e:	681b      	ldr	r3, [r3, #0]
 8014e70:	2b00      	cmp	r3, #0
 8014e72:	d01a      	beq.n	8014eaa <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8014e74:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014e78:	497a      	ldr	r1, [pc, #488]	; (8015064 <etharp_find_entry+0x2d4>)
 8014e7a:	4613      	mov	r3, r2
 8014e7c:	005b      	lsls	r3, r3, #1
 8014e7e:	4413      	add	r3, r2
 8014e80:	00db      	lsls	r3, r3, #3
 8014e82:	440b      	add	r3, r1
 8014e84:	3312      	adds	r3, #18
 8014e86:	881b      	ldrh	r3, [r3, #0]
 8014e88:	8bba      	ldrh	r2, [r7, #28]
 8014e8a:	429a      	cmp	r2, r3
 8014e8c:	d845      	bhi.n	8014f1a <etharp_find_entry+0x18a>
            old_queue = i;
 8014e8e:	8c3b      	ldrh	r3, [r7, #32]
 8014e90:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8014e92:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014e96:	4973      	ldr	r1, [pc, #460]	; (8015064 <etharp_find_entry+0x2d4>)
 8014e98:	4613      	mov	r3, r2
 8014e9a:	005b      	lsls	r3, r3, #1
 8014e9c:	4413      	add	r3, r2
 8014e9e:	00db      	lsls	r3, r3, #3
 8014ea0:	440b      	add	r3, r1
 8014ea2:	3312      	adds	r3, #18
 8014ea4:	881b      	ldrh	r3, [r3, #0]
 8014ea6:	83bb      	strh	r3, [r7, #28]
 8014ea8:	e037      	b.n	8014f1a <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8014eaa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014eae:	496d      	ldr	r1, [pc, #436]	; (8015064 <etharp_find_entry+0x2d4>)
 8014eb0:	4613      	mov	r3, r2
 8014eb2:	005b      	lsls	r3, r3, #1
 8014eb4:	4413      	add	r3, r2
 8014eb6:	00db      	lsls	r3, r3, #3
 8014eb8:	440b      	add	r3, r1
 8014eba:	3312      	adds	r3, #18
 8014ebc:	881b      	ldrh	r3, [r3, #0]
 8014ebe:	8b7a      	ldrh	r2, [r7, #26]
 8014ec0:	429a      	cmp	r2, r3
 8014ec2:	d82a      	bhi.n	8014f1a <etharp_find_entry+0x18a>
            old_pending = i;
 8014ec4:	8c3b      	ldrh	r3, [r7, #32]
 8014ec6:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8014ec8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014ecc:	4965      	ldr	r1, [pc, #404]	; (8015064 <etharp_find_entry+0x2d4>)
 8014ece:	4613      	mov	r3, r2
 8014ed0:	005b      	lsls	r3, r3, #1
 8014ed2:	4413      	add	r3, r2
 8014ed4:	00db      	lsls	r3, r3, #3
 8014ed6:	440b      	add	r3, r1
 8014ed8:	3312      	adds	r3, #18
 8014eda:	881b      	ldrh	r3, [r3, #0]
 8014edc:	837b      	strh	r3, [r7, #26]
 8014ede:	e01c      	b.n	8014f1a <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8014ee0:	7dfb      	ldrb	r3, [r7, #23]
 8014ee2:	2b01      	cmp	r3, #1
 8014ee4:	d919      	bls.n	8014f1a <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8014ee6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014eea:	495e      	ldr	r1, [pc, #376]	; (8015064 <etharp_find_entry+0x2d4>)
 8014eec:	4613      	mov	r3, r2
 8014eee:	005b      	lsls	r3, r3, #1
 8014ef0:	4413      	add	r3, r2
 8014ef2:	00db      	lsls	r3, r3, #3
 8014ef4:	440b      	add	r3, r1
 8014ef6:	3312      	adds	r3, #18
 8014ef8:	881b      	ldrh	r3, [r3, #0]
 8014efa:	8b3a      	ldrh	r2, [r7, #24]
 8014efc:	429a      	cmp	r2, r3
 8014efe:	d80c      	bhi.n	8014f1a <etharp_find_entry+0x18a>
            old_stable = i;
 8014f00:	8c3b      	ldrh	r3, [r7, #32]
 8014f02:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8014f04:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014f08:	4956      	ldr	r1, [pc, #344]	; (8015064 <etharp_find_entry+0x2d4>)
 8014f0a:	4613      	mov	r3, r2
 8014f0c:	005b      	lsls	r3, r3, #1
 8014f0e:	4413      	add	r3, r2
 8014f10:	00db      	lsls	r3, r3, #3
 8014f12:	440b      	add	r3, r1
 8014f14:	3312      	adds	r3, #18
 8014f16:	881b      	ldrh	r3, [r3, #0]
 8014f18:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014f1a:	8c3b      	ldrh	r3, [r7, #32]
 8014f1c:	3301      	adds	r3, #1
 8014f1e:	b29b      	uxth	r3, r3
 8014f20:	843b      	strh	r3, [r7, #32]
 8014f22:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014f26:	2b09      	cmp	r3, #9
 8014f28:	f77f af4c 	ble.w	8014dc4 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8014f2c:	7afb      	ldrb	r3, [r7, #11]
 8014f2e:	f003 0302 	and.w	r3, r3, #2
 8014f32:	2b00      	cmp	r3, #0
 8014f34:	d108      	bne.n	8014f48 <etharp_find_entry+0x1b8>
 8014f36:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8014f3a:	2b0a      	cmp	r3, #10
 8014f3c:	d107      	bne.n	8014f4e <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8014f3e:	7afb      	ldrb	r3, [r7, #11]
 8014f40:	f003 0301 	and.w	r3, r3, #1
 8014f44:	2b00      	cmp	r3, #0
 8014f46:	d102      	bne.n	8014f4e <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8014f48:	f04f 33ff 	mov.w	r3, #4294967295
 8014f4c:	e085      	b.n	801505a <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8014f4e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8014f52:	2b09      	cmp	r3, #9
 8014f54:	dc02      	bgt.n	8014f5c <etharp_find_entry+0x1cc>
    i = empty;
 8014f56:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014f58:	843b      	strh	r3, [r7, #32]
 8014f5a:	e039      	b.n	8014fd0 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8014f5c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8014f60:	2b09      	cmp	r3, #9
 8014f62:	dc14      	bgt.n	8014f8e <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8014f64:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014f66:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8014f68:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014f6c:	493d      	ldr	r1, [pc, #244]	; (8015064 <etharp_find_entry+0x2d4>)
 8014f6e:	4613      	mov	r3, r2
 8014f70:	005b      	lsls	r3, r3, #1
 8014f72:	4413      	add	r3, r2
 8014f74:	00db      	lsls	r3, r3, #3
 8014f76:	440b      	add	r3, r1
 8014f78:	681b      	ldr	r3, [r3, #0]
 8014f7a:	2b00      	cmp	r3, #0
 8014f7c:	d018      	beq.n	8014fb0 <etharp_find_entry+0x220>
 8014f7e:	4b3a      	ldr	r3, [pc, #232]	; (8015068 <etharp_find_entry+0x2d8>)
 8014f80:	f240 126d 	movw	r2, #365	; 0x16d
 8014f84:	493b      	ldr	r1, [pc, #236]	; (8015074 <etharp_find_entry+0x2e4>)
 8014f86:	483a      	ldr	r0, [pc, #232]	; (8015070 <etharp_find_entry+0x2e0>)
 8014f88:	f002 fb16 	bl	80175b8 <iprintf>
 8014f8c:	e010      	b.n	8014fb0 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8014f8e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8014f92:	2b09      	cmp	r3, #9
 8014f94:	dc02      	bgt.n	8014f9c <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8014f96:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8014f98:	843b      	strh	r3, [r7, #32]
 8014f9a:	e009      	b.n	8014fb0 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8014f9c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8014fa0:	2b09      	cmp	r3, #9
 8014fa2:	dc02      	bgt.n	8014faa <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8014fa4:	8bfb      	ldrh	r3, [r7, #30]
 8014fa6:	843b      	strh	r3, [r7, #32]
 8014fa8:	e002      	b.n	8014fb0 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8014faa:	f04f 33ff 	mov.w	r3, #4294967295
 8014fae:	e054      	b.n	801505a <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8014fb0:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014fb4:	2b09      	cmp	r3, #9
 8014fb6:	dd06      	ble.n	8014fc6 <etharp_find_entry+0x236>
 8014fb8:	4b2b      	ldr	r3, [pc, #172]	; (8015068 <etharp_find_entry+0x2d8>)
 8014fba:	f240 127f 	movw	r2, #383	; 0x17f
 8014fbe:	492e      	ldr	r1, [pc, #184]	; (8015078 <etharp_find_entry+0x2e8>)
 8014fc0:	482b      	ldr	r0, [pc, #172]	; (8015070 <etharp_find_entry+0x2e0>)
 8014fc2:	f002 faf9 	bl	80175b8 <iprintf>
    etharp_free_entry(i);
 8014fc6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014fca:	4618      	mov	r0, r3
 8014fcc:	f7ff fe06 	bl	8014bdc <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8014fd0:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014fd4:	2b09      	cmp	r3, #9
 8014fd6:	dd06      	ble.n	8014fe6 <etharp_find_entry+0x256>
 8014fd8:	4b23      	ldr	r3, [pc, #140]	; (8015068 <etharp_find_entry+0x2d8>)
 8014fda:	f240 1283 	movw	r2, #387	; 0x183
 8014fde:	4926      	ldr	r1, [pc, #152]	; (8015078 <etharp_find_entry+0x2e8>)
 8014fe0:	4823      	ldr	r0, [pc, #140]	; (8015070 <etharp_find_entry+0x2e0>)
 8014fe2:	f002 fae9 	bl	80175b8 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8014fe6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014fea:	491e      	ldr	r1, [pc, #120]	; (8015064 <etharp_find_entry+0x2d4>)
 8014fec:	4613      	mov	r3, r2
 8014fee:	005b      	lsls	r3, r3, #1
 8014ff0:	4413      	add	r3, r2
 8014ff2:	00db      	lsls	r3, r3, #3
 8014ff4:	440b      	add	r3, r1
 8014ff6:	3314      	adds	r3, #20
 8014ff8:	781b      	ldrb	r3, [r3, #0]
 8014ffa:	2b00      	cmp	r3, #0
 8014ffc:	d006      	beq.n	801500c <etharp_find_entry+0x27c>
 8014ffe:	4b1a      	ldr	r3, [pc, #104]	; (8015068 <etharp_find_entry+0x2d8>)
 8015000:	f240 1285 	movw	r2, #389	; 0x185
 8015004:	491d      	ldr	r1, [pc, #116]	; (801507c <etharp_find_entry+0x2ec>)
 8015006:	481a      	ldr	r0, [pc, #104]	; (8015070 <etharp_find_entry+0x2e0>)
 8015008:	f002 fad6 	bl	80175b8 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 801500c:	68fb      	ldr	r3, [r7, #12]
 801500e:	2b00      	cmp	r3, #0
 8015010:	d00b      	beq.n	801502a <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8015012:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015016:	68fb      	ldr	r3, [r7, #12]
 8015018:	6819      	ldr	r1, [r3, #0]
 801501a:	4812      	ldr	r0, [pc, #72]	; (8015064 <etharp_find_entry+0x2d4>)
 801501c:	4613      	mov	r3, r2
 801501e:	005b      	lsls	r3, r3, #1
 8015020:	4413      	add	r3, r2
 8015022:	00db      	lsls	r3, r3, #3
 8015024:	4403      	add	r3, r0
 8015026:	3304      	adds	r3, #4
 8015028:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 801502a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801502e:	490d      	ldr	r1, [pc, #52]	; (8015064 <etharp_find_entry+0x2d4>)
 8015030:	4613      	mov	r3, r2
 8015032:	005b      	lsls	r3, r3, #1
 8015034:	4413      	add	r3, r2
 8015036:	00db      	lsls	r3, r3, #3
 8015038:	440b      	add	r3, r1
 801503a:	3312      	adds	r3, #18
 801503c:	2200      	movs	r2, #0
 801503e:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8015040:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015044:	4907      	ldr	r1, [pc, #28]	; (8015064 <etharp_find_entry+0x2d4>)
 8015046:	4613      	mov	r3, r2
 8015048:	005b      	lsls	r3, r3, #1
 801504a:	4413      	add	r3, r2
 801504c:	00db      	lsls	r3, r3, #3
 801504e:	440b      	add	r3, r1
 8015050:	3308      	adds	r3, #8
 8015052:	687a      	ldr	r2, [r7, #4]
 8015054:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8015056:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 801505a:	4618      	mov	r0, r3
 801505c:	3728      	adds	r7, #40	; 0x28
 801505e:	46bd      	mov	sp, r7
 8015060:	bd80      	pop	{r7, pc}
 8015062:	bf00      	nop
 8015064:	20004688 	.word	0x20004688
 8015068:	0801b218 	.word	0x0801b218
 801506c:	0801b250 	.word	0x0801b250
 8015070:	0801b290 	.word	0x0801b290
 8015074:	0801b2b8 	.word	0x0801b2b8
 8015078:	0801b2d0 	.word	0x0801b2d0
 801507c:	0801b2e4 	.word	0x0801b2e4

08015080 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8015080:	b580      	push	{r7, lr}
 8015082:	b088      	sub	sp, #32
 8015084:	af02      	add	r7, sp, #8
 8015086:	60f8      	str	r0, [r7, #12]
 8015088:	60b9      	str	r1, [r7, #8]
 801508a:	607a      	str	r2, [r7, #4]
 801508c:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 801508e:	68fb      	ldr	r3, [r7, #12]
 8015090:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8015094:	2b06      	cmp	r3, #6
 8015096:	d006      	beq.n	80150a6 <etharp_update_arp_entry+0x26>
 8015098:	4b48      	ldr	r3, [pc, #288]	; (80151bc <etharp_update_arp_entry+0x13c>)
 801509a:	f240 12a9 	movw	r2, #425	; 0x1a9
 801509e:	4948      	ldr	r1, [pc, #288]	; (80151c0 <etharp_update_arp_entry+0x140>)
 80150a0:	4848      	ldr	r0, [pc, #288]	; (80151c4 <etharp_update_arp_entry+0x144>)
 80150a2:	f002 fa89 	bl	80175b8 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 80150a6:	68bb      	ldr	r3, [r7, #8]
 80150a8:	2b00      	cmp	r3, #0
 80150aa:	d012      	beq.n	80150d2 <etharp_update_arp_entry+0x52>
 80150ac:	68bb      	ldr	r3, [r7, #8]
 80150ae:	681b      	ldr	r3, [r3, #0]
 80150b0:	2b00      	cmp	r3, #0
 80150b2:	d00e      	beq.n	80150d2 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80150b4:	68bb      	ldr	r3, [r7, #8]
 80150b6:	681b      	ldr	r3, [r3, #0]
 80150b8:	68f9      	ldr	r1, [r7, #12]
 80150ba:	4618      	mov	r0, r3
 80150bc:	f001 f8f4 	bl	80162a8 <ip4_addr_isbroadcast_u32>
 80150c0:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 80150c2:	2b00      	cmp	r3, #0
 80150c4:	d105      	bne.n	80150d2 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 80150c6:	68bb      	ldr	r3, [r7, #8]
 80150c8:	681b      	ldr	r3, [r3, #0]
 80150ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80150ce:	2be0      	cmp	r3, #224	; 0xe0
 80150d0:	d102      	bne.n	80150d8 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80150d2:	f06f 030f 	mvn.w	r3, #15
 80150d6:	e06c      	b.n	80151b2 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 80150d8:	78fb      	ldrb	r3, [r7, #3]
 80150da:	68fa      	ldr	r2, [r7, #12]
 80150dc:	4619      	mov	r1, r3
 80150de:	68b8      	ldr	r0, [r7, #8]
 80150e0:	f7ff fe56 	bl	8014d90 <etharp_find_entry>
 80150e4:	4603      	mov	r3, r0
 80150e6:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 80150e8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80150ec:	2b00      	cmp	r3, #0
 80150ee:	da02      	bge.n	80150f6 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 80150f0:	8afb      	ldrh	r3, [r7, #22]
 80150f2:	b25b      	sxtb	r3, r3
 80150f4:	e05d      	b.n	80151b2 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 80150f6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80150fa:	4933      	ldr	r1, [pc, #204]	; (80151c8 <etharp_update_arp_entry+0x148>)
 80150fc:	4613      	mov	r3, r2
 80150fe:	005b      	lsls	r3, r3, #1
 8015100:	4413      	add	r3, r2
 8015102:	00db      	lsls	r3, r3, #3
 8015104:	440b      	add	r3, r1
 8015106:	3314      	adds	r3, #20
 8015108:	2202      	movs	r2, #2
 801510a:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 801510c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015110:	492d      	ldr	r1, [pc, #180]	; (80151c8 <etharp_update_arp_entry+0x148>)
 8015112:	4613      	mov	r3, r2
 8015114:	005b      	lsls	r3, r3, #1
 8015116:	4413      	add	r3, r2
 8015118:	00db      	lsls	r3, r3, #3
 801511a:	440b      	add	r3, r1
 801511c:	3308      	adds	r3, #8
 801511e:	68fa      	ldr	r2, [r7, #12]
 8015120:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8015122:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015126:	4613      	mov	r3, r2
 8015128:	005b      	lsls	r3, r3, #1
 801512a:	4413      	add	r3, r2
 801512c:	00db      	lsls	r3, r3, #3
 801512e:	3308      	adds	r3, #8
 8015130:	4a25      	ldr	r2, [pc, #148]	; (80151c8 <etharp_update_arp_entry+0x148>)
 8015132:	4413      	add	r3, r2
 8015134:	3304      	adds	r3, #4
 8015136:	2206      	movs	r2, #6
 8015138:	6879      	ldr	r1, [r7, #4]
 801513a:	4618      	mov	r0, r3
 801513c:	f002 fa29 	bl	8017592 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8015140:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015144:	4920      	ldr	r1, [pc, #128]	; (80151c8 <etharp_update_arp_entry+0x148>)
 8015146:	4613      	mov	r3, r2
 8015148:	005b      	lsls	r3, r3, #1
 801514a:	4413      	add	r3, r2
 801514c:	00db      	lsls	r3, r3, #3
 801514e:	440b      	add	r3, r1
 8015150:	3312      	adds	r3, #18
 8015152:	2200      	movs	r2, #0
 8015154:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8015156:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801515a:	491b      	ldr	r1, [pc, #108]	; (80151c8 <etharp_update_arp_entry+0x148>)
 801515c:	4613      	mov	r3, r2
 801515e:	005b      	lsls	r3, r3, #1
 8015160:	4413      	add	r3, r2
 8015162:	00db      	lsls	r3, r3, #3
 8015164:	440b      	add	r3, r1
 8015166:	681b      	ldr	r3, [r3, #0]
 8015168:	2b00      	cmp	r3, #0
 801516a:	d021      	beq.n	80151b0 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 801516c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015170:	4915      	ldr	r1, [pc, #84]	; (80151c8 <etharp_update_arp_entry+0x148>)
 8015172:	4613      	mov	r3, r2
 8015174:	005b      	lsls	r3, r3, #1
 8015176:	4413      	add	r3, r2
 8015178:	00db      	lsls	r3, r3, #3
 801517a:	440b      	add	r3, r1
 801517c:	681b      	ldr	r3, [r3, #0]
 801517e:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8015180:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015184:	4910      	ldr	r1, [pc, #64]	; (80151c8 <etharp_update_arp_entry+0x148>)
 8015186:	4613      	mov	r3, r2
 8015188:	005b      	lsls	r3, r3, #1
 801518a:	4413      	add	r3, r2
 801518c:	00db      	lsls	r3, r3, #3
 801518e:	440b      	add	r3, r1
 8015190:	2200      	movs	r2, #0
 8015192:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8015194:	68fb      	ldr	r3, [r7, #12]
 8015196:	f103 0226 	add.w	r2, r3, #38	; 0x26
 801519a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801519e:	9300      	str	r3, [sp, #0]
 80151a0:	687b      	ldr	r3, [r7, #4]
 80151a2:	6939      	ldr	r1, [r7, #16]
 80151a4:	68f8      	ldr	r0, [r7, #12]
 80151a6:	f001 ff83 	bl	80170b0 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 80151aa:	6938      	ldr	r0, [r7, #16]
 80151ac:	f7f9 f87e 	bl	800e2ac <pbuf_free>
  }
  return ERR_OK;
 80151b0:	2300      	movs	r3, #0
}
 80151b2:	4618      	mov	r0, r3
 80151b4:	3718      	adds	r7, #24
 80151b6:	46bd      	mov	sp, r7
 80151b8:	bd80      	pop	{r7, pc}
 80151ba:	bf00      	nop
 80151bc:	0801b218 	.word	0x0801b218
 80151c0:	0801b310 	.word	0x0801b310
 80151c4:	0801b290 	.word	0x0801b290
 80151c8:	20004688 	.word	0x20004688

080151cc <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 80151cc:	b580      	push	{r7, lr}
 80151ce:	b084      	sub	sp, #16
 80151d0:	af00      	add	r7, sp, #0
 80151d2:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80151d4:	2300      	movs	r3, #0
 80151d6:	60fb      	str	r3, [r7, #12]
 80151d8:	e01e      	b.n	8015218 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 80151da:	4913      	ldr	r1, [pc, #76]	; (8015228 <etharp_cleanup_netif+0x5c>)
 80151dc:	68fa      	ldr	r2, [r7, #12]
 80151de:	4613      	mov	r3, r2
 80151e0:	005b      	lsls	r3, r3, #1
 80151e2:	4413      	add	r3, r2
 80151e4:	00db      	lsls	r3, r3, #3
 80151e6:	440b      	add	r3, r1
 80151e8:	3314      	adds	r3, #20
 80151ea:	781b      	ldrb	r3, [r3, #0]
 80151ec:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 80151ee:	7afb      	ldrb	r3, [r7, #11]
 80151f0:	2b00      	cmp	r3, #0
 80151f2:	d00e      	beq.n	8015212 <etharp_cleanup_netif+0x46>
 80151f4:	490c      	ldr	r1, [pc, #48]	; (8015228 <etharp_cleanup_netif+0x5c>)
 80151f6:	68fa      	ldr	r2, [r7, #12]
 80151f8:	4613      	mov	r3, r2
 80151fa:	005b      	lsls	r3, r3, #1
 80151fc:	4413      	add	r3, r2
 80151fe:	00db      	lsls	r3, r3, #3
 8015200:	440b      	add	r3, r1
 8015202:	3308      	adds	r3, #8
 8015204:	681b      	ldr	r3, [r3, #0]
 8015206:	687a      	ldr	r2, [r7, #4]
 8015208:	429a      	cmp	r2, r3
 801520a:	d102      	bne.n	8015212 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 801520c:	68f8      	ldr	r0, [r7, #12]
 801520e:	f7ff fce5 	bl	8014bdc <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015212:	68fb      	ldr	r3, [r7, #12]
 8015214:	3301      	adds	r3, #1
 8015216:	60fb      	str	r3, [r7, #12]
 8015218:	68fb      	ldr	r3, [r7, #12]
 801521a:	2b09      	cmp	r3, #9
 801521c:	dddd      	ble.n	80151da <etharp_cleanup_netif+0xe>
    }
  }
}
 801521e:	bf00      	nop
 8015220:	3710      	adds	r7, #16
 8015222:	46bd      	mov	sp, r7
 8015224:	bd80      	pop	{r7, pc}
 8015226:	bf00      	nop
 8015228:	20004688 	.word	0x20004688

0801522c <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 801522c:	b5b0      	push	{r4, r5, r7, lr}
 801522e:	b08a      	sub	sp, #40	; 0x28
 8015230:	af04      	add	r7, sp, #16
 8015232:	6078      	str	r0, [r7, #4]
 8015234:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8015236:	683b      	ldr	r3, [r7, #0]
 8015238:	2b00      	cmp	r3, #0
 801523a:	d107      	bne.n	801524c <etharp_input+0x20>
 801523c:	4b3d      	ldr	r3, [pc, #244]	; (8015334 <etharp_input+0x108>)
 801523e:	f240 228a 	movw	r2, #650	; 0x28a
 8015242:	493d      	ldr	r1, [pc, #244]	; (8015338 <etharp_input+0x10c>)
 8015244:	483d      	ldr	r0, [pc, #244]	; (801533c <etharp_input+0x110>)
 8015246:	f002 f9b7 	bl	80175b8 <iprintf>
 801524a:	e06f      	b.n	801532c <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 801524c:	687b      	ldr	r3, [r7, #4]
 801524e:	685b      	ldr	r3, [r3, #4]
 8015250:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8015252:	693b      	ldr	r3, [r7, #16]
 8015254:	881b      	ldrh	r3, [r3, #0]
 8015256:	b29b      	uxth	r3, r3
 8015258:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801525c:	d10c      	bne.n	8015278 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801525e:	693b      	ldr	r3, [r7, #16]
 8015260:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8015262:	2b06      	cmp	r3, #6
 8015264:	d108      	bne.n	8015278 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8015266:	693b      	ldr	r3, [r7, #16]
 8015268:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801526a:	2b04      	cmp	r3, #4
 801526c:	d104      	bne.n	8015278 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 801526e:	693b      	ldr	r3, [r7, #16]
 8015270:	885b      	ldrh	r3, [r3, #2]
 8015272:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8015274:	2b08      	cmp	r3, #8
 8015276:	d003      	beq.n	8015280 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8015278:	6878      	ldr	r0, [r7, #4]
 801527a:	f7f9 f817 	bl	800e2ac <pbuf_free>
    return;
 801527e:	e055      	b.n	801532c <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8015280:	693b      	ldr	r3, [r7, #16]
 8015282:	330e      	adds	r3, #14
 8015284:	681b      	ldr	r3, [r3, #0]
 8015286:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8015288:	693b      	ldr	r3, [r7, #16]
 801528a:	3318      	adds	r3, #24
 801528c:	681b      	ldr	r3, [r3, #0]
 801528e:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8015290:	683b      	ldr	r3, [r7, #0]
 8015292:	3304      	adds	r3, #4
 8015294:	681b      	ldr	r3, [r3, #0]
 8015296:	2b00      	cmp	r3, #0
 8015298:	d102      	bne.n	80152a0 <etharp_input+0x74>
    for_us = 0;
 801529a:	2300      	movs	r3, #0
 801529c:	75fb      	strb	r3, [r7, #23]
 801529e:	e009      	b.n	80152b4 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 80152a0:	68ba      	ldr	r2, [r7, #8]
 80152a2:	683b      	ldr	r3, [r7, #0]
 80152a4:	3304      	adds	r3, #4
 80152a6:	681b      	ldr	r3, [r3, #0]
 80152a8:	429a      	cmp	r2, r3
 80152aa:	bf0c      	ite	eq
 80152ac:	2301      	moveq	r3, #1
 80152ae:	2300      	movne	r3, #0
 80152b0:	b2db      	uxtb	r3, r3
 80152b2:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 80152b4:	693b      	ldr	r3, [r7, #16]
 80152b6:	f103 0208 	add.w	r2, r3, #8
 80152ba:	7dfb      	ldrb	r3, [r7, #23]
 80152bc:	2b00      	cmp	r3, #0
 80152be:	d001      	beq.n	80152c4 <etharp_input+0x98>
 80152c0:	2301      	movs	r3, #1
 80152c2:	e000      	b.n	80152c6 <etharp_input+0x9a>
 80152c4:	2302      	movs	r3, #2
 80152c6:	f107 010c 	add.w	r1, r7, #12
 80152ca:	6838      	ldr	r0, [r7, #0]
 80152cc:	f7ff fed8 	bl	8015080 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 80152d0:	693b      	ldr	r3, [r7, #16]
 80152d2:	88db      	ldrh	r3, [r3, #6]
 80152d4:	b29b      	uxth	r3, r3
 80152d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80152da:	d003      	beq.n	80152e4 <etharp_input+0xb8>
 80152dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80152e0:	d01e      	beq.n	8015320 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 80152e2:	e020      	b.n	8015326 <etharp_input+0xfa>
      if (for_us) {
 80152e4:	7dfb      	ldrb	r3, [r7, #23]
 80152e6:	2b00      	cmp	r3, #0
 80152e8:	d01c      	beq.n	8015324 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 80152ea:	683b      	ldr	r3, [r7, #0]
 80152ec:	f103 0026 	add.w	r0, r3, #38	; 0x26
 80152f0:	693b      	ldr	r3, [r7, #16]
 80152f2:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 80152f6:	683b      	ldr	r3, [r7, #0]
 80152f8:	f103 0526 	add.w	r5, r3, #38	; 0x26
 80152fc:	683b      	ldr	r3, [r7, #0]
 80152fe:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8015300:	693a      	ldr	r2, [r7, #16]
 8015302:	3208      	adds	r2, #8
        etharp_raw(netif,
 8015304:	2102      	movs	r1, #2
 8015306:	9103      	str	r1, [sp, #12]
 8015308:	f107 010c 	add.w	r1, r7, #12
 801530c:	9102      	str	r1, [sp, #8]
 801530e:	9201      	str	r2, [sp, #4]
 8015310:	9300      	str	r3, [sp, #0]
 8015312:	462b      	mov	r3, r5
 8015314:	4622      	mov	r2, r4
 8015316:	4601      	mov	r1, r0
 8015318:	6838      	ldr	r0, [r7, #0]
 801531a:	f000 faeb 	bl	80158f4 <etharp_raw>
      break;
 801531e:	e001      	b.n	8015324 <etharp_input+0xf8>
      break;
 8015320:	bf00      	nop
 8015322:	e000      	b.n	8015326 <etharp_input+0xfa>
      break;
 8015324:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8015326:	6878      	ldr	r0, [r7, #4]
 8015328:	f7f8 ffc0 	bl	800e2ac <pbuf_free>
}
 801532c:	3718      	adds	r7, #24
 801532e:	46bd      	mov	sp, r7
 8015330:	bdb0      	pop	{r4, r5, r7, pc}
 8015332:	bf00      	nop
 8015334:	0801b218 	.word	0x0801b218
 8015338:	0801b368 	.word	0x0801b368
 801533c:	0801b290 	.word	0x0801b290

08015340 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8015340:	b580      	push	{r7, lr}
 8015342:	b086      	sub	sp, #24
 8015344:	af02      	add	r7, sp, #8
 8015346:	60f8      	str	r0, [r7, #12]
 8015348:	60b9      	str	r1, [r7, #8]
 801534a:	4613      	mov	r3, r2
 801534c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801534e:	79fa      	ldrb	r2, [r7, #7]
 8015350:	4944      	ldr	r1, [pc, #272]	; (8015464 <etharp_output_to_arp_index+0x124>)
 8015352:	4613      	mov	r3, r2
 8015354:	005b      	lsls	r3, r3, #1
 8015356:	4413      	add	r3, r2
 8015358:	00db      	lsls	r3, r3, #3
 801535a:	440b      	add	r3, r1
 801535c:	3314      	adds	r3, #20
 801535e:	781b      	ldrb	r3, [r3, #0]
 8015360:	2b01      	cmp	r3, #1
 8015362:	d806      	bhi.n	8015372 <etharp_output_to_arp_index+0x32>
 8015364:	4b40      	ldr	r3, [pc, #256]	; (8015468 <etharp_output_to_arp_index+0x128>)
 8015366:	f240 22ef 	movw	r2, #751	; 0x2ef
 801536a:	4940      	ldr	r1, [pc, #256]	; (801546c <etharp_output_to_arp_index+0x12c>)
 801536c:	4840      	ldr	r0, [pc, #256]	; (8015470 <etharp_output_to_arp_index+0x130>)
 801536e:	f002 f923 	bl	80175b8 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8015372:	79fa      	ldrb	r2, [r7, #7]
 8015374:	493b      	ldr	r1, [pc, #236]	; (8015464 <etharp_output_to_arp_index+0x124>)
 8015376:	4613      	mov	r3, r2
 8015378:	005b      	lsls	r3, r3, #1
 801537a:	4413      	add	r3, r2
 801537c:	00db      	lsls	r3, r3, #3
 801537e:	440b      	add	r3, r1
 8015380:	3314      	adds	r3, #20
 8015382:	781b      	ldrb	r3, [r3, #0]
 8015384:	2b02      	cmp	r3, #2
 8015386:	d153      	bne.n	8015430 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8015388:	79fa      	ldrb	r2, [r7, #7]
 801538a:	4936      	ldr	r1, [pc, #216]	; (8015464 <etharp_output_to_arp_index+0x124>)
 801538c:	4613      	mov	r3, r2
 801538e:	005b      	lsls	r3, r3, #1
 8015390:	4413      	add	r3, r2
 8015392:	00db      	lsls	r3, r3, #3
 8015394:	440b      	add	r3, r1
 8015396:	3312      	adds	r3, #18
 8015398:	881b      	ldrh	r3, [r3, #0]
 801539a:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 801539e:	d919      	bls.n	80153d4 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 80153a0:	79fa      	ldrb	r2, [r7, #7]
 80153a2:	4613      	mov	r3, r2
 80153a4:	005b      	lsls	r3, r3, #1
 80153a6:	4413      	add	r3, r2
 80153a8:	00db      	lsls	r3, r3, #3
 80153aa:	4a2e      	ldr	r2, [pc, #184]	; (8015464 <etharp_output_to_arp_index+0x124>)
 80153ac:	4413      	add	r3, r2
 80153ae:	3304      	adds	r3, #4
 80153b0:	4619      	mov	r1, r3
 80153b2:	68f8      	ldr	r0, [r7, #12]
 80153b4:	f000 fb4c 	bl	8015a50 <etharp_request>
 80153b8:	4603      	mov	r3, r0
 80153ba:	2b00      	cmp	r3, #0
 80153bc:	d138      	bne.n	8015430 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80153be:	79fa      	ldrb	r2, [r7, #7]
 80153c0:	4928      	ldr	r1, [pc, #160]	; (8015464 <etharp_output_to_arp_index+0x124>)
 80153c2:	4613      	mov	r3, r2
 80153c4:	005b      	lsls	r3, r3, #1
 80153c6:	4413      	add	r3, r2
 80153c8:	00db      	lsls	r3, r3, #3
 80153ca:	440b      	add	r3, r1
 80153cc:	3314      	adds	r3, #20
 80153ce:	2203      	movs	r2, #3
 80153d0:	701a      	strb	r2, [r3, #0]
 80153d2:	e02d      	b.n	8015430 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 80153d4:	79fa      	ldrb	r2, [r7, #7]
 80153d6:	4923      	ldr	r1, [pc, #140]	; (8015464 <etharp_output_to_arp_index+0x124>)
 80153d8:	4613      	mov	r3, r2
 80153da:	005b      	lsls	r3, r3, #1
 80153dc:	4413      	add	r3, r2
 80153de:	00db      	lsls	r3, r3, #3
 80153e0:	440b      	add	r3, r1
 80153e2:	3312      	adds	r3, #18
 80153e4:	881b      	ldrh	r3, [r3, #0]
 80153e6:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 80153ea:	d321      	bcc.n	8015430 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 80153ec:	79fa      	ldrb	r2, [r7, #7]
 80153ee:	4613      	mov	r3, r2
 80153f0:	005b      	lsls	r3, r3, #1
 80153f2:	4413      	add	r3, r2
 80153f4:	00db      	lsls	r3, r3, #3
 80153f6:	4a1b      	ldr	r2, [pc, #108]	; (8015464 <etharp_output_to_arp_index+0x124>)
 80153f8:	4413      	add	r3, r2
 80153fa:	1d19      	adds	r1, r3, #4
 80153fc:	79fa      	ldrb	r2, [r7, #7]
 80153fe:	4613      	mov	r3, r2
 8015400:	005b      	lsls	r3, r3, #1
 8015402:	4413      	add	r3, r2
 8015404:	00db      	lsls	r3, r3, #3
 8015406:	3308      	adds	r3, #8
 8015408:	4a16      	ldr	r2, [pc, #88]	; (8015464 <etharp_output_to_arp_index+0x124>)
 801540a:	4413      	add	r3, r2
 801540c:	3304      	adds	r3, #4
 801540e:	461a      	mov	r2, r3
 8015410:	68f8      	ldr	r0, [r7, #12]
 8015412:	f000 fafb 	bl	8015a0c <etharp_request_dst>
 8015416:	4603      	mov	r3, r0
 8015418:	2b00      	cmp	r3, #0
 801541a:	d109      	bne.n	8015430 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801541c:	79fa      	ldrb	r2, [r7, #7]
 801541e:	4911      	ldr	r1, [pc, #68]	; (8015464 <etharp_output_to_arp_index+0x124>)
 8015420:	4613      	mov	r3, r2
 8015422:	005b      	lsls	r3, r3, #1
 8015424:	4413      	add	r3, r2
 8015426:	00db      	lsls	r3, r3, #3
 8015428:	440b      	add	r3, r1
 801542a:	3314      	adds	r3, #20
 801542c:	2203      	movs	r2, #3
 801542e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8015430:	68fb      	ldr	r3, [r7, #12]
 8015432:	f103 0126 	add.w	r1, r3, #38	; 0x26
 8015436:	79fa      	ldrb	r2, [r7, #7]
 8015438:	4613      	mov	r3, r2
 801543a:	005b      	lsls	r3, r3, #1
 801543c:	4413      	add	r3, r2
 801543e:	00db      	lsls	r3, r3, #3
 8015440:	3308      	adds	r3, #8
 8015442:	4a08      	ldr	r2, [pc, #32]	; (8015464 <etharp_output_to_arp_index+0x124>)
 8015444:	4413      	add	r3, r2
 8015446:	1d1a      	adds	r2, r3, #4
 8015448:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801544c:	9300      	str	r3, [sp, #0]
 801544e:	4613      	mov	r3, r2
 8015450:	460a      	mov	r2, r1
 8015452:	68b9      	ldr	r1, [r7, #8]
 8015454:	68f8      	ldr	r0, [r7, #12]
 8015456:	f001 fe2b 	bl	80170b0 <ethernet_output>
 801545a:	4603      	mov	r3, r0
}
 801545c:	4618      	mov	r0, r3
 801545e:	3710      	adds	r7, #16
 8015460:	46bd      	mov	sp, r7
 8015462:	bd80      	pop	{r7, pc}
 8015464:	20004688 	.word	0x20004688
 8015468:	0801b218 	.word	0x0801b218
 801546c:	0801b388 	.word	0x0801b388
 8015470:	0801b290 	.word	0x0801b290

08015474 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8015474:	b580      	push	{r7, lr}
 8015476:	b08a      	sub	sp, #40	; 0x28
 8015478:	af02      	add	r7, sp, #8
 801547a:	60f8      	str	r0, [r7, #12]
 801547c:	60b9      	str	r1, [r7, #8]
 801547e:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8015480:	687b      	ldr	r3, [r7, #4]
 8015482:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8015484:	68fb      	ldr	r3, [r7, #12]
 8015486:	2b00      	cmp	r3, #0
 8015488:	d106      	bne.n	8015498 <etharp_output+0x24>
 801548a:	4b73      	ldr	r3, [pc, #460]	; (8015658 <etharp_output+0x1e4>)
 801548c:	f240 321e 	movw	r2, #798	; 0x31e
 8015490:	4972      	ldr	r1, [pc, #456]	; (801565c <etharp_output+0x1e8>)
 8015492:	4873      	ldr	r0, [pc, #460]	; (8015660 <etharp_output+0x1ec>)
 8015494:	f002 f890 	bl	80175b8 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8015498:	68bb      	ldr	r3, [r7, #8]
 801549a:	2b00      	cmp	r3, #0
 801549c:	d106      	bne.n	80154ac <etharp_output+0x38>
 801549e:	4b6e      	ldr	r3, [pc, #440]	; (8015658 <etharp_output+0x1e4>)
 80154a0:	f240 321f 	movw	r2, #799	; 0x31f
 80154a4:	496f      	ldr	r1, [pc, #444]	; (8015664 <etharp_output+0x1f0>)
 80154a6:	486e      	ldr	r0, [pc, #440]	; (8015660 <etharp_output+0x1ec>)
 80154a8:	f002 f886 	bl	80175b8 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 80154ac:	687b      	ldr	r3, [r7, #4]
 80154ae:	2b00      	cmp	r3, #0
 80154b0:	d106      	bne.n	80154c0 <etharp_output+0x4c>
 80154b2:	4b69      	ldr	r3, [pc, #420]	; (8015658 <etharp_output+0x1e4>)
 80154b4:	f44f 7248 	mov.w	r2, #800	; 0x320
 80154b8:	496b      	ldr	r1, [pc, #428]	; (8015668 <etharp_output+0x1f4>)
 80154ba:	4869      	ldr	r0, [pc, #420]	; (8015660 <etharp_output+0x1ec>)
 80154bc:	f002 f87c 	bl	80175b8 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 80154c0:	687b      	ldr	r3, [r7, #4]
 80154c2:	681b      	ldr	r3, [r3, #0]
 80154c4:	68f9      	ldr	r1, [r7, #12]
 80154c6:	4618      	mov	r0, r3
 80154c8:	f000 feee 	bl	80162a8 <ip4_addr_isbroadcast_u32>
 80154cc:	4603      	mov	r3, r0
 80154ce:	2b00      	cmp	r3, #0
 80154d0:	d002      	beq.n	80154d8 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 80154d2:	4b66      	ldr	r3, [pc, #408]	; (801566c <etharp_output+0x1f8>)
 80154d4:	61fb      	str	r3, [r7, #28]
 80154d6:	e0af      	b.n	8015638 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 80154d8:	687b      	ldr	r3, [r7, #4]
 80154da:	681b      	ldr	r3, [r3, #0]
 80154dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80154e0:	2be0      	cmp	r3, #224	; 0xe0
 80154e2:	d118      	bne.n	8015516 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 80154e4:	2301      	movs	r3, #1
 80154e6:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 80154e8:	2300      	movs	r3, #0
 80154ea:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 80154ec:	235e      	movs	r3, #94	; 0x5e
 80154ee:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 80154f0:	687b      	ldr	r3, [r7, #4]
 80154f2:	3301      	adds	r3, #1
 80154f4:	781b      	ldrb	r3, [r3, #0]
 80154f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80154fa:	b2db      	uxtb	r3, r3
 80154fc:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 80154fe:	687b      	ldr	r3, [r7, #4]
 8015500:	3302      	adds	r3, #2
 8015502:	781b      	ldrb	r3, [r3, #0]
 8015504:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8015506:	687b      	ldr	r3, [r7, #4]
 8015508:	3303      	adds	r3, #3
 801550a:	781b      	ldrb	r3, [r3, #0]
 801550c:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801550e:	f107 0310 	add.w	r3, r7, #16
 8015512:	61fb      	str	r3, [r7, #28]
 8015514:	e090      	b.n	8015638 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8015516:	687b      	ldr	r3, [r7, #4]
 8015518:	681a      	ldr	r2, [r3, #0]
 801551a:	68fb      	ldr	r3, [r7, #12]
 801551c:	3304      	adds	r3, #4
 801551e:	681b      	ldr	r3, [r3, #0]
 8015520:	405a      	eors	r2, r3
 8015522:	68fb      	ldr	r3, [r7, #12]
 8015524:	3308      	adds	r3, #8
 8015526:	681b      	ldr	r3, [r3, #0]
 8015528:	4013      	ands	r3, r2
 801552a:	2b00      	cmp	r3, #0
 801552c:	d012      	beq.n	8015554 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801552e:	687b      	ldr	r3, [r7, #4]
 8015530:	681b      	ldr	r3, [r3, #0]
 8015532:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8015534:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8015538:	4293      	cmp	r3, r2
 801553a:	d00b      	beq.n	8015554 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 801553c:	68fb      	ldr	r3, [r7, #12]
 801553e:	330c      	adds	r3, #12
 8015540:	681b      	ldr	r3, [r3, #0]
 8015542:	2b00      	cmp	r3, #0
 8015544:	d003      	beq.n	801554e <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8015546:	68fb      	ldr	r3, [r7, #12]
 8015548:	330c      	adds	r3, #12
 801554a:	61bb      	str	r3, [r7, #24]
 801554c:	e002      	b.n	8015554 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 801554e:	f06f 0303 	mvn.w	r3, #3
 8015552:	e07d      	b.n	8015650 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8015554:	4b46      	ldr	r3, [pc, #280]	; (8015670 <etharp_output+0x1fc>)
 8015556:	781b      	ldrb	r3, [r3, #0]
 8015558:	4619      	mov	r1, r3
 801555a:	4a46      	ldr	r2, [pc, #280]	; (8015674 <etharp_output+0x200>)
 801555c:	460b      	mov	r3, r1
 801555e:	005b      	lsls	r3, r3, #1
 8015560:	440b      	add	r3, r1
 8015562:	00db      	lsls	r3, r3, #3
 8015564:	4413      	add	r3, r2
 8015566:	3314      	adds	r3, #20
 8015568:	781b      	ldrb	r3, [r3, #0]
 801556a:	2b01      	cmp	r3, #1
 801556c:	d925      	bls.n	80155ba <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 801556e:	4b40      	ldr	r3, [pc, #256]	; (8015670 <etharp_output+0x1fc>)
 8015570:	781b      	ldrb	r3, [r3, #0]
 8015572:	4619      	mov	r1, r3
 8015574:	4a3f      	ldr	r2, [pc, #252]	; (8015674 <etharp_output+0x200>)
 8015576:	460b      	mov	r3, r1
 8015578:	005b      	lsls	r3, r3, #1
 801557a:	440b      	add	r3, r1
 801557c:	00db      	lsls	r3, r3, #3
 801557e:	4413      	add	r3, r2
 8015580:	3308      	adds	r3, #8
 8015582:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8015584:	68fa      	ldr	r2, [r7, #12]
 8015586:	429a      	cmp	r2, r3
 8015588:	d117      	bne.n	80155ba <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 801558a:	69bb      	ldr	r3, [r7, #24]
 801558c:	681a      	ldr	r2, [r3, #0]
 801558e:	4b38      	ldr	r3, [pc, #224]	; (8015670 <etharp_output+0x1fc>)
 8015590:	781b      	ldrb	r3, [r3, #0]
 8015592:	4618      	mov	r0, r3
 8015594:	4937      	ldr	r1, [pc, #220]	; (8015674 <etharp_output+0x200>)
 8015596:	4603      	mov	r3, r0
 8015598:	005b      	lsls	r3, r3, #1
 801559a:	4403      	add	r3, r0
 801559c:	00db      	lsls	r3, r3, #3
 801559e:	440b      	add	r3, r1
 80155a0:	3304      	adds	r3, #4
 80155a2:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 80155a4:	429a      	cmp	r2, r3
 80155a6:	d108      	bne.n	80155ba <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 80155a8:	4b31      	ldr	r3, [pc, #196]	; (8015670 <etharp_output+0x1fc>)
 80155aa:	781b      	ldrb	r3, [r3, #0]
 80155ac:	461a      	mov	r2, r3
 80155ae:	68b9      	ldr	r1, [r7, #8]
 80155b0:	68f8      	ldr	r0, [r7, #12]
 80155b2:	f7ff fec5 	bl	8015340 <etharp_output_to_arp_index>
 80155b6:	4603      	mov	r3, r0
 80155b8:	e04a      	b.n	8015650 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80155ba:	2300      	movs	r3, #0
 80155bc:	75fb      	strb	r3, [r7, #23]
 80155be:	e031      	b.n	8015624 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80155c0:	7dfa      	ldrb	r2, [r7, #23]
 80155c2:	492c      	ldr	r1, [pc, #176]	; (8015674 <etharp_output+0x200>)
 80155c4:	4613      	mov	r3, r2
 80155c6:	005b      	lsls	r3, r3, #1
 80155c8:	4413      	add	r3, r2
 80155ca:	00db      	lsls	r3, r3, #3
 80155cc:	440b      	add	r3, r1
 80155ce:	3314      	adds	r3, #20
 80155d0:	781b      	ldrb	r3, [r3, #0]
 80155d2:	2b01      	cmp	r3, #1
 80155d4:	d923      	bls.n	801561e <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 80155d6:	7dfa      	ldrb	r2, [r7, #23]
 80155d8:	4926      	ldr	r1, [pc, #152]	; (8015674 <etharp_output+0x200>)
 80155da:	4613      	mov	r3, r2
 80155dc:	005b      	lsls	r3, r3, #1
 80155de:	4413      	add	r3, r2
 80155e0:	00db      	lsls	r3, r3, #3
 80155e2:	440b      	add	r3, r1
 80155e4:	3308      	adds	r3, #8
 80155e6:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80155e8:	68fa      	ldr	r2, [r7, #12]
 80155ea:	429a      	cmp	r2, r3
 80155ec:	d117      	bne.n	801561e <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 80155ee:	69bb      	ldr	r3, [r7, #24]
 80155f0:	6819      	ldr	r1, [r3, #0]
 80155f2:	7dfa      	ldrb	r2, [r7, #23]
 80155f4:	481f      	ldr	r0, [pc, #124]	; (8015674 <etharp_output+0x200>)
 80155f6:	4613      	mov	r3, r2
 80155f8:	005b      	lsls	r3, r3, #1
 80155fa:	4413      	add	r3, r2
 80155fc:	00db      	lsls	r3, r3, #3
 80155fe:	4403      	add	r3, r0
 8015600:	3304      	adds	r3, #4
 8015602:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8015604:	4299      	cmp	r1, r3
 8015606:	d10a      	bne.n	801561e <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8015608:	4a19      	ldr	r2, [pc, #100]	; (8015670 <etharp_output+0x1fc>)
 801560a:	7dfb      	ldrb	r3, [r7, #23]
 801560c:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801560e:	7dfb      	ldrb	r3, [r7, #23]
 8015610:	461a      	mov	r2, r3
 8015612:	68b9      	ldr	r1, [r7, #8]
 8015614:	68f8      	ldr	r0, [r7, #12]
 8015616:	f7ff fe93 	bl	8015340 <etharp_output_to_arp_index>
 801561a:	4603      	mov	r3, r0
 801561c:	e018      	b.n	8015650 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801561e:	7dfb      	ldrb	r3, [r7, #23]
 8015620:	3301      	adds	r3, #1
 8015622:	75fb      	strb	r3, [r7, #23]
 8015624:	7dfb      	ldrb	r3, [r7, #23]
 8015626:	2b09      	cmp	r3, #9
 8015628:	d9ca      	bls.n	80155c0 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 801562a:	68ba      	ldr	r2, [r7, #8]
 801562c:	69b9      	ldr	r1, [r7, #24]
 801562e:	68f8      	ldr	r0, [r7, #12]
 8015630:	f000 f822 	bl	8015678 <etharp_query>
 8015634:	4603      	mov	r3, r0
 8015636:	e00b      	b.n	8015650 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8015638:	68fb      	ldr	r3, [r7, #12]
 801563a:	f103 0226 	add.w	r2, r3, #38	; 0x26
 801563e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8015642:	9300      	str	r3, [sp, #0]
 8015644:	69fb      	ldr	r3, [r7, #28]
 8015646:	68b9      	ldr	r1, [r7, #8]
 8015648:	68f8      	ldr	r0, [r7, #12]
 801564a:	f001 fd31 	bl	80170b0 <ethernet_output>
 801564e:	4603      	mov	r3, r0
}
 8015650:	4618      	mov	r0, r3
 8015652:	3720      	adds	r7, #32
 8015654:	46bd      	mov	sp, r7
 8015656:	bd80      	pop	{r7, pc}
 8015658:	0801b218 	.word	0x0801b218
 801565c:	0801b368 	.word	0x0801b368
 8015660:	0801b290 	.word	0x0801b290
 8015664:	0801b3b8 	.word	0x0801b3b8
 8015668:	0801b358 	.word	0x0801b358
 801566c:	0801ba40 	.word	0x0801ba40
 8015670:	20004778 	.word	0x20004778
 8015674:	20004688 	.word	0x20004688

08015678 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8015678:	b580      	push	{r7, lr}
 801567a:	b08c      	sub	sp, #48	; 0x30
 801567c:	af02      	add	r7, sp, #8
 801567e:	60f8      	str	r0, [r7, #12]
 8015680:	60b9      	str	r1, [r7, #8]
 8015682:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8015684:	68fb      	ldr	r3, [r7, #12]
 8015686:	3326      	adds	r3, #38	; 0x26
 8015688:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 801568a:	23ff      	movs	r3, #255	; 0xff
 801568c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8015690:	2300      	movs	r3, #0
 8015692:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8015694:	68bb      	ldr	r3, [r7, #8]
 8015696:	681b      	ldr	r3, [r3, #0]
 8015698:	68f9      	ldr	r1, [r7, #12]
 801569a:	4618      	mov	r0, r3
 801569c:	f000 fe04 	bl	80162a8 <ip4_addr_isbroadcast_u32>
 80156a0:	4603      	mov	r3, r0
 80156a2:	2b00      	cmp	r3, #0
 80156a4:	d10c      	bne.n	80156c0 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80156a6:	68bb      	ldr	r3, [r7, #8]
 80156a8:	681b      	ldr	r3, [r3, #0]
 80156aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80156ae:	2be0      	cmp	r3, #224	; 0xe0
 80156b0:	d006      	beq.n	80156c0 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80156b2:	68bb      	ldr	r3, [r7, #8]
 80156b4:	2b00      	cmp	r3, #0
 80156b6:	d003      	beq.n	80156c0 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 80156b8:	68bb      	ldr	r3, [r7, #8]
 80156ba:	681b      	ldr	r3, [r3, #0]
 80156bc:	2b00      	cmp	r3, #0
 80156be:	d102      	bne.n	80156c6 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80156c0:	f06f 030f 	mvn.w	r3, #15
 80156c4:	e102      	b.n	80158cc <etharp_query+0x254>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 80156c6:	68fa      	ldr	r2, [r7, #12]
 80156c8:	2101      	movs	r1, #1
 80156ca:	68b8      	ldr	r0, [r7, #8]
 80156cc:	f7ff fb60 	bl	8014d90 <etharp_find_entry>
 80156d0:	4603      	mov	r3, r0
 80156d2:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 80156d4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80156d8:	2b00      	cmp	r3, #0
 80156da:	da02      	bge.n	80156e2 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 80156dc:	8a7b      	ldrh	r3, [r7, #18]
 80156de:	b25b      	sxtb	r3, r3
 80156e0:	e0f4      	b.n	80158cc <etharp_query+0x254>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 80156e2:	8a7b      	ldrh	r3, [r7, #18]
 80156e4:	2b7e      	cmp	r3, #126	; 0x7e
 80156e6:	d906      	bls.n	80156f6 <etharp_query+0x7e>
 80156e8:	4b7a      	ldr	r3, [pc, #488]	; (80158d4 <etharp_query+0x25c>)
 80156ea:	f240 32c1 	movw	r2, #961	; 0x3c1
 80156ee:	497a      	ldr	r1, [pc, #488]	; (80158d8 <etharp_query+0x260>)
 80156f0:	487a      	ldr	r0, [pc, #488]	; (80158dc <etharp_query+0x264>)
 80156f2:	f001 ff61 	bl	80175b8 <iprintf>
  i = (netif_addr_idx_t)i_err;
 80156f6:	8a7b      	ldrh	r3, [r7, #18]
 80156f8:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 80156fa:	7c7a      	ldrb	r2, [r7, #17]
 80156fc:	4978      	ldr	r1, [pc, #480]	; (80158e0 <etharp_query+0x268>)
 80156fe:	4613      	mov	r3, r2
 8015700:	005b      	lsls	r3, r3, #1
 8015702:	4413      	add	r3, r2
 8015704:	00db      	lsls	r3, r3, #3
 8015706:	440b      	add	r3, r1
 8015708:	3314      	adds	r3, #20
 801570a:	781b      	ldrb	r3, [r3, #0]
 801570c:	2b00      	cmp	r3, #0
 801570e:	d115      	bne.n	801573c <etharp_query+0xc4>
    is_new_entry = 1;
 8015710:	2301      	movs	r3, #1
 8015712:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8015714:	7c7a      	ldrb	r2, [r7, #17]
 8015716:	4972      	ldr	r1, [pc, #456]	; (80158e0 <etharp_query+0x268>)
 8015718:	4613      	mov	r3, r2
 801571a:	005b      	lsls	r3, r3, #1
 801571c:	4413      	add	r3, r2
 801571e:	00db      	lsls	r3, r3, #3
 8015720:	440b      	add	r3, r1
 8015722:	3314      	adds	r3, #20
 8015724:	2201      	movs	r2, #1
 8015726:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8015728:	7c7a      	ldrb	r2, [r7, #17]
 801572a:	496d      	ldr	r1, [pc, #436]	; (80158e0 <etharp_query+0x268>)
 801572c:	4613      	mov	r3, r2
 801572e:	005b      	lsls	r3, r3, #1
 8015730:	4413      	add	r3, r2
 8015732:	00db      	lsls	r3, r3, #3
 8015734:	440b      	add	r3, r1
 8015736:	3308      	adds	r3, #8
 8015738:	68fa      	ldr	r2, [r7, #12]
 801573a:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 801573c:	7c7a      	ldrb	r2, [r7, #17]
 801573e:	4968      	ldr	r1, [pc, #416]	; (80158e0 <etharp_query+0x268>)
 8015740:	4613      	mov	r3, r2
 8015742:	005b      	lsls	r3, r3, #1
 8015744:	4413      	add	r3, r2
 8015746:	00db      	lsls	r3, r3, #3
 8015748:	440b      	add	r3, r1
 801574a:	3314      	adds	r3, #20
 801574c:	781b      	ldrb	r3, [r3, #0]
 801574e:	2b01      	cmp	r3, #1
 8015750:	d011      	beq.n	8015776 <etharp_query+0xfe>
 8015752:	7c7a      	ldrb	r2, [r7, #17]
 8015754:	4962      	ldr	r1, [pc, #392]	; (80158e0 <etharp_query+0x268>)
 8015756:	4613      	mov	r3, r2
 8015758:	005b      	lsls	r3, r3, #1
 801575a:	4413      	add	r3, r2
 801575c:	00db      	lsls	r3, r3, #3
 801575e:	440b      	add	r3, r1
 8015760:	3314      	adds	r3, #20
 8015762:	781b      	ldrb	r3, [r3, #0]
 8015764:	2b01      	cmp	r3, #1
 8015766:	d806      	bhi.n	8015776 <etharp_query+0xfe>
 8015768:	4b5a      	ldr	r3, [pc, #360]	; (80158d4 <etharp_query+0x25c>)
 801576a:	f240 32cf 	movw	r2, #975	; 0x3cf
 801576e:	495d      	ldr	r1, [pc, #372]	; (80158e4 <etharp_query+0x26c>)
 8015770:	485a      	ldr	r0, [pc, #360]	; (80158dc <etharp_query+0x264>)
 8015772:	f001 ff21 	bl	80175b8 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8015776:	6a3b      	ldr	r3, [r7, #32]
 8015778:	2b00      	cmp	r3, #0
 801577a:	d102      	bne.n	8015782 <etharp_query+0x10a>
 801577c:	687b      	ldr	r3, [r7, #4]
 801577e:	2b00      	cmp	r3, #0
 8015780:	d10c      	bne.n	801579c <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8015782:	68b9      	ldr	r1, [r7, #8]
 8015784:	68f8      	ldr	r0, [r7, #12]
 8015786:	f000 f963 	bl	8015a50 <etharp_request>
 801578a:	4603      	mov	r3, r0
 801578c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8015790:	687b      	ldr	r3, [r7, #4]
 8015792:	2b00      	cmp	r3, #0
 8015794:	d102      	bne.n	801579c <etharp_query+0x124>
      return result;
 8015796:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801579a:	e097      	b.n	80158cc <etharp_query+0x254>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 801579c:	687b      	ldr	r3, [r7, #4]
 801579e:	2b00      	cmp	r3, #0
 80157a0:	d106      	bne.n	80157b0 <etharp_query+0x138>
 80157a2:	4b4c      	ldr	r3, [pc, #304]	; (80158d4 <etharp_query+0x25c>)
 80157a4:	f240 32e1 	movw	r2, #993	; 0x3e1
 80157a8:	494f      	ldr	r1, [pc, #316]	; (80158e8 <etharp_query+0x270>)
 80157aa:	484c      	ldr	r0, [pc, #304]	; (80158dc <etharp_query+0x264>)
 80157ac:	f001 ff04 	bl	80175b8 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 80157b0:	7c7a      	ldrb	r2, [r7, #17]
 80157b2:	494b      	ldr	r1, [pc, #300]	; (80158e0 <etharp_query+0x268>)
 80157b4:	4613      	mov	r3, r2
 80157b6:	005b      	lsls	r3, r3, #1
 80157b8:	4413      	add	r3, r2
 80157ba:	00db      	lsls	r3, r3, #3
 80157bc:	440b      	add	r3, r1
 80157be:	3314      	adds	r3, #20
 80157c0:	781b      	ldrb	r3, [r3, #0]
 80157c2:	2b01      	cmp	r3, #1
 80157c4:	d918      	bls.n	80157f8 <etharp_query+0x180>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 80157c6:	4a49      	ldr	r2, [pc, #292]	; (80158ec <etharp_query+0x274>)
 80157c8:	7c7b      	ldrb	r3, [r7, #17]
 80157ca:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 80157cc:	7c7a      	ldrb	r2, [r7, #17]
 80157ce:	4613      	mov	r3, r2
 80157d0:	005b      	lsls	r3, r3, #1
 80157d2:	4413      	add	r3, r2
 80157d4:	00db      	lsls	r3, r3, #3
 80157d6:	3308      	adds	r3, #8
 80157d8:	4a41      	ldr	r2, [pc, #260]	; (80158e0 <etharp_query+0x268>)
 80157da:	4413      	add	r3, r2
 80157dc:	1d1a      	adds	r2, r3, #4
 80157de:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80157e2:	9300      	str	r3, [sp, #0]
 80157e4:	4613      	mov	r3, r2
 80157e6:	697a      	ldr	r2, [r7, #20]
 80157e8:	6879      	ldr	r1, [r7, #4]
 80157ea:	68f8      	ldr	r0, [r7, #12]
 80157ec:	f001 fc60 	bl	80170b0 <ethernet_output>
 80157f0:	4603      	mov	r3, r0
 80157f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80157f6:	e067      	b.n	80158c8 <etharp_query+0x250>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80157f8:	7c7a      	ldrb	r2, [r7, #17]
 80157fa:	4939      	ldr	r1, [pc, #228]	; (80158e0 <etharp_query+0x268>)
 80157fc:	4613      	mov	r3, r2
 80157fe:	005b      	lsls	r3, r3, #1
 8015800:	4413      	add	r3, r2
 8015802:	00db      	lsls	r3, r3, #3
 8015804:	440b      	add	r3, r1
 8015806:	3314      	adds	r3, #20
 8015808:	781b      	ldrb	r3, [r3, #0]
 801580a:	2b01      	cmp	r3, #1
 801580c:	d15c      	bne.n	80158c8 <etharp_query+0x250>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 801580e:	2300      	movs	r3, #0
 8015810:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8015812:	687b      	ldr	r3, [r7, #4]
 8015814:	61fb      	str	r3, [r7, #28]
    while (p) {
 8015816:	e01c      	b.n	8015852 <etharp_query+0x1da>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8015818:	69fb      	ldr	r3, [r7, #28]
 801581a:	895a      	ldrh	r2, [r3, #10]
 801581c:	69fb      	ldr	r3, [r7, #28]
 801581e:	891b      	ldrh	r3, [r3, #8]
 8015820:	429a      	cmp	r2, r3
 8015822:	d10a      	bne.n	801583a <etharp_query+0x1c2>
 8015824:	69fb      	ldr	r3, [r7, #28]
 8015826:	681b      	ldr	r3, [r3, #0]
 8015828:	2b00      	cmp	r3, #0
 801582a:	d006      	beq.n	801583a <etharp_query+0x1c2>
 801582c:	4b29      	ldr	r3, [pc, #164]	; (80158d4 <etharp_query+0x25c>)
 801582e:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8015832:	492f      	ldr	r1, [pc, #188]	; (80158f0 <etharp_query+0x278>)
 8015834:	4829      	ldr	r0, [pc, #164]	; (80158dc <etharp_query+0x264>)
 8015836:	f001 febf 	bl	80175b8 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 801583a:	69fb      	ldr	r3, [r7, #28]
 801583c:	7b1b      	ldrb	r3, [r3, #12]
 801583e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015842:	2b00      	cmp	r3, #0
 8015844:	d002      	beq.n	801584c <etharp_query+0x1d4>
        copy_needed = 1;
 8015846:	2301      	movs	r3, #1
 8015848:	61bb      	str	r3, [r7, #24]
        break;
 801584a:	e005      	b.n	8015858 <etharp_query+0x1e0>
      }
      p = p->next;
 801584c:	69fb      	ldr	r3, [r7, #28]
 801584e:	681b      	ldr	r3, [r3, #0]
 8015850:	61fb      	str	r3, [r7, #28]
    while (p) {
 8015852:	69fb      	ldr	r3, [r7, #28]
 8015854:	2b00      	cmp	r3, #0
 8015856:	d1df      	bne.n	8015818 <etharp_query+0x1a0>
    }
    if (copy_needed) {
 8015858:	69bb      	ldr	r3, [r7, #24]
 801585a:	2b00      	cmp	r3, #0
 801585c:	d007      	beq.n	801586e <etharp_query+0x1f6>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 801585e:	687a      	ldr	r2, [r7, #4]
 8015860:	f44f 7120 	mov.w	r1, #640	; 0x280
 8015864:	200e      	movs	r0, #14
 8015866:	f7f8 ff89 	bl	800e77c <pbuf_clone>
 801586a:	61f8      	str	r0, [r7, #28]
 801586c:	e004      	b.n	8015878 <etharp_query+0x200>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 801586e:	687b      	ldr	r3, [r7, #4]
 8015870:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8015872:	69f8      	ldr	r0, [r7, #28]
 8015874:	f7f8 fdc0 	bl	800e3f8 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8015878:	69fb      	ldr	r3, [r7, #28]
 801587a:	2b00      	cmp	r3, #0
 801587c:	d021      	beq.n	80158c2 <etharp_query+0x24a>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 801587e:	7c7a      	ldrb	r2, [r7, #17]
 8015880:	4917      	ldr	r1, [pc, #92]	; (80158e0 <etharp_query+0x268>)
 8015882:	4613      	mov	r3, r2
 8015884:	005b      	lsls	r3, r3, #1
 8015886:	4413      	add	r3, r2
 8015888:	00db      	lsls	r3, r3, #3
 801588a:	440b      	add	r3, r1
 801588c:	681b      	ldr	r3, [r3, #0]
 801588e:	2b00      	cmp	r3, #0
 8015890:	d00a      	beq.n	80158a8 <etharp_query+0x230>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8015892:	7c7a      	ldrb	r2, [r7, #17]
 8015894:	4912      	ldr	r1, [pc, #72]	; (80158e0 <etharp_query+0x268>)
 8015896:	4613      	mov	r3, r2
 8015898:	005b      	lsls	r3, r3, #1
 801589a:	4413      	add	r3, r2
 801589c:	00db      	lsls	r3, r3, #3
 801589e:	440b      	add	r3, r1
 80158a0:	681b      	ldr	r3, [r3, #0]
 80158a2:	4618      	mov	r0, r3
 80158a4:	f7f8 fd02 	bl	800e2ac <pbuf_free>
      }
      arp_table[i].q = p;
 80158a8:	7c7a      	ldrb	r2, [r7, #17]
 80158aa:	490d      	ldr	r1, [pc, #52]	; (80158e0 <etharp_query+0x268>)
 80158ac:	4613      	mov	r3, r2
 80158ae:	005b      	lsls	r3, r3, #1
 80158b0:	4413      	add	r3, r2
 80158b2:	00db      	lsls	r3, r3, #3
 80158b4:	440b      	add	r3, r1
 80158b6:	69fa      	ldr	r2, [r7, #28]
 80158b8:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 80158ba:	2300      	movs	r3, #0
 80158bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80158c0:	e002      	b.n	80158c8 <etharp_query+0x250>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 80158c2:	23ff      	movs	r3, #255	; 0xff
 80158c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 80158c8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80158cc:	4618      	mov	r0, r3
 80158ce:	3728      	adds	r7, #40	; 0x28
 80158d0:	46bd      	mov	sp, r7
 80158d2:	bd80      	pop	{r7, pc}
 80158d4:	0801b218 	.word	0x0801b218
 80158d8:	0801b3c4 	.word	0x0801b3c4
 80158dc:	0801b290 	.word	0x0801b290
 80158e0:	20004688 	.word	0x20004688
 80158e4:	0801b3d4 	.word	0x0801b3d4
 80158e8:	0801b3b8 	.word	0x0801b3b8
 80158ec:	20004778 	.word	0x20004778
 80158f0:	0801b3fc 	.word	0x0801b3fc

080158f4 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 80158f4:	b580      	push	{r7, lr}
 80158f6:	b08a      	sub	sp, #40	; 0x28
 80158f8:	af02      	add	r7, sp, #8
 80158fa:	60f8      	str	r0, [r7, #12]
 80158fc:	60b9      	str	r1, [r7, #8]
 80158fe:	607a      	str	r2, [r7, #4]
 8015900:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8015902:	2300      	movs	r3, #0
 8015904:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8015906:	68fb      	ldr	r3, [r7, #12]
 8015908:	2b00      	cmp	r3, #0
 801590a:	d106      	bne.n	801591a <etharp_raw+0x26>
 801590c:	4b3a      	ldr	r3, [pc, #232]	; (80159f8 <etharp_raw+0x104>)
 801590e:	f240 4257 	movw	r2, #1111	; 0x457
 8015912:	493a      	ldr	r1, [pc, #232]	; (80159fc <etharp_raw+0x108>)
 8015914:	483a      	ldr	r0, [pc, #232]	; (8015a00 <etharp_raw+0x10c>)
 8015916:	f001 fe4f 	bl	80175b8 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801591a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801591e:	211c      	movs	r1, #28
 8015920:	200e      	movs	r0, #14
 8015922:	f7f8 f9b1 	bl	800dc88 <pbuf_alloc>
 8015926:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8015928:	69bb      	ldr	r3, [r7, #24]
 801592a:	2b00      	cmp	r3, #0
 801592c:	d102      	bne.n	8015934 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 801592e:	f04f 33ff 	mov.w	r3, #4294967295
 8015932:	e05d      	b.n	80159f0 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8015934:	69bb      	ldr	r3, [r7, #24]
 8015936:	895b      	ldrh	r3, [r3, #10]
 8015938:	2b1b      	cmp	r3, #27
 801593a:	d806      	bhi.n	801594a <etharp_raw+0x56>
 801593c:	4b2e      	ldr	r3, [pc, #184]	; (80159f8 <etharp_raw+0x104>)
 801593e:	f240 4263 	movw	r2, #1123	; 0x463
 8015942:	4930      	ldr	r1, [pc, #192]	; (8015a04 <etharp_raw+0x110>)
 8015944:	482e      	ldr	r0, [pc, #184]	; (8015a00 <etharp_raw+0x10c>)
 8015946:	f001 fe37 	bl	80175b8 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 801594a:	69bb      	ldr	r3, [r7, #24]
 801594c:	685b      	ldr	r3, [r3, #4]
 801594e:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8015950:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8015952:	4618      	mov	r0, r3
 8015954:	f7f7 f8d6 	bl	800cb04 <lwip_htons>
 8015958:	4603      	mov	r3, r0
 801595a:	461a      	mov	r2, r3
 801595c:	697b      	ldr	r3, [r7, #20]
 801595e:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8015960:	68fb      	ldr	r3, [r7, #12]
 8015962:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8015966:	2b06      	cmp	r3, #6
 8015968:	d006      	beq.n	8015978 <etharp_raw+0x84>
 801596a:	4b23      	ldr	r3, [pc, #140]	; (80159f8 <etharp_raw+0x104>)
 801596c:	f240 426a 	movw	r2, #1130	; 0x46a
 8015970:	4925      	ldr	r1, [pc, #148]	; (8015a08 <etharp_raw+0x114>)
 8015972:	4823      	ldr	r0, [pc, #140]	; (8015a00 <etharp_raw+0x10c>)
 8015974:	f001 fe20 	bl	80175b8 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8015978:	697b      	ldr	r3, [r7, #20]
 801597a:	3308      	adds	r3, #8
 801597c:	2206      	movs	r2, #6
 801597e:	6839      	ldr	r1, [r7, #0]
 8015980:	4618      	mov	r0, r3
 8015982:	f001 fe06 	bl	8017592 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8015986:	697b      	ldr	r3, [r7, #20]
 8015988:	3312      	adds	r3, #18
 801598a:	2206      	movs	r2, #6
 801598c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801598e:	4618      	mov	r0, r3
 8015990:	f001 fdff 	bl	8017592 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8015994:	697b      	ldr	r3, [r7, #20]
 8015996:	330e      	adds	r3, #14
 8015998:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801599a:	6812      	ldr	r2, [r2, #0]
 801599c:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 801599e:	697b      	ldr	r3, [r7, #20]
 80159a0:	3318      	adds	r3, #24
 80159a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80159a4:	6812      	ldr	r2, [r2, #0]
 80159a6:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 80159a8:	697b      	ldr	r3, [r7, #20]
 80159aa:	2200      	movs	r2, #0
 80159ac:	701a      	strb	r2, [r3, #0]
 80159ae:	2200      	movs	r2, #0
 80159b0:	f042 0201 	orr.w	r2, r2, #1
 80159b4:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 80159b6:	697b      	ldr	r3, [r7, #20]
 80159b8:	2200      	movs	r2, #0
 80159ba:	f042 0208 	orr.w	r2, r2, #8
 80159be:	709a      	strb	r2, [r3, #2]
 80159c0:	2200      	movs	r2, #0
 80159c2:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 80159c4:	697b      	ldr	r3, [r7, #20]
 80159c6:	2206      	movs	r2, #6
 80159c8:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 80159ca:	697b      	ldr	r3, [r7, #20]
 80159cc:	2204      	movs	r2, #4
 80159ce:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 80159d0:	f640 0306 	movw	r3, #2054	; 0x806
 80159d4:	9300      	str	r3, [sp, #0]
 80159d6:	687b      	ldr	r3, [r7, #4]
 80159d8:	68ba      	ldr	r2, [r7, #8]
 80159da:	69b9      	ldr	r1, [r7, #24]
 80159dc:	68f8      	ldr	r0, [r7, #12]
 80159de:	f001 fb67 	bl	80170b0 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 80159e2:	69b8      	ldr	r0, [r7, #24]
 80159e4:	f7f8 fc62 	bl	800e2ac <pbuf_free>
  p = NULL;
 80159e8:	2300      	movs	r3, #0
 80159ea:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 80159ec:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80159f0:	4618      	mov	r0, r3
 80159f2:	3720      	adds	r7, #32
 80159f4:	46bd      	mov	sp, r7
 80159f6:	bd80      	pop	{r7, pc}
 80159f8:	0801b218 	.word	0x0801b218
 80159fc:	0801b368 	.word	0x0801b368
 8015a00:	0801b290 	.word	0x0801b290
 8015a04:	0801b418 	.word	0x0801b418
 8015a08:	0801b44c 	.word	0x0801b44c

08015a0c <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8015a0c:	b580      	push	{r7, lr}
 8015a0e:	b088      	sub	sp, #32
 8015a10:	af04      	add	r7, sp, #16
 8015a12:	60f8      	str	r0, [r7, #12]
 8015a14:	60b9      	str	r1, [r7, #8]
 8015a16:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8015a18:	68fb      	ldr	r3, [r7, #12]
 8015a1a:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8015a1e:	68fb      	ldr	r3, [r7, #12]
 8015a20:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8015a24:	68fb      	ldr	r3, [r7, #12]
 8015a26:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8015a28:	2201      	movs	r2, #1
 8015a2a:	9203      	str	r2, [sp, #12]
 8015a2c:	68ba      	ldr	r2, [r7, #8]
 8015a2e:	9202      	str	r2, [sp, #8]
 8015a30:	4a06      	ldr	r2, [pc, #24]	; (8015a4c <etharp_request_dst+0x40>)
 8015a32:	9201      	str	r2, [sp, #4]
 8015a34:	9300      	str	r3, [sp, #0]
 8015a36:	4603      	mov	r3, r0
 8015a38:	687a      	ldr	r2, [r7, #4]
 8015a3a:	68f8      	ldr	r0, [r7, #12]
 8015a3c:	f7ff ff5a 	bl	80158f4 <etharp_raw>
 8015a40:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8015a42:	4618      	mov	r0, r3
 8015a44:	3710      	adds	r7, #16
 8015a46:	46bd      	mov	sp, r7
 8015a48:	bd80      	pop	{r7, pc}
 8015a4a:	bf00      	nop
 8015a4c:	0801ba48 	.word	0x0801ba48

08015a50 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8015a50:	b580      	push	{r7, lr}
 8015a52:	b082      	sub	sp, #8
 8015a54:	af00      	add	r7, sp, #0
 8015a56:	6078      	str	r0, [r7, #4]
 8015a58:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8015a5a:	4a05      	ldr	r2, [pc, #20]	; (8015a70 <etharp_request+0x20>)
 8015a5c:	6839      	ldr	r1, [r7, #0]
 8015a5e:	6878      	ldr	r0, [r7, #4]
 8015a60:	f7ff ffd4 	bl	8015a0c <etharp_request_dst>
 8015a64:	4603      	mov	r3, r0
}
 8015a66:	4618      	mov	r0, r3
 8015a68:	3708      	adds	r7, #8
 8015a6a:	46bd      	mov	sp, r7
 8015a6c:	bd80      	pop	{r7, pc}
 8015a6e:	bf00      	nop
 8015a70:	0801ba40 	.word	0x0801ba40

08015a74 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8015a74:	b580      	push	{r7, lr}
 8015a76:	b08e      	sub	sp, #56	; 0x38
 8015a78:	af04      	add	r7, sp, #16
 8015a7a:	6078      	str	r0, [r7, #4]
 8015a7c:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8015a7e:	4b79      	ldr	r3, [pc, #484]	; (8015c64 <icmp_input+0x1f0>)
 8015a80:	689b      	ldr	r3, [r3, #8]
 8015a82:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8015a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015a86:	781b      	ldrb	r3, [r3, #0]
 8015a88:	f003 030f 	and.w	r3, r3, #15
 8015a8c:	b2db      	uxtb	r3, r3
 8015a8e:	009b      	lsls	r3, r3, #2
 8015a90:	b2db      	uxtb	r3, r3
 8015a92:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8015a94:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015a96:	2b13      	cmp	r3, #19
 8015a98:	f240 80cd 	bls.w	8015c36 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8015a9c:	687b      	ldr	r3, [r7, #4]
 8015a9e:	895b      	ldrh	r3, [r3, #10]
 8015aa0:	2b03      	cmp	r3, #3
 8015aa2:	f240 80ca 	bls.w	8015c3a <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8015aa6:	687b      	ldr	r3, [r7, #4]
 8015aa8:	685b      	ldr	r3, [r3, #4]
 8015aaa:	781b      	ldrb	r3, [r3, #0]
 8015aac:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8015ab0:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8015ab4:	2b00      	cmp	r3, #0
 8015ab6:	f000 80b7 	beq.w	8015c28 <icmp_input+0x1b4>
 8015aba:	2b08      	cmp	r3, #8
 8015abc:	f040 80b7 	bne.w	8015c2e <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8015ac0:	4b69      	ldr	r3, [pc, #420]	; (8015c68 <icmp_input+0x1f4>)
 8015ac2:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8015ac4:	4b67      	ldr	r3, [pc, #412]	; (8015c64 <icmp_input+0x1f0>)
 8015ac6:	695b      	ldr	r3, [r3, #20]
 8015ac8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8015acc:	2be0      	cmp	r3, #224	; 0xe0
 8015ace:	f000 80bb 	beq.w	8015c48 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8015ad2:	4b64      	ldr	r3, [pc, #400]	; (8015c64 <icmp_input+0x1f0>)
 8015ad4:	695a      	ldr	r2, [r3, #20]
 8015ad6:	4b63      	ldr	r3, [pc, #396]	; (8015c64 <icmp_input+0x1f0>)
 8015ad8:	681b      	ldr	r3, [r3, #0]
 8015ada:	4619      	mov	r1, r3
 8015adc:	4610      	mov	r0, r2
 8015ade:	f000 fbe3 	bl	80162a8 <ip4_addr_isbroadcast_u32>
 8015ae2:	4603      	mov	r3, r0
 8015ae4:	2b00      	cmp	r3, #0
 8015ae6:	f040 80b1 	bne.w	8015c4c <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8015aea:	687b      	ldr	r3, [r7, #4]
 8015aec:	891b      	ldrh	r3, [r3, #8]
 8015aee:	2b07      	cmp	r3, #7
 8015af0:	f240 80a5 	bls.w	8015c3e <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8015af4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015af6:	330e      	adds	r3, #14
 8015af8:	4619      	mov	r1, r3
 8015afa:	6878      	ldr	r0, [r7, #4]
 8015afc:	f7f8 fb0e 	bl	800e11c <pbuf_add_header>
 8015b00:	4603      	mov	r3, r0
 8015b02:	2b00      	cmp	r3, #0
 8015b04:	d04b      	beq.n	8015b9e <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8015b06:	687b      	ldr	r3, [r7, #4]
 8015b08:	891a      	ldrh	r2, [r3, #8]
 8015b0a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015b0c:	4413      	add	r3, r2
 8015b0e:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8015b10:	687b      	ldr	r3, [r7, #4]
 8015b12:	891b      	ldrh	r3, [r3, #8]
 8015b14:	8b7a      	ldrh	r2, [r7, #26]
 8015b16:	429a      	cmp	r2, r3
 8015b18:	f0c0 809a 	bcc.w	8015c50 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8015b1c:	8b7b      	ldrh	r3, [r7, #26]
 8015b1e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015b22:	4619      	mov	r1, r3
 8015b24:	200e      	movs	r0, #14
 8015b26:	f7f8 f8af 	bl	800dc88 <pbuf_alloc>
 8015b2a:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8015b2c:	697b      	ldr	r3, [r7, #20]
 8015b2e:	2b00      	cmp	r3, #0
 8015b30:	f000 8090 	beq.w	8015c54 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8015b34:	697b      	ldr	r3, [r7, #20]
 8015b36:	895b      	ldrh	r3, [r3, #10]
 8015b38:	461a      	mov	r2, r3
 8015b3a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015b3c:	3308      	adds	r3, #8
 8015b3e:	429a      	cmp	r2, r3
 8015b40:	d203      	bcs.n	8015b4a <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8015b42:	6978      	ldr	r0, [r7, #20]
 8015b44:	f7f8 fbb2 	bl	800e2ac <pbuf_free>
          goto icmperr;
 8015b48:	e085      	b.n	8015c56 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8015b4a:	697b      	ldr	r3, [r7, #20]
 8015b4c:	685b      	ldr	r3, [r3, #4]
 8015b4e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8015b50:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8015b52:	4618      	mov	r0, r3
 8015b54:	f001 fd1d 	bl	8017592 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8015b58:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015b5a:	4619      	mov	r1, r3
 8015b5c:	6978      	ldr	r0, [r7, #20]
 8015b5e:	f7f8 faed 	bl	800e13c <pbuf_remove_header>
 8015b62:	4603      	mov	r3, r0
 8015b64:	2b00      	cmp	r3, #0
 8015b66:	d009      	beq.n	8015b7c <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8015b68:	4b40      	ldr	r3, [pc, #256]	; (8015c6c <icmp_input+0x1f8>)
 8015b6a:	22b6      	movs	r2, #182	; 0xb6
 8015b6c:	4940      	ldr	r1, [pc, #256]	; (8015c70 <icmp_input+0x1fc>)
 8015b6e:	4841      	ldr	r0, [pc, #260]	; (8015c74 <icmp_input+0x200>)
 8015b70:	f001 fd22 	bl	80175b8 <iprintf>
          pbuf_free(r);
 8015b74:	6978      	ldr	r0, [r7, #20]
 8015b76:	f7f8 fb99 	bl	800e2ac <pbuf_free>
          goto icmperr;
 8015b7a:	e06c      	b.n	8015c56 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8015b7c:	6879      	ldr	r1, [r7, #4]
 8015b7e:	6978      	ldr	r0, [r7, #20]
 8015b80:	f7f8 fcb8 	bl	800e4f4 <pbuf_copy>
 8015b84:	4603      	mov	r3, r0
 8015b86:	2b00      	cmp	r3, #0
 8015b88:	d003      	beq.n	8015b92 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8015b8a:	6978      	ldr	r0, [r7, #20]
 8015b8c:	f7f8 fb8e 	bl	800e2ac <pbuf_free>
          goto icmperr;
 8015b90:	e061      	b.n	8015c56 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 8015b92:	6878      	ldr	r0, [r7, #4]
 8015b94:	f7f8 fb8a 	bl	800e2ac <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8015b98:	697b      	ldr	r3, [r7, #20]
 8015b9a:	607b      	str	r3, [r7, #4]
 8015b9c:	e00f      	b.n	8015bbe <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8015b9e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015ba0:	330e      	adds	r3, #14
 8015ba2:	4619      	mov	r1, r3
 8015ba4:	6878      	ldr	r0, [r7, #4]
 8015ba6:	f7f8 fac9 	bl	800e13c <pbuf_remove_header>
 8015baa:	4603      	mov	r3, r0
 8015bac:	2b00      	cmp	r3, #0
 8015bae:	d006      	beq.n	8015bbe <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8015bb0:	4b2e      	ldr	r3, [pc, #184]	; (8015c6c <icmp_input+0x1f8>)
 8015bb2:	22c7      	movs	r2, #199	; 0xc7
 8015bb4:	4930      	ldr	r1, [pc, #192]	; (8015c78 <icmp_input+0x204>)
 8015bb6:	482f      	ldr	r0, [pc, #188]	; (8015c74 <icmp_input+0x200>)
 8015bb8:	f001 fcfe 	bl	80175b8 <iprintf>
          goto icmperr;
 8015bbc:	e04b      	b.n	8015c56 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8015bbe:	687b      	ldr	r3, [r7, #4]
 8015bc0:	685b      	ldr	r3, [r3, #4]
 8015bc2:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8015bc4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015bc6:	4619      	mov	r1, r3
 8015bc8:	6878      	ldr	r0, [r7, #4]
 8015bca:	f7f8 faa7 	bl	800e11c <pbuf_add_header>
 8015bce:	4603      	mov	r3, r0
 8015bd0:	2b00      	cmp	r3, #0
 8015bd2:	d12b      	bne.n	8015c2c <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8015bd4:	687b      	ldr	r3, [r7, #4]
 8015bd6:	685b      	ldr	r3, [r3, #4]
 8015bd8:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8015bda:	69fb      	ldr	r3, [r7, #28]
 8015bdc:	681a      	ldr	r2, [r3, #0]
 8015bde:	68fb      	ldr	r3, [r7, #12]
 8015be0:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8015be2:	4b20      	ldr	r3, [pc, #128]	; (8015c64 <icmp_input+0x1f0>)
 8015be4:	691a      	ldr	r2, [r3, #16]
 8015be6:	68fb      	ldr	r3, [r7, #12]
 8015be8:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8015bea:	693b      	ldr	r3, [r7, #16]
 8015bec:	2200      	movs	r2, #0
 8015bee:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8015bf0:	693b      	ldr	r3, [r7, #16]
 8015bf2:	2200      	movs	r2, #0
 8015bf4:	709a      	strb	r2, [r3, #2]
 8015bf6:	2200      	movs	r2, #0
 8015bf8:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8015bfa:	68fb      	ldr	r3, [r7, #12]
 8015bfc:	22ff      	movs	r2, #255	; 0xff
 8015bfe:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8015c00:	68fb      	ldr	r3, [r7, #12]
 8015c02:	2200      	movs	r2, #0
 8015c04:	729a      	strb	r2, [r3, #10]
 8015c06:	2200      	movs	r2, #0
 8015c08:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8015c0a:	683b      	ldr	r3, [r7, #0]
 8015c0c:	9302      	str	r3, [sp, #8]
 8015c0e:	2301      	movs	r3, #1
 8015c10:	9301      	str	r3, [sp, #4]
 8015c12:	2300      	movs	r3, #0
 8015c14:	9300      	str	r3, [sp, #0]
 8015c16:	23ff      	movs	r3, #255	; 0xff
 8015c18:	2200      	movs	r2, #0
 8015c1a:	69f9      	ldr	r1, [r7, #28]
 8015c1c:	6878      	ldr	r0, [r7, #4]
 8015c1e:	f000 fa6b 	bl	80160f8 <ip4_output_if>
 8015c22:	4603      	mov	r3, r0
 8015c24:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8015c26:	e001      	b.n	8015c2c <icmp_input+0x1b8>
      break;
 8015c28:	bf00      	nop
 8015c2a:	e000      	b.n	8015c2e <icmp_input+0x1ba>
      break;
 8015c2c:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8015c2e:	6878      	ldr	r0, [r7, #4]
 8015c30:	f7f8 fb3c 	bl	800e2ac <pbuf_free>
  return;
 8015c34:	e013      	b.n	8015c5e <icmp_input+0x1ea>
    goto lenerr;
 8015c36:	bf00      	nop
 8015c38:	e002      	b.n	8015c40 <icmp_input+0x1cc>
    goto lenerr;
 8015c3a:	bf00      	nop
 8015c3c:	e000      	b.n	8015c40 <icmp_input+0x1cc>
        goto lenerr;
 8015c3e:	bf00      	nop
lenerr:
  pbuf_free(p);
 8015c40:	6878      	ldr	r0, [r7, #4]
 8015c42:	f7f8 fb33 	bl	800e2ac <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8015c46:	e00a      	b.n	8015c5e <icmp_input+0x1ea>
        goto icmperr;
 8015c48:	bf00      	nop
 8015c4a:	e004      	b.n	8015c56 <icmp_input+0x1e2>
        goto icmperr;
 8015c4c:	bf00      	nop
 8015c4e:	e002      	b.n	8015c56 <icmp_input+0x1e2>
          goto icmperr;
 8015c50:	bf00      	nop
 8015c52:	e000      	b.n	8015c56 <icmp_input+0x1e2>
          goto icmperr;
 8015c54:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8015c56:	6878      	ldr	r0, [r7, #4]
 8015c58:	f7f8 fb28 	bl	800e2ac <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8015c5c:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8015c5e:	3728      	adds	r7, #40	; 0x28
 8015c60:	46bd      	mov	sp, r7
 8015c62:	bd80      	pop	{r7, pc}
 8015c64:	20007a38 	.word	0x20007a38
 8015c68:	20007a4c 	.word	0x20007a4c
 8015c6c:	0801b490 	.word	0x0801b490
 8015c70:	0801b4c8 	.word	0x0801b4c8
 8015c74:	0801b500 	.word	0x0801b500
 8015c78:	0801b528 	.word	0x0801b528

08015c7c <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8015c7c:	b580      	push	{r7, lr}
 8015c7e:	b082      	sub	sp, #8
 8015c80:	af00      	add	r7, sp, #0
 8015c82:	6078      	str	r0, [r7, #4]
 8015c84:	460b      	mov	r3, r1
 8015c86:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8015c88:	78fb      	ldrb	r3, [r7, #3]
 8015c8a:	461a      	mov	r2, r3
 8015c8c:	2103      	movs	r1, #3
 8015c8e:	6878      	ldr	r0, [r7, #4]
 8015c90:	f000 f814 	bl	8015cbc <icmp_send_response>
}
 8015c94:	bf00      	nop
 8015c96:	3708      	adds	r7, #8
 8015c98:	46bd      	mov	sp, r7
 8015c9a:	bd80      	pop	{r7, pc}

08015c9c <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8015c9c:	b580      	push	{r7, lr}
 8015c9e:	b082      	sub	sp, #8
 8015ca0:	af00      	add	r7, sp, #0
 8015ca2:	6078      	str	r0, [r7, #4]
 8015ca4:	460b      	mov	r3, r1
 8015ca6:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8015ca8:	78fb      	ldrb	r3, [r7, #3]
 8015caa:	461a      	mov	r2, r3
 8015cac:	210b      	movs	r1, #11
 8015cae:	6878      	ldr	r0, [r7, #4]
 8015cb0:	f000 f804 	bl	8015cbc <icmp_send_response>
}
 8015cb4:	bf00      	nop
 8015cb6:	3708      	adds	r7, #8
 8015cb8:	46bd      	mov	sp, r7
 8015cba:	bd80      	pop	{r7, pc}

08015cbc <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8015cbc:	b580      	push	{r7, lr}
 8015cbe:	b08c      	sub	sp, #48	; 0x30
 8015cc0:	af04      	add	r7, sp, #16
 8015cc2:	6078      	str	r0, [r7, #4]
 8015cc4:	460b      	mov	r3, r1
 8015cc6:	70fb      	strb	r3, [r7, #3]
 8015cc8:	4613      	mov	r3, r2
 8015cca:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8015ccc:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015cd0:	2124      	movs	r1, #36	; 0x24
 8015cd2:	2022      	movs	r0, #34	; 0x22
 8015cd4:	f7f7 ffd8 	bl	800dc88 <pbuf_alloc>
 8015cd8:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8015cda:	69fb      	ldr	r3, [r7, #28]
 8015cdc:	2b00      	cmp	r3, #0
 8015cde:	d04c      	beq.n	8015d7a <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8015ce0:	69fb      	ldr	r3, [r7, #28]
 8015ce2:	895b      	ldrh	r3, [r3, #10]
 8015ce4:	2b23      	cmp	r3, #35	; 0x23
 8015ce6:	d806      	bhi.n	8015cf6 <icmp_send_response+0x3a>
 8015ce8:	4b26      	ldr	r3, [pc, #152]	; (8015d84 <icmp_send_response+0xc8>)
 8015cea:	f240 1269 	movw	r2, #361	; 0x169
 8015cee:	4926      	ldr	r1, [pc, #152]	; (8015d88 <icmp_send_response+0xcc>)
 8015cf0:	4826      	ldr	r0, [pc, #152]	; (8015d8c <icmp_send_response+0xd0>)
 8015cf2:	f001 fc61 	bl	80175b8 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8015cf6:	687b      	ldr	r3, [r7, #4]
 8015cf8:	685b      	ldr	r3, [r3, #4]
 8015cfa:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8015cfc:	69fb      	ldr	r3, [r7, #28]
 8015cfe:	685b      	ldr	r3, [r3, #4]
 8015d00:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8015d02:	697b      	ldr	r3, [r7, #20]
 8015d04:	78fa      	ldrb	r2, [r7, #3]
 8015d06:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8015d08:	697b      	ldr	r3, [r7, #20]
 8015d0a:	78ba      	ldrb	r2, [r7, #2]
 8015d0c:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8015d0e:	697b      	ldr	r3, [r7, #20]
 8015d10:	2200      	movs	r2, #0
 8015d12:	711a      	strb	r2, [r3, #4]
 8015d14:	2200      	movs	r2, #0
 8015d16:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8015d18:	697b      	ldr	r3, [r7, #20]
 8015d1a:	2200      	movs	r2, #0
 8015d1c:	719a      	strb	r2, [r3, #6]
 8015d1e:	2200      	movs	r2, #0
 8015d20:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8015d22:	69fb      	ldr	r3, [r7, #28]
 8015d24:	685b      	ldr	r3, [r3, #4]
 8015d26:	f103 0008 	add.w	r0, r3, #8
 8015d2a:	687b      	ldr	r3, [r7, #4]
 8015d2c:	685b      	ldr	r3, [r3, #4]
 8015d2e:	221c      	movs	r2, #28
 8015d30:	4619      	mov	r1, r3
 8015d32:	f001 fc2e 	bl	8017592 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8015d36:	69bb      	ldr	r3, [r7, #24]
 8015d38:	68db      	ldr	r3, [r3, #12]
 8015d3a:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8015d3c:	f107 030c 	add.w	r3, r7, #12
 8015d40:	4618      	mov	r0, r3
 8015d42:	f000 f825 	bl	8015d90 <ip4_route>
 8015d46:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8015d48:	693b      	ldr	r3, [r7, #16]
 8015d4a:	2b00      	cmp	r3, #0
 8015d4c:	d011      	beq.n	8015d72 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8015d4e:	697b      	ldr	r3, [r7, #20]
 8015d50:	2200      	movs	r2, #0
 8015d52:	709a      	strb	r2, [r3, #2]
 8015d54:	2200      	movs	r2, #0
 8015d56:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8015d58:	f107 020c 	add.w	r2, r7, #12
 8015d5c:	693b      	ldr	r3, [r7, #16]
 8015d5e:	9302      	str	r3, [sp, #8]
 8015d60:	2301      	movs	r3, #1
 8015d62:	9301      	str	r3, [sp, #4]
 8015d64:	2300      	movs	r3, #0
 8015d66:	9300      	str	r3, [sp, #0]
 8015d68:	23ff      	movs	r3, #255	; 0xff
 8015d6a:	2100      	movs	r1, #0
 8015d6c:	69f8      	ldr	r0, [r7, #28]
 8015d6e:	f000 f9c3 	bl	80160f8 <ip4_output_if>
  }
  pbuf_free(q);
 8015d72:	69f8      	ldr	r0, [r7, #28]
 8015d74:	f7f8 fa9a 	bl	800e2ac <pbuf_free>
 8015d78:	e000      	b.n	8015d7c <icmp_send_response+0xc0>
    return;
 8015d7a:	bf00      	nop
}
 8015d7c:	3720      	adds	r7, #32
 8015d7e:	46bd      	mov	sp, r7
 8015d80:	bd80      	pop	{r7, pc}
 8015d82:	bf00      	nop
 8015d84:	0801b490 	.word	0x0801b490
 8015d88:	0801b55c 	.word	0x0801b55c
 8015d8c:	0801b500 	.word	0x0801b500

08015d90 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8015d90:	b480      	push	{r7}
 8015d92:	b085      	sub	sp, #20
 8015d94:	af00      	add	r7, sp, #0
 8015d96:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8015d98:	4b33      	ldr	r3, [pc, #204]	; (8015e68 <ip4_route+0xd8>)
 8015d9a:	681b      	ldr	r3, [r3, #0]
 8015d9c:	60fb      	str	r3, [r7, #12]
 8015d9e:	e036      	b.n	8015e0e <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8015da0:	68fb      	ldr	r3, [r7, #12]
 8015da2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015da6:	f003 0301 	and.w	r3, r3, #1
 8015daa:	b2db      	uxtb	r3, r3
 8015dac:	2b00      	cmp	r3, #0
 8015dae:	d02b      	beq.n	8015e08 <ip4_route+0x78>
 8015db0:	68fb      	ldr	r3, [r7, #12]
 8015db2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015db6:	089b      	lsrs	r3, r3, #2
 8015db8:	f003 0301 	and.w	r3, r3, #1
 8015dbc:	b2db      	uxtb	r3, r3
 8015dbe:	2b00      	cmp	r3, #0
 8015dc0:	d022      	beq.n	8015e08 <ip4_route+0x78>
 8015dc2:	68fb      	ldr	r3, [r7, #12]
 8015dc4:	3304      	adds	r3, #4
 8015dc6:	681b      	ldr	r3, [r3, #0]
 8015dc8:	2b00      	cmp	r3, #0
 8015dca:	d01d      	beq.n	8015e08 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8015dcc:	687b      	ldr	r3, [r7, #4]
 8015dce:	681a      	ldr	r2, [r3, #0]
 8015dd0:	68fb      	ldr	r3, [r7, #12]
 8015dd2:	3304      	adds	r3, #4
 8015dd4:	681b      	ldr	r3, [r3, #0]
 8015dd6:	405a      	eors	r2, r3
 8015dd8:	68fb      	ldr	r3, [r7, #12]
 8015dda:	3308      	adds	r3, #8
 8015ddc:	681b      	ldr	r3, [r3, #0]
 8015dde:	4013      	ands	r3, r2
 8015de0:	2b00      	cmp	r3, #0
 8015de2:	d101      	bne.n	8015de8 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8015de4:	68fb      	ldr	r3, [r7, #12]
 8015de6:	e038      	b.n	8015e5a <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8015de8:	68fb      	ldr	r3, [r7, #12]
 8015dea:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015dee:	f003 0302 	and.w	r3, r3, #2
 8015df2:	2b00      	cmp	r3, #0
 8015df4:	d108      	bne.n	8015e08 <ip4_route+0x78>
 8015df6:	687b      	ldr	r3, [r7, #4]
 8015df8:	681a      	ldr	r2, [r3, #0]
 8015dfa:	68fb      	ldr	r3, [r7, #12]
 8015dfc:	330c      	adds	r3, #12
 8015dfe:	681b      	ldr	r3, [r3, #0]
 8015e00:	429a      	cmp	r2, r3
 8015e02:	d101      	bne.n	8015e08 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8015e04:	68fb      	ldr	r3, [r7, #12]
 8015e06:	e028      	b.n	8015e5a <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8015e08:	68fb      	ldr	r3, [r7, #12]
 8015e0a:	681b      	ldr	r3, [r3, #0]
 8015e0c:	60fb      	str	r3, [r7, #12]
 8015e0e:	68fb      	ldr	r3, [r7, #12]
 8015e10:	2b00      	cmp	r3, #0
 8015e12:	d1c5      	bne.n	8015da0 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8015e14:	4b15      	ldr	r3, [pc, #84]	; (8015e6c <ip4_route+0xdc>)
 8015e16:	681b      	ldr	r3, [r3, #0]
 8015e18:	2b00      	cmp	r3, #0
 8015e1a:	d01a      	beq.n	8015e52 <ip4_route+0xc2>
 8015e1c:	4b13      	ldr	r3, [pc, #76]	; (8015e6c <ip4_route+0xdc>)
 8015e1e:	681b      	ldr	r3, [r3, #0]
 8015e20:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015e24:	f003 0301 	and.w	r3, r3, #1
 8015e28:	2b00      	cmp	r3, #0
 8015e2a:	d012      	beq.n	8015e52 <ip4_route+0xc2>
 8015e2c:	4b0f      	ldr	r3, [pc, #60]	; (8015e6c <ip4_route+0xdc>)
 8015e2e:	681b      	ldr	r3, [r3, #0]
 8015e30:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015e34:	f003 0304 	and.w	r3, r3, #4
 8015e38:	2b00      	cmp	r3, #0
 8015e3a:	d00a      	beq.n	8015e52 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8015e3c:	4b0b      	ldr	r3, [pc, #44]	; (8015e6c <ip4_route+0xdc>)
 8015e3e:	681b      	ldr	r3, [r3, #0]
 8015e40:	3304      	adds	r3, #4
 8015e42:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8015e44:	2b00      	cmp	r3, #0
 8015e46:	d004      	beq.n	8015e52 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8015e48:	687b      	ldr	r3, [r7, #4]
 8015e4a:	681b      	ldr	r3, [r3, #0]
 8015e4c:	b2db      	uxtb	r3, r3
 8015e4e:	2b7f      	cmp	r3, #127	; 0x7f
 8015e50:	d101      	bne.n	8015e56 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8015e52:	2300      	movs	r3, #0
 8015e54:	e001      	b.n	8015e5a <ip4_route+0xca>
  }

  return netif_default;
 8015e56:	4b05      	ldr	r3, [pc, #20]	; (8015e6c <ip4_route+0xdc>)
 8015e58:	681b      	ldr	r3, [r3, #0]
}
 8015e5a:	4618      	mov	r0, r3
 8015e5c:	3714      	adds	r7, #20
 8015e5e:	46bd      	mov	sp, r7
 8015e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e64:	4770      	bx	lr
 8015e66:	bf00      	nop
 8015e68:	2000d278 	.word	0x2000d278
 8015e6c:	2000d27c 	.word	0x2000d27c

08015e70 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8015e70:	b580      	push	{r7, lr}
 8015e72:	b082      	sub	sp, #8
 8015e74:	af00      	add	r7, sp, #0
 8015e76:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8015e78:	687b      	ldr	r3, [r7, #4]
 8015e7a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015e7e:	f003 0301 	and.w	r3, r3, #1
 8015e82:	b2db      	uxtb	r3, r3
 8015e84:	2b00      	cmp	r3, #0
 8015e86:	d016      	beq.n	8015eb6 <ip4_input_accept+0x46>
 8015e88:	687b      	ldr	r3, [r7, #4]
 8015e8a:	3304      	adds	r3, #4
 8015e8c:	681b      	ldr	r3, [r3, #0]
 8015e8e:	2b00      	cmp	r3, #0
 8015e90:	d011      	beq.n	8015eb6 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8015e92:	4b0b      	ldr	r3, [pc, #44]	; (8015ec0 <ip4_input_accept+0x50>)
 8015e94:	695a      	ldr	r2, [r3, #20]
 8015e96:	687b      	ldr	r3, [r7, #4]
 8015e98:	3304      	adds	r3, #4
 8015e9a:	681b      	ldr	r3, [r3, #0]
 8015e9c:	429a      	cmp	r2, r3
 8015e9e:	d008      	beq.n	8015eb2 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8015ea0:	4b07      	ldr	r3, [pc, #28]	; (8015ec0 <ip4_input_accept+0x50>)
 8015ea2:	695b      	ldr	r3, [r3, #20]
 8015ea4:	6879      	ldr	r1, [r7, #4]
 8015ea6:	4618      	mov	r0, r3
 8015ea8:	f000 f9fe 	bl	80162a8 <ip4_addr_isbroadcast_u32>
 8015eac:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8015eae:	2b00      	cmp	r3, #0
 8015eb0:	d001      	beq.n	8015eb6 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8015eb2:	2301      	movs	r3, #1
 8015eb4:	e000      	b.n	8015eb8 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8015eb6:	2300      	movs	r3, #0
}
 8015eb8:	4618      	mov	r0, r3
 8015eba:	3708      	adds	r7, #8
 8015ebc:	46bd      	mov	sp, r7
 8015ebe:	bd80      	pop	{r7, pc}
 8015ec0:	20007a38 	.word	0x20007a38

08015ec4 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8015ec4:	b580      	push	{r7, lr}
 8015ec6:	b086      	sub	sp, #24
 8015ec8:	af00      	add	r7, sp, #0
 8015eca:	6078      	str	r0, [r7, #4]
 8015ecc:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8015ece:	687b      	ldr	r3, [r7, #4]
 8015ed0:	685b      	ldr	r3, [r3, #4]
 8015ed2:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8015ed4:	697b      	ldr	r3, [r7, #20]
 8015ed6:	781b      	ldrb	r3, [r3, #0]
 8015ed8:	091b      	lsrs	r3, r3, #4
 8015eda:	b2db      	uxtb	r3, r3
 8015edc:	2b04      	cmp	r3, #4
 8015ede:	d004      	beq.n	8015eea <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8015ee0:	6878      	ldr	r0, [r7, #4]
 8015ee2:	f7f8 f9e3 	bl	800e2ac <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8015ee6:	2300      	movs	r3, #0
 8015ee8:	e0fd      	b.n	80160e6 <ip4_input+0x222>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8015eea:	697b      	ldr	r3, [r7, #20]
 8015eec:	781b      	ldrb	r3, [r3, #0]
 8015eee:	f003 030f 	and.w	r3, r3, #15
 8015ef2:	b2db      	uxtb	r3, r3
 8015ef4:	009b      	lsls	r3, r3, #2
 8015ef6:	b2db      	uxtb	r3, r3
 8015ef8:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8015efa:	697b      	ldr	r3, [r7, #20]
 8015efc:	885b      	ldrh	r3, [r3, #2]
 8015efe:	b29b      	uxth	r3, r3
 8015f00:	4618      	mov	r0, r3
 8015f02:	f7f6 fdff 	bl	800cb04 <lwip_htons>
 8015f06:	4603      	mov	r3, r0
 8015f08:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8015f0a:	687b      	ldr	r3, [r7, #4]
 8015f0c:	891b      	ldrh	r3, [r3, #8]
 8015f0e:	89ba      	ldrh	r2, [r7, #12]
 8015f10:	429a      	cmp	r2, r3
 8015f12:	d204      	bcs.n	8015f1e <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8015f14:	89bb      	ldrh	r3, [r7, #12]
 8015f16:	4619      	mov	r1, r3
 8015f18:	6878      	ldr	r0, [r7, #4]
 8015f1a:	f7f8 f80f 	bl	800df3c <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8015f1e:	687b      	ldr	r3, [r7, #4]
 8015f20:	895b      	ldrh	r3, [r3, #10]
 8015f22:	89fa      	ldrh	r2, [r7, #14]
 8015f24:	429a      	cmp	r2, r3
 8015f26:	d807      	bhi.n	8015f38 <ip4_input+0x74>
 8015f28:	687b      	ldr	r3, [r7, #4]
 8015f2a:	891b      	ldrh	r3, [r3, #8]
 8015f2c:	89ba      	ldrh	r2, [r7, #12]
 8015f2e:	429a      	cmp	r2, r3
 8015f30:	d802      	bhi.n	8015f38 <ip4_input+0x74>
 8015f32:	89fb      	ldrh	r3, [r7, #14]
 8015f34:	2b13      	cmp	r3, #19
 8015f36:	d804      	bhi.n	8015f42 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8015f38:	6878      	ldr	r0, [r7, #4]
 8015f3a:	f7f8 f9b7 	bl	800e2ac <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8015f3e:	2300      	movs	r3, #0
 8015f40:	e0d1      	b.n	80160e6 <ip4_input+0x222>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8015f42:	697b      	ldr	r3, [r7, #20]
 8015f44:	691b      	ldr	r3, [r3, #16]
 8015f46:	4a6a      	ldr	r2, [pc, #424]	; (80160f0 <ip4_input+0x22c>)
 8015f48:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8015f4a:	697b      	ldr	r3, [r7, #20]
 8015f4c:	68db      	ldr	r3, [r3, #12]
 8015f4e:	4a68      	ldr	r2, [pc, #416]	; (80160f0 <ip4_input+0x22c>)
 8015f50:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8015f52:	4b67      	ldr	r3, [pc, #412]	; (80160f0 <ip4_input+0x22c>)
 8015f54:	695b      	ldr	r3, [r3, #20]
 8015f56:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8015f5a:	2be0      	cmp	r3, #224	; 0xe0
 8015f5c:	d112      	bne.n	8015f84 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8015f5e:	683b      	ldr	r3, [r7, #0]
 8015f60:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015f64:	f003 0301 	and.w	r3, r3, #1
 8015f68:	b2db      	uxtb	r3, r3
 8015f6a:	2b00      	cmp	r3, #0
 8015f6c:	d007      	beq.n	8015f7e <ip4_input+0xba>
 8015f6e:	683b      	ldr	r3, [r7, #0]
 8015f70:	3304      	adds	r3, #4
 8015f72:	681b      	ldr	r3, [r3, #0]
 8015f74:	2b00      	cmp	r3, #0
 8015f76:	d002      	beq.n	8015f7e <ip4_input+0xba>
      netif = inp;
 8015f78:	683b      	ldr	r3, [r7, #0]
 8015f7a:	613b      	str	r3, [r7, #16]
 8015f7c:	e02a      	b.n	8015fd4 <ip4_input+0x110>
    } else {
      netif = NULL;
 8015f7e:	2300      	movs	r3, #0
 8015f80:	613b      	str	r3, [r7, #16]
 8015f82:	e027      	b.n	8015fd4 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8015f84:	6838      	ldr	r0, [r7, #0]
 8015f86:	f7ff ff73 	bl	8015e70 <ip4_input_accept>
 8015f8a:	4603      	mov	r3, r0
 8015f8c:	2b00      	cmp	r3, #0
 8015f8e:	d002      	beq.n	8015f96 <ip4_input+0xd2>
      netif = inp;
 8015f90:	683b      	ldr	r3, [r7, #0]
 8015f92:	613b      	str	r3, [r7, #16]
 8015f94:	e01e      	b.n	8015fd4 <ip4_input+0x110>
    } else {
      netif = NULL;
 8015f96:	2300      	movs	r3, #0
 8015f98:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8015f9a:	4b55      	ldr	r3, [pc, #340]	; (80160f0 <ip4_input+0x22c>)
 8015f9c:	695b      	ldr	r3, [r3, #20]
 8015f9e:	b2db      	uxtb	r3, r3
 8015fa0:	2b7f      	cmp	r3, #127	; 0x7f
 8015fa2:	d017      	beq.n	8015fd4 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8015fa4:	4b53      	ldr	r3, [pc, #332]	; (80160f4 <ip4_input+0x230>)
 8015fa6:	681b      	ldr	r3, [r3, #0]
 8015fa8:	613b      	str	r3, [r7, #16]
 8015faa:	e00e      	b.n	8015fca <ip4_input+0x106>
          if (netif == inp) {
 8015fac:	693a      	ldr	r2, [r7, #16]
 8015fae:	683b      	ldr	r3, [r7, #0]
 8015fb0:	429a      	cmp	r2, r3
 8015fb2:	d006      	beq.n	8015fc2 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8015fb4:	6938      	ldr	r0, [r7, #16]
 8015fb6:	f7ff ff5b 	bl	8015e70 <ip4_input_accept>
 8015fba:	4603      	mov	r3, r0
 8015fbc:	2b00      	cmp	r3, #0
 8015fbe:	d108      	bne.n	8015fd2 <ip4_input+0x10e>
 8015fc0:	e000      	b.n	8015fc4 <ip4_input+0x100>
            continue;
 8015fc2:	bf00      	nop
        NETIF_FOREACH(netif) {
 8015fc4:	693b      	ldr	r3, [r7, #16]
 8015fc6:	681b      	ldr	r3, [r3, #0]
 8015fc8:	613b      	str	r3, [r7, #16]
 8015fca:	693b      	ldr	r3, [r7, #16]
 8015fcc:	2b00      	cmp	r3, #0
 8015fce:	d1ed      	bne.n	8015fac <ip4_input+0xe8>
 8015fd0:	e000      	b.n	8015fd4 <ip4_input+0x110>
            break;
 8015fd2:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8015fd4:	4b46      	ldr	r3, [pc, #280]	; (80160f0 <ip4_input+0x22c>)
 8015fd6:	691b      	ldr	r3, [r3, #16]
 8015fd8:	6839      	ldr	r1, [r7, #0]
 8015fda:	4618      	mov	r0, r3
 8015fdc:	f000 f964 	bl	80162a8 <ip4_addr_isbroadcast_u32>
 8015fe0:	4603      	mov	r3, r0
 8015fe2:	2b00      	cmp	r3, #0
 8015fe4:	d105      	bne.n	8015ff2 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8015fe6:	4b42      	ldr	r3, [pc, #264]	; (80160f0 <ip4_input+0x22c>)
 8015fe8:	691b      	ldr	r3, [r3, #16]
 8015fea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8015fee:	2be0      	cmp	r3, #224	; 0xe0
 8015ff0:	d104      	bne.n	8015ffc <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8015ff2:	6878      	ldr	r0, [r7, #4]
 8015ff4:	f7f8 f95a 	bl	800e2ac <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8015ff8:	2300      	movs	r3, #0
 8015ffa:	e074      	b.n	80160e6 <ip4_input+0x222>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8015ffc:	693b      	ldr	r3, [r7, #16]
 8015ffe:	2b00      	cmp	r3, #0
 8016000:	d104      	bne.n	801600c <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8016002:	6878      	ldr	r0, [r7, #4]
 8016004:	f7f8 f952 	bl	800e2ac <pbuf_free>
    return ERR_OK;
 8016008:	2300      	movs	r3, #0
 801600a:	e06c      	b.n	80160e6 <ip4_input+0x222>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 801600c:	697b      	ldr	r3, [r7, #20]
 801600e:	88db      	ldrh	r3, [r3, #6]
 8016010:	b29b      	uxth	r3, r3
 8016012:	461a      	mov	r2, r3
 8016014:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8016018:	4013      	ands	r3, r2
 801601a:	2b00      	cmp	r3, #0
 801601c:	d00b      	beq.n	8016036 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801601e:	6878      	ldr	r0, [r7, #4]
 8016020:	f000 fc88 	bl	8016934 <ip4_reass>
 8016024:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8016026:	687b      	ldr	r3, [r7, #4]
 8016028:	2b00      	cmp	r3, #0
 801602a:	d101      	bne.n	8016030 <ip4_input+0x16c>
      return ERR_OK;
 801602c:	2300      	movs	r3, #0
 801602e:	e05a      	b.n	80160e6 <ip4_input+0x222>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8016030:	687b      	ldr	r3, [r7, #4]
 8016032:	685b      	ldr	r3, [r3, #4]
 8016034:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8016036:	4a2e      	ldr	r2, [pc, #184]	; (80160f0 <ip4_input+0x22c>)
 8016038:	693b      	ldr	r3, [r7, #16]
 801603a:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 801603c:	4a2c      	ldr	r2, [pc, #176]	; (80160f0 <ip4_input+0x22c>)
 801603e:	683b      	ldr	r3, [r7, #0]
 8016040:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8016042:	4a2b      	ldr	r2, [pc, #172]	; (80160f0 <ip4_input+0x22c>)
 8016044:	697b      	ldr	r3, [r7, #20]
 8016046:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8016048:	697b      	ldr	r3, [r7, #20]
 801604a:	781b      	ldrb	r3, [r3, #0]
 801604c:	f003 030f 	and.w	r3, r3, #15
 8016050:	b2db      	uxtb	r3, r3
 8016052:	009b      	lsls	r3, r3, #2
 8016054:	b2db      	uxtb	r3, r3
 8016056:	b29a      	uxth	r2, r3
 8016058:	4b25      	ldr	r3, [pc, #148]	; (80160f0 <ip4_input+0x22c>)
 801605a:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 801605c:	89fb      	ldrh	r3, [r7, #14]
 801605e:	4619      	mov	r1, r3
 8016060:	6878      	ldr	r0, [r7, #4]
 8016062:	f7f8 f86b 	bl	800e13c <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8016066:	697b      	ldr	r3, [r7, #20]
 8016068:	7a5b      	ldrb	r3, [r3, #9]
 801606a:	2b01      	cmp	r3, #1
 801606c:	d006      	beq.n	801607c <ip4_input+0x1b8>
 801606e:	2b06      	cmp	r3, #6
 8016070:	d109      	bne.n	8016086 <ip4_input+0x1c2>
        break;
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8016072:	6839      	ldr	r1, [r7, #0]
 8016074:	6878      	ldr	r0, [r7, #4]
 8016076:	f7fa fa11 	bl	801049c <tcp_input>
        break;
 801607a:	e021      	b.n	80160c0 <ip4_input+0x1fc>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 801607c:	6839      	ldr	r1, [r7, #0]
 801607e:	6878      	ldr	r0, [r7, #4]
 8016080:	f7ff fcf8 	bl	8015a74 <icmp_input>
        break;
 8016084:	e01c      	b.n	80160c0 <ip4_input+0x1fc>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8016086:	4b1a      	ldr	r3, [pc, #104]	; (80160f0 <ip4_input+0x22c>)
 8016088:	695b      	ldr	r3, [r3, #20]
 801608a:	6939      	ldr	r1, [r7, #16]
 801608c:	4618      	mov	r0, r3
 801608e:	f000 f90b 	bl	80162a8 <ip4_addr_isbroadcast_u32>
 8016092:	4603      	mov	r3, r0
 8016094:	2b00      	cmp	r3, #0
 8016096:	d10f      	bne.n	80160b8 <ip4_input+0x1f4>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8016098:	4b15      	ldr	r3, [pc, #84]	; (80160f0 <ip4_input+0x22c>)
 801609a:	695b      	ldr	r3, [r3, #20]
 801609c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80160a0:	2be0      	cmp	r3, #224	; 0xe0
 80160a2:	d009      	beq.n	80160b8 <ip4_input+0x1f4>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 80160a4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80160a8:	4619      	mov	r1, r3
 80160aa:	6878      	ldr	r0, [r7, #4]
 80160ac:	f7f8 f8b9 	bl	800e222 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 80160b0:	2102      	movs	r1, #2
 80160b2:	6878      	ldr	r0, [r7, #4]
 80160b4:	f7ff fde2 	bl	8015c7c <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 80160b8:	6878      	ldr	r0, [r7, #4]
 80160ba:	f7f8 f8f7 	bl	800e2ac <pbuf_free>
        break;
 80160be:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 80160c0:	4b0b      	ldr	r3, [pc, #44]	; (80160f0 <ip4_input+0x22c>)
 80160c2:	2200      	movs	r2, #0
 80160c4:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 80160c6:	4b0a      	ldr	r3, [pc, #40]	; (80160f0 <ip4_input+0x22c>)
 80160c8:	2200      	movs	r2, #0
 80160ca:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 80160cc:	4b08      	ldr	r3, [pc, #32]	; (80160f0 <ip4_input+0x22c>)
 80160ce:	2200      	movs	r2, #0
 80160d0:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 80160d2:	4b07      	ldr	r3, [pc, #28]	; (80160f0 <ip4_input+0x22c>)
 80160d4:	2200      	movs	r2, #0
 80160d6:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 80160d8:	4b05      	ldr	r3, [pc, #20]	; (80160f0 <ip4_input+0x22c>)
 80160da:	2200      	movs	r2, #0
 80160dc:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 80160de:	4b04      	ldr	r3, [pc, #16]	; (80160f0 <ip4_input+0x22c>)
 80160e0:	2200      	movs	r2, #0
 80160e2:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 80160e4:	2300      	movs	r3, #0
}
 80160e6:	4618      	mov	r0, r3
 80160e8:	3718      	adds	r7, #24
 80160ea:	46bd      	mov	sp, r7
 80160ec:	bd80      	pop	{r7, pc}
 80160ee:	bf00      	nop
 80160f0:	20007a38 	.word	0x20007a38
 80160f4:	2000d278 	.word	0x2000d278

080160f8 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 80160f8:	b580      	push	{r7, lr}
 80160fa:	b08a      	sub	sp, #40	; 0x28
 80160fc:	af04      	add	r7, sp, #16
 80160fe:	60f8      	str	r0, [r7, #12]
 8016100:	60b9      	str	r1, [r7, #8]
 8016102:	607a      	str	r2, [r7, #4]
 8016104:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8016106:	68bb      	ldr	r3, [r7, #8]
 8016108:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801610a:	687b      	ldr	r3, [r7, #4]
 801610c:	2b00      	cmp	r3, #0
 801610e:	d009      	beq.n	8016124 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8016110:	68bb      	ldr	r3, [r7, #8]
 8016112:	2b00      	cmp	r3, #0
 8016114:	d003      	beq.n	801611e <ip4_output_if+0x26>
 8016116:	68bb      	ldr	r3, [r7, #8]
 8016118:	681b      	ldr	r3, [r3, #0]
 801611a:	2b00      	cmp	r3, #0
 801611c:	d102      	bne.n	8016124 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 801611e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016120:	3304      	adds	r3, #4
 8016122:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8016124:	78fa      	ldrb	r2, [r7, #3]
 8016126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016128:	9302      	str	r3, [sp, #8]
 801612a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801612e:	9301      	str	r3, [sp, #4]
 8016130:	f897 3020 	ldrb.w	r3, [r7, #32]
 8016134:	9300      	str	r3, [sp, #0]
 8016136:	4613      	mov	r3, r2
 8016138:	687a      	ldr	r2, [r7, #4]
 801613a:	6979      	ldr	r1, [r7, #20]
 801613c:	68f8      	ldr	r0, [r7, #12]
 801613e:	f000 f805 	bl	801614c <ip4_output_if_src>
 8016142:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8016144:	4618      	mov	r0, r3
 8016146:	3718      	adds	r7, #24
 8016148:	46bd      	mov	sp, r7
 801614a:	bd80      	pop	{r7, pc}

0801614c <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 801614c:	b580      	push	{r7, lr}
 801614e:	b088      	sub	sp, #32
 8016150:	af00      	add	r7, sp, #0
 8016152:	60f8      	str	r0, [r7, #12]
 8016154:	60b9      	str	r1, [r7, #8]
 8016156:	607a      	str	r2, [r7, #4]
 8016158:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801615a:	68fb      	ldr	r3, [r7, #12]
 801615c:	7b9b      	ldrb	r3, [r3, #14]
 801615e:	2b01      	cmp	r3, #1
 8016160:	d006      	beq.n	8016170 <ip4_output_if_src+0x24>
 8016162:	4b4b      	ldr	r3, [pc, #300]	; (8016290 <ip4_output_if_src+0x144>)
 8016164:	f44f 7255 	mov.w	r2, #852	; 0x354
 8016168:	494a      	ldr	r1, [pc, #296]	; (8016294 <ip4_output_if_src+0x148>)
 801616a:	484b      	ldr	r0, [pc, #300]	; (8016298 <ip4_output_if_src+0x14c>)
 801616c:	f001 fa24 	bl	80175b8 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8016170:	687b      	ldr	r3, [r7, #4]
 8016172:	2b00      	cmp	r3, #0
 8016174:	d060      	beq.n	8016238 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8016176:	2314      	movs	r3, #20
 8016178:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 801617a:	2114      	movs	r1, #20
 801617c:	68f8      	ldr	r0, [r7, #12]
 801617e:	f7f7 ffcd 	bl	800e11c <pbuf_add_header>
 8016182:	4603      	mov	r3, r0
 8016184:	2b00      	cmp	r3, #0
 8016186:	d002      	beq.n	801618e <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8016188:	f06f 0301 	mvn.w	r3, #1
 801618c:	e07c      	b.n	8016288 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801618e:	68fb      	ldr	r3, [r7, #12]
 8016190:	685b      	ldr	r3, [r3, #4]
 8016192:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8016194:	68fb      	ldr	r3, [r7, #12]
 8016196:	895b      	ldrh	r3, [r3, #10]
 8016198:	2b13      	cmp	r3, #19
 801619a:	d806      	bhi.n	80161aa <ip4_output_if_src+0x5e>
 801619c:	4b3c      	ldr	r3, [pc, #240]	; (8016290 <ip4_output_if_src+0x144>)
 801619e:	f240 3289 	movw	r2, #905	; 0x389
 80161a2:	493e      	ldr	r1, [pc, #248]	; (801629c <ip4_output_if_src+0x150>)
 80161a4:	483c      	ldr	r0, [pc, #240]	; (8016298 <ip4_output_if_src+0x14c>)
 80161a6:	f001 fa07 	bl	80175b8 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 80161aa:	69fb      	ldr	r3, [r7, #28]
 80161ac:	78fa      	ldrb	r2, [r7, #3]
 80161ae:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 80161b0:	69fb      	ldr	r3, [r7, #28]
 80161b2:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80161b6:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 80161b8:	687b      	ldr	r3, [r7, #4]
 80161ba:	681a      	ldr	r2, [r3, #0]
 80161bc:	69fb      	ldr	r3, [r7, #28]
 80161be:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 80161c0:	8b7b      	ldrh	r3, [r7, #26]
 80161c2:	089b      	lsrs	r3, r3, #2
 80161c4:	b29b      	uxth	r3, r3
 80161c6:	b2db      	uxtb	r3, r3
 80161c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80161cc:	b2da      	uxtb	r2, r3
 80161ce:	69fb      	ldr	r3, [r7, #28]
 80161d0:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 80161d2:	69fb      	ldr	r3, [r7, #28]
 80161d4:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80161d8:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 80161da:	68fb      	ldr	r3, [r7, #12]
 80161dc:	891b      	ldrh	r3, [r3, #8]
 80161de:	4618      	mov	r0, r3
 80161e0:	f7f6 fc90 	bl	800cb04 <lwip_htons>
 80161e4:	4603      	mov	r3, r0
 80161e6:	461a      	mov	r2, r3
 80161e8:	69fb      	ldr	r3, [r7, #28]
 80161ea:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 80161ec:	69fb      	ldr	r3, [r7, #28]
 80161ee:	2200      	movs	r2, #0
 80161f0:	719a      	strb	r2, [r3, #6]
 80161f2:	2200      	movs	r2, #0
 80161f4:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 80161f6:	4b2a      	ldr	r3, [pc, #168]	; (80162a0 <ip4_output_if_src+0x154>)
 80161f8:	881b      	ldrh	r3, [r3, #0]
 80161fa:	4618      	mov	r0, r3
 80161fc:	f7f6 fc82 	bl	800cb04 <lwip_htons>
 8016200:	4603      	mov	r3, r0
 8016202:	461a      	mov	r2, r3
 8016204:	69fb      	ldr	r3, [r7, #28]
 8016206:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8016208:	4b25      	ldr	r3, [pc, #148]	; (80162a0 <ip4_output_if_src+0x154>)
 801620a:	881b      	ldrh	r3, [r3, #0]
 801620c:	3301      	adds	r3, #1
 801620e:	b29a      	uxth	r2, r3
 8016210:	4b23      	ldr	r3, [pc, #140]	; (80162a0 <ip4_output_if_src+0x154>)
 8016212:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8016214:	68bb      	ldr	r3, [r7, #8]
 8016216:	2b00      	cmp	r3, #0
 8016218:	d104      	bne.n	8016224 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801621a:	4b22      	ldr	r3, [pc, #136]	; (80162a4 <ip4_output_if_src+0x158>)
 801621c:	681a      	ldr	r2, [r3, #0]
 801621e:	69fb      	ldr	r3, [r7, #28]
 8016220:	60da      	str	r2, [r3, #12]
 8016222:	e003      	b.n	801622c <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8016224:	68bb      	ldr	r3, [r7, #8]
 8016226:	681a      	ldr	r2, [r3, #0]
 8016228:	69fb      	ldr	r3, [r7, #28]
 801622a:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 801622c:	69fb      	ldr	r3, [r7, #28]
 801622e:	2200      	movs	r2, #0
 8016230:	729a      	strb	r2, [r3, #10]
 8016232:	2200      	movs	r2, #0
 8016234:	72da      	strb	r2, [r3, #11]
 8016236:	e00f      	b.n	8016258 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8016238:	68fb      	ldr	r3, [r7, #12]
 801623a:	895b      	ldrh	r3, [r3, #10]
 801623c:	2b13      	cmp	r3, #19
 801623e:	d802      	bhi.n	8016246 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8016240:	f06f 0301 	mvn.w	r3, #1
 8016244:	e020      	b.n	8016288 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8016246:	68fb      	ldr	r3, [r7, #12]
 8016248:	685b      	ldr	r3, [r3, #4]
 801624a:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 801624c:	69fb      	ldr	r3, [r7, #28]
 801624e:	691b      	ldr	r3, [r3, #16]
 8016250:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8016252:	f107 0314 	add.w	r3, r7, #20
 8016256:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8016258:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801625a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801625c:	2b00      	cmp	r3, #0
 801625e:	d00c      	beq.n	801627a <ip4_output_if_src+0x12e>
 8016260:	68fb      	ldr	r3, [r7, #12]
 8016262:	891a      	ldrh	r2, [r3, #8]
 8016264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016266:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8016268:	429a      	cmp	r2, r3
 801626a:	d906      	bls.n	801627a <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 801626c:	687a      	ldr	r2, [r7, #4]
 801626e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8016270:	68f8      	ldr	r0, [r7, #12]
 8016272:	f000 fd4b 	bl	8016d0c <ip4_frag>
 8016276:	4603      	mov	r3, r0
 8016278:	e006      	b.n	8016288 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801627a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801627c:	695b      	ldr	r3, [r3, #20]
 801627e:	687a      	ldr	r2, [r7, #4]
 8016280:	68f9      	ldr	r1, [r7, #12]
 8016282:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016284:	4798      	blx	r3
 8016286:	4603      	mov	r3, r0
}
 8016288:	4618      	mov	r0, r3
 801628a:	3720      	adds	r7, #32
 801628c:	46bd      	mov	sp, r7
 801628e:	bd80      	pop	{r7, pc}
 8016290:	0801b588 	.word	0x0801b588
 8016294:	0801b5bc 	.word	0x0801b5bc
 8016298:	0801b5c8 	.word	0x0801b5c8
 801629c:	0801b5f0 	.word	0x0801b5f0
 80162a0:	2000477a 	.word	0x2000477a
 80162a4:	0801ba3c 	.word	0x0801ba3c

080162a8 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 80162a8:	b480      	push	{r7}
 80162aa:	b085      	sub	sp, #20
 80162ac:	af00      	add	r7, sp, #0
 80162ae:	6078      	str	r0, [r7, #4]
 80162b0:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 80162b2:	687b      	ldr	r3, [r7, #4]
 80162b4:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 80162b6:	687b      	ldr	r3, [r7, #4]
 80162b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80162bc:	d002      	beq.n	80162c4 <ip4_addr_isbroadcast_u32+0x1c>
 80162be:	687b      	ldr	r3, [r7, #4]
 80162c0:	2b00      	cmp	r3, #0
 80162c2:	d101      	bne.n	80162c8 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 80162c4:	2301      	movs	r3, #1
 80162c6:	e02a      	b.n	801631e <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 80162c8:	683b      	ldr	r3, [r7, #0]
 80162ca:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80162ce:	f003 0302 	and.w	r3, r3, #2
 80162d2:	2b00      	cmp	r3, #0
 80162d4:	d101      	bne.n	80162da <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 80162d6:	2300      	movs	r3, #0
 80162d8:	e021      	b.n	801631e <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 80162da:	683b      	ldr	r3, [r7, #0]
 80162dc:	3304      	adds	r3, #4
 80162de:	681b      	ldr	r3, [r3, #0]
 80162e0:	687a      	ldr	r2, [r7, #4]
 80162e2:	429a      	cmp	r2, r3
 80162e4:	d101      	bne.n	80162ea <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 80162e6:	2300      	movs	r3, #0
 80162e8:	e019      	b.n	801631e <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 80162ea:	68fa      	ldr	r2, [r7, #12]
 80162ec:	683b      	ldr	r3, [r7, #0]
 80162ee:	3304      	adds	r3, #4
 80162f0:	681b      	ldr	r3, [r3, #0]
 80162f2:	405a      	eors	r2, r3
 80162f4:	683b      	ldr	r3, [r7, #0]
 80162f6:	3308      	adds	r3, #8
 80162f8:	681b      	ldr	r3, [r3, #0]
 80162fa:	4013      	ands	r3, r2
 80162fc:	2b00      	cmp	r3, #0
 80162fe:	d10d      	bne.n	801631c <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8016300:	683b      	ldr	r3, [r7, #0]
 8016302:	3308      	adds	r3, #8
 8016304:	681b      	ldr	r3, [r3, #0]
 8016306:	43da      	mvns	r2, r3
 8016308:	687b      	ldr	r3, [r7, #4]
 801630a:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 801630c:	683b      	ldr	r3, [r7, #0]
 801630e:	3308      	adds	r3, #8
 8016310:	681b      	ldr	r3, [r3, #0]
 8016312:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8016314:	429a      	cmp	r2, r3
 8016316:	d101      	bne.n	801631c <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8016318:	2301      	movs	r3, #1
 801631a:	e000      	b.n	801631e <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 801631c:	2300      	movs	r3, #0
  }
}
 801631e:	4618      	mov	r0, r3
 8016320:	3714      	adds	r7, #20
 8016322:	46bd      	mov	sp, r7
 8016324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016328:	4770      	bx	lr
	...

0801632c <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 801632c:	b580      	push	{r7, lr}
 801632e:	b084      	sub	sp, #16
 8016330:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8016332:	2300      	movs	r3, #0
 8016334:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8016336:	4b12      	ldr	r3, [pc, #72]	; (8016380 <ip_reass_tmr+0x54>)
 8016338:	681b      	ldr	r3, [r3, #0]
 801633a:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 801633c:	e018      	b.n	8016370 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801633e:	68fb      	ldr	r3, [r7, #12]
 8016340:	7fdb      	ldrb	r3, [r3, #31]
 8016342:	2b00      	cmp	r3, #0
 8016344:	d00b      	beq.n	801635e <ip_reass_tmr+0x32>
      r->timer--;
 8016346:	68fb      	ldr	r3, [r7, #12]
 8016348:	7fdb      	ldrb	r3, [r3, #31]
 801634a:	3b01      	subs	r3, #1
 801634c:	b2da      	uxtb	r2, r3
 801634e:	68fb      	ldr	r3, [r7, #12]
 8016350:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8016352:	68fb      	ldr	r3, [r7, #12]
 8016354:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8016356:	68fb      	ldr	r3, [r7, #12]
 8016358:	681b      	ldr	r3, [r3, #0]
 801635a:	60fb      	str	r3, [r7, #12]
 801635c:	e008      	b.n	8016370 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801635e:	68fb      	ldr	r3, [r7, #12]
 8016360:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8016362:	68fb      	ldr	r3, [r7, #12]
 8016364:	681b      	ldr	r3, [r3, #0]
 8016366:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8016368:	68b9      	ldr	r1, [r7, #8]
 801636a:	6878      	ldr	r0, [r7, #4]
 801636c:	f000 f80a 	bl	8016384 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8016370:	68fb      	ldr	r3, [r7, #12]
 8016372:	2b00      	cmp	r3, #0
 8016374:	d1e3      	bne.n	801633e <ip_reass_tmr+0x12>
    }
  }
}
 8016376:	bf00      	nop
 8016378:	3710      	adds	r7, #16
 801637a:	46bd      	mov	sp, r7
 801637c:	bd80      	pop	{r7, pc}
 801637e:	bf00      	nop
 8016380:	2000477c 	.word	0x2000477c

08016384 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8016384:	b580      	push	{r7, lr}
 8016386:	b088      	sub	sp, #32
 8016388:	af00      	add	r7, sp, #0
 801638a:	6078      	str	r0, [r7, #4]
 801638c:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801638e:	2300      	movs	r3, #0
 8016390:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8016392:	683a      	ldr	r2, [r7, #0]
 8016394:	687b      	ldr	r3, [r7, #4]
 8016396:	429a      	cmp	r2, r3
 8016398:	d105      	bne.n	80163a6 <ip_reass_free_complete_datagram+0x22>
 801639a:	4b45      	ldr	r3, [pc, #276]	; (80164b0 <ip_reass_free_complete_datagram+0x12c>)
 801639c:	22ab      	movs	r2, #171	; 0xab
 801639e:	4945      	ldr	r1, [pc, #276]	; (80164b4 <ip_reass_free_complete_datagram+0x130>)
 80163a0:	4845      	ldr	r0, [pc, #276]	; (80164b8 <ip_reass_free_complete_datagram+0x134>)
 80163a2:	f001 f909 	bl	80175b8 <iprintf>
  if (prev != NULL) {
 80163a6:	683b      	ldr	r3, [r7, #0]
 80163a8:	2b00      	cmp	r3, #0
 80163aa:	d00a      	beq.n	80163c2 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 80163ac:	683b      	ldr	r3, [r7, #0]
 80163ae:	681b      	ldr	r3, [r3, #0]
 80163b0:	687a      	ldr	r2, [r7, #4]
 80163b2:	429a      	cmp	r2, r3
 80163b4:	d005      	beq.n	80163c2 <ip_reass_free_complete_datagram+0x3e>
 80163b6:	4b3e      	ldr	r3, [pc, #248]	; (80164b0 <ip_reass_free_complete_datagram+0x12c>)
 80163b8:	22ad      	movs	r2, #173	; 0xad
 80163ba:	4940      	ldr	r1, [pc, #256]	; (80164bc <ip_reass_free_complete_datagram+0x138>)
 80163bc:	483e      	ldr	r0, [pc, #248]	; (80164b8 <ip_reass_free_complete_datagram+0x134>)
 80163be:	f001 f8fb 	bl	80175b8 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 80163c2:	687b      	ldr	r3, [r7, #4]
 80163c4:	685b      	ldr	r3, [r3, #4]
 80163c6:	685b      	ldr	r3, [r3, #4]
 80163c8:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 80163ca:	697b      	ldr	r3, [r7, #20]
 80163cc:	889b      	ldrh	r3, [r3, #4]
 80163ce:	b29b      	uxth	r3, r3
 80163d0:	2b00      	cmp	r3, #0
 80163d2:	d12a      	bne.n	801642a <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 80163d4:	687b      	ldr	r3, [r7, #4]
 80163d6:	685b      	ldr	r3, [r3, #4]
 80163d8:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 80163da:	697b      	ldr	r3, [r7, #20]
 80163dc:	681a      	ldr	r2, [r3, #0]
 80163de:	687b      	ldr	r3, [r7, #4]
 80163e0:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 80163e2:	69bb      	ldr	r3, [r7, #24]
 80163e4:	6858      	ldr	r0, [r3, #4]
 80163e6:	687b      	ldr	r3, [r7, #4]
 80163e8:	3308      	adds	r3, #8
 80163ea:	2214      	movs	r2, #20
 80163ec:	4619      	mov	r1, r3
 80163ee:	f001 f8d0 	bl	8017592 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 80163f2:	2101      	movs	r1, #1
 80163f4:	69b8      	ldr	r0, [r7, #24]
 80163f6:	f7ff fc51 	bl	8015c9c <icmp_time_exceeded>
    clen = pbuf_clen(p);
 80163fa:	69b8      	ldr	r0, [r7, #24]
 80163fc:	f7f7 ffe4 	bl	800e3c8 <pbuf_clen>
 8016400:	4603      	mov	r3, r0
 8016402:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8016404:	8bfa      	ldrh	r2, [r7, #30]
 8016406:	8a7b      	ldrh	r3, [r7, #18]
 8016408:	4413      	add	r3, r2
 801640a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801640e:	db05      	blt.n	801641c <ip_reass_free_complete_datagram+0x98>
 8016410:	4b27      	ldr	r3, [pc, #156]	; (80164b0 <ip_reass_free_complete_datagram+0x12c>)
 8016412:	22bc      	movs	r2, #188	; 0xbc
 8016414:	492a      	ldr	r1, [pc, #168]	; (80164c0 <ip_reass_free_complete_datagram+0x13c>)
 8016416:	4828      	ldr	r0, [pc, #160]	; (80164b8 <ip_reass_free_complete_datagram+0x134>)
 8016418:	f001 f8ce 	bl	80175b8 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801641c:	8bfa      	ldrh	r2, [r7, #30]
 801641e:	8a7b      	ldrh	r3, [r7, #18]
 8016420:	4413      	add	r3, r2
 8016422:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8016424:	69b8      	ldr	r0, [r7, #24]
 8016426:	f7f7 ff41 	bl	800e2ac <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801642a:	687b      	ldr	r3, [r7, #4]
 801642c:	685b      	ldr	r3, [r3, #4]
 801642e:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8016430:	e01f      	b.n	8016472 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8016432:	69bb      	ldr	r3, [r7, #24]
 8016434:	685b      	ldr	r3, [r3, #4]
 8016436:	617b      	str	r3, [r7, #20]
    pcur = p;
 8016438:	69bb      	ldr	r3, [r7, #24]
 801643a:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 801643c:	697b      	ldr	r3, [r7, #20]
 801643e:	681b      	ldr	r3, [r3, #0]
 8016440:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8016442:	68f8      	ldr	r0, [r7, #12]
 8016444:	f7f7 ffc0 	bl	800e3c8 <pbuf_clen>
 8016448:	4603      	mov	r3, r0
 801644a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801644c:	8bfa      	ldrh	r2, [r7, #30]
 801644e:	8a7b      	ldrh	r3, [r7, #18]
 8016450:	4413      	add	r3, r2
 8016452:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8016456:	db05      	blt.n	8016464 <ip_reass_free_complete_datagram+0xe0>
 8016458:	4b15      	ldr	r3, [pc, #84]	; (80164b0 <ip_reass_free_complete_datagram+0x12c>)
 801645a:	22cc      	movs	r2, #204	; 0xcc
 801645c:	4918      	ldr	r1, [pc, #96]	; (80164c0 <ip_reass_free_complete_datagram+0x13c>)
 801645e:	4816      	ldr	r0, [pc, #88]	; (80164b8 <ip_reass_free_complete_datagram+0x134>)
 8016460:	f001 f8aa 	bl	80175b8 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8016464:	8bfa      	ldrh	r2, [r7, #30]
 8016466:	8a7b      	ldrh	r3, [r7, #18]
 8016468:	4413      	add	r3, r2
 801646a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 801646c:	68f8      	ldr	r0, [r7, #12]
 801646e:	f7f7 ff1d 	bl	800e2ac <pbuf_free>
  while (p != NULL) {
 8016472:	69bb      	ldr	r3, [r7, #24]
 8016474:	2b00      	cmp	r3, #0
 8016476:	d1dc      	bne.n	8016432 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8016478:	6839      	ldr	r1, [r7, #0]
 801647a:	6878      	ldr	r0, [r7, #4]
 801647c:	f000 f8c2 	bl	8016604 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8016480:	4b10      	ldr	r3, [pc, #64]	; (80164c4 <ip_reass_free_complete_datagram+0x140>)
 8016482:	881b      	ldrh	r3, [r3, #0]
 8016484:	8bfa      	ldrh	r2, [r7, #30]
 8016486:	429a      	cmp	r2, r3
 8016488:	d905      	bls.n	8016496 <ip_reass_free_complete_datagram+0x112>
 801648a:	4b09      	ldr	r3, [pc, #36]	; (80164b0 <ip_reass_free_complete_datagram+0x12c>)
 801648c:	22d2      	movs	r2, #210	; 0xd2
 801648e:	490e      	ldr	r1, [pc, #56]	; (80164c8 <ip_reass_free_complete_datagram+0x144>)
 8016490:	4809      	ldr	r0, [pc, #36]	; (80164b8 <ip_reass_free_complete_datagram+0x134>)
 8016492:	f001 f891 	bl	80175b8 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8016496:	4b0b      	ldr	r3, [pc, #44]	; (80164c4 <ip_reass_free_complete_datagram+0x140>)
 8016498:	881a      	ldrh	r2, [r3, #0]
 801649a:	8bfb      	ldrh	r3, [r7, #30]
 801649c:	1ad3      	subs	r3, r2, r3
 801649e:	b29a      	uxth	r2, r3
 80164a0:	4b08      	ldr	r3, [pc, #32]	; (80164c4 <ip_reass_free_complete_datagram+0x140>)
 80164a2:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 80164a4:	8bfb      	ldrh	r3, [r7, #30]
}
 80164a6:	4618      	mov	r0, r3
 80164a8:	3720      	adds	r7, #32
 80164aa:	46bd      	mov	sp, r7
 80164ac:	bd80      	pop	{r7, pc}
 80164ae:	bf00      	nop
 80164b0:	0801b620 	.word	0x0801b620
 80164b4:	0801b65c 	.word	0x0801b65c
 80164b8:	0801b668 	.word	0x0801b668
 80164bc:	0801b690 	.word	0x0801b690
 80164c0:	0801b6a4 	.word	0x0801b6a4
 80164c4:	20004780 	.word	0x20004780
 80164c8:	0801b6c4 	.word	0x0801b6c4

080164cc <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 80164cc:	b580      	push	{r7, lr}
 80164ce:	b08a      	sub	sp, #40	; 0x28
 80164d0:	af00      	add	r7, sp, #0
 80164d2:	6078      	str	r0, [r7, #4]
 80164d4:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 80164d6:	2300      	movs	r3, #0
 80164d8:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 80164da:	2300      	movs	r3, #0
 80164dc:	623b      	str	r3, [r7, #32]
    prev = NULL;
 80164de:	2300      	movs	r3, #0
 80164e0:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 80164e2:	2300      	movs	r3, #0
 80164e4:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 80164e6:	2300      	movs	r3, #0
 80164e8:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 80164ea:	4b28      	ldr	r3, [pc, #160]	; (801658c <ip_reass_remove_oldest_datagram+0xc0>)
 80164ec:	681b      	ldr	r3, [r3, #0]
 80164ee:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80164f0:	e030      	b.n	8016554 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 80164f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80164f4:	695a      	ldr	r2, [r3, #20]
 80164f6:	687b      	ldr	r3, [r7, #4]
 80164f8:	68db      	ldr	r3, [r3, #12]
 80164fa:	429a      	cmp	r2, r3
 80164fc:	d10c      	bne.n	8016518 <ip_reass_remove_oldest_datagram+0x4c>
 80164fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016500:	699a      	ldr	r2, [r3, #24]
 8016502:	687b      	ldr	r3, [r7, #4]
 8016504:	691b      	ldr	r3, [r3, #16]
 8016506:	429a      	cmp	r2, r3
 8016508:	d106      	bne.n	8016518 <ip_reass_remove_oldest_datagram+0x4c>
 801650a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801650c:	899a      	ldrh	r2, [r3, #12]
 801650e:	687b      	ldr	r3, [r7, #4]
 8016510:	889b      	ldrh	r3, [r3, #4]
 8016512:	b29b      	uxth	r3, r3
 8016514:	429a      	cmp	r2, r3
 8016516:	d014      	beq.n	8016542 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8016518:	693b      	ldr	r3, [r7, #16]
 801651a:	3301      	adds	r3, #1
 801651c:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801651e:	6a3b      	ldr	r3, [r7, #32]
 8016520:	2b00      	cmp	r3, #0
 8016522:	d104      	bne.n	801652e <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8016524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016526:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8016528:	69fb      	ldr	r3, [r7, #28]
 801652a:	61bb      	str	r3, [r7, #24]
 801652c:	e009      	b.n	8016542 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801652e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016530:	7fda      	ldrb	r2, [r3, #31]
 8016532:	6a3b      	ldr	r3, [r7, #32]
 8016534:	7fdb      	ldrb	r3, [r3, #31]
 8016536:	429a      	cmp	r2, r3
 8016538:	d803      	bhi.n	8016542 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801653a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801653c:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801653e:	69fb      	ldr	r3, [r7, #28]
 8016540:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8016542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016544:	681b      	ldr	r3, [r3, #0]
 8016546:	2b00      	cmp	r3, #0
 8016548:	d001      	beq.n	801654e <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801654a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801654c:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801654e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016550:	681b      	ldr	r3, [r3, #0]
 8016552:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8016554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016556:	2b00      	cmp	r3, #0
 8016558:	d1cb      	bne.n	80164f2 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801655a:	6a3b      	ldr	r3, [r7, #32]
 801655c:	2b00      	cmp	r3, #0
 801655e:	d008      	beq.n	8016572 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8016560:	69b9      	ldr	r1, [r7, #24]
 8016562:	6a38      	ldr	r0, [r7, #32]
 8016564:	f7ff ff0e 	bl	8016384 <ip_reass_free_complete_datagram>
 8016568:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801656a:	697a      	ldr	r2, [r7, #20]
 801656c:	68fb      	ldr	r3, [r7, #12]
 801656e:	4413      	add	r3, r2
 8016570:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8016572:	697a      	ldr	r2, [r7, #20]
 8016574:	683b      	ldr	r3, [r7, #0]
 8016576:	429a      	cmp	r2, r3
 8016578:	da02      	bge.n	8016580 <ip_reass_remove_oldest_datagram+0xb4>
 801657a:	693b      	ldr	r3, [r7, #16]
 801657c:	2b01      	cmp	r3, #1
 801657e:	dcac      	bgt.n	80164da <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8016580:	697b      	ldr	r3, [r7, #20]
}
 8016582:	4618      	mov	r0, r3
 8016584:	3728      	adds	r7, #40	; 0x28
 8016586:	46bd      	mov	sp, r7
 8016588:	bd80      	pop	{r7, pc}
 801658a:	bf00      	nop
 801658c:	2000477c 	.word	0x2000477c

08016590 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8016590:	b580      	push	{r7, lr}
 8016592:	b084      	sub	sp, #16
 8016594:	af00      	add	r7, sp, #0
 8016596:	6078      	str	r0, [r7, #4]
 8016598:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801659a:	2003      	movs	r0, #3
 801659c:	f7f6 ff66 	bl	800d46c <memp_malloc>
 80165a0:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 80165a2:	68fb      	ldr	r3, [r7, #12]
 80165a4:	2b00      	cmp	r3, #0
 80165a6:	d110      	bne.n	80165ca <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 80165a8:	6839      	ldr	r1, [r7, #0]
 80165aa:	6878      	ldr	r0, [r7, #4]
 80165ac:	f7ff ff8e 	bl	80164cc <ip_reass_remove_oldest_datagram>
 80165b0:	4602      	mov	r2, r0
 80165b2:	683b      	ldr	r3, [r7, #0]
 80165b4:	4293      	cmp	r3, r2
 80165b6:	dc03      	bgt.n	80165c0 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80165b8:	2003      	movs	r0, #3
 80165ba:	f7f6 ff57 	bl	800d46c <memp_malloc>
 80165be:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 80165c0:	68fb      	ldr	r3, [r7, #12]
 80165c2:	2b00      	cmp	r3, #0
 80165c4:	d101      	bne.n	80165ca <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 80165c6:	2300      	movs	r3, #0
 80165c8:	e016      	b.n	80165f8 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 80165ca:	2220      	movs	r2, #32
 80165cc:	2100      	movs	r1, #0
 80165ce:	68f8      	ldr	r0, [r7, #12]
 80165d0:	f000 ffea 	bl	80175a8 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 80165d4:	68fb      	ldr	r3, [r7, #12]
 80165d6:	220f      	movs	r2, #15
 80165d8:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 80165da:	4b09      	ldr	r3, [pc, #36]	; (8016600 <ip_reass_enqueue_new_datagram+0x70>)
 80165dc:	681a      	ldr	r2, [r3, #0]
 80165de:	68fb      	ldr	r3, [r7, #12]
 80165e0:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 80165e2:	4a07      	ldr	r2, [pc, #28]	; (8016600 <ip_reass_enqueue_new_datagram+0x70>)
 80165e4:	68fb      	ldr	r3, [r7, #12]
 80165e6:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 80165e8:	68fb      	ldr	r3, [r7, #12]
 80165ea:	3308      	adds	r3, #8
 80165ec:	2214      	movs	r2, #20
 80165ee:	6879      	ldr	r1, [r7, #4]
 80165f0:	4618      	mov	r0, r3
 80165f2:	f000 ffce 	bl	8017592 <memcpy>
  return ipr;
 80165f6:	68fb      	ldr	r3, [r7, #12]
}
 80165f8:	4618      	mov	r0, r3
 80165fa:	3710      	adds	r7, #16
 80165fc:	46bd      	mov	sp, r7
 80165fe:	bd80      	pop	{r7, pc}
 8016600:	2000477c 	.word	0x2000477c

08016604 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8016604:	b580      	push	{r7, lr}
 8016606:	b082      	sub	sp, #8
 8016608:	af00      	add	r7, sp, #0
 801660a:	6078      	str	r0, [r7, #4]
 801660c:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801660e:	4b10      	ldr	r3, [pc, #64]	; (8016650 <ip_reass_dequeue_datagram+0x4c>)
 8016610:	681b      	ldr	r3, [r3, #0]
 8016612:	687a      	ldr	r2, [r7, #4]
 8016614:	429a      	cmp	r2, r3
 8016616:	d104      	bne.n	8016622 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8016618:	687b      	ldr	r3, [r7, #4]
 801661a:	681b      	ldr	r3, [r3, #0]
 801661c:	4a0c      	ldr	r2, [pc, #48]	; (8016650 <ip_reass_dequeue_datagram+0x4c>)
 801661e:	6013      	str	r3, [r2, #0]
 8016620:	e00d      	b.n	801663e <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8016622:	683b      	ldr	r3, [r7, #0]
 8016624:	2b00      	cmp	r3, #0
 8016626:	d106      	bne.n	8016636 <ip_reass_dequeue_datagram+0x32>
 8016628:	4b0a      	ldr	r3, [pc, #40]	; (8016654 <ip_reass_dequeue_datagram+0x50>)
 801662a:	f240 1245 	movw	r2, #325	; 0x145
 801662e:	490a      	ldr	r1, [pc, #40]	; (8016658 <ip_reass_dequeue_datagram+0x54>)
 8016630:	480a      	ldr	r0, [pc, #40]	; (801665c <ip_reass_dequeue_datagram+0x58>)
 8016632:	f000 ffc1 	bl	80175b8 <iprintf>
    prev->next = ipr->next;
 8016636:	687b      	ldr	r3, [r7, #4]
 8016638:	681a      	ldr	r2, [r3, #0]
 801663a:	683b      	ldr	r3, [r7, #0]
 801663c:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801663e:	6879      	ldr	r1, [r7, #4]
 8016640:	2003      	movs	r0, #3
 8016642:	f7f6 ff65 	bl	800d510 <memp_free>
}
 8016646:	bf00      	nop
 8016648:	3708      	adds	r7, #8
 801664a:	46bd      	mov	sp, r7
 801664c:	bd80      	pop	{r7, pc}
 801664e:	bf00      	nop
 8016650:	2000477c 	.word	0x2000477c
 8016654:	0801b620 	.word	0x0801b620
 8016658:	0801b6e8 	.word	0x0801b6e8
 801665c:	0801b668 	.word	0x0801b668

08016660 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8016660:	b580      	push	{r7, lr}
 8016662:	b08c      	sub	sp, #48	; 0x30
 8016664:	af00      	add	r7, sp, #0
 8016666:	60f8      	str	r0, [r7, #12]
 8016668:	60b9      	str	r1, [r7, #8]
 801666a:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 801666c:	2300      	movs	r3, #0
 801666e:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8016670:	2301      	movs	r3, #1
 8016672:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8016674:	68bb      	ldr	r3, [r7, #8]
 8016676:	685b      	ldr	r3, [r3, #4]
 8016678:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801667a:	69fb      	ldr	r3, [r7, #28]
 801667c:	885b      	ldrh	r3, [r3, #2]
 801667e:	b29b      	uxth	r3, r3
 8016680:	4618      	mov	r0, r3
 8016682:	f7f6 fa3f 	bl	800cb04 <lwip_htons>
 8016686:	4603      	mov	r3, r0
 8016688:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801668a:	69fb      	ldr	r3, [r7, #28]
 801668c:	781b      	ldrb	r3, [r3, #0]
 801668e:	f003 030f 	and.w	r3, r3, #15
 8016692:	b2db      	uxtb	r3, r3
 8016694:	009b      	lsls	r3, r3, #2
 8016696:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8016698:	7e7b      	ldrb	r3, [r7, #25]
 801669a:	b29b      	uxth	r3, r3
 801669c:	8b7a      	ldrh	r2, [r7, #26]
 801669e:	429a      	cmp	r2, r3
 80166a0:	d202      	bcs.n	80166a8 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80166a2:	f04f 33ff 	mov.w	r3, #4294967295
 80166a6:	e135      	b.n	8016914 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 80166a8:	7e7b      	ldrb	r3, [r7, #25]
 80166aa:	b29b      	uxth	r3, r3
 80166ac:	8b7a      	ldrh	r2, [r7, #26]
 80166ae:	1ad3      	subs	r3, r2, r3
 80166b0:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 80166b2:	69fb      	ldr	r3, [r7, #28]
 80166b4:	88db      	ldrh	r3, [r3, #6]
 80166b6:	b29b      	uxth	r3, r3
 80166b8:	4618      	mov	r0, r3
 80166ba:	f7f6 fa23 	bl	800cb04 <lwip_htons>
 80166be:	4603      	mov	r3, r0
 80166c0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80166c4:	b29b      	uxth	r3, r3
 80166c6:	00db      	lsls	r3, r3, #3
 80166c8:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 80166ca:	68bb      	ldr	r3, [r7, #8]
 80166cc:	685b      	ldr	r3, [r3, #4]
 80166ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 80166d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80166d2:	2200      	movs	r2, #0
 80166d4:	701a      	strb	r2, [r3, #0]
 80166d6:	2200      	movs	r2, #0
 80166d8:	705a      	strb	r2, [r3, #1]
 80166da:	2200      	movs	r2, #0
 80166dc:	709a      	strb	r2, [r3, #2]
 80166de:	2200      	movs	r2, #0
 80166e0:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 80166e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80166e4:	8afa      	ldrh	r2, [r7, #22]
 80166e6:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 80166e8:	8afa      	ldrh	r2, [r7, #22]
 80166ea:	8b7b      	ldrh	r3, [r7, #26]
 80166ec:	4413      	add	r3, r2
 80166ee:	b29a      	uxth	r2, r3
 80166f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80166f2:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 80166f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80166f6:	88db      	ldrh	r3, [r3, #6]
 80166f8:	b29b      	uxth	r3, r3
 80166fa:	8afa      	ldrh	r2, [r7, #22]
 80166fc:	429a      	cmp	r2, r3
 80166fe:	d902      	bls.n	8016706 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016700:	f04f 33ff 	mov.w	r3, #4294967295
 8016704:	e106      	b.n	8016914 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8016706:	68fb      	ldr	r3, [r7, #12]
 8016708:	685b      	ldr	r3, [r3, #4]
 801670a:	627b      	str	r3, [r7, #36]	; 0x24
 801670c:	e068      	b.n	80167e0 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801670e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016710:	685b      	ldr	r3, [r3, #4]
 8016712:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8016714:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016716:	889b      	ldrh	r3, [r3, #4]
 8016718:	b29a      	uxth	r2, r3
 801671a:	693b      	ldr	r3, [r7, #16]
 801671c:	889b      	ldrh	r3, [r3, #4]
 801671e:	b29b      	uxth	r3, r3
 8016720:	429a      	cmp	r2, r3
 8016722:	d235      	bcs.n	8016790 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8016724:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016726:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016728:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801672a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801672c:	2b00      	cmp	r3, #0
 801672e:	d020      	beq.n	8016772 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8016730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016732:	889b      	ldrh	r3, [r3, #4]
 8016734:	b29a      	uxth	r2, r3
 8016736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016738:	88db      	ldrh	r3, [r3, #6]
 801673a:	b29b      	uxth	r3, r3
 801673c:	429a      	cmp	r2, r3
 801673e:	d307      	bcc.n	8016750 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8016740:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016742:	88db      	ldrh	r3, [r3, #6]
 8016744:	b29a      	uxth	r2, r3
 8016746:	693b      	ldr	r3, [r7, #16]
 8016748:	889b      	ldrh	r3, [r3, #4]
 801674a:	b29b      	uxth	r3, r3
 801674c:	429a      	cmp	r2, r3
 801674e:	d902      	bls.n	8016756 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016750:	f04f 33ff 	mov.w	r3, #4294967295
 8016754:	e0de      	b.n	8016914 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8016756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016758:	68ba      	ldr	r2, [r7, #8]
 801675a:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 801675c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801675e:	88db      	ldrh	r3, [r3, #6]
 8016760:	b29a      	uxth	r2, r3
 8016762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016764:	889b      	ldrh	r3, [r3, #4]
 8016766:	b29b      	uxth	r3, r3
 8016768:	429a      	cmp	r2, r3
 801676a:	d03d      	beq.n	80167e8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801676c:	2300      	movs	r3, #0
 801676e:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8016770:	e03a      	b.n	80167e8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8016772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016774:	88db      	ldrh	r3, [r3, #6]
 8016776:	b29a      	uxth	r2, r3
 8016778:	693b      	ldr	r3, [r7, #16]
 801677a:	889b      	ldrh	r3, [r3, #4]
 801677c:	b29b      	uxth	r3, r3
 801677e:	429a      	cmp	r2, r3
 8016780:	d902      	bls.n	8016788 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016782:	f04f 33ff 	mov.w	r3, #4294967295
 8016786:	e0c5      	b.n	8016914 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8016788:	68fb      	ldr	r3, [r7, #12]
 801678a:	68ba      	ldr	r2, [r7, #8]
 801678c:	605a      	str	r2, [r3, #4]
      break;
 801678e:	e02b      	b.n	80167e8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8016790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016792:	889b      	ldrh	r3, [r3, #4]
 8016794:	b29a      	uxth	r2, r3
 8016796:	693b      	ldr	r3, [r7, #16]
 8016798:	889b      	ldrh	r3, [r3, #4]
 801679a:	b29b      	uxth	r3, r3
 801679c:	429a      	cmp	r2, r3
 801679e:	d102      	bne.n	80167a6 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80167a0:	f04f 33ff 	mov.w	r3, #4294967295
 80167a4:	e0b6      	b.n	8016914 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 80167a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80167a8:	889b      	ldrh	r3, [r3, #4]
 80167aa:	b29a      	uxth	r2, r3
 80167ac:	693b      	ldr	r3, [r7, #16]
 80167ae:	88db      	ldrh	r3, [r3, #6]
 80167b0:	b29b      	uxth	r3, r3
 80167b2:	429a      	cmp	r2, r3
 80167b4:	d202      	bcs.n	80167bc <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80167b6:	f04f 33ff 	mov.w	r3, #4294967295
 80167ba:	e0ab      	b.n	8016914 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 80167bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80167be:	2b00      	cmp	r3, #0
 80167c0:	d009      	beq.n	80167d6 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 80167c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80167c4:	88db      	ldrh	r3, [r3, #6]
 80167c6:	b29a      	uxth	r2, r3
 80167c8:	693b      	ldr	r3, [r7, #16]
 80167ca:	889b      	ldrh	r3, [r3, #4]
 80167cc:	b29b      	uxth	r3, r3
 80167ce:	429a      	cmp	r2, r3
 80167d0:	d001      	beq.n	80167d6 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80167d2:	2300      	movs	r3, #0
 80167d4:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 80167d6:	693b      	ldr	r3, [r7, #16]
 80167d8:	681b      	ldr	r3, [r3, #0]
 80167da:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 80167dc:	693b      	ldr	r3, [r7, #16]
 80167de:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 80167e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80167e2:	2b00      	cmp	r3, #0
 80167e4:	d193      	bne.n	801670e <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 80167e6:	e000      	b.n	80167ea <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 80167e8:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 80167ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80167ec:	2b00      	cmp	r3, #0
 80167ee:	d12d      	bne.n	801684c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 80167f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80167f2:	2b00      	cmp	r3, #0
 80167f4:	d01c      	beq.n	8016830 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 80167f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80167f8:	88db      	ldrh	r3, [r3, #6]
 80167fa:	b29a      	uxth	r2, r3
 80167fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80167fe:	889b      	ldrh	r3, [r3, #4]
 8016800:	b29b      	uxth	r3, r3
 8016802:	429a      	cmp	r2, r3
 8016804:	d906      	bls.n	8016814 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8016806:	4b45      	ldr	r3, [pc, #276]	; (801691c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8016808:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 801680c:	4944      	ldr	r1, [pc, #272]	; (8016920 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801680e:	4845      	ldr	r0, [pc, #276]	; (8016924 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8016810:	f000 fed2 	bl	80175b8 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8016814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016816:	68ba      	ldr	r2, [r7, #8]
 8016818:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801681a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801681c:	88db      	ldrh	r3, [r3, #6]
 801681e:	b29a      	uxth	r2, r3
 8016820:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016822:	889b      	ldrh	r3, [r3, #4]
 8016824:	b29b      	uxth	r3, r3
 8016826:	429a      	cmp	r2, r3
 8016828:	d010      	beq.n	801684c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801682a:	2300      	movs	r3, #0
 801682c:	623b      	str	r3, [r7, #32]
 801682e:	e00d      	b.n	801684c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8016830:	68fb      	ldr	r3, [r7, #12]
 8016832:	685b      	ldr	r3, [r3, #4]
 8016834:	2b00      	cmp	r3, #0
 8016836:	d006      	beq.n	8016846 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8016838:	4b38      	ldr	r3, [pc, #224]	; (801691c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801683a:	f240 12bf 	movw	r2, #447	; 0x1bf
 801683e:	493a      	ldr	r1, [pc, #232]	; (8016928 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8016840:	4838      	ldr	r0, [pc, #224]	; (8016924 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8016842:	f000 feb9 	bl	80175b8 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8016846:	68fb      	ldr	r3, [r7, #12]
 8016848:	68ba      	ldr	r2, [r7, #8]
 801684a:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801684c:	687b      	ldr	r3, [r7, #4]
 801684e:	2b00      	cmp	r3, #0
 8016850:	d105      	bne.n	801685e <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8016852:	68fb      	ldr	r3, [r7, #12]
 8016854:	7f9b      	ldrb	r3, [r3, #30]
 8016856:	f003 0301 	and.w	r3, r3, #1
 801685a:	2b00      	cmp	r3, #0
 801685c:	d059      	beq.n	8016912 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801685e:	6a3b      	ldr	r3, [r7, #32]
 8016860:	2b00      	cmp	r3, #0
 8016862:	d04f      	beq.n	8016904 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8016864:	68fb      	ldr	r3, [r7, #12]
 8016866:	685b      	ldr	r3, [r3, #4]
 8016868:	2b00      	cmp	r3, #0
 801686a:	d006      	beq.n	801687a <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 801686c:	68fb      	ldr	r3, [r7, #12]
 801686e:	685b      	ldr	r3, [r3, #4]
 8016870:	685b      	ldr	r3, [r3, #4]
 8016872:	889b      	ldrh	r3, [r3, #4]
 8016874:	b29b      	uxth	r3, r3
 8016876:	2b00      	cmp	r3, #0
 8016878:	d002      	beq.n	8016880 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801687a:	2300      	movs	r3, #0
 801687c:	623b      	str	r3, [r7, #32]
 801687e:	e041      	b.n	8016904 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8016880:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016882:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8016884:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016886:	681b      	ldr	r3, [r3, #0]
 8016888:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801688a:	e012      	b.n	80168b2 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 801688c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801688e:	685b      	ldr	r3, [r3, #4]
 8016890:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8016892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016894:	88db      	ldrh	r3, [r3, #6]
 8016896:	b29a      	uxth	r2, r3
 8016898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801689a:	889b      	ldrh	r3, [r3, #4]
 801689c:	b29b      	uxth	r3, r3
 801689e:	429a      	cmp	r2, r3
 80168a0:	d002      	beq.n	80168a8 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 80168a2:	2300      	movs	r3, #0
 80168a4:	623b      	str	r3, [r7, #32]
            break;
 80168a6:	e007      	b.n	80168b8 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 80168a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80168aa:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 80168ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80168ae:	681b      	ldr	r3, [r3, #0]
 80168b0:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 80168b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80168b4:	2b00      	cmp	r3, #0
 80168b6:	d1e9      	bne.n	801688c <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 80168b8:	6a3b      	ldr	r3, [r7, #32]
 80168ba:	2b00      	cmp	r3, #0
 80168bc:	d022      	beq.n	8016904 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 80168be:	68fb      	ldr	r3, [r7, #12]
 80168c0:	685b      	ldr	r3, [r3, #4]
 80168c2:	2b00      	cmp	r3, #0
 80168c4:	d106      	bne.n	80168d4 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 80168c6:	4b15      	ldr	r3, [pc, #84]	; (801691c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80168c8:	f240 12df 	movw	r2, #479	; 0x1df
 80168cc:	4917      	ldr	r1, [pc, #92]	; (801692c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80168ce:	4815      	ldr	r0, [pc, #84]	; (8016924 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80168d0:	f000 fe72 	bl	80175b8 <iprintf>
          LWIP_ASSERT("sanity check",
 80168d4:	68fb      	ldr	r3, [r7, #12]
 80168d6:	685b      	ldr	r3, [r3, #4]
 80168d8:	685b      	ldr	r3, [r3, #4]
 80168da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80168dc:	429a      	cmp	r2, r3
 80168de:	d106      	bne.n	80168ee <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 80168e0:	4b0e      	ldr	r3, [pc, #56]	; (801691c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80168e2:	f240 12e1 	movw	r2, #481	; 0x1e1
 80168e6:	4911      	ldr	r1, [pc, #68]	; (801692c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80168e8:	480e      	ldr	r0, [pc, #56]	; (8016924 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80168ea:	f000 fe65 	bl	80175b8 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 80168ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80168f0:	681b      	ldr	r3, [r3, #0]
 80168f2:	2b00      	cmp	r3, #0
 80168f4:	d006      	beq.n	8016904 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 80168f6:	4b09      	ldr	r3, [pc, #36]	; (801691c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80168f8:	f240 12e3 	movw	r2, #483	; 0x1e3
 80168fc:	490c      	ldr	r1, [pc, #48]	; (8016930 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 80168fe:	4809      	ldr	r0, [pc, #36]	; (8016924 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8016900:	f000 fe5a 	bl	80175b8 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8016904:	6a3b      	ldr	r3, [r7, #32]
 8016906:	2b00      	cmp	r3, #0
 8016908:	bf14      	ite	ne
 801690a:	2301      	movne	r3, #1
 801690c:	2300      	moveq	r3, #0
 801690e:	b2db      	uxtb	r3, r3
 8016910:	e000      	b.n	8016914 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8016912:	2300      	movs	r3, #0
}
 8016914:	4618      	mov	r0, r3
 8016916:	3730      	adds	r7, #48	; 0x30
 8016918:	46bd      	mov	sp, r7
 801691a:	bd80      	pop	{r7, pc}
 801691c:	0801b620 	.word	0x0801b620
 8016920:	0801b704 	.word	0x0801b704
 8016924:	0801b668 	.word	0x0801b668
 8016928:	0801b724 	.word	0x0801b724
 801692c:	0801b75c 	.word	0x0801b75c
 8016930:	0801b76c 	.word	0x0801b76c

08016934 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8016934:	b580      	push	{r7, lr}
 8016936:	b08e      	sub	sp, #56	; 0x38
 8016938:	af00      	add	r7, sp, #0
 801693a:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 801693c:	687b      	ldr	r3, [r7, #4]
 801693e:	685b      	ldr	r3, [r3, #4]
 8016940:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8016942:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016944:	781b      	ldrb	r3, [r3, #0]
 8016946:	f003 030f 	and.w	r3, r3, #15
 801694a:	b2db      	uxtb	r3, r3
 801694c:	009b      	lsls	r3, r3, #2
 801694e:	b2db      	uxtb	r3, r3
 8016950:	2b14      	cmp	r3, #20
 8016952:	f040 8167 	bne.w	8016c24 <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8016956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016958:	88db      	ldrh	r3, [r3, #6]
 801695a:	b29b      	uxth	r3, r3
 801695c:	4618      	mov	r0, r3
 801695e:	f7f6 f8d1 	bl	800cb04 <lwip_htons>
 8016962:	4603      	mov	r3, r0
 8016964:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016968:	b29b      	uxth	r3, r3
 801696a:	00db      	lsls	r3, r3, #3
 801696c:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801696e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016970:	885b      	ldrh	r3, [r3, #2]
 8016972:	b29b      	uxth	r3, r3
 8016974:	4618      	mov	r0, r3
 8016976:	f7f6 f8c5 	bl	800cb04 <lwip_htons>
 801697a:	4603      	mov	r3, r0
 801697c:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801697e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016980:	781b      	ldrb	r3, [r3, #0]
 8016982:	f003 030f 	and.w	r3, r3, #15
 8016986:	b2db      	uxtb	r3, r3
 8016988:	009b      	lsls	r3, r3, #2
 801698a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 801698e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8016992:	b29b      	uxth	r3, r3
 8016994:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8016996:	429a      	cmp	r2, r3
 8016998:	f0c0 8146 	bcc.w	8016c28 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 801699c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80169a0:	b29b      	uxth	r3, r3
 80169a2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80169a4:	1ad3      	subs	r3, r2, r3
 80169a6:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 80169a8:	6878      	ldr	r0, [r7, #4]
 80169aa:	f7f7 fd0d 	bl	800e3c8 <pbuf_clen>
 80169ae:	4603      	mov	r3, r0
 80169b0:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 80169b2:	4ba3      	ldr	r3, [pc, #652]	; (8016c40 <ip4_reass+0x30c>)
 80169b4:	881b      	ldrh	r3, [r3, #0]
 80169b6:	461a      	mov	r2, r3
 80169b8:	8c3b      	ldrh	r3, [r7, #32]
 80169ba:	4413      	add	r3, r2
 80169bc:	2b0a      	cmp	r3, #10
 80169be:	dd10      	ble.n	80169e2 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80169c0:	8c3b      	ldrh	r3, [r7, #32]
 80169c2:	4619      	mov	r1, r3
 80169c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80169c6:	f7ff fd81 	bl	80164cc <ip_reass_remove_oldest_datagram>
 80169ca:	4603      	mov	r3, r0
 80169cc:	2b00      	cmp	r3, #0
 80169ce:	f000 812d 	beq.w	8016c2c <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 80169d2:	4b9b      	ldr	r3, [pc, #620]	; (8016c40 <ip4_reass+0x30c>)
 80169d4:	881b      	ldrh	r3, [r3, #0]
 80169d6:	461a      	mov	r2, r3
 80169d8:	8c3b      	ldrh	r3, [r7, #32]
 80169da:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80169dc:	2b0a      	cmp	r3, #10
 80169de:	f300 8125 	bgt.w	8016c2c <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80169e2:	4b98      	ldr	r3, [pc, #608]	; (8016c44 <ip4_reass+0x310>)
 80169e4:	681b      	ldr	r3, [r3, #0]
 80169e6:	633b      	str	r3, [r7, #48]	; 0x30
 80169e8:	e015      	b.n	8016a16 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 80169ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80169ec:	695a      	ldr	r2, [r3, #20]
 80169ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80169f0:	68db      	ldr	r3, [r3, #12]
 80169f2:	429a      	cmp	r2, r3
 80169f4:	d10c      	bne.n	8016a10 <ip4_reass+0xdc>
 80169f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80169f8:	699a      	ldr	r2, [r3, #24]
 80169fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80169fc:	691b      	ldr	r3, [r3, #16]
 80169fe:	429a      	cmp	r2, r3
 8016a00:	d106      	bne.n	8016a10 <ip4_reass+0xdc>
 8016a02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016a04:	899a      	ldrh	r2, [r3, #12]
 8016a06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016a08:	889b      	ldrh	r3, [r3, #4]
 8016a0a:	b29b      	uxth	r3, r3
 8016a0c:	429a      	cmp	r2, r3
 8016a0e:	d006      	beq.n	8016a1e <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8016a10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016a12:	681b      	ldr	r3, [r3, #0]
 8016a14:	633b      	str	r3, [r7, #48]	; 0x30
 8016a16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016a18:	2b00      	cmp	r3, #0
 8016a1a:	d1e6      	bne.n	80169ea <ip4_reass+0xb6>
 8016a1c:	e000      	b.n	8016a20 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8016a1e:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8016a20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016a22:	2b00      	cmp	r3, #0
 8016a24:	d109      	bne.n	8016a3a <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8016a26:	8c3b      	ldrh	r3, [r7, #32]
 8016a28:	4619      	mov	r1, r3
 8016a2a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016a2c:	f7ff fdb0 	bl	8016590 <ip_reass_enqueue_new_datagram>
 8016a30:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8016a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016a34:	2b00      	cmp	r3, #0
 8016a36:	d11c      	bne.n	8016a72 <ip4_reass+0x13e>
      goto nullreturn;
 8016a38:	e0f9      	b.n	8016c2e <ip4_reass+0x2fa>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8016a3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016a3c:	88db      	ldrh	r3, [r3, #6]
 8016a3e:	b29b      	uxth	r3, r3
 8016a40:	4618      	mov	r0, r3
 8016a42:	f7f6 f85f 	bl	800cb04 <lwip_htons>
 8016a46:	4603      	mov	r3, r0
 8016a48:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016a4c:	2b00      	cmp	r3, #0
 8016a4e:	d110      	bne.n	8016a72 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8016a50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016a52:	89db      	ldrh	r3, [r3, #14]
 8016a54:	4618      	mov	r0, r3
 8016a56:	f7f6 f855 	bl	800cb04 <lwip_htons>
 8016a5a:	4603      	mov	r3, r0
 8016a5c:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8016a60:	2b00      	cmp	r3, #0
 8016a62:	d006      	beq.n	8016a72 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8016a64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016a66:	3308      	adds	r3, #8
 8016a68:	2214      	movs	r2, #20
 8016a6a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8016a6c:	4618      	mov	r0, r3
 8016a6e:	f000 fd90 	bl	8017592 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8016a72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016a74:	88db      	ldrh	r3, [r3, #6]
 8016a76:	b29b      	uxth	r3, r3
 8016a78:	f003 0320 	and.w	r3, r3, #32
 8016a7c:	2b00      	cmp	r3, #0
 8016a7e:	bf0c      	ite	eq
 8016a80:	2301      	moveq	r3, #1
 8016a82:	2300      	movne	r3, #0
 8016a84:	b2db      	uxtb	r3, r3
 8016a86:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8016a88:	69fb      	ldr	r3, [r7, #28]
 8016a8a:	2b00      	cmp	r3, #0
 8016a8c:	d00e      	beq.n	8016aac <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8016a8e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8016a90:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016a92:	4413      	add	r3, r2
 8016a94:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8016a96:	8b7a      	ldrh	r2, [r7, #26]
 8016a98:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8016a9a:	429a      	cmp	r2, r3
 8016a9c:	f0c0 80a0 	bcc.w	8016be0 <ip4_reass+0x2ac>
 8016aa0:	8b7b      	ldrh	r3, [r7, #26]
 8016aa2:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8016aa6:	4293      	cmp	r3, r2
 8016aa8:	f200 809a 	bhi.w	8016be0 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8016aac:	69fa      	ldr	r2, [r7, #28]
 8016aae:	6879      	ldr	r1, [r7, #4]
 8016ab0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016ab2:	f7ff fdd5 	bl	8016660 <ip_reass_chain_frag_into_datagram_and_validate>
 8016ab6:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8016ab8:	697b      	ldr	r3, [r7, #20]
 8016aba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016abe:	f000 8091 	beq.w	8016be4 <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8016ac2:	4b5f      	ldr	r3, [pc, #380]	; (8016c40 <ip4_reass+0x30c>)
 8016ac4:	881a      	ldrh	r2, [r3, #0]
 8016ac6:	8c3b      	ldrh	r3, [r7, #32]
 8016ac8:	4413      	add	r3, r2
 8016aca:	b29a      	uxth	r2, r3
 8016acc:	4b5c      	ldr	r3, [pc, #368]	; (8016c40 <ip4_reass+0x30c>)
 8016ace:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8016ad0:	69fb      	ldr	r3, [r7, #28]
 8016ad2:	2b00      	cmp	r3, #0
 8016ad4:	d00d      	beq.n	8016af2 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8016ad6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8016ad8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016ada:	4413      	add	r3, r2
 8016adc:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8016ade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016ae0:	8a7a      	ldrh	r2, [r7, #18]
 8016ae2:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8016ae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016ae6:	7f9b      	ldrb	r3, [r3, #30]
 8016ae8:	f043 0301 	orr.w	r3, r3, #1
 8016aec:	b2da      	uxtb	r2, r3
 8016aee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016af0:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8016af2:	697b      	ldr	r3, [r7, #20]
 8016af4:	2b01      	cmp	r3, #1
 8016af6:	d171      	bne.n	8016bdc <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8016af8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016afa:	8b9b      	ldrh	r3, [r3, #28]
 8016afc:	3314      	adds	r3, #20
 8016afe:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8016b00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016b02:	685b      	ldr	r3, [r3, #4]
 8016b04:	685b      	ldr	r3, [r3, #4]
 8016b06:	681b      	ldr	r3, [r3, #0]
 8016b08:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8016b0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016b0c:	685b      	ldr	r3, [r3, #4]
 8016b0e:	685b      	ldr	r3, [r3, #4]
 8016b10:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8016b12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016b14:	3308      	adds	r3, #8
 8016b16:	2214      	movs	r2, #20
 8016b18:	4619      	mov	r1, r3
 8016b1a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016b1c:	f000 fd39 	bl	8017592 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8016b20:	8a3b      	ldrh	r3, [r7, #16]
 8016b22:	4618      	mov	r0, r3
 8016b24:	f7f5 ffee 	bl	800cb04 <lwip_htons>
 8016b28:	4603      	mov	r3, r0
 8016b2a:	461a      	mov	r2, r3
 8016b2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016b2e:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8016b30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016b32:	2200      	movs	r2, #0
 8016b34:	719a      	strb	r2, [r3, #6]
 8016b36:	2200      	movs	r2, #0
 8016b38:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8016b3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016b3c:	2200      	movs	r2, #0
 8016b3e:	729a      	strb	r2, [r3, #10]
 8016b40:	2200      	movs	r2, #0
 8016b42:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8016b44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016b46:	685b      	ldr	r3, [r3, #4]
 8016b48:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8016b4a:	e00d      	b.n	8016b68 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8016b4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016b4e:	685b      	ldr	r3, [r3, #4]
 8016b50:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8016b52:	2114      	movs	r1, #20
 8016b54:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8016b56:	f7f7 faf1 	bl	800e13c <pbuf_remove_header>
      pbuf_cat(p, r);
 8016b5a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8016b5c:	6878      	ldr	r0, [r7, #4]
 8016b5e:	f7f7 fc73 	bl	800e448 <pbuf_cat>
      r = iprh->next_pbuf;
 8016b62:	68fb      	ldr	r3, [r7, #12]
 8016b64:	681b      	ldr	r3, [r3, #0]
 8016b66:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8016b68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016b6a:	2b00      	cmp	r3, #0
 8016b6c:	d1ee      	bne.n	8016b4c <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8016b6e:	4b35      	ldr	r3, [pc, #212]	; (8016c44 <ip4_reass+0x310>)
 8016b70:	681b      	ldr	r3, [r3, #0]
 8016b72:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016b74:	429a      	cmp	r2, r3
 8016b76:	d102      	bne.n	8016b7e <ip4_reass+0x24a>
      ipr_prev = NULL;
 8016b78:	2300      	movs	r3, #0
 8016b7a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8016b7c:	e010      	b.n	8016ba0 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8016b7e:	4b31      	ldr	r3, [pc, #196]	; (8016c44 <ip4_reass+0x310>)
 8016b80:	681b      	ldr	r3, [r3, #0]
 8016b82:	62fb      	str	r3, [r7, #44]	; 0x2c
 8016b84:	e007      	b.n	8016b96 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8016b86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016b88:	681b      	ldr	r3, [r3, #0]
 8016b8a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016b8c:	429a      	cmp	r2, r3
 8016b8e:	d006      	beq.n	8016b9e <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8016b90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016b92:	681b      	ldr	r3, [r3, #0]
 8016b94:	62fb      	str	r3, [r7, #44]	; 0x2c
 8016b96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016b98:	2b00      	cmp	r3, #0
 8016b9a:	d1f4      	bne.n	8016b86 <ip4_reass+0x252>
 8016b9c:	e000      	b.n	8016ba0 <ip4_reass+0x26c>
          break;
 8016b9e:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8016ba0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8016ba2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016ba4:	f7ff fd2e 	bl	8016604 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8016ba8:	6878      	ldr	r0, [r7, #4]
 8016baa:	f7f7 fc0d 	bl	800e3c8 <pbuf_clen>
 8016bae:	4603      	mov	r3, r0
 8016bb0:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8016bb2:	4b23      	ldr	r3, [pc, #140]	; (8016c40 <ip4_reass+0x30c>)
 8016bb4:	881b      	ldrh	r3, [r3, #0]
 8016bb6:	8c3a      	ldrh	r2, [r7, #32]
 8016bb8:	429a      	cmp	r2, r3
 8016bba:	d906      	bls.n	8016bca <ip4_reass+0x296>
 8016bbc:	4b22      	ldr	r3, [pc, #136]	; (8016c48 <ip4_reass+0x314>)
 8016bbe:	f240 229b 	movw	r2, #667	; 0x29b
 8016bc2:	4922      	ldr	r1, [pc, #136]	; (8016c4c <ip4_reass+0x318>)
 8016bc4:	4822      	ldr	r0, [pc, #136]	; (8016c50 <ip4_reass+0x31c>)
 8016bc6:	f000 fcf7 	bl	80175b8 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8016bca:	4b1d      	ldr	r3, [pc, #116]	; (8016c40 <ip4_reass+0x30c>)
 8016bcc:	881a      	ldrh	r2, [r3, #0]
 8016bce:	8c3b      	ldrh	r3, [r7, #32]
 8016bd0:	1ad3      	subs	r3, r2, r3
 8016bd2:	b29a      	uxth	r2, r3
 8016bd4:	4b1a      	ldr	r3, [pc, #104]	; (8016c40 <ip4_reass+0x30c>)
 8016bd6:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8016bd8:	687b      	ldr	r3, [r7, #4]
 8016bda:	e02c      	b.n	8016c36 <ip4_reass+0x302>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8016bdc:	2300      	movs	r3, #0
 8016bde:	e02a      	b.n	8016c36 <ip4_reass+0x302>

nullreturn_ipr:
 8016be0:	bf00      	nop
 8016be2:	e000      	b.n	8016be6 <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 8016be4:	bf00      	nop
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8016be6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016be8:	2b00      	cmp	r3, #0
 8016bea:	d106      	bne.n	8016bfa <ip4_reass+0x2c6>
 8016bec:	4b16      	ldr	r3, [pc, #88]	; (8016c48 <ip4_reass+0x314>)
 8016bee:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8016bf2:	4918      	ldr	r1, [pc, #96]	; (8016c54 <ip4_reass+0x320>)
 8016bf4:	4816      	ldr	r0, [pc, #88]	; (8016c50 <ip4_reass+0x31c>)
 8016bf6:	f000 fcdf 	bl	80175b8 <iprintf>
  if (ipr->p == NULL) {
 8016bfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016bfc:	685b      	ldr	r3, [r3, #4]
 8016bfe:	2b00      	cmp	r3, #0
 8016c00:	d114      	bne.n	8016c2c <ip4_reass+0x2f8>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8016c02:	4b10      	ldr	r3, [pc, #64]	; (8016c44 <ip4_reass+0x310>)
 8016c04:	681b      	ldr	r3, [r3, #0]
 8016c06:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016c08:	429a      	cmp	r2, r3
 8016c0a:	d006      	beq.n	8016c1a <ip4_reass+0x2e6>
 8016c0c:	4b0e      	ldr	r3, [pc, #56]	; (8016c48 <ip4_reass+0x314>)
 8016c0e:	f240 22ab 	movw	r2, #683	; 0x2ab
 8016c12:	4911      	ldr	r1, [pc, #68]	; (8016c58 <ip4_reass+0x324>)
 8016c14:	480e      	ldr	r0, [pc, #56]	; (8016c50 <ip4_reass+0x31c>)
 8016c16:	f000 fccf 	bl	80175b8 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8016c1a:	2100      	movs	r1, #0
 8016c1c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016c1e:	f7ff fcf1 	bl	8016604 <ip_reass_dequeue_datagram>
 8016c22:	e004      	b.n	8016c2e <ip4_reass+0x2fa>
    goto nullreturn;
 8016c24:	bf00      	nop
 8016c26:	e002      	b.n	8016c2e <ip4_reass+0x2fa>
    goto nullreturn;
 8016c28:	bf00      	nop
 8016c2a:	e000      	b.n	8016c2e <ip4_reass+0x2fa>
  }

nullreturn:
 8016c2c:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8016c2e:	6878      	ldr	r0, [r7, #4]
 8016c30:	f7f7 fb3c 	bl	800e2ac <pbuf_free>
  return NULL;
 8016c34:	2300      	movs	r3, #0
}
 8016c36:	4618      	mov	r0, r3
 8016c38:	3738      	adds	r7, #56	; 0x38
 8016c3a:	46bd      	mov	sp, r7
 8016c3c:	bd80      	pop	{r7, pc}
 8016c3e:	bf00      	nop
 8016c40:	20004780 	.word	0x20004780
 8016c44:	2000477c 	.word	0x2000477c
 8016c48:	0801b620 	.word	0x0801b620
 8016c4c:	0801b790 	.word	0x0801b790
 8016c50:	0801b668 	.word	0x0801b668
 8016c54:	0801b7ac 	.word	0x0801b7ac
 8016c58:	0801b7b8 	.word	0x0801b7b8

08016c5c <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8016c5c:	b580      	push	{r7, lr}
 8016c5e:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8016c60:	2004      	movs	r0, #4
 8016c62:	f7f6 fc03 	bl	800d46c <memp_malloc>
 8016c66:	4603      	mov	r3, r0
}
 8016c68:	4618      	mov	r0, r3
 8016c6a:	bd80      	pop	{r7, pc}

08016c6c <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8016c6c:	b580      	push	{r7, lr}
 8016c6e:	b082      	sub	sp, #8
 8016c70:	af00      	add	r7, sp, #0
 8016c72:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8016c74:	687b      	ldr	r3, [r7, #4]
 8016c76:	2b00      	cmp	r3, #0
 8016c78:	d106      	bne.n	8016c88 <ip_frag_free_pbuf_custom_ref+0x1c>
 8016c7a:	4b07      	ldr	r3, [pc, #28]	; (8016c98 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8016c7c:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8016c80:	4906      	ldr	r1, [pc, #24]	; (8016c9c <ip_frag_free_pbuf_custom_ref+0x30>)
 8016c82:	4807      	ldr	r0, [pc, #28]	; (8016ca0 <ip_frag_free_pbuf_custom_ref+0x34>)
 8016c84:	f000 fc98 	bl	80175b8 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8016c88:	6879      	ldr	r1, [r7, #4]
 8016c8a:	2004      	movs	r0, #4
 8016c8c:	f7f6 fc40 	bl	800d510 <memp_free>
}
 8016c90:	bf00      	nop
 8016c92:	3708      	adds	r7, #8
 8016c94:	46bd      	mov	sp, r7
 8016c96:	bd80      	pop	{r7, pc}
 8016c98:	0801b620 	.word	0x0801b620
 8016c9c:	0801b7d8 	.word	0x0801b7d8
 8016ca0:	0801b668 	.word	0x0801b668

08016ca4 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8016ca4:	b580      	push	{r7, lr}
 8016ca6:	b084      	sub	sp, #16
 8016ca8:	af00      	add	r7, sp, #0
 8016caa:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8016cac:	687b      	ldr	r3, [r7, #4]
 8016cae:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8016cb0:	68fb      	ldr	r3, [r7, #12]
 8016cb2:	2b00      	cmp	r3, #0
 8016cb4:	d106      	bne.n	8016cc4 <ipfrag_free_pbuf_custom+0x20>
 8016cb6:	4b11      	ldr	r3, [pc, #68]	; (8016cfc <ipfrag_free_pbuf_custom+0x58>)
 8016cb8:	f240 22ce 	movw	r2, #718	; 0x2ce
 8016cbc:	4910      	ldr	r1, [pc, #64]	; (8016d00 <ipfrag_free_pbuf_custom+0x5c>)
 8016cbe:	4811      	ldr	r0, [pc, #68]	; (8016d04 <ipfrag_free_pbuf_custom+0x60>)
 8016cc0:	f000 fc7a 	bl	80175b8 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8016cc4:	68fa      	ldr	r2, [r7, #12]
 8016cc6:	687b      	ldr	r3, [r7, #4]
 8016cc8:	429a      	cmp	r2, r3
 8016cca:	d006      	beq.n	8016cda <ipfrag_free_pbuf_custom+0x36>
 8016ccc:	4b0b      	ldr	r3, [pc, #44]	; (8016cfc <ipfrag_free_pbuf_custom+0x58>)
 8016cce:	f240 22cf 	movw	r2, #719	; 0x2cf
 8016cd2:	490d      	ldr	r1, [pc, #52]	; (8016d08 <ipfrag_free_pbuf_custom+0x64>)
 8016cd4:	480b      	ldr	r0, [pc, #44]	; (8016d04 <ipfrag_free_pbuf_custom+0x60>)
 8016cd6:	f000 fc6f 	bl	80175b8 <iprintf>
  if (pcr->original != NULL) {
 8016cda:	68fb      	ldr	r3, [r7, #12]
 8016cdc:	695b      	ldr	r3, [r3, #20]
 8016cde:	2b00      	cmp	r3, #0
 8016ce0:	d004      	beq.n	8016cec <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8016ce2:	68fb      	ldr	r3, [r7, #12]
 8016ce4:	695b      	ldr	r3, [r3, #20]
 8016ce6:	4618      	mov	r0, r3
 8016ce8:	f7f7 fae0 	bl	800e2ac <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8016cec:	68f8      	ldr	r0, [r7, #12]
 8016cee:	f7ff ffbd 	bl	8016c6c <ip_frag_free_pbuf_custom_ref>
}
 8016cf2:	bf00      	nop
 8016cf4:	3710      	adds	r7, #16
 8016cf6:	46bd      	mov	sp, r7
 8016cf8:	bd80      	pop	{r7, pc}
 8016cfa:	bf00      	nop
 8016cfc:	0801b620 	.word	0x0801b620
 8016d00:	0801b7e4 	.word	0x0801b7e4
 8016d04:	0801b668 	.word	0x0801b668
 8016d08:	0801b7f0 	.word	0x0801b7f0

08016d0c <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8016d0c:	b580      	push	{r7, lr}
 8016d0e:	b094      	sub	sp, #80	; 0x50
 8016d10:	af02      	add	r7, sp, #8
 8016d12:	60f8      	str	r0, [r7, #12]
 8016d14:	60b9      	str	r1, [r7, #8]
 8016d16:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8016d18:	2300      	movs	r3, #0
 8016d1a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8016d1e:	68bb      	ldr	r3, [r7, #8]
 8016d20:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8016d22:	3b14      	subs	r3, #20
 8016d24:	2b00      	cmp	r3, #0
 8016d26:	da00      	bge.n	8016d2a <ip4_frag+0x1e>
 8016d28:	3307      	adds	r3, #7
 8016d2a:	10db      	asrs	r3, r3, #3
 8016d2c:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8016d2e:	2314      	movs	r3, #20
 8016d30:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8016d32:	68fb      	ldr	r3, [r7, #12]
 8016d34:	685b      	ldr	r3, [r3, #4]
 8016d36:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8016d38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016d3a:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8016d3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016d3e:	781b      	ldrb	r3, [r3, #0]
 8016d40:	f003 030f 	and.w	r3, r3, #15
 8016d44:	b2db      	uxtb	r3, r3
 8016d46:	009b      	lsls	r3, r3, #2
 8016d48:	b2db      	uxtb	r3, r3
 8016d4a:	2b14      	cmp	r3, #20
 8016d4c:	d002      	beq.n	8016d54 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8016d4e:	f06f 0305 	mvn.w	r3, #5
 8016d52:	e10f      	b.n	8016f74 <ip4_frag+0x268>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8016d54:	68fb      	ldr	r3, [r7, #12]
 8016d56:	895b      	ldrh	r3, [r3, #10]
 8016d58:	2b13      	cmp	r3, #19
 8016d5a:	d809      	bhi.n	8016d70 <ip4_frag+0x64>
 8016d5c:	4b87      	ldr	r3, [pc, #540]	; (8016f7c <ip4_frag+0x270>)
 8016d5e:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8016d62:	4987      	ldr	r1, [pc, #540]	; (8016f80 <ip4_frag+0x274>)
 8016d64:	4887      	ldr	r0, [pc, #540]	; (8016f84 <ip4_frag+0x278>)
 8016d66:	f000 fc27 	bl	80175b8 <iprintf>
 8016d6a:	f06f 0305 	mvn.w	r3, #5
 8016d6e:	e101      	b.n	8016f74 <ip4_frag+0x268>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8016d70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016d72:	88db      	ldrh	r3, [r3, #6]
 8016d74:	b29b      	uxth	r3, r3
 8016d76:	4618      	mov	r0, r3
 8016d78:	f7f5 fec4 	bl	800cb04 <lwip_htons>
 8016d7c:	4603      	mov	r3, r0
 8016d7e:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8016d80:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8016d82:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016d86:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8016d8a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8016d8c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8016d90:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8016d92:	68fb      	ldr	r3, [r7, #12]
 8016d94:	891b      	ldrh	r3, [r3, #8]
 8016d96:	3b14      	subs	r3, #20
 8016d98:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8016d9c:	e0e0      	b.n	8016f60 <ip4_frag+0x254>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8016d9e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8016da0:	00db      	lsls	r3, r3, #3
 8016da2:	b29b      	uxth	r3, r3
 8016da4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8016da8:	4293      	cmp	r3, r2
 8016daa:	bf28      	it	cs
 8016dac:	4613      	movcs	r3, r2
 8016dae:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8016db0:	f44f 7220 	mov.w	r2, #640	; 0x280
 8016db4:	2114      	movs	r1, #20
 8016db6:	200e      	movs	r0, #14
 8016db8:	f7f6 ff66 	bl	800dc88 <pbuf_alloc>
 8016dbc:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8016dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016dc0:	2b00      	cmp	r3, #0
 8016dc2:	f000 80d4 	beq.w	8016f6e <ip4_frag+0x262>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8016dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016dc8:	895b      	ldrh	r3, [r3, #10]
 8016dca:	2b13      	cmp	r3, #19
 8016dcc:	d806      	bhi.n	8016ddc <ip4_frag+0xd0>
 8016dce:	4b6b      	ldr	r3, [pc, #428]	; (8016f7c <ip4_frag+0x270>)
 8016dd0:	f240 3225 	movw	r2, #805	; 0x325
 8016dd4:	496c      	ldr	r1, [pc, #432]	; (8016f88 <ip4_frag+0x27c>)
 8016dd6:	486b      	ldr	r0, [pc, #428]	; (8016f84 <ip4_frag+0x278>)
 8016dd8:	f000 fbee 	bl	80175b8 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8016ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016dde:	685b      	ldr	r3, [r3, #4]
 8016de0:	2214      	movs	r2, #20
 8016de2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8016de4:	4618      	mov	r0, r3
 8016de6:	f000 fbd4 	bl	8017592 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8016dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016dec:	685b      	ldr	r3, [r3, #4]
 8016dee:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8016df0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8016df2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8016df6:	e064      	b.n	8016ec2 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8016df8:	68fb      	ldr	r3, [r7, #12]
 8016dfa:	895a      	ldrh	r2, [r3, #10]
 8016dfc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8016dfe:	1ad3      	subs	r3, r2, r3
 8016e00:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8016e02:	68fb      	ldr	r3, [r7, #12]
 8016e04:	895b      	ldrh	r3, [r3, #10]
 8016e06:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8016e08:	429a      	cmp	r2, r3
 8016e0a:	d906      	bls.n	8016e1a <ip4_frag+0x10e>
 8016e0c:	4b5b      	ldr	r3, [pc, #364]	; (8016f7c <ip4_frag+0x270>)
 8016e0e:	f240 322d 	movw	r2, #813	; 0x32d
 8016e12:	495e      	ldr	r1, [pc, #376]	; (8016f8c <ip4_frag+0x280>)
 8016e14:	485b      	ldr	r0, [pc, #364]	; (8016f84 <ip4_frag+0x278>)
 8016e16:	f000 fbcf 	bl	80175b8 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8016e1a:	8bfa      	ldrh	r2, [r7, #30]
 8016e1c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8016e20:	4293      	cmp	r3, r2
 8016e22:	bf28      	it	cs
 8016e24:	4613      	movcs	r3, r2
 8016e26:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8016e2a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8016e2e:	2b00      	cmp	r3, #0
 8016e30:	d105      	bne.n	8016e3e <ip4_frag+0x132>
        poff = 0;
 8016e32:	2300      	movs	r3, #0
 8016e34:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8016e36:	68fb      	ldr	r3, [r7, #12]
 8016e38:	681b      	ldr	r3, [r3, #0]
 8016e3a:	60fb      	str	r3, [r7, #12]
        continue;
 8016e3c:	e041      	b.n	8016ec2 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8016e3e:	f7ff ff0d 	bl	8016c5c <ip_frag_alloc_pbuf_custom_ref>
 8016e42:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8016e44:	69bb      	ldr	r3, [r7, #24]
 8016e46:	2b00      	cmp	r3, #0
 8016e48:	d103      	bne.n	8016e52 <ip4_frag+0x146>
        pbuf_free(rambuf);
 8016e4a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016e4c:	f7f7 fa2e 	bl	800e2ac <pbuf_free>
        goto memerr;
 8016e50:	e08e      	b.n	8016f70 <ip4_frag+0x264>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8016e52:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8016e54:	68fb      	ldr	r3, [r7, #12]
 8016e56:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8016e58:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8016e5a:	4413      	add	r3, r2
 8016e5c:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8016e60:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8016e64:	9201      	str	r2, [sp, #4]
 8016e66:	9300      	str	r3, [sp, #0]
 8016e68:	4603      	mov	r3, r0
 8016e6a:	2241      	movs	r2, #65	; 0x41
 8016e6c:	2000      	movs	r0, #0
 8016e6e:	f7f7 f831 	bl	800ded4 <pbuf_alloced_custom>
 8016e72:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8016e74:	697b      	ldr	r3, [r7, #20]
 8016e76:	2b00      	cmp	r3, #0
 8016e78:	d106      	bne.n	8016e88 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8016e7a:	69b8      	ldr	r0, [r7, #24]
 8016e7c:	f7ff fef6 	bl	8016c6c <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8016e80:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016e82:	f7f7 fa13 	bl	800e2ac <pbuf_free>
        goto memerr;
 8016e86:	e073      	b.n	8016f70 <ip4_frag+0x264>
      }
      pbuf_ref(p);
 8016e88:	68f8      	ldr	r0, [r7, #12]
 8016e8a:	f7f7 fab5 	bl	800e3f8 <pbuf_ref>
      pcr->original = p;
 8016e8e:	69bb      	ldr	r3, [r7, #24]
 8016e90:	68fa      	ldr	r2, [r7, #12]
 8016e92:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8016e94:	69bb      	ldr	r3, [r7, #24]
 8016e96:	4a3e      	ldr	r2, [pc, #248]	; (8016f90 <ip4_frag+0x284>)
 8016e98:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8016e9a:	6979      	ldr	r1, [r7, #20]
 8016e9c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016e9e:	f7f7 fad3 	bl	800e448 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8016ea2:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8016ea6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8016eaa:	1ad3      	subs	r3, r2, r3
 8016eac:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8016eb0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8016eb4:	2b00      	cmp	r3, #0
 8016eb6:	d004      	beq.n	8016ec2 <ip4_frag+0x1b6>
        poff = 0;
 8016eb8:	2300      	movs	r3, #0
 8016eba:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8016ebc:	68fb      	ldr	r3, [r7, #12]
 8016ebe:	681b      	ldr	r3, [r3, #0]
 8016ec0:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8016ec2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8016ec6:	2b00      	cmp	r3, #0
 8016ec8:	d196      	bne.n	8016df8 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8016eca:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8016ecc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8016ed0:	4413      	add	r3, r2
 8016ed2:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8016ed4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8016ed8:	68bb      	ldr	r3, [r7, #8]
 8016eda:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8016edc:	3b14      	subs	r3, #20
 8016ede:	429a      	cmp	r2, r3
 8016ee0:	bfd4      	ite	le
 8016ee2:	2301      	movle	r3, #1
 8016ee4:	2300      	movgt	r3, #0
 8016ee6:	b2db      	uxtb	r3, r3
 8016ee8:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8016eea:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8016eee:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016ef2:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8016ef4:	6a3b      	ldr	r3, [r7, #32]
 8016ef6:	2b00      	cmp	r3, #0
 8016ef8:	d002      	beq.n	8016f00 <ip4_frag+0x1f4>
 8016efa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016efc:	2b00      	cmp	r3, #0
 8016efe:	d003      	beq.n	8016f08 <ip4_frag+0x1fc>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8016f00:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8016f02:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8016f06:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8016f08:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8016f0a:	4618      	mov	r0, r3
 8016f0c:	f7f5 fdfa 	bl	800cb04 <lwip_htons>
 8016f10:	4603      	mov	r3, r0
 8016f12:	461a      	mov	r2, r3
 8016f14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016f16:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8016f18:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8016f1a:	3314      	adds	r3, #20
 8016f1c:	b29b      	uxth	r3, r3
 8016f1e:	4618      	mov	r0, r3
 8016f20:	f7f5 fdf0 	bl	800cb04 <lwip_htons>
 8016f24:	4603      	mov	r3, r0
 8016f26:	461a      	mov	r2, r3
 8016f28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016f2a:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8016f2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016f2e:	2200      	movs	r2, #0
 8016f30:	729a      	strb	r2, [r3, #10]
 8016f32:	2200      	movs	r2, #0
 8016f34:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8016f36:	68bb      	ldr	r3, [r7, #8]
 8016f38:	695b      	ldr	r3, [r3, #20]
 8016f3a:	687a      	ldr	r2, [r7, #4]
 8016f3c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016f3e:	68b8      	ldr	r0, [r7, #8]
 8016f40:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8016f42:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016f44:	f7f7 f9b2 	bl	800e2ac <pbuf_free>
    left = (u16_t)(left - fragsize);
 8016f48:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8016f4c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8016f4e:	1ad3      	subs	r3, r2, r3
 8016f50:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8016f54:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8016f58:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8016f5a:	4413      	add	r3, r2
 8016f5c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8016f60:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8016f64:	2b00      	cmp	r3, #0
 8016f66:	f47f af1a 	bne.w	8016d9e <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8016f6a:	2300      	movs	r3, #0
 8016f6c:	e002      	b.n	8016f74 <ip4_frag+0x268>
      goto memerr;
 8016f6e:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8016f70:	f04f 33ff 	mov.w	r3, #4294967295
}
 8016f74:	4618      	mov	r0, r3
 8016f76:	3748      	adds	r7, #72	; 0x48
 8016f78:	46bd      	mov	sp, r7
 8016f7a:	bd80      	pop	{r7, pc}
 8016f7c:	0801b620 	.word	0x0801b620
 8016f80:	0801b7fc 	.word	0x0801b7fc
 8016f84:	0801b668 	.word	0x0801b668
 8016f88:	0801b818 	.word	0x0801b818
 8016f8c:	0801b838 	.word	0x0801b838
 8016f90:	08016ca5 	.word	0x08016ca5

08016f94 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8016f94:	b580      	push	{r7, lr}
 8016f96:	b086      	sub	sp, #24
 8016f98:	af00      	add	r7, sp, #0
 8016f9a:	6078      	str	r0, [r7, #4]
 8016f9c:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8016f9e:	230e      	movs	r3, #14
 8016fa0:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8016fa2:	687b      	ldr	r3, [r7, #4]
 8016fa4:	895b      	ldrh	r3, [r3, #10]
 8016fa6:	2b0e      	cmp	r3, #14
 8016fa8:	d96e      	bls.n	8017088 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8016faa:	687b      	ldr	r3, [r7, #4]
 8016fac:	7bdb      	ldrb	r3, [r3, #15]
 8016fae:	2b00      	cmp	r3, #0
 8016fb0:	d106      	bne.n	8016fc0 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8016fb2:	683b      	ldr	r3, [r7, #0]
 8016fb4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8016fb8:	3301      	adds	r3, #1
 8016fba:	b2da      	uxtb	r2, r3
 8016fbc:	687b      	ldr	r3, [r7, #4]
 8016fbe:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8016fc0:	687b      	ldr	r3, [r7, #4]
 8016fc2:	685b      	ldr	r3, [r3, #4]
 8016fc4:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8016fc6:	693b      	ldr	r3, [r7, #16]
 8016fc8:	7b1a      	ldrb	r2, [r3, #12]
 8016fca:	7b5b      	ldrb	r3, [r3, #13]
 8016fcc:	021b      	lsls	r3, r3, #8
 8016fce:	4313      	orrs	r3, r2
 8016fd0:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8016fd2:	693b      	ldr	r3, [r7, #16]
 8016fd4:	781b      	ldrb	r3, [r3, #0]
 8016fd6:	f003 0301 	and.w	r3, r3, #1
 8016fda:	2b00      	cmp	r3, #0
 8016fdc:	d023      	beq.n	8017026 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8016fde:	693b      	ldr	r3, [r7, #16]
 8016fe0:	781b      	ldrb	r3, [r3, #0]
 8016fe2:	2b01      	cmp	r3, #1
 8016fe4:	d10f      	bne.n	8017006 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8016fe6:	693b      	ldr	r3, [r7, #16]
 8016fe8:	785b      	ldrb	r3, [r3, #1]
 8016fea:	2b00      	cmp	r3, #0
 8016fec:	d11b      	bne.n	8017026 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8016fee:	693b      	ldr	r3, [r7, #16]
 8016ff0:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8016ff2:	2b5e      	cmp	r3, #94	; 0x5e
 8016ff4:	d117      	bne.n	8017026 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8016ff6:	687b      	ldr	r3, [r7, #4]
 8016ff8:	7b5b      	ldrb	r3, [r3, #13]
 8016ffa:	f043 0310 	orr.w	r3, r3, #16
 8016ffe:	b2da      	uxtb	r2, r3
 8017000:	687b      	ldr	r3, [r7, #4]
 8017002:	735a      	strb	r2, [r3, #13]
 8017004:	e00f      	b.n	8017026 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8017006:	693b      	ldr	r3, [r7, #16]
 8017008:	2206      	movs	r2, #6
 801700a:	4928      	ldr	r1, [pc, #160]	; (80170ac <ethernet_input+0x118>)
 801700c:	4618      	mov	r0, r3
 801700e:	f000 fab1 	bl	8017574 <memcmp>
 8017012:	4603      	mov	r3, r0
 8017014:	2b00      	cmp	r3, #0
 8017016:	d106      	bne.n	8017026 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8017018:	687b      	ldr	r3, [r7, #4]
 801701a:	7b5b      	ldrb	r3, [r3, #13]
 801701c:	f043 0308 	orr.w	r3, r3, #8
 8017020:	b2da      	uxtb	r2, r3
 8017022:	687b      	ldr	r3, [r7, #4]
 8017024:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8017026:	89fb      	ldrh	r3, [r7, #14]
 8017028:	2b08      	cmp	r3, #8
 801702a:	d003      	beq.n	8017034 <ethernet_input+0xa0>
 801702c:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8017030:	d014      	beq.n	801705c <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8017032:	e032      	b.n	801709a <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8017034:	683b      	ldr	r3, [r7, #0]
 8017036:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801703a:	f003 0308 	and.w	r3, r3, #8
 801703e:	2b00      	cmp	r3, #0
 8017040:	d024      	beq.n	801708c <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8017042:	8afb      	ldrh	r3, [r7, #22]
 8017044:	4619      	mov	r1, r3
 8017046:	6878      	ldr	r0, [r7, #4]
 8017048:	f7f7 f878 	bl	800e13c <pbuf_remove_header>
 801704c:	4603      	mov	r3, r0
 801704e:	2b00      	cmp	r3, #0
 8017050:	d11e      	bne.n	8017090 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8017052:	6839      	ldr	r1, [r7, #0]
 8017054:	6878      	ldr	r0, [r7, #4]
 8017056:	f7fe ff35 	bl	8015ec4 <ip4_input>
      break;
 801705a:	e013      	b.n	8017084 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801705c:	683b      	ldr	r3, [r7, #0]
 801705e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8017062:	f003 0308 	and.w	r3, r3, #8
 8017066:	2b00      	cmp	r3, #0
 8017068:	d014      	beq.n	8017094 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801706a:	8afb      	ldrh	r3, [r7, #22]
 801706c:	4619      	mov	r1, r3
 801706e:	6878      	ldr	r0, [r7, #4]
 8017070:	f7f7 f864 	bl	800e13c <pbuf_remove_header>
 8017074:	4603      	mov	r3, r0
 8017076:	2b00      	cmp	r3, #0
 8017078:	d10e      	bne.n	8017098 <ethernet_input+0x104>
        etharp_input(p, netif);
 801707a:	6839      	ldr	r1, [r7, #0]
 801707c:	6878      	ldr	r0, [r7, #4]
 801707e:	f7fe f8d5 	bl	801522c <etharp_input>
      break;
 8017082:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8017084:	2300      	movs	r3, #0
 8017086:	e00c      	b.n	80170a2 <ethernet_input+0x10e>
    goto free_and_return;
 8017088:	bf00      	nop
 801708a:	e006      	b.n	801709a <ethernet_input+0x106>
        goto free_and_return;
 801708c:	bf00      	nop
 801708e:	e004      	b.n	801709a <ethernet_input+0x106>
        goto free_and_return;
 8017090:	bf00      	nop
 8017092:	e002      	b.n	801709a <ethernet_input+0x106>
        goto free_and_return;
 8017094:	bf00      	nop
 8017096:	e000      	b.n	801709a <ethernet_input+0x106>
        goto free_and_return;
 8017098:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801709a:	6878      	ldr	r0, [r7, #4]
 801709c:	f7f7 f906 	bl	800e2ac <pbuf_free>
  return ERR_OK;
 80170a0:	2300      	movs	r3, #0
}
 80170a2:	4618      	mov	r0, r3
 80170a4:	3718      	adds	r7, #24
 80170a6:	46bd      	mov	sp, r7
 80170a8:	bd80      	pop	{r7, pc}
 80170aa:	bf00      	nop
 80170ac:	0801ba40 	.word	0x0801ba40

080170b0 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 80170b0:	b580      	push	{r7, lr}
 80170b2:	b086      	sub	sp, #24
 80170b4:	af00      	add	r7, sp, #0
 80170b6:	60f8      	str	r0, [r7, #12]
 80170b8:	60b9      	str	r1, [r7, #8]
 80170ba:	607a      	str	r2, [r7, #4]
 80170bc:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 80170be:	8c3b      	ldrh	r3, [r7, #32]
 80170c0:	4618      	mov	r0, r3
 80170c2:	f7f5 fd1f 	bl	800cb04 <lwip_htons>
 80170c6:	4603      	mov	r3, r0
 80170c8:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 80170ca:	210e      	movs	r1, #14
 80170cc:	68b8      	ldr	r0, [r7, #8]
 80170ce:	f7f7 f825 	bl	800e11c <pbuf_add_header>
 80170d2:	4603      	mov	r3, r0
 80170d4:	2b00      	cmp	r3, #0
 80170d6:	d125      	bne.n	8017124 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 80170d8:	68bb      	ldr	r3, [r7, #8]
 80170da:	685b      	ldr	r3, [r3, #4]
 80170dc:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 80170de:	693b      	ldr	r3, [r7, #16]
 80170e0:	8afa      	ldrh	r2, [r7, #22]
 80170e2:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 80170e4:	693b      	ldr	r3, [r7, #16]
 80170e6:	2206      	movs	r2, #6
 80170e8:	6839      	ldr	r1, [r7, #0]
 80170ea:	4618      	mov	r0, r3
 80170ec:	f000 fa51 	bl	8017592 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 80170f0:	693b      	ldr	r3, [r7, #16]
 80170f2:	3306      	adds	r3, #6
 80170f4:	2206      	movs	r2, #6
 80170f6:	6879      	ldr	r1, [r7, #4]
 80170f8:	4618      	mov	r0, r3
 80170fa:	f000 fa4a 	bl	8017592 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 80170fe:	68fb      	ldr	r3, [r7, #12]
 8017100:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8017104:	2b06      	cmp	r3, #6
 8017106:	d006      	beq.n	8017116 <ethernet_output+0x66>
 8017108:	4b0a      	ldr	r3, [pc, #40]	; (8017134 <ethernet_output+0x84>)
 801710a:	f240 1233 	movw	r2, #307	; 0x133
 801710e:	490a      	ldr	r1, [pc, #40]	; (8017138 <ethernet_output+0x88>)
 8017110:	480a      	ldr	r0, [pc, #40]	; (801713c <ethernet_output+0x8c>)
 8017112:	f000 fa51 	bl	80175b8 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8017116:	68fb      	ldr	r3, [r7, #12]
 8017118:	699b      	ldr	r3, [r3, #24]
 801711a:	68b9      	ldr	r1, [r7, #8]
 801711c:	68f8      	ldr	r0, [r7, #12]
 801711e:	4798      	blx	r3
 8017120:	4603      	mov	r3, r0
 8017122:	e002      	b.n	801712a <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8017124:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8017126:	f06f 0301 	mvn.w	r3, #1
}
 801712a:	4618      	mov	r0, r3
 801712c:	3718      	adds	r7, #24
 801712e:	46bd      	mov	sp, r7
 8017130:	bd80      	pop	{r7, pc}
 8017132:	bf00      	nop
 8017134:	0801b848 	.word	0x0801b848
 8017138:	0801b880 	.word	0x0801b880
 801713c:	0801b8b4 	.word	0x0801b8b4

08017140 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8017140:	b580      	push	{r7, lr}
 8017142:	b086      	sub	sp, #24
 8017144:	af00      	add	r7, sp, #0
 8017146:	6078      	str	r0, [r7, #4]
 8017148:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 801714a:	683b      	ldr	r3, [r7, #0]
 801714c:	60bb      	str	r3, [r7, #8]
 801714e:	2304      	movs	r3, #4
 8017150:	60fb      	str	r3, [r7, #12]
 8017152:	2300      	movs	r3, #0
 8017154:	613b      	str	r3, [r7, #16]
 8017156:	2300      	movs	r3, #0
 8017158:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 801715a:	f107 0308 	add.w	r3, r7, #8
 801715e:	2100      	movs	r1, #0
 8017160:	4618      	mov	r0, r3
 8017162:	f7ee ff78 	bl	8006056 <osMessageCreate>
 8017166:	4602      	mov	r2, r0
 8017168:	687b      	ldr	r3, [r7, #4]
 801716a:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 801716c:	687b      	ldr	r3, [r7, #4]
 801716e:	681b      	ldr	r3, [r3, #0]
 8017170:	2b00      	cmp	r3, #0
 8017172:	d102      	bne.n	801717a <sys_mbox_new+0x3a>
    return ERR_MEM;
 8017174:	f04f 33ff 	mov.w	r3, #4294967295
 8017178:	e000      	b.n	801717c <sys_mbox_new+0x3c>

  return ERR_OK;
 801717a:	2300      	movs	r3, #0
}
 801717c:	4618      	mov	r0, r3
 801717e:	3718      	adds	r7, #24
 8017180:	46bd      	mov	sp, r7
 8017182:	bd80      	pop	{r7, pc}

08017184 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 8017184:	b580      	push	{r7, lr}
 8017186:	b082      	sub	sp, #8
 8017188:	af00      	add	r7, sp, #0
 801718a:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
 801718c:	687b      	ldr	r3, [r7, #4]
 801718e:	681b      	ldr	r3, [r3, #0]
 8017190:	4618      	mov	r0, r3
 8017192:	f7ef f83d 	bl	8006210 <osMessageWaiting>
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
 8017196:	687b      	ldr	r3, [r7, #4]
 8017198:	681b      	ldr	r3, [r3, #0]
 801719a:	4618      	mov	r0, r3
 801719c:	f7ef f84e 	bl	800623c <osMessageDelete>
  osMessageQueueDelete(*mbox);
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 80171a0:	bf00      	nop
 80171a2:	3708      	adds	r7, #8
 80171a4:	46bd      	mov	sp, r7
 80171a6:	bd80      	pop	{r7, pc}

080171a8 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 80171a8:	b580      	push	{r7, lr}
 80171aa:	b084      	sub	sp, #16
 80171ac:	af00      	add	r7, sp, #0
 80171ae:	6078      	str	r0, [r7, #4]
 80171b0:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 80171b2:	687b      	ldr	r3, [r7, #4]
 80171b4:	681b      	ldr	r3, [r3, #0]
 80171b6:	6839      	ldr	r1, [r7, #0]
 80171b8:	2200      	movs	r2, #0
 80171ba:	4618      	mov	r0, r3
 80171bc:	f7ee ff74 	bl	80060a8 <osMessagePut>
 80171c0:	4603      	mov	r3, r0
 80171c2:	2b00      	cmp	r3, #0
 80171c4:	d102      	bne.n	80171cc <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 80171c6:	2300      	movs	r3, #0
 80171c8:	73fb      	strb	r3, [r7, #15]
 80171ca:	e001      	b.n	80171d0 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 80171cc:	23ff      	movs	r3, #255	; 0xff
 80171ce:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 80171d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80171d4:	4618      	mov	r0, r3
 80171d6:	3710      	adds	r7, #16
 80171d8:	46bd      	mov	sp, r7
 80171da:	bd80      	pop	{r7, pc}

080171dc <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 80171dc:	b580      	push	{r7, lr}
 80171de:	b08c      	sub	sp, #48	; 0x30
 80171e0:	af00      	add	r7, sp, #0
 80171e2:	61f8      	str	r0, [r7, #28]
 80171e4:	61b9      	str	r1, [r7, #24]
 80171e6:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 80171e8:	f7ee fd5e 	bl	8005ca8 <osKernelSysTick>
 80171ec:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 80171ee:	697b      	ldr	r3, [r7, #20]
 80171f0:	2b00      	cmp	r3, #0
 80171f2:	d017      	beq.n	8017224 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 80171f4:	69fb      	ldr	r3, [r7, #28]
 80171f6:	6819      	ldr	r1, [r3, #0]
 80171f8:	f107 0320 	add.w	r3, r7, #32
 80171fc:	697a      	ldr	r2, [r7, #20]
 80171fe:	4618      	mov	r0, r3
 8017200:	f7ee ff92 	bl	8006128 <osMessageGet>

    if(event.status == osEventMessage)
 8017204:	6a3b      	ldr	r3, [r7, #32]
 8017206:	2b10      	cmp	r3, #16
 8017208:	d109      	bne.n	801721e <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 801720a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801720c:	461a      	mov	r2, r3
 801720e:	69bb      	ldr	r3, [r7, #24]
 8017210:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 8017212:	f7ee fd49 	bl	8005ca8 <osKernelSysTick>
 8017216:	4602      	mov	r2, r0
 8017218:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801721a:	1ad3      	subs	r3, r2, r3
 801721c:	e019      	b.n	8017252 <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 801721e:	f04f 33ff 	mov.w	r3, #4294967295
 8017222:	e016      	b.n	8017252 <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 8017224:	69fb      	ldr	r3, [r7, #28]
 8017226:	6819      	ldr	r1, [r3, #0]
 8017228:	463b      	mov	r3, r7
 801722a:	f04f 32ff 	mov.w	r2, #4294967295
 801722e:	4618      	mov	r0, r3
 8017230:	f7ee ff7a 	bl	8006128 <osMessageGet>
 8017234:	f107 0320 	add.w	r3, r7, #32
 8017238:	463a      	mov	r2, r7
 801723a:	ca07      	ldmia	r2, {r0, r1, r2}
 801723c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 8017240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017242:	461a      	mov	r2, r3
 8017244:	69bb      	ldr	r3, [r7, #24]
 8017246:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 8017248:	f7ee fd2e 	bl	8005ca8 <osKernelSysTick>
 801724c:	4602      	mov	r2, r0
 801724e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017250:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8017252:	4618      	mov	r0, r3
 8017254:	3730      	adds	r7, #48	; 0x30
 8017256:	46bd      	mov	sp, r7
 8017258:	bd80      	pop	{r7, pc}

0801725a <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 801725a:	b580      	push	{r7, lr}
 801725c:	b086      	sub	sp, #24
 801725e:	af00      	add	r7, sp, #0
 8017260:	6078      	str	r0, [r7, #4]
 8017262:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osEvent event;

  event = osMessageGet (*mbox, 0);
 8017264:	687b      	ldr	r3, [r7, #4]
 8017266:	6819      	ldr	r1, [r3, #0]
 8017268:	f107 030c 	add.w	r3, r7, #12
 801726c:	2200      	movs	r2, #0
 801726e:	4618      	mov	r0, r3
 8017270:	f7ee ff5a 	bl	8006128 <osMessageGet>

  if(event.status == osEventMessage)
 8017274:	68fb      	ldr	r3, [r7, #12]
 8017276:	2b10      	cmp	r3, #16
 8017278:	d105      	bne.n	8017286 <sys_arch_mbox_tryfetch+0x2c>
  {
    *msg = (void *)event.value.v;
 801727a:	693b      	ldr	r3, [r7, #16]
 801727c:	461a      	mov	r2, r3
 801727e:	683b      	ldr	r3, [r7, #0]
 8017280:	601a      	str	r2, [r3, #0]
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
  {
#endif
    return ERR_OK;
 8017282:	2300      	movs	r3, #0
 8017284:	e001      	b.n	801728a <sys_arch_mbox_tryfetch+0x30>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 8017286:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 801728a:	4618      	mov	r0, r3
 801728c:	3718      	adds	r7, #24
 801728e:	46bd      	mov	sp, r7
 8017290:	bd80      	pop	{r7, pc}

08017292 <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8017292:	b480      	push	{r7}
 8017294:	b083      	sub	sp, #12
 8017296:	af00      	add	r7, sp, #0
 8017298:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 801729a:	687b      	ldr	r3, [r7, #4]
 801729c:	681b      	ldr	r3, [r3, #0]
 801729e:	2b00      	cmp	r3, #0
 80172a0:	d101      	bne.n	80172a6 <sys_mbox_valid+0x14>
    return 0;
 80172a2:	2300      	movs	r3, #0
 80172a4:	e000      	b.n	80172a8 <sys_mbox_valid+0x16>
  else
    return 1;
 80172a6:	2301      	movs	r3, #1
}
 80172a8:	4618      	mov	r0, r3
 80172aa:	370c      	adds	r7, #12
 80172ac:	46bd      	mov	sp, r7
 80172ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80172b2:	4770      	bx	lr

080172b4 <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 80172b4:	b480      	push	{r7}
 80172b6:	b083      	sub	sp, #12
 80172b8:	af00      	add	r7, sp, #0
 80172ba:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 80172bc:	687b      	ldr	r3, [r7, #4]
 80172be:	2200      	movs	r2, #0
 80172c0:	601a      	str	r2, [r3, #0]
}
 80172c2:	bf00      	nop
 80172c4:	370c      	adds	r7, #12
 80172c6:	46bd      	mov	sp, r7
 80172c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80172cc:	4770      	bx	lr

080172ce <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 80172ce:	b580      	push	{r7, lr}
 80172d0:	b084      	sub	sp, #16
 80172d2:	af00      	add	r7, sp, #0
 80172d4:	6078      	str	r0, [r7, #4]
 80172d6:	460b      	mov	r3, r1
 80172d8:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
 80172da:	2300      	movs	r3, #0
 80172dc:	60bb      	str	r3, [r7, #8]
 80172de:	2300      	movs	r3, #0
 80172e0:	60fb      	str	r3, [r7, #12]
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 80172e2:	f107 0308 	add.w	r3, r7, #8
 80172e6:	2101      	movs	r1, #1
 80172e8:	4618      	mov	r0, r3
 80172ea:	f7ee fde9 	bl	8005ec0 <osSemaphoreCreate>
 80172ee:	4602      	mov	r2, r0
 80172f0:	687b      	ldr	r3, [r7, #4]
 80172f2:	601a      	str	r2, [r3, #0]
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
#endif

  if(*sem == NULL)
 80172f4:	687b      	ldr	r3, [r7, #4]
 80172f6:	681b      	ldr	r3, [r3, #0]
 80172f8:	2b00      	cmp	r3, #0
 80172fa:	d102      	bne.n	8017302 <sys_sem_new+0x34>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 80172fc:	f04f 33ff 	mov.w	r3, #4294967295
 8017300:	e009      	b.n	8017316 <sys_sem_new+0x48>
  }

  if(count == 0)	// Means it can't be taken
 8017302:	78fb      	ldrb	r3, [r7, #3]
 8017304:	2b00      	cmp	r3, #0
 8017306:	d105      	bne.n	8017314 <sys_sem_new+0x46>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
 8017308:	687b      	ldr	r3, [r7, #4]
 801730a:	681b      	ldr	r3, [r3, #0]
 801730c:	2100      	movs	r1, #0
 801730e:	4618      	mov	r0, r3
 8017310:	f7ee fe0a 	bl	8005f28 <osSemaphoreWait>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 8017314:	2300      	movs	r3, #0
}
 8017316:	4618      	mov	r0, r3
 8017318:	3710      	adds	r7, #16
 801731a:	46bd      	mov	sp, r7
 801731c:	bd80      	pop	{r7, pc}

0801731e <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 801731e:	b580      	push	{r7, lr}
 8017320:	b084      	sub	sp, #16
 8017322:	af00      	add	r7, sp, #0
 8017324:	6078      	str	r0, [r7, #4]
 8017326:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
 8017328:	f7ee fcbe 	bl	8005ca8 <osKernelSysTick>
 801732c:	60f8      	str	r0, [r7, #12]
#else
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 801732e:	683b      	ldr	r3, [r7, #0]
 8017330:	2b00      	cmp	r3, #0
 8017332:	d011      	beq.n	8017358 <sys_arch_sem_wait+0x3a>
  {
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
 8017334:	687b      	ldr	r3, [r7, #4]
 8017336:	681b      	ldr	r3, [r3, #0]
 8017338:	6839      	ldr	r1, [r7, #0]
 801733a:	4618      	mov	r0, r3
 801733c:	f7ee fdf4 	bl	8005f28 <osSemaphoreWait>
 8017340:	4603      	mov	r3, r0
 8017342:	2b00      	cmp	r3, #0
 8017344:	d105      	bne.n	8017352 <sys_arch_sem_wait+0x34>
    {
      return (osKernelSysTick() - starttime);
 8017346:	f7ee fcaf 	bl	8005ca8 <osKernelSysTick>
 801734a:	4602      	mov	r2, r0
 801734c:	68fb      	ldr	r3, [r7, #12]
 801734e:	1ad3      	subs	r3, r2, r3
 8017350:	e012      	b.n	8017378 <sys_arch_sem_wait+0x5a>
        return (osKernelGetTickCount() - starttime);
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 8017352:	f04f 33ff 	mov.w	r3, #4294967295
 8017356:	e00f      	b.n	8017378 <sys_arch_sem_wait+0x5a>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
 8017358:	bf00      	nop
 801735a:	687b      	ldr	r3, [r7, #4]
 801735c:	681b      	ldr	r3, [r3, #0]
 801735e:	f04f 31ff 	mov.w	r1, #4294967295
 8017362:	4618      	mov	r0, r3
 8017364:	f7ee fde0 	bl	8005f28 <osSemaphoreWait>
 8017368:	4603      	mov	r3, r0
 801736a:	2b00      	cmp	r3, #0
 801736c:	d1f5      	bne.n	801735a <sys_arch_sem_wait+0x3c>
    return (osKernelSysTick() - starttime);
 801736e:	f7ee fc9b 	bl	8005ca8 <osKernelSysTick>
 8017372:	4602      	mov	r2, r0
 8017374:	68fb      	ldr	r3, [r7, #12]
 8017376:	1ad3      	subs	r3, r2, r3
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8017378:	4618      	mov	r0, r3
 801737a:	3710      	adds	r7, #16
 801737c:	46bd      	mov	sp, r7
 801737e:	bd80      	pop	{r7, pc}

08017380 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 8017380:	b580      	push	{r7, lr}
 8017382:	b082      	sub	sp, #8
 8017384:	af00      	add	r7, sp, #0
 8017386:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 8017388:	687b      	ldr	r3, [r7, #4]
 801738a:	681b      	ldr	r3, [r3, #0]
 801738c:	4618      	mov	r0, r3
 801738e:	f7ee fe19 	bl	8005fc4 <osSemaphoreRelease>
}
 8017392:	bf00      	nop
 8017394:	3708      	adds	r7, #8
 8017396:	46bd      	mov	sp, r7
 8017398:	bd80      	pop	{r7, pc}

0801739a <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 801739a:	b580      	push	{r7, lr}
 801739c:	b082      	sub	sp, #8
 801739e:	af00      	add	r7, sp, #0
 80173a0:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 80173a2:	687b      	ldr	r3, [r7, #4]
 80173a4:	681b      	ldr	r3, [r3, #0]
 80173a6:	4618      	mov	r0, r3
 80173a8:	f7ee fe42 	bl	8006030 <osSemaphoreDelete>
}
 80173ac:	bf00      	nop
 80173ae:	3708      	adds	r7, #8
 80173b0:	46bd      	mov	sp, r7
 80173b2:	bd80      	pop	{r7, pc}

080173b4 <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 80173b4:	b480      	push	{r7}
 80173b6:	b083      	sub	sp, #12
 80173b8:	af00      	add	r7, sp, #0
 80173ba:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 80173bc:	687b      	ldr	r3, [r7, #4]
 80173be:	681b      	ldr	r3, [r3, #0]
 80173c0:	2b00      	cmp	r3, #0
 80173c2:	d101      	bne.n	80173c8 <sys_sem_valid+0x14>
    return 0;
 80173c4:	2300      	movs	r3, #0
 80173c6:	e000      	b.n	80173ca <sys_sem_valid+0x16>
  else
    return 1;
 80173c8:	2301      	movs	r3, #1
}
 80173ca:	4618      	mov	r0, r3
 80173cc:	370c      	adds	r7, #12
 80173ce:	46bd      	mov	sp, r7
 80173d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80173d4:	4770      	bx	lr

080173d6 <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 80173d6:	b480      	push	{r7}
 80173d8:	b083      	sub	sp, #12
 80173da:	af00      	add	r7, sp, #0
 80173dc:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 80173de:	687b      	ldr	r3, [r7, #4]
 80173e0:	2200      	movs	r2, #0
 80173e2:	601a      	str	r2, [r3, #0]
}
 80173e4:	bf00      	nop
 80173e6:	370c      	adds	r7, #12
 80173e8:	46bd      	mov	sp, r7
 80173ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80173ee:	4770      	bx	lr

080173f0 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 80173f0:	b580      	push	{r7, lr}
 80173f2:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 80173f4:	4803      	ldr	r0, [pc, #12]	; (8017404 <sys_init+0x14>)
 80173f6:	f7ee fcc7 	bl	8005d88 <osMutexCreate>
 80173fa:	4602      	mov	r2, r0
 80173fc:	4b02      	ldr	r3, [pc, #8]	; (8017408 <sys_init+0x18>)
 80173fe:	601a      	str	r2, [r3, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 8017400:	bf00      	nop
 8017402:	bd80      	pop	{r7, pc}
 8017404:	0801ba50 	.word	0x0801ba50
 8017408:	2000d2a4 	.word	0x2000d2a4

0801740c <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 801740c:	b580      	push	{r7, lr}
 801740e:	b084      	sub	sp, #16
 8017410:	af00      	add	r7, sp, #0
 8017412:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 8017414:	2300      	movs	r3, #0
 8017416:	60bb      	str	r3, [r7, #8]
 8017418:	2300      	movs	r3, #0
 801741a:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 801741c:	f107 0308 	add.w	r3, r7, #8
 8017420:	4618      	mov	r0, r3
 8017422:	f7ee fcb1 	bl	8005d88 <osMutexCreate>
 8017426:	4602      	mov	r2, r0
 8017428:	687b      	ldr	r3, [r7, #4]
 801742a:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 801742c:	687b      	ldr	r3, [r7, #4]
 801742e:	681b      	ldr	r3, [r3, #0]
 8017430:	2b00      	cmp	r3, #0
 8017432:	d102      	bne.n	801743a <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8017434:	f04f 33ff 	mov.w	r3, #4294967295
 8017438:	e000      	b.n	801743c <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 801743a:	2300      	movs	r3, #0
}
 801743c:	4618      	mov	r0, r3
 801743e:	3710      	adds	r7, #16
 8017440:	46bd      	mov	sp, r7
 8017442:	bd80      	pop	{r7, pc}

08017444 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8017444:	b580      	push	{r7, lr}
 8017446:	b082      	sub	sp, #8
 8017448:	af00      	add	r7, sp, #0
 801744a:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 801744c:	687b      	ldr	r3, [r7, #4]
 801744e:	681b      	ldr	r3, [r3, #0]
 8017450:	f04f 31ff 	mov.w	r1, #4294967295
 8017454:	4618      	mov	r0, r3
 8017456:	f7ee fcaf 	bl	8005db8 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 801745a:	bf00      	nop
 801745c:	3708      	adds	r7, #8
 801745e:	46bd      	mov	sp, r7
 8017460:	bd80      	pop	{r7, pc}

08017462 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8017462:	b580      	push	{r7, lr}
 8017464:	b082      	sub	sp, #8
 8017466:	af00      	add	r7, sp, #0
 8017468:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 801746a:	687b      	ldr	r3, [r7, #4]
 801746c:	681b      	ldr	r3, [r3, #0]
 801746e:	4618      	mov	r0, r3
 8017470:	f7ee fcf0 	bl	8005e54 <osMutexRelease>
}
 8017474:	bf00      	nop
 8017476:	3708      	adds	r7, #8
 8017478:	46bd      	mov	sp, r7
 801747a:	bd80      	pop	{r7, pc}

0801747c <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 801747c:	b580      	push	{r7, lr}
 801747e:	b08c      	sub	sp, #48	; 0x30
 8017480:	af00      	add	r7, sp, #0
 8017482:	60f8      	str	r0, [r7, #12]
 8017484:	60b9      	str	r1, [r7, #8]
 8017486:	607a      	str	r2, [r7, #4]
 8017488:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 801748a:	f107 0314 	add.w	r3, r7, #20
 801748e:	2200      	movs	r2, #0
 8017490:	601a      	str	r2, [r3, #0]
 8017492:	605a      	str	r2, [r3, #4]
 8017494:	609a      	str	r2, [r3, #8]
 8017496:	60da      	str	r2, [r3, #12]
 8017498:	611a      	str	r2, [r3, #16]
 801749a:	615a      	str	r2, [r3, #20]
 801749c:	619a      	str	r2, [r3, #24]
 801749e:	68fb      	ldr	r3, [r7, #12]
 80174a0:	617b      	str	r3, [r7, #20]
 80174a2:	68bb      	ldr	r3, [r7, #8]
 80174a4:	61bb      	str	r3, [r7, #24]
 80174a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80174a8:	b21b      	sxth	r3, r3
 80174aa:	83bb      	strh	r3, [r7, #28]
 80174ac:	683b      	ldr	r3, [r7, #0]
 80174ae:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 80174b0:	f107 0314 	add.w	r3, r7, #20
 80174b4:	6879      	ldr	r1, [r7, #4]
 80174b6:	4618      	mov	r0, r3
 80174b8:	f7ee fc06 	bl	8005cc8 <osThreadCreate>
 80174bc:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 80174be:	4618      	mov	r0, r3
 80174c0:	3730      	adds	r7, #48	; 0x30
 80174c2:	46bd      	mov	sp, r7
 80174c4:	bd80      	pop	{r7, pc}
	...

080174c8 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 80174c8:	b580      	push	{r7, lr}
 80174ca:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 80174cc:	4b04      	ldr	r3, [pc, #16]	; (80174e0 <sys_arch_protect+0x18>)
 80174ce:	681b      	ldr	r3, [r3, #0]
 80174d0:	f04f 31ff 	mov.w	r1, #4294967295
 80174d4:	4618      	mov	r0, r3
 80174d6:	f7ee fc6f 	bl	8005db8 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 80174da:	2301      	movs	r3, #1
}
 80174dc:	4618      	mov	r0, r3
 80174de:	bd80      	pop	{r7, pc}
 80174e0:	2000d2a4 	.word	0x2000d2a4

080174e4 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 80174e4:	b580      	push	{r7, lr}
 80174e6:	b082      	sub	sp, #8
 80174e8:	af00      	add	r7, sp, #0
 80174ea:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 80174ec:	4b04      	ldr	r3, [pc, #16]	; (8017500 <sys_arch_unprotect+0x1c>)
 80174ee:	681b      	ldr	r3, [r3, #0]
 80174f0:	4618      	mov	r0, r3
 80174f2:	f7ee fcaf 	bl	8005e54 <osMutexRelease>
}
 80174f6:	bf00      	nop
 80174f8:	3708      	adds	r7, #8
 80174fa:	46bd      	mov	sp, r7
 80174fc:	bd80      	pop	{r7, pc}
 80174fe:	bf00      	nop
 8017500:	2000d2a4 	.word	0x2000d2a4

08017504 <exit>:
 8017504:	b508      	push	{r3, lr}
 8017506:	4b07      	ldr	r3, [pc, #28]	; (8017524 <exit+0x20>)
 8017508:	4604      	mov	r4, r0
 801750a:	b113      	cbz	r3, 8017512 <exit+0xe>
 801750c:	2100      	movs	r1, #0
 801750e:	f3af 8000 	nop.w
 8017512:	4b05      	ldr	r3, [pc, #20]	; (8017528 <exit+0x24>)
 8017514:	6818      	ldr	r0, [r3, #0]
 8017516:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8017518:	b103      	cbz	r3, 801751c <exit+0x18>
 801751a:	4798      	blx	r3
 801751c:	4620      	mov	r0, r4
 801751e:	f7e9 fd37 	bl	8000f90 <_exit>
 8017522:	bf00      	nop
 8017524:	00000000 	.word	0x00000000
 8017528:	0801ba58 	.word	0x0801ba58

0801752c <__libc_init_array>:
 801752c:	b570      	push	{r4, r5, r6, lr}
 801752e:	4e0d      	ldr	r6, [pc, #52]	; (8017564 <__libc_init_array+0x38>)
 8017530:	4c0d      	ldr	r4, [pc, #52]	; (8017568 <__libc_init_array+0x3c>)
 8017532:	1ba4      	subs	r4, r4, r6
 8017534:	10a4      	asrs	r4, r4, #2
 8017536:	2500      	movs	r5, #0
 8017538:	42a5      	cmp	r5, r4
 801753a:	d109      	bne.n	8017550 <__libc_init_array+0x24>
 801753c:	4e0b      	ldr	r6, [pc, #44]	; (801756c <__libc_init_array+0x40>)
 801753e:	4c0c      	ldr	r4, [pc, #48]	; (8017570 <__libc_init_array+0x44>)
 8017540:	f000 ff74 	bl	801842c <_init>
 8017544:	1ba4      	subs	r4, r4, r6
 8017546:	10a4      	asrs	r4, r4, #2
 8017548:	2500      	movs	r5, #0
 801754a:	42a5      	cmp	r5, r4
 801754c:	d105      	bne.n	801755a <__libc_init_array+0x2e>
 801754e:	bd70      	pop	{r4, r5, r6, pc}
 8017550:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8017554:	4798      	blx	r3
 8017556:	3501      	adds	r5, #1
 8017558:	e7ee      	b.n	8017538 <__libc_init_array+0xc>
 801755a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801755e:	4798      	blx	r3
 8017560:	3501      	adds	r5, #1
 8017562:	e7f2      	b.n	801754a <__libc_init_array+0x1e>
 8017564:	0801baf8 	.word	0x0801baf8
 8017568:	0801baf8 	.word	0x0801baf8
 801756c:	0801baf8 	.word	0x0801baf8
 8017570:	0801bafc 	.word	0x0801bafc

08017574 <memcmp>:
 8017574:	b530      	push	{r4, r5, lr}
 8017576:	2400      	movs	r4, #0
 8017578:	42a2      	cmp	r2, r4
 801757a:	d101      	bne.n	8017580 <memcmp+0xc>
 801757c:	2000      	movs	r0, #0
 801757e:	e007      	b.n	8017590 <memcmp+0x1c>
 8017580:	5d03      	ldrb	r3, [r0, r4]
 8017582:	3401      	adds	r4, #1
 8017584:	190d      	adds	r5, r1, r4
 8017586:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 801758a:	42ab      	cmp	r3, r5
 801758c:	d0f4      	beq.n	8017578 <memcmp+0x4>
 801758e:	1b58      	subs	r0, r3, r5
 8017590:	bd30      	pop	{r4, r5, pc}

08017592 <memcpy>:
 8017592:	b510      	push	{r4, lr}
 8017594:	1e43      	subs	r3, r0, #1
 8017596:	440a      	add	r2, r1
 8017598:	4291      	cmp	r1, r2
 801759a:	d100      	bne.n	801759e <memcpy+0xc>
 801759c:	bd10      	pop	{r4, pc}
 801759e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80175a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80175a6:	e7f7      	b.n	8017598 <memcpy+0x6>

080175a8 <memset>:
 80175a8:	4402      	add	r2, r0
 80175aa:	4603      	mov	r3, r0
 80175ac:	4293      	cmp	r3, r2
 80175ae:	d100      	bne.n	80175b2 <memset+0xa>
 80175b0:	4770      	bx	lr
 80175b2:	f803 1b01 	strb.w	r1, [r3], #1
 80175b6:	e7f9      	b.n	80175ac <memset+0x4>

080175b8 <iprintf>:
 80175b8:	b40f      	push	{r0, r1, r2, r3}
 80175ba:	4b0a      	ldr	r3, [pc, #40]	; (80175e4 <iprintf+0x2c>)
 80175bc:	b513      	push	{r0, r1, r4, lr}
 80175be:	681c      	ldr	r4, [r3, #0]
 80175c0:	b124      	cbz	r4, 80175cc <iprintf+0x14>
 80175c2:	69a3      	ldr	r3, [r4, #24]
 80175c4:	b913      	cbnz	r3, 80175cc <iprintf+0x14>
 80175c6:	4620      	mov	r0, r4
 80175c8:	f000 f89c 	bl	8017704 <__sinit>
 80175cc:	ab05      	add	r3, sp, #20
 80175ce:	9a04      	ldr	r2, [sp, #16]
 80175d0:	68a1      	ldr	r1, [r4, #8]
 80175d2:	9301      	str	r3, [sp, #4]
 80175d4:	4620      	mov	r0, r4
 80175d6:	f000 f9f9 	bl	80179cc <_vfiprintf_r>
 80175da:	b002      	add	sp, #8
 80175dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80175e0:	b004      	add	sp, #16
 80175e2:	4770      	bx	lr
 80175e4:	20000018 	.word	0x20000018

080175e8 <rand>:
 80175e8:	b538      	push	{r3, r4, r5, lr}
 80175ea:	4b13      	ldr	r3, [pc, #76]	; (8017638 <rand+0x50>)
 80175ec:	681c      	ldr	r4, [r3, #0]
 80175ee:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80175f0:	b97b      	cbnz	r3, 8017612 <rand+0x2a>
 80175f2:	2018      	movs	r0, #24
 80175f4:	f000 f910 	bl	8017818 <malloc>
 80175f8:	4a10      	ldr	r2, [pc, #64]	; (801763c <rand+0x54>)
 80175fa:	4b11      	ldr	r3, [pc, #68]	; (8017640 <rand+0x58>)
 80175fc:	63a0      	str	r0, [r4, #56]	; 0x38
 80175fe:	e9c0 2300 	strd	r2, r3, [r0]
 8017602:	4b10      	ldr	r3, [pc, #64]	; (8017644 <rand+0x5c>)
 8017604:	6083      	str	r3, [r0, #8]
 8017606:	230b      	movs	r3, #11
 8017608:	8183      	strh	r3, [r0, #12]
 801760a:	2201      	movs	r2, #1
 801760c:	2300      	movs	r3, #0
 801760e:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8017612:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8017614:	480c      	ldr	r0, [pc, #48]	; (8017648 <rand+0x60>)
 8017616:	690a      	ldr	r2, [r1, #16]
 8017618:	694b      	ldr	r3, [r1, #20]
 801761a:	4c0c      	ldr	r4, [pc, #48]	; (801764c <rand+0x64>)
 801761c:	4350      	muls	r0, r2
 801761e:	fb04 0003 	mla	r0, r4, r3, r0
 8017622:	fba2 2304 	umull	r2, r3, r2, r4
 8017626:	4403      	add	r3, r0
 8017628:	1c54      	adds	r4, r2, #1
 801762a:	f143 0500 	adc.w	r5, r3, #0
 801762e:	e9c1 4504 	strd	r4, r5, [r1, #16]
 8017632:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 8017636:	bd38      	pop	{r3, r4, r5, pc}
 8017638:	20000018 	.word	0x20000018
 801763c:	abcd330e 	.word	0xabcd330e
 8017640:	e66d1234 	.word	0xe66d1234
 8017644:	0005deec 	.word	0x0005deec
 8017648:	5851f42d 	.word	0x5851f42d
 801764c:	4c957f2d 	.word	0x4c957f2d

08017650 <strcpy>:
 8017650:	4603      	mov	r3, r0
 8017652:	f811 2b01 	ldrb.w	r2, [r1], #1
 8017656:	f803 2b01 	strb.w	r2, [r3], #1
 801765a:	2a00      	cmp	r2, #0
 801765c:	d1f9      	bne.n	8017652 <strcpy+0x2>
 801765e:	4770      	bx	lr

08017660 <strncmp>:
 8017660:	b510      	push	{r4, lr}
 8017662:	b16a      	cbz	r2, 8017680 <strncmp+0x20>
 8017664:	3901      	subs	r1, #1
 8017666:	1884      	adds	r4, r0, r2
 8017668:	f810 3b01 	ldrb.w	r3, [r0], #1
 801766c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8017670:	4293      	cmp	r3, r2
 8017672:	d103      	bne.n	801767c <strncmp+0x1c>
 8017674:	42a0      	cmp	r0, r4
 8017676:	d001      	beq.n	801767c <strncmp+0x1c>
 8017678:	2b00      	cmp	r3, #0
 801767a:	d1f5      	bne.n	8017668 <strncmp+0x8>
 801767c:	1a98      	subs	r0, r3, r2
 801767e:	bd10      	pop	{r4, pc}
 8017680:	4610      	mov	r0, r2
 8017682:	e7fc      	b.n	801767e <strncmp+0x1e>

08017684 <std>:
 8017684:	2300      	movs	r3, #0
 8017686:	b510      	push	{r4, lr}
 8017688:	4604      	mov	r4, r0
 801768a:	e9c0 3300 	strd	r3, r3, [r0]
 801768e:	6083      	str	r3, [r0, #8]
 8017690:	8181      	strh	r1, [r0, #12]
 8017692:	6643      	str	r3, [r0, #100]	; 0x64
 8017694:	81c2      	strh	r2, [r0, #14]
 8017696:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801769a:	6183      	str	r3, [r0, #24]
 801769c:	4619      	mov	r1, r3
 801769e:	2208      	movs	r2, #8
 80176a0:	305c      	adds	r0, #92	; 0x5c
 80176a2:	f7ff ff81 	bl	80175a8 <memset>
 80176a6:	4b05      	ldr	r3, [pc, #20]	; (80176bc <std+0x38>)
 80176a8:	6263      	str	r3, [r4, #36]	; 0x24
 80176aa:	4b05      	ldr	r3, [pc, #20]	; (80176c0 <std+0x3c>)
 80176ac:	62a3      	str	r3, [r4, #40]	; 0x28
 80176ae:	4b05      	ldr	r3, [pc, #20]	; (80176c4 <std+0x40>)
 80176b0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80176b2:	4b05      	ldr	r3, [pc, #20]	; (80176c8 <std+0x44>)
 80176b4:	6224      	str	r4, [r4, #32]
 80176b6:	6323      	str	r3, [r4, #48]	; 0x30
 80176b8:	bd10      	pop	{r4, pc}
 80176ba:	bf00      	nop
 80176bc:	08017f29 	.word	0x08017f29
 80176c0:	08017f4b 	.word	0x08017f4b
 80176c4:	08017f83 	.word	0x08017f83
 80176c8:	08017fa7 	.word	0x08017fa7

080176cc <_cleanup_r>:
 80176cc:	4901      	ldr	r1, [pc, #4]	; (80176d4 <_cleanup_r+0x8>)
 80176ce:	f000 b885 	b.w	80177dc <_fwalk_reent>
 80176d2:	bf00      	nop
 80176d4:	08018281 	.word	0x08018281

080176d8 <__sfmoreglue>:
 80176d8:	b570      	push	{r4, r5, r6, lr}
 80176da:	1e4a      	subs	r2, r1, #1
 80176dc:	2568      	movs	r5, #104	; 0x68
 80176de:	4355      	muls	r5, r2
 80176e0:	460e      	mov	r6, r1
 80176e2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80176e6:	f000 f8ed 	bl	80178c4 <_malloc_r>
 80176ea:	4604      	mov	r4, r0
 80176ec:	b140      	cbz	r0, 8017700 <__sfmoreglue+0x28>
 80176ee:	2100      	movs	r1, #0
 80176f0:	e9c0 1600 	strd	r1, r6, [r0]
 80176f4:	300c      	adds	r0, #12
 80176f6:	60a0      	str	r0, [r4, #8]
 80176f8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80176fc:	f7ff ff54 	bl	80175a8 <memset>
 8017700:	4620      	mov	r0, r4
 8017702:	bd70      	pop	{r4, r5, r6, pc}

08017704 <__sinit>:
 8017704:	6983      	ldr	r3, [r0, #24]
 8017706:	b510      	push	{r4, lr}
 8017708:	4604      	mov	r4, r0
 801770a:	bb33      	cbnz	r3, 801775a <__sinit+0x56>
 801770c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8017710:	6503      	str	r3, [r0, #80]	; 0x50
 8017712:	4b12      	ldr	r3, [pc, #72]	; (801775c <__sinit+0x58>)
 8017714:	4a12      	ldr	r2, [pc, #72]	; (8017760 <__sinit+0x5c>)
 8017716:	681b      	ldr	r3, [r3, #0]
 8017718:	6282      	str	r2, [r0, #40]	; 0x28
 801771a:	4298      	cmp	r0, r3
 801771c:	bf04      	itt	eq
 801771e:	2301      	moveq	r3, #1
 8017720:	6183      	streq	r3, [r0, #24]
 8017722:	f000 f81f 	bl	8017764 <__sfp>
 8017726:	6060      	str	r0, [r4, #4]
 8017728:	4620      	mov	r0, r4
 801772a:	f000 f81b 	bl	8017764 <__sfp>
 801772e:	60a0      	str	r0, [r4, #8]
 8017730:	4620      	mov	r0, r4
 8017732:	f000 f817 	bl	8017764 <__sfp>
 8017736:	2200      	movs	r2, #0
 8017738:	60e0      	str	r0, [r4, #12]
 801773a:	2104      	movs	r1, #4
 801773c:	6860      	ldr	r0, [r4, #4]
 801773e:	f7ff ffa1 	bl	8017684 <std>
 8017742:	2201      	movs	r2, #1
 8017744:	2109      	movs	r1, #9
 8017746:	68a0      	ldr	r0, [r4, #8]
 8017748:	f7ff ff9c 	bl	8017684 <std>
 801774c:	2202      	movs	r2, #2
 801774e:	2112      	movs	r1, #18
 8017750:	68e0      	ldr	r0, [r4, #12]
 8017752:	f7ff ff97 	bl	8017684 <std>
 8017756:	2301      	movs	r3, #1
 8017758:	61a3      	str	r3, [r4, #24]
 801775a:	bd10      	pop	{r4, pc}
 801775c:	0801ba58 	.word	0x0801ba58
 8017760:	080176cd 	.word	0x080176cd

08017764 <__sfp>:
 8017764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017766:	4b1b      	ldr	r3, [pc, #108]	; (80177d4 <__sfp+0x70>)
 8017768:	681e      	ldr	r6, [r3, #0]
 801776a:	69b3      	ldr	r3, [r6, #24]
 801776c:	4607      	mov	r7, r0
 801776e:	b913      	cbnz	r3, 8017776 <__sfp+0x12>
 8017770:	4630      	mov	r0, r6
 8017772:	f7ff ffc7 	bl	8017704 <__sinit>
 8017776:	3648      	adds	r6, #72	; 0x48
 8017778:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801777c:	3b01      	subs	r3, #1
 801777e:	d503      	bpl.n	8017788 <__sfp+0x24>
 8017780:	6833      	ldr	r3, [r6, #0]
 8017782:	b133      	cbz	r3, 8017792 <__sfp+0x2e>
 8017784:	6836      	ldr	r6, [r6, #0]
 8017786:	e7f7      	b.n	8017778 <__sfp+0x14>
 8017788:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801778c:	b16d      	cbz	r5, 80177aa <__sfp+0x46>
 801778e:	3468      	adds	r4, #104	; 0x68
 8017790:	e7f4      	b.n	801777c <__sfp+0x18>
 8017792:	2104      	movs	r1, #4
 8017794:	4638      	mov	r0, r7
 8017796:	f7ff ff9f 	bl	80176d8 <__sfmoreglue>
 801779a:	6030      	str	r0, [r6, #0]
 801779c:	2800      	cmp	r0, #0
 801779e:	d1f1      	bne.n	8017784 <__sfp+0x20>
 80177a0:	230c      	movs	r3, #12
 80177a2:	603b      	str	r3, [r7, #0]
 80177a4:	4604      	mov	r4, r0
 80177a6:	4620      	mov	r0, r4
 80177a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80177aa:	4b0b      	ldr	r3, [pc, #44]	; (80177d8 <__sfp+0x74>)
 80177ac:	6665      	str	r5, [r4, #100]	; 0x64
 80177ae:	e9c4 5500 	strd	r5, r5, [r4]
 80177b2:	60a5      	str	r5, [r4, #8]
 80177b4:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80177b8:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80177bc:	2208      	movs	r2, #8
 80177be:	4629      	mov	r1, r5
 80177c0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80177c4:	f7ff fef0 	bl	80175a8 <memset>
 80177c8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80177cc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80177d0:	e7e9      	b.n	80177a6 <__sfp+0x42>
 80177d2:	bf00      	nop
 80177d4:	0801ba58 	.word	0x0801ba58
 80177d8:	ffff0001 	.word	0xffff0001

080177dc <_fwalk_reent>:
 80177dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80177e0:	4680      	mov	r8, r0
 80177e2:	4689      	mov	r9, r1
 80177e4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80177e8:	2600      	movs	r6, #0
 80177ea:	b914      	cbnz	r4, 80177f2 <_fwalk_reent+0x16>
 80177ec:	4630      	mov	r0, r6
 80177ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80177f2:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80177f6:	3f01      	subs	r7, #1
 80177f8:	d501      	bpl.n	80177fe <_fwalk_reent+0x22>
 80177fa:	6824      	ldr	r4, [r4, #0]
 80177fc:	e7f5      	b.n	80177ea <_fwalk_reent+0xe>
 80177fe:	89ab      	ldrh	r3, [r5, #12]
 8017800:	2b01      	cmp	r3, #1
 8017802:	d907      	bls.n	8017814 <_fwalk_reent+0x38>
 8017804:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8017808:	3301      	adds	r3, #1
 801780a:	d003      	beq.n	8017814 <_fwalk_reent+0x38>
 801780c:	4629      	mov	r1, r5
 801780e:	4640      	mov	r0, r8
 8017810:	47c8      	blx	r9
 8017812:	4306      	orrs	r6, r0
 8017814:	3568      	adds	r5, #104	; 0x68
 8017816:	e7ee      	b.n	80177f6 <_fwalk_reent+0x1a>

08017818 <malloc>:
 8017818:	4b02      	ldr	r3, [pc, #8]	; (8017824 <malloc+0xc>)
 801781a:	4601      	mov	r1, r0
 801781c:	6818      	ldr	r0, [r3, #0]
 801781e:	f000 b851 	b.w	80178c4 <_malloc_r>
 8017822:	bf00      	nop
 8017824:	20000018 	.word	0x20000018

08017828 <_free_r>:
 8017828:	b538      	push	{r3, r4, r5, lr}
 801782a:	4605      	mov	r5, r0
 801782c:	2900      	cmp	r1, #0
 801782e:	d045      	beq.n	80178bc <_free_r+0x94>
 8017830:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017834:	1f0c      	subs	r4, r1, #4
 8017836:	2b00      	cmp	r3, #0
 8017838:	bfb8      	it	lt
 801783a:	18e4      	addlt	r4, r4, r3
 801783c:	f000 fdc0 	bl	80183c0 <__malloc_lock>
 8017840:	4a1f      	ldr	r2, [pc, #124]	; (80178c0 <_free_r+0x98>)
 8017842:	6813      	ldr	r3, [r2, #0]
 8017844:	4610      	mov	r0, r2
 8017846:	b933      	cbnz	r3, 8017856 <_free_r+0x2e>
 8017848:	6063      	str	r3, [r4, #4]
 801784a:	6014      	str	r4, [r2, #0]
 801784c:	4628      	mov	r0, r5
 801784e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017852:	f000 bdb6 	b.w	80183c2 <__malloc_unlock>
 8017856:	42a3      	cmp	r3, r4
 8017858:	d90c      	bls.n	8017874 <_free_r+0x4c>
 801785a:	6821      	ldr	r1, [r4, #0]
 801785c:	1862      	adds	r2, r4, r1
 801785e:	4293      	cmp	r3, r2
 8017860:	bf04      	itt	eq
 8017862:	681a      	ldreq	r2, [r3, #0]
 8017864:	685b      	ldreq	r3, [r3, #4]
 8017866:	6063      	str	r3, [r4, #4]
 8017868:	bf04      	itt	eq
 801786a:	1852      	addeq	r2, r2, r1
 801786c:	6022      	streq	r2, [r4, #0]
 801786e:	6004      	str	r4, [r0, #0]
 8017870:	e7ec      	b.n	801784c <_free_r+0x24>
 8017872:	4613      	mov	r3, r2
 8017874:	685a      	ldr	r2, [r3, #4]
 8017876:	b10a      	cbz	r2, 801787c <_free_r+0x54>
 8017878:	42a2      	cmp	r2, r4
 801787a:	d9fa      	bls.n	8017872 <_free_r+0x4a>
 801787c:	6819      	ldr	r1, [r3, #0]
 801787e:	1858      	adds	r0, r3, r1
 8017880:	42a0      	cmp	r0, r4
 8017882:	d10b      	bne.n	801789c <_free_r+0x74>
 8017884:	6820      	ldr	r0, [r4, #0]
 8017886:	4401      	add	r1, r0
 8017888:	1858      	adds	r0, r3, r1
 801788a:	4282      	cmp	r2, r0
 801788c:	6019      	str	r1, [r3, #0]
 801788e:	d1dd      	bne.n	801784c <_free_r+0x24>
 8017890:	6810      	ldr	r0, [r2, #0]
 8017892:	6852      	ldr	r2, [r2, #4]
 8017894:	605a      	str	r2, [r3, #4]
 8017896:	4401      	add	r1, r0
 8017898:	6019      	str	r1, [r3, #0]
 801789a:	e7d7      	b.n	801784c <_free_r+0x24>
 801789c:	d902      	bls.n	80178a4 <_free_r+0x7c>
 801789e:	230c      	movs	r3, #12
 80178a0:	602b      	str	r3, [r5, #0]
 80178a2:	e7d3      	b.n	801784c <_free_r+0x24>
 80178a4:	6820      	ldr	r0, [r4, #0]
 80178a6:	1821      	adds	r1, r4, r0
 80178a8:	428a      	cmp	r2, r1
 80178aa:	bf04      	itt	eq
 80178ac:	6811      	ldreq	r1, [r2, #0]
 80178ae:	6852      	ldreq	r2, [r2, #4]
 80178b0:	6062      	str	r2, [r4, #4]
 80178b2:	bf04      	itt	eq
 80178b4:	1809      	addeq	r1, r1, r0
 80178b6:	6021      	streq	r1, [r4, #0]
 80178b8:	605c      	str	r4, [r3, #4]
 80178ba:	e7c7      	b.n	801784c <_free_r+0x24>
 80178bc:	bd38      	pop	{r3, r4, r5, pc}
 80178be:	bf00      	nop
 80178c0:	20004784 	.word	0x20004784

080178c4 <_malloc_r>:
 80178c4:	b570      	push	{r4, r5, r6, lr}
 80178c6:	1ccd      	adds	r5, r1, #3
 80178c8:	f025 0503 	bic.w	r5, r5, #3
 80178cc:	3508      	adds	r5, #8
 80178ce:	2d0c      	cmp	r5, #12
 80178d0:	bf38      	it	cc
 80178d2:	250c      	movcc	r5, #12
 80178d4:	2d00      	cmp	r5, #0
 80178d6:	4606      	mov	r6, r0
 80178d8:	db01      	blt.n	80178de <_malloc_r+0x1a>
 80178da:	42a9      	cmp	r1, r5
 80178dc:	d903      	bls.n	80178e6 <_malloc_r+0x22>
 80178de:	230c      	movs	r3, #12
 80178e0:	6033      	str	r3, [r6, #0]
 80178e2:	2000      	movs	r0, #0
 80178e4:	bd70      	pop	{r4, r5, r6, pc}
 80178e6:	f000 fd6b 	bl	80183c0 <__malloc_lock>
 80178ea:	4a21      	ldr	r2, [pc, #132]	; (8017970 <_malloc_r+0xac>)
 80178ec:	6814      	ldr	r4, [r2, #0]
 80178ee:	4621      	mov	r1, r4
 80178f0:	b991      	cbnz	r1, 8017918 <_malloc_r+0x54>
 80178f2:	4c20      	ldr	r4, [pc, #128]	; (8017974 <_malloc_r+0xb0>)
 80178f4:	6823      	ldr	r3, [r4, #0]
 80178f6:	b91b      	cbnz	r3, 8017900 <_malloc_r+0x3c>
 80178f8:	4630      	mov	r0, r6
 80178fa:	f000 fb05 	bl	8017f08 <_sbrk_r>
 80178fe:	6020      	str	r0, [r4, #0]
 8017900:	4629      	mov	r1, r5
 8017902:	4630      	mov	r0, r6
 8017904:	f000 fb00 	bl	8017f08 <_sbrk_r>
 8017908:	1c43      	adds	r3, r0, #1
 801790a:	d124      	bne.n	8017956 <_malloc_r+0x92>
 801790c:	230c      	movs	r3, #12
 801790e:	6033      	str	r3, [r6, #0]
 8017910:	4630      	mov	r0, r6
 8017912:	f000 fd56 	bl	80183c2 <__malloc_unlock>
 8017916:	e7e4      	b.n	80178e2 <_malloc_r+0x1e>
 8017918:	680b      	ldr	r3, [r1, #0]
 801791a:	1b5b      	subs	r3, r3, r5
 801791c:	d418      	bmi.n	8017950 <_malloc_r+0x8c>
 801791e:	2b0b      	cmp	r3, #11
 8017920:	d90f      	bls.n	8017942 <_malloc_r+0x7e>
 8017922:	600b      	str	r3, [r1, #0]
 8017924:	50cd      	str	r5, [r1, r3]
 8017926:	18cc      	adds	r4, r1, r3
 8017928:	4630      	mov	r0, r6
 801792a:	f000 fd4a 	bl	80183c2 <__malloc_unlock>
 801792e:	f104 000b 	add.w	r0, r4, #11
 8017932:	1d23      	adds	r3, r4, #4
 8017934:	f020 0007 	bic.w	r0, r0, #7
 8017938:	1ac3      	subs	r3, r0, r3
 801793a:	d0d3      	beq.n	80178e4 <_malloc_r+0x20>
 801793c:	425a      	negs	r2, r3
 801793e:	50e2      	str	r2, [r4, r3]
 8017940:	e7d0      	b.n	80178e4 <_malloc_r+0x20>
 8017942:	428c      	cmp	r4, r1
 8017944:	684b      	ldr	r3, [r1, #4]
 8017946:	bf16      	itet	ne
 8017948:	6063      	strne	r3, [r4, #4]
 801794a:	6013      	streq	r3, [r2, #0]
 801794c:	460c      	movne	r4, r1
 801794e:	e7eb      	b.n	8017928 <_malloc_r+0x64>
 8017950:	460c      	mov	r4, r1
 8017952:	6849      	ldr	r1, [r1, #4]
 8017954:	e7cc      	b.n	80178f0 <_malloc_r+0x2c>
 8017956:	1cc4      	adds	r4, r0, #3
 8017958:	f024 0403 	bic.w	r4, r4, #3
 801795c:	42a0      	cmp	r0, r4
 801795e:	d005      	beq.n	801796c <_malloc_r+0xa8>
 8017960:	1a21      	subs	r1, r4, r0
 8017962:	4630      	mov	r0, r6
 8017964:	f000 fad0 	bl	8017f08 <_sbrk_r>
 8017968:	3001      	adds	r0, #1
 801796a:	d0cf      	beq.n	801790c <_malloc_r+0x48>
 801796c:	6025      	str	r5, [r4, #0]
 801796e:	e7db      	b.n	8017928 <_malloc_r+0x64>
 8017970:	20004784 	.word	0x20004784
 8017974:	20004788 	.word	0x20004788

08017978 <__sfputc_r>:
 8017978:	6893      	ldr	r3, [r2, #8]
 801797a:	3b01      	subs	r3, #1
 801797c:	2b00      	cmp	r3, #0
 801797e:	b410      	push	{r4}
 8017980:	6093      	str	r3, [r2, #8]
 8017982:	da08      	bge.n	8017996 <__sfputc_r+0x1e>
 8017984:	6994      	ldr	r4, [r2, #24]
 8017986:	42a3      	cmp	r3, r4
 8017988:	db01      	blt.n	801798e <__sfputc_r+0x16>
 801798a:	290a      	cmp	r1, #10
 801798c:	d103      	bne.n	8017996 <__sfputc_r+0x1e>
 801798e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017992:	f000 bb0d 	b.w	8017fb0 <__swbuf_r>
 8017996:	6813      	ldr	r3, [r2, #0]
 8017998:	1c58      	adds	r0, r3, #1
 801799a:	6010      	str	r0, [r2, #0]
 801799c:	7019      	strb	r1, [r3, #0]
 801799e:	4608      	mov	r0, r1
 80179a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80179a4:	4770      	bx	lr

080179a6 <__sfputs_r>:
 80179a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80179a8:	4606      	mov	r6, r0
 80179aa:	460f      	mov	r7, r1
 80179ac:	4614      	mov	r4, r2
 80179ae:	18d5      	adds	r5, r2, r3
 80179b0:	42ac      	cmp	r4, r5
 80179b2:	d101      	bne.n	80179b8 <__sfputs_r+0x12>
 80179b4:	2000      	movs	r0, #0
 80179b6:	e007      	b.n	80179c8 <__sfputs_r+0x22>
 80179b8:	463a      	mov	r2, r7
 80179ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80179be:	4630      	mov	r0, r6
 80179c0:	f7ff ffda 	bl	8017978 <__sfputc_r>
 80179c4:	1c43      	adds	r3, r0, #1
 80179c6:	d1f3      	bne.n	80179b0 <__sfputs_r+0xa>
 80179c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080179cc <_vfiprintf_r>:
 80179cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80179d0:	460c      	mov	r4, r1
 80179d2:	b09d      	sub	sp, #116	; 0x74
 80179d4:	4617      	mov	r7, r2
 80179d6:	461d      	mov	r5, r3
 80179d8:	4606      	mov	r6, r0
 80179da:	b118      	cbz	r0, 80179e4 <_vfiprintf_r+0x18>
 80179dc:	6983      	ldr	r3, [r0, #24]
 80179de:	b90b      	cbnz	r3, 80179e4 <_vfiprintf_r+0x18>
 80179e0:	f7ff fe90 	bl	8017704 <__sinit>
 80179e4:	4b7c      	ldr	r3, [pc, #496]	; (8017bd8 <_vfiprintf_r+0x20c>)
 80179e6:	429c      	cmp	r4, r3
 80179e8:	d158      	bne.n	8017a9c <_vfiprintf_r+0xd0>
 80179ea:	6874      	ldr	r4, [r6, #4]
 80179ec:	89a3      	ldrh	r3, [r4, #12]
 80179ee:	0718      	lsls	r0, r3, #28
 80179f0:	d55e      	bpl.n	8017ab0 <_vfiprintf_r+0xe4>
 80179f2:	6923      	ldr	r3, [r4, #16]
 80179f4:	2b00      	cmp	r3, #0
 80179f6:	d05b      	beq.n	8017ab0 <_vfiprintf_r+0xe4>
 80179f8:	2300      	movs	r3, #0
 80179fa:	9309      	str	r3, [sp, #36]	; 0x24
 80179fc:	2320      	movs	r3, #32
 80179fe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8017a02:	2330      	movs	r3, #48	; 0x30
 8017a04:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8017a08:	9503      	str	r5, [sp, #12]
 8017a0a:	f04f 0b01 	mov.w	fp, #1
 8017a0e:	46b8      	mov	r8, r7
 8017a10:	4645      	mov	r5, r8
 8017a12:	f815 3b01 	ldrb.w	r3, [r5], #1
 8017a16:	b10b      	cbz	r3, 8017a1c <_vfiprintf_r+0x50>
 8017a18:	2b25      	cmp	r3, #37	; 0x25
 8017a1a:	d154      	bne.n	8017ac6 <_vfiprintf_r+0xfa>
 8017a1c:	ebb8 0a07 	subs.w	sl, r8, r7
 8017a20:	d00b      	beq.n	8017a3a <_vfiprintf_r+0x6e>
 8017a22:	4653      	mov	r3, sl
 8017a24:	463a      	mov	r2, r7
 8017a26:	4621      	mov	r1, r4
 8017a28:	4630      	mov	r0, r6
 8017a2a:	f7ff ffbc 	bl	80179a6 <__sfputs_r>
 8017a2e:	3001      	adds	r0, #1
 8017a30:	f000 80c2 	beq.w	8017bb8 <_vfiprintf_r+0x1ec>
 8017a34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017a36:	4453      	add	r3, sl
 8017a38:	9309      	str	r3, [sp, #36]	; 0x24
 8017a3a:	f898 3000 	ldrb.w	r3, [r8]
 8017a3e:	2b00      	cmp	r3, #0
 8017a40:	f000 80ba 	beq.w	8017bb8 <_vfiprintf_r+0x1ec>
 8017a44:	2300      	movs	r3, #0
 8017a46:	f04f 32ff 	mov.w	r2, #4294967295
 8017a4a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017a4e:	9304      	str	r3, [sp, #16]
 8017a50:	9307      	str	r3, [sp, #28]
 8017a52:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8017a56:	931a      	str	r3, [sp, #104]	; 0x68
 8017a58:	46a8      	mov	r8, r5
 8017a5a:	2205      	movs	r2, #5
 8017a5c:	f818 1b01 	ldrb.w	r1, [r8], #1
 8017a60:	485e      	ldr	r0, [pc, #376]	; (8017bdc <_vfiprintf_r+0x210>)
 8017a62:	f7e8 fc05 	bl	8000270 <memchr>
 8017a66:	9b04      	ldr	r3, [sp, #16]
 8017a68:	bb78      	cbnz	r0, 8017aca <_vfiprintf_r+0xfe>
 8017a6a:	06d9      	lsls	r1, r3, #27
 8017a6c:	bf44      	itt	mi
 8017a6e:	2220      	movmi	r2, #32
 8017a70:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8017a74:	071a      	lsls	r2, r3, #28
 8017a76:	bf44      	itt	mi
 8017a78:	222b      	movmi	r2, #43	; 0x2b
 8017a7a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8017a7e:	782a      	ldrb	r2, [r5, #0]
 8017a80:	2a2a      	cmp	r2, #42	; 0x2a
 8017a82:	d02a      	beq.n	8017ada <_vfiprintf_r+0x10e>
 8017a84:	9a07      	ldr	r2, [sp, #28]
 8017a86:	46a8      	mov	r8, r5
 8017a88:	2000      	movs	r0, #0
 8017a8a:	250a      	movs	r5, #10
 8017a8c:	4641      	mov	r1, r8
 8017a8e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017a92:	3b30      	subs	r3, #48	; 0x30
 8017a94:	2b09      	cmp	r3, #9
 8017a96:	d969      	bls.n	8017b6c <_vfiprintf_r+0x1a0>
 8017a98:	b360      	cbz	r0, 8017af4 <_vfiprintf_r+0x128>
 8017a9a:	e024      	b.n	8017ae6 <_vfiprintf_r+0x11a>
 8017a9c:	4b50      	ldr	r3, [pc, #320]	; (8017be0 <_vfiprintf_r+0x214>)
 8017a9e:	429c      	cmp	r4, r3
 8017aa0:	d101      	bne.n	8017aa6 <_vfiprintf_r+0xda>
 8017aa2:	68b4      	ldr	r4, [r6, #8]
 8017aa4:	e7a2      	b.n	80179ec <_vfiprintf_r+0x20>
 8017aa6:	4b4f      	ldr	r3, [pc, #316]	; (8017be4 <_vfiprintf_r+0x218>)
 8017aa8:	429c      	cmp	r4, r3
 8017aaa:	bf08      	it	eq
 8017aac:	68f4      	ldreq	r4, [r6, #12]
 8017aae:	e79d      	b.n	80179ec <_vfiprintf_r+0x20>
 8017ab0:	4621      	mov	r1, r4
 8017ab2:	4630      	mov	r0, r6
 8017ab4:	f000 fae0 	bl	8018078 <__swsetup_r>
 8017ab8:	2800      	cmp	r0, #0
 8017aba:	d09d      	beq.n	80179f8 <_vfiprintf_r+0x2c>
 8017abc:	f04f 30ff 	mov.w	r0, #4294967295
 8017ac0:	b01d      	add	sp, #116	; 0x74
 8017ac2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017ac6:	46a8      	mov	r8, r5
 8017ac8:	e7a2      	b.n	8017a10 <_vfiprintf_r+0x44>
 8017aca:	4a44      	ldr	r2, [pc, #272]	; (8017bdc <_vfiprintf_r+0x210>)
 8017acc:	1a80      	subs	r0, r0, r2
 8017ace:	fa0b f000 	lsl.w	r0, fp, r0
 8017ad2:	4318      	orrs	r0, r3
 8017ad4:	9004      	str	r0, [sp, #16]
 8017ad6:	4645      	mov	r5, r8
 8017ad8:	e7be      	b.n	8017a58 <_vfiprintf_r+0x8c>
 8017ada:	9a03      	ldr	r2, [sp, #12]
 8017adc:	1d11      	adds	r1, r2, #4
 8017ade:	6812      	ldr	r2, [r2, #0]
 8017ae0:	9103      	str	r1, [sp, #12]
 8017ae2:	2a00      	cmp	r2, #0
 8017ae4:	db01      	blt.n	8017aea <_vfiprintf_r+0x11e>
 8017ae6:	9207      	str	r2, [sp, #28]
 8017ae8:	e004      	b.n	8017af4 <_vfiprintf_r+0x128>
 8017aea:	4252      	negs	r2, r2
 8017aec:	f043 0302 	orr.w	r3, r3, #2
 8017af0:	9207      	str	r2, [sp, #28]
 8017af2:	9304      	str	r3, [sp, #16]
 8017af4:	f898 3000 	ldrb.w	r3, [r8]
 8017af8:	2b2e      	cmp	r3, #46	; 0x2e
 8017afa:	d10e      	bne.n	8017b1a <_vfiprintf_r+0x14e>
 8017afc:	f898 3001 	ldrb.w	r3, [r8, #1]
 8017b00:	2b2a      	cmp	r3, #42	; 0x2a
 8017b02:	d138      	bne.n	8017b76 <_vfiprintf_r+0x1aa>
 8017b04:	9b03      	ldr	r3, [sp, #12]
 8017b06:	1d1a      	adds	r2, r3, #4
 8017b08:	681b      	ldr	r3, [r3, #0]
 8017b0a:	9203      	str	r2, [sp, #12]
 8017b0c:	2b00      	cmp	r3, #0
 8017b0e:	bfb8      	it	lt
 8017b10:	f04f 33ff 	movlt.w	r3, #4294967295
 8017b14:	f108 0802 	add.w	r8, r8, #2
 8017b18:	9305      	str	r3, [sp, #20]
 8017b1a:	4d33      	ldr	r5, [pc, #204]	; (8017be8 <_vfiprintf_r+0x21c>)
 8017b1c:	f898 1000 	ldrb.w	r1, [r8]
 8017b20:	2203      	movs	r2, #3
 8017b22:	4628      	mov	r0, r5
 8017b24:	f7e8 fba4 	bl	8000270 <memchr>
 8017b28:	b140      	cbz	r0, 8017b3c <_vfiprintf_r+0x170>
 8017b2a:	2340      	movs	r3, #64	; 0x40
 8017b2c:	1b40      	subs	r0, r0, r5
 8017b2e:	fa03 f000 	lsl.w	r0, r3, r0
 8017b32:	9b04      	ldr	r3, [sp, #16]
 8017b34:	4303      	orrs	r3, r0
 8017b36:	f108 0801 	add.w	r8, r8, #1
 8017b3a:	9304      	str	r3, [sp, #16]
 8017b3c:	f898 1000 	ldrb.w	r1, [r8]
 8017b40:	482a      	ldr	r0, [pc, #168]	; (8017bec <_vfiprintf_r+0x220>)
 8017b42:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8017b46:	2206      	movs	r2, #6
 8017b48:	f108 0701 	add.w	r7, r8, #1
 8017b4c:	f7e8 fb90 	bl	8000270 <memchr>
 8017b50:	2800      	cmp	r0, #0
 8017b52:	d037      	beq.n	8017bc4 <_vfiprintf_r+0x1f8>
 8017b54:	4b26      	ldr	r3, [pc, #152]	; (8017bf0 <_vfiprintf_r+0x224>)
 8017b56:	bb1b      	cbnz	r3, 8017ba0 <_vfiprintf_r+0x1d4>
 8017b58:	9b03      	ldr	r3, [sp, #12]
 8017b5a:	3307      	adds	r3, #7
 8017b5c:	f023 0307 	bic.w	r3, r3, #7
 8017b60:	3308      	adds	r3, #8
 8017b62:	9303      	str	r3, [sp, #12]
 8017b64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017b66:	444b      	add	r3, r9
 8017b68:	9309      	str	r3, [sp, #36]	; 0x24
 8017b6a:	e750      	b.n	8017a0e <_vfiprintf_r+0x42>
 8017b6c:	fb05 3202 	mla	r2, r5, r2, r3
 8017b70:	2001      	movs	r0, #1
 8017b72:	4688      	mov	r8, r1
 8017b74:	e78a      	b.n	8017a8c <_vfiprintf_r+0xc0>
 8017b76:	2300      	movs	r3, #0
 8017b78:	f108 0801 	add.w	r8, r8, #1
 8017b7c:	9305      	str	r3, [sp, #20]
 8017b7e:	4619      	mov	r1, r3
 8017b80:	250a      	movs	r5, #10
 8017b82:	4640      	mov	r0, r8
 8017b84:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017b88:	3a30      	subs	r2, #48	; 0x30
 8017b8a:	2a09      	cmp	r2, #9
 8017b8c:	d903      	bls.n	8017b96 <_vfiprintf_r+0x1ca>
 8017b8e:	2b00      	cmp	r3, #0
 8017b90:	d0c3      	beq.n	8017b1a <_vfiprintf_r+0x14e>
 8017b92:	9105      	str	r1, [sp, #20]
 8017b94:	e7c1      	b.n	8017b1a <_vfiprintf_r+0x14e>
 8017b96:	fb05 2101 	mla	r1, r5, r1, r2
 8017b9a:	2301      	movs	r3, #1
 8017b9c:	4680      	mov	r8, r0
 8017b9e:	e7f0      	b.n	8017b82 <_vfiprintf_r+0x1b6>
 8017ba0:	ab03      	add	r3, sp, #12
 8017ba2:	9300      	str	r3, [sp, #0]
 8017ba4:	4622      	mov	r2, r4
 8017ba6:	4b13      	ldr	r3, [pc, #76]	; (8017bf4 <_vfiprintf_r+0x228>)
 8017ba8:	a904      	add	r1, sp, #16
 8017baa:	4630      	mov	r0, r6
 8017bac:	f3af 8000 	nop.w
 8017bb0:	f1b0 3fff 	cmp.w	r0, #4294967295
 8017bb4:	4681      	mov	r9, r0
 8017bb6:	d1d5      	bne.n	8017b64 <_vfiprintf_r+0x198>
 8017bb8:	89a3      	ldrh	r3, [r4, #12]
 8017bba:	065b      	lsls	r3, r3, #25
 8017bbc:	f53f af7e 	bmi.w	8017abc <_vfiprintf_r+0xf0>
 8017bc0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017bc2:	e77d      	b.n	8017ac0 <_vfiprintf_r+0xf4>
 8017bc4:	ab03      	add	r3, sp, #12
 8017bc6:	9300      	str	r3, [sp, #0]
 8017bc8:	4622      	mov	r2, r4
 8017bca:	4b0a      	ldr	r3, [pc, #40]	; (8017bf4 <_vfiprintf_r+0x228>)
 8017bcc:	a904      	add	r1, sp, #16
 8017bce:	4630      	mov	r0, r6
 8017bd0:	f000 f888 	bl	8017ce4 <_printf_i>
 8017bd4:	e7ec      	b.n	8017bb0 <_vfiprintf_r+0x1e4>
 8017bd6:	bf00      	nop
 8017bd8:	0801ba7c 	.word	0x0801ba7c
 8017bdc:	0801babc 	.word	0x0801babc
 8017be0:	0801ba9c 	.word	0x0801ba9c
 8017be4:	0801ba5c 	.word	0x0801ba5c
 8017be8:	0801bac2 	.word	0x0801bac2
 8017bec:	0801bac6 	.word	0x0801bac6
 8017bf0:	00000000 	.word	0x00000000
 8017bf4:	080179a7 	.word	0x080179a7

08017bf8 <_printf_common>:
 8017bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017bfc:	4691      	mov	r9, r2
 8017bfe:	461f      	mov	r7, r3
 8017c00:	688a      	ldr	r2, [r1, #8]
 8017c02:	690b      	ldr	r3, [r1, #16]
 8017c04:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8017c08:	4293      	cmp	r3, r2
 8017c0a:	bfb8      	it	lt
 8017c0c:	4613      	movlt	r3, r2
 8017c0e:	f8c9 3000 	str.w	r3, [r9]
 8017c12:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8017c16:	4606      	mov	r6, r0
 8017c18:	460c      	mov	r4, r1
 8017c1a:	b112      	cbz	r2, 8017c22 <_printf_common+0x2a>
 8017c1c:	3301      	adds	r3, #1
 8017c1e:	f8c9 3000 	str.w	r3, [r9]
 8017c22:	6823      	ldr	r3, [r4, #0]
 8017c24:	0699      	lsls	r1, r3, #26
 8017c26:	bf42      	ittt	mi
 8017c28:	f8d9 3000 	ldrmi.w	r3, [r9]
 8017c2c:	3302      	addmi	r3, #2
 8017c2e:	f8c9 3000 	strmi.w	r3, [r9]
 8017c32:	6825      	ldr	r5, [r4, #0]
 8017c34:	f015 0506 	ands.w	r5, r5, #6
 8017c38:	d107      	bne.n	8017c4a <_printf_common+0x52>
 8017c3a:	f104 0a19 	add.w	sl, r4, #25
 8017c3e:	68e3      	ldr	r3, [r4, #12]
 8017c40:	f8d9 2000 	ldr.w	r2, [r9]
 8017c44:	1a9b      	subs	r3, r3, r2
 8017c46:	42ab      	cmp	r3, r5
 8017c48:	dc28      	bgt.n	8017c9c <_printf_common+0xa4>
 8017c4a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8017c4e:	6822      	ldr	r2, [r4, #0]
 8017c50:	3300      	adds	r3, #0
 8017c52:	bf18      	it	ne
 8017c54:	2301      	movne	r3, #1
 8017c56:	0692      	lsls	r2, r2, #26
 8017c58:	d42d      	bmi.n	8017cb6 <_printf_common+0xbe>
 8017c5a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8017c5e:	4639      	mov	r1, r7
 8017c60:	4630      	mov	r0, r6
 8017c62:	47c0      	blx	r8
 8017c64:	3001      	adds	r0, #1
 8017c66:	d020      	beq.n	8017caa <_printf_common+0xb2>
 8017c68:	6823      	ldr	r3, [r4, #0]
 8017c6a:	68e5      	ldr	r5, [r4, #12]
 8017c6c:	f8d9 2000 	ldr.w	r2, [r9]
 8017c70:	f003 0306 	and.w	r3, r3, #6
 8017c74:	2b04      	cmp	r3, #4
 8017c76:	bf08      	it	eq
 8017c78:	1aad      	subeq	r5, r5, r2
 8017c7a:	68a3      	ldr	r3, [r4, #8]
 8017c7c:	6922      	ldr	r2, [r4, #16]
 8017c7e:	bf0c      	ite	eq
 8017c80:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8017c84:	2500      	movne	r5, #0
 8017c86:	4293      	cmp	r3, r2
 8017c88:	bfc4      	itt	gt
 8017c8a:	1a9b      	subgt	r3, r3, r2
 8017c8c:	18ed      	addgt	r5, r5, r3
 8017c8e:	f04f 0900 	mov.w	r9, #0
 8017c92:	341a      	adds	r4, #26
 8017c94:	454d      	cmp	r5, r9
 8017c96:	d11a      	bne.n	8017cce <_printf_common+0xd6>
 8017c98:	2000      	movs	r0, #0
 8017c9a:	e008      	b.n	8017cae <_printf_common+0xb6>
 8017c9c:	2301      	movs	r3, #1
 8017c9e:	4652      	mov	r2, sl
 8017ca0:	4639      	mov	r1, r7
 8017ca2:	4630      	mov	r0, r6
 8017ca4:	47c0      	blx	r8
 8017ca6:	3001      	adds	r0, #1
 8017ca8:	d103      	bne.n	8017cb2 <_printf_common+0xba>
 8017caa:	f04f 30ff 	mov.w	r0, #4294967295
 8017cae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017cb2:	3501      	adds	r5, #1
 8017cb4:	e7c3      	b.n	8017c3e <_printf_common+0x46>
 8017cb6:	18e1      	adds	r1, r4, r3
 8017cb8:	1c5a      	adds	r2, r3, #1
 8017cba:	2030      	movs	r0, #48	; 0x30
 8017cbc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8017cc0:	4422      	add	r2, r4
 8017cc2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8017cc6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8017cca:	3302      	adds	r3, #2
 8017ccc:	e7c5      	b.n	8017c5a <_printf_common+0x62>
 8017cce:	2301      	movs	r3, #1
 8017cd0:	4622      	mov	r2, r4
 8017cd2:	4639      	mov	r1, r7
 8017cd4:	4630      	mov	r0, r6
 8017cd6:	47c0      	blx	r8
 8017cd8:	3001      	adds	r0, #1
 8017cda:	d0e6      	beq.n	8017caa <_printf_common+0xb2>
 8017cdc:	f109 0901 	add.w	r9, r9, #1
 8017ce0:	e7d8      	b.n	8017c94 <_printf_common+0x9c>
	...

08017ce4 <_printf_i>:
 8017ce4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017ce8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8017cec:	460c      	mov	r4, r1
 8017cee:	7e09      	ldrb	r1, [r1, #24]
 8017cf0:	b085      	sub	sp, #20
 8017cf2:	296e      	cmp	r1, #110	; 0x6e
 8017cf4:	4617      	mov	r7, r2
 8017cf6:	4606      	mov	r6, r0
 8017cf8:	4698      	mov	r8, r3
 8017cfa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8017cfc:	f000 80b3 	beq.w	8017e66 <_printf_i+0x182>
 8017d00:	d822      	bhi.n	8017d48 <_printf_i+0x64>
 8017d02:	2963      	cmp	r1, #99	; 0x63
 8017d04:	d036      	beq.n	8017d74 <_printf_i+0x90>
 8017d06:	d80a      	bhi.n	8017d1e <_printf_i+0x3a>
 8017d08:	2900      	cmp	r1, #0
 8017d0a:	f000 80b9 	beq.w	8017e80 <_printf_i+0x19c>
 8017d0e:	2958      	cmp	r1, #88	; 0x58
 8017d10:	f000 8083 	beq.w	8017e1a <_printf_i+0x136>
 8017d14:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8017d18:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8017d1c:	e032      	b.n	8017d84 <_printf_i+0xa0>
 8017d1e:	2964      	cmp	r1, #100	; 0x64
 8017d20:	d001      	beq.n	8017d26 <_printf_i+0x42>
 8017d22:	2969      	cmp	r1, #105	; 0x69
 8017d24:	d1f6      	bne.n	8017d14 <_printf_i+0x30>
 8017d26:	6820      	ldr	r0, [r4, #0]
 8017d28:	6813      	ldr	r3, [r2, #0]
 8017d2a:	0605      	lsls	r5, r0, #24
 8017d2c:	f103 0104 	add.w	r1, r3, #4
 8017d30:	d52a      	bpl.n	8017d88 <_printf_i+0xa4>
 8017d32:	681b      	ldr	r3, [r3, #0]
 8017d34:	6011      	str	r1, [r2, #0]
 8017d36:	2b00      	cmp	r3, #0
 8017d38:	da03      	bge.n	8017d42 <_printf_i+0x5e>
 8017d3a:	222d      	movs	r2, #45	; 0x2d
 8017d3c:	425b      	negs	r3, r3
 8017d3e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8017d42:	486f      	ldr	r0, [pc, #444]	; (8017f00 <_printf_i+0x21c>)
 8017d44:	220a      	movs	r2, #10
 8017d46:	e039      	b.n	8017dbc <_printf_i+0xd8>
 8017d48:	2973      	cmp	r1, #115	; 0x73
 8017d4a:	f000 809d 	beq.w	8017e88 <_printf_i+0x1a4>
 8017d4e:	d808      	bhi.n	8017d62 <_printf_i+0x7e>
 8017d50:	296f      	cmp	r1, #111	; 0x6f
 8017d52:	d020      	beq.n	8017d96 <_printf_i+0xb2>
 8017d54:	2970      	cmp	r1, #112	; 0x70
 8017d56:	d1dd      	bne.n	8017d14 <_printf_i+0x30>
 8017d58:	6823      	ldr	r3, [r4, #0]
 8017d5a:	f043 0320 	orr.w	r3, r3, #32
 8017d5e:	6023      	str	r3, [r4, #0]
 8017d60:	e003      	b.n	8017d6a <_printf_i+0x86>
 8017d62:	2975      	cmp	r1, #117	; 0x75
 8017d64:	d017      	beq.n	8017d96 <_printf_i+0xb2>
 8017d66:	2978      	cmp	r1, #120	; 0x78
 8017d68:	d1d4      	bne.n	8017d14 <_printf_i+0x30>
 8017d6a:	2378      	movs	r3, #120	; 0x78
 8017d6c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8017d70:	4864      	ldr	r0, [pc, #400]	; (8017f04 <_printf_i+0x220>)
 8017d72:	e055      	b.n	8017e20 <_printf_i+0x13c>
 8017d74:	6813      	ldr	r3, [r2, #0]
 8017d76:	1d19      	adds	r1, r3, #4
 8017d78:	681b      	ldr	r3, [r3, #0]
 8017d7a:	6011      	str	r1, [r2, #0]
 8017d7c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8017d80:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8017d84:	2301      	movs	r3, #1
 8017d86:	e08c      	b.n	8017ea2 <_printf_i+0x1be>
 8017d88:	681b      	ldr	r3, [r3, #0]
 8017d8a:	6011      	str	r1, [r2, #0]
 8017d8c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8017d90:	bf18      	it	ne
 8017d92:	b21b      	sxthne	r3, r3
 8017d94:	e7cf      	b.n	8017d36 <_printf_i+0x52>
 8017d96:	6813      	ldr	r3, [r2, #0]
 8017d98:	6825      	ldr	r5, [r4, #0]
 8017d9a:	1d18      	adds	r0, r3, #4
 8017d9c:	6010      	str	r0, [r2, #0]
 8017d9e:	0628      	lsls	r0, r5, #24
 8017da0:	d501      	bpl.n	8017da6 <_printf_i+0xc2>
 8017da2:	681b      	ldr	r3, [r3, #0]
 8017da4:	e002      	b.n	8017dac <_printf_i+0xc8>
 8017da6:	0668      	lsls	r0, r5, #25
 8017da8:	d5fb      	bpl.n	8017da2 <_printf_i+0xbe>
 8017daa:	881b      	ldrh	r3, [r3, #0]
 8017dac:	4854      	ldr	r0, [pc, #336]	; (8017f00 <_printf_i+0x21c>)
 8017dae:	296f      	cmp	r1, #111	; 0x6f
 8017db0:	bf14      	ite	ne
 8017db2:	220a      	movne	r2, #10
 8017db4:	2208      	moveq	r2, #8
 8017db6:	2100      	movs	r1, #0
 8017db8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8017dbc:	6865      	ldr	r5, [r4, #4]
 8017dbe:	60a5      	str	r5, [r4, #8]
 8017dc0:	2d00      	cmp	r5, #0
 8017dc2:	f2c0 8095 	blt.w	8017ef0 <_printf_i+0x20c>
 8017dc6:	6821      	ldr	r1, [r4, #0]
 8017dc8:	f021 0104 	bic.w	r1, r1, #4
 8017dcc:	6021      	str	r1, [r4, #0]
 8017dce:	2b00      	cmp	r3, #0
 8017dd0:	d13d      	bne.n	8017e4e <_printf_i+0x16a>
 8017dd2:	2d00      	cmp	r5, #0
 8017dd4:	f040 808e 	bne.w	8017ef4 <_printf_i+0x210>
 8017dd8:	4665      	mov	r5, ip
 8017dda:	2a08      	cmp	r2, #8
 8017ddc:	d10b      	bne.n	8017df6 <_printf_i+0x112>
 8017dde:	6823      	ldr	r3, [r4, #0]
 8017de0:	07db      	lsls	r3, r3, #31
 8017de2:	d508      	bpl.n	8017df6 <_printf_i+0x112>
 8017de4:	6923      	ldr	r3, [r4, #16]
 8017de6:	6862      	ldr	r2, [r4, #4]
 8017de8:	429a      	cmp	r2, r3
 8017dea:	bfde      	ittt	le
 8017dec:	2330      	movle	r3, #48	; 0x30
 8017dee:	f805 3c01 	strble.w	r3, [r5, #-1]
 8017df2:	f105 35ff 	addle.w	r5, r5, #4294967295
 8017df6:	ebac 0305 	sub.w	r3, ip, r5
 8017dfa:	6123      	str	r3, [r4, #16]
 8017dfc:	f8cd 8000 	str.w	r8, [sp]
 8017e00:	463b      	mov	r3, r7
 8017e02:	aa03      	add	r2, sp, #12
 8017e04:	4621      	mov	r1, r4
 8017e06:	4630      	mov	r0, r6
 8017e08:	f7ff fef6 	bl	8017bf8 <_printf_common>
 8017e0c:	3001      	adds	r0, #1
 8017e0e:	d14d      	bne.n	8017eac <_printf_i+0x1c8>
 8017e10:	f04f 30ff 	mov.w	r0, #4294967295
 8017e14:	b005      	add	sp, #20
 8017e16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017e1a:	4839      	ldr	r0, [pc, #228]	; (8017f00 <_printf_i+0x21c>)
 8017e1c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8017e20:	6813      	ldr	r3, [r2, #0]
 8017e22:	6821      	ldr	r1, [r4, #0]
 8017e24:	1d1d      	adds	r5, r3, #4
 8017e26:	681b      	ldr	r3, [r3, #0]
 8017e28:	6015      	str	r5, [r2, #0]
 8017e2a:	060a      	lsls	r2, r1, #24
 8017e2c:	d50b      	bpl.n	8017e46 <_printf_i+0x162>
 8017e2e:	07ca      	lsls	r2, r1, #31
 8017e30:	bf44      	itt	mi
 8017e32:	f041 0120 	orrmi.w	r1, r1, #32
 8017e36:	6021      	strmi	r1, [r4, #0]
 8017e38:	b91b      	cbnz	r3, 8017e42 <_printf_i+0x15e>
 8017e3a:	6822      	ldr	r2, [r4, #0]
 8017e3c:	f022 0220 	bic.w	r2, r2, #32
 8017e40:	6022      	str	r2, [r4, #0]
 8017e42:	2210      	movs	r2, #16
 8017e44:	e7b7      	b.n	8017db6 <_printf_i+0xd2>
 8017e46:	064d      	lsls	r5, r1, #25
 8017e48:	bf48      	it	mi
 8017e4a:	b29b      	uxthmi	r3, r3
 8017e4c:	e7ef      	b.n	8017e2e <_printf_i+0x14a>
 8017e4e:	4665      	mov	r5, ip
 8017e50:	fbb3 f1f2 	udiv	r1, r3, r2
 8017e54:	fb02 3311 	mls	r3, r2, r1, r3
 8017e58:	5cc3      	ldrb	r3, [r0, r3]
 8017e5a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8017e5e:	460b      	mov	r3, r1
 8017e60:	2900      	cmp	r1, #0
 8017e62:	d1f5      	bne.n	8017e50 <_printf_i+0x16c>
 8017e64:	e7b9      	b.n	8017dda <_printf_i+0xf6>
 8017e66:	6813      	ldr	r3, [r2, #0]
 8017e68:	6825      	ldr	r5, [r4, #0]
 8017e6a:	6961      	ldr	r1, [r4, #20]
 8017e6c:	1d18      	adds	r0, r3, #4
 8017e6e:	6010      	str	r0, [r2, #0]
 8017e70:	0628      	lsls	r0, r5, #24
 8017e72:	681b      	ldr	r3, [r3, #0]
 8017e74:	d501      	bpl.n	8017e7a <_printf_i+0x196>
 8017e76:	6019      	str	r1, [r3, #0]
 8017e78:	e002      	b.n	8017e80 <_printf_i+0x19c>
 8017e7a:	066a      	lsls	r2, r5, #25
 8017e7c:	d5fb      	bpl.n	8017e76 <_printf_i+0x192>
 8017e7e:	8019      	strh	r1, [r3, #0]
 8017e80:	2300      	movs	r3, #0
 8017e82:	6123      	str	r3, [r4, #16]
 8017e84:	4665      	mov	r5, ip
 8017e86:	e7b9      	b.n	8017dfc <_printf_i+0x118>
 8017e88:	6813      	ldr	r3, [r2, #0]
 8017e8a:	1d19      	adds	r1, r3, #4
 8017e8c:	6011      	str	r1, [r2, #0]
 8017e8e:	681d      	ldr	r5, [r3, #0]
 8017e90:	6862      	ldr	r2, [r4, #4]
 8017e92:	2100      	movs	r1, #0
 8017e94:	4628      	mov	r0, r5
 8017e96:	f7e8 f9eb 	bl	8000270 <memchr>
 8017e9a:	b108      	cbz	r0, 8017ea0 <_printf_i+0x1bc>
 8017e9c:	1b40      	subs	r0, r0, r5
 8017e9e:	6060      	str	r0, [r4, #4]
 8017ea0:	6863      	ldr	r3, [r4, #4]
 8017ea2:	6123      	str	r3, [r4, #16]
 8017ea4:	2300      	movs	r3, #0
 8017ea6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017eaa:	e7a7      	b.n	8017dfc <_printf_i+0x118>
 8017eac:	6923      	ldr	r3, [r4, #16]
 8017eae:	462a      	mov	r2, r5
 8017eb0:	4639      	mov	r1, r7
 8017eb2:	4630      	mov	r0, r6
 8017eb4:	47c0      	blx	r8
 8017eb6:	3001      	adds	r0, #1
 8017eb8:	d0aa      	beq.n	8017e10 <_printf_i+0x12c>
 8017eba:	6823      	ldr	r3, [r4, #0]
 8017ebc:	079b      	lsls	r3, r3, #30
 8017ebe:	d413      	bmi.n	8017ee8 <_printf_i+0x204>
 8017ec0:	68e0      	ldr	r0, [r4, #12]
 8017ec2:	9b03      	ldr	r3, [sp, #12]
 8017ec4:	4298      	cmp	r0, r3
 8017ec6:	bfb8      	it	lt
 8017ec8:	4618      	movlt	r0, r3
 8017eca:	e7a3      	b.n	8017e14 <_printf_i+0x130>
 8017ecc:	2301      	movs	r3, #1
 8017ece:	464a      	mov	r2, r9
 8017ed0:	4639      	mov	r1, r7
 8017ed2:	4630      	mov	r0, r6
 8017ed4:	47c0      	blx	r8
 8017ed6:	3001      	adds	r0, #1
 8017ed8:	d09a      	beq.n	8017e10 <_printf_i+0x12c>
 8017eda:	3501      	adds	r5, #1
 8017edc:	68e3      	ldr	r3, [r4, #12]
 8017ede:	9a03      	ldr	r2, [sp, #12]
 8017ee0:	1a9b      	subs	r3, r3, r2
 8017ee2:	42ab      	cmp	r3, r5
 8017ee4:	dcf2      	bgt.n	8017ecc <_printf_i+0x1e8>
 8017ee6:	e7eb      	b.n	8017ec0 <_printf_i+0x1dc>
 8017ee8:	2500      	movs	r5, #0
 8017eea:	f104 0919 	add.w	r9, r4, #25
 8017eee:	e7f5      	b.n	8017edc <_printf_i+0x1f8>
 8017ef0:	2b00      	cmp	r3, #0
 8017ef2:	d1ac      	bne.n	8017e4e <_printf_i+0x16a>
 8017ef4:	7803      	ldrb	r3, [r0, #0]
 8017ef6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8017efa:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8017efe:	e76c      	b.n	8017dda <_printf_i+0xf6>
 8017f00:	0801bacd 	.word	0x0801bacd
 8017f04:	0801bade 	.word	0x0801bade

08017f08 <_sbrk_r>:
 8017f08:	b538      	push	{r3, r4, r5, lr}
 8017f0a:	4c06      	ldr	r4, [pc, #24]	; (8017f24 <_sbrk_r+0x1c>)
 8017f0c:	2300      	movs	r3, #0
 8017f0e:	4605      	mov	r5, r0
 8017f10:	4608      	mov	r0, r1
 8017f12:	6023      	str	r3, [r4, #0]
 8017f14:	f7e9 f8b4 	bl	8001080 <_sbrk>
 8017f18:	1c43      	adds	r3, r0, #1
 8017f1a:	d102      	bne.n	8017f22 <_sbrk_r+0x1a>
 8017f1c:	6823      	ldr	r3, [r4, #0]
 8017f1e:	b103      	cbz	r3, 8017f22 <_sbrk_r+0x1a>
 8017f20:	602b      	str	r3, [r5, #0]
 8017f22:	bd38      	pop	{r3, r4, r5, pc}
 8017f24:	2000d2a0 	.word	0x2000d2a0

08017f28 <__sread>:
 8017f28:	b510      	push	{r4, lr}
 8017f2a:	460c      	mov	r4, r1
 8017f2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017f30:	f000 fa48 	bl	80183c4 <_read_r>
 8017f34:	2800      	cmp	r0, #0
 8017f36:	bfab      	itete	ge
 8017f38:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8017f3a:	89a3      	ldrhlt	r3, [r4, #12]
 8017f3c:	181b      	addge	r3, r3, r0
 8017f3e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8017f42:	bfac      	ite	ge
 8017f44:	6563      	strge	r3, [r4, #84]	; 0x54
 8017f46:	81a3      	strhlt	r3, [r4, #12]
 8017f48:	bd10      	pop	{r4, pc}

08017f4a <__swrite>:
 8017f4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017f4e:	461f      	mov	r7, r3
 8017f50:	898b      	ldrh	r3, [r1, #12]
 8017f52:	05db      	lsls	r3, r3, #23
 8017f54:	4605      	mov	r5, r0
 8017f56:	460c      	mov	r4, r1
 8017f58:	4616      	mov	r6, r2
 8017f5a:	d505      	bpl.n	8017f68 <__swrite+0x1e>
 8017f5c:	2302      	movs	r3, #2
 8017f5e:	2200      	movs	r2, #0
 8017f60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017f64:	f000 f9b6 	bl	80182d4 <_lseek_r>
 8017f68:	89a3      	ldrh	r3, [r4, #12]
 8017f6a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017f6e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8017f72:	81a3      	strh	r3, [r4, #12]
 8017f74:	4632      	mov	r2, r6
 8017f76:	463b      	mov	r3, r7
 8017f78:	4628      	mov	r0, r5
 8017f7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017f7e:	f000 b869 	b.w	8018054 <_write_r>

08017f82 <__sseek>:
 8017f82:	b510      	push	{r4, lr}
 8017f84:	460c      	mov	r4, r1
 8017f86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017f8a:	f000 f9a3 	bl	80182d4 <_lseek_r>
 8017f8e:	1c43      	adds	r3, r0, #1
 8017f90:	89a3      	ldrh	r3, [r4, #12]
 8017f92:	bf15      	itete	ne
 8017f94:	6560      	strne	r0, [r4, #84]	; 0x54
 8017f96:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8017f9a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8017f9e:	81a3      	strheq	r3, [r4, #12]
 8017fa0:	bf18      	it	ne
 8017fa2:	81a3      	strhne	r3, [r4, #12]
 8017fa4:	bd10      	pop	{r4, pc}

08017fa6 <__sclose>:
 8017fa6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017faa:	f000 b8d3 	b.w	8018154 <_close_r>
	...

08017fb0 <__swbuf_r>:
 8017fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017fb2:	460e      	mov	r6, r1
 8017fb4:	4614      	mov	r4, r2
 8017fb6:	4605      	mov	r5, r0
 8017fb8:	b118      	cbz	r0, 8017fc2 <__swbuf_r+0x12>
 8017fba:	6983      	ldr	r3, [r0, #24]
 8017fbc:	b90b      	cbnz	r3, 8017fc2 <__swbuf_r+0x12>
 8017fbe:	f7ff fba1 	bl	8017704 <__sinit>
 8017fc2:	4b21      	ldr	r3, [pc, #132]	; (8018048 <__swbuf_r+0x98>)
 8017fc4:	429c      	cmp	r4, r3
 8017fc6:	d12a      	bne.n	801801e <__swbuf_r+0x6e>
 8017fc8:	686c      	ldr	r4, [r5, #4]
 8017fca:	69a3      	ldr	r3, [r4, #24]
 8017fcc:	60a3      	str	r3, [r4, #8]
 8017fce:	89a3      	ldrh	r3, [r4, #12]
 8017fd0:	071a      	lsls	r2, r3, #28
 8017fd2:	d52e      	bpl.n	8018032 <__swbuf_r+0x82>
 8017fd4:	6923      	ldr	r3, [r4, #16]
 8017fd6:	b363      	cbz	r3, 8018032 <__swbuf_r+0x82>
 8017fd8:	6923      	ldr	r3, [r4, #16]
 8017fda:	6820      	ldr	r0, [r4, #0]
 8017fdc:	1ac0      	subs	r0, r0, r3
 8017fde:	6963      	ldr	r3, [r4, #20]
 8017fe0:	b2f6      	uxtb	r6, r6
 8017fe2:	4283      	cmp	r3, r0
 8017fe4:	4637      	mov	r7, r6
 8017fe6:	dc04      	bgt.n	8017ff2 <__swbuf_r+0x42>
 8017fe8:	4621      	mov	r1, r4
 8017fea:	4628      	mov	r0, r5
 8017fec:	f000 f948 	bl	8018280 <_fflush_r>
 8017ff0:	bb28      	cbnz	r0, 801803e <__swbuf_r+0x8e>
 8017ff2:	68a3      	ldr	r3, [r4, #8]
 8017ff4:	3b01      	subs	r3, #1
 8017ff6:	60a3      	str	r3, [r4, #8]
 8017ff8:	6823      	ldr	r3, [r4, #0]
 8017ffa:	1c5a      	adds	r2, r3, #1
 8017ffc:	6022      	str	r2, [r4, #0]
 8017ffe:	701e      	strb	r6, [r3, #0]
 8018000:	6963      	ldr	r3, [r4, #20]
 8018002:	3001      	adds	r0, #1
 8018004:	4283      	cmp	r3, r0
 8018006:	d004      	beq.n	8018012 <__swbuf_r+0x62>
 8018008:	89a3      	ldrh	r3, [r4, #12]
 801800a:	07db      	lsls	r3, r3, #31
 801800c:	d519      	bpl.n	8018042 <__swbuf_r+0x92>
 801800e:	2e0a      	cmp	r6, #10
 8018010:	d117      	bne.n	8018042 <__swbuf_r+0x92>
 8018012:	4621      	mov	r1, r4
 8018014:	4628      	mov	r0, r5
 8018016:	f000 f933 	bl	8018280 <_fflush_r>
 801801a:	b190      	cbz	r0, 8018042 <__swbuf_r+0x92>
 801801c:	e00f      	b.n	801803e <__swbuf_r+0x8e>
 801801e:	4b0b      	ldr	r3, [pc, #44]	; (801804c <__swbuf_r+0x9c>)
 8018020:	429c      	cmp	r4, r3
 8018022:	d101      	bne.n	8018028 <__swbuf_r+0x78>
 8018024:	68ac      	ldr	r4, [r5, #8]
 8018026:	e7d0      	b.n	8017fca <__swbuf_r+0x1a>
 8018028:	4b09      	ldr	r3, [pc, #36]	; (8018050 <__swbuf_r+0xa0>)
 801802a:	429c      	cmp	r4, r3
 801802c:	bf08      	it	eq
 801802e:	68ec      	ldreq	r4, [r5, #12]
 8018030:	e7cb      	b.n	8017fca <__swbuf_r+0x1a>
 8018032:	4621      	mov	r1, r4
 8018034:	4628      	mov	r0, r5
 8018036:	f000 f81f 	bl	8018078 <__swsetup_r>
 801803a:	2800      	cmp	r0, #0
 801803c:	d0cc      	beq.n	8017fd8 <__swbuf_r+0x28>
 801803e:	f04f 37ff 	mov.w	r7, #4294967295
 8018042:	4638      	mov	r0, r7
 8018044:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018046:	bf00      	nop
 8018048:	0801ba7c 	.word	0x0801ba7c
 801804c:	0801ba9c 	.word	0x0801ba9c
 8018050:	0801ba5c 	.word	0x0801ba5c

08018054 <_write_r>:
 8018054:	b538      	push	{r3, r4, r5, lr}
 8018056:	4c07      	ldr	r4, [pc, #28]	; (8018074 <_write_r+0x20>)
 8018058:	4605      	mov	r5, r0
 801805a:	4608      	mov	r0, r1
 801805c:	4611      	mov	r1, r2
 801805e:	2200      	movs	r2, #0
 8018060:	6022      	str	r2, [r4, #0]
 8018062:	461a      	mov	r2, r3
 8018064:	f7e8 ffbb 	bl	8000fde <_write>
 8018068:	1c43      	adds	r3, r0, #1
 801806a:	d102      	bne.n	8018072 <_write_r+0x1e>
 801806c:	6823      	ldr	r3, [r4, #0]
 801806e:	b103      	cbz	r3, 8018072 <_write_r+0x1e>
 8018070:	602b      	str	r3, [r5, #0]
 8018072:	bd38      	pop	{r3, r4, r5, pc}
 8018074:	2000d2a0 	.word	0x2000d2a0

08018078 <__swsetup_r>:
 8018078:	4b32      	ldr	r3, [pc, #200]	; (8018144 <__swsetup_r+0xcc>)
 801807a:	b570      	push	{r4, r5, r6, lr}
 801807c:	681d      	ldr	r5, [r3, #0]
 801807e:	4606      	mov	r6, r0
 8018080:	460c      	mov	r4, r1
 8018082:	b125      	cbz	r5, 801808e <__swsetup_r+0x16>
 8018084:	69ab      	ldr	r3, [r5, #24]
 8018086:	b913      	cbnz	r3, 801808e <__swsetup_r+0x16>
 8018088:	4628      	mov	r0, r5
 801808a:	f7ff fb3b 	bl	8017704 <__sinit>
 801808e:	4b2e      	ldr	r3, [pc, #184]	; (8018148 <__swsetup_r+0xd0>)
 8018090:	429c      	cmp	r4, r3
 8018092:	d10f      	bne.n	80180b4 <__swsetup_r+0x3c>
 8018094:	686c      	ldr	r4, [r5, #4]
 8018096:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801809a:	b29a      	uxth	r2, r3
 801809c:	0715      	lsls	r5, r2, #28
 801809e:	d42c      	bmi.n	80180fa <__swsetup_r+0x82>
 80180a0:	06d0      	lsls	r0, r2, #27
 80180a2:	d411      	bmi.n	80180c8 <__swsetup_r+0x50>
 80180a4:	2209      	movs	r2, #9
 80180a6:	6032      	str	r2, [r6, #0]
 80180a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80180ac:	81a3      	strh	r3, [r4, #12]
 80180ae:	f04f 30ff 	mov.w	r0, #4294967295
 80180b2:	e03e      	b.n	8018132 <__swsetup_r+0xba>
 80180b4:	4b25      	ldr	r3, [pc, #148]	; (801814c <__swsetup_r+0xd4>)
 80180b6:	429c      	cmp	r4, r3
 80180b8:	d101      	bne.n	80180be <__swsetup_r+0x46>
 80180ba:	68ac      	ldr	r4, [r5, #8]
 80180bc:	e7eb      	b.n	8018096 <__swsetup_r+0x1e>
 80180be:	4b24      	ldr	r3, [pc, #144]	; (8018150 <__swsetup_r+0xd8>)
 80180c0:	429c      	cmp	r4, r3
 80180c2:	bf08      	it	eq
 80180c4:	68ec      	ldreq	r4, [r5, #12]
 80180c6:	e7e6      	b.n	8018096 <__swsetup_r+0x1e>
 80180c8:	0751      	lsls	r1, r2, #29
 80180ca:	d512      	bpl.n	80180f2 <__swsetup_r+0x7a>
 80180cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80180ce:	b141      	cbz	r1, 80180e2 <__swsetup_r+0x6a>
 80180d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80180d4:	4299      	cmp	r1, r3
 80180d6:	d002      	beq.n	80180de <__swsetup_r+0x66>
 80180d8:	4630      	mov	r0, r6
 80180da:	f7ff fba5 	bl	8017828 <_free_r>
 80180de:	2300      	movs	r3, #0
 80180e0:	6363      	str	r3, [r4, #52]	; 0x34
 80180e2:	89a3      	ldrh	r3, [r4, #12]
 80180e4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80180e8:	81a3      	strh	r3, [r4, #12]
 80180ea:	2300      	movs	r3, #0
 80180ec:	6063      	str	r3, [r4, #4]
 80180ee:	6923      	ldr	r3, [r4, #16]
 80180f0:	6023      	str	r3, [r4, #0]
 80180f2:	89a3      	ldrh	r3, [r4, #12]
 80180f4:	f043 0308 	orr.w	r3, r3, #8
 80180f8:	81a3      	strh	r3, [r4, #12]
 80180fa:	6923      	ldr	r3, [r4, #16]
 80180fc:	b94b      	cbnz	r3, 8018112 <__swsetup_r+0x9a>
 80180fe:	89a3      	ldrh	r3, [r4, #12]
 8018100:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8018104:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8018108:	d003      	beq.n	8018112 <__swsetup_r+0x9a>
 801810a:	4621      	mov	r1, r4
 801810c:	4630      	mov	r0, r6
 801810e:	f000 f917 	bl	8018340 <__smakebuf_r>
 8018112:	89a2      	ldrh	r2, [r4, #12]
 8018114:	f012 0301 	ands.w	r3, r2, #1
 8018118:	d00c      	beq.n	8018134 <__swsetup_r+0xbc>
 801811a:	2300      	movs	r3, #0
 801811c:	60a3      	str	r3, [r4, #8]
 801811e:	6963      	ldr	r3, [r4, #20]
 8018120:	425b      	negs	r3, r3
 8018122:	61a3      	str	r3, [r4, #24]
 8018124:	6923      	ldr	r3, [r4, #16]
 8018126:	b953      	cbnz	r3, 801813e <__swsetup_r+0xc6>
 8018128:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801812c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8018130:	d1ba      	bne.n	80180a8 <__swsetup_r+0x30>
 8018132:	bd70      	pop	{r4, r5, r6, pc}
 8018134:	0792      	lsls	r2, r2, #30
 8018136:	bf58      	it	pl
 8018138:	6963      	ldrpl	r3, [r4, #20]
 801813a:	60a3      	str	r3, [r4, #8]
 801813c:	e7f2      	b.n	8018124 <__swsetup_r+0xac>
 801813e:	2000      	movs	r0, #0
 8018140:	e7f7      	b.n	8018132 <__swsetup_r+0xba>
 8018142:	bf00      	nop
 8018144:	20000018 	.word	0x20000018
 8018148:	0801ba7c 	.word	0x0801ba7c
 801814c:	0801ba9c 	.word	0x0801ba9c
 8018150:	0801ba5c 	.word	0x0801ba5c

08018154 <_close_r>:
 8018154:	b538      	push	{r3, r4, r5, lr}
 8018156:	4c06      	ldr	r4, [pc, #24]	; (8018170 <_close_r+0x1c>)
 8018158:	2300      	movs	r3, #0
 801815a:	4605      	mov	r5, r0
 801815c:	4608      	mov	r0, r1
 801815e:	6023      	str	r3, [r4, #0]
 8018160:	f7e8 ff59 	bl	8001016 <_close>
 8018164:	1c43      	adds	r3, r0, #1
 8018166:	d102      	bne.n	801816e <_close_r+0x1a>
 8018168:	6823      	ldr	r3, [r4, #0]
 801816a:	b103      	cbz	r3, 801816e <_close_r+0x1a>
 801816c:	602b      	str	r3, [r5, #0]
 801816e:	bd38      	pop	{r3, r4, r5, pc}
 8018170:	2000d2a0 	.word	0x2000d2a0

08018174 <__sflush_r>:
 8018174:	898a      	ldrh	r2, [r1, #12]
 8018176:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801817a:	4605      	mov	r5, r0
 801817c:	0710      	lsls	r0, r2, #28
 801817e:	460c      	mov	r4, r1
 8018180:	d458      	bmi.n	8018234 <__sflush_r+0xc0>
 8018182:	684b      	ldr	r3, [r1, #4]
 8018184:	2b00      	cmp	r3, #0
 8018186:	dc05      	bgt.n	8018194 <__sflush_r+0x20>
 8018188:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801818a:	2b00      	cmp	r3, #0
 801818c:	dc02      	bgt.n	8018194 <__sflush_r+0x20>
 801818e:	2000      	movs	r0, #0
 8018190:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018194:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8018196:	2e00      	cmp	r6, #0
 8018198:	d0f9      	beq.n	801818e <__sflush_r+0x1a>
 801819a:	2300      	movs	r3, #0
 801819c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80181a0:	682f      	ldr	r7, [r5, #0]
 80181a2:	6a21      	ldr	r1, [r4, #32]
 80181a4:	602b      	str	r3, [r5, #0]
 80181a6:	d032      	beq.n	801820e <__sflush_r+0x9a>
 80181a8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80181aa:	89a3      	ldrh	r3, [r4, #12]
 80181ac:	075a      	lsls	r2, r3, #29
 80181ae:	d505      	bpl.n	80181bc <__sflush_r+0x48>
 80181b0:	6863      	ldr	r3, [r4, #4]
 80181b2:	1ac0      	subs	r0, r0, r3
 80181b4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80181b6:	b10b      	cbz	r3, 80181bc <__sflush_r+0x48>
 80181b8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80181ba:	1ac0      	subs	r0, r0, r3
 80181bc:	2300      	movs	r3, #0
 80181be:	4602      	mov	r2, r0
 80181c0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80181c2:	6a21      	ldr	r1, [r4, #32]
 80181c4:	4628      	mov	r0, r5
 80181c6:	47b0      	blx	r6
 80181c8:	1c43      	adds	r3, r0, #1
 80181ca:	89a3      	ldrh	r3, [r4, #12]
 80181cc:	d106      	bne.n	80181dc <__sflush_r+0x68>
 80181ce:	6829      	ldr	r1, [r5, #0]
 80181d0:	291d      	cmp	r1, #29
 80181d2:	d848      	bhi.n	8018266 <__sflush_r+0xf2>
 80181d4:	4a29      	ldr	r2, [pc, #164]	; (801827c <__sflush_r+0x108>)
 80181d6:	40ca      	lsrs	r2, r1
 80181d8:	07d6      	lsls	r6, r2, #31
 80181da:	d544      	bpl.n	8018266 <__sflush_r+0xf2>
 80181dc:	2200      	movs	r2, #0
 80181de:	6062      	str	r2, [r4, #4]
 80181e0:	04d9      	lsls	r1, r3, #19
 80181e2:	6922      	ldr	r2, [r4, #16]
 80181e4:	6022      	str	r2, [r4, #0]
 80181e6:	d504      	bpl.n	80181f2 <__sflush_r+0x7e>
 80181e8:	1c42      	adds	r2, r0, #1
 80181ea:	d101      	bne.n	80181f0 <__sflush_r+0x7c>
 80181ec:	682b      	ldr	r3, [r5, #0]
 80181ee:	b903      	cbnz	r3, 80181f2 <__sflush_r+0x7e>
 80181f0:	6560      	str	r0, [r4, #84]	; 0x54
 80181f2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80181f4:	602f      	str	r7, [r5, #0]
 80181f6:	2900      	cmp	r1, #0
 80181f8:	d0c9      	beq.n	801818e <__sflush_r+0x1a>
 80181fa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80181fe:	4299      	cmp	r1, r3
 8018200:	d002      	beq.n	8018208 <__sflush_r+0x94>
 8018202:	4628      	mov	r0, r5
 8018204:	f7ff fb10 	bl	8017828 <_free_r>
 8018208:	2000      	movs	r0, #0
 801820a:	6360      	str	r0, [r4, #52]	; 0x34
 801820c:	e7c0      	b.n	8018190 <__sflush_r+0x1c>
 801820e:	2301      	movs	r3, #1
 8018210:	4628      	mov	r0, r5
 8018212:	47b0      	blx	r6
 8018214:	1c41      	adds	r1, r0, #1
 8018216:	d1c8      	bne.n	80181aa <__sflush_r+0x36>
 8018218:	682b      	ldr	r3, [r5, #0]
 801821a:	2b00      	cmp	r3, #0
 801821c:	d0c5      	beq.n	80181aa <__sflush_r+0x36>
 801821e:	2b1d      	cmp	r3, #29
 8018220:	d001      	beq.n	8018226 <__sflush_r+0xb2>
 8018222:	2b16      	cmp	r3, #22
 8018224:	d101      	bne.n	801822a <__sflush_r+0xb6>
 8018226:	602f      	str	r7, [r5, #0]
 8018228:	e7b1      	b.n	801818e <__sflush_r+0x1a>
 801822a:	89a3      	ldrh	r3, [r4, #12]
 801822c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018230:	81a3      	strh	r3, [r4, #12]
 8018232:	e7ad      	b.n	8018190 <__sflush_r+0x1c>
 8018234:	690f      	ldr	r7, [r1, #16]
 8018236:	2f00      	cmp	r7, #0
 8018238:	d0a9      	beq.n	801818e <__sflush_r+0x1a>
 801823a:	0793      	lsls	r3, r2, #30
 801823c:	680e      	ldr	r6, [r1, #0]
 801823e:	bf08      	it	eq
 8018240:	694b      	ldreq	r3, [r1, #20]
 8018242:	600f      	str	r7, [r1, #0]
 8018244:	bf18      	it	ne
 8018246:	2300      	movne	r3, #0
 8018248:	eba6 0807 	sub.w	r8, r6, r7
 801824c:	608b      	str	r3, [r1, #8]
 801824e:	f1b8 0f00 	cmp.w	r8, #0
 8018252:	dd9c      	ble.n	801818e <__sflush_r+0x1a>
 8018254:	4643      	mov	r3, r8
 8018256:	463a      	mov	r2, r7
 8018258:	6a21      	ldr	r1, [r4, #32]
 801825a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801825c:	4628      	mov	r0, r5
 801825e:	47b0      	blx	r6
 8018260:	2800      	cmp	r0, #0
 8018262:	dc06      	bgt.n	8018272 <__sflush_r+0xfe>
 8018264:	89a3      	ldrh	r3, [r4, #12]
 8018266:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801826a:	81a3      	strh	r3, [r4, #12]
 801826c:	f04f 30ff 	mov.w	r0, #4294967295
 8018270:	e78e      	b.n	8018190 <__sflush_r+0x1c>
 8018272:	4407      	add	r7, r0
 8018274:	eba8 0800 	sub.w	r8, r8, r0
 8018278:	e7e9      	b.n	801824e <__sflush_r+0xda>
 801827a:	bf00      	nop
 801827c:	20400001 	.word	0x20400001

08018280 <_fflush_r>:
 8018280:	b538      	push	{r3, r4, r5, lr}
 8018282:	690b      	ldr	r3, [r1, #16]
 8018284:	4605      	mov	r5, r0
 8018286:	460c      	mov	r4, r1
 8018288:	b1db      	cbz	r3, 80182c2 <_fflush_r+0x42>
 801828a:	b118      	cbz	r0, 8018294 <_fflush_r+0x14>
 801828c:	6983      	ldr	r3, [r0, #24]
 801828e:	b90b      	cbnz	r3, 8018294 <_fflush_r+0x14>
 8018290:	f7ff fa38 	bl	8017704 <__sinit>
 8018294:	4b0c      	ldr	r3, [pc, #48]	; (80182c8 <_fflush_r+0x48>)
 8018296:	429c      	cmp	r4, r3
 8018298:	d109      	bne.n	80182ae <_fflush_r+0x2e>
 801829a:	686c      	ldr	r4, [r5, #4]
 801829c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80182a0:	b17b      	cbz	r3, 80182c2 <_fflush_r+0x42>
 80182a2:	4621      	mov	r1, r4
 80182a4:	4628      	mov	r0, r5
 80182a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80182aa:	f7ff bf63 	b.w	8018174 <__sflush_r>
 80182ae:	4b07      	ldr	r3, [pc, #28]	; (80182cc <_fflush_r+0x4c>)
 80182b0:	429c      	cmp	r4, r3
 80182b2:	d101      	bne.n	80182b8 <_fflush_r+0x38>
 80182b4:	68ac      	ldr	r4, [r5, #8]
 80182b6:	e7f1      	b.n	801829c <_fflush_r+0x1c>
 80182b8:	4b05      	ldr	r3, [pc, #20]	; (80182d0 <_fflush_r+0x50>)
 80182ba:	429c      	cmp	r4, r3
 80182bc:	bf08      	it	eq
 80182be:	68ec      	ldreq	r4, [r5, #12]
 80182c0:	e7ec      	b.n	801829c <_fflush_r+0x1c>
 80182c2:	2000      	movs	r0, #0
 80182c4:	bd38      	pop	{r3, r4, r5, pc}
 80182c6:	bf00      	nop
 80182c8:	0801ba7c 	.word	0x0801ba7c
 80182cc:	0801ba9c 	.word	0x0801ba9c
 80182d0:	0801ba5c 	.word	0x0801ba5c

080182d4 <_lseek_r>:
 80182d4:	b538      	push	{r3, r4, r5, lr}
 80182d6:	4c07      	ldr	r4, [pc, #28]	; (80182f4 <_lseek_r+0x20>)
 80182d8:	4605      	mov	r5, r0
 80182da:	4608      	mov	r0, r1
 80182dc:	4611      	mov	r1, r2
 80182de:	2200      	movs	r2, #0
 80182e0:	6022      	str	r2, [r4, #0]
 80182e2:	461a      	mov	r2, r3
 80182e4:	f7e8 febe 	bl	8001064 <_lseek>
 80182e8:	1c43      	adds	r3, r0, #1
 80182ea:	d102      	bne.n	80182f2 <_lseek_r+0x1e>
 80182ec:	6823      	ldr	r3, [r4, #0]
 80182ee:	b103      	cbz	r3, 80182f2 <_lseek_r+0x1e>
 80182f0:	602b      	str	r3, [r5, #0]
 80182f2:	bd38      	pop	{r3, r4, r5, pc}
 80182f4:	2000d2a0 	.word	0x2000d2a0

080182f8 <__swhatbuf_r>:
 80182f8:	b570      	push	{r4, r5, r6, lr}
 80182fa:	460e      	mov	r6, r1
 80182fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018300:	2900      	cmp	r1, #0
 8018302:	b096      	sub	sp, #88	; 0x58
 8018304:	4614      	mov	r4, r2
 8018306:	461d      	mov	r5, r3
 8018308:	da07      	bge.n	801831a <__swhatbuf_r+0x22>
 801830a:	2300      	movs	r3, #0
 801830c:	602b      	str	r3, [r5, #0]
 801830e:	89b3      	ldrh	r3, [r6, #12]
 8018310:	061a      	lsls	r2, r3, #24
 8018312:	d410      	bmi.n	8018336 <__swhatbuf_r+0x3e>
 8018314:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8018318:	e00e      	b.n	8018338 <__swhatbuf_r+0x40>
 801831a:	466a      	mov	r2, sp
 801831c:	f000 f864 	bl	80183e8 <_fstat_r>
 8018320:	2800      	cmp	r0, #0
 8018322:	dbf2      	blt.n	801830a <__swhatbuf_r+0x12>
 8018324:	9a01      	ldr	r2, [sp, #4]
 8018326:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801832a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801832e:	425a      	negs	r2, r3
 8018330:	415a      	adcs	r2, r3
 8018332:	602a      	str	r2, [r5, #0]
 8018334:	e7ee      	b.n	8018314 <__swhatbuf_r+0x1c>
 8018336:	2340      	movs	r3, #64	; 0x40
 8018338:	2000      	movs	r0, #0
 801833a:	6023      	str	r3, [r4, #0]
 801833c:	b016      	add	sp, #88	; 0x58
 801833e:	bd70      	pop	{r4, r5, r6, pc}

08018340 <__smakebuf_r>:
 8018340:	898b      	ldrh	r3, [r1, #12]
 8018342:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8018344:	079d      	lsls	r5, r3, #30
 8018346:	4606      	mov	r6, r0
 8018348:	460c      	mov	r4, r1
 801834a:	d507      	bpl.n	801835c <__smakebuf_r+0x1c>
 801834c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8018350:	6023      	str	r3, [r4, #0]
 8018352:	6123      	str	r3, [r4, #16]
 8018354:	2301      	movs	r3, #1
 8018356:	6163      	str	r3, [r4, #20]
 8018358:	b002      	add	sp, #8
 801835a:	bd70      	pop	{r4, r5, r6, pc}
 801835c:	ab01      	add	r3, sp, #4
 801835e:	466a      	mov	r2, sp
 8018360:	f7ff ffca 	bl	80182f8 <__swhatbuf_r>
 8018364:	9900      	ldr	r1, [sp, #0]
 8018366:	4605      	mov	r5, r0
 8018368:	4630      	mov	r0, r6
 801836a:	f7ff faab 	bl	80178c4 <_malloc_r>
 801836e:	b948      	cbnz	r0, 8018384 <__smakebuf_r+0x44>
 8018370:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018374:	059a      	lsls	r2, r3, #22
 8018376:	d4ef      	bmi.n	8018358 <__smakebuf_r+0x18>
 8018378:	f023 0303 	bic.w	r3, r3, #3
 801837c:	f043 0302 	orr.w	r3, r3, #2
 8018380:	81a3      	strh	r3, [r4, #12]
 8018382:	e7e3      	b.n	801834c <__smakebuf_r+0xc>
 8018384:	4b0d      	ldr	r3, [pc, #52]	; (80183bc <__smakebuf_r+0x7c>)
 8018386:	62b3      	str	r3, [r6, #40]	; 0x28
 8018388:	89a3      	ldrh	r3, [r4, #12]
 801838a:	6020      	str	r0, [r4, #0]
 801838c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018390:	81a3      	strh	r3, [r4, #12]
 8018392:	9b00      	ldr	r3, [sp, #0]
 8018394:	6163      	str	r3, [r4, #20]
 8018396:	9b01      	ldr	r3, [sp, #4]
 8018398:	6120      	str	r0, [r4, #16]
 801839a:	b15b      	cbz	r3, 80183b4 <__smakebuf_r+0x74>
 801839c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80183a0:	4630      	mov	r0, r6
 80183a2:	f000 f833 	bl	801840c <_isatty_r>
 80183a6:	b128      	cbz	r0, 80183b4 <__smakebuf_r+0x74>
 80183a8:	89a3      	ldrh	r3, [r4, #12]
 80183aa:	f023 0303 	bic.w	r3, r3, #3
 80183ae:	f043 0301 	orr.w	r3, r3, #1
 80183b2:	81a3      	strh	r3, [r4, #12]
 80183b4:	89a3      	ldrh	r3, [r4, #12]
 80183b6:	431d      	orrs	r5, r3
 80183b8:	81a5      	strh	r5, [r4, #12]
 80183ba:	e7cd      	b.n	8018358 <__smakebuf_r+0x18>
 80183bc:	080176cd 	.word	0x080176cd

080183c0 <__malloc_lock>:
 80183c0:	4770      	bx	lr

080183c2 <__malloc_unlock>:
 80183c2:	4770      	bx	lr

080183c4 <_read_r>:
 80183c4:	b538      	push	{r3, r4, r5, lr}
 80183c6:	4c07      	ldr	r4, [pc, #28]	; (80183e4 <_read_r+0x20>)
 80183c8:	4605      	mov	r5, r0
 80183ca:	4608      	mov	r0, r1
 80183cc:	4611      	mov	r1, r2
 80183ce:	2200      	movs	r2, #0
 80183d0:	6022      	str	r2, [r4, #0]
 80183d2:	461a      	mov	r2, r3
 80183d4:	f7e8 fde6 	bl	8000fa4 <_read>
 80183d8:	1c43      	adds	r3, r0, #1
 80183da:	d102      	bne.n	80183e2 <_read_r+0x1e>
 80183dc:	6823      	ldr	r3, [r4, #0]
 80183de:	b103      	cbz	r3, 80183e2 <_read_r+0x1e>
 80183e0:	602b      	str	r3, [r5, #0]
 80183e2:	bd38      	pop	{r3, r4, r5, pc}
 80183e4:	2000d2a0 	.word	0x2000d2a0

080183e8 <_fstat_r>:
 80183e8:	b538      	push	{r3, r4, r5, lr}
 80183ea:	4c07      	ldr	r4, [pc, #28]	; (8018408 <_fstat_r+0x20>)
 80183ec:	2300      	movs	r3, #0
 80183ee:	4605      	mov	r5, r0
 80183f0:	4608      	mov	r0, r1
 80183f2:	4611      	mov	r1, r2
 80183f4:	6023      	str	r3, [r4, #0]
 80183f6:	f7e8 fe1a 	bl	800102e <_fstat>
 80183fa:	1c43      	adds	r3, r0, #1
 80183fc:	d102      	bne.n	8018404 <_fstat_r+0x1c>
 80183fe:	6823      	ldr	r3, [r4, #0]
 8018400:	b103      	cbz	r3, 8018404 <_fstat_r+0x1c>
 8018402:	602b      	str	r3, [r5, #0]
 8018404:	bd38      	pop	{r3, r4, r5, pc}
 8018406:	bf00      	nop
 8018408:	2000d2a0 	.word	0x2000d2a0

0801840c <_isatty_r>:
 801840c:	b538      	push	{r3, r4, r5, lr}
 801840e:	4c06      	ldr	r4, [pc, #24]	; (8018428 <_isatty_r+0x1c>)
 8018410:	2300      	movs	r3, #0
 8018412:	4605      	mov	r5, r0
 8018414:	4608      	mov	r0, r1
 8018416:	6023      	str	r3, [r4, #0]
 8018418:	f7e8 fe19 	bl	800104e <_isatty>
 801841c:	1c43      	adds	r3, r0, #1
 801841e:	d102      	bne.n	8018426 <_isatty_r+0x1a>
 8018420:	6823      	ldr	r3, [r4, #0]
 8018422:	b103      	cbz	r3, 8018426 <_isatty_r+0x1a>
 8018424:	602b      	str	r3, [r5, #0]
 8018426:	bd38      	pop	{r3, r4, r5, pc}
 8018428:	2000d2a0 	.word	0x2000d2a0

0801842c <_init>:
 801842c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801842e:	bf00      	nop
 8018430:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018432:	bc08      	pop	{r3}
 8018434:	469e      	mov	lr, r3
 8018436:	4770      	bx	lr

08018438 <_fini>:
 8018438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801843a:	bf00      	nop
 801843c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801843e:	bc08      	pop	{r3}
 8018440:	469e      	mov	lr, r3
 8018442:	4770      	bx	lr
